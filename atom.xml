<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-08-11T19:55:50+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 4.1 で jQuery Raty を使ってみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-09-jquery-raty.html"/>
    <updated>2014-08-09T19:37:53+09:00</updated>
    <id>http://blog.n-z.jp/blog/jquery-raty</id>
    <content type="html"><![CDATA[<p>Rails で星を使った評価付けを使いたかったので、
jQuery プラグインを探してみたところ、
<a href="http://wbotelhos.com/raty" title="jQuery Raty">jQuery Raty</a>
というのが良さそうだったので使ってみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>jQuery Raty v2.7.0</li>
<li>Ruby on Rails 4.1.4</li>
<li>Ruby 2.1.2</li>
</ul>


<h2>うまくいかなかった方法</h2>

<p><a href="http://rubygems.org/" title="RubyGems.org">RubyGems.org</a>
の方には古いバージョンしかなさそうだったので、
<a href="https://rails-assets.org/" title="Rails Assets">Rails Assets</a>
で最新バージョンを使おうと思い、
<code>Gemfile</code> に以下の設定をしたのですが、
<code>raty</code> のディレクトリ配置が特殊なのか、
うまくいきませんでした。</p>

<pre><code class="ruby Gemfile">source 'https://rails-assets.org'
gem 'rails-assets-raty'
</code></pre>

<h3>development 環境では動いた方法</h3>

<p>以下のように書くことで development 環境では動いたのですが、
capistrano で deploy した先では画像が表示されていませんでした。</p>

<pre><code class="css app/assets/stylesheets/raty.css.scss">//= require raty/lib/jquery.raty
</code></pre>

<pre><code class="text app/assets/javascripts/raty.js.coffee.erb">#= require raty/lib/jquery.raty
 $ -&gt;
   $('.raty').raty
     cancel   : true
    cancelOff: '&lt;%= image_path('raty/lib/images/cancel-off.png') %&gt;'
    cancelOn : '&lt;%= image_path('raty/lib/images/cancel-on.png') %&gt;'
    starHalf : '&lt;%= image_path('raty/lib/images/star-half.png') %&gt;'
    starOff  : '&lt;%= image_path('raty/lib/images/star-off.png') %&gt;'
    starOn   : '&lt;%= image_path('raty/lib/images/star-on.png') %&gt;'
    click: (score, event) -&gt;
      raty = $(event.target).parent()
      $(raty.data('field')).val(score)
    score: -&gt;
      $($(this).data('field')).val()
</code></pre>

<h2>うまくいった方法</h2>

<p><code>vendor/assets/stylesheets/jquery.raty.css</code> と
<code>vendor/assets/javascripts/jquery.raty.js</code> に
ダウンロードしたファイルをおいて、
<code>assets</code> も以下のように書き換えました。
画像も <code>vendor/assets/images/raty</code> においてもうまくいかなかったので、
<code>vendor/assets/images/raty</code> におきました。</p>

<p>Web フォントは今回は使っていないので、
考慮していません。
<code>starType</code> を <code>i</code> に変更しない限り使われないはずなので、
Web フォントを配置しなくても問題ないと思います。</p>

<pre><code class="css app/assets/stylesheets/raty.css.scss">//= require jquery.raty
</code></pre>

<pre><code class="text app/assets/javascripts/raty.js.coffee.erb">#= require jquery.raty
 $ -&gt;
   $('.raty').raty
     cancel   : true
    cancelOff: '&lt;%= image_path('raty/cancel-off.png') %&gt;'
    cancelOn : '&lt;%= image_path('raty/cancel-on.png') %&gt;'
    starHalf : '&lt;%= image_path('raty/star-half.png') %&gt;'
    starOff  : '&lt;%= image_path('raty/star-off.png') %&gt;'
    starOn   : '&lt;%= image_path('raty/star-on.png') %&gt;'
    click: (score, event) -&gt;
      raty = $(event.target).parent()
      $(raty.data('field')).val(score)
    score: -&gt;
      $($(this).data('field')).val()
</code></pre>

<h2>フォームでの使用例</h2>

<p>bootstrap 3.2.0 の <code>form-horizontal</code> を使っているので、
slim で以下のように使っています。</p>

<pre><code class="text _form.html.slim">    .form-group
      = f.label :readability, class: "control-label col-md-2"
      .col-md-10
        .raty.form-control data-field='#book_report_readability'
        = f.hidden_field :readability, class: "form-control"
</code></pre>

<h2>show での使用例</h2>

<p>以下のように <code>raty</code> の星を使って表示しています。</p>

<pre><code class="ruby app/helpers/raty_helper.rb">module RatyHelper
  def raty_stars(n, max=5)
    (
      image_tag('raty/star-on.png', alt: '') * n +
      image_tag('raty/star-off.png', alt: '') * (max-n)
      ).html_safe
  end
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[boot2docker で VM のファイルをコンテナやホストと共有する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-06-docker-volume.html"/>
    <updated>2014-08-06T23:17:27+09:00</updated>
    <id>http://blog.n-z.jp/blog/docker-volume</id>
    <content type="html"><![CDATA[<p>Mac OS X 上の <code>boot2docker</code> でホストとコンテナでファイルを共有する方法を試してみました。
さらに <code>boot2docker ssh</code> で入ったときにも見えるような設定でも試してみました。</p>

<!--more-->


<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/numa08/items/e52bd18611ac159af1ac" title="boot2dockerでコンテナからホストのファイルを参照する - Qiita">boot2dockerでコンテナからホストのファイルを参照する - Qiita</a></li>
<li><a href="https://github.com/boot2docker/boot2docker#folder-sharing" title="Folder sharing">Folder sharing</a></li>
<li><a href="https://docs.docker.com/userguide/dockervolumes/" title="Managing data in containers - Docker Documentation">Managing data in containers - Docker Documentation</a></li>
</ul>


<h2>対象バージョン</h2>

<ul>
<li>Mac OS X 10.9.4</li>
<li>VirtualBox 4.3.14</li>
<li>docker 1.1.2</li>
<li>boot2docker 1.1.2</li>
</ul>


<h2>実行コマンド</h2>

<ul>
<li><code>docker run -v /mnt/sda1/data:/data --name my-data busybox true</code> で共有ボリューム用コンテナ作成</li>
<li><code>docker run --rm -v /usr/local/bin/docker:/docker -v /var/run/docker.sock:/docker.sock svendowideit/samba my-data</code> で samba 起動</li>
<li><code>docker run -it --rm --volumes-from my-data ubuntu /bin/bash</code> で確認</li>
</ul>


<h3>共有ボリューム用コンテナ作成</h3>

<p><a href="http://blog.n-z.jp/blog/2013-12-24-docker-rm.html" title="Dockerで不要になったコンテナやイメージを削除する">Dockerで不要になったコンテナやイメージを削除する</a>
のように <code>docker ps -a -q | xargs docker rm</code> などで停止しているコンテナを削除してしまうと
<code>my-data</code> という名前を付けたデータ保存用のコンテナも消えてしまうので、
<code>boot2docker</code> では永続化されているパーティションの <code>/mnt/sda1</code> に <code>data</code> をおくことにしました。</p>

<p>run の時点で <code>/mnt/sda1/data</code> は自動作成されるので、
あらかじめ作っておく必要はありません。</p>

<p>間違えてコンテナを削除してしまった場合は
<code>docker run -v /mnt/sda1/data:/data --name my-data busybox true</code>
で作成し直せばデータは残ったまま <code>my-data</code> コンテナを再作成できます。</p>

<p>このやり方は docker を動かすホストに依存してしまうので、
一般には標準のボリュームコンテナを作成する方法の方がおすすめのようです。</p>

<h3>共有ボリューム用コンテナ再作成 (標準の方法の場合)</h3>

<p><code>--volumes-from</code> で指定した共有は使っているコンテナがなくなってしまっても内容が残っていますが、
名前で指定して取り出す方法がなくなってしまうように見えます。</p>

<p><code>my-data</code> コンテナを削除してしまった場合、
<code>--volumes-from my-data</code> は使えなくなるので、
<code>docker run --volumes-from samba-server --name my-data busybox true</code>
のように残っているコンテナを <code>--volumes-from</code> で指定して再作成すれば、
また <code>docker run -it --rm --volumes-from my-data ubuntu /bin/bash</code> のように
<code>--volumes-from</code> に <code>my-data</code> を指定できるようになります。</p>

<h3>samba 起動</h3>

<p><code>docker run --rm -v /usr/local/bin/docker:/docker -v /var/run/docker.sock:/docker.sock svendowideit/samba my-data</code>
で samba を起動します。</p>

<p><code>docker.sock</code> も渡しているので、多重起動しないように既存の <code>samba-server</code> は止めてくれるようです。</p>

<p>起動時に以下のようにホスト側からの接続方法の説明が出ます。</p>

<pre><code>% docker run --rm -v /usr/local/bin/docker:/docker -v /var/run/docker.sock:/docker.sock svendowideit/samba my-data
stopping and removing existing server
starting samba server container sharing my-data:/data

# run 'docker logs samba-server' to view the samba logs

================================================

Your data volume (/data) should now be accessible at \\&lt;docker ip&gt;\ as 'guest' user (no password)

For example, on OSX, using a typical boot2docker vm:
    goto Go|Connect to Server in Finder
    enter 'cifs://192.168.59.103
    hit the 'Connect' button
    select the volumes you want to mount
    choose the 'Guest' radiobox and connect

Or on Linux:
    mount -t cifs //192.168.59.103/data /mnt/data -o username=guest

Or on Windows:
    Enter '\\192.168.59.103\data' into Explorer
    Log in as Guest - no password
</code></pre>

<h3>samba に接続</h3>

<p><code>boot2docker ip</code> で IP アドレスを確認して、
<code>192.168.59.103</code> なら、
<code>Finder</code> の <code>サーバへ接続</code> (メニューの <code>移動</code> の <code>サーバーへ接続...</code>) を開いて、
サーバアドレスとして <code>cifs://192.168.59.103/data</code> を入力して <code>接続</code> します。
<code>ユーザの種類</code> は <code>ゲスト</code> を選んで <code>接続</code> します。
すると <code>/Volumes/data</code> で見えるようになります。</p>

<p>Linux なら <code>mount -t cifs //192.168.59.103/data /mnt/data -o username=guest</code> のようにマウントするそうです。</p>

<p>Windows ならエクスプローラーで <code>\\192.168.59.103\data</code> にパスワードなしのゲスト接続すれば見えるそうです。</p>

<h3>別コンテナで確認</h3>

<p><code>docker run -it --rm --volumes-from my-data ubuntu /bin/bash</code> などで別コンテナを起動すると、
<code>/data</code> にマウントされているので、
<code>ls -l /data</code> で中身を確認したり、
<code>/data</code> の中にファイルを作成して他で見えることを確認しました。</p>

<h2>まとめ</h2>

<p><a href="https://github.com/boot2docker/boot2docker#folder-sharing">README に書いてある Folder sharing</a>
だと間違えて消してしまうことがあったので、ちょっと工夫した方法を紹介しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[boot2docker のシリアルコンソールにつなぐ]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-06-boot2docker-serial.html"/>
    <updated>2014-08-06T23:13:18+09:00</updated>
    <id>http://blog.n-z.jp/blog/boot2docker-serial</id>
    <content type="html"><![CDATA[<p>boot2docker-vm の設定をみていると、
<code>~/.boot2docker/boot2docker-vm.sock</code> にシリアルポートが設定されていたので使ってみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Mac OS X 10.9.4</li>
<li>VirtualBox 4.3.14</li>
<li>boot2docker 1.1.2</li>
</ul>


<h2>接続方法</h2>

<p><code>nc -U ~/.boot2docker/boot2docker-vm.sock</code>
で接続して一度 Enter を押してログインプロンプトを再表示させて
<code>docker</code> でログインできます。</p>

<p>Control+C の INT シグナルで <code>nc</code> が終了してしまうので、
普通は素直に <code>boot2docker ssh</code> を使う方が良さそうです。</p>

<p>ssh で入れなくなった時の予備の手段として知っておくと良いかもしれません。</p>

<pre><code>% nc -U ~/.boot2docker/boot2docker-vm.sock


Core Linux
boot2docker login: docker
docker
                        ##        .
                  ## ## ##       ==
               ## ## ## ##      ===
           /""""""""""""""""\___/ ===
      ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~
           \______ o          __/
             \    \        __/
              \____\______/
 _                 _   ____     _            _
| |__   ___   ___ | |_|___ \ __| | ___   ___| | _____ _ __
| '_ \ / _ \ / _ \| __| __) / _` |/ _ \ / __| |/ / _ \ '__|
| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__|   &lt;  __/ |
|_.__/ \___/ \___/ \__|_____\__,_|\___/ \___|_|\_\___|_|
boot2docker: 1.1.2
             master : 740106c - Thu Jul 24 03:24:10 UTC 2014
docker@boot2docker:~$
</code></pre>

<h2>参考サイト</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/hiboma/20140130/1391061776" title="Vagrant (VirtualBox) でシリアルコンソールに繋ぐ - hibomaのはてなダイアリー">Vagrant (VirtualBox) でシリアルコンソールに繋ぐ - hibomaのはてなダイアリー</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[boot2docker のバージョンアップ]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-06-boot2docker-upgrade.html"/>
    <updated>2014-08-06T23:10:26+09:00</updated>
    <id>http://blog.n-z.jp/blog/boot2docker-upgrade</id>
    <content type="html"><![CDATA[<p>boot2docker の ISO の更新は専用コマンドで簡単にできるとわかったので、
わざと古いバージョンに戻したりして動作確認してみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Mac OS X 10.9.4</li>
<li>VirtualBox 4.3.14</li>
<li>docker 1.1.2</li>
<li>boot2docker 1.1.2</li>
</ul>


<h2>更新準備</h2>

<p><code>boot2docker delete</code> して消してから ISO を更新して
<code>boot2docker init</code> で作り直すという説明もありますが、
再起動しても残る部分は ISO とは別の仮想ディスクの <code>/dev/sda1</code> に保存されていて、
そのまま使い回せることがほとんどなので、
作り直さなくても更新できます。</p>

<p>大きくバージョンをあげるとか、クリーンな環境でやり直したいと言うときは消して作り直せば良いと思います。</p>

<p>参考: <a href="http://qiita.com/tukiyo3/items/07f1eb77b5ffd9031e30" title="boot2dockerのデータ永続化まとめ - Qiita">boot2dockerのデータ永続化まとめ - Qiita</a></p>

<h2>更新方法</h2>

<h3>VM を停止して更新</h3>

<p><code>boot2docker upgrade</code> で VM が起動していれば停止して更新して起動し直してくれます。</p>

<h3>ISO だけ更新</h3>

<p><code>boot2docker download</code> で ISO だけ無条件にダウンロードしてくれます。</p>

<h3>boot2docker help</h3>

<p>以上の説明は <code>boot2docker help</code> にちゃんと書いてある通りです。</p>

<pre><code>% boot2docker help
Usage: boot2docker [&lt;options&gt;] &lt;command&gt; [&lt;args&gt;]

boot2docker management utility.

Commands:
    init                    Create a new boot2docker VM.
    up|start|boot           Start VM from any states.
    ssh [ssh-command]       Login to VM via SSH.
    save|suspend            Suspend VM and save state to disk.
    down|stop|halt          Gracefully shutdown the VM.
    restart                 Gracefully reboot the VM.
    poweroff                Forcefully power off the VM (might corrupt disk image).
    reset                   Forcefully power cycle the VM (might corrupt disk image).
    delete|destroy          Delete boot2docker VM and its disk image.
    config|cfg              Show selected profile file settings.
    info                    Display detailed information of VM.
    ip                      Display the IP address of the VM's Host-only network.
    status                  Display current state of VM.
    download                Download boot2docker ISO image.
    upgrade                 Upgrade the boot2docker ISO image (if vm is running it will be stopped and started).
    version                 Display version information.

Options:
      --basevmdk="": Path to VMDK to use as base for persistent partition
      --dhcp=true: enable VirtualBox host-only network DHCP.
      --dhcpip=192.168.59.99: VirtualBox host-only network DHCP server address.
  -s, --disksize=20000: boot2docker disk image size (in MB).
      --dockerport=2375: host Docker port (forward to port 2375 in VM).
      --hostip=192.168.59.3: VirtualBox host-only network IP address.
      --iso="/Users/knishiyama/.boot2docker/boot2docker.iso": path to boot2docker ISO image.
      --lowerip=192.168.59.103: VirtualBox host-only network DHCP lower bound.
  -m, --memory=2048: virtual machine memory size (in MB).
      --netmask=ffffff00: VirtualBox host-only network mask.
      --serial=false: try serial console to get IP address (experimental)
      --serialfile="": path to the serial socket/pipe.
      --ssh="ssh": path to SSH client utility.
      --ssh-keygen="ssh-keygen": path to ssh-keygen utility.
      --sshkey="/Users/knishiyama/.ssh/id_boot2docker": path to SSH key to use.
      --sshport=2022: host SSH port (forward to port 22 in VM).
      --upperip=192.168.59.254: VirtualBox host-only network DHCP upper bound.
      --vbm="VBoxManage": path to VirtualBox management utility.
  -v, --verbose=false: display verbose command invocations.
      --vm="boot2docker-vm": virtual machine name.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby-buildをrbenvと組み合わせずに使う]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-27-ruby-build-without-rbenv.html"/>
    <updated>2014-07-27T17:08:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ruby-build-without-rbenv</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sstephenson/ruby-build" title="ruby-build">ruby-build</a>
は
<a href="https://github.com/sstephenson/rbenv" title="rbenv">rbenv</a>
と組み合わせて使われることが多いですが、
単独でも使えて、その情報が少ないので少し書いておきます。</p>

<!--more-->


<h2><code>/usr/local</code> にインストールする方法</h2>

<p><code>ruby-build</code> 自体もインストールしてしまう場合は
<code>install.sh</code> を使ってインストールします。</p>

<pre><code class="sh">git clone --depth 1 https://github.com/sstephenson/ruby-build
ruby-build/install.sh
rm -rf ruby-build
ruby-build 2.1.2 /usr/local
</code></pre>

<p>もっと詳しい使い方は
<a href="http://qiita.com/takahashim/items/406421d515ef1d4f1189" title="[ReVIEW Tips] DockerでRe:VIEW">[ReVIEW Tips] DockerでRe:VIEW</a>
が参考になると思います。</p>

<h2>ruby だけインストールする方法</h2>

<p><code>bin/ruby-build</code> を直接実行すれば <code>ruby-build</code> をインストールせずに
<code>ruby</code> だけインストールすることもできます。</p>

<pre><code class="sh">git clone --depth 1 https://github.com/sstephenson/ruby-build
ruby-build/bin/ruby-build 2.1.2 /usr/local
rm -rf ruby-build
</code></pre>

<p>ドキュメントの生成を止めたり、
インストール中のメッセージを出したりするために
以下のように実行するのも良いと思います。</p>

<pre><code class="sh">git clone --depth 1 https://github.com/sstephenson/ruby-build
export CONFIGURE_OPTS="--disable-install-doc"
ruby-build/bin/ruby-build --verbose 2.1.2 /usr/local
rm -rf ruby-build
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[62nd Ruby/Rails勉強会@関西に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-26-kansaiworkshop062.html"/>
    <updated>2014-07-26T13:27:09+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansaiworkshop062</id>
    <content type="html"><![CDATA[<p><a href="http://rubykansai.doorkeeper.jp/events/13160" title="62nd Ruby/Rails勉強会@関西">62nd Ruby/Rails勉強会@関西</a>
に参加したので、そのメモです。</p>

<!--more-->


<h2>スクレイピングの話</h2>

<p>後で資料は公開してくれるということで、メモはとらずに話をきいていましたが、
実際にどういうことに使っている話も多くて面白かったです。</p>

<p>資料は
<a href="http://www.slideshare.net/takurosasaki/ruby-crawler" title="Rubyで作るクローラー Ruby crawler">Rubyで作るクローラー Ruby crawler</a>
で公開されています。</p>

<h2>Rails Girls Osaka の話</h2>

<p><a href="http://railsgirls.com/osaka" title="Osaka 6-7th June 2014">Rails Girls Osaka 6-7th June 2014</a>
の話でした。
写真が多いので資料の公開はないということでした。</p>

<p>今後の予定としては、
<a href="http://railsgirls.jp/events/" title="近日開催のイベント">近日開催のイベント</a>
にはないですが、
<a href="http://railsgirls.com/events" title="Upcoming Events">Upcoming Events</a>
には
<a href="http://rubyhiroba.org/2014/" title="RubyHiroba 2014">RubyHiroba 2014</a>
での
<a href="http://rubyhiroba.org/2014/rails-girls.html" title="Rails Girls Tokyo 4th">Rails Girls Tokyo 4th</a>
も書いていました。</p>

<h2>Gemfile.local の話</h2>

<p>redmine とかでも使っている方法で、
追記せずに何か良い方法はないのかという相談でした。</p>

<h2>るびま (Rubyist Magazine) の話</h2>

<ul>
<li><a href="http://magazine.rubyist.net/">http://magazine.rubyist.net/</a></li>
<li>誤植などの指摘は <a href="https://github.com/rubima/rubima-support">https://github.com/rubima/rubima-support</a> へ。</li>
<li><a href="http://goo.gl/KpASY9">Rubyist Magazine 十周年へのメッセージ</a> 募集中</li>
</ul>


<h2>GitLab の Git Flow の話</h2>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=477416366X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<ul>
<li><a href="https://gitlab.com/gitlab-org/cookbook-gitlab/blob/master/README.md" title="GitLab Cookbook">GitLab Cookbook</a> のベースを作った。</li>
<li><a href="http://www.amazon.co.jp/gp/product/477416366X/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=477416366X&amp;linkCode=as2&amp;tag=znz-22">GitHub実践入門 ~Pull Requestによる開発の変革 (WEB+DB PRESS plus)</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=477416366X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> はおすすめと言っていました。</li>
<li><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.ja_JP.html" title="git-flow cheatsheet">git-flow cheatsheet</a></li>
<li><a href="https://guides.github.com/introduction/flow/index.html" title="Understanding the GitHub Flow · GitHub Guides">Understanding the GitHub Flow · GitHub Guides</a></li>
<li>GitLab Flow の提案</li>
<li>Git Flow について詳細に説明</li>
</ul>


<p>GitLab Flow は git flow を知っている人向けに大雑把に説明すると</p>

<ul>
<li>release ブランチは使わない。</li>
<li>develop ブランチの代わりに master ブランチを使う。</li>
<li>master ブランチの代わりに stable ブランチを作る。</li>
</ul>


<p>ということだと理解しました。</p>

<h2>Ruby 初級者向けレッスン 50回 ブロック</h2>

<p><code>block.call</code> の引数に複数渡すのがいいのか、配列でまとめて渡すのが良いのかという話はきいたことがなかったので、どういう話なのかちょっと気になりました。</p>

<p>多重代入について深入りすると大変そうなので、さらっと流したのはありだと思いました。</p>

<h2>@IT Rails4 入門記事をツッコもう</h2>

<ul>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1402/28/news047_2.html" title="開発現場でちゃんと使えるRails 4入門（1）：簡単インストールから始める初心者のためのRuby on Railsチュートリアル (2/3) - ＠IT">開発現場でちゃんと使えるRails 4入門（1）：簡単インストールから始める初心者のためのRuby on Railsチュートリアル (2/3) - ＠IT</a></li>
<li>rbenv 対 RVM</li>
<li>エディタは Sublime Text, Vim, Emacs が多くて、その他 Atom, Eclipse</li>
<li><code>rails new</code> の時の <code>--skip-bundle</code> と <code>bundle install --path vendor/bundle</code> の話</li>
<li><code>bundle exec</code> の話</li>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1405/16/news024.html" title="開発現場でちゃんと使えるRails 4入門（4）：現場で使えるか見極めたいRails 4.1の新機能8選 - ＠IT">開発現場でちゃんと使えるRails 4入門（4）：現場で使えるか見極めたいRails 4.1の新機能8選 - ＠IT</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zshの機能のみで既に存在しないディレクトリをcdrのリストから削除する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-25-compact-chpwd-recent-dirs.html"/>
    <updated>2014-07-25T21:54:57+09:00</updated>
    <id>http://blog.n-z.jp/blog/compact-chpwd-recent-dirs</id>
    <content type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/syohex/20140425/1398394421" title="既に存在しないディレクトリを cdrのリストから削除する - Life is very short">既に存在しないディレクトリを cdrのリストから削除する - Life is very short</a>
をみて perl を使っていて、
ファイル名の変更にも対応していなくてポータブルではないと思ったので、
zsh の機能のみで実装してみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>zsh 5.0.2</li>
</ul>


<h2>実装</h2>

<p>cdr の実装の中の
<code>chpwd_recent_add</code>
<code>chpwd_recent_dirs</code>
<code>chpwd_recent_filehandler</code>
の中を良くみてみると
引数なしで <code>chpwd_recent_filehandler</code> を呼び出すと
<code>$reply</code> に配列でディレクトリ一覧を返してくれて、
引数を渡すとファイルに保存してくれるとわかりました。</p>

<p>そこで、その間で <code>(N)</code> を使って存在しないディレクトリを除外すれば良いということで
以下の実装になりました。
<code>emulate -L zsh</code> などは参考にした部分にあったので、そのまま使っています。</p>

<pre><code class="sh">my-compact-chpwd-recent-dirs () {
    emulate -L zsh
    setopt extendedglob
    local -aU reply
    integer history_size
    autoload -Uz chpwd_recent_filehandler
    chpwd_recent_filehandler
    history_size=$#reply
    reply=(${^reply}(N))
    (( $history_size == $#reply )) || chpwd_recent_filehandler $reply
}
</code></pre>

<p>使い方としては</p>

<ul>
<li>必要に応じて手で <code>my-compact-chpwd-recent-dirs</code> を呼び出す</li>
<li><code>.zshrc</code> から起動時に <code>my-compact-chpwd-recent-dirs</code> を実行</li>
<li><code>add-zsh-hook chpwd my-compact-chpwd-recent-dirs</code> で毎回実行</li>
</ul>


<p>などが考えられます。</p>

<p><a href="http://blog.n-z.jp/blog/2014-07-17-peco-cdr.html" title="pecoとcdrなどを組み合わせてみた">pecoとcdrなどを組み合わせてみた</a>ときに、
<code>peco</code> に渡す前のところで <code>(N-/)</code> でフィルタリングしていたので、
個人的には必要に応じて手で呼び出す使い方にしようと思っています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant Cloudでboxを公開してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-21-vagrantcloud-box.html"/>
    <updated>2014-07-21T15:52:35+09:00</updated>
    <id>http://blog.n-z.jp/blog/vagrantcloud-box</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2014-07-18-wheezy-from-vagrant-cloud.html" title="Vagrant CloudからWheezyを入れてみた">Vagrant CloudからWheezyを入れてみた</a>で公開されているものを使ってみたので、
今回は
<a href="https://vagrantcloud.com/">Vagrant Cloud</a>
で日本語で日本向けの Box の公開も試してみました。</p>

<!--more-->


<h2>手順概要</h2>

<ol>
<li><a href="https://vagrantcloud.com/">https://vagrantcloud.com/</a> にログイン</li>
<li><a href="https://vagrantcloud.com/boxes/new">Create Box</a> で作成</li>
<li>Create new version でバージョンを作成</li>
<li>Create new provider でバージョンに対応する provider を作成</li>
<li>無料アカウントだと Upload は使えないようなので URL を指定</li>
<li>バージョンの編集で Release すると公開</li>
</ol>


<h2>登録される情報</h2>

<p>ユーザーアカウントに複数の Box が対応していて、
Box に複数のバージョンが対応していて、
バージョンに複数の provider (VirtualBox とか VMware とか) が対応している、
という構造になっているようです。</p>

<p>バージョンは Release するまでは公開されないようです。</p>

<p>古いバージョンは Revoke で破棄できるようなので、
box を置く URL を使い回すなら Revoke してから
ファイルを置き換えて新しいバージョンを登録するのが
良さそうに思いました。</p>

<h2>作成した box の packer テンプレート</h2>

<p><a href="https://github.com/znz/packer-templates">packer-templates</a>
で公開しています。</p>

<p>使い方は</p>

<pre><code>git clone https://github.com/znz/packer-templates
cd debian-7.6.0-amd64-ja_jp
packer build debian-7.6.0-amd64-ja_jp.json
</code></pre>

<p>で <code>debian-7.6.0-amd64-ja_jp_virtualbox.box</code> が作成できます。
試した環境では1時間ぐらいかかりました。</p>

<h2>使用方法</h2>

<p><code>vagrant init znzj/debian-7.6.0-amd64-ja_jp</code>
のように <code>vagrant init</code> の引数に <code>ユーザー名/BOX名</code> を指定して
<code>Vagrantfile</code> を作成すると
<code>config.vm.box = "znzj/debian-7.6.0-amd64-ja_jp"</code>
と指定されていて <code>vagrant up</code> で自動ダウンロードされて使えます。</p>

<h2>登録した URL の扱い</h2>

<p>box は URL で登録したので、
<code>https://vagrantcloud.com/znzj/debian-7.6.0-amd64-ja_jp/version/1/provider/virtualbox.box</code>
のように <code>vagrantcloud.com</code> の URL に見えるところからダウンロードしようとした時、
リダイレクトされて登録した URL からのダウンロードになるようです。</p>

<p><code>vagrantcloud</code> 側でキャッシュなどをしてくれるわけではないようなので、
置き場所には注意する必要がありそうです。</p>

<p>今回は需要も多くなさそうで、
日本向けということで
さくらのVPS
に置いてみました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible-galaxy用のroleにversionを付ける]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-19-ansible-galaxy-version.html"/>
    <updated>2014-07-19T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-galaxy-version</id>
    <content type="html"><![CDATA[<p><a href="https://galaxy.ansible.com/" title="Ansible Galaxy">Ansible Galaxy</a>
に登録されている role を使う時にバージョンを指定する方法は書いてあるのに、
自分で登録した role にバージョンを付ける方法がわからなかったので、
既にバージョンが付いているものを参考にして調べてみました。</p>

<!--more-->


<h2>結論</h2>

<p><a href="https://galaxy.ansible.com/intro">Ansible Galaxy の intro</a>
の最後の方に
「If you have applied any tags in your repo, Ansible Galaxy will automatically make a “version” object for each tag. This means users will be able to choose which version (tag) to download.」
と書いてあるように github で tag (release) を作るだけでした。</p>

<h2>バージョンの命名規則</h2>

<p>同じページのバージョン指定の例が</p>

<pre><code>user1.role1,v1.0.0
user2.role2,v0.5
...
</code></pre>

<p>となっているので、頭に <code>v</code> を付けて <code>v0.1.2</code> のようなバージョンの付け方にするのが良さそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant CloudからWheezyを入れてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-18-wheezy-from-vagrant-cloud.html"/>
    <updated>2014-07-18T21:30:25+09:00</updated>
    <id>http://blog.n-z.jp/blog/wheezy-from-vagrant-cloud</id>
    <content type="html"><![CDATA[<p>Debian 7.6 がリリースされたので、新しい box がないか探してみたところ、
<a href="http://www.vagrantbox.es/" title="A list of base boxes for Vagrant - Vagrantbox.es">A list of base boxes for Vagrant - Vagrantbox.es</a>
から探すのではなく
<a href="https://vagrantcloud.com/">Vagrant Cloud</a>
を使えば良いということがわかりました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>VirtualBox 4.3.12</li>
<li>Vagrant 1.6.3</li>
<li><a href="https://vagrantcloud.com/ffuenf/debian-7.6.0-amd64" title="Debian Wheezy 7.6.0 x86_64">Debian Wheezy 7.6.0 x86_64</a> 0.0.27</li>
</ul>


<h2>書き換え</h2>

<p>古い box は</p>

<pre><code>  config.vm.box = ENV["VM_BOX"] || "opscode_debian-7.4_chef-provisionerless"
  config.vm.box_url = ENV["VM_BOX_URL"] || "http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_debian-7.4_chef-provisionerless.box"
</code></pre>

<p>と指定していたのを
<a href="https://github.com/ffuenf/vagrant-boxes" title="ffuenf/vagrant-boxes">ffuenf/vagrant-boxes</a>
からリンクされている
<a href="https://vagrantcloud.com/ffuenf/debian-7.6.0-amd64" title="ffuenf/debian-7.6.0-amd64">ffuenf/debian-7.6.0-amd64</a>
の説明通り <code>vagrant init ffuenf/debian-7.6.0-amd64</code> で作成された
<code>Vagrantfile</code> を参考にして、</p>

<pre><code>  config.vm.box = "ffuenf/debian-7.6.0-amd64"
</code></pre>

<p>に書き換えました。</p>

<p>以前の box を使っている 古い VM を <code>vagrant destroy</code> ですべて破棄した後、
<code>vagrant box remove opscode_debian-7.4_chef-provisionerless</code>
で box も削除しました。</p>

<h2>余談</h2>

<p><code>vagrant box outdated</code> や <code>vagrant box update</code> の使い方がわからなかったのですが、
<code>box_url</code> でダウンロードしてきた box で使うものではなく Vagrant Cloud から
ダウンロードしてきた box で使うものだったようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rsyslogでherokuのログを記録する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-18-heroku-rsyslog.html"/>
    <updated>2014-07-18T19:37:27+09:00</updated>
    <id>http://blog.n-z.jp/blog/heroku-rsyslog</id>
    <content type="html"><![CDATA[<p>heroku のログは何も設定していないと最近のログしか残らないので、
VPS で動かしている Ubuntu の rsyslog で受け取って好きなだけ
残せるように設定してみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 12.04 LTS</li>
<li>rsyslog 5.8.6-1ubuntu8.6</li>
</ul>


<h2>rsyslog の設定</h2>

<p>rsyslog でリモートからのログを受け取って <code>/var/log/remote</code> 以下に記録する設定をします。</p>

<p>ポート番号は外からの攻撃を減らすためや rsyslog の起動時に root 権限を不要にするために、
デフォルトの 514 ではなく適当なポート番号に変更しました。</p>

<p>リモートからのログはここで日付とホスト名から決まるファイル名のログに記録して、
ローカルのログと混ざらないようにしています。</p>

<p>ファイル名は日付を前にするか、送信元ホスト名を前にするかは好みで決めると良いと思います。</p>

<pre><code class="text /etc/rsyslog.d/10-local.conf"># provides UDP syslog reception
$ModLoad imudp
$UDPServerRun 51514

# provides TCP syslog reception
$ModLoad imtcp
$InputTCPServerRun 51514

$template RemoteLog,"/var/log/remote/%$year%%$month%%$day%_%hostname%.log"
:fromhost-ip,!isequal,"127.0.0.1" ?RemoteLog
&amp; ~
</code></pre>

<h2><code>/var/log/remote</code> 作成</h2>

<p>ディレクトリを自動で作成はしてくれないので、あらかじめ作成しておきます。
同じ理由でログファイルをディレクトリ分けすることは出来ませんでした。</p>

<p>syslog ユーザーが書き込めて adm グループで読めるようにしました。</p>

<pre><code>sudo install -o syslog -g adm -m 2750 -d /var/log/remote
</code></pre>

<h2>ufw 設定</h2>

<p><code>ufw allow 51514</code> で外から udp も tcp も受け付けるようにします。</p>

<h2>heroku からの送信設定</h2>

<p><code>heroku drains</code> コマンドで設定しました。</p>

<p>Heroku 側のドキュメントは
<a href="https://devcenter.heroku.com/articles/logging#syslog-drains" title="Syslog drains">Syslog drains</a>
にありますが、情報が少ないので、同様のログを蓄積するアドオンの設定を参考にするのが良いようです。</p>

<pre><code class="console">% heroku drains
No drains for this app
% heroku drains:add
 !    Usage: heroku drains:add URL
zsh: exit 1     heroku drains:add
% heroku drains:add syslog://syslog.example.jp:51514
Successfully added drain syslog://syslog.example.jp:51514
% heroku drains
syslog://syslog.example.jp:51514 (d.xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pecoとcdrなどを組み合わせてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-17-peco-cdr.html"/>
    <updated>2014-07-17T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/peco-cdr</id>
    <content type="html"><![CDATA[<p>自作の cd 履歴管理が <code>~/VirtualBox VMs</code> という空白入りのディレクトリ名の扱いに対応していなかったので、
せっかくなので独自で頑張るのは止めて、
cdr の履歴を使うことにしました。</p>

<p>さらに選択部分は peco と組み合わせて <code>ghq</code> や <code>cdpath</code> にも対応してみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>peco 0.2.0</li>
<li>zsh 5.0.2</li>
</ul>


<h2>peco のインストール</h2>

<p>Homebrew でインストールするなら <code>brew install peco/peco/peco</code> か</p>

<pre><code>brew tap peco/peco
brew install peco
</code></pre>

<p>です。</p>

<p>アンインストールは</p>

<pre><code>brew uninstall peco
brew untap peco/peco
</code></pre>

<p>です。</p>

<p><code>go get</code> でインストールするなら <code>GOPATH</code> を設定して
<code>go get github.com/peco/peco/cmd/peco</code>
です。
アンインストールは <code>GOPATH</code> にあるインストールされたファイルを消すしかなさそうです。</p>

<h2>peco の設定</h2>

<p><a href="http://shibayu36.hatenablog.com/entry/2014/06/27/223538" title="pecoを使い始めた - $shibayu36-&gt;blog;">pecoを使い始めた - $shibayu36-&gt;blog;</a>
はいろいろキーバインドを設定していますが、
デフォルトのまま使っています。</p>

<h2>zsh の設定</h2>

<p><a href="https://github.com/znz/dot-shell/blob/4ee27990e8de4b3c089442c0d997ad3fc836b96a/profile.d/50peco.zsh" title="50peco.zsh">50peco.zsh</a>
の <code>peco-go-to-dir</code> のように設定して <code>M-g</code> で使えるようにしました。</p>

<p>以下に該当部分を抜き出しておきます。</p>

<pre><code class="sh 50peco.zsh">if (( ${+commands[peco]} )); then
  peco-go-to-dir () {
    local line
    local selected="$(
      {
        (
          autoload -Uz chpwd_recent_filehandler
          chpwd_recent_filehandler &amp;&amp; for line in $reply; do
            if [[ -d "$line" ]]; then
              echo "$line"
            fi
          done
        )
        ghq list --full-path
        for line in *(-/) ${^cdpath}/*(N-/); do echo "$line"; done | sort -u
      } | peco --query "$LBUFFER"
    )"
    if [ -n "$selected" ]; then
      BUFFER="cd ${(q)selected}"
      zle accept-line
    fi
    zle clear-screen
  }
  zle -N peco-go-to-dir
  bindkey '^[g' peco-go-to-dir
fi
</code></pre>

<p>まず <code>(( ${+commands[peco]} ))</code> で <code>peco</code> コマンドの存在チェックをしています。
zsh スクリプトの中では <code>type peco &gt;/dev/null 2&gt;&amp;1</code> のようなチェック方法の代わりに使えます。</p>

<p>次にカレントディレクトリと <code>$cdpath</code> の処理に使っている <code>line</code> をローカル変数にしています。</p>

<p>次がメイン部分で</p>

<ol>
<li><code>cdr</code> のディレクトリ一覧</li>
<li><code>ghq</code> のディレクトリ一覧</li>
<li>カレントディレクトリと <code>$cdpath</code> の中のディレクトリ一覧</li>
</ol>


<p>を <code>peco</code> に渡して選択しています。
順番や何を選択肢に入れるかなどは好みで調節してください。</p>

<p>最後に参考にした記事と同じように、選択されていたら <code>cd</code> コマンドを実行しています。</p>

<h2>空白ディレクトリ対応</h2>

<p><code>selected=$()</code> を <code>selected="$()"</code> に変更するなど適切にクオートした上で、
さらに最後の <code>cd</code> コマンドに渡す部分では <code>q</code> という Parameter Expansion Flag (<code>${(q)var}</code> の部分) を使って
適切にエスケープしています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 13 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-16-rubymotion-mokumoku-osaka.html"/>
    <updated>2014-07-16T19:33:35+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 12 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://rubymotionjp.connpass.com/event/7079/">第 13 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。
今日はほぼ途中の会話はなくて、みんなでもくもくしていました。
その代わり、最後の成果発表の時は盛り上がっていました。</p>

<p>次回の
<a href="http://rubymotionjp.connpass.com/event/7583/" title="第 14 回 RubyMotion もくもく会 in Osaka">第 14 回 RubyMotion もくもく会 in Osaka</a>
は 08/20(水) になりました。</p>

<!--more-->


<h2>メモ</h2>

<ul>
<li>AppCode</li>
<li>TapTheCircle</li>
<li>motion-osx-cli</li>
<li><a href="https://speakerdeck.com/iwazer/rubymotionfalseqi-chi-tiiitokoro" title="RubyMotionの気持ちいいところ // Speaker Deck">RubyMotionの気持ちいいところ // Speaker Deck</a></li>
<li>RubyMotion + IB で参考にしたもの

<ul>
<li><a href="http://tama.hatenablog.jp/entry/2014/05/02/231633" title="RubyMotion(MacOS)でIBの作成方法 - たまたんのぶろぐ">RubyMotion(MacOS)でIBの作成方法 - たまたんのぶろぐ</a></li>
<li><a href="http://d.hatena.ne.jp/laiso+iphone/20130510/1368201914" title="RubyMotionアプリでStoryboardとIBのアウトレット+アクションを使う話 - laiso+iphone">RubyMotionアプリでStoryboardとIBのアウトレット+アクションを使う話 - laiso+iphone</a></li>
</ul>
</li>
<li><a href="https://github.com/omoon/rm-test-test">https://github.com/omoon/rm-test-test</a>

<ul>
<li>travis-ci で RubyMotion のテストも動かせるという話</li>
<li><code>bundle exec rake spec osx=true</code> にすれば OSX も動く。</li>
<li>参考: <a href="https://github.com/rubymotion/BubbleWrap/blob/master/.travis.yml">https://github.com/rubymotion/BubbleWrap/blob/master/.travis.yml</a></li>
</ul>
</li>
<li><a href="https://github.com/mattsears/nyan-cat-formatter">https://github.com/mattsears/nyan-cat-formatter</a></li>
</ul>


<h2>今日の成果</h2>

<p>情報を探してみたら <code>rake ib</code> で Interface Builder を起動すれば stub を自動生成してくれて、
ボタンクリックとアクションのひも付けができるとわかったので、
ボタンをクリックした時にメソッド呼び出しはできるようになりました。</p>

<p>しかし、 <code>ib_outlet</code> で宣言したプロパティに outlet でひも付けしたインスタンス変数が <code>nil</code> のままで悩んでいたところ、
最後に <code>outlet</code> に変えると動くようになりました。
<code>ib_outlet</code> のままでも Interface Builder で出てくるので使えるのかと勘違いしていました。</p>

<p>家に帰ってから
<code>$(find /System/Library/Frameworks -name lsregister) -kill -r -domain local -domain user</code>
で既存の起動の関連付けを削除して、
ib 版で <code>Set Default Browser</code> をやり直したところ、
まだ問題があったので、それも直して以前のものと同様に使えるところまでは出来ました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[doorkeeper providerサンプルアプリに対応するOAuthクライアントをdeviseで作成した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-15-doorkeeper-devise-client.html"/>
    <updated>2014-07-15T18:50:40+09:00</updated>
    <id>http://blog.n-z.jp/blog/doorkeeper-devise-client</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/znz/doorkeeper-provider-app">doorkeeper-provider-app</a>
を使って SSO (Single Sign On) のように使うクライアントアプリを作成しました。
<a href="https://github.com/znz/doorkeeper-devise-client-app">doorkeeper-devise-client-app</a>
で公開しています。</p>

<p>SSO は OAuth 2.0 の本来の使い方ではないので、不便な部分もありますが、
クライアント側の例として参考になると思います。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>ruby 2.1.2</li>
<li>rails 4.1.4</li>
<li>bootstrap 3.2.0</li>
<li>devise 3.2.4</li>
<li>omniauth 1.2.2</li>
<li>omniauth-oauth2 1.2.0</li>
<li>bootstrap-sass 3.2.0.0</li>
<li>dotenv-rails 0.11.1</li>
</ul>


<h2>簡単な役割解説</h2>

<p>provider は doorkeeper gem を入れている rails アプリ側で認証や認可を受け持ちます。
(OAuth の仕様的には認証と認可が別々のサーバーのこともあります。)</p>

<p>ここでいう OAuth クライアントは devise + omniauth + omniauth-oauth2 を使った rails アプリのことです。
ブラウザーなどのユーザー側にあるクライアントではなく、ユーザーから見れば、これもサーバーです。</p>

<p>詳しいことは OAuth 2.0 の仕様を調べてください。</p>

<h2>大まかな流れ</h2>

<ol>
<li><code>lib/omniauth/strategies/doorkeeper.rb</code> 作成</li>
<li><code>config/initializers/devise.rb</code> で <code>config.omniauth :doorkeeper, ...</code></li>
<li><code>app/controllers/users/omniauth_callbacks_controller.rb</code> 作成
(<code>uid</code> でユーザーを自動作成したり、 <code>access_token</code> (<code>credentials.token</code>) を保存したり)</li>
<li><code>config/routes.rb</code> に設定</li>
<li><code>user</code> に <code>provider</code> を追加</li>
<li><code>app/models/user.rb</code> で <code>devise :omniauthable</code> や <code>uid</code> を使った処理を実装</li>
<li><code>OAuth2::AccessToken</code> を生成</li>
<li>それを使って API アクセス</li>
</ol>


<p><code>access_token</code> を session に保存するかデータベースに保存するかは
アプリケーションのポリシー次第になります。
このアプリでは session に保存しています。</p>

<p>別途 callback uri として <code>http://localhost:3000/users/auth/doorkeeper/callback</code> のような URL を指定して
doorkeeper 側の <code>oauth/applications</code> に登録しておく必要があります。</p>

<h2><code>lib/omniauth/strategies/doorkeeper.rb</code> 作成</h2>

<p>例として
<a href="https://github.com/doorkeeper-gem/doorkeeper-devise-client" title="Dookreeper Devise+Omniauth Client">Dookreeper Devise+Omniauth Client</a>
と比較して <code>info</code> に <code>name</code> を増やしています。</p>

<p>コントローラーを <code>users</code> の下の <code>Users::OmniauthCallbacksController</code> にしたので、
戻り先の <code>authorize_path</code> は <code>'/oauth/authorize'</code> ではなく <code>'/users/oauth/authorize'</code> になっています。</p>

<p>info のハッシュはサーバーから受け取れていて、後の処理でもっと欲しい情報があれば自由に増やせます。</p>

<pre><code class="ruby lib/omniauth/strategies/doorkeeper.rb">module OmniAuth
  module Strategies
    class Doorkeeper &lt; OmniAuth::Strategies::OAuth2
      option :name, :doorkeeper

      option :client_options, {
        site: 'http://localhost:4000',
        authorize_path: '/users/oauth/authorize'
      }

      uid do
        raw_info['id']
      end

      info do
        {
          email: raw_info['email'],
          name: raw_info['name'],
        }
      end

      def raw_info
        @raw_info ||= access_token.get('/api/v1/me.json').parsed || {}
      end
    end
  end
end
</code></pre>

<h2><code>config/initializers/devise.rb</code> で設定</h2>

<p><a href="https://github.com/doorkeeper-gem/doorkeeper-devise-client">サンプルアプリ</a>
では</p>

<pre><code class="ruby config/initializers/devise.rb">  config.omniauth :doorkeeper,  DOORKEEPER_APP_ID, DOORKEEPER_APP_SECRET, :client_options =&gt;  {:site =&gt; DOORKEEPER_APP_URL}
</code></pre>

<p>となっていました。</p>

<p><code>scope</code> も追加すると以下のようになります。
<code>dotenv</code> を使って <code>ENV</code> から取るようにしました。</p>

<pre><code class="ruby config/initializers/devise.rb">  config.omniauth :doorkeeper, ENV['DOORKEEPER_APP_ID'], ENV['DOORKEEPER_APP_SECRET'], client_options: {site: ENV['DOORKEEPER_APP_URL'] }, scope: 'public write'
</code></pre>

<p><code>scope</code> は <code>'public,write'</code> だと <code>The requested scope is invalid, unknown, or malformed.</code> というエラーになってしまったので、
<code>,</code> 区切りではなくスペース区切りにしています。</p>

<h2><code>app/controllers/users/omniauth_callbacks_controller.rb</code> 作成</h2>

<p>callback で認証結果を受け取る部分を作成します。
ここで認証結果を受け取って、ユーザーを必要に応じてひも付けたり、
後で API アクセスに使うアクセストークンを保存したりします。</p>

<p>認証に失敗した時はログイン画面 (あれば) か <code>root_path</code> に戻すようにしています。</p>

<pre><code class="ruby app/controllers/users/omniauth_callbacks_controller.rb">class Users::OmniauthCallbacksController &lt; Devise::OmniauthCallbacksController
  # https://github.com/plataformatec/devise/issues/2432
  protect_from_forgery except: :doorkeeper
  skip_filter :auto_authenticate_omniauth_user!, only: :doorkeeper

  def doorkeeper
    # You need to implement the method below in your model (e.g. app/models/user.rb)
    oauth_data = request.env['omniauth.auth']
    @user = User.find_or_create_for_doorkeeper_oauth(oauth_data)
    session[:doorkeeper_token] = oauth_data['credentials']['token']

    if @user.persisted?
      sign_in_and_redirect @user, :event =&gt; :authentication #this will throw if @user is not activated
      if is_navigational_format?
        set_flash_message(:notice, :success, kind: ENV['DOORKEEPER_APP_NAME'] || 'Doorkeeper')
        # hide flash message after auto sign in
        #flash.delete(:notice)
      end
    else
      session['devise.doorkeeper_data'] = request.env['omniauth.auth']
      if respond_to?(:new_user_registration_url)
        redirect_to new_user_registration_url
      else
        redirect_to root_url
      end
    end
  end

  def after_omniauth_failure_path_for(scope)
    if respond_to?(:new_session_path)
      new_session_path(scope)
    else
      root_path
    end
  end
end
</code></pre>

<p>自動ログイン後のメッセージが不要なら <code>set_flash_message</code> の部分を <code>flash.delete(:notice)</code> に置き換えます。
「Doorkeeper でログインしました」だとどのサイトか区別がつかないので、
<code>ENV['DOORKEEPER_APP_NAME']</code> で表示用の名前を設定できるようにしています。</p>

<h2><code>config/routes.rb</code> に設定</h2>

<p><code>config/routes.rb</code> で <code>omniauth_callbacks</code> として独自のものを使うように設定します。</p>

<p>今回は認証必須なので不要ですが、
例として <code>sign_in</code> と <code>sign_out</code> の URL も入れました。
実際に試してみるとすぐに自動ログインで再ログインしてしまいます。</p>

<p><code>sign_out</code> が <code>get</code> か <code>delete</code> か違うことがあるので、
<code>sign_out_via</code> を使ってどちらでも対応できるようにしました。</p>

<pre><code class="ruby config/routes.rb">  devise_for :users, controllers: { omniauth_callbacks: 'users/omniauth_callbacks' }
  devise_scope :user do
    get 'sign_in',  to: 'devise/sessions#new',     as: :new_user_session
    __send__ Devise.sign_out_via, 'sign_out', to: 'devise/sessions#destroy', as: :destroy_user_session
  end
</code></pre>

<h2>timeoutable 設定</h2>

<p>SSO 的に使うのは
OAuth 2.0 の本来の目的ではないので、
ログアウトは難しい問題です。
たとえば
doorkeeper
と連携するアプリが複数あるときにまとめてログアウト出来ないなどの問題があります。</p>

<p>そのため、このアプリでは一定時間で再ログインが必要になるように <code>timeoutable</code> を使って、
こまめに認証し直すようにしてログアウト問題を緩和しています。</p>

<p>その副作用として入力に時間のかかるフォームがあると入力途中でタイムアウトしてしまって
投稿に失敗するなどの問題も起きるので、その点を考慮しておく必要があります。</p>

<pre><code class="ruby config/initializers/devise.rb">  # Default is 30 minutes.
  config.timeout_in = 1.minutes if Rails.env.development?
  config.expire_auth_token_on_timeout = true
</code></pre>

<h2>app/models/user.rb に実装</h2>

<p><code>find_or_create_for_doorkeeper_oauth</code> の実装は <code>concerns</code> に分けてみました。
<code>omniauthable</code> に <code>omniauth_providers</code> も設定して余計な route が生成されないようにしています。
<code>timeoutable</code> も入れています。</p>

<pre><code class="ruby app/models/user.rb">  devise :omniauthable, omniauth_providers: [:doorkeeper]
  devise :timeoutable
  include DoorkeeperOauthFinder
</code></pre>

<p>ログインしたときに <code>name</code> や <code>email</code> が変わっていたら反映するようにしています。</p>

<p><code>id</code> を統一したいのなら、 <code>create</code> のときに <code>id</code> まで指定すると
doorkeeper gem による OAuth provider 側とユーザーの ID を統一できます。</p>

<p>SSO 的に使うのならパスワードは不要なので、
ここではコメントアウトしています。</p>

<pre><code class="ruby app/models/concerns/doorkeeper_oauth_finder.rb">module DoorkeeperOauthFinder
  extend ActiveSupport::Concern

  module ClassMethods
    def find_or_create_for_doorkeeper_oauth(oauth_data)
      uid = oauth_data.uid.to_s
      id = uid.to_i
      user = self.where(provider: oauth_data.provider, uid: uid).first
      if user
        user.name = oauth_data.info.name
        user.email = oauth_data.info.email
        user.save! if user.changed?
      else
        user = self.create!({
          id: id, # use same id
          name: oauth_data.info.name,
          provider: oauth_data.provider,
          uid: uid,
          email: oauth_data.info.email,
          #password: Devise.friendly_token[0,20]
        })
      end
      user
    end
  end
end
</code></pre>

<p>データベースの migration の方でも削除して unique index の制約なども不要なものは外しておきます。</p>

<p><code>ruby db/migrate/*_devise_create_users.rb
      ## Database authenticatable
      t.string :email,              null: false, default: ""
      # t.string :encrypted_password, null: false, default: ""
</code></p>

<p>代わりに <code>provider</code> と <code>uid</code> と <code>name</code> を追加しました。
このアプリは Doorkeeper 専用なので、直接 <code>users</code> に追加していますが、
複数プロバイダに対応するには <code>provider</code> と <code>uid</code> の組を別テーブルにします。</p>

<p><code>ruby db/migrate/*_add_omniauth_columns_to_users.rb
class AddOmniauthColumnsToUsers &lt; ActiveRecord::Migration
  def change
    add_column :users, :provider, :string
    add_column :users, :uid, :string
    add_column :users, :name, :string
    add_index :users, [:provider, :uid], unique: true
  end
end
</code></p>

<h2><code>OAuth2::AccessToken</code> を生成</h2>

<p><code>OAuth2::Client</code> と保存しておいた <code>access_token</code> を引数にして <code>OAuth2::AccessToken</code> を生成します。
ここでは <code>concerns</code> に分けて必要なコントローラーでだけ <code>include DoorkeeperApiV1</code> するようにしました。
全体で使いたいのなら <code>ApplicationController</code> に <code>include</code> すれば良いと思います。</p>

<pre><code class="ruby app/controllers/concerns/doorkeeper_api_v1.rb">module DoorkeeperApiV1
  private

  def access_token
    return @access_token if defined?(@access_token)
    config = Devise.omniauth_configs[:doorkeeper]
    strategy = config.strategy_class.new(*config.args)
    token = session[:doorkeeper_token]
    @access_token = OAuth2::AccessToken.new(strategy.client, token)
  end

  def get_me
    access_token.get("/api/v1/me.json").parsed
  end

  def get_microposts
    access_token.get("/api/v1/microposts.json").parsed
  end

  MICROPOST_CONTENT_MAX_LENGTH = 140

  def post_micropost(micropost)
    micropost[:content] = micropost[:content].truncate(MICROPOST_CONTENT_MAX_LENGTH)
    access_token.post("/api/v1/microposts", params: { micropost: micropost }).parsed
  end
end
</code></pre>

<p>使い方は <code>get_me</code> などを呼び出すだけなので省略します。</p>

<h2>ログインを強制する</h2>

<p>常に Doorkeeper の方でログインさせておきたいアプリの場合は、
User クラスを使っている場合の devise での戻り先の <code>session[:user_return_to]</code> に URL を保存しておいて、
<code>user_omniauth_authorize_path(:doorkeeper)</code> に強制的にリダイレクトしています。
<code>main_app.</code> をつけているのは route で mount している engine の中で問題が起きたことがあったためです。</p>

<pre><code class="ruby app/controllers/application_controller.rb">  include AuthDoorkeeper
  before_action :auto_authenticate_omniauth_user!
</code></pre>

<pre><code class="ruby app/controllers/concerns/auth_doorkeeper.rb">module AuthDoorkeeper
  private

  def auto_authenticate_omniauth_user!
    return if current_user
    session[:user_return_to] = request.original_url
    redirect_to main_app.user_omniauth_authorize_path(:doorkeeper)
  end
end
</code></pre>

<h2>テストについて</h2>

<p>API 呼び出しの部分の対処が出来ていなくて、まだテストが通る状態には出来ていません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apt-cacher-ngでliveイメージ作成を繰り返す時の無駄なダウンロードを減らす]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-14-apt-cacher-ng.html"/>
    <updated>2014-07-14T23:53:14+09:00</updated>
    <id>http://blog.n-z.jp/blog/apt-cacher-ng</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/znz/rubylive-builder" title="rubylive-builder">rubylive-builder</a>
で
<a href="https://github.com/znz/rubylive" title="RubyLive">RubyLive</a>
という Debian wheezy ベースの Live イメージを作成するときに
<code>apt-get update</code> などで何度も無駄にダウンロードしてしまうので、
<code>apt-cacher-ng</code> で Live イメージ作成を繰り返す時の無駄なダウンロードを減らすことにしました。</p>

<!--more-->


<h2>Vagrant の provision でインストール</h2>

<p>Vagrantfile では</p>

<pre><code class="ruby Vagrantfile">  config.vm.provision :shell do |shell|
    shell.path = "provision.sh"
  end
</code></pre>

<p>のようにシェルスクリプトでプロビジョニングしているだけだったので、
その中で以下のようにインストールして設定するようにしました。</p>

<pre><code class="bash provision.sh">apt-get install -y apt-cacher-ng
echo 'Acquire::http::Proxy "http://localhost:3142/";' &gt;/etc/apt/apt.conf.d/02proxy
</code></pre>

<p>Vagrantfile で以下のようにポートフォワーディングを設定していれば
<a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0315" title="第315回　apt-cacher-ngを使ってAPT用キャッシュプロキシの構築：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社">第315回　apt-cacher-ngを使ってAPT用キャッシュプロキシの構築：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社</a>
の2ページ目に説明があるようにヒット率などを確認できます。</p>

<pre><code class="ruby Vagrantfile">  # apt-cacher-ng
  config.vm.network "forwarded_port", guest: 3142, host: 3142
</code></pre>

<h2>rake コマンドで環境変数を渡す</h2>

<p><code>APT_HTTP_PROXY=http://localhost:3142 rake</code> でも良かったのですが、
rake コマンドは引数の <code>FOO=bar</code> を <code>ENV</code> に設定してくれるので、
<code>rake APT_HTTP_PROXY=http://localhost:3142</code> で渡して、
Rakefile の中では以下のように受け取って <code>lb config</code> に渡しました。</p>

<pre><code class="ruby Rakefile">desc "config RubyLive"
task :config =&gt; [:clean] do
  sh 'lb config'
  if ENV['APT_HTTP_PROXY']
    sh "lb config --apt-http-proxy #{ENV['APT_HTTP_PROXY']}"
  end
end
</code></pre>

<h2>live-build で apt-cacher-ng を使う</h2>

<p>既に出てきたように
<code>lb config</code> の <code>--apt-http-proxy</code> オプションや <code>--apt-ftp-proxy</code> オプションで指定すると
Live イメージ作成の時に proxy を使ってくれるようになります。
今回は apt-line に <code>http</code> しか使っていないので
<code>--apt-http-proxy</code> だけ指定しています。</p>

<p>もちろん、作成後の Live イメージには proxy 設定は残りません。</p>

<h2>感想</h2>

<p>live-build は cache ディレクトリにも、かなりキャッシュしてくれるのですが、
<code>apt-get update</code> などの proxy じゃないとキャッシュしにくいものもあるので、
どんな場合でもダウンロード量削減に役に立ちそうだと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyLiveを仮想環境で作成]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-13-build-rubylive-on-vm.html"/>
    <updated>2014-07-13T09:35:02+09:00</updated>
    <id>http://blog.n-z.jp/blog/build-rubylive-on-vm</id>
    <content type="html"><![CDATA[<p>最近流行りの仮想環境を使ってクリーンな wheezy 環境で RubyLive を作成できるようにしました。</p>

<p>VirtualBox + Vagrant は特殊な制限のない仮想環境なので Live イメージが作成できたのですが、
docker は後述の制限のために作成できませんでした。</p>

<!--more-->


<h2>RubyLive を Vagrant で作成</h2>

<p>Vagrant を使ってクリーンな wheezy 環境で RubyLive の ISO を作成できるようにしました。
こちらは問題なく作成できました。</p>

<h3>動作確認バージョン</h3>

<ul>
<li>VirtualBox 4.3.12</li>
<li>Vagrant 1.6.3</li>
</ul>


<h3>使い方</h3>

<ul>
<li>VirtualBox と Vagrant をインストールしておきます。</li>
<li><code>git clone https://github.com/znz/rubylive-builder</code> で取得します。</li>
<li><code>cd rubylive-builder</code> で中に入ります。</li>
<li><code>VM_MEMORY=512 vagrant up</code> のように適当なメモリ容量を指定して起動します。 (指定なしなら 1024)

<ul>
<li>他の項目も環境変数である程度変更できるようにしています。</li>
<li>初回起動時は box をダウンロードするので非常に時間がかかります。</li>
<li>provision で live-build などの必要なパッケージをインストールしています。</li>
</ul>
</li>
<li><code>vagrant ssh</code> でゲストにログインします。</li>
<li><code>/vagrant/rubylive.sh</code> を実行すると <code>/home/vagrant/rubylive</code> で RubyLive のイメージを作成します。

<ul>
<li>実行するたびにタイムスタンプの入ったファイル名の ISO ファイルが作成されます。</li>
<li>ネットワークの速度やマシンスペックに影響を受けると思いますが、試した環境では約1時間かかりました。</li>
</ul>
</li>
<li>作成できた <code>/home/vagrant/rubylive/*.iso</code> を <code>/vagrant</code> にコピーまたは移動して、ホスト OS 側に取り出します。</li>
<li>取り出した ISO ファイルを使用します。</li>
</ul>


<p>なぜか
    chroot: failed to run command <code>/usr/bin/env': No such file or directory
で失敗することがありましたが、再度</code>/vagrant/rubylive.sh` を実行すれば問題なく作成できました。</p>

<h3>片付け方</h3>

<ul>
<li><code>vagrant destroy</code> で VM を破棄します。</li>
<li><code>git clone</code> した作業ディレクトリを削除します。</li>
<li>wheezy の box が不要なら <code>vagrant box remove opscode_debian-7.4_chef-provisionerless</code> で削除します。</li>
<li>Vagrant や VirtualBox も不要ならアンインストールします。</li>
</ul>


<h2>RubyLive を Docker で作成 (失敗)</h2>

<p>docker 環境の中では <code>chroot /rubylive/chroot mount -t proc proc /proc</code> が <code>EPERM</code> で失敗するため、作成できませんでした。</p>

<h3>動作確認バージョン</h3>

<ul>
<li>docker 1.1.1</li>
</ul>


<h3>試し方</h3>

<ul>
<li>docker をインストールしておきます。</li>
<li><code>git clone https://github.com/znz/rubylive-builder</code> で取得します。</li>
<li><code>docker build rubylive-builder</code> で作成に挑戦します。

<ul>
<li>または <code>cd rubylive-builder</code> で中に入って <code>docker build .</code> です。</li>
</ul>
</li>
<li><code>docker ps -a</code> で最近の CREATED の IMAGE を確認します。

<ul>
<li>もしくは <code>docker images</code> で確認します。</li>
<li>最後の失敗した後の状態は残っていないようでした。</li>
</ul>
</li>
<li><code>docker run -i -t --rm 4b8bc4523794 /bin/bash</code> のように中に入ります。

<ul>
<li>4b8bc4523794 のところは確認した IMAGE の ID にしてください。</li>
</ul>
</li>
<li><code>cd rubylive</code> で rubylive ディレクトリに入って <code>rake</code> で作成に再挑戦します。</li>
<li><code>less /rubylive/chroot/debootstrap/debootstrap.log</code> でログを確認したり、
<code>chroot /rubylive/chroot mount -t proc proc /proc</code> や
<code>mount -t proc proc /rubylive/chroot/proc</code> を直接実行してみたりして
原因を確認します。</li>
</ul>


<h3>失敗部分のメッセージ</h3>

<pre><code>W: Failure trying to run: chroot /rubylive/chroot mount -t proc proc /proc
W: See /rubylive/chroot/debootstrap/debootstrap.log for details
P: Begin unmounting filesystems...
P: Saving caches...
/usr/bin/env: apt-get: No such file or directory
rake aborted!
Command failed with status (1): [sudo lb build...]
</code></pre>

<p><code>/rubylive/chroot/debootstrap/debootstrap.log</code> をみると <code>mount: permission denied</code> と出ていました。</p>

<h3>Dockerfile 直接指定 (失敗)</h3>

<p><code>docker build https://raw.githubusercontent.com/znz/rubylive-builder/master/Dockerfile</code>
のように直接 URL を指定する方法は
<code>sources.list</code> を国内ミラーに差し替える部分が失敗して使えませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian 7 (wheezy) の RubyLive をカスタマイズ中]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-12-debian-ruby-live.html"/>
    <updated>2014-07-12T10:08:26+09:00</updated>
    <id>http://blog.n-z.jp/blog/debian-ruby-live</id>
    <content type="html"><![CDATA[<p>今年の
<a href="https://k-of.jp/2014/" title="KOF 2014：関西オープンフォーラム2014">KOF 2014：関西オープンフォーラム2014</a>
に向けて
<a href="https://github.com/znz/rubylive" title="RubyLive">RubyLive</a>
を作成しています。
fork 元の <a href="https://github.com/no6v/rubylive">no6v 版</a> との違いをまとめていきます。</p>

<!--more-->


<h2>カスタマイズの基本</h2>

<p>README から今回に関係する部分を引用しておくと以下のようになっています。</p>

<ul>
<li>config/hooks/

<ul>
<li>インストールの最後の方で実行するフックスクリプトを置くディレクトリ。</li>
<li>拡張子を .chroot にして実行権限を付けておく。</li>
</ul>
</li>
<li>config/includes.chroot/

<ul>
<li>このディレクトリを root に見立てて LiveCD 環境にコピーしたいファイルを置くディレクトリ。</li>
</ul>
</li>
<li>config/package-lists/

<ul>
<li>特別にインストールしたいパッケージのリストを置くディレクトリ。</li>
<li>拡張子を .list.chroot にしてパッケージ名を列挙する。</li>
</ul>
</li>
</ul>


<h2>壁紙などの変更</h2>

<p><code>resources.yml</code> で設定されたファイルは <code>url</code> から自動ダウンロードして <code>path</code> に置くようになっています。</p>

<p><code>size</code> と <code>sha256sum</code> をチェックするだけで違っていても削除はしないようなので、
ダウンロードに失敗した時は<code>path</code> のファイルは手動で削除する必要がありました。</p>

<p><code>path</code> を変更した時も古いファイルが残ってしまうので、削除する必要がありました。</p>

<h2>dconf の設定</h2>

<p><code>config/includes.chroot/etc/skel/.config/dconf/user</code>
に設定変更後のバイナリが置かれていて、
これはひどいと思ったので、
<code>config/includes.chroot/etc/skel/.gnomerc</code>
で <code>gsettings set</code> を使って設定するようにしました。</p>

<h3>壁紙の変更</h3>

<p>起動後の <code>dconf-editor</code> で選択肢を確認しつつ、
<code>gsettings set org.gnome.desktop.background picture-options centered</code>
にしたり、
<code>gsettings set org.gnome.desktop.background picture-uri 'file:///usr/share/images/desktop-base/RubyKaigi2014-commonLogo.svg</code>
にしたりしました。</p>

<p>2014-07-13 追記:
生成後のイメージに CC-BY 3.0 の説明がないのは良くないと思って、
<code>config/includes.chroot/etc/skel/README.txt</code>
に説明を追加することにしました。</p>

<h3>デスクトップのアイコン</h3>

<p>以前は <code>gnome-panel</code> (上のバーのところ) に起動用のアイコンを追加していたようですが、
<code>gsettings set</code> で設定しようとすると
<code>org.gnome.gnome-panel.layout object-id-list</code> の他に
<code>org.gnome.gnome-panel.layout.objects.object-0</code> や
<code>org.gnome.gnome-panel.layout.objects.object-0.instance-config</code> などの
複数設定が必要で管理の手間もかかりそうだったので、
<code>gsettings set org.gnome.desktop.background show-desktop-icons true</code>
でデスクトップのアイコンが見えるように変更しました。</p>

<h3>スクリーンセーバーの停止</h3>

<p><code>gsettings set org.gnome.desktop.screensaver idle-activation-enabled false</code>
で止めました。</p>

<h2>chm の変更</h2>

<p><a href="http://ruby.morphball.net/refm-remix.html" title="Rubyリファレンスマニュアル chm版リミックス">Rubyリファレンスマニュアル chm版リミックス</a>
の標準テーマのRuby 2.1.0向け chm に差し替えました。
zip ファイルなので、先ほどの <code>.gnomerc</code> でデスクトップに展開するようにしました。</p>

<p>xCHM v. 1.20 で背景画像や色とかがつかないようなので、サイズが小さい標準を選びました。</p>

<h2>パッケージ変更</h2>

<p><code>jfbterm</code> の代わりに <code>fbterm</code> にしたり、
<code>ruby-build</code> でビルドに必要なパッケージを追加したり、
<code>config/includes.chroot/etc/iceweasel/profile/prefs.js</code> の代わりに <code>iceweasel-l10n-ja</code> を追加したり、
<code>bash-completion</code> などを追加したりしました。</p>

<h2>ruby-build で ruby 2.1.2 のインストール</h2>

<p><a href="http://qiita.com/takahashim/items/406421d515ef1d4f1189" title="[ReVIEW Tips] DockerでRe:VIEW - Qiita">[ReVIEW Tips] DockerでRe:VIEW - Qiita</a>
を参考にして rbenv は使わずに ruby-build だけ使って <code>/usr/local</code> に ruby 2.1.2 をインストールしました。</p>

<h2>localepurge</h2>

<p>locale の設定は live-config で起動時にやっていて hook の中で
<code>DEBIAN_FRONTEND=noninteractive dpkg-reconfigure localepurge</code>
としても起動後と違って ja locale の設定がなかったので、
起動後や設定した後に <code>debconf-show localepurge</code> で確認した値を使って、
<code>localepurge/nopurge</code> が <code>NEEDSCONFIGFIRST</code> のままなら
<code>echo localepurge localepurge/nopurge string "ja, ja_JP.UTF-8" | debconf-set-selections</code>
で設定することにしました。</p>

<p>これで約 200MB ぐらい小さくなりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4.1 で Doorkeeper を使った OAuth2 Provider のサンプルを実装した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-11-doorkeeper-provider-example-app.html"/>
    <updated>2014-07-11T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/doorkeeper-provider-example-app</id>
    <content type="html"><![CDATA[<p>ソースは github の
<a href="https://github.com/znz/doorkeeper-provider-app" title="znz/doorkeeper-provider-app">znz/doorkeeper-provider-app</a>
で公開しています。</p>

<p>基本的にはソースをみて参考にしてもらうと良いと思いますが、
説明が必要な部分を続きに書いてみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ruby 2.1.2</li>
<li>rails 4.1.4</li>
<li>bootstrap-sass 3.2.0.0</li>
<li>devise 3.2.4</li>
<li>devise-i18n-views 0.2.8</li>
<li>doorkeeper 1.3.1</li>
<li>cancancan 1.8.4</li>
<li>rolify 3.4.0</li>
<li>rspec-rails 3.0.1</li>
</ul>


<h2>試し方</h2>

<p>README に書いたようにローカルで動かすか heroku に deploy して
<a href="https://github.com/doorkeeper-gem/doorkeeper/wiki/Example-Applications" title="Example Applications">Example Applications</a>
にある Client examples の Sinatra and OAuth2 gem の
<a href="https://github.com/doorkeeper-gem/doorkeeper-sinatra-client" title="Doorkeeper Sinatra Client">Doorkeeper Sinatra Client</a>
を使って試しました。</p>

<h2>初期設定</h2>

<p>devise, doorkeeper, cancancan, rolify, rspec の個別の初期設定は普通に <code>rails generate</code> を使いました。</p>

<h2>ユーザー情報追加</h2>

<p>とれる情報を増やすために <code>User</code> に <code>name</code> を追加しました。
<code>devise-i18n-views</code> を使っている関係で view のカスタマイズはしていないので、
<code>rake db:seed</code> で設定したユーザーだけ <code>name</code> が設定されています。</p>

<p>必要に応じて view もカスタマイズしてください。</p>

<p>また <code>devise-i18n</code> の ja.yml を devise.ja.yml として入れています。
これは flash のメッセージやメールのメッセージなど、
<code>app/views</code> 以外の翻訳になるようです。</p>

<p><code>devise-i18n-views</code> は <code>app/views</code> を翻訳可能な view にするプロジェクトです。
なぜ <code>devise</code> とは別プロジェクトでやっているのかはよくわかりません。</p>

<h2><code>I18n.available_locales</code></h2>

<p><code>devise-i18n-views</code> を入れてしまうと <code>I18n.available_locales</code> が増えてしまうので、
困るのなら、カスタマイズ用の view を generate して、必要な言語だけ取り込んで
<code>Gemfile</code> から外してしまうのが良いと思います。</p>

<p>今回はそのまま残して右上の <code>Locale</code> で選択できるようにしています。
選択肢の翻訳は Wikipedia の左や www.debian.org の下などを参考にしたのですが <code>es-AR</code> はわからなかったので、
<code>es</code> と同じになってしまっています。</p>

<h2><code>/oauth/applications</code> のアクセス制限</h2>

<p><code>cancancan</code> と <code>rolify</code> を使って admin role があるユーザーだけに制限しています。
secret も見えてしまうので、 read 権限までしっかり制限する必要があるようです。</p>

<p><code>load_and_authorize_resource</code> でのロードと親クラス (<code>Doorkeeper::ApplicationsController</code>) の中でのロードでモデルの読み込みが二重になってしまうのですが、変更を少なくするためにそこは許容しました。</p>

<h2><code>GET /api/v1/me.json</code></h2>

<p>Doorkeeper gem の Wiki の例にあるようにユーザー情報をとれるようにしています。
制限していないと以下のような情報がとれました。</p>

<pre><code class="json">{ "id": 1,
  "email": "admin@example.com",
  "created_at": "2014-07-11T06:32:22.077Z",
  "updated_at": "2014-07-11T09:33:42.143Z",
  "name": "admin" }
</code></pre>

<p>制限したり関連するモデルの情報を増やしたりするなら
<a href="http://sugamasao.hatenablog.com/entry/20100914/1284415669" title="Rails のモデル関係と to_json(to_xml) - すがブロ">Rails のモデル関係と to_json(to_xml) - すがブロ</a>
に書いてあるように <code>respond_with</code> に <code>:only</code> をつけたり <code>:include</code> をつけたりすると出来るようです。</p>

<p>入ったり入らなかったりする条件がよくわからなかったのですが、
<code>devise</code> 関連では <code>authentication_token</code> が入っていることがあったので、
User モデルにいろんな情報を入れているなら、
きちんと制限した方が良さそうに思いました。</p>

<h2>microposts</h2>

<p><a href="http://railstutorial.jp/" title="Ruby on Rails チュートリアル：実例を使って Rails を学ぼう">Ruby on Rails チュートリアル：実例を使って Rails を学ぼう</a>
のように <code>Micropost</code> モデルを作成して、 API からも投稿できるようにしました。</p>

<p>投稿は scope で制限していて、デフォルトの <code>public</code> のみでは書き込めずに <code>write</code> も必要にしています。</p>

<p>API としては</p>

<ul>
<li><code>GET /api/v1/microposts</code> で投稿一覧</li>
<li><code>POST /api/v1/microposts</code> で新規投稿</li>
</ul>


<p>を用意しています。</p>

<h3><code>Can't verify CSRF token authenticity</code></h3>

<p>(2014-07-15 追記)</p>

<p>新規投稿の <code>POST</code> は <code>CSRF</code> チェックにひっかかってしまうので、
<code>skip_before_action :verify_authenticity_token</code>
を入れました。</p>

<p>以前から doorkeeper gem を使っているアプリでは
<code>Can't verify CSRF token authenticity</code>
というメッセージが出るだけで投稿自体は出来ていたのですが、
サンプルアプリでは投稿できなかったので、
<code>skip_before_action</code> を入れました。
(Rails 4 なので <code>skip_before_filter</code> ではなく <code>skip_before_action</code>)</p>

<h2>その後の変更点 (2014-07-15 追記)</h2>

<p>その後 <code>kaminari</code> 対応などを入れました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devise で通常ログイン出来るユーザーが他の複数サービス連携でログインできるようにした]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-08-devise-omniauth.html"/>
    <updated>2014-07-08T08:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/devise-omniauth</id>
    <content type="html"><![CDATA[<p><code>devise</code> でデータベース認証を実装している Rails アプリに Twitter などでもログインできるように
実装を追加してみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ruby 2.1.2</li>
<li>rails 4.1.4</li>
<li>devise 3.2.4</li>
<li>omniauth 1.2.1</li>
<li>omniauth-facebook 1.6.0</li>
<li>omniauth-github 1.1.2</li>
<li>omniauth-google-oauth2 0.2.4</li>
<li>omniauth-twitter 1.0.1</li>
<li>(dotenv 0.11.1) (key と secret の管理)</li>
<li>(font-awesome-sass 4.1.0) (view での <code>icon</code> メソッド)</li>
</ul>


<h2>前提条件</h2>

<ul>
<li>devise で通常の User モデルにメールアドレスとパスワードによる認証は実装されている。</li>
<li>複数サービスとの連携をするために User モデルには連携サービスの情報は直接持たずに UserAuth モデルに分ける。</li>
<li>連携対象サービスは Facebook, GitHub, Google+, Twitter</li>
<li>連携サービスからの追加情報はメールアドレスなども含めて一切とらずに認証だけに利用する。</li>
<li>どの連携サービス (provider) かと識別するための ID だけ保存する。</li>
<li>key や secret は環境変数で渡す。 (今回は dotenv を使ったが、 config/secrets.yml 経由でも良さそう)</li>
<li>今回はテストは未実装 (連携部分のテストの書き方をまだ調べていないため)</li>
<li>今回の実装範囲では I18n は使わずにメッセージは日本語固定</li>
</ul>


<h2>実装</h2>

<p>今回は以下のように実装を追加すると連携サービスでログインできるようになりました。</p>

<h3>Gemfile</h3>

<p>OmniAuth と使用するサービスを追加します。</p>

<pre><code class="ruby Gemfile">    gem 'omniauth'
    gem 'omniauth-facebook'
    gem 'omniauth-github'
    gem 'omniauth-google-oauth2'
    gem 'omniauth-twitter'
</code></pre>

<h3>initializer 追加</h3>

<p>key と secret があれば provider 登録するようにしました。</p>

<p>view で使うために、
登録されている provider の情報の取り方がわからなかったのと
追加で名前や Font Awesome のアイコン名も入れたかったので、
<code>AUTH_PROVIDERS</code> という配列にハッシュを入れるようにしています。</p>

<pre><code class="ruby config/initializers/omniauth.rb">    AUTH_PROVIDERS = []

    Rails.application.config.middleware.use OmniAuth::Builder do
      key, secret = ENV['FACEBOOK_KEY'], ENV['FACEBOOK_SECRET']
      if key &amp;&amp; secret
        provider :facebook, key, secret
        AUTH_PROVIDERS &lt;&lt; {
          provider: :facebook,
          name: 'Facebook',
        }
      end

      key, secret = ENV['GITHUB_CONSUMER_KEY'], ENV['GITHUB_CONSUMER_SECRET']
      if key &amp;&amp; secret
        provider :github, key, secret
        AUTH_PROVIDERS &lt;&lt; {
          provider: :github,
          name: 'GitHub',
        }
      end

      key, secret = ENV['GOOGLE_CLIENT_ID'], ENV['GOOGLE_CLIENT_SECRET']
      if key &amp;&amp; secret
        provider :google_oauth2, key, secret
        AUTH_PROVIDERS &lt;&lt; {
          provider: :google_oauth2,
          name: 'Google',
          icon: :google
        }
      end

      key, secret = ENV['TWITTER_CONSUMER_KEY'], ENV['TWITTER_CONSUMER_SECRET']
      if key &amp;&amp; secret
        provider :twitter, key, secret
        AUTH_PROVIDERS &lt;&lt; {
          provider: :twitter,
          name: 'Twitter',
        }
      end

      AUTH_PROVIDERS.each do |provider|
        provider[:icon] ||= provider[:provider]
      end
    end
</code></pre>

<h3>UserAuth モデル作成</h3>

<p><code>rails g model UserAuth user:references uid:string provider:string</code> で作成します。</p>

<p>モデルクラスは生成されたまま使いましたが、
validation を追加した方が良さそうです。</p>

<pre><code class="ruby app/models/user_auth.rb">    class UserAuth &lt; ActiveRecord::Base
      belongs_to :user
    end
</code></pre>

<p>データベースの方は <code>null: false</code> や index を追加しました。</p>

<p>&#8220;`ruby db/migrate/*_create_user_auths.rb
    class CreateUserAuths &lt; ActiveRecord::Migration
      def change
        create_table :user_auths do |t|
          t.references :user, index: true, null: false
          t.string :uid, null: false
          t.string :provider, null: false</p>

<pre><code>      t.timestamps
    end

    add_index :user_auths, [:uid, :provider], unique: true
  end
end
</code></pre>

<pre><code>
### `rake db:migrate`

`rake db:migrate` で反映しておきます。

### User クラス側

`has_many` を追加しておきます。
</code></pre>

<pre><code>  has_many :user_auths, dependent: :destroy
</code></pre>

<pre><code>
### ルーティング追加

まず、どう使われるのか把握するためにルーティングを追加します。

`auth_help` は後でプライバシーポリシーなどを書いています。
</code></pre>

<pre><code>  get '/auth/help' =&gt; 'auth#help', as: :auth_help
  get '/auth/:provider/callback' =&gt; 'auth#create'
  delete '/auth/destroy/:provider' =&gt; 'auth#destroy', as: :destroy_connection
</code></pre>

<pre><code>
ここには出てきていませんが、
OmniAuth で `/auth/:provider` がルーティングされるようです。

### AuthController 実装

参考サイトの実装例を参考にして AuthController を実装しました。

help は静的な情報を表示するだけなので、実装は空です。
</code></pre>

<pre><code># -*- coding: utf-8 -*-
class AuthController &lt; ApplicationController
  skip_before_filter :authenticate_user!

  def create
    auth = request.env['omniauth.auth']
    uid = auth['uid']
    provider = auth['provider']
    auth = UserAuth.where(uid: uid, provider: provider).first
    if auth
      flash[:notice] = "#{provider}でログインしました。"
      sign_in_and_redirect auth.user, event: :authentication
    else
      authenticate_user!
      UserAuth.create!(uid: uid, provider: provider, user_id: current_user.id)
      redirect_to root_url, notice: "#{provider}と連携しました。"
    end
  end

  def destroy
    provider = params.require(:provider)
    authenticate_user!
    auth = UserAuth.where(provider: provider, user_id: current_user.id).first
    auth.destroy if auth
    redirect_to root_url, notice: "#{provider}と連携解除しました。"
  end

  def help
  end
end
</code></pre>

<pre><code>
まだ連携を登録していない状態で

- ログアウト状態
- 連携サービスで認証・連携許可
- 戻ってきて通常ログイン
- `auth/failure` に飛ばされる

ということがおきているのですが、
`auth/failure`
を実装していないので、デフォルトの 404 エラー画面になってしまいます。

### view helpers 実装

以前から使っていた `link_to_sign_in_or_out` の実装も同じファイルに持ってきて、
`link_to_provider` という汎用的なメソッドを実装しました。
使い方は後述します。

`AUTH_PROVIDERS` のハッシュはここで使っています。
</code></pre>

<pre><code># -*- coding: utf-8 -*-
module LinkToAuthHelper
  def link_to_sign_in_or_out(html_options={})
    if user_signed_in?
      body = icon(:'sign-out') + t(:"devise.shared.links.sign_out", default: "Sign out")
      html_options = { method: :delete }.merge(html_options)
      link_to body, :destroy_user_session, html_options
    else
      body = icon(:'sign-in') + t(:"devise.shared.links.sign_in", default: "Sign in")
      link_to body, :new_user_session, html_options
    end
  end

  def link_to_provider(provider, html_options={})
    if current_user
      if UserAuth.where(user_id: current_user.id, provider: provider[:provider]).exists?
        html_options = { method: :delete }.merge(html_options)
        link_to icon(provider[:icon])+"#{provider[:name]}との連携を解除", destroy_connection_path(provider: provider[:provider]), html_options
      else
        link_to icon(provider[:icon])+"#{provider[:name]}と連携", "/auth/#{provider[:provider]}", html_options
      end
    else
      link_to icon(provider[:icon])+"#{provider[:name]}でログイン", "/auth/#{provider[:provider]}", html_options
    end
  end
end
</code></pre>

<pre><code>

### view に追加

ナビゲーションに以下のように追加しました。
認証連携がないときは従来のログイン・ログアウトだけ表示しています。

`AUTH_PROVIDERS` に登録されているときだけ連携のリンクを表示するようにしています。
</code></pre>

<pre><code>    li.dropdown
      a.dropdown-toggle data-toggle="dropdown"
        = icon(:user) + 'ログイン管理'
        b.caret
      ul.dropdown-menu
        li= link_to_sign_in_or_out
        - unless AUTH_PROVIDERS.empty?
          li= link_to icon(:info)+"認証連携のヘルプ", auth_help_path
        - AUTH_PROVIDERS.each do |provider|
          li= link_to_provider(provider)
</code></pre>

<pre><code>
### twitter 連携

Twitter は複数アカウントを使うことも通常の使用範囲として想定されていて、
アプリ専用のアカウントもとりやすいので、
Twitter 連携から試してみました。

https://apps.twitter.com/ から `Create New App` で作成します。

- Name: Twitter 全体で一意になるアプリケーションの ID 的にも使われるもの。ツイートの時にツイートしたアプリ名としても埋め込まれるが、今回は認証のみなので、他とぶつからないような名前という以上はこだわらなかった。
- Description: 認証のときに出てくる説明。
- Website: たとえば `http://app.127.0.0.1.xip.io:3000/` など
- Callback URL: たとえば `http://app.127.0.0.1.xip.io:3000/auth/twitter/callback` のように `/auth/twitter/callback` にする。実サイトなら `https` にすべき。

作成後には `Allow this application to be used to Sign in with Twitter` のチェックを入れておきます。
チェックがないと Twitter 連携でのログインがうまくいかないようです。

アイコンや Organization なども必要に応じて変更します。

API keys タブで key と secret を取得します。

- API key : 環境変数 `TWITTER_CONSUMER_KEY` に設定
- API secret : 環境変数 `TWITTER_CONSUMER_SECRET` に設定

dotenv を使っているので `.env` に以下のような感じで設定しました。
ランダムな文字列のように見えます。
</code></pre>

<pre><code>TWITTER_CONSUMER_KEY="xxxxXXxxXxXxXXXxXxXXXXxxx"
TWITTER_CONSUMER_SECRET="xxXXxXXxxxxxxXXXXXxXxXXxxXXXxXXxxxxXXxxXxxXXxxXxxx"
</code></pre>

<pre><code>
### 動作確認

- 通常のログインをした状態で「Twitter と連携」で Twitter の許可画面に飛びます。
- 許可すると「Twitter 側に許可情報」と「UserAuth に連携情報」が保存されます。
- 「Twitter との連携を解除」で「UserAuth が削除」されます。
- 「ログアウト」して「Twitter でログイン」すると「ログイン画面」に戻ります。
- ログインすると `auth/failure` が 404 エラーになります。ここは後で実装する予定です。
- 再度ログイン後の画面を直接開きます。
- 再度「Twitter と連携」で「UserAuth に連携情報」が保存されます。「Twitter 側の許可情報」は古いままです。
- 「ログアウト」して「Twitter でログイン」でログインできます。
- https://twitter.com/settings/applications で許可を取り消します。
- 「ログアウト」して「Twitter でログイン」で Twitter の許可画面に飛びます。
- 許可すると「Twitter 側に許可情報」が保存されて、「UserAuth」は残っているので、そのままログインできます。

### GitHub 連携

GitHub 連携は作成後にすぐに使えるので、アプリケーション作成に使っても良いアカウントがあれば一番簡単です。

https://github.com/settings/applications から `Register new application` で作成します。

- Application name: 適切な名前を設定
- Homepage URL: たとえば `http://app.127.0.0.1.xip.io:3000/` など
- Application description: ユーザーが許可するときにわかりやすい説明
- Authorization callback URL: たとえば `http://app.127.0.0.1.xip.io:3000/auth/github/callback` のように `/auth/github/callback` にする。実サイトなら `https` にすべき。

右上に見えている Client ID と Client Secret を使います。

- Client ID : 環境変数 `GITHUB_CONSUMER_KEY` に設定
- Client Secret : 環境変数 `GITHUB_CONSUMER_SECRET` に設定

dotenv を使っているので `.env` に以下のような感じで設定しました。
十六進数の数字のように見えます。
</code></pre>

<pre><code>GITHUB_CONSUMER_KEY="xxxxxxxxxxxxxxxxxxxx"
GITHUB_CONSUMER_SECRET="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
</code></pre>

<pre><code>
## Facebook 連携

https://developers.facebook.com/ から上の `Apps` の中にある `Craete a New App` で作成します。
最初は作成前に開発者関連の規約などに同意する必要があるようです。

- Display Name: 適切な名前を設定します。
- Namespace: optional なので空欄のままで良いようです。
- カテゴリ: 適当に選択します。

セキュリティチェックがあるので、入力すると作成できます。

右上に見えている App ID と App Secret (Show を押すとパスワード認証の後に内容表示) を使います。

- App ID : 環境変数 `FACEBOOK_KEY` に設定
- App Secret : 環境変数 `FACEBOOK_SECRET` に設定

dotenv を使っているので `.env` に以下のような感じで設定しました。
十進数と十六進数の数字のように見えます。
</code></pre>

<pre><code>FACEBOOK_KEY="xxxxxxxxxxxxxxx"
FACEBOOK_SECRET="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
</code></pre>

<pre><code>
`Settings` の `Add Platform` で `Website` を選んで追加します。

- Site URL: たとえば `http://app.127.0.0.1.xip.io:3000/` など
- Mobile Site URL: 空欄のまま

callback URL は設定が不要だったので、
Site URL の下ならどこでも良さそうです。

### `google_oauth2` 連携

https://github.com/zquestz/omniauth-google-oauth2 に書いてあるように
https://code.google.com/apis/console/ を開きます。

飛ばされる先で `API &amp; AUTH` の中の `Credentials` で `Create new Client ID` で作成します。

- Application type : Web application
- Authorized JavaScript origins : たとえば `http://app.127.0.0.1.xip.io:3000` など
- Authorized redirect URI : たとえば `http://app.127.0.0.1.xip.io:3000/auth/google_oauth2/callback` のように `/auth/google_oauth2/callback` にする。実サイトなら `https` にすべき。

右に見えている Client ID と Client secret を使います。

- Client ID : 環境変数 `GOOGLE_CLIENT_ID` に設定
- Client secret : 環境変数 `GOOGLE_CLIENT_SECRET` に設定

dotenv を使っているので `.env` に以下のような感じで設定しました。
ドメインっぽい文字列とランダムな文字列のように見えます。
</code></pre>

<pre><code>GOOGLE_CLIENT_ID="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com"
GOOGLE_CLIENT_SECRET="XXxxxXxXxxxXXxXXxXxXXxxX"
</code></pre>

<p>&#8220;`</p>

<p>さらに <code>Consent screen</code> での設定が必要です。
しかも全アプリ共通のようなので、名前を分けたい場合はグーグルアカウントごと違うものにしないといけないように見えました。</p>

<ul>
<li>Email address : グーグルアカウントのアドレス選択</li>
<li>Product name : 適切な名前を設定</li>
<li>Homepage URL 以下 : 必要に応じて設定</li>
</ul>


<p>さらにエラーメッセージ (<code>"Access Not Configured. Please use Google Developers Console to activate the API for your project."</code>) で検索してわかったのですが、
<a href="http://qiita.com/aikyo02/items/459d03af304e1188f110" title="Google OAuth 2.0 loginが2014年9月に使えなくなる(Googleアカウントからのユーザ登録機能がある場合は注意)">Google OAuth 2.0 loginが2014年9月に使えなくなる(Googleアカウントからのユーザ登録機能がある場合は注意)</a>
に書いてあるように、
APIs で <code>Google+ API</code> も有効にする必要がありました。</p>

<h2>参考サイト</h2>

<ul>
<li><a href="http://xoyip.hatenablog.com/entry/2013/12/20/212109" title="Railsでログインとは別に複数のサービスとの連携を行う方法 - PILOG">Railsでログインとは別に複数のサービスとの連携を行う方法 - PILOG</a>
と<a href="https://github.com/xoyip/multi-oauth">その実装</a>は非常に参考になりました。</li>
<li><a href="http://qiita.com/aikyo02/items/459d03af304e1188f110" title="Google OAuth 2.0 loginが2014年9月に使えなくなる(Googleアカウントからのユーザ登録機能がある場合は注意)">Google OAuth 2.0 loginが2014年9月に使えなくなる(Googleアカウントからのユーザ登録機能がある場合は注意)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAWS-UG三都物語2014に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-05-jawsug-santo.html"/>
    <updated>2014-07-05T13:07:03+09:00</updated>
    <id>http://blog.n-z.jp/blog/jawsug-santo</id>
    <content type="html"><![CDATA[<p><a href="http://santo2014.jaws-ug.jp/" title="夏のJAWS-UG 三都物語 2014">夏のJAWS-UG 三都物語 2014</a>
に午後から参加して、
主に Vagrant の話を聞いたのと、
CDP道場（初中級）に参加していました。</p>

<!--more-->


<h2>開発現場で活用する Vagrant</h2>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00F418SQ8" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>まず最初に Vagrant の話をきいてきました。</p>

<p><a href="http://www.amazon.co.jp/gp/product/B00F418SQ8/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00F418SQ8&amp;linkCode=as2&amp;tag=znz-22">Vagrant入門ガイド</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=B00F418SQ8" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
がなぜか今200円になっていると言っていました。</p>

<p><a href="https://github.com/shin1x1/vagrant-demo-20140705">https://github.com/shin1x1/vagrant-demo-20140705</a> にデモの内容が公開されていますが、後で聞いてみたらスライドの番号では 4 が vagrant share だけだったので、番号がずれていると言っていました。</p>

<p>vagrant up だけで開発環境が構築できるようにしておくというのはマネしてみようと思いました。</p>

<p>ansible をゲスト OS 側に入れるのは vagrant up だけで済む (ホスト側に ansible を入れる必要がない) という他にホスト側の ansible のバージョンが上がって provisioning に影響が出るのを避けられるという利点もあると思いました。</p>

<h2>オンプレから AWS への劇的ビフォーアフター</h2>

<p>オンプレという言葉がさしているものが期待していたものと違ったので、あまり聞いていなくて他のことをしていました。</p>

<h2>AWS と mackerel で実践する Immutable Infrastructure</h2>

<p>他の作業がはかどっていたので、作業しながら聞いていました。</p>

<p>とりあえず、まだ流動的な部分もありそうで、
しばらく様子見な部分も多そうだと思いました。</p>

<h2>CDP 道場（初中級）</h2>

<p>CDP というのはクラウドデザインパターンという意味だったらしく、
クラウドを実際にどういう構成で使うのかというのが勉強になりました。</p>

<h2>その後</h2>

<p>懇親会が無料というのを知らなかったこともあり、
そのまま帰りました。</p>
]]></content>
  </entry>
  
</feed>
