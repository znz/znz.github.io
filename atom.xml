<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-12-17T23:26:26+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第 18 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-12-17-rubymotion-mokumoku-osaka.html"/>
    <updated>2014-12-17T19:32:35+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>RubyMotion もくもく会 in Osaka の
<a href="http://rubymotionjp.connpass.com/event/10195/" title="第 18 回 RubyMotion もくもく会 in Osaka - connpass">第 18 回 RubyMotion もくもく会 in Osaka - connpass</a>
に参加してきました。</p>

<p>次回の
<a href="http://rubymotionjp.connpass.com/event/10675/" title="第 19 回 RubyMotion もくもく会 in Osaka - connpass">第 19 回 RubyMotion もくもく会 in Osaka - connpass</a>
2015/01/21(水) になりました。</p>

<!--more-->


<h2>メモ</h2>

<p>今日は <a href="http://d.hatena.ne.jp/nagachika/">ruby trunk changes</a> を読んでいました。
以下自分のメモです。</p>

<ul>
<li><code>Time.now.to_f</code> の代わりに <code>Process.clock_gettime(Process::CLOCK_REALTIME)</code></li>
<li><code>{ 'symbol-key': value }</code> という書き方ができるのは ruby 2.2 から</li>
<li><code>String#chomp</code> に空文字列を渡すと特殊な処理がある <a href="https://github.com/ruby/ruby/pull/780">https://github.com/ruby/ruby/pull/780</a></li>
</ul>


<h2>他の人の話のメモ</h2>

<ul>
<li><a href="http://qiita.com/shu223/items/bce33f6ab448c90e4d2b" title="Xcode - 【iOS7】ばねっぽいアニメーションを実現するUIViewの新メソッド - Qiita">Xcode - 【iOS7】ばねっぽいアニメーションを実現するUIViewの新メソッド - Qiita</a></li>
<li>スポともアプリ</li>
<li><a href="https://github.com/fastred/SloppySwiper">https://github.com/fastred/SloppySwiper</a></li>
<li><a href="https://www.meteor.com/">meteor</a></li>
<li><a href="http://ionicframework.com/">ionic</a></li>
<li><a href="http://devlove-kansai.doorkeeper.jp/events/17726" title="Dockerを現場に取り入れてみよう！ - DevLOVE関西 | Doorkeeper">Dockerを現場に取り入れてみよう！ - DevLOVE関西 | Doorkeeper</a></li>
<li><a href="https://www.bloc.io/tutorials/swiftris-build-your-first-ios-game-with-swift">https://www.bloc.io/tutorials/swiftris-build-your-first-ios-game-with-swift</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第64回 Ruby関西 勉強会に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-12-13-rubykansai64.html"/>
    <updated>2014-12-13T13:13:04+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai64</id>
    <content type="html"><![CDATA[<p><a href="http://rubykansai.doorkeeper.jp/events/17347" title="第64回 Ruby関西 勉強会">第64回 Ruby関西 勉強会</a>
に参加したので、そのメモです。</p>

<!--more-->


<h2>オープニング</h2>

<ul>
<li>勉強会の名前がちょっと変わった。</li>
</ul>


<h2>名付け親システム</h2>

<ul>
<li>子供の名前付けの補助をするプログラムを作った話</li>
<li>要件定義が一番時間がかかった</li>
</ul>


<h2>史上最安易／できるだけ速く数を数えたい</h2>

<ul>
<li>那由他まで挑戦したい</li>
<li>enzi</li>
<li>RuJit</li>
<li>IO が遅いのではという話</li>
</ul>


<h2>Ruby/SDL2 のはなし</h2>

<ul>
<li><a href="https://github.com/ohai/ruby-sdl2">https://github.com/ohai/ruby-sdl2</a></li>
<li><a href="http://www.kmc.gr.jp/~ohai/rubysdl2/doc-en/">http://www.kmc.gr.jp/~ohai/rubysdl2/doc-en/</a></li>
<li>SDL 2.x 自体は Android などにも対応しているらしい (Ruby/SDL2 は無理)</li>
<li>2000年頃(?)から 2D 描画にも 3D 機能を利用するようになってきていた</li>
<li>初期化に失敗したときのエラーメッセージ表示とかできるようになった</li>
<li>yard の i18n 機能は英語を書いておかないと日本語が書けないので日本語は後になっている</li>
<li>加算ブレンディングは光っぽいものに使う</li>
<li>アルファブレンディングは透明っぽいものに使う</li>
<li>デモ: <a href="https://gist.github.com/ohai/fb18f6c313ce669911a3">https://gist.github.com/ohai/fb18f6c313ce669911a3</a></li>
<li>Smalruby で Ruby/SDL (1の方) が使われているらしい</li>
<li>SDL と SDL2 が非互換なので</li>
</ul>


<h2>DDD with Rails</h2>

<ul>
<li><a href="https://speakerdeck.com/ogom/ddd-with-rails">https://speakerdeck.com/ogom/ddd-with-rails</a></li>
<li><a href="https://github.com/hommachirb/rails-ddd">https://github.com/hommachirb/rails-ddd</a></li>
<li>ActiveState が middleware なのはデータベースに接続できないと ActiveRecord の middleware でエラーになって、そもそも任意の view が使えないため</li>
<li>state machine gem は開発が止まっている</li>
<li>aasm gem は活発</li>
<li><a href="http://qiita.com/ogomr/items/0b5c4de7f38fd1482a48" title="PlantUML Cheat Sheet">PlantUML Cheat Sheet</a></li>
</ul>


<h2>Ruby初級者向けレッスン 51回 例外</h2>

<p>内容の他に、デモのときのシェルや Emacs の操作などが気になりました (参考になりました)。</p>

<h2>クロージング</h2>

<ul>
<li>次回は 2015 年 2 月 21 日</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zshでgrepのようなことをする]]></title>
    <link href="http://blog.n-z.jp/blog/2014-12-11-zsh-grep.html"/>
    <updated>2014-12-11T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/zsh-grep</id>
    <content type="html"><![CDATA[<p>zsh で簡易 grep 的なことができたので、紹介します。</p>

<!--more-->


<h2>実行例</h2>

<p><code>${name:#pattern}</code> と <code>(M)</code> フラグを組み合わせると配列から glob pattern にマッチしたものだけ抜き出せます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> <span class="nb">echo</span> <span class="k">${</span><span class="p">(FM)</span><span class="k">${</span><span class="p">(f)</span><span class="s2">&quot;$(&lt; /etc/hosts)&quot;</span><span class="k">}</span><span class="p">:#*local*</span><span class="k">}</span>
</span><span class='line'><span class="go">127.0.0.1       localhost</span>
</span><span class='line'><span class="go">::1     ip6-localhost ip6-loopback</span>
</span><span class='line'><span class="go">fe00::0 ip6-localnet</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>(M)</code> フラグなしだと <code>grep -v</code> のようにマッチしなかったものだけが残ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> <span class="nb">echo</span> <span class="k">${</span><span class="p">(F)</span><span class="k">${</span><span class="p">(f)</span><span class="s2">&quot;$(&lt; /etc/passwd)&quot;</span><span class="k">}</span><span class="p">:#*:[1-8]*</span><span class="k">}</span>
</span><span class='line'><span class="go">root:x:0:0:root:/root:/bin/bash</span>
</span><span class='line'><span class="go">news:x:9:9:news:/var/spool/news:/bin/sh</span>
</span></code></pre></td></tr></table></div></figure>


<h2>解説</h2>

<ol>
<li>まず最初に <code>$(&lt; filename)</code> でファイルから内容を読み込んでいます。</li>
<li>次に <code>""</code> で改行などの <code>IFS</code> に含まれる空白による分割を抑制しています。</li>
<li>そして <code>${(f)var}</code> の <code>f</code> フラグは <code>ps:\n:</code> の省略形で、改行で分割して配列にするという意味です。ここまでの処理は zsh での典型的な処理なので覚えておくと便利です。</li>
<li>その次がメインの <code>${name:#pattern}</code> です。指定するパターンは正規表現ではなくファイル glob のパタ
ーンのようです。 <code>(M)</code> フラグと組み合わせることでマッチしなかった要素を削除しています。</li>
<li>最後に <code>${(F)var}</code> の <code>F</code> フラグは <code>pj:\n:</code> の省略形で、改行で結合するという意味です。</li>
</ol>


<p><code>F</code> フラグは <code>M</code> フラグと同時に指定しても問題なかったので、括弧 (<code>${}</code> の方) をネストさせずに同じ所 に書いています。
<code>f</code> フラグは別にしないとうまく動きませんでした。</p>

<p>行全体とのマッチなので、前後に <code>*</code> をつけないと一部に含むという意味になりません。
逆に後ろだけに <code>*</code> をつけて行頭マッチなどが出来るということでもあります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zshでEnterを連打したときにいろいろ実行する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-12-06-zsh-enter.html"/>
    <updated>2014-12-06T18:01:45+09:00</updated>
    <id>http://blog.n-z.jp/blog/zsh-enter</id>
    <content type="html"><![CDATA[<p>これは
<a href="http://qiita.com/advent-calendar/2014/zsh">zsh Advent Calendar 2014</a>
の 6 日目の記事です。</p>

<p>zsh で Enter を連打したときに順番にコマンドを実行するというのをやってみました。</p>

<p>参考にしたのは <a href="http://qiita.com/yuyuchu3333/items/e9af05670c95e2cc5b4d" title="Zsh - Enter で ls と git status を表示すると便利 - Qiita">Zsh - Enter で ls と git status を表示すると便利 - Qiita</a> です。</p>

<!--more-->


<h2>概要と実装</h2>

<p><code>.zshrc</code> に以下のような感じで追加して空 Enter を押すと
最初は <code>ls</code> で次に
<code>svn status</code> または <code>git status -sb</code> を実行するようになります。
連打したときに終わりがわかりやすいように 3 回目は何も実行しないようにしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">function</span> my_enter <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> -n <span class="s2">&quot;$BUFFER&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="nb">builtin </span>zle .accept-line
</span><span class='line'>        <span class="k">return</span> 0
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$WIDGET&quot;</span> !<span class="o">=</span> <span class="s2">&quot;$LASTWIDGET&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="nv">MY_ENTER_COUNT</span><span class="o">=</span>0
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>    <span class="k">case</span> <span class="nv">$[</span>MY_ENTER_COUNT++<span class="o">]</span> in
</span><span class='line'>        0<span class="o">)</span>
</span><span class='line'>            <span class="nv">BUFFER</span><span class="o">=</span><span class="s2">&quot; ls&quot;</span>
</span><span class='line'>            <span class="p">;;</span>
</span><span class='line'>        1<span class="o">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">[[</span> -d .svn <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>                <span class="nv">BUFFER</span><span class="o">=</span><span class="s2">&quot; svn status&quot;</span>
</span><span class='line'>            <span class="k">elif</span> git rev-parse --is-inside-work-tree &gt;/dev/null 2&gt;<span class="p">&amp;</span>1<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>                <span class="nv">BUFFER</span><span class="o">=</span><span class="s2">&quot; git status -sb&quot;</span>
</span><span class='line'>            <span class="k">fi</span>
</span><span class='line'>            <span class="p">;;</span>
</span><span class='line'>        *<span class="o">)</span>
</span><span class='line'>            <span class="nb">unset </span>MY_ENTER_COUNT
</span><span class='line'>            <span class="p">;;</span>
</span><span class='line'>    <span class="k">esac</span>
</span><span class='line'>    <span class="nb">builtin </span>zle .accept-line
</span><span class='line'><span class="o">}</span>
</span><span class='line'>zle -N my_enter
</span><span class='line'>bindkey <span class="s1">&#39;^m&#39;</span> my_enter
</span></code></pre></td></tr></table></div></figure>


<h2>関数解説</h2>

<p>最初の <code>if</code> 文で <code>$BUFFER</code> をチェックして入力があるときは <code>zle .accept-line</code> で普通に実行するようにしています。</p>

<p>次の <code>if</code> 文で <code>$LASTWIDGET</code> と <code>$WIDGET</code> が違うときに <code>MY_ENTER_COUNT</code> というシェル変数を初期化しています。
この変数で何回目の空 Enter かを覚えておくようにしています。</p>

<p>そして <code>MY_ENTER_COUNT</code> で何回目かに応じて実行するコマンドを変えています。
頭にスペースを入れているのは <code>setopt histignorespace</code> と組み合わせることを想定しています。</p>

<p>最後に <code>zle .accept-line</code> で実行しています。</p>

<h2>まとめ</h2>

<p>空 Enter 連打でいろいろなコマンドを順番に実行できるようにしてみました。
参考にして好きなコマンドを実行できるようにすると良いのではないでしょうか。</p>

<p><a href="http://qiita.com/yuyuchu3333/items/e9af05670c95e2cc5b4d">参考元の Qiita の記事</a>
にちょっと書いているように Enter がやり過ぎと思ったら
<code>bindkey '^J' my_enter</code>
のように別のキーに割り当てると良いでしょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[capistrano 3.3.3 が依存している capistrano-stats について]]></title>
    <link href="http://blog.n-z.jp/blog/2014-12-01-capistrano-stats.html"/>
    <updated>2014-12-01T21:33:21+09:00</updated>
    <id>http://blog.n-z.jp/blog/capistrano-stats</id>
    <content type="html"><![CDATA[<p>capistrano が 3.3.3 にあがって
<a href="https://github.com/capistrano/stats">capistrano-stats</a>
という gem に依存するようになりました。
これは <code>metrics.capistranorb.com:1200</code> にバージョン情報などを送信して
capistrano のサポートの改善に役立てようとするもののようです。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>capistrano 3.3.3</li>
<li>capistrano-stats 1.0.3</li>
</ul>


<h2>Capfile locked</h2>

<p>capistrano-stats とは関係ないですが、
<code>Capfile locked at 3.2.1, but 3.3.3 is loaded</code>
と出るときは <code>config/deploy.rb</code> の最初の方にある
<code>lock '3.2.1'</code>
という行を
<code>lock '3.3.3'</code>
に書き換えれば OK です。</p>

<h2>capistrano-stats 1.0.3 の挙動</h2>

<p>初回実行時に
<code>Do you want to enable statistics? (y/N):</code>
ときかれて、
そのまま Enter か <code>n</code> を入力すると ruby や capistrano のバージョンは送信されなくなるのですが、
(少なくとも私の) 期待に反して
<code>metrics.capistranorb.com:1200</code>
への送信自体は発生するようになっています。</p>

<h2>何が問題か</h2>

<p>全く送信してほしくない場合にも通信が発生したり、
firewall で塞がれている場合にエラーになったり
という問題があります。</p>

<h2>一時的に無効にするには?</h2>

<p><code>CAPISTRANO_METRICS=localhost:1200 bundle exec cap default</code>
のように環境変数 <code>CAPISTRANO_METRICS</code> で送っても無視されるところに送信すれば良さそうです。</p>

<h2>完全に無効にするには?</h2>

<p>pull request 1 の
<a href="https://github.com/capistrano/stats/pull/1" title="Honor the users privacy decision and do not send UDP packets if he does not want to send metrics">Honor the users privacy decision and do not send UDP packets if he does not want to send metrics</a>
にあるように</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s1">&#39;metrics:collect&#39;</span><span class="o">].</span><span class="n">clear_actions</span>
</span></code></pre></td></tr></table></div></figure>


<p>を <code>config/deploy.rb</code> に追加すると送信されなくなりました。</p>

<h2>今後</h2>

<p><a href="https://github.com/capistrano/stats/pull/2" title="Allow users to opt-out of sending the UDP ping and improve error handling when the sendto syscall fails">Allow users to opt-out of sending the UDP ping and improve error handling when the sendto syscall fails</a>
という pull request が続きで出ているので、
将来のバージョンでは全く送信しない選択肢が用意されるかもしれません。</p>

<h2>2014-12-13 追記</h2>

<p>その後、
capistrano 3.3.4 と capistrano-stats 1.1.0 にあがって、
デフォルトの N を 2 回は全く送信しないようになりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 17 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-11-19-rubymotion-mokumoku-osaka.html"/>
    <updated>2014-11-19T19:36:19+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 15 回に参加していて
前回の 16 回は中止になっていた
RubyMotion もくもく会 in Osaka の
<a href="http://rubymotionjp.connpass.com/event/9597/" title="第 17 回 RubyMotion もくもく会 in Osaka - connpass">第 17 回 RubyMotion もくもく会 in Osaka - connpass</a>
に参加してきました。
今回も基本的にみんなもくもくしていました。</p>

<p>次回の
<a href="http://rubymotionjp.connpass.com/event/10195/" title="第 18 回 RubyMotion もくもく会 in Osaka - connpass">第 18 回 RubyMotion もくもく会 in Osaka - connpass</a>
は 2014/12/17(水) になりました。</p>

<!--more-->


<p>今回はメールを書いたり github の issues を見たりコメントしたりしていました。</p>

<p>最後の方は <a href="http://support.apple.com/ja-jp/HT5868">iPod touch の「このコンピュータを信頼しますか」警告</a>が出続けて
iTunes が認識してくれない問題を思い出したので、調べていたのですが、結局解決しませんでした。
Dropbox は認識して写真を取り込んでくれるので、ケーブルなどのハードウェアは問題がないはずなので、
ソフトウェア側の問題らしいというところまでは絞り込めています。</p>

<h2>メモ</h2>

<p>以下メモです。</p>

<ul>
<li>Firebase</li>
<li>WKWebView</li>
<li><a href="https://www.mapbox.com/">Mapbox</a></li>
<li><a href="http://qiita.com/aki/items/c0073bf1e83858fe2e92">Xcode6のiPhone Simulatorの場所</a></li>
<li><a href="https://github.com/magicalpanda/MagicalRecord">https://github.com/magicalpanda/MagicalRecord</a></li>
<li><a href="http://qiita.com/susieyy/items/749c4ac5d82d765c12c6">SwiftのRSS Readerを100行で作ったよ</a></li>
<li><a href="https://github.com/lingoer/SwiftyJSON">https://github.com/lingoer/SwiftyJSON</a></li>
<li>WatchKit</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第5回 コンテナ型仮想化の情報交換会＠大阪に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2014-11-14-ct-study-osaka-5.html"/>
    <updated>2014-11-14T19:00:32+09:00</updated>
    <id>http://blog.n-z.jp/blog/ct-study-osaka-5</id>
    <content type="html"><![CDATA[<p><a href="http://ct-study.connpass.com/event/9068/" title="第5回 コンテナ型仮想化の情報交換会＠大阪">第5回 コンテナ型仮想化の情報交換会＠大阪</a>
に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>いまさら聞けない Docker</h2>

<ul>
<li>前半はさくらインターネットの話でした。</li>
<li>仮想環境を動かす基盤として専用サーバがまた増えているらしいというのが興味深いと思いました。</li>
<li>後半は docker の基本についての話でした。</li>
<li><a href="http://www.slideshare.net/kunihirotanaka1/immutable-infrastructuredockercontainerstudyosaka20141114">http://www.slideshare.net/kunihirotanaka1/immutable-infrastructuredockercontainerstudyosaka20141114</a></li>
</ul>


<h2>Docker Registry入門</h2>

<ul>
<li><a href="https://github.com/docker/docker-registry">https://github.com/docker/docker-registry</a> の話</li>
<li>起動は簡単</li>
<li>pip でインストールも可能 (公式の <a href="https://github.com/docker/docker-registry/blob/master/Dockerfile">Dockerfile</a> 参照)</li>
<li>設定は <a href="https://github.com/docker/docker-registry/blob/master/config/config_sample.yml">config_sample.yml</a> などを参照</li>
<li>docker-registry-ui, docker-registry-web で検索すると非公式の Web UI が出てくる</li>
<li>ミラーリングに使える

<ul>
<li>docker コマンドで <code>--registry-mirror</code> オプション</li>
<li>private registry では <code>MIRROR_SOURCE</code> を指定</li>
</ul>
</li>
</ul>


<h2>Linuxコンテナの基本と最新情報</h2>

<ul>
<li>namespace と cgroup</li>
<li>sane_behavior オプション</li>
<li>CRIU のデモ</li>
</ul>


<h2>LT</h2>

<p>LT では boot2docker について話しました。
他の発表者も含めて、特に 5 分という制限はなく、緩い感じで発表していました。</p>

<iframe src="http://slide.rabbit-shocker.org/authors/znz/boot2docker-upgrade/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="http://slide.rabbit-shocker.org/authors/znz/boot2docker-upgrade/" title="boot2docker upgrade">boot2docker upgrade</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[関西オープンフォーラム2014に行ってきました]]></title>
    <link href="http://blog.n-z.jp/blog/2014-11-08-k-of-jp.html"/>
    <updated>2014-11-08T12:59:07+09:00</updated>
    <id>http://blog.n-z.jp/blog/k-of-jp</id>
    <content type="html"><![CDATA[<p><a href="https://k-of.jp/2014/" title="KOF 2014：関西オープンフォーラム2014">KOF 2014：関西オープンフォーラム2014</a>
に行ってきました。</p>

<!--more-->


<h2>Debian 8 &ldquo;jessie&rdquo; frozen</h2>

<p>まずは
<a href="https://k-of.jp/2014/session/583" title="Debian 8 &quot;jessie&quot; frozen">Debian 8 &quot;jessie&quot; frozen</a>
を聞いていました。</p>

<p>systemd がデフォルトになる (wheezy からあげるときも) とか、
tdiary が jessie に入らなかったので backports で提供予定とかが
気になりました。</p>

<h2>東海道らぐ　秋の大阪LT大会 in KOF</h2>

<p>次は同じ場所で
<a href="https://k-of.jp/2014/session/569" title="東海道らぐ　秋の大阪LT大会 in KOF">東海道らぐ　秋の大阪LT大会 in KOF</a>
を聞いていました。</p>

<p>今後の東海道らぐの予定は、
関西では 2015-01-10(土) に LILO との合同開催があるようです。</p>

<p>以下メモです。</p>

<ul>
<li>canna の fork の izumo</li>
<li>宿探しに トラベルコ というのが便利そう</li>
<li><a href="http://connpass.com/event/9898/" title="KOF2014翌日もくもく会">KOF2014翌日もくもく会</a></li>
<li>CyanobenMod</li>
<li>OpenModelica</li>
<li>seq, jot</li>
</ul>


<h2>途中</h2>

<p>しばらくブースの方で話をしたり、他の人が話をしているのを聞いたりしていました。</p>

<h2>Ruby Enterprise Environment</h2>

<p>最後は
<a href="https://k-of.jp/2014/session/549" title="Ruby Enterprise Environment">Ruby Enterprise Environment</a>
を聞きながらこのブログ記事を書いたり他のことをしたりしていました。</p>

<p>前半は Windows 上での Ruby の話がメインだったのに、人が少なめだったので、
Enterprise というタイトルだとターゲット層に伝わらなかったのではないかと思いました。
後半は RHEL での話だったので Enterprise という感じでした。</p>

<h2>お楽しみ抽選会</h2>

<p><a href="https://k-of.jp/2014/session/636" title="お楽しみ抽選会">お楽しみ抽選会</a>
もちょっと参加してみましたが、いつも通りのじゃんけんで、さっぱりでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4.1.7 にあげたら一部の画像が表示されなくなった]]></title>
    <link href="http://blog.n-z.jp/blog/2014-11-05-sprockets.html"/>
    <updated>2014-11-05T21:11:09+09:00</updated>
    <id>http://blog.n-z.jp/blog/sprockets</id>
    <content type="html"><![CDATA[<p>Rails 4.1.7 にあげたら一部の画像が表示されなくなるという現象が起きて、しばらく悩んでいたのですが解決しました。</p>

<!--more-->


<h2>原因</h2>

<ul>
<li>Rails か sprockets のバージョンアップでファイル名につけられる digest が変わった。</li>
<li><code>image_tag</code> で画像を参照している HTML が <code>cache</code> の中にあった。</li>
</ul>


<h2>現象</h2>

<p><code>rails console</code> で <code>Rails.application.assets.find_asset(asset_name).digest</code> を試しても新しい digest がちゃんと返ってくるのに、
ブラウザー上では古い digest の URL が参照されていてファイルが見つからないという現象になっていました。</p>

<p>アセットはキャッシュ期間の長いファイルとして設定しているので、複数ブラウザーで確認すると最初は現象が起きたり起きなかったりしていて、サーバー側の問題だと気づくのが遅れました。</p>

<h2>対処</h2>

<p><code>dalli</code> gem 経由で <code>memcached</code> をキャッシュ使っていたので <code>sudo service memcached restart</code> してキャッシュを破棄しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyによるクローラー開発技法 読書会 第2回(兵庫県)に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2014-11-01-amagasakirb.html"/>
    <updated>2014-11-01T13:05:51+09:00</updated>
    <id>http://blog.n-z.jp/blog/amagasakirb</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/event/index/220392/" title="11月1日 Rubyによるクローラー開発技法　読書会　第2回(兵庫県)">11月1日 Rubyによるクローラー開発技法　読書会　第2回(兵庫県)</a>
に参加しました。
今回は3,4章でした。</p>

<!--more-->


<h2>メモ</h2>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4797380357" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>前回参加していなかった人向けに、最初に 1,2 章の概要説明があって、
今回は 3 章からでした。
今回から、誤字・脱字などのフィードバックのため、
Wiki
(<a href="https://github.com/cuzic/amagasakirb/wiki/2014.11.01-Ruby-%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%83%BC%E9%96%8B%E7%99%BA%E6%8A%80%E6%B3%95%E8%AA%AD%E6%9B%B8%E4%BC%9A-%E7%AC%AC2%E5%9B%9E" title="2014.11.01 『Ruby によるクローラー開発技法』読書会 第2回">2014.11.01 『Ruby によるクローラー開発技法』読書会 第2回</a>)
に記録するようになりました。</p>

<p>以下、今回のメモです。</p>

<ul>
<li>p.112 Crawl-delay の単位は決まっていない</li>
<li>p.148 構文解析で正規表現が使われていることは多い?</li>
<li>p.149 3-1-2 ECU_JP → EUC-JP</li>
<li>p.151 行頭に <code>=~</code> は syntax error で、行頭に <code>.</code> は最近の ruby では OK になっている</li>
<li>Fluent API の話</li>
<li>p.150 RegExp → Regexp</li>
<li>posix 文字クラスと Unicode プロパティの話</li>
<li>Oniguruma と Onigmo の話</li>
<li>pp.152-153 名前付きキャプチャの説明がローカル変数への割当だけの説明になっているようにみえる</li>
<li>p.153 <code>\b</code> は文字クラスの中か外かで解釈が変わる</li>
<li>p.154 <code>\x{7HHHHHHH}</code> は使えない <a href="https://github.com/rurema/doctree/issues/80">https://github.com/rurema/doctree/issues/80</a> 参照</li>
<li>p.154 <code>\s</code> には <code>\v</code> が含まれる</li>
<li>p.155 「m」オプションを使うことで改行を無視する → <code>.</code> で改行も含むようになる</li>
<li>p.156 EUC_JP → EUC-JP</li>
<li><a href="https://github.com/cuzic/amagasakirb/wiki">https://github.com/cuzic/amagasakirb/wiki</a></li>
<li>p.159 コードの中のコメント部分: UFT8 → UTF-8</li>
<li>p.162 モンキーパッチではなく直接変更している話</li>
<li>p.164 <code>xmlns:"デフォルトの名前空間識別子"</code> → <code>xmlns="デフォルトの名前空間識別子"</code></li>
<li>p.167 Webサイトの更新には、Atom配信フォーマットが利用できます。 → Atom出版プロトコルの間違い?</li>
<li>p.171 Atom 1.0の構造は、RSS 2.0と同様に名前空間の指定が必要になります。 → RSS 1.0?</li>
<li>close されていないので <code>open(url).read</code> よりも <code>open(url, &amp;:read)</code> の方が良いのではという話</li>
<li>標準添付の RSS ライブラリが便利という話</li>
<li>Google Feed API</li>
<li>p.180 の <code>doc.at('//a').[]('href')</code> から <code>doc.xpath("//a/@href").text</code> などの話</li>
<li>p.177 Aタグの例の <code>node.inner_text</code> の出力例が間違っている</li>
<li>p.182 <code>\/</code> の <code>\</code> が不要?</li>
<li>p.184 スクリーンショットの値段がずれている</li>
<li>p.192 ここでは nokogiri ではなく REXML を使っている</li>
<li>p.199, p.205 Marshal.dmp は Marshal.dump なのではないかという話</li>
<li>mitmproxy の話</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redmine の運用停止前のバックアップ]]></title>
    <link href="http://blog.n-z.jp/blog/2014-10-09-redmine-backup.html"/>
    <updated>2014-10-09T21:55:27+09:00</updated>
    <id>http://blog.n-z.jp/blog/redmine-backup</id>
    <content type="html"><![CDATA[<p>ある redmine の運用を止める前にリポジトリとの連携部分は止まってしまうのは仕方がないとして、
wiki やチケットなどは後からでも参照できるようにローカルにバックアップを残しておくことにしました。
その手順のメモです。</p>

<!--more-->


<h2>データベースのバックアップ</h2>

<p><a href="http://blog.n-z.jp/blog/2014-01-28-yaml-db.html" title="yaml_dbでMySQLからPostgreSQLに移行した">yaml_dbでMySQLからPostgreSQLに移行した</a>話で使った <code>yaml_db</code> を使いました。</p>

<p>まず、
<code>Gemfile.local</code> をなければ作成して、以下の内容を追加します。</p>

<figure class='code'><figcaption><span>Gemfile.local</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;yaml_db&#39;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span> <span class="s1">&#39;jetthoughts/yaml_db&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして <code>RAILS_ENV=production bundle exec rake db:data:dump</code> で <code>db/data.yml</code> を作成します。</p>

<h2>ローカル環境の作成</h2>

<p>ローカルにも redmine 環境を作成します。</p>

<ol>
<li>redmine-2.5.2.tar.gz をダウンロードして展開</li>
<li><code>config/database.yml.example</code> を元に <code>config/database.yml</code> を作成 (今回はバックアップ環境なので sqlite3 を使用)</li>
<li>Gemfile.local 作成</li>
<li><code>plugins/</code> に使っていたプラグインをインストール (サーバーから rsync でコピーなど)</li>
<li>プラグインの設定も必要に応じてコピー (<code>config/wiki_external_filter.yml</code> など)</li>
<li><code>bundle install</code> で gem のインストール</li>
<li><code>RAILS_ENV=production bundle exec rake db:migrate</code> と <code>RAILS_ENV=production bundle exec rake redmine:plugins:migrate</code> でデータベース作成</li>
<li><code>db/data.yml</code> をコピーしてきて <code>RAILS_ENV=production bundle exec rake db:data:load</code> で読み込み (<code>db:migrate</code> していないとテーブル不足で読み込めない)</li>
<li><code>files/</code> の添付ファイルをコピー (サーバーから rsync でコピーなど)</li>
<li><code>config/configuration.yml</code> や <code>favicon.ico</code> などカスタマイズしているものがあれば必要に応じて設定やコピー</li>
<li><code>bundle exec rake generate_secret_token</code> で secret token を生成</li>
<li><code>bundle exec rails server -e production</code> で起動</li>
</ol>


<p>ログインして今まで通り見えることを確認して終了です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ターミナルでの文字幅を調べる]]></title>
    <link href="http://blog.n-z.jp/blog/2014-10-07-char-width-in-terminal.html"/>
    <updated>2014-10-07T20:10:20+09:00</updated>
    <id>http://blog.n-z.jp/blog/char-width-in-terminal</id>
    <content type="html"><![CDATA[<p><a href="http://uwabami.junkhub.org/log/20141007.html#p01" title="マルチバイト文字列の幅を 2 としてカウントする">マルチバイト文字列の幅を 2 としてカウントする</a>
という話を見て、
端末に実際の幅を問い合わせてみればいいのではないかと思って試してみました。</p>

<!--more-->


<h2>実行例</h2>

<p>こんな感じでできました。
zsh と bash で動作確認しています。
端末は
<a href="http://iterm2.com/" title="iTerm2">iTerm2</a>
で動作確認しています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% echo -ne '日本語\e[6n'; read -d';' a; read -dR a; printf '\e[M\r'; echo $[a-1]
</span><span class='line'>6
</span><span class='line'>% echo -ne 'abc日本語\e[6n'; read -d';' a; read -dR a; printf '\e[M\r'; echo $[a-1]
</span><span class='line'>9</span></code></pre></td></tr></table></div></figure>


<h2>スクリプト化</h2>

<p>実行ファイルにするならこんな感じになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>echo -ne "$*"'\e[6n'; read -d';' a; read -dR a; printf '\e[M\r'; echo $[a-1]</span></code></pre></td></tr></table></div></figure>


<h2>解説</h2>

<p>実装としては実際に表示して、カーソル位置を端末に問い合わせて、表示を消去して、桁を取り出して 1 引いています。</p>

<p>エスケープシーケンスなどに関しては、
<a href="http://ttssh2.sourceforge.jp/manual/ja/about/ctrlseq.html" title="対応制御シーケンス">対応制御シーケンス</a>
を参考にしてください。</p>

<ol>
<li>まず文字列を表示しています。</li>
<li><code>CSI Ps n</code> (DSR) を使ってカーソルの位置を報告させています。</li>
<li><code>CSI r ; c R</code> という応答のうち、 <code>;</code> までを捨てて、 <code>c</code> だけ変数 <code>a</code> に取り込んでいます。</li>
<li><code>CSI Ps M</code> (DL) でカーソル行に表示された内容を消去しています。</li>
<li><code>CR</code> で行頭にカーソルを戻しています。</li>
<li>カーソル位置なので 文字数+1 になっているので、1 引いて表示しています。</li>
</ol>


<h2>追記</h2>

<p>実装の説明でわかると思いますが、1行を超える長さは調べられません。がんばるなら適当に区切って文字ごととかで調べてください。</p>

<p>実行開始時にカーソルは行頭にしておく必要があり、実行後にカーソル行は消えます。
スクリプト中に入れるには使いにくいと思います。</p>

<p>半分ネタなので、あんまりがんばっていません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 15 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-09-24-rubymotion-mokumoku-osaka.html"/>
    <updated>2014-09-24T23:12:38+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 14 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://rubymotionjp.connpass.com/event/8214/" title="第 15 回 RubyMotion もくもく会 in Osaka - connpass">第 15 回 RubyMotion もくもく会 in Osaka - connpass</a>
に参加してきました。
今日もみんなもくもくしていました。</p>

<p>次回の
<a href="http://rubymotionjp.connpass.com/event/8917/" title="第 16 回 RubyMotion もくもく会 in Osaka - connpass">第 16 回 RubyMotion もくもく会 in Osaka - connpass</a>
は 10/15(水) になりました。</p>

<!--more-->


<h2>メモ</h2>

<p>メモです。</p>

<ul>
<li><a href="http://www.3bees.com/">http://www.3bees.com/</a></li>
<li><a href="http://rubymotiondispatch.com/" title="RubyMotion Dispatch">RubyMotion Dispatch</a></li>
<li>RubyMotion Kaigi 2014 の話</li>
<li><a href="https://github.com/infinitered/cdq">https://github.com/infinitered/cdq</a></li>
<li><a href="https://www.bloc.io/swiftris-build-your-first-ios-game-with-swift" title="Swiftris Tutorial: Build Your First iOS Game With Swift | Bloc">Swiftris Tutorial: Build Your First iOS Game With Swift | Bloc</a></li>
<li><a href="http://www.genymotion.com/">http://www.genymotion.com/</a></li>
<li><a href="https://github.com/nathankot/webstub">https://github.com/nathankot/webstub</a></li>
</ul>


<h2>やっていたこと</h2>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873116767" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>最近は Mac をあまり持ち歩かなくなっていて忘れていたので、
代わりに持ち歩いていた本 (<a href="http://www.amazon.co.jp/gp/product/4873116767/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873116767&amp;linkCode=as2&amp;tag=znz-22">ハイパフォーマンス ブラウザネットワーキング ―ネットワークアプリケーションのためのパフォーマンス最適化</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4873116767" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />) を読んでいました。</p>

<p>物理層に近い 3G のこととか全く知らなかった話も載っていて、だからアプリケーションはどういう点に気をつければ良いのかという話も書いてあったり、
WebSocket や WebRTC の最近の話題まで載っています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyHiroba 2014に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-09-21-rubyhiroba-2014.html"/>
    <updated>2014-09-21T14:04:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubyhiroba-2014</id>
    <content type="html"><![CDATA[<p><a href="http://rubyhiroba.org/2014/" title="RubyHiroba 2014">RubyHiroba 2014</a>
に参加しました。</p>

<!--more-->


<h2>メモ</h2>

<p>少し遅めに到着して、午前中は生活発表会の方にいて、
午後は LTthon の方にいました。
そのときのメモです。</p>

<ul>
<li><a href="http://railsguides.jp/">http://railsguides.jp/</a></li>
<li><code>1.tap { break 2 }</code> のように <code>tap</code> で <code>break</code> を使うと <code>self</code> 以外を返せる</li>
<li>ロジバン</li>
<li>amedayo.jp</li>
<li>travis CI が 2.1 や 2.2 に対応している</li>
<li><a href="http://sixeight.hatenablog.com/entry/2014/09/20/024603" title="rbenv global 2.2.0-preview1 した話 - ちなみに">rbenv global 2.2.0-preview1 した話 - ちなみに</a></li>
<li>Hound CI</li>
<li><a href="https://github.com/mmozuras/pronto">https://github.com/mmozuras/pronto</a></li>
<li><a href="https://github.com/willnet/prid">https://github.com/willnet/prid</a></li>
<li>rbpdf gem</li>
<li><code>prepend</code> でモンキーパッチ</li>
<li><a href="http://labocho.github.io/rubydoc-ja-docsets/" title="Ruby リファレンスマニュアル for Dash">Ruby リファレンスマニュアル for Dash</a></li>
<li><a href="https://github.com/labocho/pagehook">https://github.com/labocho/pagehook</a></li>
<li><a href="http://rubygems.org/gems/byndler">http://rubygems.org/gems/byndler</a></li>
<li><a href="https://github.com/ko1/allocation_tracer">https://github.com/ko1/allocation_tracer</a></li>
<li><a href="https://github.com/ko1/gc_tracer">https://github.com/ko1/gc_tracer</a></li>
<li><a href="http://tmix.jp/">http://tmix.jp/</a></li>
</ul>


<h2>LTthon での発表内容</h2>

<p>飛び入り参加で最後の方に無理矢理ネタを考えて発表しました。</p>

<p>内容としては、スライドは全く用意せずに、
普段やっている <code>git svn rebase --fetch-all</code> して Emacs で ChangeLog を flyspell (と develock.el と flycheck) でチェックして修正して <code>git svn dcommit</code> するというのを実演しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2014の3日目に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-09-20-rubykaigi-2014-3rd-day.html"/>
    <updated>2014-09-20T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi-2014-3rd-day</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2014" title="RubyKaigi 2014">RubyKaigi 2014</a>
の3日目 (最終日) に参加しました。</p>

<!--more-->


<h2>午前</h2>

<p>ずっと Hall A で聞いていました。
Rails 4.2 は速くなっているということで、
リリースされたら早めに移行したいと思いました。</p>

<h2>午後</h2>

<p>主に Hall B で聞いていました。</p>

<p>Reish は便利そうなので、期待したいと思いました。
Burn も面白そうなので機会があれば試してみたいと思いました。
single page app の話は rails で作るときに参考にしたいと思いました。</p>

<p>Ruby のソースコードを見ていく話は st.c を見ていっていました。
今回の話とは関係ない話ですが、
ソース改造するときに文法をかえたいということで parse.y に挑戦してしまうという話を思い出して、
初心者は割と難しめのところに
いきなり挑戦することが多いのかなと思いました。</p>

<p>エコシステムの話はちゃんと upstream にフィードバックするだけではなく、必要なら引き継いだりしているのがすごいと思いました。</p>

<p>Droonga などの話は Groonga が mruby を組み込んでいるというのを知ったりしました。</p>

<p>最後のキーノートは話が速くてほとんど聞き取れなくても
スライドなどを見ているだけでも
すごさが伝わってくる内容でした。</p>

<h2>RubyKaigi 2014 全体の感想</h2>

<p>今回は発表が採用されたため、落ち着いて聞けない感じが多かったのですが、
いろいろと参考になったり、面白かったりしました。</p>

<p>しばらく英語のリスニングの練習をしていなかったら、全然だめになっていたので、
来年に向けてちゃんとまた練習をしておく必要を感じました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2014の2日目に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-09-19-rubykaigi-2014-2nd-day.html"/>
    <updated>2014-09-19T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi-2014-2nd-day</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2014" title="RubyKaigi 2014">RubyKaigi 2014</a>
の2日目に参加しました。</p>

<p>今日は発表もしました。</p>

<!--more-->


<h2>発表資料</h2>

<p>スライドは以下で話した内容を memo に書いた元資料は
<a href="https://github.com/znz/rubykaigi2014-ruby-removed-features" title="rubykaigi2014-ruby-removed-features">rubykaigi2014-ruby-removed-features</a>
で公開しています。</p>

<iframe src="http://slide.rabbit-shocker.org/authors/znz/rubykaigi2014/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="http://slide.rabbit-shocker.org/authors/znz/rubykaigi2014/" title="Archaeology of Ruby: Removed Features Ruby (考古学 消された機能編)">Archaeology of Ruby: Removed Features Ruby (考古学 消された機能編)</a>
</div>


<h2>発表内容振り返り</h2>

<ul>
<li>内容はそれなりに良い感じにできたのではないかと思います。</li>
<li>大きめのものをピックアップしていこうとしたら、あまりページ数がなくて、かなり早く終わってしまいました。時間がおしていたので、結果的には質疑応答の時間を含めて時間調整ができたようです。</li>
<li>途中から移動してきた人が多かったので、話の順番は逆にして、重要度の低いものを最初の方にもってきて、重要そうなものは後ろの方にもってくる方が良かったと思いました。</li>
<li>最初の質問にあった typo をどうやってみつけているのかというのは、間違えて Emacs + flycheck と言ってから flyspell と言い直してしまいましたが、実際には両方使っています。</li>
</ul>


<h2>午前</h2>

<p>同時通訳の人との打ち合わせがあったため、キーノートは途中までしか聞けなかったので、後で続きを確認したいと思います。
その打ち合わせの後も自分の発表の順番があったこともあり、ずっと Hall A にいました。</p>

<h2>午後</h2>

<p>最初は Hall B にいて hsbt さんの発表まで聞いていました。
その後はずっと Hall A か外にいて、発表を聞いていたり、他のことをしていたりしました。</p>

<p>最後の Lightning Talks を最後まで聞いてから移動したら
<a href="https://unagiaward.herokuapp.com/ja" title="Ruby Unagi Award">Ruby Unagi Award</a>
の移動前の集合に間に合わなくて、
後から一人で移動したら結構秋葉原駅周辺や目的地周辺で結構迷いましたが、
無事にたどり着けました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2014の1日目に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-09-18-rubykaigi-2014-1st-day.html"/>
    <updated>2014-09-18T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi-2014-1st-day</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2014" title="RubyKaigi 2014">RubyKaigi 2014</a>
の1日目に参加しました。</p>

<!--more-->


<h2>午前</h2>

<p>朝に飛行機で移動して、ちゃんと開始時刻に余裕を持って間に合いました。
意外とバスなどの乗り換え待ちで時間がかかってしまい、余裕があると言っても、
普通の到着時刻になってしまいました。</p>

<p>最初の
<a href="http://rubykaigi.org/2014/presentation/S-TomoyukiChikanaga" title="RubyKaigi 2014 | CRuby Committers Who's Who in 2014">RubyKaigi 2014 | CRuby Committers Who&rsquo;s Who in 2014</a>
で今回の発表者かつコミッターの紹介があったので、
そこでの紹介を明日のスライドに取り入れたりしました。</p>

<h2>午後</h2>

<p>基本的にはずっと Hall A にいたのですが、英語はつらいと思って、
Hall A が JRuby のときには Hall B にいってみていましたが、立ち見でした。
Hall B の話をききたいのなら、早めに入っておいた方が良いと思いました。</p>

<p>最後はコミッターなので壇上にあがって話を聞いていました。
今回は特に発言することはなかったです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[font-awesome-sass を 4.1.0 から 4.2.0 にあげたらアイコンが表示されなくなったので対処した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-09-03-font-awesome-sass-4-2-0.html"/>
    <updated>2014-09-03T20:52:56+09:00</updated>
    <id>http://blog.n-z.jp/blog/font-awesome-sass-4-2-0</id>
    <content type="html"><![CDATA[<p>Rails 4.1.5 で使っている <code>font-awesome-sass</code> gem を 4.1.0 から 4.2.0 にあげたところ、
アイコンが表示されなくなったので、原因を調べてみました。</p>

<h2>解決方法</h2>

<p><a href="https://github.com/FortAwesome/font-awesome-sass">https://github.com/FortAwesome/font-awesome-sass</a> には 3.x からのアップグレード方法しか
書いていないのですが、
4.1.0 などの 4.x 系から 4.2.0 にあげるときは</p>

<pre><code>*= require font-awesome
</code></pre>

<p>の代わりに</p>

<pre><code>@import "font-awesome-sprockets";
@import "font-awesome";
</code></pre>

<p>のように <code>@import</code> を使う必要があり、
既に <code>@import</code> を使っている場合でも
<code>@import "font-awesome-sprockets";</code>
の行の追加が必要でした。</p>

<h2>詳細</h2>

<p>4.1.0 と 4.2.0 の差分の
<a href="https://github.com/FortAwesome/font-awesome-sass/commit/a527acdf693cf0bced797e75f387a8f8e2a9c844" title="Refactoring for use in multiple Ruby envs and upgrading to FontAwesome 4.2.0">Refactoring for use in multiple Ruby envs and upgrading to FontAwesome 4.2.0</a>
を眺めてみると、
FontAwesome を 4.2.0 にあげる以外に
<code>vendor/assets/</code> から <code>assets/</code> に移動していたり、
それに関係する変更をしていたりするようです。</p>

<p>それから詳しいことはわかりませんが、
<code>icon-font-path($path)</code> と <code>icon-image-path($path)</code> で
それぞれ
sprockets では <code>font-path($path)</code> と <code>image-path($path)</code> で、
compass では <code>font-url($path, true)</code> と <code>image-url($path, true)</code> を
使うようになった影響で <code>@import "font-awesome-sprockets"</code> が必要になったようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LL Diver に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-23-lldiver.html"/>
    <updated>2014-08-23T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lldiver</id>
    <content type="html"><![CDATA[<p><a href="http://ll.jus.or.jp/2014/" title="LL Diver | Dive into Lightweight Languages">LL Diver | Dive into Lightweight Languages</a>
に参加してきました。</p>

<!--more-->


<p><a href="http://ll.jus.or.jp/2005/" title="Lightweight Language Day and Night(通称:LLDN)">Lightweight Language Day and Night(通称:LLDN)</a>
と同じ二部構成ということで LLDN の T シャツを着ていきました。</p>

<p>今回は全体的に JavaScipt の話が多かったように感じました。</p>

<h2>昼の部</h2>

<p>午前中はイノベーションホールでプレゼンを聞いていました。
ペパボのエンジニア新人研修はいろいろと参考にしたいと思いました。</p>

<p>昼休みは7階の休憩スペースのところで食事を売っていたので、
そこで食べました。</p>

<p>それから会議室2に行ってみると無線LANがつながるようになったというアナウンスがあったので、
llquiz に挑戦しました。
1問目は20分ほどですぐに解けたのですが、
2問目は takesako さんのマインスイーパーの自動化の話を聞きながら解いていた影響なのか、
おけない場所をマークしていくという重い解き方にしてしまったので、
解くのにもプログラムの実行にも時間がかかってしまうというダメな結果になってしまいました。
実際にどう書いたのかは <a href="https://gist.github.com/znz/6ccdcede4d30c2c749b6">https://gist.github.com/znz/6ccdcede4d30c2c749b6</a> で公開しました。
アナウンスがなかったためか、最終的な参加者が少なかったのが残念な感じでした。</p>

<p>時間がかかったので、最後は mozaic.fm 出張版: TypeScript and Dart を聞きながら解いていました。
TypeScript と Dart のことをほとんど知らなかったので、この時間もイノベーションホールに行っていた方が良かったのかもしれないと思いましたが、そのままそこで聞いていました。</p>

<p>休憩時間の後はまたイノベーションホールに移動して、プレゼンを聞いていました。</p>

<p>IPv6 の話はサーバー側の対応が必要という説明をするときの参考になりそうでしたが、
実際にどうプログラムを変更するのかという話はほとんどありませんでした。</p>

<p>サイバー戦争の話は MIT でどういう授業を受けてきたのかの紹介でした。
日本ではあまり話題にしない攻撃側の話もあるという感じでした。</p>

<p>LL短歌の Python バイトコードの話は途中の段階のは、スタックの最後の状態が 5 7 5 7 7 になるのかな、と思ったのですが、
32 32 32 になったあたりで違うと気づきました。</p>

<p>LT では時間内に収まっていたり収まらなかったり、最初から時間内に収める気がない人がいたり、
通知をきっていなくて twitter 経由で遊ばれている人がいたりしました。</p>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=479812947X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>抽選では
<a href="http://www.amazon.co.jp/gp/product/479812947X/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=479812947X&amp;linkCode=as2&amp;tag=znz-22">実践Node.js プログラミング (Programmer&rsquo;s SELECTION)</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=479812947X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
をいただいたので、帰りの新幹線の中で読み始めました。</p>

<h2>夜の部</h2>

<p>会場を出たら忘れてくださいということだったのでほとんど忘れました (ということにしておく)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 14 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-20-rubymotion-mokumoku-osaka.html"/>
    <updated>2014-08-20T19:34:08+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 13 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://rubymotionjp.connpass.com/event/7583/" title="第 14 回 RubyMotion もくもく会 in Osaka">第 14 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。
今日もみんなもくもくしていました。</p>

<p>次回の
<a href="http://rubymotionjp.connpass.com/event/8214/" title="第 15 回 RubyMotion もくもく会 in Osaka - connpass">第 15 回 RubyMotion もくもく会 in Osaka - connpass</a>
は 09/24(水) になりました。</p>

<!--more-->


<h2>メモ</h2>

<ul>
<li><a href="http://japan.unity3d.com/">http://japan.unity3d.com/</a></li>
<li><a href="http://uxosaka.com/" title="UX OSAKA | 大阪で開催される UX コミュニティ">UX OSAKA | 大阪で開催される UX コミュニティ</a></li>
<li>A Dark Room が RubyMotion 製で成功したゲームと言う話</li>
<li><a href="http://rubykaigi.org/2014/presentation/S-LaurentSansonetti" title="Inside RubyMotion for Android">Inside RubyMotion for Android</a></li>
<li>RubyMotion を再インストールしたら 2.28 になった (最新は 2.31 らしい) ので、インストーラーはライセンスの有効期限を見てどのバージョンを入れるのか決めているらしい。</li>
<li><a href="http://www.rubymotion.com/developer-center/guides/getting-started/">http://www.rubymotion.com/developer-center/guides/getting-started/</a></li>
<li><a href="http://www.raywenderlich.com/55384/ios-7-best-practices-part-1" title="iOS 7 Best Practices; A Weather App Case Study: Pt 1 - Ray Wenderlich">iOS 7 Best Practices; A Weather App Case Study: Pt 1 - Ray Wenderlich</a></li>
<li><a href="http://rubykaigi.org/2014" title="RubyKaigi 2014, 18-20 september">RubyKaigi 2014, 18-20 september</a></li>
<li><a href="http://ll.jus.or.jp/2014/" title="LL Diver | Dive into Lightweight Languages">LL Diver | Dive into Lightweight Languages</a></li>
</ul>


<h2>やっていたこと</h2>

<p>環境が変わったので RubyMotion の再インストールをしたり、来月の RubyKaigi 2014 の準備の続きをしていたりしました。</p>
]]></content>
  </entry>
  
</feed>
