<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-12-02T02:05:30+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[shellcheck を使おう]]></title>
    <link href="http://blog.n-z.jp/blog/2017-12-02-shellcheck.html"/>
    <updated>2017-12-02T02:02:02+09:00</updated>
    <id>http://blog.n-z.jp/blog/shellcheck</id>
    <content type="html"><![CDATA[<p>シェルスクリプトを書くのなら shellcheck という lint ツールでチェックしましょう、というお話です。
(<a href="https://qiita.com/znz/items/63a3d581e8ed6ff11b8e">Qiita の Shell Script Advent Calendar 2017 2日目</a> に投稿したものと同じ内容です。)</p>

<!--more-->


<h2>題材</h2>

<p>先月<a href="https://qiita.com/piroor/items/77233173707a0baa6360">Shell Script Advent Calendar 2016 8日目のプログラマーの君！ 騙されるな！ シェルスクリプトはそう書いちゃ駄目だ！！ という話</a>がいいね数ランキングで上位にきていたこともあり、<a href="https://github.com/piroor/tweet.sh">piroor/tweet.sh</a> を例に使いたいと思います。</p>

<h2>shellcheck の準備</h2>

<p>macOS なら <code>brew install shellcheck</code> とか、 Debian や Ubuntu なら <code>sudo apt install shellcheck</code> とかでインストールできます。
ちょっと試すだけなら <a href="https://www.shellcheck.net/">https://www.shellcheck.net/</a> でもできるようです。</p>

<h2>ソースの準備</h2>

<p>clone して中に移動します。</p>

<ul>
<li><code>git clone https://github.com/piroor/tweet.sh</code></li>
<li><code>cd tweet.sh</code></li>
</ul>


<p>最新だと直っているものもあるので、2016年の11月末のバージョンにします。</p>

<ul>
<li><code>git checkout 72c657e15c2cb3ea868d1a4e4061d80d0db6adb7</code></li>
</ul>


<p>detached HEAD になるため、いろいろメッセージがでますが、コミットするのでなければ気にしなくて構いません。
後で <code>git checkout master</code> か <code>git checkout -</code> で master ブランチに戻れます。</p>

<!--
git checkout '@{2016-12-01}' にしていたらうまくいかなかったので変更したら、以下の文が無関係になってしまった。

個人的には、ブレース展開を避けるために `{}` を含む引数は常にクオートするようにしていますが、この例の場合は展開されないのでクオートしなくても良いようです。
大丈夫かどうか考えるのが面倒なら、そのまま渡したい場合は常にクオートする方が考えるのが楽です。
-->


<h2>チェックしてみる</h2>

<p><code>shellcheck tweet.sh</code> で実行してみるとたくさん出ます。</p>

<p><code>shellcheck --format=gcc tweet.sh | wc -l</code> でカウントしてみたところ、ちょうど 100 でした。</p>

<p>多すぎるので多いものはとりあえず無視していきます。</p>

<ul>
<li><code>shellcheck -e SC2155 tweet.sh</code></li>
<li><code>shellcheck -e SC2155,SC2086 tweet.sh</code></li>
</ul>


<p>まだ多いです。</p>

<p>頻出するのを無視していった結果、このくらい残りました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%  shellcheck -e SC2155,SC2086,SC2196,SC2166,SC2164,SC2001,SC1090 tweet.sh
</span><span class='line'>
</span><span class='line'>In tweet.sh line 38:
</span><span class='line'>tmp="/tmp/$$"
</span><span class='line'>^-- SC2034: tmp appears unused. Verify it or export it.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>In tweet.sh line 257:
</span><span class='line'>    while read -r tweet; do echo "found!: ${tweet}"; done
</span><span class='line'>                                          ^-- SC2154: tweet is referenced but not assigned.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>In tweet.sh line 642:
</span><span class='line'>    [ $? != 0 ] && continue;
</span><span class='line'>      ^-- SC2181: Check exit code directly with e.g. 'if mycmd;', not indirectly with $?.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>In tweet.sh line 1173:
</span><span class='line'>    if echo "$url" | egrep -i "$URL_REDIRECTORS_MATCHER" 2&gt;&1 &gt;/dev/null
</span><span class='line'>                                                         ^-- SC2069: The order of the 2&gt;&1 and the redirect matters. The 2&gt;&1 has to be last.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>In tweet.sh line 1337:
</span><span class='line'>    kill $target_pid 2&gt;&1 &gt; /dev/null
</span><span class='line'>                     ^-- SC2069: The order of the 2&gt;&1 and the redirect matters. The 2&gt;&1 has to be last.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>In tweet.sh line 1347:
</span><span class='line'>  trap 'kill_descendants $self_pid; exit 0' HUP INT QUIT KILL TERM
</span><span class='line'>                                                         ^-- SC2173: SIGKILL/SIGSTOP can not be trapped.</span></code></pre></td></tr></table></div></figure>


<p>このうち SC2154 は Usage の中で表示すべき文字がエスケープされずに変数展開されてしまっているという感じで、明らかにバグだったので、<a href="https://github.com/piroor/tweet.sh/pull/2">pull request を送って取り込まれています</a>。</p>

<p>SC2034 や SC2173 は実害がないので、特に pull request は送りませんでした。</p>

<p>SC2069 は本当に標準出力を捨てて、標準エラー出力を標準出力に出したいだけかもしれないと思って、深追いしませんでした。</p>

<p>他にも正常時には問題なさそうなものだったり、意図的にやっているのかどうかソースコードを深追いしないとわからなさそうなものだったりしたので、詳しくはチェックしていません。</p>

<h2>よくある指摘</h2>

<p>SC2155 と SC2086 は、 shellcheck を使っていなかったシェルスクリプトに対して shellcheck を実行するとよく見かける気がします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>In tweet.sh line 1330:
</span><span class='line'>  local children=$(ps --no-heading --ppid $target_pid -o pid)
</span><span class='line'>        ^-- SC2155: Declare and assign separately to avoid masking return values.
</span><span class='line'>                                          ^-- SC2086: Double quote to prevent globbing and word splitting.</span></code></pre></td></tr></table></div></figure>


<p>SC2086 は、一般的に変数展開は <code>""</code> でくくるべき、という指摘です。</p>

<p>SC2086 は本当に複数引数に展開して欲しい場合には指摘される必要はないので、そういう場合は直前の行に</p>

<pre><code># shellcheck disable=SC2086
</code></pre>

<p>というコメントを書いておくと次の行だけ警告を抑制できます。</p>

<p>SC2155 はシェルスクリプトをよく書く人でも知らない人が多い内容で、 <code>export</code> や <code>local</code> などの返り値で <code>$()</code> の返り値が隠れてしまって、 <code>set -e</code> にしていても中断してくれない、という問題です。</p>

<p>shellcheck は Wiki に説明がしっかり書いてあるので、指摘の番号で検索すると <a href="https://github.com/koalaman/shellcheck/wiki/SC2155">SC2155 Declare and assign separately to avoid masking return values.</a> という説明が簡単に見つかります。</p>

<h2>まとめ</h2>

<p>SC2154 や SC2034 のような変更が重なると発生してしまいそうなバグの指摘から SC2086 や SC2155 のような知らなければやってしまいそうな間違いの指摘まで、幅広くチェックしてくれて、シェルスクリプトの上達の手助けをしてくれるので、シェルスクリプトを書くときは積極的に使うことをおすすめします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 129 回関西 Debian 勉強会 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-11-26-kansai-debian-meeting.html"/>
    <updated>2017-11-26T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20171126">第 129 回関西 Debian 勉強会</a> に参加しました。
一般ユーザー権限で LXC を使ってみるという内容でした。</p>

<!--more-->


<h2>会場</h2>

<p>いつもの福島区民センターでした。</p>

<h2>事前課題</h2>

<pre><code> lxc libvirt0 libpam-cgroup libpan-cgroup libpam-cgfs bridge-utils
</code></pre>

<p>とあったうち libpan-cgroup というのは間違いだったようです。</p>

<p><a href="https://wiki.debian.org/LXC">https://wiki.debian.org/LXC</a> 参照。</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Eucalyptus_%28software%29">Eucalyptus (software)</a> は開発が止まっている?</li>
<li><a href="https://ja.wikipedia.org/wiki/Xen_%28%E4%BB%AE%E6%83%B3%E5%8C%96%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%29#Hyper-V.E3.81.A8.E3.81.AE.E9.96.A2.E4.BF.82">Hyper-Vとの関係</a> によると Microsoft と XenSource は共同でやっているかも。</li>
</ul>


<h2>仮想化について</h2>

<p><a href="http://www.kernelvm.org/ima-made-no-matome/kaneru-vm-mian-qiang-hui-guan-xi-qino-can">カーネル/VM勉強会@関西 其の参 - カーネル／VM探検隊</a> から「BHyVeってなんや」を参考にしながら概要を解説</p>

<h2>Debian Stretch で LXC を使う</h2>

<ul>
<li>vagrant で <a href="https://app.vagrantup.com/bento/boxes/debian-9.2">bento/debian-9.2</a> の box を使って試しました</li>
<li>lxc-net を有効にするために <code>/etc/default/lxc</code> で <code>USE_LXC_BRIDGE="true"</code> に変更 (Debian Wiki は記述が古い (testing の時のパッケージが変更途中の内容?) のか <code>/etc/default/lxc-net</code> と書いてあるがそんなファイルはなかった)</li>
<li>lxc-net の変更を反映するために再起動した (<code>sudo systemctl start lxc-net</code> とかでも反映できるかもしれないが未確認)</li>
<li><code>lxc-checkconfig</code> でチェック (今の安定版は全部緑の enabled になるはず (昔はカーネルが対応していなくてダメなものがあったはず) )</li>
<li><code>sudo sh -c 'echo "kernel.unprivileged_userns_clone=1" &gt; /etc/sysctl.d/80-lxc-userns.conf'</code></li>
<li><code>sudo sysctl --system</code></li>
<li><p><code>kernel.unprivileged_userns_clone</code> の設定は Debian 固有のパッチの設定らしい? (1の方がバニラカーネルのデフォルト動作っぽい?)</p></li>
<li><p><code>sudo usermod --add-subuids 1258512-1324047 $USER</code> と <code>sudo usermod --add-subgids 1258512-1324047 $USER</code> はしなくても <code>/etc/subuid</code> と <code>/etc/subgid</code> に入っていた (<code>usermod</code> の引数は端の値の指定で <code>/etc/sub[ug]id</code> ファイルに書かれているのは開始 id と個数で別の意味なので注意)</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@debian-9:~$ cat /etc/subuid
</span><span class='line'>vagrant:100000:65536
</span><span class='line'>vagrant@debian-9:~$ cat /etc/subgid
</span><span class='line'>vagrant:100000:65536</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>echo "$USER veth lxcbr0 10"| sudo tee -i /etc/lxc/lxc-usernet</code> で一般ユーザー権限で作成できるブリッジの数を制限するらしい (<code>lxcbr0</code> の部分はブリッジ名依存)</li>
<li><code>mkdir -p .config/lxc</code></li>
<li><code>.config/lxc/default.conf</code> を作成</li>
<li><code>id_map</code> の部分は subuid と subgid と同じ値にする必要あり</li>
<li><code>lxcbr0</code> の部分も <code>ip</code> コマンドなどで確認して合わせる必要あり</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@debian-9:~$ cat .config/lxc/default.conf
</span><span class='line'>lxc.include = /etc/lxc/default.conf
</span><span class='line'># Subuids and subgids mapping
</span><span class='line'>lxc.id_map = u 0 100000 65536
</span><span class='line'>lxc.id_map = g 0 100000 65536
</span><span class='line'># "Secure" mounting
</span><span class='line'>lxc.mount.auto = proc:mixed sys:ro cgroup:mixed
</span><span class='line'>
</span><span class='line'># Network configuration
</span><span class='line'>lxc.network.type = veth
</span><span class='line'>lxc.network.link = lxcbr0
</span><span class='line'>lxc.network.flags = up
</span><span class='line'>#lxc.network.hwaddr = 00:16:3e:xx:xx:xx</span></code></pre></td></tr></table></div></figure>


<ul>
<li>hwaddr は <a href="https://ja.wikipedia.org/wiki/MAC%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9">MACアドレス</a> 参照</li>
<li>コメントアウトしてみると自動設定になった</li>
</ul>


<h2>lxc-create</h2>

<p>特権だと <code>/var/lib/lxc</code> を使われるが、一般ユーザー権限だと普通は書き込めないのでディレクトリ指定をする必要あり (絶対パスじゃないとダメらしい)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@debian-9:~$ lxc-create -n stretch -t download -P ~/work/lxc
</span><span class='line'>Setting up the GPG keyring
</span><span class='line'>Downloading the image index
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'>DIST  RELEASE ARCH    VARIANT BUILD
</span><span class='line'>---
</span><span class='line'>(略)
</span><span class='line'>debian    stretch amd64   default 20171124_22:42
</span><span class='line'>(略)
</span><span class='line'>---
</span><span class='line'>Distribution: debian
</span><span class='line'>Release: stretch
</span><span class='line'>Architecture: amd64
</span><span class='line'>
</span><span class='line'>Downloading the image index
</span><span class='line'>Downloading the rootfs
</span><span class='line'>Downloading the metadata
</span><span class='line'>The image cache is now ready
</span><span class='line'>Unpacking the rootfs
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'>You just created a Debian container (release=stretch, arch=amd64, variant=default)
</span><span class='line'>
</span><span class='line'>To enable sshd, run: apt-get install openssh-server
</span><span class='line'>
</span><span class='line'>For security reason, container images ship without user accounts
</span><span class='line'>and without a root password.
</span><span class='line'>
</span><span class='line'>Use lxc-attach or chroot directly into the rootfs to set a root password
</span><span class='line'>or create user accounts.
</span><span class='line'>vagrant@debian-9:~$</span></code></pre></td></tr></table></div></figure>


<h2>起動</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
</span><span class='line'>NAME    STATE   AUTOSTART GROUPS IPV4 IPV6
</span><span class='line'>stretch STOPPED 0         -      -    -
</span><span class='line'>vagrant@debian-9:~$ lxc-start -d -n stretch -P ~/work/lxc
</span><span class='line'>vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
</span><span class='line'>NAME    STATE   AUTOSTART GROUPS IPV4 IPV6
</span><span class='line'>stretch RUNNING 0         -      -    -
</span><span class='line'>vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
</span><span class='line'>NAME    STATE   AUTOSTART GROUPS IPV4       IPV6
</span><span class='line'>stretch RUNNING 0         -      10.0.3.146 -</span></code></pre></td></tr></table></div></figure>


<h2>接続して動作確認</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@debian-9:~$ lxc-attach -n stretch
</span><span class='line'>You lack access to /home/vagrant/.local/share/lxc
</span><span class='line'>vagrant@debian-9:~$ lxc-attach -n stretch -P ~/work/lxc
</span><span class='line'>root@stretch:/# apt update
</span><span class='line'>...
</span><span class='line'>1 package can be upgraded. Run 'apt list --upgradable' to see it.
</span><span class='line'>root@stretch:/# ls -al /var/lib/apt/lists/
</span><span class='line'>total 65872
</span><span class='line'>drwxr-xr-x 3 root root     4096 Nov 26 06:32 .
</span><span class='line'>drwxr-xr-x 5 root root     4096 Nov 24 22:47 ..
</span><span class='line'>-rw-r--r-- 1 root root 38923281 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_binary-amd64_Packages
</span><span class='line'>-rw-r--r-- 1 root root 26443489 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_i18n_Translation-en
</span><span class='line'>-rw-r--r-- 1 root root   117945 Oct  7 09:46 deb.debian.org_debian_dists_stretch_Release
</span><span class='line'>-rw-r--r-- 1 root root     2479 Oct  7 09:52 deb.debian.org_debian_dists_stretch_Release.gpg
</span><span class='line'>-rw-r----- 1 root root        0 Nov 26 06:32 lock
</span><span class='line'>drwx------ 2 _apt root     4096 Nov 26 06:32 partial
</span><span class='line'>-rw-r--r-- 1 root root    62959 Nov 25 10:01 security.debian.org_dists_stretch_updates_InRelease
</span><span class='line'>-rw-r--r-- 1 root root  1257072 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_binary-amd64_Packages
</span><span class='line'>-rw-r--r-- 1 root root   624275 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_i18n_Translation-en
</span><span class='line'>root@stretch:/# exit
</span><span class='line'>vagrant@debian-9:~$ ls -al ~/work/lxc/stretch/rootfs/var/lib/apt/lists/
</span><span class='line'>total 65872
</span><span class='line'>drwxr-xr-x 3 100000 100000     4096 Nov 26 06:32 .
</span><span class='line'>drwxr-xr-x 5 100000 100000     4096 Nov 24 22:47 ..
</span><span class='line'>-rw-r--r-- 1 100000 100000 38923281 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_binary-amd64_Packages
</span><span class='line'>-rw-r--r-- 1 100000 100000 26443489 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_i18n_Translation-en
</span><span class='line'>-rw-r--r-- 1 100000 100000   117945 Oct  7 09:46 deb.debian.org_debian_dists_stretch_Release
</span><span class='line'>-rw-r--r-- 1 100000 100000     2479 Oct  7 09:52 deb.debian.org_debian_dists_stretch_Release.gpg
</span><span class='line'>-rw-r----- 1 100000 100000        0 Nov 26 06:32 lock
</span><span class='line'>drwx------ 2 100104 100000     4096 Nov 26 06:32 partial
</span><span class='line'>-rw-r--r-- 1 100000 100000    62959 Nov 25 10:01 security.debian.org_dists_stretch_updates_InRelease
</span><span class='line'>-rw-r--r-- 1 100000 100000  1257072 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_binary-amd64_Packages
</span><span class='line'>-rw-r--r-- 1 100000 100000   624275 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_i18n_Translation-en</span></code></pre></td></tr></table></div></figure>


<h2>NAT</h2>

<p><a href="https://wiki.debian.org/LXC/SimpleBridge">https://wiki.debian.org/LXC/SimpleBridge</a> の</p>

<pre><code>up iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
</code></pre>

<p>は</p>

<pre><code>down iptables -t nat -D POSTROUTING -o wlan0 -j MASQUERADE
</code></pre>

<p>もないと up down を繰り返すと増えそう。</p>

<p>lxc-net で試した環境は自動で NAT 設定が入っていた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@debian-9:~$ sudo iptables -nL -t nat
</span><span class='line'>Chain PREROUTING (policy ACCEPT)
</span><span class='line'>target     prot opt source               destination
</span><span class='line'>
</span><span class='line'>Chain INPUT (policy ACCEPT)
</span><span class='line'>target     prot opt source               destination
</span><span class='line'>
</span><span class='line'>Chain OUTPUT (policy ACCEPT)
</span><span class='line'>target     prot opt source               destination
</span><span class='line'>
</span><span class='line'>Chain POSTROUTING (policy ACCEPT)
</span><span class='line'>target     prot opt source               destination
</span><span class='line'>MASQUERADE  all  --  10.0.3.0/24         !10.0.3.0/24</span></code></pre></td></tr></table></div></figure>


<h2>停止</h2>

<p>資料にはなかったけど、個人的に停止と削除も試しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@debian-9:~$ lxc-stop -n stretch -P ~/work/lxc
</span><span class='line'>vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
</span><span class='line'>NAME    STATE   AUTOSTART GROUPS IPV4 IPV6
</span><span class='line'>stretch STOPPED 0         -      -    -</span></code></pre></td></tr></table></div></figure>


<h2>削除</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@debian-9:~$ lxc-destroy -n stretch -P ~/work/lxc
</span><span class='line'>Destroyed container stretch
</span><span class='line'>vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
</span><span class='line'>vagrant@debian-9:~$ ls work/lxc/
</span><span class='line'>lxc-monitord.log</span></code></pre></td></tr></table></div></figure>


<h2>休憩中の話</h2>

<ul>
<li><a href="https://www.ubuntu.com/server/maas">https://www.ubuntu.com/server/maas</a></li>
</ul>


<h2>ネットワーク図</h2>

<ul>
<li>ネットワーク図を書いて議論</li>
<li><a href="https://twitter.com/YukiharuYABUKI/status/934688472845058054">https://twitter.com/YukiharuYABUKI/status/934688472845058054</a></li>
</ul>


<h2>次回</h2>

<ul>
<li>2017/12/24(日)</li>
</ul>


<h2>まとめ</h2>

<p>発表者の佐々木さんが病欠で、時間に余裕があったので、資料や Wiki の記述や不足点などをツッコミを入れたりするような感じになっていました。
その後は、ネットワーク図を書いて色々と議論をして、少し早めに終わりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chromecast を買ってみて Mac の Chrome, Android, iPod touch から繋いでみた]]></title>
    <link href="http://blog.n-z.jp/blog/2017-11-23-chromecast.html"/>
    <updated>2017-11-23T22:22:22+09:00</updated>
    <id>http://blog.n-z.jp/blog/chromecast</id>
    <content type="html"><![CDATA[<p>Google Cast が便利そうだったので、 Chromecast 第2世代を買ってみました。
クライアントとしては MacBook Pro の Google Chrome, Android, iPod touch を試してみました。</p>

<!--more-->


<h2>HDMI 連携</h2>

<p>HDMI は デバイスと TV の連携機能があるので、自動で Chromecast に入力切替をしたり、電源が入っていなかったら自動で電源が入ったりしました。</p>

<p>直前に PS3 などの別のデバイスを表示していた場合はそっちの電源を切り忘れることがありそうなので、その点は注意が必要そうでした。</p>

<p>HDMI 入力の端子が足りないので、最近は GamePad だけでもできることしかしていない Wii U の入力を外して Chromecast に繋ぎ変えました。
繋ぎ変えが面倒になったら切替機を買うかもしれません。</p>

<h2>初期設定</h2>

<p>iOS や Android 以外にもパソコンからも設定できるということだったので、 MacBook Pro の Google Chrome から chromecast.com/setup を開いてセットアップをしようとすると、説明もなく Wi-Fi 設定を変更されてしまって、 IRC などが切れてひどい目にあいました。
そもそもブラウザーからネットワークの設定が変更できるとは思わなかったのですが、 URL を確認すると <code>chrome://cast/</code> で始まる URL になっていたので、普通の Web サイトで悪さができるというわけではなさそうです。</p>

<p><a href="https://www.google.com/intl/ja/policies/terms/">利用規約</a> や <a href="https://www.google.com/intl/ja/policies/privacy/">プライバシー ポリシー</a> はパソコンからの方が確認しやすかったです。</p>

<p>WPA-PSK のパスフレーズをコピペしようと思って Wi-Fi 設定の確認の画面でパスワード入力欄にフォーカスをあてようとしてもあたらず、手動入力さえできないのであきらめました。
検証をしてみると angularjs 1.6.6 を使っているので、 angular のできが悪いのかもしれません。</p>

<p>仕方がないので Android から Google Home (Google Cast 的な名前から名前が変わったらしい) を使って設定すると、パスフレーズは Android 側から読み出してくれるらしく、入力する必要はありませんでした。</p>

<h2>チュートリアル</h2>

<p>初期設定の最後にチュートリアルがあって、音量調整などの操作も Android 側からできると知りました。</p>

<h2>Google Chrome からキャスト</h2>

<p>右上の縦に3点が並んだボタンからメニューを開いて、「キャスト&hellip;」を選ぶと今開いているタブか全画面がキャストできました。</p>

<h2>Android 6.0.1 から再生</h2>

<p>Chromecast 対応アプリの AbemaTV や Google Play の映画 (昔安売りしていた時に買ったマッドマックス怒りのデス・ロードで試せた) もチュートリアルで説明があった通り、右上のキャストアイコンから再生できました。</p>

<p>任意の画面全体をキャストすることもできるので、 iOS + Apple TV のような使い勝手を実現できるようです。</p>

<h2>iPod touch から再生</h2>

<p>iPod touch からも同じネットワークに繋いでいれば AbemaTV や YouTube などの再生ができました。</p>

<p>対応アプリしか再生できないので、 iOS 端末自体の画面を TV に飛ばしたいのなら Apple TV の方が良さそうです。</p>

<h2>再生中の動作</h2>

<p>対応アプリでは、動画の再生が始まってしまえば、再生自体は Chromecast 自体がやっているようで、端末側でアプリを終了したり、機内モードにして完全に切断してみたりしても再生は続いていました。</p>

<p>再生中は別端末の Google Home アプリやパソコンから <code>chrome://cast/</code> を開いて音量や再生の一時停止や停止を操作できるようです。</p>

<p>再生開始したもの以外ではシーク操作などができないことがあるようなので、よくわからなかったとかの時に数秒戻す操作を使うなら、再生開始したアプリから操作できる状態を残しておいた方が良さそうでした。</p>

<h2>ゲストモード</h2>

<p>ゲストモードをオンにすれば位置情報を元に同じネットワークに繋いでいなくても繋がるはず、と思ったのですが、うまくいきませんでした。
すでに連携しているアカウントで登録しているデバイスだとうまくいかないのでしょうか。ちょっとしか試していないので、原因は謎です。</p>

<h2>Google Chrome の中で YouTube 再生のキャスト</h2>

<p><a href="http://portal.nifty.com/cs/dpztv/list/1.htm">プープーテレビ - デイリーポータルZ</a> のように YouTube を埋め込んでいるサイトでも、再生時の右下にキャストアイコンが出てくるので、そこから Chromecast に切り替えて再生できました。</p>

<h2>まとめ</h2>

<p>全体として複数デバイスがあるときに、どのデバイスからでも操作しやすいという感じがしました。
(Apple TV ではリモコンで直接操作がメインで、画面を飛ばしているときはその飛ばしている元がメインだった気がしました。)</p>

<p>その代わり、モバイルデバイスで操作を開始した後、パソコンの Google Chrome で操作を引き継ぐと一時停止や停止はできてもシークができないなど、切り替え方によっては全機能が引き継げないという点に注意が必要そうだと感じました。</p>

<p>現時点での Chromecast + Google Home + 対応アプリの動作状況なので、それぞれがバージョンアップしていくと状況が変わっていく可能性もあると思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ カーネル/VM探検隊@関西 8回目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-11-18-kernelvm.html"/>
    <updated>2017-11-18T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kernelvm</id>
    <content type="html"><![CDATA[<p><a href="https://connpass.com/event/68374/">カーネル/VM探検隊@関西 8回目</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>久しぶりに京都大学にきました。
大統一Debian勉強会で来たのは覚えているのですが、それ以降来たことがあったかどうか思い出せませんでした。</p>

<h2>uwabami さんによる会場説明</h2>

<h2>rui314 さんによる場つなぎ</h2>

<p>配信の準備ができるまで rui314 さんの自己紹介などの話がありました。</p>

<ul>
<li>Accidentally Turing-Complete</li>
<li>elvm の話</li>
<li>constexpr で云々</li>
<li>Life Game 上で C コンパイラとかやってる人はまだいなさそう</li>
<li>Go 言語の話</li>
<li>Go opinionated な言語</li>
<li>template が欲しいという人向けの回答のテンプレートがある</li>
<li>language spec がある</li>
<li>ライブラリを読んでいくと勉強になる</li>
<li>(C++ の std のアルゴリズムとか読んでいくと勉強になる)</li>
<li>たまにバグを見つけてパッチを投げるとコミット権がもらえる</li>
<li>tar の生成とかを読んだりとか</li>
<li>ディレクトリ区切りは内部では <code>/</code> で扱って Windows では入出力の時に置き換えでも問題ない</li>
<li><p>文字列も内部は utf-8 というのも良い</p></li>
<li><p>質問受け付け</p></li>
<li>Google に入ったきっかけは?</li>
<li>メールが来て渋谷のセルリアンタワーにいった</li>
<li>東京も Chrome などのプロジェクトをやっている</li>
<li><p>Tensorflow とか東京にプロジェクトがないものはできないなどの理由で本社へ</p></li>
<li><p>最近スタンフォードの大学院にいっている</p></li>
<li>オンラインでフルタイムではなくできる</li>
<li>SCPD</li>
<li>ドラゴンブック: 龍がコンパイラの複雑さを表している</li>
<li><!-- 1個の授業が70万円ぐらいだが Google が補助してくれるらしい -->毎週の宿題が難しい (授業を聴いていても難しい)</li>
</ul>


<p>13:44 で準備が完了したということで突然終了。</p>

<h2>CODE BLUE CTF 2017で出した問題の話</h2>

<ul>
<li>CODE BLUE : 世界トップクラスのセキュリティ専門家による日本発の情報セキュリティ国際会議</li>
<li><p>CODE BLUE CTF 2017 : CODE BLUE で開かれたコンテストのひとつ</p></li>
<li><p>Simple Memo Pad (pwn)</p></li>
<li>CTF における pwn (pwnable) とは : 脆弱性でメモリ書き換えをして不正な動作をさせる</li>
<li>realworld での pwn の応用例 : EthernalBlue (WannaCry で使われた), BlueBorne, Jailbreak</li>
<li>どこを書き換えるとプログラムを乗っ取れる? : 関数ポインタ関連</li>
<li><code>puts@plt</code> という仕組みの解説</li>
<li>GOT overwrite</li>
<li>データ領域に置いたコードに向ける</li>
<li>system に向ける</li>
<li>これを阻むセキュリティ機構の数々</li>
<li>NX bit (No eXecute)</li>
<li>RELRO (RELocation Read-Only) : No RELRO, Partial RELRO, Full RELRO</li>
<li>ASLR, PIE</li>
<li><p>ここからさらに掘り下げる</p></li>
<li><p>Simple Memo Pad (pwn)</p></li>
<li>脆弱性: 1回だけ Buffer overflow でリンクリストを壊せる</li>
<li>脆弱性を使ってできること: 任意の場所にメモのアドレスを1回だけ書き込める, メモの内容は攻撃者がコントロール可能</li>
<li>セキュリティ機構の有無 (ツールを使って確認できる): No RELRO, NX Enabled, ASLR Enabled, No PIE</li>
<li>GOT overwrite : NX Enabled なのでメモに置いた機械語が実行できない → NG</li>
<li>glibc 内部にある関数ポインタの配列へのポインタを上書き: ASLR で無理 → NG</li>
<li>Partial RELRO, Full RELRO の問題が多いのに No RELRO なのが不自然</li>
<li>No RELRO と Partial RELRO の違いのうち <code>.dynamic</code> セクションに注目</li>
<li>偽の文字列テーブル strtab (.dynstr) を参照するように <code>.dynamic</code> セクションを書き換え</li>
<li><p><code>strcmp(user_input, "y")</code> の代わりに <code>system(user_input)</code> が呼ばれるようにできた</p></li>
<li><p>fs hell (rev)</p></li>
<li><code>printf("%d", 0);</code></li>
<li><code>printf("%3$d", 2, 1, 0);</code></li>
<li><code>printf("%3$5d", 2, 1, 0);</code></li>
<li><code>printf("%3$*$4d", 2, 1, 0, 5);</code></li>
<li><code>printf("%3$*$4d%5$n", 2, 1, 0, 5, &amp;a);</code></li>
<li><code>printf("%4$.*1$d%4$.*2$d%3$n", 2, 3, &amp;a, 0);</code></li>
<li>format string で足し算ができる!</li>
<li><code>./fs_hell program.txt input.txt</code> の <code>fs_hell</code> と <code>program.txt</code> を解析して指定した出力が出る <code>input.txt</code> を作る問題</li>
<li><code>program.txt</code> は format string が並んだファイル</li>
<li><code>fs_hell</code> は snprintf で処理していく</li>
<li><p><code>fs_hell</code> でできること: 足し算, 引き算, 左シフト, 右シフト, ジャンプ, 条件分岐</p></li>
<li><p>質疑応答</p></li>
<li>他の問題についての質問</li>
<li>作問のアイデアを思いつくタイミング</li>
</ul>


<h2>Linux + 9p = process migration</h2>

<ul>
<li>この発表ではネットワーク越しにプロセスを移動させる話</li>
<li>計算資源の共有</li>
<li>Plan 9</li>
<li>9P : ファイルシステム共有のためのネットワークプロトコル</li>
<li><a href="https://github.com/pfpacket/rust-9p">https://github.com/pfpacket/rust-9p</a></li>
<li>9P = FUSE + network transparency</li>
<li>CRIU : プロセスをダンプして保存して復帰するもの</li>
<li>問題点: open file, network stack (state), socket, 周辺機器の状態, 通信先のプロセスなど</li>
<li>同じファイルパスがあればシーク位置なども含めて復帰できる</li>
<li>すべてファイルで表現すれば解決</li>
<li>デモ動画は準備する時間がなかったのでなし</li>
<li>質疑応答も質問なしで終了</li>
</ul>


<h2>ニューラルFM音源</h2>

<ul>
<li><p>発表資料: <a href="https://speakerdeck.com/fadis/niyurarufmyin-yuan">ニューラルFM音源</a></p></li>
<li><p>FM 音源の説明</p></li>
<li>含まれている倍音が変わると別の楽器の音に聞こえる</li>
<li>周波数変調 (FM)</li>
<li>(式の説明とかゆっくりみないと理解できなさそうだった)</li>
<li>音からパラメーターを決めるのが難しい</li>
<li>前に発表したネタ 遺伝的FM音源 は時間がかる</li>
<li>いろいろ反響があった中の深層学習を使えば良いのでは?というのに注目</li>
<li>ニューラルネットワークの説明</li>
<li>音のサンプル: 最初の例は違うと言われて聞くと違うっぽいとわかるぐらいの差、次の例は明らかに違う感じ</li>
<li>位相の差はほぼ知覚できないので無視する</li>
<li>ほとんどの部分はノイズでちゃんとした音がでる範囲は限られる</li>
<li>ノイズソムリエを作ってもしょうがないので試す範囲を絞り込む</li>
<li>深層学習</li>
<li>シグモイド関数 → ReLU</li>
<li>ResNet</li>
<li>1台のマシンにのる限りのせても長すぎることはないんじゃないかなと予想</li>
<li>ResNet-36 の理由は GPU の VRAM の容量が 8 GB で ResNet-50 にはメモリ不足だったから</li>
<li>遺伝的アルゴリズムに比べて結果はよくなかったが、学習済みなので、入力からパラメーターが出てくるのは高速</li>
</ul>


<h2>xHCI（USB3.0 HC）デバドラを自作してみよう</h2>

<ul>
<li>USB のデバイスドライバーの話は新規性はない?</li>
<li>会場アンケート: 書いたことがある人は少なかった</li>
<li>Host Controller の話</li>
<li>USB 2.0 の頃は Companion Host Controller で USB 1.1 と互換性があった</li>
<li>xHCI は USB 1.1 や 2.0 の HC のデバドラがあっても無駄</li>
<li><a href="https://github.com/liva/xhci_uio">https://github.com/liva/xhci_uio</a></li>
<li>なぜ作り始めたか</li>
<li>自作 OS でネットワークと USB のサポートが必要</li>
<li>1,2週間でできると思っていたら3ヶ月かかった</li>
<li>ユーザー空間でデバドラ開発</li>
<li>メリット: やらかしても SEGV するだけですぐに開発に戻れる, いちいち再起動せずにビルド即テスト可能, libc 使い放題</li>
<li>EHCI と xHCI は仕組みが大幅に変わっていた</li>
<li>UHCI はデバドラがパケット転送をスケジューリング</li>
<li>xHCI は全ての通信が Ring というリングバッファ的な何かで行われる</li>
<li>USB デバイスごとに slot を確保</li>
<li>Ring 自体はリングバッファではなく Link TRB を使ってリンクドリストを作る (最後の要素が別のリストへのリンクという特殊なものになっている)</li>
<li>HHKB (一部機種) はハブだったので、ハブのデバドラも必要になった</li>
<li>いろいろあったけど、動いた <a href="https://github.com/liva/xhci_uio">https://github.com/liva/xhci_uio</a></li>
<li>マイクがミュートされていた</li>
</ul>


<p>発表資料: <a href="https://drive.google.com/file/d/1TyEIFXcXl6kHvjXVVct-6BtYPykUdege/view">https://drive.google.com/file/d/1TyEIFXcXl6kHvjXVVct-6BtYPykUdege/view</a></p>

<h2>Portable Driver Architecture (PDA) でユーザ空間PCIデバイスドライバ</h2>

<ul>
<li>uio, DPDK, SPDK : ユーザー空間が流行り?</li>
<li>Portable Driver Architecture (PDA) : ユーザー空間で PCI デバイスのドライバを書くための仕組み</li>
<li>ユーザー空間デバイスドライバ: カーネル最小化, 安全性, 移植性, 高性能</li>
<li>PDA の主な目標は 移植性, 高性能</li>
<li>必要な機能: 割り込みハンドリング, デバイスの管理, デバイスの入出力</li>
<li>PDA ができた経緯</li>
<li>PDA の利用例</li>
<li>PDA の性能</li>
<li>PDA vs DPDK</li>
<li>DPDK は NIC のパケット処理向けなので、そういう用途向け便利機能がある (Linux (<code>uio_pci_generic</code>), FreeBSD)</li>
<li>PDA は汎用で Linux 向け (<code>uio_pci_dma</code>)</li>
<li><code>uio_pci_generic</code> : 126 行 (コメント含む)</li>
<li><code>uio_pci_dma</code> : 1328 行 (コメント含む)</li>
<li>なぜ長いのか : sysfs に独自の I/F を提供, メモリ管理がらみ</li>
<li>DMA のためのメモリ管理 : スワップアウトして欲しくない, なるべく連続した十分な大きさの物理アドレス空間を確保したい, NUMA 環境下ではソケットの境界を超えてほしくない</li>
<li>単に malloc しただけではうまくいかない</li>
<li>PDA のメモリ管理戦略 : カーネルモジュールが DMA バッファを用意するなど</li>
<li>wrap-mapping : カーネルで確保したリングバッファを2度繰り返してメモリ空間にマップ</li>
<li>upstream のものは最近のカーネルでは動かなかった <a href="https://github.com/kdiff3/pda">https://github.com/kdiff3/pda</a></li>
<li><p>CERN ALICE (動いた) <a href="https://github.com/AliceO2Group/pda">https://github.com/AliceO2Group/pda</a> や FAIR CBM <a href="https://github.com/cbm-fles/pda">https://github.com/cbm-fles/pda</a> のは最近でもメンテナンスされている</p></li>
<li><p>質疑応答</p></li>
<li><code>uio_pci_dma</code> をメインラインに入れようという動きはない</li>
<li>fork も徐々にコードが離れていってしまっているかも</li>
</ul>


<h2>VMM食べ比べ / KVM vs AHF vs HAXM</h2>

<ul>
<li>未踏2016 で Noah という Mac で ELF を動かすものを作った時に VMM を使った</li>
<li>Virtual Machine Monitor</li>
<li>Libisolation : Noah を応用したサンドボックス</li>
<li>Noah on Windows</li>
<li>OS が全部違う</li>
<li>qemu-kvm ではなくカーネルモジュール部分の話</li>
<li>参加者から2名ほど選んで需要を調査</li>
<li>そもそもの最近の VM の仕組み</li>
<li>KVM</li>
<li>Apple Hypervisor Framework (AHF)</li>
<li>Intel HAXM : Android エミューレーターの高速化モジュールとして有名</li>
<li>4スライドでわかる VMM の作り方</li>
<li>詳細は <a href="http://syuu1228.github.io/howto_implement_hypervisor/">ハイパーバイザの作り方</a> 参照</li>
<li>AHF, KVM, HAXM の順でだいたい柔軟性が高く使いやすい</li>
<li>ドキュメントはほぼない</li>
<li>VM はデバッグがつらい</li>
<li>EPT の活用 : ゲストとホストのメモリアドレスのマッピング</li>
<li>例外ハンドリング</li>
<li>AHF が一番柔軟性が高く OS を自由に選べるならおすすめ</li>
<li>普通の VM を作るのなら KVM, HAXM でも十分</li>
<li><p>HAXM はドキュメントがないので初めての VMM としてはやめておけ</p></li>
<li><p>HAXM の機能についてはどうやって調べたのか?</p></li>
<li>API の構造体などをみて AHF や KVM の経験と勘から</li>
<li>偽陰性の可能性はある</li>
</ul>


<h2>Blend XMODEM 〜UEFI de XMODEM〜</h2>

<ul>
<li>発表資料: <a href="https://speakerdeck.com/tnishinaga/kernelvmkansai8">Blend XMODEM -UEFI de XMODEM-/KernelvmKansai8</a></li>
<li>(ハシビロコウのマスクを被って発表かと思いきや、息苦しいということですぐに脱いだ)</li>
<li>AARCH64 ボードの話</li>
<li>UEFI から起動する OS もどきを作ってみたい</li>
<li>リモートからプログラムを送りたい</li>
<li>送る方法: シリアル転送, ネットワークブート</li>
<li>XMODEM を選択</li>
<li>XMODEM のプロトコルの説明</li>
<li>UEFI の文字コードは UTF-16 で 1 byte read/write はどうする? → SERIAL IO PROTOCOL を使う</li>
<li>一定時間ごとに受信待ちループを解除して NAK 送信? (UEFI は割り込み処理が大変) → <code>SERIAL_IO_PROTOCOL</code> の SetAttributes でタイムアウト設定</li>
<li>デバッグ? シリアルはすでに使っていて、どこで printf debug? → シリアルを2本生やす</li>
<li>qemu の AARCH64 だとシリアルが2本生えない → <code>x86_64</code> の QEMU に生やす</li>
<li>minicom vs tmux : pts を奪い合う</li>
<li>データが受け取れずに NAK を送り続ける → タイムアウト数回繰り返してからにした</li>
<li>実機で動かない</li>
<li>デバッグしたいがシリアル1本しかない → ファイルに書き出せば良い</li>
<li>書き込んだ文字が文字化け → ファームウェアをアップデート</li>
<li>ダウンロードするファイルがわかりづらい</li>
<li>grub が勝手に起動して UEFI shell に落ちない</li>
<li>ログが取れるようになったところで時間切れ</li>
</ul>


<h2>インサイドNintendo Switch</h2>

<ul>
<li>Hardware spec とか Software spec とか</li>
<li>FreeBSD は使われていない</li>
<li>NSO バイナリフォーマット</li>
<li>NRO バイナリフォーマット (NRR に正規の署名があるものしかロードできない)</li>
<li>MOD バイナリフォーマット : NRO や NSO 内に埋め込まれている動的リンクに必要な情報を管理する専用領域</li>
<li>Homebrew ソフトウェア</li>
<li>ReSwitched Team <a href="https://github.com/reswitched">https://github.com/reswitched</a></li>
<li>解析ツール : ELF に変換するツールはあったが直接ディスアセンブルするツールはなかった</li>
<li>今は radare2 が対応</li>
<li>セキュリティ事情</li>
<li>(WebKit は無限に脆弱性が)</li>
<li>エミュレータ NSEMU を開発中</li>
<li>今後の課題</li>
<li>発表資料: <a href="https://speakerdeck.com/rkx1209/insaidonintendo-switch">インサイドNintendo Switch</a></li>
</ul>


<h2>Unikernels report</h2>

<ul>
<li>発表資料: <a href="https://speakerdeck.com/orumin/unikernel-report">Unikernel report</a></li>
<li>Unikernel とは?</li>
<li>会場では知っている人はほとんどいなかった</li>
<li>OSv とか</li>
<li>最近の Unikernel</li>
<li>RumpRun</li>
<li>IncludeOS</li>
<li>EbbRT</li>
<li>LightVM</li>
<li>(&ldquo;My VM is Lighter (and Safer) than your Container&rdquo; という煽り文句から your がなくなっていた)</li>
<li>試そうとしたらカーネルコンフィグが悪かったのかうまくいかなかった</li>
<li><p>まとめ</p></li>
<li><p>質疑応答</p></li>
<li>ミラージュ OS はスコープ外? → Unikernel の元になったものなのでスコープ外というか前提</li>
</ul>


<h2>RISC-V ユーザランド ISA</h2>

<ul>
<li>RISC-V はフツー</li>
<li>命令の個別の簡単な説明</li>
<li>hart : ハードウェア・スレッド</li>
</ul>


<h2>lld: 速くてシンプルなリンカ</h2>

<ul>
<li><a href="https://github.com/rui314/8cc">https://github.com/rui314/8cc</a></li>
<li>goo.gl/kTwXem</li>
<li>lld の実装状況</li>
<li>ELF (Unix), COFF (Windows), Mach-O (macOS) をサポート</li>
<li>lld/ELF はプロダクションクオリティ</li>
<li>FreeBSD は GPL 3 のものをメインに入れない都合でリンカーが古かったところに lld が出て来たので使われるように</li>
<li>Chrome が移行中, Firefox, Rust なども移行中っぽい</li>
<li>RISC-V と WebAssembly のような珍しいものもある</li>
<li>WebAssembly のリンカーは今までなかった</li>
<li>lld/COFF は PDB デバッグ情報を含めプロダクションクオリティ</li>
<li>lld/Mach-O は未完成</li>
<li>デザインゴール : シンプル, 速い, 使うのが簡単</li>
<li>/usr/bin/ld を置き換える (勇気が必要)</li>
<li>clang で &ldquo;-fuse-ld=lld&rdquo; オプション</li>
<li>質問: リンカースクリプトも同じものが使える? → ほぼ使える (が、そもそも GNU のリンカーも2個あって互換性が完全ではない)</li>
<li>GNU binutils には bfd と gold という2つのリンカーが入っている</li>
<li>bfd は ELF より前からあり抽象化レイヤーがある</li>
<li>gold は bfd より速いリンカーとして登場</li>
<li>lld も速いリンカーとして開発された</li>
<li>比較グラフ</li>
<li>コードを最適化したくはない、自然に速く動くコードを書きたい</li>
<li>問題の規模 : Chrome (デバッグ情報付き) は 2 GiB ほど</li>
<li>シンボル処理で1マイクロ秒増えると6秒増える</li>
<li>シンボルテーブルのルックアップが重いので減らす</li>
<li>並行処理</li>
<li>シングルスレッドでも速い方が良い</li>
<li>再現可能なリンクのために出力は決定論的な方が良い</li>
<li>マルチスレッド化</li>
<li>入力から出力にコピーとリロケーションはマルチスレッドにできる</li>
<li>文字列マージの並行処理はトリッキー。単に正しい出力を作るのは簡単だが、毎回同じ出力にするのは難しい。</li>
<li>ハッシュ値の計算は終わった状態で、下位ビットでシャーディング</li>
<li>コードの行数は gold より少ない</li>
<li>gold はアーキテクチャ依存部分が大きい、作りも凝ったことをしているので複雑</li>
<li>エラーメッセージ: clang が C++ のエラーメッセージクオリティを引き上げたのと同じようなことがしたかった</li>
<li>セマンティックスの違い</li>
<li>伝統的な Unix リンカーでは順番が重要だったが、順番を気にしなくてもよくした</li>
<li>FreeBSD 全体でも少ししか失敗しなかったので、大きな問題はなかった</li>
<li>リンク時最適化</li>
<li>clang で <code>C{,XX}FLAGS=-flto</code> と <code>LDFLAGS=-fuse=lld</code> をコンパイラフラグに追加するだけ</li>
<li>クロスリンク</li>
<li>すべてのターゲットが常にサポート</li>
<li>クロスビルドツールチェインで lld を使うのが簡単になるはず</li>
<li><p>ホスト環境に出力が依存しない</p></li>
<li><p>OpenBSD では起動ごとに ASLR よりももっとランダムにしたいという話があるらしい。</p></li>
<li>質疑応答</li>
<li>GPL 3 なのが理由で macOS では bash が古いままだが、同じ理由で lld に需要がある? → そもそも ld64 が GNU のものではないので関係ない</li>
<li>そもそも情報源は? → まず Microsoft が出している仕様をみて、何もしない Windows プログラムを作って、 Hello world ぐらいを作って、と順番にやっていった。 ELF もドキュメントがある。 Linkers &amp; Loaders は良い本なので、古い部分もあるが参考になる。既存のリンカーのソースコードも参考になる。 MIPS がひどい。</li>
</ul>


<h2>まとめ</h2>

<p>京都 (大学) は遠いですが、面白かったので行ってよかったと思いました。</p>

<p>リンカーはデフォルトがどっちなのか確認して、 bfd だったら gold を使うように変更してみようかなと思いました。
lld は Debian に入っているのが buster (今の testing) からで、 stretch (今の stable) には入っていないようなので、使うのはまだ先かなと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[関西オープンフォーラム2017 2日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-11-11-kof2017.html"/>
    <updated>2017-11-11T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kof2017</id>
    <content type="html"><![CDATA[<p><a href="https://k-of.jp/2017/">K-OF 2017</a> の2日目に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>いつもの ATC でした。</p>

<p>12時ごろに到着しました。</p>

<h2>mrubyマイコンボードをさわってみよう!</h2>

<p>間に合ったので、スタッフとしてお手伝いをしました。</p>

<p>Windows で Visual Studio Code + Rubic が開発環境でした。</p>

<p>うまく動かない PC があるという感じで大変な点もありましたが、概ね好評な感じだったようです。</p>

<p>うまく転送できなくなることがあるのは、ドキュメントフォルダー以下だとダメだとか、USB をさしなおしたり、 Visual Studio Code の再起動をするとなおることもあるらしいとかいう感じで謎でした。</p>

<h2>Debian Updates</h2>

<ul>
<li>いつものように Debian とは? から。</li>
<li>企業がメインだとどういうことがある?</li>
<li>注力するソフトウェアの選定が企業で決まる。</li>
<li>btrfs を Redhat がやめて、 SUSE が引き継ぐということがあった。</li>
<li>コードネームは 10 の Buster がトイストーリーのおもちゃではなく犬になっているので、まだ大丈夫そう?</li>
<li>Debian 9 について</li>
<li>mysql のデフォルトは stretch では mariadb に置き換わったが、 mysql のパッケージは sid で復活しているらしい</li>
<li>クロスコンパイルは mingw も対応している</li>
<li>Xorg サーバーがユーザー権限が動くようになったので Xvfb や Xnest が動かしやすくなった</li>
<li>mingw のクロスコンパイルが便利そうな例の話: groonga とか?</li>
<li>Firefox の話</li>
<li>セキュリティ更新は ESR</li>
<li>商標などの問題と ESR は別の話</li>
<li>firefox パッケージは sid のみで firefox-esr のみが stable に入っている</li>
<li>新規インストール時のネットワークインターフェース名が変わる</li>
<li>ハマりどころは? → eth0, eth1 の順番が入れ替わることがあった頃の方がトラブっていた。</li>
<li>Hurd はファームウェアがフリーなディスクがなくて、ディスク I/O が遅いが KVM の virtio 経由ならましらしい</li>
<li><a href="https://debianjp.connpass.com/">https://debianjp.connpass.com/</a></li>
<li><a href="https://debianjp.connpass.com/event/71914/">第 129 回関西 Debian 勉強会</a></li>
<li>日本語入力は問題があれば ibus に変更すれば良さそう?</li>
</ul>


<h2>日本のインターネットが揺れた日</h2>

<ul>
<li>この件で話をするのは5件目らしい</li>
<li>元々エンジニアで入社したが途中から記者になった</li>
<li>色々昔話とか</li>
<li>大規模障害の話</li>
<li>経路情報の話</li>
<li>今は68万ぐらい</li>
<li>10万ぐらい一気に増えたらしい</li>
<li>情報を聞き出すのが大変だった</li>
<li>AS 番号から調べたら Google だった</li>
<li>「なんでグーグルが関係があるの?」</li>
<li>by 社内</li>
<li>by Google 日本法人</li>
<li>Google 日本法人「事実関係を確認中」になったので2本の記事を配信 (25日夜)</li>
<li>26日昼に Google から</li>
<li>Sorry のニュアンスがわからなかったので再確認</li>
<li>Google 日本法人から返答 (26日午後3時)</li>
<li>グーグルが謝罪の記事</li>
<li>結局 何が起きていた?</li>
<li>困った時の piyokango → まだ情報が不十分だった</li>
<li>結局誰も全体像を説明できない</li>
<li>ツイートの impression 291 million</li>
<li>KloutScore : アカウントの影響力をスコアリング</li>
<li>属性によりつぶやく内容もさまざま</li>
<li>影響範囲が大きいのでさらなる記事が必要</li>
<li>「インターネットが壊れたっぽい」</li>
<li>「日本の背骨がやられた」</li>
<li>「グーグルに吸い込まれた」</li>
<li>「太平洋往復ルート」(10月15日朝刊)</li>
<li>反響は様々</li>
<li>YouTube - 32.78% : Downstream in Asia-Pacific</li>
<li>社会は変わる 技術者は? 利用者は? 「インターネットは何も変わっていません 変わったのは社会の方です」</li>
<li>議論をしてより良い世界をつくろう</li>
<li>「電気」「ガス」「水道」「インターネット」</li>
<li>スマホを手にした瞬間、世界とつながる現実</li>
<li>「冗長性」って知ってますか?</li>
<li><p>「つながる」という意味を考えよう</p></li>
<li><p>質疑応答</p></li>
<li>ヒューマンエラー? → トラフィックエンジニアリングのミステイクだと聞いたのでヒューマンエラーだと思う</li>
<li>チェックの機構はあってもそれを超えてしまうことはあるのでは。 100% ということはないので。</li>
<li>学生から arp とかもなぜ信じるのかという質問が出たことがある</li>
<li>バランスが大事</li>
<li>今回はミスだったが、意図的にされたら? → サイバー攻撃はすでに実際に起きている、攻撃者は先を見ている</li>
<li>BGP が脆弱なのが表出したのは良い機会だったかもしれない</li>
<li>犯罪者にとっても止める方向にメリットはあまりないので、そういうことはあまり起きていない</li>
<li>国がネットをシャットダウンすることもあった</li>
<li>国がネットを管理すべきか問題</li>
<li>境がないことの価値</li>
<li>OCN と KDDI 以外での影響は? → BGP の経路情報的には他にも影響があったはずだが、他では騒ぎになっていなかった</li>
<li>インターネット依存度合いの問題? → リテラシーとかの問題かも</li>
</ul>


<h2>終了後</h2>

<p>お楽しみ抽選会には参加せずに 関西 Debian の人たちについていって会場を出ました。</p>

<h2>感想</h2>

<p>いつもの Debian Updates の他に、事前のセッション一覧で気になっていた「日本のインターネットが揺れた日」も聞けて、 mruby のハンズオンも間に合う時間に行けたら手伝おうと思っていたのが手伝えて、 mruby での組み込みの開発がどんな感じかわかってよかったです。</p>

<p>「日本のインターネットが揺れた日」のセッションで、頻繁に録画しているという話をしていて、後日 YouTube に公開されるらしいので、気になる方は見てみると面白いのではないかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitlab-ci-multi-runner パッケージから gitlab-runner パッケージへの更新]]></title>
    <link href="http://blog.n-z.jp/blog/2017-11-06-gitlab-runner.html"/>
    <updated>2017-11-06T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/gitlab-runner</id>
    <content type="html"><![CDATA[<p>GitLab Runner が 10.0.0 だとパッケージ名が gitlab-runner に変わってしまって、そのままだと 9.5.1 から更新されなくなってしまったので、対応しました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 16.04.3 LTS</li>
<li>gitlab-ci-multi-runner (9.5.1) から gitlab-runner (10.1.0)</li>
</ul>


<h2>GitLab Runner とは?</h2>

<p><a href="https://docs.gitlab.com/runner/">GitLab Runner</a> とは GitLab CI のジョブを実行する部分のことです。</p>

<p>詳細は<a href="http://blog.n-z.jp/blog/2017-07-09-gitlab-runner.html">インストール時の記事</a>を参照してください。</p>

<h2>インストール方法</h2>

<p><a href="https://docs.gitlab.com/runner/install/linux-repository.html">Install GitLab Runner using the official GitLab repositories - GitLab Documentation</a> が gitlab-runner に改名後のインストール方法になっているので、参考にして移行しました。</p>

<h2>移行方法</h2>

<p>簡単にまとめると apt の設定を変えて <code>gitlab-runner</code> パッケージを入れ直すだけでした。</p>

<p>GitLab (GitLab CI) への登録や <code>/etc/gitlab-runner/config.toml</code> はそのままで大丈夫でした。</p>

<h2>apt-line の更新</h2>

<p><code>/etc/apt/sources.list.d/</code> 以下に入っている</p>

<pre><code>deb https://packages.gitlab.com/runner/gitlab-ci-multi-runner/ubuntu xenial main
</code></pre>

<p>の apt-line を削除して、</p>

<pre><code>deb https://packages.gitlab.com/runner/gitlab-runner/ubuntu xenial main
</code></pre>

<p>を追加しました。</p>

<h2>pinning 設定変更</h2>

<p><code>/etc/apt/preferences.d/pin-gitlab-runner.pref</code> で <code>gitlab-ci-multi-runner</code> パッケージを <code>packages.gitlab.com</code> のものを優先するように設定していたのを、 <code>gitlab-runner</code> パッケージに変更しました。</p>

<h2>パッケージのインストール</h2>

<p><code>gitlab-runner</code> パッケージをインストールすると自動的に <code>gitlab-ci-multi-runner</code> パッケージと置き換わりました。</p>

<p><code>gitlab-ci-multi-runner</code> パッケージを purge しても <code>/etc/gitlab-runner/config.toml</code> が消えたりすることもないので、特に注意するような点はなさそうでした。</p>

<h2>ansible での例</h2>

<p><a href="https://github.com/znz/ansible-role-gitlab-runner/commit/616a9da561360fbae940940aec49483a5ee1ce9b">Use gitlab-runner instead of gitlab-ci-multi-runner</a> のように変更しました。</p>

<p>移行措置として、 gitlab-ci-multi-runner の apt-line を消す処理も入れています。</p>

<h2>まとめ</h2>

<p><code>gitlab-ci-multi-runner</code> パッケージから <code>gitlab-runner</code> パッケージへの移行は GitLab (GitLab CI) への登録し直しが必要だと面倒そうと思って、 10.0.x の間は躊躇してそのままにしてしまっていましたが、 vagrant 環境で確認したところ、パッケージの更新だけで大丈夫ということがわかったので、問題なく上げることができました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebRTC Meetup Osaka #2 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-10-27-webrtc.html"/>
    <updated>2017-10-27T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/webrtc</id>
    <content type="html"><![CDATA[<p><a href="https://atnd.org/events/91437">WebRTC Meetup Osaka #2</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>久しぶりにさくらインターネットさんの会場にきました。
ゲスト Wi-Fi は SSID が同じで、パスワードが変わっていて、 iPod touch は一度覚えているのを削除して、設定し直さないと繋がりませんでした。</p>

<h2>会場説明等</h2>

<p>懇親会をするので参加希望者は休憩の時に。</p>

<h2>Meetupの説明</h2>

<ul>
<li>開催実績の紹介など</li>
<li>ハッシュタグは <code>#webrtcjp</code></li>
<li>WebRTC-JP Slack</li>
<li>YouTube に過去の動画も公開している <a href="https://goo.gl/BjEhku">https://goo.gl/BjEhku</a></li>
<li>参加者はほぼエンジニア</li>
<li>初参加の人が多い</li>
<li>WebRTC で何か開発したことがあるのは半数ぐらい</li>
</ul>


<h2>ワンボタンでできる！WebRTCゲーム配信！</h2>

<ul>
<li>PLiCy という自作フリーゲームの公開・共有を目的とした SNS</li>
<li>別途ツールを準備しなくてもブラウザだけで完結するブラウザゲームの簡易配信機能</li>
<li>少なくとも Android 4.0 で動いたので対応環境も十分ある</li>
<li>遊んでいる人全員に配信してもらうのが目標</li>
<li>ゲーム画面の抽出は captureStream で取得するだけ</li>
<li>ゲーム音楽の抽出は GainNode の prototype を書き換えて connect に割り込み</li>
<li>マイクを使った実況対応は getUserMedia API で HTTPS 必須</li>
<li>WebRTC の通信は PeerJS を利用</li>
<li>TURN サーバーが必要だった</li>
<li>CentOS 5 だと TURN サーバーが動かなかったので、CentOS 7 を入れ直した</li>
<li>映像・音声とは別に RTCDataChannel API でデータ通信が使える</li>
<li>Web Speech API でチャットコメントを音声読み上げする</li>
<li>Safari に対応するのに PeerJS を修正する必要があった</li>
<li>Edge はまだダメ</li>
<li>運用状況と課題</li>
<li>画質の設定はないが captureStream API でフレームレートは設定できる</li>
<li><p>iframe を使うと Firefox や Safari で問題があった</p></li>
<li><p>質疑応答</p></li>
<li>CentOS 5 は実験用のサーバーなので古かった</li>
<li>TURN サーバーは何を使っている? coturn ではない? → パッケージ名が「turnserver」という名前のものを使っている</li>
<li>回線が細いと途切れるという話があったが、接続が多いと切れる? → P2P なので TURN サーバーを経由しているかどうかでも変わって来る。10人を超えると不安定になってくる。スマホでキャリア回線でみると重いとかはある。</li>
</ul>


<h2>実践 WebRTC 〜最新事例と開発ノウハウの紹介〜</h2>

<ul>
<li>発表資料は SlideShare で公開している: <a href="https://goo.gl/daTG2m">https://goo.gl/daTG2m</a></li>
<li>WebRTC = Web Real Time Communication</li>
<li>リアルタイムコミュニケーションの民主化</li>
<li>最初のリアルタイムコミュニケーションは電話</li>
<li>2011 年に WebRTC の草案が発表</li>
<li>WebRTC の特徴: カメラやマイクを利用可、ブラウザ間の P2P 通信、ストリーミングデータを扱える</li>
<li>WebRTC を構成する技術要素</li>
<li>中身は4つ: 1から3は IETF で標準化、4は は W3C で標準化</li>
<li>1: 暗号化などのプロトコル、2: P2P通信する手順、3: コーデック、4: JavaScript などから利用する API</li>
<li>リアルタイムのために基本的に UDP 上</li>
<li>コーデック: VP8, VP9, H.264 (Safari はこれのみ)、音声は opus</li>
<li>Can I use? でブラウザの対応状況を確認 <a href="http://caniuse.com/#feat=rtcpeerconnection">http://caniuse.com/#feat=rtcpeerconnection</a></li>
<li>IE はあきらめましょう</li>
<li>Safari は 11 で対応</li>
<li><p>iOS でネイティブアプリを作らなくても使えるようになる</p></li>
<li><p>WebRTC の事例紹介</p></li>
<li><p>Co-Streaming (共同ストリーミング) 複数人が同時に動画配信し多人数が視聴する</p></li>
<li>mixer: MS が買収したゲーム動画配信サービスで Win 10 からは直接配信も可能</li>
<li><p>Pixiv Sketch LIVE</p></li>
<li><p>Serverless CDN: Peer5</p></li>
<li><p>Serverless CDN x Streaming: Streamroot</p></li>
<li><p>オンライン英会話: Skype から移行しているところが多い</p></li>
<li>カスタマサポート: videodesk</li>
<li>遠隔診療: CLINICS 先生側(PC)と患者側(スマホアプリ)</li>
<li>IoT: petoco</li>
<li><p>マッチングアプリ: KoeTomo</p></li>
<li><p>WebRTC の活用しどころ: 既存サービスの置き換えでコスト削減よりも付加価値向上がおすすめ</p></li>
<li><p>ここからエンジニア向けの話</p></li>
<li><p>Safari の開発メニューには「レガシー WebRTC API を有効にする」という設定がある</p></li>
<li>API も結構変わってきている</li>
<li>ブラウザは ORTC の考え方を一部取り入れた WebRTC 1.0 API へ対応しつつある</li>
<li>WebRTC 1.0 では SDP を利用する</li>
<li>レガシー API だと SDP に全てのレイヤーについてネゴシエーションするのに必要な情報が全て記載されているので、例えば、音声ミュートで参加していたメンバーが途中からミュートを解除すると、音声トラックだけ操作したいのに、全てのレイヤーで再ネゴシエーションが発生する。</li>
<li>ORTC は各レイヤーに相当する API が公開されているので、必要なところだけ操作できる</li>
<li>API の進化に対応するのは <a href="https://github.com/webrtc/adapter">adapter.js (shim)</a> を使えばだいたいうまくやってくれる</li>
<li>ブラウザー間の互換性の問題</li>
<li>Chrome, Firefox, Safari はベースになっているコアライブラリが同じなので相性が良いが、Edge は独自なので相性が悪い</li>
<li>動画コーデック: Chrome Firefox は VP8/VP9/H264, Edge は VP8/H264UC, Safari は H264 のみ</li>
<li>H264UC は Skype 用</li>
<li>Safari はモバイルのハードウェアの対応を考慮してそう</li>
<li>API も差がある</li>
<li><p>ScreenShare は Edge にはないなどの機能差は adapter.js では対応できないのでアプリでどうにかする必要あり</p></li>
<li><p>マイクカメラの扱いにはハマりどころが多い</p></li>
<li>カメラの機種, OS, ブラウザの差がある</li>
<li>getUserMedia の Constraints に指定してもその通りになるとは限らない</li>
<li><p><a href="https://goo.gl/9DWMGZ">俺たちは雰囲気でgetUserMedia()をやっている</a></p></li>
<li><p>フルメッシュ, MCU, SFU</p></li>
<li>SFU が主流</li>
<li><p>ユースケースに合わせて選択しましょう</p></li>
<li><p>つながらない問題</p></li>
<li>WebRTC にはシグナリングとメディア、2つの通信がある</li>
<li>1: シグナリングサーバーとの接続 (だいたいWSS) ができない</li>
<li>2: メディアの通信 (P2P) が疎通できない</li>
<li>1 はネットワークが対応しないとどうしようもない</li>
<li><p>2 はネットワークのポリシー変更や TURN サーバー</p></li>
<li><p>ICE, STUN, TURN</p></li>
<li>STUN: UDP ホールパンチングできる NAT の種類には制限がある</li>
<li><p>TURN は UDP が通らない時に TCP でラップしてくれる機能もある</p></li>
<li><p>デバッグ方法</p></li>
<li><p>chrome://webrtc-internals</p></li>
<li><p>プラットフォームサービスは積極的に活用しよう</p></li>
<li>WebRTC は総合格闘技</li>
<li>プラットフォームサービス: OpenTok, CafeX, SkyWay, Twillio, FacePeer</li>
<li>ミドルウェア: WebRTC SFU Sora</li>
<li><p>プラットフォームサービスを使っても、つながらない問題が全て解決するわけではない</p></li>
<li><p>質疑応答</p></li>
<li>Safari の ScreenShare 対応? → プラグインを入れてもらう必要がある</li>
<li>コーデック? → Firefox だと VP8 が優先, SDK で設定できるものもある, 相手を Safari にすると H264 になる</li>
<li>H264UC と H264 との互換性は? → 別物で互換性はない</li>
<li>Data Connection を使わずに Edge とやり取りするには? → WebSocket を使う。 Skype で必要なさそう (WebSocket でなんとかなる) なので Data Connection の実装はあまり期待できない</li>
</ul>


<h2>休憩</h2>

<p>早めに進んでいたので順番を入れ替えて休憩は後になりました。</p>

<h2>WebRTCのデバッグに関するTips&amp;Tricks</h2>

<ul>
<li>WebRTC の同人誌</li>
<li>booth.pm で「WebRTC」で検索</li>
<li><p><a href="https://mzsm.booth.pm/items/628127">https://mzsm.booth.pm/items/628127</a></p></li>
<li><p>Safari の開発メニューには「模擬キャプチャデバイス」というものがある</p></li>
<li>Chrome は <code>--use-fake-device-for-media-stream</code> 付きで起動</li>
<li><p>Firefox は getUserMedia で fake: true を指定</p></li>
<li><p>getUserMedia の制限</p></li>
<li>Chrome は localhost は https でなくても OK</li>
<li>他の人につないでもらいたい時は ngrok が使える</li>
<li>Homebrew か公式サイトからダウンロードしてインストール</li>
<li>日本だと <code>--region ap</code> を指定するのが良い</li>
<li><p>デモ</p></li>
<li><p>質疑応答</p></li>
<li><code>/etc/hosts</code> で localhost の IP アドレスを別のものにしたら通る? → 不明</li>
<li>会社ネットワークとかで外にでるのに制限がある環境では https のサーバーをたてた方が楽なのでは? → そこは適宜</li>
</ul>


<h2>iOS11は本当にWebRTCに対応したのか</h2>

<ul>
<li>Safari 11 でビデオチャットは可能</li>
<li><p>他アプリでは無理</p></li>
<li><p>WKWebView, SFSafariViewController, UIWebView (deprecated)</p></li>
<li>getUserMedia が全部非対応</li>
<li>RTCPeerConnection はあるので、データ通信はできた</li>
</ul>


<h2>次回告知等</h2>

<ul>
<li><a href="https://techplay.jp/event/637372">WebRTC Meetup Tokyo #17 Special Edition</a></li>
<li>Youtube Live による配信あり</li>
<li>WebRTC Meetup Osaka #3 は12月か1月にやりたい、発表者募集中</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Developers Meetup #6 大阪会場に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-10-19-railsdm.html"/>
    <updated>2017-10-19T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/railsdm</id>
    <content type="html"><![CDATA[<p><a href="https://techplay.jp/event/631426">Rails Developers Meetup #6 大阪会場</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>前回までと同じ場所なので、スムーズに到着することができました。</p>

<h2>オープニング</h2>

<ul>
<li>プログラムの紹介</li>
<li>ハッシュタグは <code>#railsdm</code></li>
</ul>


<h2>Railsエンジニアの交換型インターンシップについて</h2>

<ul>
<li>自己紹介と会社紹介</li>
<li>インターンシップを始めた同機</li>
<li>開発者不足</li>
<li>交換型インターンシップとは何か</li>
<li>プログラミングスクール的な学習週とインターン的な作業週を交互にやる</li>
<li>学習週は 平均3ヶ月 (交互なので6ヶ月) で終わるぐらいのボリューム</li>
<li>作業週</li>
<li>pull request の練習にもなるということで好評</li>
<li>ローカル (学生が多い) とリモート (社会人が多い) がある</li>
<li>シニアインターン: バイトリーダー的な存在</li>
<li>インターンの成果: アルバイトとしての成果とスクールとしての成果 (就職先) がある</li>
<li>モチベーションがもたない</li>
<li>対策としては見てますよというメッセージを送り続ける</li>
<li>いいね！ がんばれ！ 大丈夫！</li>
<li>不安に対してはメッセージを送り続けるしかない</li>
<li>所属感がない</li>
<li>対策: ミートアップや忘年会を開催</li>
<li>ニートやひきこもりが社会復帰した</li>
<li>就職先の会社からとても喜ばれる</li>
<li>仕事が増えた</li>
<li>有名じゃない会社のインターン戦略</li>
<li>出入りしやすくして単純に人数が多いため、確率的に優秀な人も多くなる</li>
<li>来るもの拒まず、去る者追わず</li>
<li>社会人が7割</li>
<li>無料なのでいろいろなところから紹介される</li>
<li>RubyKaigi のスタッフをやったら就職できる</li>
<li>求人への応用</li>
<li>採用はしていない</li>
<li>探すんじゃなくて育てる</li>
<li>組んでくれる会社</li>
<li>質疑応答</li>
<li>id的には183名</li>
<li>7割ぐらい去っている?</li>
<li>社会人は求職中の人もいれば仕事をしながらの人もいる</li>
<li>課金サービスはない</li>
</ul>


<p><a href="http://docs.komagata.org/5463">発表資料</a></p>

<h2>Railsコントリビューション</h2>

<ul>
<li>自己紹介</li>
<li><a href="http://contributors.rubyonrails.org/">http://contributors.rubyonrails.org/</a> で24位</li>
<li><a href="http://contributors.rubyonrails.org/releases">http://contributors.rubyonrails.org/releases</a> の v5.0.0 が 9999 Commits というコネタ</li>
<li>コミットログを読むブログを続けている <a href="http://y-yagi.hatenablog.com/">http://y-yagi.hatenablog.com/</a></li>
<li>わからないことも多かったが動かして確認した</li>
<li>テストがちゃんと書かれるようになったころだったのでテストでなんとなくわかった</li>
<li>2,3ヶ月で Rails のコードに慣れて、いろいろとミスに気づくようになった</li>
<li>問題がある状態をそのままにしておくのはよくないということでコントリビュートし始めた</li>
<li>どんな時にコントリビュートするか? 期待通りに動かない時、機能追加したい時</li>
<li>期待通りに動かないというのはまあまあある</li>
<li>よく使う道具なので期待通り動いて欲しい</li>
<li>Issue をつくる or PR を作る</li>
<li>Issue をつくるのも大事なコントリビュート</li>
<li>英語が苦手なので PR を投げてしまうことの方が多い</li>
<li>機能を追加したい時</li>
<li>よく使う道具なので機能が足りてて欲しい</li>
<li><a href="https://github.com/rails/rails">https://github.com/rails/rails</a> のみを対象 (<a href="https://github.com/rails">https://github.com/rails</a> の他のレポジトリは方針などが違うことがある)</li>
<li><a href="http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html">http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html</a></li>
<li>Issue はバグ管理のみ</li>
<li>新機能提案などの issue は即 close されたりする</li>
<li>新機能についての議論は rails-core ML</li>
<li>PR 投げて、そこで議論をするのでも大丈夫 (その方が多そう)</li>
<li><a href="https://github.com/rails/rails/tree/master/guides/bug_report_templates">https://github.com/rails/rails/tree/master/guides/bug_report_templates</a> を参考にして再現手順が作れると良い</li>
<li>master ブランチでも再現するか確認</li>
<li>サポート対象外の古い Rails での Issue は無視されるか即 close</li>
<li>サポート対象: <a href="http://guides.rubyonrails.org/maintenance_policy.html">http://guides.rubyonrails.org/maintenance_policy.html</a></li>
<li>似たような PR がもうないか検索してみる (open だけではなく close されているものも)</li>
<li>close されていたら理由を確認して、それでも PR を出すなら、そのことも書く</li>
<li>やりとりが止まっている場合は確認して引き継いでしまう</li>
<li>Rails 本体にいるかどうか gem じゃだめなのか考える</li>
<li>foreigner や migration_comments のように本体に取り込まれることもある</li>
<li>フォーマットに従う <a href="https://github.com/rails/rails/blob/master/.github/pull_request_template.md">https://github.com/rails/rails/blob/master/.github/pull_request_template.md</a></li>
<li>テストは大体は bundle exec rake test で動く</li>
<li>CI の結果も確認する</li>
<li>doc やコメントのみの修正は <code>[ci skip]</code> を入れる</li>
<li>パフォーマンス改善はベンチマークスクリプトと結果もコミットログに入れる</li>
<li>PR の description に書くようなことはコミットログに入れれば良い</li>
<li>後から参照しやすい</li>
<li>使われてないはずのものを消す場合は使われなくなった場所の確認の他に gem に切り出されたものが使っている可能性も考える必要がある</li>
<li>public API の挙動を変えない</li>
<li><a href="http://api.rubyonrails.org/">http://api.rubyonrails.org/</a> にのっているものが public API</li>
<li>挙動を変えたい場合は deprecate から</li>
<li>squash</li>
<li>何から始めたらいいか</li>
<li>doc</li>
<li><a href="http://api.rubyonrails.org/">http://api.rubyonrails.org/</a> と <a href="http://guides.rubyonrails.org/">http://guides.rubyonrails.org/</a> がリリースされているものに対応</li>
<li>master ブランチは <a href="http://edgeapi.rubyonrails.org/">http://edgeapi.rubyonrails.org/</a> と <a href="http://edgeguides.rubyonrails.org/">http://edgeguides.rubyonrails.org/</a></li>
<li>新しいバージョンを触る</li>
<li>rc をまたずに beta1 が出たら試す</li>
<li>新しい機能はバグっていることが多い</li>
<li>既存の機能が壊れていることもある</li>
<li>新しい Ruby で触る</li>
<li>Issue をみる: コードをみるとっかかりになる, 意外と簡単に直せるバグもある</li>
<li>英語ができない: コミットログや PR を参考にする</li>
<li>何か怖い: 慣れるしかない, <a href="https://oss-gate.github.io/">https://oss-gate.github.io/</a> もおすすめ</li>
<li>質疑応答</li>
</ul>


<p><a href="https://docs.google.com/presentation/d/e/2PACX-1vTQx7WQDPQmvMHRyc8Pj1kP9SOqHAlmLUUGA22G7nU7qtXJsFEwYMaMPwBHWMc-dx9OZaAPl3S7pmtw/pub">発表資料</a></p>

<h2>休憩</h2>

<h2>Railsでつくる ファイルアップロード 2017</h2>

<ul>
<li>会社紹介</li>
<li><p>自己紹介</p></li>
<li><p>きっかけ</p></li>
<li>サービスを Perl の独自フレームワークから Rails に移行中に画像アップロードを作り直したことがなかったことに気づいた</li>
<li>Active Storage の登場</li>
<li><p>スマホ時代のファイルアップロード</p></li>
<li><p>画像アップロードで考えるポイント</p></li>
<li>画像アップロード自体</li>
<li>画像の参照</li>
<li><p>画像ファイルの置き場所</p></li>
<li><p>UI から考える 2017 年の画像アップロード</p></li>
<li>例: クックパッド, esa</li>
<li><p>非同期</p></li>
<li><p>form_with</p></li>
<li><p>Headless browser</p></li>
<li><p>Step 1: public に画像アップロード</p></li>
<li>ActionDispatch::<a href="Http::UploadedFile">Http::UploadedFile</a></li>
<li>validate が画像ファイル自体と画像と紐づく情報の2軸になる</li>
<li>フォームオブジェクトで処理すると良さそう</li>
<li>Step 2: S3 に画像アップロード</li>
<li>認証、アクセス制御、モック</li>
<li>問題発生? ファイルアップロードに時間がかかる気がする</li>
<li>サーバー経由ではなくダイレクトにアップロードに</li>
<li>Step 3: ダイレクトアップロード (S3)</li>
<li>Step 4: 複数ファイルのアップロード</li>
<li>multiple では非同期が必要だった</li>
<li>Step 5: ECMAScript 6 や File API など</li>
<li>新しい画像フォーマット (Live Photos?)</li>
<li>技術の積み重ねとユーザー体験</li>
<li><p>ユーザー体験を向上させようとすると rails から離れた技術も必要になってくる</p></li>
<li><p>質疑応答</p></li>
</ul>


<p><a href="https://speakerdeck.com/matsuhisa/rails-developers-meetup6-image-upload">発表資料</a></p>

<h2>How, Why, What がわからないコードの調べ方</h2>

<ul>
<li>ネタバレ: 最終的には負けた</li>
<li>ベストは、「知っている人に聞く」</li>
<li>誰もいないなら調べるしかない</li>
<li>git blame は -L で範囲を絞り込める</li>
<li><code>git blame -L "/regex",+20 file</code></li>
<li>git blame rev file</li>
<li><a href="https://github.com/akr/vcs-ann">https://github.com/akr/vcs-ann</a></li>
<li>tig blame file</li>
<li><code>","</code> でカーソル行の親コミットの blame に移動</li>
<li>歴史をみてもわからなかった</li>
<li>ログを出す</li>
<li><code>Kernel.#caller</code></li>
<li><code>logger.tagged("hoge") do ... end</code></li>
<li>歴史を見ても、動きを見ても、よくわからない</li>
<li>それは、作り直して良いというフラグでは?</li>
<li>結論: 強く生きよう</li>
</ul>


<h2>How to improve OSS Rails application</h2>

<ul>
<li>自己紹介</li>
<li>GitLab</li>
<li>時間がおしているので質疑応答はなし</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>次回予告: #7 は 2017.11.16</li>
<li>月1開催は次回で最終回</li>
<li>募集は 2017.10.30 10:00から</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第79回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-10-07-rubykansai79.html"/>
    <updated>2017-10-07T14:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai79</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/65609">第79回 Ruby関西 勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<p>今回は amagasakirb でよく来ていた尼崎市立小田公民館でした。</p>

<p>プロジェクターは 800x600 でした。</p>

<h2>How to specify <code>frozen_string_literal: true</code></h2>

<p>発表資料は RubyKaigi 2017 で使ったものと同じで、 <a href="https://github.com/znz/rubykaigi2017-frozen_string_literal">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-how-to-specify-frozenstringliteral-true/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/how-to-specify-frozenstringliteral-true">slideshare</a>, <a href="https://speakerdeck.com/znz/how-to-specify-frozen-string-literal-true">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-rubykaigi2017-frozen_string_literal">RubyGems</a> にあげているものを、 <code>allotted-time</code> を 5m から 10m に変更して使いました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-frozen_string_literal/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-frozen_string_literal/" title="How to specify `frozen_string_literal: true`">How to specify `frozen_string_literal: true`</a>
</div>


<h2>西谷さんの文書管理の話</h2>

<ul>
<li>会場アンケート: 初参加の人が多かった</li>
<li>OSS Gate で rubocop にバグ報告したら直してもらえた <a href="https://github.com/bbatsov/rubocop/issues/4644">https://github.com/bbatsov/rubocop/issues/4644</a></li>
<li><a href="https://ja.wikipedia.org/wiki/%E5%8F%8C%E6%9B%B2%E5%89%B2%E5%BC%95">双曲割引</a></li>
<li>今18万円もらうか、1年後に20万円もらうか</li>
<li>2年後に18万円もらうか、3年後に20万円もらうか</li>
<li>マシュマロテスト</li>
<li>既知感</li>
<li>記憶

<ul>
<li>記述記憶</li>
<li>非記述記憶

<ul>
<li>身体的記憶</li>
<li>経験記憶</li>
<li>場所の記憶</li>
</ul>
</li>
</ul>
</li>
<li>文書管理</li>
<li>文書管理の原則: 決める, 見える, tight binding, 利用する</li>
<li>会場に質問 → markdown や org-mode でメモしている人がいた<!-- e-文書法 関連の仕事をしているという人がいた --></li>
<li>おすすめの本は? → <a href="http://amzn.to/2hT6Qdq">野口 悠紀雄の「超」整理法</a>, あとはだいたい失敗している</li>
<li>日付で整理している人は多い</li>
</ul>


<h2>休憩</h2>

<ul>
<li>14:45 まで休憩</li>
</ul>


<h2>もう放置しない！画面遷移図の作り方</h2>

<ul>
<li>今までの発表中に急遽発表資料を作った</li>
<li>Sky Grid の山本さん</li>
<li>西谷さんのところの卒業生</li>
<li>急いでショッピングサイトを作っていて、急遽画面遷移が必要になった</li>
<li>移動中に UI Flows というのをみつけた</li>
<li>手書き or ホワイトボード ? (or Excel ?)</li>
<li>おうおうにして放置される</li>
<li>guiflow というものをみつけた</li>
<li><a href="https://qiita.com/hirokidaichi/items/ff54a968bdd7bcc50d42">もう保守されない画面遷移図は嫌なので、UI Flow図を簡単にマークダウンぽく書くエディタ作った</a></li>
<li>質疑応答</li>
<li>rails なら routes から自動生成できないか?</li>
<li>画面遷移図を先に作るのなら無理そう</li>
<li>漏れをなくすよりも主要な遷移だけにしたい?</li>
<li>feature テストからならできそう?</li>
</ul>


<h2>RubyKaigi 2017 のキーノート紹介</h2>

<ul>
<li>なかださんの発表</li>
<li>事務処理できる人がいなくなった</li>
<li>概要</li>
<li>Subversion を使っていて、なぜ Git を使わないのかという話</li>
<li>新機能/課題の管理: Redmine で管理している</li>
<li>開発者会議: 月1回</li>
<li>Ruby のビルドの仕方</li>
<li>バグフィックスの事例</li>
<li>Ruby は「簡単な文法」だと「錯覚」させている</li>
<li><a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/50578">[ruby-list:50578] [質問] 変数pが定義されている時のabsの動作について</a></li>
<li><code>String#intern</code> と refinements の話</li>
<li>Ruby 2.5 の新機能の話</li>
<li>右代入についても話題になっている</li>
<li>感想: もっと「Rubyを」いじってね、ということだと思った</li>
<li><a href="https://codeiq.jp/magazine/2017/09/53932/">Rubyのなかを覗いてみよう！「Cookpad Ruby Hack Challenge」に参加してみた</a></li>
<li><p><a href="https://github.com/ko1/rubyhackchallenge">https://github.com/ko1/rubyhackchallenge</a></p></li>
<li><p>GitPitch というのを使ってスライドを作っている</p></li>
<li><a href="https://github.com/urimaro/79th_workshop_1">https://github.com/urimaro/79th_workshop_1</a></li>
<li><a href="https://gitpitch.com/urimaro/79th_workshop_1">https://gitpitch.com/urimaro/79th_workshop_1</a></li>
<li><a href="https://github.com/urimaro/79th_workshop_2">https://github.com/urimaro/79th_workshop_2</a></li>
<li><p><a href="https://gitpitch.com/urimaro/79th_workshop_2">https://gitpitch.com/urimaro/79th_workshop_2</a></p></li>
<li><p>Matz のキーノート</p></li>
<li>概要: module について</li>
<li>RubyKaigi について</li>
<li>RubyConf より大きい</li>
<li>module の話</li>
<li>単一継承</li>
<li>多重継承 (C3アルゴリズム)</li>
<li>Mixin の話</li>
<li>module の使われ方</li>
<li>Mixin 以外の使われ方もするようになった</li>
<li>namespace とか</li>
<li>alias method chain は2回呼び出すと壊れる</li>
<li><code>Module#prepend</code> の登場</li>
<li>CLOS の method combination が実現できる</li>
<li>aspect 指向プログラミングを実現できる</li>
<li>refinements</li>
<li>Structural signature</li>
<li>質疑応答</li>
<li>prepend は外せないという話があったが include も外せない? → たぶん外せない</li>
<li>Rails の concern と helper の使い分け? → まだ helper の方がよく使われていて concern はそんなに使われていない?</li>
</ul>


<h2><a href="https://qiita.com/yuyakato">Kato Yuya</a> さん</h2>

<ul>
<li>概要: zeromq, GitHub, ハードウェア工作</li>
<li>GitHub の private repo の issues で色々管理している</li>
<li>ベッド型体重計: 9月にベッドを買い直したのをきっかけに再度挑戦開始</li>
<li>zeromq というライブラリの紹介</li>
<li>コネクションの方向と中身の通信の方向の自由度が高い (Pub-Sub のどちらからの接続開始でも良いなど)</li>
<li>zeromq は対応言語が多いので言語の勉強にもおすすめ</li>
<li>Pub-Sub とかも簡単にかける</li>
<li>ロードセル専用のアンプモジュールが安価に手に入るようになった</li>
<li>水のペットボトルで校正</li>
<li>校正は大変なので、体重計はよくできているなあと感じた</li>
<li>GitHub 上で 3D データもプレビューできる</li>
<li>UDP のデータを zeromq に流すのに久しぶりに ruby を書いた</li>
<li><p>後の処理はデータ処理の都合により python</p></li>
<li><p>質疑応答</p></li>
<li>製品化はしないんですか? → 製品化する予定はない。情報は全部公開する予定</li>
<li>pycall は使わない? → 無理に ruby にする必要はなさそう</li>
<li>ruby だとターミナルで作業することが多いが python だと jupyter で完結することが多いと感じているがどうか? → テストコードを書くような部品化できる部分は別ファイルにする、適材適所で使っている</li>
</ul>


<h2>Ruby初級者向けレッスン 63回 ─ Array と Hash</h2>

<p>今回は初心者の人も多かったようです。</p>

<h2>RubyKaigi 2017 のノベルティプレゼント</h2>

<p>トートバッグなどの RubyKaigi 2017 の入り口で配布していたノベルティの一部を、今年もRuby関西のスタッフの人があらかじめいくつかもらってきていたのをプレゼントしていました。</p>

<p>トートバッグは、広島なので瀬戸内海と四国が見えてるようなデザインなのかなと思っていたら <a href="https://twitter.com/is8r_/status/909752063323754496">https://twitter.com/is8r_/status/909752063323754496</a> ということだったらしいです。
プレゼントの時にこのヒントを紹介しようかと思っていたら、時間がなかったので、できませんでした。</p>

<h2>感想</h2>

<p>今回は、本当に開催するかどうかを RubyKaigi 2017 の会期中に相談するなど、最終的な開催の決定から開催までの時間が短かったからか、いつもと比べて参加人数は少なめでしたが、初参加の人や初心者の人が多かったので、開催して非常によかったと思いました。</p>

<p>発表内容も事前発表していたもの以外は RubyKaigi 2017 の振り返りをのんびりやって終わるのかなと思っていたら、当日発表者を募集したら3名も発表してくれる人が出てきて、時間が足りないぐらいになっていました。</p>

<p>だいたい2ヶ月ごとに開催されていますが、次回は12月に開催されるかどうかはまだ未定なので、来年になるかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Developers Meetup #5 大阪会場に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-28-railsdm.html"/>
    <updated>2017-09-28T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/railsdm</id>
    <content type="html"><![CDATA[<p><a href="https://techplay.jp/event/631423">Rails Developers Meetup #5 大阪会場</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>前回と同じ場所なので、スムーズに到着することができました。</p>

<p>今回は、ストリーミングの問題なのか、聞き取りにくいことが多かったので、特に質疑応答はメモが取れていません。</p>

<h2>オープニング</h2>

<ul>
<li>会場の説明</li>
<li>ハッシュタグは <code>#railsdm</code></li>
<li>プログラムの紹介</li>
</ul>


<h2>Railsで日報共有アプリケーションをOSSとして開発している話</h2>

<ul>
<li><p><a href="https://speakerdeck.com/kami/railsderi-bao-gong-you-apurikesiyonwoosstositekai-fa-siteiruhua">https://speakerdeck.com/kami/railsderi-bao-gong-you-apurikesiyonwoosstositekai-fa-siteiruhua</a></p></li>
<li><p>Rails で SPA の事例</p></li>
<li>Repost という日報共有アプリケーション <a href="https://github.com/kami-zh/repost">https://github.com/kami-zh/repost</a></li>
<li>Slack 連携部分を例に説明</li>
<li>View → Action → API → Reducer → View</li>
<li><p>Mastodon の app/javascript や package.json も参考になる</p></li>
<li><p>Rails 5.1 での機能をどう使ったか</p></li>
<li>webpacker</li>
<li>rails new するときに &ndash;webpack=react をつける</li>
<li>必要に応じて yarn add</li>
<li>開発時は bin/webpack-dev-server</li>
<li>webpacker 3 系は多くの設定がライブラリ側に吸収されてアプリケーション側はシンプルにできる</li>
<li><code>javascript_pack_tag</code></li>
<li>Rails 5.1 から yarn をサポート</li>
<li>yarn は install / add / remove ぐらいを知っておけば良い</li>
<li><code>ActionDispatch::SystemTestCase</code></li>
<li>トランザクション管理をしてくれる</li>
<li><p>参考: <code>Minitest::Retry</code> がちょっと不安定なテストに便利 <a href="https://github.com/y-yagi/minitest-retry">https://github.com/y-yagi/minitest-retry</a></p></li>
<li><p>工夫したこと</p></li>
<li>ユニットテストと E2E テストをしっかり書いた</li>
<li>Sprockets は削除した</li>
<li>セットアップを楽にする: bin/setup, bin/update をメンテナンスする</li>
<li>モーダルは慎重に導入する</li>
<li><a href="https://github.com/rails/rails/pull/30614">Install JavaScript dependencies on bin/update</a></li>
<li><p>Rails の資産を活用する: Turbolinks や FormHelper など</p></li>
<li><p>余談</p></li>
<li><p>知識欲求駆動開発</p></li>
<li><p>質疑応答</p></li>
<li>webpack-dev-server との同時起動に foreman は使っていない</li>
<li>react は使ってよかった感じ</li>
<li>react, vue, angular などから react を選んだ理由は? → 使ってみたかったから</li>
</ul>


<h2>パフォーマンス計測CIサービスを作って得た知見</h2>

<ul>
<li><p><a href="https://www.slideshare.net/zaruhiroyukisakuraba/ci-80250430">https://www.slideshare.net/zaruhiroyukisakuraba/ci-80250430</a></p></li>
<li><p>個人で開発しているパフォーマンス計測をする CI サービス</p></li>
<li><p>現在は Rails のみサポート、プライベートベータ</p></li>
<li><p>OAuth Apps と GitHub Apps の違い</p></li>
<li>OAuth Apps (従来のもの) ユーザーに対してインストール</li>
<li>GitHub Apps はリポジトリに対してインストール、マーケットプレイスに出せる</li>
<li>コメントもユーザーとしてか、独自権限にできるかの違いがある</li>
<li><p>マーケットプレイスに出す条件はちょっと厳しい (250人以上にインストールされていることとか)</p></li>
<li><p>GitHub Apps を作るのは簡単</p></li>
<li>アクセストークンと API</li>
<li>JWT の expire に注意: 10分や8分だとうまくいかないことがあったので5分にした</li>
<li>取得できるユーザー情報は限定的</li>
<li>GitHub Apps の API は少しずつ解放されている</li>
<li><p>GitHub Enterprise ではまだ使えないかも</p></li>
<li><p>GitHub Apps で気をつけるところ</p></li>
<li>Webhook を取りこぼすとデータロスト</li>
<li>パーミッションの変更はなるべくしない: ユーザーに承認してもらう必要があるがわかりにくい</li>
<li>GitHub Apps のインストールの導線: インストール後がわかりにくいらしい</li>
<li><p>ローカルで webhook を受け取る方法: ngrok は無料だと起動のたびにホスト名が変わるので面倒、ポートフォワーディングをしている</p></li>
<li><p>Docker in Docker</p></li>
<li>privileged オプションが必要</li>
<li>良い点: 階層構造なので管理しやすい</li>
<li>悪い点: パフォーマンス, privileged オプションで怖い, ボリュームが残ってしまう</li>
<li><p>そもそも製作者自身があまり推奨していない</p></li>
<li><p><code>/var/lib/docker.sock</code> を共有</p></li>
<li>良い点: シンプル, ビルドキャッシュも簡単</li>
<li>悪い点: 他のコンテナが丸見え</li>
<li><p>内部利用限定なら良いかも</p></li>
<li><p>オーケストレーション</p></li>
<li>GKE + k8s</li>
<li><p>小規模/シンプルなら Heroku おすすめ</p></li>
<li><p>CI, 計測の仕方</p></li>
<li>CI サービスを作るのに使った小技</li>
<li>resources をちゃんと指定しないとパフォーマンスがぶれる</li>
<li><p>Container Builder のローカル開発環境がある <a href="https://github.com/GoogleCloudPlatform/container-builder-local">https://github.com/GoogleCloudPlatform/container-builder-local</a></p></li>
<li><p>個人開発プロジェクトについて</p></li>
<li>毎日やるのが大事</li>
<li>コードを捨てるのを躊躇しない</li>
<li>何のためにやるのか</li>
<li>途中経過も公開する</li>
<li><p>やらないことを決める</p></li>
<li><p>質疑応答</p></li>
<li>個人開発でも k8s を使っている? → 使っている</li>
<li>heroku ではなく k8s を使う理由 → docker のため</li>
<li>(メモ取れず)</li>
</ul>


<h2>休憩</h2>

<h2>マイクロサービスにおける非同期アーキテクチャ</h2>

<ul>
<li><p><a href="https://www.slideshare.net/ota42y/ss-80254350">https://www.slideshare.net/ota42y/ss-80254350</a></p></li>
<li><p>microservice</p></li>
<li>外から見たときは一つのアプリ</li>
<li>内部的にはドメインごとに別々のサーバー</li>
<li>API で連携</li>
<li>非同期もある</li>
<li><p>巨大かつ複雑になりやすい → 知見</p></li>
<li><p>非同期処理</p></li>
<li>今回は特に Job Queue の話</li>
<li><p>ActiveJob は Rails 標準なので一般的な構成のはず</p></li>
<li><p>歴史</p></li>
<li>牧歌的時代: なんでも delayed_job に突っ込む</li>
<li>RDB に保存する</li>
<li>delay メソッドを挟むだけ</li>
<li>障害発生: job がどんどん溜まっていった</li>
<li>delayed_job では job の同時実行を防ぐ機構がある</li>
<li>index がきかない where 句の絞り込み＆ソート → テーブルロック</li>
<li>処理速度 ＜ 増加速度 になって打つ手がなくなる</li>
<li>大移行時代</li>
<li>非同期処理の整理</li>
<li>巨大な処理はクリティカルかどうかで場合分け</li>
<li>重要度に応じて処理分け</li>
<li>クリティカルではないものは別バックエンドへ移動して delayed_job の job 数を減らした</li>
<li>移行先として sidekiq, resque から sidekiq を選んだ</li>
<li><p>クリティカルではないものは delayed_job から ActiveJob(+sidekiq) に書き換え</p></li>
<li><p>複数サービスへの連携</p></li>
<li>結合度が高かった</li>
<li>イベント駆動アーキテクチャ</li>
<li>Event の送受信に変更</li>
<li>具体的には AWS の SNS (Simple Notification Service) と SQS (Simple Queue Service) を利用</li>
<li>送信側が SNS で受信側のサービスごとに SQS</li>
<li>癖があるので注意: 複数回や並列実行を考慮して、べき等である必要がある、など</li>
<li>統一フォーマットが必要</li>
<li>移行するなら、送信側・受信側両方移行する必要がある</li>
<li><p>楽にするための gem を作った <a href="https://github.com/ota42y/rising_dragon">https://github.com/ota42y/rising_dragon</a></p></li>
<li><p>質疑応答</p></li>
<li>Queue をどうわけているか? → ほとんどわけていない</li>
</ul>


<h2>5000兆人欲しい！ 優秀なRailsエンジニアを採用するための3つ(仮)の方法</h2>

<ul>
<li>日本の Rails エンジニアの数は推定10万人ぐらい?</li>
<li>世界中の人の数 74億人</li>
<li><code>'74億人' &gt; '5000兆人' #=&gt; true</code></li>
<li>制限を外す</li>
<li>Rails 経験者にこだわらない</li>
<li>日本人にこだわらない</li>
<li>エンジニアにこだわらない</li>
</ul>


<h2>Railsを6年間やってきたぼくが最近Railsでハマったこと</h2>

<ul>
<li><a href="https://speakerdeck.com/kazumax1218/railswo6nian-jian-yatutekitabokugazui-jin-railsdehamatutakoto">https://speakerdeck.com/kazumax1218/railswo6nian-jian-yatutekitabokugazui-jin-railsdehamatutakoto</a></li>
<li>1: カラム追加時に index がはられない</li>
<li><code>add_column</code> には index オプションがなかった</li>
<li>対策: <code>add_index</code> を使う</li>
<li>2: try</li>
<li>メソッドがない場合 (typo など) も例外を出さずに nil を返す</li>
<li>対策: <code>try!</code> を使うか ruby 2.3 以降ならぼっち演算子 <code>&amp;.</code> を使う</li>
<li>3: fragment cache</li>
<li>共通のパーシャルを変更してもキャッシュがクリアされない</li>
<li>template が見つからないのでダイジェストが計算できていなかった</li>
<li>対策: パスを省略しない</li>
<li>パーシャルのパスが動的な場合も注意</li>
<li>プチ情報</li>
<li>Rails 5 からは <code>rails dev:cache</code> で簡単にキャッシュの ON/OFF を切り替えられるようになった</li>
<li>fragment cache のログを出す設定がある</li>
<li>4: 新規作成画面に戻ったら作成したはずのレコードが消えた</li>
<li>原因: <code>has_one</code> に <code>dependent: :destroy</code> がついていると <code>build_xxx</code> 時にレコードが削除される</li>
<li>対策: new アクションで <code>build_xxx</code> を使わない</li>
</ul>


<h2>次回予告</h2>

<ul>
<li>次回 10/19: <a href="https://techplay.jp/event/631425">東京</a>, <a href="https://techplay.jp/event/631426">大阪</a>, <a href="https://techplay.jp/event/631427">リモート</a></li>
<li><a href="https://techplay.jp/event/631431">2017/12/09（土） 13:00 開催 の Rails Developers Meetup 2017</a>, <a href="https://techplay.jp/event/636560">大阪</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developers.IO 2017 WORLD in 大阪 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-23-cmdevio2017.html"/>
    <updated>2017-09-23T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/cmdevio2017</id>
    <content type="html"><![CDATA[<p><a href="http://dev.classmethod.jp/news/developers-io-2017-world-osaka/">Developers.IO 2017 WORLD in 大阪</a> に参加したので、そのメモです。
主に OAuth の話が気になったので行ってみたのですが、他の話もおもしろかったです。</p>

<p>ハッシュタグは <code>#cmdevio2017</code> でした。</p>

<!--more-->


<h2>会場</h2>

<p>スカイビルのタワーウエストは初めて入った気がします。(イーストの方は映画館があるので、そこまでは行ったことがありました。)</p>

<h2>ごあいさつと会場の説明</h2>

<p>スカイビルの場所がわかりにくくて迷った話とか、 Developers.IO の東京で複数トラックでやっていたもののうち、アンケートで評判が良かったものを各地を回ってやっている話とかがありました。</p>

<h2>クラメソの請求を支える技術（サーバーレス編）</h2>

<ul>
<li>会場アンケート: 20代, 30代, 40代で3分の1ずつぐらい?</li>
<li>自己紹介<!-- @czkuk --></li>
<li>刷新の経緯</li>
<li>請求書が毎月300枚になってつらい</li>
<li>請求システムを刷新した話</li>
<li>新システムのポイント</li>
<li>データの一元管理</li>
<li>API, OAuth 2.0</li>
<li>Python simple_salesforce</li>
<li>MFクラウド請求で CSV フォーマットが変更されるということがあったので、ベータが提供されていた API に乗り換えた</li>
<li>OAuth 2.0 のクライアントとしての利用は簡単</li>
<li>Problem: Salesforce 24時間API呼び出し上限</li>
<li>更新がわからないので、全部のデータに対して API を呼び出したら、あっという間に上限に</li>
<li>Solved: S3 ETag</li>
<li>登録できた JSON ファイルは S3 にキャッシュ</li>
<li>変更のみを登録できるようになって解決</li>
<li>とある運用担当者の訴え: 「絶対にサーバーは管理したくないでござる」</li>
<li>Problem: 処理に時間がかる</li>
<li>Lambda は5分で強制タイムアウトがある</li>
<li>Solved: SQS worker Queue</li>
<li>Lambda ログ監視</li>
<li>CloudWatch Logs の Lambda によるログ監視</li>
<li>ログレベルごとに通知先を変えられる log2sns2.yml がオススメ</li>
<li>成功したら請求担当のみ、失敗したら開発者にもとか</li>
<li>AWS 月額利用費 $17</li>
<li>Salesforce について</li>
<li>請求締め部分は外製</li>
<li>visualforce, apex で画面を内製</li>
<li>カバレッジが高くないとリリースできないとか、よくできている</li>
<li>Trailhead で自習</li>
<li>外製? 内製?</li>
<li>仕様が固めやすい部分は外製</li>
<li>画面などトライアンドエラー部分は内製</li>
<li>過度なカスタマイズはしない</li>
<li>業務をパッケージにあわせる</li>
<li>刷新後</li>
<li>半月かかってた請求業務が数時間に</li>
<li>営業への契約確認 → ほぼゼロ</li>
<li>「しがないOL」がJavaプログラマーに</li>
<li>請求システムの話終了</li>
<li>昔話</li>
<li>糊付けエンジニア</li>
<li>「なんでもできる人なんていない」</li>
<li>同じシステムに長く関わっている人は少ない</li>
<li>1年ぐらいが多くて、5年以上は少ない</li>
<li>40歳の生存戦略</li>
<li>半径5メートルの人を幸せにするのが良い</li>
</ul>


<h2>基礎からのOAuth2.0</h2>

<ul>
<li><a href="http://bit.ly/cmdevio2017-oauth2">http://bit.ly/cmdevio2017-oauth2</a></li>
<li>自己紹介<!-- @daisuke_m --></li>
<li>OAuth の動機: 認証、属性取得、委譲</li>
<li>OAuth は認証の委譲プロトコルではなく、認可の委譲プロトコル</li>
<li>認証と認可の基礎知識</li>
<li>認証 (Authentication) : 通信相手が誰か、確認すること。</li>
<li>認可 (Authorization) : リクエストが許可されるかどうかを決めること。(ポリシー定義段階)</li>
<li>厳密には「ポリシー施行段階」は別だが、あまり区別しなくても良い</li>
<li>認証と認可は、本来、相互に独立した概念。</li>
<li>401 Unauthorized : 認証の失敗 『お前誰だよ』</li>
<li>RFC さえ混同しているが、本来は Unauthenticated が正しいのでは。</li>
<li>403 Forbidden : 認可の不足 『理解した。だが断る』</li>
<li>鍵 (key) と錠 (lock)</li>
<li>ユーザーには「鍵 (key)」を与えて、リソースには「錠 (lock)」をかける</li>
<li>認証の委譲 (OpenID Connect)</li>
<li>登場人物: End-User, Relying Party (RP), ID Provider (IdP)</li>
<li>RP=アプリ, ID Provider=TwitterとかFacebookとか</li>
<li>図解</li>
<li>ID Token</li>
<li>JWT (JSON Web Token) (じょっとと読むらしい)</li>
<li>ヘッダ、ペイロード、電子署名 (ID Provider の秘密鍵で署名)</li>
<li>Relying Party が ID Provider の公開鍵で検証</li>
<li>神は誰か? 問題</li>
<li>よくある Web+DBシステム: アプリケーション</li>
<li>API データソースになっても同様</li>
<li>OAuth においては神様はユーザー</li>
<li>だから OAuth は認可の委譲プロトコル</li>
<li>みなさんが OAuth を使いたくないであろう理由</li>
<li>ここから OAuth の話</li>
<li>OAuth 2.0 の登場人物 : Resource owner (RO), Client, Authorization server (AS), Resource server (RS)</li>
<li>例: RO=ユーザー, Client=togetter, ASとRS=twitter</li>
<li>図解</li>
<li>アクセストークン (AT) とは、リソースにかかった「錠」を開ける「鍵」</li>
<li>つまり、鍵に「誰?」を求めてはいけない。</li>
<li>では「OAuth認証」とは一体…?</li>
<li>認証したいだけなのに、渡す権限が大きすぎて怖い。</li>
<li>これを認証の根拠としてよい、という裏付けが弱い。</li>
<li>OAuth 2.0 が成し遂げたいこと (一部)</li>
<li>(リストはメモが取れなかったので公開されている資料参照)</li>
<li>Client が AT を得るフロー 4種</li>
<li>1: Client credentials grant</li>
<li>client id/secret を AT に引き換えるだけ</li>
<li>リソースオーナー不在</li>
<li>ユースケース: 古いスキームに適合。 Twitter の public timeline など。</li>
<li>2: Resource owner password grant</li>
<li>RO のユーザー名とパスワードを AT に引き換えるだけ</li>
<li>ユースケース: 公式クライアント向け</li>
<li>3: Implicit grant</li>
<li>AT がユーザーやブラウザーに見えてしまう</li>
<li>ユースケース: モバイルや JS アプリケーションなど、エンドユーザーの支配下にあるクライアント向け</li>
<li>4: Authorization code grant</li>
<li>フロントチャネル・バックチャネル</li>
<li>3 の場合は AT がフロントチャネルを通るので User Agent に漏れる</li>
<li>4 の場合は AT をフロントチャネルに流さない</li>
<li>最悪 AC は漏れても、単独であればリスクは低い</li>
<li>AC のライフタイムは短い</li>
<li>AC → AT の引き換えには client id/secret が必要</li>
<li>ユースケース: サーバーサイド Web アプリケーション向け</li>
<li>OAuth 2.0 が規定しないこと</li>
<li>1: Resource owner とのインタラクション様式</li>
<li>2: Resource owner の権限及びその確認</li>
<li>よく考えて設計しないと、 User が持っていない権限を Client に与えてしまう</li>
<li>OAuth における「スコープ」とは</li>
<li>User が委譲に同意した権限の種類</li>
<li>Client が行使できる権限の種類ではない</li>
<li>Client が AT を使って行使できる権限 = User が持っている権限と Client が持つ AT のスコープの共通部分</li>
<li>3: アクセストークンに関する諸々</li>
<li>3a: AuthZ server における AT の生成方法</li>
<li>現実的にはランダムか JWT の二択</li>
<li>3b: Client における RS への AT の送り方</li>
<li>3c: Resource server における AT の確認方法</li>
<li>ランダムなら AuthZ server にきくしかない</li>
<li>Sprint Security OAuth 2 独自実装</li>
<li>JWT トークンは revoke しづらい</li>
<li>まとめ</li>
<li>認証と認可の概念</li>
<li>アクセストークンの意味</li>
<li>認可コードの意味</li>
<li>スコープの意味</li>
</ul>


<h2>クラメソのWebサイトを支える技術</h2>

<ul>
<li>自己紹介<!-- @suzryo --></li>
<li>コーポレートサイト 2016年12月にリニューアル</li>
<li>静的ウェブサイトホスティング</li>
<li>AWS</li>
<li>S3: ファイル置き場</li>
<li>Amazon CloudFront: CDN</li>
<li>ACM: SSL の証明書管理</li>
<li>Amazon Route53 (ルートフィフティスリー): クラウドDNS</li>
<li>Amazon Route53 (ALIAS): A レコードと応答、ホスト名の省略 (ZoneApex) 設定可能</li>
<li>Amazon Route53 (ヘルスチェック)</li>
<li>Amazon Route53 (ヘルスチェック+DNSファイルオーバー利用例)</li>
<li>重み付けラウンドロビン (スポットインスタンス活用)</li>
<li>Amazon Route53 (GeoDNS利用例)</li>
<li>Route53ヘルスチェックとDatadog連携</li>
<li>AWSWAF</li>
<li>ステージングの表示制限にも利用</li>
<li>Amazon EC2 (CMS)</li>
<li>WordPress + staticpress</li>
<li>S3 に転送して公開</li>
<li>コーポレートサイト (動的ページ) は SaaS 利用</li>
<li>問い合わせフォーム : kintone + salesforce</li>
<li>サイト内検索: Google カスタム検索エンジン</li>
<li>ブログサイト <a href="http://dev.classmethod.jp/">http://dev.classmethod.jp/</a> 2011年7月1日公開</li>
<li>掲載記事数: 年間約3000件ペース (1日平均8.2件)</li>
<li>初期は EC2 スタンドアローン</li>
<li>Offload S3 導入: 画像データをS3、CloudFront で配信</li>
<li>RDS 導入: MySQL を RDS 化、DB 運用の省力化</li>
<li>ELB, Elasticbeanstalk 導入: ELB 配下で負荷分散、EB で管理改善</li>
<li>nginx 導入: ページキャッシュを追加</li>
<li>ApacheBench</li>
<li>Amazon Aurora 導入</li>
<li>拡張方針: キャッシュを多段化、クラウドの柔軟性を活用</li>
<li>アクセスログの解析</li>
<li>nginx → ltsv → fluentd → Amazon Kinesis Firehose → DB (アイコンでは何かわからず)</li>
<li>Athena</li>
<li>AWS WAF 連携 <a href="http://dev.classmethod.jp/cloud/aws/ids-with-kinesis-waf/">http://dev.classmethod.jp/cloud/aws/ids-with-kinesis-waf/</a></li>
<li>改善計画</li>
<li>評価システム: 執筆者評価, 記事のSNSシェア数</li>
<li>既存評価システム: ページ表示の度にSNS情報取得、再集計</li>
<li>新評価システム: 非同期に取得、S3 の集計済みデータを参照</li>
<li>AWS のマネージドサービス弄り倒してます</li>
<li>個々の詳細はブログにて</li>
<li>SaaS の紹介</li>
<li>Datadog</li>
<li>エラー率とか通知とか</li>
</ul>


<h2>Alexaで変わる開発、変わらない開発</h2>

<ul>
<li>Alexa の概要</li>
<li>Amazon Echo: スマートスピーカー, Alexa の機能を呼び出せる, 米英独など国外で展開中</li>
<li>Amazon Alexa: Amazon が提供する音声アシスタント, Echo という端末が呼び出しているサービス, 標準機能の他に、拡張機能を開発して呼び出せる</li>
<li>Alexa Custom Skill: アプリのように、独自開発のスキルを呼び出せる, 自作エンドポイントを登録して審査に通ればOK</li>
<li>Alexa Voice Service: Alexa のフロント側の規格, アプリにも組み込める</li>
<li>アプリ例: Friendly Voice Assistant</li>
<li>Alexa スキルの開発</li>
<li>サンプル: <a href="https://github.com/alexa/skill-sample-nodejs-highlowgame">https://github.com/alexa/skill-sample-nodejs-highlowgame</a></li>
<li>amazon.com でログイン → Alexa → Alexa Skill Kit で作成</li>
<li>デモ</li>
<li>使うサンプルを <a href="https://github.com/alexa/skill-sample-nodejs-fact">https://github.com/alexa/skill-sample-nodejs-fact</a> に変更</li>
<li>開発者コンソールで文字列でのテスト</li>
<li>APP ID の指定が <code>""</code> で括られていないように見えたけど、一瞬だったので見落としかなと思っていたら、エラーになったので、指摘してみたらやっぱりそこだったようでした。</li>
<li>echosim.io で音声でのテスト</li>
<li>デモ終了</li>
<li>スキルの構成要素: wake word, launch, invocation name, utterance, slot value</li>
<li>画像は <a href="https://developer.amazon.com/designing-for-voice/what-users-say/">https://developer.amazon.com/designing-for-voice/what-users-say/</a> 参照</li>
<li>Utterance をユーザが言うと Intent がプログラムに渡ってくる</li>
<li><a href="https://github.com/alexa/alexa-skills-kit-sdk-for-nodejs">https://github.com/alexa/alexa-skills-kit-sdk-for-nodejs</a></li>
<li>普通の Lambda の開発では webpack は使わないが、Alexa では使った方が良さそう</li>
<li>初回起動時間: 約5秒 → 約2秒</li>
<li>5秒は不安になる</li>
<li>ルーティング機能がプラットフォーム側</li>
<li>Lambda はステートレスだが、Skill が State を提供していて、会話を実現している</li>
<li>視覚表現はある?</li>
<li>Echo Show にはカードというのがある</li>
<li>HTML っぽいのは何?</li>
<li>SSML</li>
</ul>


<h2>感想</h2>

<p>知り合いが一人もいない勉強会に参加したのは久しぶりのような気がしました。</p>

<p>鍵と錠のたとえとか、 OAuth 2.0 が成し遂げたいことを元に複数フローで何ができていて、何ができていないのかなど、非常にわかりやすくて良かったです。</p>

<p>Salesforce も連携する何かを作るかもしれないので、 Trailhead というものの存在を知れたのは良かったです。</p>

<p>自社サイトを例にして Amazon のサービスの運用例を知れたのもおもしろかったです。</p>

<p>Alexa はそういうものもあるのか、とか、会話にするのは技術的な難しさよりもただ大変そう、という感じでおもしろかったです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2017 の3日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-20-rubykaigi2017.html"/>
    <updated>2017-09-20T09:59:32+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi2017</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2017">RubyKaigi 2017</a> の3日目に参加したので、そのメモです。</p>

<!--more-->


<h2>朝</h2>

<p>時間があれば広島平和記念資料館に行こうかと思っていましたが、宿を出るのが遅くなってしまって時間がなかったので行けませんでした。</p>

<h2>Compacting GC in MRI</h2>

<ul>
<li>自己紹介</li>
<li>草生える の英語解説で有名になった</li>
<li>Copy on Write Optimization</li>
<li><code>require 'objspace'</code> と <code>ObjectSpace.memsize_of(obj)</code> で CoW の確認</li>
<li>fork と CoW</li>
<li>CoW Page Fault</li>
<li>Unicorn での話</li>
<li>Page Fault を減らす方法</li>
<li>共有メモリの変更が原因</li>
<li>Garbage Collector の影響</li>
<li>Object Allocation</li>
<li>空きがあるとオブジェクトのサイズは OS のページより小さいので、1オブジェクトの生成でもページ全体のコピーが発生するのでコンパクションする</li>
<li>Two Finger Compaction (2本指コンパクション) というアルゴリズムを選んだ</li>
<li>欠点: 遅い、オブジェクトがランダムな場所に移動する</li>
<li>利点: 簡単!</li>
<li>アルゴリズム: オブジェクトの移動をして、参照の更新</li>
<li>Free Pointer と Scan Pointer で左右からみていってオブジェクトを左に空きを右に固まるように交換していく</li>
<li>オブジェクトを順番に見ていって参照を更新</li>
<li>移動先番号にしていたところを空きに変更</li>
<li>unicorn の fork 前に rails の読み込みと GC.start をするようにした</li>
<li>gc.c への変更の詳細解説</li>
<li>C 実装されている中にオブジェクトへのポインターを持っていると更新できないので、移動するとクラッシュする</li>
<li>そのため、そういうオブジェクトは移動しないようにピン留めしておく</li>
<li><code>hash_key(オブジェクト)</code> がメモリアドレスなので、移動できない</li>
<li>Dual References</li>
<li>C と Ruby の両方から参照されている場合も移動するとクラッシュする</li>
<li>グローバル変数もヒューリスティックスにピン留めする</li>
<li>文字列リテラル</li>
<li>リテラルを移動すると bytecode を変更する必要があるが、難しいのでまだ対応していない</li>
<li>結局何も移動できない?</li>
<li>ほとんどの問題は解決できる</li>
<li>現在使用中の Rails のコードでも 46% のオブジェクトは移動可能</li>
<li>コンパクション前後のグラフ</li>
<li>メモリ検査ツール</li>
<li><code>ObjectSpace.dump_all</code> : JSON でファイルに書き出せる</li>
<li>ヒープの断片化のグラフ</li>
<li><code>/proc/${PID}/smaps</code> はスキップ</li>
<li>まとめ</li>
<li>小さいプログラムにはあまり節約にならないのでプロダクションでテスト中</li>
<li>コンパクションは不可能だと思っていたが、その質問に答えることができなかったので、もっと早く試せばよかったと思った</li>
<li>不可能と思っても可能かもしれない</li>
</ul>


<h2>Irb 20th anniversary memorial session: Reish and Irb2</h2>

<ul>
<li>勝手に20周年記念講演</li>
<li>ちょっと irb の話と Reish の話をする</li>
<li>Ruby 考古学の復習と追加の話</li>
<li>irb の昔の名前の rbc の由来は bc コマンド</li>
<li>他に perl -de 0 や sample/eval.rb が開発のきっかけ</li>
<li>REPL (Read-Eval-Print-Loop)</li>
<li>Lisp の <code>(loop (print (eval (read))))</code></li>
<li>Ruby 的には <code>loop{p eval gets}</code></li>
<li>複雑な構文の言語では初ではないか</li>
<li>REPL の用途</li>
<li>Ruby の振る舞いを確かめる</li>
<li>ライブラリなどのデバッグ用コンソール</li>
<li>情報科学入門 Rubyを使って学ぶ という本では irb を使っているらしい</li>
<li>しかし irb 上で生活している人はいなさそう</li>
<li>そこで Reish</li>
<li>shell の上でも ruby 的な生活を満喫するため</li>
<li>Enumerable, Iterator (たぶん今ではブロックと呼ばれるもの全般をさしてそう), OO, ほか</li>
<li>何がシェルっぽいか: comma なし <code>""</code> とかなくても良い文字列ベース</li>
<li>Reish のコードは Ruby に変換して実行</li>
<li>パイプラインは lazy enumerator で繋がっている</li>
<li>ブロックも使えるが do を予約語にはしにくかったので <code>ls -l --do</code> という感じになっている (<code>{}</code> は普通)</li>
<li>デモ</li>
<li><a href="https://github.com/keiju/reish">https://github.com/keiju/reish</a></li>
<li>job コントロールもある</li>
<li>job ごとに Thread を起動している</li>
<li>補完</li>
<li>irb 再考</li>
<li>長い間開発は停止していたが Reish の開発で irb の方も構想が見えてきた</li>
<li>irb の lexer は使っている gem があるので、大幅に変更は難しそう</li>
<li>Reish は完全なパーサーを持っていて、高機能なことができている</li>
<li>irb2 = reirb ?</li>
<li>zsh の <code>ls --a[TAB]</code> で出てくるヘルプのようなことができるとうれしそう</li>
<li>zsh は 複数行の編集機能 (zle) があったり</li>
<li>Reish 用のマルチラインエディタ Reidline を開発中</li>
<li>Q(次の時間の発表者のaycabtaさん) メモ取れず</li>
</ul>


<h2>昼休み</h2>

<p>途中の時間でセッションを諦めて見にいくのは難しいかなと思って、コンビニで軽く食事をして、広島平和記念資料館に行ってきました。(Twitter で RubyKaigi 2017 の名札を見せると無料で入れるという情報があったため)</p>

<p>本館はリニューアル工事中で、東館だけが開いているということのようでした。</p>

<p>小学校の修学旅行できた覚えがあるのですが、最初の上の階をぐるっと見て回る常設展示は最近の情報もあって、昔来た時には絶対なかったものだなあと思いつつ見ていました。</p>

<p>最後に階段を降りた後にあった企画展示室のところは、昔トラウマになった白黒写真などが少しありました。もらったパンフレットには、閉館中の本館で展示していた資料などを展示していると書いてあるので、本館が復活すれば、昔見たようなものがたくさんあるのではないかと思いました。</p>

<h2>Ruby Parser In IRB 20th Anniversary&hellip;Now Let Time Resume</h2>

<ul>
<li><a href="https://bugs.ruby-lang.org/issues/11389">https://bugs.ruby-lang.org/issues/11389</a></li>
<li>asakusa.rb とか</li>
<li>IRB: 1997, RDoc: 2003</li>
<li>RDoc は IRB の lexical analyser を使っていた</li>
<li>legacy になってしまってメンテナンスコストが増大していた</li>
<li>private def foo のような書き方の対応とか</li>
<li>IRB: 1997, RDoc: 2003, Ripper: 2004</li>
<li>parse.y, IRB, RDoc の3個の Ruby パーサーが重複して含まれている</li>
<li>2016年12月から作業開始</li>
<li>RDoc がクラッシュしたので直した</li>
<li>古い実装と書き直した実装で出力を比べて見たら、 RDoc がバグっていたので古い lexer で新しいものに対応した</li>
<li>最終的にマージされた</li>
<li>後置 if と普通の if の区別などに <code>lex_state</code> が重要</li>
<li><a href="https://github.com/ruby/rdoc/pull/512">https://github.com/ruby/rdoc/pull/512</a></li>
<li>RDoc 6 beta</li>
<li>質疑応答 (翻訳は zzak)</li>
<li>Q(ujm): <code>lex_state</code> を古い ripper では pure ruby で実装したのはどうやったみたいな質問っぽい → メモ取れず</li>
<li>Q(かねこさん): ripper は使っているバージョンの ruby で動くので、古い ruby バージョンのドキュメントを処理すると問題が起きることもあるのでは? → 壊れることもあるかもしれないが、大丈夫なのではないかという感じ(?)</li>
<li>Q(tenderlove): ripper はコード内のコメントを保存していますか? → AST の段階ではコメントは含まれないが、tokenize しかしていないので、開始、中身の謎の文字列、終端のようになって、中が何を意味するかには踏み込まないので、情報が消えたりはしない。</li>
<li>Q(ujm): RDoc は既存のものと互換性があるように ripper に置き換えたが次は何に挑戦する予定? → Ruby コードの情報をとるライブラリ、 irb の TAB キーでの補完でドキュメント (RDoc) も出るようにしたい</li>
<li>Q: irb のパーサーをどうにかする予定は? → nobu が ripper に置き換えようとしたが諦めた。多分できそうだが、大変そう。メソッドドキュメントの表示をしたい。</li>
<li>nobu の irb は syntax highlight がついていた。</li>
<li>syntax highlight もやりたい。</li>
<li>Q: Cのファイルのドキュメントは? → 今回の変更とは無関係。</li>
<li>C extension のドキュメントの方も必要に応じてみた方が良いのかもしれないが、まだ見ていない。</li>
<li>Q(ujm): 6ページあった修正点の中からピックアップするなら? → legacy な lexer で、新しい ruby syntax のサポートが大変だった</li>
<li>テストが壊れた</li>
<li>Q: 聞き取れず → 答えられない</li>
<li>Q: 1日どれくらいやっている? → 1ヶ月ぐらい、1日16時間?</li>
</ul>


<h2>一回休み</h2>

<p>セッションは諦めて休憩していました。</p>

<h2>Writing Lint for Ruby</h2>

<ul>
<li>SideCI</li>
<li>Lint ツール: RuboCop, Reek, Brakeman, Querly, &hellip;</li>
<li>Rules of Lint, Lint tools をかけるようになることがこのプレゼンの目標</li>
<li>lint tool があればより安全にプログラムが作れるようになる</li>
<li>Lint とは何か?</li>
<li>もともと C 言語用のツールの名前だったが、今ではいろんな言語にある</li>
<li>RuboCop の例を紹介</li>
<li><code>if 10 &lt; x &lt; 20</code> は実行するとエラー</li>
<li><code>foo bar { body }</code> や <code>x *y</code> は曖昧</li>
<li>そういうコードをチェックする</li>
<li>どう動くか?</li>
<li>AST (Abstract Syntax Tree) で扱う</li>
<li>parser gem を使って AST に変換している</li>
<li>parser gem の AST の node は type と children を持つ</li>
<li>行、桁、ソースなどのメタデータも持っている</li>
<li>他のパーサー</li>
<li>Ripper は標準で含まれているが、パースで想定するバージョンと実行する ruby のバージョンが同じになってしまう</li>
<li>ruby 2.4 で ruby 2.0.0 の lint ができない</li>
<li>ruby_parser は使ったことがないが parser gem と似たような感じらしい</li>
<li>Traverser: Depth-first search をして node ごとに <code>on_send</code> などの <code>on_#{node.type}</code> を呼び出す</li>
<li>if の条件に Integer リテラルのみを直接書いた場合に警告を出す例</li>
<li>Lint の限界 (Ruby の場合)</li>
<li>ローカル変数はただの変数</li>
<li><code>num = 1; if num; something; end</code> のようなコードは対象外</li>
<li>不可能ではないが複雑になる: たとえば Brakeman では追跡している</li>
<li>メソッドの定義やクラスや定数が正確にはわからない</li>
<li><code>sprintf('%s, %s', str)</code> は警告されるが <code>sprintf</code> が再定義されていると意味がない可能性があるが、そんなことはしないだろうと想定して動いている</li>
<li>動的なものは Lint より Test の方が向いている</li>
<li>Lint は AST がわかる</li>
<li>Lint は実行せずに解析できる</li>
<li>トレードオフがある</li>
<li>RuboCop に cop (ルール) を追加する</li>
<li>汎用的なものはヘルパーメソッドがあるので書きやすい: <code>if 1 ; end</code>, <code>ruby -cw</code> のようなもの</li>
<li>デモ: <code>rake new_cop[Lint/LitInCond]</code></li>
<li>特定のフレームワークに対して追加したい場合</li>
<li>RuboCop Plugin としてかける</li>
<li>例: backus/rubocop-rspec</li>
<li>1から作る場合</li>
<li>たとえば Lint + Git Diff, Ruby + YAML 用など</li>
<li>新しく作った方が作りやすい</li>
<li>質疑応答</li>
<li>Q: sprintf の再定義のような <code>Kernel</code> に再定義しているのを検出する cop は? → ない。ある程度は作れそう。本体には入りそうにない。</li>
<li>Q: デフォルト false では? → デフォルト false のものはメンテされないという現実があるので入れたくない。</li>
<li>Q(mame): RuboCop のゴールは? <code>10 &lt; x &lt; 20</code> のような初心者が陥りがちなものだけではなく、コーディングスタイルを押し付けられる感じがある? → 二面性がある。スタイルチェッカーと Lint としての側面がある。どっちも増えそう。</li>
<li>アップデートが辛い問題はツールを作っている。Style 系をオフにするとか。</li>
<li>Q: 汎用的なもののようにみえるが、プロジェクト固有のものはどうすれば? → 自社用のプラグインを作る or soutaro さんが作っている YAML でかくものがあるのでそれを使う のが良いのではないか</li>
<li>Q: カスタムコップを作りたい場合のドキュメントがなさそうな理由は? → 現状カスタムコップ、プラグインを作る仕組みが整備されていない。issue が止まったままなので頑張りたい。</li>
<li>Q: <code>new_cop</code> タスクは stable? → 本体に入っているので大丈夫だが、将来的に変更される可能性はあるかも。</li>
<li>Q: Rails は本体に config が入っているが? → 現状では特にロードマップはない。個人的には rails 関連は外に切り出したい。</li>
<li>Q: 一部は <code>ruby -cw</code> にあった方が良いのでは? → 本体に持っていく動きは今のところない。<code>ruby -cw</code> とかぶっているものもある。パフォーマンス的にできるのかというものもある。</li>
<li>Q: メモ取れず → ローカル変数をトレースするのはやりたいが、良い方法を思いついていないので、手がついていない。</li>
<li>Q: 速度が遅いのが気になっている。 parser gem が遅いのではないか。バージョンをわけたいという希望はないので ripper で高速化できないか? → ライブラリの CI で困りそう。インターフェースが違うので簡単に移行できない。</li>
<li>Q(znz): feature request の issue を書いたことがあるが、request だけだと難しい? → できるだけ実装するか、無理なら無理と返信したいが、たまっていてなかなか手が回っていない。</li>
</ul>


<h2>How to write synchronization mechanisms for Fiber</h2>

<ul>
<li>dRuby 本まだ買えます</li>
<li>Web 版もあります</li>
<li>Process - Thread - Fiber</li>
<li>80s はプロセスへの憧れがあった</li>
<li>90s のノンプリエンティブな協調型マルチタスクって Fiber じゃん?</li>
<li>実際のシステムは、プロセスだけ隔離しても結局はダメだった</li>
<li>ほかのプロセスとどうにかして共有が必要だった</li>
<li>IPC はめんどくさい</li>
<li>説明や使うのがめんどくさい</li>
<li>Thread: 多くの人にはプロセスの方がいいと思う</li>
<li>ほかのスレッドのメモリを触らないようにものすごく気をつける必要がある</li>
<li>Thread を使うには OS よりうまく扱えるという傲慢さが必要</li>
<li>Fiber: ほとんどの人には Thread の方がいいと思う</li>
<li>Fiber を使うには Ruby よりコンテキストスイッチをうまく扱えるという傲慢さが必要</li>
<li>Fiber → 自動的にスイッチしてよ → Thread → メモリを自動的に保護してよ → Process</li>
<li>Fiber を使ったフレームワークがすごいらしい</li>
<li>Fiber を使うプログラムを自分でも作って見たいと思った</li>
<li>Thread よりも難しいと思ったら、その通りだったので共有したい</li>
<li>Fibonacci の例</li>
<li>ループで書くと簡単</li>
<li>Fiber で書く例 (初日であったような感じ)</li>
<li><code>Fiber.new</code>, <code>Fiber#resume</code>, <code>Fiber.yield</code></li>
<li>new しただけでは実行されない</li>
<li>resume で Fiber にコンテキストを移す</li>
<li>一度目は先頭へ</li>
<li>二度目以降は <code>Fiber.yield</code> したところへ</li>
<li>これは何度目の resume かな…</li>
<li>resume と yield の概念がとっつきにくい</li>
<li>Enumerator で書き直す</li>
<li>おすすめ</li>
<li>次のテーマは同期 (待ち合わせ)</li>
<li>Thread での Queue を介した協調の Fiber 版を書きたい</li>
<li>rendez-vous (Rdv) の実装</li>
<li>イディオム: とりあえず resume、行き詰まったら yield</li>
<li>Fiber.new してすぐに resume すると Thread.new のように使える</li>
<li>やれることがなくなったら yield して Fiber.current を覚えてもらう</li>
<li>実装例: push, pop</li>
<li>Fiber だと条件検査の排他制御が不要</li>
<li>Thread だと危険</li>
<li>動きの例</li>
<li>同期の条件検査に排他制御が入らないので、Fiber のつもりが Thread だったというのは危険なので、Auto Fiber のようなものより、Thread のつもりが Fiber だったの方が安全ではないか</li>
<li>Multiplexer: socket のある例</li>
<li><code>read_nonblock</code> を使う</li>
<li>ブロックしそうな時 (<code>IO::WaitReadable</code>) に yield してメインループに戻る</li>
<li>block-ish nonblock I/O</li>
<li>ライブラリを作った: <a href="https://github.com/seki/bartender">https://github.com/seki/bartender</a></li>
<li>実際のアプリケーション例</li>
<li>tiny_drb の抜粋</li>
<li>昔よく見たバグの話</li>
<li>デモは作って見たが、見てもよくわからなかったので、説明</li>
<li>Multiplexer のまとめ</li>
<li>Fiber 入門のまとめ: 難しいよね</li>
<li>Fiber は難しいところが面白い</li>
<li>全体が暗記できるぐらいのサイズだったので罠を避けられた</li>
<li>すみずみまでわかっていないとハマることがある</li>
<li>ハマる可能性があると覚えておけば大丈夫</li>
<li>例: twitter クライアントの gem が全部読んで String にしてから JSON.parse するのでハマったので、ストリーム対応の JSON.parse はあるのかな?</li>
<li>ハマりそう: RDBMS のドライバ</li>
<li>質疑応答</li>
<li>Q: 読み書きしようとして安直にするとブロックするが、読めるだけ読むのがあるが書く方は? → 書く方もかけるだけ書くというのがある</li>
<li>Q: gets とか使えなくて不便? → 聞き取れず</li>
<li>Q(cuzic): Fiber の方が良いユースケースは? → Enumerator が良い例</li>
<li>Q(cuzic): 外部イテレーターではなく agent のようなパフォーマンスがよくなるという例は? → ゲームのキャラクターを動かすような誰かがビートを刻むような例は良さそう。 I/O は向いてなさそう。 Auto Fiber や co-routine の例をみると良い例があるのかも。</li>
<li>Q(joker): Thread で書いた場合は GIL で1コアでしか動かないが、(聞き取れず)だと別実装だと複数コア使えるとかあるが、Auto Fiber とかだと使えるようになる? → Fiber は Thread の中で動くので無理ではないか</li>
<li>Q(joker): 外部イテレーターにするとか見せ方の変更はできるが、マルチコアでパフォーマンスの改善という用途ではない? → そう理解している</li>
<li>Q: Thread と Fiber は違うのになぜ Fiber という名前なのかという感じの質問っぽい → Windows でそういう名前だから</li>
</ul>


<h2>MEDLEY のスポンサーセッション</h2>

<ul>
<li>会場アンケート</li>
<li>知っている人? → 少ない</li>
<li>昨日呑んだくれて疲れている人? → それなり?</li>
<li>遠隔診療が実質解禁されたので CLINICS というアプリを作った</li>
<li>医療 x IT への挑戦</li>
</ul>


<h2>Towards Ruby 3x3 performance</h2>

<ul>
<li>Ruby 3 performance goal</li>
<li>RTL (register transfer language) insns</li>
<li>RTL insns と stack insns の比較</li>
<li>RTL insns の精製方法</li>
<li>RTL insns のオペランド</li>
<li>RTL complications</li>
<li>RTL insn combing and specialization</li>
<li>Speculative insn generation</li>
<li>RTL insn status and future work</li>
<li>Possible JIT approaches</li>
<li>Option 1: Writing own JIT from scratch</li>
<li>メンテナンスするのが大変</li>
<li>Option 2: Using widely used optimizing compilers</li>
<li>コンパイルが遅い</li>
<li>Option 3: Using existing JITs</li>
<li>License issues and patent minefield</li>
<li>Own or existing JITs vs GCC/LLVM based JITs</li>
<li>How to use GCC/LLVM for implementing JITs</li>
<li>MJIT: <strong>M</strong>RI JIT, <strong>M</strong>ethod JIT</li>
<li>Example</li>
<li>MJIT performance results</li>
<li>どれが何かわからないグラフ</li>
<li>途中からちゃんと下まで出てきた</li>
<li>Recommendations to use GCC/LLVM for a JIT</li>
<li>MJIT status and future directions</li>
<li>RTL と MJIT が MRI の一部になるかはわからないがこの方向性で頑張る</li>
<li>質疑応答</li>
<li>Q(tenderlove): (メモ取れず)</li>
<li>Q: inline 化の話っぽい</li>
<li>Q: メモリ使用量の話っぽい</li>
<li>Q(ujm): make check が通らない理由は? → 並列実行とか callcc とか GC が関わるものとか(?)</li>
<li>Q: モチベーションは? → (よくわからず)</li>
<li>Q(ko1): GCC でループが最適化が測地になる例があったが、再定義対応は? → (よくわからず)</li>
<li>matz のコメント</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>MINASWAN 乙</li>
<li>936枚チケットが売れた</li>
<li>Next: Sendai May 31 (Thu) - June 2 (Sat)</li>
</ul>


<h2>全体の感想</h2>

<p>とりとめもなく色々と。</p>

<p>Twitter で @takatayoshitake さんとかの情報提供が色々と便利でした。(特に最終日のロッカー情報)</p>

<p>Twitter のハッシュタグ <code>#rubykaigi</code> は流れが速いと全然追いきれないので、あとで togetter でみれるかなと思っていたら、今年は特になさそうで残念な思いをしました。
RubyKaigi 全体のハッシュタグも、部屋ごとのハッシュタグも入り口に書いてあっただけで、特にアナウンスはなかった気がするので、部屋ごとのハッシュタグはつけずに <code>#rubykaigi</code> だけのツイートを、その人がどの部屋に参加していたか識別してまとめに振り分ける、という判断をしつつ、まとめを作ってくれる人が必要そうな気がします。</p>

<p>台風が移動に影響したり、カープ優勝でセールがあったりなど、外部要因でもいろんなことがあったのが印象深かったです。</p>

<p>3トラックあったので、興味があったのに見に行けなかったものも多いので、あとでチェックしたいと思いました。</p>

<p>昼の弁当スポンサーがなかった代わりに、夜の懇親会が大量にあったのがよかったです。</p>

<p>LT の発表は通訳の人との打ち合わせがない分、気軽だった代わりに、ちゃんと時間で切られる LT が久しぶりだったので、非常に緊張しました。
そして、実際には練習より早口だったのか、予定よりたくさん喋っても時間が余ってしまうという感じになってしまいました。
ネタが多い分には、後でRuby関西で使うなりブログに書くなり、他の発表場所はあるので、今後機会があれば多めに用意して調整できるようにしてみたい、と思いました。
日本語での発表でも、発表資料は頑張って英語で書いておいたからか、<a href="https://twitter.com/drbrain/status/910069298789588998">英語での反応があった</a>のが嬉しかったです。
基本的に何か反応があると嬉しいものなので(承認欲求)、発表とかしないという人でも、積極的にいいねをしたり、スターをつけたりすると良いと思います。</p>

<p>開催の頭が連休だと、休みの部分を観光に、と思っても、期間中に出て来たオススメ情報を活用できないので、来年のように、後に休みが続く方が嬉しいと思いました。
今回の場合は、台風で日曜に観光は無理だったということがありましたが、広島平和記念資料館に無料で入れるという特典が、前日に知らずに行っていたら無駄になる、ということがおきたのではないかと思いました。</p>

<p>基本的に人を覚えるのが苦手なので、今回会った人で、次回忘れていたらすみません。</p>

<p>Workshop は気になったのと、普通の発表は後で録画をみることもできる、というので、できれば参加したかったのですが、 <a href="https://github.com/rubydata/rubykaigi2017">https://github.com/rubydata/rubykaigi2017</a> の事前準備をしようとしたら、前日に止まっていたホテルだと帯域制限らしき状態になってしまって、 <code>rake docker:pull</code> できなかったということもあって諦めました。
Afternoon Break の時間に重なっていた方も、 LT の前の接続確認をする必要があったので、諦めました。</p>

<p>LT の接続確認は、なぜか最大化したときの表示がリサイズ前の範囲しか表示されない、という現象がなおらず (以前は次のページに移動したり、一覧ページに移動したりすればなおっていた)、発表準備期間中に n0kada さんが rabbit の方に終了時に落ちる (正常終了ではなく SEGV 的な終わり方をする) のを報告していたので、同じ macOS っぽいとわかっていたので、どうしていたのかきいてみたら、 <code>rabbit -S 1920,1080 hoge.md</code> のように <code>-S</code> で画面サイズを指定して起動すれば良いと教えてもらって解決しました。ありがとうございました。</p>

<h2>まとめ</h2>

<p>色々と大変なこともありましたが、大きな問題もなく、無事終わって良い RubyKaigi でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2017 の2日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-19-rubykaigi2017.html"/>
    <updated>2017-09-19T09:42:14+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi2017</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2017">RubyKaigi 2017</a> の2日目に参加したので、そのメモです。</p>

<!--more-->


<h2>ドリコムさんのスポンサーセッション</h2>

<h2>The Many Faces of Module</h2>

<ul>
<li>島根との時差ボケで眠い</li>
<li>RubyKaigi は世界最大の Ruby カンファレンス</li>
<li>The best and brightest</li>
<li>matz が母国語で話をする (翻訳付き) のはここ (と RubyWorld Conference (技術よりではない) だけ)</li>
<li>Recent topics</li>
<li>amatsuda さんが発表内容のハードルを上げてくる</li>
<li>どこのカンファレンスでもコミュニティの主要な日本人をみかける</li>
<li>Performance, Concurrency, Static Types は他のセッションにお任せ</li>
<li>天才プログラマーではなく、才能ある言語デザイナーだと思っている</li>
<li>あまり評判のよくない言語も含めて例外なくすべてのプログラミング言語を愛している</li>
<li>&ldquo;matz に他言語に攻撃的であるので嫌い"と言われることがある</li>
<li>理由を聞いたことがある</li>
<li>いいところはいい、悪いところは悪いと言った時に Ruby の宣伝のように取られることがあるらしい</li>
<li>Python の ML に、という過去のあやまちのようなこともあることはある</li>
<li>Simula (1968) : 最初のオブジェクト指向言語と言われている</li>
<li>Lisp や Smalltalk 経由でオブジェクト指向を取り込んでいる</li>
<li>Dr. Kristen Nygaard : すべてのオブジェクト指向言語はわしの孫のようなもの、と言われたという話</li>
<li>継承の概念が重要</li>
<li>単一継承と多重継承</li>
<li>多重継承は調べられた限りでは Lisp (Flavors) が最初</li>
<li>多重継承はダイヤモンド継承とかのネットワーク構造になりうる</li>
<li>言語設計者は最悪のケースを考えなければいけない、なぜならするやつがいるから</li>
<li><a href="https://en.wikipedia.org/wiki/C3_linearization">C3 linearization algorithm</a></li>
<li>Mixin : Lisp では Flavors と呼ばれていた</li>
<li>MIT 近くにあった Steve&rsquo;s ice cream shop が発想の元</li>
<li>バニラアイスクリームにチョコチップを、という感じ</li>
<li>Flavors は抽象クラスでインスタンスは作れない</li>
<li>Flavors 同士を混ぜる (継承する) ことはできるが、元のクラスの方は混ぜることができない</li>
<li>Ruby の module の話</li>
<li>1: Module は mixin の単位として作られたのが最初の用途</li>
<li>他の機能としても使われるようになってきた</li>
<li>2: ネームスペース、たとえば <code>class Net::HTTP</code></li>
<li>3: シングルトン、たとえば <code>module FileUtils</code></li>
<li>4: 機能の集まり、たとえば <code>module Math</code></li>
<li><code>module_function</code></li>
<li>5: メソッド結合の単位として</li>
<li>AMC (alias method chain) の呪い</li>
<li>複数回使うと壊れやすい</li>
<li><code>Module#prepend</code> : 同じ名前で複数の提案があったので、誰が元祖かわからない</li>
<li>欠点はダイナミックさが足りない: 一度入れたものを外せない</li>
<li>include や prepend が外せないのは意図的にそうしている</li>
<li>しばらく聞き流していたが CLOS (Common Lisp Object System) の method combination を思い出した</li>
<li>アスペクト指向プログラミングにも繋がる</li>
<li>似ているのは同じ人 (Gregor Kiczales) が考えた機能だった</li>
<li>6: refinement の単位</li>
<li>オープンクラスの機能を利用してモンキーパッチングができる</li>
<li>昔は ゴリラパッチング</li>
<li>さらに昔は ゲリラパッチング</li>
<li>有名な利用例は Active Support</li>
<li>全体に影響があるので、一箇所にまとめておくのが良い</li>
<li>できるからやればよいというものではない</li>
<li>できれば特定の範囲に影響範囲をせばめたい</li>
<li>変数がグローバル変数だけだったのがローカル変数ができたように</li>
<li>似た発想: ClassBox (Java/Smalltalk), Selector Namespace (Smallscript / (ECMAScript4))</li>
<li>local rebinding : 置き換えたものがメソッドを呼び出した先でも置き換えられるかどうかに違いがある</li>
<li>GUI で Windows 風のボタンにするか Mac 風のボタンにするかを切り替えられたり</li>
<li>Selector namespace = lexical</li>
<li>ClassBox は先まで置き換えるので強力</li>
<li>Refinement</li>
<li>使用例: 既存のクラスにメソッドを追加したい</li>
<li>C# extension のようなもの</li>
<li>想定している使用例 RSpec</li>
<li>using をあちこち書かないといけないのでまだ使われていない</li>
<li>refinement が最適な解決策とは思っていない</li>
<li>local rebinding がないから</li>
<li>知らないところで挙動が変わるということがないということとのトレードオフ</li>
<li>7: Structural signature</li>
<li><p>Structural type check に使われるかも</p></li>
<li><p>Performance</p></li>
<li>Benchmark Suite, MJIT, Rubex</li>
<li>Concurrency</li>
<li>Fiber, (Guild), Auto Fiber</li>
<li>normalperson さん: 会ったことある人がほとんどいない, 飛行機に乗らない,  プロプラなサービスは使わない, unicorn の人</li>
<li>Static analyses or インタラクティブプログラミング</li>
<li><p>これもいくつか発表がある</p></li>
<li><p>Ruby は my language ではなく our language</p></li>
<li>コミュニティの努力</li>
<li><p>みんなで Ruby をもっと良くしていこう、世界を良くしていこう</p></li>
<li><p>Sponsors</p></li>
<li><p>質疑応答</p></li>
<li>Q(ujm?): 遠い将来に複数のライブラリの複数バージョンを同時に使用できる構想はあるか? → そういう触れ込みの言語はあるがうまくいっている例がまだなさそう。Ruby のネームスペースはシンプル。誰でも使えるようなパッケージシステムはまだできてない。発明されれば取り込みたい。</li>
</ul>


<h2>An introduction and future of Ruby coverage library</h2>

<ul>
<li>Esoteric Recipe</li>
<li>Ruby に対する主な貢献</li>
<li>今日の話はそのうちテストカバレッジの話</li>
<li>会場アンケート</li>
<li>Ruby or Rails を production で使っている人? → 多い</li>
<li>テストをしている? → 多い</li>
<li>カバレッジを測定している? → それなり</li>
<li>カバレッジとは?</li>
<li>実行 (テスト) されていないコードを見つけるなど</li>
<li>関数カバレッジ</li>
<li>行カバレッジが良く使われている</li>
<li>コメントや else や end の行は無視される (対応する iseq がない行)</li>
<li>後置 if で行全体は実行されたと判断されるなどが弱点</li>
<li>ブランチカバレッジ</li>
<li>ビジュアライズが難しい</li>
<li>今までは行カバレッジしかサポートしていなかった</li>
<li>他のカバレッジの紹介</li>
<li>C0/C1/C2 カバレッジ</li>
<li>C0 = 行カバレッジ</li>
<li>C1 = branch or path?</li>
<li>C2 = condition or path?</li>
<li>Ruby にとってカバレッジは重要</li>
<li>あまり使われていない理由は?</li>
<li>あまり知られていない? 使われ方が知られていない? 機能が不十分?</li>
<li>カバレッジはコードについての網羅だけで仕様をカバーしているかどうかは計測できない</li>
<li>カバレッジは指標であって、ゴールではない</li>
<li>カバレッジをゴールにすると、あまりよくないテストをつくりがち</li>
<li>テストデザインをちゃんと考えながら追加するのが大事</li>
<li>目安</li>
<li>人が傷ついたりするような重要なモジュールは 100% にした方が良いが他はそうでもない</li>
<li>環境によって実行されないコードもあったりするのでほどほどに</li>
<li>SimpleCov</li>
<li>使い方は test/test_helper.rb の頭で <code>require "simplecov"; SimpleCov.start</code></li>
<li><code>coverage.so</code> は後でロードされたライブラリは測定対象にならないので、測定対象より前に、というのが重要</li>
<li>テスト結果は nil になっている行は無視される行</li>
<li><code>def</code> の行はメソッド定義自体の実行回数で、メソッドの内容が実行された回数ではない</li>
<li>Ruby 本体用に作ったので experimental feature と書いてあるが、使われるようになったので気軽に変更しにくくなった</li>
<li>Concov</li>
<li>他の言語</li>
<li>C/++: GCOV/LCOV</li>
<li>Java: いろいろ</li>
<li>JavaScript: Istanbul</li>
<li>Ruby 2.5 に向けての計画</li>
<li>関数カバレッジとブランチカバレッジをサポートしたい</li>
<li>API を後悔しないものにしたいので、意見があれば <a href="https://bugs.ruby-lang.org/issues/13901">Add branch coverage</a> にコメントを</li>
<li>API はキーワード引数を受け取れるようにした</li>
<li>結果の同じ行に</li>
<li>カバレッジのオーバーヘッド</li>
<li>LCOV の可視化例</li>
<li>securerandom の環境依存のところが実行されていない例</li>
<li>今後の予定</li>
<li>callsite coverage: <code>obj.foo.bar</code> の foo で例外が実行された場合とか</li>
<li>Block coverage: <code>ary.map { ... }</code> で空配列だけだとブロックの中が実行されない可能性</li>
<li>質疑応答</li>
<li>Q(すとうさん) 実行されなくても大丈夫なところはメモしておけると、あとで見直すときにわかるので、何かないか? → <code>coverage.so</code> ではなく、ラッパー側で。</li>
<li>Q(hsbt) SimpleCov は coverage.so だけで取れるようにならない? 依存ライブラリを減らしたい。 → 改良がどんどん進む余地がある部分は、将来の拡張の余地がなくなるので、あまりやる気がない。</li>
<li>amatsuda: SimpleCov のメンテナもやっているので、ブランチカバレッジ対応とか必要があればやる気はある</li>
<li>Q(amatsuda) 手伝って欲しいところとか? → Java とかだと IDE との連携が便利らしい。そのへんのエコシステムを一緒に作ってくれる人が増えるとありがたい</li>
</ul>


<h2>What visually impaired programmers are thinking about Ruby?</h2>

<ul>
<li>自己紹介</li>
<li>Non Visual Desktop Access (NVDA)</li>
<li>Mac には Insert キーがないので、Escape キーを代わりに使える拡張</li>
<li>Excel の罫線の読み上げなど他の国の人がやらないようなところをやっている</li>
<li>島根県 CMS はアクセシビリティがしっかりしている</li>
<li><a href="https://github.com/edhowland/viper">https://github.com/edhowland/viper</a></li>
<li>Mac のターミナルの読み上げ機能を利用して文字を出力して読み上げさせるエディタ</li>
<li>Braille Memo BM46</li>
<li>Console (Terminal) applications</li>
<li>Terminal + screen reader だけ使っている人はエンジニアもいる</li>
<li>デモ</li>
<li>展示ディスプレイとの組み合わせでリモートの Linux マシンの Emacs を操作して ruby プログラムを編集するようなデモ</li>
<li>インデントはビープ音で表現していた</li>
<li>Screen reader, Tactile</li>
<li>アクセシビリティ対応のモダンなテキストエディタ: Visual Studio Code, Eclipse</li>
<li>Eclipse のデモ</li>
<li>Ruby の利点</li>
<li>日本語ドキュメント</li>
<li>読みやすい、描きやすい、コード量が少ない</li>
<li>サーバーエンジニア用のツール</li>
<li>テスト駆動</li>
<li>Ruby の欠点</li>
<li>Windows アプリの作り方に良い方法がない</li>
<li>GUI がなかなか良いものがない (visual ではない方法で)</li>
<li>Tk はアクセシブルではない</li>
<li>そういうときは、お手上げか文字認識で頑張るしかない</li>
<li>GUI フレームワークとアクセシビリティ</li>
<li>アプリケーションは OS から問い合わせが来た時に適切な情報を返せる必要がある</li>
<li>wxRuby は良いが、開発が止まっていて残念</li>
<li>ドキュメンテーションツール: rdoc, yard</li>
<li>ハッピーだったり辛かったりするデモ: Windows 10 + NVDA + Firefox</li>
<li>メインのランドマークに移動するショートカットキーがある</li>
<li>見出しでジャンプできたりできなかったり</li>
<li>rdoc はマウスホバーするとソース表示のトグルが出てくるのが気づきにくい</li>
<li>yard もソースを展開して読むことができる</li>
<li>メソッドが見出しになっていると探しやすくて良いのに、という話がある</li>
<li>なぜ重要か?</li>
<li>標準に準拠</li>
<li>機械処理などにも強い</li>
<li>誰もがハンディキャップを持つ可能性がある</li>
<li>デジタルになることがそもそも可能性を広げている</li>
<li>Ruby のアクセシビリティは良いがまだ良くできる</li>
<li>知り合いの視覚障害者が来てくれるかと思ったが、ハードルが高かったようなので、そういう人たちも来れるようになると嬉しい</li>
<li>質疑応答</li>
<li>Q: 健常者が普通に作っているだけでは気づきにくい点があるので、実際にチェックしてもらうのが重要 → NPA とかでアクセシビリティ診断とかやっている</li>
<li>Q: ドキュメントのアクセシビリティ。他の言語 sphinx とか? → 確認できてない。興味はある人はいる。悪い評判は聞いたことがない。また調べて Python のコミュニティで発表したい。</li>
</ul>


<h2>Regular Expressions Inside Out</h2>

<ul>
<li>会場アンケート</li>
<li>正規表現を使ったことある人? → ほとんど</li>
<li>正規表現でてこずったことある人? → ほとんど</li>
<li>中身を見たことある人? → 1,2人</li>
<li>Onigmo, Onigumo</li>
<li>鬼雲? 鬼蜘蛛?</li>
<li>最小の例: <code>//</code></li>
<li>何もマッチしない? → wrong</li>
<li>どんな文字にもマッチしない</li>
<li>空文字列にマッチ</li>
<li>文字の先頭・間・末尾にマッチ</li>
<li><code>'abcde'.gsub //, 'x'</code></li>
<li>空の正規表現が隠れていることがある: <code>"xyz" =~ /a+|b*/</code></li>
<li>有効な使い方</li>
<li><code>=~</code> (<code>match</code>), <code>sub</code> の他に <code>slice</code>, <code>split</code>, <code>scan</code>, <code>gsub</code></li>
<li>Pure Ruby で効率的な Unocode の正規化</li>
<li><code>unicode_normalize</code></li>
<li>Unicode Standard Annex #15</li>
<li>German to NFC</li>
<li><code>gsub /[AaOoUu]\u0308/, {...hash...}</code></li>
<li>Unicode にはもっとたくさんの組み合わせがある</li>
<li><code>/[BaseCharacters][CombinationCharacters]*/</code></li>
<li>実際のものは <code>lib/unicode_normalize/tables.rb</code> にある</li>
<li>文字にしたいが nobu に反対されている(?)ので <code>\uXXXX</code> のまま</li>
<li>ハッシュも工夫している</li>
<li>Ruby が速くなれば速くなる</li>
<li>gsub にハッシュを渡せるのは Ruby だけなので他の言語だとできない</li>
<li>gsub にハッシュが使えるようになった developer meeting が初参加だった</li>
<li>Improving Unicode Property Support</li>
<li><code>\p{Digit}</code>, <code>\p{Hiragana}</code></li>
<li>Unicode はコードポイントは ISO 10646 互換</li>
<li>Properties などは Unicode での追加</li>
<li>プロパティは Boolean properties (二値プロパティ), Enumerable properties (多値プロパティ) がある</li>
<li>データ量が多い</li>
<li>enc/unicode/10.0.0/nam2ctype.h</li>
<li><a href="https://bugs.ruby-lang.org/issues/13240">Change Unicode property implementation in Onigmo from inversion lists to direct lookup</a></li>
<li>二値プロパティは反転リストで持っている</li>
<li>多値プロパティはプロパティの値ごとに反転リストを持つ必要がある</li>
<li>値は Unicode 10.0.0 で 138 個ある</li>
<li>チェックは二分探索</li>
<li>svn.ruby-lang.org でダウンロードしようとすると拒否されるぐらい大きい (checkout はできる)</li>
<li>新しい表現方法</li>
<li>プロパティが一緒のものは同値類にする</li>
<li>定数時間で探索できる</li>
<li>まだサイズが大きかったので、二段階の同値類にした</li>
<li>パフォーマンス: 二分探索で対数時間かかっていたのが、定数時間になった</li>
<li><a href="https://bugs.ruby-lang.org/issues/13241">Method(s) to access Unicode properties for characters/strings</a></li>
<li>問題点もまだある</li>
<li>まとめ</li>
<li>質疑応答</li>
<li>Q: 実装は Ruby 本体に入っている? Onigmo に入っている? → Ruby 本体の Onigmo 部分に入る、最終的には同期を取るので調整が必要</li>
</ul>


<h2>Type Checking Ruby Programs with Annotations</h2>

<ul>
<li>4個の Ruby のタイプチェッカーを実装した</li>
<li>2005, Type inference, structural subtyping</li>
<li>2007, Type inference, polymorphic record types</li>
<li>2009, Control flow analysis</li>
<li>2017, Local type inference, structural subtyping</li>
<li>なぜ型チェッカーが必要か?</li>
<li>バグ発見</li>
<li>ドキュメントが検証可能</li>
<li>自動補完</li>
<li>リファクタリングしやすい</li>
<li>高度なプログラム解析に使える、セキュリティチェッカーとか</li>
<li>Ruby の型チェック</li>
<li>少なくとも12年いろんな人が試して来た</li>
<li>Ruby は変数に型がないので、型推論しようとした</li>
<li>Static Type inference for Ruby</li>
<li>Diamondback Ruby</li>
<li>structural subtyping ベースなので、 polymorphic types は推論できない</li>
<li>Type inference for Ruby Programs Based on Polymorphic Record Types</li>
<li>RubyKaigi 2008</li>
<li>ML の型推論と polymorphic record types ベースで polymorphic types が推論できる</li>
<li>いくつかの組み込みで型を提供できない</li>
<li>polymorphic recursion (Array cannot be polymorphic)</li>
<li>Non regular types (<code>Array#map</code>)</li>
<li>Type Checking for Ruby</li>
<li>ここまでのまとめ</li>
<li>Ruby プログラムから型推論は構築できない</li>
<li>subtyping を選んでも polymorphic type inference を選んでも限界があるから</li>
<li>Requirements</li>
<li>Correctness: 型チェッカーが通れば実行時に型エラーが起きない</li>
<li>Static: 実行せずに</li>
<li>No annotation: 型推論</li>
<li>Relaxing Requirements</li>
<li>Forget Correctness</li>
<li>Incorrect type checking でもプログラマーの助けになる</li>
<li>TypeScript accepts unsound co-varieant subtyping on function parameters</li>
<li>Lint tools: アドホックな悪いプログラムのパターン集だが役たっている</li>
<li>Type Checking at Runtime</li>
<li>メソッドボディの実行前にチェック</li>
<li>Annotate Ruby Programs</li>
<li><a href="https://github.com/soutaro/steep">https://github.com/soutaro/steep</a></li>
<li>Key Ideas</li>
<li>Gradual Typing : アノテーションがなければチェックしない</li>
<li>Programmers annotate their Ruby programs</li>
<li>Another language to define types</li>
<li>例</li>
<li>Annotating Constants?</li>
<li>Type Definition</li>
<li>What is Signature?</li>
<li>Signature Code Separation</li>
<li>Steep まとめ</li>
<li>Q(jokerさん): DSL は Ruby で? → racc などを使って ruby で実装しているが、ruby のコンテキストで動くわけではない。</li>
<li>Q: 聞き取れず (たくさんサポートするのは大変とかいう話?)</li>
<li>Q(ko1) rails? → TypeScript はコミュニティでたくさん揃っているので、そういう感じになって欲しい</li>
<li>Q(yugui) Active Support? How can we (community) help you? → 聞き取れず</li>
<li>Q(mame) Ruby core に入れたい? add-on? → パフォーマンスがなんとかまでしか聞き取れず</li>
</ul>


<h2>Ruby Language Server</h2>

<ul>
<li>自己紹介</li>
<li>手書き麻雀フォント</li>
<li>qwik2md</li>
<li>asakusarb.esa.io</li>
<li>麻雀, Ruby, Docker 好き</li>
<li>Language Server とは?</li>
<li>エディターやツールに便利な情報を提供してくれるツール</li>
<li>Language Server Protocol (LSP) (JSON-RPC ベース) でやりとり</li>
<li>syntax error のチェックとか整形とか</li>
<li>Editor → LSP Client (Plugin) → Language Server</li>
<li>LSP Client はエディターごとのものと汎用的なものがある</li>
<li>汎用的なものの場合は Boot setting for Ruby などが必要</li>
<li>利点欠点まとめ</li>
<li>まず VS Code 向けを作り始め</li>
<li>Language Server に必要なもの</li>
<li>JSON-RPC</li>
<li>トランスポートは socket でも stdio でも http でも使える</li>
<li>サンプルは node ipc</li>
<li>既存の json-rpc の gem は http のみ対応っぽいので、実装する必要あり</li>
<li>Language Server は STDIO が多数派らしいということで、STDIO を選択</li>
<li>Language Server Protocol</li>
<li>initialize で capabilities を返すので徐々に実装していける</li>
<li>TypeScript から Ruby のコードを生成して language_server gem を作れた</li>
<li>まだ alpha 段階</li>
<li>pure Ruby</li>
<li>syntax check</li>
<li>自動補完や定義へのジャンプは実装中</li>
<li>使い方</li>
<li>dokcer か gem で使う</li>
<li>具体的な実装</li>
<li>syntax check は <code>ruby -wc</code> を使っている</li>
<li>自動補完は rcodetools を使っている</li>
<li><a href="https://github.com/rcodetools/rcodetools">https://github.com/rcodetools/rcodetools</a></li>
<li>そのまま組み込めなかったので wrapper 層がある</li>
<li>実際に実行するので副作用がある</li>
<li>Ripper を使っている</li>
<li>定義ジャンプ</li>
<li>Future prospects</li>
<li>Conclusion</li>
<li>language server が一般的になっている</li>
<li>一実装として language_server gem を作った</li>
<li>気に入らなければ language_serer-protocol gem を使って別実装を</li>
<li><a href="http://langserver.org/">http://langserver.org/</a> の一覧に追加された</li>
<li>Q(ko1) このために ruby をこうしてほしいという意見があれば → warning を正規表現で頑張るのではなく、機械可読可能に</li>
<li>逆質問: <code>ruby -wc</code> を実行するのではなく、今実行している ruby 上でやりたい → ko1: ISeq を使えば良い</li>
<li>逆質問: ripper が苦しいので parser gem にしようかと検討している。理由は始点と終点が欲しい。 → mame さんが検討している</li>
<li>Q(mame) ripper は遅くないですか? → parser gem より速かった。</li>
<li>Q(mame) 編集段階の壊れたものも ripper に渡す? → その通り</li>
<li>Q(shugo) protocol の仕様としてインデントの計算をして返すものはあるのか? → format が近そう</li>
<li>カラースキーマーや syntax highlight がまだ PR 段階など、 LSP 自体が発展途中</li>
</ul>


<h2>Write once, run on every boards: portable mruby</h2>

<ul>
<li>自己紹介</li>
<li>ローカルな話</li>
<li>Sessalet</li>
<li>別ボードへの移植</li>
<li>ハードウェアを操作する部分はC言語で書いて mrbgems を作成する必要がある</li>
<li>デモ</li>
<li>GR-PEACH</li>
<li>Nucleo F411RE</li>
<li>Architecture 表</li>
<li>Writing Ruby Code</li>
<li>Sensors</li>
<li>Motor はモーターごとに挙動が違うので別クラス</li>
<li>ハードウェア依存部分</li>
<li>CMSIS : デバッグ用の共通仕様</li>
<li>HAL (Hardware Abstraction Layer)</li>
<li>mbed library, C++</li>
<li>Arduino &amp; mbed</li>
<li>Arduino : library, IDE</li>
<li>利点: サンプルがたくさん、たくさんのボードをサポートしている</li>
<li>Arduino 互換機</li>
<li>mruby の普及に必要なものを Arduino から mbed から学んだ</li>
<li>まとめ</li>
<li>ボード非依存なコードを</li>
<li>ボード依存部分はまとめる</li>
<li>たくさんサンプルがあると良い</li>
<li>Q: 3秒スリープをどうやってるかみたいな質問 → ハードウェアのライブラリにそれ用の機能がある</li>
</ul>


<h2>Lightning Talks</h2>

<p>自分も発表していたので、疲れてメモは取れず。</p>

<p>発表資料はいつも通り<a href="https://github.com/znz/rubykaigi2017-frozen_string_literal">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-how-to-specify-frozenstringliteral-true/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/how-to-specify-frozenstringliteral-true">slideshare</a>, <a href="https://speakerdeck.com/znz/how-to-specify-frozen-string-literal-true">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-rubykaigi2017-frozen_string_literal">RubyGems</a> にあげています。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-frozen_string_literal/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-frozen_string_literal/" title="How to specify `frozen_string_literal: true`">How to specify `frozen_string_literal: true`</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2017 の1日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-18-rubykaigi2017.html"/>
    <updated>2017-09-18T10:34:48+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi2017</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2017">RubyKaigi 2017</a> の1日目に参加したので、そのメモです。</p>

<!--more-->


<p>最初の方は個人的なメモなので、興味がなければ飛ばして、オープニング以降からどうぞ。</p>

<h2>移動と前夜祭</h2>

<p>土曜日に姫路に寄ってから、岡山県の実家に泊まっていて、日曜に台風の影響で11時ごろから岡山の在来線が止まるということで、その前に移動していたので、広島には問題なく到着していました。広島では10時ごろから在来線が止まっていたようでした。
午後は新幹線も広島より西で停電があった影響で遅れたり、博多と広島の間は止まったりしていたようです。</p>

<p>飛行機はだいたい止まっていたようで、東京からの人はさっさと新幹線に切り替えた人は問題なくたどり着けて、遅く新幹線に乗った人は遅れていて、前夜祭に間に合わなかったりしたようです。</p>

<p>前夜祭は、ホテルから移動している時に傘が壊れる (1本骨が曲がる) ということはありましたが、問題なくたどり着いて参加できました。
終わった後はほとんど雨は降っていませんでした。
Twitter のハッシュタグ <code>#rubykaigi</code> をみていると、会場準備をしていたスタッフの人で終わった後にきて、残っていたものを食べたりお土産をもらったりしていた人もいるようでした。</p>

<h2>朝の移動</h2>

<p>近くのホテルに泊まっていたので、開場前に会場につけるかと思っていたら、ちょっと準備に手間取ってしまって、結局9:40頃に到着しました。</p>

<h2>オープニング</h2>

<p>オープニングというか最初のキーセッションの前のつなぎとして、松田さんが会場アンケートしたりしていました。
初参加の人が意外と多かったようです。</p>

<h2>Ruby Forward</h2>

<ul>
<li>Money Forward によるスポンサーセッション</li>
<li>BtoC の新サービスを明日リリース予定</li>
<li>Ruby逆引きハンドブックの改訂版を出版(予定)</li>
<li>福岡の開発拠点を新設</li>
</ul>


<h2>Making Ruby? ゆるふわRuby生活</h2>

<ul>
<li>Heroku の matz team</li>
<li>日々の話</li>
<li>Repository は svn.ruby-lang.org がメインで github.com にはミラーがある</li>
<li>pull request は裏口</li>
<li>Why not Git?</li>
<li>ruby は Git より昔からあるから</li>
<li>作業する人がいない</li>
<li>個人的に hash がリビジョン番号の方が良い</li>
<li>コミッターにとっての利点不足</li>
<li>issue は redmine</li>
<li>開発者会議</li>
<li>tarball からのビルドの仕方: configure + make</li>
<li>Out-of-place build</li>
<li>configure に色々オプションがあったりいろんな環境をサポートしていたり</li>
<li>一度にビルドできる Makefile <a href="https://github.com/nobu/build-files/blob/master/Ruby.mk">https://github.com/nobu/build-files/blob/master/Ruby.mk</a></li>
<li>repo からのビルド</li>
<li>subversion or git / autoconf / bison / gperf / ruby</li>
<li>BASERUBY, MINIRUBY</li>
<li>トラブルによりすとうさんのサポート</li>
<li>MINIRUBY の機能や制限</li>
<li>2.4 までは miniruby と拡張ライブラリのビルドは parallel だったが、extconf.rb の実行が逐次実行だった</li>
<li>親にしか依存していないので 2.5 では exts.mk ファイルを分割生成して parallel に実行できるようになって速くなった</li>
<li>拡張ライブラリ作成時の問題点</li>
<li>C ヘッダーの場所とかが問題</li>
<li>Solution: <code>trace_var</code></li>
<li><code>$extmk</code>, <code>$ruby</code></li>
<li>? (突然の質疑応答タイム) → 特になし</li>
<li>Bug Report</li>
<li><a href="http://mla.n-z.jp/?ruby-list=50578">ruby-list:50578</a></li>
<li><code>p = 2; p (-1.3).abs</code> の話</li>
<li>スペースの有無によって意味ががらっと変わることがある</li>
<li>良くいって罠</li>
<li>少なくとも 1.1 からの仕様 (それより古いものはコンパイルが通らないので調べていない)</li>
<li>悪魔城 parse.y</li>
<li>難しくない?</li>
<li>ruby -w で警告が出るのでそのソースコード解説</li>
<li><code>EXPR_LABEL</code> はキーワード引数の名前が置けるところ</li>
<li><code>lvar_defined</code></li>
<li>matz issue</li>
<li>? 再び</li>
<li>literal symbol by intern</li>
<li><code>:"#{foo}"</code> が intern を再定義していると Symbol 以外になることがある</li>
<li>昨晩前夜祭の前に<a href="https://github.com/ruby/ruby/blob/d1e63172c6ecf2606ff9a947d917117eb6923436/parse.y#L7894-L7900">直した</a></li>
<li><a href="https://bugs.ruby-lang.org/issues/13812">Refinements で定義した to_s を String interpolation が呼んでくれない</a></li>
<li>.x86_64-darwin などをビルドディレクトリに使っている</li>
<li><code>.gitignore</code> に <code>.*-*</code> が入っている</li>
<li><code>make -C .x86_64-darwin exam commit</code></li>
<li>違い: 変換が明示的に見えるようにするのと見えないようにする</li>
<li>2.5 には目玉機能がない?</li>
<li>NEWS をみると色々</li>
<li>Reject された feature</li>
<li>議論中</li>
<li><code>Kernel#method</code> に対応する演算子?</li>
<li><p>Rightward assignment: <code>-&gt;</code> とか <code>=&gt;</code> とか使っているので良いものがない</p></li>
<li><p>質疑応答</p></li>
<li>extmk の分割の話で親子関係しか依存がないのを確認した? → digest が openssl に依存していた (チェックするためのメソッドを共有していた) のを切り分けた。 Windows で何かあったのを親子関係にした。実行時の依存ではなくビルド時の依存関係なのでもともと多くはなかった。</li>
<li>Rightward assignment の記号の提案 (:= が書籍では ← と書かれる言語があるので =: は?) → トークンの追加は衝突がなければ難しくない、<code>a=:b</code> がシンボルと衝突する。 <code>a ~&gt; b</code>, <code>a |&gt; b</code> ?</li>
<li><code>String#intern</code> を再定義する? → する人もいるらしいので、先手を打って直した</li>
<li>yield_self が目玉機能になる? → 機能としては長い間要望されていたものが、名前問題でなかなか入らなかった。とりあえず説明的な名前で入れて、良い名前があれば alias 追加すればいいという感じで入った。</li>
</ul>


<h2>Fiber in the 10th year</h2>

<ul>
<li>ささださんすごいとツイートしてほしい話</li>
<li>所属が変わっても基本的に ruby のコアの開発をしている</li>
<li>Fiber の紹介</li>
<li><p>Proc との違いは restart できる</p></li>
<li><p>Fiber の利用例</p></li>
<li>内部イテレーターを外部イテレータ〜にする例</li>
<li>Enumerator が内部で Fiber を使っている</li>
<li>Agent simulation : ゲームのキャラクター表現など</li>
<li><p>Non-blocking IO scheduler</p></li>
<li><p>Thread との違い</p></li>
<li>timer で自動で切り替わるかどうか</li>
<li>I/O ブロックで勝手に切り替わるかどうか</li>
<li>同期処理が必要かどうか</li>
<li>次のコンテキストを指定する必要があるかどうか</li>
<li><p>パフォーマンス</p></li>
<li><p>以上が Fiber の歴史</p></li>
<li><p>背景: Ruby 1.9 における Callcc と Fiber</p></li>
<li>2007/05 作り始め</li>
<li>Fiber の名前は Windows API から</li>
<li>今では他の言語でも Fiber という名前が使われているものがある</li>
<li><p>最初は <code>Fiber#pass</code> しかなかった</p></li>
<li><p>Coroutine or Semi-coroutine</p></li>
<li>Coroutine は難しいがパワフル</li>
<li>Semi-coroutine (Fiber) and Coroutine (Fiber::Core)</li>
<li>大クラス主義 (big class principle) を理由に Fiber::Core を削除してマージ</li>
<li><p>Semi-coroutine: resume, Coroutine: transfer</p></li>
<li><p>Fiber の実装</p></li>
<li>2007年: Copy machine stack</li>
<li>2010年: Use Native support</li>
<li>2017年: More light weight switching</li>
<li>速度: 5% 改善, メモリ: 30% 削減</li>
<li>VM stack や Machine stack があるので構造体のメモリ削減の影響は小さい?</li>
<li><p>Guild に繋げるための整理になった</p></li>
<li><p>Auto Fiber proposal</p></li>
<li>Automatic schedule on I/O blocking</li>
<li>次のターゲットを指定する必要がなくなる</li>
<li>同期が必要になる</li>
<li>利点: 既存のプログラムを変更する必要がない、Fiber 同様に軽い、Thread より安全</li>
<li><p>欠点: Thread と同様にバグりやすい</p></li>
<li><p>質疑応答</p></li>
<li>想定より多かった使い方は? → IO のスケジュールに使ってくれるのが想定より多かった。Enumerator が隠蔽するので直接使う人は少ないと思っていた。</li>
<li>アーキテクチャ依存やパフォーマンスで苦労したと思ったが、一番苦労した点は? → アーキテクチャ依存部分の最初は 1.8 を参考にしたので、ほとんど苦労しなかった。NetBSD の setcontext が動かなかったとかの話。</li>
</ul>


<h2>Handling mails on a text editor</h2>

<ul>
<li>通訳の方が Emacs を知らなかったので直前まで打ち合わせをしていた</li>
<li>自己紹介</li>
<li>Ruby で書いたテキストエディタ</li>
<li><a href="https://github.com/shugo/textbringer">Textbringer</a></li>
<li>Emacs 風</li>
<li>ターミナル上のみ</li>
<li>Pure Ruby</li>
<li>かっこいい名前</li>
<li>Law, Chaos, and Cosmic Balance</li>
<li>エディターだと <a href="https://twitter.com/ujm/status/909642340863688704">https://twitter.com/ujm/status/909642340863688704</a></li>
<li>コードの修正もたとえば rubocop を盲信するのではなくバランスが大事</li>
<li>キーバインディングは Emacs 風で help は少ないのでリンクからソースをみる</li>
<li>実装詳細</li>
<li>Linked Line ではなく Buffer Gap を採用</li>
<li>Internal encoding: UTF-8</li>
<li>indexing が問題になったので、基本的に ASCII-8BIT で持っておいて必要に応じて <code>force_encoding('UTF-8')</code></li>
<li>配列を使うのは文字列に変換するのが <code>force_encoding</code> だけより重そうだったので採用せず</li>
<li>部分再描画は curses 任せ</li>
<li>curses を使っているなら pure Ruby じゃないというツッコミがあった</li>
<li>動的な部分で ruby の特徴を活かせる</li>
<li><code>eval_expression</code></li>
<li><code>eval_buffer</code></li>
<li><code>eval_region</code></li>
<li>Suppress warnings : <code>$VERBOSE = nil</code></li>
<li><code>def</code> を使っていない理由</li>
<li>Plugin</li>
<li>Mournmail</li>
<li>MUAs for Emacs の話</li>
<li>Demo</li>
<li>メールの同期にバックグラウンド処理が必要になる</li>
<li>UI スレッドを用意した</li>
<li>UI スレッド以外では Textbringer のメソッドをよんではいけない</li>
<li>必要に応じて <code>next_tick</code> を使う</li>
<li>メールを扱うライブラリ: mail.gem, Net::IAMP</li>
<li>refine でローカルなモンキーパッチ</li>
<li>質疑応答</li>
<li>Auto Fiber? → 通訳さんとの打ち合わせで聞けていなかった。切り替わりのタイミングが想定できなくなるのは向いていないかも。</li>
<li>Emacs なのにS式がない? → Ruby で実装していて Emacs ではない</li>
<li>Emacs だと M-x だと <code>-</code> つながり? → Textbringer はタブを押すと <code>-</code> を <code>_</code> に変換する</li>
<li>名前空間の衝突は大丈夫? → 適切に prefix をつければいい</li>
</ul>


<h2>Gemification for Ruby 2.5/3.0</h2>

<ul>
<li>self.introduce</li>
<li>歴史: RAA, RubyForge, gems.github.com, gemcutter.org, rubygems.org, bundler</li>
<li>組み込みライブラリ: require しなくても使えるもの</li>
<li>標準添付ライブラリ: 別途インストールしなくても require できるもの</li>
<li>Standard Libraries, Default Gems, Bundled Gems</li>
<li>Pure Ruby, C extensions</li>
<li>Standard Libraries: upstream が svn.ruby-lang.org</li>
<li>Default Gems: Upstream が GitHub の Ruby team</li>
<li>Bundled Gems: メンテナが別</li>
<li>Default gem</li>
<li><code>*.gemspec</code> があると特別扱いされる</li>
<li>具体例: ruby/openssl</li>
<li>メインの upstream は <a href="https://github.com/ruby/openssl">https://github.com/ruby/openssl</a></li>
<li>利点: gem update openssl で新しい openssl gem を使える</li>
<li>セキュリティアップデートも、例えば最近の例なら json gem だけあげて ruby 本体をあげなくてもできる</li>
<li>psych : libyaml に依存、upstream に JRuby integration がある</li>
<li>rdoc: rdoc/rdoc から ruby/rdoc に移動</li>
<li>ripper 対応してくれた人が現れた</li>
<li>Bundled gems</li>
<li><code>gems/bundled_gems</code> にある gem を普通にインストールする</li>
<li>アンインストールも普通にできる</li>
<li>test framework の問題</li>
<li>test-unit, minitest が upstream と非互換になった</li>
<li>標準添付から外して本体のテスト専用に</li>
<li>test library がなくなるのは問題ということで bundled gem という方法が生み出された</li>
<li>rake は標準添付ライブラリでなくて良いのでは、ということで bundled gem になった例</li>
<li>bundled gem の問題</li>
<li>コンパイルがちゃんとできるかサポートできないので、拡張ライブラリを含むものはサポートしていない</li>
<li>bundled gem のテストが必要</li>
<li><a href="https://bugs.ruby-lang.org/issues/5481">Gemifying Ruby standard library</a></li>
<li>bundled gem や default gem の仕組みができたことで段階的に外していくことができるようになった</li>
<li>Gemification は利用者に利点は多いがメンテナは大変</li>
<li>たとえば rubygems はまだ Ruby 1.8 対応しているので大変</li>
<li>rubygems</li>
<li>rubygems/rubygems.org は rails で書かれているサイトそのもの</li>
<li>rubygems/rubygems はコマンドラインツール</li>
<li>メンテナなどは完全に別</li>
<li>Reserved words on rubygems.org</li>
<li>fileutils, fiddle, gdbm</li>
<li>Future</li>
<li>Ruby 2.5 では bundler が default gem に</li>
<li>RubyGems に Bundler 統合予定</li>
<li>全部 default gem, bundled gem にしたい</li>
<li>rubygems-2.7.0 がテストで bundler を使うようになる</li>
<li>bundler-2.0 のリリース後に rubygems-3.0 は本体でも bundler を使うように開発していく予定</li>
<li><a href="https://bugs.ruby-lang.org/issues/13847">Gem activated problem for default gems</a></li>
<li><a href="https://bugs.ruby-lang.org/issues/10320">require into module</a></li>
<li>shared library 問題, LOADED_FEATURES 問題</li>
</ul>


<h2>How to optimize Ruby internal</h2>

<ul>
<li>私用により途中から聞いていました。</li>
<li>細かい改善の話でした。</li>
<li>質疑応答</li>
<li>Hash の最適化で st_table を再利用するという案はなかったのか? → とりあえず想定していなかった? よく聞き取れず</li>
<li>聞き取れず → Ruby のメソッド一つ一つを計測してどうなったのかだけ</li>
<li>ベンチマークツール? → Apple 提供の可視化ツール</li>
<li>CI に回すのがどれくらいできそうか? → 1時間半ぐらいかかるが大丈夫か? グラフ表示したい。→ RubyBench が何か持っているかも。</li>
<li>どのくらい網羅しているかとか、みんなで追加すればいいのではないかとか → 発表が終わったのでオープンにしていきたい</li>
<li>ユーザーがカスタマイズする余地が消えたもの、壊す可能性が消えたものの見極めは? → 基本はテストが通るもの</li>
</ul>


<h2>Development of Data Science Ecosystem for Ruby</h2>

<ul>
<li>BigData is important in your business</li>
<li>RubyKaigi 2016 in Kyoto で Ruby が Data Science に使えない話とどうすれば良いかという話をした</li>
<li>今は使えるようになっている</li>
<li>将来も使える状態を維持していきたい</li>
<li>self.introduce</li>
<li>私はカエルです</li>
<li>現状</li>
<li>Ruby で書かれているものに追加したい場合</li>
<li>Ruby だけでやるか Python や R を JSON 経由で併用する方法があった</li>
<li>第3の選択肢として PyCall を作った</li>
<li>PyCall の話</li>
<li>使用例</li>
<li>数列の合計</li>
<li>bugs.ruby-lang.org の7月ごろのスナップショットをもらってデモ: ソースは <a href="https://github.com/mrkn/bugs-viewer-rk2017">https://github.com/mrkn/bugs-viewer-rk2017</a></li>
<li><code>Pandas.read_from_sql</code> は第二引数に ActiveRecord の connection を渡せるように拡張してある</li>
<li>Object recognition (物体検出) by Keras</li>
<li><a href="https://github.com/mrkn/ssd_keras">https://github.com/mrkn/ssd_keras</a></li>
<li>Python is a best friend of Ruby from now on</li>
<li><a href="https://github.com/mrkn/pycall.rb">https://github.com/mrkn/pycall.rb</a></li>
<li>Python での選択肢は Python のみか Rpy2 で R と連携の2個</li>
<li>今は PyCall を使えば良いが将来的には Ruby で</li>
<li><a href="https://red-data-tools.github.io/">https://red-data-tools.github.io/</a></li>
<li>Apache Arrow <a href="https://arrow.apache.org/">https://arrow.apache.org/</a></li>
<li>一つの言語で完結することは少ないので、データ交換が必要</li>
<li>シリアライズで結構 CPU 時間を使っている</li>
<li>シリアライズも組み合わせそれぞれから、共通化しようとしている</li>
<li><a href="https://github.com/red-data-tools/red-arrow">https://github.com/red-data-tools/red-arrow</a></li>
<li>Apache Arrow のコアメンバーにすとうさんが昨日入った</li>
<li><a href="https://gitter.im/red-data-tools/ja">https://gitter.im/red-data-tools/ja</a> <a href="https://gitter.im/red-data-tools/en">https://gitter.im/red-data-tools/en</a></li>
<li>明日の 13:50-15:50 in Room Ran で RubyData Workshop in RubyKaigi 2017</li>
<li>jupyter との連携は? → いい感じに使えている</li>
<li>Python のオブジェクトのメモリ管理と PyCall のオーバーヘッド → Ruby のオブジェクトが死んだ段階でデクリメントしている、オーバーヘッドは呼び出す処理による、 sin 関数などだとオーバーヘッドが大きいが numpy の行列計算などの重たい処理の場合はオーバーヘッドはあまり考えなくて良い</li>
<li>オブジェクトを変換しているか? → numpy のオブジェクトなどは変換していない、プリミティブは変換している</li>
</ul>


<h2>cookpad のスポンサーセッション</h2>

<ul>
<li>microservice 化でモデル数は減っている</li>
<li>なぜ Ruby <em>Committer</em> Sponsor ?</li>
<li>もっと良い言語が出てきたらどうするの? → Ruby を強くすれば良い</li>
<li>Ruby 3 に本気で向き合っている</li>
<li>cookpad &lt;&lt; mame</li>
</ul>


<h2>Ruby Committers vs the World</h2>

<p>コミッターなので壇上にいました。</p>

<ul>
<li>新コミッター紹介</li>
<li>rhe さん : openssl</li>
<li>k0kubun さん : ERB</li>
<li>watson さん : ちまちま速くするパッチを投げていたらコミッターになれた</li>
<li>質問のサンプルとして、型注釈の話</li>
<li>絶対書きたくない : 6人ぐらい</li>
<li>書かなくても良いが書くと良くなる : 多め</li>
<li>コメントぐらいなら良い (いざとなれば無視できる) : 多め</li>
<li>OpenMP みたいな感じ?</li>
<li>rdoc みたいなのがうれしい</li>
<li>古い処理系で無視されるといえば、すでにマジックコメントがある</li>
<li>現状だと動くものが型で制限されると嫌</li>
<li>matz: nominal type は絶対採用しない、String と書いても structal にしたい、できれば未来のためにプログラムの中に書くのは採用したくない、最低でもコメントに留めていたい</li>
<li>型を書かせたくないと思っているコミッター? → 4人ぐらい</li>
<li>Q(ujm): 右代入の本気度? →</li>
<li>akr: yield_self は右代入の代用の部分があるのではないか、左から右に流れるように書きたいことがあるのではないか</li>
<li>matz: 完全にフリーハンドであれば入れたい、長い歴史の中で記号を使い尽くしているので良い候補がない、既存のプログラムを壊れるような変更をしてまで入れるようなものではない</li>
<li>shyouhei: 他の言語では?</li>
<li>メモ取れず</li>
<li>durest: メソッドチェーンの話があったので、記号がなければメソッドでやってみるのはありではないか</li>
<li>会場を含めたアンケート</li>
<li>概念としてありは割といる</li>
<li>ないだろうはほとんどいない</li>
<li>Q(ujm): 変数とか定数とかどのあたりまでサポートするかという質問だった →</li>
<li>matz: 今代入の左辺になれるものは右代入でもサポートしたい</li>
<li>多重代入は難しい?</li>
<li>Q: YARV の命令仕様を確定して公開すると他の言語処理系が作れる? → 変化していくために固定する予定はないという感じ</li>
<li>他の案としては LLVM とか</li>
<li>Q: 右代入は <code>setter=</code> も対象? → matz: 当然</li>
<li>一番大変なのは parser</li>
<li>右代入で多重代入</li>
<li>後置 if との組み合わせ? → akr: 今の代入は式なのでできる、右代入は文にするというのはありかもしれない</li>
<li>機能制限するバージョンがあるか? → matz: ない、補助輪みたいなものは別のツールでサポートすれば良いのではないか</li>
<li>takao: 実際に使わせている子供達は補助輪を外したがっていたり、Ruby 認定資格を取りたがっていたりする場合もある</li>
<li>CI の実機が足りない問題は解決した? 今日の別の発表で Rails アプリケーションのベンチマークが取れるものが出てきている。Ruby 3x3 のユーザーからのフィードバックは何が必要? →</li>
<li>mame: 速くするパッチが必要 (watoson さんがやっているような)</li>
<li>以前 Mac の CI が足りないとか、ベンチマークが足りないとかいっていたが解決した? → matz: その件についてはだいぶ解決した</li>
<li>hsbt: CI 用のマシンは Ruby Association (RA) 経由である程度手配できるようになったが、 Windows の環境が足りない</li>
<li>Windows Server とか Visual Studio のライセンスを良い感じにする必要がある</li>
<li>matz: benchmark CI?</li>
<li>naruse: watson さんのが欲しい</li>
<li>ko1: RA や日本 Ruby の会経由で CI 用のマシンはなんとかなっている</li>
<li>さらにその上でベンチマークをなんとかしたい</li>
<li>RubyBench というのが何かやっている</li>
<li>watson: 今は個人のマシンで動かしている、自宅にはおきたくない、安定した結果が欲しいので実機が望ましい、足りないベンチマークを増やしたい</li>
<li>ko1: rails とか optcarrot とかだけではなく、これを速くして欲しいというのを提案して欲しい</li>
<li>matz: RA か日本 Ruby の会に寄付してくれると嬉しいが控除などはないのが申し訳ない</li>
<li>shyouhei: パッチを投稿していただくのはありがたいが、敷居が高いなら、雇って書かせるという手がある</li>
<li>Ruby 会議の運営を手伝ってもらえると、手が空いて間接的に、というのもある</li>
<li>hsbt: RubyKaigi 後に回復したら、パフォーマンスベンチを進めたい</li>
<li>matz: 転職活動している人?</li>
<li>ko1: 手があげられないのでは。</li>
<li>ko1: optcarrot と Rails 以外に使っている人?</li>
<li>shugo: テキストエディタが速くなると嬉しい、String が速くなるとうれしい</li>
<li>会場: fluentd</li>
<li>会場: puppet</li>
<li>amatsuda: ハッシュが速くなったので、fluentd が速くなったという話を聞いた</li>
<li>Q(ujm): Ruby, C, Streem, Emacs Lisp 以外に好きな言語?</li>
<li>matz: Swift, Clojure</li>
<li>mame: OCaml, Haskell?</li>
<li>takano: Smalltalk</li>
<li>akr: coq</li>
<li>nobu: FORTH</li>
<li>mrkn: julia</li>
<li>ko1: Ruby は好きだけど不満があるから直したい人が壇上には多いのでは</li>
<li>Q: インスピレーションの源になっているのは何?</li>
<li>matz: Lisp からたくさん、今後もたぶん、最近 2.0 の method prepend は CLOS のメソッドコンビネーション</li>
<li>takano: Lisp のマクロが羨ましい</li>
<li>mrkn: julia 推し</li>
<li><code>transform_keys</code> は Active Support (AS) と挙動は同じ? → nobu: 同じはず、<code>Hash#slice</code> も同様</li>
<li>amatsuda: 使い勝手は変わらないが、C実装になるのでちょっと速くなる</li>
<li>AS のようなものをどんどん入れる?</li>
<li>matz: 全部入れる気はないが、use case などでちゃんと説得してもらえば入る可能性はある、AS に入っているからという理由で入ることはない</li>
<li>amatsuda: AS は Web では便利だが、汎用的に入れるものかどうかは疑問</li>
<li>ko1: 年単位で議論して入ったものもある (入らなかったものもある)</li>
<li>amatsuda: 違う仕様で入ったものもある、 <code>Array#sum</code> とか</li>
<li>mrkn: Cで書くと float の誤差が改善されるということで、そういう実装が入った</li>
</ul>


<h2>懇親会</h2>

<p>食べ物の列は待っていれば短くなるかなと思って、話をしながら待っていたらそんなことはなかったので、並んでみたらギリギリ少し残っていたのが食べられて、その後で野菜が残っているのをみつけたのでそれを食べたりしていたので、全然食べられないということはなかったので、二次会には行きませんでした。</p>

<p>明日の懇親会と違って、オフィシャルパーティーはみんな集まっているので、複数人で話したいこと(<a href="https://bugs.ruby-lang.org/issues/13904">getter for original information of Enumerator</a>の件)は、この日のうちに話しておくべきだと思ったのですが、集められなかったので無理でした。後から確認したら、頑張って英語で書いたおかげで代わりにメンテナーを説得しようとしてくれる人がいて、結果的には大丈夫そうです。いいたかったのも、直接は関係がないので mrkn さんとかに説得を頑張って欲しいと言いたかっただけぐらいなので、明日以降に個別に言っておいても良いかもしれないと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[姫路IT系勉強会 2017.09 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-16-histudy.html"/>
    <updated>2017-09-16T13:40:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/histudy</id>
    <content type="html"><![CDATA[<p>RubyKaigi 2017 への移動途中に参加可能だったので、<a href="https://histudy.connpass.com/event/66084/">姫路IT系勉強会 2017.09</a>に参加しました。
公式の記録は勉強会のページからリンクされている HackMD のページ<!-- https://hackmd.io/s/r1rUBZF9Z -->に残っています。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場</h2>

<p>iPod touch の connpass アプリの「マップで見る」でピンが表示されている場所に向かっている途中でさとうさんをみつけたので、一緒に行こうとしたら会場の建物の前だったようで、ピンが表示されていた場所はずれていたように思いました。</p>

<h2>自己紹介</h2>

<p>まずは connpass の参加者一覧を元に自己紹介でした。</p>

<h2>休憩</h2>

<h2>HTML の勉強方法</h2>

<ul>
<li>Hexo のテーマを作り始めたが HTML4 の頃の知識で止まっているので、モダンな HTML, CSS の勉強方法は?</li>
<li>初心者向けとかのサイトではなく、差分だけ知りたい</li>
<li><a href="https://caniuse.com/#search=flexbox">https://caniuse.com/#search=flexbox</a> とか</li>
<li>Hexo 界隈では sass ではなく Stylus がよく使われているらしい</li>
<li><a href="https://www.w3schools.com/cssref/css3_browsersupport.asp">https://www.w3schools.com/cssref/css3_browsersupport.asp</a></li>
<li>Bootstrap とかフレームワークはどうかという話</li>
<li>フルスタックなものと軽量なものを知っておくと良い?</li>
<li><a href="http://bourbon.io/">http://bourbon.io/</a> : 軽量な sass の mixin 集</li>
<li><a href="http://neat.bourbon.io/">http://neat.bourbon.io/</a> を組み合わせると grid system も使える</li>
<li><a href="http://bitters.bourbon.io/">http://bitters.bourbon.io/</a> だと基本的なスタイルまで付いている</li>
<li><a href="http://bourbon.io/docs/">http://bourbon.io/docs/</a> deprecated になっているものが多い</li>
<li>フルスタックが鬱陶しい人にはおすすめ</li>
<li>軽量なフレームワークで流行っているものはあまりない?</li>
<li>node の sass は ruby の sass とほぼ互換性があるらしい</li>
<li>node に限らないが独自作法が大変な話</li>
<li>プラグインアーキテクチャが流行っているらしい</li>
<li>ruby は PHP などに比べて非互換がきついことがある</li>
<li>node はタスクランナー周りのものがたくさんあってメンテナンスされなくなってきて、npm 直接使うことが多くなっている</li>
<li>Web 界隈は色々とカオス</li>
<li>作った後、ちゃんと更新されていないものがきつい</li>
<li>awesome から github を辿っていって使うと少しまし <a href="https://github.com/sindresorhus/awesome">https://github.com/sindresorhus/awesome</a></li>
<li>CentOS とか古いので wpscan でチェックすると色々言われる?</li>
</ul>


<h2>WordPress の話</h2>

<ul>
<li>なぜか話が来たが、情報が少なくてよくわからず</li>
<li>とりあえず WordPress の情報が集まっている場所は?</li>
<li>まず WordBench がおすすめ</li>
<li>おすすめプラグイン</li>
<li>WordPressプラグイン100選 の目次から良さそうなプラグインを探す</li>
<li>パーミッションをちゃんとしよう</li>
<li>関連する話が先週の<a href="https://histudy.connpass.com/event/66082/">加古川IT系インフラ勉強会 2017.09</a>であったらしい</li>
<li>困ったら金で解決という手段もある</li>
</ul>


<h2>Markdown の話</h2>

<ul>
<li>途中抜けているところがあっても手順書があるだけまし</li>
</ul>


<h2>女子中学生チケット詐欺事件</h2>

<ul>
<li><a href="https://gist.github.com/shunirr/2bd6a5a00b966e1e534b443790c68eda">女子中学生チケット詐欺事件</a> (オリジナル)</li>
<li><a href="https://gist.github.com/kawabata/fefd78b84856ed7900c69eb9aba3af19">女子中学生チケット詐欺事件</a> (詳しい fork 版)</li>
</ul>


<h2>Markdown の話</h2>

<ul>
<li>話が戻って発表</li>
<li><a href="https://gitpitch.com/sky-y/himeji-it-2017-09">Markdownのカオスと付き合う</a> (発表資料)</li>
<li><a href="https://bitjourney.kibe.la/shared/entries/f740d533-0d57-44fe-a891-dfe669d16121">Markdownはなぜ拡張され続けるのか</a> は一読をおすすめ</li>
<li><a href="https://babelmark.github.io/?text=%40__gfx__">https://babelmark.github.io/?text=%40__gfx__</a> が strong になることがある問題</li>
<li>Markdown きつい問題 → 根本的な解決策はない</li>
<li>他の軽量マークアップ言語: reST など以外にも Ruby の RD や Perl の POD なども昔からある</li>
<li>表現力が高いマークアップ言語はなかなか流行らない: SGML vs HTML など (XHTML → HTML5 とか)</li>
<li>無難な記法: CommonMark か GFM (GitHub Flavored Markdown) がおすすめ</li>
<li><code>#</code> の後ろにスペースを入れた方が良いなど、標準的な書き方を覚えておけば方言に対応しやすい</li>
<li><a href="http://commonmark.org/help/">http://commonmark.org/help/</a> が基本</li>
<li>改行の扱い <a href="https://babelmark.github.io/?text=abc%0Adef%0A%0Aghi%0Ajkl">https://babelmark.github.io/?text=abc%0Adef%0A%0Aghi%0Ajkl</a> 連続の改行で p が分割されて単独の改行は br になったりならなかったり</li>
<li>改行の扱いは CommonMark と GFM で違う</li>
<li>ASCII Art などなら code block を使えば良い</li>
<li>表現力の高いものから低いものに変換するとゴミ (HTML 断片) が入ったりする</li>
<li><p>CSV から Markdown? : pandoc のフィルターにあるかも</p></li>
<li><p>org-mode から HTML にエクスポートで使っている話</p></li>
<li><p>markdown にエクスポートもできるらしい</p></li>
<li><p>ドキュメントを書くことを普及させたい</p></li>
<li><p>同じ名前なのが混乱の元?</p></li>
<li>継承して拡張とかできるので別の名前をつけるのも難しそう</li>
<li>CommonMark で統一しようとしている</li>
<li><p>GFM も参考になる</p></li>
<li><p>Markdown は英語圏のメールなどの文章を書く時の一般的な作法が元になっているらしい</p></li>
<li><p>最低限のドキュメントは書きましょうという話</p></li>
<li>ansible とか terraform とか</li>
<li>Jupyter</li>
</ul>


<h2>休憩</h2>

<p>15:50 まで</p>

<h2>Perl の Acme::EyeDrops</h2>

<ul>
<li>デモ</li>
<li>プログラム解説</li>
<li>改行と空白削除</li>
<li>文ごとに改行追加</li>
<li>などなど順番に変更していってプログラム解説</li>
<li>ビット演算とか Web 系の人はしらなさそう</li>
<li>カラーコードで16進数は知ってそうだが、ビット演算はしらなさそう</li>
<li>ビット演算を知らないとパーミッションとかもわからなさそう</li>
<li><code>(?{...})</code> は Perl 5.18 から <code>use re "eval"</code> が必要になっている</li>
</ul>


<h2>BlueBorne</h2>

<ul>
<li>Android で Bluetooth テザリングを便利に使っていたのに使えなくなった</li>
<li>カーナビはアップデートとかできなさそうなので厳しい</li>
<li>車はエンジン系とエンタメ系のエンタメ系しか Bluetooth で繋がらないので問題があったとしても大丈夫?</li>
<li>CAN という規格 (認証とかがない) でエンジン系と通信ができるので可能性はある?</li>
<li>iOS は大丈夫だったので iPhone で Bluetooth イヤホンとか使ってる人は大丈夫</li>
<li>サーバーは関係なさそう</li>
</ul>


<h2>これから未来ある開発言語またはシステムは?</h2>

<ul>
<li>言語は教養として全然違うものを勉強するのが良いのではないか。 Prolog とか PostScript とか SQL とか</li>
<li>仕事という面では PHP がとりあえずわかれば Web 担当になれる</li>
<li>WordPress をカスタマイズする時とか PHP が必須になる</li>
<li>機械学習なら Python になりそう</li>
<li>未来はわからないので直近を考える</li>
<li>JavaScript が作れるものの幅が一番広い</li>
<li>大穴狙いなら COBOL?</li>
<li>COBOL のプログラムはまだなくなりそうにない</li>
<li>Ruby のようにコミュニティの雰囲気が良いという観点で選ぶのもあり (元々楽しくプログラミングという基本思想があるので、それが影響しているのかコミュニティの雰囲気が良い)</li>
<li>この勉強会はなんでもありなので、派生したものを作るのは歓迎</li>
</ul>


<h2>HoloLens とかの話</h2>

<ul>
<li>HoloLens は完全に視界をおおう VR ではなく、現実世界にホログラムを載せるようなもの</li>
<li>最近は WinMR というのもあるらしい</li>
<li>HoloLens は Windows 10</li>
<li>Edge も VR に対応しているらしい</li>
<li>開発環境とかは?</li>
<li>Unity</li>
<li>ユニバーサル Windows プラットフォーム (UWP)</li>
<li>Unreal Engine</li>
<li>まずは企業向けで使われるようになる?</li>
<li>研究は長い間されていたが、やっと実用化されるようになってきた</li>
<li>脆弱性対策の話</li>
<li>VR アプリのデバッグ</li>
<li>通常の Windows アプリとしてのデバッグ</li>
<li>体験のデバッグ</li>
<li>酔う対策は、まだ知見が足りない</li>
</ul>


<h2>Lisp 入門?</h2>

<ul>
<li>ふわっとした理由で Lisp を勉強したいということだったので色々紹介的な話</li>
<li>Lisp-1 と Lisp-2</li>
<li>Scheme と Common Lisp</li>
<li>コンパクトなのが Scheme</li>
<li>なんでもありなのが Common Lisp</li>
<li>Common Lisp HyperSpec</li>
<li>一番有名な処理系が sbcl</li>
<li>clisp, Clozure CL</li>
<li>Gauche</li>
</ul>


<h2>退出</h2>

<p>17時を過ぎても続いていて、移動しないと間に合わなくなりそうだったので、Lisp の話の途中で出ました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第11回 HosCon - GMO Hosting Conference - @大阪 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-14-hoscon.html"/>
    <updated>2017-09-14T22:46:24+09:00</updated>
    <id>http://blog.n-z.jp/blog/hoscon</id>
    <content type="html"><![CDATA[<p><a href="https://gmohoscon.connpass.com/event/63440/">第11回 HosCon - GMO Hosting Conference - @大阪</a> に参加したので、そのメモです。</p>

<!--more-->


<h2>会場</h2>

<p>グランフロントタワー B の 梅田・GMO Yours での開催でした。
前に何かの勉強会で一度来たことがあるような気がするのですが、何だったか思い出せませんでした。</p>

<p>タワー B 自体は最近 Rails Developers Meetup #4 大阪会場 で来ていました。</p>

<h2>その他</h2>

<p>ハッシュタグは <code>#hoscon</code> でしたが、ツイートはあまりありませんでした。</p>

<p><a href="https://twitter.com/rzl5/status/908276901914882049">https://twitter.com/rzl5/status/908276901914882049</a> に写真がありますが、 ConoHa カードをもらったので、使ってみたいと思いました。</p>

<h2>コンテナ基盤であるLXC/LXDを本番環境で運用する話</h2>

<ul>
<li>2011年に物理からKVMによる完全仮想化へ</li>
<li>完全仮想化はリソースに無駄があるということで準仮想化、コンテナ化へ</li>
<li>なぜLXDか?</li>
<li>他に検討した選択肢は Docker, KVM, OpenVZ, (VMware は高いので選択肢に入らず)</li>
<li>質問: Linux だけで Windows や BSD はなかった? カーネルモジュールなども問題なかった? → Linux で、カスタマイズはしていたが共通の kernel だったので問題なく集約できた。</li>
<li>質問: OpenVZ が遅かった? → 一般的には遅くないかもしれないが、試した環境ではコンテナより遅かった。</li>
<li>LXDは2017年2月から運用開始</li>
<li>ホストOSは Ubuntu 16.04 LTS</li>
<li>ゲストOSは使い慣れたCentOS</li>
<li>なぜZFSか?　→ 公式がオススメしているのとベンチマークの結果がよかった</li>
<li>今も苦労している部分はある</li>
<li>fio で計測</li>
<li>ZFS を採用した理由: 機能性、柔軟性, 比較対象: lvm, dir</li>
<li>ホストシステム構築時のトラブル</li>
<li>オープンファイル数の上限など色々な上限に引っかかった</li>
<li>ネットワーク編</li>
<li>NIC の MAC アドレスがかぶっていた</li>
<li>LXD 運用編</li>
<li>Apache RLimitNPROC にひっかかった</li>
<li>ホストのロードアベレージが急激に上昇 → ZFS がボトルネックだったのでチューニングを実施 (ZFS ARC?)</li>
<li>2ラック (KVM) → 1ラック (LXD)</li>
<li>質問タイム</li>
<li>LXD で新しくサービスできるようになったことはある? → 新たなサービスはないが、快適なディスクIOを提供できている</li>
<li>まだリリースできていないが、準専有の基盤ができた</li>
<li>ZFS はメモリをたくさん使って残りがユーザーの領域? → ご想像にお任せします</li>
<li>どのようなところで運用負荷の軽減? 運用でカバーしているところ? → 物理が減ったので楽になった。リソースの制限の自動化を目標に手動でやっている。物理より柔軟にできるのが良い。</li>
<li>ライブマイグレーションをしているかどうか? → やっていない。今後対応していく。</li>
<li>内製でコントロールパネルのようなものを作っている? → ない。全部コマンドで。</li>
<li>CentOS? → 既存のノウハウをいかすために選んだ。</li>
<li>OS のアップデートはどうしている? → カーネル以外は通常のアップデート</li>
<li>ホスト側のリソース監視はしていると思うが、コンテナ側はどうしている? → 緩めの limit を設定してる</li>
<li>PHP などのバージョン違い? → 問い合わせで個別に対応することもある</li>
<li>サポートが終了したものはなるべく引き継がない</li>
<li>CentOS 6? 7? → 7</li>
</ul>


<h2>休憩</h2>

<p><!-- 20:12 から? -->20:16 まで</p>

<h2>ロリポップ！マネージドクラウド FastContainerの裏側</h2>

<ul>
<li>ロリポップ！マネージドクラウドは FastContainer アーキテクチャを採用していて、コンテナエンジンに haconiwa</li>
<li>質問: 価格? → 価格についてはまだ未定</li>
<li>オートスケール</li>
<li>質問: 何をもってマネージド? → コンテナの起動の仕方が特殊 (FastContainer) で、完全に root 権限があるわけではないなど</li>
<li>質問: データベース? → データベースはコンテナで動いていないので、オートスケールではない</li>
<li>質問: オートスケールは php だけ? → apache + php</li>
<li>質問: データベースがオートスケールではないのなら、ユーザーごとのリソース制御? → まだ未確定</li>
<li>質問: 具体的にアクセスが増えると、とは? → 実際は CPU のスロットルタイムをみているので、CPU の負荷が高くなれば。</li>
<li>逆に負荷が下がればコンテナを減らす。</li>
<li>質問: ユーザーごとのリソースの分割? 他のユーザーの影響は受けるのか? → 基本的には影響は受けない。リソースは分離している。ホスト自体が重くなっても負荷分散できるアーキテクチャになっている。</li>
<li>FastContainer とは?</li>
<li>FastCGI のコンテナ版といったイメージ</li>
<li>リクエスト契機で Web アプリのコンテナが起動</li>
<li><p>一度起動したコンテナはその後しばらく使い回して、一定時間が経過したら終了</p></li>
<li><p>利点</p></li>
<li>オートスケール</li>
<li>リクエストがないと停止するのでリソースの節約</li>
<li>いろんなコンテナで色々なアプリを提供</li>
<li>常に最新</li>
<li><p>他のマシンへの載せ替えも楽</p></li>
<li><p>マネージドクラウドの構成</p></li>
<li>CMDB というところでコンテナの情報を管理</li>
<li>質問: 構成が速度に影響があるか? → ある。今は動くものを優先。 nfs が重いというのは多方面から突っ込まれている</li>
<li>質問: 起動していない時と起動している時のパフォーマンスの差? → 確かにたちがっていない状態のアクセスは時間がかかる。調整中</li>
<li>質問: どこが大きくなっていく? compute? → 今のところ compute と datapool が増えるのを想定している。</li>
<li>パフォーマンスは調整していく段階なので、今後機会があれば。</li>
<li>ngx_mruby</li>
<li>haconiwa</li>
<li>コンテナ</li>
<li>基本は1コンテナに1プロセス</li>
<li>ssh も sshd コンテナ経由</li>
<li>FastContainer リクエスト制御フロー</li>
<li>質問 → 今はチューニングがすんでいないので初回は 2,3 秒ぐらいかかる</li>
<li>質問 → ユーザーが予約枠を設定していて、そこまでしか上がらないようにしている</li>
<li><p>予約枠は金額で設定できるようにしたい</p></li>
<li><p>コンテナの死</p></li>
<li>コンテナの寿命: lifetime が設定されていて一定時間経過で自動停止</li>
<li>なぜ寿命?</li>
<li>リソースの節約</li>
<li>新しくなるタイミングでライブラリなども更新されてセキュア</li>
<li>別ホストに移行したい時も CMDB をいじるだけ</li>
<li>compute のメンテも簡単</li>
<li><p>質問: リクエストが有る限り死なない? → lifetime で死ぬ</p></li>
<li><p>オートスケール</p></li>
<li>haconiwa が cgroup から各コンテナの CPU, I/O 負荷を計測・監視</li>
<li>ユーザーはコンテナの予約枠を設定可能</li>
<li>スケールインは CMDB の変更だけで停止は自動停止任せ</li>
<li><p>予約枠を取るだけでオートスケール</p></li>
<li><p>コンテナの種類も増やしていきたい</p></li>
<li><p>質問タイム</p></li>
<li>予約枠? パケット量をみる? → 設計中。基本的には使ったぶんだけ課金する予定?</li>
<li>コンテナのサーバー自体が高負荷になったり物理的な障害が起きても自動でフェイルオーバー? → 自動ではできていない。手動でのせかえることはできる。自動化は可能ではある。</li>
<li>SSL 証明書? Symantec のような台数分の場合とか → あとで</li>
<li>オートスケールをする監視をしている間隔? → 暫定で1秒</li>
<li>オートスケールの課金の指標は? ニュースで取り上げられる予定だから、とか。 → 設計中</li>
<li>聞き逃し</li>
<li>WAN の IP は共有? → 共有</li>
<li>コンテナはドメインでみている</li>
<li>IP アドレス単位で他のユーザーの影響は受ける可能性がある</li>
<li>現状 CMDB はデータベースのフェイルオーバー任せなので、そこが止まると止まる可能性はある</li>
<li>のせるアプリの開発環境? → 将来的には用意したい</li>
<li>聞き逃し → コンテナ単位でどのくらいパフォーマンスが出ているかだそうとか色々話はある</li>
</ul>


<h2>懇親会</h2>

<p>5分休憩の後で懇親会でした。</p>

<h2>感想</h2>

<p>LXD を採用したという話自体は以前に別の勉強会で聞いたことがあったので、それと重複した話もありましたが、もっと技術的につっこんだ話も聞けておもしろかったです。</p>

<p>LXD は他では使っているという話を聞いたことがないので、使っている人はもっと情報を出してくれればいいのに、という気がしています。
個人的には、情報がなくて探しても何もわからないよりは、Docker のように情報がたくさんあって玉石混交で、自分で見極めないといけない、という状態の方が望ましいです。</p>

<p>マネージドクラウドの話は haconiwa って作ってみたというようなものじゃなくて、ちゃんと実用的に使うためのものだったのかというのが驚きました。
FastContainer は用途があえば良さそうな感じなので、機会があれば使ってみたいと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby の文字リテラルについて]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-10-ruby-char-literal.html"/>
    <updated>2017-09-10T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ruby-char-literal</id>
    <content type="html"><![CDATA[<p>Ruby には <code>?a</code> で 1 文字のみの文字列を返す文字リテラルというものがあります。</p>

<p>Ruby を 1.9 以降から使い始めた人には <code>'a'</code> などの文字列リテラルとの使い分けや <code>String#chr</code> の存在意義などがわからないと思ったので、知っている範囲で歴史的経緯を説明してみたいと思います。</p>

<!--more-->


<h2>Ruby 1.8 以前と Ruby 1.9 以降の違い</h2>

<p>マルチエンコーディング対応が入る前の文字リテラルは1バイト文字用のリテラルで、多バイト文字は使えませんでした。
コントロールやメタは昔から使えました。</p>

<p>以降の実行例も含めて、実行例は 2.0 以降も同じなので、省略しています。
1.8.6 以前は未確認ですが、1.8.7 とほぼ同じはずです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rbenv each ruby -ve 'p ?a'
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>97
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>"a"
</span><span class='line'>% rbenv each ruby -ve 'p ?あ'
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>-e:1: Invalid char `\201' in expression
</span><span class='line'>-e:1: Invalid char `\202' in expression
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>"あ"
</span><span class='line'>% rbenv each ruby -ve 'p ?\C-a'
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>1
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>"\u0001"
</span><span class='line'>% rbenv each ruby -ve 'p ?\M-a'
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>225
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>"\xE1"</span></code></pre></td></tr></table></div></figure>


<h2>文字とは?</h2>

<p>文字を表すのに専用のクラスを導入するという案もあったようですが、Ruby は大クラス主義だという点や、必要とされる機能が文字列とほとんど変わらない、文字というのを文字列とは別に定義するのは難しいなどの理由から、最終的には1文字だけの String で文字を表すことになったと記憶しています。
詳細はメーリングリストや redmine の issue の議論などを探してみてください。</p>

<h2>getc と文字リテラル</h2>

<p>文字リテラルの用途として CUI アプリなどで <code>getc</code> で入力した文字との比較という使われ方があったようで、 <code>getc</code> などを使っているプログラムが、文字リテラルと比較する書き方をしていれば壊れないようになっています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rbenv each ruby -ve 'p ARGF.getc' /dev/zero
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>0
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>"\u0000"
</span><span class='line'>% rbenv each ruby -ve 'p ARGF.getc == ?\C-@' /dev/zero
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>true
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>true</span></code></pre></td></tr></table></div></figure>


<h2><code>String#chr</code></h2>

<p><a href="https://docs.ruby-lang.org/ja/latest/method/String/i/chr.html">String#chr</a> は単独で見ると <code>str[0]</code> などで代用できるので不要そうなメソッドですが、
文字リテラルや <code>getc</code> の返り値を文字列にするのに <code>chr</code> が使われていたので、
<code>String#chr</code> も互換性のために存在します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rbenv each ruby -ve 'p ?a.chr'
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>"a"
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>"a"
</span><span class='line'>% rbenv each ruby -ve 'p ARGF.read(1) == ?\C-@.chr' /dev/zero
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>true
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>true</span></code></pre></td></tr></table></div></figure>


<h2>ord</h2>

<p>逆に <code>ord</code> は <code>str[0]</code> の返り値が文字列に変わってしまったので、常に数値が欲しい時にも使っていました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rbenv each ruby -ve 'p ?\C-@.ord'
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>0
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>0
</span><span class='line'>% rbenv each ruby -ve 'p "a"[0]'
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>97
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>"a"
</span><span class='line'>% rbenv each ruby -ve 'p "a"[0].ord'
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>97
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>97</span></code></pre></td></tr></table></div></figure>


<h2>結論</h2>

<p>新規に書くプログラムで積極的に文字リテラル ( <code>?a</code> ) を使う必要性はほとんどないので、普通は文字列リテラルだけ使っておけば良いと思います。</p>

<p><code>getc</code> などとの組み合わせのときに文字リテラルを使えば意味を明確にできますが、今更 1.8 以前との互換性を気にすることもないと思うので、古いプログラムで使われていたときに読めればいいだけで、書くときに使う必要はないと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO&東海道らぐオフラインミーティング 2017/08/27 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-27-lilo-tokaidolug.html"/>
    <updated>2017-08-27T13:33:33+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-tokaidolug</id>
    <content type="html"><![CDATA[<p><a href="https://lilo.connpass.com/event/64381/">LILO&amp;東海道らぐオフラインミーティング 2017/08/27</a> に参加しました。</p>

<p>今回もアンカンファレンス形式でした。</p>

<!--more-->


<h2>メモ</h2>

<ul>
<li>会場はいつもの 4 階でした。</li>
<li>ハッシュタグ: <code>#lilo_jp</code> <code>#東海道らぐ</code></li>
<li>登録参加者数 12名</li>
<li>自己紹介から</li>
<li>最初の発表は発表者の希望により非公開</li>
<li>途中からきた人は発表の合間に随時自己紹介</li>
</ul>


<h2>自分の発表</h2>

<ul>
<li>自分の lilo.linux.or.jp の話</li>
<li>発表資料に入れていなかった部分については以下の通り</li>
<li>OGP を入れたきっかけは <a href="https://togetter.com/li/1107707">LILO&amp;東海道らぐオフラインミーティング 2017/05/06の記録 - Togetterまとめ</a> で connpass だけ概要と画像が出ていたため</li>
<li><a href="https://developers.facebook.com/tools/debug/">Open Graph Debugger - Developers Facebook</a> (Facebook アカウントがないと使えない?) は OGP がなくても自動検出した内容で埋められるため、本当に反映されるかどうかの確認には使えなかった覚えがあります</li>
<li><a href="https://ja.osdn.net/projects/clamav-jp/lists/archive/users/2017-August/000280.html">[clamav-jp 281] ウィルスDB更新の異常について（解決済）</a></li>
<li><a href="http://qiita.com/ttdoda/items/f16422d709e264cbb8a1">Postfix 2.12 の compatibility_level</a></li>
<li>dokuwiki は <a href="https://bugs.debian.org/854592">#854592 dokuwiki: Unable to login, missing usr/share/php/Crypt/AES.php</a> で消えていた</li>
</ul>


<h2>休憩</h2>

<h2>GPD-Pocket に Ubuntu 17.04 をインストールした話</h2>

<ul>
<li>東海道らぐ四日市 11/25</li>
<li>GPD-Pocket でも Ubuntu 17.04 が動いた</li>
<li>Kernel 4.13RC + Intel Graphics Driver OSS + 蓋開閉</li>
<li>色々な条件で試してNGだったが、偶然蓋を開けたら画面がうつった</li>
<li>ATOM はバニラカーネルの時点でバグがあるらしい</li>
</ul>


<h2>Fireduck OS</h2>

<ul>
<li>東海道LUG有志によるLinuxディストリビューションプロジェクト</li>
<li>○○焼き → Fire duck (あひる焼き)</li>
<li>タブレット向け</li>
<li><a href="https://github.com/TokaidoLUG/fireduckos">https://github.com/TokaidoLUG/fireduckos</a></li>
<li>アーキテクチャ説明</li>
<li>悩み事</li>
<li>journald が起動したプロセスの出力をファイルに書き込むので重い</li>
<li>OSM のアプリ?</li>
<li>UEFI32 向けに 64 bit 環境で 32 bit 向けのビルドが必要なので multilib を使った</li>
<li><a href="https://github.com/TokaidoLUG/meta-intel-mobile">https://github.com/TokaidoLUG/meta-intel-mobile</a></li>
<li><a href="https://github.com/TokaidoLUG">Tokaido Linux User Group</a></li>
<li>欲しいアプリの話</li>
<li>資料は <a href="https://www.slideshare.net/wata2ki">https://www.slideshare.net/wata2ki</a> に公開予定</li>
</ul>


<h2>休憩</h2>

<ul>
<li>懇親会参加者の確認</li>
</ul>


<h2>つなぎの発表</h2>

<ul>
<li>オープンソースカンファレンス広島の紹介</li>
<li>Allwinner タブレットの実演</li>
<li>firefox を動かして、ネットワークが繋がっていないので about:mozilla とか about:robots とか</li>
</ul>


<h2>State of the Map 2017 に行ってきたよ</h2>

<ul>
<li>Open Street Map の国際会議</li>
<li>日本で国際会議をやるのは珍しい</li>
<li>会津若松市は LibreOffice を使っているので、ついでに話を聞きに行った</li>
<li>写真を見ながら色々な話</li>
<li>Maps With Me というアプリが便利らしい</li>
</ul>


<h2>最後の話</h2>

<p>プロジェクターに映らなかったので、集まって話をきいていました。</p>

<h2>クロージング</h2>

<ul>
<li>今後の予定など</li>
<li>会場費は学生以外が 100 円でした。</li>
</ul>


<h2>発表した内容</h2>

<p>スライドはいつも通り <a href="http://slide.rabbit-shocker.org/authors/znz/lilo-20170827/">Rabbit Slide Show</a> (<a href="https://rubygems.org/gems/rabbit-slide-znz-lilo-20170827">RubyGems</a>), <a href="https://slideshare.net/znzjp/lilolinuxorjp-20178">SlideShare</a>, <a href="https://speakerdeck.com/u/znz/p/lilo-dot-linux-dot-or-dot-jp-falsehua-2017nian-8yue">Speaker Deck</a> にあげています。(ソースは <a href="https://github.com/znz/lilo-20170827">github</a> にあげています。)</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/lilo-20170827/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/lilo-20170827/" title="lilo.linux.or.jp の話 (2017年8月)">lilo.linux.or.jp の話 (2017年8月)</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第30回シェル芸勉強会　大阪サテライト＠さくらインターネット大阪本社に午後から参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-26-usptomo-osaka.html"/>
    <updated>2017-08-26T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/usptomo-osaka</id>
    <content type="html"><![CDATA[<p><a href="https://atnd.org/events/90102">第30回シェル芸勉強会　大阪サテライト＠さくらインターネット大阪本社</a>に午後から参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>最近よくいっているグランフロントタワーAのさくらインターネットさんでしたが、今回は初めて部屋の中の方に参加しました。</p>

<h2>第30回シェル芸勉強会</h2>

<p>問題は <a href="https://blog.ueda.tech/?p=10188">【問題のみ】jus共催 第30回危念シェル芸勉強会</a> にあります。</p>

<p>主に macOS の環境で確認しました。</p>

<h3>Q1</h3>

<ul>
<li><code>awk '/^Keywords:/{print FILENAME ":" $0;nextfile}' posts/*/*.md</code> としてみた。</li>
<li>nextfile などを調べていたら時間がかかってしまってあまりちゃんとできず。</li>
<li>ファイル名部分のパスなどの掃除が必要と気づいてなかったのでできていなかった。</li>
<li>解答例では <code>grep -m 1</code> を使っていたけど、 macOS の grep (BSD grep) 2.5.1-FreeBSD だと動作が違うようで、最初のファイルで止まってしまって、うまく動かなかった。</li>
</ul>


<p>macOS Sierra 10.12.6 の例:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% grep --version
</span><span class='line'>grep (BSD grep) 2.5.1-FreeBSD
</span><span class='line'>% grep -m 1 : /etc/passwd /etc/group
</span><span class='line'>/etc/passwd:nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false</span></code></pre></td></tr></table></div></figure>


<p>Debian GNU/Linux 9.1 (stretch) の例:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ grep --version
</span><span class='line'>grep (GNU grep) 2.27
</span><span class='line'>Copyright (C) 2016 Free Software Foundation, Inc.
</span><span class='line'>ライセンス GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
</span><span class='line'>This is free software: you are free to change and redistribute it.
</span><span class='line'>There is NO WARRANTY, to the extent permitted by law.
</span><span class='line'>
</span><span class='line'>作者 Mike Haertel および その他の方々は &lt;http://git.sv.gnu.org/cgit/grep.git/tree/AUTHORS&gt; を参照してください。
</span><span class='line'>$ grep -m 1 : /etc/passwd /etc/group
</span><span class='line'>/etc/passwd:root:x:0:0:root:/root:/bin/bash
</span><span class='line'>/etc/group:root:x:0:</span></code></pre></td></tr></table></div></figure>


<h3>Q2</h3>

<ul>
<li><code>perl -pe 's,(href|src)="(?!http|/)(\./)?,$1="/files/,g' url.html</code></li>
<li><code>(?!)</code> を使いたかったので Perl で。</li>
<li>最初に試しに書いたのはゆるすぎていらないところにつきまくっていた。</li>
<li>正規表現が緩いと charset の属性まで変換してしまうという罠があった。</li>
<li>気にせず置き換えてあとで <code>/files/http://</code> などになった場合に戻すという方針の人が多かった。</li>
</ul>


<h3>Q3</h3>

<ul>
<li><code>&lt; list | awk 'BEGIN{print "...";print "..."};/^\* /{print "&lt;li&gt;" $2 "&lt;/li&gt;"};END{print "...";print "..."}'</code></li>
<li>前後の部分の内容を省略するとこんな感じになった。</li>
<li><code>cat list | pandoc -t html5 -s</code> して削るという手もありらしい</li>
<li>Web サーバーにするには list.html の内容だけではなく <code>HTTP/1.1 200 OK</code> の行も追加する必要があった</li>
</ul>


<h3>Q4</h3>

<ul>
<li>hub コマンドを使ってよかったらしい</li>
<li>がんばって API をたたくのもありっぽい</li>
</ul>


<h3>Q5</h3>

<ul>
<li><code>sed -e 's/[ *]//g' -e '1s/^/p /' -e '$!s/$/*/' complex | ruby</code> はかっこ不足だった。(複素数リテラルが優先されると思ってしまっていた。)</li>
<li><code>sed -e 's/[ *]//g' -e '1s/^/p (/' -e '$!s/$/)*(/' -e '$s/$/)/' complex | ruby</code> でうまくいった。</li>
<li>別解として1行ごとに解釈して inject してみた : <code>ruby -e 'p ARGF.each_line.map{|s|eval(s.gsub(/(?&lt;!\d)i/,"1i"))}.inject(:*)' complex</code></li>
</ul>


<h3>Q6</h3>

<ul>
<li>真面目に計算すると <code>ruby -e 'a=[1,1];f=-&gt;(n){a[n]||=f[n-1]+f[n-2]};1.step{|n|if f[n]==6765;p f[n-4];exit;end}'</code> になった。</li>
<li>自分で計算せずに出そうとすると <code>curl https://en.wikipedia.org/wiki/Fibonacci_number | grep -B4 6765 | head -n 1 | grep -Eo '[[:digit:]]+'</code> になった。英語版 Wikipedia を使っているのは URL が短くてわかりやすいからで、日本語版 Wikipedia の URL でも可能でした。</li>
<li>最初、curl のダウンロード状況出力の右に隠れてしまって1行見落としていて <code>grep -B5</code> にしてしまっていましたが、 <code>grep -B4</code> でした。</li>
</ul>


<h3>Q7</h3>

<ul>
<li>zsh の組み込みのみで <code>for n in {00..99}; [[ -z ${(FM)"$(&lt; nums)":#*$n*} ]] &amp;&amp; echo $n</code></li>
<li>解説は <a href="http://blog.n-z.jp/blog/2014-12-11-zsh-grep.html">zshでgrepのようなことをする</a> を参照</li>
<li>シーケンスは <code>seq -w 0 99</code> とか <code>{0..9}{0..9}</code> とか</li>
<li><code>{00..99}</code> は bash 3 だとダメそうだった。 (0 1 &hellip; になった)</li>
<li><code>grep -o ..</code> は <code>echo 1234 | grep -o ..</code> で 23 が出てこないのでダメ</li>
<li><code>echo 1234 | sed p | sed '1s/.//' | grep -o ..</code> のようにする</li>
<li>解答例: <code>cat nums | sed p | sed '1s/.//' | grep -o .. | cat - &lt;(seq -w 0 99) | sort | uniq -u</code></li>
<li>fold -w 2 とかこういう時に使ってみると良さそうなコマンドは色々あるっぽい</li>
</ul>


<h3>Q8</h3>

<ul>
<li>問題 差し替え <a href="https://twitter.com/ryuichiueda/status/901330659527897088">https://twitter.com/ryuichiueda/status/901330659527897088</a></li>
<li><code>ruby -e 'ARGF.each_line.map{|s|[(s[2].ord-s[0].ord).abs,s]}.max[1].display' alphabet</code></li>
<li><code>z-v</code> という逆順のところも考慮して abs を入れたけどいらなかったかもしれない。</li>
<li>別解で36進数を使ってみた: <code>ruby -e 'ARGF.each_line.map{|s|[eval(s.gsub(/\w+/){$&amp;.to_i(36)}).abs,s]}.max[1].display' alphabet</code></li>
<li>abs の代わりにソートして引くという方法もあるらしい</li>
<li><code>map</code> + <code>max[1]</code> でシュワルツ変換的なことをしなくても <code>max_by</code> でよかったらしい</li>
<li>解答例は bash のブレース展開を使っていた</li>
<li>xxd で変換して計算する解答例も紹介されていた</li>
</ul>


<h2>午後の部終了</h2>

<p>午後の部まで参加の人はここで帰っていました。</p>

<h2>LT 大会</h2>

<p>LT は中継はどうなるんだろうと思っていたら、大阪は大阪で LT をしていました。</p>

<h3>シェル芸思考</h3>

<ul>
<li><a href="https://www.slideshare.net/kunst1080/30lt">第30回シェル芸勉強会LT シェル芸思考</a></li>
<li>問題を解く時にどう考えているのか</li>
<li>1: コマンド一撃でオプションを知っていればすぐにできるようなものかどうか考える</li>
<li>終わりそうにない場合続きを考える</li>
<li>2: 中間データの形式を設計する</li>
<li>3: コマンドを組み合わせて解いていく</li>
<li>メインは 2</li>
<li>設計の考え方</li>
<li>形について考える</li>
<li>例: <a href="https://togetter.com/li/1041621">【ファン迷惑】「響け！ユーフォニアム」という文字列だけで遊ぶシェル芸人達</a></li>
<li>中間データ1: 11回繰り返す</li>
<li>中間データ2: 11文字で折り返す</li>
<li>中間データ3: 10文字で切り出す</li>
</ul>


<h3>FORK 爆弾爆発中のロードアベレージを見る</h3>

<ul>
<li><a href="https://speakerdeck.com/msr_i386/cgroup">https://speakerdeck.com/msr_i386/cgroup</a></li>
<li>前回 SysRq でクラッシュさせてカーネルダンプで見た</li>
<li>今回 実行中にみたい</li>
<li>uptime コマンド, w コマンド, top コマンド, カーネルダンプの解析</li>
<li>カーネルダンプは1回のみでリアルタイムは無理</li>
<li>uptime, w は起動できない</li>
<li>top は反応が止まるので無理</li>
<li>cgroup で制御: cpuset を 0-2 と memory を 1GB に制限</li>
<li>root:bash に制限</li>
<li>forkbomb というグループを用意する</li>
<li>仮想4コア, メモリ16GB の VM でデモ</li>
<li>bash はランダムに kill されるのでデフォルトシェルを zsh にしておいて zsh から bash を起動</li>
<li>キーボード配列がおかしかったのでメモ帳で入力して貼り付けしたら zsh で実行してしまう事故発生</li>
<li>VM 再起動待ち</li>
<li>今度はちゃんと bash で実行</li>
<li>メモリ 1GB だと 11700 個ぐらい bash が起動している</li>
<li>ロードアベレージは 10000 を超えていた</li>
<li>cgconfig.conf は CentOS 7 では非推奨で systemd 経由で使うようになっている</li>
</ul>


<h3>破壊的難読化シェル芸</h3>

<ul>
<li>難読化シェル芸</li>
<li>置換による難読化はあまりにも弱い</li>
<li>難読化シェル芸には新たな武器が必要</li>
<li>武器っぽいコマンド gunzip (ガンジップ)</li>
<li>gun(銃)が弱いわけがない</li>
<li>gzip -cf</li>
<li>入力できない</li>
<li>xxd を通す</li>
<li>xxd -r -p | gunzip</li>
<li>別のアプローチ</li>
<li>gunzip の代わりに cut と組み合わせる</li>
<li>いろいろ探してみつけた例を実行</li>
</ul>


<h3>AWS API リクエストへの署名</h3>

<ul>
<li>REST API</li>
<li>リクエストに access key と secret access key で署名する必要がある</li>
<li>署名バージョン4: AWS4-HMAC-SHA256</li>
<li>署名のテストスイートも公開されている</li>
<li>署名のプロセスをシェル芸で追いかける</li>
<li>CLI / SDK に存在しない API がある: Amazon RDS / DownloadCompleteDBLogFile</li>
<li>CLI / SDK にあるのは download-db-log-file-portion のみで分割ダウンロードされる</li>
<li>例に使うのは AWS IAM / ListUsers</li>
<li>例に使う時刻も固定しておく</li>
<li>署名作成手順の説明</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Developers Meetup #4 大阪会場に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-24-railsdm.html"/>
    <updated>2017-08-24T22:52:52+09:00</updated>
    <id>http://blog.n-z.jp/blog/railsdm</id>
    <content type="html"><![CDATA[<p><a href="https://rails-developers-meetup.connpass.com/event/63373/">Rails Developers Meetup #4 大阪会場</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>最近よくいっているタワーAではなく、タワーBだったので、グランフロント内の案内をみながらたどり着きました。</p>

<h2>オープニング</h2>

<ul>
<li>会場の説明</li>
<li>ハッシュタグは <code>#railsdm</code></li>
<li>プログラムの紹介</li>
</ul>


<h2>Keynote 01: Dive into Rubygems</h2>

<ul>
<li><a href="http://qiita.com/pocke/items/1db63a3aecade1245f42">Dive into Rubygems</a></li>
<li>rails は new しただけでも依存している gem が結構多い</li>
<li>Gem のコードを読んだ実例</li>
<li>Gem の読み方</li>
<li>gem-src が便利</li>
<li>Gem のディレクトリ構成</li>
<li>lib: 基本的にlib/直下にはGEMNAME.rbとGEMNAME/しか置かれていない (rubocop とか)</li>
<li>spec, test: テストコードは動くexample</li>
<li>exe, bin: 実行ファイル (最近は exe)</li>
<li>Gem の依存関係</li>
<li><code>add_development_dependency</code> を使わずに <code>Gemfile</code> に書いてしまっている場合もある</li>
<li>Gem をインストールする</li>
<li>tmpgem の紹介</li>
<li>Gem を作る</li>
<li>exe ディレクトリは自分で作る</li>
<li><p>git に stage しないと gem に追加されない (gemspec で <code>git ls-files -z</code> を使っているため)</p></li>
<li><p><a href="https://twitter.com/p_ck_/status/803420202008313856">https://twitter.com/p_ck_/status/803420202008313856</a> <code>alias taketemp='cd "$(mktemp -d)"'</code></p></li>
<li>zsh の <code>REPORTTIME</code> と <code>TIMEFMT</code></li>
</ul>


<h2>Keynote 02: プロを目指すRailsエンジニアのための公開コードレビュー</h2>

<ul>
<li>自己紹介</li>
<li><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails</a></li>
<li><a href="http://blog.jnito.com/entry/2017/05/30/120148">「プロを目指す人のためのRuby入門」という本が出る予定</a></li>
<li>公開コードレビュー・その1: <a href="https://github.com/JunichiIto/train-ticket-rails/pull/27/files">https://github.com/JunichiIto/train-ticket-rails/pull/27/files</a></li>
<li>公開コードレビュー・その2: <a href="https://github.com/JunichiIto/train-ticket-rails/pull/15/files">https://github.com/JunichiIto/train-ticket-rails/pull/15/files</a></li>
<li><code>calculate</code> が 0 を返すのが 0 円ではなく、特別扱いするという意味なのが将来バグの元になりそう</li>
<li>出題者の解答例: <a href="https://github.com/JunichiIto/train-ticket-rails/compare/answer">https://github.com/JunichiIto/train-ticket-rails/compare/answer</a></li>
<li>気になったポイント</li>
<li>使用済みの切符: 1. nil でなければ真, 2. present? で明治, 3. インスタンスメソッドを使って抽象化</li>
<li>3が読み手にやさしい</li>
<li><code>?</code> で終わるメソッドの責務を考える</li>
<li>例: <a href="https://github.com/JunichiIto/train-ticket-rails/pull/10/files">https://github.com/JunichiIto/train-ticket-rails/pull/10/files</a></li>
<li>チェックして <code>redirect_to</code>, チェックして <code>errors.add</code></li>
<li>いいの?</li>
<li><code>?</code> で終わるメソッドは真偽値を返すだけにするのが良いのではないか</li>
<li>例外: ActiveRecord の valid? メソッド</li>
<li>redirect_to + return の return っている?</li>
<li>複数回呼ぶと DoubleRenderError になるので、場合によっては必要</li>
<li>まとめ</li>
<li>メソッドの責務を考えよう</li>
<li>いい感じに抽象化しよう: 「意図がわかるロジック」よりも「意図がわかる名前」を</li>
<li>不要なコンテキストをなくそう</li>
<li>Rails の機能を使いこなそう</li>
<li><p>この発表までの間に pull request してくれたものは全て動画でコメントする予定</p></li>
<li><p><a href="https://github.com/JunichiIto/train-ticket-rails/compare/answer#diff-c5c8cfc10273d831451b7acc93c3809dR7">https://github.com/JunichiIto/train-ticket-rails/compare/answer#diff-c5c8cfc10273d831451b7acc93c3809dR7</a> で <code>exited?</code> を使っていないのは、降りきってないのに validate するのは英語として不自然に感じたから</p></li>
<li><p>後置 if を使うかどうかは読んだ時に不自然に感じないかどうか</p></li>
<li><p><a href="https://speakerdeck.com/jnchito/number-railsdm">https://speakerdeck.com/jnchito/number-railsdm</a></p></li>
</ul>


<h2>休憩</h2>

<h2>LT 01: Bye, tachikoma gem</h2>

<ul>
<li><a href="https://www.slideshare.net/sanemat/byetachikomagem">Bye, tachikoma gem</a></li>
<li>tachikoma gem が deprecated</li>
<li>2015-12-10 に Tachikoma next というスライドを作っていた</li>
<li>tachikoma gem の思い出</li>
<li><p><a href="http://tachikoma.io/">http://tachikoma.io/</a> は続く</p></li>
<li><p>Saddler gem → Reviewdog</p></li>
<li><a href="https://github.com/packsaddle">https://github.com/packsaddle</a></li>
<li><p>reviewdog は reviewdog design docs がある</p></li>
<li><p>Heroku の CLI は Go 実装から Pure Node.js に変更したらしい <a href="https://blog.heroku.com/evolution-of-heroku-cli-2008-2017">https://blog.heroku.com/evolution-of-heroku-cli-2008-2017</a></p></li>
</ul>


<h2>LT 02: Rubyistだった僕がRailsを使ってみて（仮）</h2>

<ul>
<li>1: Ruby で感動したこと</li>
<li>ブロックと従属節: 従属節も2つとる自然言語はない</li>
<li>2: Ruby をやらずに Rails から入った人にありがちなこと</li>
<li>(面白かったけど速くてメモ取れず)</li>
<li>基本が大事</li>
<li>3: マネーフォワード API</li>
<li>認証: OpenID Connect</li>
<li>認可: OAuth 2.0</li>
<li>doorkeeper gem を使っている</li>
</ul>


<h2>LT 03: Railsで新規サービスを開発する際にやったこと</h2>

<ul>
<li><a href="https://www.slideshare.net/JyunichiKuriyama/rails-79120665">https://www.slideshare.net/JyunichiKuriyama/rails-79120665</a></li>
<li><a href="https://ydkr.jp/">https://ydkr.jp/</a></li>
<li>プロジェクトの目的、目標とは別に自分の目的を決めた: 「技術を正しくつかう」</li>
<li>docker による開発環境などを準備</li>
<li>テストは必ず書くと決めた</li>
<li>モチベーションの維持のため、まえにすすむことを意識</li>
<li>どんなによいコードでもサービスが当たらなければ意味ない</li>
<li>どう書いてほしいのかどういう考えで作ってるのかを考えながらやるのはよかった</li>
<li>最後に自己紹介</li>
<li>質疑応答</li>
<li>最低限 controller の spec</li>
</ul>


<h2>LT 04: Webpacker is installed</h2>

<ul>
<li>webpacker gem</li>
<li>Misoca に導入した時の話</li>
<li>Before: sprockets, browserify-rails, npm 依存とそうでないものが混在, フルビルドに時間がかかる</li>
<li><p>After: js は webpacker に完全移行, CSS は引き続き sprockets, フルビルドが20〜30秒</p></li>
<li><p>よかったところ</p></li>
<li>環境に応じた切り替え, fingerprint 付きファイルの生成 などを一気にやってくれる</li>
<li>webpack 自体を活用できる</li>
<li>例: CommonsChunkPlugin</li>
<li><p>webpacker 自体の恩恵ではなく、 webpacker はきっかけ</p></li>
<li><p>つらかったところ</p></li>
<li>Rails と webpack の境界が曖昧</li>
<li>開発中の問題: webpack の起動がめんどくさい</li>
<li>foreman で一緒に起動はできるが、なんか止まることがある?</li>
<li>feature spec でビルドされないことがある</li>
<li><p><code>javascript_pack_tag</code> が更新の時にビルドされない</p></li>
<li><p>感想</p></li>
<li>総合してふりかえると webpacker はよかった</li>
<li>Rails Way に乗れることは大きい</li>
<li><p>カスタマイズ時には知識が必要</p></li>
<li><p>質疑応答</p></li>
<li><p>webpacker のデフォルトのディレクトリ構成に移行した</p></li>
<li><p><a href="https://speakerdeck.com/mugi_uno/webpacker-is-installed">https://speakerdeck.com/mugi_uno/webpacker-is-installed</a></p></li>
</ul>


<h2>LT 05: Automation test in RoR project</h2>

<ul>
<li>後の工程でバグが見つかると高いコストがかかる</li>
<li>UI テスト: 手動テスト vs 自動テスト</li>
<li>自動テストツール cucumber</li>
<li>Gherkin language: Cucumber nomenclator</li>
<li>Capybara</li>
<li>Gherkin to Capybara</li>
<li>results</li>
<li>Cucumber: tagging</li>
<li><p>Distributed testing with Docker</p></li>
<li><p>質疑応答</p></li>
<li>Q: エンジニア以外がかけるという話があるが、結局エンジニアが書くことになってつらい?</li>
<li>A: 結局エンジニアが書いてるっぽい(?)</li>
<li>Q: UI テストに cucumber 以外を使うなら何を使う?</li>
<li>A: Selenium IDE を使っている</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>次回予告</li>
<li>次回から TECH PLAY で募集</li>
<li>12月に Rails Meetup 2017 というのをやる</li>
</ul>

]]></content>
  </entry>
  
</feed>
