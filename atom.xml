<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-04-23T19:55:13+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第 122 回関西 Debian 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-23-kansai-debian-meeting.html"/>
    <updated>2017-04-23T13:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://debianjp.connpass.com/event/54424/" title="第 122 回関西 Debian 勉強会">第 122 回関西 Debian 勉強会</a>に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<p>早めに出発したら時間があったので、駅前ビルの金券屋で切符を買って、少し安く移動できました。</p>

<p>しばらく前に阪急三番街の KIDDY LAND で stretch のぬいぐるみが 2,3 個あったのを見かけて、次にみたときには最後の 1 個になったいたので、買っておいたのを持って行きました。</p>

<h2>オープニング</h2>

<ul>
<li>前回の話から会場候補地の話とか</li>
<li><a href="https://wiki.debian.org/KansaiDebianMeeting/DraftMemo">https://wiki.debian.org/KansaiDebianMeeting/DraftMemo</a> に古いメモがある</li>
<li><a href="http://events.linuxfoundation.jp/events/open-source-summit-japan" title="Open Source Summit Japan 2017">Open Source Summit Japan 2017</a> というのがあるらしい</li>
<li><a href="https://lists.debian.org/debian-devel-announce/2017/04/msg00008.html" title="Status on the stretch release">Status on the stretch release</a></li>
<li><a href="https://www.debian.org/News/2017/20170417" title="Statement concerning the arrest of Dmitry Bogatov">Statement concerning the arrest of Dmitry Bogatov</a></li>
<li><a href="https://blog.torproject.org/blog/statement-regarding-dmitry-bogatov" title="Statement regarding Dmitry Bogatov | The Tor Blog">Statement regarding Dmitry Bogatov | The Tor Blog</a></li>
<li>事前課題</li>
<li>maven とか make とか</li>
</ul>


<h2>休憩</h2>

<h2>CMake でビルド</h2>

<ul>
<li>Windows 版と Linux 版の両対応が動機</li>
<li>Visual Studio や Eclipse のプロジェクト出力も可能</li>
<li><a href="https://github.com/yosukesan/kansai_debian">https://github.com/yosukesan/kansai_debian</a> に今回のサンプルを用意</li>
<li><code>distclean</code> 相当がないので build ディレクトリを作る方が良い</li>
<li><code>cd 000.hello; mkdir build; cmake ../ -DCMAKE_INSTALL_PREFIX=.; make; make install</code></li>
<li><code>CMakeCache.txt</code> が <code>configure.log</code> 相当</li>
<li><code>CMakeCache.txt</code> を編集することも可能</li>
<li><code>cmake ..</code> ではなく <code>cmake ../CMakeLists.txt</code> としてしまうと build ディレクトリではなくソースディレクトリにファイルが作られてしまうので注意</li>
<li>ライブラリをリンクする例: 失敗する例が <code>001_NG.link_library</code> で成功する例が <code>001_OK.link_library</code></li>
<li>自作ライブラリのビルドとリンク</li>
<li><code>CMakeCache.txt</code> に入る変数と入らない変数がある</li>
<li>設定するのに <code>FORCE</code> オプションが必要なものとなくても良いものがあってハマった</li>
<li>echo しても空なのに、内部的には変数がある</li>
<li>変数の上書きに癖があってハマった</li>
<li>Windows でマルチスレッドかどうか、デバッグかリリースかなどでリンクするライブラリが違うのが自動でできなかった</li>
<li>Visual Studio でもリンクするライブラリの組み合わせ問題ははまることがあるらしい</li>
<li>Dependency Walker</li>
<li>デバッグビルドの DLL が混ざっていてバグっていた話</li>
<li><a href="https://ninja-build.org/manual.html">https://ninja-build.org/manual.html</a></li>
</ul>


<h2>その後</h2>

<p>時間が余ったので、次回の予定などの話をしていました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSS Gate大阪ワークショップ2017-04-22に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-22-oss-gate-workshop.html"/>
    <updated>2017-04-22T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/oss-gate-workshop</id>
    <content type="html"><![CDATA[<p><a href="https://oss-gate.doorkeeper.jp/events/58579" title="OSS Gate大阪ワークショップ2017-04-22 - OSS Gate | Doorkeeper">OSS Gate大阪ワークショップ2017-04-22 - OSS Gate | Doorkeeper</a>にサポーター (旧称: メンター) として参加しました。</p>

<!--more-->


<h2>全体の感想</h2>

<p>最後のアンケートにも書きましたが、前回はデモである程度メモをどの程度とるのかなどの方向性が示されていたのと、やる内容がインストールから初めて、ひっかかったところのドキュメントの改善をフィードバックする、というのが多かったのに対して、今回はデモがほぼなくて、サポーター (旧称: メンター) として応募したけど、人数の都合でビギナーになった人が多かったからか、いろんなことに挑戦していて、難しい感じでした。</p>

<p>作業メモの粒度としては、<a href="https://github.com/oss-gate/workshop/issues?q=is%3Aissue+is%3Aclosed">過去のビギナーの作業ログ</a>から特にコメント数が多いものを参考にしてみると、こういう細かい思考過程までメモすると良いのか、というのが、 oss-gate に限らず普段の作業メモのとり方としても、参考になるかと思います。</p>

<h2>メモ</h2>

<p>以下、今回の雑多なメモです。</p>

<h3>フォント</h3>

<p>途中のふりかえりのときのビギナーの人がブラウザーで変わったフォントを使っていたのできいてみたところ、「スマートフォントUI」というのを使っていると教えてもらいました。</p>

<h3>Chef DK のアンインストール</h3>

<p>参考のため、自分の環境にも Chef DK を入れてみていたのですが、 <a href="https://docs.chef.io/install_dk.html">https://docs.chef.io/install_dk.html</a> にアンインストールの手順があったので、それに従ってアンインストールしました。</p>

<p>symlink は削除前に確認してみたら、たくさんありました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%  sudo rm -rf /opt/chefdk
</span><span class='line'>Password:
</span><span class='line'>%  sudo pkgutil --forget com.getchef.pkg.chefdk
</span><span class='line'>Forgot package 'com.getchef.pkg.chefdk' on '/'.
</span><span class='line'>%  find /usr/local/bin -lname '/opt/chefdk/*'
</span><span class='line'>/usr/local/bin/berks
</span><span class='line'>/usr/local/bin/chef
</span><span class='line'>/usr/local/bin/chef-apply
</span><span class='line'>/usr/local/bin/chef-client
</span><span class='line'>/usr/local/bin/chef-shell
</span><span class='line'>/usr/local/bin/chef-solo
</span><span class='line'>/usr/local/bin/chef-vault
</span><span class='line'>/usr/local/bin/cookstyle
</span><span class='line'>/usr/local/bin/dco
</span><span class='line'>/usr/local/bin/delivery
</span><span class='line'>/usr/local/bin/foodcritic
</span><span class='line'>/usr/local/bin/inspec
</span><span class='line'>/usr/local/bin/kitchen
</span><span class='line'>/usr/local/bin/knife
</span><span class='line'>/usr/local/bin/ohai
</span><span class='line'>/usr/local/bin/push-apply
</span><span class='line'>/usr/local/bin/pushy-client
</span><span class='line'>/usr/local/bin/pushy-service-manager
</span><span class='line'>/usr/local/bin/rubocop
</span><span class='line'>%  sudo find /usr/local/bin -lname '/opt/chefdk/*' -delete
</span><span class='line'>%  find /usr/bin -lname '/opt/chefdk/*'</span></code></pre></td></tr></table></div></figure>


<h3>辞書</h3>

<p>macOS の辞書ではなく、Logophile という辞書ソフトを使っているのをみました。
COBUILD のシソーラスが便利だそうです。</p>

<p>たぶん <a href="http://dicwizard.jp/logophile/" title="Logophile">Logophile</a> で、シェアウェアのようです。</p>

<h3>fish shell</h3>

<p>検索しにくい名前ですが、<a href="http://fish.rubikitch.com/" title="全訳！fishシェル普及計画【コマンドラインは怖くない】">全訳！fishシェル普及計画【コマンドラインは怖くない】</a> に翻訳されたドキュメントがあるので、使い始めやすそうです。</p>

<p>個人的には rvm を入れたら環境を壊された (<code>zsh</code> なら <code>chpwd_function</code> を使えばいいのに使っていなかったらしく <code>cd</code> のカスタマイズが壊れた) ぐらいシェルはカスタマイズをしているので、乗り換える可能性は低いですが、ちょっと試してみたところ、 <code>echo</code> のオートサジェスチョンで <code>$BASH_VERSION</code> がでてきたので、<code>.bash_history</code> をみているようです。
ちょっと試した後は、 <code>rm -rf ~/.local/share/fish</code> でクリーンな状態に戻して、また最初から試せるようにしておきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mastodonのAPIをcurlで試してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-17-mastodon-api-curl.html"/>
    <updated>2017-04-17T01:24:42+09:00</updated>
    <id>http://blog.n-z.jp/blog/mastodon-api-curl</id>
    <content type="html"><![CDATA[<p>curl で <a href="http://blog.n-z.jp/blog/2017-04-16-contribute-mastodon.html">mastodon の開発環境</a>を使って API を試してみたメモです。</p>

<p><a href="http://qiita.com/znz/items/c924cd4e9d5e50e50058">mastodonのAPIをcurlで試してみた</a>と同じ内容です。</p>

<h2>確認環境</h2>

<p><a href="http://blog.n-z.jp/blog/2017-04-16-contribute-mastodon.html">mastodon の開発環境</a>の通りですが、簡単に説明しておくと</p>

<ul>
<li><code>git clone https://github.com/tootsuite/mastodon</code></li>
<li><code>cd mastodon</code></li>
<li><code>vagrant up</code></li>
<li><code>vagrant ssh</code></li>
</ul>


<p>した後、初期アカウントのメールアドレスを修正した環境を想定しています。</p>

<h2>Create App</h2>

<p>クライアント名を決めてスコープを決めて作成します。
クライアント名は同じ名前でも作成できるようです。(Twitter は名前がかぶると作成できなかったはず。)
複数のスコープを指定する時はスペース区切りです。
リダイレクト先がなければ <code>urn:ietf:wg:oauth:2.0:oob</code> にしておけば良いようです。
ウェブサイトがあればその URL も設定しておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant@mastodon:~<span class="nv">$ CLIENT_NAME</span><span class="o">=</span><span class="s2">&quot;Test Client&quot;</span>
</span><span class='line'>vagrant@mastodon:~<span class="nv">$ </span>curl -X POST -d <span class="s2">&quot;client_name=$CLIENT_NAME&amp;redirect_uris=${REDIRECT_URIS:-urn:ietf:wg:oauth:2.0:oob}&amp;scopes=${SCOPES:-read write follow}&amp;website=$WEBSITE&quot;</span> http://localhost:3000/api/v1/apps<span class="p">;</span> <span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;id&quot;</span>:16,<span class="s2">&quot;redirect_uri&quot;</span>:<span class="s2">&quot;urn:ietf:wg:oauth:2.0:oob&quot;</span>,<span class="s2">&quot;client_id&quot;</span>:<span class="s2">&quot;ce06ac1d988d7f26f067dc7ea639e41523ec8135e48cceabb7cd0fd8c1413c65&quot;</span>,<span class="s2">&quot;client_secret&quot;</span>:<span class="s2">&quot;be04a4f2ca2cd5d9a1cc1314d03a15f811be7f64005483b003447cc3e35e7749&quot;</span><span class="o">}</span>0
</span></code></pre></td></tr></table></div></figure>


<p><code>echo</code> をつけているのは終了ステータスの確認と応答に改行がつかないことの対処です。</p>

<p>この応答のうち、<code>client_id</code> と <code>client_secret</code> が必要なので、保存しておきます。</p>

<h2>アカウントと紐付け</h2>

<p>保存しておいた <code>client_id</code> と <code>client_secret</code> と、対象のサーバーに登録しているアカウントのメールアドレスとパスワードが必要です。</p>

<p>スコープは Create App の時に <code>read</code> のみ以外を指定した場合には、ここにも指定しないと <code>read</code> 権限のみになってしまうようです。
Create App の時に指定していなかったスコープは指定できないようです。(<code>{"error":"invalid_scope","error_description":"The requested scope is invalid, unknown, or malformed."}</code> になる。)
<code>/api/v1/apps</code> は <code>scopes</code> (複数形) ですが、<code>/oauth/token</code> では <code>scope</code> (単数形) なので注意が必要そうです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant@mastodon:~<span class="nv">$ CLIENT_ID</span><span class="o">=</span>ce06ac1d988d7f26f067dc7ea639e41523ec8135e48cceabb7cd0fd8c1413c65
</span><span class='line'>vagrant@mastodon:~<span class="nv">$ CLIENT_SECRET</span><span class="o">=</span>be04a4f2ca2cd5d9a1cc1314d03a15f811be7f64005483b003447cc3e35e7749
</span><span class='line'>vagrant@mastodon:~<span class="nv">$ YOUR_EMAIL</span><span class="o">=</span>admin@mastodon.dev
</span><span class='line'>vagrant@mastodon:~<span class="nv">$ YOUR_PASSWORD</span><span class="o">=</span>mastodonadmin
</span><span class='line'>vagrant@mastodon:~<span class="nv">$ </span>curl -X POST -d <span class="s2">&quot;client_id=$CLIENT_ID&amp;client_secret=$CLIENT_SECRET&amp;grant_type=password&amp;username=$YOUR_EMAIL&amp;password=$YOUR_PASSWORD&amp;scope=${SCOPES:-read write follow}&quot;</span> -sS http://localhost:3000/oauth/token<span class="p">;</span> <span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;access_token&quot;</span>:<span class="s2">&quot;96efc1d5e78e6bd9497915cbdc9a464d584e934414d3db1e1d68b2370f8b698c&quot;</span>,<span class="s2">&quot;token_type&quot;</span>:<span class="s2">&quot;bearer&quot;</span>,<span class="s2">&quot;scope&quot;</span>:<span class="s2">&quot;read write follow&quot;</span>,<span class="s2">&quot;created_at&quot;</span>:1492358391<span class="o">}</span>0
</span></code></pre></td></tr></table></div></figure>


<h2>API 呼び出し</h2>

<p>ほとんどの API 呼び出しにはアクセストークンが必要です。
Create App や public タイムラインの取得などのように必要ないものもあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant@mastodon:~<span class="nv">$ ACCESS_TOKEN</span><span class="o">=</span>96efc1d5e78e6bd9497915cbdc9a464d584e934414d3db1e1d68b2370f8b698c
</span></code></pre></td></tr></table></div></figure>


<h2>アカウント情報の取得</h2>

<p><code>/api/v1/accounts/verify_credentials</code> でアクセストークンに紐づいているアカウントの情報を取得できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant@mastodon:~<span class="nv">$ </span>curl --header <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -sS http://localhost:3000/api/v1/accounts/verify_credentials<span class="p">;</span> <span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;id&quot;</span>:1,<span class="s2">&quot;username&quot;</span>:<span class="s2">&quot;admin&quot;</span>,<span class="s2">&quot;acct&quot;</span>:<span class="s2">&quot;admin&quot;</span>,<span class="s2">&quot;display_name&quot;</span>:<span class="s2">&quot;&quot;</span>,<span class="s2">&quot;locked&quot;</span>:false,<span class="s2">&quot;created_at&quot;</span>:<span class="s2">&quot;2017-04-14T04:04:40.299Z&quot;</span>,<span class="s2">&quot;followers_count&quot;</span>:0,<span class="s2">&quot;following_count&quot;</span>:1,<span class="s2">&quot;statuses_count&quot;</span>:26,<span class="s2">&quot;note&quot;</span>:<span class="s2">&quot;&quot;</span>,<span class="s2">&quot;url&quot;</span>:<span class="s2">&quot;http://mastodon.dev/@admin&quot;</span>,<span class="s2">&quot;avatar&quot;</span>:<span class="s2">&quot;http://localhost:3000/avatars/original/missing.png&quot;</span>,<span class="s2">&quot;avatar_static&quot;</span>:<span class="s2">&quot;http://localhost:3000/avatars/original/missing.png&quot;</span>,<span class="s2">&quot;header&quot;</span>:<span class="s2">&quot;http://localhost:3000/headers/original/missing.png&quot;</span>,<span class="s2">&quot;header_static&quot;</span>:<span class="s2">&quot;http://localhost:3000/headers/original/missing.png&quot;</span><span class="o">}</span>0
</span></code></pre></td></tr></table></div></figure>


<h2>情報更新</h2>

<p><code>/oauth/token</code> で scope を指定していなかった場合、 <code>{"error":"This action is outside the authorized scopes"}</code> になって更新できませんでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant@mastodon:~<span class="nv">$ </span>curl -X PATCH -d <span class="s2">&quot;display_name=Admin&quot;</span> --header <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -sS http://localhost:3000/api/v1/accounts/update_credentials<span class="p">;</span> <span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;id&quot;</span>:1,<span class="s2">&quot;username&quot;</span>:<span class="s2">&quot;admin&quot;</span>,<span class="s2">&quot;acct&quot;</span>:<span class="s2">&quot;admin&quot;</span>,<span class="s2">&quot;display_name&quot;</span>:<span class="s2">&quot;Admin&quot;</span>,<span class="s2">&quot;locked&quot;</span>:false,<span class="s2">&quot;created_at&quot;</span>:<span class="s2">&quot;2017-04-14T04:04:40.299Z&quot;</span>,<span class="s2">&quot;followers_count&quot;</span>:0,<span class="s2">&quot;following_count&quot;</span>:1,<span class="s2">&quot;statuses_count&quot;</span>:27,<span class="s2">&quot;note&quot;</span>:<span class="s2">&quot;&quot;</span>,<span class="s2">&quot;url&quot;</span>:<span class="s2">&quot;http://mastodon.dev/@admin&quot;</span>,<span class="s2">&quot;avatar&quot;</span>:<span class="s2">&quot;http://localhost:3000/avatars/original/missing.png&quot;</span>,<span class="s2">&quot;avatar_static&quot;</span>:<span class="s2">&quot;http://localhost:3000/avatars/original/missing.png&quot;</span>,<span class="s2">&quot;header&quot;</span>:<span class="s2">&quot;http://localhost:3000/headers/original/missing.png&quot;</span>,<span class="s2">&quot;header_static&quot;</span>:<span class="s2">&quot;http://localhost:3000/headers/original/missing.png&quot;</span><span class="o">}</span>0
</span></code></pre></td></tr></table></div></figure>


<h2>トゥート!</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant@mastodon:~<span class="nv">$ </span>curl -X POST -d <span class="s2">&quot;status=test message&quot;</span> --header <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -sS http://localhost:3000/api/v1/statuses<span class="p">;</span> <span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;id&quot;</span>:30,<span class="s2">&quot;created_at&quot;</span>:<span class="s2">&quot;2017-04-16T16:00:55.054Z&quot;</span>,<span class="s2">&quot;in_reply_to_id&quot;</span>:null,<span class="s2">&quot;in_reply_to_account_id&quot;</span>:null,<span class="s2">&quot;sensitive&quot;</span>:null,<span class="s2">&quot;spoiler_text&quot;</span>:<span class="s2">&quot;&quot;</span>,<span class="s2">&quot;visibility&quot;</span>:<span class="s2">&quot;public&quot;</span>,<span class="s2">&quot;application&quot;</span>:<span class="o">{</span><span class="s2">&quot;name&quot;</span>:<span class="s2">&quot;Test Client&quot;</span>,<span class="s2">&quot;website&quot;</span>:<span class="s2">&quot;&quot;</span><span class="o">}</span>,<span class="s2">&quot;account&quot;</span>:<span class="o">{</span><span class="s2">&quot;id&quot;</span>:1,<span class="s2">&quot;username&quot;</span>:<span class="s2">&quot;admin&quot;</span>,<span class="s2">&quot;acct&quot;</span>:<span class="s2">&quot;admin&quot;</span>,<span class="s2">&quot;display_name&quot;</span>:<span class="s2">&quot;&quot;</span>,<span class="s2">&quot;locked&quot;</span>:false,<span class="s2">&quot;created_at&quot;</span>:<span class="s2">&quot;2017-04-14T04:04:40.299Z&quot;</span>,<span class="s2">&quot;followers_count&quot;</span>:0,<span class="s2">&quot;following_count&quot;</span>:1,<span class="s2">&quot;statuses_count&quot;</span>:27,<span class="s2">&quot;note&quot;</span>:<span class="s2">&quot;&quot;</span>,<span class="s2">&quot;url&quot;</span>:<span class="s2">&quot;http://mastodon.dev/@admin&quot;</span>,<span class="s2">&quot;avatar&quot;</span>:<span class="s2">&quot;http://localhost:3000/avatars/original/missing.png&quot;</span>,<span class="s2">&quot;avatar_static&quot;</span>:<span class="s2">&quot;http://localhost:3000/avatars/original/missing.png&quot;</span>,<span class="s2">&quot;header&quot;</span>:<span class="s2">&quot;http://localhost:3000/headers/original/missing.png&quot;</span>,<span class="s2">&quot;header_static&quot;</span>:<span class="s2">&quot;http://localhost:3000/headers/original/missing.png&quot;</span><span class="o">}</span>,<span class="s2">&quot;media_attachments&quot;</span>:<span class="o">[]</span>,<span class="s2">&quot;mentions&quot;</span>:<span class="o">[]</span>,<span class="s2">&quot;tags&quot;</span>:<span class="o">[]</span>,<span class="s2">&quot;uri&quot;</span>:<span class="s2">&quot;tag:mastodon.dev,2017-04-16:objectId=30:objectType=Status&quot;</span>,<span class="s2">&quot;content&quot;</span>:<span class="s2">&quot;&lt;p&gt;test message&lt;/p&gt;&quot;</span>,<span class="s2">&quot;url&quot;</span>:<span class="s2">&quot;http://mastodon.dev/@admin/30&quot;</span>,<span class="s2">&quot;reblogs_count&quot;</span>:0,<span class="s2">&quot;favourites_count&quot;</span>:0,<span class="s2">&quot;reblog&quot;</span>:null,<span class="s2">&quot;favourited&quot;</span>:false,<span class="s2">&quot;reblogged&quot;</span>:false<span class="o">}</span>0
</span></code></pre></td></tr></table></div></figure>


<h2>タイムライン取得</h2>

<p><code>curl -v --header "Authorization: Bearer $ACCESS_TOKEN" -sS http://localhost:3000/api/v1/timelines/home</code> などでタイムラインを取得できます。(<code>timelines</code> は複数形)</p>

<p>Link ヘッダーに <code>Link: &lt;http://localhost:3000/api/v1/timelines/home?max_id=7&gt;; rel="next", &lt;http://localhost:3000/api/v1/timelines/home?since_id=30&gt;; rel="prev"</code> のように書いてあって、 <code>next</code> で過去に辿っていけて、 <code>prev</code> で新しいトゥートを取得できるようです。
ただし <code>prev</code> は (ローカルの開発環境ではなく普通の公開サーバーで) 時間をあけて試すと間が抜けていたので、全部取得する用途には向いていないようです。
<code>next</code> の方は確認していませんが、過去に遡るという挙動を考えると、間が抜けることはないのではないかと思っています。</p>

<h2>エラーの例</h2>

<p>パラメーターなどが間違っている時は JSON でエラーが返ってくるのですが、URL を間違えた時は空白のレスポンスが返ってくるので、知らないと悩みそうです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant@mastodon:~<span class="nv">$ </span>curl -X POST -d <span class="s2">&quot;client_name=$CLIENT_NAME&amp;redirect_uris=${REDIRECT_URIS:-urn:ietf:wg:oauth:2.0:oob}&amp;scopes=${SCOPES:-read write follow}&amp;website=$WEBSITE&quot;</span> http://localhost:3000/api/v1/apps<span class="p">;</span> <span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;error&quot;</span>:<span class="s2">&quot;Validation failed: Name can&#39;t be blank&quot;</span><span class="o">}</span>0
</span><span class='line'>vagrant@mastodon:~<span class="nv">$ </span>curl --header <span class="s2">&quot;Authorization: Bearer ACCESS_TOKEN_HERE&quot;</span> -sS http://localhost:3000/api/v1/accounts/verify_credentials<span class="p">;</span> <span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;error&quot;</span>:<span class="s2">&quot;The access token is invalid&quot;</span><span class="o">}</span>0
</span><span class='line'>vagrant@mastodon:~<span class="nv">$ </span>curl --header <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -sS http://localhost:3000/api/v1/timeline/home<span class="p">;</span> <span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'>0
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="https://github.com/tootsuite/documentation/blob/eb32fc9738de44878697754431565260be89c17f/Using-the-API/API.md">参照時点の API のドキュメント</a> (<a href="https://github.com/tootsuite/documentation/blob/master/Using-the-API/API.md">最新</a>)</li>
<li><a href="https://github.com/tootsuite/documentation/blob/eb32fc9738de44878697754431565260be89c17f/Using-the-API/Testing-with-cURL.md">参照時点の Testing the API with cURL</a> (<a href="https://github.com/tootsuite/documentation/blob/master/Using-the-API/Testing-with-cURL.md">最新</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mastodonにpull requestを送った話と開発環境構築の話]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-16-contribute-mastodon.html"/>
    <updated>2017-04-16T22:43:41+09:00</updated>
    <id>http://blog.n-z.jp/blog/contribute-mastodon</id>
    <content type="html"><![CDATA[<p>最近流行っている mastodon に pull request を送ったので、
その環境構築などの話です。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>macOS Sierra 10.12.4</li>
<li>VirtualBox 5.1.18</li>
<li>Vagrant 1.9.3</li>
<li>vagrant-hostsupdater 1.0.2</li>
<li><a href="https://github.com/tootsuite/mastodon">https://github.com/tootsuite/mastodon</a> の master</li>
</ul>


<h2>起動まで</h2>

<p><a href="https://github.com/tootsuite/mastodon#development-with-vagrant">Development with Vagrant</a> からリンクされている
<a href="https://github.com/tootsuite/documentation/blob/master/Running-Mastodon/Vagrant-guide.md">Vagrant guide</a> を参考にして、
環境を構築しました。</p>

<p>初回起動 (<code>vagrant up</code>) 時は <code>vagrant-hostsupdater</code> での <code>sudo</code> に続けて実行されるので気づかなかったのですが、
2 回目に <code>vagrant up</code> した時に <code>/etc/exports</code> の変更のためにも <code>sudo</code> が実行されているのに気づきました。</p>

<pre><code>git clone https://github.com/tootsuite/mastodon
cd mastodon
vagrant plugin install vagrant-hostsupdater
vagrant up
</code></pre>

<h2>初期アカウント設定</h2>

<p>初期アカウントはメールアドレスが <code>admin@mastodon.dev</code> でパスワードが <code>mastodonadmin</code> と書いてあるのですが、入れなかったので、</p>

<pre><code>cd /vagrant
rails c
User.all
</code></pre>

<p>で確認してみると、メールアドレスが <code>admin@localhost:3000</code> になっていました。
そこで、そのまま <code>rails c</code> の中で、</p>

<pre><code>u=User.first
u.email="admin@mastodon.dev"
u.save!
</code></pre>

<p>で修正しました。</p>

<p>こんな感じで何か引っかかった時は rails の知識がないと辛そうです。</p>

<h2>いろいろ動作確認</h2>

<p>80 番ポートから 3000 番ポートへのポートフォワーディングは
Vagrantfile で設定しているので、
ホスト側から <code>http://mastodon.dev</code> は見えるのですが、
<code>vagrant ssh</code> で入ったゲスト側では <code>curl http://mastodon.dev</code> ではなく
<code>curl http://localhost:3000</code> や <code>curl http://mastodon.dev:3000</code> などのように
ポート番号をつける必要がありました。</p>

<h2>ストリーミング API</h2>

<p>Vagrantfile を見ればわかるのですが、
rails server が <code>rails s -d -b 0.0.0.0</code> で動いているところにポートフォワーディングしているだけなので、
streaming API は使えませんでした。</p>

<p>最初、実装されていないのかと勘違いしてしまったのですが、
実装されていると聞いたので、よくみてみると
<code>streaming/index.js</code> で rails 外のところに実装されていました。</p>

<p><code>npm run start</code> で起動すればゲストの中なら 4000 番ポートで使えるようになったので、
ストリーミング API を使いたい場合は一工夫必要そうです。</p>

<h2>メール</h2>

<p>メールは <code>http://mastodon.dev/letter_opener</code> に溜まっていました。
mailcatcher と違って、再起動しても残っていました。</p>

<h2>環境の更新</h2>

<p>最新の状態にするために master の変更に追随する必要がありますが、
<code>vagrant ssh</code> で入った中で <code>cd /vagrant</code> した状態で <code>git pull</code> するとパーミッションの関係でうまくいかないようだったので、
ホスト側で <code>git pull</code> する方が安全なようです。</p>

<p><code>yarn install</code> などでファイルが書き換わっていると、その変更を元に戻しておく必要もあるかもしれません。</p>

<p><code>git pull</code> した後は、Gemfile なども書き換わっていた時は</p>

<pre><code>vagrant ssh
cd /vagrant
bundle install
yarn install
rails db:migrate
rails assets:precompile
pkill -f puma
export $(cat ".env.vagrant" | xargs)
rails s -d -b 0.0.0.0
</code></pre>

<p>のような感じで <code>bundle install</code> と起動している rails server の停止と Vagrantfile の <code>$start</code> の処理をすると良さそうです。</p>

<p>パーミッションの問題で <code>yarn install</code> がうまくいかなかった時は <code>node_modules</code> を削除すると良さそうです。
ゲスト側だとうまくいかなかったら、ホスト側で消すなどの工夫が必要そうです。</p>

<h2>pull requests</h2>

<p><code>vagrant up</code> する前に Vagrantfile を確認していたところ、
<code>PATH</code> にカレントディレクトリを追加していたので、
<a href="https://github.com/tootsuite/mastodon/pull/1779">Remove current directory from PATH</a>
で削除する pull request を送りました。</p>

<p>そして、管理画面をみていたところ、title が並んでいてなんだこれ、と思ったので、
<a href="https://github.com/tootsuite/mastodon/pull/1785">翻訳の更新の pull request</a>
を送りました。</p>

<p><code>I18n.t</code> の最後の単語は翻訳がないときのデフォルトとしても使われるので、
そのことも考慮した単語を選んだ方が良さそうに思いましたが、
yaml ファイルをみていると title にしたい気持ちもわからなくはなかったので、
悩ましいところです。</p>

<h2>翻訳もれ?</h2>

<p>テスト環境なので短いパスワードでもいいかと思って、テストアカウントを登録する時に短いパスワードを入れてみたところ、
<code>translation missing: ja.activerecord.errors.models.user.attributes.password.too_short</code>
と出てきて調べてみると <code>config/locales/doorkeeper.fr.yml</code> にだけ <code>too_short</code> の翻訳があって何かおかしいと思って、
よく調べてみると、
rails-i18n gem に翻訳が入っている、 rails デフォルトのエラーメッセージだとわかったので、
<a href="https://github.com/tootsuite/mastodon/issues/1790">rails-i18n gem の追加リクエスト</a> を出しました。</p>

<h2>i18n-tasks</h2>

<p>前回の翻訳の更新は目視で比較して追加したのですが、
rails-i18n gem について調べているときに
i18n-tasks gem というのが入っていると気づいたので、
次はそれを使ってみました。</p>

<p><code>i18n-tasks health</code> でチェックできるのですが、デフォルトだと全言語が対象で、出過ぎなので、
<code>i18n-tasks health -l ja</code> で日本語だけに絞って表示しました。</p>

<p>そして <code>i18n-tasks add-missing -l ja</code> で <code>config/locales/ja.yml</code> に英語のまま追加され、
<code>git diff</code> で何が追加されたか確認して翻訳していきました。</p>

<p><code>i18n-tasks find '*.reset_password'</code> や <code>i18n-tasks find admin.accounts.reset_password</code> のようにして、どこで使われているのか確認して、
実際に表示させて確認しつつ翻訳しました。</p>

<p>affected_accounts は one と other で<a href="https://railsguides.jp/i18n.html#%E8%A4%87%E6%95%B0%E5%BD%A2%E5%8C%96">複数形化</a>していたのですが、
日本語にすると同じだと思ったので、
一段階浅くして共通の翻訳を使うように変更しました。</p>

<p><code>i1n-tasks add-missing -l ja</code> をした時に引用符がちょっとへんこうされてしまったのですが、
それもそのまま変更点として含めて、
<a href="https://github.com/tootsuite/mastodon/pull/1923">Add missing Japanese translations</a>
として pull request を送りました。</p>

<p><code>i18n-tasks unused -l ja</code> は本当に消して良いかどうかが不安だったので、
手をつけていません。</p>

<h2>まとめ</h2>

<p>vagrant で簡単に mastodon の開発環境を構築できました。
ただしストリーミング API はそのままだと対応していないので注意が必要そうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DNS CAA を設定した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-02-dns-caa.html"/>
    <updated>2017-04-02T15:07:30+09:00</updated>
    <id>http://blog.n-z.jp/blog/dns-caa</id>
    <content type="html"><![CDATA[<p>以前から存在は知っていただけで、利点は少ないと思って設定していなかった <a href="https://tools.ietf.org/html/rfc6844">DNS CAA</a> ですが、
<a href="https://it.srad.jp/story/17/03/17/0644247/">スラドのDNSのCAAリソース・レコード、使っていますか?</a> で
2017年9月8日以降確認が必須化される (CAA レコードの設定は必須ではない) ということを知って、
気になっていたのでいくつかのドメインで設定しました。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>DNS サーバー : bind 9.9.5</li>
</ul>


<p>CAA リソースレコードを設定するのは BIND や NSD ならどのバージョンでも良くて、
PowerDNS なら 4 以上、 Knot DNS なら 2.2.0 以上が対応しているようです。</p>

<p>不自由な DNS サーバーを使っている場合、
少なくとも Google Cloud DNS と DNSimple は対応しているようです。
他のサービスは確認できた範囲では対応していませんでした。</p>

<h2>影響範囲</h2>

<p>基本的には CA が証明書を発行するときにチェックするだけなので、
DNS の TTL の期間は CA を乗り換えられなくなる、というだけのはずです。</p>

<p>変えたくなった時も、
DNSSEC のロールオーバーのような面倒な切り替え作業も必要なくて、
レコードを変更するだけですむはずです。</p>

<p>DANE のように DNSSEC が必須ということもないので、導入も簡単です。</p>

<p>ちょっと調べただけだとわかりにくかったのですが、
<code>example.com</code> ドメインに CAA レコードを設定するだけで <code>www.example.com</code> などのサブドメインに対して有効になります。</p>

<h2>DNS レコード設定</h2>

<p><a href="https://sslmate.com/labs/caa/">CAA Record Generator</a> で雛形を作成します。</p>

<p>使い回したかったので <code>Domain name:</code> に <code>@</code> と入れたところ、設定例には <code>@.</code> で出てきてしまうので、あとで <code>@</code> だけに置き換えました。</p>

<p>最近は Let&rsquo;s Encrypt だけ使っていて、Let&rsquo;s Encrypt は Wildcard に対応していないので、
Non-Wildcard の方だけにチェックを入れました。</p>

<p>Send incident reports to (email or URL) は optional なので入れなくても良いのですが、
http サーバーを用意するのは大変そうで、メールなら簡単に設定できるので、
メインの公開しているアドレスを設定しました。
以下の例では <code>foo@example.com</code> に置き換えています。
RFC などを確認すればわかるのですが、入力欄のラベルでは明記していないので間違えそうになりますが、
メールアドレスを設定するときは <code>mailto:</code> をつけて <code>mailto:foo@example.com</code> のように URL にする必要があります。</p>

<p>すると以下のようになりました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Standard BIND Zone File
</span><span class='line'>For BIND ≥9.9.6, PowerDNS ≥4.0.0, NSD ≥4.0.1, Knot DNS ≥2.2.0
</span><span class='line'>
</span><span class='line'>@.    IN  CAA 0 issue "letsencrypt.org"
</span><span class='line'>@.    IN  CAA 0 issuewild ";"
</span><span class='line'>@.    IN  CAA 0 iodef "mailto:foo@example.com"
</span><span class='line'>Legacy Zone File (RFC 3597 Syntax)
</span><span class='line'>For BIND &lt;9.9.6, NSD &lt;4.0.1
</span><span class='line'>
</span><span class='line'>@.    IN  TYPE257 \# 22 000569737375656C657473656E63727970742E6F7267
</span><span class='line'>@.    IN  TYPE257 \# 12 0009697373756577696C643B
</span><span class='line'>@.    IN  TYPE257 \# 29 0005696F6465666D61696C746F3A666F6F406578616D706C652E636F6D
</span><span class='line'>Generic
</span><span class='line'>For Google Cloud DNS, DNSimple
</span><span class='line'>
</span><span class='line'>0 issue "letsencrypt.org"
</span><span class='line'>0 issuewild ";"
</span><span class='line'>0 iodef "mailto:foo@example.com"</span></code></pre></td></tr></table></div></figure>


<p>使っている DNS サーバーは 9.9.5 で Legacy Zone File (RFC 3597 Syntax) の書き方の方を使う必要があったので、
Standard BIND Zone File の内容をコメントとして残しておいて、
以下のように設定しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; DNS CAA
</span><span class='line'>;@      IN      CAA     0 issue "letsencrypt.org"
</span><span class='line'>;@      IN      CAA     0 issuewild ";"
</span><span class='line'>;@      IN      CAA     0 iodef "mailto:foo@example.com"
</span><span class='line'>@       IN      TYPE257 \# 22 000569737375656C657473656E63727970742E6F7267
</span><span class='line'>@       IN      TYPE257 \# 12 0009697373756577696C643B
</span><span class='line'>@       IN      TYPE257 \# 29 0005696F6465666D61696C746F3A666F6F406578616D706C652E636F6D</span></code></pre></td></tr></table></div></figure>


<h2>SSL Server Test</h2>

<p><a href="https://www.ssllabs.com/ssltest/analyze.html">SSL Server Test</a> で確認すると
DNS CAA が No から Yes になって、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>issuewild: ;
</span><span class='line'>iodef: mailto:foo@example.com
</span><span class='line'>issue: letsencrypt.org</span></code></pre></td></tr></table></div></figure>


<p>と出ていました。</p>

<h2>失敗テスト</h2>

<p>https をまだ使っていないドメインも持っていたので、すべて拒否する設定をして、
ちゃんと失敗するかどうかを試してみました。</p>

<p>zone ファイルには以下の設定を追加しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; DNS CAA
</span><span class='line'>;@      IN      CAA     0 issue ";"
</span><span class='line'>;@      IN      CAA     0 iodef "mailto:foo@example.com"
</span><span class='line'>@       IN      TYPE257 \# 8 000569737375653B
</span><span class='line'>@       IN      TYPE257 \# 29 0005696F6465666D61696C746F3A666F6F406578616D706C652E636F6D</span></code></pre></td></tr></table></div></figure>


<p>certbot では以下のようになって、ちゃんと CAA レコードによる失敗になりました。
Let&rsquo;s Encrypt の CA のソースの
<a href="https://github.com/letsencrypt/boulder/blob/8adf9d41cf0ddc141693d51f8ea01ac29d97aec0/va/va.go#L498-L515">validateChallengeAndCAA</a>
をみると CAA のチェック結果よりもチャレンジの失敗を優先しているようで、
チャレンジは成功する状態で試さないと CAA のエラーは確認できませんでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% sudo certbot certonly --webroot -w /srv/www/xxxxxxxx.example.net/htdocs -d xxxxxxxx.example.net
</span><span class='line'>                       ┌───────────────────────────────────────────────                                                                        │ Saving debug log to /var/log/letsencrypt/letsencrypt.log             │
</span><span class='line'>                       │ Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org      │
</span><span class='line'>                       │ Obtaining a new certificate                                          │
</span><span class='line'>                       │ Performing the following challenges:                                 │
</span><span class='line'>                       │ http-01 challenge for xxxxxxxx.example.net                           │
</span><span class='line'>                       │ Using the webroot path /srv/www/xxxxxxxx.example.net/htdocs for all  │
</span><span class='line'>                       │ unmatched domains.                                                   │
</span><span class='line'>                       │ Waiting for verification...                                          │
</span><span class='line'>                       │ Cleaning up challenges                                               │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       └───────────────────────────────────────────────
</span><span class='line'>Failed authorization procedure. xxxxxxxx.example.net (http-01): urn:acme:error:connection :: The server could not connec
</span><span class='line'>t to the client to verify the domain :: CAA record for xxxxxxxx.example.net prevents issuance
</span><span class='line'>
</span><span class='line'>IMPORTANT NOTES:
</span><span class='line'> - The following errors were reported by the server:
</span><span class='line'>
</span><span class='line'>   Domain: xxxxxxxx.example.net
</span><span class='line'>   Type:   connection
</span><span class='line'>   Detail: CAA record for xxxxxxxx.example.net prevents issuance
</span><span class='line'>
</span><span class='line'>   To fix these errors, please make sure that your domain name was
</span><span class='line'>   entered correctly and the DNS A record(s) for that domain
</span><span class='line'>   contain(s) the right IP address. Additionally, please check that
</span><span class='line'>   your computer has a publicly routable IP address and that no
</span><span class='line'>   firewalls are preventing the server from communicating with the
</span><span class='line'>   client. If you're using the webroot plugin, you should also verify
</span><span class='line'>   that you are serving files from the webroot path you provided.</span></code></pre></td></tr></table></div></figure>


<p>メールは届かなかったので、もうちょっと調べてみると、
letsencrypt/boulder のソースを見ても iodef に対して何か送信しているようなコードはなく、
<a href="https://forums.he.net/index.php?topic=3550.0">https://forums.he.net/index.php?topic=3550.0</a> に「currently optional/not yet supported by LE」という書き込みもあったので、
現状の Let&rsquo;s Encrypt では iodef には対応してなさそうです。</p>

<h2>まとめ</h2>

<p>現状ではすべての CA が対応しているわけではないので、利点は少ないかもしれませんが、
意図していない CA から証明書が発行される可能性が減るので、ちょっと安全になったと思いました。
(DNSSEC も設定すれば、より安全なのですが、利点よりも運用の手間の方がかかると思って導入していません。)</p>

<p>iodef 対応などはまだまだ不十分のようですが、
ちゃんと通知が来るようになれば (ほぼないと思いますが) 攻撃が検知できて面白そうです。</p>

<p>それから、新しいリソースレコードということで、既存の TXT レコードを流用している SPF と違って、
不自由な DNS サービスを使っていると設定という問題もあるので、ドメインによっては導入が難しそうです。
(SPF といえば RFC7208 で SPF リソースレコードタイプはいらなくなっているようです。
<code>named-checkconf -z</code> で <code>found SPF/TXT record but no SPF/SPF record found, add matching type SPF record</code> と出て来るので気にはなってしまうのですが。)</p>

<h2>参考サイト</h2>

<ul>
<li><a href="https://rms-digicert.ne.jp/howto/basis/caa.html">DNS CAA とは：SSL | DigiCert</a></li>
<li><a href="https://jp.globalsign.com/blog/2013/caa.html">DNS Certification Authority Authorization (CAA) | GMOグローバルサインブログ</a></li>
<li><a href="https://http2.try-and-test.net/dns_caa.html">DNSサーバのCAA設定 - Apache 2.4系でHTTP/2対応サーバを構築してみるテスト。</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[elpaのpinentry.elを試してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2017-03-25-elpa-pinentry.html"/>
    <updated>2017-03-25T12:57:57+09:00</updated>
    <id>http://blog.n-z.jp/blog/elpa-pinentry</id>
    <content type="html"><![CDATA[<p>Emacs の easypg と gnupg 2 で <code>Opening input file: Decryption failed,</code> になることの対処として、
<a href="https://elpa.gnu.org/packages/pinentry.html">ELPA の pinentry.el</a> を試してみました。</p>

<!--more-->


<h2>動作確認環境</h2>

<p>デフォルトの gpg コマンドが gnupg 2 になっている Debian 系の環境で安定版がリリースされているものということで、
yakkety を使いました。</p>

<ul>
<li>Ubuntu 16.10 (yakkety)</li>
<li>gnupg 2.1.15-1ubuntu6</li>
<li>pinentry-curses 0.9.7-5 (をリビルドしたもの)</li>
<li>emacs24 24.5+1-6ubuntu3</li>
<li>pinentry-0.1.el, 2015-Jun-12, 15.8kB</li>
</ul>


<h2>結果</h2>

<p>先に結果を書いておくと、
そのままだと動きませんでした。</p>

<p><code>pinentry</code> を <code>--disable-pinentry-emacs --disable-inside-emacs</code> なしでリビルドして試すとうまくいきました。</p>

<h2>設定反映</h2>

<p>パッケージを入れ替えたり、
<code>~/.gnupg/gpg-agent.conf</code> を書き換えた後は、
<code>gpg-connect-agent killagent /bye</code> で <code>gpg-agent</code> を終了させました。
<code>pkill gpg-agent</code> でも同じようですが、
<code>gpg-connect-agent</code> の方が正式な手順のようです。
<code>gpgconf --kill gpg-agent</code> でも終了できるようです。</p>

<h2>オリジナルパッケージでの挙動</h2>

<p><code>~/.gnupg/gpg-agent.conf</code> に <code>allow-emacs-pinentry</code> を追加すると Emacs の中どころか、
コマンドライン直接でも使えなくなりました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat ~/.gnupg/gpg-agent.conf
</span><span class='line'>allow-emacs-pinentry
</span><span class='line'>log-file /tmp/gpg-agent.log</span></code></pre></td></tr></table></div></figure>


<p>のように <code>log-file</code> も指定してみると <code>gpg -c hoge</code> で暗号化したファイルを復号しようとしたときは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% gpg hoge.gpg
</span><span class='line'>gpg: AES暗号化済みデータ
</span><span class='line'>gpg: エージェントに問題: サポートされていません
</span><span class='line'>gpg: 1 個のパスフレーズで暗号化
</span><span class='line'>gpg: 復号に失敗しました: 秘密鍵がありません</span></code></pre></td></tr></table></div></figure>


<p>となって、ログには</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2017-03-25 13:XX:XX gpg-agent[XXXXX] gpg-agent (GnuPG) 2.1.15 started
</span><span class='line'>2017-03-25 13:XX:XX gpg-agent[XXXXX] command 'GET_PASSPHRASE' failed: サポートされていません &lt;Pinentry&gt;</span></code></pre></td></tr></table></div></figure>


<p>と出ていました。</p>

<p>公開鍵で暗号化したファイルを復号しようとしたときには</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% gpg fuga.gpg
</span><span class='line'>gpg: 2048-ビットRSA鍵, ID XXXXXXXXXXXXXXXX, 日付2017-03-24に暗号化されました
</span><span class='line'>      "test@example.com"
</span><span class='line'>gpg: 公開鍵の復号に失敗しました: サポートされていません
</span><span class='line'>gpg: 復号に失敗しました: 秘密鍵がありません</span></code></pre></td></tr></table></div></figure>


<p>となって、ログには</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2017-03-25 13:XX:XX gpg-agent[XXXXX] gpg-agent (GnuPG) 2.1.15 started
</span><span class='line'>2017-03-25 13:XX:XX gpg-agent[XXXXX] failed to unprotect the secret key: サポートされていません
</span><span class='line'>2017-03-25 13:XX:XX gpg-agent[XXXXX] failed to read the secret key
</span><span class='line'>2017-03-25 13:XX:XX gpg-agent[XXXXX] command 'PKDECRYPT' failed: サポートされていません &lt;Pinentry&gt;</span></code></pre></td></tr></table></div></figure>


<p>と出ていました。</p>

<h2>パッケージのリビルド</h2>

<p>変更点としては <code>debian/rules</code> の <code>--disable-pinentry-emacs --disable-inside-emacs</code> を外して <code>pinentry-curses</code> を入れ替えただけですが、
全体の手順もメモしておきます。</p>

<ul>
<li><code>apt-get source pinentry-curses</code></li>
<li><code>sudo apt-get build-dep pinentry</code></li>
<li><code>sudo apt-get install devscripts</code></li>
<li><code>cd pinentry-0.9.7</code></li>
<li><code>vi debian/rules</code> で <code>SHARED_CONFIGS = --disable-rpath --without-libcap --disable-pinentry-emacs --disable-inside-emacs</code> を <code>SHARED_CONFIGS = --disable-rpath --without-libcap</code> に変更</li>
<li><code>debuild -uc -us -rfakeroot</code></li>
<li><code>cd ..</code></li>
<li><code>sudo dpkg -i pinentry-curses_0.9.7-5_amd64.deb</code></li>
</ul>


<h2>Emacs の設定</h2>

<p><code>M-x package-install RET pinentry RET</code> などで <code>pinentry.el</code> をインストールしておきます。</p>

<p><a href="https://elpa.gnu.org/packages/pinentry.html">GNU ELPA - pinentry</a> の説明にはありませんが、
<code>INSIDE_EMACS</code> 環境変数も設定しないと <code>pinentry-curses</code> に Emacs を開いている端末を乗っ取られて操作できなくなってしまいました。
(<code>pkill pinentry</code> で復帰できました。 <code>gpg-agent</code> も終了させたり <code>C-l</code> で再描画も必要かもしれません。)</p>

<p><code>INSIDE_EMACS</code> 環境変数は <code>M-x shell</code> では <code>Emacsのバージョン,comint</code> に自動で設定されるようなので、
<code>pinentry.el</code> はそういう環境での使用を前提として作られたのかもしれません。</p>

<p><code>(package-initialize)</code> は <code>(pinentry-start)</code> を呼ぶのに必要だったので追加しています。
起動後に <code>M-x pinentry-start</code> する時には <code>M-x package-initialize</code> は必要なかったので、
初期化の順番の問題なのだと思います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat ~/.emacs.d/init.el
</span><span class='line'>(setenv "INSIDE_EMACS" "t")
</span><span class='line'>(package-initialize)
</span><span class='line'>(pinentry-start)</span></code></pre></td></tr></table></div></figure>


<h2>pinentry.el の動作</h2>

<p>共通鍵で暗号化した <code>hoge.gpg</code> を開こうとするとミニバッファで</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>パスフレーズを入力:</span></code></pre></td></tr></table></div></figure>


<p>と聞いてきて、間違ったパスフレーズを入力すると <code>Opening input file: Decryption failed,</code> になりました。</p>

<p>正しいパスフレーズを入力すると開けました。
編集して保存は新しいパスフレーズをきいてきました。
保存した時のパスフレーズがキャッシュされているらしく、
<code>C-x C-v</code> (<code>find-alternate-file</code>) での開き直しはパスフレーズ入力なしでできました。</p>

<p>公開鍵で暗号化した <code>fuga.gpg</code> を開こうとするとミニバッファで</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>OpenPGPの秘密鍵のロックを解除するためにパスフレーズを入力してください:
</span><span class='line'>"test@example.com"
</span><span class='line'>2048ビットRSA鍵, ID XXXXXXXXXXXXXXXX,
</span><span class='line'>作成日付 2017-03-24 (主鍵ID YYYYYYYYYYYYYYYY).:</span></code></pre></td></tr></table></div></figure>


<p>のようにきいてきました。</p>

<p>何も入力せずに <code>RET</code> を押すと <code>Opening input file: Decryption failed,</code> になりました。
パスフレーズを 3 回間違えても <code>Opening input file: Decryption failed,</code> になりました。</p>

<p>正しいパスフレーズを入力すると開けました。
編集して保存や <code>C-x C-v</code> (<code>find-alternate-file</code>) での開き直しもパスフレーズ入力なしでできました。</p>

<h2>パスフレーズの入力漏れに注意</h2>

<p>オリジナルの <code>pinentry-curses</code> でも発生した問題です。</p>

<p>パスフレーズを入力せずに <code>RET</code> を押してしまうと <code>Opening input file: Decryption failed,</code> になった後、
再度開こうとしてもパスフレーズをきいてこなくて、
すぐに <code>Opening input file: Decryption failed,</code> になるようになってしまいました。
間違ったパスフレーズの場合は再度きいてくるので、
普通はそのまま <code>RET</code> は避けるようにして、
やってしまったら <code>gpg-connect-agent killagent /bye</code> などで <code>gpg-agent</code> を再起動するのが良さそうです。</p>

<p><code>gpg hoge.gpg</code> で直接空欄で OK を押してしまったときも再度きいてこなくなってすぐに</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% gpg hoge.gpg
</span><span class='line'>gpg: AES暗号化済みデータ
</span><span class='line'>gpg: gcry_kdf_derive failed: 無効なデータです
</span><span class='line'>gpg: 1 個のパスフレーズで暗号化
</span><span class='line'>gpg: 復号に失敗しました: 秘密鍵がありません</span></code></pre></td></tr></table></div></figure>


<p>になるようになってしまったので、
<code>pinentry.el</code> に限らず注意した方が良さそうです。</p>

<h2>Debian パッケージで disable されている理由</h2>

<p>debian/changelog には</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pinentry (0.9.5-2) unstable; urgency=medium
</span><span class='line'>
</span><span class='line'>  * disable emacs and emacs-fallback until we get a better description of
</span><span class='line'>    them in the upstream documentation</span></code></pre></td></tr></table></div></figure>


<p>と書いてあって、
意図的に無効にされているようです。</p>

<p>経緯としては
<a href="https://bugs.gnupg.org/gnupg/issue2034">https://bugs.gnupg.org/gnupg/issue2034</a>
や
<a href="https://bugs.debian.org/854797">https://bugs.debian.org/854797</a>
をみるのが良さそうです。</p>

<p>upstream のドキュメント不足ということで、
ちゃんとドキュメントがあれば再度有効にしてもらえそうですが、
英語ドキュメントが書ける人じゃないと根本的な解決は難しそうです。</p>

<h2>まとめ</h2>

<p>現状の Debian や Ubuntu では <code>pinentry.el</code> をそのまま使うことは難しそうです。</p>

<p>この記事に書いたように自前でリビルドしてセキュリティアップデートなどがあれば頑張ってリビルドし直すようにするか、
<a href="http://blog.n-z.jp/blog/2017-03-23-pinentry-emacs.html">pinentry-emacsを使ってみた</a>記事に書いたように、
セキュリティや Emacs の外での使い勝手などを犠牲にして <code>pinentry-emacs</code> を使うか、
ということになりそうです。</p>

<p>現状で一番良い方法は Emacs のミニバッファでの入力は諦めて、
GUI のダイアログが出てくる <code>pinentry</code> を使うことのようなので、
<code>ssh</code> で入った先の <code>emacs</code> で完結しないといけないなどの制限がなければ、
手元の Emacs と GUI の <code>pinentry</code> を組み合わせて、
リモートのファイルは TRAMP 経由で開く、
というのが良いのかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pinentry-emacsを使ってみた]]></title>
    <link href="http://blog.n-z.jp/blog/2017-03-23-pinentry-emacs.html"/>
    <updated>2017-03-23T20:30:13+09:00</updated>
    <id>http://blog.n-z.jp/blog/pinentry-emacs</id>
    <content type="html"><![CDATA[<p><code>gpg-agent</code> で <code>--allow-emacs-pinentry</code> が使えない gnupg2 の環境で、
<a href="https://github.com/ecraven/pinentry-emacs">https://github.com/ecraven/pinentry-emacs</a> を使ってみました。</p>

<!--more-->


<h2>動作確認環境</h2>

<ul>
<li>macOS Sierra 10.12.3</li>
<li>GNU Emacs 25.1.1</li>
<li>gnupg2 2.0.30_3 (Homebrew で入れたもの)</li>
</ul>


<h2>注意事項</h2>

<p><a href="https://github.com/ecraven/pinentry-emacs/blob/7c384a65eaaa37d38dbbb4e4ca89a094b498d811/README.org#emacs">README.org の末尾</a>にも
「This is probably totally insecure, and your passphrase may be leaked! Use at your own risk!」と書いてありますが、
<code>read-passwd</code> した文字列をそのまま <code>emacsclient</code> に返して、シェルスクリプトでそのまま扱っているので、
全く安全ではありません。</p>

<p>他の <code>pinentry</code> が使える時は避けることをオススメします。</p>

<h2>別の方法</h2>

<p><code>gnupg</code> が 2.1.5 以降なら <code>--allow-emacs-pinentry</code> というオプションがあるので、
<a href="https://elpa.gnu.org/packages/pinentry.html">https://elpa.gnu.org/packages/pinentry.html</a> と組み合わせて使うことをオススメします。
(<code>elpa</code> の説明によると <code>pinentry</code> も 0.9.5 以上が必要のようです。)
この方法は別途試してまた記事を書く予定です。
(2017-03-27 追記: <a href="http://blog.n-z.jp/blog/2017-03-25-elpa-pinentry.html">elpaのpinentry.elを試してみた</a> という記事を書きました。)</p>

<p>今回の環境では、
<a href="https://github.com/Homebrew/homebrew-core/blob/328a89b492b600686be41b6b69b93d7c88fb8b89/Formula/gnupg2.rb">Homebrew の gnupg2</a>
が 2.0.30 で 2.1.5 未満なので使えませんでした。</p>

<p>macOS 上なら Emacs 上で入力するよりも
<a href="http://blog.n-z.jp/blog/2016-08-20-mac-easypg-gpg2.html">OS X の Emacs で EasyPG が gpg2 で Opening input file: Decryption failed, になったので対処した</a>記事に書いた
<code>pinentry-mac</code> を使うのがオススメです。</p>

<h2>設定</h2>

<h3>gpg-agent の設定</h3>

<p><code>~/.gnupg/gpg-agent.conf</code> がなければ作成して、以下の設定を入れておきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pinentry-program /path/to/github.com/ecraven/pinentry-emacs/pinentry-emacs</span></code></pre></td></tr></table></div></figure>


<h3>emacs の設定</h3>

<p>README.org に書いてあるように <code>~/.emacs.d/init.el</code> に</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defun pinentry-emacs (desc prompt ok error)
</span><span class='line'>  (let ((str (read-passwd (concat (replace-regexp-in-string "%22" "\"" (replace-regexp-in-string "%0A" "\n" desc)) prompt ": "))))
</span><span class='line'>    str))</span></code></pre></td></tr></table></div></figure>


<p>を追加しておきます。</p>

<p><code>emacsclient</code> コマンドで <code>pinentry-emacs</code> 関数を呼んでいるので、
<code>(server-start)</code> も (README.org には書いていませんが) 必要です。</p>

<h2>動作確認</h2>

<p>Emacs の中で <code>*.gpg</code> ファイルを開いてみたり、
端末上でパスフレーズの必要な <code>gpg</code> コマンドを実行してみたりして、
<code>(server-start)</code> した Emacs の mini buffer でパスフレーズがきかれるのを確認します。</p>

<h2>fallback 動作</h2>

<p><code>emacsclient</code> の呼び出しが <code>sed</code> に <a href="https://github.com/ecraven/pinentry-emacs/blob/7c384a65eaaa37d38dbbb4e4ca89a094b498d811/pinentry-emacs#L24">pipe されている</a> ので、
<a href="https://github.com/ecraven/pinentry-emacs/pull/5">Fix fallback when emacsclient failed</a>
のパッチをあてないと fallback してくれないようです。
(取り込まれたらブロク記事を書こうと思っていたのですが、取り込まれないようなのでもう書くことにしました。)</p>

<p>さらに別途 <code>pinentry-emacs</code> ディレクトリにパスを通しておくか、
<code>pinentry-emacs</code> ファイルの先頭で <code>PATH=$PATH:$(dirname "$0")</code> などとしてパスを通さないと
<code>lukspinentry</code> の実行に失敗して fallback してくれません。</p>

<p>さらに、端末上で <code>gpg</code> コマンドを実行したとしても、
<code>pinentry</code> プログラムは <code>gpg-agent</code> から起動される
(プログラム間の関係は <a href="http://miniconf.debian.or.jp/assets/files/gnupg-now.html">http://miniconf.debian.or.jp/assets/files/gnupg-now.html</a> の GnuPG programs (2) 参照)
ので、
<code>tty</code> が「<code>not a tty</code>」を返すらしく、
<code>pinentry-curses --ttyname not a tty</code>
が実行されていて fallback もうまくいきません。</p>

<p>なので、
fallback 動作は期待せず、
パッチもあてず、
<code>pinentry-emacs</code> を使うなら
必ず Emacs は起動しておく、
という運用が良さそうです。</p>

<h2>まとめ</h2>

<p><code>pinentry-emacs</code> を試してみましたが、
制限事項も多く、
修正も期待できないため、
別のもっと良い <code>pinentry</code> が使える場合は、
他のものを使うことをオススメします。</p>

<p>他の手段がない時の最終手段としては、知っておいても良いのではないかと思いました。</p>

<p>ちなみに自分の環境では、
<code>pinentry-mac</code> に戻してしまっていて、
<code>pinentry-emacs</code> は使っていません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 121 回関西 Debian 勉強会 (10 周年記念会) に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-03-19-kansai-debian-meeting.html"/>
    <updated>2017-03-19T13:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20170319" title="第 121 回 関西 Debian 勉強会 (10 周年記念会)">第 121 回 関西 Debian 勉強会 (10 周年記念会)</a>
に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<p>初めての場所だったので、迷うかと思いましたが、迷ったのは建物の入り口ぐらいで、
駅にも案内があったので、ほとんど迷わずにたどり着けました。</p>

<p>参加者は 13 名で、参加費は 150 円でした。</p>

<h2>オープニングなど</h2>

<ul>
<li><a href="https://twitter.com/search?q=%23kansaidebian&amp;src=typd">ハッシュタグは #kansaidebian</a></li>
<li>祝10周年</li>
<li>事前課題発表</li>
</ul>


<p>見つかったメモ的に、第 2 回からということにしておいたけど、詳しいことは覚えていないだけで、最初から参加していた気もするし、もっと詳しく調べてみないと本当のところは不明。</p>

<h2>休憩</h2>

<h2>Debian Developer になるのに何をしたかと勉強会の Design</h2>

<ul>
<li>やぶきさん</li>
<li>自己紹介</li>
<li>どうして関西 Debian 勉強会を立ち上げたのか</li>
<li>Debian Developer になりたかった理由</li>
<li>他人の批判を受けることも大事</li>
<li>巨人の肩に乗る</li>
<li><a href="http://amzn.to/2n9ZMtB">情熱プログラマー</a>という本</li>
<li>「いちばんのへたくそになろう」</li>
<li>どうしたら英語でコミュニケーションできる</li>
<li>海外の conf に参加してモチベーションを保っていた</li>
<li>自分のやる気を保つポイントは探らないとわからない</li>
<li>分割統治法</li>
<li>勉強会の Design として考慮したこと</li>
<li><a href="http://amzn.to/2mInFoM">コンサルタントの秘密</a> という本を参考にした</li>
<li>「プレスコットのピックルス原理」「漬け水がキュウリに漬かるよりは、キュウリが漬け水に漬かる方が早い」</li>
<li>3の法則</li>
<li>「自分の計画を駄目にする原因が3つ考えられないようなら、思考過程の方に問題がある」</li>
<li>規模のジレンマ</li>
<li>人が集まる質とサイズによって、非線形的に集まりの様相は異なる。</li>
<li>「ラズベリー・ジャムの法則」（広げようとすれば、するほど薄くなる）</li>
<li><a href="http://amzn.to/2mIf1qo">Becoming a Technical Leader</a> (原著)</li>
<li>日本語題: <a href="http://amzn.to/2n9TLNn">スーパーエンジニアへの道―技術リーダーシップの人間学</a></li>
<li>ある意味、コミュニティを作っていく指針でもある。</li>
<li>動機づけ、アイディア、組織化</li>
<li>技術コミュニティ活動だが、技術の話をするのは当然でも、社会学的アプローチ、組織論的アプローチして、勉強会を回して見たかった。</li>
<li>自分の立ち位置は、見晴らしがいい場所か?</li>
<li>質疑応答</li>
<li>本の紹介</li>
<li><a href="http://amzn.to/2mInFoM">コンサルタントの秘密</a></li>
<li><a href="http://amzn.to/2mWH32j">Fearless Change アジャイルに効く アイデアを組織に広めるための48のパターン</a></li>
</ul>


<h2>10年間の振り返り</h2>

<ul>
<li>たかやさん</li>
<li>自己紹介</li>
<li>担当者の悩み</li>
<li>場所の確保</li>
<li>定期的な場所の確保の難しさ</li>
<li>交通の便</li>
<li>電源やプロジェクタなどの費用</li>
<li>Google Map で場所の一覧を作っていた</li>
<li>講師の先生の確保 ネタが難しい</li>
<li>自分のスキルの向上</li>
<li>Debian って充実している</li>
<li>仕方がないので emacs 関係のパッケージを</li>
<li>(navi2ch, jd などは proxy を使わないと見えなくなっているらしい)</li>
<li>今後の関わり方</li>
<li>パッケージ初心者ネタ大歓迎です</li>
</ul>


<h2>休憩</h2>

<h2>宴会</h2>

<p>過去の開催の記録 (参加者数や発表タイトルなどの表) を見ながらの話をしながら軽食(
<a href="https://twitter.com/murase_syuka/status/843350811375632384">https://twitter.com/murase_syuka/status/843350811375632384</a>
<a href="https://twitter.com/rarewin/status/843355875276394497">https://twitter.com/rarewin/status/843355875276394497</a>
)。</p>

<p>もくもくしすぎな年があって、一度止まってしまうと再開するのが大変なので、とりあえず定期開催していたのは大事だったのではないかという話が印象的でした。</p>

<h2>懇親会</h2>

<p>主に懇親会前後の移動中に関西 Debian 勉強会で相談したかった話ができたので良かった。</p>

<p>懇親会に使った店では烏龍茶はおかわり自由だったらしく、別のテーブルの人たちはそれで烏龍茶を頼みまくっていて、軽食を食べていたので全体としてもあまり食べなかったからか、安かったらしい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第77回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-03-04-rubykansai77.html"/>
    <updated>2017-03-04T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai77</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/58025" title="第77回 Ruby関西 勉強会">第77回 Ruby関西 勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<ul>
<li>地図が最初はグランフロントをさしていた。(昨晩直しました。) (doorkeeper のシステムで住所を変えただけど、地図の方は変わらないらしい。)</li>
<li>会場はヒルトンプラザウエストで、ヒルトンプラザイーストとどちらなのかわかりにくい。</li>
<li>工事中が多くて場所がわかっていてもたどり着きにくかったらしい。</li>
</ul>


<h2>最適化のやり方</h2>

<ul>
<li><a href="http://oke-ya.com/devil.html">あくまのおしごと</a>の宣伝</li>
<li>KEN_ALL.CSV を読み込んで東西南北を含む行をカウントするプログラムを例に</li>
<li>最初に全部読んでメモリ上にのせて <code>each_line</code> (メモリ効率を気にするなら元の <code>open</code> 中に <code>f.gets</code> の方が良さそう)</li>
<li>配列を find せずに Hash を使う</li>
<li>配列に対象行をためていって length をとるのではなく数値でカウント</li>
<li>同じメソッド呼び出しをローカル変数に代入して減らす</li>
<li><code>sort</code> から <code>sort_by</code></li>
<li>早すぎる最適化はするべきではない</li>
<li>気をつけるポイント</li>
<li>IO はなるべく短く</li>
<li>データ構造(もたせ方)を工夫する</li>
<li>ループの中でオブジェクトをなるべく作らない</li>
<li>文字列、配列、ハッシュは数値やシンボルとくらべてメモリ消費量が多い点を心得ておく</li>
<li>質疑応答</li>
<li>データが大きい時や大きさがわからないときは一気に読まない方が良さそう</li>
<li>SQL にあるような何行かごとに処理というのは専用のメソッドはなさそう</li>
<li><code>/北|南|東|西/</code> は <code>/[北南東西]/</code> の方が良いのではないかというツッコミ</li>
<li>西東京みたいなのは西と東でカウントされるのかという話 - 片方しかカウントされない実装になっていた。</li>
<li>カウント対象は限定されているので、ループの中で <code>||=</code> で初期化するのではなく <code>{"北" =&gt; 0}'</code> のように初期値をもつのもあり。 <code>Hash.new { 0 }</code> のような方法もあり。</li>
<li>最後にもう一度、<a href="http://oke-ya.com/devil.html">あくまのおしごと</a>の宣伝</li>
<li><a href="https://www.slideshare.net/yalab/ruby-72795596">Rubyコードの最適化</a></li>
</ul>


<h2>Rails 5.1.0.beta1はどのようにモダンなJavaScript開発を実現しているのか？</h2>

<ul>
<li>webpacker gem を使ったデモ</li>
<li><code>bundle exec rails webpacker:install:react</code></li>
<li>config/webpack/shared.js でビルドする対象を指定</li>
<li>bin/webpack-dev-server は localhost:8080 で待ち受ける express のサーバー</li>
<li>bin/webpack は public 以下に出力</li>
<li><code>javascript_pack_tag</code> の実装確認</li>
<li><code>dev_server_host</code> が設定されていればそこから、なければ digest もしくは直接</li>
<li>質疑応答</li>
<li>フロントエンドを知らない人は sprockets で良いのではないか</li>
<li>sprockets と webpacker の違い</li>
<li>deploy するときは? webpacker-dev-server ではなく、 webpack で public 以下に生成する</li>
<li>情報源は? rails guide などにはまだ。 master でもまだ変化が続いている。</li>
<li>スタイルシートはコンパイルしてくれないのか? 現状デフォルトで生成される config では対象ではない。 webpack の知識があって設定すれば可能。</li>
<li><a href="https://speakerdeck.com/chimame/rails-5-dot-1-0-dot-beta1hadofalseyounimodannajavascriptkai-fa-woshi-xian-siteirufalseka">Rails 5.1.0.beta1はどのようにモダンなJavaScript開発を実現しているのか？ // Speaker Deck</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li>14:20 まで</li>
</ul>


<h2>Welcome to tebukuro</h2>

<ul>
<li>tebukuro とは</li>
<li>イベント、チケット管理サービス</li>
<li>Shinosaka.rb のプロダクト</li>
<li>なぜ tebukuro</li>
<li>既存サービスへの不満</li>
<li>使っているもの</li>
<li>rails</li>
<li>postgresql</li>
<li>node.js など</li>
<li>CI: Wercker から Jenkins に移行中</li>
<li>開発環境は docker compose</li>
<li>本番環境も docker</li>
<li>Dcoker を使う理由</li>
<li>コンテナ指向でシンプルに保てる</li>
<li>どの環境でも動作する</li>
<li>スケーラブル: コンテナ単位で可能</li>
<li>GCP</li>
<li>なぜOSSなのか</li>
<li>開発方法も他のOSSと同じ</li>
<li>OSS開発の敷居をさげるための素振りもできる</li>
<li>英語の勉強もできちゃう</li>
<li>もう一つのねらい</li>
<li>betaやalphaのライブラリを積極的に採用</li>
<li>バグを踏んでライブラリへのPRチャンスを作る</li>
<li>PRとはいかずともissue報告はできる</li>
<li>目指すコミュニティ</li>
<li><a href="https://github.com/shinosakarb/tebukuro">https://github.com/shinosakarb/tebukuro</a></li>
</ul>


<h2>Create React App ではじめる Rails の SPA</h2>

<ul>
<li>ライブコーディング</li>
<li>実装を見ると <code>.html</code> が <code>index.html</code> より優先されるっぽい</li>
<li>RFC とかは単語が一般的すぎて見つけられなかったというコネタ</li>
<li>(後で <a href="https://www.rfc-editor.org/retrieve/bulk/">https://www.rfc-editor.org/retrieve/bulk/</a> からダウンロードして txt ファイルを index.html で検索してみたけど、書いてなさそうだった。調べていた時に思い出したけど IIS は index ではなかった (確認したら default だった) ので RFC に書かれている可能性は低そう)</li>
<li>yarn は yarnpkg コマンドの方が主流になるかもしれないらしい</li>
<li>react-router-dom</li>
<li>公式サイトは v4 系のドキュメントになっている</li>
<li>webpack も公式サイトは 2 系のドキュメントになっていて 1 系はではないらしい</li>
<li>react-router-dom が beta7 になっていて、公式サイトのデモが beta6 では動かなかった。</li>
<li>時間がなかったので、 OAuth との組み合わせは完成版でデモ</li>
</ul>


<h2>Rubyのオススメの機能７選</h2>

<ul>
<li><a href="http://qiita.com/cuzic/items/a265f140fdff289d5c07">Ruby のオススメの機能７選</a></li>
<li><code>Enumerator.new</code></li>
<li><code>Object#tap</code></li>
<li><code>Float::INFINITY</code></li>
<li><code>Enumerable#each_slice</code></li>
<li><code>Array#shelljoin</code></li>
<li>(単純に実行するだけなら複数引数の <code>system</code> などを使った方が良さそうと思っていたけど、多段 ssh とかの時には確かに良さそう。)</li>
<li><code>SecureRandom.hex</code></li>
<li>Flip Flop 演算子</li>
<li>質疑応答</li>
<li>配列に <code>with_index(1)</code> は使えないので、<code>each.with_index(1)</code> にする必要がある</li>
<li><code>each_with_index</code> だと初期値を指定できないので、この場合は使えない</li>
</ul>


<h2>Ruby初級者向けレッスン &mdash; ブロック</h2>

<p>初心者の人は少なかった。
告知タイミングなどの問題で、スタッフの人が多かった。</p>

<p>追加して <code>self</code> が欲しい時は <code>Array#&lt;&lt;</code> とか <code>Hash#update</code> とか。</p>

<h2>クロージング</h2>

<ul>
<li><a href="https://rails-follow-up-osaka.doorkeeper.jp/events/58097">Rails Follow-up Osaka #7</a></li>
<li><a href="https://rubykansai.doorkeeper.jp/events/57723">関西Ruby会議2017 CFP</a>募集中</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSS Gate大阪ワークショップ2017-02-25に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-02-25-oss-gate-workshop.html"/>
    <updated>2017-02-25T23:59:59+09:00</updated>
    <id>http://blog.n-z.jp/blog/oss-gate-workshop</id>
    <content type="html"><![CDATA[<p><a href="https://oss-gate.doorkeeper.jp/events/56141" title="OSS Gate大阪ワークショップ2017-02-25">OSS Gate大阪ワークショップ2017-02-25</a>にメンターとして参加しました。</p>

<!--more-->


<h2>事前準備</h2>

<p>ざっと見て大丈夫そうだったので、細かくチェックしていなかったのですが、
<a href="https://oss-gate.doorkeeper.jp/events/56141" title="イベントページ">イベントページ</a>
に書いてある説明や、
そこからリンクされている
<a href="https://github.com/oss-gate/workshop/blob/master/tutorial/scenario.md#%E3%82%B7%E3%83%8A%E3%83%AA%E3%82%AA" title="シナリオ">シナリオ</a>
などは事前に見ておくと流れがわかって良さそうだと
後から思いました。</p>

<h2>移動</h2>

<p>最寄駅をちゃんとチェックしていなくて、
本町駅に行ってしまって、
ちょっと歩きました。
時間に余裕を持って出発していたので、
開始には間に合いました。</p>

<h2>準備</h2>

<p>ビギナーの横に少なくとも一人はメンターがいるようになるように席がある程度決まっていて、
無線LANの設定をしたりしながら開始を待っていました。</p>

<p>最初、無線LANに繋がるのにIPアドレスが割り振られないという状況になっていて、
ちゃんと繋がるまで少し時間がかかりましたが、問題なく始まりました。</p>

<h2>アイスブレイク</h2>

<p>ある程度、説明があった後、アイスブレイクとして4,5人のグループで軽く話をしました。
このグループ分けはこの時だけのものだったらしく、
後は個別にわかれていました。</p>

<h2>対象OSSの決定</h2>

<p>対象とする OSS をビギナーの人が決めるというのが最初にありました。</p>

<p>デモとして、隣にいたビギナーの人が呼ばれて、
前で決めていました。</p>

<p>席に戻ってきて、一緒に確認してみると、
前に出てひっかかることがあるといっていた OSS は環境依存の問題っぽい感じで、
結局他の OSS を選び直していました。</p>

<h2>対象OSSを動かす</h2>

<p>これは最初のデモで決まった OSS を例に進行役の人が
実際に細かくメモを取りつつ動かしてみるというデモをした後、
各自動かしてみるということをしていました。</p>

<p>その手順の中にライセンスが OSS かどうかを確認するというのが入っていました。
ライセンスの話はちゃんとするとそれだけで時間がかかってしまうので、
難しいところだと思いました。</p>

<p>担当していたビギナーの人は、
その時々の心情も含めて記録していて、
ちゃんとできていてすごいなと思って見ていました。</p>

<p>答えを先に言ってしまうのはよくないということだったはずなので、
知っていることでもほとんど口を挟まずに見ていました。
この辺りの加減は何度か参加して見ないとわからなそうな気がしました。</p>

<h2>休憩</h2>

<p>おやつ休憩が入りました。</p>

<h2>ミニふりかえり</h2>

<p>進行役の人が順番を間違えていたらしく、
休憩の後にミニふりかえりが入りました。</p>

<p>3列あったテーブルごとにほぼ同じペア数だったので、
ぐるっと回転するようにメンターが入れ替わって説明を聞く、
ということをしました。</p>

<p>担当しているビギナー以外の他のビギナーの人が何をやっているかというのは、
基本的にはふりかえりのタイミングしか聞く機会がないようなので、
興味深く聞きました。
ここがフィードバックできるポイントかも、という点も見つけられました。</p>

<h2>プロジェクトにフィードバックする</h2>

<p>時間配分のミスがあったらしく、2時間の予定が1時間になってしまっていたそうです。</p>

<p>担当していたビギナーの人は、この時間で、自分の言葉で書く、報告用にまとめ直す、
他の issues を見て英語にしなくても日本語のままの報告で良さそうという確認、
というところまでできていました。</p>

<h2>ふりかえり</h2>

<p>ミニふりかえりの時とは逆回りに入れ替わって、
またビギナーの人が何をやったのか話を聞きました。</p>

<p>ドキュメントの修正の pull request をすると良いのでは、
(明確な修正だと複雑な英語でのやりとりも発生しないので楽)
という話をしました。</p>

<h2>まとめ、アンケート記入</h2>

<p>まとめの話とアンケート記入がありました。</p>

<p>アンケート記入は <a href="https://github.com/oss-gate/workshop">https://github.com/oss-gate/workshop</a> を fork して
tutorial/retrospectives/2017-02-25-osaka の beginner.yaml や mentor.yaml をコピーして pull request を送る、
という方法でした。</p>

<p>YAML の文法エラーはマージする進行役の人が直すから細かいことは気にしないで良いということでした。</p>

<h2>ワークショップのふりかえり</h2>

<p>アンケート結果を見ながらふりかえりをしました。</p>

<p>関西も次回からは、進行役の人も関西の人でやる必要があるということで、
メンター用のアンケートの「進行役をできそうか」で
「何人かでフォローしあえばやれそう」が多かったので、
何人かで分担しながらやることになりそうな気がしました。</p>

<p>アンケート結果の表示には <code>aggregate.rb</code> というのを使っていたように見えたので、
たぶん <code>tutorial/retrospectives/aggregate.rb</code> を実行していたのだろうと思いました。</p>

<h2>最後に</h2>

<p>テーブルの移動などをして、宣伝用の集合写真を撮って終わりました。</p>

<h2>終わった後</h2>

<p>終わった後は、用事があったので、懇親会には参加せずにそのまま帰りました。</p>

<p>用事は梅田で時間が少し空いていて微妙だったので、
梅田まで歩いて帰ったところ、
ちょうど良いぐらいの時間になりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語のsync.WaitGroupで出力待ち]]></title>
    <link href="http://blog.n-z.jp/blog/2017-02-22-golang-waitgroup.html"/>
    <updated>2017-02-22T22:22:22+09:00</updated>
    <id>http://blog.n-z.jp/blog/golang-waitgroup</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2017-02-19-golang-windows-gui.html">先日作ったアプリ</a>で、
<code>cmd.Wait()</code>
の前に出力待ちができていなくて困っていたのですが、
<a href="http://amzn.to/2l3wZ5L">みんなのGo言語【現場で使える実践テクニック】</a>という本に <code>sync.WaitGroup</code> というのを知ったので使ってみました。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li><code>go version go1.8 darwin/amd64</code></li>
</ul>


<h2><code>sync.WaitGroup</code> の追加</h2>

<p>呼び出し側は以下のように追加しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var wg sync.WaitGroup
</span><span class='line'>wg.Add(2)
</span><span class='line'>go processLinesShiftJIS(stdoutHandler, stdout, &wg)
</span><span class='line'>go processLinesShiftJIS(stderrHandler, stderr, &wg)
</span><span class='line'>wg.Wait()</span></code></pre></td></tr></table></div></figure>


<p>呼び出される側では、以下のように最後に <code>wg.Done()</code> を呼ぶようにしました。
記事を書いていて気づいたのですが、途中で抜ける可能性を考えて、 <code>defer</code> を使った方が良さそうです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func processLinesShiftJIS(lineProcessor func(string), r io.Reader, wg *sync.WaitGroup) {
</span><span class='line'>  // ...処理...
</span><span class='line'>  wg.Done()
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>動かなかったコード</h2>

<p>最初は <code>func processLinesShiftJIS(lineProcessor func(string), r io.Reader, wg sync.WaitGroup)</code> で受け取って <code>go processLinesShiftJIS(stdoutHandler, stdout, wg)</code> で呼び出していました。</p>

<p>これだと、<code>WaitGroup</code> のコピーで <code>Done()</code> が呼ばれてしまって、元の <code>WaitGroup</code> のカウントが減らずにうまく動きませんでした。</p>

<p>本に書いてあった例やネットで見つけた例は同じスコープで使っているものばかりだったので
わからなかったのですが、
ちゃんとポインタを渡す必要があるようです。</p>

<h2>関連コード全体</h2>

<p>全体としては関係する部分の <a href="https://github.com/znz/winipset/blob/cb4a80ebdaf3c1492bb81f0654424205cf8aa87e/winipset.go">winipset.go</a> を以下のように変更しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func processLinesShiftJIS(lineProcessor func(string), r io.Reader, wg *sync.WaitGroup) {
</span><span class='line'>  decoder := japanese.ShiftJIS.NewDecoder()
</span><span class='line'>  scanner := bufio.NewScanner(decoder.Reader(r))
</span><span class='line'>  for scanner.Scan() {
</span><span class='line'>      line := scanner.Text()
</span><span class='line'>      lineProcessor(line)
</span><span class='line'>  }
</span><span class='line'>  wg.Done()
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func runCommand(stdoutHandler, stderrHandler func(string), name string, arg ...string) (err error) {
</span><span class='line'>  cmd := exec.Command(name, arg...)
</span><span class='line'>  cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
</span><span class='line'>  stdout, err := cmd.StdoutPipe()
</span><span class='line'>  if err != nil {
</span><span class='line'>      log.Println("StdoutPipe:", err)
</span><span class='line'>      return
</span><span class='line'>  }
</span><span class='line'>  stderr, err := cmd.StderrPipe()
</span><span class='line'>  if err != nil {
</span><span class='line'>      log.Println("StderrPipe:", err)
</span><span class='line'>      return
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  err = cmd.Start()
</span><span class='line'>  if err != nil {
</span><span class='line'>      log.Println("Start:", err)
</span><span class='line'>      return
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  var wg sync.WaitGroup
</span><span class='line'>  wg.Add(2)
</span><span class='line'>  go processLinesShiftJIS(stdoutHandler, stdout, &wg)
</span><span class='line'>  go processLinesShiftJIS(stderrHandler, stderr, &wg)
</span><span class='line'>  wg.Wait()
</span><span class='line'>
</span><span class='line'>  err = cmd.Wait()
</span><span class='line'>  if err != nil {
</span><span class='line'>      log.Println("Wait:", err)
</span><span class='line'>      return
</span><span class='line'>  }
</span><span class='line'>  return nil
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>同期方法の確認</h2>

<p>この同期方法で問題が起きなかった <code>cmd.Wait()</code> を呼ばないと <code>wg.Done()</code> が呼ばれないということはなかった、という点と、
出力をちゃんと読んだ後で <code>cmd.Wait()</code> を呼べるようになったという点で、この方法で大丈夫だということがわかりました。</p>

<h2>まとめ</h2>

<p><code>sync.WaitGroup</code> を他の関数へ受け渡す時に失敗してしまうと同期に失敗してしまうことがありましたが、
簡単に同期が取れて、使いやすい仕組みだと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語でWindowsのnetshラッパーのGUIアプリを作った]]></title>
    <link href="http://blog.n-z.jp/blog/2017-02-19-golang-windows-gui.html"/>
    <updated>2017-02-19T19:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/golang-windows-gui</id>
    <content type="html"><![CDATA[<p>インテリジェントスイッチングハブなどのネットワーク機器の設定をする時に、
Windows だといちいちコントロールパネルを辿ってアダプター一覧を表示して、
そこから UAC の権限昇格 (環境によってはパスワード入力が必要) を挟んでプロパティを開いて、
IPv4 の設定を開いて変更して閉じて行って反映、という作業が大変だったので、
<code>netsh</code> を呼び出して<a href="https://github.com/znz/winipset">省力化する GUI アプリ</a>を作りました。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>開発環境: go version go1.7.5 darwin/amd64 (Homebrew で入れた go)</li>
<li>動作対象環境: Windows 7 などの Windows 環境</li>
</ul>


<h2>GUI ツールキットの選定</h2>

<p>開発環境を Windows に入れたくなかった (配布先のユーザーの環境に近い環境にしておきたかった) のと、確実に1バイナリで配布がすみそうということで、
最終的には <a href="http://qiita.com/alucky0707/items/b066ccd2ff8517cf79fb">WindowsでGo言語でGUIするにはWALKがいいかもしれない</a> の記事をみて <a href="https://github.com/lxn/walk">A Windows GUI toolkit for the Go Programming Language (WALK)</a> に決めました。</p>

<h2>go get walk</h2>

<p>現状は <a href="https://github.com/lxn/walk/issues/237">https://github.com/lxn/walk/issues/237</a> に報告されているように</p>

<pre><code>%  GOPATH=/tmp/g GOOS=windows go get github.com/lxn/walk
# github.com/lxn/walk
/tmp/g/src/github.com/lxn/walk/splitterlayout.go:314: undefined: sort.SliceStable
</code></pre>

<p>というエラーになるので、</p>

<pre><code>% cd $GOPATH/src/github.com/lxn/walk
% git log -p master
</code></pre>

<p>で <code>sort.SliceStable</code> が入った直前のコミットを探して、</p>

<pre><code>% git checkout 5c627b7fa8fb66c201b0273609c61c8117e45bb0
% cd -
%  GOPATH=/tmp/g GOOS=windows go get github.com/lxn/walk
</code></pre>

<p>のようにちょっと古い WALK を使っています。</p>

<h2>サンプルなどで動作確認</h2>

<p>Qiita の記事の例を動かして見たり、<code>github.com/lxn/walk</code> の <code>examples</code> を参考にしてどんな感じなのか確かめました。</p>

<p>README などに書いてあるように <code>-ldflags="-H windowsgui"</code> をつけて、</p>

<pre><code>GOOS=windows go build -ldflags="-H windowsgui"
</code></pre>

<p>でコマンドプロンプトの出ない GUI アプリが作成できました。</p>

<h2>manifest 作成</h2>

<p>walk の README には</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
</span><span class='line'>    &lt;assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"&gt;
</span><span class='line'>        &lt;assemblyIdentity version="1.0.0.0" processorArchitecture="*" name="SomeFunkyNameHere" type="win32"/&gt;
</span><span class='line'>        &lt;dependency&gt;
</span><span class='line'>            &lt;dependentAssembly&gt;
</span><span class='line'>                &lt;assemblyIdentity type="win32" name="Microsoft.Windows.Common-Controls" version="6.0.0.0" processorArchitecture="*" publicKeyToken="6595b64144ccf1df" language="*"/&gt;
</span><span class='line'>            &lt;/dependentAssembly&gt;
</span><span class='line'>        &lt;/dependency&gt;
</span><span class='line'>    &lt;/assembly&gt;</span></code></pre></td></tr></table></div></figure>


<p>と書いてありますが、</p>

<p><code>examples</code> 以下から dpiAware の設定も入っている manifest をコピーしてくるのが良さそうです。
コピーしてくると BOM もついているようです。</p>

<p><code>name="SomeFunkyNameHere"</code> は書き換えた方が良いのかと思ったのですが、
<code>examples</code> 以下では全て同じだったので、別に書き換えなくても良いようです。</p>

<h2>manifest 変更</h2>

<p>これは後でやったことなのですが、
<code>netsh</code> で IP アドレスなどの設定を変更するには、
ローカルの Network Configuration Operators のグループの権限が必要なので、
<a href="http://www.atmarkit.co.jp/fdotnet/dotnettips/958uacmanifest/uacmanifest.html">常に管理者としてアプリケーションを実行させるには？</a>
を参考にして、
自動で UAC の要求をするように以下の設定を追加しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;trustInfo xmlns="urn:schemas-microsoft-com:asm.v2"&gt;
</span><span class='line'>  &lt;security&gt;
</span><span class='line'>      &lt;requestedPrivileges xmlns="urn:schemas-microsoft-com:asm.v3"&gt;
</span><span class='line'>          &lt;requestedExecutionLevel level="highestAvailable" uiAccess="false" /&gt;
</span><span class='line'>      &lt;/requestedPrivileges&gt;
</span><span class='line'>  &lt;/security&gt;
</span><span class='line'>&lt;/trustInfo&gt;</span></code></pre></td></tr></table></div></figure>


<p>これでドメイン環境で Administrators 権限が得られなくても、
自分のアカウントがローカルの Network Configuration Operators グループに所属していれば、
UAC で自分のアカウントのパスワードを入力すれば IP アドレスの変更ができるようになります。
(変更ができるのはコントロールパネルの方からでも <code>netsh</code> (を使うこのアプリ) でも。)</p>

<h2>manifest のコンパイル</h2>

<p><code>rsrc</code> を実行するのはビルド側なので GOOS の指定は不要です。</p>

<pre><code>% go get github.com/akavel/rsrc
% $GOPATH/bin/rsrc -manifest test.manifest -o rsrc.syso
Manifest ID:  1
</code></pre>

<p><code>rsrc.syso</code> がある状態で</p>

<pre><code>GOOS=windows go build -ldflags="-H windowsgui"
</code></pre>

<p>すると作成される <code>exe</code> ファイルのサイズがちょっと増えていました。</p>

<p><code>rsrc.syso</code> ファイルを取り込ませる必要があるので、
<code>go build test.go</code> などのようにファイル指定での <code>go build</code> は避ける必要があるようです。</p>

<p><a href="http://d.hatena.ne.jp/hake/20150816/p1">Go言語でGUIプログラム on Windows - はけの徒然日記</a> によると
<code>-ldflags="-s -H windowsgui"</code> で strip をかけてサイズを縮小するという方法もあるようです。</p>

<h2>netsh の実行</h2>

<p><a href="http://www.atmarkit.co.jp/ait/articles/1002/05/news097.html">WindowsのnetshコマンドでTCP/IPのパラメータを設定する</a>
などを参考にすると以下のコマンドを使えば良いことがわかります。</p>

<ul>
<li><code>netsh interface ip show interfaces</code></li>
<li><code>netsh interface ip set address "ローカル エリア接続" dhcp</code></li>
<li><code>netsh interface ip set address "ローカル エリア接続" static 192.168.20.2 255.255.255.0</code></li>
</ul>


<p><code>show interfaces</code> で一覧を取得して、
<code>dhcp</code> で DHCP に戻す、
<code>static</code> で固定 IP アドレス設定です。</p>

<p>ルーターやインテリジェントスイッチングハブに直結して設定する用途を想定しているので、
ネットマスクは <code>255.255.255.0</code> 固定で、ゲートウェイなどは設定しません。</p>

<p>まず、Go 言語から呼び出す前に、管理者権限のコマンドプロンプトで実行して期待する動作をするのを確認しました。</p>

<p>ただし、DHCP に戻すのは、なぜかイーサネットケーブルを接続した状態じゃないとエラーになって戻せませんでした。
コントロールパネルだと戻せるので謎挙動です。</p>

<h2>ログ表示</h2>

<p><code>examples/logview</code> が便利そうだったので、そのまま使うことにしました。</p>

<p><code>NewLogView</code> に <code>MainWindow</code> のインスタンスを渡すと、
自動で一番下に追加されたので、これでいいとおもってそのまま使いました。</p>

<p><code>log.Fatal</code> はプログラムが終了してしまって意味がないので、
<code>log.Println</code> や <code>log.Printf</code> だけ使いました。</p>

<h2>外部コマンド実行</h2>

<p><a href="http://qiita.com/hnakamur/items/9701f40c1fec83b1cd1f">Goで外部コマンドを実行して出力をリアルタイム表示するサンプル</a>などを参考にして、
<code>StdoutPipe</code> と <code>StderrPipe</code> を使いました。</p>

<p><a href="https://golang.org/pkg/os/exec/#Cmd.StdoutPipe">https://golang.org/pkg/os/exec/#Cmd.StdoutPipe</a> や <a href="https://golang.org/pkg/os/exec/#Cmd.StderrPipe">https://golang.org/pkg/os/exec/#Cmd.StderrPipe</a> には <code>Wait</code> を呼ぶ前に
全部 <code>read</code> しろと書いてあるように思うのですが、
この Qiita の記事のやり方でそれが保証されているかどうかわからなかったのと、
読み込みの goroutine がちゃんと終了するのかどうかがわからなかったのですが、
間違っていても、多少メッセージが抜けたり、リソースがリークするだけで
機能自体に大きな問題はないと判断して、この方法で行くことにしました。</p>

<p>(2017-02-22 追記: <a href="http://blog.n-z.jp/blog/2017-02-22-golang-waitgroup.html">Go言語のsync.WaitGroupで出力待ち</a>で解決しました。)</p>

<h2>コマンドの出力の文字コード変換</h2>

<p>コマンドラインの方は UTF-8 のままで大丈夫なのに、
<code>netsh</code> の出力は CP932 のようだったので、
<a href="http://kazzna.hatenablog.com/entry/2016/02/05/102827">GolangでShift_JIS(Windows31J)のファイルを読み込み - 来世から頑張る！！</a>などを参考にして、
<code>golang.org/x/text/encoding/japanese</code> を使って</p>

<pre><code>decoder := japanese.ShiftJIS.NewDecoder()
scanner := bufio.NewScanner(decoder.Reader(r))
</code></pre>

<p>のように読み込み側だけ変換を挟むことで解決しました。</p>

<p>後で呼び出すコマンドラインに指定するインターフェイス名の方は、この変換後の UTF-8 の文字列のままで良いので、
非対称なのが気になります。</p>

<h2>行毎の処理</h2>

<p><a href="http://qiita.com/ikawaha/items/28186d965780fab5533d">Go でファイルを1行ずつ読み込む（csv ファイルも）</a>などを参考にして、
<code>bufio</code> の <code>Scanner</code> というのを使ってみました。</p>

<h2>外部コマンド実行時のコマンドプロンプト非表示</h2>

<p>そのまま実行してしまうと、
<code>netsh</code> 起動時にコマンドプロンプトが出てしまうので、
<a href="http://ch.nicovideo.jp/lunaorbit/blomaga/ar1064613">【プログラミング】非表示にして起動する方法を模索:るなおーびっと！ - ブロマガ</a>などを参考にして、</p>

<pre><code>si.dwFlags = STARTF_USESHOWWINDOW;
si.wShowWindow = SW_HIDE;
</code></pre>

<p>を指定すれば良いとわかり、
<a href="https://golang.org/src/syscall/exec_windows.go">https://golang.org/src/syscall/exec_windows.go</a>
を見ると
StartProcess の attr の Sys の HideWindow を true にすれば良さそうとわかりました。</p>

<p>最初、<code>cmd.SysProcAttr.HideWindow = true</code> としてみたら落ちてしまってうまくいかなかったので、
もう少し調べてみたところ、</p>

<pre><code>cmd.SysProcAttr = &amp;syscall.SysProcAttr{HideWindow :true}
</code></pre>

<p>でうまくいきました。</p>

<h2>1行入力</h2>

<p>WALK は <code>TextEdit</code> が複数行入力だったので、1行入力はどうするのかと思って調べて見たところ、
<code>git grep '"EDIT"'</code> で探して見ると <code>"EDIT"</code> というウィンドウクラス名を使っているのは
<code>TextEdit</code> の他に <code>LineEdit</code> があるとわかったので、
<code>LineEdit</code> を試して見たところ、
1行入力でした。</p>

<h2>コンボボックス</h2>

<p>IP アドレスの入力は全て入力しないといけない <code>LineEdit</code> よりも、
ある程度のプリセットが入っているコンボボックスの方が良いと思って
さらに調べて見ると、
<code>ComboBox</code> というのがあったので使って見ましたが、
HTML の <code>select</code> 要素と同じように選択できるだけで
入力できるコンボボックスになっていませんでした。</p>

<p><code>git grep "COMBOBOX"</code> で探しても他にはなかったので、
さらに調べて見ると
<code>declarative/combobox.go</code> で <code>Editable</code> によって <code>NewComboBox</code> と <code>NewDropDownBox</code> を呼び分けていて、
デフォルトは <code>false</code> で <code>NewDropDownBox</code> になっていました。</p>

<p>そこで、<code>Editable: true</code> を追加すると、
望み通りの <code>ComboBox</code> になりました。</p>

<h2>出力処理のクロージャ</h2>

<p>ruby などに慣れていると、用途によって違う一番内側の処理はクロージャで渡したくなるので、
以下のように <code>func</code> を渡すようにしました。</p>

<p>最終的にコマンド実行周りは以下のようになりました。</p>

<p>標準エラー出力も処理していますが、
使っている範囲の <code>netsh</code> の呼び出しでは標準エラー出力には何も出てこないようです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func processLinesShiftJIS(lineProcessor func(string), r io.Reader) {
</span><span class='line'>        decoder := japanese.ShiftJIS.NewDecoder()
</span><span class='line'>        scanner := bufio.NewScanner(decoder.Reader(r))
</span><span class='line'>        for scanner.Scan() {
</span><span class='line'>                line := scanner.Text()
</span><span class='line'>                lineProcessor(line)
</span><span class='line'>        }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func outputStdout(line string) {
</span><span class='line'>        if line != "" {
</span><span class='line'>                log.Println("o:", line)
</span><span class='line'>        }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func outputStderr(line string) {
</span><span class='line'>        if line != "" {
</span><span class='line'>                log.Println("e:", line)
</span><span class='line'>        }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func runCommand(stdoutHandler, stderrHandler func(string), name string, arg ...string) (err error) {
</span><span class='line'>        cmd := exec.Command(name, arg...)
</span><span class='line'>        cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
</span><span class='line'>        stdout, err := cmd.StdoutPipe()
</span><span class='line'>        if err != nil {
</span><span class='line'>                log.Println("StdoutPipe:", err)
</span><span class='line'>                return
</span><span class='line'>        }
</span><span class='line'>        stderr, err := cmd.StderrPipe()
</span><span class='line'>        if err != nil {
</span><span class='line'>                log.Println("StderrPipe:", err)
</span><span class='line'>                return
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        err = cmd.Start()
</span><span class='line'>        if err != nil {
</span><span class='line'>                log.Println("Start:", err)
</span><span class='line'>                return
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        go processLinesShiftJIS(stdoutHandler, stdout)
</span><span class='line'>        go processLinesShiftJIS(stderrHandler, stderr)
</span><span class='line'>
</span><span class='line'>        err = cmd.Wait()
</span><span class='line'>        if err != nil {
</span><span class='line'>                log.Println("Wait:", err)
</span><span class='line'>                return
</span><span class='line'>        }
</span><span class='line'>        return nil
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>配布</h2>

<p>実際に配布して見ると 64 ビット環境ではなかったらしく、
エラーになってしまったので、
<code>GOOS=windows GOARCH=386 go build -ldflags="-H windowsgui"</code>
で作り直した実行ファイルを渡し直して解決しました。</p>

<p>念のため、
<code>go get</code> も <code>GOARCH=386</code> ありでやり直してからビルドした実行ファイルを渡したのですが、
<code>go get</code> をし直さなくても
<code>GOOS=windows GOARCH=386 go build -ldflags="-H windowsgui" -o winipset32.exe</code>
だけでもエラーなくビルドできるようでした。</p>

<h2>github へのリリース</h2>

<p><code>git tag v0.1.0</code> して <code>git push --tags</code> した後、
ブラウザーで github の Releases にもあげようとしたところ、
エラーになったので何度かやり直したのですが、
Firefox だとうまくアップロードできなくて
Chrome だとうまくアップロードできました。</p>

<p>Referer などのチェックが入っていて制限しているとダメなのかもしれませんが、
未調査です。</p>

<p>Chrome に切り替える時に <code>*.exe</code> はダメそうだったので、
<code>*.zip</code> に切り替えたのですが、その辺りも関係しているのかもしれません。</p>

<p>zip ファイルの作成は 7z コマンドの方が圧縮率が良いので、</p>

<pre><code>7z a winipset_windows_amd64.zip winipset.exe
7z a winipset_windows_386.zip winipset32.exe
</code></pre>

<p>で作成しました。</p>

<h2>感想</h2>

<p>Go 言語で Windows の GUI アプリを作って見た感想としては、
クロスコンパイルや配布がしやすかったのは予想通りで、
非常によかったです。</p>

<p>WALK という GUI ツールキットも部品のサイズをいちいち指定しなくても、
良い感じにしてくれるので楽でよかったです。</p>

<p>部品探しやコマンド実行周りはどうしても Windows 固有の知識がないと厳しそうだと思いましたが、
ツールキット固有の知識が必要になるか、
OS の薄いラッパーなので OS の知識が必要になるかの差なので、
まあ仕方がないかなと思いました。</p>

<p><code>log.Fatal</code> を使ってしまった場合など、エラーの時に黙って終了してしまうので、
用途によっては使いにくいかもしれないと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[関西 Debian 勉強会 + openSUSE Meetup + LILO & 東海道らぐLT大会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-01-29-kansai4cjointsession.html"/>
    <updated>2017-01-29T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai4cjointsession</id>
    <content type="html"><![CDATA[<p><a href="https://opensuseja.connpass.com/event/47907/" title="関西 Debian 勉強会 + openSUSE Meetup + LILO &amp; 東海道らぐLT大会">関西 Debian 勉強会 + openSUSE Meetup + LILO &amp; 東海道らぐLT大会</a>
に参加しました。</p>

<!--more-->


<h2>自己紹介など</h2>

<ul>
<li>人数が多いので、一言ずつの自己紹介と出欠チェックのための connpass のアカウントの申告でした。</li>
<li>会場費は人数が多かったのと学生が少なかったので、学生無料で社会人 100 円になりました。</li>
<li>Debian の発表者の到着が遅れていたので、順番が入れ替えになりました。</li>
<li>ハッシュタグは connpass のページに書いてあるように <code>#Kansai4cJointSession</code></li>
</ul>


<h2>Leap 42.2, 42.3とAsia Summitについて語る</h2>

<ul>
<li>Tumbleweed : 常に最新 (ローリングリリース)</li>
<li>Leap : 安定</li>
<li>Leap 42 系は 42.1 が最初</li>
<li>デスクトップ環境のデフォルトは存在しないが KDE Plasma を使っている人が多いらしい</li>
<li>YaST は GUI, TUI でいろいろ設定できる</li>
<li>パーティショニングから fstab の設定までまとめてできる</li>
<li>Samba の共有の設定も簡単にできる</li>
<li>YaST2 と YaST の違い : 特にない? 会場にいる人は YaST1 の頃を誰も知らなかった。 Ruby に書き換わった時も YaST3 にはならなかった。</li>
<li>openSUSE.Asia Summit</li>
<li><a href="http://blog.geeko.jp/ftake/1405">http://blog.geeko.jp/ftake/1405</a></li>
<li>KDE の翻訳が危うい</li>
</ul>


<h2>openSUSE Build Serviceへの愛を語る</h2>

<ul>
<li>etckeeper や tamago などのパッケージのメンテナ</li>
<li>デフォルトのファイルシステムが btrfs</li>
<li>VirtualBox のゲスト OS としてインストールしたら Guest Additions が最初から入っている</li>
<li>DE (デスクトップ環境) が選べるからというのがカメレオン (Geeko) の由来らしい</li>
<li>1枚のインストーラDVDで複数DE、複数ロケール対応</li>
<li>dpkg 系は git build package が楽なのでは? → 会場から CI などに使える一式の環境が一発で用意できるのが良いという話</li>
<li>アカウントは Novell のシングルサインオン</li>
<li>OBS にログインして実演</li>
<li>github の fork 的なこともできる</li>
<li>ビルドされたパッケージを公開するかどうかを選べる</li>
<li>ビルドされたパッケージのユーザーとしては Ubuntu PPA のように使える</li>
<li>github の pull request のようなこともできる (Submit Request)</li>
<li>spec ファイルに clean 処理が不要</li>
<li>OBS の弱点はネットに繋がっていないとほとんど何もできない</li>
<li><a href="http://miniconf.debian.or.jp/">Mini Debian Conference Japan 2016</a> の Open Build Service in Debian の資料も参照</li>
<li>upstream が git だった場合の話</li>
</ul>


<h2>Debian Updates</h2>

<ul>
<li>到着が遅れた話</li>
<li>LaTeX Beamer のテーマを更新した話</li>
<li>Debian とは?</li>
<li>Debian Updates</li>
<li>autoreconf の話</li>
<li>autoconf-archive パッケージがあるので古い autoconf に依存しているものも動く</li>
<li>Next Debian Release</li>
<li>ビルドインフラが足りないからサポートアーキテクチャから落ちる話</li>
<li>新テーマ Soft waves</li>
<li>Tシャツが作りにくい</li>
<li><a href="https://wiki.debian.org/DebianDesktop/Artwork/Stretch">https://wiki.debian.org/DebianDesktop/Artwork/Stretch</a></li>
<li>PHP5 が消える話</li>
<li>Wayland の話</li>
<li>emacs 25 があるが emacs で入るのは 24</li>
<li>vim が 8</li>
<li>Linux kernel は 4.9 が LTS <a href="https://lkml.org/lkml/2017/1/19/339">https://lkml.org/lkml/2017/1/19/339</a></li>
<li>KDE Connect</li>
</ul>


<h2>集合写真</h2>

<p>休憩時間に集合写真を撮りました。</p>

<h2>LT 大会</h2>

<ul>
<li>Debian を Windows タブレットに入れる話</li>
<li><a href="https://github.com/znz/rabbit-slide-ssh-ed25519">sshでed25519鍵</a> の話をしました。(<a href="http://blog.n-z.jp/blog/2016-12-04-ssh-ed25519.html">sshでed25519鍵を使うようにした話</a>と基本的に同じ内容なので、スライドサイトへの公開はしていません。)</li>
<li>16進数が好きになりました</li>
<li>年末恒例、IM飲み会に行ってみた</li>
<li>Debconf 16, cape town, South Africa</li>
</ul>


<h2>今後の予定の告知</h2>

<ul>
<li><a href="https://wiki.debian.org/KansaiDebianMeeting">https://wiki.debian.org/KansaiDebianMeeting</a></li>
<li><a href="https://lilo.linux.or.jp/">https://lilo.linux.or.jp/</a></li>
<li><a href="https://histudy.github.io/">姫路IT系勉強会</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第76回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-01-14-rubykansai76.html"/>
    <updated>2017-01-14T17:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai76</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/55398" title="第76回 Ruby関西 勉強会">第76回 Ruby関西 勉強会</a>
に参加して発表してきました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<p>ちょっと場所がわかりにくいところでした。
グランフロントに着いたあと、ちゃんと「タワーB」を目指して、一度9階で乗り換えて18階に上がりました。</p>

<h2>オープニング</h2>

<ul>
<li>会場案内</li>
<li>懇親会は適当に集まる感じ</li>
<li>ネットワークあり</li>
<li>ustream 中継あり (ライブのみで録画はなし)</li>
<li>公式タグは rubykansai76</li>
<li>公式ハッシュタグは <code>#rubykansai</code></li>
<li>受付はあとで</li>
</ul>


<h2>ゲーム会社でのRuby / Rails活用事例</h2>

<ul>
<li>スポンサーセッション的なセッション</li>
<li>Aiming さんは開発も運用もしている</li>
<li>MessagePack で C++ や C# とやりとり</li>
<li>共通基盤開発</li>
<li>インフラ</li>
<li>運用</li>
<li>Ruby は開発速度が利点</li>
<li>実行速度が求められるサーバーは C++ のままのものもあるらしい</li>
</ul>


<h2>Rails 使いがデータ集計でハマりがちな罠</h2>

<ul>
<li>ActiveRecord は集計には向いていない</li>
<li>集計に O/R mapping は不要</li>
<li>サブクエリが入りみだれると ActiveRecord や ARel はつらい</li>
<li>scope の組合せで DRY にする作戦もうまくいくことがまれでだいたいはカオスになる</li>
<li>適材適所</li>
<li>アンチパターン2: 1項目1クエリ作戦</li>
<li>アンチパターン3: 集計データが text</li>
<li>正体は YAML, JSON のデータ</li>
<li>頑張って移行</li>
<li>SQL は覚えるしかない</li>
<li>alter table せずに drop して create table しなおして集計し直し</li>
<li>クエリの分割: 中間集計テーブル</li>
<li>Q: 集計中に空のテーブルが見えてしまうのでは?</li>
<li>PostGRESQL, Redshift だと DDL にもトランザクションがきくので大丈夫</li>
<li>順序が重要</li>
<li>bricolage: SQL 実行に特化したワークフローエンジン</li>
<li>Redshift 用</li>
<li>dry run できるというのが重要</li>
<li>AWS Redshift の特徴</li>
<li>PostgreSQL 系の SQL の便利機能</li>
<li>ウィンドウ関数</li>
<li>例: <code>rank()</code>, <code>row_number()</code></li>
<li>WITH 句</li>
<li>サブクエリの代わり</li>
<li>ネストが減る</li>
</ul>


<h2>Ruby ボード GR-CITRUS の紹介 #2</h2>

<ul>
<li>ロボホンが写真をとっていたがとれていない?</li>
<li>Ruby の話はほとんど出てこない</li>
<li>GR-CITRUS</li>
<li>チップに Ruby Inside と刻印されている</li>
<li>mruby/c という16ビットマイコンなどに向けたさらに省メモリなものがある</li>
<li>今日は mruby の話</li>
<li>本題は実装について</li>
<li>バインドしている mrbgem</li>
<li>mruby-math: Math.sin</li>
<li>mruby-numeric-ext: 10.chr, 0.zero?</li>
<li>独自実装のクラス</li>
<li>mruby 組込み方法</li>
<li>クロスコンパイル</li>
<li>mrbgem の独自追加</li>
<li>wrbb-v2lib-firm の build_config.rb を使う</li>
<li>クロスコンパイル方法は Qiita に記事がある</li>
<li>mrb 実行の仕組み</li>
<li>コード読み</li>
</ul>


<h2><code>frozen_string_literal</code> の話</h2>

<p>スライドはいつも通り
<a href="http://slide.rabbit-shocker.org/authors/znz/frozen_string_literal/">Rabbit Slide Show</a>
(<a href="https://rubygems.org/gems/rabbit-slide-znz-frozen_string_literal">RubyGems</a>),
<a href="http://www.slideshare.net/znzjp/frozenstringliteral">SlideShare</a>,
<a href="https://speakerdeck.com/znz/frozen-string-literal-falsehua">Speaker Deck</a>
にあげています。
(ソースは
<a href="https://github.com/znz/rubykansai76-frozen_string_literal">github</a>
にあげています。)</p>

<h2>Ruby モンキーパッチの世界</h2>

<ul>
<li>モンキーパッチとは</li>
<li>CarrierWaveDirect で <code>path/to/file</code>, <code>path/to/to/file</code>, <code>path/to/to/to/file</code> のようになるバグがあったのをモンキーパッチで対応した</li>
<li>ActiveSupport が <code>NilClass</code> に <code>blank?</code> メソッドを足している</li>
<li>Refinement</li>
<li>トップレベルの <code>using</code> は <code>using</code> より下にあれば <code>class</code> などの中も対象</li>
<li>クラススコープの <code>using</code> は <code>using</code> より下で <code>class</code> に対応する <code>end</code> までが対象</li>
<li><a href="https://docs.ruby-lang.org/en/trunk/syntax/refinements_rdoc.html">https://docs.ruby-lang.org/en/trunk/syntax/refinements_rdoc.html</a></li>
<li>Rails での例: <a href="https://github.com/rails/rails/blob/07307a7b9d14b752fc5aef474f3c29585676c9fa/activesupport/lib/active_support/core_ext/enumerable.rb#L117-L135">https://github.com/rails/rails/blob/07307a7b9d14b752fc5aef474f3c29585676c9fa/activesupport/lib/active_support/core_ext/enumerable.rb#L117-L135</a></li>
</ul>


<h2>Rails の有限オートマトン</h2>

<ul>
<li><a href="https://github.com/amatsuda/stateful_enum" title="stateful_enum">stateful_enum</a></li>
<li>graphviz や plantuml を使って図を出力できる</li>
<li>gulp で plantuml の図の自動更新</li>
<li><code>draw_uml</code> を使って rails 経由で図を表示</li>
<li>browser sync でブラウザーも自動リロード</li>
<li><code>draw_erd</code>, <code>draw_smd</code> というのもある</li>
<li>guard は rspec を流すのに使っていて、重くなるので gulp は開発の初期だけに使うもの用に分けている</li>
</ul>


<h2>告知 (Rails Girls Osaka, OSS Gate Osaka, 関西Ruby会議)</h2>

<ul>
<li>引き続き ogomr さん</li>
<li><a href="https://speakerdeck.com/ogom/ibentofalseshao-jie-tomu-ji">イベントの紹介と募集</a></li>
<li><a href="https://coderdojo-hommachi.doorkeeper.jp/events/56121">CoderDojo 本町 #4</a></li>
<li><a href="https://railsgirls-osaka.doorkeeper.jp/events/55949">RailsGirls Osaka #4 コーチ希望者募集</a></li>
<li><a href="https://railsgirls-osaka.doorkeeper.jp/events/55947">RailsGirls Osaka #4</a></li>
<li><a href="https://oss-gate.doorkeeper.jp/events/56141">OSS Gate Osaka #1</a></li>
<li><a href="https://rubykansai.github.io/kansai2017/">関西Ruby会議2017</a></li>
</ul>


<h2>Ruby初級者向けレッスン 60回 ─ クラス</h2>

<ul>
<li><a href="https://github.com/higaki/learn_ruby_kansai_76">https://github.com/higaki/learn_ruby_kansai_76</a></li>
<li>解答例</li>
<li><code>to_s</code> で <code>@name</code> なのは <code>name</code> の方が良いのではないかという話</li>
<li><code>age</code> の実装の話</li>
<li><code>Mashal.load Marshal.dump</code> の話</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>懇親会の募集</li>
<li>Rails Follow-up Osaka の紹介</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[frozen_string_literalをtrueにしていっている]]></title>
    <link href="http://blog.n-z.jp/blog/2017-01-08-frozen-string-literal.html"/>
    <updated>2017-01-08T17:35:03+09:00</updated>
    <id>http://blog.n-z.jp/blog/frozen-string-literal</id>
    <content type="html"><![CDATA[<p><a href="https://www.ruby-lang.org/ja/documentation/repository-guide/">Ruby の trunk</a> で最近は <code>frozen_string_literal</code> を <code>true</code> に変更するというコミットをしていっています。
(<a href="https://svn.ruby-lang.org/cgi-bin/viewvc.cgi?revision=53141&amp;view=revision" title="Revision 53141">Revision 53141</a> で <code>frozen_string_literal: false</code> として magic comment 自体は追加されています。)</p>

<p>その時にちょっと確認に手間取った変更があったので、そのメモです。</p>

<!--more-->


<h2>lib/fileutils.rb</h2>

<p>確認に手間取ったのは <a href="https://svn.ruby-lang.org/cgi-bin/viewvc.cgi?revision=57275&amp;view=revision" title="Revision 57275">Revision 57275</a> の <code>lib/fileutils.rb</code> の変更です。</p>

<h2>freeze の削除</h2>

<p>まず最初は <code>.freeze</code> を削除した変更です。</p>

<p><code>frozen_string_literal: true</code> にすれば <code>"文字列リテラル".freeze</code> の <code>.freeze</code> は不要になるはずと思ったのですが、実行してみてちゃんと <code>frozen?</code> が <code>true</code> になるのかと <code>--dump=insns</code> で disasm の結果をみて確認しました。</p>

<p>該当部分の変更は以下の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gu">@@ -1432,9 +1432,9 @@ def join(dir, base)</span>
</span><span class='line'>     end
</span><span class='line'>
</span><span class='line'>     if File::ALT_SEPARATOR
</span><span class='line'><span class="gd">-      DIRECTORY_TERM = &quot;(?=[/#{Regexp.quote(File::ALT_SEPARATOR)}]|\\z)&quot;.freeze</span>
</span><span class='line'><span class="gi">+      DIRECTORY_TERM = &quot;(?=[/#{Regexp.quote(File::ALT_SEPARATOR)}]|\\z)&quot;</span>
</span><span class='line'>     else
</span><span class='line'><span class="gd">-      DIRECTORY_TERM = &quot;(?=/|\\z)&quot;.freeze</span>
</span><span class='line'><span class="gi">+      DIRECTORY_TERM = &quot;(?=/|\\z)&quot;</span>
</span><span class='line'>     end
</span><span class='line'>     SYSCASE = File::FNM_SYSCASE.nonzero? ? &quot;-i&quot; : &quot;&quot;
</span></code></pre></td></tr></table></div></figure>


<p>文字列補間がある場合は <code>freeze</code> の呼び出しが減っていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> cat /tmp/a.rb
</span><span class='line'><span class="gp">#</span> frozen_string_literal: <span class="nb">true</span>
</span><span class='line'><span class="go">ALT_SEPARATOR = &#39;\\&#39;</span>
</span><span class='line'><span class="go">p &quot;(?=[/#{Regexp.quote(ALT_SEPARATOR)}]|\\z)&quot;.freeze.frozen?</span>
</span><span class='line'><span class="gp">%</span> cat /tmp/b.rb
</span><span class='line'><span class="gp">#</span> frozen_string_literal: <span class="nb">true</span>
</span><span class='line'><span class="go">ALT_SEPARATOR = &#39;\\&#39;</span>
</span><span class='line'><span class="go">p &quot;(?=[/#{Regexp.quote(ALT_SEPARATOR)}]|\\z)&quot;.frozen?</span>
</span><span class='line'><span class="gp">%</span> ruby /tmp/a.rb
</span><span class='line'><span class="go">true</span>
</span><span class='line'><span class="gp">%</span> ruby /tmp/b.rb
</span><span class='line'><span class="go">true</span>
</span><span class='line'><span class="gp">%</span> diff -u &lt;<span class="o">(</span>ruby --dump<span class="o">=</span>insns /tmp/a.rb<span class="o">)</span> &lt;<span class="o">(</span>ruby --dump<span class="o">=</span>insns /tmp/b.rb<span class="o">)</span>
</span><span class='line'><span class="go">--- /proc/self/fd/11    2017-01-08 17:43:38.532932848 +0900</span>
</span><span class='line'><span class="go">+++ /proc/self/fd/13    2017-01-08 17:43:38.532932848 +0900</span>
</span><span class='line'><span class="go">@@ -1,4 +1,4 @@</span>
</span><span class='line'><span class="go">-== disasm: #&lt;ISeq:&lt;main&gt;@/tmp/a.rb&gt;=====================================</span>
</span><span class='line'><span class="go">+== disasm: #&lt;ISeq:&lt;main&gt;@/tmp/b.rb&gt;=====================================</span>
</span><span class='line'><span class="go"> 0000 trace            1                                               (   2)</span>
</span><span class='line'><span class="go"> 0002 putobject        &quot;\\&quot;</span>
</span><span class='line'><span class="go"> 0004 putspecialobject 3</span>
</span><span class='line'><span class="go">@@ -17,7 +17,6 @@</span>
</span><span class='line'><span class="go"> 0031 putobject        &quot;]|\\z)&quot;</span>
</span><span class='line'><span class="go"> 0033 concatstrings    3</span>
</span><span class='line'><span class="go"> 0035 freezestring     nil</span>
</span><span class='line'><span class="go">-0037 opt_send_without_block &lt;callinfo!mid:freeze, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span>
</span><span class='line'><span class="go">-0040 opt_send_without_block &lt;callinfo!mid:frozen?, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span>
</span><span class='line'><span class="go">-0043 opt_send_without_block &lt;callinfo!mid:p, argc:1, FCALL|ARGS_SIMPLE&gt;, &lt;callcache&gt;</span>
</span><span class='line'><span class="go">-0046 leave</span>
</span><span class='line'><span class="go">+0037 opt_send_without_block &lt;callinfo!mid:frozen?, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span>
</span><span class='line'><span class="go">+0040 opt_send_without_block &lt;callinfo!mid:p, argc:1, FCALL|ARGS_SIMPLE&gt;, &lt;callcache&gt;</span>
</span><span class='line'><span class="go">+0043 leave</span>
</span></code></pre></td></tr></table></div></figure>


<p>文字列補間がない場合は <code>opt_str_freeze</code> (<code>freeze</code> が再定義されていたら呼ぶ) から <code>putobject</code> (単純にスタックにプッシュするだけ) に変わっていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> cat /tmp/1.rb
</span><span class='line'><span class="gp">#</span> frozen_string_literal: <span class="nb">false</span>
</span><span class='line'><span class="go">p &#39;&#39;.freeze.frozen?</span>
</span><span class='line'><span class="gp">%</span> cat /tmp/2.rb
</span><span class='line'><span class="gp">#</span> frozen_string_literal: <span class="nb">true</span>
</span><span class='line'><span class="go">p &#39;&#39;.freeze.frozen?</span>
</span><span class='line'><span class="gp">%</span> cat /tmp/3.rb
</span><span class='line'><span class="gp">#</span> frozen_string_literal: <span class="nb">true</span>
</span><span class='line'><span class="go">p &#39;&#39;.frozen?</span>
</span><span class='line'><span class="gp">%</span> ruby /tmp/1.rb
</span><span class='line'><span class="go">true</span>
</span><span class='line'><span class="gp">%</span> ruby /tmp/2.rb
</span><span class='line'><span class="go">true</span>
</span><span class='line'><span class="gp">%</span> ruby /tmp/3.rb
</span><span class='line'><span class="go">true</span>
</span><span class='line'><span class="gp">%</span> diff -u &lt;<span class="o">(</span>ruby --dump<span class="o">=</span>insns /tmp/1.rb<span class="o">)</span> &lt;<span class="o">(</span>ruby --dump<span class="o">=</span>insns /tmp/2.rb<span class="o">)</span>
</span><span class='line'><span class="go">--- /proc/self/fd/11    2017-01-08 17:52:25.569282848 +0900</span>
</span><span class='line'><span class="go">+++ /proc/self/fd/13    2017-01-08 17:52:25.569282848 +0900</span>
</span><span class='line'><span class="go">@@ -1,4 +1,4 @@</span>
</span><span class='line'><span class="go">-== disasm: #&lt;ISeq:&lt;main&gt;@/tmp/1.rb&gt;=====================================</span>
</span><span class='line'><span class="go">+== disasm: #&lt;ISeq:&lt;main&gt;@/tmp/2.rb&gt;=====================================</span>
</span><span class='line'><span class="go"> 0000 trace            1                                               (   2)</span>
</span><span class='line'><span class="go"> 0002 putself</span>
</span><span class='line'><span class="go"> 0003 opt_str_freeze   &quot;&quot;</span>
</span><span class='line'><span class="gp">%</span> diff -u &lt;<span class="o">(</span>ruby --dump<span class="o">=</span>insns /tmp/1.rb<span class="o">)</span> &lt;<span class="o">(</span>ruby --dump<span class="o">=</span>insns /tmp/3.rb<span class="o">)</span>
</span><span class='line'><span class="go">--- /proc/self/fd/11    2017-01-08 17:52:27.952090848 +0900</span>
</span><span class='line'><span class="go">+++ /proc/self/fd/13    2017-01-08 17:52:27.952090848 +0900</span>
</span><span class='line'><span class="go">@@ -1,7 +1,7 @@</span>
</span><span class='line'><span class="go">-== disasm: #&lt;ISeq:&lt;main&gt;@/tmp/1.rb&gt;=====================================</span>
</span><span class='line'><span class="go">+== disasm: #&lt;ISeq:&lt;main&gt;@/tmp/3.rb&gt;=====================================</span>
</span><span class='line'><span class="go"> 0000 trace            1                                               (   2)</span>
</span><span class='line'><span class="go"> 0002 putself</span>
</span><span class='line'><span class="go">-0003 opt_str_freeze   &quot;&quot;</span>
</span><span class='line'><span class="go">+0003 putobject        &quot;&quot;</span>
</span><span class='line'><span class="go"> 0005 opt_send_without_block &lt;callinfo!mid:frozen?, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span>
</span><span class='line'><span class="go"> 0008 opt_send_without_block &lt;callinfo!mid:p, argc:1, FCALL|ARGS_SIMPLE&gt;, &lt;callcache&gt;</span>
</span><span class='line'><span class="go"> 0011 leave</span>
</span></code></pre></td></tr></table></div></figure>


<h2>String.new への変更</h2>

<p>同じコミットの <code>compare_stream</code> の変更は一通り目視確認していた時には <code>&lt;&lt;</code> による破壊的変更ではないので見落としていて、 <code>make install</code> を実行したら引っかかったので気づいたのですが、 <code>File#read</code> にバッファとして文字列を渡していることによる破壊的変更でした。</p>

<p>該当部分の変更は以下の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gu">@@ -735,8 +735,8 @@ def compare_file(a, b)</span>
</span><span class='line'>   #
</span><span class='line'>   def compare_stream(a, b)
</span><span class='line'>     bsize = fu_stream_blksize(a, b)
</span><span class='line'><span class="gd">-    sa = &quot;&quot;</span>
</span><span class='line'><span class="gd">-    sb = &quot;&quot;</span>
</span><span class='line'><span class="gi">+    sa = String.new(capacity: bsize)</span>
</span><span class='line'><span class="gi">+    sb = String.new(capacity: bsize)</span>
</span><span class='line'>     begin
</span><span class='line'>       a.read(bsize, sa)
</span><span class='line'>       b.read(bsize, sb)
</span></code></pre></td></tr></table></div></figure>


<p>変更候補として</p>

<ul>
<li><code>"".dup</code> にする (文字列のエンコーディングがソースエンコーディング (この場合は UTF-8) になる)</li>
<li><code>String.new</code> にする (文字列のエンコーディングが ASCII-8BIT になる)</li>
</ul>


<p>がありましたが、エンコーディングはどちらでも良かったのと、
ここではバッファサイズとして <code>bsize</code> バイトが望ましいという情報が別途存在していたので、
ruby 2.4.0 からの新機能の <code>String.new(capacity: size)</code> を使うことにしました。</p>

<p>エンコーディングの違いは以下のように確認できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> cat /tmp/a.rb
</span><span class='line'><span class="gp">#</span> frozen_string_literal: <span class="nb">true</span>
</span><span class='line'><span class="go">p &quot;&quot;.dup.frozen?</span>
</span><span class='line'><span class="go">p &quot;&quot;.dup.encoding</span>
</span><span class='line'><span class="go">p String.new.frozen?</span>
</span><span class='line'><span class="go">p String.new.encoding</span>
</span><span class='line'><span class="gp">%</span> ruby /tmp/a.rb
</span><span class='line'><span class="go">false</span>
</span><span class='line'><span class="gp">#</span>&lt;Encoding:UTF-8&gt;
</span><span class='line'><span class="go">false</span>
</span><span class='line'><span class="gp">#</span>&lt;Encoding:ASCII-8BIT&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO&東海道らぐオフラインミーティング 2017/01/07]]></title>
    <link href="http://blog.n-z.jp/blog/2017-01-07-lilo-tokaidolug.html"/>
    <updated>2017-01-07T13:20:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-tokaidolug</id>
    <content type="html"><![CDATA[<p><a href="https://lilo.connpass.com/event/47841/" title="LILO&amp;東海道らぐオフラインミーティング 2017/01/07">LILO&amp;東海道らぐオフラインミーティング 2017/01/07</a> に参加しました。</p>

<p>今回もアンカンファレンス形式でした。</p>

<!--more-->


<h2>メモ</h2>

<p>今回のメモです。</p>

<ul>
<li>本を読んでいたら電車を乗り過ごしてしまって一度梅田まで行ってしまってちょっと遅くなりました。(開始時刻の13時には間に合いました。)</li>
<li>会場の建物は同じでも、いつもの4階と違って6階でした。</li>
<li>ハッシュタグ: <code>#lilo_jp</code> <code>#東海道らぐ</code></li>
<li>登録参加者数 8名</li>
<li>自己紹介から</li>
<li><a href="https://opensuseja.connpass.com/event/47907/" title="関西 Debian 勉強会 + openSUSE Meetup + LILO &amp; 東海道らぐLT大会">関西 Debian 勉強会 + openSUSE Meetup + LILO &amp; 東海道らぐLT大会</a></li>
<li>ラズパイで音楽 (山内さん)</li>
<li>サンハヤトのハイレゾオーディオDACボード AS-E404RAS</li>
<li>Volumio</li>
<li>Spotify</li>
<li>AirPlay対応スピーカーにできた</li>
<li>lilo.linux.or.jp のサーバー管理の話 (自分)</li>
<li>unattended-upgrades の公式っぽさを確認するにはメンテナをみればいいのではという話があったので確認してみたところ、 unattended-upgrades のメンテナを確認すると apt のメンテナの一人でした。 cron-apt のメンテナは全然別の人でした。</li>
<li>休憩</li>
<li>LibreOffice Kaigi 2016.12 の時の資料を使っての話 (榎さん)</li>
<li>LibreOffice Conference の話</li>
<li>Debian を再インストールした話 (さとうさん)</li>
<li>OSM の話 (さかのしたさん)</li>
<li>Overpass API</li>
<li>umap</li>
<li>LOF の LILO 展示の復習 (まるいちさん)</li>
<li>gPhoto2</li>
<li>最後にまた <a href="https://opensuseja.connpass.com/event/47907/" title="関西 Debian 勉強会 + openSUSE Meetup + LILO &amp; 東海道らぐLT大会">関西 Debian 勉強会 + openSUSE Meetup + LILO &amp; 東海道らぐLT大会</a> についての案内</li>
</ul>


<h2>発表した内容</h2>

<p>スライドはいつも通り <a href="http://slide.rabbit-shocker.org/authors/znz/lilo-20170107/">Rabbit Slide Show</a> (<a href="https://rubygems.org/gems/rabbit-slide-znz-lilo-20170107">RubyGems</a>), <a href="https://slideshare.net/znzjp/lilolinuxorjp-20171">SlideShare</a>, <a href="https://speakerdeck.com/u/znz/p/lilo-dot-linux-dot-or-dot-jp-falsehua-2017nian-1yue">Speaker Deck</a> にあげています。(ソースは <a href="https://github.com/znz/lilo-20170107">github</a> にあげています。)</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/lilo-20170107/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/lilo-20170107/" title="lilo.linux.or.jp の話 (2017年1月)">lilo.linux.or.jp の話 (2017年1月)</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[certbot の renew hook について (その2)]]></title>
    <link href="http://blog.n-z.jp/blog/2017-01-03-certbot-renew-hook.html"/>
    <updated>2017-01-03T13:06:39+09:00</updated>
    <id>http://blog.n-z.jp/blog/certbot-renew-hook</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2016-11-20-certbot-renew-hook.html">certbot で設定の再読み込みには post-hook よりも renew-hook を使った方が良さそうという話</a> の続きです。</p>

<p>前回の記事の時点では同時に複数証明書が更新される時の挙動が確認できていませんでしたが、
確認できたので、その説明です。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li><h2>対象バージョン</h2></li>
<li><p>Ubuntu 14.04.5 LTS (trusty)</p></li>
<li>letsencrypt 0.9.3</li>
</ul>


<h2>RENEWED_DOMAINS の挙動</h2>

<p>pre-hook, post-hook, renew-hook でそれぞれ env を実行して環境変数を記録してみたところ、同時に更新される時は pre-hook, post-hook は 1 回ずつ、 renew-hook はドメインごとに呼ばれることがわかりました。</p>

<p>ドメインに応じてメールサーバーの reload などの処理をする場合は post-hook ではなく renew-hook を使う必要がありそうです。</p>

<p>ドメインなどは置き換えていますが、以下のような出力でした。
(<code>TMPDIR</code> などが <code>/tmp/user/0</code> になっているのは libpam-tmpdir を設定しているからだと思います。)</p>

<p>pre-hook の env:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TEMPDIR=/tmp/user/0
</span><span class='line'>HOME=/root
</span><span class='line'>OLDPWD=/root
</span><span class='line'>TMPDIR=/tmp/user/0
</span><span class='line'>LOGNAME=root
</span><span class='line'>TEMP=/tmp/user/0
</span><span class='line'>COLUMNS=80
</span><span class='line'>PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
</span><span class='line'>CERTBOT_AUTO=/home/vpsuser/letsencrypt/letsencrypt-auto
</span><span class='line'>LANG=ja_JP.UTF-8
</span><span class='line'>TMP=/tmp/user/0
</span><span class='line'>SHELL=/bin/sh
</span><span class='line'>PWD=/
</span><span class='line'>LINES=24</span></code></pre></td></tr></table></div></figure>


<p>post-hook の env:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TEMPDIR=/tmp/user/0
</span><span class='line'>HOME=/root
</span><span class='line'>OLDPWD=/root
</span><span class='line'>RENEWED_LINEAGE=/etc/letsencrypt/live/other.example.net
</span><span class='line'>TMPDIR=/tmp/user/0
</span><span class='line'>LOGNAME=root
</span><span class='line'>TEMP=/tmp/user/0
</span><span class='line'>COLUMNS=80
</span><span class='line'>PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
</span><span class='line'>CERTBOT_AUTO=/home/vpsuser/letsencrypt/letsencrypt-auto
</span><span class='line'>LANG=ja_JP.UTF-8
</span><span class='line'>TMP=/tmp/user/0
</span><span class='line'>SHELL=/bin/sh
</span><span class='line'>PWD=/
</span><span class='line'>RENEWED_DOMAINS=other.example.net
</span><span class='line'>LINES=24</span></code></pre></td></tr></table></div></figure>


<p>renew-hook の env:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TEMPDIR=/tmp/user/0
</span><span class='line'>HOME=/root
</span><span class='line'>OLDPWD=/root
</span><span class='line'>RENEWED_LINEAGE=/etc/letsencrypt/live/www.example.com
</span><span class='line'>TMPDIR=/tmp/user/0
</span><span class='line'>LOGNAME=root
</span><span class='line'>TEMP=/tmp/user/0
</span><span class='line'>COLUMNS=80
</span><span class='line'>PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
</span><span class='line'>CERTBOT_AUTO=/home/vpsuser/letsencrypt/letsencrypt-auto
</span><span class='line'>LANG=ja_JP.UTF-8
</span><span class='line'>TMP=/tmp/user/0
</span><span class='line'>SHELL=/bin/sh
</span><span class='line'>PWD=/
</span><span class='line'>RENEWED_DOMAINS=www.example.com
</span><span class='line'>LINES=24</span></code></pre></td></tr></table></div></figure>


<p>renew-hook 2 回目:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TEMPDIR=/tmp/user/0
</span><span class='line'>HOME=/root
</span><span class='line'>OLDPWD=/root
</span><span class='line'>RENEWED_LINEAGE=/etc/letsencrypt/live/other.example.net
</span><span class='line'>TMPDIR=/tmp/user/0
</span><span class='line'>LOGNAME=root
</span><span class='line'>TEMP=/tmp/user/0
</span><span class='line'>COLUMNS=80
</span><span class='line'>PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
</span><span class='line'>CERTBOT_AUTO=/home/vpsuser/letsencrypt/letsencrypt-auto
</span><span class='line'>LANG=ja_JP.UTF-8
</span><span class='line'>TMP=/tmp/user/0
</span><span class='line'>SHELL=/bin/sh
</span><span class='line'>PWD=/
</span><span class='line'>RENEWED_DOMAINS=other.example.net
</span><span class='line'>LINES=24</span></code></pre></td></tr></table></div></figure>


<h2>hook の例</h2>

<p>hook を cli.ini で設定します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat /etc/letsencrypt/cli.ini
</span><span class='line'>rsa-key-size = 4096
</span><span class='line'>pre-hook = /etc/letsencrypt/pre-hook
</span><span class='line'>post-hook = /etc/letsencrypt/post-hook
</span><span class='line'>renew-hook = /etc/letsencrypt/renew-hook</span></code></pre></td></tr></table></div></figure>


<p>hook の実行ファイルを作成します。
忘れずに実行属性をつけておく必要があります。</p>

<p>pre-hook と post-hook は呼ばれたことと環境変数の記録だけですが、
renew-hook は呼ばれたことと環境変数の記録をしつつ、
apache に証明書の反映と、
メールサーバーのドメインの時のみ、
メール関係のデーモンにも反映をしています。
postfix だけ reload 時に標準出力にメッセージを出していたので、
捨てています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat /etc/letsencrypt/pre-hook
</span><span class='line'>#!/bin/sh
</span><span class='line'>{
</span><span class='line'>  date
</span><span class='line'>  env
</span><span class='line'>} &gt;&gt; /tmp/pre-hook.env
</span><span class='line'>% cat /etc/letsencrypt/post-hook
</span><span class='line'>#!/bin/sh
</span><span class='line'>{
</span><span class='line'>  date
</span><span class='line'>  env
</span><span class='line'>} &gt;&gt; /tmp/post-hook.env
</span><span class='line'>% cat /etc/letsencrypt/renew-hook
</span><span class='line'>#!/bin/sh
</span><span class='line'>{
</span><span class='line'>  date
</span><span class='line'>  env
</span><span class='line'>} &gt;&gt; /tmp/renew-hook.env
</span><span class='line'>apachectl graceful
</span><span class='line'>for domain in $RENEWED_DOMAINS; do
</span><span class='line'>  case "$domain" in
</span><span class='line'>    mx*)
</span><span class='line'>      service postfix reload &gt;/dev/null
</span><span class='line'>      service dovecot reload
</span><span class='line'>      ;;
</span><span class='line'>  esac
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mini Debian Conference Japan 2016に参加して発表してきた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-12-10-mini-debian-conference-japan-2016.html"/>
    <updated>2016-12-10T10:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/mini-debian-conference-japan-2016</id>
    <content type="html"><![CDATA[<p><a href="http://miniconf.debian.or.jp/" title="Mini Debian Conference Japan 2016">Mini Debian Conference Japan 2016</a>
に参加して、発表してきました。</p>

<!--more-->


<h2>会場</h2>

<p>前日に東京に移動していたので、余裕がありましたが、
東京駅から近いので、当日移動でも頑張れば間に合いそうな場所でした。</p>

<p>ネットワークはゲスト用の無線があって、接続すると Web 画面が出てきてそこでユーザーとパスワードを入れて認証するという方式でした。</p>

<h2>セッション</h2>

<p>2トラックなので、どちらを聞きに行くのか悩む必要がありました。
さらに午後からは LibreOffice Kaigi 2016.12 も併催なので、さらに悩みました。</p>

<h2>オープニング</h2>

<ul>
<li>DebConf を日本でやりたいので、カンファレンス開催のノウハウをためたい</li>
<li>諸注意で Windows の画面が出てきてブーイング</li>
<li>結局映らなかったので口頭で</li>
<li>自動販売機は使用禁止とか</li>
<li>休憩中の予定説明とか</li>
<li>さっき出てきた DebConf の<a href="https://twitter.com/yasulab/status/807399231107584001">写真</a>のような集合写真撮影があるよとか</li>
<li>機材の関係で最初のセッションは部屋を入れ替え</li>
</ul>


<h2>Open Build Service in Debian</h2>

<ul>
<li>Open Build Service のアーキテクチャの説明</li>
<li>フロントエンドは Rails</li>
<li><a href="https://goo.gl/OSBNqv">https://goo.gl/OSBNqv</a></li>
<li><a href="https://goo.gl/2rNPMx">https://goo.gl/2rNPMx</a></li>
<li>デモはディスクフルで終了</li>
</ul>


<h2>昼食及びPGP/GPGキーサインパーティ</h2>

<p>パスポートを机の上に準備していたのに持ってくるのを忘れてしまっていて、
ID が運転免許証しかなかったので、日本人とだけにしておきました。</p>

<h2>OSS license 101</h2>

<ul>
<li>ライセンスは一部の権利を許諾するもの</li>
<li>著作権の他に特許、商標、契約も関係する</li>
<li>商標の例: &ldquo;Firefox&rdquo; と Iceweasel</li>
<li>契約の例: Red Hat エンタープライズ契約書</li>
<li>「5.2 検査。」という項目がある</li>
<li>ライセンスを選ぶ</li>
<li>目的に合わせて</li>
<li>万能のライセンスはない</li>
<li>ライセンスを独自に作るのはよくない</li>
<li>OSS ライセンスは well-tested library</li>
<li>独自ライセンスは使うときに吟味が必要になるし、互換性も問題になる</li>
<li>コードを書きたい人は既存のライセンスを使ってコードを書いていた方が生産性が高い</li>
<li>Proprietary license vs OSS license</li>
<li>Default deny vs Default allow</li>
<li>Whitelist vs Blacklist</li>
<li>The Open Source Definition (Annotated) <a href="https://opensource.org/osd-annotated/">https://opensource.org/osd-annotated/</a></li>
<li>DFSG-free (OSS), OSI-Certified and fake-OSS</li>
<li>Well-known OSS license</li>
<li>どのライセンスが良いか?</li>
<li>目的と利用方法によって変わる</li>
<li>Copyleft vs Permissive <a href="https://www.gnu.org/licenses/copyleft.ja.html">https://www.gnu.org/licenses/copyleft.ja.html</a></li>
<li>patent-free or not</li>
<li>Domain-specific</li>
<li>OFL,CC,GFDL, etc.</li>
<li>残りの時間はライセンスがらみの雑談</li>
<li>Zstd <a href="https://github.com/facebook/zstd">https://github.com/facebook/zstd</a></li>
<li>BSD-3-clause license However, its &ldquo;PATENTS&rdquo; file says</li>
<li>Zfs (GPL vs CDDL) by Canonical, Ltd.</li>
<li>GPL: Linux &ldquo;T-800&rdquo; issue</li>
<li>第三者はソースコードを請求できない</li>
<li>「Linux で稼働しているターミネーターを掴まえたとしても、そのバイナリの所有権を得たわけではないので、ソースコードは請求できない。」 <a href="https://twitter.com/elim/status/807442658830336001">https://twitter.com/elim/status/807442658830336001</a></li>
</ul>


<h2>Go言語で書かれたソフトウェアをDebianパッケージにする方法</h2>

<ul>
<li><a href="https://twitter.com/tSU_RooT">https://twitter.com/tSU_RooT</a></li>
<li>GPG ID: 63A6 000E</li>
<li>peco の Debian パッケージを入れた人</li>
<li>dh-make-golang</li>
<li>佐々木さんは自分用パッケージを作ったが、メンテナンスするプログラミング言語を増やしたくなかったので公式にはあげなかったらしい</li>
<li>公式に入れるとメリットが多い</li>
<li>公式に入ったっときのデメリットはパッケージメンテナがアップデートに追随してくれないことがある</li>
<li>パッケージに限らない問題</li>
<li>下準備</li>
<li>sid の環境を用意</li>
<li>リポジトリの確認</li>
<li>ソースコードからビルドできるか</li>
<li>ライセンスが付属しているか</li>
<li>go get するだけでビルドできるか</li>
<li>依存ライブラリがすでにパッケージになっているか</li>
<li>依存ライブラリも同じチェック</li>
<li>ライセンスがない場合: issue でお願いする</li>
<li>複雑なビルド手順が必要な場合: debian/rules で頑張る必要がある、今回は対象外</li>
<li>依存ライブラリが多い場合</li>
<li>ライセンス確認</li>
<li>例えば、サンプルに Gopher くんの画像がついていたら debian/copyright に明記する必要あり</li>
<li>pkg-go.alioth.debian.org</li>
<li>パッケージの命名規則がある</li>
<li>fork したリポジトリも別パッケージで問題ない</li>
<li>Go 1.6 で正式導入された vendor ディレクトリの扱いはまだ完全には決まってないっぽい</li>
<li>peco (v0.4.2) での実例</li>
<li>依存パッケージの話</li>
<li><code>apt showsrc golang-go-flags-dev 2&gt;/dev/null | grep Homepage</code> で upstream を確認</li>
<li>古いパッケージで依存なしで消えていたものを復活させた</li>
<li>lintian の警告を消す</li>
<li>debian/copyright を書く</li>
<li>debian/changelog を直す (ITP の番号を埋める、UNRELEASED を unstable に)</li>
<li>debian/control の README から自動で生成された説明文を直す</li>
<li>ライブラリパッケージすべてに行う</li>
<li>バイナリパッケージは man ページも用意する</li>
<li>今回話せなかったこと</li>
<li>参考資料</li>
<li>質疑応答</li>
<li>pristine-tar と git-buildpackage の話</li>
</ul>


<h2>Certbotで無料TLSサーバー</h2>

<p>Certbotで無料TLSサーバーというタイトルで発表しました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/debian-certbot/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/debian-certbot/" title="Certbotで無料TLSサーバー">Certbotで無料TLSサーバー</a>
</div>


<p><a href="https://github.com/sorah/acmesmith">https://github.com/sorah/acmesmith</a> というクライアントもあるらしい。</p>

<p><a href="https://github.com/dokku/dokku-letsencrypt">https://github.com/dokku/dokku-letsencrypt</a> で使っている <code>simp_le</code> は 開発が止まっている ( <a href="https://github.com/kuba/simp_le/issues/114">https://github.com/kuba/simp_le/issues/114</a> )。</p>

<h2>休憩及び集合写真撮影</h2>

<p>集合写真を撮影して、おやつ休憩がありました。</p>

<h2>FOSS バーチャルシンガー 徴音梅林 と LINNE プラットホーム</h2>

<ul>
<li>英語なので頑張って聞いていました。</li>
<li><a href="http://projectmeilin.github.io/ja/">http://projectmeilin.github.io/ja/</a></li>
</ul>


<h2>最近のGnuPG</h2>

<ul>
<li>二ヶ国語でプレゼン</li>
<li>メモリ不足でプレゼンツールがうまく動かないので佐々木さんのマシンに切り替え</li>
<li>Jessie は gnupg パッケージは 1.4 (新しいバージョンは gnupg2 パッケージ)</li>
<li>Stretch は gnupg パッケージは 2.1 (古いバージョンは gnupg1 パッケージ)</li>
<li>GnuPG 2.1?</li>
<li>公開鍵のフォーマットが KBX に変わった。(昔の形式もサポート)</li>
<li>プライベート鍵は gpg-agent が管理するようになった。</li>
<li>gpg, gpg-agent, pinentry, scdaemon, dirmngr, (gpgsm, ssh)</li>
<li>おすすめの使い方</li>
<li>gpg-agent を ssh-agent として使う</li>
<li>Token を使う</li>
<li>Curve25519 を使う (Ed25519/X25519 is more secure, key is small, fast)</li>
<li>キーサインパーティー</li>
<li>WKD: Web key directory</li>
<li>ToFU: Trust On First Use</li>
<li>g13 + dm-crypt</li>
<li>質疑応答</li>
<li>RSA 鍵からの移行</li>
<li>サブキーの追加よりも新規に作るのがおすすめ</li>
<li>gnuk の話</li>
<li>curve25519 サポートしている</li>
<li>楕円曲線暗号は輸出入の規制にひっかかることがある</li>
</ul>


<h2>休憩</h2>

<p>2つの部屋をくっつけて広くなった。</p>

<h2>DebConf 2018 台湾 参加表明準備とステータスの更新</h2>

<ul>
<li>英語なので twitter の <code>#debianjp</code> を参考にして頑張って聞いていました。</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>アンケート: <a href="https://goo.gl/BsPrgA">https://goo.gl/BsPrgA</a></li>
</ul>


<h2>懇親会</h2>

<ul>
<li>LT 大会をやっていました。</li>
<li>全体的にマイクの通りが悪いのか、英語に限らず話が聞き取りにくかったです。</li>
<li>Unicode の <a href="https://ja.wikipedia.org/wiki/%E6%BC%A2%E5%AD%97%E8%A8%98%E8%BF%B0%E8%A8%80%E8%AA%9E#.E6.BC.A2.E5.AD.97.E6.A7.8B.E6.88.90.E8.A8.98.E8.BF.B0.E6.96.87.E5.AD.97.E5.88.97_.28IDS.29" title="漢字構成記述文字列 (Ideographic Description Sequence; IDS)">漢字構成記述文字列 (Ideographic Description Sequence; IDS)</a> ですごい漢字を出しているのとか自作 OS の話とかが印象に残りました。</li>
<li>2回あった自動販売機の話もなかなか面白かったです。 <a href="https://twitter.com/OrientalHistory/status/807530627293593600">https://twitter.com/OrientalHistory/status/807530627293593600</a> <a href="https://twitter.com/OrientalHistory/status/807535513779322880">https://twitter.com/OrientalHistory/status/807535513779322880</a></li>
<li>セッション中は結局 LibreOffice Kaigi 2016.12 の方はいけなかったが、 LibreOffice 側にいた人とも話ができてよかった。</li>
<li>昔の RubyKaigi でセッションがのびたのに別の部屋の次のセッションは始まってしまって、両方見たかった人が最初の方を見逃すということがあって、その後、別の部屋とも同期をとるようになったということがあったのを思い出したのですが、別イベントなので、そこまで同期を取る必要はないにしても、せめてセッションの開始終了予定時刻が同じくらいの時間になっていれば、相互に行き来が発生しやすかったのではないかと思いました。</li>
<li>この話は LibreOffice 側の人にしたのですが、もともとイベントの企画は別々に始まっていて、たまたま会場と日付が一緒だったから合同にしたという流れだったようで、そこまで考えていなかったということのようでした。</li>
</ul>


<h2>まとめ</h2>

<p>k-of.jp で発表者募集を見て応募するまで参加する予定は全くなかったので、
前回会ったのがいつだったか忘れるぐらい久しぶりに会った人もいて、
全体としては楽しかったので、
参加して良かったと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sshでed25519鍵を使うようにした]]></title>
    <link href="http://blog.n-z.jp/blog/2016-12-04-ssh-ed25519.html"/>
    <updated>2016-12-04T14:25:40+09:00</updated>
    <id>http://blog.n-z.jp/blog/ssh-ed25519</id>
    <content type="html"><![CDATA[<p>ssh で使っている鍵が RSA 2048 ビットでちょっと古くなってきているということもあり、
OpenSSH 6.5 で追加された ed25519 鍵に更新することにしました。</p>

<!--more-->


<h2>鍵の種類</h2>

<p><a href="http://jnst.hateblo.jp/entry/2014/12/15/200542" title="GitHubでEd25519鍵をつかう">GitHubでEd25519鍵をつかう</a>
の説明が詳しいですが、他のサイトでも調べた情報によると</p>

<ul>
<li>RSA の 2048 ビットが今の <code>ssh-keygen</code> でのデフォルトなので主流</li>
<li>RSA や ECDSA は <code>ssh-keygen</code> に <code>-b</code> でビット数が指定できる</li>
<li>ECDSA の 521 ビットは 512 の間違いではない</li>
<li>ed25519はビット数が指定出来ない</li>
<li>OpenSSH のssh-keygenは1024bitのDSA鍵しか作れない (<a href="http://d.hatena.ne.jp/hnw/20140705" title="GitHubユーザーのSSH鍵6万個を調べてみた">GitHubユーザーのSSH鍵6万個を調べてみた</a>)</li>
<li>DSA 鍵は弱いので使うべきではない</li>
<li>ed25519はECDSAより署名生成/検証のパフォーマンスが良い</li>
</ul>


<p>などの情報がありました。</p>

<p>ビット数で悩まなくて良いのと、パフォーマンスが良いという情報があったので、
ed25519 を使うことにしました。</p>

<h2>主な環境</h2>

<p>OpenSSH のバージョンは <code>ssh -V</code> で調べました。</p>

<ul>
<li>OS X El Captitan 10.11.6 の OpenSSH_6.9p1, LibreSSL 2.1.8</li>
<li>Ubuntu 14.04.5 LTS (trusty) の OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.8, OpenSSL 1.0.1f 6 Jan 2014</li>
<li>Debian GNU/Linux 8.6 (jessie) の OpenSSH_6.7p1 Debian-5+deb8u3, OpenSSL 1.0.1t  3 May 2016</li>
</ul>


<h2>バージョン情報</h2>

<p>Debian は <a href="https://packages.debian.org/openssh-server">https://packages.debian.org/openssh-server</a> によると wheezy (oldstable) は 1:6.0p1-4+deb7u6 で対応してなさそう (wheezy-backports が 1:6.6p1-4~bpo70+1 なので backports を使えば対応できそう) で、
jessie (stable) は 1:6.7p1-5+deb8u3 なので、今の安定版以降なら問題なく ed25519 が使えそうです。</p>

<p>Ubuntu は <a href="http://packages.ubuntu.com/openssh-server">http://packages.ubuntu.com/openssh-server</a> によると precise (12.04LTS) が 1:5.9p1-5ubuntu1.10 で対応してなさそうでしたが、
trusty (14.04LTS) が 1:6.6p1-2ubuntu2.8 で、
現在主流のバージョンでは問題なく使えそうでした。</p>

<h2>鍵生成</h2>

<p>vagrant 環境で鍵を生成して比較してみたところ、
ed25519 は公開鍵が RSA と比べてかなり短いことがわかりました。
ついでに比較してみたところ、 ECDSA よりも短いということがわかりました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%  ssh-keygen -t ed25519
</span><span class='line'>Generating public/private ed25519 key pair.
</span><span class='line'>Enter file in which to save the key (/home/vagrant/.ssh/id_ed25519):
</span><span class='line'>Enter passphrase (empty for no passphrase):
</span><span class='line'>Enter same passphrase again:
</span><span class='line'>Your identification has been saved in /home/vagrant/.ssh/id_ed25519.
</span><span class='line'>Your public key has been saved in /home/vagrant/.ssh/id_ed25519.pub.
</span><span class='line'>The key fingerprint is:
</span><span class='line'>SHA256:tlGs9kP67mLZzd9lh1/UJY2R/vZc1Q1GA9gyADsRGlw vagrant@yakkety64
</span><span class='line'>The key's randomart image is:
</span><span class='line'>+--[ED25519 256]--+
</span><span class='line'>|   ...Eo.. o.o+. |
</span><span class='line'>|    .o o .+ . += |
</span><span class='line'>|    . o   oo oo.=|
</span><span class='line'>|       . o    ..*|
</span><span class='line'>|        S .    .+|
</span><span class='line'>|       o *     o+|
</span><span class='line'>|        oooo  .oB|
</span><span class='line'>|        +...o  +*|
</span><span class='line'>|       . ++  .. o|
</span><span class='line'>+----[SHA256]-----+
</span><span class='line'>%  cat ~/.ssh/id_ed25519.pub
</span><span class='line'>ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGvN6KKrqsvbFOfLclK/fYIDye6Lms7NhOn0yYNkjMza vagrant@yakkety64
</span><span class='line'>%  ssh-keygen -t ecdsa
</span><span class='line'>Generating public/private ecdsa key pair.
</span><span class='line'>Enter file in which to save the key (/home/vagrant/.ssh/id_ecdsa):
</span><span class='line'>Enter passphrase (empty for no passphrase):
</span><span class='line'>Enter same passphrase again:
</span><span class='line'>Your identification has been saved in /home/vagrant/.ssh/id_ecdsa.
</span><span class='line'>Your public key has been saved in /home/vagrant/.ssh/id_ecdsa.pub.
</span><span class='line'>The key fingerprint is:
</span><span class='line'>SHA256:DebC1pOk6EEL5MVGP0PIziMdAmzgmqAYJl/C14DuSOM vagrant@yakkety64
</span><span class='line'>The key's randomart image is:
</span><span class='line'>+---[ECDSA 256]---+
</span><span class='line'>|=..=+..          |
</span><span class='line'>|.*o.*=           |
</span><span class='line'>|=+=*+.= +        |
</span><span class='line'>|B*o*=+ O +       |
</span><span class='line'>|Boo.+.= S .      |
</span><span class='line'>|.E.. o . .       |
</span><span class='line'>|    .            |
</span><span class='line'>|                 |
</span><span class='line'>|                 |
</span><span class='line'>+----[SHA256]-----+
</span><span class='line'>%  cat ~/.ssh/id_ecdsa.pub
</span><span class='line'>ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCQeG28rZh/SX9MBfKsnltv+hpr41CAT4CZZ9YsmsjVRdb3iKsYq4K4SNwfiVGNaIjKAcuDnaJbk50zOoa8V/Tc= vagrant@yakkety64
</span><span class='line'>%  ssh-keygen
</span><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>Enter file in which to save the key (/home/vagrant/.ssh/id_rsa):
</span><span class='line'>Enter passphrase (empty for no passphrase):
</span><span class='line'>Enter same passphrase again:
</span><span class='line'>Your identification has been saved in /home/vagrant/.ssh/id_rsa.
</span><span class='line'>Your public key has been saved in /home/vagrant/.ssh/id_rsa.pub.
</span><span class='line'>The key fingerprint is:
</span><span class='line'>SHA256:sR7WZK2npMgv8lRZrhofejURfuEs04VJv0quu3xtLiw vagrant@yakkety64
</span><span class='line'>The key's randomart image is:
</span><span class='line'>+---[RSA 2048]----+
</span><span class='line'>|           ..o   |
</span><span class='line'>|          ..+..  |
</span><span class='line'>|        ..+=.o.  |
</span><span class='line'>|         X=.=  . |
</span><span class='line'>|        S ==o .  |
</span><span class='line'>|     . = =o= .   |
</span><span class='line'>|      = =..oo.   |
</span><span class='line'>|    ...*.oE.+ o  |
</span><span class='line'>|     o+oo == +.  |
</span><span class='line'>+----[SHA256]-----+
</span><span class='line'>%  cat ~/.ssh/id_rsa.pub
</span><span class='line'>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCnSyvz7oShBRgD8q91eG4WtdJ83cPJfQAtSKEiE8ELHhqRulL6liPz/jqqpMjQpp/3e3QS8OoxGnuXGgHdkly4cd2UdnWxqbz4oN6ig64rYK/ZshQp5FyKb5L3Ksr+3mkhzxPHQVbSZWa8YoaCEzbteVbdFTXUMO/HFPFTL9s2HHyJoDlzUT0XdyovN6WQ2SEbx6pLudsvhZiaiqrPEHLl4ltq33tGcIMFjeu8XvW3d8jTmuAw0KrL7U3bD20n0xsKj9XBigew9K0PjJQ6QKyNUpXXB94jWv+hpkatHlw0NJm/XUQiHDtWaMCTRB8KDSrFarRbYL5ErfHuCePmYerR vagrant@yakkety64</span></code></pre></td></tr></table></div></figure>


<h2>サービスに登録</h2>

<p>二要素認証の時はちょっと楽しい面もありましたが、
ssh の鍵の変更は面倒なだけでした。</p>

<p>GitHub, BitBucket, Heroku など、試したところはすべて ed25519 の公開鍵に対応していました。</p>

<h2>IdentityFile 更新</h2>

<p><code>~/.ssh/config</code> で余計な鍵を試さないように</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IdentitiesOnly yes
</span><span class='line'>IdentityFile ~/.ssh/id_rsa</span></code></pre></td></tr></table></div></figure>


<p>のような設定を入れている場合は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IdentitiesOnly yes
</span><span class='line'>IdentityFile ~/.ssh/id_ed25519</span></code></pre></td></tr></table></div></figure>


<p>に変更する必要がありました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[certbot の renew hook について]]></title>
    <link href="http://blog.n-z.jp/blog/2016-11-20-certbot-renew-hook.html"/>
    <updated>2016-11-20T14:52:31+09:00</updated>
    <id>http://blog.n-z.jp/blog/certbot-renew-hook</id>
    <content type="html"><![CDATA[<p>certbot で設定の再読み込みには post-hook よりも renew-hook を使った方が良さそうでした。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Debian GNU/Linux 8.6 (jessie)</li>
<li>certbot 0.9.3-1~bpo8+1</li>
</ul>


<h2>hook の指定方法について</h2>

<p><code>certbot renew --pre-hook "service nginx stop" --post-hook "service nginx start"</code> のように <code>certbot</code> コマンドの引数で直接指定するか、 <code>/etc/letsencrypt/cli.ini</code> または <code>$XDG_CONFIG_HOME/letsencrypt/cli.ini</code> (<code>$XDG_CONFIG_HOME</code> が設定されていなければ <code>~/.config/letsencrypt/cli.ini</code>) に <code>renew-hook = service nginx reload</code> のように <code>--</code> を省いたオプション名で ini ファイルに指定する方法があるようです。(<code>ini</code> ファイルは <code>--config cli.ini</code> または <code>-c cli.ini</code> のようにコマンドラインで指定も可能)</p>

<h2>pre-hook, post-hook について</h2>

<p><code>pre-hook</code> と <code>post-hook</code> は standalone プラグインを使っている時に、 <code>certbot</code> の Web サーバーが 80 番ポートを使えるようにするために、通常の Web サーバーを止める用途に適しているようです。</p>

<p>そのため、<code>--dry-run</code> の時でも呼ばれるようです。</p>

<p>使用例:
<code>certbot renew --pre-hook "service nginx stop" --post-hook "service nginx start"</code></p>

<h2>renew-hook について</h2>

<p><code>renew-hook</code> は証明書の更新が成功するごとに呼ばれるので、証明書の再読み込みに適しているようです。</p>

<p>環境変数 <code>RENEWED_LINEAGE</code> に <code>/etc/letsencrypt/live/www.example.com</code> のような証明書の場所へのパスが、
環境変数 <code>RENEWED_DOMAINS</code> に <code>www.example.com example.com</code> のようにスペース区切りの更新されたドメインのリストが渡ってくるようです。</p>

<p>証明書の更新ごとに呼ばれるようなので、たまたま同じタイミングで <code>www.example.com</code> と <code>other.example.net</code> の更新が起こったとして、
証明書の作成の時に <code>-d</code> を同時に指定して同じ証明書の SAN (Subject Alternative Name) に入っているなら、
<code>RENEWED_DOMAINS</code> に並んでいて、
別々に証明書を作成していれば <code>renew-hook</code> が別々に呼ばれました。</p>

<p>(2017-01-03 追記: <code>post-hook</code> は 1 回しか呼ばれませんでした。詳細は<a href="http://blog.n-z.jp/blog/2017-01-03-certbot-renew-hook.html">certbot の renew hook について (その2)</a>を参照)</p>

<h2>renew-hook のすすめ</h2>

<p>以上の違いから、
<code>webroot</code> プラグインを使っている時の証明書の自動再読み込みには
<code>post-hook</code> ではなく <code>renew-hook</code> を使うのがおすすめです。</p>

<p>Web 上で <code>post-hook</code> を使っている例の方が多いのは、
<code>renew-hook</code> の方が後から実装されたからではないかと思います。</p>
]]></content>
  </entry>
  
</feed>
