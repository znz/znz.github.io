<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-06-21T13:47:51+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[シェルで glob 結果を事前に確認する方法]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-21-confirm-glob.html"/>
    <updated>2014-06-21T13:16:56+09:00</updated>
    <id>http://blog.n-z.jp/blog/confirm-glob</id>
    <content type="html"><![CDATA[<p><code>rm *~</code> のつもりで <code>rm * ~</code> (半角スペースが混ざっている) のように実行してしまうような間違いをすると危険です。</p>

<p>その対策として <code>tcsh</code> には <code>rmstar</code> という設定があったり
<code>zsh</code> には <code>RM_STAR_SILENT</code> や <code>RM_STAR_WAIT</code> という設定があるのですが、
ちゃんと展開結果を確認してからコマンドを実行する方が安全です。</p>

<p>また <code>rm</code> 以外でも展開結果を事前に確認できると便利なことが多いです。</p>

<!--more-->


<h2>展開結果の確認方法</h2>

<p><code>bash</code> や <code>zsh</code> の一般的なキー割り当てだと <code>C-x g</code> (Control を押しながら x を押して Control を離して g) で展開結果を確認できます。</p>

<p>Tab キーだとコマンドライン中に展開されてしまいますが、
<code>C-x g</code> だと確認だけ出来ます。</p>

<h3>bash の場合</h3>

<p>たとえば <code>bash</code> なら以下のように展開結果が出て、
プロンプトの行が出てきます。</p>

<figure class='code'><figcaption><span>bash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> <span class="nb">echo</span> /etc/host*&lt;C-x&gt;g
</span><span class='line'><span class="go">host.conf    hostname     hosts        hosts.allow  hosts.deny</span>
</span><span class='line'><span class="gp">$</span> <span class="nb">echo</span> /etc/host*
</span></code></pre></td></tr></table></div></figure>


<h3>zsh の場合</h3>

<p><code>zsh</code> ならプロンプトの行の下に展開結果が出てきます。</p>

<figure class='code'><figcaption><span>zsh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> <span class="nb">echo</span> /etc/host*
</span><span class='line'><span class="go">/etc/host.conf    /etc/hostname     /etc/hosts        /etc/hosts.allow  /etc/hosts.deny</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tab キーの動作</h2>

<p>比較のため Tab キーでの動作例も載せておきます。</p>

<h3>bash の場合</h3>

<p>実際には同じ行でしたが、最初の展開結果に置き換わりました。</p>

<figure class='code'><figcaption><span>bash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> <span class="nb">echo</span> /etc/host*&lt;tab&gt;
</span><span class='line'><span class="gp">$</span> <span class="nb">echo</span> /etc/host.conf
</span></code></pre></td></tr></table></div></figure>


<h3>zsh の場合</h3>

<p>こちらも実際には同じ行ですが、すべての展開結果に置き換わりました。</p>

<figure class='code'><figcaption><span>zsh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> <span class="nb">echo</span> /etc/host*&lt;tab&gt;
</span><span class='line'><span class="gp">%</span> <span class="nb">echo</span> /etc/host.conf /etc/hostname /etc/hosts /etc/hosts.allow /etc/hosts.deny
</span></code></pre></td></tr></table></div></figure>


<p>glob で指定しにくい一部のファイルだけ除外するなど、展開された方が便利な時は
Tab キーで展開してからコマンドラインを編集して実行することもあります。</p>

<h2>まとめ</h2>

<p>一般的な bash 環境ならどこでも使えて、
複雑な glob の展開結果の確認にも便利なので、
<code>C-x g</code> は非常にオススメです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 12 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-20-rubymotion-mokumoku-osaka.html"/>
    <updated>2014-06-20T19:27:13+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 11 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://rubymotionjp.connpass.com/event/6666/">第 12 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。</p>

<p>次回の
<a href="http://rubymotionjp.connpass.com/event/7079/">第 13 回 RubyMotion もくもく会 in Osaka</a>
は 07/16(水) になりました。</p>

<!--more-->


<h2>メモ</h2>

<ul>
<li>一周年記念</li>
<li>RubyMotion は Android にも対応予定</li>
<li>RubyMotion のライセンスが expired して更新しても <code>rake</code> のときの <code>Your maintenance plan is expired. Run 'motion account' to renew it.</code> というメッセージはキャッシュの影響で 24 時間ぐらい待たないと消えないらしいという話</li>
<li>バージョンは 2.29 が最新</li>
<li>Swift が話題</li>
<li><a href="http://tools.msng.info/">割り勘電卓</a></li>
<li><a href="https://github.com/shin1x1/vagrantx">https://github.com/shin1x1/vagrantx</a> のソース公開</li>
<li><a href="https://github.com/MacFace/MacFace/tree/v2.0">MacFace v2</a> が Swift で作り直し中</li>
</ul>


<h2>やったこと</h2>

<p>Interface Builder と <code>gem 'ib'</code> で GUI を作り直そうとしていました。</p>

<p>GUI 作成は細かいサイズを気にしなくて良い Tcl/Tk の pack 方式や
Web での bootstrap のようなやり方の方が慣れていて、
GUI ツールで作成するのは GTK+2 の glade ぐらいしかまともに使ったことがなかったので、
使い方や良い感じに配置する方法で結構悩んでいました。
悩んでいた部分は最後の成果発表の時にいろいろ教えてもらったりしました。</p>

<p>コードとの組み合わせは、検索で見つけた</p>

<pre><code>@mainWindowController = MainWindow.alloc.initWithWindowNibName('MainWindow')
@mainWindowController.window.makeKeyAndOrderFront(self)
</code></pre>

<p>という方法で window は表示できたものの、
<code>@mainWindowController.window</code> が <code>nil</code> になっていて、
<code>makeKeyAndOrderFront</code> の呼び出しは失敗していました。</p>

<p>ひとまず現状は <a href="https://github.com/znz/urltrapper/tree/ib">ib ブランチ</a> に公開しています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jus & USP友の会共催 シェルワンライナー勉強会@関西（第11回シェル芸勉強会） に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-14-jus-usp.html"/>
    <updated>2014-06-14T13:42:31+09:00</updated>
    <id>http://blog.n-z.jp/blog/jus-usp</id>
    <content type="html"><![CDATA[<p><a href="http://japanunixsociety.doorkeeper.jp/events/10184">jus &amp; USP友の会共催 シェルワンライナー勉強会@関西（第11回シェル芸勉強会）</a> に参加してきました。</p>

<p>USP の勉強会には初参加でしたが、楽しかったです。</p>

<p>今回の問題文は <a href="http://www.slideshare.net/ryuichiueda/20140614-35859423">20140614 【問題だけスライド】jus &amp; USP友の会共催 シェルワンライナー勉強会@関西（第11回シェル芸勉強会）</a> で公開されています。</p>

<!--more-->


<h2>準備</h2>

<p>持ち物のところで「open usp Tukubai の入ったUNIX/Linux環境のあるノートPC（Macでも可）」とあったので、
<a href="https://github.com/usp-engineers-community/Open-usp-Tukubai">https://github.com/usp-engineers-community/Open-usp-Tukubai</a> をインストールした Linux 環境を用意したのと、
<a href="https://uec.usp-lab.com/TUKUBAI/CGI/TUKUBAI.CGI?POMPA=TUKUBAI_ON_FREEBSD_DOWNLOAD">Tukubai on FreeBSDダウンロード</a>
から ova ファイルをダウンロードして VirtualBox にインポートして用意しておきました。</p>

<p>結局 open usp Tukubai は不要でしたが、
用意していた Linux 環境は動作確認に使いました。</p>

<h2>ソフトウェアツールとAWK・sedについて座学</h2>

<p>最初の「ソフトウェアツールとAWK・sedについて座学」の話からのメモです。</p>

<div style="float:right"><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4048660683" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></div>


<ul>
<li><a href="http://www.amazon.co.jp/gp/product/4048660683?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4048660683&amp;linkCode=shr&amp;tag=znz-22">フルスクラッチから1日でCMSを作る シェルスクリプト高速開発手法入門</a> という本が出ますという話</li>
<li>IEEE から出ている Netizens という本からの話

<ul>
<li>ed コマンド, grep コマンド</li>
<li>パイプとフィルタコマンド</li>
<li>sed, awk</li>
<li>現在の GNU coreutils に入っているようなコマンド群</li>
</ul>
</li>
<li>実際にコマンドを実行してみる話

<ul>
<li><code>echo です。ます。でした。 | sed 's/。/&amp;\n/g'</code>

<ul>
<li>OSX だと <code>echo です。ます。でした。 | sed 's/。/&amp;\本当に改行/g'</code> でOK (これは Linux でも OK)</li>
<li>bash や zsh なら <code>sed $'s/。/&amp;\\\n/g'</code> で本当の改行の代わりに <code>$'\n'</code> でも大丈夫</li>
</ul>
</li>
</ul>
</li>
<li><p>縦と横の話</p>

<ul>
<li><code>echo {1..10} | awk '{for(i=1;i&lt;=NF;i++){a+=$i};print a}'</code></li>
<li><code>echo {1..10} | tr ' ' '\n' | awk '{a+=$1}END{print a}'</code></li>
</ul>
</li>
<li><p>複雑な例 sm2 というのは tukubai のコマンドだが今回はなくても良い</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat input
</span><span class='line'>a 1
</span><span class='line'>b 3
</span><span class='line'>a 4
</span><span class='line'>b 2
</span><span class='line'>c 1
</span><span class='line'>$ cat input | awk '{x[$1]+=$2}END{for (k in x){print k,x[k]}}'
</span><span class='line'>a 5
</span><span class='line'>b 5
</span><span class='line'>c 1
</span><span class='line'>$ cat input | sort | sm2 1 1 2 2
</span><span class='line'>a 5
</span><span class='line'>b 5
</span><span class='line'>c 1</span></code></pre></td></tr></table></div></figure>


<h2>チーム分け</h2>

<p>結構適当でした。</p>

<h2>前半戦</h2>

<h3>1問目</h3>

<p><code>echo -12,135,123 135,123</code> を足すという問題。</p>

<ul>
<li>最初に試した方法 <code>echo -12,135,123 135,123 | tr -d ',' | tr ' ' '+' | bc</code></li>
<li>話の流れでいくと <code>echo -12,135,123 135,123 | sed 's/,//g' | awk '{print $1+$2}'</code></li>
<li>出力にも <code>,</code> を入れるなら <code>"%'d"</code> を使って <code>echo -12,135,123 135,123 | sed 's/,//g' | awk '{printf "%'"'"'d\n", $1+$2}'</code></li>
<li><code>,</code> を消すのも awk を使うなら <code>echo -12,135,123 135,123 | awk '{gsub(",","");printf "%'"'"'d\n", $1+$2}'</code></li>
</ul>


<h3>2問目</h3>

<p>以下のデータの順番を「名前 点数」に統一するという問題。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat score
</span><span class='line'>45 鎌田
</span><span class='line'>浜田 72
</span><span class='line'>今泉 84
</span><span class='line'>54 上田
</span><span class='line'>62 斉藤</span></code></pre></td></tr></table></div></figure>


<p>勘違いして点数の方を左にしてしまっていました。</p>

<ul>
<li><code>cat score | awk '$1~/[0-9]/{print $2,$1} $2~/[0-9]/{print $1,$2}'</code></li>
<li><code>cat score | sed 's/\([^0-9 ]*\) \([0-9]*\)/\2 \1/'</code></li>
</ul>


<p>twitter 上で出ていた解答に比べて全然ダメな感じでした。</p>

<h3>3問目</h3>

<p>m/s に変換する問題。 (1マイル=1609m)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat speed
</span><span class='line'>100km/h
</span><span class='line'>16mph</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>cat speed | sed 's,km/h,*1000/3600,;s,mph,*1609/3600,' | bc | sed 's,$,m/s,'</code></li>
<li><code>cat speed | awk '/km/{print $1*1000/3600,"m/s"}/mph/{print $1*1609/3600,"m/s"}'</code></li>
</ul>


<p><code>bc</code> だと整数になってしまうので、小数点以下の数値もほしければ <code>awk</code> を使って計算する方が良かったようです。
Google 電卓で検算できるのが便利でした。</p>

<h3>4問目</h3>

<p>さいとうさん、さわださん、ひろたさん、いとうさんの数を数えてください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat name
</span><span class='line'>齋藤 斉藤 沢田 澤田 伊藤
</span><span class='line'>齋藤 齊藤 広田 廣田</span></code></pre></td></tr></table></div></figure>


<p>最初は総数を数えればいいのかと思って <code>egrep -o 'さいとう|さわだ|ひろた|いとう' | wc -l</code> というのを考えていたのですが、名前ごとにカウントだったようです。</p>

<p><a href="https://twitter.com/biwakonbu/status/477703196714868737">全くと言って良い程リダイレクトが無くて cat ばっかり</a>というツイートを受けて、頭に <code>&lt; input</code> を付ける方法に切り替えました。
<code>cat</code> を使っているのは入力を先頭に書きたいからのはず、ということも合わせて、
あまり使われているのを見かけませんが、頭に付けるようにしました。</p>

<p>kakasi をインストールするのは面倒そうだったので、
<code>sed</code> でがんばって
<code>&lt; name sed 's/[齋斉齊]藤/さいとう/g;s/[沢澤]田/さわだ/g;s/[広廣]田/ひろた/g;s/伊藤/いとう/g' | egrep -o 'さいとう|さわだ|ひろた|いとう' | sort | uniq -c | sort -n</code>
としました。</p>

<p>休憩時間中に Unicode の異体字データベースとかで同一視するためのデータがないか探してみたのですが、時間不足で見つけられませんでした。</p>

<h2>後半戦</h2>

<h3>csv</h3>

<p>csv の内容を全部足す問題。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat csv
</span><span class='line'>1,2,"123,456",-5,"-123,444"
</span><span class='line'>6,7,8,"12",9</span></code></pre></td></tr></table></div></figure>


<p>行ごととかいうこともなく、全部足せば良いという問題でした。</p>

<p><code>""</code> の処理はシェルに任せれば良いかと思ったら、
そういうことをするコマンドは <code>xargs</code> だったので、
<code>&lt;csv tr ',' ' ' | xargs -n1 | tr -d ' ' | awk '{a+=$1}END{print a}'</code>
という解答になりました。</p>

<p><a href="https://twitter.com/znz/status/477713093535866880">この解答</a>は<a href="https://twitter.com/ryuichiueda/status/477713692927066112">高い評価</a>をもらいました。</p>

<h3>matrix</h3>

<p>行列の転置。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat matrix
</span><span class='line'>a b c
</span><span class='line'>d e f
</span><span class='line'>g h i</span></code></pre></td></tr></table></div></figure>


<p>ファイルを複数回読むのはズルかと思って、
連想配列にためるようにして
<code>&lt; matrix awk '{for(i=1;i&lt;=NF;i++){m[i]=m[i]" "$i}}END{for(k in m){print m[k]}}'|sed 's/^ //'</code>
となりました。
端の処理がうまく出来なかったので、<code>sed</code> で後処理しました。
時間優先の時は、単独でうまく書けなくても、他の方法を組み合わせてなんとかする、と方法もありだと思います。</p>

<p>解答例では
<code>cat matrix | awk '{for(i=1;i&lt;=NF;i++){print NR,i,$i}}' | sort -k2,2 | awk '{print $3} | xargs -n 3</code>
ということで一度 <code>行番号 桁番号 内容</code> という形式に変換するのがポイントと言っていました。</p>

<h3>IPv6 その1</h3>

<p>IPv6 アドレスの省略された <code>0</code> を復元する問題。</p>

<p>とりあえず時間内に解けることを優先して、
<code>echo 2001:db8:20:3:1000:100:20:3 | xargs -d: -n1 | sed 's/^/0000/;s/.*\(....\)$/\1/' | xargs | tr ' ' : | sed -e 's/:0000$//'</code>
となりました。</p>

<p>後で確認したら <code>xargs -d:</code> は Mac OS X の <code>xargs</code> だと使えませんでした。
さらに <code>xargs -d: -n1</code> だと余計な改行が付くので、最後に <code>sed</code> で削除しているのですが、
<code>tr : ' ' | xargs -n1</code> にすればそもそも余計な改行が付かなかったようです。</p>

<p>それから、他の解答例をみると、前につめるのは <code>0000</code> じゃなくて <code>000</code> で十分でした。</p>

<h3>IPv6 その2</h3>

<p>時間内に解くために思いついた方法をどんどん試して
<code>&lt;ipv6 awk -F: '{n=8-NF;for(i=0;i&lt;=n;i++){sub("::",":0::")}sub("::",":")}1' | sed 's/:/:000/g;s/:[^:]*\([^:][^:][^:][^:]\)/:\1/g'</code>
となりました。</p>

<p>内容を書き換えると <code>NF</code> が壊れてしまうので <code>i&lt;=8-NF</code> だとうまくいきませんでした。
そこで一度 <code>n</code> に保存してから <code>for</code> ループで <code>0</code> をつめていきました。
つめる場所を保存するために <code>::</code> は残しておいて、後で <code>:</code> に置き換えています。</p>

<p><code>1</code> は <a href="http://golf.shinh.org/">Anarchy Golf</a> 関連で知っていた &lsquo;{print}&rsquo; の短縮のようなものです。</p>

<p>その1の時の方法は途中で複数行に分割していて、複数行の IPv6 アドレスを同時に扱うのには使えなかったので、
<code>sed 's/:/:000/g;s/:[^:]*\([^:][^:][^:][^:]\)/:\1/g'</code>
にかわりました。
後ろ4文字を残すというのは、素直に <code>[^:]</code> を列挙しても twitter に投稿できる文字数に収まりました。</p>

<p>今回の問題だけなら良いのですが、先頭が <code>2001</code> で既に4文字になっているのを利用して、処理を省略しているので、汎用的にするなら、そこも処理する必要があります。</p>

<p>ruby なら <code>ruby -r ipaddr -nle 'puts IPAddr.new($_).to_string' ipv6</code> で出来ました。</p>

<h2>感想</h2>

<p>twitter のハッシュタグ (<code>#シェル芸</code>) での他の人の解答を参考にしたり、自分の解答を紹介したりできたり、頭リダイレクトが流行ったりして面白かったです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fluentd に drb で接続してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-13-fluentd-drb.html"/>
    <updated>2014-06-13T22:41:08+09:00</updated>
    <id>http://blog.n-z.jp/blog/fluentd-drb</id>
    <content type="html"><![CDATA[<p>druby の口が公開されていたら、そのユーザーの権限で何でも実行できるはず、
ということで、ちょっと試してみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li><code>ruby</code> 2.1.2</li>
<li><code>fluentd</code> 0.10.49</li>
</ul>


<h2>環境の準備</h2>

<p>vagrant 上で rbenv と ruby-build を使ってインストールした ruby 2.1.2 で</p>

<ul>
<li><code>gem install fluentd</code></li>
<li><code>fluentd --setup /vagrant/fluent</code></li>
<li><code>fluentd -c /vagrant/fluent/fluent.conf &amp;</code></li>
</ul>


<p>と起動して準備しておきました。</p>

<h2>実行例</h2>

<p><code>irb</code> を起動しているユーザーと同じユーザーで <code>fluentd</code> も起動しているので、
特に面白いことはできそうになかったのですが、
<code>/proc/$$/cmdline</code> を確認すると <code>irb</code> 側ではなく、
ちゃんと <code>fluentd</code> 側で任意のコマンドが実行できていることがわかります。</p>

<pre><code>vagrant@fluentd-vm:~$ rbenv exec irb -r irb/completion --simple-prompt
&gt;&gt; require 'drb'
=&gt; true
&gt;&gt; d = DRbObject.new_with_uri('druby://127.0.0.1:24230'); nil
=&gt; nil
&gt;&gt; d.method_missing(:send, :eval, "`id`")
=&gt; "uid=1000(vagrant) gid=1000(vagrant) groups=1000(vagrant)\n"
&gt;&gt; d.method_missing(:send, :eval, '`cat /proc/$PPID/cmdline`')
=&gt; "/opt/rbenv/versions/2.1.2/bin/ruby\x00/opt/rbenv/versions/2.1.2/bin/fluentd\x00-c\x00/vagrant/fluent/fluent.conf\x00"
</code></pre>

<h2>雑感</h2>

<p><code>root</code> 権限で起動しているなら <code>debug_agent</code> は有効にしない方が良さそうだし、
ローカルユーザーが <code>fluentd</code> の実行ユーザーの権限を使えるとまずい場合も有効にしない方が良さそうだと思いました。</p>

<p>また、知っている人には当たり前のことですが、
<code>drb</code> は外部に安全に公開できるものではないので、
使う場合も <code>localhost</code> だけ待ち受けるように制限すべきです。</p>

<p>td-agent は初期設定でそうなっているのですが、
<code>fluentd --setup</code> はそうなっていないので、
適切に設定を変更するなり firewall で塞ぐなりしておく必要がありそうです。</p>

<h2>td-agent 1.1.19-1 での初期設定</h2>

<p><code>127.0.0.1</code> だけで待ち受けるようになっていました。</p>

<pre><code>## live debugging agent
&lt;source&gt;
  type debug_agent
  bind 127.0.0.1
  port 24230
&lt;/source&gt;
</code></pre>

<h2><code>fluentd --setup</code> で生成される設定</h2>

<p>外からも受けつけるようになっていました。</p>

<pre><code># Listen DRb for debug
&lt;source&gt;
  type debug_agent
  port 24230
&lt;/source&gt;
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://docs.ruby-lang.org/ja/2.1.0/library/drb.html">るりま の DRb</a> のセキュリティ</li>
<li><a href="http://docs.ruby-lang.org/en/2.1.0/DRb.html#module-DRb-label-Security">RDoc の DRb の Security の説明</a> (英語)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ci_reporter から rspec_junit_formatter に移行した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-13-ci-reporter-to-rspec-junit-formatter.html"/>
    <updated>2014-06-13T22:33:12+09:00</updated>
    <id>http://blog.n-z.jp/blog/ci-reporter-to-rspec-junit-formatter</id>
    <content type="html"><![CDATA[<p>rspec 2 から rpsec 3 への移行で <code>ci_reporter</code> がうまく動かなくなって困っていたら、
<code>rspec_junit_formatter</code> というのを<a href="https://twitter.com/joker1007/status/477372843601055744">教えてもらった</a>ので、
移行してみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li><code>ruby</code> 2.1.2</li>
<li><code>rails</code> 3.2.18</li>
<li><code>rspec-rails</code> 3.0.1</li>
<li><code>rspec_junit_formatter</code> 0.2.0</li>
</ul>


<h2>Gemfile の変更</h2>

<p><code>group :test</code> の <code>gem 'ci_reporter', require: false</code> を <code>gem 'rspec_junit_formatter'</code> に変更しました。</p>

<h2>jenkins で実行しているシェルスクリプトの変更</h2>

<p><code>bundle exec rake -f $(bundle show ci_reporter)/stub.rake ci:setup:rspec default SPEC_OPTS=--no-drb COVERAGE=on</code>
のように実行していたのを</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rm -rf spec/reports
</span><span class='line'>cat &gt;.rspec &lt;&lt;EOF
</span><span class='line'>--format RspecJunitFormatter
</span><span class='line'>--out spec/reports/rspec.xml
</span><span class='line'>EOF
</span><span class='line'>bundle exec rake COVERAGE=on</span></code></pre></td></tr></table></div></figure>


<p>に変更しました。
<code>spec/reports</code> は自動で作成してくれるようで、事前に作成しておく必要はないようです。
<code>ci_reporter</code> はタスクの最初の方で <code>spec/reports</code> を削除していたので、同様に削除するようにしました。</p>

<p><code>COVERAGE=on</code> は <code>simplecov</code>, <code>simplecov-rcov</code> を有効にするかどうかのフラグとして使っているので今回の移行とは無関係です。</p>

<p><a href="https://github.com/sj26/rspec_junit_formatter">RSpec JUnit Formatter の README</a> に書いてある
<code>rspec --format RspecJunitFormatter --out rspec.xml</code>
という実行方法だとテスト用データベースの初期化関連で問題がおきたので、
<code>rspec</code> コマンド直接ではなく <code>rake</code> コマンドのデフォルトタスクで実行するために、
<code>.rspec</code> ファイルを書き換えるようにしました。
<code>SPEC_OPTS</code> で指定する方法でも良かったかもしれません。</p>

<h2>Jenkins の設定</h2>

<p><code>ci_reporter</code> の設定のときに
<code>ビルド後の処理</code> で <code>JUnitテスト結果の集計</code> を追加していて、
<code>テスト結果XML</code> は <code>spec/reports/**/*.xml</code> という設定にしていて、
<code>RspecJunitFormatter</code> の出力先の方をそちらにあわせたので、
Jenkins 側の設定は変更していません。</p>

<h2>テスト結果</h2>

<p>Jenkins のテスト結果の表示では <code>spec.controllers</code> や <code>spec.models</code> などがパッケージになっていました。</p>

<p><code>spec/support/*.rb</code> で <code>shared_examples</code> を定義していたら、
<code>spec.support</code> がパッケージになってしまっているのが気になりましたが、
<code>ci_reporter</code> のときはほぼすべてが <code>(root)</code> というパッケージになっていたのに比べると
便利になったように思います。</p>

<h2><code>RSpec::Core::DeprecationError</code></h2>

<p><code>RSpec.configure do |config|</code> で <code>config.raise_errors_for_deprecations!</code> を実行していると</p>

<pre><code>.../gems/rspec-core-3.0.1/lib/rspec/core/formatters/deprecation_formatter.rb:186:in `puts': Treating `metadata[:execution_result]` as a hash is deprecated. Use the attributes methods to access the data instead. Called from .../rspec_junit_formatter-0.2.0/lib/rspec_junit_formatter/rspec3.rb:43:in `result_of'. (RSpec::Core::DeprecationError)`
</code></pre>

<p>というエラーになったので、
<code>config.raise_errors_for_deprecations!</code>
を外しました。</p>

<p><a href="https://github.com/sj26/rspec_junit_formatter/commit/96f0115f7dabbea623f04b60dc23519683f39cfa">github の master では直っている</a>ので、次のバージョンがリリースされたら解決しそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian squeeze (6.0) LTS の使い方]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-06-squeeze-lts.html"/>
    <updated>2014-06-06T14:07:35+09:00</updated>
    <id>http://blog.n-z.jp/blog/squeeze-lts</id>
    <content type="html"><![CDATA[<p>OpenSSL の脆弱性
(<a href="http://ccsinjection.lepidum.co.jp/ja.html">CCS Injection</a>,<a href="https://security-tracker.debian.org/tracker/CVE-2014-0224">CVE-2014-0224</a>)
の修正が
<a href="https://lists.debian.org/debian-lts-announce/2014/06/msg00002.html">squeeze の LTS に入ったというアナウンス</a>
があったのに、
今まで通り使っている squeeze には修正が入らないと思って調べてみたところ、
<a href="https://wiki.debian.org/LTS/Using#Add_squeeze-lts_to_your_sources.list">apt-line の追加</a>
が必要でした。</p>

<!--more-->


<h2>追加する apt-line</h2>

<p>既存の <code>/etc/apt/sources.list</code> に</p>

<pre><code>deb http://ftp.jp.debian.org/debian squeeze main non-free contrib
deb-src http://ftp.jp.debian.org/debian squeeze main non-free contrib

deb http://security.debian.org/ squeeze/updates main contrib non-free
deb-src http://security.debian.org/ squeeze/updates main contrib non-free

# squeeze-updates, previously known as 'volatile'
deb http://ftp.jp.debian.org/debian squeeze-updates main contrib non-free
deb-src http://ftp.jp.debian.org/debian squeeze-updates main contrib non-free
</code></pre>

<p>という apt-line を設定したとすると、</p>

<pre><code>deb http://ftp.jp.debian.org/debian squeeze-lts main non-free contrib
deb-src http://ftp.jp.debian.org/debian squeeze-lts main non-free contrib
</code></pre>

<p>を <strong>追加</strong> します。</p>

<p>ネタ元の Debian Wiki に書いてあるように適切に使うには squeeze と squeeze security の apt-line も残した上で squeeze lts の apt-line を <strong>追加</strong> する必要があります。</p>

<h2>apt pinning を使っている時の注意点</h2>

<p><code>/etc/apt/apt.conf</code> で</p>

<pre><code>APT::Default-Release "squeeze";
</code></pre>

<p>のように設定している場合はコメントアウトするか</p>

<pre><code>APT::Default-Release "squeeze-lts";
</code></pre>

<p>に書き換える必要があります。</p>

<h2>更新の反映</h2>

<p>いつも通り <code>apt-get update</code> と <code>apt-get upgrade</code> で更新できます。</p>

<h2>サポート対象外のパッケージを調べる</h2>

<p><code>squeeze-lts</code> の apt-line を追加すると <code>debian-security-support</code> というパッケージがインストールできるようになります。</p>

<p><code>debian-security-support</code> パッケージをインストール中にサポート対象外のパッケージについての情報が表示されます。
インストール後は <code>check-support-status</code> で同じ内容が表示できます。</p>

<p>Ubuntu には <code>ubuntu-support-status</code> というコマンドがあるので、似たようなものが Debian にもできたということでしょうか。
<code>debian-security-support</code> パッケージは今のところ <code>sid</code> と <code>squeeze-lts</code> にだけあるようです。</p>

<h2>aptitude 検索パターンで LTS に収録されているパッケージ一覧</h2>

<p><code>aptitude search '~A squeeze-lts'</code> で <code>squeeze-lts</code> に収録されているパッケージ一覧が調べられます。</p>

<p>今のところ、</p>

<ul>
<li><code>chkrootkit</code></li>
<li><code>debian-security-support</code></li>
<li><code>gnutls</code> 関係</li>
<li><code>hello</code></li>
<li><code>openssl</code> 関係</li>
</ul>


<p>がありました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant の Multi VM 間で IPsec を試した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-04-vagrant-multivm-ipsec-demo.html"/>
    <updated>2014-06-04T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/vagrant-multivm-ipsec-demo</id>
    <content type="html"><![CDATA[<p>正常に IPsec の暗号化通信ができているときの racoon のログなどを確認したかったので、
Vagrant と ansible で
IPsec で通信できる Multi VM 環境を作ってみました。</p>

<p>playbook は
<a href="https://github.com/znz/ansible-playbook-ipsec-demo">https://github.com/znz/ansible-playbook-ipsec-demo</a>
で公開しています。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>ホスト OS : Mac OS X 10.9.3</li>
<li>VirtualBox 4.3.12</li>
<li>Vagrant 1.6.3</li>
<li>ansible 1.6.2</li>
<li>ゲスト OS : Ubuntu 14.04 &times; 2</li>
</ul>


<p>Ubuntu は <a href="https://cloud-images.ubuntu.com/vagrant/trusty/current/">https://cloud-images.ubuntu.com/vagrant/trusty/current/</a> のイメージを使ったので、
daily build の状態によっては動作が変わっているかもしれません。</p>

<h2>ホストオンリーネットワーク</h2>

<p>使った後は</p>

<ul>
<li>vboxnet1 (192.168.50.1/24)</li>
<li>vboxnet2 (192.168.11.1/24)</li>
<li>vboxnet3 (192.168.12.1/24)</li>
</ul>


<p>が勝手に増えているので、不要なら設定で消しておくと良いと思います。</p>

<p>ネットワークとしては以下のように 192.168.50.0/24 の部分で IPsec 接続をして、
192.168.11.11 と 192.168.12.12 をつなぐ、という感じにしています。
デフォルトの eth0 は外部への接続用としてそのままにしています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>192.168.11.11 (vm1:eth2)
</span><span class='line'>       |
</span><span class='line'>192.168.50.11 (vm1:eth1)
</span><span class='line'>       |
</span><span class='line'>192.168.50.12 (vm2:eth1)
</span><span class='line'>       |
</span><span class='line'>192.168.12.12 (vm2:eth2)</span></code></pre></td></tr></table></div></figure>


<h2>準備</h2>

<p>Usage に書いてあるように準備をしておきます。
先日作った <code>ja_jp</code> role は git submodule にしているので、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% git submodule init
</span><span class='line'>% git submodule update</span></code></pre></td></tr></table></div></figure>


<p>で取得する必要があります。</p>

<h2>試し方</h2>

<p><code>vagrant up</code>
すると
<code>/etc/ipsec-tools.conf</code>
と
<code>/etc/racoon/racoon.conf</code>
に設定が入っている状態になっているので、
始点アドレスを指定して
<code>ipsec-tools.conf</code>
に設定した経路を通るようにパケットを送ると
IPsec VPN がつながります。</p>

<p><code>ping</code> コマンドのように直接始点アドレスを指定するオプションがない場合は
<code>ping -I eth2 192.168.12.12</code> のように network interface で指定すれば
良いようです。</p>

<h2>動作確認</h2>

<p>以下のコマンドの出力が接続前後で変わることが確認できます。</p>

<ul>
<li><code>racoonctl -l show-sa isakmp</code></li>
<li><code>racoonctl -l show-sa ipsec</code></li>
<li><code>setkey -D</code></li>
</ul>


<p>racoon のログが <code>/var/log/syslog</code> に大量に出ているのを確認できます。
(<code>racoon.conf</code> で <code>log debug</code> にしているため)</p>

<h2>tshark でパケットの確認</h2>

<p><code>tshark</code> パッケージをインストールした後、
<code>sudo dpkg-reconfigure wireshark-common</code>
で一般ユーザーでも実行を許可するようにして、
実行を許可するユーザーを <code>wireshark</code> に追加します。</p>

<p>グループの追加を反映するためにログインし直すと、
<code>tshark -i eth1 -V 'port 500'</code>
などでパケットの確認ができるようになります。</p>

<p>暗号化されていて詳細はわかりませんが、
UDP の 500 番ポートで Informational のパケットが流れていることが確認できました。</p>

<p>GUI の wireshark の方では
<a href="http://ask.wireshark.org/questions/12019/how-can-i-decrypt-ikev1-andor-esp-packets">http://ask.wireshark.org/questions/12019/how-can-i-decrypt-ikev1-andor-esp-packets</a>
の方法で暗号化の解除もできるようです。</p>

<p>syslog の方で racoon のログをみると、
DPD のパケットらしいということが確認できました。
syslog の方で <code>#012</code> となっている部分がありますが、
これは rsyslog で改行が変換されたたもので空白として無視すれば良くて、
例えば</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Jun  4 17:54:43 vm1 racoon: DEBUG: new cookie:#012831d33d46e20f8e6
</span><span class='line'>Jun  4 17:54:43 vm1 racoon: DEBUG: final encryption key computed:
</span><span class='line'>Jun  4 17:54:43 vm1 racoon: DEBUG: #012932d361f fc62ddc2 6164d513 d40d211f b7364166 232cf490</span></code></pre></td></tr></table></div></figure>


<p>というログなら cookie は <code>831d33d46e20f8e6</code> になります。</p>

<p>鍵は <code>932d361ffc62ddc26164d513d40d211fb7364166232cf490</code> になると思ったのですが、
これを
Edit &ndash;> Preferences &ndash;> Protocols &ndash;> ISAKMP &ndash;> IKEv1 Decryption Table:
に設定すれば良いはずなのですが、試したところ decrypt されなかったので、
あっているのかどうかはわかりませんでした。
cookie の方は他のログなどで確認できたので、あっているはずです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible-galaxy を使ってみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-02-ansible-galaxy.html"/>
    <updated>2014-06-02T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-galaxy</id>
    <content type="html"><![CDATA[<p>ansible の複数の playbook で role を共有するのに
<a href="https://galaxy.ansible.com/">Ansible Galaxy</a>
はどうだろうと思って登録してみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>ansible 1.6.2</li>
</ul>


<h2>アカウント登録</h2>

<p>後で github から role を import するということもあって、
github 連携でアカウントを登録しました。</p>

<p>アカウントは4文字以上必須ということで <code>znzj</code> にしました。
(<a href="https://index.docker.io/">docker index</a> とか
<a href="https://vagrantcloud.com/">Vagrant Cloud</a> とか
最近は4文字以上必須が多いのでしょうか?)</p>

<h2>role を github に公開</h2>

<p><code>ansible-galaxy init ansible-role-ja_jp</code> でひな形を作成して、
<code>provisioning/roles/ja_jp</code> というディレクトリの中身だったものを移行して
<a href="https://github.com/znz/ansible-role-ja_jp">https://github.com/znz/ansible-role-ja_jp</a> として公開しました。</p>

<p>apt のミラーサイトとして日本のミラーを使ったり、日本語 locale にしたり、タイムゾーンを JST にしたりする role です。</p>

<h2>Ansbile Galaxy に role を追加</h2>

<p>ログインした状態だと右上の方に出てくる <code>Add a Role</code> というリンクから登録します。</p>

<ul>
<li>Github Username/Account : znz</li>
<li>Github Repository : ansible-role-ja_jp</li>
<li>Alternate Name : ja_jp</li>
</ul>


<p>という内容で登録したところ、
<a href="https://galaxy.ansible.com/list#/roles/967">https://galaxy.ansible.com/list#/roles/967</a>
で見えるようになりました。</p>

<p>URL をみるとわかるように JavaScript オフだと個別の role は見えません。
ちょっと試した感じだと代用の URL も見つけられませんでした。</p>

<h2>動作確認</h2>

<p><code>ansible-galaxy install znzj.ja_jp</code> だと <code>/usr/local/etc/ansible/roles/znzj.ja_jp</code> にインストールされてしまった (Homebrew でインストールした ansible を使っている場合) ので、
<code>ansible-galaxy install --roles-path ./roles znzj.ja_jp</code>
でカレントディレクトリの中にインストールし直しました。</p>

<h2>感想</h2>

<p>これだけだと git submodule に比べて利点が見えてこないのですが、
依存関係やバージョン指定をちゃんと使えれば便利そうに思いました。</p>

<p>自分が登録した role にバージョンを指定する方法がわからず、
今のところバージョンなしのままなので、どうにかしたいです。</p>

<h2>参考サイト</h2>

<ul>
<li><a href="http://qiita.com/kiri/items/f329a35543022d6e45d0">AnsibleWorks Galaxyにroleを登録してみる &ndash; Qiita</a>

<ul>
<li>スクリーンショットをみると AnsibleWorks Galaxy になっているところが今は Ansible Galaxy なので、いつの間にか名前が変わっているようです。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 11 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-28-rubymotion-mokumoku-osaka.html"/>
    <updated>2014-05-28T19:38:39+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 10 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://connpass.com/event/6116/">第 11 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。</p>

<p>次回の
<a href="http://connpass.com/event/6666/">第 12 回 RubyMotion もくもく会 in Osaka</a>
は 06/20(金) になりました。</p>

<!--more-->


<h2>メモ</h2>

<ul>
<li><code>gem 'ib'</code> と Auto Layout</li>
<li><a href="http://kojisatoapp.blogspot.jp/2014/03/admobnendiadadmob.html">アプリで飯を食う: AdMobメディエーションで広告(Nend,iAd,AdMob)を切り替える方法</a></li>
<li><code>usingSpringWithDamping</code></li>
<li><a href="http://vagrantmanager.com/">Vagrant Manager</a></li>
<li><a href="http://stackoverflow.com/questions/13216092/how-to-sort-a-hash-by-value-in-descending-order-and-output-a-hash-in-ruby">Hash のソート</a></li>
<li><a href="http://urltrapper.n-z.jp/">URLTrapper</a> v0.1</li>
<li><a href="https://itunes.apple.com/jp/app/kokowo-songru/id473519853?mt=8">ここを送る</a></li>
<li><a href="http://shin1x1.github.io/vagrantx/">VagrantX</a> v0.2.0</li>
<li><a href="http://macface.github.io/">MacFace</a></li>
</ul>


<h2>URLTrapper 公開</h2>

<p>今日は URLTrapper の公開作業をしていました。</p>

<p>最終的には
<a href="http://urltrapper.n-z.jp/">URLTrapper</a>
の<a href="https://github.com/znz/urltrapper">ソースコードを公開</a>して、
<a href="https://github.com/znz/urltrapper/releases/tag/v0.1">v0.1 をリリース</a>しました。</p>

<h2>Config 設定</h2>

<p>まず
<a href="http://rubymotion.jp/RubyMotionDocumentation/guides/project-management/index.html">RubyMotion Project Management Guide</a>
の 2. Configuration をみて identifier などを設定していきました。</p>

<h2>リリースファイル作成</h2>

<p><code>rake build</code> で <code>build/MacOSX-10.9-Release/*.app</code> が出来るので、
それを Finder で zip にして、
バージョン付きのファイル名にしました。</p>

<h2>リリース</h2>

<p>github の Release からリリースを作成して、
先ほどの zip ファイルをアップロードしてリリースしました。</p>

<p>途中、リリースノートにスクリーンショットをアップロードしました。
このスクリーンショットは後で GitHub Pages を作る時にも使いました。</p>

<h2>GitHub Pages 作成</h2>

<p>github の Settings から GitHub Pages にある Automatic page generator を使って作成しました。</p>

<p>自動作成されたものから、ダウンロードのリンクのところは VagrantX を参考にして、
ソースコードのダウンロードからバイナリの zip のダウンロードに書き換えました。</p>

<h2>ドメイン問題</h2>

<p><code>znz.github.io</code> は、この blog 用に使っていて、
<code>znz.github.io/urltrapper</code> を開くと
<code>blog.n-z.jp/urltrapper</code> に飛ばされてしまって
困ってしまったので、
<a href="https://github.com/znz/urltrapper/blob/gh-pages/CNAME">https://github.com/znz/urltrapper/blob/gh-pages/CNAME</a>
として個別のサブドメインを使うように設定したのですが、
すぐには反映されなくて、しばらく悩んでいました。</p>

<p>最後の成果発表のタイミングでは反映されていて見えるようになっていました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress で ansible の記事を書く時のエスケープ]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-20-octopress-ansible.html"/>
    <updated>2014-05-20T23:25:18+09:00</updated>
    <id>http://blog.n-z.jp/blog/octopress-ansible</id>
    <content type="html"><![CDATA[<p>octopress で ansible の記事を書く時に連続する <code>{</code> のエスケープに困ったので、
対処方法を調べました。</p>

<!--more-->


<h2>コードブロックのエスケープ</h2>

<p><a href="http://stackoverflow.com/questions/15786144/how-to-escape-in-markdown-on-octopress">How to escape {{ in markdown on Octopress? &ndash; Stack Overflow</a>
にあるように</p>

<pre><code>```種類 ファイル名
コードブロック
```
</code></pre>

<p>の外側を
<code>{% raw %}</code> と <code>{% endraw %}</code>
でくくればうまくいきました。</p>

<h2>文中の {{ のエスケープ</h2>

<p>先ほどのリンクのアンカーやこの節の見出しのような文の途中は</p>

<pre><code>{{ "{{" }}
</code></pre>

<p>のように書けばエスケープできました。</p>

<p>幅なしスペース (<code>&amp;#x200B;</code>) のような幅のない文字を挟んでごまかすという手もあるかもしれません。</p>

<h2>文中の <code>{%</code> のエスケープ</h2>

<p><code>{% raw %}</code> と <code>{% endraw %}</code> 自体をエスケープするのに</p>

<pre><code>{{ "{%" }}
</code></pre>

<p>を使って</p>

<pre><code>`{{ "{%" }} raw %}` と `{{ "{%" }} endraw %}`
</code></pre>

<p>のように書きました。</p>

<p><code>%}</code> まで <code>""</code> の中に入れようとして</p>

<pre><code>`{{ "{% raw %}" }}`
</code></pre>

<p>と書くと</p>

<pre><code>Liquid Exception: Variable '{{ "{% raw %}' was not properly terminated with regexp: /\}\}/
</code></pre>

<p>というエラーになってうまくいきませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible で sources.list を変更したときに update する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-20-ansible-apt-update.html"/>
    <updated>2014-05-20T22:58:09+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-apt-update</id>
    <content type="html"><![CDATA[<p>ansible で sources.list を変更したときには
<code>apt-get update</code> して欲しいのですが、
毎回 update するのは無駄なので、
<code>cache_valid_time</code> も使いたいと思ったので対処しました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>クライアント側 ansible 1.6.1</li>
<li>サーバー側 Ubuntu 12.04</li>
</ul>


<h2>やり方</h2>

<p><code>register</code> で <code>template</code> モジュールの実行結果を受けて、
<code>changed</code> の場合は必ず update して、
<code>skipped</code> の場合は <code>cache_valid_time</code> で情報が古い場合だけ update するようにしました。</p>

<figure class='code'><figcaption><span>tasks/apt.yaml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">src=sources.list.{{ ansible_distribution }}.j2 dest=/etc/apt/sources.list owner=root group=root mode=0644</span>
</span><span class='line'>  <span class="l-Scalar-Plain">register</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">apt_sources_list</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">apt</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">update_cache=yes</span>
</span><span class='line'>  <span class="l-Scalar-Plain">when</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">apt_sources_list|changed</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">apt</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">update_cache=yes cache_valid_time=3600</span>
</span><span class='line'>  <span class="l-Scalar-Plain">when</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">apt_sources_list|skipped</span>
</span></code></pre></td></tr></table></div></figure>


<h2>テンプレートの内容</h2>

<p>gathering facts で設定された <code>ansible_distribution_release</code> と
<code>vars</code> で別途設定した <code>apt_ubuntu_uri</code> と <code>apt_ubuntu_components</code> を
組み合わせて apt-line を作るようにしました。</p>

<p>Ubuntu をインストールした直後の sources.list では
components が別の行になっているものもあったのですが、
1 行にまとめました。</p>

<figure class='code'><figcaption><span>templates/sources.list.Ubuntu.j2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>deb {{ apt_ubuntu_uri }} {{ ansible_distribution_release }} {{ apt_ubuntu_components | join(&quot; &quot;) }}
</span><span class='line'>deb-src {{ apt_ubuntu_uri }} {{ ansible_distribution_release }} {{ apt_ubuntu_components | join(&quot; &quot;) }}
</span><span class='line'>deb {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-updates {{ apt_ubuntu_components | join(&quot; &quot;) }}
</span><span class='line'>deb-src {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-updates {{ apt_ubuntu_components | join(&quot; &quot;) }}
</span><span class='line'>#deb {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-backports {{ apt_ubuntu_components | join(&quot; &quot;) }}
</span><span class='line'>#deb-src {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-backports {{ apt_ubuntu_components | join(&quot; &quot;) }}
</span><span class='line'>deb http://security.ubuntu.com/ubuntu {{ ansible_distribution_release }}-security {{ apt_ubuntu_components | join(&quot; &quot;) }}
</span><span class='line'>deb-src http://security.ubuntu.com/ubuntu {{ ansible_distribution_release }}-security {{ apt_ubuntu_components | join(&quot; &quot;) }}
</span></code></pre></td></tr></table></div></figure>


<p><code>backports</code> は使っていなかったのでコメントアウトしていますが、
<code>deb-src</code> も使わないのならコメントアウトしておいても良さそうです。</p>

<h2><code>vars</code> の内容</h2>

<p>例として jaist ミラーを使うようにしました。</p>

<figure class='code'><figcaption><span>vars/main.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">apt_ubuntu_uri</span><span class="p-Indicator">:</span> <span class="s">&quot;http://ftp.jaist.ac.jp/pub/Linux/ubuntu/&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">apt_ubuntu_components</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">main</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">restricted</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">universe</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">multiverse</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible で ppa を追加する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-20-ansible-add-ppa.html"/>
    <updated>2014-05-20T22:47:22+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-add-ppa</id>
    <content type="html"><![CDATA[<p>サーバーとしてインストールした Ubuntu だと
<code>add-apt-repository</code> コマンドが入っている
<code>python-software-properties</code> パッケージが入っていなくて
<code>ppa</code> の追加に困ることがありますが、
ansible を使えばサーバー自体に余計なパッケージを入れなくても
<code>ppa</code> の apt 設定を追加できました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>クライアント側 ansible 1.6.1</li>
<li>サーバー側 Ubuntu 12.04</li>
</ul>


<h2>ansible コマンド直接</h2>

<p><code>apt_repository</code> モジュールの引数の <code>repo</code> に <code>ppa</code> を指定するだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">ansible all -s -K -i ./inventory_hosts -m apt_repository -a &quot;repo=&#39;ppa:chris-lea/node.js&#39;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>playbook.yml に書く</h2>

<p><code>- apt_repository: repo='ppa:chris-lea/node.js'</code>
のように書くだけです。
普通にインストールすればサーバーでも入っていると思うのですが、
<code>python-apt</code> に依存しているので、
<code>- apt: pkg=python-apt</code>
も書いておくと良いかもしれません。</p>

<p><a href="https://github.com/znz/ansible-playbook-passenger/blob/master/provisioning/roles/passenger/tasks/nodejs-ppa.yml">nodejs-ppa.yml</a>
が実際の使用例です。</p>

<figure class='code'><figcaption><span>nodejs-ppa.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">apt</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pkg=python-apt</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">apt_repository</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">repo=&#39;ppa:chris-lea/node.js&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">when</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ansible_distribution_release == &quot;precise&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Debian の場合や ubuntu 14.04 の場合は除外しても良いかと思って、
ubuntu 12.04 の時だけ実行するために
<code>when: ansible_distribution_release == "precise"</code>
で実行する環境を制限しています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[brew pin でバグのあるバージョンを避ける例]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-19-brew-pin.html"/>
    <updated>2014-05-19T21:35:03+09:00</updated>
    <id>http://blog.n-z.jp/blog/brew-pin</id>
    <content type="html"><![CDATA[<p><code>graphviz version 2.38.0 (20140413.2041)</code>
で
<a href="http://graphviz.org/mantisbt/view.php?id=2444">label の先頭の日本語が消える</a>
というバグにはまったので、
<code>brew pin</code>
で修正されたバージョンがリリースされるまでの間、
古いバージョンに固定することにしました。
(バグ自体はリンク先をみればわかるようにすぐに修正されたようです。)</p>

<!--more-->


<h2>対象バージョン</h2>

<p>現在の最新は</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> dot -V
</span><span class='line'><span class="go">dot - graphviz version 2.38.0 (20140413.2041)</span>
</span></code></pre></td></tr></table></div></figure>


<p>で以下のバージョンに戻しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> dot -V
</span><span class='line'><span class="go">dot - graphviz version 2.36.0 (20140111.2315)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>対象コミット調査</h2>

<p>以下のように 2.38.0 にあがったコミットを探してみると
<code>2f368f7be64a5b4a6b56b4ab85827997fa520953</code>
だったので、この前に戻せば良いとわかりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> <span class="nb">cd</span> <span class="k">$(</span>brew --prefix<span class="k">)</span>
</span><span class='line'><span class="gp">%</span> git log -p Library/Formula/graphviz.rb
</span></code></pre></td></tr></table></div></figure>


<h2><code>brew pin</code> で固定</h2>

<p>そして、以下の手順で固定しました。</p>

<ul>
<li><code>git checkout コミット^</code> でコミットの直前に戻す</li>
<li>古いバージョンに戻すので一度アンインストール</li>
<li>古いバージョンでインストールし直し</li>
<li><code>brew pin</code> で固定</li>
<li><code>git checkout master</code> で <code>/usr/local</code> (<code>brew --prefix</code>) の状態を戻す</li>
<li><code>brew upgrade</code> で固定されているのを確認</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> <span class="nb">cd</span> <span class="k">$(</span>brew --prefix<span class="k">)</span>
</span><span class='line'><span class="gp">%</span>  git checkout 2f368f7be64a5b4a6b56b4ab85827997fa520953<span class="se">\^</span>
</span><span class='line'><span class="go">Note: checking out &#39;2f368f7be64a5b4a6b56b4ab85827997fa520953^&#39;.</span>
</span><span class='line'>
</span><span class='line'><span class="go">You are in &#39;detached HEAD&#39; state. You can look around, make experimental</span>
</span><span class='line'><span class="go">changes and commit them, and you can discard any commits you make in this</span>
</span><span class='line'><span class="go">state without impacting any branches by performing another checkout.</span>
</span><span class='line'>
</span><span class='line'><span class="go">If you want to create a new branch to retain commits you create, you may</span>
</span><span class='line'><span class="go">do so (now or later) by using -b with the checkout command again. Example:</span>
</span><span class='line'>
</span><span class='line'><span class="go">  git checkout -b new_branch_name</span>
</span><span class='line'>
</span><span class='line'><span class="go">HEAD is now at b8b3a30... glib-networking 2.40.1</span>
</span><span class='line'><span class="gp">%</span>  lv Library/Formula/graphviz.rb
</span><span class='line'><span class="gp">%</span> brew uninstall graphviz
</span><span class='line'><span class="go">Uninstalling /usr/local/Cellar/graphviz/2.38.0...</span>
</span><span class='line'><span class="gp">%</span> brew install graphviz
</span><span class='line'><span class="go">==&gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/graphviz-2.36.0_1.mav</span>
</span><span class='line'><span class="go">Already downloaded: /Library/Caches/Homebrew/graphviz-2.36.0_1.mavericks.bottle.tar.gz</span>
</span><span class='line'><span class="go">==&gt; Pouring graphviz-2.36.0_1.mavericks.bottle.tar.gz</span>
</span><span class='line'><span class="go">🍺  /usr/local/Cellar/graphviz/2.36.0_1: 470 files, 11M</span>
</span><span class='line'><span class="gp">%</span> brew pin graphviz
</span><span class='line'><span class="gp">%</span> git checkout master
</span><span class='line'><span class="go">Previous HEAD position was b8b3a30... glib-networking 2.40.1</span>
</span><span class='line'><span class="go">Switched to branch &#39;master&#39;</span>
</span><span class='line'><span class="gp">%</span> brew upgrade
</span><span class='line'><span class="go">==&gt; No packages to upgrade</span>
</span><span class='line'><span class="go">==&gt; Not upgrading 1 pinned package:</span>
</span><span class='line'><span class="go">graphviz 2.38.0</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>brew unpin</code></h2>

<p>修正されたバージョンがリリースされて、
Homebrew でインストールできるようになったら
<code>brew unpin graphviz</code>
で解除すれば良さそうです。</p>

<p><code>brew pin</code> は
<a href="http://qiita.com/uasi/items/f06c6fe7c04b593ec6a3#comment-178ddb970a3033653648">qiita の Homebrew でバージョンを指定してインストールするコマンド作った のコメント</a>
に書いてあるように、
FORMULA 指定なしの <code>brew upgrade</code> での更新対象にしないという意味のようなので、
master に戻った状態で <code>unpin</code> してしまっても
その場で <code>pin</code> し直せば大丈夫のようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> dot -V
</span><span class='line'><span class="go">dot - graphviz version 2.36.0 (20140111.2315)</span>
</span><span class='line'><span class="gp">%</span> brew unpin graphviz
</span><span class='line'><span class="gp">%</span> brew pin graphviz
</span><span class='line'><span class="gp">%</span> brew upgrade
</span><span class='line'><span class="go">==&gt; No packages to upgrade</span>
</span><span class='line'><span class="go">==&gt; Not upgrading 1 pinned package:</span>
</span><span class='line'><span class="go">graphviz 2.38.0</span>
</span></code></pre></td></tr></table></div></figure>


<p>修正されたバージョンがリリースされた時に <code>brew unpin</code> を忘れないように実行する必要がありますが、
<code>brew upgrade</code> の時に毎回メッセージが出るので、気付きやすそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R と Ruby によるデータ解析入門　読書会　第2回に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-17-amagasakirb.html"/>
    <updated>2014-05-17T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/amagasakirb</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/event/index/168617/">5月17日 R と Ruby によるデータ解析入門　読書会　第2回(兵庫県)</a>
に参加しました。
今回は4章からでした。
次回は6月28日です。</p>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873116155" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>




<!--more-->


<h2>メモ</h2>

<p>以下今回のメモです。</p>

<ul>
<li>PDF をタブレットで読むのに <code>k2pdfopt</code> で変換すると読みやすい</li>
<li>サンプルコード: <a href="https://github.com/setoyama60jp/everyday">https://github.com/setoyama60jp/everyday</a></li>
<li>p.90 l.3 <code>@durarion</code> って <code>@duration</code> の typo?</li>
<li><code>duration</code> は今何分占有しているか</li>
<li><code>use_duration</code> は <code>Person</code> が何分占有するか</li>
<li><code>need_to_go?</code> は必ず3回というわけではなく540分の3の確率</li>
<li>p.91 <code>カンマ句切り</code> &ndash;> <code>カンマ区切り</code> ?</li>
<li>Producer Consumer パターンで Enumerator を使うという話</li>
<li><code>read.table</code> の <code>header</code> とか <code>sep</code> とか</li>
<li><code>ggplot2</code> では <code>+</code> がオーバーロードされているという話</li>
<li>Safari Books Online の話</li>
<li>動画もあるという話</li>
<li>英語だと字幕がないと厳しい話</li>
<li>自動字幕の話</li>
<li>図4-3 の下に書いてある横軸が1から始まっているのは間違いで実際は0からなので、最初の方以外は ASCII コードに一致</li>
<li>ヤバイ経済学 はオススメという話 <iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4492313788" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></li>
<li>実装例5-3 <code>Market</code> クラスはクラスにする必要性がない書き方になっている</li>
<li><code>pdf</code> と <code>dev.off</code> は p.52 に説明がある</li>
<li>5章のモデルがいまいちという話</li>
<li>実装例5-10 の最後のターンの処理ってループの外で良いのでは。</li>
<li>全体的に Ruby コードもいまいちという話</li>
<li><code>R</code> の <code>viewport</code> の話</li>
<li>実装詳細と実装説明の前にどういう出力を目指しているのか概要が欲しいという話</li>
<li>削るとか溶かすとかいう話</li>
<li>エンロン事件のメールが公開されていてダウンロードできるのに驚いた話</li>
<li>6章は R で頑張っている</li>
<li>Gmail の IMAP の <code>[Gmail]/送信済みメール</code> は言語設定で変わる話</li>
<li>ビッグデータ的な公開されているデータはどういうのがあるのかという話</li>
<li>p.157 <code>クォーテーションを含むメールアドレスがデータ内に存在する</code> からメールアドレスは面倒という話</li>
<li><a href="http://d.hatena.ne.jp/triadsou/20100528/1275042816">ggplot2 の自分用メモ集を作ろう &ndash; Triad sou.</a></li>
<li>ビッグデータの話として有名な購入するデオドラントと石けんが変わって妊娠がわかったという話</li>
<li>PDF から Web アルバムの話</li>
</ul>


<h2></h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO ＆ 東海道らぐのイベントに参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-03-lilo-event.html"/>
    <updated>2014-05-03T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-event</id>
    <content type="html"><![CDATA[<p><a href="http://lilo.doorkeeper.jp/events/10790">LILO ＆ 東海道らぐ・オフラインミーティング（2014/05/03）</a> に参加しました。</p>

<p>アンカンファレンス形式で発表したい人が順番に前に出て話をするという形式でした。</p>

<!--more-->


<h2>内容</h2>

<p>大部分は資料を用意しての発表という形式ではなくて、
発表のタイトルもちゃんとあるわけではなかったので、
大雑把にこういう話でしたというメモだけです。</p>

<ul>
<li>自己紹介1</li>
<li>しまださんの東海道らぐの紹介</li>
<li>自分の <code>libpam-google-authenticator</code> の話</li>
<li>自己紹介2 (後から来た人の自己紹介)</li>
<li>えのきさんの LibreOffice の QA などの相談 (ディスカッション)</li>
<li>さとうさんの Raspberry Pi の話</li>
<li>矢吹さんの LXC などの話</li>
<li>自己紹介3 (さらに後から来た人の自己紹介)

<ul>
<li>pandoc がオススメ</li>
</ul>
</li>
<li>としひささんの Raspberry Pi で NTP Stratum 1 Server の話

<ul>
<li><a href="http://tosihisa.postach.io/raspberry-pi-de-ntp-stratum-1-server-wozuo-ru">Raspberry Pi で NTP Stratum-1 Server を作る． | tosihisa&rsquo;s public notebook</a></li>
<li><a href="http://www.pool.ntp.org/scores/60.56.214.78">http://www.pool.ntp.org/scores/60.56.214.78</a></li>
<li><code>ntpdate -quv ntp.netfort.gr.jp</code> で確認できました。</li>
</ul>
</li>
<li>守屋さんの Linux の昔話とかの話</li>
<li>こんどうさんの Flightgear の話</li>
<li>大浦さんの 文字書き起こしツール <a href="http://sourceforge.jp/projects/smart-gs/">SMART-GS</a> の話</li>
<li>さかもとさんのカーネルモジュールの話

<ul>
<li><a href="http://netcat.bandcamp.com/">http://netcat.bandcamp.com/</a></li>
<li><a href="https://github.com/usrbinnc/netcat-cpi-kernel-module">https://github.com/usrbinnc/netcat-cpi-kernel-module</a></li>
</ul>
</li>
</ul>


<h2>感想</h2>

<p>いろいろな内容の話が聞けて面白かったです。</p>

<p>自分が話をするのは、 LILO のサーバー移行の話という案もあったのですが、
それはちゃんとまとめる時間をとってからの方が良さそうと思って、
事前に一度試していたことのあった <code>libpam-google-authenticator</code> を前の晩に試し直しながらデモの順番を考えて、
その話をしました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X で owncloudcmd を使う]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-02-owncloudcmd.html"/>
    <updated>2014-05-02T22:18:39+09:00</updated>
    <id>http://blog.n-z.jp/blog/owncloudcmd</id>
    <content type="html"><![CDATA[<p>ownCloud のデスクトップクライアントには <code>owncloudcmd</code> というコマンドが含まれています。
昔は <code>ocsync</code> というコマンドが別途あったようですが、今は同梱されている <code>owncloudcmd</code> を使うのが主流のようです。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>クライアント : ownCloud client for Mac 1.5.4 に同梱の <code>owncloudcmd</code> で試しました。</li>
<li>サーバー : 自前サーバーなら ownCloud 6.0.3 で、今回の例では <a href="https://teracloud.jp/">Teraクラウド</a> を使ってみました。</li>
</ul>


<h2>概要</h2>

<p><code>path/to/owncloudcmd path/to/localdir ownclouds://example.jp/remote.php/webdav</code>
のようにローカルのディレクトリと <code>owncloud</code> の WebDAV 用の URL の先頭の <code>http</code> を <code>owncloud</code> に置き換えたもの (<code>https</code> なら <code>ownclouds</code>) を指定すると同期できます。</p>

<p>引数なしで実行するとオプションの説明が出ます。</p>

<h2>Mac OS X 版での修正</h2>

<h3><code>owncloudcmd</code> のリンクミス?</h3>

<p>普通に使おうとすると <code>dyld: Library not loaded: libowncloudsync.0.dylib</code> で起動できません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> /Applications/owncloud.app/Contents/MacOS/owncloudcmd <span class="nv">$HOME</span>/teracloud ownclouds://teracloud.jp/remote.php/webdav
</span><span class='line'><span class="go">dyld: Library not loaded: libowncloudsync.0.dylib</span>
</span><span class='line'><span class="go">  Referenced from: /Applications/owncloud.app/Contents/MacOS/owncloudcmd</span>
</span><span class='line'><span class="go">  Reason: image not found</span>
</span><span class='line'><span class="go">zsh: trace trap  /Applications/owncloud.app/Contents/MacOS/owncloudcmd</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ライブラリのパス修正</h3>

<p><code>otool -L</code> で確認すると相対パスがまずいとわかります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> otool -L /Applications/owncloud.app/Contents/MacOS/owncloudcmd
</span><span class='line'><span class="go">/Applications/owncloud.app/Contents/MacOS/owncloudcmd:</span>
</span><span class='line'><span class="go"> libowncloudsync.0.dylib (compatibility version 0.0.0, current version 1.5.4)</span>
</span><span class='line'><span class="go"> QtWebKit.framework/Versions/4/QtWebKit (compatibility version 4.9.0, current version 4.9.3)</span>
</span><span class='line'><span class="go"> QtXmlPatterns.framework/Versions/4/QtXmlPatterns (compatibility version 4.8.0, current version 4.8.4)</span>
</span><span class='line'><span class="go"> QtGui.framework/Versions/4/QtGui (compatibility version 4.8.0, current version 4.8.4)</span>
</span><span class='line'><span class="go"> QtDBus.framework/Versions/4/QtDBus (compatibility version 4.8.0, current version 4.8.4)</span>
</span><span class='line'><span class="go"> QtXml.framework/Versions/4/QtXml (compatibility version 4.8.0, current version 4.8.4)</span>
</span><span class='line'><span class="go"> QtSql.framework/Versions/4/QtSql (compatibility version 4.8.0, current version 4.8.4)</span>
</span><span class='line'><span class="go"> QtNetwork.framework/Versions/4/QtNetwork (compatibility version 4.8.0, current version 4.8.4)</span>
</span><span class='line'><span class="go"> QtCore.framework/Versions/4/QtCore (compatibility version 4.8.0, current version 4.8.4)</span>
</span><span class='line'><span class="go"> libocsync.0.dylib (compatibility version 0.0.0, current version 0.2.1)</span>
</span><span class='line'><span class="go"> /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 125.2.11)</span>
</span><span class='line'><span class="go"> /usr/local/opt/sqlite/lib/libsqlite3.0.dylib (compatibility version 9.0.0, current version 9.6.0)</span>
</span><span class='line'><span class="go"> /usr/lib/libiconv.2.dylib (compatibility version 7.0.0, current version 7.0.0)</span>
</span><span class='line'><span class="go"> /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices (compatibility version 1.0.0, current version 44.0.0)</span>
</span><span class='line'><span class="go"> /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation (compatibility version 300.0.0, current version 751.63.0)</span>
</span><span class='line'><span class="go"> /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit (compatibility version 45.0.0, current version 1038.36.0)</span>
</span><span class='line'><span class="go"> @loader_path/../Frameworks/Sparkle.framework/Versions/A/Sparkle (compatibility version 1.5.0, current version 1.5.0)</span>
</span><span class='line'><span class="go"> /usr/local/lib/libqtkeychain.0.3.0.dylib (compatibility version 0.0.0, current version 0.3.0)</span>
</span><span class='line'><span class="go"> /usr/local/opt/neon/lib/libneon.27.dylib (compatibility version 31.0.0, current version 31.0.0)</span>
</span><span class='line'><span class="go"> /usr/lib/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.9.0)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>install_name_tool -add_rpath</code> や <code>install_name_tool -delete_rpath</code> で試行錯誤したのですが、
<code>otool -l /Applications/owncloud.app/Contents/MacOS/owncloudcmd</code> で確認しても
<code>rpath</code> が後ろに追加されてきいていないようだったので、
<code>install_name_tool -change</code> で対応することにしました。</p>

<p>まず相対パスを修正しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span>  otool -L /Applications/owncloud.app/Contents/MacOS/owncloudcmd | awk <span class="s1">&#39;$1~&quot;^lib&quot;{print &quot;install_name_tool -change &quot; $1 &quot; @executable_path/../MacOS/&quot; $1 &quot; /Applications/owncloud.app/Contents/MacOS/owncloudcmd&quot; }&#39;</span> | sh -e
</span><span class='line'><span class="gp">%</span>  otool -L /Applications/owncloud.app/Contents/MacOS/owncloudcmd | awk <span class="s1">&#39;$1~&quot;^Qt&quot;{print &quot;install_name_tool -change &quot; $1 &quot; @executable_path/../Frameworks/&quot; $1 &quot; /Applications/owncloud.app/Contents/MacOS/owncloudcmd&quot; }&#39;</span> | sh -e
</span></code></pre></td></tr></table></div></figure>


<p>さらに <code>/usr/local/lib</code> をさしているものがあったのを修正しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span>  /Applications/owncloud.app/Contents/MacOS/owncloudcmd
</span><span class='line'><span class="go">dyld: Library not loaded: /usr/local/lib/libqtkeychain.0.3.0.dylib</span>
</span><span class='line'><span class="go">  Referenced from: /Applications/owncloud.app/Contents/MacOS/owncloudcmd</span>
</span><span class='line'><span class="go">  Reason: image not found</span>
</span><span class='line'><span class="go">zsh: trace trap  /Applications/owncloud.app/Contents/MacOS/owncloudcmd</span>
</span><span class='line'><span class="gp">%</span>  find /Applications/owncloud.app -name libqtkeychain.0.3.0.dylib
</span><span class='line'><span class="go">/Applications/owncloud.app/Contents/MacOS/libqtkeychain.0.3.0.dylib</span>
</span><span class='line'><span class="gp">%</span>  install_name_tool -change /usr/local/lib/libqtkeychain.0.3.0.dylib /Applications/owncloud.app/Contents/MacOS/libqtkeychain.0.3.0.dylib /Applications/owncloud.app/Contents/MacOS/owncloudcmd
</span><span class='line'><span class="gp">%</span>  /Applications/owncloud.app/Contents/MacOS/owncloudcmd
</span><span class='line'><span class="go">dyld: Library not loaded: /usr/local/opt/neon/lib/libneon.27.dylib</span>
</span><span class='line'><span class="go">  Referenced from: /Applications/owncloud.app/Contents/MacOS/owncloudcmd</span>
</span><span class='line'><span class="go">  Reason: image not found</span>
</span><span class='line'><span class="go">zsh: trace trap  /Applications/owncloud.app/Contents/MacOS/owncloudcmd</span>
</span><span class='line'><span class="gp">%</span>  find /Applications/owncloud.app -name libneon.27.dylib
</span><span class='line'><span class="go">/Applications/owncloud.app/Contents/MacOS/libneon.27.dylib</span>
</span><span class='line'><span class="gp">%</span>  install_name_tool -change /usr/local/opt/neon/lib/libneon.27.dylib /Applications/owncloud.app/Contents/MacOS/libneon.27.dylib /Applications/owncloud.app/Contents/MacOS/owncloudcmd
</span></code></pre></td></tr></table></div></figure>


<p>これで余計なメッセージは出ますが、使えるようになりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span>  /Applications/owncloud.app/Contents/MacOS/owncloudcmd
</span><span class='line'><span class="go">objc[40210]: Class WebCoreMovieObserver is implemented in both /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebCore.framework/Versions/A/WebCore and /Applications/owncloud.app/Contents/Frameworks/QtWebKit.framework/Versions/4/QtWebKit. One of the two will be used. Which one is undefined.</span>
</span><span class='line'><span class="go">objc[40210]: Class WebCoreSharedBufferData is implemented in both /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebCore.framework/Versions/A/WebCore and /Applications/owncloud.app/Contents/Frameworks/QtWebKit.framework/Versions/4/QtWebKit. One of the two will be used. Which one is undefined.</span>
</span><span class='line'><span class="go">objc[40210]: Class WebVideoFullscreenWindow is implemented in both /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebCore.framework/Versions/A/WebCore and /Applications/owncloud.app/Contents/Frameworks/QtWebKit.framework/Versions/4/QtWebKit. One of the two will be used. Which one is undefined.</span>
</span><span class='line'><span class="go">objc[40210]: Class WebVideoFullscreenController is implemented in both /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebCore.framework/Versions/A/WebCore and /Applications/owncloud.app/Contents/Frameworks/QtWebKit.framework/Versions/4/QtWebKit. One of the two will be used. Which one is undefined.</span>
</span><span class='line'><span class="go">objc[40210]: Class WebVideoFullscreenHUDWindowController is implemented in both /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebCore.framework/Versions/A/WebCore and /Applications/owncloud.app/Contents/Frameworks/QtWebKit.framework/Versions/4/QtWebKit. One of the two will be used. Which one is undefined.</span>
</span><span class='line'><span class="go">objc[40210]: Class WebVideoFullscreenHUDWindow is implemented in both /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebCore.framework/Versions/A/WebCore and /Applications/owncloud.app/Contents/Frameworks/QtWebKit.framework/Versions/4/QtWebKit. One of the two will be used. Which one is undefined.</span>
</span><span class='line'><span class="go">objc[40210]: Class WebWindowFadeAnimation is implemented in both /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebCore.framework/Versions/A/WebCore and /Applications/owncloud.app/Contents/Frameworks/QtWebKit.framework/Versions/4/QtWebKit. One of the two will be used. Which one is undefined.</span>
</span><span class='line'><span class="go">objc[40210]: Class WebWindowScaleAnimation is implemented in both /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebCore.framework/Versions/A/WebCore and /Applications/owncloud.app/Contents/Frameworks/QtWebKit.framework/Versions/4/QtWebKit. One of the two will be used. Which one is undefined.</span>
</span><span class='line'><span class="go">owncloudcmd - command line ownCloud client tool.</span>
</span><span class='line'>
</span><span class='line'><span class="go">Usage: owncloudcmd &lt;sourcedir&gt; &lt;owncloudurl&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">A proxy can either be set manually using --httpproxy or it</span>
</span><span class='line'><span class="go">uses the setting from a configured sync client.</span>
</span><span class='line'>
</span><span class='line'><span class="go">Options:</span>
</span><span class='line'><span class="go">  --confdir = configdir: Read config from there.</span>
</span><span class='line'><span class="go">  --httpproxy = proxy:   Specify a http proxy to use.</span>
</span><span class='line'><span class="go">                         Proxy is http://server:port</span>
</span><span class='line'>
</span><span class='line'><span class="go">zsh: exit 1     /Applications/owncloud.app/Contents/MacOS/owncloudcmd</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使い方</h2>

<p>概要のところに書いたように、
普通に <code>owncloudcmd sourcedir owncloudurl</code> で実行するとユーザー名とパスワードを聞かれます。
URL に <code>ownclouds://user:password@example.jp/remote.php/webdav</code> のようにユーザー名とパスワードを埋め込むことも出来ますが、あまりコマンドラインにパスワードは書きたくないことが多いと思います。</p>

<p>しかし、
<a href="https://github.com/owncloud/mirall/blob/f72e1cc8375b72c97d6566c6875f7214415cea9c/src/owncloudcmd/owncloudcmd.cpp">owncloudcmd のオプション処理部分のソース</a>
をみても <code>"--confdir"</code> は読み込むだけで使われていないようなので、
他の方法で指定することは出来なさそうでした。</p>

<h2>まとめ</h2>

<p><code>owncloudcmd</code> を使えば GUI クライアントで設定しているサーバー以外のサーバーと同期したり、
サーバーなどのコマンドラインのみの環境でも <code>owncloud</code> との同期が出来ることがわかりました。</p>

<p>しかし、クライアントの出来がまだあまりよくないので、使い勝手は良くないということもわかりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 10 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-04-23-rubymotion-mokumoku.html"/>
    <updated>2014-04-23T19:16:51+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku</id>
    <content type="html"><![CDATA[<p>第 1 回から第 9 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://connpass.com/event/5674/">第 10 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。</p>

<p>次回の
<a href="http://connpass.com/event/6116/">第 11 回 RubyMotion もくもく会 in Osaka &ndash; connpass</a>
は 05/28(水) になりました。</p>

<!--more-->


<h2>メモ</h2>

<ul>
<li><a href="https://itunes.apple.com/jp/app/bokosuka!mogurando/id845835380?mt=8">ボコスカ！モグランド</a></li>
<li><a href="http://www.amazon.co.jp/gp/product/4873116678/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873116678&amp;linkCode=as2&amp;tag=znz-22">AngularJSアプリケーション開発ガイド</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4873116678" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> が発売されているという話</li>
<li><a href="http://www.pixate.com/">Pixate</a></li>
<li>MacFace</li>
<li><a href="https://github.com/HipByte/RubyMotionSamples/issues/31">osx/Tweets app crashes on launch</a></li>
<li><a href="http://www.impress-plus.co.jp/">http://www.impress-plus.co.jp/</a></li>
</ul>


<h2>調査続き</h2>

<p>引き続き初回起動時の URL の受け取り方を調べていました。</p>

<ul>
<li><a href="http://questbeat.hatenablog.jp/entry/2014/04/19/123207">「ログイン時に起動」を実装する</a> はあんまり関係なかった。</li>
<li>GitHub で <code>LSSetDefaultHandlerForURLScheme</code> を検索

<ul>
<li><a href="https://github.com/s-faychatelard/Helm/blob/2c85b303781fa430432c17ed9848a0b252c82eae/sources/others/mac/mac.mm">https://github.com/s-faychatelard/Helm/blob/2c85b303781fa430432c17ed9848a0b252c82eae/sources/others/mac/mac.mm</a> : Qt で実装していて URL を受け取っている部分がわからず (Qt のイベントに変換されたものを受け取っている?)</li>
<li><a href="https://github.com/bigbearlabs/MotionKit/blob/51f46c14b52819b709c57d6e1c954d84c852e48b/lib/motion-kit/misc/osx/osx_browsers.rb">https://github.com/bigbearlabs/MotionKit/blob/51f46c14b52819b709c57d6e1c954d84c852e48b/lib/motion-kit/misc/osx/osx_browsers.rb</a> : ブラウザーの一覧の取得など</li>
<li><a href="https://github.com/bigbearlabs/MotionKit/blob/51f46c14b52819b709c57d6e1c954d84c852e48b/lib/motion-kit/app/osx/app.rb">https://github.com/bigbearlabs/MotionKit/blob/51f46c14b52819b709c57d6e1c954d84c852e48b/lib/motion-kit/app/osx/app.rb</a> : <code>application:openFile:</code> や <code>application:openFiles:</code> で受け取っているように見えるが試してみても呼ばれない。</li>
<li><a href="https://github.com/gnyrd/WebEx/blob/0ea21241591e496d1d702c45768400fa14d75662/URLHandler.m">https://github.com/gnyrd/WebEx/blob/0ea21241591e496d1d702c45768400fa14d75662/URLHandler.m</a> : <code>kAEGetURL</code> の登録に <code>handleGetURLEvent:withReplyEvent:</code> (2引数) ではなく <code>getURL:</code> (1引数) を使っている。</li>
</ul>
</li>
</ul>


<p>前回までの試行錯誤の途中で <code>setEventHandler</code> の呼び出しを <code>applicationDidFinishLaunching:</code> から <code>initialize</code> に移動していたのと <code>getURL:</code> への変更の組み合わせで、やっと初回起動時にも URL が受け取れるようになって、
さらに <code>rake clean</code> したり一度デフォルトブラウザーを他のブラウザーに設定し直したりしていたら、
<code>handleGetURLEvent:withReplyEvent:</code> に戻しても初回起動時に受け取れるようになっていました。</p>

<p>原因がはっきりしないのが嫌な感じですが、何か設定が中途半端に残っているとうまく動かなかったようです。</p>

<h2>RubyMine</h2>

<p>前回のもくもく会でインストールして、他では使っていなかったので、
ほぼ使っていないまま登録せず試用期限が切れてしまって、
30分ごとに終了するようになってしまいました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[homebrew cask で sylpheed test1 をインストールした]]></title>
    <link href="http://blog.n-z.jp/blog/2014-04-21-brew-cask-sylpheed.html"/>
    <updated>2014-04-21T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/brew-cask-sylpheed</id>
    <content type="html"><![CDATA[<p><a href="http://sylpheed.sraoss.jp/ja/news.html">Sylpheed 3.4.1-test1 for Mac OS X (テスト版)</a>
がリリースされていたので、
homebrew cask を使ってインストールしてみました。</p>

<p>dmg で配布されているアプリケーションを homebrew cask に対応させる例としても参考になると思います。</p>

<!--more-->


<h2>homebrew cask のインストール</h2>

<p><a href="http://brew.sh/">Homebre</a>
と
<a href="https://github.com/phinze/homebrew-cask">homebrew-cask</a>
をあらかじめインストールしておきます。</p>

<h2>cask 作成</h2>

<p><code>brew cask create sylpheed-test</code> で作成して、
内容を以下のように変更しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SylpheedTest</span> <span class="o">&lt;</span> <span class="no">Cask</span>
</span><span class='line'>  <span class="n">url</span> <span class="s1">&#39;http://sylpheed.sraoss.jp/sylpheed/macosx/Sylpheed_3.4.1-test1.dmg&#39;</span>
</span><span class='line'>  <span class="n">homepage</span> <span class="s1">&#39;http://sylpheed.sraoss.jp/&#39;</span>
</span><span class='line'>  <span class="n">version</span> <span class="s1">&#39;3.4.1-test1&#39;</span>
</span><span class='line'>  <span class="n">sha256</span> <span class="s1">&#39;52505ab7913fd58fa921a9c8b574286f08073321b440b7aa23dba3896b4b2ddc&#39;</span>
</span><span class='line'>  <span class="n">link</span> <span class="s1">&#39;Sylpheed.app&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>sha256</code> は
<a href="https://github.com/phinze/homebrew-cask/blob/master/CONTRIBUTING.md#cask-stanzas">Cask Stanzas</a>
の説明にあるように別途 <code>url</code> に指定したファイルをダウンロードして <code>shasum -a 256 &lt;file&gt;</code> で調べました。
もし upstream のリリースアナウンスに書いてあれば、それをそのまま使えば良いと思います。</p>

<p>編集途中で閉じてしまった場合は
<code>brew cask edit sylpheed-test</code>
で再編集できます。</p>

<p>実体は <code>$(brew --prefix)/Library/Taps/phinze-cask/Casks/sylpheed-test.rb</code> にあります。</p>

<h2>インストール</h2>

<p><code>sylpheed-test.rb</code> が作成できたら <code>brew cask install sylpheed-test</code> でインストールできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> brew cask install sylpheed-test
</span><span class='line'><span class="go">==&gt; Downloading http://sylpheed.sraoss.jp/sylpheed/macosx/Sylpheed_3.4.1-test1.dmg</span>
</span><span class='line'><span class="gp">#</span><span class="c">####################################################################### 100.0%</span>
</span><span class='line'><span class="go">==&gt; Symlinking App &#39;Sylpheed.app&#39; to &#39;/Users/kazu/Applications/Sylpheed.app&#39;</span>
</span><span class='line'><span class="go">🍺  sylpheed-test installed to &#39;/opt/homebrew-cask/Caskroom/sylpheed-test/3.4.1-test1&#39; (314 files, 32M)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>起動</h2>

<p>Launchpad から起動したり、Spotlight で検索したりして普通に起動します。</p>

<p>初回起動で
<code>~/Library/Application Support/Sylpheed/Mailboxes/Mail</code>
を作るかきかれましたが、その時点で既に
<code>~/Library/Application Support/Sylpheed</code>
は作成されていました。</p>

<h2>まとめ</h2>

<p>テスト版なので、まだ変なところはあるようですが (Command+V がメッセージビューのトグルになってペーストできないとか)
Mac OS X 版特有の問題があるだけのようなので、今後の正式版に期待しています。</p>

<p>まだ test 版なので pull request はしていないのですが、
正式版が出たら homebrew cask に pull request を送るかもしれません。
beta 版なども対応するなら
<a href="https://github.com/caskroom/homebrew-versions">homebrew-cask-versions</a>
に pull request を送ると良さそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 14.04 で dokku を使う]]></title>
    <link href="http://blog.n-z.jp/blog/2014-04-18-ubuntu-1404-dokku.html"/>
    <updated>2014-04-18T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ubuntu-1404-dokku</id>
    <content type="html"><![CDATA[<p>Ubuntu 14.04 がリリースされたので、
<a href="https://github.com/progrium/dokku">dokku</a>
を Ubuntu 14.04 で試してみました。</p>

<!--more-->


<h2>dokku の Vagrantfile を確認する</h2>

<p>まず dokku を clone して中の Vagrantfile をみて、
環境変数で設定できる項目があるのを確認しておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> git clone https://github.com/progrium/dokku
</span><span class='line'><span class="gp">%</span> <span class="nb">cd </span>dokku
</span><span class='line'><span class="gp">%</span> vi Vagrantfile
</span></code></pre></td></tr></table></div></figure>


<h2>Vagantfile を変更する</h2>

<p>デフォルトの apt-line のままだとダウンロードが遅いので、
<a href="http://mirrors.ubuntu.com/mirrors.txt">http://mirrors.ubuntu.com/mirrors.txt</a>
からミラーサーバーを選んで (今回は jaist を選択)、
shell provision のところで書き換えておきます。
(関係ないところにマッチして問題が起きる可能性はほぼないので、置換元の URL の <code>.</code> はエスケープしていません。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/Vagrantfile b/Vagrantfile</span>
</span><span class='line'><span class="gh">index a310f6b..7c1a133 100644</span>
</span><span class='line'><span class="gd">--- a/Vagrantfile</span>
</span><span class='line'><span class="gi">+++ b/Vagrantfile</span>
</span><span class='line'><span class="gu">@@ -29,5 +29,10 @@ Vagrant::configure(&quot;2&quot;) do |config|</span>
</span><span class='line'>     vb.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, BOX_MEMORY]
</span><span class='line'>   end
</span><span class='line'>
</span><span class='line'><span class="gd">-  config.vm.provision :shell, :inline =&gt; &quot;apt-get -y install git &amp;&amp; cd /root/dokku &amp;&amp; #{make_cmd}&quot;</span>
</span><span class='line'><span class="gi">+  config.vm.provision :shell, :inline =&gt; &lt;&lt;-SHELL</span>
</span><span class='line'><span class="gi">+    sed -i~ -e &#39;s;http://archive.ubuntu.com/ubuntu;http://ftp.jaist.ac.jp/pub/Linux/ubuntu;&#39; /etc/apt/sources.list &amp;&amp;</span>
</span><span class='line'><span class="gi">+    apt-get update &amp;&amp;</span>
</span><span class='line'><span class="gi">+    apt-get -y install git &amp;&amp;</span>
</span><span class='line'><span class="gi">+    cd /root/dokku &amp;&amp; #{make_cmd}</span>
</span><span class='line'><span class="gi">+  SHELL</span>
</span><span class='line'> end
</span></code></pre></td></tr></table></div></figure>


<h2>初回起動</h2>

<p><code>BOX_NAME</code>, <code>BOX_URI</code> に trusty を指定して、
<code>BOX_MEMORY</code> も 512 から 2048 に増やした値を指定して起動します。</p>

<p><code>node-js-sample</code> だと 512 メガでも問題ないのですが、
Rails アプリを動かそうとするとメモリ不足で <code>bundle install</code> の途中で失敗して
deploy できなかったので増やしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> <span class="nv">BOX_NAME</span><span class="o">=</span>trusty-amd64-20140418 <span class="nv">BOX_URI</span><span class="o">=</span>https://cloud-images.ubuntu.com/vagrant/trusty/20140418/trusty-server-cloudimg-amd64-vagrant-disk1.box <span class="nv">BOX_MEMORY</span><span class="o">=</span>2048 vagrant up
</span></code></pre></td></tr></table></div></figure>


<p>box のダウンロードとインストール、
VM の作成などには時間がかかるので、
他のことをしながらゆっくり待ちます。</p>

<h2>二度目以降の起動</h2>

<p>VM の作成ができている状態なら、
box の設定は参照されないので省略できます。
<code>vagrant destroy</code> した後に <code>vagrant up</code> し直したときは参照されるので、
毎回設定していてもかまいません。</p>

<p><code>BOX_MEMORY</code> は毎回設定されるので、指定を忘れると 512 に戻ってしまいます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> <span class="nv">BOX_MEMORY</span><span class="o">=</span>2048 vagrant up
</span></code></pre></td></tr></table></div></figure>


<h2>dokku の初期設定</h2>

<p>ssh の鍵を追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> vagrant ssh
</span><span class='line'><span class="gp">vagrant@dokku:~$</span> egrep <span class="s1">&#39;^ssh&#39;</span> ~/.ssh/authorized_keys | sudo sshcommand acl-add dokku vagrant
</span><span class='line'><span class="go">dd:3b:b8:2e:85:04:06:e9:ab:ff:a8:0a:c0:04:6e:d6</span>
</span><span class='line'><span class="gp">vagrant@dokku:~$</span> cat ~/.ssh/authorized_keys
</span><span class='line'><span class="gp">#</span> CLOUD_IMG: This file was created/modified by the Cloud Image build process
</span><span class='line'><span class="go">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key</span>
</span><span class='line'><span class="gp">vagrant@dokku:~$</span> cat /home/dokku/.ssh/authorized_keys
</span><span class='line'><span class="go">command=&quot;FINGERPRINT=dd:3b:b8:2e:85:04:06:e9:ab:ff:a8:0a:c0:04:6e:d6 NAME=vagrant `cat /home/dokku/.sshcommand` $SSH_ORIGINAL_COMMAND&quot;,no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key</span>
</span></code></pre></td></tr></table></div></figure>


<h2>dokku の鍵追加失敗例</h2>

<p><code>cat ~/.ssh/authorized_keys | sudo sshcommand acl-add dokku vagrant</code>
で追加してしまうと以下のように変になってしまいます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>vagrant@dokku:~$ cat /home/dokku/.ssh/authorized_keys
</span><span class='line'>command=&quot;FINGERPRINT=is NAME=vagrant `cat /home/dokku/.sshcommand` $SSH_ORIGINAL_COMMAND&quot;,no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding # CLOUD_IMG: This file was created/modified by the Cloud Image build process
</span><span class='line'>ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">KEY</span><span class="o">=</span><span class="k">$(</span>cat<span class="k">)</span>
</span><span class='line'><span class="nv">FINGERPRINT</span><span class="o">=</span><span class="k">$(</span>ssh-keygen -lf /dev/stdin <span class="o">&lt;&lt;&lt;</span> <span class="k">$(</span><span class="nb">echo</span> <span class="nv">$KEY</span><span class="k">)</span> | awk <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
</span><span class='line'><span class="nv">KEY_PREFIX</span><span class="o">=</span><span class="s2">&quot;command=\&quot;FINGERPRINT=$FINGERPRINT NAME=$NAME \`cat $USERHOME/.sshcommand\` \$SSH_ORIGINAL_COMMAND\&quot;,no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$KEY_PREFIX $KEY&quot;</span> &gt;&gt; <span class="s2">&quot;$USERHOME/.ssh/authorized_keys&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$FINGERPRINT</span>
</span></code></pre></td></tr></table></div></figure>


<p>の部分を以下のように <code>while read</code> ループに変えた方が良いのかもしれません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">while </span><span class="nb">read </span>KEY; <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nv">FINGERPRINT</span><span class="o">=</span><span class="k">$(</span>ssh-keygen -lf /dev/stdin <span class="o">&lt;&lt;&lt;</span> <span class="k">$(</span><span class="nb">echo</span> <span class="nv">$KEY</span><span class="k">)</span> | awk <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">KEY_PREFIX</span><span class="o">=</span><span class="s2">&quot;command=\&quot;FINGERPRINT=$FINGERPRINT NAME=$NAME \`cat $USERHOME/.sshcommand\` \$SSH_ORIGINAL_COMMAND\&quot;,no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding&quot;</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;$KEY_PREFIX $KEY&quot;</span> &gt;&gt; <span class="s2">&quot;$USERHOME/.ssh/authorized_keys&quot;</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="nv">$FINGERPRINT</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h2>node-js-sample の deploy</h2>

<p><code>node-js-sample</code> を <code>deploy</code> して動作確認します。
以下の例では <code>ssh dokku</code> で VM に接続できるように <code>~/.ssh/config</code> に設定済みです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> git clone https://github.com/heroku/node-js-sample
</span><span class='line'><span class="go">Cloning into &#39;node-js-sample&#39;...</span>
</span><span class='line'><span class="go">remote: Reusing existing pack: 319, done.</span>
</span><span class='line'><span class="go">remote: Total 319 (delta 0), reused 0 (delta 0)</span>
</span><span class='line'><span class="go">Receiving objects: 100% (319/319), 201.92 KiB | 210.00 KiB/s, done.</span>
</span><span class='line'><span class="go">Resolving deltas: 100% (17/17), done.</span>
</span><span class='line'><span class="go">Checking connectivity... done.</span>
</span><span class='line'><span class="gp">%</span> <span class="nb">cd </span>node-js-sample
</span><span class='line'><span class="gp">%</span> git remote add dokku dokku:node-js-app
</span><span class='line'><span class="gp">%</span>  git push --set-upstream dokku master
</span><span class='line'><span class="go">Counting objects: 319, done.</span>
</span><span class='line'><span class="go">Delta compression using up to 4 threads.</span>
</span><span class='line'><span class="go">Compressing objects: 100% (274/274), done.</span>
</span><span class='line'><span class="go">Writing objects: 100% (319/319), 201.92 KiB | 0 bytes/s, done.</span>
</span><span class='line'><span class="go">Total 319 (delta 17), reused 319 (delta 17)</span>
</span><span class='line'><span class="go">-----&gt; Cleaning up ...</span>
</span><span class='line'><span class="go">remote: Cloning into &#39;/tmp/tmp.ChNvZEb5S9&#39;...</span>
</span><span class='line'><span class="go">-----&gt; Building node-js-app ...</span>
</span><span class='line'><span class="go">remote: warning: You appear to have cloned an empty repository.</span>
</span><span class='line'><span class="go">remote: done.</span>
</span><span class='line'><span class="go">remote: HEAD is now at 2e52ce7... Update documentation links</span>
</span><span class='line'><span class="go">       Node.js app detected</span>
</span><span class='line'><span class="go">-----&gt; Requested node range:  0.10.x</span>
</span><span class='line'><span class="go">-----&gt; Resolved node version: 0.10.26</span>
</span><span class='line'><span class="go">-----&gt; Downloading and installing node</span>
</span><span class='line'><span class="go">(省略)</span>
</span><span class='line'><span class="go">-----&gt; Discovering process types</span>
</span><span class='line'><span class="go">       Procfile declares types -&gt; web</span>
</span><span class='line'><span class="go">-----&gt; Releasing node-js-app ...</span>
</span><span class='line'><span class="go">-----&gt; Deploying node-js-app ...</span>
</span><span class='line'><span class="go">=====&gt; Application deployed:</span>
</span><span class='line'><span class="go">       http://node-js-app.dokku.me</span>
</span><span class='line'>
</span><span class='line'><span class="go">To dokku:node-js-app</span>
</span><span class='line'><span class="go"> * [new branch]      master -&gt; master</span>
</span><span class='line'><span class="go">Branch master set up to track remote branch master from dokku.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vagrantfile で guest の 80 番ポートを host の 8080 番ポートで見えるように設定されているので
<code>http://node-js-app.dokku.me:8080/</code>
で開くと <code>Hello World!</code> と表示されます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant で Ubuntu 14.04 を試す]]></title>
    <link href="http://blog.n-z.jp/blog/2014-04-18-ubuntu-1404-vagrant.html"/>
    <updated>2014-04-18T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ubuntu-1404-vagrant</id>
    <content type="html"><![CDATA[<p>Vagrant で Ubuntu 14.04 LTS (trusty) を試しました。</p>

<!--more-->


<h2>Vagrantfile 作成</h2>

<p>まず <code>Vagrantfile</code> を作成します。
box ファイルの URL は
<a href="https://cloud-images.ubuntu.com/vagrant/trusty/">https://cloud-images.ubuntu.com/vagrant/trusty/</a>
から探します。
current にするといつのイメージかわかりにくいので、
日付の URL と box 名を指定しています。</p>

<p><a href="https://cloud-images.ubuntu.com/vagrant/">https://cloud-images.ubuntu.com/vagrant/</a>
には
<code>Ubuntu Server 14.04 LTS (Trusty Tahr) daily builds</code>
と書いてあるのに 20140417 と 20140418 の前が 20140221 と 20140222 になっていて
daily ではなさそうに見えるのですが、
リリース前は更新を止めていただけなのかもしれません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> mkdir trusty
</span><span class='line'><span class="gp">%</span> <span class="nb">cd </span>trusty
</span><span class='line'><span class="gp">%</span> vagrant init
</span><span class='line'><span class="go">A `Vagrantfile` has been placed in this directory. You are now</span>
</span><span class='line'><span class="go">ready to `vagrant up` your first virtual environment! Please read</span>
</span><span class='line'><span class="go">the comments in the Vagrantfile as well as documentation on</span>
</span><span class='line'><span class="go">`vagrantup.com` for more information on using Vagrant.</span>
</span><span class='line'><span class="gp">%</span> vi Vagrantfile
</span><span class='line'><span class="go">(config.vm.box と config.vm.box_url を設定)</span>
</span><span class='line'><span class="gp">%</span> egrep <span class="s1">&#39;^ *[^ #]&#39;</span> Vagrantfile
</span><span class='line'><span class="go">VAGRANTFILE_API_VERSION = &quot;2&quot;</span>
</span><span class='line'><span class="go">Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|</span>
</span><span class='line'><span class="go">  config.vm.box = &quot;trusty-amd64-20140418&quot;</span>
</span><span class='line'><span class="go">  config.vm.box_url = &quot;https://cloud-images.ubuntu.com/vagrant/trusty/20140418/trusty-server-cloudimg-amd64-vagrant-disk1.box&quot;</span>
</span><span class='line'><span class="go">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>この段階ではファイルとディレクトリを削除すれば元に戻せます。</p>

<h2>box の追加と起動</h2>

<p>初回の <code>vagrant up</code> は box のダウンロードとインストールもするので
時間がかかります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> vagrant up
</span><span class='line'><span class="go">Bringing machine &#39;default&#39; up with &#39;virtualbox&#39; provider...</span>
</span><span class='line'><span class="go">==&gt; default: Box &#39;trusty-amd64-20140418&#39; could not be found. Attempting to find and install...</span>
</span><span class='line'><span class="go">    default: Box Provider: virtualbox</span>
</span><span class='line'><span class="go">    default: Box Version: &gt;= 0</span>
</span><span class='line'><span class="go">==&gt; default: Adding box &#39;trusty-amd64-20140418&#39; (v0) for provider: virtualbox</span>
</span><span class='line'><span class="go">    default: Downloading: https://cloud-images.ubuntu.com/vagrant/trusty/20140418/trusty-server-cloudimg-amd64-vagrant-disk1.box</span>
</span><span class='line'><span class="go">==&gt; default: Box download is resuming from prior download progress</span>
</span><span class='line'><span class="go">==&gt; default: Successfully added box &#39;trusty-amd64-20140418&#39; (v0) for &#39;virtualbox&#39;!</span>
</span><span class='line'><span class="go">==&gt; default: Importing base box &#39;trusty-amd64-20140418&#39;...</span>
</span><span class='line'><span class="go">==&gt; default: Matching MAC address for NAT networking...</span>
</span><span class='line'><span class="go">==&gt; default: Setting the name of the VM: trusty_default_1397790655665_45006</span>
</span><span class='line'><span class="go">==&gt; default: Clearing any previously set forwarded ports...</span>
</span><span class='line'><span class="go">==&gt; default: Fixed port collision for 22 =&gt; 2222. Now on port 2200.</span>
</span><span class='line'><span class="go">==&gt; default: Clearing any previously set network interfaces...</span>
</span><span class='line'><span class="go">==&gt; default: Preparing network interfaces based on configuration...</span>
</span><span class='line'><span class="go">    default: Adapter 1: nat</span>
</span><span class='line'><span class="go">==&gt; default: Forwarding ports...</span>
</span><span class='line'><span class="go">    default: 22 =&gt; 2200 (adapter 1)</span>
</span><span class='line'><span class="go">==&gt; default: Booting VM...</span>
</span><span class='line'><span class="go">==&gt; default: Waiting for machine to boot. This may take a few minutes...</span>
</span><span class='line'><span class="go">    default: SSH address: 127.0.0.1:2200</span>
</span><span class='line'><span class="go">    default: SSH username: vagrant</span>
</span><span class='line'><span class="go">    default: SSH auth method: private key</span>
</span><span class='line'><span class="go">    default: Warning: Connection timeout. Retrying...</span>
</span><span class='line'><span class="go">    default: Warning: Remote connection disconnect. Retrying...</span>
</span><span class='line'><span class="go">==&gt; default: Machine booted and ready!</span>
</span><span class='line'><span class="go">GuestAdditions 4.3.10 running --- OK.</span>
</span><span class='line'><span class="go">==&gt; default: Checking for guest additions in VM...</span>
</span><span class='line'><span class="go">==&gt; default: Mounting shared folders...</span>
</span><span class='line'><span class="go">    default: /vagrant =&gt; /path/to/trusty</span>
</span></code></pre></td></tr></table></div></figure>


<p>この段階では vagrant box が追加されて VM が作成されているので、
元に戻すには <code>vagrant destroy</code> で VM を削除して、
<code>vagrant box remove box名</code> で box を削除します。</p>

<p>普通は <code>vagrant destroy</code> で VM を破棄するだけで
box は使い回すと思います。</p>

<p>box を先に削除してしまうと VM の削除でエラーになるようなので、
その場合は GUI からエラーになっているディスクイメージを無視するようにするなど
がんばって削除します。</p>
]]></content>
  </entry>
  
</feed>
