<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2018-01-23T22:49:22+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Homebrew-CaskでLibreOfficeの日本語版をインストール]]></title>
    <link href="http://blog.n-z.jp/blog/2018-01-23-homebrew-libreoffice.html"/>
    <updated>2018-01-23T21:55:18+09:00</updated>
    <id>http://blog.n-z.jp/blog/homebrew-libreoffice</id>
    <content type="html"><![CDATA[<p>Homebrew-Cask で LibreOffice が日本語訳インターフェースも含めて簡単にインストールできるようになっていました。</p>

<!--more-->


<h2>バージョン</h2>

<ul>
<li>macOS Sierra 10.12.6</li>
<li>Homebrew 1.5.1</li>
<li>Homebrew-Cask 1.5.1</li>
</ul>


<h2>インストール方法</h2>

<p>macOS を日本語環境で使っていれば <code>brew cask install libreoffice-language-pack</code> で依存関係にある <code>libreoffice</code> と一緒に入ります。</p>

<p><a href="https://github.com/caskroom/homebrew-cask/blob/master/doc/cask_language_reference/stanzas/language.md">https://github.com/caskroom/homebrew-cask/blob/master/doc/cask_language_reference/stanzas/language.md</a> に書いてあるように <code>brew cask install libreoffice-language-pack --language=ja</code> で明示的に日本語を指定することもできます。</p>

<h2>ダウンロードが遅い場合</h2>

<p>日本のミラーのひとつの <a href="http://www.ftp.ne.jp/">http://www.ftp.ne.jp/</a> が「 <strong>(2017/12/21)</strong> <em>ftp-srv2 is down currently</em>, because the network equipment for ftp-srv2 has been broken from 2017/12/19. In addition, ftp is too heavy load. Please use the other sites for archive downloads. We are trying to replace the network equipment.」と書いてあるように非常に重いので、ダウンロードが非常に遅い場合があるかもしれません。
その場合は、公式サイトから手動でミラーを選択してダウンロードした <code>LibreOffice_5.4.4_MacOS_x86-64.dmg</code> を <code>~/Library/Caches/Homebrew/Cask/libreoffice--5.4.4.dmg</code> におきます。
Cache に置く時のファイル名は、ダウンロードを中断したら <code>~/Library/Caches/Homebrew/Cask/libreoffice--5.4.4.dmg.incomplete</code> があるはずなので <code>.incomplete</code> を削ったファイル名にします。
その上で <code>brew cask install</code> を再度実行すると、ダウンロード済みのファイルが使われます。</p>

<h2>バージョンアップ方法</h2>

<p><a href="http://blog.n-z.jp/blog/2017-04-27-homebrew-upgrade-cleanup.html">homebrewの更新はbrew upgrade &ndash;cleanupだけでよくなっている</a>に書いたように <code>brew upgrade --cleanup</code> などで Homebrew の更新をした上で、 <code>brew cask reinstall libreoffice</code> で LibreOffice 自体を更新して (英語に一時的に戻って)、 <code>brew cask reinstall libreoffice-language-pack</code> で再度日本語にします。
<code>brew cask reinstall libreoffice libreoffice-language-pack</code> でまとめて更新もできます。</p>

<h2>まとめ</h2>

<p>以前は LibreOffice 本体は cask でインストールできても、日本語で使おうとすると別途インストールする必要がありましたが、いつの間にか homebrew-cask が多言語対応していて、 Firefox や Thunderbird は自動で日本語が、LibreOffice の場合は LibreOffice 自体の配布がわかれているので、 <code>libreoffice-language-pack</code> を別途入れる必要がありますが、コマンド1,2個で簡単にインストールできるようになっていました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitolite から gitolite3 への移行]]></title>
    <link href="http://blog.n-z.jp/blog/2018-01-23-migrate-gitolite3.html"/>
    <updated>2018-01-23T21:16:34+09:00</updated>
    <id>http://blog.n-z.jp/blog/migrate-gitolite3</id>
    <content type="html"><![CDATA[<p>Ubuntu 14.04.5 (trusty) から 16.04.3 (xenial) に更新したら、 gitolite パッケージが消えてしまって、 gitolite3 で設定し直す必要がありました。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>Ubuntu 14.04.5 (trusty) から 16.04.3 (xenial)</li>
<li>gitolite 2.3-1 から gitolite3 3.6.4-1</li>
</ul>


<h2>gitolite3 パッケージのインストール</h2>

<p>「gitolite のアクセス設定を管理するユーザの鍵を指定」では「gitolite version 2.x から移行する場合は空白にしてください。」と書いてあったので空欄のままにしました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% sudo apt install gitolite3
</span><span class='line'>[sudo] password for adminuser@ns6:
</span><span class='line'>パッケージリストを読み込んでいます... 完了
</span><span class='line'>依存関係ツリーを作成しています
</span><span class='line'>状態情報を読み取っています... 完了
</span><span class='line'>以下の追加パッケージがインストールされます:
</span><span class='line'>  libcommon-sense-perl libjson-perl libjson-xs-perl libtypes-serialiser-perl
</span><span class='line'>提案パッケージ:
</span><span class='line'>  git-daemon-sysvinit gitweb
</span><span class='line'>以下のパッケージが新たにインストールされます:
</span><span class='line'>  gitolite3 libcommon-sense-perl libjson-perl libjson-xs-perl libtypes-serialiser-perl
</span><span class='line'>アップグレード: 0 個、新規インストール: 5 個、削除: 0 個、保留: 0 個。
</span><span class='line'>292 kB のアーカイブを取得する必要があります。
</span><span class='line'>この操作後に追加で 970 kB のディスク容量が消費されます。
</span><span class='line'>続行しますか? [Y/n]</span></code></pre></td></tr></table></div></figure>


<h2>migrate</h2>

<p><a href="http://gitolite.com/gitolite/migr/index.html">migrating from gitolite v2</a> をみると gitolite-admin/conf/gitolite.conf で <code>NAME/</code> ルールを使っている場合は書き換えが必要とありましたが、 <code>RW+</code> と <code>R</code> しか使っていなかったので、そのままで大丈夫そうでした。</p>

<p>移行手順には、はっきりとは書いていませんでしたが、後は <code>gitolite setup</code> を実行するだけでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% sudo su - git
</span><span class='line'>$ gitolite setup
</span><span class='line'>
</span><span class='line'>FATAL: '/home/git/.gitolite.rc' seems to be for older gitolite; please see
</span><span class='line'>http://gitolite.com/gitolite/migr.html
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p><code>-pk</code> で公開鍵を指定しても同じエラーでした。</p>

<p><code>.gitolite.rc</code> は変更した覚えがなかったので、リネームして再実行したところ、正常終了しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mv .gitolite.rc .gitolite.rc.v2
</span><span class='line'>$ gitolite setup
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p>その後、 ssh 経由で接続確認したところ、問題なく使えるようになっていました。</p>

<h2>まとめ</h2>

<p>gitolite3 への移行手順の情報があまりなかったようなので、書いてみました。
基本的には gitolite3 パッケージを入れて <code>gitolite setup</code> を実行するだけでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 14.04.5 (trusty) から 16.04.3 (xenial) に更新したら subversion が壊れた話]]></title>
    <link href="http://blog.n-z.jp/blog/2018-01-22-ubuntu-broken-svn.html"/>
    <updated>2018-01-22T21:17:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ubuntu-broken-svn</id>
    <content type="html"><![CDATA[<p>subversion のレポジトリを置いているサーバーを Ubuntu 14.04.5 (trusty) から 16.04.3 (xenial) に更新したら <a href="https://bugs.launchpad.net/ubuntu/+source/subversion/+bug/1639406">Old repository can&rsquo;t be read: svn: E125012: Invalid character in hex checksum</a> の影響でコミットできなくなったので、他の環境にコピーして直した話です。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>壊れた環境: Ubuntu 14.04.5 (trusty) から 16.04.3 (xenial)</li>
<li>svnadmin dump に使った環境: Debian GNU/Linux 9</li>
</ul>


<h2>現象</h2>

<p>レポジトリを置いているサーバーの Ubuntu のバージョンをあげたら <code>svn: E125012: Invalid character in hex checksum</code> とでるようになって svn ci などができなくなりました。</p>

<p><a href="https://bugs.launchpad.net/ubuntu/+source/subversion/+bug/1639406">Old repository can&rsquo;t be read: svn: E125012: Invalid character in hex checksum</a> によると subversion の upstream ではなおっていて、 Ubuntu xenial では1年以上も放置されていて、修正される望みは薄いと思いました。</p>

<h2>復旧作業</h2>

<p>svnadmin dump/load で復旧できるとあったので、 svnadmin dump しようとしましたが、壊れた環境では svnadmin dump もできなかったので、一時的に他の環境に持っていって dump することにしました。</p>

<ul>
<li>壊れた環境で tarball 作成: <code>time tar acvf ~/repo.tar.xz repo</code></li>
<li>別環境にコピー: <code>scp svn@server:repo.tar.xz .</code></li>
<li>別環境でダンプ: <code>tar xf repo.tar.xz; time svnadmin dump repo &gt; repo.svndump</code></li>
<li>ダンプをコピー: <code>xz -k repo.svndump; ls -lh repo.svndump*; scp repo.svndump.xz svn@server:</code></li>
<li>load: <code>mv repo repo-2017; rm -rf repo-2017; svnadmin create repo; xzcat repo.svndump.xz | svnadmin load repo</code></li>
<li><p>(一度 mv しているのは履歴で最新のレポジトリを消してしまう事故を防ぐため)</p></li>
<li><p>以下のエラーが出たのでオプションを追加して再実行: <code>mv repo repo-2017; rm -rf repo-2017; svnadmin create repo; xzcat repo.svndump.xz | svnadmin load --bypass-prop-validation repo</code></p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svnadmin: E125005: Invalid property value found in dumpstream; consider repairing the source or using --bypass-prop-validation while loading.
</span><span class='line'>svnadmin: E125005: Cannot accept 'svn:log' property because it is not encoded in UTF-8</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>E125012 の復旧方法についての日本語の記事が見当たらなかったので、まとめると svnadmin dump/load するというだけですが、書いてみました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第80回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2018-01-13-rubykansai80.html"/>
    <updated>2018-01-13T22:13:59+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai80</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/69011">第80回 Ruby関西 勉強会</a> に参加しました。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場</h2>

<p>railsdm できたことのある Aiming さんが会場でした。</p>

<h2>オープニング</h2>

<p>会場案内など。</p>

<h2>mruby搭載ボードGR-CITRUSの新しい開発環境の紹介 @momoonga</h2>

<ul>
<li>GR-CITRUS : Ruby プログラム</li>
<li>WA-MIKAN : Wi-Fi 通信</li>
<li>SAMBOU-KAN : モーター制御 が増えた</li>
<li>GR-CITRUS 開発環境 : Visual Studio Code 拡張の Rubic というのが増えた</li>
<li>mrbgem の組み合わせのバリエーションが選べる</li>
<li>Rubic のデモ</li>
<li>WA-MIKAN のデモ</li>
<li>SAMBOU-KAN のデモ</li>
<li>「RubyRobo 192.168.4.1」という SSID で接続先 IP アドレスがわかるようになっていた</li>
<li>WiFi 接続して操作はうまくいかなかった</li>
<li>リリース</li>
<li><a href="https://github.com/wakayamarb/wrbb-v2lib-firm/blob/master/rubic-repository.json">https://github.com/wakayamarb/wrbb-v2lib-firm/blob/master/rubic-repository.json</a></li>
<li>Release に data.zip</li>
<li><p>Rubic の方にリポジトリを追加してもらうと、後は Release を自由に増やしていける</p></li>
<li><p>質疑応答</p></li>
<li>Q: どこで買える?</li>
<li>A: 秋月, 独自のネットショップ, 大阪だと共立電子</li>
<li>SAMBOU-KAN は扱ってもらえてないので、個人のみ</li>
</ul>


<h2>self を考える @yalab</h2>

<ul>
<li>発表資料: <a href="https://www.slideshare.net/yalab/self-86099114">https://www.slideshare.net/yalab/self-86099114</a></li>
<li><a href="https://twitter.com/yalab/status/948112876027256832">https://twitter.com/yalab/status/948112876027256832</a> rubyでプログラミングされてる方に質問です。selfというものを</li>
<li>正式には、レシーバーを指定しないではなく、レシーバーを省略した</li>
<li>いろんな場所での self</li>
<li>private メソッドは <code>self.</code> をつけて呼ぶことができない (<code>self.puts "hoge"</code> とか)</li>
<li>irb の中で <code>irb "a"</code> でサブ irb に入って self に色々きいてみる</li>
<li><code>self.class</code> とか</li>
<li><code>self.methods.grep /plu/</code> (String にしなくても grep できる)</li>
<li><code>self.method(:pluralize).source_location</code> (Active Support の場所がでてくる)</li>
<li>質疑応答</li>
<li>Q: self の由来は?</li>
<li>A: たぶん Smalltalk 由来</li>
<li>Q: あえて self をつけたい場合は?</li>
<li>A: <code>self.hoge=</code> を呼びたいときとか</li>
<li><code>self.hoge=</code> は private でも呼べる (<code>self.</code> を省略するとローカル変数への代入になるため)</li>
</ul>


<p>protected でも同じ:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% irb --simple-prompt -r irb/completion
</span><span class='line'>&gt;&gt; class A; protected def hoge=(hoge);end;end
</span><span class='line'>=&gt; A
</span><span class='line'>&gt;&gt; irb A.new
</span><span class='line'>&gt;&gt; self.hoge=:hoge
</span><span class='line'>=&gt; :hoge
</span><span class='line'>&gt;&gt; ^D
</span><span class='line'>=&gt; #&lt;IRB::Irb: @context=#&lt;IRB::Context:0x00007fcec08c4ad8&gt;, @signal_status=:IN_EVAL, @scanner=#&lt;RubyLex:0x00007fcec08cce68&gt;&gt;
</span><span class='line'>&gt;&gt; A.new.hoge = :hoge
</span><span class='line'>NoMethodError: protected method `hoge=' called for #&lt;A:0x00007fcec08a5318&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Q: <code>class &lt;&lt; self</code> とは?</li>
<li><p>A: <code>class &lt;&lt; obj</code> で obj の特異メソッドが定義できる話</p></li>
<li><p>twitter からの参考情報:</p></li>
<li><a href="https://qiita.com/jnchito/items/451018811842c2631e1e">privateメソッドをレシーバ付きで呼び出せるケース - Qiita</a></li>
<li><a href="https://gist.github.com/sunaot/8682795"><code>class &lt;&lt; self</code> によるクラスメソッドの定義のイディオムの説明とその背景にある特異クラスのかんたんな解説</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li>追加情報:</li>
<li><a href="http://koseki.hatenablog.com/entry/20080125/rubysetter">Rubyのsetterメソッドは特別扱いされる。 - こせきの技術日記</a></li>
<li>Thu Feb 20 04:07:06 2003 からなので <a href="https://gist.github.com/unak/3038095">The History of Ruby</a> と見比べると 2003-08-04 1.8.0 から。</li>
</ul>


<h2>プロを目指す人のための例外処理（再）入門 @jnchito</h2>

<ul>
<li>発表資料: <a href="https://speakerdeck.com/jnchito/number-rubykansai-2018-01-13">https://speakerdeck.com/jnchito/number-rubykansai-2018-01-13</a></li>
<li>西脇から高速バスで2時間</li>
<li>例外と例外処理についておさらい</li>
<li>「ハンマーを持つ人にはすべてが釘に見える」</li>
<li>本当にあった怖い話</li>
<li>例外を握りつぶしていた例</li>
<li>例外処理は使い方を間違えると、害の方が大きくなる</li>
<li>できることと、やっていいことは異なる</li>
<li>原則は rescue しない</li>
<li>例外処理のバッドプラクティス</li>
<li>例外の握りつぶし</li>
<li>Exception を rescue (普通は StandardError で良い)</li>
<li>begin と rescue の範囲が広い</li>
<li>例外クラスを指定しないと NameError や NoMethodError まで捕捉されてしまう</li>
<li>例外処理をテストしない</li>
<li>ネットの記事には要注意 (Exception を rescue しているものとか多いらしい)</li>
<li>例外処理のベストプラクティス</li>
<li>原則として rescue しない</li>
<li>ログに残したり通知したりする</li>
<li>対象を絞り込む (<code>begin; Date.new(year, month, day); rescue ArgumentError; nil; end</code>)</li>
<li>この例なら <code>Date.valid_date?</code> があるので例外処理を使わない書き方ができる</li>
<li>例外処理もテストする</li>
<li>高度なトピック</li>
<li>業務エラーとシステムエラーの区別をすべき</li>
<li>業務エラーには原則として例外を使わない (rails の <code>if @model.save</code> とか)</li>
<li>例外処理をなくしても業務エラーに対処できるか?</li>
<li>使わない実装例: <code>all_success &amp;=</code> (ロールバックも考慮すべき)</li>
<li>システムエラーは原則としてフレームワークなどの共通処理に任せる</li>
<li>例外処理とロールバックの関係</li>
<li>「アトミック操作は何か」を常に意識する</li>
<li>Rails で複数のレコードを同時に更新する場合: <code>transaction do ... end</code> と業務エラー時に <code>raise ActiveRecord::Rollback</code> で明示的にロールバック</li>
<li>攻めの例外</li>
<li>予期せぬ条件分岐で例外を発生させる</li>
<li><code>else</code> で矛盾する可能性のある値を返すのもバグの元</li>
<li>ありえないエラーには強気で (<code>transaction</code> の中で普通はエラーにならない <code>update!</code> を使ってダメならシステムエラー)</li>
<li>Q: <code>&amp;=</code> は <code>&amp;&amp;=</code> の方が良いのでは?</li>
<li>A: 良さそう</li>
<li>Q: 素人は rescue すんな!! は他のフレームワークにもあてはまる?</li>
<li>A: rails 以外 ruby 以外でもフレームワークに共通処理があるはずなので、あてはまるはず</li>
</ul>


<h2>Ruby 2.5.0 の主な変更点 @znz</h2>

<p>発表資料としては特に用意せずに <a href="https://docs.ruby-lang.org/ja/latest/doc/news=2f2_5_0.html">https://docs.ruby-lang.org/ja/latest/doc/news=2f2_5_0.html</a> をみながら気になった点を話しました。</p>

<p>最初に <a href="https://slide.rabbit-shocker.org/">Rabbit Slide Show</a> の過去の発表資料から適当に自己紹介のページだけ開いておいて、自己紹介をした後は、
<a href="https://www.ruby-lang.org/ja/news/2017/12/25/ruby-2-5-0-released/">Ruby 2.5.0 リリース</a> をみながら色々話をして、
時間があるだけ<a href="https://docs.ruby-lang.org/ja/2.5.0/doc/news=2f2_5_0.html">NEWS for Ruby 2.5.0</a>をみながら色々話をしていました。</p>

<h2>GitLab にコントリビュート @ogomr</h2>

<ul>
<li>発表資料: <a href="https://speakerdeck.com/ogom/contributing-to-gitlab-with-oss-gate">https://speakerdeck.com/ogom/contributing-to-gitlab-with-oss-gate</a></li>
<li>Contributing to GitLab with OSS Gate</li>
<li>(ギットラブと呼んでいる)</li>
<li>chef cookbook → docker</li>
<li>mac だと遅い</li>
<li>GDK = GitLab Development Kit</li>
<li>OSS 開発に参加するには?</li>
<li>フィードバック</li>
<li>ユーザーとして OSS を使う</li>
<li>気づいたことを開発元にフィードバック</li>
<li><a href="https://about.gitlab.com/installation/">https://about.gitlab.com/installation/</a></li>
<li>SSL も Let&rsquo;s Encrypt でいける</li>
<li><a href="https://qiita.com/ogomr/items/238d8649b36bcc8c14ba">3Stepで Let’s Encrypt の保護された GitLab を構築する</a></li>
<li>GitLab 開発環境構築も GitLab Development Kit で簡単にできる</li>
<li><p><a href="https://qiita.com/ogomr/items/cc404bf9373408663b11">GitLab Development Kit で OSS開発 に参加する for MAC 2017</a></p></li>
<li><p>CONTRIBUTING を参考にして開発元にわかりやすいように書く</p></li>
<li>適切な場所に報告する: GitLab は gitlab.com の issues</li>
<li>一緒に体験しましょう</li>
<li><p><a href="https://oss-gate.doorkeeper.jp/events/69160">OSS Gate大阪ワークショップ2018-03-10</a></p></li>
<li><p>GitLab ってどんな技術で動いているの?</p></li>
<li><a href="https://docs.gitlab.com/ce/development/architecture.html">GitLab Architecture Overview</a></li>
<li><a href="https://docs.gitlab.com/ce/development/fe_guide/index.html">Frontend Development Guidelines</a></li>
<li>Vue.js を使っている</li>
<li>gdk run</li>
<li>Gitlab Workhorse : Smart reverse proxy, language Go</li>
<li>Gitaly : Git RPC (Remote procedure call) service, language: Ruby, Go</li>
<li>GitLab Shell</li>
<li>GitLab Rails Web (unicorn)</li>
<li>GitLab Rails Background Jobs (sidekiq)</li>
<li>GitLab Frontend Web (webpack)</li>
<li>GitLab Community Edition の依存パッケージ: Gmefile.lock 226, yarn.lock 1098</li>
<li>翻訳のイシューはマージされやすい <a href="https://github.com/mperham/sidekiq/pull/3720">https://github.com/mperham/sidekiq/pull/3720</a></li>
<li>過去の翻訳がいまいちだったと感じたので変更した例</li>
</ul>


<h2>休憩</h2>

<p>ちょっと用事があったので、外出。</p>

<h2>Ruby初級者向けレッスン 64回 - クラス @higaki</h2>

<p>グループワークをしている途中で戻ってきました。</p>

<h2>クロージング</h2>

<p>告知など</p>

<ul>
<li>2/10(土)に大阪(日本橋)で GR-CITRUS などのミニハッカソン</li>
<li><a href="https://dddrb.doorkeeper.jp/">https://dddrb.doorkeeper.jp/</a> でプロを目指す人のためのRuby入門 言語仕様からテスト駆動開発・デバッグ技法まで 読書会の第2回を2月に予定</li>
<li><a href="https://oss-gate.doorkeeper.jp/events/69170">OSS Gate大阪ミートアップ for React</a></li>
<li>7月中頃か8月中頃にRubyビジネス推進協議会のイベントが予定されていて、その翌日にRuby関西でもちょっと大きめの勉強会 (関西 RubyKaigi になるか第n回 Ruby関西 勉強会になるかどうかは未定) をする予定なので、スタッフ募集 (興味がある方は <a href="https://rubykansai.doorkeeper.jp/">Ruby関西のdoorkeeper</a> の問い合わせからどうぞ)</li>
<li>今回の会場の <a href="https://www.doorkeeper.jp/%E4%BC%9A%E5%A0%B4/aiming-osaka">IT勉強会の会場 » Aiming 大阪スタジオ</a> の紹介</li>
</ul>


<h2>懇親会</h2>

<p>懇親会は特に事前の募集とかはなく、会場に残ってもらって一緒に移動という感じでした。
実際にいってみると cuzic さんが予想で予約した人数でぴったりだったようでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[webhook でサイトの git pull をする設定をした]]></title>
    <link href="http://blog.n-z.jp/blog/2018-01-03-webhook-git-pull.html"/>
    <updated>2018-01-03T18:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/webhook-git-pull</id>
    <content type="html"><![CDATA[<p>GitLab.com に git push した時に webhook で通知を受け取って git pull という設定をしました。</p>

<p>方針としては Web サーバーの実行ユーザー権限の cgi で通知用のファイルを更新して、 systemd の <code>*.path</code> で監視して、別途ディレクトリの所有者権限でアップデートのシェルスクリプトを実行して、アップデートのログは journald に任せるという感じにしました。</p>

<!--more-->


<h2>GitLab.com の設定</h2>

<p>Webhook が使えるシステムなら GitHub などでも同様に設定可能だと思います。</p>

<ul>
<li>Settings - Integrations で Webhooks 設定</li>
<li>URL: <code>https://lilo.linux.or.jp/trigger/update.cgi</code> のような感じ</li>
<li>Secret Token あり</li>
<li>Trigger : Push events のみ</li>
<li>Enable SSL verification はチェックありのまま</li>
</ul>


<h2>trigger cgi</h2>

<p>URL がわかっていても Secret Token がちゃんと設定されていないリクエストはエラーを返すようにしました。</p>

<p>内容はチェックせずに通知用のファイルにリクエスト内容をそのまま書き込んでデバッグ用に使えるようにしました。</p>

<p><code>/home/www</code> は CGI の権限で書き込めるディレクトリです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'><span class="k">if</span> <span class="o">[</span> x<span class="s2">&quot;$HTTP_X_GITLAB_TOKEN&quot;</span> <span class="o">=</span> x<span class="s2">&quot;XXXXXXXXXXXXXXXXXXXX&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  cat &gt; /home/www/trigger_update_web
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;Content-Type: text/plain; charset=utf-8&quot;</span>
</span><span class='line'>  <span class="nb">echo</span>
</span><span class='line'><span class="nb">  echo </span>OK
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;Status: 403&quot;</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;Content-Type: text/plain; charset=utf-8&quot;</span>
</span><span class='line'>  <span class="nb">echo</span>
</span><span class='line'><span class="nb">  echo </span>NG
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h2>systemd の設定追加</h2>

<p>後述のファイルを以下のように追加して設定しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  sudo cp lilo_web_update.path /etc/systemd/system
</span><span class='line'>  sudo cp lilo_web_update.service /etc/systemd/system
</span><span class='line'>  sudo systemctl daemon-reload
</span><span class='line'>  sudo systemctl start lilo_web_update.path
</span></code></pre></td></tr></table></div></figure>


<h2><code>lilo_web_update.path</code></h2>

<p><code>trigger_update_web</code> ファイルを <code>PathModified</code> で監視して変化があれば <code>lilo_web_update.service</code> を実行するようにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>Unit<span class="o">]</span>
</span><span class='line'><span class="nv">Description</span><span class="o">=</span>Trigger update web
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Path<span class="o">]</span>
</span><span class='line'><span class="nv">PathModified</span><span class="o">=</span>/home/www/trigger_update_web
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Install<span class="o">]</span>
</span><span class='line'><span class="nv">WantedBy</span><span class="o">=</span>muti-user.target
</span></code></pre></td></tr></table></div></figure>


<h2><code>lilo_web_update.service</code></h2>

<p>Web コンテンツに書き込めるユーザーでシェルスクリプトを実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>Unit<span class="o">]</span>
</span><span class='line'><span class="nv">Description</span><span class="o">=</span>Update web
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Service<span class="o">]</span>
</span><span class='line'><span class="nv">Type</span><span class="o">=</span>oneshot
</span><span class='line'><span class="nv">ExecStart</span><span class="o">=</span>/path/to/lilo_web_update.sh
</span><span class='line'><span class="nv">User</span><span class="o">=</span>someuser
</span><span class='line'><span class="nv">Group</span><span class="o">=</span>someuser
</span></code></pre></td></tr></table></div></figure>


<h2><code>lilo_web_update.sh</code></h2>

<p>flock コマンドで同時実行を抑制 (同時実行は後の方が失敗終了) した上で、何か変更されていたらそれを捨てて、 <code>git pull</code> でリモートのコンテンツで上書きするようにしています。</p>

<p>とりあえず自分が知っているコマンドの中でクリーンにできるものとして <code>git checkout .</code> と <code>git clean -dfx</code> を使っているだけなので、もっと良い方法があるかもしれません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">set</span> -euxo pipefail
</span><span class='line'><span class="nb">exec</span> <span class="o">{</span>lock_fd<span class="o">}</span>&lt;<span class="s2">&quot;$0&quot;</span>
</span><span class='line'>flock --nonblock <span class="s2">&quot;${lock_fd}&quot;</span>
</span><span class='line'><span class="nb">cd</span> <span class="s2">&quot;$(dirname &quot;</span><span class="nv">$0</span><span class="s2">&quot;)/..&quot;</span>
</span><span class='line'>git checkout .
</span><span class='line'>git clean -dfx
</span><span class='line'>git pull
</span></code></pre></td></tr></table></div></figure>


<h2>apache2 設定</h2>

<p>trigger ディレクトリに cgi-bin の設定を参考にして ExecCGI と AddHandler の設定をしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;Directory /path/to/trigger/&gt;
</span><span class='line'>        AllowOverride None
</span><span class='line'>        Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
</span><span class='line'>        Require all granted
</span><span class='line'>        AddHandler cgi-script .cgi
</span><span class='line'>&lt;/Directory&gt;
</span></code></pre></td></tr></table></div></figure>


<p><code>/etc/apache2/conf-enabled/security.conf</code> の <code>.svn*</code> へのアクセスを禁止する設定を参考にして、 <code>.git*</code> へのアクセスを禁止しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;DirectoryMatch <span class="s2">&quot;/\.git&quot;</span>&gt;
</span><span class='line'>   Require all denied
</span><span class='line'>&lt;/DirectoryMatch&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>動作確認</h2>

<ul>
<li><code>sudo -u someuser /path/to/lilo_web_update.sh</code> で git pull の動作確認</li>
<li><code>touch /home/www/trigger_update_web</code> と <code>sudo systemctl status lilo_web_update.service</code> で PathModified 経由での実行確認</li>
<li><code>curl -H 'X-Gitlab-Token: XXXXXXXXXXXXXXXXXXXX' https://lilo.linux.or.jp/trigger/update.cgi</code> で webhook 経由での動作確認</li>
</ul>


<h2>まとめ</h2>

<p>git push で webhook 経由でコンテンツを更新して、 journald でログを確認できるシステムを構築しました。
Unix 的にそれぞれは大した設定はしていないのですが、組み合わせるとそれなりの設定量になりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO 20周年記念ミートアップに参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-12-17-lilo-event.html"/>
    <updated>2017-12-17T23:06:45+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-event</id>
    <content type="html"><![CDATA[<p><a href="https://lilo.connpass.com/event/73932/">LILO 20周年記念ミートアップ</a>に参加しました。
いくつか事前に発表されていたものもありましたが、他はいつも通りアンカンファレンス形式でした。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場</h2>

<p>いつもより遅い14時からでした。</p>

<h2>オープニング</h2>

<ul>
<li>自己紹介案: 名前, いつから Linux を使っているのか?, 初めて使った Linux ディストリビューション, 最近の Linux の使い方</li>
<li>会場費とか会計の話とか (結局プールされているお金があるので、今回は参加費は無料だった)</li>
<li>ハッシュタグは <code>#lilo_jp</code></li>
</ul>


<h2>自己紹介など</h2>

<ul>
<li>名前, いつから Linux を使っているのか?, 初めて使った Linux ディストリビューション, 最近の Linux の使い方</li>
<li>好きなディストリビューション: Debian: 7, Gentoo: 1, Vine: 1, Rasbian: 2, Plamo: 2, Ubuntu: 1, CentOS: 1</li>
<li>UNIX: Minix: 1, OS9: 1</li>
<li>好きな言語: AWK: 4, Python: 2, JavaScript: 1, bash: 3, 日本語: 1, C: 3, BASIC09: 1, Perl: 2, Ruby: 1, PHP: 1</li>
<li>libc5 のバージョンアップではまったという話が数人</li>
<li>初めて使ったのは Slackware という人が多かった感じがする</li>
</ul>


<h2>Linuxコミュニティ20年の振返りと学んだ事(もうちょと付け足し版)</h2>

<ul>
<li>GPD Pocket で HDMI がうまく出なかったので Windows で発表</li>
<li>id にこだわりがあるので、取れなかったサービスはあまり利用しない</li>
<li>1997-06-22 から (ML に投稿があって名前が決定した日)</li>
<li>運営者は特にいなくて、その時々でやっている人が違う</li>
<li>linux.or.jp ドメイン管理者の JLA との窓口やさくらインターネットとの窓口はやっている</li>
<li>LinuxMaMa というパッチを集めたサイトがあった</li>
<li>IP マスカレードは最初はここにあって、本体に取り込まれた</li>
<li>Linux JF, Linux JM</li>
<li>linux-users ML の方が LinuxMaMa より後から知った</li>
<li>UNIX が十万円以上する頃に Linux は CD-ROM 代だけで売っていた</li>
<li>営業さんはすごいと感じた話</li>
<li><p>コミュニティはいろんな人がいる</p></li>
<li><p>k-of.jp/2017 の時からの付け足しはお世話になったサイトとお店</p></li>
<li>最近は野良パッチというのはあまり見かけない</li>
<li><p>今は github があるが、昔は SCM が無料というのはなかった</p></li>
<li><p>Google 翻訳などで翻訳のモチベーションが減っているかも</p></li>
<li>英語ができる人しか生き残っていない?</li>
<li>仕様書がない?</li>
<li>ウォーターフォールではない, リーンに近い</li>
<li>開発プロセスも勉強になる</li>
<li><p>コアはきれいだが周辺のデバイスドライバのソースはまちまち</p></li>
<li><p>Windows が嫌いというより (シャットダウン時に時間がかかる) Windows Update が嫌い</p></li>
</ul>


<h2>LILO(7)</h2>

<ul>
<li>LILO の説明を man page にした</li>
<li>LILO(8) だとブートローダーとかぶってしまう</li>
<li>LILO のサイトの複数のページから日付が付いているものを集めた</li>
<li>LibreOffice Calc にまとめて、重複などは TSV を AWK で処理</li>
<li>イベント開催回数は 100 回以上 (141回ぐらい?)</li>
</ul>


<h2>lilo.linux.or.jp の話</h2>

<ul>
<li>いつもの更新情報</li>
<li>GitHub のプライベートリポジトリを使わせてもらっていたのを GitLab.com に変更した</li>
<li>Web コンテンツが非公開なのは内容のライセンスというよりもコミットログが適当なので公開したくないということの方が大きいようでした</li>
<li>発表資料などの置き場所として resources を作った</li>
<li>デフォルトのライセンスも決めた</li>
</ul>


<p>スライドはいつも通り、
- <a href="https://slide.rabbit-shocker.org/authors/znz/lilo-20171217/">Rabbit Slide Show</a>
- <a href="https://slideshare.net/znzjp/lilolinuxorjp-201712">SlideShare</a>
- <a href="https://speakerdeck.com/u/znz/p/lilo-dot-linux-dot-or-dot-jp-falsehua-2017nian-12yue">Speaker Deck</a>
- <a href="https://rubygems.org/gems/rabbit-slide-znz-lilo-20171217">RubyGems.org</a>
- <a href="https://github.com/znz/lilo-20171217">GitHub.com</a>
で公開しています。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/lilo-20171217/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/lilo-20171217/" title="lilo.linux.or.jp の話 (2017年12月)">lilo.linux.or.jp の話 (2017年12月)</a>
</div>


<h2>ライセンス変更の話</h2>

<ul>
<li>Ruby のリファレンスマニュアルは RWiki の頃に仮の適当なライセンス + 変更手順を決めていたので、今は CC にできた</li>
<li>Ruby は 1.9.3 で GPL とのデュアルライセンスから 2条項 BSDL に切り替えた</li>
<li>tdiary は GPL2 から GPL2+ に変わった

<ul>
<li>highlight の著作権者に入っているが、特に個別連絡はなかったので詳細はよくわからない</li>
<li>日本の著作権法では異議申し立てがなければ問題はないはずという意見があった</li>
</ul>
</li>
</ul>


<p>スライドはいつも通り、
- <a href="https://slide.rabbit-shocker.org/authors/znz/change-license/">Rabbit Slide Show</a>
- <a href="https://www.slideshare.net/znzjp/ss-84299220">SlideShare</a>
- <a href="https://speakerdeck.com/znz/raisensubian-geng-falsehua">Speaker Deck</a>
- <a href="https://rubygems.org/gems/rabbit-slide-znz-change-license">RubyGems.org</a>
- <a href="https://github.com/znz/change-license">GitHub.com</a>
で公開しています。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/change-license/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/change-license/" title="ライセンス変更の話">ライセンス変更の話</a>
</div>


<h2>LibreOffice や各地の IT コミュニティ運営について</h2>

<ul>
<li>LILO や KOF などのイベント関連とか</li>
<li>OpenOffice.org や LibreOffice などのソフトウェア関係とか</li>
<li>ノウハウの文書は少ない, <a href="https://www.oreilly.co.jp/books/9784873114958/">アート・オブ・コミュニティ</a> とか</li>
<li>コミュニティの目的によっていろいろ違う</li>
<li>LILO は ML で反論があると意思決定が難しい</li>
<li>connpass に移行して楽になった</li>
<li>やり方は様々</li>
<li>ミッション大事、最初のメンバーで文化が決まる</li>
<li>人のトラブルとか悩ましい</li>
<li>CoC の話</li>
<li>DroidKaigi は毎年スタッフが半分入れ替わるらしい</li>
<li>若い人がいない問題: 諦める or 取りに行く</li>
<li>既存のところに入るより新しく立ち上げた方が活躍しやすい問題</li>
<li>最初の慣なれるための場として活用してもらう?</li>
<li>OSC 広島だとトップを学生にしてみたことがある</li>
<li>LibreOffice コミュニティの話は省略</li>
</ul>


<h2>実数ってナンだ?</h2>

<ul>
<li>人工知能や機械学習をきっかけにして数学を勉強し直した</li>
<li>自然数はここでは1以上 (0 を含む場合もある)</li>
<li>ペアノの公理</li>
<li>自然数→整数→有理数</li>
<li>有理数, 無理数は有比数, 無比数の方がわかりやすかったのに</li>
<li>デデキントの有理数の切断</li>
<li>有理数→無理数</li>
<li>無限の和で近似する話</li>
<li>無限の話</li>
</ul>


<h2>Processing でなんとなく</h2>

<ul>
<li>Processing : アート向けのプログラミング環境</li>
<li>setup と draw</li>
<li>デモ</li>
<li>ランダムに贈りあうシミュレーション</li>
<li><a href="https://gigazine.net/news/20170711-random-people-give-money-to-random-other-people/">https://gigazine.net/news/20170711-random-people-give-money-to-random-other-people/</a></li>
</ul>


<h2>qemu-debootstrap で別アーキテクチャ環境が手軽に使えて便利</h2>

<ul>
<li>arm64 (aarch64) のノート PC Pinebook を買った</li>
<li>chroot と qemu-user-static で別アーキテクチャが使える</li>
<li>Korea Community Day 2018 の紹介 (OSC のようなものらしい)</li>
</ul>


<h2>おっさんの集中力について</h2>

<ul>
<li>適度に運動する</li>
<li>寝ることが重要</li>
<li>食事のデザインも大事</li>
<li>マインドフルネスも大事</li>
<li>スピリチュアル系はやめた方が良い</li>
<li>注意力は限りがある</li>
<li>Task warrior, Time warrior</li>
<li>anki</li>
</ul>


<h2>今後の予定</h2>

<ul>
<li><a href="https://www.ospn.jp/osc2018-osaka/">OSC 2018 Osaka</a> の翌日の 2018-01-28(日) にまた関西Debian勉強会と合同で勉強会をやるらしい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Developers Meetup 2017 大阪会場に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-12-09-railsdm.html"/>
    <updated>2017-12-09T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/railsdm</id>
    <content type="html"><![CDATA[<p><a href="https://techplay.jp/event/636560">Rails Developers Meetup 2017 大阪会場</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>前にきたことがある場所より広い部屋でした。</p>

<h2>レールの伸ばし方</h2>

<ul>
<li><a href="https://speakerdeck.com/willnet/rerufalseshen-basifang">発表資料</a></li>
<li><a href="https://willnet.gitbooks.io/rspec-style-guide/content/">RSpec スタイルガイド</a></li>
<li>プロジェクトに途中から参加するとつらい</li>
<li>適切な抽象化</li>
<li>MVC が正しく使えているか</li>
<li>Fat Controller</li>
<li>ロジックを Model に</li>
<li>Fat Model</li>
<li>PORO (Plain Old Ruby Object) に切り出す</li>
<li><a href="http://tech.medpeer.co.jp/entry/2017/11/08/120000">Railsの太ったモデルをダイエットさせる方法について</a></li>
<li>大量の <code>before_filter</code> 問題の対処方法</li>
<li>クエリメソッドにして各 action で呼び出してインスタンス変数に代入</li>
<li>ビューに渡す変数を抽象化</li>
<li>View Model (View Object)</li>
<li>Validation (callback) の場合分けが複雑になる問題</li>
<li>場合分けせずにフォームごとに Form Object を作る</li>
<li>ひとつのアクションでやることがたくさんある</li>
<li>Service Object という言葉は人によってさすものがいろいろある</li>
<li>この3つでだいたいいける</li>
<li>現場に導入するには?</li>
<li>具体例やわかりやすいドキュメントが必要</li>
<li>誘導できるツールがあるといいのでは? → 作った <a href="https://github.com/willnet/yuba">https://github.com/willnet/yuba</a></li>
<li>Yuba の詳細は時間がないので省略</li>
<li>質疑応答</li>
<li>聞き取りにくかったのでメモ取れず</li>
<li><a href="http://blog.willnet.in/entry/2017/12/09/135338">Rails Developers Meetup 2017でレールの伸ばし方について話した - おもしろwebサービス開発日記</a></li>
</ul>


<h2>Professional Rails on ECS</h2>

<ul>
<li><a href="http://joker1007.hatenablog.com/entry/2017/12/09/155456">http://joker1007.hatenablog.com/entry/2017/12/09/155456</a></li>
<li>1年分の知見のまとめ</li>
<li>発表時間がたりないので後日ブログにまとめる予定</li>
<li>k8s が覇権をとった感じでつらい</li>
<li>Fargate とか EKS とか</li>
<li>Docker イメージは production と staging は同じで development はわける</li>
<li>少しの間、中継が切れてた</li>
<li>assets:precompile が鬼門のひとつ</li>
<li>prehook</li>
<li>秘匿値の扱い</li>
<li>設定ファイル自体を暗号化してつっこんでいる</li>
<li><code>yaml_vault</code></li>
<li>KMS を利用すると権限を IAM で管理できる</li>
<li>開発環境は docker-compose と volumes で</li>
<li>mac はボリュームマウントが遅い</li>
<li>Gentoo がおすすめ</li>
<li>開発環境は Docker 環境の中に zsh なども入れて便利にしている</li>
<li>ECS の説明: TaskDefinition とか Service とか</li>
<li><a href="https://github.com/reproio/ecs_deploy">https://github.com/reproio/ecs_deploy</a></li>
<li>Capistrano を使っている理由: 既存資産があるなど</li>
<li>個人別ステージング環境へのデプロイ</li>
<li>苦労話なので略</li>
<li>auto scale</li>
<li>コマンド実行 <a href="https://github.com/reproio/wrapbox">https://github.com/reproio/wrapbox</a></li>
<li>ログは papertrail 経由</li>
<li>db:migrate → ridgepole</li>
<li>diff があれば手動で DDL 発行</li>
<li>テストと CI は別発表資料参照</li>
<li>質疑応答はなし</li>
</ul>


<h2>ざっくり学ぶ言語のしくみ</h2>

<ul>
<li><a href="https://speakerdeck.com/itkrt2y/zatukurixue-buyan-yu-falsesikumi">https://speakerdeck.com/itkrt2y/zatukurixue-buyan-yu-falsesikumi</a></li>
<li>一般的な仕組みの概説</li>
<li><a href="https://interpreterbook.com/">https://interpreterbook.com/</a></li>
<li>Ruby の場合の話</li>
<li>途中終了</li>
</ul>


<h2>RSpec しぐさ</h2>

<ul>
<li><a href="https://www.slideshare.net/takafumionaka/rspec-83693226">https://www.slideshare.net/takafumionaka/rspec-83693226</a></li>
<li>テスト駆動開発の付録C</li>
<li>BDD はテストではなく設計技法なので語彙を変えた</li>
<li>assertion → expectation など</li>
<li>Given, When, Then</li>
<li>should から expect に変わった</li>
<li>最後の方がちょっと切れた</li>
</ul>


<h2>Enter the OSS world [RuboCop] II. lost boundary</h2>

<ul>
<li><a href="https://speakerdeck.com/koic/enter-the-oss-world-rubocop-ii-lost-boundary">https://speakerdeck.com/koic/enter-the-oss-world-rubocop-ii-lost-boundary</a></li>
<li>Part I は福岡で発表した</li>
<li>Part II が今回</li>
<li>bug ラベルのものをみる</li>
<li>最初に再現テストを書く</li>
<li>実際に出した PR の例</li>
<li>OSS Gate の紹介もあった</li>
</ul>


<h2>Randomly Failing Specs</h2>

<ul>
<li><a href="https://www.slideshare.net/sinsoku/randomly-failing-specs">https://www.slideshare.net/sinsoku/randomly-failing-specs</a></li>
<li>稀に落ちるテスト → 稀に通るテストになる</li>
<li>ランダム値を使うテスト</li>
<li>Faker の値は意外とかぶる</li>
<li>Faker の unique メソッド</li>
<li>FactoryBot の sequence で良いことも多い</li>
<li>グローバルなものをいじるもの</li>
<li><code>stub_const</code> のわな</li>
<li>Capybara + JavaScript</li>
<li>途中終了</li>
</ul>


<h2>休憩</h2>

<p>飛び込み LT</p>

<h3>Vim and Ruby</h3>

<ul>
<li>Ruby で Vim プラグインを作る話</li>
<li><a href="https://github.com/pocke/yaml-path.vim">https://github.com/pocke/yaml-path.vim</a></li>
</ul>


<h2>GMOペパボの Rails &amp; Vue.js プロダクト開発の現場</h2>

<ul>
<li><a href="https://speakerdeck.com/kymmtchan/rails-developers-meetup-2017">https://speakerdeck.com/kymmtchan/rails-developers-meetup-2017</a></li>
<li>カラーミーリピート</li>
<li>Rails + Vue.js を Heroku で</li>
<li>インセプションデッキ</li>
<li>ドラッカー風エクササイズ</li>
<li>類似サービスのモデリング</li>
<li>松江合宿</li>
<li>日々の開発</li>
<li>1週間スプリントのスクラム(っぽい)開発</li>
<li>ユーザテスト</li>
<li>(夏の)自由研究</li>
<li>一部ページで SSR</li>
<li><a href="https://www.slideshare.net/TsuchiKazu/vuejs-x-spa-x-ssr-79213417">新規プロジェクトへの Vue.js x SPA x SSR の導入</a></li>
<li>Rails 5.1 API モード</li>
<li>sidekiq, sidekiq-scheduler</li>
<li>API 定義を活用した開発: スキーマファースト開発</li>
<li>OpenAPI : API 仕様記述フォーマット</li>
<li>他には API Blueprint や RAML など</li>
<li>Swagger 2.0 == OpenAPI 2.0</li>
<li>API 定義の具体的な話</li>
<li>チームレビュー</li>
<li>開発</li>
<li>スタブサーバー</li>
<li>自動で整合性チェックする gem</li>
<li><code>assert_schema_conform</code> の呼び出しを prepend で差し込んだ</li>
<li>API 定義と結合</li>
<li>質疑応答</li>
</ul>


<p>Vue.js の話はなかった。</p>

<h2>作らない技術</h2>

<ul>
<li><a href="https://esa-pages.io/p/sharing/3/posts/1117/1901213944ee86efdaea-slides.html#/">https://esa-pages.io/p/sharing/3/posts/1117/1901213944ee86efdaea-slides.html#/</a></li>
<li>作る is 負債</li>
<li>作ったとしても捨てる勇気</li>
<li>pplog</li>
<li>esa</li>
<li>コンセプト駆動開発</li>
<li><a href="https://stackshare.io/esa/pplog">https://stackshare.io/esa/pplog</a></li>
<li>pplog iOS</li>
<li>取り込んでも世界観に合わないと思ったら revert する</li>
<li><a href="http://ppworks.hatenablog.jp/entry/2014/11/02/024105">Webサービスはヨシヨシしないとスネる - pblog</a></li>
<li>あえてのつかいにくさ</li>
<li>テンプレート機能は CoC 的な感じでカテゴリを流用</li>
<li>labs とか spike ブランチとか</li>
<li>作らないときは本当に作らない</li>
<li>機能を流用して見せ方を変える</li>
<li>作っても捨てる勇気を持つ</li>
<li>作らないで、既存の Web サービスに乗る</li>
<li>コードを読む習慣化</li>
<li>影響を受けた本</li>
<li>最後に自己紹介</li>
<li>質疑応答はなし</li>
</ul>


<h2>「Railsでまだ消耗しているの？」 ─僕らがRailsで戦い続ける理由─</h2>

<ul>
<li><a href="https://speakerdeck.com/toshimaru/why-we-use-ruby-on-rails">https://speakerdeck.com/toshimaru/why-we-use-ruby-on-rails</a></li>
<li>Why Ruby?</li>
<li>Why Rails?</li>
<li>DRY : 普遍的</li>
<li>CoC : Ruby on Rails の本質</li>
<li>「〇〇の方が速いよ」</li>
<li>「開発の速さ」にも同じことが言えるか?</li>
<li>dev.to は Rails</li>
</ul>


<h2>Rails on Dockerとの戦い</h2>

<ul>
<li><a href="https://www.slideshare.net/ssuser21f9f1/rails-on-docker">https://www.slideshare.net/ssuser21f9f1/rails-on-docker</a></li>
<li>モチベーションはアプリケーション規格の統一化</li>
<li>何が easy かは人による</li>
<li>シェルスクリプトでラップした</li>
<li>docker for mac つらい</li>
<li>楽をしたいのが目的なので docker であることにはこだわらない</li>
<li>だいじなことは「できる」こと</li>
<li>CI 環境もデプロイ環境もクラウドがおすすめ</li>
<li>レビューしやすい : git worktree → docker-compose build, up</li>
</ul>


<h2>Railsを学び、現場に入るまで</h2>

<ul>
<li><a href="https://speakerdeck.com/mikaji/railswoxue-bi-xian-chang-niru-rumade-rails-developers-meetup-2017-lt">https://speakerdeck.com/mikaji/railswoxue-bi-xian-chang-niru-rumade-rails-developers-meetup-2017-lt</a></li>
<li>Rails 歴 = エンジニア歴</li>
<li>ぶつかった壁</li>
<li>コードレビューが通らない</li>
<li>ActiveRecord をうまく使えていない</li>
<li>どこに実装するかで悩む</li>
<li>ActiveRecord を継承しないモデルを作っても良い</li>
<li>サービスのレイヤーを増やすかどうかの話</li>
</ul>


<h2>Rancherで作るお手軽バッチ処理環境</h2>

<ul>
<li><a href="https://speakerdeck.com/morizyun/ranchertezuo-ruoshou-qing-hatutichu-li-huan-jing">https://speakerdeck.com/morizyun/ranchertezuo-ruoshou-qing-hatutichu-li-huan-jing</a></li>
<li>Rancher が便利という話</li>
<li>メリット1: コンテナ/ホスト監視</li>
<li>メリット2: CLI ツールがあってデプロイ楽</li>
<li>メリット3: アドオン的なものが便利</li>
<li>バッチ処理もできる</li>
<li>海外の格安 VPS が使える (Scaleway)</li>
</ul>


<h2>休憩</h2>

<h3>Rails で人狼を作ってみた</h3>

<ul>
<li>Action Cable, Vue.js</li>
<li><a href="https://github.com/fshin1988/jinro_rails">https://github.com/fshin1988/jinro_rails</a></li>
<li>デモ</li>
<li>他の実装の紹介</li>
<li>人狼BBS</li>
<li>月下人狼</li>
</ul>


<h2>Rails  SQL</h2>

<ul>
<li><a href="https://speakerdeck.com/jnchito/rails-sql-number-railsdm">https://speakerdeck.com/jnchito/rails-sql-number-railsdm</a></li>
<li><a href="https://qiita.com/jnchito/items/625bef4187e360d7f4bc">Rails❤️SQLのサンプルコード #railsdm - Qiita</a></li>
<li>ActiveRecord や Ransack で9割以上は対応できる</li>
<li>ちょっと凝った検索条件、複雑な集計処理、大量データの一括更新</li>
<li>例: キーワードの入力欄と検索対象のチェックボックス</li>
<li>Form モデル</li>
<li>SQL を組み立て (この程度の SQL なら AREL で組み立てた方が他の scope とかと組み合わせやすくて便利そうに感じた)</li>
<li>例: 請求履歴と入金履歴</li>
<li>SQL を ERB で書く</li>
<li>応用 (SQL を DRY にしたい問題) : 半額フラグ</li>
<li>実装方針 : 変数に入れて再利用する</li>
<li>例: 大量データの一括更新</li>
<li>最後に自己紹介</li>
</ul>


<h2>Rails  React</h2>

<ul>
<li>風呂グラマー, IT芸人</li>
<li>What&rsquo;s React</li>
<li>サーバーサイド脳に向いている</li>
<li>サーバーサイド生成</li>
<li>React は同じ流れがクライアント側になったものと考えれば良い</li>
<li>webpacker + react (Rails 5.1 から), react-rails (React 純正), react_on_rails</li>
<li>webpacker (webpack) は大変</li>
<li>browserify : 一つのファイルだけビルドするなら webpack より楽</li>
<li><a href="https://qiita.com/bitrinjani/items/b08876e0a2618745f54a">webpack時代の終わりとparcel時代のはじまり</a></li>
<li>環境を"混ぜるな危険"</li>
<li>node の環境は別に作ろう : Docker で分離</li>
<li>トレタの React</li>
<li>View からの呼び方</li>
<li>meta タグに controller と action を埋め込んでおいて自前でルーターのようなものを書いている</li>
<li>Form だけ React というのもありなのでは</li>
<li>react-jsonschema-form <a href="https://github.com/mozilla-services/react-jsonschema-form">https://github.com/mozilla-services/react-jsonschema-form</a></li>
<li>質疑応答</li>
</ul>


<h2>とある企業のモバイル対応</h2>

<ul>
<li><a href="https://speakerdeck.com/yasaichi/rails-developers-meetup-2017">https://speakerdeck.com/yasaichi/rails-developers-meetup-2017</a></li>
<li>pixta.jp</li>
<li>導入の背景 : Mobile First Indexing</li>
<li>同一 URL でモバイル対応を行う方法: A. レスポンシブデザイン, B. UA で表示内容振り分け</li>
<li>レスポンシブは特に何もする必要がないが、UA によって分ける場合は ActionPack Variants を使う</li>
<li>複数言語対応分の View がすでにあるのでレスポンシブを選択</li>
<li>方針: 段階的リリース</li>
<li>実装: ActionPack Variants で viewport を設定</li>
</ul>


<h2>2018年から始めるRubyによる深層学習入門</h2>

<ul>
<li>機械学習・深層学習</li>
<li>Python, C++, Lua が多い</li>
<li>Ruby ではどうか</li>
<li>いくつがあるが Red Chainer の話</li>
<li><a href="https://johnresig.com/blog/write-code-every-day/">https://johnresig.com/blog/write-code-every-day/</a></li>
</ul>


<h2>外傷的Elixir</h2>

<ul>
<li>Elixir の紹介</li>
</ul>


<h2>OSS雑メンテ</h2>

<ul>
<li><a href="https://speakerdeck.com/sue445/oss-zatsu-maintenance-number-railsdm">https://speakerdeck.com/sue445/oss-zatsu-maintenance-number-railsdm</a></li>
<li>CI がないと PR がたくさんくるようになったらつらい</li>
<li>定期ビルドや bundle update も依存 gem の更新の影響をみるためにした方が良い</li>
<li>CI のバッジをまとめて表示するサイトを作った</li>
<li>「全自動化」と「情報の集約」</li>
</ul>


<h2>休憩</h2>

<h3>社長が書いたクソコードたち</h3>

<ul>
<li><a href="https://speakerdeck.com/takeyuweb/she-chang-gashu-itakusokodotati">https://speakerdeck.com/takeyuweb/she-chang-gashu-itakusokodotati</a></li>
</ul>


<h3>サービスクラスの議論を蒸し返す</h3>

<ul>
<li><a href="https://microservices-meetup.connpass.com/">https://microservices-meetup.connpass.com/</a></li>
<li><a href="https://speakerdeck.com/joker1007/number-ginzarb">https://speakerdeck.com/joker1007/number-ginzarb</a></li>
<li><a href="https://techracho.bpsinc.jp/hachi8833/2017_10_16/46482">https://techracho.bpsinc.jp/hachi8833/2017_10_16/46482</a></li>
</ul>


<h3>Railsdm 2017 っぽいものを作ってみました</h3>

<ul>
<li>quine</li>
</ul>


<h2>マルチテナント・ウェブアプリケーションの実践</h2>

<ul>
<li>GraphQL はいいぞ</li>
<li>GraphiQL (グラフィクル) - The IDE</li>
<li>keyword: onk graphql</li>
<li>Kibela について</li>
<li>マルチテナント・ウェブアプリ (MTWA)</li>
<li>SaaS において1つのシステムで複数の組織のチームを同居させるウェブアプリケーション</li>
<li>BtoB の Web サービス ≒ MTWA</li>
<li>マルチテナンシーの共有レベル</li>
<li>Kibela は (3) DB の共有</li>
<li>PostgreSQL の schema でわけている</li>
<li>MTWA のアカウントモデル</li>
<li>サービス全体でアカウントを共有: GitHub, npmjs.org</li>
<li>テナントごとにアカウントを作成: Slack, G Suite, Kibela</li>
<li>GitHub 型は「人」にフォーカスしたアカウントモデル</li>
<li>「誰だかわからない問題」がある</li>
<li>Slack 型: こちらが標準的</li>
<li>複数のアカウント管理問題は SSO である程度解決できる</li>
<li>URL の名前空間: domain vs path</li>
<li>subdomain で分離</li>
<li>ストレージの名前空間</li>
<li>PostgreSQL は database - schema - table という階層構造</li>
<li>PostgreSQL の schema の設定: apartment gem を利用</li>
<li>schema が増えてきて migration に時間がかかるようになってきた → まだ放置</li>
<li>KVS, S3, 全文検索エンジン, etc. の名前空間切り替え問題</li>
<li>memcached for Rails Cache : Proc で渡す必要がある</li>
<li>Redis by redis-namespace : スレッドセーフじゃなかったので、モンキーパッチで対応</li>
<li>Elasticsearch</li>
<li>namespacing v1</li>
<li>当初 index を team ごとに作っていた</li>
<li>index の再構築 (≒ migration) に数時間かかるように…</li>
<li>namespacing v2</li>
<li>Rails の model ごとにただ1つの index を作成</li>
<li>filtered alias で参照</li>
<li>index 再構築は速くなったが、リクエストは重くなったので調査中</li>
<li>その他S3など</li>
<li>当初は subdomain (team name) で名前空間を作っていたが rename に対応するために team id に変えた</li>
<li>Analytics : schema が大量にある DB に分析クエリうてない問題</li>
<li>Testing</li>
<li>before/after でテナントの setup/teardown したら重かったので before(:suite)/afer(:suite) に</li>
<li>namespacing のテストは難しい</li>
<li>マルチスレッド×マルチテナントのテスト</li>
</ul>


<h2>JITコンパイラはいかにRailsを速くするか</h2>

<ul>
<li>自己紹介</li>
<li>YARV-MJIT</li>
<li>Rails が安定して動かなかったので直していた</li>
<li>CRuby 向けの JIT たち: RuJIT, Eclipse OMR, LLRB, MJIT, YARV-MJIT</li>
<li>MJIT と YARV-MJIT の話</li>
<li>で、Rails で動くんですか?</li>
<li>そもそも Ruby 本体のテストが全部は通らない</li>
<li>YARV-MJIT + Rails は JIT 無効だと動く</li>
<li>optcarrot でのベンチマーク結果</li>
<li>rails_ruby_bench : このベンチマークの実行が難しい</li>
<li>Ruby Grant 2017 をやっている</li>
<li>YARV-MJIT の最適化の仕組み</li>
<li>JIT コードの最適化戦略</li>
<li>戦略ごとの説明と Rails にきくかどうか</li>
<li>Rails での YARV-MJIT の使い方</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>2018/3/24,3/25 Rails Developers Meetup 2018</li>
<li>募集開始は 2018/2/5(月) 10:00-</li>
</ul>


<h2>感想</h2>

<p>Rails とは直接関係ない話もいくつかあった気がしますが、いろいろあって面白かったです。</p>

<p>YARV-MJIT の話は RubyKaigi 2017 では LT でちゃんと話せていなかったのが、今回聞けてよかったです。(わかったとは言ってない。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第12回 HosCon - GMO Hosting Conference - @大阪 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-12-05-hoscon.html"/>
    <updated>2017-12-05T22:47:20+09:00</updated>
    <id>http://blog.n-z.jp/blog/hoscon</id>
    <content type="html"><![CDATA[<p><a href="https://gmohoscon.connpass.com/event/71755/">第12回 HosCon - GMO Hosting Conference - @大阪</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>前にもきたことがあるグランフロント大阪タワーBでした。
後ろでこのはグッズの物販をしていました。</p>

<h2>マネージドクラウドUI/UXデザインの裏側にあるもの</h2>

<ul>
<li>発表資料は公開予定らしい</li>
<li><a href="https://mc.lolipop.jp/">https://mc.lolipop.jp/</a></li>
<li>minne とホスティング事業は提供している価値が違うのでユーザーの反応も違う</li>
<li>狩野モデル</li>
<li>UX ピラミッド</li>
<li>ユーザーがまだいない状態でのデザインで迷走</li>
<li>クローズドアルファ版で UI/UX デザインもテストできる</li>
<li>新しい体験について</li>
<li>未実装機能の UI も残すとフィードバックを受けやすい</li>
</ul>


<h2>GMOインターネットグループ総合コンタクトセンターへの道のり</h2>

<ul>
<li>下関市にコールセンター</li>
<li>従業員からもお客様からも不満が多かった</li>
<li>負のスパイラルになっていた</li>
<li>改善していって正のスパイラルになった</li>
<li>総合コンタクトセンターへ</li>
</ul>


<h2>小さな会社だから出来る、独自のユーザー視点！</h2>

<ul>
<li>独自のユーザー視点 = お客様に寄り添うこと</li>
<li>「こっそり」要望に応える</li>
<li>ドメイン名をミスしたお客様のドメインを弊社管理にして返金した→将来数千ドメインを管理してくれるようになった</li>
<li>良い情報発信をしていて xrea で容量が足りなくなったお客様の容量を増やした→将来上位プランを使ってもらえるようになった</li>
<li>お得意様に「大還元」</li>
<li>バリュードメインの15周年</li>
<li>アンバサダーマーケティング</li>
</ul>


<h2>プロダクトブランディングから考えるUX改善</h2>

<ul>
<li>価格競争対策から始まった</li>
<li>インナーブランディングが重要</li>
<li>サービスの UX 改善について</li>
<li>ALTUS での事例</li>
<li>NPS アンケート</li>
<li>良い点は残して悪い点は改善</li>
</ul>


<h2>キャラクターたちと共に歩むサービスづくり(仮)</h2>

<ul>
<li>今日のテーマ「ユーザーに愛されるサービスづくり」</li>
<li>中の人たちの「サービス愛」</li>
<li>Web サイトや管理画面やモバイルアプリには「このはモード」がある</li>
<li>twitter などでのコミュニケーションを重視している</li>
<li>障害時にはつらいが応援もされるようになった</li>
<li>CD が出るらしい</li>
</ul>


<h2>感想</h2>

<p>内容自体は面白かったのですが、今回はいつもとターゲット層が違う感じの内容だったので、今のところ直接は関係ないかなあという感じでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[shellcheck を使おう]]></title>
    <link href="http://blog.n-z.jp/blog/2017-12-02-shellcheck.html"/>
    <updated>2017-12-02T02:02:02+09:00</updated>
    <id>http://blog.n-z.jp/blog/shellcheck</id>
    <content type="html"><![CDATA[<p>シェルスクリプトを書くのなら shellcheck という lint ツールでチェックしましょう、というお話です。
(<a href="https://qiita.com/znz/items/63a3d581e8ed6ff11b8e">Qiita の Shell Script Advent Calendar 2017 2日目</a> に投稿したものと同じ内容です。)</p>

<!--more-->


<h2>題材</h2>

<p>先月<a href="https://qiita.com/piroor/items/77233173707a0baa6360">Shell Script Advent Calendar 2016 8日目のプログラマーの君！ 騙されるな！ シェルスクリプトはそう書いちゃ駄目だ！！ という話</a>がいいね数ランキングで上位にきていたこともあり、<a href="https://github.com/piroor/tweet.sh">piroor/tweet.sh</a> を例に使いたいと思います。</p>

<h2>shellcheck の準備</h2>

<p>macOS なら <code>brew install shellcheck</code> とか、 Debian や Ubuntu なら <code>sudo apt install shellcheck</code> とかでインストールできます。
ちょっと試すだけなら <a href="https://www.shellcheck.net/">https://www.shellcheck.net/</a> でもできるようです。</p>

<h2>ソースの準備</h2>

<p>clone して中に移動します。</p>

<ul>
<li><code>git clone https://github.com/piroor/tweet.sh</code></li>
<li><code>cd tweet.sh</code></li>
</ul>


<p>最新だと直っているものもあるので、2016年の11月末のバージョンにします。</p>

<ul>
<li><code>git checkout 72c657e15c2cb3ea868d1a4e4061d80d0db6adb7</code></li>
</ul>


<p>detached HEAD になるため、いろいろメッセージがでますが、コミットするのでなければ気にしなくて構いません。
後で <code>git checkout master</code> か <code>git checkout -</code> で master ブランチに戻れます。</p>

<!--
git checkout '@{2016-12-01}' にしていたらうまくいかなかったので変更したら、以下の文が無関係になってしまった。

個人的には、ブレース展開を避けるために `{}` を含む引数は常にクオートするようにしていますが、この例の場合は展開されないのでクオートしなくても良いようです。
大丈夫かどうか考えるのが面倒なら、そのまま渡したい場合は常にクオートする方が考えるのが楽です。
-->


<h2>チェックしてみる</h2>

<p><code>shellcheck tweet.sh</code> で実行してみるとたくさん出ます。</p>

<p><code>shellcheck --format=gcc tweet.sh | wc -l</code> でカウントしてみたところ、ちょうど 100 でした。</p>

<p>多すぎるので多いものはとりあえず無視していきます。</p>

<ul>
<li><code>shellcheck -e SC2155 tweet.sh</code></li>
<li><code>shellcheck -e SC2155,SC2086 tweet.sh</code></li>
</ul>


<p>まだ多いです。</p>

<p>頻出するのを無視していった結果、このくらい残りました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%  shellcheck -e SC2155,SC2086,SC2196,SC2166,SC2164,SC2001,SC1090 tweet.sh
</span><span class='line'>
</span><span class='line'>In tweet.sh line 38:
</span><span class='line'>tmp="/tmp/$$"
</span><span class='line'>^-- SC2034: tmp appears unused. Verify it or export it.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>In tweet.sh line 257:
</span><span class='line'>    while read -r tweet; do echo "found!: ${tweet}"; done
</span><span class='line'>                                          ^-- SC2154: tweet is referenced but not assigned.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>In tweet.sh line 642:
</span><span class='line'>    [ $? != 0 ] && continue;
</span><span class='line'>      ^-- SC2181: Check exit code directly with e.g. 'if mycmd;', not indirectly with $?.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>In tweet.sh line 1173:
</span><span class='line'>    if echo "$url" | egrep -i "$URL_REDIRECTORS_MATCHER" 2&gt;&1 &gt;/dev/null
</span><span class='line'>                                                         ^-- SC2069: The order of the 2&gt;&1 and the redirect matters. The 2&gt;&1 has to be last.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>In tweet.sh line 1337:
</span><span class='line'>    kill $target_pid 2&gt;&1 &gt; /dev/null
</span><span class='line'>                     ^-- SC2069: The order of the 2&gt;&1 and the redirect matters. The 2&gt;&1 has to be last.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>In tweet.sh line 1347:
</span><span class='line'>  trap 'kill_descendants $self_pid; exit 0' HUP INT QUIT KILL TERM
</span><span class='line'>                                                         ^-- SC2173: SIGKILL/SIGSTOP can not be trapped.</span></code></pre></td></tr></table></div></figure>


<p>このうち SC2154 は Usage の中で表示すべき文字がエスケープされずに変数展開されてしまっているという感じで、明らかにバグだったので、<a href="https://github.com/piroor/tweet.sh/pull/2">pull request を送って取り込まれています</a>。</p>

<p>SC2034 や SC2173 は実害がないので、特に pull request は送りませんでした。</p>

<p>SC2069 は本当に標準出力を捨てて、標準エラー出力を標準出力に出したいだけかもしれないと思って、深追いしませんでした。</p>

<p>他にも正常時には問題なさそうなものだったり、意図的にやっているのかどうかソースコードを深追いしないとわからなさそうなものだったりしたので、詳しくはチェックしていません。</p>

<h2>よくある指摘</h2>

<p>SC2155 と SC2086 は、 shellcheck を使っていなかったシェルスクリプトに対して shellcheck を実行するとよく見かける気がします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>In tweet.sh line 1330:
</span><span class='line'>  local children=$(ps --no-heading --ppid $target_pid -o pid)
</span><span class='line'>        ^-- SC2155: Declare and assign separately to avoid masking return values.
</span><span class='line'>                                          ^-- SC2086: Double quote to prevent globbing and word splitting.</span></code></pre></td></tr></table></div></figure>


<p>SC2086 は、一般的に変数展開は <code>""</code> でくくるべき、という指摘です。</p>

<p>SC2086 は本当に複数引数に展開して欲しい場合には指摘される必要はないので、そういう場合は直前の行に</p>

<pre><code># shellcheck disable=SC2086
</code></pre>

<p>というコメントを書いておくと次の行だけ警告を抑制できます。</p>

<p>SC2155 はシェルスクリプトをよく書く人でも知らない人が多い内容で、 <code>export</code> や <code>local</code> などの返り値で <code>$()</code> の返り値が隠れてしまって、 <code>set -e</code> にしていても中断してくれない、という問題です。</p>

<p>shellcheck は Wiki に説明がしっかり書いてあるので、指摘の番号で検索すると <a href="https://github.com/koalaman/shellcheck/wiki/SC2155">SC2155 Declare and assign separately to avoid masking return values.</a> という説明が簡単に見つかります。</p>

<h2>まとめ</h2>

<p>SC2154 や SC2034 のような変更が重なると発生してしまいそうなバグの指摘から SC2086 や SC2155 のような知らなければやってしまいそうな間違いの指摘まで、幅広くチェックしてくれて、シェルスクリプトの上達の手助けをしてくれるので、シェルスクリプトを書くときは積極的に使うことをおすすめします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 129 回関西 Debian 勉強会 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-11-26-kansai-debian-meeting.html"/>
    <updated>2017-11-26T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20171126">第 129 回関西 Debian 勉強会</a> に参加しました。
一般ユーザー権限で LXC を使ってみるという内容でした。</p>

<!--more-->


<h2>会場</h2>

<p>いつもの福島区民センターでした。</p>

<h2>事前課題</h2>

<pre><code> lxc libvirt0 libpam-cgroup libpan-cgroup libpam-cgfs bridge-utils
</code></pre>

<p>とあったうち libpan-cgroup というのは間違いだったようです。</p>

<p><a href="https://wiki.debian.org/LXC">https://wiki.debian.org/LXC</a> 参照。</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Eucalyptus_%28software%29">Eucalyptus (software)</a> は開発が止まっている?</li>
<li><a href="https://ja.wikipedia.org/wiki/Xen_%28%E4%BB%AE%E6%83%B3%E5%8C%96%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%29#Hyper-V.E3.81.A8.E3.81.AE.E9.96.A2.E4.BF.82">Hyper-Vとの関係</a> によると Microsoft と XenSource は共同でやっているかも。</li>
</ul>


<h2>仮想化について</h2>

<p><a href="http://www.kernelvm.org/ima-made-no-matome/kaneru-vm-mian-qiang-hui-guan-xi-qino-can">カーネル/VM勉強会@関西 其の参 - カーネル／VM探検隊</a> から「BHyVeってなんや」を参考にしながら概要を解説</p>

<h2>Debian Stretch で LXC を使う</h2>

<ul>
<li>vagrant で <a href="https://app.vagrantup.com/bento/boxes/debian-9.2">bento/debian-9.2</a> の box を使って試しました</li>
<li>lxc-net を有効にするために <code>/etc/default/lxc</code> で <code>USE_LXC_BRIDGE="true"</code> に変更 (Debian Wiki は記述が古い (testing の時のパッケージが変更途中の内容?) のか <code>/etc/default/lxc-net</code> と書いてあるがそんなファイルはなかった)</li>
<li>lxc-net の変更を反映するために再起動した (<code>sudo systemctl start lxc-net</code> とかでも反映できるかもしれないが未確認)</li>
<li><code>lxc-checkconfig</code> でチェック (今の安定版は全部緑の enabled になるはず (昔はカーネルが対応していなくてダメなものがあったはず) )</li>
<li><code>sudo sh -c 'echo "kernel.unprivileged_userns_clone=1" &gt; /etc/sysctl.d/80-lxc-userns.conf'</code></li>
<li><code>sudo sysctl --system</code></li>
<li><p><code>kernel.unprivileged_userns_clone</code> の設定は Debian 固有のパッチの設定らしい? (1の方がバニラカーネルのデフォルト動作っぽい?)</p></li>
<li><p><code>sudo usermod --add-subuids 1258512-1324047 $USER</code> と <code>sudo usermod --add-subgids 1258512-1324047 $USER</code> はしなくても <code>/etc/subuid</code> と <code>/etc/subgid</code> に入っていた (<code>usermod</code> の引数は端の値の指定で <code>/etc/sub[ug]id</code> ファイルに書かれているのは開始 id と個数で別の意味なので注意)</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@debian-9:~$ cat /etc/subuid
</span><span class='line'>vagrant:100000:65536
</span><span class='line'>vagrant@debian-9:~$ cat /etc/subgid
</span><span class='line'>vagrant:100000:65536</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>echo "$USER veth lxcbr0 10"| sudo tee -i /etc/lxc/lxc-usernet</code> で一般ユーザー権限で作成できるブリッジの数を制限するらしい (<code>lxcbr0</code> の部分はブリッジ名依存)</li>
<li><code>mkdir -p .config/lxc</code></li>
<li><code>.config/lxc/default.conf</code> を作成</li>
<li><code>id_map</code> の部分は subuid と subgid と同じ値にする必要あり</li>
<li><code>lxcbr0</code> の部分も <code>ip</code> コマンドなどで確認して合わせる必要あり</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@debian-9:~$ cat .config/lxc/default.conf
</span><span class='line'>lxc.include = /etc/lxc/default.conf
</span><span class='line'># Subuids and subgids mapping
</span><span class='line'>lxc.id_map = u 0 100000 65536
</span><span class='line'>lxc.id_map = g 0 100000 65536
</span><span class='line'># "Secure" mounting
</span><span class='line'>lxc.mount.auto = proc:mixed sys:ro cgroup:mixed
</span><span class='line'>
</span><span class='line'># Network configuration
</span><span class='line'>lxc.network.type = veth
</span><span class='line'>lxc.network.link = lxcbr0
</span><span class='line'>lxc.network.flags = up
</span><span class='line'>#lxc.network.hwaddr = 00:16:3e:xx:xx:xx</span></code></pre></td></tr></table></div></figure>


<ul>
<li>hwaddr は <a href="https://ja.wikipedia.org/wiki/MAC%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9">MACアドレス</a> 参照</li>
<li>コメントアウトしてみると自動設定になった</li>
</ul>


<h2>lxc-create</h2>

<p>特権だと <code>/var/lib/lxc</code> を使われるが、一般ユーザー権限だと普通は書き込めないのでディレクトリ指定をする必要あり (絶対パスじゃないとダメらしい)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@debian-9:~$ lxc-create -n stretch -t download -P ~/work/lxc
</span><span class='line'>Setting up the GPG keyring
</span><span class='line'>Downloading the image index
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'>DIST  RELEASE ARCH    VARIANT BUILD
</span><span class='line'>---
</span><span class='line'>(略)
</span><span class='line'>debian    stretch amd64   default 20171124_22:42
</span><span class='line'>(略)
</span><span class='line'>---
</span><span class='line'>Distribution: debian
</span><span class='line'>Release: stretch
</span><span class='line'>Architecture: amd64
</span><span class='line'>
</span><span class='line'>Downloading the image index
</span><span class='line'>Downloading the rootfs
</span><span class='line'>Downloading the metadata
</span><span class='line'>The image cache is now ready
</span><span class='line'>Unpacking the rootfs
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'>You just created a Debian container (release=stretch, arch=amd64, variant=default)
</span><span class='line'>
</span><span class='line'>To enable sshd, run: apt-get install openssh-server
</span><span class='line'>
</span><span class='line'>For security reason, container images ship without user accounts
</span><span class='line'>and without a root password.
</span><span class='line'>
</span><span class='line'>Use lxc-attach or chroot directly into the rootfs to set a root password
</span><span class='line'>or create user accounts.
</span><span class='line'>vagrant@debian-9:~$</span></code></pre></td></tr></table></div></figure>


<h2>起動</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
</span><span class='line'>NAME    STATE   AUTOSTART GROUPS IPV4 IPV6
</span><span class='line'>stretch STOPPED 0         -      -    -
</span><span class='line'>vagrant@debian-9:~$ lxc-start -d -n stretch -P ~/work/lxc
</span><span class='line'>vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
</span><span class='line'>NAME    STATE   AUTOSTART GROUPS IPV4 IPV6
</span><span class='line'>stretch RUNNING 0         -      -    -
</span><span class='line'>vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
</span><span class='line'>NAME    STATE   AUTOSTART GROUPS IPV4       IPV6
</span><span class='line'>stretch RUNNING 0         -      10.0.3.146 -</span></code></pre></td></tr></table></div></figure>


<h2>接続して動作確認</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@debian-9:~$ lxc-attach -n stretch
</span><span class='line'>You lack access to /home/vagrant/.local/share/lxc
</span><span class='line'>vagrant@debian-9:~$ lxc-attach -n stretch -P ~/work/lxc
</span><span class='line'>root@stretch:/# apt update
</span><span class='line'>...
</span><span class='line'>1 package can be upgraded. Run 'apt list --upgradable' to see it.
</span><span class='line'>root@stretch:/# ls -al /var/lib/apt/lists/
</span><span class='line'>total 65872
</span><span class='line'>drwxr-xr-x 3 root root     4096 Nov 26 06:32 .
</span><span class='line'>drwxr-xr-x 5 root root     4096 Nov 24 22:47 ..
</span><span class='line'>-rw-r--r-- 1 root root 38923281 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_binary-amd64_Packages
</span><span class='line'>-rw-r--r-- 1 root root 26443489 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_i18n_Translation-en
</span><span class='line'>-rw-r--r-- 1 root root   117945 Oct  7 09:46 deb.debian.org_debian_dists_stretch_Release
</span><span class='line'>-rw-r--r-- 1 root root     2479 Oct  7 09:52 deb.debian.org_debian_dists_stretch_Release.gpg
</span><span class='line'>-rw-r----- 1 root root        0 Nov 26 06:32 lock
</span><span class='line'>drwx------ 2 _apt root     4096 Nov 26 06:32 partial
</span><span class='line'>-rw-r--r-- 1 root root    62959 Nov 25 10:01 security.debian.org_dists_stretch_updates_InRelease
</span><span class='line'>-rw-r--r-- 1 root root  1257072 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_binary-amd64_Packages
</span><span class='line'>-rw-r--r-- 1 root root   624275 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_i18n_Translation-en
</span><span class='line'>root@stretch:/# exit
</span><span class='line'>vagrant@debian-9:~$ ls -al ~/work/lxc/stretch/rootfs/var/lib/apt/lists/
</span><span class='line'>total 65872
</span><span class='line'>drwxr-xr-x 3 100000 100000     4096 Nov 26 06:32 .
</span><span class='line'>drwxr-xr-x 5 100000 100000     4096 Nov 24 22:47 ..
</span><span class='line'>-rw-r--r-- 1 100000 100000 38923281 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_binary-amd64_Packages
</span><span class='line'>-rw-r--r-- 1 100000 100000 26443489 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_i18n_Translation-en
</span><span class='line'>-rw-r--r-- 1 100000 100000   117945 Oct  7 09:46 deb.debian.org_debian_dists_stretch_Release
</span><span class='line'>-rw-r--r-- 1 100000 100000     2479 Oct  7 09:52 deb.debian.org_debian_dists_stretch_Release.gpg
</span><span class='line'>-rw-r----- 1 100000 100000        0 Nov 26 06:32 lock
</span><span class='line'>drwx------ 2 100104 100000     4096 Nov 26 06:32 partial
</span><span class='line'>-rw-r--r-- 1 100000 100000    62959 Nov 25 10:01 security.debian.org_dists_stretch_updates_InRelease
</span><span class='line'>-rw-r--r-- 1 100000 100000  1257072 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_binary-amd64_Packages
</span><span class='line'>-rw-r--r-- 1 100000 100000   624275 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_i18n_Translation-en</span></code></pre></td></tr></table></div></figure>


<h2>NAT</h2>

<p><a href="https://wiki.debian.org/LXC/SimpleBridge">https://wiki.debian.org/LXC/SimpleBridge</a> の</p>

<pre><code>up iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
</code></pre>

<p>は</p>

<pre><code>down iptables -t nat -D POSTROUTING -o wlan0 -j MASQUERADE
</code></pre>

<p>もないと up down を繰り返すと増えそう。</p>

<p>lxc-net で試した環境は自動で NAT 設定が入っていた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@debian-9:~$ sudo iptables -nL -t nat
</span><span class='line'>Chain PREROUTING (policy ACCEPT)
</span><span class='line'>target     prot opt source               destination
</span><span class='line'>
</span><span class='line'>Chain INPUT (policy ACCEPT)
</span><span class='line'>target     prot opt source               destination
</span><span class='line'>
</span><span class='line'>Chain OUTPUT (policy ACCEPT)
</span><span class='line'>target     prot opt source               destination
</span><span class='line'>
</span><span class='line'>Chain POSTROUTING (policy ACCEPT)
</span><span class='line'>target     prot opt source               destination
</span><span class='line'>MASQUERADE  all  --  10.0.3.0/24         !10.0.3.0/24</span></code></pre></td></tr></table></div></figure>


<h2>停止</h2>

<p>資料にはなかったけど、個人的に停止と削除も試しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@debian-9:~$ lxc-stop -n stretch -P ~/work/lxc
</span><span class='line'>vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
</span><span class='line'>NAME    STATE   AUTOSTART GROUPS IPV4 IPV6
</span><span class='line'>stretch STOPPED 0         -      -    -</span></code></pre></td></tr></table></div></figure>


<h2>削除</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@debian-9:~$ lxc-destroy -n stretch -P ~/work/lxc
</span><span class='line'>Destroyed container stretch
</span><span class='line'>vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
</span><span class='line'>vagrant@debian-9:~$ ls work/lxc/
</span><span class='line'>lxc-monitord.log</span></code></pre></td></tr></table></div></figure>


<h2>休憩中の話</h2>

<ul>
<li><a href="https://www.ubuntu.com/server/maas">https://www.ubuntu.com/server/maas</a></li>
</ul>


<h2>ネットワーク図</h2>

<ul>
<li>ネットワーク図を書いて議論</li>
<li><a href="https://twitter.com/YukiharuYABUKI/status/934688472845058054">https://twitter.com/YukiharuYABUKI/status/934688472845058054</a></li>
</ul>


<h2>次回</h2>

<ul>
<li>2017/12/24(日)</li>
</ul>


<h2>まとめ</h2>

<p>発表者の佐々木さんが病欠で、時間に余裕があったので、資料や Wiki の記述や不足点などをツッコミを入れたりするような感じになっていました。
その後は、ネットワーク図を書いて色々と議論をして、少し早めに終わりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chromecast を買ってみて Mac の Chrome, Android, iPod touch から繋いでみた]]></title>
    <link href="http://blog.n-z.jp/blog/2017-11-23-chromecast.html"/>
    <updated>2017-11-23T22:22:22+09:00</updated>
    <id>http://blog.n-z.jp/blog/chromecast</id>
    <content type="html"><![CDATA[<p>Google Cast が便利そうだったので、 Chromecast 第2世代を買ってみました。
クライアントとしては MacBook Pro の Google Chrome, Android, iPod touch を試してみました。</p>

<!--more-->


<h2>HDMI 連携</h2>

<p>HDMI は デバイスと TV の連携機能があるので、自動で Chromecast に入力切替をしたり、電源が入っていなかったら自動で電源が入ったりしました。</p>

<p>直前に PS3 などの別のデバイスを表示していた場合はそっちの電源を切り忘れることがありそうなので、その点は注意が必要そうでした。</p>

<p>HDMI 入力の端子が足りないので、最近は GamePad だけでもできることしかしていない Wii U の入力を外して Chromecast に繋ぎ変えました。
繋ぎ変えが面倒になったら切替機を買うかもしれません。</p>

<h2>初期設定</h2>

<p>iOS や Android 以外にもパソコンからも設定できるということだったので、 MacBook Pro の Google Chrome から chromecast.com/setup を開いてセットアップをしようとすると、説明もなく Wi-Fi 設定を変更されてしまって、 IRC などが切れてひどい目にあいました。
そもそもブラウザーからネットワークの設定が変更できるとは思わなかったのですが、 URL を確認すると <code>chrome://cast/</code> で始まる URL になっていたので、普通の Web サイトで悪さができるというわけではなさそうです。</p>

<p><a href="https://www.google.com/intl/ja/policies/terms/">利用規約</a> や <a href="https://www.google.com/intl/ja/policies/privacy/">プライバシー ポリシー</a> はパソコンからの方が確認しやすかったです。</p>

<p>WPA-PSK のパスフレーズをコピペしようと思って Wi-Fi 設定の確認の画面でパスワード入力欄にフォーカスをあてようとしてもあたらず、手動入力さえできないのであきらめました。
検証をしてみると angularjs 1.6.6 を使っているので、 angular のできが悪いのかもしれません。</p>

<p>仕方がないので Android から Google Home (Google Cast 的な名前から名前が変わったらしい) を使って設定すると、パスフレーズは Android 側から読み出してくれるらしく、入力する必要はありませんでした。</p>

<h2>チュートリアル</h2>

<p>初期設定の最後にチュートリアルがあって、音量調整などの操作も Android 側からできると知りました。</p>

<h2>Google Chrome からキャスト</h2>

<p>右上の縦に3点が並んだボタンからメニューを開いて、「キャスト&hellip;」を選ぶと今開いているタブか全画面がキャストできました。</p>

<h2>Android 6.0.1 から再生</h2>

<p>Chromecast 対応アプリの AbemaTV や Google Play の映画 (昔安売りしていた時に買ったマッドマックス怒りのデス・ロードで試せた) もチュートリアルで説明があった通り、右上のキャストアイコンから再生できました。</p>

<p>任意の画面全体をキャストすることもできるので、 iOS + Apple TV のような使い勝手を実現できるようです。</p>

<h2>iPod touch から再生</h2>

<p>iPod touch からも同じネットワークに繋いでいれば AbemaTV や YouTube などの再生ができました。</p>

<p>対応アプリしか再生できないので、 iOS 端末自体の画面を TV に飛ばしたいのなら Apple TV の方が良さそうです。</p>

<h2>再生中の動作</h2>

<p>対応アプリでは、動画の再生が始まってしまえば、再生自体は Chromecast 自体がやっているようで、端末側でアプリを終了したり、機内モードにして完全に切断してみたりしても再生は続いていました。</p>

<p>再生中は別端末の Google Home アプリやパソコンから <code>chrome://cast/</code> を開いて音量や再生の一時停止や停止を操作できるようです。</p>

<p>再生開始したもの以外ではシーク操作などができないことがあるようなので、よくわからなかったとかの時に数秒戻す操作を使うなら、再生開始したアプリから操作できる状態を残しておいた方が良さそうでした。</p>

<h2>ゲストモード</h2>

<p>ゲストモードをオンにすれば位置情報を元に同じネットワークに繋いでいなくても繋がるはず、と思ったのですが、うまくいきませんでした。
すでに連携しているアカウントで登録しているデバイスだとうまくいかないのでしょうか。ちょっとしか試していないので、原因は謎です。</p>

<h2>Google Chrome の中で YouTube 再生のキャスト</h2>

<p><a href="http://portal.nifty.com/cs/dpztv/list/1.htm">プープーテレビ - デイリーポータルZ</a> のように YouTube を埋め込んでいるサイトでも、再生時の右下にキャストアイコンが出てくるので、そこから Chromecast に切り替えて再生できました。</p>

<h2>まとめ</h2>

<p>全体として複数デバイスがあるときに、どのデバイスからでも操作しやすいという感じがしました。
(Apple TV ではリモコンで直接操作がメインで、画面を飛ばしているときはその飛ばしている元がメインだった気がしました。)</p>

<p>その代わり、モバイルデバイスで操作を開始した後、パソコンの Google Chrome で操作を引き継ぐと一時停止や停止はできてもシークができないなど、切り替え方によっては全機能が引き継げないという点に注意が必要そうだと感じました。</p>

<p>現時点での Chromecast + Google Home + 対応アプリの動作状況なので、それぞれがバージョンアップしていくと状況が変わっていく可能性もあると思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ カーネル/VM探検隊@関西 8回目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-11-18-kernelvm.html"/>
    <updated>2017-11-18T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kernelvm</id>
    <content type="html"><![CDATA[<p><a href="https://connpass.com/event/68374/">カーネル/VM探検隊@関西 8回目</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>久しぶりに京都大学にきました。
大統一Debian勉強会で来たのは覚えているのですが、それ以降来たことがあったかどうか思い出せませんでした。</p>

<h2>uwabami さんによる会場説明</h2>

<h2>rui314 さんによる場つなぎ</h2>

<p>配信の準備ができるまで rui314 さんの自己紹介などの話がありました。</p>

<ul>
<li>Accidentally Turing-Complete</li>
<li>elvm の話</li>
<li>constexpr で云々</li>
<li>Life Game 上で C コンパイラとかやってる人はまだいなさそう</li>
<li>Go 言語の話</li>
<li>Go opinionated な言語</li>
<li>template が欲しいという人向けの回答のテンプレートがある</li>
<li>language spec がある</li>
<li>ライブラリを読んでいくと勉強になる</li>
<li>(C++ の std のアルゴリズムとか読んでいくと勉強になる)</li>
<li>たまにバグを見つけてパッチを投げるとコミット権がもらえる</li>
<li>tar の生成とかを読んだりとか</li>
<li>ディレクトリ区切りは内部では <code>/</code> で扱って Windows では入出力の時に置き換えでも問題ない</li>
<li><p>文字列も内部は utf-8 というのも良い</p></li>
<li><p>質問受け付け</p></li>
<li>Google に入ったきっかけは?</li>
<li>メールが来て渋谷のセルリアンタワーにいった</li>
<li>東京も Chrome などのプロジェクトをやっている</li>
<li><p>Tensorflow とか東京にプロジェクトがないものはできないなどの理由で本社へ</p></li>
<li><p>最近スタンフォードの大学院にいっている</p></li>
<li>オンラインでフルタイムではなくできる</li>
<li>SCPD</li>
<li>ドラゴンブック: 龍がコンパイラの複雑さを表している</li>
<li><!-- 1個の授業が70万円ぐらいだが Google が補助してくれるらしい -->毎週の宿題が難しい (授業を聴いていても難しい)</li>
</ul>


<p>13:44 で準備が完了したということで突然終了。</p>

<h2>CODE BLUE CTF 2017で出した問題の話</h2>

<ul>
<li>CODE BLUE : 世界トップクラスのセキュリティ専門家による日本発の情報セキュリティ国際会議</li>
<li><p>CODE BLUE CTF 2017 : CODE BLUE で開かれたコンテストのひとつ</p></li>
<li><p>Simple Memo Pad (pwn)</p></li>
<li>CTF における pwn (pwnable) とは : 脆弱性でメモリ書き換えをして不正な動作をさせる</li>
<li>realworld での pwn の応用例 : EthernalBlue (WannaCry で使われた), BlueBorne, Jailbreak</li>
<li>どこを書き換えるとプログラムを乗っ取れる? : 関数ポインタ関連</li>
<li><code>puts@plt</code> という仕組みの解説</li>
<li>GOT overwrite</li>
<li>データ領域に置いたコードに向ける</li>
<li>system に向ける</li>
<li>これを阻むセキュリティ機構の数々</li>
<li>NX bit (No eXecute)</li>
<li>RELRO (RELocation Read-Only) : No RELRO, Partial RELRO, Full RELRO</li>
<li>ASLR, PIE</li>
<li><p>ここからさらに掘り下げる</p></li>
<li><p>Simple Memo Pad (pwn)</p></li>
<li>脆弱性: 1回だけ Buffer overflow でリンクリストを壊せる</li>
<li>脆弱性を使ってできること: 任意の場所にメモのアドレスを1回だけ書き込める, メモの内容は攻撃者がコントロール可能</li>
<li>セキュリティ機構の有無 (ツールを使って確認できる): No RELRO, NX Enabled, ASLR Enabled, No PIE</li>
<li>GOT overwrite : NX Enabled なのでメモに置いた機械語が実行できない → NG</li>
<li>glibc 内部にある関数ポインタの配列へのポインタを上書き: ASLR で無理 → NG</li>
<li>Partial RELRO, Full RELRO の問題が多いのに No RELRO なのが不自然</li>
<li>No RELRO と Partial RELRO の違いのうち <code>.dynamic</code> セクションに注目</li>
<li>偽の文字列テーブル strtab (.dynstr) を参照するように <code>.dynamic</code> セクションを書き換え</li>
<li><p><code>strcmp(user_input, "y")</code> の代わりに <code>system(user_input)</code> が呼ばれるようにできた</p></li>
<li><p>fs hell (rev)</p></li>
<li><code>printf("%d", 0);</code></li>
<li><code>printf("%3$d", 2, 1, 0);</code></li>
<li><code>printf("%3$5d", 2, 1, 0);</code></li>
<li><code>printf("%3$*$4d", 2, 1, 0, 5);</code></li>
<li><code>printf("%3$*$4d%5$n", 2, 1, 0, 5, &amp;a);</code></li>
<li><code>printf("%4$.*1$d%4$.*2$d%3$n", 2, 3, &amp;a, 0);</code></li>
<li>format string で足し算ができる!</li>
<li><code>./fs_hell program.txt input.txt</code> の <code>fs_hell</code> と <code>program.txt</code> を解析して指定した出力が出る <code>input.txt</code> を作る問題</li>
<li><code>program.txt</code> は format string が並んだファイル</li>
<li><code>fs_hell</code> は snprintf で処理していく</li>
<li><p><code>fs_hell</code> でできること: 足し算, 引き算, 左シフト, 右シフト, ジャンプ, 条件分岐</p></li>
<li><p>質疑応答</p></li>
<li>他の問題についての質問</li>
<li>作問のアイデアを思いつくタイミング</li>
</ul>


<h2>Linux + 9p = process migration</h2>

<ul>
<li>この発表ではネットワーク越しにプロセスを移動させる話</li>
<li>計算資源の共有</li>
<li>Plan 9</li>
<li>9P : ファイルシステム共有のためのネットワークプロトコル</li>
<li><a href="https://github.com/pfpacket/rust-9p">https://github.com/pfpacket/rust-9p</a></li>
<li>9P = FUSE + network transparency</li>
<li>CRIU : プロセスをダンプして保存して復帰するもの</li>
<li>問題点: open file, network stack (state), socket, 周辺機器の状態, 通信先のプロセスなど</li>
<li>同じファイルパスがあればシーク位置なども含めて復帰できる</li>
<li>すべてファイルで表現すれば解決</li>
<li>デモ動画は準備する時間がなかったのでなし</li>
<li>質疑応答も質問なしで終了</li>
</ul>


<h2>ニューラルFM音源</h2>

<ul>
<li><p>発表資料: <a href="https://speakerdeck.com/fadis/niyurarufmyin-yuan">ニューラルFM音源</a></p></li>
<li><p>FM 音源の説明</p></li>
<li>含まれている倍音が変わると別の楽器の音に聞こえる</li>
<li>周波数変調 (FM)</li>
<li>(式の説明とかゆっくりみないと理解できなさそうだった)</li>
<li>音からパラメーターを決めるのが難しい</li>
<li>前に発表したネタ 遺伝的FM音源 は時間がかる</li>
<li>いろいろ反響があった中の深層学習を使えば良いのでは?というのに注目</li>
<li>ニューラルネットワークの説明</li>
<li>音のサンプル: 最初の例は違うと言われて聞くと違うっぽいとわかるぐらいの差、次の例は明らかに違う感じ</li>
<li>位相の差はほぼ知覚できないので無視する</li>
<li>ほとんどの部分はノイズでちゃんとした音がでる範囲は限られる</li>
<li>ノイズソムリエを作ってもしょうがないので試す範囲を絞り込む</li>
<li>深層学習</li>
<li>シグモイド関数 → ReLU</li>
<li>ResNet</li>
<li>1台のマシンにのる限りのせても長すぎることはないんじゃないかなと予想</li>
<li>ResNet-36 の理由は GPU の VRAM の容量が 8 GB で ResNet-50 にはメモリ不足だったから</li>
<li>遺伝的アルゴリズムに比べて結果はよくなかったが、学習済みなので、入力からパラメーターが出てくるのは高速</li>
</ul>


<h2>xHCI（USB3.0 HC）デバドラを自作してみよう</h2>

<ul>
<li>USB のデバイスドライバーの話は新規性はない?</li>
<li>会場アンケート: 書いたことがある人は少なかった</li>
<li>Host Controller の話</li>
<li>USB 2.0 の頃は Companion Host Controller で USB 1.1 と互換性があった</li>
<li>xHCI は USB 1.1 や 2.0 の HC のデバドラがあっても無駄</li>
<li><a href="https://github.com/liva/xhci_uio">https://github.com/liva/xhci_uio</a></li>
<li>なぜ作り始めたか</li>
<li>自作 OS でネットワークと USB のサポートが必要</li>
<li>1,2週間でできると思っていたら3ヶ月かかった</li>
<li>ユーザー空間でデバドラ開発</li>
<li>メリット: やらかしても SEGV するだけですぐに開発に戻れる, いちいち再起動せずにビルド即テスト可能, libc 使い放題</li>
<li>EHCI と xHCI は仕組みが大幅に変わっていた</li>
<li>UHCI はデバドラがパケット転送をスケジューリング</li>
<li>xHCI は全ての通信が Ring というリングバッファ的な何かで行われる</li>
<li>USB デバイスごとに slot を確保</li>
<li>Ring 自体はリングバッファではなく Link TRB を使ってリンクドリストを作る (最後の要素が別のリストへのリンクという特殊なものになっている)</li>
<li>HHKB (一部機種) はハブだったので、ハブのデバドラも必要になった</li>
<li>いろいろあったけど、動いた <a href="https://github.com/liva/xhci_uio">https://github.com/liva/xhci_uio</a></li>
<li>マイクがミュートされていた</li>
</ul>


<p>発表資料: <a href="https://drive.google.com/file/d/1TyEIFXcXl6kHvjXVVct-6BtYPykUdege/view">https://drive.google.com/file/d/1TyEIFXcXl6kHvjXVVct-6BtYPykUdege/view</a></p>

<h2>Portable Driver Architecture (PDA) でユーザ空間PCIデバイスドライバ</h2>

<ul>
<li>uio, DPDK, SPDK : ユーザー空間が流行り?</li>
<li>Portable Driver Architecture (PDA) : ユーザー空間で PCI デバイスのドライバを書くための仕組み</li>
<li>ユーザー空間デバイスドライバ: カーネル最小化, 安全性, 移植性, 高性能</li>
<li>PDA の主な目標は 移植性, 高性能</li>
<li>必要な機能: 割り込みハンドリング, デバイスの管理, デバイスの入出力</li>
<li>PDA ができた経緯</li>
<li>PDA の利用例</li>
<li>PDA の性能</li>
<li>PDA vs DPDK</li>
<li>DPDK は NIC のパケット処理向けなので、そういう用途向け便利機能がある (Linux (<code>uio_pci_generic</code>), FreeBSD)</li>
<li>PDA は汎用で Linux 向け (<code>uio_pci_dma</code>)</li>
<li><code>uio_pci_generic</code> : 126 行 (コメント含む)</li>
<li><code>uio_pci_dma</code> : 1328 行 (コメント含む)</li>
<li>なぜ長いのか : sysfs に独自の I/F を提供, メモリ管理がらみ</li>
<li>DMA のためのメモリ管理 : スワップアウトして欲しくない, なるべく連続した十分な大きさの物理アドレス空間を確保したい, NUMA 環境下ではソケットの境界を超えてほしくない</li>
<li>単に malloc しただけではうまくいかない</li>
<li>PDA のメモリ管理戦略 : カーネルモジュールが DMA バッファを用意するなど</li>
<li>wrap-mapping : カーネルで確保したリングバッファを2度繰り返してメモリ空間にマップ</li>
<li>upstream のものは最近のカーネルでは動かなかった <a href="https://github.com/kdiff3/pda">https://github.com/kdiff3/pda</a></li>
<li><p>CERN ALICE (動いた) <a href="https://github.com/AliceO2Group/pda">https://github.com/AliceO2Group/pda</a> や FAIR CBM <a href="https://github.com/cbm-fles/pda">https://github.com/cbm-fles/pda</a> のは最近でもメンテナンスされている</p></li>
<li><p>質疑応答</p></li>
<li><code>uio_pci_dma</code> をメインラインに入れようという動きはない</li>
<li>fork も徐々にコードが離れていってしまっているかも</li>
</ul>


<h2>VMM食べ比べ / KVM vs AHF vs HAXM</h2>

<ul>
<li>未踏2016 で Noah という Mac で ELF を動かすものを作った時に VMM を使った</li>
<li>Virtual Machine Monitor</li>
<li>Libisolation : Noah を応用したサンドボックス</li>
<li>Noah on Windows</li>
<li>OS が全部違う</li>
<li>qemu-kvm ではなくカーネルモジュール部分の話</li>
<li>参加者から2名ほど選んで需要を調査</li>
<li>そもそもの最近の VM の仕組み</li>
<li>KVM</li>
<li>Apple Hypervisor Framework (AHF)</li>
<li>Intel HAXM : Android エミューレーターの高速化モジュールとして有名</li>
<li>4スライドでわかる VMM の作り方</li>
<li>詳細は <a href="http://syuu1228.github.io/howto_implement_hypervisor/">ハイパーバイザの作り方</a> 参照</li>
<li>AHF, KVM, HAXM の順でだいたい柔軟性が高く使いやすい</li>
<li>ドキュメントはほぼない</li>
<li>VM はデバッグがつらい</li>
<li>EPT の活用 : ゲストとホストのメモリアドレスのマッピング</li>
<li>例外ハンドリング</li>
<li>AHF が一番柔軟性が高く OS を自由に選べるならおすすめ</li>
<li>普通の VM を作るのなら KVM, HAXM でも十分</li>
<li><p>HAXM はドキュメントがないので初めての VMM としてはやめておけ</p></li>
<li><p>HAXM の機能についてはどうやって調べたのか?</p></li>
<li>API の構造体などをみて AHF や KVM の経験と勘から</li>
<li>偽陰性の可能性はある</li>
</ul>


<h2>Blend XMODEM 〜UEFI de XMODEM〜</h2>

<ul>
<li>発表資料: <a href="https://speakerdeck.com/tnishinaga/kernelvmkansai8">Blend XMODEM -UEFI de XMODEM-/KernelvmKansai8</a></li>
<li>(ハシビロコウのマスクを被って発表かと思いきや、息苦しいということですぐに脱いだ)</li>
<li>AARCH64 ボードの話</li>
<li>UEFI から起動する OS もどきを作ってみたい</li>
<li>リモートからプログラムを送りたい</li>
<li>送る方法: シリアル転送, ネットワークブート</li>
<li>XMODEM を選択</li>
<li>XMODEM のプロトコルの説明</li>
<li>UEFI の文字コードは UTF-16 で 1 byte read/write はどうする? → SERIAL IO PROTOCOL を使う</li>
<li>一定時間ごとに受信待ちループを解除して NAK 送信? (UEFI は割り込み処理が大変) → <code>SERIAL_IO_PROTOCOL</code> の SetAttributes でタイムアウト設定</li>
<li>デバッグ? シリアルはすでに使っていて、どこで printf debug? → シリアルを2本生やす</li>
<li>qemu の AARCH64 だとシリアルが2本生えない → <code>x86_64</code> の QEMU に生やす</li>
<li>minicom vs tmux : pts を奪い合う</li>
<li>データが受け取れずに NAK を送り続ける → タイムアウト数回繰り返してからにした</li>
<li>実機で動かない</li>
<li>デバッグしたいがシリアル1本しかない → ファイルに書き出せば良い</li>
<li>書き込んだ文字が文字化け → ファームウェアをアップデート</li>
<li>ダウンロードするファイルがわかりづらい</li>
<li>grub が勝手に起動して UEFI shell に落ちない</li>
<li>ログが取れるようになったところで時間切れ</li>
</ul>


<h2>インサイドNintendo Switch</h2>

<ul>
<li>Hardware spec とか Software spec とか</li>
<li>FreeBSD は使われていない</li>
<li>NSO バイナリフォーマット</li>
<li>NRO バイナリフォーマット (NRR に正規の署名があるものしかロードできない)</li>
<li>MOD バイナリフォーマット : NRO や NSO 内に埋め込まれている動的リンクに必要な情報を管理する専用領域</li>
<li>Homebrew ソフトウェア</li>
<li>ReSwitched Team <a href="https://github.com/reswitched">https://github.com/reswitched</a></li>
<li>解析ツール : ELF に変換するツールはあったが直接ディスアセンブルするツールはなかった</li>
<li>今は radare2 が対応</li>
<li>セキュリティ事情</li>
<li>(WebKit は無限に脆弱性が)</li>
<li>エミュレータ NSEMU を開発中</li>
<li>今後の課題</li>
<li>発表資料: <a href="https://speakerdeck.com/rkx1209/insaidonintendo-switch">インサイドNintendo Switch</a></li>
</ul>


<h2>Unikernels report</h2>

<ul>
<li>発表資料: <a href="https://speakerdeck.com/orumin/unikernel-report">Unikernel report</a></li>
<li>Unikernel とは?</li>
<li>会場では知っている人はほとんどいなかった</li>
<li>OSv とか</li>
<li>最近の Unikernel</li>
<li>RumpRun</li>
<li>IncludeOS</li>
<li>EbbRT</li>
<li>LightVM</li>
<li>(&ldquo;My VM is Lighter (and Safer) than your Container&rdquo; という煽り文句から your がなくなっていた)</li>
<li>試そうとしたらカーネルコンフィグが悪かったのかうまくいかなかった</li>
<li><p>まとめ</p></li>
<li><p>質疑応答</p></li>
<li>ミラージュ OS はスコープ外? → Unikernel の元になったものなのでスコープ外というか前提</li>
</ul>


<h2>RISC-V ユーザランド ISA</h2>

<ul>
<li>RISC-V はフツー</li>
<li>命令の個別の簡単な説明</li>
<li>hart : ハードウェア・スレッド</li>
</ul>


<h2>lld: 速くてシンプルなリンカ</h2>

<ul>
<li><a href="https://github.com/rui314/8cc">https://github.com/rui314/8cc</a></li>
<li>goo.gl/kTwXem</li>
<li>lld の実装状況</li>
<li>ELF (Unix), COFF (Windows), Mach-O (macOS) をサポート</li>
<li>lld/ELF はプロダクションクオリティ</li>
<li>FreeBSD は GPL 3 のものをメインに入れない都合でリンカーが古かったところに lld が出て来たので使われるように</li>
<li>Chrome が移行中, Firefox, Rust なども移行中っぽい</li>
<li>RISC-V と WebAssembly のような珍しいものもある</li>
<li>WebAssembly のリンカーは今までなかった</li>
<li>lld/COFF は PDB デバッグ情報を含めプロダクションクオリティ</li>
<li>lld/Mach-O は未完成</li>
<li>デザインゴール : シンプル, 速い, 使うのが簡単</li>
<li>/usr/bin/ld を置き換える (勇気が必要)</li>
<li>clang で &ldquo;-fuse-ld=lld&rdquo; オプション</li>
<li>質問: リンカースクリプトも同じものが使える? → ほぼ使える (が、そもそも GNU のリンカーも2個あって互換性が完全ではない)</li>
<li>GNU binutils には bfd と gold という2つのリンカーが入っている</li>
<li>bfd は ELF より前からあり抽象化レイヤーがある</li>
<li>gold は bfd より速いリンカーとして登場</li>
<li>lld も速いリンカーとして開発された</li>
<li>比較グラフ</li>
<li>コードを最適化したくはない、自然に速く動くコードを書きたい</li>
<li>問題の規模 : Chrome (デバッグ情報付き) は 2 GiB ほど</li>
<li>シンボル処理で1マイクロ秒増えると6秒増える</li>
<li>シンボルテーブルのルックアップが重いので減らす</li>
<li>並行処理</li>
<li>シングルスレッドでも速い方が良い</li>
<li>再現可能なリンクのために出力は決定論的な方が良い</li>
<li>マルチスレッド化</li>
<li>入力から出力にコピーとリロケーションはマルチスレッドにできる</li>
<li>文字列マージの並行処理はトリッキー。単に正しい出力を作るのは簡単だが、毎回同じ出力にするのは難しい。</li>
<li>ハッシュ値の計算は終わった状態で、下位ビットでシャーディング</li>
<li>コードの行数は gold より少ない</li>
<li>gold はアーキテクチャ依存部分が大きい、作りも凝ったことをしているので複雑</li>
<li>エラーメッセージ: clang が C++ のエラーメッセージクオリティを引き上げたのと同じようなことがしたかった</li>
<li>セマンティックスの違い</li>
<li>伝統的な Unix リンカーでは順番が重要だったが、順番を気にしなくてもよくした</li>
<li>FreeBSD 全体でも少ししか失敗しなかったので、大きな問題はなかった</li>
<li>リンク時最適化</li>
<li>clang で <code>C{,XX}FLAGS=-flto</code> と <code>LDFLAGS=-fuse=lld</code> をコンパイラフラグに追加するだけ</li>
<li>クロスリンク</li>
<li>すべてのターゲットが常にサポート</li>
<li>クロスビルドツールチェインで lld を使うのが簡単になるはず</li>
<li><p>ホスト環境に出力が依存しない</p></li>
<li><p>OpenBSD では起動ごとに ASLR よりももっとランダムにしたいという話があるらしい。</p></li>
<li>質疑応答</li>
<li>GPL 3 なのが理由で macOS では bash が古いままだが、同じ理由で lld に需要がある? → そもそも ld64 が GNU のものではないので関係ない</li>
<li>そもそも情報源は? → まず Microsoft が出している仕様をみて、何もしない Windows プログラムを作って、 Hello world ぐらいを作って、と順番にやっていった。 ELF もドキュメントがある。 Linkers &amp; Loaders は良い本なので、古い部分もあるが参考になる。既存のリンカーのソースコードも参考になる。 MIPS がひどい。</li>
</ul>


<h2>まとめ</h2>

<p>京都 (大学) は遠いですが、面白かったので行ってよかったと思いました。</p>

<p>リンカーはデフォルトがどっちなのか確認して、 bfd だったら gold を使うように変更してみようかなと思いました。
lld は Debian に入っているのが buster (今の testing) からで、 stretch (今の stable) には入っていないようなので、使うのはまだ先かなと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[関西オープンフォーラム2017 2日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-11-11-kof2017.html"/>
    <updated>2017-11-11T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kof2017</id>
    <content type="html"><![CDATA[<p><a href="https://k-of.jp/2017/">K-OF 2017</a> の2日目に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>いつもの ATC でした。</p>

<p>12時ごろに到着しました。</p>

<h2>mrubyマイコンボードをさわってみよう!</h2>

<p>間に合ったので、スタッフとしてお手伝いをしました。</p>

<p>Windows で Visual Studio Code + Rubic が開発環境でした。</p>

<p>うまく動かない PC があるという感じで大変な点もありましたが、概ね好評な感じだったようです。</p>

<p>うまく転送できなくなることがあるのは、ドキュメントフォルダー以下だとダメだとか、USB をさしなおしたり、 Visual Studio Code の再起動をするとなおることもあるらしいとかいう感じで謎でした。</p>

<h2>Debian Updates</h2>

<ul>
<li>いつものように Debian とは? から。</li>
<li>企業がメインだとどういうことがある?</li>
<li>注力するソフトウェアの選定が企業で決まる。</li>
<li>btrfs を Redhat がやめて、 SUSE が引き継ぐということがあった。</li>
<li>コードネームは 10 の Buster がトイストーリーのおもちゃではなく犬になっているので、まだ大丈夫そう?</li>
<li>Debian 9 について</li>
<li>mysql のデフォルトは stretch では mariadb に置き換わったが、 mysql のパッケージは sid で復活しているらしい</li>
<li>クロスコンパイルは mingw も対応している</li>
<li>Xorg サーバーがユーザー権限が動くようになったので Xvfb や Xnest が動かしやすくなった</li>
<li>mingw のクロスコンパイルが便利そうな例の話: groonga とか?</li>
<li>Firefox の話</li>
<li>セキュリティ更新は ESR</li>
<li>商標などの問題と ESR は別の話</li>
<li>firefox パッケージは sid のみで firefox-esr のみが stable に入っている</li>
<li>新規インストール時のネットワークインターフェース名が変わる</li>
<li>ハマりどころは? → eth0, eth1 の順番が入れ替わることがあった頃の方がトラブっていた。</li>
<li>Hurd はファームウェアがフリーなディスクがなくて、ディスク I/O が遅いが KVM の virtio 経由ならましらしい</li>
<li><a href="https://debianjp.connpass.com/">https://debianjp.connpass.com/</a></li>
<li><a href="https://debianjp.connpass.com/event/71914/">第 129 回関西 Debian 勉強会</a></li>
<li>日本語入力は問題があれば ibus に変更すれば良さそう?</li>
</ul>


<h2>日本のインターネットが揺れた日</h2>

<ul>
<li>この件で話をするのは5件目らしい</li>
<li>元々エンジニアで入社したが途中から記者になった</li>
<li>色々昔話とか</li>
<li>大規模障害の話</li>
<li>経路情報の話</li>
<li>今は68万ぐらい</li>
<li>10万ぐらい一気に増えたらしい</li>
<li>情報を聞き出すのが大変だった</li>
<li>AS 番号から調べたら Google だった</li>
<li>「なんでグーグルが関係があるの?」</li>
<li>by 社内</li>
<li>by Google 日本法人</li>
<li>Google 日本法人「事実関係を確認中」になったので2本の記事を配信 (25日夜)</li>
<li>26日昼に Google から</li>
<li>Sorry のニュアンスがわからなかったので再確認</li>
<li>Google 日本法人から返答 (26日午後3時)</li>
<li>グーグルが謝罪の記事</li>
<li>結局 何が起きていた?</li>
<li>困った時の piyokango → まだ情報が不十分だった</li>
<li>結局誰も全体像を説明できない</li>
<li>ツイートの impression 291 million</li>
<li>KloutScore : アカウントの影響力をスコアリング</li>
<li>属性によりつぶやく内容もさまざま</li>
<li>影響範囲が大きいのでさらなる記事が必要</li>
<li>「インターネットが壊れたっぽい」</li>
<li>「日本の背骨がやられた」</li>
<li>「グーグルに吸い込まれた」</li>
<li>「太平洋往復ルート」(10月15日朝刊)</li>
<li>反響は様々</li>
<li>YouTube - 32.78% : Downstream in Asia-Pacific</li>
<li>社会は変わる 技術者は? 利用者は? 「インターネットは何も変わっていません 変わったのは社会の方です」</li>
<li>議論をしてより良い世界をつくろう</li>
<li>「電気」「ガス」「水道」「インターネット」</li>
<li>スマホを手にした瞬間、世界とつながる現実</li>
<li>「冗長性」って知ってますか?</li>
<li><p>「つながる」という意味を考えよう</p></li>
<li><p>質疑応答</p></li>
<li>ヒューマンエラー? → トラフィックエンジニアリングのミステイクだと聞いたのでヒューマンエラーだと思う</li>
<li>チェックの機構はあってもそれを超えてしまうことはあるのでは。 100% ということはないので。</li>
<li>学生から arp とかもなぜ信じるのかという質問が出たことがある</li>
<li>バランスが大事</li>
<li>今回はミスだったが、意図的にされたら? → サイバー攻撃はすでに実際に起きている、攻撃者は先を見ている</li>
<li>BGP が脆弱なのが表出したのは良い機会だったかもしれない</li>
<li>犯罪者にとっても止める方向にメリットはあまりないので、そういうことはあまり起きていない</li>
<li>国がネットをシャットダウンすることもあった</li>
<li>国がネットを管理すべきか問題</li>
<li>境がないことの価値</li>
<li>OCN と KDDI 以外での影響は? → BGP の経路情報的には他にも影響があったはずだが、他では騒ぎになっていなかった</li>
<li>インターネット依存度合いの問題? → リテラシーとかの問題かも</li>
</ul>


<h2>終了後</h2>

<p>お楽しみ抽選会には参加せずに 関西 Debian の人たちについていって会場を出ました。</p>

<h2>感想</h2>

<p>いつもの Debian Updates の他に、事前のセッション一覧で気になっていた「日本のインターネットが揺れた日」も聞けて、 mruby のハンズオンも間に合う時間に行けたら手伝おうと思っていたのが手伝えて、 mruby での組み込みの開発がどんな感じかわかってよかったです。</p>

<p>「日本のインターネットが揺れた日」のセッションで、頻繁に録画しているという話をしていて、後日 YouTube に公開されるらしいので、気になる方は見てみると面白いのではないかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitlab-ci-multi-runner パッケージから gitlab-runner パッケージへの更新]]></title>
    <link href="http://blog.n-z.jp/blog/2017-11-06-gitlab-runner.html"/>
    <updated>2017-11-06T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/gitlab-runner</id>
    <content type="html"><![CDATA[<p>GitLab Runner が 10.0.0 だとパッケージ名が gitlab-runner に変わってしまって、そのままだと 9.5.1 から更新されなくなってしまったので、対応しました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 16.04.3 LTS</li>
<li>gitlab-ci-multi-runner (9.5.1) から gitlab-runner (10.1.0)</li>
</ul>


<h2>GitLab Runner とは?</h2>

<p><a href="https://docs.gitlab.com/runner/">GitLab Runner</a> とは GitLab CI のジョブを実行する部分のことです。</p>

<p>詳細は<a href="http://blog.n-z.jp/blog/2017-07-09-gitlab-runner.html">インストール時の記事</a>を参照してください。</p>

<h2>インストール方法</h2>

<p><a href="https://docs.gitlab.com/runner/install/linux-repository.html">Install GitLab Runner using the official GitLab repositories - GitLab Documentation</a> が gitlab-runner に改名後のインストール方法になっているので、参考にして移行しました。</p>

<h2>移行方法</h2>

<p>簡単にまとめると apt の設定を変えて <code>gitlab-runner</code> パッケージを入れ直すだけでした。</p>

<p>GitLab (GitLab CI) への登録や <code>/etc/gitlab-runner/config.toml</code> はそのままで大丈夫でした。</p>

<h2>apt-line の更新</h2>

<p><code>/etc/apt/sources.list.d/</code> 以下に入っている</p>

<pre><code>deb https://packages.gitlab.com/runner/gitlab-ci-multi-runner/ubuntu xenial main
</code></pre>

<p>の apt-line を削除して、</p>

<pre><code>deb https://packages.gitlab.com/runner/gitlab-runner/ubuntu xenial main
</code></pre>

<p>を追加しました。</p>

<h2>pinning 設定変更</h2>

<p><code>/etc/apt/preferences.d/pin-gitlab-runner.pref</code> で <code>gitlab-ci-multi-runner</code> パッケージを <code>packages.gitlab.com</code> のものを優先するように設定していたのを、 <code>gitlab-runner</code> パッケージに変更しました。</p>

<h2>パッケージのインストール</h2>

<p><code>gitlab-runner</code> パッケージをインストールすると自動的に <code>gitlab-ci-multi-runner</code> パッケージと置き換わりました。</p>

<p><code>gitlab-ci-multi-runner</code> パッケージを purge しても <code>/etc/gitlab-runner/config.toml</code> が消えたりすることもないので、特に注意するような点はなさそうでした。</p>

<h2>ansible での例</h2>

<p><a href="https://github.com/znz/ansible-role-gitlab-runner/commit/616a9da561360fbae940940aec49483a5ee1ce9b">Use gitlab-runner instead of gitlab-ci-multi-runner</a> のように変更しました。</p>

<p>移行措置として、 gitlab-ci-multi-runner の apt-line を消す処理も入れています。</p>

<h2>まとめ</h2>

<p><code>gitlab-ci-multi-runner</code> パッケージから <code>gitlab-runner</code> パッケージへの移行は GitLab (GitLab CI) への登録し直しが必要だと面倒そうと思って、 10.0.x の間は躊躇してそのままにしてしまっていましたが、 vagrant 環境で確認したところ、パッケージの更新だけで大丈夫ということがわかったので、問題なく上げることができました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebRTC Meetup Osaka #2 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-10-27-webrtc.html"/>
    <updated>2017-10-27T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/webrtc</id>
    <content type="html"><![CDATA[<p><a href="https://atnd.org/events/91437">WebRTC Meetup Osaka #2</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>久しぶりにさくらインターネットさんの会場にきました。
ゲスト Wi-Fi は SSID が同じで、パスワードが変わっていて、 iPod touch は一度覚えているのを削除して、設定し直さないと繋がりませんでした。</p>

<h2>会場説明等</h2>

<p>懇親会をするので参加希望者は休憩の時に。</p>

<h2>Meetupの説明</h2>

<ul>
<li>開催実績の紹介など</li>
<li>ハッシュタグは <code>#webrtcjp</code></li>
<li>WebRTC-JP Slack</li>
<li>YouTube に過去の動画も公開している <a href="https://goo.gl/BjEhku">https://goo.gl/BjEhku</a></li>
<li>参加者はほぼエンジニア</li>
<li>初参加の人が多い</li>
<li>WebRTC で何か開発したことがあるのは半数ぐらい</li>
</ul>


<h2>ワンボタンでできる！WebRTCゲーム配信！</h2>

<ul>
<li>PLiCy という自作フリーゲームの公開・共有を目的とした SNS</li>
<li>別途ツールを準備しなくてもブラウザだけで完結するブラウザゲームの簡易配信機能</li>
<li>少なくとも Android 4.0 で動いたので対応環境も十分ある</li>
<li>遊んでいる人全員に配信してもらうのが目標</li>
<li>ゲーム画面の抽出は captureStream で取得するだけ</li>
<li>ゲーム音楽の抽出は GainNode の prototype を書き換えて connect に割り込み</li>
<li>マイクを使った実況対応は getUserMedia API で HTTPS 必須</li>
<li>WebRTC の通信は PeerJS を利用</li>
<li>TURN サーバーが必要だった</li>
<li>CentOS 5 だと TURN サーバーが動かなかったので、CentOS 7 を入れ直した</li>
<li>映像・音声とは別に RTCDataChannel API でデータ通信が使える</li>
<li>Web Speech API でチャットコメントを音声読み上げする</li>
<li>Safari に対応するのに PeerJS を修正する必要があった</li>
<li>Edge はまだダメ</li>
<li>運用状況と課題</li>
<li>画質の設定はないが captureStream API でフレームレートは設定できる</li>
<li><p>iframe を使うと Firefox や Safari で問題があった</p></li>
<li><p>質疑応答</p></li>
<li>CentOS 5 は実験用のサーバーなので古かった</li>
<li>TURN サーバーは何を使っている? coturn ではない? → パッケージ名が「turnserver」という名前のものを使っている</li>
<li>回線が細いと途切れるという話があったが、接続が多いと切れる? → P2P なので TURN サーバーを経由しているかどうかでも変わって来る。10人を超えると不安定になってくる。スマホでキャリア回線でみると重いとかはある。</li>
</ul>


<h2>実践 WebRTC 〜最新事例と開発ノウハウの紹介〜</h2>

<ul>
<li>発表資料は SlideShare で公開している: <a href="https://goo.gl/daTG2m">https://goo.gl/daTG2m</a></li>
<li>WebRTC = Web Real Time Communication</li>
<li>リアルタイムコミュニケーションの民主化</li>
<li>最初のリアルタイムコミュニケーションは電話</li>
<li>2011 年に WebRTC の草案が発表</li>
<li>WebRTC の特徴: カメラやマイクを利用可、ブラウザ間の P2P 通信、ストリーミングデータを扱える</li>
<li>WebRTC を構成する技術要素</li>
<li>中身は4つ: 1から3は IETF で標準化、4は は W3C で標準化</li>
<li>1: 暗号化などのプロトコル、2: P2P通信する手順、3: コーデック、4: JavaScript などから利用する API</li>
<li>リアルタイムのために基本的に UDP 上</li>
<li>コーデック: VP8, VP9, H.264 (Safari はこれのみ)、音声は opus</li>
<li>Can I use? でブラウザの対応状況を確認 <a href="http://caniuse.com/#feat=rtcpeerconnection">http://caniuse.com/#feat=rtcpeerconnection</a></li>
<li>IE はあきらめましょう</li>
<li>Safari は 11 で対応</li>
<li><p>iOS でネイティブアプリを作らなくても使えるようになる</p></li>
<li><p>WebRTC の事例紹介</p></li>
<li><p>Co-Streaming (共同ストリーミング) 複数人が同時に動画配信し多人数が視聴する</p></li>
<li>mixer: MS が買収したゲーム動画配信サービスで Win 10 からは直接配信も可能</li>
<li><p>Pixiv Sketch LIVE</p></li>
<li><p>Serverless CDN: Peer5</p></li>
<li><p>Serverless CDN x Streaming: Streamroot</p></li>
<li><p>オンライン英会話: Skype から移行しているところが多い</p></li>
<li>カスタマサポート: videodesk</li>
<li>遠隔診療: CLINICS 先生側(PC)と患者側(スマホアプリ)</li>
<li>IoT: petoco</li>
<li><p>マッチングアプリ: KoeTomo</p></li>
<li><p>WebRTC の活用しどころ: 既存サービスの置き換えでコスト削減よりも付加価値向上がおすすめ</p></li>
<li><p>ここからエンジニア向けの話</p></li>
<li><p>Safari の開発メニューには「レガシー WebRTC API を有効にする」という設定がある</p></li>
<li>API も結構変わってきている</li>
<li>ブラウザは ORTC の考え方を一部取り入れた WebRTC 1.0 API へ対応しつつある</li>
<li>WebRTC 1.0 では SDP を利用する</li>
<li>レガシー API だと SDP に全てのレイヤーについてネゴシエーションするのに必要な情報が全て記載されているので、例えば、音声ミュートで参加していたメンバーが途中からミュートを解除すると、音声トラックだけ操作したいのに、全てのレイヤーで再ネゴシエーションが発生する。</li>
<li>ORTC は各レイヤーに相当する API が公開されているので、必要なところだけ操作できる</li>
<li>API の進化に対応するのは <a href="https://github.com/webrtc/adapter">adapter.js (shim)</a> を使えばだいたいうまくやってくれる</li>
<li>ブラウザー間の互換性の問題</li>
<li>Chrome, Firefox, Safari はベースになっているコアライブラリが同じなので相性が良いが、Edge は独自なので相性が悪い</li>
<li>動画コーデック: Chrome Firefox は VP8/VP9/H264, Edge は VP8/H264UC, Safari は H264 のみ</li>
<li>H264UC は Skype 用</li>
<li>Safari はモバイルのハードウェアの対応を考慮してそう</li>
<li>API も差がある</li>
<li><p>ScreenShare は Edge にはないなどの機能差は adapter.js では対応できないのでアプリでどうにかする必要あり</p></li>
<li><p>マイクカメラの扱いにはハマりどころが多い</p></li>
<li>カメラの機種, OS, ブラウザの差がある</li>
<li>getUserMedia の Constraints に指定してもその通りになるとは限らない</li>
<li><p><a href="https://goo.gl/9DWMGZ">俺たちは雰囲気でgetUserMedia()をやっている</a></p></li>
<li><p>フルメッシュ, MCU, SFU</p></li>
<li>SFU が主流</li>
<li><p>ユースケースに合わせて選択しましょう</p></li>
<li><p>つながらない問題</p></li>
<li>WebRTC にはシグナリングとメディア、2つの通信がある</li>
<li>1: シグナリングサーバーとの接続 (だいたいWSS) ができない</li>
<li>2: メディアの通信 (P2P) が疎通できない</li>
<li>1 はネットワークが対応しないとどうしようもない</li>
<li><p>2 はネットワークのポリシー変更や TURN サーバー</p></li>
<li><p>ICE, STUN, TURN</p></li>
<li>STUN: UDP ホールパンチングできる NAT の種類には制限がある</li>
<li><p>TURN は UDP が通らない時に TCP でラップしてくれる機能もある</p></li>
<li><p>デバッグ方法</p></li>
<li><p>chrome://webrtc-internals</p></li>
<li><p>プラットフォームサービスは積極的に活用しよう</p></li>
<li>WebRTC は総合格闘技</li>
<li>プラットフォームサービス: OpenTok, CafeX, SkyWay, Twillio, FacePeer</li>
<li>ミドルウェア: WebRTC SFU Sora</li>
<li><p>プラットフォームサービスを使っても、つながらない問題が全て解決するわけではない</p></li>
<li><p>質疑応答</p></li>
<li>Safari の ScreenShare 対応? → プラグインを入れてもらう必要がある</li>
<li>コーデック? → Firefox だと VP8 が優先, SDK で設定できるものもある, 相手を Safari にすると H264 になる</li>
<li>H264UC と H264 との互換性は? → 別物で互換性はない</li>
<li>Data Connection を使わずに Edge とやり取りするには? → WebSocket を使う。 Skype で必要なさそう (WebSocket でなんとかなる) なので Data Connection の実装はあまり期待できない</li>
</ul>


<h2>休憩</h2>

<p>早めに進んでいたので順番を入れ替えて休憩は後になりました。</p>

<h2>WebRTCのデバッグに関するTips&amp;Tricks</h2>

<ul>
<li>WebRTC の同人誌</li>
<li>booth.pm で「WebRTC」で検索</li>
<li><p><a href="https://mzsm.booth.pm/items/628127">https://mzsm.booth.pm/items/628127</a></p></li>
<li><p>Safari の開発メニューには「模擬キャプチャデバイス」というものがある</p></li>
<li>Chrome は <code>--use-fake-device-for-media-stream</code> 付きで起動</li>
<li><p>Firefox は getUserMedia で fake: true を指定</p></li>
<li><p>getUserMedia の制限</p></li>
<li>Chrome は localhost は https でなくても OK</li>
<li>他の人につないでもらいたい時は ngrok が使える</li>
<li>Homebrew か公式サイトからダウンロードしてインストール</li>
<li>日本だと <code>--region ap</code> を指定するのが良い</li>
<li><p>デモ</p></li>
<li><p>質疑応答</p></li>
<li><code>/etc/hosts</code> で localhost の IP アドレスを別のものにしたら通る? → 不明</li>
<li>会社ネットワークとかで外にでるのに制限がある環境では https のサーバーをたてた方が楽なのでは? → そこは適宜</li>
</ul>


<h2>iOS11は本当にWebRTCに対応したのか</h2>

<ul>
<li>Safari 11 でビデオチャットは可能</li>
<li><p>他アプリでは無理</p></li>
<li><p>WKWebView, SFSafariViewController, UIWebView (deprecated)</p></li>
<li>getUserMedia が全部非対応</li>
<li>RTCPeerConnection はあるので、データ通信はできた</li>
</ul>


<h2>次回告知等</h2>

<ul>
<li><a href="https://techplay.jp/event/637372">WebRTC Meetup Tokyo #17 Special Edition</a></li>
<li>Youtube Live による配信あり</li>
<li>WebRTC Meetup Osaka #3 は12月か1月にやりたい、発表者募集中</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Developers Meetup #6 大阪会場に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-10-19-railsdm.html"/>
    <updated>2017-10-19T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/railsdm</id>
    <content type="html"><![CDATA[<p><a href="https://techplay.jp/event/631426">Rails Developers Meetup #6 大阪会場</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>前回までと同じ場所なので、スムーズに到着することができました。</p>

<h2>オープニング</h2>

<ul>
<li>プログラムの紹介</li>
<li>ハッシュタグは <code>#railsdm</code></li>
</ul>


<h2>Railsエンジニアの交換型インターンシップについて</h2>

<ul>
<li>自己紹介と会社紹介</li>
<li>インターンシップを始めた同機</li>
<li>開発者不足</li>
<li>交換型インターンシップとは何か</li>
<li>プログラミングスクール的な学習週とインターン的な作業週を交互にやる</li>
<li>学習週は 平均3ヶ月 (交互なので6ヶ月) で終わるぐらいのボリューム</li>
<li>作業週</li>
<li>pull request の練習にもなるということで好評</li>
<li>ローカル (学生が多い) とリモート (社会人が多い) がある</li>
<li>シニアインターン: バイトリーダー的な存在</li>
<li>インターンの成果: アルバイトとしての成果とスクールとしての成果 (就職先) がある</li>
<li>モチベーションがもたない</li>
<li>対策としては見てますよというメッセージを送り続ける</li>
<li>いいね！ がんばれ！ 大丈夫！</li>
<li>不安に対してはメッセージを送り続けるしかない</li>
<li>所属感がない</li>
<li>対策: ミートアップや忘年会を開催</li>
<li>ニートやひきこもりが社会復帰した</li>
<li>就職先の会社からとても喜ばれる</li>
<li>仕事が増えた</li>
<li>有名じゃない会社のインターン戦略</li>
<li>出入りしやすくして単純に人数が多いため、確率的に優秀な人も多くなる</li>
<li>来るもの拒まず、去る者追わず</li>
<li>社会人が7割</li>
<li>無料なのでいろいろなところから紹介される</li>
<li>RubyKaigi のスタッフをやったら就職できる</li>
<li>求人への応用</li>
<li>採用はしていない</li>
<li>探すんじゃなくて育てる</li>
<li>組んでくれる会社</li>
<li>質疑応答</li>
<li>id的には183名</li>
<li>7割ぐらい去っている?</li>
<li>社会人は求職中の人もいれば仕事をしながらの人もいる</li>
<li>課金サービスはない</li>
</ul>


<p><a href="http://docs.komagata.org/5463">発表資料</a></p>

<h2>Railsコントリビューション</h2>

<ul>
<li>自己紹介</li>
<li><a href="http://contributors.rubyonrails.org/">http://contributors.rubyonrails.org/</a> で24位</li>
<li><a href="http://contributors.rubyonrails.org/releases">http://contributors.rubyonrails.org/releases</a> の v5.0.0 が 9999 Commits というコネタ</li>
<li>コミットログを読むブログを続けている <a href="http://y-yagi.hatenablog.com/">http://y-yagi.hatenablog.com/</a></li>
<li>わからないことも多かったが動かして確認した</li>
<li>テストがちゃんと書かれるようになったころだったのでテストでなんとなくわかった</li>
<li>2,3ヶ月で Rails のコードに慣れて、いろいろとミスに気づくようになった</li>
<li>問題がある状態をそのままにしておくのはよくないということでコントリビュートし始めた</li>
<li>どんな時にコントリビュートするか? 期待通りに動かない時、機能追加したい時</li>
<li>期待通りに動かないというのはまあまあある</li>
<li>よく使う道具なので期待通り動いて欲しい</li>
<li>Issue をつくる or PR を作る</li>
<li>Issue をつくるのも大事なコントリビュート</li>
<li>英語が苦手なので PR を投げてしまうことの方が多い</li>
<li>機能を追加したい時</li>
<li>よく使う道具なので機能が足りてて欲しい</li>
<li><a href="https://github.com/rails/rails">https://github.com/rails/rails</a> のみを対象 (<a href="https://github.com/rails">https://github.com/rails</a> の他のレポジトリは方針などが違うことがある)</li>
<li><a href="http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html">http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html</a></li>
<li>Issue はバグ管理のみ</li>
<li>新機能提案などの issue は即 close されたりする</li>
<li>新機能についての議論は rails-core ML</li>
<li>PR 投げて、そこで議論をするのでも大丈夫 (その方が多そう)</li>
<li><a href="https://github.com/rails/rails/tree/master/guides/bug_report_templates">https://github.com/rails/rails/tree/master/guides/bug_report_templates</a> を参考にして再現手順が作れると良い</li>
<li>master ブランチでも再現するか確認</li>
<li>サポート対象外の古い Rails での Issue は無視されるか即 close</li>
<li>サポート対象: <a href="http://guides.rubyonrails.org/maintenance_policy.html">http://guides.rubyonrails.org/maintenance_policy.html</a></li>
<li>似たような PR がもうないか検索してみる (open だけではなく close されているものも)</li>
<li>close されていたら理由を確認して、それでも PR を出すなら、そのことも書く</li>
<li>やりとりが止まっている場合は確認して引き継いでしまう</li>
<li>Rails 本体にいるかどうか gem じゃだめなのか考える</li>
<li>foreigner や migration_comments のように本体に取り込まれることもある</li>
<li>フォーマットに従う <a href="https://github.com/rails/rails/blob/master/.github/pull_request_template.md">https://github.com/rails/rails/blob/master/.github/pull_request_template.md</a></li>
<li>テストは大体は bundle exec rake test で動く</li>
<li>CI の結果も確認する</li>
<li>doc やコメントのみの修正は <code>[ci skip]</code> を入れる</li>
<li>パフォーマンス改善はベンチマークスクリプトと結果もコミットログに入れる</li>
<li>PR の description に書くようなことはコミットログに入れれば良い</li>
<li>後から参照しやすい</li>
<li>使われてないはずのものを消す場合は使われなくなった場所の確認の他に gem に切り出されたものが使っている可能性も考える必要がある</li>
<li>public API の挙動を変えない</li>
<li><a href="http://api.rubyonrails.org/">http://api.rubyonrails.org/</a> にのっているものが public API</li>
<li>挙動を変えたい場合は deprecate から</li>
<li>squash</li>
<li>何から始めたらいいか</li>
<li>doc</li>
<li><a href="http://api.rubyonrails.org/">http://api.rubyonrails.org/</a> と <a href="http://guides.rubyonrails.org/">http://guides.rubyonrails.org/</a> がリリースされているものに対応</li>
<li>master ブランチは <a href="http://edgeapi.rubyonrails.org/">http://edgeapi.rubyonrails.org/</a> と <a href="http://edgeguides.rubyonrails.org/">http://edgeguides.rubyonrails.org/</a></li>
<li>新しいバージョンを触る</li>
<li>rc をまたずに beta1 が出たら試す</li>
<li>新しい機能はバグっていることが多い</li>
<li>既存の機能が壊れていることもある</li>
<li>新しい Ruby で触る</li>
<li>Issue をみる: コードをみるとっかかりになる, 意外と簡単に直せるバグもある</li>
<li>英語ができない: コミットログや PR を参考にする</li>
<li>何か怖い: 慣れるしかない, <a href="https://oss-gate.github.io/">https://oss-gate.github.io/</a> もおすすめ</li>
<li>質疑応答</li>
</ul>


<p><a href="https://docs.google.com/presentation/d/e/2PACX-1vTQx7WQDPQmvMHRyc8Pj1kP9SOqHAlmLUUGA22G7nU7qtXJsFEwYMaMPwBHWMc-dx9OZaAPl3S7pmtw/pub">発表資料</a></p>

<h2>休憩</h2>

<h2>Railsでつくる ファイルアップロード 2017</h2>

<ul>
<li>会社紹介</li>
<li><p>自己紹介</p></li>
<li><p>きっかけ</p></li>
<li>サービスを Perl の独自フレームワークから Rails に移行中に画像アップロードを作り直したことがなかったことに気づいた</li>
<li>Active Storage の登場</li>
<li><p>スマホ時代のファイルアップロード</p></li>
<li><p>画像アップロードで考えるポイント</p></li>
<li>画像アップロード自体</li>
<li>画像の参照</li>
<li><p>画像ファイルの置き場所</p></li>
<li><p>UI から考える 2017 年の画像アップロード</p></li>
<li>例: クックパッド, esa</li>
<li><p>非同期</p></li>
<li><p>form_with</p></li>
<li><p>Headless browser</p></li>
<li><p>Step 1: public に画像アップロード</p></li>
<li>ActionDispatch::<a href="Http::UploadedFile">Http::UploadedFile</a></li>
<li>validate が画像ファイル自体と画像と紐づく情報の2軸になる</li>
<li>フォームオブジェクトで処理すると良さそう</li>
<li>Step 2: S3 に画像アップロード</li>
<li>認証、アクセス制御、モック</li>
<li>問題発生? ファイルアップロードに時間がかかる気がする</li>
<li>サーバー経由ではなくダイレクトにアップロードに</li>
<li>Step 3: ダイレクトアップロード (S3)</li>
<li>Step 4: 複数ファイルのアップロード</li>
<li>multiple では非同期が必要だった</li>
<li>Step 5: ECMAScript 6 や File API など</li>
<li>新しい画像フォーマット (Live Photos?)</li>
<li>技術の積み重ねとユーザー体験</li>
<li><p>ユーザー体験を向上させようとすると rails から離れた技術も必要になってくる</p></li>
<li><p>質疑応答</p></li>
</ul>


<p><a href="https://speakerdeck.com/matsuhisa/rails-developers-meetup6-image-upload">発表資料</a></p>

<h2>How, Why, What がわからないコードの調べ方</h2>

<ul>
<li>ネタバレ: 最終的には負けた</li>
<li>ベストは、「知っている人に聞く」</li>
<li>誰もいないなら調べるしかない</li>
<li>git blame は -L で範囲を絞り込める</li>
<li><code>git blame -L "/regex",+20 file</code></li>
<li>git blame rev file</li>
<li><a href="https://github.com/akr/vcs-ann">https://github.com/akr/vcs-ann</a></li>
<li>tig blame file</li>
<li><code>","</code> でカーソル行の親コミットの blame に移動</li>
<li>歴史をみてもわからなかった</li>
<li>ログを出す</li>
<li><code>Kernel.#caller</code></li>
<li><code>logger.tagged("hoge") do ... end</code></li>
<li>歴史を見ても、動きを見ても、よくわからない</li>
<li>それは、作り直して良いというフラグでは?</li>
<li>結論: 強く生きよう</li>
</ul>


<h2>How to improve OSS Rails application</h2>

<ul>
<li>自己紹介</li>
<li>GitLab</li>
<li>時間がおしているので質疑応答はなし</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>次回予告: #7 は 2017.11.16</li>
<li>月1開催は次回で最終回</li>
<li>募集は 2017.10.30 10:00から</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第79回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-10-07-rubykansai79.html"/>
    <updated>2017-10-07T14:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai79</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/65609">第79回 Ruby関西 勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<p>今回は amagasakirb でよく来ていた尼崎市立小田公民館でした。</p>

<p>プロジェクターは 800x600 でした。</p>

<h2>How to specify <code>frozen_string_literal: true</code></h2>

<p>発表資料は RubyKaigi 2017 で使ったものと同じで、 <a href="https://github.com/znz/rubykaigi2017-frozen_string_literal">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-how-to-specify-frozenstringliteral-true/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/how-to-specify-frozenstringliteral-true">slideshare</a>, <a href="https://speakerdeck.com/znz/how-to-specify-frozen-string-literal-true">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-rubykaigi2017-frozen_string_literal">RubyGems</a> にあげているものを、 <code>allotted-time</code> を 5m から 10m に変更して使いました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-frozen_string_literal/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-frozen_string_literal/" title="How to specify `frozen_string_literal: true`">How to specify `frozen_string_literal: true`</a>
</div>


<h2>西谷さんの文書管理の話</h2>

<ul>
<li>会場アンケート: 初参加の人が多かった</li>
<li>OSS Gate で rubocop にバグ報告したら直してもらえた <a href="https://github.com/bbatsov/rubocop/issues/4644">https://github.com/bbatsov/rubocop/issues/4644</a></li>
<li><a href="https://ja.wikipedia.org/wiki/%E5%8F%8C%E6%9B%B2%E5%89%B2%E5%BC%95">双曲割引</a></li>
<li>今18万円もらうか、1年後に20万円もらうか</li>
<li>2年後に18万円もらうか、3年後に20万円もらうか</li>
<li>マシュマロテスト</li>
<li>既知感</li>
<li>記憶

<ul>
<li>記述記憶</li>
<li>非記述記憶

<ul>
<li>身体的記憶</li>
<li>経験記憶</li>
<li>場所の記憶</li>
</ul>
</li>
</ul>
</li>
<li>文書管理</li>
<li>文書管理の原則: 決める, 見える, tight binding, 利用する</li>
<li>会場に質問 → markdown や org-mode でメモしている人がいた<!-- e-文書法 関連の仕事をしているという人がいた --></li>
<li>おすすめの本は? → <a href="http://amzn.to/2hT6Qdq">野口 悠紀雄の「超」整理法</a>, あとはだいたい失敗している</li>
<li>日付で整理している人は多い</li>
</ul>


<h2>休憩</h2>

<ul>
<li>14:45 まで休憩</li>
</ul>


<h2>もう放置しない！画面遷移図の作り方</h2>

<ul>
<li>今までの発表中に急遽発表資料を作った</li>
<li>Sky Grid の山本さん</li>
<li>西谷さんのところの卒業生</li>
<li>急いでショッピングサイトを作っていて、急遽画面遷移が必要になった</li>
<li>移動中に UI Flows というのをみつけた</li>
<li>手書き or ホワイトボード ? (or Excel ?)</li>
<li>おうおうにして放置される</li>
<li>guiflow というものをみつけた</li>
<li><a href="https://qiita.com/hirokidaichi/items/ff54a968bdd7bcc50d42">もう保守されない画面遷移図は嫌なので、UI Flow図を簡単にマークダウンぽく書くエディタ作った</a></li>
<li>質疑応答</li>
<li>rails なら routes から自動生成できないか?</li>
<li>画面遷移図を先に作るのなら無理そう</li>
<li>漏れをなくすよりも主要な遷移だけにしたい?</li>
<li>feature テストからならできそう?</li>
</ul>


<h2>RubyKaigi 2017 のキーノート紹介</h2>

<ul>
<li>なかださんの発表</li>
<li>事務処理できる人がいなくなった</li>
<li>概要</li>
<li>Subversion を使っていて、なぜ Git を使わないのかという話</li>
<li>新機能/課題の管理: Redmine で管理している</li>
<li>開発者会議: 月1回</li>
<li>Ruby のビルドの仕方</li>
<li>バグフィックスの事例</li>
<li>Ruby は「簡単な文法」だと「錯覚」させている</li>
<li><a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/50578">[ruby-list:50578] [質問] 変数pが定義されている時のabsの動作について</a></li>
<li><code>String#intern</code> と refinements の話</li>
<li>Ruby 2.5 の新機能の話</li>
<li>右代入についても話題になっている</li>
<li>感想: もっと「Rubyを」いじってね、ということだと思った</li>
<li><a href="https://codeiq.jp/magazine/2017/09/53932/">Rubyのなかを覗いてみよう！「Cookpad Ruby Hack Challenge」に参加してみた</a></li>
<li><p><a href="https://github.com/ko1/rubyhackchallenge">https://github.com/ko1/rubyhackchallenge</a></p></li>
<li><p>GitPitch というのを使ってスライドを作っている</p></li>
<li><a href="https://github.com/urimaro/79th_workshop_1">https://github.com/urimaro/79th_workshop_1</a></li>
<li><a href="https://gitpitch.com/urimaro/79th_workshop_1">https://gitpitch.com/urimaro/79th_workshop_1</a></li>
<li><a href="https://github.com/urimaro/79th_workshop_2">https://github.com/urimaro/79th_workshop_2</a></li>
<li><p><a href="https://gitpitch.com/urimaro/79th_workshop_2">https://gitpitch.com/urimaro/79th_workshop_2</a></p></li>
<li><p>Matz のキーノート</p></li>
<li>概要: module について</li>
<li>RubyKaigi について</li>
<li>RubyConf より大きい</li>
<li>module の話</li>
<li>単一継承</li>
<li>多重継承 (C3アルゴリズム)</li>
<li>Mixin の話</li>
<li>module の使われ方</li>
<li>Mixin 以外の使われ方もするようになった</li>
<li>namespace とか</li>
<li>alias method chain は2回呼び出すと壊れる</li>
<li><code>Module#prepend</code> の登場</li>
<li>CLOS の method combination が実現できる</li>
<li>aspect 指向プログラミングを実現できる</li>
<li>refinements</li>
<li>Structural signature</li>
<li>質疑応答</li>
<li>prepend は外せないという話があったが include も外せない? → たぶん外せない</li>
<li>Rails の concern と helper の使い分け? → まだ helper の方がよく使われていて concern はそんなに使われていない?</li>
</ul>


<h2><a href="https://qiita.com/yuyakato">Kato Yuya</a> さん</h2>

<ul>
<li>概要: zeromq, GitHub, ハードウェア工作</li>
<li>GitHub の private repo の issues で色々管理している</li>
<li>ベッド型体重計: 9月にベッドを買い直したのをきっかけに再度挑戦開始</li>
<li>zeromq というライブラリの紹介</li>
<li>コネクションの方向と中身の通信の方向の自由度が高い (Pub-Sub のどちらからの接続開始でも良いなど)</li>
<li>zeromq は対応言語が多いので言語の勉強にもおすすめ</li>
<li>Pub-Sub とかも簡単にかける</li>
<li>ロードセル専用のアンプモジュールが安価に手に入るようになった</li>
<li>水のペットボトルで校正</li>
<li>校正は大変なので、体重計はよくできているなあと感じた</li>
<li>GitHub 上で 3D データもプレビューできる</li>
<li>UDP のデータを zeromq に流すのに久しぶりに ruby を書いた</li>
<li><p>後の処理はデータ処理の都合により python</p></li>
<li><p>質疑応答</p></li>
<li>製品化はしないんですか? → 製品化する予定はない。情報は全部公開する予定</li>
<li>pycall は使わない? → 無理に ruby にする必要はなさそう</li>
<li>ruby だとターミナルで作業することが多いが python だと jupyter で完結することが多いと感じているがどうか? → テストコードを書くような部品化できる部分は別ファイルにする、適材適所で使っている</li>
</ul>


<h2>Ruby初級者向けレッスン 63回 ─ Array と Hash</h2>

<p>今回は初心者の人も多かったようです。</p>

<h2>RubyKaigi 2017 のノベルティプレゼント</h2>

<p>トートバッグなどの RubyKaigi 2017 の入り口で配布していたノベルティの一部を、今年もRuby関西のスタッフの人があらかじめいくつかもらってきていたのをプレゼントしていました。</p>

<p>トートバッグは、広島なので瀬戸内海と四国が見えてるようなデザインなのかなと思っていたら <a href="https://twitter.com/is8r_/status/909752063323754496">https://twitter.com/is8r_/status/909752063323754496</a> ということだったらしいです。
プレゼントの時にこのヒントを紹介しようかと思っていたら、時間がなかったので、できませんでした。</p>

<h2>感想</h2>

<p>今回は、本当に開催するかどうかを RubyKaigi 2017 の会期中に相談するなど、最終的な開催の決定から開催までの時間が短かったからか、いつもと比べて参加人数は少なめでしたが、初参加の人や初心者の人が多かったので、開催して非常によかったと思いました。</p>

<p>発表内容も事前発表していたもの以外は RubyKaigi 2017 の振り返りをのんびりやって終わるのかなと思っていたら、当日発表者を募集したら3名も発表してくれる人が出てきて、時間が足りないぐらいになっていました。</p>

<p>だいたい2ヶ月ごとに開催されていますが、次回は12月に開催されるかどうかはまだ未定なので、来年になるかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Developers Meetup #5 大阪会場に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-28-railsdm.html"/>
    <updated>2017-09-28T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/railsdm</id>
    <content type="html"><![CDATA[<p><a href="https://techplay.jp/event/631423">Rails Developers Meetup #5 大阪会場</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>前回と同じ場所なので、スムーズに到着することができました。</p>

<p>今回は、ストリーミングの問題なのか、聞き取りにくいことが多かったので、特に質疑応答はメモが取れていません。</p>

<h2>オープニング</h2>

<ul>
<li>会場の説明</li>
<li>ハッシュタグは <code>#railsdm</code></li>
<li>プログラムの紹介</li>
</ul>


<h2>Railsで日報共有アプリケーションをOSSとして開発している話</h2>

<ul>
<li><p><a href="https://speakerdeck.com/kami/railsderi-bao-gong-you-apurikesiyonwoosstositekai-fa-siteiruhua">https://speakerdeck.com/kami/railsderi-bao-gong-you-apurikesiyonwoosstositekai-fa-siteiruhua</a></p></li>
<li><p>Rails で SPA の事例</p></li>
<li>Repost という日報共有アプリケーション <a href="https://github.com/kami-zh/repost">https://github.com/kami-zh/repost</a></li>
<li>Slack 連携部分を例に説明</li>
<li>View → Action → API → Reducer → View</li>
<li><p>Mastodon の app/javascript や package.json も参考になる</p></li>
<li><p>Rails 5.1 での機能をどう使ったか</p></li>
<li>webpacker</li>
<li>rails new するときに &ndash;webpack=react をつける</li>
<li>必要に応じて yarn add</li>
<li>開発時は bin/webpack-dev-server</li>
<li>webpacker 3 系は多くの設定がライブラリ側に吸収されてアプリケーション側はシンプルにできる</li>
<li><code>javascript_pack_tag</code></li>
<li>Rails 5.1 から yarn をサポート</li>
<li>yarn は install / add / remove ぐらいを知っておけば良い</li>
<li><code>ActionDispatch::SystemTestCase</code></li>
<li>トランザクション管理をしてくれる</li>
<li><p>参考: <code>Minitest::Retry</code> がちょっと不安定なテストに便利 <a href="https://github.com/y-yagi/minitest-retry">https://github.com/y-yagi/minitest-retry</a></p></li>
<li><p>工夫したこと</p></li>
<li>ユニットテストと E2E テストをしっかり書いた</li>
<li>Sprockets は削除した</li>
<li>セットアップを楽にする: bin/setup, bin/update をメンテナンスする</li>
<li>モーダルは慎重に導入する</li>
<li><a href="https://github.com/rails/rails/pull/30614">Install JavaScript dependencies on bin/update</a></li>
<li><p>Rails の資産を活用する: Turbolinks や FormHelper など</p></li>
<li><p>余談</p></li>
<li><p>知識欲求駆動開発</p></li>
<li><p>質疑応答</p></li>
<li>webpack-dev-server との同時起動に foreman は使っていない</li>
<li>react は使ってよかった感じ</li>
<li>react, vue, angular などから react を選んだ理由は? → 使ってみたかったから</li>
</ul>


<h2>パフォーマンス計測CIサービスを作って得た知見</h2>

<ul>
<li><p><a href="https://www.slideshare.net/zaruhiroyukisakuraba/ci-80250430">https://www.slideshare.net/zaruhiroyukisakuraba/ci-80250430</a></p></li>
<li><p>個人で開発しているパフォーマンス計測をする CI サービス</p></li>
<li><p>現在は Rails のみサポート、プライベートベータ</p></li>
<li><p>OAuth Apps と GitHub Apps の違い</p></li>
<li>OAuth Apps (従来のもの) ユーザーに対してインストール</li>
<li>GitHub Apps はリポジトリに対してインストール、マーケットプレイスに出せる</li>
<li>コメントもユーザーとしてか、独自権限にできるかの違いがある</li>
<li><p>マーケットプレイスに出す条件はちょっと厳しい (250人以上にインストールされていることとか)</p></li>
<li><p>GitHub Apps を作るのは簡単</p></li>
<li>アクセストークンと API</li>
<li>JWT の expire に注意: 10分や8分だとうまくいかないことがあったので5分にした</li>
<li>取得できるユーザー情報は限定的</li>
<li>GitHub Apps の API は少しずつ解放されている</li>
<li><p>GitHub Enterprise ではまだ使えないかも</p></li>
<li><p>GitHub Apps で気をつけるところ</p></li>
<li>Webhook を取りこぼすとデータロスト</li>
<li>パーミッションの変更はなるべくしない: ユーザーに承認してもらう必要があるがわかりにくい</li>
<li>GitHub Apps のインストールの導線: インストール後がわかりにくいらしい</li>
<li><p>ローカルで webhook を受け取る方法: ngrok は無料だと起動のたびにホスト名が変わるので面倒、ポートフォワーディングをしている</p></li>
<li><p>Docker in Docker</p></li>
<li>privileged オプションが必要</li>
<li>良い点: 階層構造なので管理しやすい</li>
<li>悪い点: パフォーマンス, privileged オプションで怖い, ボリュームが残ってしまう</li>
<li><p>そもそも製作者自身があまり推奨していない</p></li>
<li><p><code>/var/lib/docker.sock</code> を共有</p></li>
<li>良い点: シンプル, ビルドキャッシュも簡単</li>
<li>悪い点: 他のコンテナが丸見え</li>
<li><p>内部利用限定なら良いかも</p></li>
<li><p>オーケストレーション</p></li>
<li>GKE + k8s</li>
<li><p>小規模/シンプルなら Heroku おすすめ</p></li>
<li><p>CI, 計測の仕方</p></li>
<li>CI サービスを作るのに使った小技</li>
<li>resources をちゃんと指定しないとパフォーマンスがぶれる</li>
<li><p>Container Builder のローカル開発環境がある <a href="https://github.com/GoogleCloudPlatform/container-builder-local">https://github.com/GoogleCloudPlatform/container-builder-local</a></p></li>
<li><p>個人開発プロジェクトについて</p></li>
<li>毎日やるのが大事</li>
<li>コードを捨てるのを躊躇しない</li>
<li>何のためにやるのか</li>
<li>途中経過も公開する</li>
<li><p>やらないことを決める</p></li>
<li><p>質疑応答</p></li>
<li>個人開発でも k8s を使っている? → 使っている</li>
<li>heroku ではなく k8s を使う理由 → docker のため</li>
<li>(メモ取れず)</li>
</ul>


<h2>休憩</h2>

<h2>マイクロサービスにおける非同期アーキテクチャ</h2>

<ul>
<li><p><a href="https://www.slideshare.net/ota42y/ss-80254350">https://www.slideshare.net/ota42y/ss-80254350</a></p></li>
<li><p>microservice</p></li>
<li>外から見たときは一つのアプリ</li>
<li>内部的にはドメインごとに別々のサーバー</li>
<li>API で連携</li>
<li>非同期もある</li>
<li><p>巨大かつ複雑になりやすい → 知見</p></li>
<li><p>非同期処理</p></li>
<li>今回は特に Job Queue の話</li>
<li><p>ActiveJob は Rails 標準なので一般的な構成のはず</p></li>
<li><p>歴史</p></li>
<li>牧歌的時代: なんでも delayed_job に突っ込む</li>
<li>RDB に保存する</li>
<li>delay メソッドを挟むだけ</li>
<li>障害発生: job がどんどん溜まっていった</li>
<li>delayed_job では job の同時実行を防ぐ機構がある</li>
<li>index がきかない where 句の絞り込み＆ソート → テーブルロック</li>
<li>処理速度 ＜ 増加速度 になって打つ手がなくなる</li>
<li>大移行時代</li>
<li>非同期処理の整理</li>
<li>巨大な処理はクリティカルかどうかで場合分け</li>
<li>重要度に応じて処理分け</li>
<li>クリティカルではないものは別バックエンドへ移動して delayed_job の job 数を減らした</li>
<li>移行先として sidekiq, resque から sidekiq を選んだ</li>
<li><p>クリティカルではないものは delayed_job から ActiveJob(+sidekiq) に書き換え</p></li>
<li><p>複数サービスへの連携</p></li>
<li>結合度が高かった</li>
<li>イベント駆動アーキテクチャ</li>
<li>Event の送受信に変更</li>
<li>具体的には AWS の SNS (Simple Notification Service) と SQS (Simple Queue Service) を利用</li>
<li>送信側が SNS で受信側のサービスごとに SQS</li>
<li>癖があるので注意: 複数回や並列実行を考慮して、べき等である必要がある、など</li>
<li>統一フォーマットが必要</li>
<li>移行するなら、送信側・受信側両方移行する必要がある</li>
<li><p>楽にするための gem を作った <a href="https://github.com/ota42y/rising_dragon">https://github.com/ota42y/rising_dragon</a></p></li>
<li><p>質疑応答</p></li>
<li>Queue をどうわけているか? → ほとんどわけていない</li>
</ul>


<h2>5000兆人欲しい！ 優秀なRailsエンジニアを採用するための3つ(仮)の方法</h2>

<ul>
<li>日本の Rails エンジニアの数は推定10万人ぐらい?</li>
<li>世界中の人の数 74億人</li>
<li><code>'74億人' &gt; '5000兆人' #=&gt; true</code></li>
<li>制限を外す</li>
<li>Rails 経験者にこだわらない</li>
<li>日本人にこだわらない</li>
<li>エンジニアにこだわらない</li>
</ul>


<h2>Railsを6年間やってきたぼくが最近Railsでハマったこと</h2>

<ul>
<li><a href="https://speakerdeck.com/kazumax1218/railswo6nian-jian-yatutekitabokugazui-jin-railsdehamatutakoto">https://speakerdeck.com/kazumax1218/railswo6nian-jian-yatutekitabokugazui-jin-railsdehamatutakoto</a></li>
<li>1: カラム追加時に index がはられない</li>
<li><code>add_column</code> には index オプションがなかった</li>
<li>対策: <code>add_index</code> を使う</li>
<li>2: try</li>
<li>メソッドがない場合 (typo など) も例外を出さずに nil を返す</li>
<li>対策: <code>try!</code> を使うか ruby 2.3 以降ならぼっち演算子 <code>&amp;.</code> を使う</li>
<li>3: fragment cache</li>
<li>共通のパーシャルを変更してもキャッシュがクリアされない</li>
<li>template が見つからないのでダイジェストが計算できていなかった</li>
<li>対策: パスを省略しない</li>
<li>パーシャルのパスが動的な場合も注意</li>
<li>プチ情報</li>
<li>Rails 5 からは <code>rails dev:cache</code> で簡単にキャッシュの ON/OFF を切り替えられるようになった</li>
<li>fragment cache のログを出す設定がある</li>
<li>4: 新規作成画面に戻ったら作成したはずのレコードが消えた</li>
<li>原因: <code>has_one</code> に <code>dependent: :destroy</code> がついていると <code>build_xxx</code> 時にレコードが削除される</li>
<li>対策: new アクションで <code>build_xxx</code> を使わない</li>
</ul>


<h2>次回予告</h2>

<ul>
<li>次回 10/19: <a href="https://techplay.jp/event/631425">東京</a>, <a href="https://techplay.jp/event/631426">大阪</a>, <a href="https://techplay.jp/event/631427">リモート</a></li>
<li><a href="https://techplay.jp/event/631431">2017/12/09（土） 13:00 開催 の Rails Developers Meetup 2017</a>, <a href="https://techplay.jp/event/636560">大阪</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developers.IO 2017 WORLD in 大阪 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-23-cmdevio2017.html"/>
    <updated>2017-09-23T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/cmdevio2017</id>
    <content type="html"><![CDATA[<p><a href="http://dev.classmethod.jp/news/developers-io-2017-world-osaka/">Developers.IO 2017 WORLD in 大阪</a> に参加したので、そのメモです。
主に OAuth の話が気になったので行ってみたのですが、他の話もおもしろかったです。</p>

<p>ハッシュタグは <code>#cmdevio2017</code> でした。</p>

<!--more-->


<h2>会場</h2>

<p>スカイビルのタワーウエストは初めて入った気がします。(イーストの方は映画館があるので、そこまでは行ったことがありました。)</p>

<h2>ごあいさつと会場の説明</h2>

<p>スカイビルの場所がわかりにくくて迷った話とか、 Developers.IO の東京で複数トラックでやっていたもののうち、アンケートで評判が良かったものを各地を回ってやっている話とかがありました。</p>

<h2>クラメソの請求を支える技術（サーバーレス編）</h2>

<ul>
<li>会場アンケート: 20代, 30代, 40代で3分の1ずつぐらい?</li>
<li>自己紹介<!-- @czkuk --></li>
<li>刷新の経緯</li>
<li>請求書が毎月300枚になってつらい</li>
<li>請求システムを刷新した話</li>
<li>新システムのポイント</li>
<li>データの一元管理</li>
<li>API, OAuth 2.0</li>
<li>Python simple_salesforce</li>
<li>MFクラウド請求で CSV フォーマットが変更されるということがあったので、ベータが提供されていた API に乗り換えた</li>
<li>OAuth 2.0 のクライアントとしての利用は簡単</li>
<li>Problem: Salesforce 24時間API呼び出し上限</li>
<li>更新がわからないので、全部のデータに対して API を呼び出したら、あっという間に上限に</li>
<li>Solved: S3 ETag</li>
<li>登録できた JSON ファイルは S3 にキャッシュ</li>
<li>変更のみを登録できるようになって解決</li>
<li>とある運用担当者の訴え: 「絶対にサーバーは管理したくないでござる」</li>
<li>Problem: 処理に時間がかる</li>
<li>Lambda は5分で強制タイムアウトがある</li>
<li>Solved: SQS worker Queue</li>
<li>Lambda ログ監視</li>
<li>CloudWatch Logs の Lambda によるログ監視</li>
<li>ログレベルごとに通知先を変えられる log2sns2.yml がオススメ</li>
<li>成功したら請求担当のみ、失敗したら開発者にもとか</li>
<li>AWS 月額利用費 $17</li>
<li>Salesforce について</li>
<li>請求締め部分は外製</li>
<li>visualforce, apex で画面を内製</li>
<li>カバレッジが高くないとリリースできないとか、よくできている</li>
<li>Trailhead で自習</li>
<li>外製? 内製?</li>
<li>仕様が固めやすい部分は外製</li>
<li>画面などトライアンドエラー部分は内製</li>
<li>過度なカスタマイズはしない</li>
<li>業務をパッケージにあわせる</li>
<li>刷新後</li>
<li>半月かかってた請求業務が数時間に</li>
<li>営業への契約確認 → ほぼゼロ</li>
<li>「しがないOL」がJavaプログラマーに</li>
<li>請求システムの話終了</li>
<li>昔話</li>
<li>糊付けエンジニア</li>
<li>「なんでもできる人なんていない」</li>
<li>同じシステムに長く関わっている人は少ない</li>
<li>1年ぐらいが多くて、5年以上は少ない</li>
<li>40歳の生存戦略</li>
<li>半径5メートルの人を幸せにするのが良い</li>
</ul>


<h2>基礎からのOAuth2.0</h2>

<ul>
<li><a href="http://bit.ly/cmdevio2017-oauth2">http://bit.ly/cmdevio2017-oauth2</a></li>
<li>自己紹介<!-- @daisuke_m --></li>
<li>OAuth の動機: 認証、属性取得、委譲</li>
<li>OAuth は認証の委譲プロトコルではなく、認可の委譲プロトコル</li>
<li>認証と認可の基礎知識</li>
<li>認証 (Authentication) : 通信相手が誰か、確認すること。</li>
<li>認可 (Authorization) : リクエストが許可されるかどうかを決めること。(ポリシー定義段階)</li>
<li>厳密には「ポリシー施行段階」は別だが、あまり区別しなくても良い</li>
<li>認証と認可は、本来、相互に独立した概念。</li>
<li>401 Unauthorized : 認証の失敗 『お前誰だよ』</li>
<li>RFC さえ混同しているが、本来は Unauthenticated が正しいのでは。</li>
<li>403 Forbidden : 認可の不足 『理解した。だが断る』</li>
<li>鍵 (key) と錠 (lock)</li>
<li>ユーザーには「鍵 (key)」を与えて、リソースには「錠 (lock)」をかける</li>
<li>認証の委譲 (OpenID Connect)</li>
<li>登場人物: End-User, Relying Party (RP), ID Provider (IdP)</li>
<li>RP=アプリ, ID Provider=TwitterとかFacebookとか</li>
<li>図解</li>
<li>ID Token</li>
<li>JWT (JSON Web Token) (じょっとと読むらしい)</li>
<li>ヘッダ、ペイロード、電子署名 (ID Provider の秘密鍵で署名)</li>
<li>Relying Party が ID Provider の公開鍵で検証</li>
<li>神は誰か? 問題</li>
<li>よくある Web+DBシステム: アプリケーション</li>
<li>API データソースになっても同様</li>
<li>OAuth においては神様はユーザー</li>
<li>だから OAuth は認可の委譲プロトコル</li>
<li>みなさんが OAuth を使いたくないであろう理由</li>
<li>ここから OAuth の話</li>
<li>OAuth 2.0 の登場人物 : Resource owner (RO), Client, Authorization server (AS), Resource server (RS)</li>
<li>例: RO=ユーザー, Client=togetter, ASとRS=twitter</li>
<li>図解</li>
<li>アクセストークン (AT) とは、リソースにかかった「錠」を開ける「鍵」</li>
<li>つまり、鍵に「誰?」を求めてはいけない。</li>
<li>では「OAuth認証」とは一体…?</li>
<li>認証したいだけなのに、渡す権限が大きすぎて怖い。</li>
<li>これを認証の根拠としてよい、という裏付けが弱い。</li>
<li>OAuth 2.0 が成し遂げたいこと (一部)</li>
<li>(リストはメモが取れなかったので公開されている資料参照)</li>
<li>Client が AT を得るフロー 4種</li>
<li>1: Client credentials grant</li>
<li>client id/secret を AT に引き換えるだけ</li>
<li>リソースオーナー不在</li>
<li>ユースケース: 古いスキームに適合。 Twitter の public timeline など。</li>
<li>2: Resource owner password grant</li>
<li>RO のユーザー名とパスワードを AT に引き換えるだけ</li>
<li>ユースケース: 公式クライアント向け</li>
<li>3: Implicit grant</li>
<li>AT がユーザーやブラウザーに見えてしまう</li>
<li>ユースケース: モバイルや JS アプリケーションなど、エンドユーザーの支配下にあるクライアント向け</li>
<li>4: Authorization code grant</li>
<li>フロントチャネル・バックチャネル</li>
<li>3 の場合は AT がフロントチャネルを通るので User Agent に漏れる</li>
<li>4 の場合は AT をフロントチャネルに流さない</li>
<li>最悪 AC は漏れても、単独であればリスクは低い</li>
<li>AC のライフタイムは短い</li>
<li>AC → AT の引き換えには client id/secret が必要</li>
<li>ユースケース: サーバーサイド Web アプリケーション向け</li>
<li>OAuth 2.0 が規定しないこと</li>
<li>1: Resource owner とのインタラクション様式</li>
<li>2: Resource owner の権限及びその確認</li>
<li>よく考えて設計しないと、 User が持っていない権限を Client に与えてしまう</li>
<li>OAuth における「スコープ」とは</li>
<li>User が委譲に同意した権限の種類</li>
<li>Client が行使できる権限の種類ではない</li>
<li>Client が AT を使って行使できる権限 = User が持っている権限と Client が持つ AT のスコープの共通部分</li>
<li>3: アクセストークンに関する諸々</li>
<li>3a: AuthZ server における AT の生成方法</li>
<li>現実的にはランダムか JWT の二択</li>
<li>3b: Client における RS への AT の送り方</li>
<li>3c: Resource server における AT の確認方法</li>
<li>ランダムなら AuthZ server にきくしかない</li>
<li>Sprint Security OAuth 2 独自実装</li>
<li>JWT トークンは revoke しづらい</li>
<li>まとめ</li>
<li>認証と認可の概念</li>
<li>アクセストークンの意味</li>
<li>認可コードの意味</li>
<li>スコープの意味</li>
</ul>


<h2>クラメソのWebサイトを支える技術</h2>

<ul>
<li>自己紹介<!-- @suzryo --></li>
<li>コーポレートサイト 2016年12月にリニューアル</li>
<li>静的ウェブサイトホスティング</li>
<li>AWS</li>
<li>S3: ファイル置き場</li>
<li>Amazon CloudFront: CDN</li>
<li>ACM: SSL の証明書管理</li>
<li>Amazon Route53 (ルートフィフティスリー): クラウドDNS</li>
<li>Amazon Route53 (ALIAS): A レコードと応答、ホスト名の省略 (ZoneApex) 設定可能</li>
<li>Amazon Route53 (ヘルスチェック)</li>
<li>Amazon Route53 (ヘルスチェック+DNSファイルオーバー利用例)</li>
<li>重み付けラウンドロビン (スポットインスタンス活用)</li>
<li>Amazon Route53 (GeoDNS利用例)</li>
<li>Route53ヘルスチェックとDatadog連携</li>
<li>AWSWAF</li>
<li>ステージングの表示制限にも利用</li>
<li>Amazon EC2 (CMS)</li>
<li>WordPress + staticpress</li>
<li>S3 に転送して公開</li>
<li>コーポレートサイト (動的ページ) は SaaS 利用</li>
<li>問い合わせフォーム : kintone + salesforce</li>
<li>サイト内検索: Google カスタム検索エンジン</li>
<li>ブログサイト <a href="http://dev.classmethod.jp/">http://dev.classmethod.jp/</a> 2011年7月1日公開</li>
<li>掲載記事数: 年間約3000件ペース (1日平均8.2件)</li>
<li>初期は EC2 スタンドアローン</li>
<li>Offload S3 導入: 画像データをS3、CloudFront で配信</li>
<li>RDS 導入: MySQL を RDS 化、DB 運用の省力化</li>
<li>ELB, Elasticbeanstalk 導入: ELB 配下で負荷分散、EB で管理改善</li>
<li>nginx 導入: ページキャッシュを追加</li>
<li>ApacheBench</li>
<li>Amazon Aurora 導入</li>
<li>拡張方針: キャッシュを多段化、クラウドの柔軟性を活用</li>
<li>アクセスログの解析</li>
<li>nginx → ltsv → fluentd → Amazon Kinesis Firehose → DB (アイコンでは何かわからず)</li>
<li>Athena</li>
<li>AWS WAF 連携 <a href="http://dev.classmethod.jp/cloud/aws/ids-with-kinesis-waf/">http://dev.classmethod.jp/cloud/aws/ids-with-kinesis-waf/</a></li>
<li>改善計画</li>
<li>評価システム: 執筆者評価, 記事のSNSシェア数</li>
<li>既存評価システム: ページ表示の度にSNS情報取得、再集計</li>
<li>新評価システム: 非同期に取得、S3 の集計済みデータを参照</li>
<li>AWS のマネージドサービス弄り倒してます</li>
<li>個々の詳細はブログにて</li>
<li>SaaS の紹介</li>
<li>Datadog</li>
<li>エラー率とか通知とか</li>
</ul>


<h2>Alexaで変わる開発、変わらない開発</h2>

<ul>
<li>Alexa の概要</li>
<li>Amazon Echo: スマートスピーカー, Alexa の機能を呼び出せる, 米英独など国外で展開中</li>
<li>Amazon Alexa: Amazon が提供する音声アシスタント, Echo という端末が呼び出しているサービス, 標準機能の他に、拡張機能を開発して呼び出せる</li>
<li>Alexa Custom Skill: アプリのように、独自開発のスキルを呼び出せる, 自作エンドポイントを登録して審査に通ればOK</li>
<li>Alexa Voice Service: Alexa のフロント側の規格, アプリにも組み込める</li>
<li>アプリ例: Friendly Voice Assistant</li>
<li>Alexa スキルの開発</li>
<li>サンプル: <a href="https://github.com/alexa/skill-sample-nodejs-highlowgame">https://github.com/alexa/skill-sample-nodejs-highlowgame</a></li>
<li>amazon.com でログイン → Alexa → Alexa Skill Kit で作成</li>
<li>デモ</li>
<li>使うサンプルを <a href="https://github.com/alexa/skill-sample-nodejs-fact">https://github.com/alexa/skill-sample-nodejs-fact</a> に変更</li>
<li>開発者コンソールで文字列でのテスト</li>
<li>APP ID の指定が <code>""</code> で括られていないように見えたけど、一瞬だったので見落としかなと思っていたら、エラーになったので、指摘してみたらやっぱりそこだったようでした。</li>
<li>echosim.io で音声でのテスト</li>
<li>デモ終了</li>
<li>スキルの構成要素: wake word, launch, invocation name, utterance, slot value</li>
<li>画像は <a href="https://developer.amazon.com/designing-for-voice/what-users-say/">https://developer.amazon.com/designing-for-voice/what-users-say/</a> 参照</li>
<li>Utterance をユーザが言うと Intent がプログラムに渡ってくる</li>
<li><a href="https://github.com/alexa/alexa-skills-kit-sdk-for-nodejs">https://github.com/alexa/alexa-skills-kit-sdk-for-nodejs</a></li>
<li>普通の Lambda の開発では webpack は使わないが、Alexa では使った方が良さそう</li>
<li>初回起動時間: 約5秒 → 約2秒</li>
<li>5秒は不安になる</li>
<li>ルーティング機能がプラットフォーム側</li>
<li>Lambda はステートレスだが、Skill が State を提供していて、会話を実現している</li>
<li>視覚表現はある?</li>
<li>Echo Show にはカードというのがある</li>
<li>HTML っぽいのは何?</li>
<li>SSML</li>
</ul>


<h2>感想</h2>

<p>知り合いが一人もいない勉強会に参加したのは久しぶりのような気がしました。</p>

<p>鍵と錠のたとえとか、 OAuth 2.0 が成し遂げたいことを元に複数フローで何ができていて、何ができていないのかなど、非常にわかりやすくて良かったです。</p>

<p>Salesforce も連携する何かを作るかもしれないので、 Trailhead というものの存在を知れたのは良かったです。</p>

<p>自社サイトを例にして Amazon のサービスの運用例を知れたのもおもしろかったです。</p>

<p>Alexa はそういうものもあるのか、とか、会話にするのは技術的な難しさよりもただ大変そう、という感じでおもしろかったです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2017 の3日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-20-rubykaigi2017.html"/>
    <updated>2017-09-20T09:59:32+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi2017</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2017">RubyKaigi 2017</a> の3日目に参加したので、そのメモです。</p>

<!--more-->


<h2>朝</h2>

<p>時間があれば広島平和記念資料館に行こうかと思っていましたが、宿を出るのが遅くなってしまって時間がなかったので行けませんでした。</p>

<h2>Compacting GC in MRI</h2>

<ul>
<li>自己紹介</li>
<li>草生える の英語解説で有名になった</li>
<li>Copy on Write Optimization</li>
<li><code>require 'objspace'</code> と <code>ObjectSpace.memsize_of(obj)</code> で CoW の確認</li>
<li>fork と CoW</li>
<li>CoW Page Fault</li>
<li>Unicorn での話</li>
<li>Page Fault を減らす方法</li>
<li>共有メモリの変更が原因</li>
<li>Garbage Collector の影響</li>
<li>Object Allocation</li>
<li>空きがあるとオブジェクトのサイズは OS のページより小さいので、1オブジェクトの生成でもページ全体のコピーが発生するのでコンパクションする</li>
<li>Two Finger Compaction (2本指コンパクション) というアルゴリズムを選んだ</li>
<li>欠点: 遅い、オブジェクトがランダムな場所に移動する</li>
<li>利点: 簡単!</li>
<li>アルゴリズム: オブジェクトの移動をして、参照の更新</li>
<li>Free Pointer と Scan Pointer で左右からみていってオブジェクトを左に空きを右に固まるように交換していく</li>
<li>オブジェクトを順番に見ていって参照を更新</li>
<li>移動先番号にしていたところを空きに変更</li>
<li>unicorn の fork 前に rails の読み込みと GC.start をするようにした</li>
<li>gc.c への変更の詳細解説</li>
<li>C 実装されている中にオブジェクトへのポインターを持っていると更新できないので、移動するとクラッシュする</li>
<li>そのため、そういうオブジェクトは移動しないようにピン留めしておく</li>
<li><code>hash_key(オブジェクト)</code> がメモリアドレスなので、移動できない</li>
<li>Dual References</li>
<li>C と Ruby の両方から参照されている場合も移動するとクラッシュする</li>
<li>グローバル変数もヒューリスティックスにピン留めする</li>
<li>文字列リテラル</li>
<li>リテラルを移動すると bytecode を変更する必要があるが、難しいのでまだ対応していない</li>
<li>結局何も移動できない?</li>
<li>ほとんどの問題は解決できる</li>
<li>現在使用中の Rails のコードでも 46% のオブジェクトは移動可能</li>
<li>コンパクション前後のグラフ</li>
<li>メモリ検査ツール</li>
<li><code>ObjectSpace.dump_all</code> : JSON でファイルに書き出せる</li>
<li>ヒープの断片化のグラフ</li>
<li><code>/proc/${PID}/smaps</code> はスキップ</li>
<li>まとめ</li>
<li>小さいプログラムにはあまり節約にならないのでプロダクションでテスト中</li>
<li>コンパクションは不可能だと思っていたが、その質問に答えることができなかったので、もっと早く試せばよかったと思った</li>
<li>不可能と思っても可能かもしれない</li>
</ul>


<h2>Irb 20th anniversary memorial session: Reish and Irb2</h2>

<ul>
<li>勝手に20周年記念講演</li>
<li>ちょっと irb の話と Reish の話をする</li>
<li>Ruby 考古学の復習と追加の話</li>
<li>irb の昔の名前の rbc の由来は bc コマンド</li>
<li>他に perl -de 0 や sample/eval.rb が開発のきっかけ</li>
<li>REPL (Read-Eval-Print-Loop)</li>
<li>Lisp の <code>(loop (print (eval (read))))</code></li>
<li>Ruby 的には <code>loop{p eval gets}</code></li>
<li>複雑な構文の言語では初ではないか</li>
<li>REPL の用途</li>
<li>Ruby の振る舞いを確かめる</li>
<li>ライブラリなどのデバッグ用コンソール</li>
<li>情報科学入門 Rubyを使って学ぶ という本では irb を使っているらしい</li>
<li>しかし irb 上で生活している人はいなさそう</li>
<li>そこで Reish</li>
<li>shell の上でも ruby 的な生活を満喫するため</li>
<li>Enumerable, Iterator (たぶん今ではブロックと呼ばれるもの全般をさしてそう), OO, ほか</li>
<li>何がシェルっぽいか: comma なし <code>""</code> とかなくても良い文字列ベース</li>
<li>Reish のコードは Ruby に変換して実行</li>
<li>パイプラインは lazy enumerator で繋がっている</li>
<li>ブロックも使えるが do を予約語にはしにくかったので <code>ls -l --do</code> という感じになっている (<code>{}</code> は普通)</li>
<li>デモ</li>
<li><a href="https://github.com/keiju/reish">https://github.com/keiju/reish</a></li>
<li>job コントロールもある</li>
<li>job ごとに Thread を起動している</li>
<li>補完</li>
<li>irb 再考</li>
<li>長い間開発は停止していたが Reish の開発で irb の方も構想が見えてきた</li>
<li>irb の lexer は使っている gem があるので、大幅に変更は難しそう</li>
<li>Reish は完全なパーサーを持っていて、高機能なことができている</li>
<li>irb2 = reirb ?</li>
<li>zsh の <code>ls --a[TAB]</code> で出てくるヘルプのようなことができるとうれしそう</li>
<li>zsh は 複数行の編集機能 (zle) があったり</li>
<li>Reish 用のマルチラインエディタ Reidline を開発中</li>
<li>Q(次の時間の発表者のaycabtaさん) メモ取れず</li>
</ul>


<h2>昼休み</h2>

<p>途中の時間でセッションを諦めて見にいくのは難しいかなと思って、コンビニで軽く食事をして、広島平和記念資料館に行ってきました。(Twitter で RubyKaigi 2017 の名札を見せると無料で入れるという情報があったため)</p>

<p>本館はリニューアル工事中で、東館だけが開いているということのようでした。</p>

<p>小学校の修学旅行できた覚えがあるのですが、最初の上の階をぐるっと見て回る常設展示は最近の情報もあって、昔来た時には絶対なかったものだなあと思いつつ見ていました。</p>

<p>最後に階段を降りた後にあった企画展示室のところは、昔トラウマになった白黒写真などが少しありました。もらったパンフレットには、閉館中の本館で展示していた資料などを展示していると書いてあるので、本館が復活すれば、昔見たようなものがたくさんあるのではないかと思いました。</p>

<h2>Ruby Parser In IRB 20th Anniversary&hellip;Now Let Time Resume</h2>

<ul>
<li><a href="https://bugs.ruby-lang.org/issues/11389">https://bugs.ruby-lang.org/issues/11389</a></li>
<li>asakusa.rb とか</li>
<li>IRB: 1997, RDoc: 2003</li>
<li>RDoc は IRB の lexical analyser を使っていた</li>
<li>legacy になってしまってメンテナンスコストが増大していた</li>
<li>private def foo のような書き方の対応とか</li>
<li>IRB: 1997, RDoc: 2003, Ripper: 2004</li>
<li>parse.y, IRB, RDoc の3個の Ruby パーサーが重複して含まれている</li>
<li>2016年12月から作業開始</li>
<li>RDoc がクラッシュしたので直した</li>
<li>古い実装と書き直した実装で出力を比べて見たら、 RDoc がバグっていたので古い lexer で新しいものに対応した</li>
<li>最終的にマージされた</li>
<li>後置 if と普通の if の区別などに <code>lex_state</code> が重要</li>
<li><a href="https://github.com/ruby/rdoc/pull/512">https://github.com/ruby/rdoc/pull/512</a></li>
<li>RDoc 6 beta</li>
<li>質疑応答 (翻訳は zzak)</li>
<li>Q(ujm): <code>lex_state</code> を古い ripper では pure ruby で実装したのはどうやったみたいな質問っぽい → メモ取れず</li>
<li>Q(かねこさん): ripper は使っているバージョンの ruby で動くので、古い ruby バージョンのドキュメントを処理すると問題が起きることもあるのでは? → 壊れることもあるかもしれないが、大丈夫なのではないかという感じ(?)</li>
<li>Q(tenderlove): ripper はコード内のコメントを保存していますか? → AST の段階ではコメントは含まれないが、tokenize しかしていないので、開始、中身の謎の文字列、終端のようになって、中が何を意味するかには踏み込まないので、情報が消えたりはしない。</li>
<li>Q(ujm): RDoc は既存のものと互換性があるように ripper に置き換えたが次は何に挑戦する予定? → Ruby コードの情報をとるライブラリ、 irb の TAB キーでの補完でドキュメント (RDoc) も出るようにしたい</li>
<li>Q: irb のパーサーをどうにかする予定は? → nobu が ripper に置き換えようとしたが諦めた。多分できそうだが、大変そう。メソッドドキュメントの表示をしたい。</li>
<li>nobu の irb は syntax highlight がついていた。</li>
<li>syntax highlight もやりたい。</li>
<li>Q: Cのファイルのドキュメントは? → 今回の変更とは無関係。</li>
<li>C extension のドキュメントの方も必要に応じてみた方が良いのかもしれないが、まだ見ていない。</li>
<li>Q(ujm): 6ページあった修正点の中からピックアップするなら? → legacy な lexer で、新しい ruby syntax のサポートが大変だった</li>
<li>テストが壊れた</li>
<li>Q: 聞き取れず → 答えられない</li>
<li>Q: 1日どれくらいやっている? → 1ヶ月ぐらい、1日16時間?</li>
</ul>


<h2>一回休み</h2>

<p>セッションは諦めて休憩していました。</p>

<h2>Writing Lint for Ruby</h2>

<ul>
<li>SideCI</li>
<li>Lint ツール: RuboCop, Reek, Brakeman, Querly, &hellip;</li>
<li>Rules of Lint, Lint tools をかけるようになることがこのプレゼンの目標</li>
<li>lint tool があればより安全にプログラムが作れるようになる</li>
<li>Lint とは何か?</li>
<li>もともと C 言語用のツールの名前だったが、今ではいろんな言語にある</li>
<li>RuboCop の例を紹介</li>
<li><code>if 10 &lt; x &lt; 20</code> は実行するとエラー</li>
<li><code>foo bar { body }</code> や <code>x *y</code> は曖昧</li>
<li>そういうコードをチェックする</li>
<li>どう動くか?</li>
<li>AST (Abstract Syntax Tree) で扱う</li>
<li>parser gem を使って AST に変換している</li>
<li>parser gem の AST の node は type と children を持つ</li>
<li>行、桁、ソースなどのメタデータも持っている</li>
<li>他のパーサー</li>
<li>Ripper は標準で含まれているが、パースで想定するバージョンと実行する ruby のバージョンが同じになってしまう</li>
<li>ruby 2.4 で ruby 2.0.0 の lint ができない</li>
<li>ruby_parser は使ったことがないが parser gem と似たような感じらしい</li>
<li>Traverser: Depth-first search をして node ごとに <code>on_send</code> などの <code>on_#{node.type}</code> を呼び出す</li>
<li>if の条件に Integer リテラルのみを直接書いた場合に警告を出す例</li>
<li>Lint の限界 (Ruby の場合)</li>
<li>ローカル変数はただの変数</li>
<li><code>num = 1; if num; something; end</code> のようなコードは対象外</li>
<li>不可能ではないが複雑になる: たとえば Brakeman では追跡している</li>
<li>メソッドの定義やクラスや定数が正確にはわからない</li>
<li><code>sprintf('%s, %s', str)</code> は警告されるが <code>sprintf</code> が再定義されていると意味がない可能性があるが、そんなことはしないだろうと想定して動いている</li>
<li>動的なものは Lint より Test の方が向いている</li>
<li>Lint は AST がわかる</li>
<li>Lint は実行せずに解析できる</li>
<li>トレードオフがある</li>
<li>RuboCop に cop (ルール) を追加する</li>
<li>汎用的なものはヘルパーメソッドがあるので書きやすい: <code>if 1 ; end</code>, <code>ruby -cw</code> のようなもの</li>
<li>デモ: <code>rake new_cop[Lint/LitInCond]</code></li>
<li>特定のフレームワークに対して追加したい場合</li>
<li>RuboCop Plugin としてかける</li>
<li>例: backus/rubocop-rspec</li>
<li>1から作る場合</li>
<li>たとえば Lint + Git Diff, Ruby + YAML 用など</li>
<li>新しく作った方が作りやすい</li>
<li>質疑応答</li>
<li>Q: sprintf の再定義のような <code>Kernel</code> に再定義しているのを検出する cop は? → ない。ある程度は作れそう。本体には入りそうにない。</li>
<li>Q: デフォルト false では? → デフォルト false のものはメンテされないという現実があるので入れたくない。</li>
<li>Q(mame): RuboCop のゴールは? <code>10 &lt; x &lt; 20</code> のような初心者が陥りがちなものだけではなく、コーディングスタイルを押し付けられる感じがある? → 二面性がある。スタイルチェッカーと Lint としての側面がある。どっちも増えそう。</li>
<li>アップデートが辛い問題はツールを作っている。Style 系をオフにするとか。</li>
<li>Q: 汎用的なもののようにみえるが、プロジェクト固有のものはどうすれば? → 自社用のプラグインを作る or soutaro さんが作っている YAML でかくものがあるのでそれを使う のが良いのではないか</li>
<li>Q: カスタムコップを作りたい場合のドキュメントがなさそうな理由は? → 現状カスタムコップ、プラグインを作る仕組みが整備されていない。issue が止まったままなので頑張りたい。</li>
<li>Q: <code>new_cop</code> タスクは stable? → 本体に入っているので大丈夫だが、将来的に変更される可能性はあるかも。</li>
<li>Q: Rails は本体に config が入っているが? → 現状では特にロードマップはない。個人的には rails 関連は外に切り出したい。</li>
<li>Q: 一部は <code>ruby -cw</code> にあった方が良いのでは? → 本体に持っていく動きは今のところない。<code>ruby -cw</code> とかぶっているものもある。パフォーマンス的にできるのかというものもある。</li>
<li>Q: メモ取れず → ローカル変数をトレースするのはやりたいが、良い方法を思いついていないので、手がついていない。</li>
<li>Q: 速度が遅いのが気になっている。 parser gem が遅いのではないか。バージョンをわけたいという希望はないので ripper で高速化できないか? → ライブラリの CI で困りそう。インターフェースが違うので簡単に移行できない。</li>
<li>Q(znz): feature request の issue を書いたことがあるが、request だけだと難しい? → できるだけ実装するか、無理なら無理と返信したいが、たまっていてなかなか手が回っていない。</li>
</ul>


<h2>How to write synchronization mechanisms for Fiber</h2>

<ul>
<li>dRuby 本まだ買えます</li>
<li>Web 版もあります</li>
<li>Process - Thread - Fiber</li>
<li>80s はプロセスへの憧れがあった</li>
<li>90s のノンプリエンティブな協調型マルチタスクって Fiber じゃん?</li>
<li>実際のシステムは、プロセスだけ隔離しても結局はダメだった</li>
<li>ほかのプロセスとどうにかして共有が必要だった</li>
<li>IPC はめんどくさい</li>
<li>説明や使うのがめんどくさい</li>
<li>Thread: 多くの人にはプロセスの方がいいと思う</li>
<li>ほかのスレッドのメモリを触らないようにものすごく気をつける必要がある</li>
<li>Thread を使うには OS よりうまく扱えるという傲慢さが必要</li>
<li>Fiber: ほとんどの人には Thread の方がいいと思う</li>
<li>Fiber を使うには Ruby よりコンテキストスイッチをうまく扱えるという傲慢さが必要</li>
<li>Fiber → 自動的にスイッチしてよ → Thread → メモリを自動的に保護してよ → Process</li>
<li>Fiber を使ったフレームワークがすごいらしい</li>
<li>Fiber を使うプログラムを自分でも作って見たいと思った</li>
<li>Thread よりも難しいと思ったら、その通りだったので共有したい</li>
<li>Fibonacci の例</li>
<li>ループで書くと簡単</li>
<li>Fiber で書く例 (初日であったような感じ)</li>
<li><code>Fiber.new</code>, <code>Fiber#resume</code>, <code>Fiber.yield</code></li>
<li>new しただけでは実行されない</li>
<li>resume で Fiber にコンテキストを移す</li>
<li>一度目は先頭へ</li>
<li>二度目以降は <code>Fiber.yield</code> したところへ</li>
<li>これは何度目の resume かな…</li>
<li>resume と yield の概念がとっつきにくい</li>
<li>Enumerator で書き直す</li>
<li>おすすめ</li>
<li>次のテーマは同期 (待ち合わせ)</li>
<li>Thread での Queue を介した協調の Fiber 版を書きたい</li>
<li>rendez-vous (Rdv) の実装</li>
<li>イディオム: とりあえず resume、行き詰まったら yield</li>
<li>Fiber.new してすぐに resume すると Thread.new のように使える</li>
<li>やれることがなくなったら yield して Fiber.current を覚えてもらう</li>
<li>実装例: push, pop</li>
<li>Fiber だと条件検査の排他制御が不要</li>
<li>Thread だと危険</li>
<li>動きの例</li>
<li>同期の条件検査に排他制御が入らないので、Fiber のつもりが Thread だったというのは危険なので、Auto Fiber のようなものより、Thread のつもりが Fiber だったの方が安全ではないか</li>
<li>Multiplexer: socket のある例</li>
<li><code>read_nonblock</code> を使う</li>
<li>ブロックしそうな時 (<code>IO::WaitReadable</code>) に yield してメインループに戻る</li>
<li>block-ish nonblock I/O</li>
<li>ライブラリを作った: <a href="https://github.com/seki/bartender">https://github.com/seki/bartender</a></li>
<li>実際のアプリケーション例</li>
<li>tiny_drb の抜粋</li>
<li>昔よく見たバグの話</li>
<li>デモは作って見たが、見てもよくわからなかったので、説明</li>
<li>Multiplexer のまとめ</li>
<li>Fiber 入門のまとめ: 難しいよね</li>
<li>Fiber は難しいところが面白い</li>
<li>全体が暗記できるぐらいのサイズだったので罠を避けられた</li>
<li>すみずみまでわかっていないとハマることがある</li>
<li>ハマる可能性があると覚えておけば大丈夫</li>
<li>例: twitter クライアントの gem が全部読んで String にしてから JSON.parse するのでハマったので、ストリーム対応の JSON.parse はあるのかな?</li>
<li>ハマりそう: RDBMS のドライバ</li>
<li>質疑応答</li>
<li>Q: 読み書きしようとして安直にするとブロックするが、読めるだけ読むのがあるが書く方は? → 書く方もかけるだけ書くというのがある</li>
<li>Q: gets とか使えなくて不便? → 聞き取れず</li>
<li>Q(cuzic): Fiber の方が良いユースケースは? → Enumerator が良い例</li>
<li>Q(cuzic): 外部イテレーターではなく agent のようなパフォーマンスがよくなるという例は? → ゲームのキャラクターを動かすような誰かがビートを刻むような例は良さそう。 I/O は向いてなさそう。 Auto Fiber や co-routine の例をみると良い例があるのかも。</li>
<li>Q(joker): Thread で書いた場合は GIL で1コアでしか動かないが、(聞き取れず)だと別実装だと複数コア使えるとかあるが、Auto Fiber とかだと使えるようになる? → Fiber は Thread の中で動くので無理ではないか</li>
<li>Q(joker): 外部イテレーターにするとか見せ方の変更はできるが、マルチコアでパフォーマンスの改善という用途ではない? → そう理解している</li>
<li>Q: Thread と Fiber は違うのになぜ Fiber という名前なのかという感じの質問っぽい → Windows でそういう名前だから</li>
</ul>


<h2>MEDLEY のスポンサーセッション</h2>

<ul>
<li>会場アンケート</li>
<li>知っている人? → 少ない</li>
<li>昨日呑んだくれて疲れている人? → それなり?</li>
<li>遠隔診療が実質解禁されたので CLINICS というアプリを作った</li>
<li>医療 x IT への挑戦</li>
</ul>


<h2>Towards Ruby 3x3 performance</h2>

<ul>
<li>Ruby 3 performance goal</li>
<li>RTL (register transfer language) insns</li>
<li>RTL insns と stack insns の比較</li>
<li>RTL insns の精製方法</li>
<li>RTL insns のオペランド</li>
<li>RTL complications</li>
<li>RTL insn combing and specialization</li>
<li>Speculative insn generation</li>
<li>RTL insn status and future work</li>
<li>Possible JIT approaches</li>
<li>Option 1: Writing own JIT from scratch</li>
<li>メンテナンスするのが大変</li>
<li>Option 2: Using widely used optimizing compilers</li>
<li>コンパイルが遅い</li>
<li>Option 3: Using existing JITs</li>
<li>License issues and patent minefield</li>
<li>Own or existing JITs vs GCC/LLVM based JITs</li>
<li>How to use GCC/LLVM for implementing JITs</li>
<li>MJIT: <strong>M</strong>RI JIT, <strong>M</strong>ethod JIT</li>
<li>Example</li>
<li>MJIT performance results</li>
<li>どれが何かわからないグラフ</li>
<li>途中からちゃんと下まで出てきた</li>
<li>Recommendations to use GCC/LLVM for a JIT</li>
<li>MJIT status and future directions</li>
<li>RTL と MJIT が MRI の一部になるかはわからないがこの方向性で頑張る</li>
<li>質疑応答</li>
<li>Q(tenderlove): (メモ取れず)</li>
<li>Q: inline 化の話っぽい</li>
<li>Q: メモリ使用量の話っぽい</li>
<li>Q(ujm): make check が通らない理由は? → 並列実行とか callcc とか GC が関わるものとか(?)</li>
<li>Q: モチベーションは? → (よくわからず)</li>
<li>Q(ko1): GCC でループが最適化が測地になる例があったが、再定義対応は? → (よくわからず)</li>
<li>matz のコメント</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>MINASWAN 乙</li>
<li>936枚チケットが売れた</li>
<li>Next: Sendai May 31 (Thu) - June 2 (Sat)</li>
</ul>


<h2>全体の感想</h2>

<p>とりとめもなく色々と。</p>

<p>Twitter で @takatayoshitake さんとかの情報提供が色々と便利でした。(特に最終日のロッカー情報)</p>

<p>Twitter のハッシュタグ <code>#rubykaigi</code> は流れが速いと全然追いきれないので、あとで togetter でみれるかなと思っていたら、今年は特になさそうで残念な思いをしました。
RubyKaigi 全体のハッシュタグも、部屋ごとのハッシュタグも入り口に書いてあっただけで、特にアナウンスはなかった気がするので、部屋ごとのハッシュタグはつけずに <code>#rubykaigi</code> だけのツイートを、その人がどの部屋に参加していたか識別してまとめに振り分ける、という判断をしつつ、まとめを作ってくれる人が必要そうな気がします。</p>

<p>台風が移動に影響したり、カープ優勝でセールがあったりなど、外部要因でもいろんなことがあったのが印象深かったです。</p>

<p>3トラックあったので、興味があったのに見に行けなかったものも多いので、あとでチェックしたいと思いました。</p>

<p>昼の弁当スポンサーがなかった代わりに、夜の懇親会が大量にあったのがよかったです。</p>

<p>LT の発表は通訳の人との打ち合わせがない分、気軽だった代わりに、ちゃんと時間で切られる LT が久しぶりだったので、非常に緊張しました。
そして、実際には練習より早口だったのか、予定よりたくさん喋っても時間が余ってしまうという感じになってしまいました。
ネタが多い分には、後でRuby関西で使うなりブログに書くなり、他の発表場所はあるので、今後機会があれば多めに用意して調整できるようにしてみたい、と思いました。
日本語での発表でも、発表資料は頑張って英語で書いておいたからか、<a href="https://twitter.com/drbrain/status/910069298789588998">英語での反応があった</a>のが嬉しかったです。
基本的に何か反応があると嬉しいものなので(承認欲求)、発表とかしないという人でも、積極的にいいねをしたり、スターをつけたりすると良いと思います。</p>

<p>開催の頭が連休だと、休みの部分を観光に、と思っても、期間中に出て来たオススメ情報を活用できないので、来年のように、後に休みが続く方が嬉しいと思いました。
今回の場合は、台風で日曜に観光は無理だったということがありましたが、広島平和記念資料館に無料で入れるという特典が、前日に知らずに行っていたら無駄になる、ということがおきたのではないかと思いました。</p>

<p>基本的に人を覚えるのが苦手なので、今回会った人で、次回忘れていたらすみません。</p>

<p>Workshop は気になったのと、普通の発表は後で録画をみることもできる、というので、できれば参加したかったのですが、 <a href="https://github.com/rubydata/rubykaigi2017">https://github.com/rubydata/rubykaigi2017</a> の事前準備をしようとしたら、前日に止まっていたホテルだと帯域制限らしき状態になってしまって、 <code>rake docker:pull</code> できなかったということもあって諦めました。
Afternoon Break の時間に重なっていた方も、 LT の前の接続確認をする必要があったので、諦めました。</p>

<p>LT の接続確認は、なぜか最大化したときの表示がリサイズ前の範囲しか表示されない、という現象がなおらず (以前は次のページに移動したり、一覧ページに移動したりすればなおっていた)、発表準備期間中に n0kada さんが rabbit の方に終了時に落ちる (正常終了ではなく SEGV 的な終わり方をする) のを報告していたので、同じ macOS っぽいとわかっていたので、どうしていたのかきいてみたら、 <code>rabbit -S 1920,1080 hoge.md</code> のように <code>-S</code> で画面サイズを指定して起動すれば良いと教えてもらって解決しました。ありがとうございました。</p>

<h2>まとめ</h2>

<p>色々と大変なこともありましたが、大きな問題もなく、無事終わって良い RubyKaigi でした。</p>
]]></content>
  </entry>
  
</feed>
