<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2016-12-10T21:40:30+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mini Debian Conference Japan 2016に参加して発表してきた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-12-10-mini-debian-conference-japan-2016.html"/>
    <updated>2016-12-10T10:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/mini-debian-conference-japan-2016</id>
    <content type="html"><![CDATA[<p><a href="http://miniconf.debian.or.jp/" title="Mini Debian Conference Japan 2016">Mini Debian Conference Japan 2016</a>
に参加して、発表してきました。</p>

<!--more-->


<h2>会場</h2>

<p>前日に東京に移動していたので、余裕がありましたが、
東京駅から近いので、当日移動でも頑張れば間に合いそうな場所でした。</p>

<p>ネットワークはゲスト用の無線があって、接続すると Web 画面が出てきてそこでユーザーとパスワードを入れて認証するという方式でした。</p>

<h2>セッション</h2>

<p>2トラックなので、どちらを聞きに行くのか悩む必要がありました。
さらに午後からは LibreOffice Kaigi 2016.12 も併催なので、さらに悩みました。</p>

<h2>オープニング</h2>

<ul>
<li>DebConf を日本でやりたいので、カンファレンス開催のノウハウをためたい</li>
<li>諸注意で Windows の画面が出てきてブーイング</li>
<li>結局映らなかったので口頭で</li>
<li>自動販売機は使用禁止とか</li>
<li>休憩中の予定説明とか</li>
<li>さっき出てきた DebConf の<a href="https://twitter.com/yasulab/status/807399231107584001">写真</a>のような集合写真撮影があるよとか</li>
<li>機材の関係で最初のセッションは部屋を入れ替え</li>
</ul>


<h2>Open Build Service in Debian</h2>

<ul>
<li>Open Build Service のアーキテクチャの説明</li>
<li>フロントエンドは Rails</li>
<li><a href="https://goo.gl/OSBNqv">https://goo.gl/OSBNqv</a></li>
<li><a href="https://goo.gl/2rNPMx">https://goo.gl/2rNPMx</a></li>
<li>デモはディスクフルで終了</li>
</ul>


<h2>昼食及びPGP/GPGキーサインパーティ</h2>

<p>パスポートを机の上に準備していたのに持ってくるのを忘れてしまっていて、
ID が運転免許証しかなかったので、日本人とだけにしておきました。</p>

<h2>OSS license 101</h2>

<ul>
<li>ライセンスは一部の権利を許諾するもの</li>
<li>著作権の他に特許、商標、契約も関係する</li>
<li>商標の例: &ldquo;Firefox&rdquo; と Iceweasel</li>
<li>契約の例: Red Hat エンタープライズ契約書</li>
<li>「5.2 検査。」という項目がある</li>
<li>ライセンスを選ぶ</li>
<li>目的に合わせて</li>
<li>万能のライセンスはない</li>
<li>ライセンスを独自に作るのはよくない</li>
<li>OSS ライセンスは well-tested library</li>
<li>独自ライセンスは使うときに吟味が必要になるし、互換性も問題になる</li>
<li>コードを書きたい人は既存のライセンスを使ってコードを書いていた方が生産性が高い</li>
<li>Proprietary license vs OSS license</li>
<li>Default deny vs Default allow</li>
<li>Whitelist vs Blacklist</li>
<li>The Open Source Definition (Annotated) <a href="https://opensource.org/osd-annotated/">https://opensource.org/osd-annotated/</a></li>
<li>DFSG-free (OSS), OSI-Certified and fake-OSS</li>
<li>Well-known OSS license</li>
<li>どのライセンスが良いか?</li>
<li>目的と利用方法によって変わる</li>
<li>Copyleft vs Permissive <a href="https://www.gnu.org/licenses/copyleft.ja.html">https://www.gnu.org/licenses/copyleft.ja.html</a></li>
<li>patent-free or not</li>
<li>Domain-specific</li>
<li>OFL,CC,GFDL, etc.</li>
<li>残りの時間はライセンスがらみの雑談</li>
<li>Zstd <a href="https://github.com/facebook/zstd">https://github.com/facebook/zstd</a></li>
<li>BSD-3-clause license However, its &ldquo;PATENTS&rdquo; file says</li>
<li>Zfs (GPL vs CDDL) by Canonical, Ltd.</li>
<li>GPL: Linux &ldquo;T-800&rdquo; issue</li>
<li>第三者はソースコードを請求できない</li>
<li>「Linux で稼働しているターミネーターを掴まえたとしても、そのバイナリの所有権を得たわけではないので、ソースコードは請求できない。」 <a href="https://twitter.com/elim/status/807442658830336001">https://twitter.com/elim/status/807442658830336001</a></li>
</ul>


<h2>Go言語で書かれたソフトウェアをDebianパッケージにする方法</h2>

<ul>
<li><a href="https://twitter.com/tSU_RooT">https://twitter.com/tSU_RooT</a></li>
<li>GPG ID: 63A6 000E</li>
<li>peco の Debian パッケージを入れた人</li>
<li>dh-make-golang</li>
<li>佐々木さんは自分用パッケージを作ったが、メンテナンスするプログラミング言語を増やしたくなかったので公式にはあげなかったらしい</li>
<li>公式に入れるとメリットが多い</li>
<li>公式に入ったっときのデメリットはパッケージメンテナがアップデートに追随してくれないことがある</li>
<li>パッケージに限らない問題</li>
<li>下準備</li>
<li>sid の環境を用意</li>
<li>リポジトリの確認</li>
<li>ソースコードからビルドできるか</li>
<li>ライセンスが付属しているか</li>
<li>go get するだけでビルドできるか</li>
<li>依存ライブラリがすでにパッケージになっているか</li>
<li>依存ライブラリも同じチェック</li>
<li>ライセンスがない場合: issue でお願いする</li>
<li>複雑なビルド手順が必要な場合: debian/rules で頑張る必要がある、今回は対象外</li>
<li>依存ライブラリが多い場合</li>
<li>ライセンス確認</li>
<li>例えば、サンプルに Gopher くんの画像がついていたら debian/copyright に明記する必要あり</li>
<li>pkg-go.alioth.debian.org</li>
<li>パッケージの命名規則がある</li>
<li>fork したリポジトリも別パッケージで問題ない</li>
<li>Go 1.6 で正式導入された vendor ディレクトリの扱いはまだ完全には決まってないっぽい</li>
<li>peco (v0.4.2) での実例</li>
<li>依存パッケージの話</li>
<li><code>apt showsrc golang-go-flags-dev 2&gt;/dev/null | grep Homepage</code> で upstream を確認</li>
<li>古いパッケージで依存なしで消えていたものを復活させた</li>
<li>lintian の警告を消す</li>
<li>debian/copyright を書く</li>
<li>debian/changelog を直す (ITP の番号を埋める、UNRELEASED を unstable に)</li>
<li>debian/control の README から自動で生成された説明文を直す</li>
<li>ライブラリパッケージすべてに行う</li>
<li>バイナリパッケージは man ページも用意する</li>
<li>今回話せなかったこと</li>
<li>参考資料</li>
<li>質疑応答</li>
<li>pristine-tar と git-buildpackage の話</li>
</ul>


<h2>Certbotで無料TLSサーバー</h2>

<p>Certbotで無料TLSサーバーというタイトルで発表しました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/debian-certbot/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/debian-certbot/" title="Certbotで無料TLSサーバー">Certbotで無料TLSサーバー</a>
</div>


<p><a href="https://github.com/sorah/acmesmith">https://github.com/sorah/acmesmith</a> というクライアントもあるらしい。</p>

<p><a href="https://github.com/dokku/dokku-letsencrypt">https://github.com/dokku/dokku-letsencrypt</a> で使っている <code>simp_le</code> は 開発が止まっている ( <a href="https://github.com/kuba/simp_le/issues/114">https://github.com/kuba/simp_le/issues/114</a> )。</p>

<h2>休憩及び集合写真撮影</h2>

<p>集合写真を撮影して、おやつ休憩がありました。</p>

<h2>FOSS バーチャルシンガー 徴音梅林 と LINNE プラットホーム</h2>

<ul>
<li>英語なので頑張って聞いていました。</li>
<li><a href="http://projectmeilin.github.io/ja/">http://projectmeilin.github.io/ja/</a></li>
</ul>


<h2>最近のGnuPG</h2>

<ul>
<li>二ヶ国語でプレゼン</li>
<li>メモリ不足でプレゼンツールがうまく動かないので佐々木さんのマシンに切り替え</li>
<li>Jessie は gnupg パッケージは 1.4 (新しいバージョンは gnupg2 パッケージ)</li>
<li>Stretch は gnupg パッケージは 2.1 (古いバージョンは gnupg1 パッケージ)</li>
<li>GnuPG 2.1?</li>
<li>公開鍵のフォーマットが KBX に変わった。(昔の形式もサポート)</li>
<li>プライベート鍵は gpg-agent が管理するようになった。</li>
<li>gpg, gpg-agent, pinentry, scdaemon, dirmngr, (gpgsm, ssh)</li>
<li>おすすめの使い方</li>
<li>gpg-agent を ssh-agent として使う</li>
<li>Token を使う</li>
<li>Curve25519 を使う (Ed25519/X25519 is more secure, key is small, fast)</li>
<li>キーサインパーティー</li>
<li>WKD: Web key directory</li>
<li>ToFU: Trust On First Use</li>
<li>g13 + dm-crypt</li>
<li>質疑応答</li>
<li>RSA 鍵からの移行</li>
<li>サブキーの追加よりも新規に作るのがおすすめ</li>
<li>gnuk の話</li>
<li>curve25519 サポートしている</li>
<li>楕円曲線暗号は輸出入の規制にひっかかることがある</li>
</ul>


<h2>休憩</h2>

<p>2つの部屋をくっつけて広くなった。</p>

<h2>DebConf 2018 台湾 参加表明準備とステータスの更新</h2>

<ul>
<li>英語なので twitter の <code>#debianjp</code> を参考にして頑張って聞いていました。</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>アンケート: <a href="https://goo.gl/BsPrgA">https://goo.gl/BsPrgA</a></li>
</ul>


<h2>懇親会</h2>

<ul>
<li>LT 大会をやっていました。</li>
<li>全体的にマイクの通りが悪いのか、英語に限らず話が聞き取りにくかったです。</li>
<li>Unicode の <a href="https://ja.wikipedia.org/wiki/%E6%BC%A2%E5%AD%97%E8%A8%98%E8%BF%B0%E8%A8%80%E8%AA%9E#.E6.BC.A2.E5.AD.97.E6.A7.8B.E6.88.90.E8.A8.98.E8.BF.B0.E6.96.87.E5.AD.97.E5.88.97_.28IDS.29" title="漢字構成記述文字列 (Ideographic Description Sequence; IDS)">漢字構成記述文字列 (Ideographic Description Sequence; IDS)</a> ですごい漢字を出しているのとか自作 OS の話とかが印象に残りました。</li>
<li>2回あった自動販売機の話もなかなか面白かったです。 <a href="https://twitter.com/OrientalHistory/status/807530627293593600">https://twitter.com/OrientalHistory/status/807530627293593600</a> <a href="https://twitter.com/OrientalHistory/status/807535513779322880">https://twitter.com/OrientalHistory/status/807535513779322880</a></li>
<li>セッション中は結局 LibreOffice Kaigi 2016.12 の方はいけなかったが、 LibreOffice 側にいた人とも話ができてよかった。</li>
<li>昔の RubyKaigi でセッションがのびたのに別の部屋の次のセッションは始まってしまって、両方見たかった人が最初の方を見逃すということがあって、その後、別の部屋とも同期をとるようになったということがあったのを思い出したのですが、別イベントなので、そこまで同期を取る必要はないにしても、せめてセッションの開始終了予定時刻が同じくらいの時間になっていれば、相互に行き来が発生しやすかったのではないかと思いました。</li>
<li>この話は LibreOffice 側の人にしたのですが、もともとイベントの企画は別々に始まっていて、たまたま会場と日付が一緒だったから合同にしたという流れだったようで、そこまで考えていなかったということのようでした。</li>
</ul>


<h2>まとめ</h2>

<p>k-of.jp で発表者募集を見て応募するまで参加する予定は全くなかったので、
前回会ったのがいつだったか忘れるぐらい久しぶりに会った人もいて、
全体としては楽しかったので、
参加して良かったと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sshでed25519鍵を使うようにした]]></title>
    <link href="http://blog.n-z.jp/blog/2016-12-04-ssh-ed25519.html"/>
    <updated>2016-12-04T14:25:40+09:00</updated>
    <id>http://blog.n-z.jp/blog/ssh-ed25519</id>
    <content type="html"><![CDATA[<p>ssh で使っている鍵が RSA 2048 ビットでちょっと古くなってきているということもあり、
OpenSSH 6.5 で追加された ed25519 鍵に更新することにしました。</p>

<!--more-->


<h2>鍵の種類</h2>

<p><a href="http://jnst.hateblo.jp/entry/2014/12/15/200542" title="GitHubでEd25519鍵をつかう">GitHubでEd25519鍵をつかう</a>
の説明が詳しいですが、他のサイトでも調べた情報によると</p>

<ul>
<li>RSA の 2048 ビットが今の <code>ssh-keygen</code> でのデフォルトなので主流</li>
<li>RSA や ECDSA は <code>ssh-keygen</code> に <code>-b</code> でビット数が指定できる</li>
<li>ECDSA の 521 ビットは 512 の間違いではない</li>
<li>ed25519はビット数が指定出来ない</li>
<li>OpenSSH のssh-keygenは1024bitのDSA鍵しか作れない (<a href="http://d.hatena.ne.jp/hnw/20140705" title="GitHubユーザーのSSH鍵6万個を調べてみた">GitHubユーザーのSSH鍵6万個を調べてみた</a>)</li>
<li>DSA 鍵は弱いので使うべきではない</li>
<li>ed25519はECDSAより署名生成/検証のパフォーマンスが良い</li>
</ul>


<p>などの情報がありました。</p>

<p>ビット数で悩まなくて良いのと、パフォーマンスが良いという情報があったので、
ed25519 を使うことにしました。</p>

<h2>主な環境</h2>

<p>OpenSSH のバージョンは <code>ssh -V</code> で調べました。</p>

<ul>
<li>OS X El Captitan 10.11.6 の OpenSSH_6.9p1, LibreSSL 2.1.8</li>
<li>Ubuntu 14.04.5 LTS (trusty) の OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.8, OpenSSL 1.0.1f 6 Jan 2014</li>
<li>Debian GNU/Linux 8.6 (jessie) の OpenSSH_6.7p1 Debian-5+deb8u3, OpenSSL 1.0.1t  3 May 2016</li>
</ul>


<h2>バージョン情報</h2>

<p>Debian は <a href="https://packages.debian.org/openssh-server">https://packages.debian.org/openssh-server</a> によると wheezy (oldstable) は 1:6.0p1-4+deb7u6 で対応してなさそう (wheezy-backports が 1:6.6p1-4~bpo70+1 なので backports を使えば対応できそう) で、
jessie (stable) は 1:6.7p1-5+deb8u3 なので、今の安定版以降なら問題なく ed25519 が使えそうです。</p>

<p>Ubuntu は <a href="http://packages.ubuntu.com/openssh-server">http://packages.ubuntu.com/openssh-server</a> によると precise (12.04LTS) が 1:5.9p1-5ubuntu1.10 で対応してなさそうでしたが、
trusty (14.04LTS) が 1:6.6p1-2ubuntu2.8 で、
現在主流のバージョンでは問題なく使えそうでした。</p>

<h2>鍵生成</h2>

<p>vagrant 環境で鍵を生成して比較してみたところ、
ed25519 は公開鍵が RSA と比べてかなり短いことがわかりました。
ついでに比較してみたところ、 ECDSA よりも短いということがわかりました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%  ssh-keygen -t ed25519
</span><span class='line'>Generating public/private ed25519 key pair.
</span><span class='line'>Enter file in which to save the key (/home/vagrant/.ssh/id_ed25519):
</span><span class='line'>Enter passphrase (empty for no passphrase):
</span><span class='line'>Enter same passphrase again:
</span><span class='line'>Your identification has been saved in /home/vagrant/.ssh/id_ed25519.
</span><span class='line'>Your public key has been saved in /home/vagrant/.ssh/id_ed25519.pub.
</span><span class='line'>The key fingerprint is:
</span><span class='line'>SHA256:tlGs9kP67mLZzd9lh1/UJY2R/vZc1Q1GA9gyADsRGlw vagrant@yakkety64
</span><span class='line'>The key's randomart image is:
</span><span class='line'>+--[ED25519 256]--+
</span><span class='line'>|   ...Eo.. o.o+. |
</span><span class='line'>|    .o o .+ . += |
</span><span class='line'>|    . o   oo oo.=|
</span><span class='line'>|       . o    ..*|
</span><span class='line'>|        S .    .+|
</span><span class='line'>|       o *     o+|
</span><span class='line'>|        oooo  .oB|
</span><span class='line'>|        +...o  +*|
</span><span class='line'>|       . ++  .. o|
</span><span class='line'>+----[SHA256]-----+
</span><span class='line'>%  cat ~/.ssh/id_ed25519.pub
</span><span class='line'>ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGvN6KKrqsvbFOfLclK/fYIDye6Lms7NhOn0yYNkjMza vagrant@yakkety64
</span><span class='line'>%  ssh-keygen -t ecdsa
</span><span class='line'>Generating public/private ecdsa key pair.
</span><span class='line'>Enter file in which to save the key (/home/vagrant/.ssh/id_ecdsa):
</span><span class='line'>Enter passphrase (empty for no passphrase):
</span><span class='line'>Enter same passphrase again:
</span><span class='line'>Your identification has been saved in /home/vagrant/.ssh/id_ecdsa.
</span><span class='line'>Your public key has been saved in /home/vagrant/.ssh/id_ecdsa.pub.
</span><span class='line'>The key fingerprint is:
</span><span class='line'>SHA256:DebC1pOk6EEL5MVGP0PIziMdAmzgmqAYJl/C14DuSOM vagrant@yakkety64
</span><span class='line'>The key's randomart image is:
</span><span class='line'>+---[ECDSA 256]---+
</span><span class='line'>|=..=+..          |
</span><span class='line'>|.*o.*=           |
</span><span class='line'>|=+=*+.= +        |
</span><span class='line'>|B*o*=+ O +       |
</span><span class='line'>|Boo.+.= S .      |
</span><span class='line'>|.E.. o . .       |
</span><span class='line'>|    .            |
</span><span class='line'>|                 |
</span><span class='line'>|                 |
</span><span class='line'>+----[SHA256]-----+
</span><span class='line'>%  cat ~/.ssh/id_ecdsa.pub
</span><span class='line'>ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCQeG28rZh/SX9MBfKsnltv+hpr41CAT4CZZ9YsmsjVRdb3iKsYq4K4SNwfiVGNaIjKAcuDnaJbk50zOoa8V/Tc= vagrant@yakkety64
</span><span class='line'>%  ssh-keygen
</span><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>Enter file in which to save the key (/home/vagrant/.ssh/id_rsa):
</span><span class='line'>Enter passphrase (empty for no passphrase):
</span><span class='line'>Enter same passphrase again:
</span><span class='line'>Your identification has been saved in /home/vagrant/.ssh/id_rsa.
</span><span class='line'>Your public key has been saved in /home/vagrant/.ssh/id_rsa.pub.
</span><span class='line'>The key fingerprint is:
</span><span class='line'>SHA256:sR7WZK2npMgv8lRZrhofejURfuEs04VJv0quu3xtLiw vagrant@yakkety64
</span><span class='line'>The key's randomart image is:
</span><span class='line'>+---[RSA 2048]----+
</span><span class='line'>|           ..o   |
</span><span class='line'>|          ..+..  |
</span><span class='line'>|        ..+=.o.  |
</span><span class='line'>|         X=.=  . |
</span><span class='line'>|        S ==o .  |
</span><span class='line'>|     . = =o= .   |
</span><span class='line'>|      = =..oo.   |
</span><span class='line'>|    ...*.oE.+ o  |
</span><span class='line'>|     o+oo == +.  |
</span><span class='line'>+----[SHA256]-----+
</span><span class='line'>%  cat ~/.ssh/id_rsa.pub
</span><span class='line'>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCnSyvz7oShBRgD8q91eG4WtdJ83cPJfQAtSKEiE8ELHhqRulL6liPz/jqqpMjQpp/3e3QS8OoxGnuXGgHdkly4cd2UdnWxqbz4oN6ig64rYK/ZshQp5FyKb5L3Ksr+3mkhzxPHQVbSZWa8YoaCEzbteVbdFTXUMO/HFPFTL9s2HHyJoDlzUT0XdyovN6WQ2SEbx6pLudsvhZiaiqrPEHLl4ltq33tGcIMFjeu8XvW3d8jTmuAw0KrL7U3bD20n0xsKj9XBigew9K0PjJQ6QKyNUpXXB94jWv+hpkatHlw0NJm/XUQiHDtWaMCTRB8KDSrFarRbYL5ErfHuCePmYerR vagrant@yakkety64</span></code></pre></td></tr></table></div></figure>


<h2>サービスに登録</h2>

<p>二要素認証の時はちょっと楽しい面もありましたが、
ssh の鍵の変更は面倒なだけでした。</p>

<p>GitHub, BitBucket, Heroku など、試したところはすべて ed25519 の公開鍵に対応していました。</p>

<h2>IdentityFile 更新</h2>

<p><code>~/.ssh/config</code> で余計な鍵を試さないように</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IdentitiesOnly yes
</span><span class='line'>IdentityFile ~/.ssh/id_rsa</span></code></pre></td></tr></table></div></figure>


<p>のような設定を入れている場合は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IdentitiesOnly yes
</span><span class='line'>IdentityFile ~/.ssh/id_ed25519</span></code></pre></td></tr></table></div></figure>


<p>に変更する必要がありました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[certbot の renew hook について]]></title>
    <link href="http://blog.n-z.jp/blog/2016-11-20-certbot-renew-hook.html"/>
    <updated>2016-11-20T14:52:31+09:00</updated>
    <id>http://blog.n-z.jp/blog/certbot-renew-hook</id>
    <content type="html"><![CDATA[<p>certbot で設定の再読み込みには post-hook よりも renew-hook を使った方が良さそうでした。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Debian GNU/Linux 8.6 (jessie)</li>
<li>certbot 0.9.3-1~bpo8+1</li>
</ul>


<h2>hook の指定方法について</h2>

<p><code>certbot renew --pre-hook "service nginx stop" --post-hook "service nginx start"</code> のように <code>certbot</code> コマンドの引数で直接指定するか、 <code>/etc/letsencrypt/cli.ini</code> または <code>$XDG_CONFIG_HOME/letsencrypt/cli.ini</code> (<code>$XDG_CONFIG_HOME</code> が設定されていなければ <code>~/.config/letsencrypt/cli.ini</code>) に <code>renew-hook = service nginx reload</code> のように <code>--</code> を省いたオプション名で ini ファイルに指定する方法があるようです。(<code>ini</code> ファイルは <code>--config cli.ini</code> または <code>-c cli.ini</code> のようにコマンドラインで指定も可能)</p>

<h2>pre-hook, post-hook について</h2>

<p><code>pre-hook</code> と <code>post-hook</code> は standalone プラグインを使っている時に、 <code>certbot</code> の Web サーバーが 80 番ポートを使えるようにするために、通常の Web サーバーを止める用途に適しているようです。</p>

<p>そのため、<code>--dry-run</code> の時でも呼ばれるようです。</p>

<p>使用例:
<code>certbot renew --pre-hook "service nginx stop" --post-hook "service nginx start"</code></p>

<h2>renew-hook について</h2>

<p><code>renew-hook</code> は証明書の更新が成功するごとに呼ばれるので、証明書の再読み込みに適しているようです。</p>

<p>環境変数 <code>RENEWED_LINEAGE</code> に <code>/etc/letsencrypt/live/www.example.com</code> のような証明書の場所へのパスが、
環境変数 <code>RENEWED_DOMAINS</code> に <code>www.example.com example.com</code> のようにスペース区切りの更新されたドメインのリストが渡ってくるようです。</p>

<p>証明書の更新ごとに呼ばれるようなので、たまたま同じタイミングで <code>www.example.com</code> と <code>other.example.net</code> の更新が起こったとして、
証明書の作成の時に <code>-d</code> を同時に指定して同じ証明書の SAN (Subject Alternative Name) に入っているなら、
<code>RENEWED_DOMAINS</code> に並んでいて、
別々に証明書を作成していれば <code>renew-hook</code> が別々に呼ばれるのではないかと思います。</p>

<p>(同じ日に証明書を作成したり、複数ドメインを入れた証明書を作成していないので確認できていませんが。)</p>

<h2>renew-hook のすすめ</h2>

<p>以上の違いから、
<code>webroot</code> プラグインを使っている時の証明書の自動再読み込みには
<code>post-hook</code> ではなく <code>renew-hook</code> を使うのがおすすめです。</p>

<p>Web 上で <code>post-hook</code> を使っている例の方が多いのは、
<code>renew-hook</code> の方が後から実装されたからではないかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[関西オープンフォーラム2016にいってきた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-11-12-k-of-jp.html"/>
    <updated>2016-11-12T14:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/k-of-jp</id>
    <content type="html"><![CDATA[<p><a href="https://k-of.jp/2016/" title="KOF 2016：関西オープンフォーラム2016">KOF 2016：関西オープンフォーラム2016</a>
にいってきました。</p>

<!--more-->


<p>主に東海道らぐの LT と Debian Updates を見にいったので、そのメモです。</p>

<h2>東海道らぐ・鹿肥ゆる秋の大阪湾ライトニングトーク大会 in KOF</h2>

<ul>
<li>かな漢字変換ソフト「Genji」をつくってみた</li>
<li>ベジェ曲線を極めたい</li>
<li>自宅サーバのトラブルを楽しもう カーネル編</li>
<li>(Ubuntu 16.04 から 16.10 にあげたらカーネルパッケージのインストールに失敗して、結局原因は Sophos の無料版を入れていて 16.10 のカーネルに対応していなかったという話)</li>
<li>ビットコインとかブロックチェーン</li>
<li>Bitcoin の他には Ripple が有名</li>
<li>bitFlyer, coincheck, Zaif</li>
<li><a href="https://twitter.com/shu_kob">https://twitter.com/shu_kob</a></li>
<li>mikutter 活動報告</li>
<li>あひる焼き</li>
<li>月額利用料0円のモバイルネットワーク通信</li>
<li>Y!mobile (旧WILLCOM) の 2,3 台目の基本料金無料と WILLCOM 同士の通話料無料を使うという話だった。</li>
<li>Mini Debian Conference Japan 2016, PyConJP 2017</li>
</ul>


<h2>Debian Updates</h2>

<ul>
<li>スライドを KDE Connect で Android 端末から操作していた。(ただしマウスカーソルの移動とクリックで次のページはできていたが、それ以外の前のページへ戻るなどの操作は操作方法がわからないからか、できていないようだった。)</li>
<li>Debian とは? についていろいろ説明</li>
<li><a href="https://ja.wikipedia.org/wiki/GNU_Hurd">https://ja.wikipedia.org/wiki/GNU_Hurd</a> で使われているロゴじゃない Hurd のロゴがあるらしい <a href="https://www.gnu.org/graphics/ahurdlogo.html">https://www.gnu.org/graphics/ahurdlogo.html</a></li>
<li>Debian Updates</li>
<li>2016/02/29 Debian 6 Long Term Support (LTS) 終了 (2つ前のバージョン, 今の安定版は 8)</li>
<li>2016/04/02 Updated Debian 8.4, 7.10</li>
<li>2016 年度 Debian Project Leader 決定</li>
<li>2016/04/25 Debian 7 のセキュリティサポートが LTS チームに移行</li>
<li>2016/05/07 Debian 9 の i386 アーキテクチャのサポート CPU 変更アナウンス: i686 以降に変更 <a href="https://lists.debian.org/debian-devel-announce/2016/05/msg00001.html">https://lists.debian.org/debian-devel-announce/2016/05/msg00001.html</a></li>
<li>2016/06/04 Updated Debian 8.5, 7.11</li>
<li>2016/05/15 ZFS in Debian/contrib</li>
<li>2016/07/02-09 Debconf16</li>
<li>2016/08/16 Debian 23 歳</li>
<li>2016/09/17 Debian 8.6</li>
<li>Debug symbol 用パッケージ新規スイート提供開始</li>
<li>パッケージ名-dbgsym</li>
<li>deb.debian.org/debian-debug stretch-debug main</li>
<li>debhelper 10</li>
<li>Next Debian Release</li>
<li>2016/11/05 Transitions freeze</li>
<li>ライブラリの ABI が変わるものは認めない</li>
<li>2017/01/05 &ldquo;Soft&rdquo; freeze</li>
<li>2017/02/05 Full freeze</li>
<li>今後のイベント情報</li>
<li><a href="https://tokyodebian.alioth.debian.org/" title="東京エリアDebian勉強会">東京エリアDebian勉強会</a></li>
<li><a href="http://miniconf.debian.or.jp/" title="Mini Debian Conference Japan 2016">Mini Debian Conference Japan 2016</a></li>
<li><a href="https://wiki.debian.org/KansaiDebianMeeting" title="関西Debian勉強会">関西Debian勉強会</a></li>
</ul>


<h2>終了後</h2>

<p>Debian の人たちと懇親会に行きました。</p>

<p>最後の方は端末の話で盛り上がっていたので、次回の関西Debian勉強会は端末ネタになりそうかもしれません。</p>

<p>いろいろ話を聞きましたが、<a href="http://blog.n-z.jp/blog/2016-08-20-mac-easypg-gpg2.html" title="OS X の Emacs で EasyPG が gpg2 で Opening input file: Decryption failed, になったので対処した">OS X の Emacs で EasyPG が gpg2 で Opening input file: Decryption failed, になったので対処した</a>で書いたように gnupg のデフォルトが 2 系列になると emacs ではまるので確認してみたところ、stretch では 2 系列がデフォルトになって影響がありそうとわかりました。</p>

<p>佐々木さんは Desktop 環境で使っているので GUI の pinentry を使っていて問題なくつかえているという話でした。</p>

<p>帰ってきてから確認してみると、<a href="https://packages.debian.org/search?keywords=gnupg-agent" title="gnupg-agent パッケージ">gnupg-agent パッケージ</a>が 2.1.15 で 2.1.5 より新しいので <code>--allow-emacs-pinentry</code> が使えそうでした。
Ubuntu の <a href="http://packages.ubuntu.com/search?keywords=gnupg" title="gnupg パッケージ">gnupg パッケージ</a> で確認すると yakkety (16.10) では 2.1.15-1ubuntu6 のようで、すでに 2 系列のようなので、 Debian リリース前でも Ubuntu の方を使えば安定版で gnupg が 2 系列になったものを用意できそうなので、後で調べてみようと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jessie の certbot が 0.9.3 に上がったので設定を変更した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-11-08-certbot-0-dot-9-3.html"/>
    <updated>2016-11-08T23:14:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/certbot-0-dot-9-3</id>
    <content type="html"><![CDATA[<p>jessie の certbot が 0.9.3 に上がって、
<code>/etc/cron.d/certbot</code> よりも systemd の <code>certbot.timer</code> が優先して動くように変わったので、
reload に post-hook を使うように変えたり、
ログの差分メールの仕組みを変えたりしました。</p>

<!--more-->


<h2>今までの方法</h2>

<p>今までは <code>/etc/cron.daily/local-letsencrypt</code> で <code>certbot renew</code> を呼び出して、ログを保存して <code>diff</code> を出力して cron からメールを送信させて、
<code>reload</code> は更新の有無にかかわらず実行していました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">LOGFILE</span><span class="o">=</span>/var/log/certbot-renew.log
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;$LOGFILE&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    savelog -c <span class="m">90</span> -q <span class="s2">&quot;$LOGFILE&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> ! certbot renew &gt; <span class="s2">&quot;$LOGFILE&quot;</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">echo </span>Automated renewal failed:
</span><span class='line'>    cat <span class="s2">&quot;$LOGFILE&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;$LOGFILE&quot;</span>.0 <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    diff -u <span class="s2">&quot;$LOGFILE&quot;</span>.0 <span class="s2">&quot;$LOGFILE&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>apachectl graceful
</span><span class='line'>service postfix reload
</span></code></pre></td></tr></table></div></figure>


<h2>certbot パッケージでインストールされた自動更新の仕組み</h2>

<p><code>/etc/cron.d/certbot</code> は <code>/run/systemd/system</code> をチェックして普通は動かないようになっていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> % cat /etc/cron.d/certbot
</span><span class='line'> <span class="c"># /etc/cron.d/certbot: crontab entries for the certbot package</span>
</span><span class='line'> <span class="c">#</span>
</span><span class='line'> <span class="c"># Upstream recommends attempting renewal twice a day</span>
</span><span class='line'> <span class="c">#</span>
</span><span class='line'> <span class="c"># Eventually, this will be an opportunity to validate certificates</span>
</span><span class='line'> <span class="c"># haven&#39;t been revoked, etc.  Renewal will only occur if expiration</span>
</span><span class='line'> <span class="c"># is within 30 days.</span>
</span><span class='line'> <span class="nv">SHELL</span><span class="o">=</span>/bin/sh
</span><span class='line'> <span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
</span><span class='line'>
</span><span class='line'> <span class="m">0</span> */12 * * * root <span class="nb">test</span> -x /usr/bin/certbot -a <span class="se">\!</span> -d /run/systemd/system <span class="o">&amp;&amp;</span> perl -e <span class="s1">&#39;sleep int(rand(3600))&#39;</span> <span class="o">&amp;&amp;</span> certbot -q renew
</span></code></pre></td></tr></table></div></figure>


<p>systemd の方では、<code>timer</code> から動かすため、有効化されていない <code>certbot.service</code> と、 service を動かすための <code>certbot.timer</code> が入っていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% cat /lib/systemd/system/certbot.service
</span><span class='line'><span class="o">[</span>Unit<span class="o">]</span>
</span><span class='line'><span class="nv">Description</span><span class="o">=</span>Certbot
</span><span class='line'><span class="nv">Documentation</span><span class="o">=</span>file:///usr/share/doc/python-certbot-doc/html/index.html
</span><span class='line'><span class="nv">Documentation</span><span class="o">=</span>https://letsencrypt.readthedocs.io/en/latest/
</span><span class='line'><span class="o">[</span>Service<span class="o">]</span>
</span><span class='line'><span class="nv">Type</span><span class="o">=</span>oneshot
</span><span class='line'><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/certbot -q renew
</span><span class='line'><span class="nv">PrivateTmp</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'>% cat /lib/systemd/system/certbot.timer
</span><span class='line'><span class="o">[</span>Unit<span class="o">]</span>
</span><span class='line'><span class="nv">Description</span><span class="o">=</span>Run certbot twice daily
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Timer<span class="o">]</span>
</span><span class='line'><span class="nv">OnCalendar</span><span class="o">=</span>*-*-* 00,12:00:00
</span><span class='line'><span class="nv">RandomizedDelaySec</span><span class="o">=</span>3600
</span><span class='line'><span class="nv">Persistent</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Install<span class="o">]</span>
</span><span class='line'><span class="nv">WantedBy</span><span class="o">=</span>timers.target
</span></code></pre></td></tr></table></div></figure>


<p><code>OnCalendar</code> で毎日 00:00:00 と 12:00:00 に動くようになっていました。
<code>RandomizedDelaySec</code> でランダムな遅延の設定をしようとしているようですが、
jessie の systemd は対応していないようで、
<code>systemd[1]: [/lib/systemd/system/certbot.timer:6] Unknown lvalue 'RandomizedDelaySec' in section 'Timer'</code>
というログが出ていました。
(<a href="https://bugs.debian.org/843607" title="#843607 - certbot: Unknown lvalue 'RandomizedDelaySec' in section 'Timer'">#843607 - certbot: Unknown lvalue &lsquo;RandomizedDelaySec&rsquo; in section &lsquo;Timer&rsquo;</a> として報告済みです。)</p>

<h2>ログの diff のメール送信方法変更</h2>

<p>設定を追加するには <code>/etc/systemd/system/certbot.service.d</code> にファイルをおけば良いので、
以下の内容の <code>/etc/systemd/system/certbot.service.d/diffmail.conf</code> を作成しました。</p>

<p><code>certbot.service</code> の <code>ExecStart=/usr/bin/certbot -q renew</code> の後に実行したかったので、
<code>ExecStopPost</code> を使ってみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>Service<span class="o">]</span>
</span><span class='line'><span class="nv">ExecStopPost</span><span class="o">=</span>/bin/bash -c <span class="s2">&quot;diff -u &lt;(cut -d: -f4- /var/log/letsencrypt/letsencrypt.log.1 | egrep -v &#39;^DEBUG&#39;) &lt;(cut -d: -f4- /var/log/letsencrypt/letsencrypt.log | egrep -v &#39;^DEBUG&#39;) | ifne mail -s &#39;Change certbot log&#39; root&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>前回のログ (<code>letsencrypt.log.1</code>) と今回のログ (<code>letsencrypt.log</code>) から、必ず差分になってしまう時刻を <code>cut</code> で削って、さらに DEBUG ログの中にも現在日時で変化する部分があったので除外するようにしてから差分をとっています。</p>

<p>そして <a href="https://packages.debian.org/moreutils" title="moreutils">moreutils</a> の <code>ifne</code> を使って差分があるときだけメール送信をするようにしています。</p>

<h2>post-hook への変更</h2>

<p>systemd の <code>ExecStart</code> を書き換えるのは、メンテナンスしにくいとか、手動で <code>certbot renew</code> を実行したときに使われないなど、あまりよくないかと思い、
<code>/etc/letsencrypt/cli.ini</code> で設定することにしました。</p>

<p>letsencrypt の証明書を apache のみで使っているサーバーでは post-hook にリロードするコマンドを直接設定しました。</p>

<p>ついでに <code>rsa-key-size</code> も 2048 から 4096 に変更するようにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% cat /etc/letsencrypt/cli.ini
</span><span class='line'>rsa-key-size <span class="o">=</span> 4096
</span><span class='line'>post-hook <span class="o">=</span> apachectl graceful
</span></code></pre></td></tr></table></div></figure>


<h2>複数コマンドの post-hook</h2>

<p><code>post-hook = apachectl graceful; service postfix reload &gt;/dev/null</code> のような書き方は
<code>certbot: error: Unexpected line 1 in /etc/letsencrypt/cli.ini: post-hook = apachectl graceful; service postfix reload &gt;/dev/null</code>
というエラーになってうまくいかなかったので、
<code>/etc/letsencrypt/post-hook</code> に実行ファイルを作って、それを post-hook に指定することにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> % sudoedit /etc/letsencrypt/cli.ini
</span><span class='line'> % sudoedit /etc/letsencrypt/post-hook
</span><span class='line'> % sudo chmod +x /etc/letsencrypt/post-hook
</span><span class='line'> % cat /etc/letsencrypt/cli.ini
</span><span class='line'> rsa-key-size <span class="o">=</span> 4096
</span><span class='line'> post-hook <span class="o">=</span> /etc/letsencrypt/post-hook
</span><span class='line'> % cat /etc/letsencrypt/post-hook
</span><span class='line'> <span class="c">#!/bin/sh</span>
</span><span class='line'> apachectl graceful
</span><span class='line'> service postfix reload &gt;/dev/null
</span></code></pre></td></tr></table></div></figure>


<h2>テスト実行</h2>

<p><code>sudo certbot renew</code> で試しに実行してみたところ、以下のような感じで更新の必要がないときは <code>post-hook</code> は実行されないことが確認できました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% sudo certbot renew
</span><span class='line'>Saving debug log to /var/log/letsencrypt/letsencrypt.log
</span><span class='line'>
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>Processing /etc/letsencrypt/renewal/www.example.org.conf
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>Cert not yet due <span class="k">for</span> renewal
</span><span class='line'>
</span><span class='line'>The following certs are not due <span class="k">for</span> renewal yet:
</span><span class='line'>  /etc/letsencrypt/live/www.example.org/fullchain.pem <span class="o">(</span>skipped<span class="o">)</span>
</span><span class='line'>No renewals were attempted.
</span><span class='line'>No renewals attempted, so not running post-hook
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p><code>certbot renew</code> で証明書が更新されたときに実行したいことは <code>post-hook</code> に、
証明書の更新とは関係なく毎回実行したいことは systemd の <code>ExecStopPost</code> を使えば良いことがわかりました。</p>

<p>certbot の hook には <code>post-hook</code> 以外に <code>pre-hook</code> と <code>renew-hook</code> もあるので、
用途によってはそちらも使えそうです。
(<code>webroot</code> プラグインを使っているので使っていませんが、
<code>standalone</code> プラグインを使っているのなら <code>pre-hook</code> で <code>stop</code> して <code>post-hook</code> で <code>start</code> するとか、
<code>renew-hook</code> で更新されたドメインに応じて必要な時だけ <code>postfix reload</code> するとか)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第75回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-11-05-rubykansai75.html"/>
    <updated>2016-11-05T13:26:28+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai75</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/52902" title="第75回 Ruby関西 勉強会">第75回 Ruby関西 勉強会</a>
に参加して発表してきました。</p>

<p>今回は (ustream) 中継はありませんでした。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>オープニング</h2>

<ul>
<li>会場の電源とかの話とか</li>
<li>最初の発表者の紹介とか</li>
</ul>


<h2>機械学習概論</h2>

<ul>
<li>サンプルコードもないので Ruby とは全く関係のない話</li>
<li>機械学習入門書の入門 (挫折しないために)</li>
<li>「Machine Learning: A Probabilistic Perspective」は1000ページ超え</li>
<li>機械学習手法の大分類: 教師あり学習, 教師なし学習, 半教師あり学習, 強化学習</li>
<li>入門書で取り上げられる割合: 教師あり学習:9割, 教師なし学習:1割, 半教師あり学習:0割, 強化学習:0割</li>
<li>入門書で取り上げられる割合: 教師あり学習:9割のうち: パラメトリック:9割, ノンパレメトリック:1割</li>
<li>なので、この発表では教師あり学習・パラメトリックの話</li>
<li>パラメトリック推定</li>
<li><code>y=f(x)</code> となる <code>f</code> を見つけること</li>
<li>パラメータ <code>θ</code> を持つ何らかの特定の関数群(集合) <code>f(x, θ)</code> の中で <code>y=f(x, θ)</code> と最も近似できるような <code>θ</code> を探す</li>
<li>ベイズの定理</li>
<li>最尤推定</li>
<li>種々の推定</li>
<li>MAP 推定</li>
<li>点推定しない</li>
<li>共役事前分布</li>
<li>おすすめのマイルストーン</li>
<li>tinyurl.com/ruby-boshu</li>
<li>13:50 までの予定が 14:13 までになっていた。</li>
<li>質疑応答</li>
<li>14:16 までだった。</li>
</ul>


<h2>懇親会募集</h2>

<ul>
<li>8名?</li>
</ul>


<h2>Ruby 2.4.0 の主な非互換</h2>

<p>発表しました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykansai75-ruby24/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykansai75-ruby24/" title="Ruby 2.4.0 の主な非互換">Ruby 2.4.0 の主な非互換</a>
</div>


<ul>
<li>質問は特になかった。</li>
<li>14:38 までだった。</li>
</ul>


<h2>休憩</h2>

<ul>
<li>14:45頃まで</li>
<li>発表者ということで k-of.jp で配る予定のステッカーをもらった。</li>
</ul>


<h2>さよならsprockets</h2>

<ul>
<li>いかに Qiita は sprockets を捨てるに至ったか</li>
<li>前半:技術選定の話, 後半:さよならsprockets</li>
<li>技術マネジメントの話</li>
<li>(個人的な) 普遍的な要求: 学習コスパがいい, 撤退しやすい, 速い</li>
<li>作るものの特性によって変わる要求</li>
<li>SoR (System of Record), SoE (System of Engagement)</li>
<li>さよなら sprockets</li>
<li>sprockets のおさらい</li>
<li>sprockets の問題点</li>
<li>sprockets は SoE を支援する gem</li>
<li>利点: Rails との統合が進んでいる, ハッシュダイジェスト埋め込みは便利</li>
<li>良いところは残しつつ、もっと高速にトライ・アンド・エラーできるようにしたい</li>
<li>browserify-rails</li>
<li>sprockets + ES6 modules ができる</li>
<li>脱 sprockets のための経由地</li>
<li>JS が小さいうちはここで快適に暮らしてもいい</li>
<li>気合いで ES6 modules 化</li>
<li>browserify v.s. webpack</li>
<li>webpack はなんでもできすぎて撤退しづらくなりそう → browserify を採用した</li>
<li>(世の中的には webpack が主流になりつつある)</li>
<li>ビルドタスクを書く</li>
<li>全部 npm-scripts に書く (Grant gulp は使わない)</li>
<li>ワンライナーに納まらない場合は Node.js スクリプトを書く</li>
<li>Tips: npm-scripts 用シェル芸</li>
<li><code>((a &amp;&amp; (b &amp; c &amp; wait)) &amp; d &amp; wait) &amp;&amp; e</code></li>
<li>マニフェストファイル: 開発環境では admin.js で本番環境では admin-xxxxx.min.js</li>
<li>開発環境: watchify</li>
<li>非同期ビルドの問題</li>
<li>CSSのビルドが微妙にかかるので反映されていないことがある</li>
<li>コンパイル中は sleep する Rack ミドルウェアを追加して解決</li>
<li>移行の結果何が変わった?</li>
<li>デプロイ速度が4分速くなった</li>
<li>開発時の待ち時間がかなり速くなった</li>
<li>開発にすべての npm パッケージを使えるようになった</li>
<li>15:25 までだった。</li>
<li>質疑応答は特になし</li>
</ul>


<h2>社内勉強会で読んだ本とか</h2>

<ul>
<li>15:27 から</li>
<li>Rails5 リリースノート</li>
<li>The Twelve-Factor App</li>
<li>The Rails Doctrine</li>
<li>Domain Driven Design Quickly</li>
<li>メタプログラミング Ruby 第2版</li>
<li>15:37 まで</li>
<li><a href="http://www.slideshare.net/ShinsukeKuroki/ss-68228347" title="社内勉強会で読んだ本とか">社内勉強会で読んだ本とか</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li>15:50頃まで</li>
</ul>


<h2>mruby 初級者向けレッスン</h2>

<ul>
<li><a href="http://qiita.com/ogomr/items/04f2734bfef0a5ef082c" title="Ruby Miniature Book">Ruby Miniature Book</a></li>
<li><a href="http://qiita.com/ogomr/items/ca0c6cb5450bf6f86652" title="mruby on GR-CITRUS">mruby on GR-CITRUS</a></li>
<li><a href="https://github.com/ogom/crione">https://github.com/ogom/crione</a></li>
<li>16:57 まで</li>
<li>質疑応答</li>
<li>16:59 まで</li>
</ul>


<h2>告知タイム / クロージング</h2>

<ul>
<li>k-of.jp の手伝い募集</li>
<li>KansaiRubyKaigi 2017 開催決定</li>
<li>2017-05-27 に大阪産業創造館で</li>
<li>これもスタッフの募集予定</li>
<li>発表者やスポンサーも時期が来れば募集予定</li>
<li><a href="http://qiita.com/advent-calendar/2016/shinosakarb" title="Shinosaka.rb Advent Calendar 2016">Shinosaka.rb Advent Calendar 2016</a></li>
<li><a href="http://rubykansai.github.io/kansai-ruby-community/" title="関西 Ruby コミュニティー 紹介">関西 Ruby コミュニティー 紹介</a></li>
<li><a href="http://www.coderdojo.jp/">http://www.coderdojo.jp/</a></li>
<li>17:17 終了</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bash で PATH を配列に分解の続き]]></title>
    <link href="http://blog.n-z.jp/blog/2016-10-07-bash-path-to-array-again.html"/>
    <updated>2016-10-07T21:39:31+09:00</updated>
    <id>http://blog.n-z.jp/blog/bash-path-to-array-again</id>
    <content type="html"><![CDATA[<p>zsh だと <code>PATH</code> と同期している配列変数として <code>path</code> があるのですが、
bash にはそういうものがなくて困ったので、分解する方法を考えてみた話の続きです。
末尾の空文字列や改行に対応しました。</p>

<!--more-->


<h2>昨日の方法の問題点</h2>

<p><a href="http://blog.n-z.jp/blog/2016-10-06-bash-path-to-array.html">昨日の記事</a> に書きましたが、末尾の空文字列の処理に問題がありました。
また、書いていませんでしたが、改行に対応できていませんでした。</p>

<h2>末尾対応</h2>

<p><code>PATH= bash -c 'ls'</code> を <code>/bin</code> やそれ以外で実行してみたら
空の <code>PATH</code> はカレントディレクトリのみと同じ意味のようなので、
「<a href="https://twitter.com/fixedpoint_jp/status/784229832930369536">末尾の空文字列に対応するために、PATHにの最後に:を追加した文字列をreadすればいい?</a>」
という指摘のように末尾に <code>:</code> を追加する方法で良さそうでした。</p>

<p>つまり、以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> bash -c <span class="s1">&#39;PATH=/bin:; IFS=: read -r -a path &lt;&lt;&lt;&quot;$PATH:&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/bin&quot; [1]=&quot;&quot;)&#39;</span>
</span><span class='line'><span class="gp">%</span> bash -c <span class="s1">&#39;PATH=/bin; IFS=: read -r -a path &lt;&lt;&lt;&quot;$PATH:&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/bin&quot;)&#39;</span>
</span><span class='line'><span class="gp">%</span> bash -c <span class="s1">&#39;PATH=; IFS=: read -r -a path &lt;&lt;&lt;&quot;$PATH:&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>「PATH自体が空だった場合は振舞いが変わるけど。」という話もありましたが、
<code>PATH</code> 探索を再現できれば良いということを考えると空の場合も問題なさそうでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> bash -c <span class="s1">&#39;PATH=; ls&#39;</span>
</span><span class='line'><span class="go">bash: ls: No such file or directory</span>
</span><span class='line'><span class="gp">%</span> <span class="nb">cd</span> /bin
</span><span class='line'><span class="gp">%</span> bash -c <span class="s1">&#39;PATH=; ls /bin/bash&#39;</span>
</span><span class='line'><span class="go">/bin/bash</span>
</span></code></pre></td></tr></table></div></figure>


<h2>改行対応</h2>

<p>いろいろ試していると改行を含む <code>PATH</code> を扱えないことに気づいたのですが、
<code>-d $'\0'</code> (以下の例ではコマンドラインのエスケープでひどいことになっていますが) を
指定して区切り文字を変えると here string の末尾に付く改行も入力の一部として
扱われてしまうのでうまくいかないようでしたが、末尾の要素を <code>unset</code> で削除することで
良い感じになりました。</p>

<p><code>$'\0'</code> は NUL 文字で C 言語での終端文字なので、普通は <code>PATH</code> の途中に入らないことが期待できるので、ありえない文字として指定しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> bash -c <span class="s1">&#39;PATH=/bin; IFS=: read -d $&#39;</span><span class="s2">&quot;&#39;&quot;</span><span class="s1">&#39;\0&#39;</span><span class="s2">&quot;&#39;&quot;</span><span class="s1">&#39; -r -a path &lt;&lt;&lt;&quot;$PATH:&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/bin&quot; [1]=&quot;</span>
</span><span class='line'><span class="go">&quot;)&#39;</span>
</span><span class='line'><span class="gp">%</span> bash -c <span class="s1">&#39;PATH=/bin; IFS=: read -d $&#39;</span><span class="s2">&quot;&#39;&quot;</span><span class="s1">&#39;\0&#39;</span><span class="s2">&quot;&#39;&quot;</span><span class="s1">&#39; -r -a path &lt;&lt;&lt;&quot;$PATH:&quot;; unset path[-1]; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/bin&quot;)&#39;</span>
</span><span class='line'><span class="gp">%</span> bash -c <span class="s1">&#39;PATH=/foo$&#39;</span><span class="s2">&quot;&#39;&quot;</span><span class="s1">&#39;\n&#39;</span><span class="s2">&quot;&#39;&quot;</span><span class="s1">&#39;bar:/bin; IFS=: read -d $&#39;</span><span class="s2">&quot;&#39;&quot;</span><span class="s1">&#39;\0&#39;</span><span class="s2">&quot;&#39;&quot;</span><span class="s1">&#39; -r -a path &lt;&lt;&lt;&quot;$PATH:&quot;; unset path[-1]; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/foo</span>
</span><span class='line'><span class="go">bar&quot; [1]=&quot;/bin&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>わかりやすいようにファイルにして実行すると以下のような感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> cat /tmp/p.bash
</span><span class='line'><span class="go">PATH=/foo$&#39;\n&#39;bar:/bin</span>
</span><span class='line'><span class="go">IFS=: read -d $&#39;\0&#39; -r -a path &lt;&lt;&lt;&quot;$PATH:&quot;</span>
</span><span class='line'><span class="go">unset path[-1]</span>
</span><span class='line'><span class="go">declare -p path</span>
</span><span class='line'><span class="go">PATH=/foo$&#39;\n&#39;bar:/bin:</span>
</span><span class='line'><span class="go">IFS=: read -d $&#39;\0&#39; -r -a path &lt;&lt;&lt;&quot;$PATH:&quot;</span>
</span><span class='line'><span class="go">unset path[-1]</span>
</span><span class='line'><span class="go">declare -p path</span>
</span><span class='line'><span class="gp">%</span> bash /tmp/p.bash
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/foo</span>
</span><span class='line'><span class="go">bar&quot; [1]=&quot;/bin&quot;)&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/foo</span>
</span><span class='line'><span class="go">bar&quot; [1]=&quot;/bin&quot; [2]=&quot;&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>他の処理例</h2>

<p><code>/etc/group</code> くらいのデータになると awk などを使った方が良いと思いますが、
<code>/etc/group</code> (末尾に空文字列が入ることがある) のパースも良い感じにできるようです。</p>

<p>設定されていない状態でも構わなかったり、
末尾に空文字列が入らないことがわかっている <code>/etc/passwd</code> などの場合は
bash の組み込みコマンドだけでいけそうです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> cat /tmp/t.bash
</span><span class='line'><span class="gp">#</span>!/bin/bash
</span><span class='line'><span class="go">sed &#39;s/$/:/&#39; /etc/group | while IFS=: read -r -a group; do</span>
</span><span class='line'><span class="go">  declare -p group</span>
</span><span class='line'><span class="go">done</span>
</span><span class='line'><span class="gp">%</span> bash /tmp/t.bash
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;root&quot; [1]=&quot;x&quot; [2]=&quot;0&quot; [3]=&quot;&quot;)&#39;</span>
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;daemon&quot; [1]=&quot;x&quot; [2]=&quot;1&quot; [3]=&quot;&quot;)&#39;</span>
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;bin&quot; [1]=&quot;x&quot; [2]=&quot;2&quot; [3]=&quot;&quot;)&#39;</span>
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;sys&quot; [1]=&quot;x&quot; [2]=&quot;3&quot; [3]=&quot;&quot;)&#39;</span>
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;adm&quot; [1]=&quot;x&quot; [2]=&quot;4&quot; [3]=&quot;syslog,vagrant&quot;)&#39;</span>
</span><span class='line'><span class="go">(略)</span>
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;lpadmin&quot; [1]=&quot;x&quot; [2]=&quot;114&quot; [3]=&quot;vagrant&quot;)&#39;</span>
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;sambashare&quot; [1]=&quot;x&quot; [2]=&quot;115&quot; [3]=&quot;vagrant&quot;)&#39;</span>
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;vboxsf&quot; [1]=&quot;x&quot; [2]=&quot;999&quot; [3]=&quot;&quot;)&#39;</span>
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;scanner&quot; [1]=&quot;x&quot; [2]=&quot;116&quot; [3]=&quot;&quot;)&#39;</span>
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;colord&quot; [1]=&quot;x&quot; [2]=&quot;117&quot; [3]=&quot;&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>最終的には</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">IFS</span><span class="o">=</span>: <span class="nb">read</span> -d <span class="s1">$&#39;\0&#39;</span> -r -a path <span class="o">&lt;&lt;&lt;</span><span class="s2">&quot;$PATH:&quot;</span>
</span><span class='line'><span class="nb">unset </span>path<span class="o">[</span>-1<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>で <code>PATH</code> を配列に変換できることがわかりました。</p>

<p>入力データに改行がないとわかっているなら <code>-d $'\0'</code> などは省略できるので、
入力データの性質に応じて適度に手を抜きつつ処理をするのが良いのではないでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bash で PATH を配列に分解]]></title>
    <link href="http://blog.n-z.jp/blog/2016-10-06-bash-path-to-array.html"/>
    <updated>2016-10-06T23:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/bash-path-to-array</id>
    <content type="html"><![CDATA[<p>zsh だと <code>PATH</code> と同期している配列変数として <code>path</code> があるのですが、
bash にはそういうものがなくて困ったので、分解する方法を考えてみました。</p>

<!--more-->


<h2>結論</h2>

<p>先に結論を書いておくと、最終的には <code>IFS=: read -r -a path &lt;&lt;&lt;"$PATH"</code> という方法で分解できました。</p>

<p>2016-10-07 追記: 詳細は<a href="http://blog.n-z.jp/blog/2016-10-07-bash-path-to-array-again.html">続き</a> に書きましたが、改行などに対応できていませんでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> bash -c <span class="s1">&#39;IFS=: read -r -a path &lt;&lt;&lt;&quot;$PATH&quot;; declare -p path&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように動作確認できます。</p>

<p>declare で表示というのは <a href="http://yonchu.hatenablog.com/entry/2013/07/09/230656" title="シェルスクリプトのデバッグは typeset または declare を使うと良いかも - よんちゅBlog">シェルスクリプトのデバッグは typeset または declare を使うと良いかも - よんちゅBlog</a> を参考にしました。</p>

<h2><code>-r</code> オプション</h2>

<p><code>-r</code> オプションは <code>read</code> コマンドを使うときの定石ですが、具体的には <code>\:</code> のような並びがあるときに影響がありました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/bin:/tmp/foo\:/tmp/bar&quot;</span> bash -c <span class="s1">&#39;IFS=: read -r -a path &lt;&lt;&lt;&quot;$PATH&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/bin&quot; [1]=&quot;/tmp/foo\\&quot; [2]=&quot;/tmp/bar&quot;)&#39;</span>
</span><span class='line'><span class="gp">%</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/bin:/tmp/foo\:/tmp/bar&quot;</span> bash -c <span class="s1">&#39;IFS=: read -a path &lt;&lt;&lt;&quot;$PATH&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/bin&quot; [1]=&quot;/tmp/foo:/tmp/bar&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際のパスの挙動は <code>-r</code> がある場合と同じようでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> mkdir /tmp/foo<span class="se">\\</span>
</span><span class='line'><span class="gp">%</span> <span class="nb">echo echo </span>hoge &gt; /tmp/foo<span class="se">\\</span>/hoge
</span><span class='line'><span class="gp">%</span> chmod +x /tmp/foo<span class="se">\\</span>/hoge
</span><span class='line'><span class="gp">%</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/bin:/tmp/foo\:/tmp/bar&quot;</span> bash -c <span class="s1">&#39;IFS=: read -a path &lt;&lt;&lt;&quot;$PATH&quot;; for p in &quot;${path[@]}&quot;; do test -x &quot;$p/hoge&quot; &amp;&amp; &quot;$p/hoge&quot;; done&#39;</span>
</span><span class='line'><span class="go">PATH=&quot;/bin:/tmp/foo\:/tmp/bar&quot; bash -c &#39;IFS=: read -r -a path &lt;&lt;&lt;&quot;$PATH&quot;; for p in &quot;${path[@]}&quot;; do test -x &quot;$p/hoge&quot; &amp;&amp; &quot;$p/hoge&quot;; done&#39;</span>
</span><span class='line'><span class="go">hoge</span>
</span><span class='line'><span class="gp">%</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/bin:/tmp/foo\:/tmp/bar&quot;</span> hoge
</span><span class='line'><span class="go">hoge</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>-d</code> オプション</h2>

<p><code>-d</code> オプションというのもあったので試してみたのですが、そこで完全に読み込み終了になってしまって、期待した動作にはなりませんでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/bin:/tmp/foo\:/tmp/bar&quot;</span> bash -c <span class="s1">&#39;read -d : -r -a path &lt;&lt;&lt;&quot;$PATH&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/bin&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>-a</code> オプション</h2>

<p><code>-a</code> オプションはこのように複数の変数を指定する代わりにひとつの変数を指定して配列を代入してくれるオプションでした。</p>

<p><code>-a</code> オプションがないと指定した変数のうち、最後に残り全て入ってしまうようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">PATH=&quot;/bin:/tmp/foo\:/tmp/bar:/tmp/baz&quot; bash -c &#39;IFS=: read -r path1 path2 path3 &lt;&lt;&lt;&quot;$PATH&quot;; declare -p path1 path2 path3&#39;</span>
</span><span class='line'><span class="go">declare -- path1=&quot;/bin&quot;</span>
</span><span class='line'><span class="go">declare -- path2=&quot;/tmp/foo\\&quot;</span>
</span><span class='line'><span class="go">declare -- path3=&quot;/tmp/bar:/tmp/baz&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>here string</h2>

<p><code>&lt;&lt;&lt;word</code> は <code>echo word |</code> のようなもので、標準入力に <code>word</code> を渡してくれる機能です。</p>

<h2>IFS</h2>

<p><code>read</code> などの単語区切りです。
デフォルトは空白、タブ、改行です。</p>

<p>ずっと変えてしまうと影響が大きすぎるので、 <code>read</code> の行だけ変更するようにしています。</p>

<p>また、このやり方を使うことで空白の入ったディレクトリを含むパスもうまく扱えます。</p>

<h2>カレントディレクトリを表す空のパスの扱い</h2>

<p>頭や途中に入った空文字列 (カレントディレクトリを表す) は扱えたのですが、末尾にある場合はうまくいきませんでした。</p>

<p>セキュリティ上の問題もあるので、普通は設定しないと思うので、対応しなくても問題はないと思いますが、完全に変換したい場合は特別扱いを追加する必要がありそうでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span>  bash -c <span class="s1">&#39;PATH=:/bin; IFS=: read -r -a path &lt;&lt;&lt;&quot;$PATH&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;&quot; [1]=&quot;/bin&quot;)&#39;</span>
</span><span class='line'><span class="gp">%</span>  bash -c <span class="s1">&#39;PATH=/bin::/bin; IFS=: read -r -a path &lt;&lt;&lt;&quot;$PATH&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/bin&quot; [1]=&quot;&quot; [2]=&quot;/bin&quot;)&#39;</span>
</span><span class='line'><span class="gp">%</span>  bash -c <span class="s1">&#39;PATH=/bin:; IFS=: read -r -a path &lt;&lt;&lt;&quot;$PATH&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/bin&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>zsh には元から <code>path</code> があるし、 <code>/bin/sh</code> には配列がないので bash 限定ではありますが、
<code>IFS=: read -r -a path &lt;&lt;&lt;"$PATH"</code> で実用上問題なく変換できるということがわかったので、必要な時には使うと良いのではないでしょうか。</p>

<p>2016-10-07 追記: 末尾の空文字列や改行に対応した<a href="http://blog.n-z.jp/blog/2016-10-07-bash-path-to-array-again.html">続き</a>を書きました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React On Rails の react-webpack-rails-tutorial を Dokku で試してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-10-02-react-webpack-rails-tutorial-on-dokku.html"/>
    <updated>2016-10-02T22:24:55+09:00</updated>
    <id>http://blog.n-z.jp/blog/react-webpack-rails-tutorial-on-dokku</id>
    <content type="html"><![CDATA[<p>react.js を rails と組み合わせて使うにはどうすればいいんだろうと思って調べてみると、<code>react-rails</code> gem の他に <code>react_on_rails</code> gem というもっとまとめていろんなことの面倒を見てくれるものがあったので、そのサンプルアプリである
<a href="https://github.com/shakacode/react-webpack-rails-tutorial" title="react-webpack-rails-tutorial">react-webpack-rails-tutorial</a>
を <a href="https://github.com/dokku/dokku/" title="Dokku">Dokku</a> にデプロイできるか試してみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>OS X El Capitan 10.11.6</li>
<li>VirtualBox 5.1.6</li>
<li>Vagrant 1.8.6</li>
<li>Dokku master (0.7.2 からちょっと変更が進んだもの)</li>
<li>react-webpack-rails-tutorial master</li>
<li>ruby 2.3.1</li>
<li>rails 5.0.0</li>
<li>node 6.7.0</li>
</ul>


<h2>環境構築</h2>

<p>まず <a href="https://github.com/dokku/dokku">https://github.com/dokku/dokku</a> を git clone したディレクトリで作業します。</p>

<p>vagrant の provision から何度も試すようなら、 apt で日本のミラーを使うように shell provisioning を追加しておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/Vagrantfile b/Vagrantfile</span>
</span><span class='line'><span class="gh">index 4f3fc6c..bccceb9 100644</span>
</span><span class='line'><span class="gd">--- a/Vagrantfile</span>
</span><span class='line'><span class="gi">+++ b/Vagrantfile</span>
</span><span class='line'><span class="gu">@@ -47,6 +47,7 @@ Vagrant::configure(&quot;2&quot;) do |config|</span>
</span><span class='line'>       vb.customize [&quot;modifyvm&quot;, :id, &quot;--natdnsproxy1&quot;, &quot;off&quot;]
</span><span class='line'>     end
</span><span class='line'>
</span><span class='line'><span class="gi">+    vm.vm.provision :shell, :inline =&gt; &quot;sed -i -e &#39;s,//us\\.archive\\.ubuntu\\.com,//jp.archive.ubuntu.com,&#39; /etc/apt/sources.list&quot;</span>
</span><span class='line'>     vm.vm.provision :shell, :inline =&gt; &quot;export DEBIAN_FRONTEND=noninteractive &amp;&amp; apt-get update &gt; /dev/null &amp;&amp; apt-get -qq -y install git &gt; /dev/null &amp;&amp; cd /root/dokku &amp;&amp; #{make_cmd}&quot;
</span><span class='line'>     vm.vm.provision :shell, :inline =&gt; &quot;cd /root/dokku &amp;&amp; make dokku-installer&quot;
</span><span class='line'>     vm.vm.provision :shell do |s|
</span></code></pre></td></tr></table></div></figure>


<p><code>vagrant up</code> します。
gliderlabs/herokuish の docker イメージのダウンロードなどもあるので時間がかかります。</p>

<h2>Web UI での設定</h2>

<p><a href="http://dokku.me/">http://dokku.me/</a> を開いて初期設定します。
<code>Hostname</code> を <code>dokku.me</code> に変更して <code>Use virtualhost naming for apps</code> にチェックを入れて <code>Finish Setup</code> を押します。</p>

<p>意図した動作かどうかはわかりませんが、この作業をしなくても <code>app-name.dokku.me</code> は使えました。
(<code>not-found-app.dokku.me</code> で初期設定画面は出てくるまま)</p>

<h2>初期設定</h2>

<p><code>/vagrant/tmp/init.sh</code> に以下のファイルをおいて実行します。
<code>tmp</code> は <code>.gitignore</code> に入っていてローカルな作業ファイルをおくのに都合が良いです。</p>

<p>内容としては以下のようなことをしています。</p>

<ul>
<li><code>docker</code> コマンドを <code>sudo</code> なしで呼べるように <code>docker</code> グループに <code>vagrant</code> ユーザーを追加</li>
<li><code>/home/dokku</code> を調べたりするときなどに都合が良いように <code>dokku</code> グループに <code>vagrant</code> ユーザーを追加</li>
<li>ruby などのダウンロードでタイムアウトしないように <code>CURL_TIMEOUT</code> を増やす</li>
<li><code>dokku run</code> などで一時的に作成されるコンテナーをデフォルトで削除するように <code>DOKKU_RM_CONTAINER</code> を設定</li>
<li><code>~/.ssh/known_hosts</code> がハッシュ化されているとどの行がどのホストかわからなくなるので <code>HashKnownHosts no</code> で無効化</li>
<li>あとで git push のときに使う <code>10.0.0.2</code> のホスト鍵を <code>~/.ssh/known_hosts</code> に追加</li>
<li>ssh の鍵ペアを作成して <code>dokku ssh-keys:add</code> で登録</li>
<li>ruby のビルドに必要なパッケージなどをインストール</li>
<li>anyenv, rbenv, ndenv をインストール</li>
<li><code>~/.gemrc</code> を作成してデフォルトでドキュメントのインストールを無効化</li>
<li>ndenv で最新の node をインストール</li>
</ul>


<p>デプロイするだけなら anyenv などは不要ですが、あとで開発環境としても動かしたかったので入れています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">set</span> -euo pipefail
</span><span class='line'><span class="nb">set</span> -x
</span><span class='line'><span class="nb">cd</span> /home/vagrant
</span><span class='line'>sudo usermod -aG docker vagrant
</span><span class='line'>sudo usermod -aG dokku vagrant
</span><span class='line'>dokku config:set --global <span class="nv">CURL_TIMEOUT</span><span class="o">=</span>120
</span><span class='line'>dokku config:set --global <span class="nv">DOKKU_RM_CONTAINER</span><span class="o">=</span>1
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -e <span class="s2">&quot;$HOME/.ssh/config&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;HashKnownHosts no&quot;</span> &gt;<span class="s2">&quot;$HOME/.ssh/config&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -e <span class="s2">&quot;$HOME/.ssh/known_hosts&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  ssh-keyscan -t ecdsa-sha2-nistp256 10.0.0.2 <span class="p">|</span> grep -v <span class="s1">&#39;#&#39;</span> &gt; <span class="s2">&quot;$HOME/.ssh/known_hosts&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -e <span class="s2">&quot;$HOME/.ssh/id_rsa&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  ssh-keygen -N <span class="s1">&#39;&#39;</span> -f <span class="s2">&quot;$HOME/.ssh/id_rsa&quot;</span>
</span><span class='line'>  sudo dokku ssh-keys:add vagrant <span class="s2">&quot;$HOME/.ssh/id_rsa.pub&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -z <span class="s2">&quot;$(dpkg -l | grep libsqlite3-dev)&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  sudo sed -i~ -e <span class="s1">&#39;s/us\.archive/jp.archive/&#39;</span> /etc/apt/sources.list
</span><span class='line'>  sudo apt-get update
</span><span class='line'>  sudo apt-get -y install autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm3 libgdbm-dev
</span><span class='line'>  sudo apt-get -y install libpq-dev
</span><span class='line'>  sudo apt-get -y install libsqlite3-dev
</span><span class='line'>  sudo apt-get -y install jq
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d ~/.anyenv <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  git clone https://github.com/riywo/anyenv.git ~/.anyenv
</span><span class='line'>  <span class="nb">echo</span> <span class="s1">&#39;export PATH=&quot;$HOME/.anyenv/bin:$PATH&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'>  <span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(anyenv init -)&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -z <span class="s2">&quot;$(command -v anyenv)&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$HOME/.anyenv/bin:$PATH&quot;</span>
</span><span class='line'>  <span class="nb">set</span> +x
</span><span class='line'>  <span class="nb">eval</span> <span class="s2">&quot;$(anyenv init - --no-rehash)&quot;</span>
</span><span class='line'>  <span class="nb">set</span> -x
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d ~/.anyenv/envs/rbenv <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  anyenv install rbenv
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -f ~/.gemrc <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  cat <span class="s">&lt;&lt;EOF &gt;~/.gemrc</span>
</span><span class='line'><span class="s">install: --no-rdoc --no-ri --format-executable</span>
</span><span class='line'><span class="s">update: --no-rdoc --no-ri --format-executable</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d <span class="s2">&quot;$HOME/.anyenv/envs/ndenv&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  anyenv install ndenv
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nv">node_version</span><span class="o">=</span><span class="k">$(</span>ndenv install -l <span class="p">|</span> grep <span class="s1">&#39;^ *v&#39;</span> <span class="p">|</span> tail -n1 <span class="p">|</span> xargs<span class="k">)</span>
</span><span class='line'><span class="k">if</span> ! ndenv versions <span class="p">|</span> grep -q <span class="s2">&quot;$node_version&quot;</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  ndenv install <span class="s2">&quot;$node_version&quot;</span>
</span><span class='line'>  ndenv global <span class="s2">&quot;$node_version&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h2>react-webpack-rails-tutorial のデプロイ</h2>

<p>一度 <code>exit</code> で抜けて <code>vagrant ssh</code> で入りなおしてグループの変更や anyenv などのインストールを反映します。</p>

<p><code>/vagrant/tmp/react-webpack-rails-tutorial.sh</code> に以下のファイルをおいて実行します。</p>

<p>内容としては以下のようなことをしています。</p>

<ul>
<li><a href="https://github.com/shakacode/react-webpack-rails-tutorial">https://github.com/shakacode/react-webpack-rails-tutorial</a> の取得</li>
<li>react-webpack-rails-tutorial アプリの作成 (リンク作業に必要)</li>
<li>dokku-postgres が入っていなければ入れる</li>
<li>react-webpack-rails-tutorial-db を作ってリンク</li>
<li>dokku という remote を追加</li>
<li><a href="https://github.com/heroku/heroku-buildpack-multi">https://github.com/heroku/heroku-buildpack-multi</a> を使うため <code>.buildpacks</code> を作成</li>
<li><code>rake db:migrate</code> の自動実行のため <code>app.json</code> を作成</li>
<li>デプロイ</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">set</span> -euo pipefail
</span><span class='line'><span class="nb">set</span> -x
</span><span class='line'><span class="nb">cd</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d react-webpack-rails-tutorial <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  git clone https://github.com/shakacode/react-webpack-rails-tutorial
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d /home/dokku/react-webpack-rails-tutorial <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  dokku apps:create react-webpack-rails-tutorial
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d /var/lib/dokku/plugins/available/postgres <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  sudo dokku plugin:install https://github.com/dokku/dokku-postgres.git <span class="o">||</span> :
</span><span class='line'>  sudo docker pull gliderlabs/herokuish
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -f /home/dokku/react-webpack-rails-tutorial/DOCKER_OPTIONS_RUN <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  dokku postgres:create react-webpack-rails-tutorial-db <span class="o">||</span> :
</span><span class='line'>  dokku postgres:link react-webpack-rails-tutorial-db react-webpack-rails-tutorial
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">cd </span>react-webpack-rails-tutorial
</span><span class='line'><span class="k">if</span> ! git remote <span class="p">|</span> grep -q dokku<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  git remote add dokku dokku@10.0.0.2:react-webpack-rails-tutorial
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>cat &gt;.buildpacks <span class="s">&lt;&lt;EOF</span>
</span><span class='line'><span class="s">https://github.com/heroku/heroku-buildpack-nodejs</span>
</span><span class='line'><span class="s">https://github.com/heroku/heroku-buildpack-ruby</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>git add .buildpacks
</span><span class='line'>git commit -m <span class="s1">&#39;Add .buildpacks&#39;</span> <span class="o">||</span> :
</span><span class='line'>cat <span class="s">&lt;&lt;EOF &gt;app.json</span>
</span><span class='line'><span class="s">{</span>
</span><span class='line'><span class="s">  &quot;scripts&quot;: {</span>
</span><span class='line'><span class="s">    &quot;dokku&quot;: {</span>
</span><span class='line'><span class="s">      &quot;predeploy&quot;: &quot;bundle exec rake db:migrate&quot;</span>
</span><span class='line'><span class="s">    }</span>
</span><span class='line'><span class="s">  }</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>git add app.json
</span><span class='line'>git commit -m <span class="s2">&quot;Set script.dokku.predeploy to app.json&quot;</span> <span class="o">||</span> :
</span><span class='line'>git push dokku master
</span></code></pre></td></tr></table></div></figure>


<h2>動作確認</h2>

<p>ブラウザーで <a href="http://react-webpack-rails-tutorial.dokku.me/">http://react-webpack-rails-tutorial.dokku.me/</a> を開いて動作確認します。</p>

<h2>.buildpacks の順番</h2>

<p><code>.buildpacks</code> で nodejs, ruby という順番で指定しましたが、逆の順番にすると以下のエラーで失敗しました。
<code>react_on_rails</code> で使っているので、 nodejs の方を先に入れる必要があるようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>-----&gt; Preparing app for Rails asset pipeline
</span><span class='line'>       Running: rake assets:precompile
</span><span class='line'>       cd client &amp;&amp; npm run build:production
</span><span class='line'>       sh: 1: npm: not found
</span><span class='line'>       rake aborted!
</span><span class='line'>       Command failed with status (127): [cd client &amp;&amp; npm run build:production...]
</span><span class='line'>       /tmp/build/vendor/bundle/ruby/2.3.0/gems/react_on_rails-6.1.0/lib/tasks/assets.rake:33:in `block (3 levels) in &lt;top (required)&gt;&#39;
</span><span class='line'>       /tmp/build/vendor/bundle/ruby/2.3.0/gems/rake-11.2.2/exe/rake:27:in `&lt;top (required)&gt;&#39;
</span><span class='line'>       Tasks: TOP =&gt; assets:precompile =&gt; react_on_rails:assets:compile_environment =&gt; react_on_rails:assets:webpack
</span><span class='line'>       (See full trace by running task with --trace)
</span><span class='line'>       !
</span><span class='line'>       !     Precompiling assets failed.
</span><span class='line'>       !
</span></code></pre></td></tr></table></div></figure>


<h2>開発環境設定</h2>

<p><a href="https://github.com/shakacode/react-webpack-rails-tutorial#basic-demo-setup">https://github.com/shakacode/react-webpack-rails-tutorial#basic-demo-setup</a> を参考にして設定します。</p>

<p><code>/vagrant/tmp/react-webpack-rails-tutorial-dev.sh</code> に以下のファイルをおいて実行します。</p>

<p>内容としては以下のようなことをしています。</p>

<ul>
<li><code>.ruby-version</code> で指定されている ruby のインストール
<a href="https://github.com/thoughtbot/capybara-webkit/wiki/Installing-Qt-and-compiling-capybara-webkit#ubuntu-trusty-1404">https://github.com/thoughtbot/capybara-webkit/wiki/Installing-Qt-and-compiling-capybara-webkit#ubuntu-trusty-1404</a> のインストール (OS X 上で直接試したときにはこの依存をインストールする部分が大変でした)</li>
<li>余計な差分が出ないように <code>Gemfile.lock</code> に記録されているバージョンの bundler をインストール</li>
<li><code>bundle install</code> で依存している gem をインストール</li>
<li><code>npm install</code> で依存している node modules をインストール</li>
<li>sqlite3 のデータベース作成</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">set</span> -euo pipefail
</span><span class='line'><span class="nb">set</span> -x
</span><span class='line'><span class="nb">cd</span> <span class="s2">&quot;$HOME/react-webpack-rails-tutorial&quot;</span>
</span><span class='line'><span class="nv">ruby_version</span><span class="o">=</span><span class="s2">&quot;$(&lt;.ruby-version)&quot;</span>
</span><span class='line'><span class="k">if</span> ! rbenv versions <span class="p">|</span> grep -q <span class="s2">&quot;$ruby_version&quot;</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  rbenv install <span class="s2">&quot;$ruby_version&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>sudo apt-get -y install libqt4-dev libqtwebkit-dev
</span><span class='line'><span class="nv">bundler_version</span><span class="o">=</span><span class="k">$(</span>grep -A1 <span class="s1">&#39;BUNDLED WITH&#39;</span> Gemfile.lock <span class="p">|</span> tail -n1 <span class="p">|</span> tr -d <span class="s1">&#39; &#39;</span><span class="k">)</span>
</span><span class='line'><span class="k">if</span> ! gem list <span class="p">|</span> grep -q bundler<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  gem install bundler -v <span class="s2">&quot;$bundler_version&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>bundle install
</span><span class='line'>npm install
</span><span class='line'>rake db:setup
</span></code></pre></td></tr></table></div></figure>


<h2>開発環境追加設定</h2>

<p><code>foreman start -f Procfile.hot</code> で起動して
<a href="http://dokku.me:5000/">http://dokku.me:5000/</a> で表示を確認すると「FATAL: Listen error: unable to monitor directories for changes. Visit <a href="https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers">https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers</a> for info on how to fix this.」というエラーになるので、サイトに書いてある通り、
<code>echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</code>
を実行しました。</p>

<p>実行前の <code>cat /proc/sys/fs/inotify/max_user_watches</code> は 8192 でした。</p>

<p>起動途中だと <code>ActionView::Template::Error (No such file or directory @ rb_file_s_mtime - app/assets/webpack/server-bundle.js):</code> というエラーになるので少し待てば良いようです。</p>

<p>しかし、次にアクセスしてみるとなぜか hot-assets が落ちてしまってうまく動きませんでした。
そして <code>ps x</code> でプロセスを確認するとちゃんと終了せずに残ってしまっているプロセスがあるので <code>pkill -f puma</code>, <code>pkill node</code> で終了させる必要がありました。</p>

<p>表示できても assets として <code>http://localhost:3500/</code> を参照しているため、ポートフォワーディングの設定追加が必要そうでした。</p>

<h2>Procfile.static</h2>

<p><code>foreman start -f Procfile.static</code> で起動して <code>http://dokku.me:5000/</code> を開いたところ、開けることもありましたが、落ちることも多くて安定しませんでした。</p>

<h2>まとめ</h2>

<p>Vagrant の VM は開発環境としてはなぜか安定しませんでしたが、 Dokku をデプロイ先としては安定して使えたので、
<code>react_on_rails</code> は開発対象の選択肢として入れても良さそうな感じがしました。</p>

<p>開発環境として OS X 上で直接動かしたときは問題なく動いたので、<code>localhost</code> ではなく <code>10.0.2.2</code> を使ってしまったのが不具合の原因だったのかもしれませんが、もう少し調べてみないとなんとも言えません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2要素認証を設定し直した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-09-25-update-2fa.html"/>
    <updated>2016-09-25T22:59:39+09:00</updated>
    <id>http://blog.n-z.jp/blog/update-2fa</id>
    <content type="html"><![CDATA[<p>Google Authenticator を入れているデバイスを買い換えたので、2要素認証 (2FA: two-factor authentication) (サービスによっては MFA: Multi-factor authentication) を設定し直してみました。</p>

<!--more-->


<h2>2要素認証一般の話</h2>

<ul>
<li>今回使用しているのは TOTP という RFC にもなっている規格なので Google に依存しているわけではありません</li>
<li><a href="https://support.apple.com/ja-jp/HT204915" title="Apple ID の 2 ファクタ認証">Apple ID の 2 ファクタ認証</a> は TOTP ではなさそうです</li>
<li><a href="https://itunes.apple.com/jp/app/google-authenticator/id388497605?mt=8" title="Google Authenticator">Google Authenticator</a> (iOS) や <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;amp;hl=ja" title="Google 認証システム">Google 認証システム</a> (Android) がよく使われている気がします</li>
<li>Google 依存を避けたいのなら <a href="http://www.iij.ad.jp/smartkey/" title="IIJ SmartKey">IIJ SmartKey</a> や Microsoft Authenticator というのもあるようです</li>
<li>TOTP は QR コードかテキスト入力した秘密情報と時刻を元に認証用の数字を生成しているだけなので、複数の端末・アプリに同時に設定することも可能です (当然ですが、紛失した時のリスクは増加します)</li>
</ul>


<h2>github.com</h2>

<ul>
<li>ログインしておく</li>
<li>右上の自分のアイコンをクリックして Settings をクリック</li>
<li>Security をクリック</li>
<li>Two-factor authentication の Edit をクリック</li>
<li>パスワードの確認が入る</li>
<li>Reconfigure two-factor authentication をクリック</li>
<li>リカバリーコードと fallback SMS 設定には影響がないという説明を確認</li>
<li><a href="https://help.github.com/articles/configuring-two-factor-authentication-via-a-totp-mobile-app/">https://help.github.com/articles/configuring-two-factor-authentication-via-a-totp-mobile-app/</a> に対応アプリの説明あり</li>
<li>Set up using an app をクリック</li>
<li>QR コードをアプリでスキャン</li>
<li>アプリに表示されている6桁の数字を入力して Enable two-factor authentication をクリック</li>
</ul>


<h2>Google アカウント</h2>

<ul>
<li>ログインしておく</li>
<li><a href="https://myaccount.google.com/">https://myaccount.google.com/</a> から「Google へのログイン」をクリック</li>
<li>「2 段階認証プロセス」をクリック</li>
<li>パスワードを再入力</li>
<li>2 段階認証の確認コードを入力</li>
<li>「2 つ目の手順」の「認証システム アプリ （デフォルト）」のペンのアイコンをクリック</li>
<li>「登録された認証システム アプリ」ポップアップが出てきたので「変更」をクリック</li>
<li>「お使いのスマートフォンの種類」で「Android」が選択されていたのでそのまま「次へ」をクリック (iPhone を選ぶとたぶん説明が違う)</li>
<li>QR コードをアプリでスキャン</li>
<li>「次へ」をクリック</li>
<li>アプリに表示されている6桁の数字を入力して「確認」をクリック</li>
<li>「完了」をクリック</li>
</ul>


<h2>Evernote</h2>

<ul>
<li>ログインする</li>
<li>左下のアイコンから「設定」を開く</li>
<li>「セキュリティ概要」を開く</li>
<li>「2 段階認証が有効です」になっているので「設定を管理」をクリック</li>
<li>再設定はなさそうなので「2 段階認証を無効化」で一度無効化</li>
<li>「2 段階認証を無効化しますか？」が出てきたので「確認」をクリック</li>
<li>「2 段階認証が有効化されていません」になったので「有効化」をクリック</li>
<li>説明が出てくるので「続ける」をクリック</li>
<li>重要事項が出てくるのでさらに「続ける」をクリック</li>
<li>メールアドレスを確認が出てくるので「確認用Eメールを送信する」をクリック</li>
<li>メールを確認して確認コードを入力して「続ける」をクリック</li>
<li>「携帯電話番号を入力」で「日本 (+81)」のまま「90-xxxx-yyyy」のように入力して「続ける」をクリック</li>
<li>SMS で確認コードが届くので確認コードを入力して「続ける」をクリック</li>
<li>「（任意）バックアップ用電話番号を設定」が出てくるので左下の「スキップ」をクリック</li>
<li>「Google 認証システムを入手する」の説明が出てくるので「iOS で続行」をクリック (一番上にあったので)</li>
<li>QR コードをアプリでスキャン</li>
<li>アプリに表示されている6桁の数字を入力して「続ける」をクリック</li>
<li>「バックアップコード」が表示されるのでコピーするなり印刷するなりして安全な場所に保存 (個人的には gpg で暗号化したファイルに保存している)</li>
<li>「続ける」をクリック</li>
<li>「バックアップコードを入力」でバックアップコードのひとつを入力して「セットアップを完了」(ここで入力しても無効にはならない)</li>
<li>「2 段階認証のセットアップが完了しました」の説明が出てくるので「完了」をクリック</li>
<li>「2 段階認証が有効です」になっているので、必要なら「設定を管理」からアプリケーション用パスワードを再設定していく必要がありそう (使っていなかったので不明)</li>
</ul>


<h2>live.jp</h2>

<ul>
<li>ログインする</li>
<li>右上のアカウント画像から「アカウントの表示」をクリック</li>
<li>上のところから「セキュリティとプライバシー」をクリック</li>
<li>「アカウント セキュリティ」の「その他のセキュリティ設定」をクリック</li>
<li>「認証アプリ」から「本人確認アプリをセットアップ」をクリック</li>
<li>「認証アプリの設定」に入るので「アプリをインストールするモバイル デバイス」から「iPhone、iPad、または iPod touch」を選択して「次へ」をクリック</li>
<li>Microsoft Authenticator で「個人のアカウント」を追加</li>
<li>同様に Android の設定の場合</li>
<li>「認証アプリの設定」に入るので「アプリをインストールするモバイル デバイス」から「Android」を選択して「次へ」をクリック</li>
<li>Microsoft Authenticator で「個人のアカウント」を追加</li>
<li>同様に TOTP アプリの場合</li>
<li>「認証アプリの設定」で「その他」を選択して「次へ」をクリック</li>
<li>「この設定を行うと、以前に認証アプリを使って生成し、設定したコードがすべて無効になります。続行してもよろしいですか?」という確認が出てくるので「次へ」をクリック</li>
<li>QR コードをアプリでスキャン</li>
<li>「アプリによって生成されたコード」にアプリに表示されている6桁の数字を入力して「次へ」をクリック</li>
</ul>


<p>ログイン時に通知で許可するか拒否するか出てくるようになりました。
「その他」で TOTP の設定をするとそちらが優先されるようになりましたが、どちらが優先されるかは最後にどちらを使ったかで決まるようです。</p>

<p>TOTP から Microsoft Authenticator への通知への切り替えは「Microsoft アカウント アプリに本人確認要求を送ります。」でできて、通知から TOTP への切り替えは「問題が発生した場合」をクリックすると出てくる「セキュリティ コードを入力してください」でできるようです。</p>

<p>Microsoft Authenticator の方は通知で認証できたり、表示されているのが 8 桁だったりして、
Microsoft のアカウントの認証に対しては TOTP で一般的な 6 桁ではないので、
他の方式なのかもしれないと思って、ちょっと調べてみたのですが、
よくわかりませんでした。</p>

<h2>Dropbox</h2>

<ul>
<li>ログインする</li>
<li>右上のアカウントのところから「設定」をクリック</li>
<li>「セキュリティ」タブをクリック</li>
<li>「2 段階認証」の「主要」の「認証アプリ」の「編集」をクリック</li>
<li>パスワードを入力して「次へ」をクリック</li>
<li>「モバイル アプリを使用」を選んだまま「次へ」をクリック</li>
<li>QR コードをアプリでスキャン</li>
<li>「次へ」をクリック</li>
<li>対応アプリについては <a href="https://www.dropbox.com/help/363#2fa-apps">https://www.dropbox.com/help/363#2fa-apps</a> に説明あり</li>
<li>アプリに表示されている6桁の数字を入力して「確認」をクリック</li>
<li>「予備の携帯番号 （オプション）」に「日本 (+81)」と「90xxxxyyyy」のように入力されていたのでそのまま「次へ」をクリック</li>
</ul>


<p>セキュリティの画面に戻って設定完了しました。</p>

<h2>amazon.com</h2>

<p>root-account-mfa-device とだけ出ていて、何のものなのかわかりにくかったのですが、
Amazon Product Advertising API で使っている amazon.com のものでした。</p>

<p>Amazon Product Advertising API で使っているだけなので、AWS の無料期間を始めないように注意しながら探しました。</p>

<ul>
<li><a href="https://console.aws.amazon.com/iam/home?#security_credential">https://console.aws.amazon.com/iam/home?#security_credential</a> の「Multi-Factor Authentication（MFA）」</li>
<li>「再同期」は意味がなかったので「無効化」してから「MFA の有効化」をしなおしました</li>
<li>「仮想 MFA デバイス」を選んで「次のステップ」</li>
<li>対応アプリの説明は <a href="https://aws.amazon.com/jp/iam/details/mfa/">https://aws.amazon.com/jp/iam/details/mfa/</a></li>
<li>説明を読んで「次のステップ」</li>
<li>QR コードをアプリでスキャン</li>
<li>アプリに表示されている6桁の数字を「認証コード1」に入力して、しばらく待って表示が変わったら「認証コード2」に入力して「仮想 MFA の有効化」</li>
<li>「MFA デバイスは正常に関連付けられました。」と出るので「完了」</li>
</ul>


<h2>さくらの会員メニュー</h2>

<ul>
<li>ログインする</li>
<li>説明ページ: <a href="https://help.sakura.ad.jp/hc/ja/articles/206057222">https://help.sakura.ad.jp/hc/ja/articles/206057222</a></li>
<li>「2段階認証の設定」をクリックする (わかりにくいがタイトルっぽいところがリンクにもなっている)</li>
<li>「※QRコードを発行・表示できるのは一度のみです。紛失した場合、一度設定を「無効」にする必要があります。」とあるので一度「無効」にして「設定変更」をクリック</li>
<li>確認が出るので「無効化」をクリック</li>
<li>再び「有効」にして「設定変更」をクリック</li>
<li>「2段階認証設定」をクリック</li>
<li>「QRコードを発行する」をクリック</li>
<li>QR コードをアプリでスキャン</li>
<li>「認証コード入力画面へ」をクリック</li>
<li>認証コードを入力して「ログイン(認証)」をクリック</li>
<li>「QRコード発行済み」になっていれば2FAは設定完了</li>
<li>さらに「バックアップコードを作成」をクリック</li>
<li>「現在のバックアップコードを表示する」をクリック</li>
<li>バックアップコードを安全な場所に保管</li>
</ul>


<h2>libpam-google-authenticator</h2>

<ul>
<li>ログインする</li>
<li><code>google-authenticator</code> コマンドを実行して <code>.google_authenticator</code> ファイルを上書きする</li>
<li>途中で表示される QR コードをアプリでスキャン</li>
<li>emergency scratch codes (バックアップコード) も再発行されるので安全な場所に控えておく</li>
</ul>


<h2>まとめ</h2>

<p>再設定機能があるサービスは再設定がしやすくて良かったのですが、そういう機能がないところは一時的に無効にしてセキュリティレベルが下がってしまうのが気になりました。</p>

<p>どちらが良いのかはわかりませんが、再設定によってバックアップコードが影響を受けないところと再発行のところがあるのも気になりました。</p>

<p>二要素認証 (多要素認証) はセキュリティにとって重要なものなので、デバイスの買い替えなどの適当なタイミングで再設定できたのは良い機会だったのかと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bundled gem と default gem の違いの具体例]]></title>
    <link href="http://blog.n-z.jp/blog/2016-09-13-bundled-gem-and-default-gem-more.html"/>
    <updated>2016-09-13T23:33:33+09:00</updated>
    <id>http://blog.n-z.jp/blog/bundled-gem-and-default-gem-more</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2016-09-10-bundled-gem-and-default-gem.html">bundled gem と default gem の違い</a>で概要は説明しましたが、具体的にどうなっているのか試してみました。</p>

<!--more-->


<h2>動作確認環境</h2>

<ul>
<li>Mac OS X Yosemite (10.10.5)</li>
<li>homebrew</li>
<li>rbenv 1.0.0</li>
<li>ruby-build v20160913</li>
<li>ruby 2.4.0-preview2, 2.3.1</li>
<li>bundler 1.13.0, 1.12.5</li>
<li>activesupport 5.0.0.1</li>
<li>rdoc 4.2.1, 5.0.0.beta2</li>
</ul>


<h2>クリーンな 2.4.0-preview2 を準備</h2>

<p>homebrew で入れた rbenv + ruby-build を使って 2.4.0-preview2 をインストールしました。
bundler も必要なのでインストールして、普通の gem の例として activesupport も入れておきました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rbenv install 2.4.0-preview2
</span><span class='line'>Downloading ruby-2.4.0-preview2.tar.bz2...
</span><span class='line'>-&gt; https://cache.ruby-lang.org/pub/ruby/2.4/ruby-2.4.0-preview2.tar.bz2
</span><span class='line'>Installing ruby-2.4.0-preview2...
</span><span class='line'>Installed ruby-2.4.0-preview2 to /Users/kazu/.rbenv/versions/2.4.0-preview2
</span><span class='line'>% rbenv shell 2.4.0-preview2
</span><span class='line'>% gem list
</span><span class='line'>
</span><span class='line'>*** LOCAL GEMS ***
</span><span class='line'>
</span><span class='line'>bigdecimal (default: 1.2.8)
</span><span class='line'>did_you_mean (1.0.2)
</span><span class='line'>io-console (default: 0.4.6)
</span><span class='line'>json (default: 2.0.2)
</span><span class='line'>minitest (5.9.0)
</span><span class='line'>net-telnet (0.1.1)
</span><span class='line'>openssl (default: 2.0.0.beta.2)
</span><span class='line'>power_assert (0.3.1)
</span><span class='line'>psych (default: 2.1.1)
</span><span class='line'>rake (11.2.2)
</span><span class='line'>rdoc (default: 5.0.0.beta2)
</span><span class='line'>test-unit (3.2.1)
</span><span class='line'>xmlrpc (0.1.1)
</span><span class='line'>% gem install bundler
</span><span class='line'>Fetching: bundler-1.13.0.gem (100%)
</span><span class='line'>Successfully installed bundler-1.13.0
</span><span class='line'>1 gem installed
</span><span class='line'>% gem install activesupport
</span><span class='line'>Fetching: i18n-0.7.0.gem (100%)
</span><span class='line'>Successfully installed i18n-0.7.0
</span><span class='line'>Fetching: thread_safe-0.3.5.gem (100%)
</span><span class='line'>Successfully installed thread_safe-0.3.5
</span><span class='line'>Fetching: tzinfo-1.2.2.gem (100%)
</span><span class='line'>Successfully installed tzinfo-1.2.2
</span><span class='line'>Fetching: concurrent-ruby-1.0.2.gem (100%)
</span><span class='line'>Successfully installed concurrent-ruby-1.0.2
</span><span class='line'>Fetching: activesupport-5.0.0.1.gem (100%)
</span><span class='line'>Successfully installed activesupport-5.0.0.1
</span><span class='line'>5 gems installed</span></code></pre></td></tr></table></div></figure>


<h2>bundler なしの環境での require</h2>

<p>普通の状態ではどれも問題なく require できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rbenv exec irb -r irb/completion --simple-prompt
</span><span class='line'>&gt;&gt; require 'json' # default gem
</span><span class='line'>=&gt; true
</span><span class='line'>&gt;&gt; require 'xmlrpc' # bundled gem
</span><span class='line'>=&gt; true
</span><span class='line'>&gt;&gt; require 'uri' # stdlib
</span><span class='line'>=&gt; true
</span><span class='line'>&gt;&gt; require 'active_support/all' # normal gem
</span><span class='line'>=&gt; true</span></code></pre></td></tr></table></div></figure>


<h2>bundler 環境でのテスト</h2>

<p>bundler 環境下では bundled gem は普通の gem と同じように読み込めないことがわかります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% mkdir /tmp/test
</span><span class='line'>% cd /tmp/test
</span><span class='line'>% bundle init
</span><span class='line'>Writing new Gemfile to /private/tmp/test/Gemfile
</span><span class='line'>% bundle exec irb -r irb/completion --simple-prompt
</span><span class='line'>&gt;&gt; require 'json' # default gem
</span><span class='line'>=&gt; true
</span><span class='line'>&gt;&gt; begin; require 'xmlrpc'; rescue LoadError; $!; end # bundled gem
</span><span class='line'>=&gt; #&lt;LoadError: cannot load such file -- xmlrpc&gt;
</span><span class='line'>&gt;&gt; require 'uri' # stdlib
</span><span class='line'>=&gt; false
</span><span class='line'>&gt;&gt; begin; require 'active_support/all'; rescue LoadError; $!; end # normal gem
</span><span class='line'>=&gt; #&lt;LoadError: cannot load such file -- active_support/all&gt;
</span><span class='line'>&gt;&gt;</span></code></pre></td></tr></table></div></figure>


<h2>uninstall</h2>

<p>default gem は uninstall ができなくて、bundled gem は uninstall できることがわかります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% gem uninstall json
</span><span class='line'>ERROR:  While executing gem ... (Gem::InstallError)
</span><span class='line'>    gem "json" cannot be uninstalled because it is a default gem
</span><span class='line'>% gem uninstall xmlrpc
</span><span class='line'>Successfully uninstalled xmlrpc-0.1.1</span></code></pre></td></tr></table></div></figure>


<h2>Gemfile でバージョン指定</h2>

<p><code>Gemfile</code> でバージョン指定していれば default gem の代わりに指定したバージョンの gem が使われることがわかります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% echo "gem 'json', '2.0.0'" &gt;&gt; Gemfile
</span><span class='line'>% bundle install
</span><span class='line'>Fetching gem metadata from https://rubygems.org/.
</span><span class='line'>Fetching version metadata from https://rubygems.org/
</span><span class='line'>Resolving dependencies...
</span><span class='line'>Installing json 2.0.0 with native extensions
</span><span class='line'>Using bundler 1.13.0
</span><span class='line'>Bundle complete! 1 Gemfile dependency, 2 gems now installed.
</span><span class='line'>Use `bundle show [gemname]` to see where a bundled gem is installed.
</span><span class='line'>% bundle exec irb -r irb/completion --simple-prompt
</span><span class='line'>&gt;&gt; require 'json'
</span><span class='line'>=&gt; true
</span><span class='line'>&gt;&gt; JSON::VERSION
</span><span class='line'>=&gt; "2.0.0"</span></code></pre></td></tr></table></div></figure>


<h2>おかしなことが起こる例</h2>

<p>ruby 2.4 だと古い json 1.x が入らない関係で rdoc 4.x が入らなかったので、
ここだけ使用中の ruby 2.3.1 で検証しました。</p>

<h3>準備</h3>

<p>rubygems が古いため、 <code>default:</code> は付いていませんが、 4.2.1 が default gem です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rbenv shell 2.3.1
</span><span class='line'>% echo "gem 'rdoc', '= 5.0.0.beta2'" &gt;&gt; Gemfile
</span><span class='line'>% bundle install
</span><span class='line'>Warning: the running version of Bundler is older than the version that created the lockfile. We suggest you upgrade to the latest version of Bundler by running `gem install bundler`.
</span><span class='line'>Fetching gem metadata from https://rubygems.org/
</span><span class='line'>Fetching version metadata from https://rubygems.org/
</span><span class='line'>Resolving dependencies...
</span><span class='line'>Installing json 2.0.0 with native extensions
</span><span class='line'>Installing rdoc 5.0.0.beta2
</span><span class='line'>Using bundler 1.12.5
</span><span class='line'>Bundle complete! 2 Gemfile dependencies, 3 gems now installed.
</span><span class='line'>Use `bundle show [gemname]` to see where a bundled gem is installed.
</span><span class='line'>% gem list rdoc
</span><span class='line'>
</span><span class='line'>*** LOCAL GEMS ***
</span><span class='line'>
</span><span class='line'>rdoc (5.0.0.beta2, 4.2.1)</span></code></pre></td></tr></table></div></figure>


<h3>rdoc 5 で減ったファイルを探す</h3>

<p>探してみたところ、 <code>rdoc/markdown/literals_1_9.rb</code> が <code>rdoc/markdown/literals.rb</code> に改名されていてなくなっていたのを見つけたので、
これを使っておかしな挙動を確かめてみました。</p>

<h3>bundler 環境下で確認</h3>

<p>bundler 環境下では <code>Gemfile</code> で指定した 5.0.0.beta2 が読み込まれるのがわかります。</p>

<p>ここまでは良いのですが、 5.0.0.beta2 ではなくなっているファイルを <code>require 'rdoc/markdown/literals_1_9'</code> で読み込もうとすると、
default gem の 4.2.1 のファイルが (組み合わせがおかしいので警告が出つつ) 読み込めてしまいます。</p>

<p><code>$LOAD_PATH</code> を確認してみると、そういう挙動になる理由はわかるのですが、増減するファイルによっては何か気づきにくい問題が起きるかもしれません。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% bundle exec irb -r irb/completion --simple-prompt
</span><span class='line'>&gt;&gt; require 'rdoc'
</span><span class='line'>=&gt; true
</span><span class='line'>&gt;&gt; RDoc::VERSION
</span><span class='line'>=&gt; "5.0.0.beta2"
</span><span class='line'>&gt;&gt; require 'rdoc/markdown/literals_1_9'
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/2.3.0/rdoc/markdown/literals_1_9.rb:413: warning: already initialized constant RDoc::Markdown::Literals::Rules
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rdoc-5.0.0.beta2/lib/rdoc/markdown/literals.rb:409: warning: previous definition of Rules was here
</span><span class='line'>=&gt; true
</span><span class='line'>&gt;&gt; puts $LOAD_PATH
</span><span class='line'>/usr/local/Cellar/rbenv/1.0.0/rbenv.d/exec/gem-rehash
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.12.5/lib
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rdoc-5.0.0.beta2/lib
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/json-2.0.0/lib
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/extensions/x86_64-darwin-14/2.3.0-static/json-2.0.0
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/site_ruby/2.3.0
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/site_ruby/2.3.0/x86_64-darwin14
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/site_ruby
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/vendor_ruby/2.3.0
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/vendor_ruby/2.3.0/x86_64-darwin14
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/vendor_ruby
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/2.3.0
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/2.3.0/x86_64-darwin14
</span><span class='line'>=&gt; nil</span></code></pre></td></tr></table></div></figure>


<h3>gem which で確認</h3>

<p><code>gem which</code> でどのファイルが <code>require</code> で読み込まれるのか確認できるので、参考になるかもしれません。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% gem which rdoc/markdown/entities
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/2.3.0/rdoc/markdown/entities.rb
</span><span class='line'>% bundle exec gem which rdoc/markdown/entities
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rdoc-5.0.0.beta2/lib/rdoc/markdown/entities.rb
</span><span class='line'>% bundle exec gem which rdoc/markdown/literals_1_9
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/2.3.0/rdoc/markdown/literals_1_9.rb
</span><span class='line'>% bundle exec gem which rdoc/markdown/literals
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rdoc-5.0.0.beta2/lib/rdoc/markdown/literals.rb</span></code></pre></td></tr></table></div></figure>


<h2>普通は問題にならないであろう問題点</h2>

<p>基本的には Ruby コミッターしか影響しないはずなので、単なるおまけです。</p>

<p>どこに報告すればいいのかわからなかったので、とりあえず gist にメモを書いた (<a href="https://gist.github.com/znz/62946cbb55de4fe58a5101d7875a2ba1">rubygems with multi default gem problem</a>) のですが、Ruby コミッターのように開発版を上書きインストールし続けている環境を持っていると、
default gem として複数バージョンの gemspec を持ってしまうことがあり、実際には後から <code>make install</code> した方しか入っていないので、ダミーの gemspec だけ残っているバージョンを指定した時におかしなことになるという話です。</p>

<p>クリーンインストールしなおすなり、 <code>$(gem env gemdir)/specifications/default</code> の古い gemspec を消すなりすれば良いだけなので、そんなに困る問題でもないです。</p>

<h2>まとめ</h2>

<p>bundled gem と default gem の違いを実際の動作を元に比べてみました。
また、 bundler と組み合わせて問題が起きる可能性がある例をみてみました。
通常の使い方では問題が起きることはないと思いますが、トリビア的に知っておくとおもしろいかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bundled gem と default gem の違い]]></title>
    <link href="http://blog.n-z.jp/blog/2016-09-10-bundled-gem-and-default-gem.html"/>
    <updated>2016-09-10T18:55:55+09:00</updated>
    <id>http://blog.n-z.jp/blog/bundled-gem-and-default-gem</id>
    <content type="html"><![CDATA[<p>RubyKaigi 2016 の後の移動中に hsbt さんに bundled gem と default gem との違いについて聞いてみた話をまとめてみました。</p>

<!--more-->


<h2>違い</h2>

<ul>
<li>bundled gem は単なる gem で gem uninstall もできる普通の gem</li>
<li>default gem は

<ul>
<li>uninstall できない</li>
<li>bundler の <code>clean_env</code> 環境でも見える</li>
<li>bundler で別のバージョンを指定してインストールしていれば、通常の bundler の load path の挙動に従って、そちらが使われる</li>
<li>たとえば ruby 2.3.1 だと <code>lib/ruby/gems/2.3.0/gems/rdoc-4.2.1</code> に <code>bin/rdoc</code> と <code>bin/ri</code> しかなくて他は <code>lib/ruby/2.3.0/rdoc*</code> などの標準添付のところに入っている</li>
</ul>
</li>
</ul>


<p>というような違いだと聞きました。</p>

<p>調べてみたところ、他には</p>

<ul>
<li><code>$(gem env gemdir)/specifications/default</code> に <code>*.gemspec</code> ファイルが入っている</li>
<li>新しい rubygems だと <code>gem list</code> で <code>json (default: 2.0.2)</code> のように <code>default:</code> がつく</li>
</ul>


<p>という違いがあるようでした。</p>

<h2>続く</h2>

<p><a href="http://blog.n-z.jp/blog/2016-09-13-bundled-gem-and-default-gem-more.html">bundled gem と default gem の違いの具体例</a>に続きを書きました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2016 の 3 日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-09-10-rubykaigi-2016.html"/>
    <updated>2016-09-10T09:20:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi-2016</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2016" title="RubyKaigi 2016">RubyKaigi 2016</a> の 3 日目に参加したので、そのメモです。</p>

<!--more-->


<h2>Ruby Committers vs the World 前</h2>

<ul>
<li>コミッターは 9:10 までにコミッター T シャツをきてくるようにという話だったので、ちゃんと間に合うように着きました。</li>
<li>壇上に上がらないと名指しされて逆に目立つ自体発生</li>
</ul>


<h2>Money Forward</h2>

<ul>
<li>urabe さんを雇用している</li>
<li>RubyKaigi 2015/2016 のスポンサー</li>
<li>壇上だと近すぎてスライドが見にくい状態</li>
<li>普通の Rails アプリを普通に作っている</li>
</ul>


<h2>Ruby Committers vs the World</h2>

<ul>
<li>会場から質問受付するので考えておいてください</li>
<li>謝辞</li>
<li>新規コミッター</li>
<li><a href="https://rhe.jp/">rhe さん</a> (不在, openssl)</li>
<li>tadd さん (<a href="https://bugs.ruby-lang.org/issues/12484">Feature #12484 Optimizing Rational</a>)</li>
<li>2.4 に入れたい</li>
<li>MVP (P = Patch)</li>
<li><a href="https://github.com/ruby/ruby/commit/9afc312b4fef21da91fde083f85533ffd5a9d95f">r54737 Support MSVC14 and 15</a></li>
<li>Windows は C ランタイムが開発環境についている</li>
<li>隠されてしまった構造体の中身を見ている</li>
<li><a href="https://github.com/ruby/ruby/commit/d8c3672b012ec6eb55e097162c6c638e8d932471">r55656 undef ISeq.translate</a></li>
<li>昨年 12 月に追加された translate が定義されていれば呼ぶという機能が、意図せずトップレベルに定義されてしまっていても呼んでしまっていた。</li>
<li>リリース後、半年気づかれなかった。</li>
<li>asakusa.rb の <a href="https://twitter.com/takkanm/status/752864847319007236">irb を起動する、action_view を require する、ActionView::Helpers を include する、exit って打つ、楽しい</a> で発見</li>
<li>質問受付</li>
<li>同時通訳が入っているので、同時に二人以上喋らないように注意</li>
<li>Ruby の標準ライブラリを gem に切り出す話の進捗は?</li>
<li>hsbt さん: tk, xmlrpc が gem にして standard library から外れた</li>
<li>ruby コミッター以外でもメンテナンスできるようになった</li>
<li>tarball がちょっと小さくなった</li>
<li>ビルド時間もちょっと減った</li>
<li>2.5 に向けて 2,3 個外したい</li>
<li>質問 (urabe さん): よく使われている gem の話があったが bundler は標準添付になるのか?</li>
<li>drbrain さん: 聞き取れず</li>
<li>質問 (ささださん): Ruby 3 の話はあるが、Ruby 2 で変えたいことはあるか?</li>
<li>matz: 小さい性能改善とかはどんどん入れたい</li>
<li>Integer Unification のようなものは影響範囲をみながら</li>
<li>ささださん : Ruby 3 でなら大きな変更は OK ?</li>
<li>matz: 多くのコードを書き換えないといけないような変更は入れたくない</li>
<li>naruse さん : Windows の external encoding を utf-8 にしたい</li>
<li>西島さん : frozen string literal のデフォルト化?</li>
<li>matz: 2.3 でプラグマを入れたが frozen string literal がデフォルトになると Python 3 の二の舞になりそう</li>
<li>matz: Python 3 を見習いたいところはあるので Python 3 を dis っているつもりはない</li>
<li>akr さん: 会場アンケート</li>
<li>プラグマをちゃんと書いている人 : ぱらぱらといる程度</li>
<li>みんな書いて面倒と思われたらデフォルトになるのでは</li>
<li>今の感じだとまだ無理そう</li>
<li>質問: 聞き取れず</li>
<li>naruse さん : github に移るのは難しい (理由は聞き取れず)</li>
<li>svn から git に移行する時にツールを直さないといけないが、そのリストアップがされていない</li>
<li>matz: 中央の repository が github になったとしても github issues を使う予定はない</li>
<li>すでに redmine を使っているので</li>
<li>github の社員の aaron さん : 聞き取れす</li>
<li>naruse さん : 聞き取れず</li>
<li>Yugui さん : ML 連携を書いた責任を感じているので何かしたい</li>
<li>urabe さん : 全容把握が必要</li>
<li>matz : git に移行するとしても年単位でかかりそう</li>
<li>すでに github で pull request も受け付けているし、 git svn を使っている人も多いので、中央レポジトリを移行する嬉しさがあまりない</li>
<li>会場: Ruby3 で変えていきたいとか入れたいとかあるか? こういう人がコミッターになったら嬉しいとかある?</li>
<li>ko1 さん: 並行性に対するサポートを入れたいし accept して欲しい</li>
<li>実装がめちゃくちゃ大変なので手伝ってくれる人が欲しい</li>
<li>matz: やりたいことの 3 つの柱の 1 つなので何かしらのものは入れたい</li>
<li>takano32 さん (IA64メンテナ): bundler</li>
<li>matz: Python 3 で見習わないのは大きな非互換を入れたところだけ</li>
<li>takano32 さん: rbenv?</li>
<li>nobu さん: rbenv は ruby の外側なので ruby に入っても嬉しくないのではないか</li>
<li>a_matsuda さん: その通りだと思う</li>
<li>urabe さん: Python のように C にうまく translate するものがあれば良いのではないか</li>
<li>mrkn さん: 速度向けではなく、拡張ライブラリを楽に書きたい人向けではないか</li>
<li>標準に入るかどうかはわからない</li>
<li><code>rb_define_method</code> や typed data を毎回書くのが面倒</li>
<li>nobu さん: そういうパターンで書くところはテンプレートで支援しても良いかも</li>
<li>ko1 さん: 以前に似たものを提案したことがある</li>
<li>C 言語以外に中間言語を新しく勉強するのが大変という反対意見があった</li>
<li>実際のものを評価して判断したい</li>
<li>kou さん: 拡張ライブラリをよくかく</li>
<li>普通の関数だけで書かれるのがわかりやすくて良いので変なマクロが増える方向だと反対</li>
<li>Yugui さん: 会場アンケート</li>
<li>拡張ライブラリを書いたことがある人 : それなりにいる</li>
<li>辛い人 : そんなにいない</li>
<li>会場: 拡張ライブラリを書いているが、慣れれば普通の C (CRuby 用) と Java (JRuby 用) なので便利</li>
<li>extension.rdoc がわかるようになるころには、ソースを直接読むほうがはやい</li>
<li>Yugui さん: doxygen コメントを入れる機能があるので活用してください</li>
<li>どんなコミッターが欲しいかという話に戻った</li>
<li>ko1 さん: 平均年齢が上がっていっているので、若い人が欲しい</li>
<li>気軽に聞いてください</li>
<li>hsbt さん: GSoC など、サポートをうまく活用してください</li>
<li>mrkn さん: 会場アンケート: Ruby のコミッターになっていじりたいところがある人: 数人いる</li>
<li>会場 (joker1007 さん): キーワード引数の扱いの話</li>
<li><code>**</code> だけではなく名前をつけたものも一緒になった <code>Hash</code> が欲しい</li>
<li>(twitter によると <a href="http://qiita.com/joker1007/items/708af8eb5c217bf23e09" title="[小ネタ] Rubyのキーワード引数で受け取った値をHashとしてまとめて取得するgem">[小ネタ] Rubyのキーワード引数で受け取った値をHashとしてまとめて取得するgem</a> のことではないかという話)</li>
<li>a_matsuda さん: feature request を再プッシュ</li>
<li>naruse さん: 見つからなければ重複とマークされるだけなので再作成でも良い</li>
<li>会場: 英語なのでよくわからず</li>
<li>drbrain さん: 英語なのでよくわからず</li>
<li>aaron さん: 英語なのでよくわからず</li>
<li>時間がないので後で</li>
<li>会場: 英語なのでよくわからず</li>
<li>matz: 英語なのでよくわからず (CoC の話?)</li>
<li>naruse さん: 最後に: 壇上で Ruby 2.4.0-preview2 がリリースされたことをアナウンス</li>
</ul>


<h2>Web Clients for Ruby and What they should be in the future</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/tkawa.html" title="Web Clients for Ruby and What they should be in the future - RubyKaigi 2016">Web Clients for Ruby and What they should be in the future - RubyKaigi 2016</a></li>
<li>最初のセッションが伸びたので残りの午前のセッションは 5 分遅れ (昼休みで調整するのは昨日と同じらしい)</li>
<li>自己紹介など</li>
<li><a href="http://amzn.to/2cMkz1U">RESTful Web APIs</a> → <a href="http://amzn.to/2bYPjYC">Restful Web Clients</a></li>
<li>ユーザーが操作する Web API</li>
<li>こんなクライアントは嫌だ: 密結合</li>
<li>こんなクライアントが好き: 疎結合</li>
<li>例: FizzBuzzaaS : FizzBuzz as a Service</li>
<li>パラメーターをつけた URL 直指定は密結合</li>
<li>link next で疎結合</li>
<li>Ruby の HTTP クライアント: net/http, open-uri</li>
<li>gem はたくさん: 大江戸HTTPクライアント絵巻 <a href="http://regional.rubykaigi.org/oedo01/">http://regional.rubykaigi.org/oedo01/</a></li>
<li>Web API は使うのが簡単なので普及した</li>
<li>Web API ごとの gem もたくさんある</li>
<li>RPC でいいんじゃないか?</li>
<li>なぜ個別の gem がたくさんできるのか?</li>
<li>API呼び出し (1回) と機能の呼び出しにはギャップがある</li>
<li>HTTP クライアントは状態を持たないが、アプリは状態を持つ</li>
<li>私が欲しいクライアントは状態管理ができるクライアント</li>
<li>ここでは状態管理ができるクライアントを Web クライアントと呼ぶ</li>
<li>クライアントとサーバーのレイヤーの話</li>
<li>Rack, Rack Middleware : 玉ねぎ</li>
<li>Faraday: Rack Middleware のように Faraday Middleware がある</li>
<li>gem を丸ごと作るのではなく Faraday Middleware として作る</li>
<li><a href="https://github.com/tkawa/faraday-hypermedia">https://github.com/tkawa/faraday-hypermedia</a></li>
<li>faraday-navigation</li>
<li>Link Header: RFC 5988</li>
<li>Link-Template Header: Internet Draft (expired)</li>
<li>faraday-link-extractor</li>
<li><code>navigation:</code> を拡張</li>
<li>デモ動画: 文字が小さくてよく見えないので雰囲気で見ていた</li>
</ul>


<p>Faraday は名前は見たことがあって、よく使われているのかなという印象はあり、具体的にどういうものかは知らなかったのですが、便利そうでした。</p>

<h2>High Tech Seat in mruby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/yuri_at_earth.html" title="High Tech Seat in mruby - RubyKaigi 2016">High Tech Seat in mruby - RubyKaigi 2016</a></li>
<li>Sessalet (せされっと) : SESSAME (コミュニティ名) + Washlet</li>
<li>SESSAME: 組込みソフトウェア管理者・技術者育成研究会</li>
<li>組込みソフトウェア技術者・管理者向けセミナー ～ソフトウェアに変換可能な仕様書がきちんと書けるようになろう～</li>
<li>なぜ Sessalet? : 状態が入れ子になっている、直交状態をもつ</li>
<li>翻訳の揺れ: State Machine Diagram, entry, trigger</li>
<li>遷移が正しくない図、開始状態がない図はよくない</li>
<li>Sessalet Analysis Model</li>
<li>RTOS : EV3RT</li>
<li>TOPPERS Project</li>
<li>mruby をどう使っているかという話</li>
</ul>


<p>他の作業をしながら聞いていたのであまりメモをとれませんでした。</p>

<h2>Lunch Break</h2>

<h2>Recent Advances in HTTP and Controlling them using ruby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/kazuho.html" title="Recent Advances in HTTP and Controlling them using ruby - RubyKaigi 2016">Recent Advances in HTTP and Controlling them using ruby - RubyKaigi 2016</a></li>
<li>いっぱいだったので通路に座っていました。</li>
<li>自己紹介</li>
<li>h2o は fastly でも使われている</li>
<li>(プレゼンにはなかったけど fastly は www.ruby-lang.org でも使われている)</li>
<li>Current State of HTTP</li>
<li>なぜ HTTP/2 を使うのか?</li>
<li>ボトルネックがバンド幅からレイテンシーに変わってきた</li>
<li>3割ぐらいのサーバーが HTTP/2 (RFC 7540) に対応している</li>
<li>https への移行も進んでいる</li>
<li>HPACK (ヘッダー圧縮): いい感じ</li>
<li>多重化と優先順位付け</li>
<li>Push: ネガティブなコメントもあり</li>
<li>理想的な HTTP トランザクションの流れ</li>
<li>現実はできていない</li>
<li>TCP head-of-line blocking : 優先度の低いデータが滞留しているため、優先度の高いデータが送れない問題</li>
<li>直ちに送れるデータ量 CWND のサイズが Web サーバーがわからないので、バッファいっぱいまで書いてしまう</li>
<li>最適化できる</li>
<li>最適化した結果のベンチマーク</li>
<li>HTTP/2 の優先順位付け</li>
<li>クライアントが指定した順位を参考にしてサーバーが送信</li>
<li>Firefox の場合、CSS や JS  を優先して、残りは HTML と画像 (HTML をちょっと優先)</li>
<li>Safari, Blink はすべて同じなので、数の多い画像がたくさん帯域を使ってしまう</li>
<li>頭の悪いクライアントにはサーバー側で対処する必要がある</li>
<li>解決策、ベンチマーク</li>
<li>Hidden resource</li>
<li>CSS の <code>@import</code> の前に画像があると CSS のリクエストの前に画像を取りに行ってしまう</li>
<li>コンテンツ側で対処する必要あり</li>
<li>Push</li>
<li>How to Push: <code>Link: &lt;/style.css&gt;; rel=preload</code> ヘッダが w3c で仕様策定中</li>
<li>リクエスト処理中にプッシュする方法</li>
<li>H2O の場合 <code>100 Continue</code> という中間レスポンスで <code>Link</code> ヘッダーを送って最終的に <code>200 OK</code> などを返すという方法がある</li>
<li>H2O の設定に <code>mruby</code> で記述</li>
<li>RUM = Real User Monitoring</li>
<li>Push vs. cache</li>
<li>キャッシュ済みのリソースは無駄なので送信したくない</li>
<li>Cookie を使う: すでに動く</li>
<li>cache-digest を使う: ServiceWorker Script がブラウザーに必要</li>
<li>push の悪影響を避ける話</li>
<li>CSS, JS は push すると良さそうだが、画像は push しない方が良さそう</li>
<li>まとめ</li>
<li>質疑応答</li>
<li>質問1: <code>100 Continue</code> の実績はあるのか?</li>
<li><code>unicorn</code> とかで実際に試したという話はまだなさそう</li>
<li>質問2: ロードバランサーで動かない問題</li>
<li>TCP HoL blocking は原理的に回避不可能</li>
<li>QUIC が普及すれば、原理的に (L4?) ロードバランサーが使えないので、解決するか</li>
</ul>


<p>基本的にはサーバーやブラウザーの実装が頑張ってくれて、アプリケーション作成者としては hidden resource あたりに気をつけるだけで良い感じにしてくれるようになるのかもしれない。</p>

<h2>Optimizing Ruby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/shyouhei.html" title="Optimizing Ruby - RubyKaigi 2016">Optimizing Ruby - RubyKaigi 2016</a></li>
<li>自己紹介</li>
<li>Ruby is slow と言われている</li>
<li>GC? GVL? dynamic? ではない</li>
<li>脱最適化されていないから</li>
<li>コンパイル時に <code>1 + 2</code> が <code>3</code> にできない</li>
<li><code>Integer#+</code> が再定義される可能性があるから</li>
<li>普通は再定義されない</li>
<li>常に遅いのと、再定義されていないときは速いけど再定義されると遅くなるのはどっちがいいか</li>
<li>脱最適化は <code>SELF</code> という Smalltalk の variant がオリジナルで、開発者の関係で今は JVM に入っている</li>
<li>JIT コンパイルはしない</li>
<li>VM 命令を変換するだけ</li>
<li>命令の長さは変えない (必要なら nop で埋める)</li>
<li><code>iseq_encoded</code> を <code>iseq_deoptimize</code> に <code>memcpy</code> しておく</li>
<li><code>created_at</code> も追加</li>
<li>脱最適化は <code>iseq_deoptimize</code> を <code>iseq_encoded</code> に <code>memcpy</code> して戻す</li>
<li>C 言語のみなのでポータブル</li>
<li>プログラムカウンターをいじらない</li>
<li>VM timestamp で再定義の検出</li>
<li>ほとんどオーバーヘッドがない</li>
<li>ここまでのまとめ</li>
<li>これで最適化ができるようになった</li>
<li>定数の畳み込み</li>
<li>Folding 1 + 2</li>
<li>send の最適化</li>
<li>呼び出した後、すぐに値が捨てられるものを削除</li>
<li>「pure」なメソッドというのを考える</li>
<li>pure ではないメソッドの例</li>
<li>pure なメソッドの例 (ちょっと複雑な例として、left-pad、ライプニッツの公式)</li>
<li>決まらないという第三の状態がある (<code>method_missing</code> が発生するようなものとか)</li>
<li>最初は未定にしておき、実行中に決めていくようにした</li>
<li><code>callcache</code> に保存</li>
<li>呼び出され方も影響する</li>
<li>メソッドの返り値が使われていたら最適化しない</li>
<li>引数の中に最適化できないメソッド呼び出しがあったら、そっちは残すように調整が必要</li>
<li>変数の最適化</li>
<li>厳密に判定するのは難しいので、あらかさまに不要な代入されて使われていない (write-only) 変数を最適化する</li>
<li><code>binding</code> とかブロック (<code>binding</code> が勝手につく) があると最適化できない</li>
<li>ここまでのまとめ</li>
<li>基本的な最適化しかしていない</li>
<li>例外などに影響しないようにしている</li>
<li>まだまだ他の最適化をする余地がある</li>
<li>ベンチマーク</li>
<li>速くなったものはすごく速くなったが遅くなったものはさほどでもない</li>
<li>まとめ</li>
<li>FAQs</li>
<li><a href="https://github.com/ruby/ruby/pull/1419">https://github.com/ruby/ruby/pull/1419</a></li>
<li>質疑応答</li>
<li>質問1: メモ取れず</li>
<li>質問2: メソッドが pure かどうか知るメソッドはあるか?</li>
<li>デバッグに必要だったのである</li>
<li>実行ごとに変わる可能性がある</li>
<li>質問3: メモリー使用量は?</li>
<li>評価していないが、減っているはずはないので多少増えているはず</li>
<li>質問4: メモ取れず</li>
<li>Rails アプリなどの大きなものでの評価はまだ</li>
<li>質問5: fork の CoW への影響は?</li>
<li>fork のことは頭になかったが影響があるかも</li>
<li>他の JIT でも同じなので、あたたまってから fork するとか</li>
<li>質問6: シーケンスが長くなる最適化は?</li>
<li>VM のスタックの調整が必要なのでなんとかという話</li>
<li>質問7: <code>+</code> が pure なのはどうやって判定している?</li>
<li>特別扱いしている</li>
<li>質問8: Thread ? (英語で長いのでよくわからず)</li>
<li>質問9: ローカル変数で write-only な変数はそもそもいらないので警告を出してほしい</li>
<li><code>eval</code> などで使われる可能性があるので、完全になくすのはできない</li>
<li>警告だけなら良いかも</li>
<li>ko1 さん: 警告だけならすでに <code>-w</code> オプションで出る (<code>warning: assigned but unused variable</code>)</li>
</ul>


<h2>Afternoon Break</h2>

<h2>Hijacking syscalls with (m)ruby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/franckverrot.html" title="Hijacking syscalls with (m)ruby - RubyKaigi 2016">Hijacking syscalls with (m)ruby - RubyKaigi 2016</a></li>
<li>どっちも英語なのでどちらにしようか悩みましたが、こっちにしました。</li>
<li>Afternoon Break でのんびりしていたらすでに始まっていたので、最初の方は少し見逃しました。</li>
<li>system call の説明</li>
<li>Chaos Monkey</li>
<li>Securing Ruby apps</li>
<li>Library preloading</li>
<li>(m)ruby</li>
<li>mruby を External DSL として使う</li>
<li><code>super</code> でオリジナルの system call を呼ぶ</li>
<li>あんまり聞いていなかった。</li>
<li>質疑応答は質問なしで終了</li>
</ul>


<h2>cookpad</h2>

<ul>
<li>基調講演前にスポンサーセッション</li>
</ul>


<h2>Dive into CRuby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/nalsh.html" title="Dive into CRuby - RubyKaigi 2016">Dive into CRuby - RubyKaigi 2016</a></li>
<li>自己紹介</li>
<li>貢献したいモチベーション</li>
<li>なぜ新機能を追加したいか?</li>
<li>実際どういうコードで使いたいかという例 (use case) が必要</li>
<li>顧客が本当に必要だったもの</li>
<li><a href="https://bugs.ruby-lang.org/issues/6752">Feature #6752 Replacing ill-formed subsequence</a></li>
<li>Case: Web Forms: 400 Bad Request でいいのでは。</li>
<li>Case: Files: 無理矢理読むのは間違っている。適切なエンコーディングを指定すべき。</li>
<li>Case: Web Crawler: 実際の Web ページが壊れているので無理矢理読むことしかできない。</li>
<li>例: twitter</li>
<li>RT の初期の切り詰めがバグっていて、尻切れとんぼなバイト列ができたのではないか</li>
<li>iconv を使っている人がいた</li>
<li><code>String#encode</code> (encode エンジンベース) と <code>String#scrub</code> (正規表現ベース) の両方を作った</li>
<li><code>scrub</code> という名前は zfs の修復コマンドが由来</li>
<li>CRuby のファイル一覧紹介</li>
<li>NOTE: cygwin はメンテナがいないので募集中</li>
<li><code>string.c</code> に <code>str_scrub</code> を追加</li>
<li><code>str_scrub</code> の説明</li>
<li><code>rb_str_scrub</code>, <code>rb_enc_str_scrub</code> とたどっていく</li>
<li><a href="https://bugs.ruby-lang.org/issues/7361">Feature #7361 Pathname#touch</a> reject された悪い例</li>
<li>「アクセス日時と変更日時を変更する」という機能と「空のファイルを作成する」という機能がある</li>
<li>(<code>FileUtils.touch</code> はあるのに、と思った覚えが)</li>
<li><a href="http://amzn.to/2c1vKnu">API デザインケーススタディ</a></li>
<li>LLVM の clang (llvm-gcc を含む) はほぼ gcc と同じだが違う部分があるので対応が必要だった</li>
<li>Ruby は保守的な GC なので、最適化で消されると困ることがある</li>
<li>continuation で問題が起きた (<a href="https://github.com/ruby/ruby/commit/ca227314390b75a59f718618281ab5f7dfa184c4">r34278</a>)</li>
<li>原因を調べるのが大変だった</li>
<li>Visual C++ 2015</li>
<li>Windows だとファイルとソケットの扱いが違う</li>
<li>Unix のように統一的に扱うのは C ランタイム側の機能だった</li>
<li>その中身の <code>_pioinfo</code> を直接さわっていたが、公開されなくなった</li>
<li>ヘッダーファイルに公開されなくても DLL の中にはある</li>
<li><code>_isatty</code> の機械語の <code>_pioinfo</code> を触ってるっぽい部分のアドレスをとって <code>_pioinfo</code> を探し出す</li>
<li>入れるかどうか1年ぐらい悩んだが、 VC++ 2016 でも解決しそうになかったので入れた</li>
<li>DLL の名前がデバッグ版だと違う</li>
<li>こんなダメダメなコードなのに修正のパッチを送ってくれる人がいた! OSS すごい!</li>
<li>パフォーマンス改善の話</li>
<li>NewRelic で bugs.ruby-lang.org のプロファイルが取れる</li>
<li>ボトルネックがないと最適化が難しい</li>
<li>とりあえず 0.5% の <code>String#blank?</code> を速くする</li>
<li><code>Regexp#match?</code>: <code>MatchData</code> オブジェクトを作らずにマッチするかどうかだけ判定するメソッド</li>
<li>Note: Perl も似た最適化がある</li>
<li>SSE 4.2 STTNI: 16 バイトごとに処理する</li>
<li>最後の末尾の部分で読み込めない部分を踏むと SEGV するので、末尾処理が大変</li>
<li>RubyVM を改善する話</li>
<li>Ruby の layer にボトルネックがないので C の layer で探す</li>
<li>perf-top で optcarrot や fluentd を計測</li>
<li><code>vm_exec_core</code>, <code>vm_search_method</code> が top 2</li>
<li>分岐予測</li>
<li>CPU が新しいもので比べるだけで改善</li>
<li>NOP 命令が翻訳された機械語を見ると若干無駄なことをしている</li>
<li><code>opt_plus</code></li>
<li>Fixnum + Fixnum の最適化は説明に時間がかかるので詳細は省略</li>
<li>JIT はホットスポットがないと効果がない</li>
<li>Register machine <a href="https://bugs.ruby-lang.org/issues/12589">Feature #12589</a></li>
<li>Debugging / Profiling / (メモできず)</li>
<li><a href="https://github.com/frsyuki/sigdump">frsyuki/sigdump</a> でデーモンでもシグナルでスタックダンプとか取れる</li>
<li>strace with CRuby</li>
<li>futex が並んでいるのは timer thread が切り替えようとしているだけで正常な処理なので情報がない</li>
<li>procfs での情報の取り方の説明: EIP からたどる</li>
<li>簡単にできるように <a href="https://gist.github.com/nurse/0619b6af90df140508c2">pid2line.rb</a> を作った</li>
<li>最近の Ubuntu では sudo が必要</li>
<li>SEGV: Segmentation fault</li>
<li>バグ報告するときは最初から最後まで貼り付けてください</li>
<li>C level backtrace では DWARF などのデバッグ情報を使って非公開の関数でも名前をとっている</li>
<li>core file: 情報が詰まっている</li>
<li>前提条件として Linux では Ruby の Thread が pthread の thread、さらに OS の lwp と1対1対応している話</li>
<li><code>ruby_current_vm</code> から辿れる話</li>
<li><code>.gdbinit</code> という便利スクリプトの紹介</li>
<li><code>rb_ps_thread</code></li>
<li>まとめ</li>
<li>ユースケース (現実の例) を収集しよう</li>
<li>現実のアプリケーションのボトルネックを知ろう</li>
<li>時間オーバーしているけど少しだけ質疑応答</li>
<li>質問1: パッチを送ったときに反応がない場合は?</li>
<li>matz をつつけば良い、urabe さんやなるせさんでも良い</li>
<li>開発者会議の Wiki にのせてもらえれば議論にのる</li>
<li>質問2 (ko1 さん): twitter をみているとレベルが高いので無理と思っている人がいる</li>
<li>趣味の話なのでこういう話ができないとコミッターになれないというわけではない</li>
<li>興味の分野はみんな違うので、他の人が興味がなさそうな分野が良い</li>
<li>openssl の rhe さんが良い例</li>
<li>隙間はたくさんあるのでいろいろ出すと良い</li>
<li>質問3(urabe さん): <code>.gdbinit</code> を便利に使っているが、<code>.gdbinit</code> のデバッグはどうやっている?</li>
<li>手で直している</li>
<li>akr さん: Python で書き換えるのはどうか?</li>
<li>Mac のような LLVM 環境で使えないという問題もある</li>
<li>sorah さん(?)と: GUI があって便利という話</li>
</ul>


<p>面白かったけど、みんなついていけてたんだろうかという話も。</p>

<h2>Closing</h2>

<ul>
<li>Closing の前に落し物の案内</li>
<li>(今年も参加者数のスライドとかはあったので Togetter まとめの方をみると載ってるかも)</li>
<li>来年の情報はなし</li>
</ul>


<h2>Togetter まとめ</h2>

<p>昨日のメモと同じく、<a href="http://togetter.com/li/1022255" title="資料も反響もすべてチェック！ 京都で3倍広くなった #RubyKaigi 2016 まとめまとめ - Togetterまとめ">資料も反響もすべてチェック！ 京都で3倍広くなった #RubyKaigi 2016 まとめまとめ - Togetterまとめ</a> があるので、個別のまとめへのリンクは省略しました。</p>

<h2>The RubyKaigi 2016 After Party &amp; Lightning Talks!</h2>

<p><a href="https://rubykaigi.doorkeeper.jp/events/51800" title="The RubyKaigi 2016 After Party &amp; Lightning Talks!">The RubyKaigi 2016 After Party &amp; Lightning Talks!</a> は多分スタッフの片付けの時間の都合からだと思いますが、20:15 からという遅い開始時間なので、しばらく空き時間がありました。</p>

<p>時間が足りないぐらいずっと LT をしていたので、特に懇親会的な時間はなくて、話をする人は LT を聞かずに話をしていたような感じでした。</p>

<p>トイレに行ったり飲み物のおかわりをもらいに行ったりしている間、少し聞けないものがあったぐらいで、ほぼ全て聞いていたので、話はできませんでした。</p>

<p>話の内容自体も面白いものが多くて良かったのですが、Unicode に SNOWMAN WITHOUT SNOW という文字があるとかそういう本筋と関係ないところも印象に残りました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2016 の 2 日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-09-09-rubykaigi-2016.html"/>
    <updated>2016-09-09T09:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi-2016</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2016" title="RubyKaigi 2016">RubyKaigi 2016</a> の 2 日目に参加したので、そのメモです。</p>

<!--more-->


<h2>予習</h2>

<p>途中で知ったのですが、<a href="http://qiita.com/ya_ma23/items/e45404ca066b069efe05">RubyKaigi2016の予習（Day 2）</a>というのがあるようです。</p>

<h2>Door Open</h2>

<ul>
<li>早めに着いたのでメインホールでのんびりしていた。</li>
<li>開始前の待ち時間に少しの間「Surgical Refactors」というのが出ていたのは発表者のプロジェクターのテストっぽい感じだった。</li>
</ul>


<h2>Fearlessly Refactoring Legacy Ruby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/searls.html" title="Fearlessly Refactoring Legacy Ruby - RubyKaigi 2016">Fearlessly Refactoring Legacy Ruby - RubyKaigi 2016</a></li>
<li>自己紹介</li>
<li>発音が難しいので日本語でジュースさん</li>
<li>スクリーンサイズ: 16x9, 4x3, Ruby3x3 なので 3x3</li>
<li>early success と later success</li>
<li>レガシーコードのリファクタリングの話</li>
<li>refactor と legacy code という言葉の定義の確認</li>
<li>Business Priority と Cost/Risk の2軸で New Features, Bug Fixes, Testing, Refactoring を分類</li>
<li>Refactoring is hard to sell</li>
<li>Refactors are scary</li>
<li><ol>
<li>Refactoring Patterns</li>
</ol>
</li>
<li>リファクタリング Ruby Edition</li>
<li><ol>
<li>Characterization Testing</li>
</ol>
</li>
<li><ol>
<li>A/B Testing / Experiments</li>
</ol>
</li>
<li>Development, Testing, Staging, Production 全てをいい感じにするツールがないので作った</li>
<li>Talk-Driven Development</li>
<li><a href="https://github.com/testdouble/suture">https://github.com/testdouble/suture</a></li>
<li>9 Features : Plan, Cut, Record, Validate, Refactor, Verify, Compare, Fallback, Delete</li>
<li>Bug Fix の例</li>
<li>pure function は簡単だが状態を持つものは難しい</li>
<li>データベース (sqlite3) に記録するの話</li>
<li>Guilded Rose Kata</li>
<li>データベースに保存した値と verify</li>
<li>Coverage</li>
<li>Refactoring</li>
<li>同じ挙動をする新しいメソッドを定義</li>
<li>verify</li>
<li>間違った record を削除</li>
<li>Custom Comparators</li>
<li>Random seed の話</li>
<li>configuration</li>
<li>Development と Testing は良い感じにできた。</li>
<li>Staging や Production を良い感じにするには?</li>
<li>Compare: <code>call_both</code></li>
<li>Fallback : Make change safe for users</li>
<li><code>fallback_on_error</code>: 新しい方でエラーが起きたら古い方を使う</li>
<li>Delete : Record のところで記録したデータと Suture 関連の追加したコードを削除</li>
<li>ひこにゃん</li>
<li>質疑応答の前に CM</li>
</ul>


<h2>スポンサーセッション PIXTA</h2>

<ul>
<li><a href="https://pixta.jp/">https://pixta.jp/</a></li>
</ul>


<h2>Fearlessly Refactoring Legacy Ruby の質疑応答</h2>

<ul>
<li>質問1 : 聞き取れず</li>
<li>使っている、使ってみてくださいみたいな回答</li>
<li>質問2,3 : 聞き取れず</li>
<li>CI でも動いているとかなんとか</li>
<li>質問は日本語でも OK</li>
<li>質問4 : 新機能を追加するときには使えるか?</li>
<li>挙動が変わっていないのを確認するのに使えるとかいろいろ言っていたが聞き取れず</li>
<li>質問5 : develop yourself?</li>
<li>聞き取れず</li>
<li>質問6 (Martin 先生) : 聞き取れず</li>
<li>聞き取れず</li>
<li>質問7 : 聞き取れず</li>
<li>聞き取れず</li>
<li>日本語で質問8 : リファクタリングで発生したテストコードは残すべきか?</li>
<li>聞き取れず</li>
<li>質問9 : 聞き取れず</li>
<li>グローバル変数とか副作用とかの話</li>
</ul>


<p>全体的にセッションの英語は聞き取りやすかったのですが、メモを取りながらだと難しかったです。
質疑応答になるとスライドによる補助情報もないのでさらに厳しかったです。</p>

<h2>Intermission</h2>

<ul>
<li>落し物案内</li>
</ul>


<h2>How to create bindings 2016</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/ktou.html" title="How to create bindings 2016 - RubyKaigi 2016">How to create bindings 2016 - RubyKaigi 2016</a></li>
<li><a href="https://slide.rabbit-shocker.org/authors/kou/rubykaigi-2016/">https://slide.rabbit-shocker.org/authors/kou/rubykaigi-2016/</a></li>
<li>Rabbit 2.2.0</li>
<li>Ruby をもっといろんな場面で使えるようにするため、バインディング開発者になりませんか</li>
<li>会場アンケート</li>
<li>バインディング作ったことがある 20人ぐらい</li>
<li>今もメンテナンスしている 10人ぐらい</li>
<li>バインディングを知らない 60人ぐらい</li>
<li>作ろうと思ったことがない 多い</li>
<li>最初に自動生成のデモ</li>
<li>gi: GObject-Introspection</li>
<li><code>WebKit::WebView</code> で <a href="http://rubykaigi.org/2016">http://rubykaigi.org/2016</a> を表示してスクリーンショット (<code>get_snapshot</code>) をとって別 window に表示していた。</li>
<li>拡張ライブラリの話</li>
<li>libffi の話</li>
<li>自動生成がオススメ</li>
<li>SWIG と GI の比較</li>
<li>SWIG はビルド時に自動生成</li>
<li>GI は実行時に自動生成</li>
<li>SWIG の .i は各言語でメンテナンスが必要</li>
<li>GI は共通のアノテーションをメンテナンス</li>
<li>OSS Gate などの紹介</li>
<li>質疑応答</li>
<li>質問1: オブジェクトを渡す話</li>
<li>スクリーンショットの例だと rcairo とかが良い感じに変換してくれる</li>
<li>GI のアノテーションで指定している(?)</li>
<li>質問2: Mac で動くか</li>
<li>Mac でも動く</li>
<li>質問3 (大林さん): GUI は登場人物が増えてトラブルシューティングが大変ではないか?</li>
<li>私ぐらいになれば大丈夫</li>
<li>質問4 (大林さん): SWIG は昔使ったことがあるが .i は共通ではないのか?</li>
<li>単純なケースだと共通でいけるが、結局現実的なものを作るときは各言語になる</li>
<li>質問5 (後藤さん?): 標準添付の fiddle と dl2 を使っていないのはなぜか?</li>
<li>使いにくいから</li>
<li>機能が足りない</li>
<li>質問6: GI は動的にバインディングが作られるということは大きいライブラリは読み込みに時間が掛かる?</li>
<li>実演</li>
<li>(運営から割り込み: B が遅延しているので 10 分余裕ができた)</li>
<li>パフォーマンスについて</li>
<li>質問7 (自分): <code>hello_message</code> が返す文字列のメモリ管理は?</li>
<li><code>const char*</code> を返している、つまりメモリ管理は <code>Hello</code> 側の債務</li>
<li>質問8 (ささださん): (メモを書いていたので聞いてなかった)</li>
<li>ドキュメントを書けば動くようになっている</li>
</ul>


<h2>How DSL works on Ruby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/hsbt.html" title="How DSL works on Ruby - RubyKaigi 2016">How DSL works on Ruby - RubyKaigi 2016</a></li>
<li><a href="http://www.slideshare.net/hsbt/how-dsl-works-on-ruby">http://www.slideshare.net/hsbt/how-dsl-works-on-ruby</a></li>
<li>大人気で椅子に座れなかったので通路に座って聞いていました。</li>
<li>自己紹介</li>
<li>Rake : Make in Ruby</li>
<li><code>-j</code> オプションはあるが大多数のタスクは実行時間が変わらないだろう</li>
<li><code>FileList</code> でファイルグロブや <code>exclude</code> を扱える</li>
<li><code>Rake::TestTask</code> でテスト実行用のタスクが簡単に作れる</li>
<li><code>rdoc</code> 用のタスクが昔は <code>rake</code> の方に入っていたが今は <code>rdoc</code> の方に入っている</li>
<li><code>Minitest</code>, <code>Test::Unit</code> 用の <code>Rake::TestTask</code> だけ歴史的経緯で <code>rake</code> に残っている</li>
<li><code>Rake</code> は 0.9 から 10.0 に一気に上がった</li>
<li>SemVer</li>
<li>rake は現在は <a href="https://github.com/ruby/rake">https://github.com/ruby/rake</a> が upstream</li>
<li>rails が依存している gem がよく使われている gem だがその中でも少し使われている数が多い</li>
<li>DSL の話</li>
<li>いろいろな DSL の Pattern 紹介</li>
<li>DSL の前提知識終わり、今までの知識で DSL が作れるはず</li>
<li>具体的な DSL の実装を見ていく</li>
<li><code>Rake.application.run</code></li>
<li><code>rakefile</code>, <code>Rakefile</code>, <code>Rakefile.rb</code>, <code>rakefile.rb</code> に対応している</li>
<li>bundler が 2 で <code>Gemfile</code> の代わりに <code>gemfile</code> がデフォルトになるという話があるらしい?</li>
<li><code>rake -P</code></li>
<li><code>lib/rake/dsl_definition.rb</code> の <code>Rake::DSL</code> は短いのでみてみると良い</li>
<li><code>Rake::Task</code> と <code>Rake::TaskManager</code></li>
<li><code>Capistrano::Application</code> は <code>Rake::Application</code> を継承しているので capistrano 3 以降は rake の拡張</li>
<li><code>Thor</code> を継承したクラスで DSL が使える</li>
<li><code>Bundler::CLI</code> が <code>Thor</code> を継承したクラス</li>
<li>CM: minne</li>
<li>Apple Pay 対応予定</li>
<li>関わってないけどラップ?</li>
<li>Long live the Rake</li>
<li>JRuby の互換性問題</li>
<li><code>Dir.chdir</code> すると <code>sh</code> の挙動が変わるとか</li>
<li>Rake 11</li>
<li>deprecated メッセージを出さずに <code>TaskManager#last_comment</code> を消したら問題が起きたので戻した話</li>
<li><code>hoe</code> gem から bundler のタスクを使うように書き換えた</li>
<li><code>verbose</code>, <code>deps</code> は時間がないので省略</li>
<li>Rake 12</li>
<li>コア数をとる処理に <code>sysctl</code> を使っているのをやめて <code>Etc.nprocessors</code> (Ruby 2.2 以降依存) を使うようにしたい</li>
<li>コード減らしたい</li>
<li><code>class Object</code> 汚染を減らしたい</li>
<li>質疑応答</li>
<li>質問: DSL を触っているとどのクラスなのかどのインスタンスなのか悩むとか, 何か tips はないかいう話</li>
<li>僕も知りたい</li>
<li>Ruby DSL book (と言っていたように聞こえたが <a href="http://clean-ruby.com/dsl" title="Ruby DSL Handbook">Ruby DSL Handbook</a> かも) をオススメ</li>
<li>既存の DSL を実装した gem を読む</li>
</ul>


<h2>Lunch Break</h2>

<ul>
<li>今日は <a href="http://agile.esm.co.jp">http://agile.esm.co.jp</a> がスポンサーの弁当でした。</li>
<li><a href="http://amzn.to/2bUWNxg">プログラミングElixir</a>は一応持ってきていましたが、サイン会は列が長かったので諦めました。</li>
</ul>


<h2>Learn Programming Essence from Ruby patches</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/takkanm.html" title="Learn Programming Essence from Ruby patches - RubyKaigi 2016">Learn Programming Essence from Ruby patches - RubyKaigi 2016</a></li>
<li><a href="http://bit.ly/esm-ruby-kaigi-bento">http://bit.ly/esm-ruby-kaigi-bento</a></li>
<li>プログラミングの知識とは何か?</li>
<li>大学で学んだような知識と日々の仕事で必要な知識は異なる</li>
<li>どうやって学ぶか</li>
<li>本を読むなど</li>
<li>Ruby のパッチを読んでみる</li>
<li>なぜパッチなのか?</li>
<li>短い、redmine の issue などに説明がある、description などをみて自分が理解できるパッチを選べる</li>
<li>本で書かれているような知識と結びつく</li>
<li>Asakusa.rb Meetup での経験から</li>
<li>パフォーマンス改善などのパッチは難しい</li>
<li>オススメの情報源</li>
<li><a href="http://amzn.to/2cbxeaz">Ruby Under a Microscope</a>, <a href="http://amzn.to/2cbwAK6">Rubyのしくみ</a></li>
<li>Ruby 本体の doc/extension.rdoc</li>
<li>(冒頭のファイル名が間違っているという指摘があったので、<a href="https://github.com/ruby/ruby/commit/b5f3a113f55a81ce19c36b50d1ef234ac518d510">すぐに修正された</a>。)</li>
<li>yotii23&rsquo;s slide : <a href="https://speakerdeck.com/yotii23/walking-around-the-ruby-forest-more-deeply">Walking around the ruby forest more deeply</a></li>
<li><a href="https://bugs.ruby-lang.org/issues/12142">Hash tables with open addressing</a> を読む</li>
<li><code>st_table</code> の説明</li>
<li>新しい実装の説明</li>
<li>質疑応答</li>
<li>質問1: 他のことをしていたので聞き取れず</li>
<li>質問2 (joker1007 さん): 勉強になりそうなパッチを探す方法は?</li>
<li>直感で</li>
<li>面白そうだと思える変更かなど</li>
<li>質問3: 他に見ているプロジェクトは?</li>
<li>rails, github で watch しているものなど</li>
</ul>


<h2>Ruby Reference Manual 2016 Autumn</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/okkez.html" title="Ruby Reference Manual 2016 Autumn - RubyKaigi 2016">Ruby Reference Manual 2016 Autumn - RubyKaigi 2016</a></li>
<li>自己紹介</li>
<li>るりま != るびま</li>
<li>るりま = Ruby Reference Manual</li>
<li>るびま = Rubyist Magazine</li>
<li>どちらも「日本 Ruby の会」のサポートを受けている</li>
<li>2006-08-27: プロジェクト開始 (青木さん)</li>
<li>2009-01-31: Ruby 1.9.1 リリース</li>
<li>2010-08-18: Ruby 1.9.2 リリース</li>
<li>2011-09-01: 最低限のマニュアルが揃ったのでメンテナンスフェーズ開始</li>
<li>2011-10-31: Ruby 1.9.3 リリース</li>
<li>2013-02-24: Ruby 2.0.0 リリース</li>
<li>2013-05-30: 前回の発表</li>
<li>2013-06-02: 青木さんのドメインの svn サーバーから GitHub に移動</li>
<li>2013-12-25: Ruby 2.1.0 リリース</li>
<li>2014-12-25: Ruby 2.2.0 リリース</li>
<li>2015-12-25: Ruby 2.3.0 リリース</li>
<li>最新の状態にほぼ追従</li>
<li>できてない部分はできていないままだが、更新できている部分は更新についていけているはず</li>
<li>RubyKaigi 2013 から</li>
<li>docs.ruby-lang.org でホスティング</li>
<li>IIJ 提供、管理者は @hsbt さん</li>
<li>Ruby の更新への追従は手作業</li>
<li>NEWS に載らないような変更には弱い</li>
<li>例えば rbconfig/sizeof の追加</li>
<li>RDoc との関係</li>
<li>RDoc とは、Ruby 本体のコメントに埋め込まれているドキュメント</li>
<li>相互に同期したいができていない</li>
<li>RDoc へのリンクはできている</li>
<li>最近の変更</li>
<li>Web 検索で古いドキュメントがでてくる対策として <code>link rel="canonical"</code> をつけるようになった</li>
<li>NEWS ファイルを翻訳したものが入った</li>
<li><code>open_search_description.xml</code> がおかしくなっていたのでを修正した</li>
<li>Contributors</li>
<li>rurema/bitclust GitHub のアイコンがひっぱれたのは 18 名、コミットは 20 名</li>
<li>rurema/doctree はもっと多い (具体的な数はメモし損ねた)</li>
<li>のべ 100 名以上が協力してくれている</li>
<li>Ruby 2.4.0</li>
<li>Unify Fixnum and Bignum to Integer</li>
<li>bundled gem が増えた</li>
<li>rake, rubygems などのすでにドキュメントが書かれていて日本語のまとまった情報が少ないものは残したい</li>
<li>tk が外れるとドキュメントなしが大幅に減る</li>
<li>開発ツール (bitclust) の話</li>
<li>CHM 生成が壊れている</li>
<li>Windows 自体が CHM を捨てる流れなので捨てたい</li>
<li>修正の pull request がきているのでその人に任せたい</li>
<li>単一ファイルはあった方が良いので EPUB や PDF の生成を考えている</li>
<li>自動化について</li>
<li>更新の自動通知</li>
<li>パッケージのリリースの自動化</li>
<li>CI の仕組みの改善</li>
<li>ドキュメントの生成が成功することぐらいしか確認していないので、 heroku にアップロードして見た目の確認ができるとかできるといいかも</li>
<li>RDoc との関連</li>
<li>相互同期したい</li>
<li>i18n モジュールというのが追加されたようなので何か使えるかも</li>
<li>Contribute!</li>
<li>使ってください! <a href="https://docs.ruby-lang.org/ja/">https://docs.ruby-lang.org/ja/</a></li>
<li>使っていて気づいたことがあったら issue を立ててください</li>
<li>twitter やブログで愚痴られても気づけない</li>
<li>気づいたもので直せそうであれば pull request にしてもらえると merge を押すだけで良いので助かります</li>
<li>typo の修正などからお気軽にどうぞ</li>
<li>修正のベースがあるだけでも嬉しいです</li>
<li>記法がわからなければ issue で報告してくれるだけでも良いです</li>
<li>BitClust の開発について</li>
<li>EPUB, PDF 生成については EPUB を直接生成しようとしていたのを捨てて、<a href="https://github.com/kmuto/review">Re:VIEW</a> を経由すると良いのではないかという話を昨晩の懇親会で得たのでそうする予定</li>
<li>SEO (Search Engine Optimization)</li>
<li>一緒に Ruby のドキュメントを良くしていきましょう</li>
<li>質疑応答</li>
<li>質問1 (Rails Guide のやすかわさん): Dash の docset もあると喜ばれる</li>
<li>サードパーティで作ってくれている人はいる</li>
<li>Rails Guide では EPUB, PDF, docset をバンドルしたものを<a href="http://tatsu-zine.com/books/railsguides">達人出版会</a> などで売っている (Web は無料でも売れている) (後で確認してみましたが、売っているものに docset が入っているかどうかは確認できず)</li>
<li>質問2: 以前質問された時に日本語しかドキュメントしかないものがあった。</li>
<li>まず英語にそろえたいが、具体的には何も動いていない。</li>
<li>質問3: pull request などで修正してもらって反映されるのはどのくらいたってから?</li>
<li><a href="https://docs.ruby-lang.org/ja/">https://docs.ruby-lang.org/ja/</a> に反映されるのは一日一回</li>
<li>告知: OSS 開発支援サービス, エンジニア募集中</li>
<li>2016-09-11(日) 13:00-17:00 <a href="https://rubykansai.doorkeeper.jp/events/49364">第74回 Ruby関西 勉強会</a></li>
</ul>


<h2>Afternoon Break</h2>

<ul>
<li>終わった後、しばらく okkez さんのところに話にくる人の話を一緒に聞いていた。</li>
<li><a href="https://twitter.com/labocho">Dash 版の作者</a>も現れて、 Re:VIEW が docset も生成できるという勘違いを受けていたという話があった。</li>
<li>(念のため後で <a href="https://github.com/kmuto/review">Re:VIEW</a> を確認してみたけど docset はなかった)</li>
</ul>


<h2>Pwrake: Distributed Workflow Engine based on Rake</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/masa16tanaka.html" title="Pwrake: Distributed Workflow Engine based on Rake - RubyKaigi 2016">Pwrake: Distributed Workflow Engine based on Rake - RubyKaigi 2016</a></li>
<li>立ち話が長引いて自己紹介の部分は聞けなかった</li>
<li><a href="https://github.com/ruby-numo/narray">https://github.com/ruby-numo/narray</a></li>
<li><a href="https://github.com/masa16/pwrake">https://github.com/masa16/pwrake</a></li>
<li>Background: 科学ワークフロー</li>
<li>ワークフロー定義言語</li>
<li>DAX (Pegasus ワークフローシステム)</li>
<li>Swift (Apple の言語とは別物)</li>
<li>GXP Make</li>
<li>他のことをしていたので聞いていなかった</li>
<li>Rake はワークフロー記述言語として強力</li>
<li>結局るりま関連の作業をしていてほとんど聞いていなかった。</li>
</ul>


<h2>るりま関連作業</h2>

<ul>
<li><a href="https://twitter.com/sho_hashimoto/status/774119302756651008">世の中のNEWS翻訳家のみなさまが今英語で残ってるとこやってくれないかなー。</a> というツイートをみて NEWS 関連をみたりしていた。</li>
</ul>


<h2>Modern Black Mages Fighting in the Real World</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/tagomoris.html" title="Modern Black Mages Fighting in the Real World - RubyKaigi 2016">Modern Black Mages Fighting in the Real World - RubyKaigi 2016</a></li>
<li>混んでいてまた通路に座っていた。</li>
<li><a href="https://rubygems.org/gems/msgpack-inspect">https://rubygems.org/gems/msgpack-inspect</a> という gem をリリースしたばっかり</li>
<li>Fluentd とは?</li>
<li>Fluentd v0.14</li>
<li>ロゴが変わった</li>
<li>線で構成されていて白飛びして目立たないことがあるので変わった</li>
<li>クラス階層を整理した</li>
<li><code>extend</code> は <code>singleton_class.include</code> と同じ</li>
<li>Fluentd v0.12 の <code>emit</code> とか <code>format_stream</code> とかの呼び出し関係の説明</li>
<li>Fluentd v0.12 の出力の <code>pop</code> とか <code>write</code> とかの説明</li>
<li>サードパーティのプラグインのメソッドを直接コアが呼び出していたので、ちょっと処理を挟みたいということがやりにくい</li>
<li>呼び出し方が複雑でコールスタックが複雑</li>
<li>Fluentd v0.14 <code>Fluent::Plugin::Output</code> で整理した</li>
<li>呼び出しが行ったり来たりしなくなった</li>
<li>プラグインが実装するメソッドを分離した</li>
<li>メソッドが余計なことをしないようになった</li>
<li>コールスタックがシンプルで一本線になった</li>
<li>既存の v0.12 のプラグインは?</li>
<li>可能な限り何の変更もなく動く必要がある</li>
<li>互換レイヤーが二階建てになっている理由</li>
<li>トップレベルでの名前衝突をできるだけ避けたい</li>
<li>Compat Layer: プラグインが定義しているメソッドに応じて処理を変える</li>
<li><code>format</code> を呼ぶだけが一番簡単な例</li>
<li><code>format_stream</code> が定義されているとそっちを呼ばないといけない</li>
<li><code>super</code> 対応も必要</li>
<li>初期のサンプルコードが良くない実装だった。サンプルコードには気をつけましょう</li>
<li><code>emit</code> が定義されているとさらにそれを呼ばないといけない</li>
<li>さらにこっちも <code>super</code> 対応も必要</li>
<li><code>emit</code> は値を返さないで <code>@buffer.emit</code> を呼ぶので、その対応が必要</li>
<li><code>chunk.extend</code> をするためにプラグインを <code>extend</code> する</li>
<li>似たような互換レイヤーがそれぞれの Output プラグインの親にある</li>
<li>プラグインのライフサイクル</li>
<li>v0.12 プラグインでは <code>super</code> は呼ばなくても良かったので、呼んでいないプラグインもある</li>
<li><code>super</code> を呼ばせる黒魔術として <code>Module#prepend</code></li>
<li><code>CallSuperMixin</code></li>
<li>まず <code>super</code> を呼ぶ、<code>super</code> が呼ばれていなかったら親を辿って最初に定義されているクラスのメソッドに <code>self</code> を <code>bind</code> しなおして呼び出す</li>
<li>その先は <code>super</code> がちゃんと呼ばれるのでめでたし</li>
<li>テストの問題</li>
<li>テストの中で <code>singleton_class</code> にメソッド定義していると <code>prepend</code> が負けて上書きできない</li>
<li>何よりも強い何かが必要</li>
<li><code>singleton_class</code> に <code>prepend</code> して解決</li>
<li>fluentd のプラグインが古いとこういう黒魔術が使われるので、バージョンアップ推奨</li>
<li>ユーザーに不利益を被らせないために我々は何でもやるべきだ</li>
<li>質疑応答</li>
<li>質問1: あの複雑な呼び出し関係はどうやってできたのか?</li>
<li>図はかいた</li>
<li>ブギーボードにかいた</li>
<li>質問2: 後方互換性の話</li>
<li>以前に互換性を壊してあげようという構想があったが、その後、プラグインが増えて全書き換えは無理ということになった</li>
<li>言語のコミュニティを超えてユーザーが増えた</li>
<li>特に運用監視の人たちには互換性が重要だった</li>
<li>質問3 (Yugui さん?): 逆方向の互換性は?</li>
<li>機能が増えたので不可能です</li>
<li>v0.12 向けのリリースをしてから v0.14 向けリリースをしてください</li>
<li>質問4: パフォーマンスの問題</li>
<li>読み込み時や 1 分に 1 回呼ばれるような部分でしかメタプログラミングはしていないので、継承の階層が増えるだけでパフォーマンスには影響はないはず</li>
<li>質問5: メモを取っていたので聞き取れず</li>
</ul>


<p><code>super</code> が呼ばれていなかったら、の話でやっていた黒魔術の <code>bind</code> しなおして呼び出すというのは、たぶん以下のような感じです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class C1
</span><span class='line'>  def foo
</span><span class='line'>    p :C1
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>class C2 &lt; C1
</span><span class='line'>  def foo
</span><span class='line'>    # super が呼ばれていない
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>C1.instance_method(:foo).bind(C2.new).call</span></code></pre></td></tr></table></div></figure>


<p>Rails 関連で <code>class</code> が上書きされているオブジェクトで本当のクラスを知りたかった時に <code>rails console</code> で <code>Kernel.instance_method(:class).bind(obj).call</code> のようなことをしたことがあったぐらいだったので、実運用のコードでこういうことが行われることがあるというのに驚きました。</p>

<h2>SciRuby Machine Learning Current Status and Future</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/mrkn.html" title="SciRuby Machine Learning Current Status and Future - RubyKaigi 2016">SciRuby Machine Learning Current Status and Future - RubyKaigi 2016</a></li>
<li><a href="https://speakerdeck.com/mrkn/sciruby-machine-learning-current-status-and-future">https://speakerdeck.com/mrkn/sciruby-machine-learning-current-status-and-future</a></li>
<li>enumerable-statistics gem</li>
<li>機械学習とその前後のワークフロー</li>
<li>Ruby はほぼ何もできない</li>
<li>Python はできるので、みんな Python を使う</li>
<li>その状況を変えたい</li>
<li>一番重要なこと: SciRuby の開発を手伝ってください、<a href="http://sciruby-slack.herokuapp.com/">http://sciruby-slack.herokuapp.com/</a></li>
<li>なぜ機械学習を使うのか?</li>
<li>機械学習でできること</li>
<li>機械学習で扱う問題</li>
<li>教師あり学習: 分類、回帰</li>
<li>教師なし学習: グループ分け、分布推定、次元削減</li>
<li>Reinforcement learning</li>
<li>3 種類全部 Ruby でできるようになると嬉しいが、今回の話は教師あり学習について</li>
<li>liblinear-ruby gem (C++ で書かれたライブラリのラッパー)</li>
<li>rb-libsvm gem (libsvm のラッパー)</li>
<li>decisiontree gem (decision tree = 決定木)</li>
<li>名前の紹介だけ: ai4r gem, classifier-reborn gem, data_mining gem, etc.</li>
<li>既存の gem はデータの渡し方も API も異なる</li>
<li>実世界のデータ</li>
<li>Scikit-learn</li>
<li>共通の形式で訓練データを用意できる</li>
<li>interface も互換性がある</li>
<li>Scikit-learn は機械学習の理想的なフレームワークだと思う</li>
<li>機械学習の SciRuby の未来</li>
<li>scikit-learn そのものを使う : julia 言語では PyCall.jl, ScikitLearn.jl</li>
<li>同様に pycall gem, scikit-learn gem を作れば良い</li>
<li>scikit-learn のようなものを実装する : とても大変</li>
<li>数値配列 : <code>NMatrix</code>, <code>Numo::NArray</code>, <code>NumBuffer</code></li>
<li><code>NMatrix</code>: 遅い、インストールが難しい</li>
<li><code>Numo::NArray</code>: 疎行列に対応していない、新しすぎるので対応しているライブラリが少ない</li>
<li><code>NumBuffer</code>: 発表者が開発者、手伝い募集</li>
<li><code>NMatrix</code> と <code>Numo::NArray</code> の互換性問題</li>
<li>SciRuby JP</li>
<li>成果物: Tutorials, Installation, Survey, Visualization, Other Languages</li>
<li>SciRuby は英語推奨だが日本語OK</li>
<li>機械学習に限らず contribution 募集</li>
<li><a href="http://sciruby-slack.herokuapp.com/">http://sciruby-slack.herokuapp.com/</a></li>
<li>質疑応答</li>
<li>質問1: 良い点を宣伝した方が良いのではないか</li>
<li>scikit-learn がベストだと思っている</li>
<li>質問2: テストの話</li>
<li>scikit-learn でどうやっているかは知らない</li>
<li>質問3: pycall or SciRuby, 着地点は?</li>
<li>まずは pycall で 2,3 年でみんな Python から julia に乗り換えているだろうと予想しているので、そうなったら Ruby から julia を呼び出すようにするのが良いのではないか</li>
<li>質問4 (マーティンさん): Ruby の強み (メタプログラミングとか) を活かせないか?</li>
<li>考えたことがなかった</li>
<li>質問5: 今 Ruby が向いていない、ライブラリが足りないからというのがあったが、言語自体は?</li>
<li>Ruby 言語自体が向いていないということはない</li>
<li>julia は数値ベクトルなどを言語がサポートしているので、数値計算をやりやすい、LLVM に丸投げでパフォーマンスも良い</li>
</ul>


<p>よく知らない分野なので、聞いていても良くわからない話もあり、あまりメモも取れなかった。</p>

<h2>Drinkup at RubyKaigi 2016 by Misoca Inc.</h2>

<p>Drinkup は Agileware の方も申し込みは間に合っていたのですが、後からの Misoca の方が会場が近くて良さそうだと思って、Misoca の方に申し込んで、キャンセル待ちの出ていた Agileware の方はキャンセルして、Misoca の方に参加しました。</p>

<p>Misoca の Drinkup では <a href="https://twitter.com/toyoshi/status/774227373944254465">https://twitter.com/toyoshi/status/774227373944254465</a> の写真のように doorkeeper のアカウントから取得したアイコンのステッカーを用意してくれていました。
便利そうなのでシールとしては貼らずに今後もイベントに参加した時の名札に入れるのが良さそうかも、と思いました。</p>

<p>今回はいろんな人といろんな話ができました。</p>

<p><a href="https://github.com/ruby/ruby/commit/dbff56f562c9f5459deeb06263a3cc5826159062">Unbundle tk</a> が気になっていたので hsbt さんにきいたところ、もともとリリースマネージャーの naruse さんとしては Ruby/Tk は外すだけで bundled gem にする予定はなかったのに、nobu さんが <code>gems/bundled_gems</code> に追加してしまっていたのを、改めて削除したという流れだったそうです。</p>

<p><a href="https://bugs.ruby-lang.org/issues/12681">Gem化issue</a> のタイトルの方が印象が強かったので勘違いしていたのですが、もともとは <a href="https://bugs.ruby-lang.org/issues/8539">Unbundle ext/tk</a> というタイトルの issue だったので、そういう意図だったようです。</p>

<p>記録として残しておきたいと思った話としては、以上のようなことがありました。</p>

<p>他には</p>

<ul>
<li>SlideShare は LinkedIn になって SlideShare だけのアカウントの作成ができなくなっているらしい</li>
<li>SpeakerDeck は過去に問い合わせた時に API 対応の予定はないという話だったらしい</li>
<li>通訳の関係で事前に資料を渡す必要があったので slide.rabbit-shocker.org にあげて PDF をダウンロードしてもらったらしい</li>
</ul>


<p>とかいう話もしていました。</p>

<p>最後は謎のジャンプ一本締めでした。</p>

<h2>Togetter まとめ</h2>

<p><a href="http://togetter.com/li/1022255" title="資料も反響もすべてチェック！ 京都で3倍広くなった #RubyKaigi 2016 まとめまとめ - Togetterまとめ">資料も反響もすべてチェック！ 京都で3倍広くなった #RubyKaigi 2016 まとめまとめ - Togetterまとめ</a> というのができていたので個別のまとめへのリンクは省略しました。</p>

<h2>まとめ</h2>

<p>今日は AC アダプターを忘れていて貸してもらったり (ありがとうございました)、日本語のセッションにいたのに他の作業をしていてあまり聞けていなかったりしたこともありましたが、
bindings や黒魔術の話のようにある程度は知っているけど実際にはほぼ使ったことない話や、
ある程度関わっている るりま (Ruby Reference Manual) の話がしっかり聞けたのが良かったです。</p>

<p>また、作業中は話をちゃんと聞けなかったという問題はあったものの、いくつか pull request を出したり issue を書いたりできたのも良かったです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2016 の 1 日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-09-08-rubykaigi-2016.html"/>
    <updated>2016-09-08T09:49:29+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi-2016</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2016" title="RubyKaigi 2016">RubyKaigi 2016</a> の 1 日目に参加したので、そのメモです。</p>

<!--more-->


<h2>会場</h2>

<p>「<a href="https://twitter.com/a_matsuda/status/772749215000764417">スピーカーのキャンセルが出たため、初日の朝のキーノートの開始時間が50分遅くなります。</a>」という話があったため、時間に余裕を持って到着できました。</p>

<p>家を出た時は雨は降っていなかったのですが、京都では大雨でした。
(参考: <a href="https://twitter.com/kakutani/status/773680281689530368">https://twitter.com/kakutani/status/773680281689530368</a> )
駅から会場までは天井のある通路で繋がっているので、傘なしでも濡れずにたどり着けました。</p>

<p>会場は広くて、メインホールのテーブル席は全席電源つきという非常に便利な感じでした。
メインホールの座席は座ると前にずれて、立ち上がると後ろに下がる椅子でした。</p>

<h2>Opening</h2>

<ul>
<li>スタッフのうち、つじたさん、 aaron さん、デカ外人さんの紹介</li>
<li>電源が各席にある</li>
<li>メインホールはテーブル席の後ろに椅子だけの席もあるけど、そこも後ろに電源があるらしい</li>
<li>スポンサーブースにコーヒーとお菓子</li>
<li>懇親会のチケットが残り数十枚でラストチャンス</li>
</ul>


<h2>Ruby3 Typing</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/yukihiro_matz.html" title="Ruby3 Typing - RubyKaigi 2016">Ruby3 Typing - RubyKaigi 2016</a></li>
<li>日本語のキーノート</li>
<li>Ruby3</li>
<li>Performance, Concurrency, Typing</li>
<li>それぞれ Shyouhei, Ko1, Matz が話をする</li>
<li>2010s に出てきた言語は静的型言語が多い</li>
<li>静的型がないので Ruby は死んだなどと言われてしまうこともある</li>
<li>TypeScript, Flow, Go, Swift</li>
<li>Microsoft, Facebook, Google, Apple など大企業の言語</li>
<li>テクノロジー (動的型と静的型のような) は振り子のように行ったり来たりしている</li>
<li>Smalltalk → Java → Ruby・JavaScript → Swift・Go → ?</li>
<li>揺り戻しが起きた時に置いて行かれないように (静的型を目指すのではなく) 未来の動的型言語について考える</li>
<li>型とは何か?</li>
<li>学術的には型システム入門 (TAPL) とかあるけど</li>
<li>Duck typing</li>
<li>動けばいい</li>
<li><code>log(dst IO, mesg String)</code> のように静的型指定してしまうと例えば <code>StringIO</code> を渡せない</li>
<li>(スライドのトラブルが発生して、 rabbit 作者によるサポートを受けつつ rabbit を再起動してしまったので、亀がリセットされてしまった。)</li>
<li>Duck typing は内部構造を気にしなくて良い</li>
<li>Lower mental cost in development</li>
<li>Duck typing は未来に対して開かれている</li>
<li>Duck typing は柔軟性が高い</li>
<li>&ldquo;Duck&rdquo; (Ruby の型) は nominal type ではない</li>
<li>&ldquo;Duck&rdquo; は class ではない</li>
<li>&ldquo;Duck&rdquo; は何か</li>
<li>&ldquo;Duck&rdquo; は <em>expected</em> behavior (期待される振る舞い)</li>
<li>期待は私たちの頭の中にある</li>
<li>class による型はあくまでも近似 (approximation) であり足かせになる</li>
<li>Go の interface はかなり良い</li>
<li>Structual Subtyping vs Nominal Subtyping</li>
<li>Duck typing is awesome!</li>
<li>DRY (Don&rsquo;t Repeat Yourself) 原則</li>
<li>冗長性を削ろう</li>
<li>プログラムを書く時にかかなくていいものは削りたい</li>
<li>型指定がなくても ruby のプログラムは動いているので必要ない</li>
<li>むしろ積極的に外すべき</li>
<li>しかし、動的型言語には欠点 (drawback) がある</li>
<li>実行してみないとエラーがわからない</li>
<li>エラーメッセージが親切ではない</li>
<li>Coverage</li>
<li>テストし忘れた部分はいつまでも気づかれない</li>
<li>Less Documentation</li>
<li>書く人は嬉しいが、読む人は困る</li>
<li>コメント (rdoc とか) に結局 (型を) かいている</li>
<li>型は絶対に書きたくない</li>
<li>柔軟性が減るから</li>
<li>ユーザーのためにドキュメントは欲しい</li>
<li>コメントに書く</li>
<li>型アノテーションを書ける言語もある</li>
<li>型チェックを含まない型アノテーションはダメなアイデアだと思う</li>
<li>Mixed/Gradual Typing (一部だけ型指定ができる) is a bad idea</li>
<li>少なくとも Ruby にとっては。</li>
<li>ドキュメントは欲しい</li>
<li>型のある部分とない部分を混ぜたくない</li>
<li>課題があるということは改善の余地がある</li>
<li>未来の Ruby はこれをなんとかしたい</li>
<li>我々はエンジニアなので技術でなんとかしたい</li>
<li>静的型に型推論を足す</li>
<li>型推論は素晴らしい</li>
<li>静的型の柔軟性のなさは型推論とは無関係</li>
<li>静的型の柔軟性がないという問題が解決しないので別のものが必要</li>
<li>Static Typing with Duck-Typing として Go の Structual Subtyping は良い線をいっているが、 interface を書きたくない</li>
<li>そこで型推論をさせてみよう</li>
<li><code>dst should have rite()</code> を <code>dst should have write()</code> に修正 (また亀が戻った)</li>
<li>interface を振る舞いから自動生成 : Soft Typing</li>
<li>型推論された型には名前が付いていない</li>
<li>名前をつけるのは結構なコスト</li>
<li>ぼんやりとしたアイデアがぼんやりとしたアイデアのまま実現できるので、具体化する脳の労力が減る</li>
<li>100% のチェックはできないかもしれない</li>
<li>80% 程度のコンパイル時チェックでも 0% よりは良い</li>
<li>dynamic typing に fallback できる</li>
<li>ad-hoc な型情報も使えるのではないか</li>
<li>gsub, slice, map を期待した a があったとき、そんなクラスはないのでエラーにできる</li>
<li>実行時の情報も使えるのではないか</li>
<li>タイプエラーが起きるようなテストは書かないと思うので、テスト実行時の型情報をとっておいて Type Database としてとっておいて gem として一緒に配布して実行時に使えるのではないか</li>
<li>Type Database がコード補完などにも使えるのではないか</li>
<li>まだ構想段階で動いていない</li>
<li>コンセプト段階</li>
<li>Ruby3 プロジェクトの一部</li>
<li>重要なメッセージ : We Care about YOU</li>
<li>テストがあれば大丈夫という話もあるが</li>
<li>言語の方でもプログラミング体験を改善したい</li>
<li>Ruby3 はいつか? わからない</li>
<li>オープンソースソフトウェア (少なくとも Ruby) にはロードマップや締め切りはない</li>
<li>目標を作る必要が有る</li>
<li>ケネディ大統領が月に行くという少し難しい未来を宣言して、のちに実現された</li>
<li>Soft typing, Ruby3x3, Concurrency</li>
<li>心の中の目標としては次の東京オリンピックの頃には Ruby3 が出てると良いな</li>
<li>みなさんからのアイデアや貢献は大歓迎</li>
<li>前に進み続けたいから (To Keep Moving Forward)</li>
<li>前に進み続けるためにできることはなんでもしたい</li>
<li>Happy Hacking!</li>
<li>質疑応答前に 3 分ほど CM (スポンサーセッション)</li>
</ul>


<h2>Speee さん</h2>

<ul>
<li>会場アンケート 知っている人 : 6割ぐらい</li>
<li><a href="http://speee.jp/">http://speee.jp/</a></li>
<li>現在はほぼ Ruby になった</li>
<li>OSS への貢献へも増えた</li>
<li>OSS Gate workshop がよかった</li>
<li>いろいろなイベントもやっているので興味がある方は <a href="http://speee.connpass.com/">http://speee.connpass.com/</a> の「めんばーになる」</li>
</ul>


<h2>Ruby3 Typing (質疑応答)</h2>

<ul>
<li>まさかの質問なし?</li>
<li>joker1007 さん?: 型情報を全く書かずに型推論だけでできる見込みはあるのか?</li>
<li>伝統的な方法では無理</li>
<li>ad-hoc なものや実行時の型情報でそこそこ実用的なものになる可能性はある</li>
<li>まだ実際に動いているコードはないので、実際には無理でしたということで Ruby3 に入らない可能性はある</li>
<li>誰?: IDE の仕様を参考にできるか?とかいう感じの質問</li>
<li>現在は完全なものはないので参考にしづらい</li>
<li>IDE があるので言語仕様はどうでもいいんだということはしたくない</li>
<li>IDE ありきの言語に Ruby がなることはない</li>
<li>誰?: (質問はよく聞き取れず)</li>
<li>リリースマネージャーもしていない</li>
<li>言語デザイナーをしている</li>
<li>田中哲さん: 今回の話での Soft Typing という言葉の使い方は既存のアカデミックでの用語とは違うので、新しい言葉を考える必要が有るのではないか</li>
<li>Diamondback Ruby というものが昔あった (後で聞いた話によると Diamondback Ruby は速度を目的としたもので、OCaml で実装されたものだったらしい)</li>
<li>Soft Typing という用語はふさわしくないかも</li>
<li>新しい言葉を考えておきます</li>
<li><a href="http://togetter.com/li/1021897" title="&quot;型は絶対書きたくない&quot; &quot;Ruby3は東京オリンピックまでに&quot; Rubyの父Matzによる、「楽しいプログラミング体験を届けるために」 #rubykaigi 2016 Keynote - Togetterまとめ">&quot;型は絶対書きたくない&quot; &quot;Ruby3は東京オリンピックまでに&quot; Rubyの父Matzによる、「楽しいプログラミング体験を届けるために」 #rubykaigi 2016 Keynote - Togetterまとめ</a></li>
</ul>


<h2>アナウンスと Intermission</h2>

<ul>
<li>昼は弁当があるという話</li>
<li>ベジタリアン用の弁当もあるという話</li>
<li>英語で翻訳レシーバーの返却についてアナウンス?</li>
<li>dRuby の slide sponsors が流れていた</li>
</ul>


<h2>dRuby in the last century.</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/m_seki.html" title="dRuby in the last century. - RubyKaigi 2016">dRuby in the last century. - RubyKaigi 2016</a></li>
<li>自己紹介</li>
<li>前座が Matz</li>
<li>dRuby の生い立ち, dRuby の紹介, これから</li>
<li>1999 [ruby-list:15406] 1st dRuby <a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/15406">http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/15406</a></li>
<li>2005 最初の本</li>
<li>2012 (-2014 絶版) 英語の本</li>
<li>2000 Perl/Ruby Conference (Kyoto) この会場</li>
<li>同じ会場で同じ話を</li>
<li>dRuby はオーパーツ (OOPARTS) <a href="https://twitter.com/yugui/status/439412852013551616">https://twitter.com/yugui/status/439412852013551616</a></li>
<li>Before dRuby (BD)</li>
<li>BD8: プロセスをわける必然性のある組み込みシステムからの情報を集めるデーモンと情報を可視化するアプリケーション</li>
<li>BD5: CGI (マイクロサービス的) 時代</li>
<li>BD1: Ruby &amp; shttpsrv に出会う</li>
<li>HTTP を小さなアプリに埋め込んでつないで楽しんでいた</li>
<li>Ruby と Web の世界の翻訳作業が必要な点などが、なんか気に入らない</li>
<li>Ruby ぽく話したい</li>
<li>Ruby のように振舞う分散オブジェクト</li>
<li>RPC ではなく RMI</li>
<li>Ruby のメソッド呼び出しを socket で拡張</li>
<li>簡単通信ライブラリではなく、もっと情緒的な (Ruby 的な) ものをめざした</li>
<li>dRuby ってなに?</li>
<li>分散オブジェクトシステム, プロセス腰にメソッドが呼べる, プロセス間でオブジェクトが送れる</li>
<li>デモ</li>
</ul>


<p>端末1 (oso-matz) で irb を起動:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'drb'
</span><span class='line'>DRb.start_service('druby://localhost:54321', {})
</span><span class='line'>DRb.uri
</span><span class='line'>DRb.front</span></code></pre></td></tr></table></div></figure>


<p>端末2 (jushi-matz) で irb を起動:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'drb'
</span><span class='line'>kvs = DRbObject.new_with_uri('druby://localhost:54321')
</span><span class='line'>kvs['greeting'] = 'Hellow, World.'</span></code></pre></td></tr></table></div></figure>


<p>端末1に戻って <code>DRb.front</code> を確認すると <code>{"greeting"=&gt;"Hellow, World."}</code> になっている。</p>

<p>Demo2: 端末2で:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kvs['outlet'] = $stdout</span></code></pre></td></tr></table></div></figure>


<p>(<code>DRb.start_service('druby://localhost:54322')</code> のようにこちら側でも <code>DRb.start_service</code> しておかないと <code>DRb::DRbConnError: DRb::DRbServerNotFound</code> になってうまくいかなかった)</p>

<p>端末1で:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DRb.front['outlet'].class
</span><span class='line'>DRb.front['outlet'].puts('Hello, Again.')</span></code></pre></td></tr></table></div></figure>


<ul>
<li>なにがおきた?</li>
<li><code>$stdout</code> は <code>Marshal.dump</code> 不可能なので自動的に proxy に取り替えた</li>
<li>永遠に proxy だと値が手に入らないので境界として <code>Marshal.dump</code> を使った</li>
<li>OOP っぽさ</li>
<li>オブジェクトが相互に呼びあえること</li>
<li>block (イテレータ) も同じ仕組みで動く</li>
</ul>


<p>Demo3: Queue:</p>

<p>端末1で:
(<code>Queue</code> は最近の Ruby では本名は <code>Thread::Queue</code> に変わっていた)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>queue = Queue.new
</span><span class='line'>DRb.front['queue'] = queue
</span><span class='line'>queue.pop
</span><span class='line'>queue.pop</span></code></pre></td></tr></table></div></figure>


<p>端末2で:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>queue = kvs['queue']
</span><span class='line'>queue.push(1.0)
</span><span class='line'>queue.push(2.0)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>意図したわけではないが Thread 同期メカニズムがそのまま使えた</li>
<li>dRuby が向いている用途がある</li>
<li>Prototyping Twitter</li>
<li>初期は dRuby/Rinda だったらしい : いまは使っていない</li>
<li>自分のサービスも dRuby ではじめて最後には使わなくなることがある : 利用されて効率あげる必要がでてくるから</li>
<li>紹介のまとめ</li>
<li>これから</li>
<li>初期の実装に戻したいところがいくつか</li>
<li>セキュリティっぽいの消したい</li>
<li>ACL, insecure_method &hellip;</li>
<li>dRuby は RMI でメソッド呼び出しの拡張</li>
<li>メソッド呼び出しなので穴だらけで良い</li>
<li>危ないものは危なく見えるべき</li>
<li>UnitTest : API のメソッド単位に書くものなのに、テストケースをストーリーレベルで書くべきだと勘違いしていた</li>
<li>啓蒙する</li>
<li>まずおもしろがってもらう</li>
<li>並行処理の勘所に気づいてもらう</li>
<li>すとうさん</li>
<li>啓蒙活動に興味を持ったというのは、何か心境の変化があったのか?</li>
<li>昨年のライブラリを作れば解決するという話にいらっとした</li>
<li>miyohide さん</li>
<li>啓蒙活動には、るびまに寄稿をするのが良いという話</li>
<li><a href="http://togetter.com/li/1021932" title="突然のライブハンズオン！ 20世紀生まれの分散Ruby実装 dRuby #RubyKaigi #RubyKaigiA - Togetterまとめ">突然のライブハンズオン！ 20世紀生まれの分散Ruby実装 dRuby #RubyKaigi #RubyKaigiA - Togetterまとめ</a></li>
<li><a href="https://speakerdeck.com/m_seki/druby2016" title="dRuby2016">dRuby2016</a></li>
</ul>


<h2>Lunch Break</h2>

<ul>
<li>11:55頃から</li>
<li>弁当の写真を撮り忘れてしまった</li>
<li>食べ終わった後は会場の散策</li>
<li>懇親会のチェックインもしておいた</li>
</ul>


<h2>Who reordered my code?!</h2>

<ul>
<li>次の発表で部屋を移動するのが面倒だったのでメインホールにいた</li>
<li>英語だったのとあまりちゃんと聞けていなかったのでメモなし</li>
<li><a href="http://rubykaigi.org/2016/presentations/pitr_ch.html" title="Who reordered my code?! - RubyKaigi 2016">Who reordered my code?! - RubyKaigi 2016</a></li>
<li>質疑応答: 質問なし</li>
<li><a href="http://togetter.com/li/1021946" title="concurrent-rubyのコアコミッターが語る JRuby + Truffle 並列実行による高速化の試み #RubyKaigi #RubyKaigiA - Togetterまとめ">concurrent-rubyのコアコミッターが語る JRuby + Truffle 並列実行による高速化の試み #RubyKaigi #RubyKaigiA - Togetterまとめ</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li>プロジェクターのテストとして<a href="http://amzn.to/2bUWNxg">プログラミングElixir</a>の宣伝を表示</li>
</ul>


<h2>A proposal of new concurrency model for Ruby 3</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/ko1.html" title="A proposal of new concurrency model for Ruby 3 - RubyKaigi 2016">A proposal of new concurrency model for Ruby 3 - RubyKaigi 2016</a></li>
<li>英語で発表</li>
<li><a href="http://www.atdot.net/~ko1/activities/2016_rubykaigi.pdf">Presentation slide</a></li>
<li><a href="http://www.atdot.net/~ko1/diary/201609.html#d6">日本語 Script</a></li>
<li>Concurrent の発表が多い</li>
<li>Concurrent RubyKaigi</li>
<li>なぜみんな Concurrency 好きか?</li>
<li>なぜマルチスレッドプログラムが難しいのかと Guild という新しいアイデアの発表</li>
<li>Ruby は安全・簡単な方を選んでいる</li>
<li>data race と race condition の話</li>
<li><code>Array#concat</code> とマルチスレッドの挙動</li>
<li>マルチスレッドは難しいという話</li>
<li>ロックが不十分だとバグるし、多すぎるとパフォーマンスに悪影響</li>
<li>他の言語での知見</li>
<li>&ldquo;Guild&rdquo;</li>
<li>1個の Guild の中で同時に動く Thread は1個だけ</li>
<li>オブジェクトの共有方法などの話</li>
<li>Immutable なオブジェクトは共有可能</li>
<li>数値, Symbol, nil/true/false が徐々に frozen になっていた</li>
<li>doc/NEWS-2.0.0:  Fixnums, Bignums and Floats are frozen.</li>
<li>doc/NEWS-2.1.0:  * All symbols are now frozen.</li>
<li>doc/NEWS-2.2.0:  * nil/true/false objects are frozen. [Feature #8923]</li>
<li>&ldquo;こんなこともあろうかと&rdquo;</li>
<li>Guild の説明続き</li>
<li>パフォーマンスの話とか</li>
<li>質疑応答</li>
<li>質問1: 聞き取れず</li>
<li>質問2: Thread との違い?</li>
<li>質問3: sekiさん: <code>Array#concat</code> の問題は解決するのか? (ちゃんと聞き取れなかったので、違うかも)</li>
<li>解決しない</li>
<li>そもそもできないんだから他の方法を考えるんじゃないか</li>
<li>間違った使い方ができないような方法を考えましたという話</li>
<li>質問4: move operation がなんとか (聞き取れず)</li>
<li>move 操作はパフォーマンスのため</li>
<li>他にこういうことをやっている人がいるのでは?</li>
<li>知らない</li>
<li>質問5: たぶんグローバルデータの話</li>
<li>Ruby global data のスライドで説明</li>
<li><a href="http://togetter.com/li/1021975" title="Rubyコアコミッター笹田耕一さん解説 Ruby3のための新しい並列実行モデル Guild #RubyKaigi #RubyKaigiA - Togetterまとめ">Rubyコアコミッター笹田耕一さん解説 Ruby3のための新しい並列実行モデル Guild #RubyKaigi #RubyKaigiA - Togetterまとめ</a></li>
</ul>


<p>ささださんのプレゼンは事前に日本語 Script も公開されていたし、スライドも事前にチェックできたのでよかった。</p>

<p>セッション後の質問を受けていたのを横で聞いていたら、できるだけ 1 Guild 1 Thread で Thread の代わりに Guild を使うようになってほしいという感じらしかった。</p>

<p>スライドでは frozen になったものに Numeric と書いてあったが実際には Rational は frozen ではないのでちょっと違う。</p>

<h2>おやつ休憩</h2>

<ul>
<li>アナウンス</li>
<li>スポンサーブースにおやつがデプロイされている</li>
<li>弁当が少し残っているのでまだお腹が空いているという人はどうぞ</li>
<li>懇親会受付</li>
</ul>


<h2>Isomorphic web programming in Ruby</h2>

<ul>
<li>英語はつらいので日本語のセッションということで Room D にきました</li>
<li>Room D には電源も無線もありませんでした</li>
<li><a href="http://rubykaigi.org/2016/presentations/youchan.html" title="Isomorphic web programming in Ruby - RubyKaigi 2016">Isomorphic web programming in Ruby - RubyKaigi 2016</a></li>
<li>昨年の RubyKaigi 2015 では <a href="https://github.com/youchan/hyalite">https://github.com/youchan/hyalite</a> (React のようなものを Ruby で書ける) の話をした</li>
<li>Menilite というのを作っている</li>
<li>モデルをサーバーとクライアントで共有する</li>
<li>(内容とは関係ないけど、亀がうさぎに比べてかなり進んでいるのは、プレゼン開始時に亀の位置がすでに進んでいたからのように見えた)</li>
<li>デモ</li>
<li>silica というラッパーコマンド</li>
<li>まだ new しかサブコマンドがない</li>
<li>Sinatra と Opal を使ったコードが自動生成</li>
<li>ネットワークがつらいようなので Gemfile の github を参照しているところを path に書き換えてローカルのを参照するようにして bundle install</li>
<li>ライブコーディングは時間がなさそうだったので、あらかじめ git の branch を用意しておいた</li>
<li>しかしライブコーディングをしている</li>
<li>sinatra-activerecord を使っている</li>
<li>migration を毎回書くのは面倒なので silica でサポートしたい</li>
<li><code>git stash -u</code> でライブコーディングした変更を捨ててあらかじめ用意していたものを checkout</li>
<li>ユーザー追加、サインアップ</li>
<li>パスワードは BCrypt で暗号化</li>
<li><code>RUBY_ENGINE</code> による分岐でサーバーサイドだけの処理にする</li>
<li>signup 部分をライブコーディング</li>
<li>youchan, topsecret で signup しようとする</li>
<li><code>BCrypt</code> を typo していて error になったので <code>git stash -u</code> で捨てて、あらかじめ用意していた変更を checkout</li>
<li>時間がなくなってきたので、この後の変更もどんどん checkout しながら紹介</li>
<li>ログインしていなかったらログイン画面に飛ばす処理</li>
<li>ログイン処理</li>
<li>ユーザーごとにアクセス権を設定</li>
<li>セッションをクリアしていないので、ログインに失敗した時に前のユーザーのままだった</li>
<li>デモ終了</li>
<li>なぜ独自のモデルか</li>
<li>GUID : データベースで自動生成されるシーケンス番号の ID はクライアントから使いにくい</li>
<li>access control : すべてのデータがクライアントから見えてしまうとまずい</li>
<li><a href="http://togetter.com/li/1021990" title="このライブコーディングがすごい！ RubyでIsomorphic Webプログラミングを実現する Menilite 紹介 #RubyKaigi #RubyKaigiB - Togetterまとめ">このライブコーディングがすごい！ RubyでIsomorphic Webプログラミングを実現する Menilite 紹介 #RubyKaigi #RubyKaigiB - Togetterまとめ</a></li>
</ul>


<p>ライブコーディングがあったので、 vim を使ってるとか SKK (AquaSKK?) を使ってるとかそういうところも気になりました。</p>

<h2>Intermission</h2>

<ul>
<li>メインホールに移動した</li>
</ul>


<h2>Unifying Fixnum and Bignum into Integer</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/tanaka_akr.html" title="Unifying Fixnum and Bignum into Integer - RubyKaigi 2016">Unifying Fixnum and Bignum into Integer - RubyKaigi 2016</a></li>
<li><a href="https://bugs.ruby-lang.org/issues/12005" title="Unify Fixnum and Bignum into Integer">Unify Fixnum and Bignum into Integer</a> で提案された</li>
<li><code>Fixnum</code> や <code>Bignum</code> という定数は <code>Integer</code> を指すようになる</li>
<li><code>Fixnum</code> や <code>Bignum</code> という定数を参照しているコードでも <code>NameError</code> は起きない</li>
<li>C コードで <code>rb_cFixnum</code> や <code>rb_cBignum</code> を参照しているコードはコンパイルエラーになる</li>
<li>両対応するには <code>RUBY_INTEGER_UNIFICATION</code> マクロで分岐する</li>
<li>前提として <code>Fixnum</code> と <code>Bignum</code> とは何か</li>
<li><code>Integer</code> という抽象クラスとそれを継承した <code>Fixnum</code>　と <code>Bignum</code> というクラスがあった</li>
<li><code>1.class</code> と <code>(2**100).class</code></li>
<li>Ruby 2.4 では <code>Integer</code> だけになる</li>
<li><code>Fixnum</code> の範囲は ILP32, LLP64 (Windows など), LP64, JRuby で違った</li>
<li>portable ではないので基本的には使ってはいけない</li>
<li>Ruby には仕様がある: <a href="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=59579">ISO/IEC 30170:2012</a>, <a href="http://www.jisc.go.jp/app/pager?%23jps.JPSH0090D:JPSO0020:/JPS/JPSO0090.jsp=&amp;RKKNP_vJISJISNO=X3017">JIS X 3017:2011</a></li>
<li>Integer の範囲は unbounded</li>
<li><code>Fixnum</code> と <code>Bignum</code> の定義はしても良い</li>
<li>Ruby 2.3 も Ruby 2.4 も仕様に準拠</li>
<li>仕様の記述者は <code>Fixnum</code> と <code>Bignum</code> は実装の詳細と考えて仕様に入れなかったのではないか</li>
<li>利点</li>
<li><code>Fixnum</code> と <code>Bignum</code> を間違って使うことがなくなる</li>
<li>Ruby を勉強するのが簡単になる</li>
<li>ドキュメントもシンプルになる</li>
<li>シンプルに簡単にもっと数学的になる</li>
<li>欠点: 非互換性</li>
<li><code>Fixnum</code> の間違った使い方の例: <code>lib/rubygems/specification.rb</code>: <code>specification_version.is_a?(Fixnum)</code></li>
<li>Ruby 2.4 では間違った使い方ができなくなる</li>
<li><code>obj.is_a?(Fixnum)</code> は <code>obj.is_a?(Integer)</code> の意味になる</li>
<li>REPL で <code>1.class</code> を実行すると <code>Fixnum</code> になっていたのが <code>Integer</code> になる</li>
<li>Ruby を学ぶのが簡単になる</li>
<li>1 が integer というのは誰でも知っている</li>
<li>1 が <code>Fixnum</code> というのはほとんどの人は知らない (Lisp プログラマーを除く)</li>
<li>教える側にとっても楽になる</li>
<li>教科書がシンプルになる</li>
<li>ドキュメントもシンプルになる</li>
<li><code>Fixnum#foo</code> と <code>Bignum#foo</code> のドキュメントが重複していた</li>
<li><code>ri foo</code> も重複して出ていた</li>
<li>シンプルに簡単にもっと数学的になる</li>
<li>Ruby レベルの非互換</li>
<li><code>Fixnum</code> と <code>Bignum</code> が <code>Integer</code> を参照するようになる</li>
<li><code>NameError</code> は起きない</li>
<li><code>Fixnum == Bignum</code> が <code>true</code> になる</li>
<li><code>1.is_a?(Bignum)</code> が <code>true</code> になる</li>
<li><code>(2**100).is_a?(Fixnum)</code> が <code>true</code> になる</li>
<li><code>Fixnum</code> と <code>Bignum</code> は少なくとも Ruby 2.3 が EOL になるまで削除しない方が良いと思っている</li>
<li><code>Fixnum</code> の範囲が隠れる</li>
<li><code>test/ruby/test_integer_comb.rb</code>: <code>max = 1; max *= 2 while (max-1).class == Fixnum; FIXNUM_MAX = max/2-1</code> が Ruby 2.4 では無限ループに</li>
<li>推奨される解決策: <code>Fixnum</code> の範囲に依存しない</li>
<li>CRuby のみの推奨しない解決策: <code>require 'rbconfig/sizeof'; FIXNUM_MIN = -(1 &lt;&lt; (8 * RbConfig::SIZEOF['long'] - 2)); FIXNUM_MAX = (1 &lt;&lt; (8 * RbConfig::SIZEOF['long'] -2)) - 1</code> (<code>rbconfig/sizeof</code> は Ruby 2.1 から)</li>
<li>JRuby は知らない</li>
<li>使わない方が良いがどうしても必要ならこういう方法もあるという話</li>
<li>メタプログラミングや DSL が壊れる</li>
<li>メタプログラミング</li>
<li><code>mathn.rb</code> が <code>Fixnum</code> と <code>Bignum</code> に定義</li>
<li><code>Integer</code> だけに変更</li>
<li>activesupport <code>NumericWithFormat</code> を prepend</li>
<li><code>Integer</code> だけに変更</li>
<li>DSL</li>
<li>Sequel</li>
<li><code>add_column :column, Bignum</code></li>
<li><code>:Bignum</code> というシンボルを使うようになった</li>
<li>C レベル</li>
<li>利点: なし</li>
<li>欠点: 非互換</li>
<li>Ruby 2.3 での <code>Integer</code> の実装詳細</li>
<li>Ruby 2.4 での <code>Integer</code> の実装詳細</li>
<li>クラス階層が変わっただけ</li>
<li>拡張ライブラリの更新 : <code>rb_class_of(obj) == rb_cFixnum</code> → <code>FIXNUM_P(obj)</code> などの簡単な置き換え</li>
<li>影響のあった拡張ライブラリ : オブジェクトをダンプ/ロードするようなものがほとんどだった</li>
<li>ext/json, msgpack, syck, yajl, oj, ox, ruby-gnome2, etc.</li>
<li>Version Dependencies</li>
<li>Minor version up (1.3.2 to 1.3.3) が better</li>
<li>Major version version up (1.3.2 to 2.0.0) は pessimistic (悲観的な) version dependency <code>(~&gt; 1.3)</code> で問題が起きる</li>
<li>詳細: <a href="https://www.hsbt.org/diary/20160829.html">https://www.hsbt.org/diary/20160829.html</a></li>
<li>利点のほとんどは初心者向け</li>
<li>経験を積んだ Ruby プログラマーには大きな問題ではない</li>
<li>バージョンの非互換の問題</li>
<li>コミッターは具体的にどう支持していたのかという話</li>
<li><a href="http://togetter.com/li/1022003" title="Rubyコミッターが語る Ruby2.4にてFixnumとBignumをIntergerに統合する話 #RubyKaigi #RubyKaigiA - Togetterまとめ">Rubyコミッターが語る Ruby2.4にてFixnumとBignumをIntergerに統合する話 #RubyKaigi #RubyKaigiA - Togetterまとめ</a></li>
<li>発表資料: <a href="http://www.a-k-r.org/d/2016-09.html#a2016_09_08_1">http://www.a-k-r.org/d/2016-09.html#a2016_09_08_1</a></li>
</ul>


<h3>gem の Ruby 本体のバージョン依存関連</h3>

<p>Togetterまとめ によると <a href="http://sue445.hatenablog.com/entry/2016/09/02/121047" title="gemspecにRUBY_VERSIONによるif文書くのは意味がないので今すぐやめるべき">gemspecにRUBY_VERSIONによるif文書くのは意味がないので今すぐやめるべき</a> という話もあるみたいです。</p>

<p>watch している gem だと <a href="https://github.com/sj26/mailcatcher" title="MailCatcher">MailCatcher</a> が間接的に依存している <code>mime-types</code> が 3 になったときに Ruby 2.0 以上が必須になって問題が起きていたということがありました。</p>

<h2>Intermission</h2>

<ul>
<li>そのままメインホールにいた</li>
</ul>


<h2>Ups and Downs of Ruby Internationalization</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/duerst.html" title="Ups and Downs of Ruby Internationalization - RubyKaigi 2016">Ups and Downs of Ruby Internationalization - RubyKaigi 2016</a></li>
<li>会場アンケート</li>
<li>A-Z 以外の文字を使っている人</li>
<li>US-ASCII 以外を使っている人</li>
<li>UTF-8 以外を使っている人</li>
<li>Ruby のバージョンと Unicode のバージョン</li>
<li>2014: 2.2 7.0.0</li>
<li>2015: 2.3 8.0.0</li>
<li>2016: 2.4 9.0.0</li>
<li><code>upcase</code>, <code>downcase</code>, <code>capitalize</code>, <code>swapcase</code></li>
<li>Ruby 2.3 では US-ASCII 以外の範囲は変換しなかった</li>
<li>Ruby 2.4 では他の文字も変換する</li>
<li>使用例</li>
<li>互換性がない変更が入っているので preview で早めにチェックしてほしいという話</li>
<li>US-ASCII の範囲に限定したい時は <code>upcase :ascii</code> など</li>
<li>変換用データは Unicode から</li>
<li>文字数は保存されない</li>
<li>不可逆</li>
<li>コンテキスト依存</li>
<li>特殊な場合: <code>upcase :turkic</code> の話</li>
<li>特殊な場合: <code>upcase :lithuanian</code> の話</li>
<li>特殊な場合: Case folding (大小畳込み) <code>downcase :fold</code></li>
<li>特殊な場合: Titlecase <code>capitalize</code></li>
<li>実装詳細の話</li>
<li>簡単だがとても大きな <code>tr</code> のようなもの</li>
<li><code>string.c:sym_upcase</code>: <code>String#upcase</code> 相当を呼んでいる</li>
<li><code>string.c:rb_string_upcase</code>: <code>dup.upcase!</code> 相当</li>
<li><code>string.c:rb_string_upcase_bang</code>: 実際の変換をしているのはここ</li>
<li><code>OnigCaseFoldType</code> で変換の種類が決まっている</li>
<li><code>string.c:rb_str_casemap</code></li>
<li>UTF-8 以外の encoding に対応する primitive の話</li>
<li><code>Shift_JIS</code> などの対応は不要?</li>
<li>Oniguruma/Onigmo は folding のデータを持っているので再利用(?)</li>
<li><code>enc/unicode/data/9.0.0/casefold.h</code> の話</li>
<li><code>swapcase</code> は誰も使っていない?</li>
<li>会場に聞いてみると誰も使っていない感じだった。</li>
<li>大文字小文字の合成文字で問題がある</li>
<li>Test-Driven Development</li>
<li>Data-Driven Testing</li>
<li>Character Properties</li>
<li><code>Regexp</code> でほとんど可能</li>
<li>ある文字の script を得るのは不可能</li>
<li>Unicode Normalization</li>
<li>Ruby 2.2 から <code>'string'.unicode_normalize :nfkc</code> がある</li>
<li><a href="http://www.sw.it.aoyama.ac.jp/2016/pub/RubyKaigi/">http://www.sw.it.aoyama.ac.jp/2016/pub/RubyKaigi/</a> と最後に出ていたようだけどまだ公開されていない?</li>
<li><a href="http://togetter.com/li/1022019" title="&quot;Who has used swapcase?&quot; Rubyにおける国際化機能のかなしみ #RubyKaigi #RubyKaigiA - Togetterまとめ">&quot;Who has used swapcase?&quot; Rubyにおける国際化機能のかなしみ #RubyKaigi #RubyKaigiA - Togetterまとめ</a></li>
</ul>


<p>具体例に出てくる文字が入力できないし、英語も聞き取れないしで、あんまりメモが取れなかったです。</p>

<h2>見ていなかったセッションなどの Togetter まとめ</h2>

<ul>
<li><a href="http://togetter.com/li/1021880" title="&quot;この悪天候… 最高のカンファレンス日和！&quot; &quot;会場広い！&quot; &quot;Wi-Fiはやくきてくれーっ！&quot; #RubyKaigi 2016 オープニングまで - Togetterまとめ">&quot;この悪天候… 最高のカンファレンス日和！&quot; &quot;会場広い！&quot; &quot;Wi-Fiはやくきてくれーっ！&quot; #RubyKaigi 2016 オープニングまで - Togetterまとめ</a></li>
<li><a href="http://togetter.com/li/1021901" title="Ruby on Erlang！！！ errubyの紹介 #RubyKaigi #RubyKaigiB - Togetterまとめ">Ruby on Erlang！！！ errubyの紹介 #RubyKaigi #RubyKaigiB - Togetterまとめ</a></li>
<li><a href="http://togetter.com/li/1021953" title="DSLで記述できるmRuby製コンテナ haconiwa ！ その開発動機とは #RubyKaigi #RubyKaigiB - Togetterまとめ">DSLで記述できるmRuby製コンテナ haconiwa ！ その開発動機とは #RubyKaigi #RubyKaigiB - Togetterまとめ</a></li>
<li><a href="http://togetter.com/li/1021974" title="【Unityちゃん】らくらくシェーダコーディング！ mrubyで実装するGLSLジェネレータ #RubyKaigi #RubyKaigiB - Togetterまとめ">【Unityちゃん】らくらくシェーダコーディング！ mrubyで実装するGLSLジェネレータ #RubyKaigi #RubyKaigiB - Togetterまとめ</a></li>
<li><a href="http://togetter.com/li/1021993" title="JRubyにおけるString実装高速化 Rope 紹介 #RubyKaigi #RubyKaigiA - Togetterまとめ">JRubyにおけるString実装高速化 Rope 紹介 #RubyKaigi #RubyKaigiA - Togetterまとめ</a></li>
<li><a href="http://togetter.com/li/1022009" title="Windows環境にて如何にしてマルチプロセスサーバを実現するか fluentd・ServerEngine実装の紹介 #RubyKaigi #RubyKaigiB - Togetterまとめ">Windows環境にて如何にしてマルチプロセスサーバを実現するか fluentd・ServerEngine実装の紹介 #RubyKaigi #RubyKaigiB - Togetterまとめ</a></li>
<li><a href="http://togetter.com/li/1022022" title="【超満員】クックパッド導入事例 Dockerでスケールするジョブキューシステム【登壇者混乱】 #RubyKaigi #RubyKaigiB - Togetterまとめ">【超満員】クックパッド導入事例 Dockerでスケールするジョブキューシステム【登壇者混乱】 #RubyKaigi #RubyKaigiB - Togetterまとめ</a></li>
</ul>


<h2>懇親会</h2>

<p>同じ国立京都国際会館の中のさくらフロアで RubyKaigi 2016 Official Party がありました。</p>

<p>ほとんど<a href="https://github.com/rurema">るりま</a>関連の話をしていただけで終わってしまった感じでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lsで丸数字で始まるファイル名の順番が変だった]]></title>
    <link href="http://blog.n-z.jp/blog/2016-08-30-lc-collate-again.html"/>
    <updated>2016-08-30T22:58:34+09:00</updated>
    <id>http://blog.n-z.jp/blog/lc-collate-again</id>
    <content type="html"><![CDATA[<p>OS X で丸数字から始まるファイル名のファイルが入ったフォルダーを Finder で開くと丸数字の数字順に並んでいたのに、 <code>ls</code> で表示すると別の順番になっていたので原因を調べてみました。</p>

<!--more-->


<h2>動作確認環境</h2>

<ul>
<li>OS X Yosemite (10.10.5)</li>
<li>ls, uniq バージョン不明</li>
<li>sort (GNU coreutils) 5.93</li>
</ul>


<h2>動作確認</h2>

<p>Unicode 的に連続している 丸1 から 丸20 までのファイル名のファイルと、それに適当な ASCII の数字をつけたファイル名のファイルを作成して <code>ls</code> で表示してみました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%  touch $(ruby -e 'puts ("\u{2460}".."\u{2473}").to_a')
</span><span class='line'>%  touch $(ruby -e 'puts ("\u{2460}".."\u{2473}").to_a.shuffle.map.with_index{|e,i|"#{e}#{i}"}')
</span><span class='line'>%  ls
</span><span class='line'>①      ⑤      ⑨      ⑬      ⑰      ⑧0     ⑲12    ⑮16    ⑥2     ⑬6
</span><span class='line'>②      ⑥      ⑩      ⑭      ⑱      ⑤1     ⑱13    ⑳17    ④3     ⑫7
</span><span class='line'>③      ⑦      ⑪      ⑮      ⑲      ⑨10    ②14    ⑪18    ⑭4     ⑦8
</span><span class='line'>④      ⑧      ⑫      ⑯      ⑳      ⑯11    ⑩15    ③19    ⑰5     ①9</span></code></pre></td></tr></table></div></figure>


<p>丸数字のみだと数字順に並んでいるのに、後ろに ASCII の数字をつけた部分は ASCII の数字順に並んでいます。
(numeric sort じゃないので 1,10,2 という順番になっているのがちょっとわかりにくいかもしれませんが。)</p>

<h2>Jessie での動作確認</h2>

<p>比較のために Debian GNU/Linux 8.5 (jessie) でも同様のファイルを作成して <code>ls</code> してみると丸数字のみのところもバラバラの順番でした。
何度か実行しても同じ結果なので、ランダムというわけではなくなんらかの基準がありそうですが、どういう順番なのかはわかりませんでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% ls
</span><span class='line'>⑧  ⑯  ⑥  ⑬  ⑫  ⑦  ①  ③  ⑮  ⑰  ④0  ⑨10  ⑳12  ⑫14  ⑭16  ①18  ⑩2  ⑥4  ⑯6  ⑱8
</span><span class='line'>⑱  ⑩  ⑨  ⑪  ⑲  ⑤  ②  ④  ⑭  ⑳  ⑪1  ⑦11  ⑲13  ⑬15  ⑮17  ⑧19  ⑤3  ②5  ⑰7  ③9</span></code></pre></td></tr></table></div></figure>


<h2>LC_COLLATE</h2>

<p><a href="http://blog.n-z.jp/blog/2013-10-31-lc-collate-uniq.html" title="LC_COLLATEの問題でuniqで丸数字が同一視されてしまう">LC_COLLATEの問題でuniqで丸数字が同一視されてしまう</a>のと同じ話かと思って、 <code>sort</code> や <code>uniq</code> も試してみたところ、同じ話のように見えました。
OS X では locale data が GNU/Linux とは違うようで <code>uniq</code> で同一視されるということは起きませんでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rbenv exec irb -r irb/completion --simple-prompt
</span><span class='line'>&gt;&gt; IO.popen("uniq", "r+"){|io| io.puts ("\u{2460}".."\u{2473}").to_a; io.close_write; puts io.read }
</span><span class='line'>①
</span><span class='line'>②
</span><span class='line'>③
</span><span class='line'>④
</span><span class='line'>⑤
</span><span class='line'>⑥
</span><span class='line'>⑦
</span><span class='line'>⑧
</span><span class='line'>⑨
</span><span class='line'>⑩
</span><span class='line'>⑪
</span><span class='line'>⑫
</span><span class='line'>⑬
</span><span class='line'>⑭
</span><span class='line'>⑮
</span><span class='line'>⑯
</span><span class='line'>⑰
</span><span class='line'>⑱
</span><span class='line'>⑲
</span><span class='line'>⑳
</span><span class='line'>=&gt; nil
</span><span class='line'>&gt;&gt; IO.popen("sort", "r+"){|io| io.puts ("\u{2460}".."\u{2473}").to_a.shuffle; io.close_write; puts io.read }
</span><span class='line'>①
</span><span class='line'>②
</span><span class='line'>③
</span><span class='line'>④
</span><span class='line'>⑤
</span><span class='line'>⑥
</span><span class='line'>⑦
</span><span class='line'>⑧
</span><span class='line'>⑨
</span><span class='line'>⑩
</span><span class='line'>⑪
</span><span class='line'>⑫
</span><span class='line'>⑬
</span><span class='line'>⑭
</span><span class='line'>⑮
</span><span class='line'>⑯
</span><span class='line'>⑰
</span><span class='line'>⑱
</span><span class='line'>⑲
</span><span class='line'>⑳
</span><span class='line'>=&gt; nil
</span><span class='line'>&gt;&gt; IO.popen("sort", "r+"){|io| io.puts ("\u{2460}".."\u{2473}").to_a.shuffle.map.with_index{|e,i|"#{e}#{i}"}; io.close_write; puts io.read }
</span><span class='line'>⑬0
</span><span class='line'>⑥1
</span><span class='line'>⑰10
</span><span class='line'>⑱11
</span><span class='line'>⑤12
</span><span class='line'>⑮13
</span><span class='line'>⑦14
</span><span class='line'>④15
</span><span class='line'>③16
</span><span class='line'>⑪17
</span><span class='line'>⑩18
</span><span class='line'>①19
</span><span class='line'>⑧2
</span><span class='line'>⑲3
</span><span class='line'>⑫4
</span><span class='line'>⑳5
</span><span class='line'>⑭6
</span><span class='line'>②7
</span><span class='line'>⑯8
</span><span class='line'>⑨9
</span><span class='line'>=&gt; nil
</span><span class='line'>&gt;&gt; IO.popen({"LC_COLLATE"=&gt;"C"}, "sort", "r+"){|io| io.puts ("\u{2460}".."\u{2473}").to_a.shuffle.map.with_index{|e,i|"#{e}#{i}"}; io.close_write; puts io.read }
</span><span class='line'>①6
</span><span class='line'>②5
</span><span class='line'>③0
</span><span class='line'>④16
</span><span class='line'>⑤19
</span><span class='line'>⑥18
</span><span class='line'>⑦7
</span><span class='line'>⑧2
</span><span class='line'>⑨8
</span><span class='line'>⑩3
</span><span class='line'>⑪12
</span><span class='line'>⑫15
</span><span class='line'>⑬4
</span><span class='line'>⑭9
</span><span class='line'>⑮14
</span><span class='line'>⑯10
</span><span class='line'>⑰1
</span><span class='line'>⑱17
</span><span class='line'>⑲13
</span><span class='line'>⑳11
</span><span class='line'>=&gt; nil</span></code></pre></td></tr></table></div></figure>


<h2>一番自然に感じる並び順</h2>

<p>ruby の sort での結果は <code>LC_COLLATE=C</code> と同じように文字コード順になり、意味自然な並び順に感じました。
<code>LC_COLLATE=C ls</code> も同じ並び順でした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt; puts Dir['*'].sort
</span><span class='line'>①
</span><span class='line'>①9
</span><span class='line'>②
</span><span class='line'>②14
</span><span class='line'>③
</span><span class='line'>③19
</span><span class='line'>④
</span><span class='line'>④3
</span><span class='line'>⑤
</span><span class='line'>⑤1
</span><span class='line'>⑥
</span><span class='line'>⑥2
</span><span class='line'>⑦
</span><span class='line'>⑦8
</span><span class='line'>⑧
</span><span class='line'>⑧0
</span><span class='line'>⑨
</span><span class='line'>⑨10
</span><span class='line'>⑩
</span><span class='line'>⑩15
</span><span class='line'>⑪
</span><span class='line'>⑪18
</span><span class='line'>⑫
</span><span class='line'>⑫7
</span><span class='line'>⑬
</span><span class='line'>⑬6
</span><span class='line'>⑭
</span><span class='line'>⑭4
</span><span class='line'>⑮
</span><span class='line'>⑮16
</span><span class='line'>⑯
</span><span class='line'>⑯11
</span><span class='line'>⑰
</span><span class='line'>⑰5
</span><span class='line'>⑱
</span><span class='line'>⑱13
</span><span class='line'>⑲
</span><span class='line'>⑲12
</span><span class='line'>⑳
</span><span class='line'>⑳17
</span><span class='line'>=&gt; nil</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% LC_COLLATE=C ls
</span><span class='line'>①      ③      ⑤      ⑦      ⑨      ⑪      ⑬      ⑮      ⑰      ⑲
</span><span class='line'>①9     ③19    ⑤1     ⑦8     ⑨10    ⑪18    ⑬6     ⑮16    ⑰5     ⑲12
</span><span class='line'>②      ④      ⑥      ⑧      ⑩      ⑫      ⑭      ⑯      ⑱      ⑳
</span><span class='line'>②14    ④3     ⑥2     ⑧0     ⑩15    ⑫7     ⑭4     ⑯11    ⑱13    ⑳17</span></code></pre></td></tr></table></div></figure>


<h2>Finder での並び順</h2>

<p>Finder での並び順は <code>LC_COLLATE=C</code> での結果と同じかと思いきや、丸1 の後に 丸10 がきて、丸19, 丸2, 丸20, 丸3 のように並んでいたので、独特な感じでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>①
</span><span class='line'>①9
</span><span class='line'>⑩
</span><span class='line'>⑩15
</span><span class='line'>⑪
</span><span class='line'>⑪18
</span><span class='line'>⑫
</span><span class='line'>⑫7
</span><span class='line'>⑬
</span><span class='line'>⑬6
</span><span class='line'>⑭
</span><span class='line'>⑭4
</span><span class='line'>⑮
</span><span class='line'>⑮16
</span><span class='line'>⑯
</span><span class='line'>⑯11
</span><span class='line'>⑰
</span><span class='line'>⑰5
</span><span class='line'>⑱
</span><span class='line'>⑱13
</span><span class='line'>⑲
</span><span class='line'>⑲12
</span><span class='line'>②
</span><span class='line'>②14
</span><span class='line'>⑳
</span><span class='line'>⑳17
</span><span class='line'>③
</span><span class='line'>③19
</span><span class='line'>④
</span><span class='line'>④3
</span><span class='line'>⑤
</span><span class='line'>⑤1
</span><span class='line'>⑥
</span><span class='line'>⑥2
</span><span class='line'>⑦
</span><span class='line'>⑦8
</span><span class='line'>⑧
</span><span class='line'>⑧0
</span><span class='line'>⑨
</span><span class='line'>⑨10</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LLoTに参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-08-27-llot.html"/>
    <updated>2016-08-27T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/llot</id>
    <content type="html"><![CDATA[<p>初回から毎年参加している LL イベントの <a href="http://ll.jus.or.jp/2016/" title="LLoT – Lightweight Language of Things">LLoT – Lightweight Language of Things</a> に今年も参加しました。</p>

<p>今回は昼と夜の2部開催ということで、初の2部開催だった<a href="http://ll.jus.or.jp/2005/" title="LLDN">LLDN</a>のTシャツを着て行きました。</p>

<!--more-->


<p>以下はそのメモです。</p>

<h2>開会</h2>

<p>時間が厳しいということで手短に説明をして始まりました。</p>

<h2>Language Update</h2>

<p>これも時間が短いのか、どんどん進んでいきました。</p>

<h3>Java Update</h3>

<ul>
<li><a href="http://www.slideshare.net/torutk/llot2016-java-update">http://www.slideshare.net/torutk/llot2016-java-update</a></li>
<li>Java の紹介</li>
<li>Java の歴史</li>
<li>10 年に一度大きな変更 : 2004 ジェネリクス、2014 ラムダ式</li>
<li>Java の近況</li>
<li>Java Update - Java SE 8</li>
<li>ラムダ式</li>
<li>インタフェースへの実装</li>
<li>static メソッドの実装、default メソッドの実装</li>
<li>メリット: 既存のインタフェースにメソッドを追加しても壊れない</li>
<li>JavaFX 8</li>
<li>Java SE 9 と LL との関係は時間の関係で省略</li>
</ul>


<h3>Language Update PHP 編</h3>

<ul>
<li><a href="http://www.slideshare.net/hnw/laungage-update-php">http://www.slideshare.net/hnw/laungage-update-php</a></li>
<li>近頃の PHP 界隈</li>
<li>トピック 1: PHP 7 速いよ!</li>
<li>10年ぶりのメジャーバージョンアップ</li>
<li>他の言語ならマイナーバージョンアップ相当</li>
<li>内部実装の大変更・高速化</li>
<li>広報互換性は原則維持</li>
<li>何を高速化したのか?</li>
<li>特徴的だった取り組み</li>
<li>WordPress をベンチマーク対象として高速化を進めた</li>
<li>高速化チームに一定の裁量を渡した</li>
<li>PHP 7 の性能</li>
<li>高速化って必要だったの?</li>
<li>Facebook 製の別実装 (HHVM) が倍以上高速だった</li>
<li>データ構造を見直す良い機会だった</li>
<li>トピック 2: PHP 7.1 リリースへ</li>
<li>2016 年 12 月頃 PHP 7.1.0 リリース予定</li>
<li>目立った変更点</li>
<li>トピック 3: エコシステム定着</li>
<li>ここ数年で Composer の利用が定着</li>
<li>参加者を増やしつつ破綻しない仕組み</li>
<li>「ユーザー名/パッケージ名」で登録</li>
<li>対応する GitHub/BitBucket の URL を登録する</li>
<li>トピック 4: 開発支援環境の普及</li>
<li>IDE、特に PhpStorm 利用者が増えている印象</li>
<li>トピック 5: 他の言語の「普通」を採用</li>
<li>トピック 6: 地方コミュニティ活性化</li>
<li>PHPカンファレンスが日本各地で開催 (2016年は4箇所)</li>
</ul>


<h3>Perl Language Update</h3>

<ul>
<li>Perl 6 クリスマスバージョン</li>
<li>Rakudo Perl 6</li>
<li>Rakudo の実行環境</li>
<li>長年 Perl 6 の土台となってきた Parrot はついに完全引退</li>
<li>Rakudo Star</li>
<li>四半期に一度くらいのペースでリリースが続いている</li>
<li>Perl 5 の近況</li>
<li>地味に更新が続いている</li>
<li>Perl 5.14 で実験的に導入された auto deref が削除</li>
<li>5.20 で実験的に導入された postderef 機能が正式化</li>
<li><code>@{$arrayref}</code> -> <code>$arrayref-&gt;@*</code></li>
<li><code>%{$hashref}</code> -> <code>$hashref-&gt;%*</code></li>
<li>YAPC::Hokkaido 2016</li>
<li><a href="http://yapcjapan.org/2016hokkaido/">http://yapcjapan.org/2016hokkaido/</a></li>
</ul>


<h3>Python の今、ぶっちゃけ</h3>

<ul>
<li><a href="http://www.slideshare.net/hirokiky/llot-python-65410202">http://www.slideshare.net/hirokiky/llot-python-65410202</a></li>
<li>Type Hinting : 型ヒント</li>
<li>Python 標準で型を明記できる</li>
<li>Python 自体は制約を与えない</li>
<li>IDE などが利用する</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def add(a: int, b: int) -&gt; int:
</span><span class='line'>    return a + b</span></code></pre></td></tr></table></div></figure>


<ul>
<li>typing モジュール</li>
<li>Python 3.5 で追加された</li>
<li>Python 3.2~3.4 では php install typing すれば良い</li>
<li>他 Python 3.5</li>
<li>async (async def, async for…), await 構文</li>
<li>行列計算演算子 <code>@</code></li>
<li>Python 3 を使っているか - 使っている</li>
<li>Python 2,3 議論は終わった</li>
<li>Python 3 に対応していないライブラリーはない</li>
<li>さっさと移行しろフェーズ</li>
<li>環境まわり</li>
<li>pip が標準でインストールされる</li>
<li>pyvenv も標準でインストールされる</li>
<li>どうやっているか</li>
<li>公式 Mac バイナリーしか使わない : python.org</li>
<li>パッチバージョン何でも良い</li>
<li>周辺の話</li>
<li>データ系が多い話</li>
<li>Django</li>
</ul>


<h3>Language Update JS</h3>

<ul>
<li><a href="http://www.slideshare.net/teppeis/javascript-language-update-2016-llot">http://www.slideshare.net/teppeis/javascript-language-update-2016-llot</a></li>
<li>周辺の話が多すぎるので、言語仕様の話だけ</li>
<li>ECMAScript</li>
<li>ES2015</li>
<li>5年ぶりの大きな変更</li>
<li>WEB+DB PRESS 87 参照</li>
<li>ES6 compat-table score</li>
<li>ES2016</li>
<li>2016/6/14 公開</li>
<li>新機能は2つだけ</li>
<li>Array.prototype.includes</li>
<li>Exponentiation Operator</li>
<li>新しい仕様策定プロセス</li>
<li>仕様提案を 5 段階の Stage で管理</li>
<li>最終 Stage に到達した仕様をまとめて、毎年6月にES20XXとしてリリース</li>
<li>最終 Stage に進むには2つの実装が必要</li>
<li>GitHub でオープンに議論</li>
<li>もはや言語バージョンは無意味</li>
<li>&ldquo;ES20XX&rdquo; みたいなバージョンは意味が薄い</li>
<li>個別機能の Stage や実装状況が重要</li>
<li>compat-table を見ておこう</li>
<li>ES2017</li>
<li>Async Functions</li>
<li>ES6 Modules</li>
<li>大激論中</li>
<li>ES6 ではシンタックスのみを仕様化</li>
<li>実装はまだまだこれから</li>
</ul>


<h3>最近の Ruby</h3>

<ul>
<li><a href="http://qiita.com/takahashim/items/a0afa8765682f2cce659">http://qiita.com/takahashim/items/a0afa8765682f2cce659</a></li>
<li>Ruby 最新情報</li>
<li>RubyKaigi 2016</li>
<li>安定版 : Ruby 2.3.1</li>
<li>現在開発中の Ruby 2.4.0</li>
<li>基本的に地味</li>
<li>派手な奴は 3.0 に期待</li>
<li>Ruby 2.4 の変更点</li>
<li>Fixnum と Bignum が Integer に統合</li>
<li>内部実装の違いという見せ方に変わる</li>
<li>普通に利用している分にはあまり問題にならない</li>
<li>C拡張ライブラリが死ぬ</li>
<li>現状では即死するようになっている</li>
<li>2.4.0 リリース時には?</li>
<li>String#{downcase,upcase,capitalize} の Unicode 対応</li>
<li>今までは ASCII の範囲内では正しく動作</li>
<li>広く Unicode に対応できるように</li>
<li>後置 rescue の構文</li>
<li>a = Date.parse &ldquo;foo&rdquo; rescue nil</li>
<li>a = Date.parse(&ldquo;foo&rdquo;) rescue nil</li>
<li>Enumerable#sum, Array#sum</li>
<li>今までは各種ライブラリ側で実装</li>
<li>2.4 で標準</li>
<li>浮動小数点演算で誤差がたまらない実装を採用</li>
<li>Array#inject(:+) だと誤差がたまるので注意</li>
<li>Regexp#match? の導入</li>
<li>CGI.unescape 高速化</li>
<li>スレッド内での例外処理の向上</li>
<li>細かい高速化</li>
<li>今後の予定</li>
<li>2016/9 Preview 2</li>
<li>2016/11 Preview 3</li>
<li>2016/12 RC</li>
<li>2016/12/25 リリース</li>
<li>他実装の話</li>
<li>JRuby</li>
<li>JRuby 9000 (9.1.2.0)</li>
<li>Rubinius</li>
<li>Rubinius 3.56</li>
<li>Rubinius X</li>
<li>mruby</li>
<li>mruby 1.2.0 (2015/11/18)</li>
<li>mrbgems</li>
<li>mruby CLI</li>
<li>H2O に組み込まれた</li>
<li>Opal</li>
<li>AltJS</li>
<li>Opal v0.10.1</li>
<li>Playground / TryRuby v4</li>
</ul>


<p>後置 rescue の件は変更が入った時に、<code>p(1 if true)</code> みたいなのが通らない (引数は文ではなく <code>p((1 if true))</code> のように式にしないといけない) のと同じように (使いにくい) 仕様だと思っていたので、ちょっと驚いた覚えがあります。</p>

<p>夜の部の時に聞いたのですが、 Ruby/Tk が gem として外だしされ、開発場所が <a href="https://github.com/ruby/tk">https://github.com/ruby/tk</a> になり、 ruby 本体のレポジトリから削除されたという話が抜けていたそうです。</p>

<p>openssl も <a href="https://github.com/ruby/openssl">https://github.com/ruby/openssl</a> で開発が進んでいますが、 ruby 本体のレポジトリでの扱いはどうなるんでしょうか。
rake や Ruby/Tk みたいに削除されて gems/bundled_gems に入るのか、 rubygems や rdoc のように gem になるけど ruby 本体のレポジトリにも適宜取り込んでいくのか。
多分後者だと思っているのですが。</p>

<p>2016-08-30 追記: やはり openssl は本体のレポジトリにも取り込んでいく gem (default gem) になったようです。
それから、 Ruby 2.4.0 では tk の他に xmlrpc も bundled gem になるようです。</p>

<h2>キーボードにこだわろう</h2>

<ul>
<li>どのくらいキーボードにお金をかけているか会場にアンケート</li>
<li>0円 (ノートPC のそのままなど) から数万円までどの価格帯でもそれなり。</li>
<li>5万円以上はさすがにいなかった。</li>
<li>登壇者紹介</li>
</ul>


<blockquote><p>アメリカ西部のカウボーイたちは、馬が死ぬと馬はそこに残していくが、どんなに砂漠を歩こうとも、鞍は自分で担いで往く。馬は消耗品であり、鞍は自分の体に馴染んだインタフェースだからだ。
いまやパソコンは消耗品であり、キーボードは大切な、生涯使えるインタフェースであることを忘れてはいけない。
［東京大学 名誉教授 和田英一］</p></blockquote>

<ul>
<li>PFU 無刻印の話など</li>
<li>RealForce の歴史</li>
<li>1981 キーボード試作機完成</li>
<li>2000 リアルフォース発売</li>
<li>2012 リアルフォース10周年</li>
<li>(なぜか12年なのに10周年)</li>
<li><p>金融向けなどの専用キーボードのノウハウをリアルフォースに活用</p></li>
<li><p>とあるギークのキーボード遍歴</p></li>
<li>作業環境</li>
<li>キーボード: ErgoDox, ErgoDox EZ, ノート PC 付属 (US 配列)</li>
<li>2000年まではあまり高価でないフルサイズキーボード</li>
<li>2000年〜2004年頃 会社マシンのキーボード</li>
<li>2004年頃 Happy Hacking Keyboard Professional</li>
<li>静電容量無接点方式</li>
<li>タイピングが軽いというのを重視していて、コンパクトでキーが少ないことには興味がなかった</li>
<li>2006年頃 ストレートネック</li>
<li>2011年頃 Realforce 87UB</li>
<li>ファンクションキーが欲しい</li>
<li>KDE ではグローバルショートカットを多用</li>
<li>カーソルキーも欲しい</li>
<li>静電容量無接点方式でファンクションキーのついている、テンキーのないキーボードとして Realforce 87UB</li>
<li>2015年〜 ErgoDox + ErgoDox EZ</li>
<li>セパレートによるリラックスした姿勢</li>
<li>HHK Pro や Realforce は良いキーボードだが、長時間タイプすると肩や腕が疲れる</li>
<li>手首の角度</li>
<li>水平ではなくろくろの角度が自然</li>
<li>親指の活用</li>
<li>ErgoDox では左右 6 (8?) つずつ</li>
<li>究極のカスタマイズ性</li>
<li>すべてのキーをカスタマイズ可能</li>
<li>ErgoDox Configurator</li>
<li>全ての指に負担を分散</li>
<li>レイヤー機能</li>
<li>キー数が足りない分はレイヤーで補う</li>
<li><p>カスタマイズは永遠に続く</p></li>
<li><p><a href="http://www.topre.co.jp/products/elec/keyboards/features.html">http://www.topre.co.jp/products/elec/keyboards/features.html</a> の 入力部の構造 の説明</p></li>
<li>部品の写真で説明</li>
<li>入力部の構造 の下の 荷重特性 の話</li>
<li>キーボード配列が斜めにずれているのはタイプライターのハンマーが重ならないようにしていたのが由来</li>
<li>ErgoDox のセパレートの話</li>
<li>某大学教授は HHKB 2台で&#8221;エルゴノミック&#8221;</li>
<li>Kinesis の縦に並んでいるのは最初は違和感があったが慣れたら他のキーボードとの使い分けも問題なくなった</li>
<li>親指でシフトキーの話</li>
<li>Kinesis は凹んでいるが逆に山になっているキーボードを使ったことがある人はいるかというアンケートをしてみたら、いなさそうだった。</li>
<li><p>ErgoDox でレイヤー切り替えを親指で、数字キーのところがレイヤーが切り替わるとファンクションキーになるようにしている話</p></li>
<li><p>ハードウェアよりの話に戻す</p></li>
<li>ロールオーバーの話</li>
<li>USB の規格で制限がある</li>
<li>ロールオーバーというのはキーの同時押しのときの話</li>
<li>キートップの材質の話</li>
<li>輪島塗で 50 万円の世界一高いキーボード</li>
<li><p>フットペダルの話は時間がないので省略</p></li>
<li><p>会場から質問タイム</p></li>
<li>耐久性の話があったが、使い込めば手になじむというのはどうなのかという話</li>
<li>貴重な意見をありがとうございます</li>
<li>人間の方が訓練されているのではないかという説</li>
<li>左手のみとか右手のみとかの話</li>
<li>ErgoDox の USB チップのメーカーがなんとか (よくわからなかった)</li>
<li>Dvorak 配列は片手用がある</li>
<li>無刻印の日本語キーボードが欲しいという話</li>
<li>HHKB はキートップも別買いできるという返答</li>
<li>ErgoDox を使うとき、肘は固定しているのかという話</li>
<li>パームは固定しているが、肘は固定してない</li>
<li>アームレストにはバナナがちょうどいいらしいです。 <a href="https://twitter.com/MiUKi_None/status/733594800608305152">https://twitter.com/MiUKi_None/status/733594800608305152</a></li>
</ul>


<h2>昼休み</h2>

<div style="float:right">
<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4274219151&amp;linkId=6592721f04587dcd0524636667beb5a4"></iframe>
</div>


<ul>
<li>この時間に 3F に T シャツ引換に行きました。</li>
<li>「<a href="http://amzn.to/2bUWNxg">プログラミングElixir</a>」を買いました。消費税分割引で 2,800 円でした。</li>
<li>さくらのクラウドのクーポン (2万円分) をもらいました。今まで何度も使う前に失効させてしまっているので、今度こそちゃんと使いたいと思いました。</li>
<li>フォーチューンクッキーをもらったら、これもさくらインターネットのものでした。</li>
</ul>


<h2>Dynamic Typing 再考</h2>

<ul>
<li>登壇者紹介</li>
<li>各言語の詳しい人</li>
<li>再考 は 最高 とかけている</li>
<li>動的型付けとは何か</li>
<li><a href="http://amzn.to/2bObH9O">TAPL こと型システム入門</a></li>
</ul>


<blockquote><p>「動的型付けされる」といった言い回しは 誤っているといって差し支えなく、おそらく「動的検査される」と言い換えるべきであるが、標準的に使われる用語法である。
型システム入門 2 ページより引用</p></blockquote>

<ul>
<li>静的型付け vs 動的型付け</li>
<li>Lightweight Language</li>
<li>もともとは Dynamic Language だった</li>
<li>1980年代: 動的 (Smalltalk)</li>
<li>1990年代: 静的 (C++, Java)</li>
<li>2000年代: 動的 (LL, Objective-C)</li>
<li>2010年代: 静的 (Scala, Go, Swift, Kotlin)</li>
<li>2020年代: ????</li>
<li>どちらが良いのか?</li>
<li>結局好みの問題になる</li>
<li>現代の動的型付け言語: JavaScript, Ruby, Smalltalk</li>
<li>Dynamic Typing 再考 JavaScript 編</li>
<li>AltJS 乱世の生き残りは『型』</li>
<li>TypeScript (MS), Flowtype (Facebook), Closure Compiler (Google)</li>
<li>背景</li>
<li>他の便利機能は ES6 で満足された</li>
<li>JavaScript での大規模開発が一般的に</li>
<li>ブラウザでは JS 以外の選択肢がない</li>
<li>型の付け方</li>
<li>TypeScript: 後置型修飾</li>
<li>Closure Compiler: JSDoc</li>
<li>Flowtype: 後置型修飾 or 独自コメント</li>
<li>どれも JavaScript に変換が必要</li>
<li>Status of Static Typing in ECMAScript <a href="https://ecmascript-daily.github.io/pages/status-of-static-typing-in-ecmascript/">https://ecmascript-daily.github.io/pages/status-of-static-typing-in-ecmascript/</a></li>
<li>どれも午前中の説明で出てきた Stage 0 で終了している</li>
<li>TypeScript は言語、 Closure Compiler と Flowtype はチェックツール</li>
<li>ECMAScript 4 での失敗があるので後方互換性に問題のある変更は入りにくそう</li>
<li>もともと型定義がないので、ライブラリで困る</li>
<li>TypeScript はコミュニティベースで頑張っている</li>
<li>Flowtype などは互換性がないので TypeScript の資産は流用できない</li>
<li>TypeScript の型定義はライブラリによって品質がバラバラ、ライブラリのバージョンアップに弱い</li>
<li>Flowtype はライブラリごと再開発している</li>
<li>jQuery ぐらいメジャーだとどれでも対応しているが power assert ぐらいだと微妙</li>
<li>標準ライブラリや DOM は割と明確に型が決まっている</li>
<li>完全に動的なものだと型付けがあまり役に立たない</li>
<li>ES6 で class が入ったので型付けに優しくなっている</li>
<li>まつもとさん: JavaScript のようにみんなでやっていると意思の統一が難しそう</li>
<li>梅澤さん: JavaScript 関連については今は様子見中</li>
<li>TypeScript は一定のレベルにきた感じ</li>
<li>まつもとさん</li>
<li>80年代は Smalltalk や Lisp のような動的なものしかなかった</li>
<li>C++ や Java やリスコフの置換原則などがでてきた</li>
<li>DRY 原則</li>
<li>duck typing</li>
<li>型を書かなくてもプログラムは動く</li>
<li>動いているプログラムに型を書くのは冗長で DRY 原則に反する</li>
<li>IO クラスと書いてしまうと IO のサブクラスではない IO のふりをするオブジェクトを渡せなくなる</li>
<li>未来に対する可能性を閉じない</li>
<li>静的型と動的型の振り子は20年周期ぐらいと感じている</li>
<li>Ruby 3 は構想中</li>
<li>静的な型チェックは入れたい</li>
<li>ポリシーは絶対に型を書きたくない</li>
<li>具体的な型を書くというのは脳の負荷が高いので Lightweight (Language) ではない</li>
<li>コンパイラが矛盾を指摘してくれるようにしたい</li>
<li>ライブラリはテストを書くはずなので、その実行時の情報を蓄積すれば IDE の補助やコンパイル時の型チェックに使えるのではないか</li>
<li>1.8 から 1.9 の非互換があったがみんな移行してくれた、 3 倍ぐらい高速化していたからではないか (ベンチマークによっては 50 倍ぐらい)</li>
<li>実装はまだ</li>
<li>Erlang のダイアライザーではコメントで書くものを実行時の情報でやろうとしている</li>
<li>普通に書かせると nominal typing になるが structual typing にしたい</li>
<li>String と書くと String のメソッドすべてを実装しないと通らないとかいうのは避けたい</li>
<li>梅澤さん: Smalltalk の話に似ている部分があった (型は書きたくないという感じ)</li>
<li>Smalltalk 80 よりも Smalltalk 76 の方が Ruby に似ている</li>
<li>梅澤さん</li>
<li>Smalltalk とは</li>
<li>ミニマリズムの言語</li>
<li>すべてはオブジェクト</li>
<li>オブジェクトがメッセージ送信する</li>
<li>の2つのみで成り立つ</li>
<li>プログラミング言語の壁</li>
<li>使う人、作る人、言語を作る人</li>
<li>Smalltalk には上の区別がない</li>
<li>自由の世界の重要性</li>
<li>デモ: <a href="http://www.slideshare.net/umejava/multilines">http://www.slideshare.net/umejava/multilines</a></li>
<li><a href="http://www.slideshare.net/umejava/supersupersubsub">http://www.slideshare.net/umejava/supersupersubsub</a> は時間がないので省略</li>
<li>静的型の導入</li>
<li>Typed Smalltalk (1988)</li>
<li>StrongTalk (1993)</li>
<li>SmallInterfaces (2000)</li>
<li>Gradualtalk (2014)</li>
<li>産業界では実のところあまり困っていない</li>
<li>オブジェクトが答えてくれる</li>
<li>ALLSTOCKER.com by SORABITO</li>
<li>バックエンドは Smalltalk でフロントエンドは JavaScript を普通に書いている</li>
<li>関係ないけど SqueakJS というのもあるという紹介</li>
<li>会場から質問 (1個だけ)</li>
<li>型はプログラマの意図を伝えるもの、動的型ではユニットテストが相当するのではないか、DRY 原則との関連はどうか</li>
<li>まつもとさん: テストも本当は書きたくないが、必要悪として書いている</li>
</ul>


<h2>休憩</h2>

<ul>
<li>T シャツの引き換えやキーボードの展示などの 3F はこの時間まで</li>
</ul>


<h2>Kotlin vs Swift</h2>

<ul>
<li><p>新言語はモバイル開発をどう変えるか</p></li>
<li><p>言語仕様や特長, 開発者へのメリット</p></li>
<li>Kotlin</li>
<li>そもそも Kotlin とは? Better Java</li>
<li>Kotlin の特徴: 簡単, Interop, Android, 安全</li>
<li>簡単: クラスとプロパティ</li>
<li>簡単: データクラス</li>
<li>簡単: 拡張関数</li>
<li>安全: Null安全</li>
<li>モバイル開発者にとってのメリット: Interop, Android, 効率</li>
<li>Swift</li>
<li><a href="https://github.com/kishikawakatsumi/KeychainAccess">https://github.com/kishikawakatsumi/KeychainAccess</a></li>
<li>Swift とは?</li>
<li>2014年のWWDCで発表された</li>
<li>C, Objective-C と極めて高い互換性がある</li>
<li>2015年からオープンソース</li>
<li>Swift の言語仕様や特長</li>
<li>Statically typed</li>
<li>Strongly typed</li>
<li>動的な性質はほとんどない</li>
<li>動的な性質が使いたい場合は Objective-C ランタイムを使う</li>
<li>No Garbage Collections</li>
<li>Playground (超すごい REPL)</li>
<li>型安全</li>
<li>Statically typed</li>
<li>Strongly typed</li>
<li>Casting (<code>as?</code>)</li>
<li>Optional Type</li>
<li>モダンな言語仕様</li>
<li>Type Inference (型推論)</li>
<li>Optional Type</li>
<li>Generics</li>
<li>Pattern Matching</li>
<li>First-class functions</li>
<li>Operator Overloading</li>
<li>Protocol Extensions</li>
<li>Open Source</li>
<li>IBM Swift Sandbox</li>
<li>Serverside Swift</li>
<li>Swift Evolution</li>
<li>基本データ型</li>
<li>No GC!</li>
<li>Automatic Reference Counting (ARC)</li>
<li>循環参照が解放できない</li>
<li>オブジェクトの解放が予測可能</li>
<li><p>Playground (超すごい REPL) はあとで</p></li>
<li><p>会場アンケート</p></li>
<li>Kotlin 使っている方: いない?</li>
<li>Swift 使っている方: 少ない?</li>
<li>Objective-C 使っている方: 少ない?</li>
<li><p>モバイル開発している方: そもそも少ない?</p></li>
<li><p>注意点や落とし穴</p></li>
<li>Kotlin</li>
<li>Java用ツールやフレームワークまわり</li>
<li>Kotlin コードのコンパイル後の姿を想像するスキルが求められる</li>
<li>例えば JUnit</li>
<li>static field に <code>@DataPoints</code> をつけたい</li>
<li>companion object と <code>@JvmField</code> を使う</li>
<li>Swift</li>
<li>ソースコード・バイナリ互換性</li>
<li>Swift のバージョンアップに対応するのが大変</li>
<li>50M ぐらいのランタイムをみんな抱えている</li>
<li>コンパイラの安定性</li>
<li>Segmentation Fault: 11</li>
<li><a href="https://github.com/practicalswift/swift-compiler-crashes">https://github.com/practicalswift/swift-compiler-crashes</a></li>
<li>コンパイラが検出しない変更</li>
<li>エラーメッセージがわかりにくい</li>
<li><p>リファクタリング機能がまだない</p></li>
<li><p>今後のバージョンアップ</p></li>
<li>Kotlin</li>
<li>バージョン1.1で追加予定の機能</li>
<li>コルーチン、型エイリアス、Bound Callable Reference, etc.</li>
<li>Swift 3</li>
<li>API デザインガイドライン</li>
<li>Objective-C API との親和性 (より Swift らしく)</li>
<li>構文における一貫性の向上</li>
<li>ツールチェーンの安定化</li>
<li>パフォーマンス</li>
<li>メッセージの改善</li>
<li>Swift 3.x (Spring 2017), Swift 4 (Fall 2017)</li>
<li>Source/ABI 安定化</li>
<li>品質とパフォーマンスの向上</li>
<li>Generics の高機能化</li>
<li>Memory ownership model</li>
<li>並列プログラミングモデル</li>
<li>Reflection</li>
<li><p>C++</p></li>
<li><p>フリートーク</p></li>
<li>Swift で Objective-C を嫌がっていた Web フロントエンド開発者が iOS アプリも開発してくれるようになった。</li>
<li>Kotlin でコード量が減った。コレクション操作とかサードパーティライブラリなどが不要になった。 Null の扱いに安心感がある。</li>
<li>会場から</li>
<li>Kotlin の IDE は? Java だと Android Studio</li>
<li>Android Studio に Kotlin のプラグインがある。</li>
<li>IntelliJ IDEA</li>
<li>Swift と C/Objective-C との親和性。ダブルポインタ(?)で困った。</li>
<li>回答聞き取れず</li>
<li>Kotlin と Swift との関係性。 iOS と Android の両対応したいときとか。</li>
<li>GUI のフレームワークの思想やコンセプトが違いすぎるので、両方やるのが無難</li>
<li>どちらもサーバー側もできる。たとえば Kotlin は Servlet とかもできる。</li>
<li>Swift のサーバー側はまだ厳しい。 Objective-C のランタイムのない環境はまだまだ。</li>
<li>両対応するために JavaScript という選択肢もあるが、どちらにしろ茨の道</li>
<li>Playground の話</li>
<li>iOS 10 から iPad でも動く</li>
<li>iPad の Playground のデモ</li>
<li>補完とかもしっかり動く</li>
<li>Drag and Drop で編集とか</li>
</ul>


<h2>抽選</h2>

<ul>
<li>恒例のボール投げ</li>
<li>今年はもらえなかった</li>
</ul>


<h2>エンディング</h2>

<ul>
<li>恒例の会場の写真などが入っていて当日作成されたビデオ上映</li>
<li>アンケートのお願い <a href="http://ll.jus.or.jp/2016/enquete">http://ll.jus.or.jp/2016/enquete</a></li>
</ul>


<h1>LLoT Night</h1>

<p>会場が地下ということもあり、電波が入らなかったのと、食事中ということもありメモがとれませんでした。</p>

<h2>フロントエンドだめ自慢</h2>

<ul>
<li>React.js と Riot.js の話でした。</li>
<li><a href="https://speakerdeck.com/cognitom/llot-night-riot-dot-js">https://speakerdeck.com/cognitom/llot-night-riot-dot-js</a></li>
<li>Riot.js は Qiita の記事で見たことがあると言う程度だったので、会場に Riot.js を知っている人という問いかけがあったときに一応手をあげました。</li>
<li>Riot.js はコアコミッターが砂漠に消えたという話が印象深かったです。</li>
<li>Riot.js はコンパイラが正規表現ということで、若干の不安を感じます。</li>
<li>Riot.js の innerHTML を使っているというのは、どういう点がダメなのかわかりませんでした。</li>
<li>React の方はどういう話だったのか思い出せませんでした。(資料公開待ち)</li>
</ul>


<h2>帰ってきたデモ自慢</h2>

<h3>5分で出来るIoT</h3>

<p>デモがうまく動かず、結局あらかじめ用意していた動画を流して終了でした。</p>

<h3>プロジェクト°D ﾂﾜﾓﾉどもが夢の跡</h3>

<p>みどころに「昨年のプロジェクト℃の続編」とありましたが、冒頭ではどいういう話か思い出せませんでしたが、内容を聞けばそういう話もあったなあと思い出しました。</p>

<p>結局デモはなかった?</p>

<h3>Googleカレンダーで図書館の貸出予約状況を管理するLiblendrsv(Ruby)</h3>

<ul>
<li>本借りすぎじゃないかと法林さんからのツッコミがありましたが、その通りだと思いました。</li>
<li>デモ自体はブラウザーが勝手に動いて面白そうな感じだったが、ウインドウがプロジェクター側にちゃんと出ていなくて、移動させてくる必要があったりして、ちょっと残念な感じでした。</li>
<li><a href="https://github.com/hotuta/Liblendrsv">https://github.com/hotuta/Liblendrsv</a></li>
<li>一貫して Calendar を Calender と間違っているのが気になりました。</li>
<li>pit というパスワードを別途管理するライブラリは存在は知っていたけど、使ったことはないなあと思いました。</li>
</ul>


<h2>エンディング</h2>

<ul>
<li>19:45頃</li>
<li>昼の部と違って音楽のみ</li>
<li>再度アンケートのお願い <a href="http://ll.jus.or.jp/2016/enquete">http://ll.jus.or.jp/2016/enquete</a></li>
<li>会場が 20:00 までなのできりのいいところで帰るようにという話</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X の Emacs で EasyPG が gpg2 で Opening input file: Decryption failed, になったので対処した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-08-20-mac-easypg-gpg2.html"/>
    <updated>2016-08-20T13:23:22+09:00</updated>
    <id>http://blog.n-z.jp/blog/mac-easypg-gpg2</id>
    <content type="html"><![CDATA[<p>OS X の Homebrew で入れている gnupg が更新されて gpg コマンドではなく gpg1 コマンドしか入らなくなって、 gpg コマンドは gnupg2 で入れるようになった影響で、 Emacs 上の EasyPG で <code>*.gpg</code> ファイルを開くときに <code>Opening input file: Decryption failed,</code> で開けなくなったので、その対処をしました。</p>

<!--more-->


<h2>対象バージョン</h2>

<p>OS 自体以外は Homebrew で入れたバージョンです。</p>

<ul>
<li>OS X : Yosemite (10.10.5)</li>
<li>Emacs.app : 24.5.1</li>
<li>gnupg : 1.4.21</li>
<li>gnupg2 : 2.0.30_2</li>
<li>gpg-agent : 2.0.30_1</li>
<li>pinentry-mac : 0.9.4</li>
</ul>


<h2>現象</h2>

<p><code>*.gpg</code> ファイルを開くと今までは minibuffer でパスフレーズをきいてきていたのに、 gpg コマンドが gnupg 1 系から gnupg 2 系に変わったら、 <code>Opening input file: Decryption failed,</code> というエラー (<code>*Messages*</code> バッファには <code>epa-file--find-file-not-found-function: Opening input file: Decryption failed,</code> と出ていた) で開けなくなりました。</p>

<h2>対処方法案</h2>

<p><code>(setq epg-gpg-program "gpg1")</code> で古い gnupg を使い続けるという案も考えましたが、今後のことを考えると新しいバージョンを使った方が良いだろうと思ってやめました。</p>

<p><a href="http://www.bookshelf.jp/cgi-bin/goto.cgi?file=auth-ja&amp;node=GnuPG+and+EasyPG+Assistant+Configuration">A. GnuPG および EasyPG アシスタントの設定</a> によると gpg2 は gpg-agent との組み合わせが必須のようだったので、 gpg-agent を使うことにしました。</p>

<h2>対処方法</h2>

<p>端末上で <code>gpg -c hoge.txt</code> や <code>gpg -c hoge.txt.gpg</code> を試してみると <code>pinentry-curses</code> が使われているとわかったので、 <code>brew install pinentry-mac</code> で pinentry-mac をインストールして、 <code>Caveats</code> に出てきたように <code>~/.gnupg/gpg-agent.conf</code> を作成して <code>pinentry-program /usr/local/bin/pinentry-mac</code> という設定を入れたところ、 Emacs 上でも <code>*.gpg</code> ファイルを開くときに pinentry-mac でパスフレーズをきかれるようになって、開けるようになりました。</p>

<p>パスフレーズを入力できるようにするだけなら pinentry の設定だけで gpg-agent の起動は必要ありませんでした。
パスフレーズを毎回入力する必要があるというのは今までと同じ使い勝手なので、 gpg-agent の起動までは追求しませんでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>==&gt; Caveats
</span><span class='line'>You can now set this as your pinentry program like
</span><span class='line'>
</span><span class='line'>~/.gnupg/gpg-agent.conf
</span><span class='line'>    pinentry-program /usr/local/bin/pinentry-mac
</span><span class='line'>
</span><span class='line'>.app bundles were installed.
</span><span class='line'>Run `brew linkapps pinentry-mac` to symlink these to /Applications.</span></code></pre></td></tr></table></div></figure>


<h2>将来の対処方法案</h2>

<p>gpg-agent は 2.1.5 から <code>--allow-emacs-pinentry</code> というオプションが追加されていて、 <a href="http://unix.stackexchange.com/questions/55638/can-emacs-use-gpg-agent-in-a-terminal-at-all">http://unix.stackexchange.com/questions/55638/can-emacs-use-gpg-agent-in-a-terminal-at-all</a> に書かれているように <a href="https://elpa.gnu.org/packages/pinentry.html">https://elpa.gnu.org/packages/pinentry.html</a> を使って、 Emacs 上でパスフレーズを入力できるようになるようなので、またそのように設定を変更するかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO&東海道らぐオフラインミーティング 2016/08/14]]></title>
    <link href="http://blog.n-z.jp/blog/2016-08-14-lilo-tokaidolug.html"/>
    <updated>2016-08-14T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-tokaidolug</id>
    <content type="html"><![CDATA[<p><a href="http://lilo.connpass.com/event/37410/" title="LILO&amp;東海道らぐオフラインミーティング 2016/08/14">LILO&amp;東海道らぐオフラインミーティング 2016/08/14</a> に参加しました。</p>

<p>今回もアンカンファレンス形式でした。</p>

<p><a href="https://www.doorkeeper.jp/news/2016/7/25/change-in-pricing" title="Doorkeeper料金体系の変更について">Doorkeeper料金体系の変更について</a>でアナウンスされたように Doorkeeper が有料化されることに伴い、申し込みは connpass に移行しました。</p>

<!--more-->


<h2>メモ</h2>

<p>今回のメモです。</p>

<ul>
<li>いつものように鍵担当の人が遅れていたが、代理で開けていた</li>
<li>ハッシュタグ: <code>#lilo_jp</code> <code>#東海道らぐ</code></li>
<li>登録参加者数 14名</li>
<li>自己紹介から</li>
<li>最初は自分の発表「lilo.linux.or.jp の話」</li>
<li>「OpenStreetMap で地図を作ろう!」坂ノ下さん</li>
<li>Map Compare というサイトで Google Map と OSM の平安神宮を比較すると、OSMの方が詳しい</li>
<li>JOSM というクライアントで実演</li>
<li>ノード、ウェイ、エリアででできている</li>
<li>誰でも書き込めるし消せるので、悪質なユーザーへの対処は日々行っている</li>
<li><a href="http://wiki.openstreetmap.org/wiki/JA:Map_Features">http://wiki.openstreetmap.org/wiki/JA:Map_Features</a></li>
<li>鳥居のタグの話</li>
<li>どのようにタグをつけるのかは議論しながら決まっている</li>
<li>「IoTハウス」山内さん</li>
<li><a href="http://www.pepolinux.com">http://www.pepolinux.com</a> <a href="https://twitter.com/kujiranodanna">https://twitter.com/kujiranodanna</a></li>
<li>ラズパイで IoT ハウス</li>
<li>Tocos, IRKit</li>
<li>リセッタブルヒューズ</li>
<li>休憩</li>
<li>「お前が持っているLPICってどんなものよ? LPI 304受験報告記」中野さん</li>
<li>事前に公開されていた発表資料: <a href="https://bitbucket.org/itsango/lilo20160814">https://bitbucket.org/itsango/lilo20160814</a></li>
<li>有意性の期限がある</li>
<li>メリット: Linux が使える客観的な証拠になる</li>
<li>デメリット: 高い</li>
<li>304 の参考書: <a href="https://amazon.jp/dp/4844380540">https://amazon.jp/dp/4844380540</a></li>
<li>TOEIC みたいに何か統計処理された採点方式らしい</li>
<li>「Windows 10 タブレットに Ubuntu 16.04 を色々入れてみた 2016 年度版」Kapper さん</li>
<li><a href="http://www.slideshare.net/kapper1224/windows10ubuntu16042016install-ubuntu1604-on-windows10-tablet-63862255">http://www.slideshare.net/kapper1224/windows10ubuntu16042016install-ubuntu1604-on-windows10-tablet-63862255</a></li>
<li>Wubi for Ubuntu 16.04 が公式にタブレット対応</li>
<li>「Yocto を使った Linux Distro の作り方とハマり方」山口さん</li>
<li><a href="https://github.com/watatuki">https://github.com/watatuki</a></li>
<li><a href="https://www.yoctoproject.org/">https://www.yoctoproject.org/</a></li>
<li>たとえていえば Gentoo をクロスビルドにしたようなもの</li>
<li>layer を組み合わせて構成</li>
<li>recipe はソースと 1対1 対応</li>
<li>複数の layer の組み合わせが問題でビルドが通らなくなることがある</li>
<li>Android でおなじみの repo でいい感じできた</li>
<li>例: <a href="https://github.com/watatuki/agl-jetson-tk1">https://github.com/watatuki/agl-jetson-tk1</a></li>
<li>休憩</li>
<li>「TUI作業で便利なソフト2題」島田さん</li>
<li>opencocon の紹介</li>
<li>build server</li>
<li>このごろあった悩み: ファイルツリーを駆け回るのがめんどい</li>
<li>解決法：TUI ファイラー</li>
<li>mc (Midnight Commander)</li>
<li>あんまり慣れてない</li>
<li>Ctrl キー等を多用する</li>
<li>F1-F12 を使わなければならない</li>
<li>tmux とキーバインドが干渉しやすい</li>
<li>他に選択肢がないか?</li>
<li>FDclone</li>
<li>このごろあった悩み: git コマンドをいちいち叩くのがめんどい</li>
<li>tig</li>
<li>「Docker話」左川さん</li>
<li>vagrant で docker を試した話</li>
<li>box ファイルは VirtualBox で普通にインストールして不要なものを削除して作成した。</li>
<li>会場から packer がおすすめという話</li>
<li>さくらインターネットの Arukas はまだ誰も使ったことがない</li>
<li>今回の会場費は余剰金があるので無料になった。</li>
<li>「sedの話」田川さん</li>
<li>sed はプログラミング言語</li>
<li>デバッグオプション <code>-d</code> のある sed</li>
<li>sdb というデバッガをネットワーク経由で接続</li>
<li>「せっかくのプレゼン資料なんだから Git で管理しよう Slides を公開しよう」中野さん</li>
<li>事前に公開されていた資料: <a href="https://bitbucket.org/itsango/vcsforslides">https://bitbucket.org/itsango/vcsforslides</a></li>
<li><a href="http://progit-ja.github.io/">http://progit-ja.github.io/</a></li>
<li><a href="https://ja.wikipedia.org/wiki/OSS%E3%83%9B%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E6%AF%94%E8%BC%83" title="OSSホスティングサービスの比較">OSSホスティングサービスの比較</a></li>
<li>次は冬休みの予定 (その前に k-of.jp にも参加予定)</li>
</ul>


<h2>発表した内容</h2>

<p>lilo.linux.or.jp のサーバーの前回の発表以降の話をしました。</p>

<p>内容は大きく分けると 二要素認証は進捗なし、 letsencrypt の証明書は certbot に変わっても順調に使えている話、 ufw でアタックが多いポートをログに残さないようにした話でした。</p>

<p>スライドはいつも通り <a href="http://slide.rabbit-shocker.org/authors/znz/lilo-20160814/">Rabbit Slide Show</a> (<a href="https://rubygems.org/gems/rabbit-slide-znz-lilo-20160814">RubyGems</a>), <a href="http://www.slideshare.net/znzjp/lilo-20160814">SlideShare</a>, <a href="https://speakerdeck.com/znz/lilo-dot-linux-dot-or-dot-jp-falsehua">Speaker Deck</a> にあげています。(ソースは <a href="https://github.com/znz/lilo-20160814">github</a> にあげています。)
(しかし、2016-08-14現在 slide.rabbit-shocker.org (Rabbit Slide Show) には反映されていないようなので、 SlideShare か Speaker Deck でみてください。)
(2016-08-16現在、反映されたので Rabbit Slide Show でも見えるようになりました。)</p>

<iframe src="http://slide.rabbit-shocker.org/authors/znz/lilo-20160814/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="http://slide.rabbit-shocker.org/authors/znz/lilo-20160814/" title="lilo.linux.or.jp の話">lilo.linux.or.jp の話</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let's Encrypt Subscriber Agreementの比較]]></title>
    <link href="http://blog.n-z.jp/blog/2016-07-27-letsencrypt-new-subscriber-agreement.html"/>
    <updated>2016-07-27T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/letsencrypt-new-subscriber-agreement</id>
    <content type="html"><![CDATA[<p>7月9日(土) に <code>Let's Encrypt Subscriber Agreement Update</code> というメールがきていて、
<code>Let's Encrypt Subscriber Agreement</code> が8月1日に v1.0.1 から v1.1.1 に更新されるというので、
内容をテキストファイルに落として diff をとってみました。</p>

<!--more-->


<h2>Let&rsquo;s Encrypt からのメール</h2>

<p>Let&rsquo;s Encrypt からのメールは必要最低限しかこないのですが、
今のところ staging 環境で取得していた証明書の期限切れ通知メールと
今回の <code>Let's Encrypt Subscriber Agreement Update</code> のお知らせメールしか届いていません。</p>

<p>お知らせメールの内容は以下の通りでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Let&#39;s Encrypt Subscriber,
</span><span class='line'>
</span><span class='line'>We&#39;re writing to let you know that we are updating the Let&#39;s Encrypt Subscriber Agreement, effective August 1, 2016. You can find the updated agreement (v1.1.1) as well as the current agreement (v1.0.1) in the &quot;Let&#39;s Encrypt Subscriber Agreement&quot; section of the following page:
</span><span class='line'>
</span><span class='line'>https://letsencrypt.org/repository/
</span><span class='line'>
</span><span class='line'>Thank you for helping to secure the Web by using Let&#39;s Encrypt.
</span><span class='line'>
</span><span class='line'>- The Let&#39;s Encrypt Team
</span></code></pre></td></tr></table></div></figure>


<h2>テキストへ変換</h2>

<p><code>poppler</code> に入っている <code>pdftotext</code> コマンドで PDF からテキストファイルに変換しました。</p>

<h2>diff</h2>

<p><code>git diff --no-index LE-SA-v1.*.txt</code> での比較結果は以下の通りでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/LE-SA-v1.0.1-July-27-2015.txt b/LE-SA-v1.1.1-August-1-2016.txt</span>
</span><span class='line'><span class="gh">index d5a0b9d..e5850ef 100644</span>
</span><span class='line'><span class="gd">--- a/LE-SA-v1.0.1-July-27-2015.txt</span>
</span><span class='line'><span class="gi">+++ b/LE-SA-v1.1.1-August-1-2016.txt</span>
</span><span class='line'><span class="gu">@@ -1,6 +1,6 @@</span>
</span><span class='line'><span class="gd">-Version 1.0.1</span>
</span><span class='line'><span class="gd">-July 27, 2015</span>
</span><span class='line'><span class="gd">-Page 1 of 6</span>
</span><span class='line'><span class="gi">+Version 1.1.1</span>
</span><span class='line'><span class="gi">+August 1, 2016</span>
</span><span class='line'><span class="gi">+Page 1 of 7</span>
</span><span class='line'>
</span><span class='line'> LET’S ENCRYPT
</span><span class='line'> SUBSCRIBER AGREEMENT
</span><span class='line'><span class="gu">@@ -38,15 +38,20 @@ Key.</span>
</span><span class='line'> “Public Key” — In Public Key Cryptography, this is the publicly-disclosed key that is used by the recipient
</span><span class='line'> to (i) validate Digital Signatures created with the corresponding Private Key and (ii) encrypt messages or
</span><span class='line'> files to be decrypted with the corresponding Private Key.
</span><span class='line'><span class="gi">+“Key Compromise”— A Private Key is said to be compromised if its value has been disclosed to an</span>
</span><span class='line'><span class="gi">+unauthorized person, an unauthorized person has had access to it, or there exists a practical technique by</span>
</span><span class='line'><span class="gi">+which an unauthorized person may discover its value. A Private Key is also considered compromised if</span>
</span><span class='line'><span class="gi">+methods have been developed that can easily calculate it based on the Public Key or if there is clear</span>
</span><span class='line'><span class="gi">+evidence that the specific method used to generate the Private Key was flawed.</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+Version 1.1.1</span>
</span><span class='line'><span class="gi">+August 1, 2016</span>
</span><span class='line'><span class="gi">+Page 2 of 7</span>
</span><span class='line'> “Public Key Cryptography” — A type of cryptography that uses a Key Pair to securely encrypt and
</span><span class='line'> decrypt messages. One key encrypts a message, and the other key decrypts the message. One key is kept
</span><span class='line'> secret (the Private Key), and one is made available to others (the Public Key). These keys are, in essence,
</span><span class='line'> large mathematically-related numbers that form a unique pair. Either key may be used to encrypt a
</span><span class='line'> message, but only the other corresponding key may be used to decrypt the message.
</span><span class='line'><span class="gd">-</span>
</span><span class='line'><span class="gd">-Version 1.0.1</span>
</span><span class='line'><span class="gd">-July 27, 2015</span>
</span><span class='line'><span class="gd">-Page 2 of 6</span>
</span><span class='line'> “Repository” — An online system maintained by ISRG for storing and retrieving Let’s Encrypt Certificates
</span><span class='line'> and other information relevant to Let’s Encrypt Certificates, including information relating validity or
</span><span class='line'> revocation.
</span><span class='line'><span class="gu">@@ -54,7 +59,7 @@ revocation.</span>
</span><span class='line'> (“Valid From” or “Activation” date), and ending on the expiration date indicated in such Certificate (“Valid
</span><span class='line'> To” or “Expiry” date).
</span><span class='line'> “Your Certificate” — A Let’s Encrypt Certificate issued to You.
</span><span class='line'><span class="gd">-2.!</span>
</span><span class='line'><span class="gi">+2.</span>
</span><span class='line'>
</span><span class='line'> Effective Date, Term, and Survival
</span><span class='line'> 2.1
</span><span class='line'><span class="gu">@@ -78,7 +83,7 @@ Sections in this Agreement concerning privacy, indemnification, disclaimer of wa</span>
</span><span class='line'> liability, governing law, choice of forum, limitations on claims against ISRG, and prohibitions on the use of
</span><span class='line'> fraudulently-obtained Certificates and expired Certificates shall survive any termination or expiration of
</span><span class='line'> this Agreement.
</span><span class='line'><span class="gd">-3.!</span>
</span><span class='line'><span class="gi">+3.</span>
</span><span class='line'>
</span><span class='line'> Your Warranties and Responsibilities
</span><span class='line'> 3.1
</span><span class='line'><span class="gu">@@ -86,16 +91,10 @@ Your Warranties and Responsibilities</span>
</span><span class='line'> Warranties
</span><span class='line'>
</span><span class='line'> By requesting, accepting, or using a Let’s Encrypt Certificate:
</span><span class='line'><span class="gd">-•!</span>
</span><span class='line'><span class="gd">-</span>
</span><span class='line'><span class="gd">-•!</span>
</span><span class='line'><span class="gd">-</span>
</span><span class='line'><span class="gd">-•!</span>
</span><span class='line'><span class="gd">-•!</span>
</span><span class='line'><span class="gd">-•!</span>
</span><span class='line'><span class="gd">-•!</span>
</span><span class='line'><span class="gd">-•!</span>
</span><span class='line'><span class="gd">-3.2</span>
</span><span class='line'><span class="gi">+•</span>
</span><span class='line'><span class="gi">+•</span>
</span><span class='line'><span class="gi">+•</span>
</span><span class='line'><span class="gi">+•</span>
</span><span class='line'>
</span><span class='line'> You warrant to ISRG and the public-at-large that You are the legitimate registrant of the
</span><span class='line'> Internet domain name that is, or is going to be, the subject of Your Certificate, or that You are
</span><span class='line'><span class="gu">@@ -103,21 +102,30 @@ the duly authorized agent of such registrant.</span>
</span><span class='line'> You warrant to ISRG and the public-at-large that either (1) You did not obtain control of
</span><span class='line'> such domain name as the result of a seizure of such domain name, or (2) such domain name
</span><span class='line'> had no ongoing lawful uses at the time of such seizure.
</span><span class='line'><span class="gd">-You warrant that all information in Your Certificate regarding You or Your domain</span>
</span><span class='line'><span class="gd">-name is accurate, current, reliable, complete, and not misleading.</span>
</span><span class='line'><span class="gd">-You warrant that all information You have provided to ISRG is accurate, current,</span>
</span><span class='line'><span class="gd">-complete, reliable, complete, and not misleading.</span>
</span><span class='line'><span class="gd">-You warrant that You rightfully hold the Private Key corresponding to the Public Key</span>
</span><span class='line'><span class="gd">-listed in Your Certificate.</span>
</span><span class='line'><span class="gd">-You warrant that You have taken all appropriate, reasonable, and necessary steps to secure</span>
</span><span class='line'><span class="gd">-and keep your Private Key secret.</span>
</span><span class='line'><span class="gd">-You warrant that You will not use Your Certificates to attack, defraud or intercept the</span>
</span><span class='line'><span class="gd">-traffic of others.</span>
</span><span class='line'><span class="gi">+You warrant to ISRG and the public-at-large that all information in Your Certificate</span>
</span><span class='line'><span class="gi">+regarding You or Your domain name is accurate, current, reliable, complete, and not</span>
</span><span class='line'><span class="gi">+misleading.</span>
</span><span class='line'><span class="gi">+You warrant to ISRG and the public-at-large that all information You have provided to</span>
</span><span class='line'><span class="gi">+ISRG is, and You agree that all information you will provide to ISRG at any time will be,</span>
</span><span class='line'><span class="gi">+accurate, current, complete, reliable, and not misleading.</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+Version 1.1.1</span>
</span><span class='line'><span class="gi">+August 1, 2016</span>
</span><span class='line'><span class="gi">+Page 3 of 7</span>
</span><span class='line'><span class="gi">+•</span>
</span><span class='line'><span class="gi">+•</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+3.2</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+You warrant to ISRG and the public-at-large that You rightfully hold the Private Key</span>
</span><span class='line'><span class="gi">+corresponding to the Public Key listed in Your Certificate.</span>
</span><span class='line'><span class="gi">+You warrant to ISRG and the public-at-large that You have taken, and You agree that at</span>
</span><span class='line'><span class="gi">+all times You will take, all appropriate, reasonable, and necessary steps to maintain sole</span>
</span><span class='line'><span class="gi">+control of, secure, properly protect and keep secret and confidential the Private Key</span>
</span><span class='line'><span class="gi">+corresponding to the Public Key in Your Certificate (and any associated activation data or</span>
</span><span class='line'><span class="gi">+device, e.g. password or token).</span>
</span><span class='line'> Changes in Certificate Information
</span><span class='line'>
</span><span class='line'><span class="gd">-Version 1.0.1</span>
</span><span class='line'><span class="gd">-July 27, 2015</span>
</span><span class='line'><span class="gd">-Page 3 of 6</span>
</span><span class='line'> If at any time You no longer control the Internet domain names associated with any of Your Certificates, or
</span><span class='line'> if any of the warranties in Section 3.1 above are no longer true with respect to any of Your Certificates in
</span><span class='line'> any other way, You will immediately request that ISRG revoke the affected Certificates. You may request
</span><span class='line'><span class="gu">@@ -141,7 +149,7 @@ Key Pair Generation</span>
</span><span class='line'> Your Key Pair (Public and Private Keys) will be generated by You or Your ACME Client Software on
</span><span class='line'> Your systems. You will submit the corresponding Public Key to ISRG and it will be incorporated into
</span><span class='line'> Your Certificate. ISRG will store Your Certificate in its Repository. ISRG will not have access to Your
</span><span class='line'><span class="gd">-Private Key.</span>
</span><span class='line'><span class="gi">+Private Key. Your Private and Public Keys will remain Your property.</span>
</span><span class='line'> We will use technical methods and protocols to verify that You have exclusive control over the subject
</span><span class='line'> Internet domain name. This verification is done solely to assist ISRG in determining whether to issue a
</span><span class='line'> Let’s Encrypt Certificate and is not a service being performed for Your benefit or on Your behalf.
</span><span class='line'><span class="gu">@@ -149,46 +157,59 @@ Let’s Encrypt Certificate and is not a service being performed for Your benefi</span>
</span><span class='line'>
</span><span class='line'> Inspection and Acceptance of Certificates
</span><span class='line'>
</span><span class='line'><span class="gd">-You agree to immediately inspect the contents of Your Certificate (“Initial Inspection”), and to</span>
</span><span class='line'><span class="gd">-immediately request revocation if you become aware of any inaccuracies, errors, defects, or other</span>
</span><span class='line'><span class="gd">-problems (collectively, “Certificate Problems”) with Your Certificate. Your ACME Client Software</span>
</span><span class='line'><span class="gd">-may perform this task for You. You agree that You will have accepted Your Certificate when You</span>
</span><span class='line'><span class="gd">-first use Your Certificate or the corresponding Private Key after obtaining Your Certificate, or if You</span>
</span><span class='line'><span class="gd">-fail to request revocation of Your Certificate immediately following Initial Inspection.</span>
</span><span class='line'><span class="gi">+You warrant to ISRG and the public-at-large, and You agree, that You will immediately inspect the</span>
</span><span class='line'><span class="gi">+contents of Your Certificate (“Initial Inspection”), and to immediately request revocation if you</span>
</span><span class='line'><span class="gi">+become aware of any inaccuracies, errors, defects, or other problems (collectively, “Certificate</span>
</span><span class='line'><span class="gi">+Problems”) with Your Certificate. Your ACME Client Software may perform this task for You. You</span>
</span><span class='line'><span class="gi">+agree that You will have accepted Your Certificate when You first use Your Certificate or the</span>
</span><span class='line'><span class="gi">+corresponding Private Key after obtaining Your Certificate, or if You fail to request revocation of</span>
</span><span class='line'><span class="gi">+Your Certificate immediately following Initial Inspection.</span>
</span><span class='line'> 3.6
</span><span class='line'>
</span><span class='line'><span class="gd">-Use of Your Certificate</span>
</span><span class='line'><span class="gd">-</span>
</span><span class='line'><span class="gd">-The purpose of Your Certificate is to encrypt Internet communications. ISRG is not responsible for any</span>
</span><span class='line'><span class="gd">-legal or other consequences resulting from or associated with the use of Your Certificate. You agree that</span>
</span><span class='line'><span class="gd">-You will not use Your Certificate for any purpose requiring fail-safe performance, such as the operation of</span>
</span><span class='line'><span class="gd">-public utilities or power facilities, air traffic control or navigation systems, weapons systems, or any other</span>
</span><span class='line'><span class="gd">-systems, the failure of which would reasonably be expected to lead to bodily injury, death or property</span>
</span><span class='line'><span class="gd">-damage.</span>
</span><span class='line'><span class="gi">+Installation and Use of Your Certificate</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+You may reproduce and distribute Your Certificate on a nonexclusive and royalty-free basis, provided that</span>
</span><span class='line'><span class="gi">+it is reproduced and distributed in full and in compliance with this Agreement. You warrant to ISRG and</span>
</span><span class='line'><span class="gi">+the public-at-large, and You agree, that You will install Your Certificate only on servers that are accessible</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+Version 1.1.1</span>
</span><span class='line'><span class="gi">+August 1, 2016</span>
</span><span class='line'><span class="gi">+Page 4 of 7</span>
</span><span class='line'><span class="gi">+at the subjectAltName(s) listed in Your Certificate, and that you will use Your Certificate solely in</span>
</span><span class='line'><span class="gi">+compliance with all applicable laws and solely in accordance with this Agreement. Your Certificate will</span>
</span><span class='line'><span class="gi">+remain the property of ISRG, subject to Your right to use it as set forth in this Agreement.</span>
</span><span class='line'><span class="gi">+The purpose of Your Certificate is to authenticate and encrypt Internet communications. ISRG is not</span>
</span><span class='line'><span class="gi">+responsible for any legal or other consequences resulting from or associated with the use of Your</span>
</span><span class='line'><span class="gi">+Certificate. You agree that You will not use Your Certificate for any purpose requiring fail-safe</span>
</span><span class='line'><span class="gi">+performance, such as the operation of public utilities or power facilities, air traffic control or navigation</span>
</span><span class='line'><span class="gi">+systems, weapons systems, or any other systems, the failure of which would reasonably be expected to</span>
</span><span class='line'><span class="gi">+lead to bodily injury, death or property damage.</span>
</span><span class='line'> 3.7.
</span><span class='line'>
</span><span class='line'> When to Revoke Your Certificate
</span><span class='line'>
</span><span class='line'><span class="gd">-You must immediately request that Your Certificate be revoked if: (i) You suspect or discover that</span>
</span><span class='line'><span class="gd">-Your Private Key has been, or is in danger of being, lost, stolen, otherwise compromised, or subjected</span>
</span><span class='line'><span class="gd">-to unauthorized use, or (ii) any information in Your Certificate is no longer accurate, current or</span>
</span><span class='line'><span class="gd">-complete, or any such information becomes misleading. You may make a revocation request to ISRG</span>
</span><span class='line'><span class="gd">-</span>
</span><span class='line'><span class="gd">-Version 1.0.1</span>
</span><span class='line'><span class="gd">-July 27, 2015</span>
</span><span class='line'><span class="gd">-Page 4 of 6</span>
</span><span class='line'><span class="gd">-using ACME Client Software. You should also notify anyone who may have relied upon Your use of</span>
</span><span class='line'><span class="gd">-Your Certificate that Your encrypted communications may have been subject to compromise</span>
</span><span class='line'><span class="gi">+You warrant to ISRG and the public-at-large, and You agree, that You will immediately request that</span>
</span><span class='line'><span class="gi">+Your Certificate be revoked if: (i) there is any actual or suspected misuse or Key Compromise of the</span>
</span><span class='line'><span class="gi">+Private Key associated with the Public Key included in Your Certificate, or (ii) any information in Your</span>
</span><span class='line'><span class="gi">+Certificate is, or becomes, misleading, incorrect or inaccurate. You may make a revocation request to</span>
</span><span class='line'><span class="gi">+ISRG using ACME Client Software. You should also notify anyone who may have relied upon Your</span>
</span><span class='line'><span class="gi">+use of Your Certificate that Your encrypted communications may have been subject to compromise.</span>
</span><span class='line'> 3.8
</span><span class='line'>
</span><span class='line'> When to Cease Using Your Certificate
</span><span class='line'>
</span><span class='line'><span class="gd">-You must immediately cease using Your Certificate if: (i) You suspect or discover that the Private Key</span>
</span><span class='line'><span class="gd">-corresponding to Your Certificate has been or may be stolen, lost, or otherwise compromised or subjected</span>
</span><span class='line'><span class="gd">-to unauthorized use, (ii) any information in Your Certificate is no longer accurate, current or complete, or</span>
</span><span class='line'><span class="gd">-any such information becomes misleading, or (iii) upon the revocation or expiration of Your Certificate.</span>
</span><span class='line'><span class="gi">+You warrant to ISRG and the public-at-large, and You agree, that You will promptly cease using Your</span>
</span><span class='line'><span class="gi">+Certificate (i) if any information in Your Certificate is, or becomes, misleading, incorrect or inaccurate, or</span>
</span><span class='line'><span class="gi">+(ii) upon the revocation or expiration of Your Certificate.</span>
</span><span class='line'> 3.9
</span><span class='line'>
</span><span class='line'><span class="gi">+When to Cease Using Your Private Key</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+You warrant to ISRG and the public-at-large, and You agree, that You will promptly cease all use of the</span>
</span><span class='line'><span class="gi">+Private Key corresponding to the Public Key included in Your Certificate upon revocation of Your</span>
</span><span class='line'><span class="gi">+Certificate for reasons of known or suspected Key Compromise.</span>
</span><span class='line'><span class="gi">+3.10</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'> Indemnification
</span><span class='line'>
</span><span class='line'> You agree to indemnify and hold harmless ISRG and its directors, officers, employees, agents, and
</span><span class='line'><span class="gu">@@ -207,20 +228,17 @@ ISRG’s Rights and Responsibilities</span>
</span><span class='line'>
</span><span class='line'> Privacy
</span><span class='line'>
</span><span class='line'><span class="gd">-Because others may rely on your use of Your Certificate to encrypt Internet communications, much of the</span>
</span><span class='line'><span class="gi">+Because others may rely on your use of Your Certificates to encrypt Internet communications, much of the</span>
</span><span class='line'> information You send to ISRG will be published by ISRG and will become a matter of public record.
</span><span class='line'><span class="gd">-However, information used for account-recovery purposes (such as Your email address and telephone</span>
</span><span class='line'><span class="gd">-number) (“Private Recovery Information” or “PRI”) will NOT be published by ISRG. ISRG will not sell</span>
</span><span class='line'><span class="gd">-or share your Private Recovery Information. ISRG may disclose Private Recovery Information, however,</span>
</span><span class='line'><span class="gd">-if compelled to do so by court order or other compulsory legal process. If legally permissible and to the</span>
</span><span class='line'><span class="gd">-extent possible and within ISRG’s control, and if you have provided ISRG with an email address, ISRG</span>
</span><span class='line'><span class="gd">-will send an email to such address notifying You of the potential disclosure. ISRG may also disclose your</span>
</span><span class='line'><span class="gd">-PRI if ISRG believes disclosure is necessary to prevent loss of life, personal injury, damage to property, or</span>
</span><span class='line'><span class="gd">-significant financial harm.</span>
</span><span class='line'><span class="gi">+ISRG’s collection, storage, use and disclosure of such information are governed by the Let’s Encrypt</span>
</span><span class='line'><span class="gi">+Privacy Policy at: https://letsencrypt.org/privacy/.</span>
</span><span class='line'> 4.2
</span><span class='line'>
</span><span class='line'> Certificate Repository
</span><span class='line'>
</span><span class='line'><span class="gi">+Version 1.1.1</span>
</span><span class='line'><span class="gi">+August 1, 2016</span>
</span><span class='line'><span class="gi">+Page 5 of 7</span>
</span><span class='line'> During the term of the Agreement, ISRG will operate and maintain a secure online Repository that is
</span><span class='line'> available to authorized relying parties that contains: (i) all past and current Let’s Encrypt Certificates
</span><span class='line'> (including, as applicable, Your Certificate) and (ii) a CRL or similar online database indicating whether
</span><span class='line'><span class="gu">@@ -231,36 +249,36 @@ public to access this information.</span>
</span><span class='line'>
</span><span class='line'> Suspension and Revocation
</span><span class='line'>
</span><span class='line'><span class="gd">-ISRG may immediately suspend Your Certificate if any party notifies ISRG that Your Certificate is</span>
</span><span class='line'><span class="gd">-invalid or has been compromised. ISRG will determine, in its sole discretion, whether to revoke Your</span>
</span><span class='line'><span class="gd">-Certificate or restore it to valid status. If You or Your agent requests that Your Certificate be revoked,</span>
</span><span class='line'><span class="gd">-ISRG will revoke Your Certificate and update the Repository as soon as practical. If a request for</span>
</span><span class='line'><span class="gd">-revocation is signed by your Private Key, then ISRG will automatically deem the request to be valid.</span>
</span><span class='line'><span class="gd">-</span>
</span><span class='line'><span class="gd">-Version 1.0.1</span>
</span><span class='line'><span class="gd">-July 27, 2015</span>
</span><span class='line'><span class="gd">-Page 5 of 6</span>
</span><span class='line'><span class="gd">-ISRG may also, without advance notice, revoke Your Certificate if ISRG determines, in its sole discretion,</span>
</span><span class='line'><span class="gd">-that: (i) Your Certificate was not properly issued or was obtained through misrepresentation, concealment,</span>
</span><span class='line'><span class="gd">-or fraud; (ii) Your Certificate has become, or appears to have become, unreliable; (iii) the security of the</span>
</span><span class='line'><span class="gd">-Private Key corresponding to Your Certificate has been or may be stolen, lost, or otherwise compromised,</span>
</span><span class='line'><span class="gd">-or subject to unauthorized use; (iv) any information in Your registration with ISRG or Your request for a</span>
</span><span class='line'><span class="gd">-Let’s Encrypt Certificate has changed or has become false or misleading; (v) You have violated any</span>
</span><span class='line'><span class="gd">-applicable law, agreement or other obligation; (vi) You request revocation; (vii) ISRG is legally required to</span>
</span><span class='line'><span class="gd">-revoke Your Certificate pursuant to a valid court order issued by a court of competent jurisdiction; (viii)</span>
</span><span class='line'><span class="gd">-this Agreement has terminated; or (iv) there are other reasonable and lawful grounds for revocation. ISRG</span>
</span><span class='line'><span class="gd">-will provide notice of revocation via email to the email address of record.</span>
</span><span class='line'><span class="gi">+You acknowledge and accept that ISRG may immediately suspend Your Certificate if any party notifies</span>
</span><span class='line'><span class="gi">+ISRG that Your Certificate is invalid or has been compromised. ISRG will determine, in its sole discretion,</span>
</span><span class='line'><span class="gi">+whether to revoke Your Certificate. If You or Your agent requests that Your Certificate be revoked, ISRG</span>
</span><span class='line'><span class="gi">+will revoke Your Certificate and update the Repository as soon as practical. If a request for revocation is</span>
</span><span class='line'><span class="gi">+signed by your Private Key, then ISRG will automatically deem the request to be valid. You also</span>
</span><span class='line'><span class="gi">+acknowledge and accept that ISRG may, without advance notice, immediately revoke Your Certificate if</span>
</span><span class='line'><span class="gi">+ISRG determines, in its sole discretion, that: (i) Your Certificate was not properly issued or was obtained</span>
</span><span class='line'><span class="gi">+through misrepresentation, concealment, or fraud; (ii) Your Certificate has become, or appears to have</span>
</span><span class='line'><span class="gi">+become, unreliable; (iii) the security of the Private Key corresponding to Your Certificate has been or may</span>
</span><span class='line'><span class="gi">+be stolen, lost, or otherwise compromised, or subject to unauthorized use; (iv) any information in Your</span>
</span><span class='line'><span class="gi">+registration with ISRG or Your request for a Let’s Encrypt Certificate has changed or has become false or</span>
</span><span class='line'><span class="gi">+misleading; (v) You have violated any applicable law, agreement (including this Agreement), or other</span>
</span><span class='line'><span class="gi">+obligation; (vi) Your Certificate is being used, or has been used, to enable any criminal activity (such as</span>
</span><span class='line'><span class="gi">+phishing attacks, fraud or the distribution of malware); (vii) Your Certificate is being used, or has been</span>
</span><span class='line'><span class="gi">+used, to intercept the traffic of others; (viii) You request revocation; (ix) ISRG is legally required to revoke</span>
</span><span class='line'><span class="gi">+Your Certificate pursuant to a valid court order issued by a court of competent jurisdiction; (x) this</span>
</span><span class='line'><span class="gi">+Agreement has terminated; or (xi) there are other reasonable and lawful grounds for revocation. ISRG will</span>
</span><span class='line'><span class="gi">+provide notice of revocation via email to the email address of record.</span>
</span><span class='line'> 4.4
</span><span class='line'>
</span><span class='line'> IMPORTANT DISCLAIMER OF WARRANTIES AND LIMITATION OF
</span><span class='line'> LIABILITY
</span><span class='line'>
</span><span class='line'><span class="gd">-LET’S ENCRYPT CERTIFICATES AND SERVICES ARE PROVIDED “AS-IS.”</span>
</span><span class='line'><span class="gd">-ISRG DISCLAIMS ANY AND ALL WARRANTIES OF ANY TYPE, WHETHER EXPRESS</span>
</span><span class='line'><span class="gd">-OR IMPLIED, INCLUDING AND WITHOUT LIMITATION ANY IMPLIED WARRANTY OF</span>
</span><span class='line'><span class="gd">-TITLE, NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR</span>
</span><span class='line'><span class="gd">-PURPOSE, IN CONNECTION WITH ANY ISRG SERVICE OR LET’S ENCRYPT</span>
</span><span class='line'><span class="gd">-CERTIFICATE.</span>
</span><span class='line'><span class="gi">+EXCEPT AS EXPRESSLY SET FORTH IN ISRG’S CERTIFICATE POLICY AND</span>
</span><span class='line'><span class="gi">+CERTIFICATE PRACTICE STATEMENT, LET’S ENCRYPT CERTIFICATES AND</span>
</span><span class='line'><span class="gi">+SERVICES ARE PROVIDED “AS-IS” AND ISRG DISCLAIMS ANY AND ALL</span>
</span><span class='line'><span class="gi">+WARRANTIES OF ANY TYPE, WHETHER EXPRESS OR IMPLIED, INCLUDING AND</span>
</span><span class='line'><span class="gi">+WITHOUT LIMITATION ANY IMPLIED WARRANTY OF TITLE, NON-INFRINGEMENT,</span>
</span><span class='line'><span class="gi">+MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE, IN CONNECTION</span>
</span><span class='line'><span class="gi">+WITH ANY ISRG SERVICE OR LET’S ENCRYPT CERTIFICATE.</span>
</span><span class='line'> BECAUSE LET’S ENCRYPT CERTIFICATES ARE ISSUED FREE-OF-CHARGE AS A PUBLIC
</span><span class='line'> SERVICE, ISRG CANNOT ACCEPT ANY LIABILITY FOR ANY LOSS, HARM, CLAIM, OR
</span><span class='line'> ATTORNEY’S FEES IN CONNECTION WITH SUCH CERTIFICATES. ACCORDINGLY, YOU
</span><span class='line'><span class="gu">@@ -275,6 +293,10 @@ REGULATION, COMMON LAW, OR ANY OTHER SOURCE OF LAW, STANDARD OF CARE,</span>
</span><span class='line'> CATEGORY OF CLAIM, NOTION OF FAULT OR RESPONSIBILITY, OR THEORY OF
</span><span class='line'> RECOVERY. THE PARTIES AGREE THAT THIS DISCLAIMER IS INTENDED TO BE
</span><span class='line'> CONSTRUED TO THE FULLEST EXTENT ALLOWED BY APPLICABLE LAW.
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+Version 1.1.1</span>
</span><span class='line'><span class="gi">+August 1, 2016</span>
</span><span class='line'><span class="gi">+Page 6 of 7</span>
</span><span class='line'> BY WAY OF FURTHER EXPLANATION REGARDING THE SCOPE OF THE DISCLAIMER,
</span><span class='line'> AND WITHOUT WAIVING OR LIMITING THE FOREGOING IN ANY WAY, ISRG DOES NOT
</span><span class='line'> MAKE, AND ISRG EXPRESSLY DISCLAIMS, ANY WARRANTY REGARDING ITS RIGHT TO
</span><span class='line'><span class="gu">@@ -297,9 +319,6 @@ choice of law and conflicts of law principles.</span>
</span><span class='line'>
</span><span class='line'> Choice of Forum
</span><span class='line'>
</span><span class='line'><span class="gd">-Version 1.0.1</span>
</span><span class='line'><span class="gd">-July 27, 2015</span>
</span><span class='line'><span class="gd">-Page 6 of 6</span>
</span><span class='line'> Any claim, suit or proceeding arising out of this Agreement must be brought in a state or federal court
</span><span class='line'> located in San Jose, California.
</span><span class='line'> 5.3
</span><span class='line'><span class="gu">@@ -339,6 +358,10 @@ If any provision of this Agreement is found to be invalid, unenforceable, or con</span>
</span><span class='line'> Agreement will be deemed amended by modifying such provision to the extent necessary to make it valid
</span><span class='line'> and enforceable while preserving its intent or, if that is not possible, by striking the provision and enforcing
</span><span class='line'> the remainder of this Agreement.
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+Version 1.1.1</span>
</span><span class='line'><span class="gi">+August 1, 2016</span>
</span><span class='line'><span class="gi">+Page 7 of 7</span>
</span><span class='line'> 5.8
</span><span class='line'>
</span><span class='line'> Authorization of ISRG to Send Emails
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
