<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-11-23T18:53:43+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[anyenvやrbenvのpluginsを更新などをしやすくするプラグインを作った]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-21-anyenv-rbenv-plugins.html"/>
    <updated>2013-11-21T18:25:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/anyenv-rbenv-plugins</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sstephenson/rbenv">rbenv</a>
には
<a href="https://github.com/rkh/rbenv-update">rbenv-update</a>
というプラグインがあって、アップデートだけは簡単にできるのに、
他の <code>git</code> の操作をまとめて実行するのが面倒なので、
まとめて実行できる
<a href="https://github.com/znz/rbenv-git">rbenv-git</a>
というプラグインを作りました。</p>

<p>それから
<a href="https://github.com/riywo/anyenv">anyenv</a>
の方でもすべての <code>**env</code> も含めてアップデートできると便利だと思い、
<a href="https://github.com/znz/anyenv-update">anyenv-update</a>
と
<a href="https://github.com/znz/anyenv-git">anyenv-git</a>
を作成しました。</p>

<!--more-->


<h2>インストール</h2>

<p>それぞれ <code>plugins</code> のディレクトリの中に <code>git clone</code> でとってくるだけです。</p>

<ul>
<li><code>git clone https://github.com/znz/rbenv-git.git $(rbenv root)/plugins/rbenv-git</code></li>
<li><code>git clone https://github.com/znz/anyenv-update.git $(anyenv root)/plugins/anyenv-update</code></li>
<li><code>git clone https://github.com/znz/anyenv-git.git $(anyenv root)/plugins/anyenv-git</code></li>
</ul>


<p><code>README</code> の方には <code>mkdir -p $(anyenv root)/plugins</code> も書いていますが、
git version 1.8.4.3 だと不要で、自動で親ディレクトリも作ってくれるようです。
git のどのバージョンからなのかわからないので、
<code>README</code> には <code>mkdir -p</code> を残しています。</p>

<h2>使い方</h2>

<h3>rbenv git</h3>

<p><code>rbenv</code> と <code>rbenv</code> のプラグインの <code>git</code> 操作をまとめて実行できます。</p>

<p><code>rbenv git pull</code> で <code>rbenv update</code> の代用が出来ます。
<code>rbenv update</code> だと <code>rbenv</code> 自体を homebrew で入れている時にも
<code>RBENV_ROOT</code> で <code>git</code> コマンドを実行してしまいますが、
<code>rbenv git</code> なら大丈夫です。</p>

<p><code>rbenv git gc</code> で cleanup も出来ます。</p>

<p><code>rbenv git remote -v</code> でどこからとってきたのか確認したり、
<code>rbenv git status</code> でローカルで何か変更しているかどうか確認したりも出来ます。</p>

<h3>anyenv update</h3>

<p><code>anyenv update</code> で</p>

<ul>
<li><code>anyenv</code></li>
<li><code>anyenv</code> のプラグイン</li>
<li><code>**env</code></li>
<li><code>**env</code> のプラグイン</li>
</ul>


<p>がアップデートできます。</p>

<p>git 管理ではないものは skip します。</p>

<h3>anyenv git</h3>

<p><code>rbenv git</code> と同様の操作が
<code>anyenv update</code> と同様の対象に
まとめて実行できます。</p>

<ul>
<li><code>anyenv git pull</code></li>
<li><code>anyenv git gc</code></li>
<li><code>anyenv git remote -v</code></li>
<li><code>anyenv git status</code></li>
</ul>


<p>など、
<code>git</code> の各種操作ができます。</p>

<h2>裏話</h2>

<p>最初は <code>rbenv update</code> のコードを fork しようとしていたのですが、
ライセンスが明記されていなかったので止めて、
他の MIT License と明示されているプラグインを主に参考にして作りました。
他にも <code>set -eo pipefail</code> というのは
<a href="https://github.com/progrium/dokku">dokku</a>
を参考にしました。</p>

<p>ライセンスが不明だと参考にするのにも困るので、
github のレポジトリを作成する時の LICENSE ファイルそのままだけでも良いので、
どういうライセンスにしたいのか明記されているとありがたいと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 5 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-20-rubymotion-mokumoku-osaka.html"/>
    <updated>2013-11-20T21:54:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 4 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://connpass.com/event/3871/">第 5 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。</p>

<p>今回も東京と同時開催でしたが、
接続などはせずに終わってしまいました。</p>

<p>次回の
<a href="http://connpass.com/event/4211/">第 6 回 RubyMotion もくもく会 in Osaka</a>
は 12/26(木) になりました。</p>

<!--more-->


<h2>話に出たもの</h2>

<p>話に出てきたサイトなどのメモです。</p>

<ul>
<li><a href="http://shin1x1.github.io/VagrantX/">http://shin1x1.github.io/VagrantX/</a>
のサイトのデザインを
<a href="https://wrapbootstrap.com/">https://wrapbootstrap.com/</a>
から選ぼうとしたが、結局 github のテンプレートのまま使うことにしたという話</li>
<li>昔は nib というバイナリだったけど今は xib という XML ファイルになっているという話</li>
<li><a href="http://www.rainymood.com/">Rainy Mood</a>
と
<a href="http://tadaya.net/blog/2012/12/01">多田屋のBGM</a>
の組み合わせが良いという話</li>
<li>アドベントカレンダーの話

<ul>
<li><a href="http://www.adventar.org/">Adventar</a></li>
<li><a href="http://qiita.com/advent-calendar/2013/rubymotion">RubyMotion Advent Calendar 2013</a></li>
</ul>
</li>
<li><a href="http://www.img2icnsapp.com/">Img2icns</a> の無料の方で OSX アプリのアイコンへの変換が出来そうという話</li>
<li>クラウドソーシングでアイコンを募集するのはどうかという話

<ul>
<li><a href="http://www.designclue.co/">designclue（デザインクルー） &ndash; デザインクラウドソーシング</a></li>
</ul>
</li>
</ul>


<h2>やっていたこと</h2>

<h3>www.ruby-lang.org</h3>

<p><a href="https://www.ruby-lang.org/ja/news/2013/09/28/design-contest/">www.ruby-lang.org のサイトデザイン募集</a>
の投票を webmaster でやっていて、締め切りが今日だったということで、
投票しようかと思っていたら、
締め切りが 9:00 20 Nov(JST) だったのに気付いて諦めました。
まだ集計前だったようなので、間に合いそうでしたが、
無理はしないということにしました。</p>

<p>ちなみに
<a href="https://github.com/ruby/www.ruby-lang.org/issues?labels=contest">応募は7件</a>
でした。</p>

<h3>notification</h3>

<p>最初は
<a href="https://github.com/Watson1978/notification">https://github.com/Watson1978/notification</a>
という OSX のサンプルをいじってみていました。</p>

<p><code>open ./build/MacOSX-10.8-Development/notification.app</code>
で開くと右上の通知はそもそも出てきているのかどうかわからない状態で終了してしまって、
通知センターを開くとちゃんと送れていることが確認できたり、
引数は <code>-psn_なんとか</code> という
Emacs.app のカレントディレクトリ問題を調べていた時に見かけたものが渡ってきていたりしたのがわかりました。</p>

<h3>Calc</h3>

<p><a href="https://github.com/HipByte/RubyMotionSamples">RubyMotionSamples</a>
の osx に Calc というのが追加されていたので、
それを試していました。</p>

<h2>デフォルトブラウザ設定</h2>

<p>デフォルトブラウザはどこで設定しているんだろうと思って、
<code>defaults read</code>
の出力を調べたりしていたら、
<code>LSSetDefaultHandlerForURLScheme</code>
と
<code>LSSetDefaultRoleHandlerForContentType</code>
で設定できるとわかったので、
RubyMotion の中から呼び出そうとしたのですが、
<code>NoMethodError</code>
になるだけで、
結局呼び出し方がわかりませんでした。</p>

<p>試したこととしては <code>Calc</code> のボタンと同じように
ボタンが押された時に呼ばれるメソッドの中で、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle_id</span> <span class="o">=</span> <span class="no">NSBundle</span><span class="o">.</span><span class="n">mainBundle</span><span class="o">.</span><span class="n">bundleIdentifier</span>
</span><span class='line'><span class="no">LSSetDefaultHandlerForURLScheme</span><span class="p">(</span><span class="s2">&quot;http&quot;</span><span class="p">,</span> <span class="n">bundle_id</span><span class="p">)</span> <span class="c1">#~&gt; NoMethodError</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように呼び出そうとしたところ、
<code>LSSetDefaultHandlerForURLScheme</code>
で
<code>NoMethodError</code>
になりました。</p>

<p>それから <code>Rakefile</code> の
<code>Motion::Project::App.setup do |app|</code>
のブロックで
<code>app.frameworks &lt;&lt; 'ApplicationServices'</code>
のように
<code>ApplicationServices</code>
フレームワークを追加というのも試してみたのですが、
変化はありませんでした。</p>

<p>そんな感じで手詰まっていたら時間が来て終了ということになりました。</p>

<p>確認したバージョンは以下の通りです。</p>

<ul>
<li>Mac OS X 10.8.5</li>
<li>Xcode 5.0.2</li>
<li>RubyMotion 2.14</li>
</ul>


<h3>解決</h3>

<p><code>CoreServices</code> が必要と教えてもらったので、
<code>app.frameworks &lt;&lt; 'CoreServices'</code>
も足してみたのですが、
<code>NoMethodError</code>
のままで動かず、
結局
RubyMotion を 2.15 に上げると直っていました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBoxでdokkuを試した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-15-dokku.html"/>
    <updated>2013-11-15T15:35:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dokku</id>
    <content type="html"><![CDATA[<p>VirtualBox の中に Ubuntu 13.04 を入れて
<a href="https://github.com/progrium/dokku">dokku</a>
を試してみました。</p>

<p><a href="http://blog.coiney.com/2013/08/10/create-my-own-heroku/">dokku + VirtualBoxで自分のHerokuを作る</a>
を参考にしたのですが、
情報が古いのか、
README
に書いてあるのとコマンドが違うところ
(<code>gitreceive</code> が <code>sshcommand</code> になっているなど)
があるので、
README
の手順を基準にするのが良さそうです。</p>

<!--more-->


<h2>対象バージョン</h2>

<p>dokku の README に Ubuntu 13.10 と docker の組み合わせは
まだ問題があり、
13.04 が推奨と書いてあったので、
13.04 を使いました。</p>

<ul>
<li>ホストOS : OS X 10.9</li>
<li>VirtualBox 4.3.2</li>
<li>ゲストOS : Ubuntu 13.04 (amd64)</li>
<li>lxc-docker : 0.6.6</li>
<li>dokku : 今の master ブランチ (59ef6510bc)</li>
</ul>


<h2>Ubuntu 13.04 (amd64) のインストール</h2>

<p>OS のインストールは自分がこうしたというだけの話なので、
興味が無ければ dokku のインストールまで飛ばしてください。</p>

<p>いつものように
<a href="http://ftp.jaist.ac.jp/pub/Linux/ubuntu-releases/">Ubuntu Releases の jaist ミラー</a>
から
<code>ubuntu-13.04-server-amd64.iso</code>
をダウンロードしてインストールしました。</p>

<p>最初のユーザーは <code>adminuser</code> で、
<code>ssh</code> は後で入れるので、
パッケージのチェックは入れずにインストールしました。
ディスクは多めに 20GB に設定した以外はほぼデフォルトでインストールしました。</p>

<h3>etckeeper の設定</h3>

<ul>
<li><code>sudo aptitude install etckeeper git</code> で <code>git</code> と一緒にインストールして <code>bzr</code> をインストールしないようにします。
<code>bzr</code> がないので自動での <code>etckeeper init</code> は失敗するので、手動で実行します。</li>
<li><code>EDITOR=vi sudoedit /etc/etckeeper/etckeeper.conf</code> で <code>VCS="git"</code> と <code>GIT_COMMIT_OPTIONS="-v"</code> に変更します。</li>
<li><code>sudo etckeeper init</code> で初期化します。</li>
<li><code>sudo etckeeper commit "Initial commit"</code> で今の状態をコミットしておきます。</li>
<li><code>(cd /etc/ &amp;&amp; sudo git gc)</code> で <code>git gc</code> しておきます。</li>
</ul>


<h3>ufw の設定</h3>

<ul>
<li><code>/etc/default/ufw</code> の <code>DEFAULT_FORWARD_POLICY</code> を <code>DROP</code> から <code>ACCEPT</code> に変更しておきます。
<code>DROP</code> のままだと後で <code>docker</code> の中から DNS の解決ができないのが原因で <code>! [remote rejected] master -&gt; master (pre-receive hook declined)</code> になります。</li>
<li><code>sudo ufw enable</code> で有効にします。</li>
<li><code>sudo ufw allow 22/tcp</code> で <code>ssh</code> を許可します。</li>
<li><code>sudo ufw allow 80/tcp</code> で <code>http</code> を許可します。</li>
<li><code>sudo etckeeper commit "enable ufw"</code> などで変更を保存します。</li>
</ul>


<h3>ssh の設定</h3>

<ul>
<li><code>sudo aptitude install ssh</code> でインストールします。</li>
<li><code>/etc/hosts.deny</code> に <code>ALL: ALL</code> を追加してデフォルト拒否にします。</li>
<li><code>/etc/hosts.allow</code> に <code>sshd: 127.0.0.1 [::1]</code>
を追加してローカルホストからの接続を許可します。</li>
<li><code>/etc/hosts.allow</code> に <code>sshd: 10.0.0.0/8</code> も追加して
VirtualBox のポートフォワーディング経由の接続を許可します。</li>
<li><code>/etc/ssh/sshd_config</code> (<code>ssh_config</code> ではない) に
<code>AllowUsers adminuser</code> と <code>AllowUsers dokku</code> を追加して、
特定のユーザーにだけ <code>ssh</code> で接続できるようにします。</li>
</ul>


<p>ホストOS側では Vagrant も使っていたので、
ssh 用の鍵としては
<a href="https://github.com/mitchellh/vagrant/tree/master/keys">Vagrant の Insecure Keypair</a>
を使いました。</p>

<p>そして
ホストOS側の
<code>~/.ssh/config</code>
の設定としては、
グローバルの設定も含めると以下のようにしました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ExitOnForwardFailure yes
</span><span class='line'>Ciphers aes256-ctr,aes192-ctr,aes128-ctr
</span><span class='line'>HashKnownHosts no
</span><span class='line'>NoHostAuthenticationForLocalhost yes
</span><span class='line'>ServerAliveInterval 30
</span><span class='line'>Host raring64
</span><span class='line'>  Ciphers arcfour256,arcfour128
</span><span class='line'>  HostName 127.0.0.1
</span><span class='line'>  User adminuser
</span><span class='line'>  Port 21304
</span><span class='line'>  UserKnownHostsFile /dev/null
</span><span class='line'>  StrictHostKeyChecking no
</span><span class='line'>  PasswordAuthentication no
</span><span class='line'>  IdentityFile ~/.vagrant.d/insecure_private_key
</span><span class='line'>  IdentitiesOnly yes</span></code></pre></td></tr></table></div></figure>


<p><code>Ciphers</code> はデフォルトはセキュアなものを使い、
VM 用には速いものを使うようにしています。</p>

<h2>VirtualBox のポートフォワーディング設定</h2>

<p>設定のネットワークのポートフォワーディングのところで、</p>

<ul>
<li>名前:SSH, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:21304, ゲストIP:空欄, ゲストポート:22</li>
<li>名前:Web, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:1384, ゲストIP:空欄, ゲストポート:80</li>
</ul>


<p>のような感じで設定しました。</p>

<p>13.10 にしたら</p>

<ul>
<li>名前:SSH, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:21310, ゲストIP:空欄, ゲストポート:22</li>
<li>名前:Web, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:1380, ゲストIP:空欄, ゲストポート:80</li>
</ul>


<p>とすれば良いかなと思っています。</p>

<h2>dokku のインストール</h2>

<p><a href="https://github.com/progrium/dokku/blob/1d3ae29ba6bed8e1c98991c15db45724508fae30/README.md">README</a>
に書いてあるように
<code>wget -qO- https://raw.github.com/progrium/dokku/master/bootstrap.sh | sudo bash</code>
などでインストールできます。</p>

<p>実際には、
内容を確認したかったので、
<code>wget</code> でダウンロードした後、
<code>sudo bash &lt; bootstrap.sh</code>
で実行しました。</p>

<p>時間は5分程度かかると書いてありますが、
実際には
<code>docker</code>
用のイメージのダウンロードに時間がかかるので、
ネットワークの速度の影響が大きいようです。</p>

<h2>dokku の設定</h2>

<h3>VHOST の設定</h3>

<p>参考にしたサイトと同じように <code>xip.io</code> を使いました。
ポートフォワーディング経由にしているので、
<code>127.0.0.1</code>
にしています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo deploy.127.0.0.1.xip.io | sudo tee /home/dokku/VHOST</span></code></pre></td></tr></table></div></figure>


<h3>ssh 公開鍵の追加</h3>

<p><code>ssh</code>
の接続は Vagrant と共通の鍵を使うことにしたので、
<code>/home/adminuser/.ssh/authorized_keys</code>
には <code>vagrant.pub</code> と同じ内容が入っています。</p>

<p>この鍵をそのまま <code>dokku</code> の方に登録しました。</p>

<p>ここもゲストOS側での作業になります。
README の手順では <code>ssh</code> 経由で <code>sudo</code> を実行しています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat ~/.ssh/authorized_keys | sudo sshcommand acl-add dokku vagrant</span></code></pre></td></tr></table></div></figure>


<p>この手順で追加した公開鍵は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo sshcommand acl-remove dokku vagrant</span></code></pre></td></tr></table></div></figure>


<p>で削除できます。</p>

<p>他の公開鍵を追加する時は <code>vagrant</code> の部分を変更しておかないと
<code>acl-remove</code> でまとめて削除されてしまいます。</p>

<h2>アプリケーションの deploy</h2>

<p>問題なく設定できていれば以下で deploy できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/heroku/node-js-sample
</span><span class='line'>cd node-js-sample
</span><span class='line'>git remote add raring64 dokku@raring64:node-js-app
</span><span class='line'>git push raring64 master</span></code></pre></td></tr></table></div></figure>


<p>エラーになったときはログをみたり、
<code>dmesg</code>
を見たりして原因を調べてください。</p>

<p>正常に deploy できていれば
<code>http://node-js-app.deploy.127.0.0.1.xip.io:1384</code>
で <code>Hello World!</code> と表示されます。</p>

<h2>リモートからの dokku コマンド</h2>

<p>README には <code>$ dokku run node-js-app ls -alh</code> と書いてあり、
ホストOS側には <code>dokku</code> コマンドはないので、
どうすればいいのか悩んだのですが、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ssh dokku@raring64 run node-js-app ls -alh</span></code></pre></td></tr></table></div></figure>


<p>のように <code>git push</code> に使う <code>ssh</code> 経由で
<code>dokku</code> コマンドが実行されているのを使えました。</p>

<p>入力待ちになってしまうようで、
<code>control+D</code> で <code>EOF</code> を入力するなどしないと
ホストOS側のプロンプトに戻ってこないので、
想定された使い方ではなさそうな感じです。</p>

<p>他にも</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ssh dokku@raring64 delete node-js-app</span></code></pre></td></tr></table></div></figure>


<p>でアプリケーションの削除もできました。
heroku と違って確認なしにいきなり削除されてしまうので注意が必要です。</p>

<p>どんなコマンドが実行できるのかは <code>dokku help</code> 相当の</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ssh dokku@raring64 help</span></code></pre></td></tr></table></div></figure>


<p>で一覧が出てきます。</p>

<p>普段使いそうなのは <code>config</code> 関連と <code>logs</code> だと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS XでのIME制御についての考察]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-14-macosx-ime.html"/>
    <updated>2013-11-14T02:24:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/macosx-ime</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2013-11-12-cocoa-emacs-ime.html">Cocoa Emacs のインラインパッチ関連の設定</a>
の時や
<a href="http://blog.n-z.jp/blog/2013-11-13-tty-ime.html">iTerm2 で IME 制御シーケンスがきかないのを調べた</a>
時にも気になったのですが、
Mac の IME に open/close という概念はあるのかという話です。</p>

<!--more-->


<h2>IME の開閉状態?</h2>

<p>iBus 1.5 関連の記事の
<a href="http://www.kaoriya.net/blog/2013/10/18/">iBusがクソになった理由 — KaoriYa</a>
で知ったのですが、
Mac OS X は IME のオン・オフのような状態の切り替えではなく、
「ことえりのひらがな」とか
「ことえりのカタカナ」とか
「ことえりの英字」とか
のようなIMEの種類を切り替えて入力するようになっています。</p>

<p>この考え方と開閉状態しか考慮していない二値的な制御シーケンスは相性が悪いのではないかと思いました。</p>

<h2>Cocoa Emacs のインラインパッチでは?</h2>

<p>Cocoa Emacs のインラインパッチをよく見ると
<code>mac-toggle-input-source</code>
という関数があって、
<code>(mac-toggle-input-source nil)</code>
で IME オフ相当に、
<code>(mac-toggle-input-source t)</code>
で IME オン相当にできるようなので、
対応は不可能ではないのかもしれません。</p>

<h2>端末の制御シーケンスでは?</h2>

<p><a href="http://ttssh2.sourceforge.jp/manual/ja/about/ctrlseq.html">TeraTerm Pro の対応制御シーケンス</a>
には以下の3種類の IME 関連の制御シーケンスがあります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  CSI &lt; r    TTIMERSIME の開閉状態を復元する。
</span><span class='line'>  CSI &lt; s    TTIMESVIME の開閉状態を保存する。
</span><span class='line'>  CSI &lt; Ps t TTIMESTIME の開閉状態を設定する。省略時の Ps の値は 0。
</span><span class='line'>               Ps = 0      IME を閉じる。
</span><span class='line'>                  = 1      IME を開く。</span></code></pre></td></tr></table></div></figure>


<p>この中の <code>TTIMESTIME</code> の <code>Ps</code> を拡張して、
2 以上も受け付けるようにして、
(別の状態が不可能なら 1 と同じ挙動で)
可能ならカタカナ入力などの別の IME の状態を設定できるようにするという案を思いつきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[launchdでdistnotedを定期的に終了させる]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-13-killall-distnoted-periodically.html"/>
    <updated>2013-11-13T18:23:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/killall-distnoted-periodically</id>
    <content type="html"><![CDATA[<p>Mac OS X 10.9 Mavericks で気がつくと
<code>distnoted</code> というプロセスのメモリ消費が増えて
大変なことになっていることがあって、
気がついた時は手動で <code>killall distnoted</code> で対処したり、
OS 自体を再起動したりしていました。</p>

<p>たまに気がつかないうちに大量にメモリを消費して、
確認のためのアクティビティモニタを開くのも大変なことがあったので、
さすがにまずいと思って <code>launchd</code> で定期的に実行するようにしました。</p>

<!--more-->


<h2>distnoted とは?</h2>

<p>man によると <code>distributed notification server</code> というものらしいのですが、
詳細はよくわかりませんでした。</p>

<p>man には自動で起動するものなので、
手動で起動するものではないとは書いてありました。</p>

<p>必要に応じて自動で起動してくるので、
<code>killall</code> などで止めてしまっても問題が無いという情報は
どこかでみかけました。</p>

<p><code>ps</code> でプロセスを確認すると <code>root</code> 権限で
<code>/usr/sbin/distnoted daemon</code> が動いていて、
他にいくつかの
<code>/usr/sbin/distnoted agent</code>
がユーザー権限で動いていました。
そのうちの1個がログインしたユーザーの権限で動いていて、
それがメモリを大量に消費していて、
<code>killall distnoted</code>
ではそのプロセスだけを終了させています。</p>

<h2>launchd による定期実行</h2>

<p><code>launchd</code> で定期的に実行するには</p>

<figure class='code'><figcaption><span>~/Library/LaunchAgents/local.killall.distnoted.plist</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>Label<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>local.killall.distnoted<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>ProgramArguments<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>/usr/bin/killall<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>distnoted<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>StartInterval<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;integer&gt;</span>600<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>という内容のファイルを
<code>~/Library/LaunchAgents/local.killall.distnoted.plist</code>
に作成して
<code>launchctl load ~/Library/LaunchAgents/local.killall.distnoted.plist</code>
で反映します。</p>

<p>設定を変更したときは</p>

<figure class='code'><figcaption><span>~/Library/LaunchAgents/local.killall.distnoted.plist</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>launchctl unload ~/Library/LaunchAgents/local.killall.distnoted.plist
</span><span class='line'>launchctl load ~/Library/LaunchAgents/local.killall.distnoted.plist
</span></code></pre></td></tr></table></div></figure>


<p>で反映します。</p>

<p><code>StartInterval</code> は秒単位なので <code>600</code> だと10分間隔です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iTerm2でのIME制御がきかない]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-13-tty-ime.html"/>
    <updated>2013-11-13T00:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/tty-ime</id>
    <content type="html"><![CDATA[<p>iTerm2 Build 1.0.0.20131109 で確認しました。</p>

<p><a href="http://ttssh2.sourceforge.jp/manual/ja/about/ctrlseq.html">TeraTerm Pro の対応制御シーケンス</a>
や
<a href="http://nanno.dip.jp/softlib/man/rlogin/ctrlcode.html">RLogin の対応している制御コード一覧</a>
には IME の状態制御があります。</p>

<p>iTerm2 はオプションでその制御シーケンスを受け付けるようには出来るのですが、
現状は無視するだけのようです。</p>

<!--more-->


<h2>制御シーケンス</h2>

<p>TeraTerm Pro 由来で RLogin も対応したものらしいです。
具体的なシーケンスとしては
<a href="http://ttssh2.sourceforge.jp/manual/ja/about/ctrlseq.html">TeraTerm Pro の対応制御シーケンス</a>
から引用すると、
次の3種類になります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  CSI &lt; r    TTIMERSIME の開閉状態を復元する。
</span><span class='line'>  CSI &lt; s    TTIMESVIME の開閉状態を保存する。
</span><span class='line'>  CSI &lt; Ps t TTIMESTIME の開閉状態を設定する。省略時の Ps の値は 0。
</span><span class='line'>               Ps = 0      IME を閉じる。
</span><span class='line'>                  = 1      IME を開く。</span></code></pre></td></tr></table></div></figure>


<h2>iTerm2 の対応</h2>

<p><a href="https://github.com/gnachman/iTerm2">https://github.com/gnachman/iTerm2</a>
の
<a href="https://github.com/gnachman/iTerm2/blob/f47b1f815c54bb7d61adb3917a9a742c0e5cb703/VT100Terminal.m#L575">VT100Terminal.m</a>
を見るとわかるのですが、
制御シーケンスの存在は認識しているようです。
その処理で呼ばれているところを追いかけてみると、
現状はただ無視しているだけでした。</p>

<p>このあたりのコードは設定で
<code>Profiles</code> の <code>Terminal</code> タブの中にある
<code>Use modern parser (experimental)</code>
にチェックを入れないと使われないようで、
チェックなしの状態で
<code>ruby -e 'puts "\e[&lt;1t"</code>
とか実行しても
<code>&lt;1t</code>
と出るだけで何も起きませんでした。
チェックを入れると <code>puts</code> で自動的に入る改行だけになりましたが、
IME の状態に変化はありませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HomebrewのEmacsにIMEインラインパッチが取り込まれたので設定した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-12-cocoa-emacs-ime.html"/>
    <updated>2013-11-12T18:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/cocoa-emacs-ime</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/h12o@github/items/07f773909da5ebdb7b7c">h12o さんのインラインパッチの pull request が取り込まれた</a>
(コメント参照)
ということで、
<code>brew uninstall emacs</code> で一度アンインストールしてから
<code>brew install --cocoa --srgb --with-gnutls --japanese emacs -v</code>
でインストールして、
IME 関連の設定をしてみました。</p>

<!--more-->


<h2>IME 関連設定全体</h2>

<p>以下のように設定してみました。</p>

<p>以降は設定内容を個別に解説していきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">global-set-key</span> <span class="p">(</span><span class="nf">kbd</span> <span class="s">&quot;M-¥&quot;</span><span class="p">)</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span> <span class="p">(</span><span class="nf">insert</span> <span class="s">&quot;\\&quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">static-when</span> <span class="p">(</span><span class="nf">eq</span> <span class="nv">window-system</span> <span class="ss">&#39;ns</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">static-when</span> <span class="p">(</span><span class="nb">assoc </span><span class="s">&quot;MacOSX&quot;</span> <span class="nv">input-method-alist</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">;; ime inline patch</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">setq</span> <span class="nv">default-input-method</span> <span class="s">&quot;MacOSX&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">static-when</span> <span class="nv">t</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">mac-translate-from-yen-to-backslash</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">global-set-key</span> <span class="p">(</span><span class="nf">kbd</span> <span class="s">&quot;M-¥&quot;</span><span class="p">)</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span> <span class="p">(</span><span class="nf">insert</span> <span class="s">&quot;¥&quot;</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="nf">mapc</span>
</span><span class='line'>     <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">param</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">name</span> <span class="p">(</span><span class="nb">car </span><span class="nv">param</span><span class="p">)))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>          <span class="p">((</span><span class="nf">string-match</span> <span class="s">&quot;Japanese\\(\\.base\\)?\\&#39;&quot;</span> <span class="nv">name</span><span class="p">)</span> <span class="c1">;; ひらがなの日本語入力</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">mac-set-input-method-parameter</span> <span class="nv">name</span> <span class="ss">&#39;cursor-color</span> <span class="s">&quot;blue&quot;</span><span class="p">))</span>
</span><span class='line'>          <span class="p">((</span><span class="nf">string-match</span> <span class="s">&quot;Japanese&quot;</span> <span class="nv">name</span><span class="p">)</span> <span class="c1">;; カナなどの日本語入力</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">mac-set-input-method-parameter</span> <span class="nv">name</span> <span class="ss">&#39;cursor-color</span> <span class="s">&quot;red&quot;</span><span class="p">))</span>
</span><span class='line'>          <span class="p">((</span><span class="nf">string-match</span> <span class="s">&quot;Roman&quot;</span> <span class="nv">name</span><span class="p">)</span> <span class="c1">;; 英字</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">mac-set-input-method-parameter</span> <span class="nv">name</span> <span class="ss">&#39;cursor-color</span> <span class="s">&quot;black&quot;</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">t</span> <span class="c1">;; その他</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">mac-set-input-method-parameter</span> <span class="nv">name</span> <span class="ss">&#39;cursor-color</span> <span class="s">&quot;yellow&quot;</span><span class="p">))</span>
</span><span class='line'>          <span class="p">)</span>
</span><span class='line'>         <span class="p">))</span>
</span><span class='line'>     <span class="nv">mac-input-method-parameters</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">mac-set-input-method-parameter</span> <span class="s">&quot;com.apple.keylayout.US&quot;</span> <span class="ss">&#39;cursor-color</span> <span class="s">&quot;black&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>環境のチェック</h2>

<p><code>(eq window-system 'ns)</code>
で Cocoa Emacs かどうかチェックしています。</p>

<h2>パッチのチェック</h2>

<p><code>(boundp 'mac-input-method-parameters)</code>
でチェックしている例が多かったのですが、
<code>(assoc "MacOSX" input-method-alist)</code>
で真面目に <code>default-input-method</code> に設定できる値かどうか調べています。</p>

<p><code>(boundp 'mac-input-method-parameters)</code>
の方が一般的なようなので、
今後使えなくなる可能性も低そうなので、
<code>alist</code> をたどる必要があって遅そうな <code>assoc</code> のチェックは
あまりおすすめできないです。</p>

<h2>Option+backslash</h2>

<p>普段はデフォルトのままの「ことえり」を使っていて、
Linux での OADG109A と同じように <code>¥</code> キーはちゃんと yen sign の入力になるようにしています。</p>

<p>そして、
<code>Option+¥</code>
で backslash が入力できます。
外側の
<code>(global-set-key (kbd "M-¥") (lambda () (interactive) (insert "\\")))</code>
で Emacs でも同じ挙動になるようにしています。
インラインパッチがない環境だとこの挙動になります。
とりあえず入力できれば良いと思って作った設定なので、
prefix argument などには対応していません。
(<code>C-u M-¥</code> でも4文字ではなく1文字しか入らない)</p>

<p>ところが、これだと
<code>C-¥</code>
で
<code>toggle-input-method</code>
がきかなかったので、不本意ですが
<code>(mac-translate-from-yen-to-backslash)</code>
を使いました。
そして、逆に
<code>Option+¥</code>
で yen sign が入力できるようにするために
<code>(global-set-key (kbd "M-¥") (lambda () (interactive) (insert "¥")))</code>
と設定しています。</p>

<h2>カーソルの色の設定</h2>

<p>IME 対応で一番期待していた部分がこれでした。</p>

<p>ddskk で入力状態によってカーソルの色を変えられるのが便利だったので、
TeraTerm Pro のように IME の状態によってカーソルの表示を変更できるものは
積極的に利用していたこともあって、ちょっと頑張って設定してみました。</p>

<p><code>mac-input-method-parameters</code> の初期値の一部を抜粋すると以下のように設定されていて、
ほとんどの IME は「ことえり」と同じように
<code>.Japanese</code>
で終わっているものが一般的な日本語入力状態に見えたので、
青色にすることにしました。
「Google 日本語入力」はよくわかりませんが、
たぶん <code>.Japanese.base</code> で終わっているものが、
そうだろうと思って設定しました。</p>

<p>そしてカタカナなどの他の入力状態の時は赤色にしました。</p>

<p>それから、
<code>.Roman</code>
で終わっているものが、英字入力状態のようだったので、
黒色に戻すようにしました。</p>

<p>ちゃんと戻す設定も入れないと変わりっぱなしになってしまうので、
戻す設定も重要です。</p>

<p>最後にその他の日本語以外の IME のときは黄色にしました。</p>

<p>ネットで見つかる設定例では
<code>"com.apple.keylayout.US"</code>
にも
<code>mac-set-input-method-parameter</code>
をしているのですが、
<code>mac-input-method-parameters</code>
にはなかったので、
後で設定しています。
(先に設定すると、その他の黄色で上書きしてしまう。)</p>

<figure class='code'><figcaption><span>ns-win.el.gz</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">defvar</span> <span class="nv">mac-input-method-parameters</span>
</span><span class='line'>  <span class="o">&#39;</span><span class="p">(</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.apple.inputmethod.Kotoeri.Roman&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;A&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.apple.inputmethod.Kotoeri.Japanese&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;あ&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.apple.inputmethod.Kotoeri.Japanese.Katakana&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;ア&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.apple.inputmethod.Kotoeri.Japanese.FullWidthRoman&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;Ａ&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.apple.inputmethod.Kotoeri.Japanese.HalfWidthKana&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;ｱ&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.apple.inputmethod.kotoeri.Ainu&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;アイヌ&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.google.inputmethod.Japanese.Roman&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;G&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.google.inputmethod.Japanese.base&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;ぐ&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.google.inputmethod.Japanese.Katakana&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;グ&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.google.inputmethod.Japanese.FullWidthRoman&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;Ｇ&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.google.inputmethod.Japanese.HalfWidthKana&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;ｸﾞ&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;jp.monokakido.inputmethod.Kawasemi.Roman&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;K&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;jp.monokakido.inputmethod.Kawasemi.Japanese&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;か&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;jp.monokakido.inputmethod.Kawasemi.Japanese.Katakana&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;カ&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;jp.monokakido.inputmethod.Kawasemi.Japanese.FullWidthRoman&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;Ｋ&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;jp.monokakido.inputmethod.Kawasemi.Japanese.HalfWidthKana&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;ｶ&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;jp.monokakido.inputmethod.Kawasemi.Japanese.HalfWidthRoman&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;_K&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;jp.monokakido.inputmethod.Kawasemi.Japanese.Code&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;C&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.justsystems.inputmethod.atok21.Roman&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;A&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.justsystems.inputmethod.atok21.Japanese&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;あ&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.justsystems.inputmethod.atok21.Japanese.Katakana&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;ア&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.justsystems.inputmethod.atok21.Japanese.FullWidthRoman&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;英&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.justsystems.inputmethod.atok21.Japanese.HalfWidthEiji&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;半英&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.justsystems.inputmethod.atok22.Roman&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;A&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.justsystems.inputmethod.atok22.Japanese&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;あ&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;com.justsystems.inputmethod.atok22.Japanese.Katakana&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">title</span> <span class="o">.</span> <span class="s">&quot;ア&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-color</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cursor-type</span><span class="p">))</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zshでcdの履歴管理に標準添付のcdrを使う]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-12-zsh-cdr.html"/>
    <updated>2013-11-12T01:16:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/zsh-cdr</id>
    <content type="html"><![CDATA[<p>zsh は <code>cd -[TAB]</code> で補完できる directory stack が
<code>setopt autopushd</code> と組み合わせていると非常に便利なので、
<a href="https://github.com/znz/dot-shell/blob/c197f9e3232e8dca910be4ea4ae555cc60468692/profile.d/50dirstack.zsh">directory stack を自前で保存する仕組みを作った</a>り、
GNU screen の他の WINDOW のディレクトリに移動するための
<a href="https://github.com/znz/dot-shell/blob/523e3adaf9b776f05185acfb24bc19ef5f22c418/profile.d/70cds.zsh">cdsというコマンド</a>
を作ったりして、
現状でもあまり困っていませんでした。</p>

<p>しかし、 <code>zshcontrib(1)</code> に入っているものも試してみるのが
良さそうと思って試してみました。</p>

<!--more-->


<h2>ドキュメント</h2>

<p>ドキュメントは
<code>man zshcontrib</code> か、
<code>pager $^fpath/cdr(N)</code> で読めます。</p>

<h2>cdr コマンドの使い方</h2>

<p><code>cdr [TAB]</code> で補完して使ったり、
<code>cdr -l</code> で一覧を出したり、
<code>cdr -e</code> で一覧を編集したりできます。</p>

<p><code>cdr -e</code> の編集は <code>zle</code> なので、
<code>bindkey -e</code> なら、
普通のカーソル移動などの他に
ただの <code>Enter</code> だと編集終了になってしまうので、
<code>^[^M</code> (<code>ESC</code> に続けて <code>Enter</code>) で改行を入力して行を増やしたり分割したり
出来ることを知っておけば充分だと思います。</p>

<h2>設定全体</h2>

<p>全体としては以下のように設定してみました。</p>

<p>以降は設定内容を個別に解説していきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">if</span> <span class="o">[[</span> -n <span class="k">$(</span><span class="nb">echo</span> <span class="k">${</span><span class="p">^fpath</span><span class="k">}</span>/chpwd_recent_dirs<span class="o">(</span>N<span class="k">)</span><span class="o">)</span> <span class="o">&amp;&amp;</span> -n <span class="k">$(</span><span class="nb">echo</span> <span class="k">${</span><span class="p">^fpath</span><span class="k">}</span>/cdr<span class="o">(</span>N<span class="k">)</span><span class="o">)</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'>autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
</span><span class='line'>  add-zsh-hook chpwd chpwd_recent_dirs
</span><span class='line'>  zstyle <span class="s1">&#39;:completion:*:*:cdr:*:*&#39;</span> menu selection
</span><span class='line'>  zstyle <span class="s1">&#39;:completion:*&#39;</span> recent-dirs-insert both
</span><span class='line'>  zstyle <span class="s1">&#39;:chpwd:*&#39;</span> recent-dirs-max 500
</span><span class='line'>  zstyle <span class="s1">&#39;:chpwd:*&#39;</span> recent-dirs-default <span class="nb">true</span>
</span><span class='line'><span class="nb">  </span>zstyle <span class="s1">&#39;:chpwd:*&#39;</span> recent-dirs-file <span class="s2">&quot;${XDG_CACHE_HOME:-$HOME/.cache}/shell/chpwd-recent-dirs&quot;</span>
</span><span class='line'>  zstyle <span class="s1">&#39;:chpwd:*&#39;</span> recent-dirs-pushd <span class="nb">true</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使えるかどうかのガード条件</h2>

<p>昔、
zsh の設定を環境ごとに分岐させようとした時、
<code>is-at-least</code> は古い zsh で使えなかったのと、
バックポートで使える可能性があったり、
自前の <code>fpath</code> にファイルを追加した場合などを考慮して、
機能自体の存在をチェックするようにしています。</p>

<p>ruby で推奨されているやり方として、
<code>RUBY_VERSION</code> をチェックするのではなく、
機能の存在をチェックするべき、
という話があったことも影響しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  <span class="k">if</span> <span class="o">[[</span> -n <span class="k">$(</span><span class="nb">echo</span> <span class="k">${</span><span class="p">^fpath</span><span class="k">}</span>/chpwd_recent_dirs<span class="o">(</span>N<span class="k">)</span><span class="o">)</span> <span class="o">&amp;&amp;</span> -n <span class="k">$(</span><span class="nb">echo</span> <span class="k">${</span><span class="p">^fpath</span><span class="k">}</span>/cdr<span class="o">(</span>N<span class="k">)</span><span class="o">)</span> <span class="o">]]</span>; <span class="k">then</span>
</span></code></pre></td></tr></table></div></figure>


<p>Glob Qualifiers の <code>(N)</code> (<code>NULL_GLOB</code>) を使っている関係で、
一度 <code>echo</code> してから <code>-n</code> でチェックしています。
もっと簡潔に書ける方法があれば教えてください。</p>

<h2>autoload</h2>

<p><code>autoload -U</code>
と書いてある設定例もありますが、
ドキュメントにあったように
<code>autoload -Uz</code>
を使っています。</p>

<p><code>-z</code>
を付けないと
<code>KSH_AUTOLOAD</code>
の設定の影響を受けるそうなので、
基本的には <code>-z</code> を明示的に付けるのがおすすめのようです。</p>

<h2>add-zsh-hook</h2>

<p><code>chpwd_functions</code> への追加は</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">typeset</span> -ga chpwd_functions
</span><span class='line'>chpwd_functions+<span class="o">=</span>chpwd_recent_dirs
</span></code></pre></td></tr></table></div></figure>


<p>としても良かったのですが、
念のため <code>typeset</code> するのが最近の zsh しか使わないのなら無駄に感じたのと、
<code>cdr</code> のドキュメントに書いてあったこともあり、
<code>add-zsh-hook</code>
を使ってみました。</p>

<h2>menu selection</h2>

<p>Web で設定例を見ると
<code>zstyle ':completion:*' menu select</code>
になっていることが多いのですが、
基本的に menu select は使っていなかったので、
<code>zshcontrib(1)</code> や
<code>${^fpath}/cdr(N)</code> に書いてあった通りに
<code>':completion:*'</code>
ではなく
<code>':completion:*:*:cdr:*:*'</code>
で、
値も
<code>select</code>
ではなく
<code>selection</code>
で設定しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  zstyle <span class="s1">&#39;:completion:*:*:cdr:*:*&#39;</span> menu selection
</span></code></pre></td></tr></table></div></figure>


<h2>recent-dirs-insert</h2>

<p>これは
<code>cdr [TAB]</code>
の挙動の設定で、
好みが分かれると思うので、
<code>always</code>, <code>fallback</code>, <code>both</code>
を一通り試してみるのをおすすめします。</p>

<p><code>both</code> だと通常の <code>cd</code> の補完にメニューから選ぶ補完候補に履歴が入っているという感じに見えました。
あまりうまく使えていないので、そのうち他の設定に変えて試してみようと思っています。</p>

<h2>recent-dirs-max</h2>

<p>設定を保存する最大数です。
デフォルト値は 20 です。</p>

<h2>recent-dirs-file</h2>

<p><a href="http://standards.freedesktop.org/basedir-spec/latest/index.html">XDG Base Directory Specification</a>
に合わせて <code>~/.cache</code> を使うようにしています。</p>

<p>他の部分で既に <code>mkdir -p</code> しているので、ここでは省略しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  <span class="c">#mkdir -p &quot;${XDG_CACHE_HOME:-$HOME/.cache}/shell&quot;</span>
</span><span class='line'>  zstyle <span class="s1">&#39;:chpwd:*&#39;</span> recent-dirs-file <span class="s2">&quot;${XDG_CACHE_HOME:-$HOME/.cache}/shell/chpwd-recent-dirs&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ドキュメントにあるように、
以下のような設定にして TTY ごとのファイルと
グローバルのファイルにわけるのも良いかもしれません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  zstyle recent-dirs-file <span class="s1">&#39;:chpwd:*&#39;</span> ~/.chpwd-recent-dirs-<span class="k">${</span><span class="nv">TTY</span><span class="p">##*/</span><span class="k">}</span> +
</span></code></pre></td></tr></table></div></figure>


<h2>recent-dirs-pushd</h2>

<p>他の設定が影響していたのか、
何が原因だったのかは追求していないのですが、
<code>recent-dirs-pushd</code> を <code>true</code> にしないと
最初はうまく動かなかったのですが、
履歴がたまったからなのか、
なぜか今はこの設定に関係なくちゃんと動いているようです。</p>

<h2>recent-dirs-prune</h2>

<p>recent の一覧に追加しないディレクトリのパターンなどを設定できるようですが、
必要性を感じていないので、
まだ何も設定していません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KOF2013：関西オープンフォーラム2013]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-09-k-of-2013.html"/>
    <updated>2013-11-09T20:22:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/k-of-2013</id>
    <content type="html"><![CDATA[<p><a href="https://k-of.jp/2013/">KOF2013：関西オープンフォーラム2013</a>
に最後の方にちょっとだけ行ってきました。</p>

<p>時間もあまりなかったので、セミナーの方には行かずに
ブースにいる知り合いと話をするのがメインでした。</p>

<p>最後のお楽しみ抽選会には参加してみましたが、
じゃんけんが弱くて何ももらえませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[/dev/snd/hwC0D0でPermission deniedになる問題を調べた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-04-dev-snd-hwc0d0-permission-denied.html"/>
    <updated>2013-11-04T14:22:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dev-snd-hwc0d0-permission-denied</id>
    <content type="html"><![CDATA[<p><code>/dev/snd/hwC0D0</code> を <code>O_RDWR</code> で <code>open(2)</code> するところで
<code>Permission denied</code> になるという話
(
<a href="https://twitter.com/takaswie/status/397014733494026240">ツイート</a>、
<a href="https://forums.ubuntulinux.jp/viewtopic.php?pid=100488#p100488">Ubuntu日本語フォーラム</a>
)
が気になったので、調べてみました。</p>

<!--more-->


<h2>結論</h2>

<p>最終的にどうすれば良いか知りたい人向けの情報としては、
<code>setcap cap_sys_rawio=ep filename</code>
でケーパビリティ (capability) を設定する、ということになります。</p>

<p>以下は、その結論にたどり着くまでに調べたことのメモです。</p>

<h2>パーミッションと ACL</h2>

<p><a href="http://blog.n-z.jp/blog/2013-10-27-kansai-debian-meeting.html">第 77 回 関西 Debian 勉強会に参加した</a>
で書いたように、
audio グループに属しているか、コンソールから直接ログインしていれば
パーミッションの問題はないはずです。</p>

<h2>余談: デバイスの sticky bit</h2>

<p><code>crw-rw---T</code> になっていて、
もしかして末尾の sticky bit が影響しているのかと思って調べてみたところ、
<a href="http://lists.debian.org/debian-user/2012/02/msg01273.html">Re: Sticky bit on device files?</a>
によると udev の管理用のフラグとして使われているようでした。
今回の件とは関係なさそうだったので、これ以上深追いはしていません。</p>

<h2>AppArmor</h2>

<p><code>/etc/apparmor.d/abstractions/audio</code> に
<code>/dev/snd/*      rw,</code> とあるので、
念のため
<code>sudo service apparmor stop</code>
で <code>AppArmor</code> を止めて試してみましたが、
変化が無かったので、
<code>sudo service apparmor start</code>
で戻しました。</p>

<h2>カーネルのソースコード探索</h2>

<p><code>strace</code> などで確認しても、
ユーザーランドでは <code>EACCES</code> が返ってくるとしかわからないので、
こうなったらカーネルのソースコードから <code>EACCES</code> を返しているところを
探すしかないということで、
<code>apt-get source linux-image-$(uname -r)</code>
でソースコードをダウンロードして探してみました。</p>

<p><code>grep -r EACCES sound</code> で探してみると
<code>sound/pci/hda/hda_hwdep.c</code> で以下のように
<code>CAP_SYS_RAWIO</code> をみていることがわかりました。</p>

<figure class='code'><figcaption><span>sound/pci/hda/hda_hwdep.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="k">static</span> <span class="kt">int</span> <span class="nf">hda_hwdep_open</span><span class="p">(</span><span class="k">struct</span> <span class="n">snd_hwdep</span> <span class="o">*</span><span class="n">hw</span><span class="p">,</span> <span class="k">struct</span> <span class="n">file</span> <span class="o">*</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'> <span class="err">#</span><span class="n">ifndef</span> <span class="n">CONFIG_SND_DEBUG_VERBOSE</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">capable</span><span class="p">(</span><span class="n">CAP_SYS_RAWIO</span><span class="p">))</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="n">EACCES</span><span class="p">;</span>
</span><span class='line'> <span class="err">#</span><span class="n">endif</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Linux のケーパビリティ (capability)</h2>

<p><a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man7/capabilities.7.html">Man page of CAPABILITIES</a>
が関係しているということがわかったところで、
設定方法も調べてみると、
<code>setcap</code> で設定できるとわかったので、
以下のような簡単なテストプログラムを用意して、
<code>sudo setcap cap_sys_rawio=ep ./a.out</code>
でケーパビリティを設定すると
<code>open(2)</code>
に成功するのを確認できました。
<code>cap_sys_rawio=ep</code> は危険そうなので、
テストプログラムとはいえ、
任意のパスを受け取れるようにするのは止めた方が良さそうに思いました。</p>

<figure class='code'><figcaption><span>open-hwC0D0.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">sys</span><span class="o">/</span><span class="n">types</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'> <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">sys</span><span class="o">/</span><span class="n">stat</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'> <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">fcntl</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'> <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">open</span><span class="p">(</span><span class="s">&quot;/dev/snd/hwC0D0&quot;</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span>
</span><span class='line'>  <span class="n">perror</span><span class="p">(</span><span class="s">&quot;open&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Land of Lisp 読書会 第3回(兵庫県)に参加してきた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-02-reading-land-of-lisp-3.html"/>
    <updated>2013-11-02T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/reading-land-of-lisp-3</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/main/tag/amagasakirb">amagasakirb</a>
の
<a href="http://kokucheese.com/event/index/105390/">11月2日 Ｌａｎｄ　ｏｆ　Ｌｉｓｐ 読書会　第3回(兵庫県)</a>
に参加してきました。
今回は第III部でした。</p>

<p>次回は会場の予約が取れなかったということで、12月は無くて、
1月第2週以降の予定で第一候補は 2014年1月11日ということでした。</p>

<!--more-->


<p>今回は他のイベントとも日程が重なっていたらしく、
それが原因かどうかはわかりませんが、
Lisper の人がいなかったので、
Lisp についての疑問は割と解決出来ない感じで進みました。
そういうこともあってか、結構雑談とか Ruby の話が多かったです。</p>

<p>以下はメモです。</p>

<ul>
<li>p.188 の挿絵の意味がよくわからない?</li>
<li><code>loop</code> の <code>for</code> が複数あるときに同時に動く (Ruby の <code>Array#zip</code> のように) のが気持ち悪い

<ul>
<li>別々に動くのは <code>loop</code> のネストで代用できるからこういう仕様なのでは。</li>
</ul>
</li>
<li>網膜に焼き付ける話から Google Glass の話</li>
<li><code>(setf アクセサ 値)</code> というのが気持ち悪いという話

<ul>
<li>p.197 の <code>(setf (gethash ...) t)</code> とか</li>
<li>左辺値と右辺値の見た目が同じ言語は多い</li>
<li>シェルスクリプトは x=値 と $x で違う</li>
</ul>
</li>
<li>話には出しませんでしたが <code>*plants*</code> の値は <code>t</code> の代わりに <code>plant-energy</code> にするのもありかもと思いました。</li>
<li>変数名とかの名前の付け方がよくわからない。

<ul>
<li>p.202 <code>xnu</code> とか。</li>
</ul>
</li>
<li>ジャングルは add-plants で必ず植物が発生するので
植物が発生する確率が高い領域というだけで
最初から植物がたくさんあるわけではない。</li>
<li>loop はミニ言語

<ul>
<li>Perl の正規表現</li>
<li>Python のリスト内包表記</li>
<li>scala のリスト内包表記</li>
</ul>
</li>
<li>独自言語の話

<ul>
<li><code>printf</code> の書式文字列</li>
<li>C++ のマニピュレータは難しすぎるという話</li>
<li>Ruby の <code>#{}</code> は独自言語というほどのものではない</li>
<li>pack / unpack のテンプレート (これも Perl 由来なので、 Ruby 独自ではない)</li>
</ul>
</li>
<li>p.216 チルド文字

<ul>
<li>tilde なので変というわけではないがチルダの方がよく見かける</li>
<li>チルドの方が元の英語の発音に近い?</li>
</ul>
</li>
<li><code>@</code> は <code>printf</code> の <code>%-10d</code> のような <code>-</code> とフラグの有無での左右が逆</li>
<li>Ruby で

<ul>
<li><code>%d</code> とか <code>%f</code> 以外はあまり使わない?</li>
<li>ljust とか rjust とかあるから <code>%s</code> と数字の組み合わせはあまり使わない?</li>
<li><code>"%7.2f"</code> は他の方法では難しそう</li>
</ul>
</li>
<li><code>'</code> の必要性の話

<ul>
<li><code>'a</code> とかを指定出来るようにするため?</li>
<li><code>'</code> で埋めたい場合は <code>''</code> とか</li>
</ul>
</li>
<li><code>format</code> の方が <code>loop</code> にあった周期表のような表が欲しい</li>
<li><code>printf</code> の書式指定文字列に別の文字で埋める指定はできるか?

<ul>
<li>ljust や rjust ならできる (例: <code>"hoge".rjust(10, "!")</code>)</li>
<li><code>printf</code> は不明 (できなさそう?)</li>
<li><code>%{}d</code> とか <code>%()</code> とかの話</li>
</ul>
</li>
<li><code>~$</code> は日本円だとあまり使わなさそう

<ul>
<li>アメリカはクオーターとかダイムとか (日本人には) わかりにくい</li>
</ul>
</li>
<li><code>(fresh-line)</code> が便利なときの例は?

<ul>
<li>Ruby は <code>puts</code> が便利だから <code>fresh-line</code> のような機能の必要性が低い?</li>
</ul>
</li>
<li>p.222 <code>~t</code> 相当は Ruby にはなさそう

<ul>
<li>pack テンプレートなら <code>@</code> で似たことはできそう</li>
</ul>
</li>
<li>pack テンプレートの代わりに C の構造体をパースするものがあればわかりやすい?</li>
<li>「33文字分出力したら改行してくれ」の 33 とか数えたくない</li>
<li>p.228 のゲームは実際に実行しても <code>-</code> の繰り返しの上下の枠線の行はない</li>
<li>名前がよくない?

<ul>
<li>prin1 とか</li>
</ul>
</li>
<li>他の言語でも printf, strstr, stdio</li>
<li>cout の読み方とか</li>
<li>13.5章は表紙ページがない</li>
<li>p.233 挿絵はストリームが邪悪な感じというのを表している?</li>
<li>p.239 「残念ながら、ソケットの標準化は ANSI Common Lisp の仕様化に間に合わなかったので、ソケットを扱う標準の方法というのはない。」

<ul>
<li><a href="http://ja.wikipedia.org/wiki/Common_Lisp">Common Lisp &ndash; Wikipedia</a> によると「1984年、1994年にANSIにより標準化」</li>
</ul>
</li>
<li>p.248 REPL にエラープロンプトを表示するのは REPL から実行した時だけ</li>
<li>repl に戻る話から Ruby の話

<ul>
<li><code>better_errors</code></li>
<li><code>binding_of_caller</code></li>
<li><code>ppp</code></li>
</ul>
</li>
<li>Web 関連の雑談

<ul>
<li>Active Scaffold が IE10 で変?</li>
<li>CoffeeScript</li>
<li>ClojureScript</li>
<li>ブラウザで Ruby</li>
<li>ActiveScriptRuby</li>
<li>NougakuDo</li>
<li>Google の bot は JavaScript や CSS も解釈する</li>
</ul>
</li>
<li>p.250 q値</li>
<li>car cadr caddr cdddr nth nthcdr</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MavericksでEmacs.appが起動時にホームディレクトリにならない]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-01-emacs-on-mavericks.html"/>
    <updated>2013-11-01T18:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/emacs-on-mavericks</id>
    <content type="html"><![CDATA[<p>Mac OS X を Mavericks にあげたら homebrew で入れた
Emacs.app を起動した時に <code>default-directory</code>
がホームディレクトリから <code>/</code> に変わってしまっていたので、
原因を調べてみました。</p>

<p>2013-11-09 追記:
現在は emacs の開発版から抜き出したパッチの pull request が homebrew に取り込まれていて、
問題は起きなくなっています。</p>

<!--more-->


<h2>調べたきっかけ</h2>

<p>きっかけは
<a href="http://qiita.com/ksato9700/items/1ec373895b9693529f82">Mavericksにアップデートして遭遇した不具合　まとめ</a>
を見て自分の環境だけで起きている現象ではないと知ったからです。</p>

<h2>原因</h2>

<p>Emacs のソースの以下の部分で <code>-psn</code> で始まる引数の有無で
ホームディレクトリに移動するかどうかを判定しているのに、
Mavericks だと引数なしで起動されるようになったからのようです。</p>

<figure class='code'><figcaption><span>emacs-24.3/src/emacs.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="err">#</span><span class="n">ifdef</span> <span class="n">HAVE_NS</span>
</span><span class='line'>   <span class="n">ns_pool</span> <span class="o">=</span> <span class="n">ns_alloc_autorelease_pool</span> <span class="p">();</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">noninteractive</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'> <span class="err">#</span><span class="n">ifdef</span> <span class="n">NS_IMPL_COCOA</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span><span class="n">skip_args</span> <span class="o">&lt;</span> <span class="n">argc</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* FIXME: Do the right thing if getenv returns NULL, or if</span>
</span><span class='line'><span class="cm">          chdir fails.  */</span>
</span><span class='line'>           <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strncmp</span> <span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">skip_args</span><span class="p">],</span> <span class="s">&quot;-psn&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
</span><span class='line'>             <span class="p">{</span>
</span><span class='line'>               <span class="n">skip_args</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>               <span class="n">chdir</span> <span class="p">(</span><span class="n">getenv</span> <span class="p">(</span><span class="s">&quot;HOME&quot;</span><span class="p">));</span>
</span><span class='line'>             <span class="p">}</span>
</span><span class='line'>           <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">skip_args</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">argc</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">strncmp</span> <span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">skip_args</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="s">&quot;-psn&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
</span><span class='line'>             <span class="p">{</span>
</span><span class='line'>               <span class="n">skip_args</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>               <span class="n">chdir</span> <span class="p">(</span><span class="n">getenv</span> <span class="p">(</span><span class="s">&quot;HOME&quot;</span><span class="p">));</span>
</span><span class='line'>             <span class="p">}</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'> <span class="err">#</span><span class="n">endif</span>  <span class="cm">/* COCOA */</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'> <span class="err">#</span><span class="n">endif</span> <span class="cm">/* HAVE_NS */</span>
</span></code></pre></td></tr></table></div></figure>


<h2>状況</h2>

<p>ちなみに Mac OS X 10.8.5 では、たとえば
<code>/usr/local/Cellar/emacs/24.3/Emacs.app/Contents/MacOS/Emacs -psn_0_29637698</code>
のように起動されていました。</p>

<p>Qiita の記事では Dock から起動した時のことを書いていますが、
<code>open -a Emacs.app</code> のように起動しても同じでした。</p>

<p>RubyMotion で最小限のカレントディレクトリを表示するだけのアプリを作って試してみたところ、
起動時にカレントディレクトリが <code>/</code> になっているのは
Cocoa アプリでは普通の動作のようでした。</p>

<h2>対応状況</h2>

<p><a href="http://osdir.com/ml/general/2013-10/msg61593.html">ML での情報</a>
によると trunk には対応がチェックインされているということで、
調べてみると
revision 114730 <!-- http://bzr.savannah.gnu.org/lh/emacs/trunk/revision/114730 -->
と
revision 114882 <!-- http://bzr.savannah.gnu.org/lh/emacs/trunk/revision/114882 -->
のパッチをあわせて以下のように対応すれば良さそうに見えました。</p>

<figure class='code'><figcaption><span>emacs.c.diff</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">--- src/emacs.c.orig    2013-02-06 13:33:36.000000000 +0900</span>
</span><span class='line'><span class="gi">+++ src/emacs.c  2013-11-02 22:38:45.000000000 +0900</span>
</span><span class='line'><span class="gu">@@ -1158,10 +1158,13 @@</span>
</span><span class='line'>   if (!noninteractive)
</span><span class='line'>     {
</span><span class='line'> #ifdef NS_IMPL_COCOA
</span><span class='line'><span class="gi">+      /* Started from GUI? */</span>
</span><span class='line'><span class="gi">+      /* FIXME: Do the right thing if getenv returns NULL, or if</span>
</span><span class='line'><span class="gi">+         chdir fails.  */</span>
</span><span class='line'><span class="gi">+      if (! inhibit_window_system &amp;&amp; ! isatty (0))</span>
</span><span class='line'><span class="gi">+        chdir (getenv (&quot;HOME&quot;));</span>
</span><span class='line'>       if (skip_args &lt; argc)
</span><span class='line'>         {
</span><span class='line'><span class="gd">-      /* FIXME: Do the right thing if getenv returns NULL, or if</span>
</span><span class='line'><span class="gd">-         chdir fails.  */</span>
</span><span class='line'>           if (!strncmp (argv[skip_args], &quot;-psn&quot;, 4))
</span><span class='line'>             {
</span><span class='line'>               skip_args += 1;
</span></code></pre></td></tr></table></div></figure>


<p>というわけで homebrew の方に
<a href="https://github.com/mxcl/homebrew/pull/23897">fix default-directory on Cocoa and Mavericks</a>
として pull request を出してみました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LC_COLLATEの問題でuniqで丸数字が同一視されてしまう]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-31-lc-collate-uniq.html"/>
    <updated>2013-10-31T23:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lc-collate-uniq</id>
    <content type="html"><![CDATA[<p><code>uniq -c</code> で重複がないのを確認しようとしたら、
丸数字のところだけ違う行が同一視されてしまって、
2以上になることがあって困ったので、
原因を調べてみました。</p>

<!--more-->


<h2>現象</h2>

<p>以下のように丸数字などが同一視されています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat n.txt
</span><span class='line'>①
</span><span class='line'>②
</span><span class='line'>$ uniq n.txt
</span><span class='line'>①
</span><span class='line'>$ sort n.txt
</span><span class='line'>①
</span><span class='line'>②
</span><span class='line'>$ tac n.txt | sort
</span><span class='line'>②
</span><span class='line'>①
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat n.txt
</span><span class='line'>①
</span><span class='line'>②
</span><span class='line'>$ LANG=ja_JP.utf8 uniq -c n.txt
</span><span class='line'>      2 ①
</span><span class='line'>$ LANG=C uniq -c n.txt
</span><span class='line'>      1 ①
</span><span class='line'>      1 ②
</span><span class='line'>$ uniq --version
</span><span class='line'>uniq (GNU coreutils) 8.20
</span><span class='line'>Copyright (C) 2012 Free Software Foundation, Inc.
</span><span class='line'>ライセンス GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
</span><span class='line'>This is free software: you are free to change and redistribute it.
</span><span class='line'>There is NO WARRANTY, to the extent permitted by law.
</span><span class='line'>
</span><span class='line'>作者 Richard M. Stallman および David MacKenzie。
</span><span class='line'>$ lsb_release -a
</span><span class='line'>No LSB modules are available.
</span><span class='line'>Distributor ID: Ubuntu
</span><span class='line'>Description:    Ubuntu 13.04
</span><span class='line'>Release:        13.04
</span><span class='line'>Codename:       raring
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<h2>調査</h2>

<p><code>apt-get source locales</code>
でソースをとってきて調べてみると
<code>locales/ja_JP</code> の <code>LC_COLLATE</code> から <code>END LC_COLLATE</code>
の間に書いていないコードポイントは同一視されているように見えました。</p>

<p>これは glibc の問題だと思って、既に報告されているかどうか調べてみると
<a href="https://sourceware.org/bugzilla/show_bug.cgi?id=13063">Bug 13063 – &lsquo;sort -u&rsquo; will erase some Chinese characters</a>
に同じような話がありました。</p>

<h2>ML で聞いてみた</h2>

<p><a href="http://listserv.linux.or.jp/pipermail/linux-users/2013-October/000527.html">linux-users: 108951</a>
で質問してみたところ、
<a href="http://listserv.linux.or.jp/pipermail/linux-users/2013-October/000528.html">linux-users: 108952</a>
で返信があり、
<code>LC_COLLATE</code>
をちゃんと定義して解決するか、
単純にバイト順でソートしたいだけなら
<code>LC_COLLATE=C</code> で良いという話でした。</p>

<h2>結論</h2>

<p>結局今回の目的はソートではなく重複検査だったので、
<code>LC_COLLATE=C</code> で解決ということになりました。</p>

<p>誰か興味のある人は真面目に
<code>LC_COLLATE</code>
の定義に挑戦してみると良いのではないでしょうか。</p>

<p>それとは別に定義されていない文字を同一視せずにバイト順でも何でもいいので、
適当に別の文字として扱ってくれるようになればいいのに、
とは思いました。
誰かそういう方向での対応も挑戦してみると
他の言語も含めて幸せになれるのではないかと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rbenvのプラグインを簡単に追加出来るようにするrbenv-plugを作った]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-29-rbenv-plug.html"/>
    <updated>2013-10-29T23:55:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rbenv-plug</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sstephenson/rbenv">rbenv</a> のプラグインをインストールするのに
<code>git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build</code>
のように <code>ruby-build</code> を二回指定しないといけなかったり、
git の URL をコピペしないといけなかったりして面倒なので、
簡単にインストールできるようにするプラグイン
<a href="https://github.com/znz/rbenv-plug">rbenv-plug</a>
を作りました。</p>

<p><a href="https://github.com/sstephenson/ruby-build">ruby-build</a>
のように <code>share</code> の下に一覧を持つようにしたので、
インストールできるプラグインは簡単に増やせます。</p>

<!--more-->


<h2>使い方</h2>

<p><a href="https://github.com/znz/rbenv-plug">README</a> に書いた通りです。</p>

<p><a href="https://github.com/sstephenson/rbenv/wiki/Plugins">plugins</a>
に載っているプラグインなら以下のように簡単にインストールできます。</p>

<pre><code>rbenv plug &lt;plugin-name&gt;
</code></pre>

<p>例えば
<a href="https://github.com/sstephenson/ruby-build">ruby-build</a>
をインストールするなら以下のようになります。</p>

<pre><code>rbenv plug ruby-build
</code></pre>

<p>例えば
<a href="https://github.com/rkh/rbenv-update">rbenv-update</a>
をインストールするなら、</p>

<pre><code>rbenv plug rbenv-update
</code></pre>

<p>のようにするか、
<code>rbenv-</code>
を省略して以下のようにします。</p>

<pre><code>rbenv plug update
</code></pre>

<p>git の URL を指定して任意のプラグインをインストールすることもできます。</p>

<pre><code>rbenv plug https://github.com/sstephenson/ruby-build.git
</code></pre>

<p>アンインストールも簡単にできます。
例えば
<code>rbenv-update</code>
をアンインストールするなら、</p>

<pre><code>rbenv unplug rbenv-update
</code></pre>

<p>のようにするか、
<code>rbenv-</code>
を省略して以下のようにします。</p>

<pre><code>rbenv unplug update
</code></pre>

<h2>インストール方法</h2>

<p>以下のようにプラグインの一般的なインストール方法そのままで、
<code>$RBENV_ROOT/plugins</code> に <code>git clone</code> するだけです。</p>

<pre><code>mkdir -p ~/.rbenv/plugins
git clone https://github.com/znz/rbenv-plug.git ~/.rbenv/plugins/rbenv-plug
</code></pre>

<h2>仕組み</h2>

<p>URL が指定された時は上の一般的なインストール方法と同様のことを実行するだけです。</p>

<p>プラグイン名を指定された時は
<code>share/rbenv-plug</code>
の中のスクリプトを実行します。</p>

<p>名前が <code>rbenv-</code> で始まるプラグインがほとんどなので、
<code>rbenv plug</code> や <code>rbenv unplug</code> の引数では
<code>rbenv-</code> を省略できるようにしました。</p>

<p><code>share/rbenv-plug</code> のスクリプトで
<a href="https://github.com/tpope/rbenv-aliases">rbenv-aliases</a>
なら <code>rbenv alias --auto</code> を追加で実行したり、
<a href="https://github.com/rkh/rbenv-use">rbenv-use</a>
なら依存している <code>rbenv-whatis</code> もインストールしたりしています。</p>

<h2>余談</h2>

<p><code>share/rbenv-plug</code> のファイルを追加している時に
<a href="https://github.com/taqtiqa/rbenv-plugin">rbenv-plugin</a>
というのがあって、
今の <code>rbenv-plug</code> (と <code>rbenv-unplug</code>) という名前に変えました。
最初は <code>rbenv-plugin-install</code> (と <code>rbenv-plugin-uninstall</code>)
という名前で作りかけていたので、
<code>rbenv-plugin</code> のサブコマンドと思いっきり名前がかぶっていました。
<code>rbenv-plugins-install</code> という複数形の名前も使われてしまっていたので、
思い切って短い名前に変更しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 77 回 関西 Debian 勉強会に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-27-kansai-debian-meeting.html"/>
    <updated>2013-10-27T13:46:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20131027">第 77 回 関西 Debian 勉強会</a>
に参加してきました。</p>

<p>前回の「Linuxとサウンドシステム」
の続きの
「ALSAのユーザーランド解説」
と
「git-buildpackage 入門 again」
という話でした。</p>

<!--more-->


<h2>Intro</h2>

<p><code>jessie</code> に向けての話で、
デフォルトの <code>init</code> が <code>systemd</code> に変わるかも、
というのが気になりました。
他に UTF-8 といえば UTF-8 に対応していない namazu のようなものが
どうなるのかというのもちょっと気になりました。</p>

<p>事前課題では、
前回の時に発表者の坂本さんに
VirtualBox の中の wheezy で音が出ない原因を調べてもらって、
<code>alsamixer</code> でボリュームが 0 になっていたから、
というのを直してもらっていたので、
すんなり音を出すことができました。</p>

<p>佐々木さんは警告のフラグ (<code>-Wall -Wextra</code>) を増やしてビルドしていて、
その警告メッセージを事前課題のところに書いていました。</p>

<p>警告の一部は <code>if</code> 文の処理内容が <code>;</code> だけで <code>{}</code> でくくった方が良いという警告だったのですが、
何もしないままよりも、
後ろにコメントで書いてあるメッセージを <code>puts</code> などで出力するようにした方が良いのではないかと思いました。</p>

<h2>ALSA のユーザーランド解説</h2>

<p>事前課題の添付ファイルの <code>pcm_minimal.c</code> の <code>device</code> のところにある
PCM ノードの指定は <code>default</code> 以外にも
<code>aplay -L</code> (または <code>arecord -L</code>) で表示されるものが指定できるという話がありました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* playback PCM node */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">char</span> <span class="o">*</span><span class="n">device</span> <span class="o">=</span> <span class="s">&quot;default&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>dmix</code>, <code>dsnoop</code>, <code>hw</code>, <code>plughw</code> はデフォルトでは隠されていて、
<code>~/.asoundrc</code> で以下のように設定をオーバーライドすれば <code>aplay -L</code> などで
出てくるようになるという話がありました。
(ALSA の上流や Debian では出ないのがデフォルトで、
Ubuntu ではパッチが当たっていて、
標準で出てくるようになっているという話もありました。)</p>

<figure class='code'><figcaption><span>~/.asoundrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>defaults.namehint.extended on
</span></code></pre></td></tr></table></div></figure>


<p>その前に asound の設定ファイルは独自形式で、
書式の説明は <code>libasound2-doc</code> パッケージの
<code>/usr/share/doc/libasound2-doc/html/</code>
以下にあるという話もありました。
独自形式のため、ライブラリとして設定ファイルを読み込む部分も持っているそうです。</p>

<p>PulseAudio 関係のパッケージを入れた時に
default が dmix/dsnoop から pulse に変わって、
PulseAudio のデーモンはログイン時に起動するという話もありました。</p>

<p>Android ではユーザーランドは asound ではなく tinyalsa で
カーネルランドは ASoC という話もありました。</p>

<h2>git-buildpackage 入門 again</h2>

<p>実際に <code>git-buildpackage</code> を使ってみるという内容でした。
最初にモバイルルーターなどを使ってみんなネットにつながるようにしてから始まりました。</p>

<p>事前課題で候補にあがったものを実際に <code>git-buildpackage</code> でビルドしてみるという話が続きました。
最後は時間切れで次回予告などは片付けをしながらになってしまいました。</p>

<p>最新の <code>git-buildpackage</code> だと <code>git</code> と同じように <code>gbp</code> コマンドとそのサブコマンドになっていて、
<code>wheezy</code> だと <code>gbp-clone</code> などの <code>-</code> 付きのコマンドを実行する必要がありました。</p>

<p><code>git-dch</code> という <code>git</code> のコミットログから <code>debian/changelog</code> を生成するツールではコミットログの1行目だけとってくるのがデフォルトの動作で、
<code>--full</code> というオプションでコミットログ全体を使えるとか、
man page の <code>META TAGS</code> にあるような情報を入れられるとか、
そういう話もしていました。</p>

<p><code>gbp clone</code> と <code>git clone</code> の違いは、
gbp 用の設定 (<code>debian/gbp.conf</code> とか) を見るとか、
upstream ブランチとかの設定をしてくれるということでした。</p>

<p><code>pbuilder</code> を使っていても前処理の <code>fakeroot debian/rules clean</code> が <code>pbuilder</code> の外で動いて、
そこで依存パッケージが必要なことがあるので <code>git-buildpackage</code> の前に
<code>build-dep</code> でビルドに必要なパッケージを入れる必要があるという話がありました。</p>

<h2>/dev/snd の ACL</h2>

<p>Debian 勉強会ということでホスト OS は Mac OS X なのですが、
サウンド関連や git-buildpackage は
VirtualBox の中の wheezy で試していました。</p>

<p>そのときに <code>ls -al /dev/snd</code> でサウンド関連のデバイスファイルに
<code>+</code> がついていて ACL がついているということに気がついて、
どこで設定されているのか気になったので帰ってから調べてみました。</p>

<figure class='code'><figcaption><span>~/.asoundrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ ls -al /dev/snd
</span><span class='line'>合計 0
</span><span class='line'>drwxr-xr-x   3 root root      180 10月 27 22:44 .
</span><span class='line'>drwxr-xr-x  13 root root     3180 10月 27 22:44 ..
</span><span class='line'>drwxr-xr-x   2 root root       60 10月 27 22:44 by-path
</span><span class='line'>crw-rw---T+  1 root audio 116,  5 10月 27 22:44 controlC0
</span><span class='line'>crw-rw---T+  1 root audio 116,  4 10月 27 22:44 pcmC0D0c
</span><span class='line'>crw-rw---T+  1 root audio 116,  3 10月 27 22:44 pcmC0D0p
</span><span class='line'>crw-rw---T+  1 root audio 116,  2 10月 27 22:44 pcmC0D1c
</span><span class='line'>crw-rw---T+  1 root audio 116,  1 10月 27 22:44 seq
</span><span class='line'>crw-rw---T+  1 root audio 116, 33 10月 27 22:44 timer
</span><span class='line'>$ getfacl /dev/snd/seq
</span><span class='line'>getfacl: Removing leading &#39;/&#39; from absolute path names
</span><span class='line'># file: dev/snd/seq
</span><span class='line'># owner: root
</span><span class='line'># group: audio
</span><span class='line'># flags: --t
</span><span class='line'>user::rw-
</span><span class='line'>user:admin0:rw-
</span><span class='line'>group::rw-
</span><span class='line'>mask::rw-
</span><span class='line'>other::---
</span></code></pre></td></tr></table></div></figure>


<p>まず、 <code>grep -r snd /lib/udev/rules.d</code> でデバイスを作成している場所を
探してみましたが、 <code>audio</code> グループに設定している箇所しか見つかりませんでした。</p>

<figure class='code'><figcaption><span>/lib/udev/rules.d/91-permissions.rules</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># sound devices
</span><span class='line'>SUBSYSTEM==&quot;sound&quot;,                             GROUP=&quot;audio&quot;,
</span><span class='line'>        OPTIONS+=&quot;static_node=snd/seq&quot;, OPTIONS+=&quot;static_node=snd/timer&quot;
</span></code></pre></td></tr></table></div></figure>


<p>次に、ログインしているユーザーの ACL が追加されているということで、
PAM が関係しているだろうという見当をつけて、
<code>/etc/pam.d</code> を確認してみたところ、
<code>common-session</code> の <code>pam_ck_connector</code> が関係してそうだと気付きました。</p>

<figure class='code'><figcaption><span>/etc/pam.d/common-session</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>session  optional            pam_ck_connector.so nox11
</span></code></pre></td></tr></table></div></figure>


<p>そこで <code>dpkg -L consolekit</code> などで <code>ConsoleKit</code> 関連のファイルをみていくと
<code>/usr/lib/ConsoleKit/run-seat.d/udev-acl.ck -&gt; /lib/udev/udev-acl</code>
が関係してそうだと気がついたので、
もう一度 udev のルールを確認してみると <code>70-udev-acl.rules</code> で
<code>udev-acl</code> というタグを設定していました。</p>

<figure class='code'><figcaption><span>/lib/udev/rules.d/70-udev-acl.rules</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># sound devices
</span><span class='line'>SUBSYSTEM==&quot;sound&quot;, TAG+=&quot;udev-acl&quot;
</span></code></pre></td></tr></table></div></figure>


<p><code>70-udev-acl.rules</code> をみたり <code>udev-acl</code> のソースをみると <code>ACL</code> を設定しているのは
<code>udev-acl</code> で間違いなさそうでした。
ただし、 <code>70-udev-acl.rules</code> で
<code># systemd replaces udev-acl entirely, skip if active</code>
と書いてあったので、 <code>systemd</code> を使っている環境だと
<code>udev-acl</code> は何もしないようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第8回 関西Emacs勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-26-kansai-emacs.html"/>
    <updated>2013-10-26T14:19:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-emacs</id>
    <content type="html"><![CDATA[<p><a href="http://atnd.org/events/44155">(kansai-emacs #x08) #関西Emacs : ATND</a>
というイベントに参加してきました。</p>

<!--more-->


<h2>ポジションペーパー</h2>

<p>以前作りかけで一部は
<a href="http://regional.rubykaigi.org/kansai05">関西Ruby会議05</a>
の時に使った rabbit での自己紹介のスライドに
Emacs 関係の情報を追加して作った PDF だったので、
1ページにできずに複数ページになってしまいました。</p>

<p>会場への移動中に作成したのですが、
作成前に既にアップロードされているものを確認したら
複数ページのものがあるので、
まあいいかと思ったのも理由でした。</p>

<h2>会場到着から開始まで</h2>

<p>到着時点では知っている人がいなくて、
どうすればいいのかよくわからなかったので、
入り口近くで座って twitter とか見ながら待っていました。
13時を少しすぎたところで準備ができたらしく案内があったので、
席に移動しました。</p>

<h2>発表</h2>

<p><code>package-install</code> だと
環境を作り直した時に magit とかがバージョンアップで挙動が変わって
困ることがあるのでどうするのが良いのかという相談とか、
<code>ac-mozc</code> の紹介とか、ちゃんとメモをとっていなかったのですが、
いろいろありました。</p>

<p><code>ac-mozc</code> の質疑応答では</p>

<ul>
<li>英単語に続けて日本語を入力する時はスペースを入れて入力して、確定するとスペースが消える、スペースが必要な時はその直後に undo すればいい</li>
<li>英単語を入力していてローマ字ともみなせて不要なのに ac-mozc の候補が出てきたときは ac のキャンセルと同じように C-g で消せばいい</li>
<li>コメントの中とか文字列の中とかで一部だけ変換したい時とかは変換用のコマンドを直接呼び出せばいい</li>
</ul>


<p>のような話があったと記憶しています。</p>

<h2>やっていたこと</h2>

<h3>package.el</h3>

<p><a href="http://emacs-jp.github.io/packages/package-management/package-el.html">package.el &ndash; Emacs JP</a>
を参考にして <code>package.el</code> を使う設定をしました。</p>

<h3>shell-pop</h3>

<p>上のメモには書いていませんが、発表にあった <code>shell-pop</code> を
<code>package.el</code> を使って入れてみました。
昔ちょっと試したことがあって、その設定が悪さをしていて、
最初は
<code>(void-function shell-pop-set-internal-mode)</code>
というエラーになってしまっていましたが、
古い設定を削除すれば直りました。</p>

<p><a href="http://www.emacswiki.org/emacs/ShellPop">EmacsWiki の Shell Pop</a>
には上の方に小さく書いてあるだけですが、
github の方が新しくて互換性がなくなっているのが理由でした。</p>

<h3>ansi-term</h3>

<p><code>shell-pop</code> の設定例にある <code>ansi-term</code> を使ってみると
最下行で文字を入力すると一瞬上にスクロールして戻るという現象が出て、
<code>ansi-term</code> 単体でもおきたので、
<code>ansi-term</code> の問題かと思ってクリーンな環境でも試してみると発生しませんでした。</p>

<p>scroll 関係の設定があやしいと思って、
<code>scroll-margin</code> を <code>2</code> にしていたのを <code>0</code> にしたらなおったのですが、
クリーンな環境で <code>scroll-margin</code> だけ変更しても現象が出なかったので、
結局何が再現条件なのかはわかりませんでした。
<code>scroll-step</code> を <code>1</code> にしているのも関係しているかと思ったのですが、
関係ありませんでした。</p>

<h3>elscreen</h3>

<p><code>auto-install</code> でインストールしていた <code>elscreen.el</code> を
<code>package.el</code> でインストールしたものに変更しました。</p>

<p><code>(elscreen-start)</code> が必要になっているというのを知らなかったので、
うまく動かなくてかなり悩んでいましたが、教えてもらって解決しました。</p>

<h3>anything.el から helm への変更</h3>

<p><code>anything.el</code> は一時期はいろいろ設定を頑張っていたのですが、
結局デフォルトの <code>anything</code> 以外はほとんど使っていなかったので、
<code>helm-mini</code> に置き換えるだけで問題なさそうな感じでした。</p>

<p><code>anything.el</code> だとメニューに登録されていたり
<code>(anything-execute-anything-command)</code> とか
<code>(anything-call-source)</code> のようなメタ機能があったりして、
存在を知らない機能でも探しやすいのですが、
<code>helm</code> にはそういうものがあるのかどうかわかりませんでした。</p>

<p>ちなみに <code>M-x</code> で <code>helm-</code> で始まる <code>interactive</code> な関数を探すのは
<code>helm</code> 関係のバッファでのキーバインドようの関数が混ざっているので
この用途には使えません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X で ansible を入れてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-25-ansible.html"/>
    <updated>2013-10-25T13:45:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible</id>
    <content type="html"><![CDATA[<p>Mac OS X 10.8.5 でシステム側の python は使わずに pyenv を使って ansible を入れてみました。</p>

<p>2013-11 追記: 今は homebrew でインストールできるようになっていて <code>brew install ansible</code> だけでインストールできます。</p>

<!--more-->


<h2>参考サイト</h2>

<ul>
<li><a href="http://qiita.com/ryurock/items/c4065da9f16c1f6248b7">Ansible &ndash; OSXでpyenvインストールメモ</a></li>
<li><a href="http://qiita.com/yamasaki-masahide/items/0546b2b7770150394159">ansible pyenvを使った環境に依存しないインストール</a></li>
<li><a href="http://ansibleworks.com/docs/intro_installation.html">Installation | AnsibleWorks</a></li>
</ul>


<h2>必要なもの</h2>

<ul>
<li>homebrew</li>
</ul>


<h2>pyenv</h2>

<p>参考サイトと同じように homebrew で pyenv をインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew update
</span><span class='line'>brew install pyenv</span></code></pre></td></tr></table></div></figure>


<p><a href="http://mobileapplication.blog.fc2.com/blog-entry-21.html">(旧) 猫好きモバイルアプリケーション開発者記録 rbenv init が重い問題に対する対処法</a>
という話をみてから <code>init</code> の時には <code>rehash</code> しないようにしていたので、
<code>--no-rehash</code> というオプションを付けています。</p>

<figure class='code'><figcaption><span>https://github.com/znz/dot-shell/blob/master/profile.d/50pyenv.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if </span><span class="nb">type </span>pyenv &gt;/dev/null 2&gt;&amp;1; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">eval</span> <span class="s2">&quot;$(pyenv init - --no-rehash)&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>exec zsh</code> でシェルを再起動するなり、設定ファイルをドットコマンドや <code>source</code> コマンドで読み直すなり、
<code>eval "$(pyenv init -)"</code>
を直接実行するなりして設定を反映させます。</p>

<h2>pyenv でインストール</h2>

<p><a href="http://qiita.com/yamasaki-masahide/items/0546b2b7770150394159">ansible pyenvを使った環境に依存しないインストール</a>
で 2.7.5 を入れていたので、
<code>pyenv install [TAB]</code>
で補完候補をみて、
2.7 系の最新が 2.7.5 のままなのを確認してインストールしました。
この後で必要になる <code>pip</code> は <code>pyenv</code> が自動でインストールしてくれていました。</p>

<figure class='code'><figcaption><span>https://github.com/znz/dot-shell/blob/master/profile.d/50pyenv.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pyenv install 2.7.5
</span><span class='line'>pyenv rehash
</span><span class='line'>pyenv global 2.7.5
</span></code></pre></td></tr></table></div></figure>


<h2>pip でライブラリをインストール (不要?)</h2>

<p>必要なライブラリをインストールしましたが、
この手順は不要そうです。
PyYAML のインストールのところで libyaml が見つからないというエラーがでていましたが、
<code>pip install</code> 自体は成功していたので、問題はなかったようです。</p>

<figure class='code'><figcaption><span>https://github.com/znz/dot-shell/blob/master/profile.d/50pyenv.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pip install paramiko jinja2 PyYAML pycrypto markupsafe
</span></code></pre></td></tr></table></div></figure>


<h2>git clone して試す</h2>

<p>ライブラリをインストールしたので、
<a href="http://ansibleworks.com/docs/intro_installation.html#running-from-source">Running From Source</a>
の方法で試せましたが、
この方法で入れたものは後で消しました。</p>

<figure class='code'><figcaption><span>https://github.com/znz/dot-shell/blob/master/profile.d/50pyenv.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/ansible/ansible.git
</span><span class='line'><span class="nb">cd </span>ansible
</span><span class='line'><span class="nb">source</span> ./hacking/env-setup
</span></code></pre></td></tr></table></div></figure>


<h2>pip で ansible をインストール</h2>

<p>ansible の
<a href="http://ansibleworks.com/docs/intro_installation.html#latest-releases-via-pip">Latest Releases Via Pip</a>
で ansible 自体も pip でインストールできるとわかったので、
<code>sudo</code> なしの <code>pip install ansible</code> でインストールしました。
必要なライブラリは依存関係でここで一緒にインストールされるので、
先に個別にインストールする必要はなさそうでした。</p>

<p>そのままだと
<code>error: could not create '/usr/share/ansible': Permission denied</code>
で失敗したので、
homebrew で <code>/usr/local</code> が admin グループに書き込み可能に設定されるのを参考にして、
admin グループに書き込み可能で作成してからインストールすると大丈夫でした。</p>

<p><code>install</code> コマンドでのディレクトリの作成やパーミッションの設定は、
何度実行しても同じ結果になるという点では
<code>mkdir -p</code> や <code>chmod</code> や <code>chown</code> の組み合わせと同じですが、
1コマンドで済むのでオススメです。</p>

<figure class='code'><figcaption><span>https://github.com/znz/dot-shell/blob/master/profile.d/50pyenv.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo install -d -g admin -m 775 /usr/share/ansible
</span><span class='line'>pip install ansible
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 4 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-23-rubymotion-mokumoku-osaka.html"/>
    <updated>2013-10-23T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 3 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://connpass.com/event/3557/">第 4 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。</p>

<p>今回も前回と同じく東京と同時開催でした。
前回はハングアウトで接続していたのですが、
今回は接続せずに終わってしまいました。</p>

<!--more-->


<h2>話に出たもの</h2>

<p>話に出てきたアプリやサイトのメモです。</p>

<ul>
<li><a href="http://www.airsquirrels.com/reflectorc/">Reflector &ndash; AirPlay mirror your iPhone or iPad to any Mac or PC</a>

<ul>
<li>Mac OS X が Apple TV の代わりに iOS の画面を受け取れるようになる (有償 $12.99)。</li>
<li>最後の成果発表の時に、複数の画面を同時に受け取れるという発見がありました。</li>
<li>それを使えば複数の画面をまとめて同時に Apple TV に出せました。</li>
<li>同じ会社が作っている
<a href="http://www.airsquirrels.com/airparrot/">AirParrot &ndash; AirPlay your Mac or PC&rsquo;s screen to Apple TV</a>
を使えば Windows PC からでも Apple TV に画面を飛ばせるという話もありました。</li>
</ul>
</li>
<li><a href="https://popapp.in/">POP &ndash; Prototyping on Paper | iPhone App Prototyping Made Easy</a>
ペーパープロトタイピングで UI の設計 (無償)</li>
<li><a href="https://www.flinto.com/">Flinto – iPhone and iPad Prototyping</a>
こちらもペーパープロトタイピングでブラウザ上でも見えます (有償)。
画像のアップロードが面倒なので POP の方を使っているという話でした。</li>
<li><a href="http://asciiwwdc.com/">ASCIIwwdc</a>
WWDC をテキストにおこしたサイト</li>
<li><a href="http://estimote.com/">Estimote Beacons — real world context for your apps</a>
iBeacon 関連のハードウェア</li>
<li><a href="http://www.rainymood.com/">Rainy Mood</a>
落ち着く BGM</li>
<li><a href="http://connpass.com/event/3871/">第 5 回 RubyMotion もくもく会 in Osaka &ndash; connpass</a>
次回は 2013/11/20(水) 19:30 〜 21:30
(ハッシュタグが設定されていない?)</li>
<li><a href="http://connpass.com/event/3870/">第15回 RubyMotion もくもく会 in Tokyo &ndash; connpass</a>
東京の次回
(ハッシュタグが設定されているから参加しますツイートにハッシュタグがついている?)</li>
<li><a href="http://www.bohemiancoding.com/sketch/">Sketch | The designer’s toolbox</a>
iOS アプリでアイコンとか作るのに使っているという話</li>
<li><a href="http://peatix.com/">Peatix | 簡単イベント管理、チケット販売サイト（ピーティックス） | Peatix</a>
手数料が安いという話</li>
</ul>


<h2>やっていたこと</h2>

<p>前回の続きで
<a href="https://github.com/HipByte/RubyMotionSamples">https://github.com/HipByte/RubyMotionSamples</a>
のサンプルを試していたのですが、
<a href="https://github.com/HipByte/RubyMotionSamples/tree/master/osx/Tweets">https://github.com/HipByte/RubyMotionSamples/tree/master/osx/Tweets</a>
が Twitter API 1.1 への変更の影響で動かなくなっていました。</p>

<p>具体的には</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">json</span> <span class="o">=</span> <span class="no">JSONParser</span><span class="o">.</span><span class="n">parse_from_url</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">RuntimeError</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>      <span class="n">presentError</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>という部分で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Terminating</span> <span class="n">app</span> <span class="n">due</span> <span class="n">to</span> <span class="n">uncaught</span> <span class="n">exception</span> <span class="s1">&#39;TypeError&#39;</span><span class="p">,</span> <span class="ss">reason</span><span class="p">:</span> <span class="s1">&#39;data_parser.rb:6:in `parse:&#39;</span><span class="p">:</span> <span class="n">exception</span> <span class="n">class</span><span class="o">/</span><span class="n">object</span> <span class="n">expected</span> <span class="p">(</span><span class="no">TypeError</span><span class="p">)</span>
</span><span class='line'>  <span class="n">from</span> <span class="n">json_parser</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">3</span><span class="ss">:in</span> <span class="sb">`parse_from_url:&#39;</span>
</span><span class='line'><span class="sb"> from app_delegate.rb:71:in `</span><span class="n">block</span> <span class="k">in</span> <span class="ss">search</span><span class="p">:</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>というエラーになっていました。</p>

<p>ブラウザで
<code>http://search.twitter.com/search.json?q=xcode%20crash</code>
にアクセスしてみると
<code>{"errors": [{"message": "The Twitter REST API v1 is no longer active. Please migrate to API v1.1. https://dev.twitter.com/docs/api/1.1/overview.", "code": 68}]}</code>
というエラーが
<code>HTTP/1.1 410 Gone</code>
で返ってきていました。</p>

<p>API 1.1 に対応するには OAuth 対応が必須ということで、
簡単には対処できなさそうでしたが、
<a href="https://github.com/HipByte/RubyMotionSamples/issues/31">https://github.com/HipByte/RubyMotionSamples/issues/31</a>
に報告がすでにあったのでコメントをつけておきました。</p>

<p>それとは別に、エラー処理も <code>RuntimeError</code> しか <code>rescue</code> していないので、
<code>TypeError</code> は <code>rescue</code> できていなかったり、
<code>rescue</code> できても</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Terminating</span> <span class="n">app</span> <span class="n">due</span> <span class="n">to</span> <span class="n">uncaught</span> <span class="n">exception</span> <span class="s1">&#39;NoMethodError&#39;</span><span class="p">,</span> <span class="ss">reason</span><span class="p">:</span> <span class="s1">&#39;app_delegate.rb:73:in `block in search:&#39;</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`presentError&#39; for #&lt;AppDelegate:0x7fe1eb107910 ...&gt; (NoMethodError)</span>
</span></code></pre></td></tr></table></div></figure>


<p>でエラー処理がちゃんと動いていなかったりしました。</p>

<p>これは <code>NSApplication.sharedApplication.presentError error_ptr</code> にすれば良いのかも、
と思って試してみたけどうまくいかない、というところで時間が来て終了になりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブラウザのみで使えるバーコードリーダーを作った]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-20-web-barcode-reader.html"/>
    <updated>2013-10-20T19:27:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/web-barcode-reader</id>
    <content type="html"><![CDATA[<p>最近の HTML5 の getUserMedia API でカメラの画像をブラウザ上で処理できるようになったということで、
専用のバーコードリーダー機器を買ったり、
モバイル機器で専用のアプリを入れたりしなくても、
ノートPCの内蔵のカメラでも使えるバーコードリーダーを作ってみました。</p>

<!--more-->


<h2>使い方</h2>

<p><a href="http://web-barcode-reader.herokuapp.com/">Web Barcode Reader</a>
を開いて、
既にPC上に画像がある場合はその画像を選択してください。
選択するだけでバーコードの認識が始まります。
iOS や Android などではファイル選択かカメラで撮影かを選べます。</p>

<p><a href="https://github.com/EddieLa/BarcodeReader">BarcodeReader</a>
のライブラリを使って
JavaScript のみで認識していて、
バーコードの認識は初回はちょっと時間がかかるようなので、
ゆっくり待ってください。</p>

<p>Google Chrome などではファイル選択の横に
「ブラウザの中でカメラ画像を取得」
ボタンが出るので、
そのボタンを押した後、
カメラへのアクセスの許可を求められるので、
「許可」を押して許可してください。</p>

<p>そしてカメラに入るようにバーコードをうつして、
画像をクリックすると認識が始まります。
(クリックできる範囲が広い方が良いかと思って画像のクリックにしています。)</p>

<p>向きは逆さまなどでも良いようですが、
画質が悪いと認識できないことが多いようなので、
しっかりピントを合わせてカメラいっぱいにうつすと認識しやすいようです。</p>

<p>必要な数だけ繰り返した後、
不要になったら
「カメラを閉じる」
ボタンを押せば
ブラウザからカメラを使うのを止めます。</p>

<p>最後に下のテキストエリアに認識できたバーコードがたまっているので、
コピーして自由に使えます。</p>

<h2>仕組み</h2>

<p>画像ファイルから認識する方は
HTML5 の File API
を使ってローカルファイルを読み込んでいます。</p>

<p>iOS や Android で撮影が選べる機能は
<code>&lt;input type="file" accept="image/*;capture=camera"&gt;</code>
のように
<code>accept</code>
属性を付けるだけで使えます。</p>

<p>画像は
<code>img</code>
要素に読み込んで、
読み終わったら
<code>canvas</code>
要素にコピーして
<code>canvas</code>
要素から画像データを取得しています。</p>

<p>最終的にその画像データは、
Web Workers
という HTML5 の機能を使ってバックグラウンドで
<a href="https://github.com/EddieLa/BarcodeReader">BarcodeReader</a>
の
<code>DecoderWorker.js</code>
を動かして、
バーコードの認識をしています。</p>

<h3>カメラを扱う仕組み</h3>

<p>まず
<code>getUserMedia</code>
でカメラを開いて
video
要素に設定します。</p>

<p>よくある使用例では
<code>video</code>
要素には
<code>autoplay</code>
属性を付けることが多いようですが、
今回は <code>video</code> 要素の <code>play()</code> を呼ぶようにしました。</p>

<p><code>getUserMedia</code>
は一度変数に保存して、
その function を呼ぶという使い方は出来ないようだったので、
以下のように <code>call</code> で呼ぶようにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nv">getUserMedia =</span>
</span><span class='line'>    <span class="nx">navigator</span><span class="p">.</span><span class="nx">getUserMedia</span> <span class="o">||</span>
</span><span class='line'>    <span class="nx">navigator</span><span class="p">.</span><span class="nx">webkitGetUserMedia</span> <span class="o">||</span>
</span><span class='line'>    <span class="nx">navigator</span><span class="p">.</span><span class="nx">mozGetUserMedia</span> <span class="o">||</span>
</span><span class='line'>    <span class="nx">navigator</span><span class="p">.</span><span class="nx">msGetUserMedia</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">getUserMedia</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">navigator</span><span class="p">,</span> <span class="p">{</span><span class="nx">audio</span><span class="o">:</span><span class="kc">false</span><span class="p">,</span><span class="nx">video</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">toString</span><span class="o">:</span><span class="nf">-&gt;</span><span class="s">&quot;video&quot;</span><span class="p">},</span> <span class="nx">onStream</span><span class="p">,</span> <span class="nx">onError</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>onStream</code>
の引数にわたってきた
<code>stream</code>
は保存しておいて後で使いました。</p>

<p>カメラを閉じるには
<code>video</code> 要素で再生を止めるのではなく、
<code>stream</code> の方の <code>stop()</code> を呼ぶ必要がありました。</p>

<p>一度 <code>stream</code> を <code>stop()</code> してしまうと、
再度再生するには、
また許可を求める必要があったので、
毎回閉じるのではなく、
連続読み込み用に閉じるのは別ボタンの機能にしました。</p>

<h2>ソースコード</h2>

<p>ソースコードは実験的に Gumroad で売ってみることにしました。
先週の三連休で作って、さらに今日追加で細かい調整をして4日もかかっている感じなので、
缶コーヒーでもおごる感じで買ってもらえると良いかもしれません。</p>

<ul>
<li><a href="https://gum.co/egEG">WebBarcodeReaderのCoffeeScript部分のソース</a></li>
<li><a href="https://gum.co/OSLo">WebBarcodeReaderのRailsプロジェクト全体のソース</a></li>
</ul>


<script type="text/javascript" src="https://gumroad.com/js/gumroad.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カーネル/VM+K*BUG勉強会@関西 ごかいめ に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-20-kernelvm.html"/>
    <updated>2013-10-20T19:10:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kernelvm</id>
    <content type="html"><![CDATA[<p><a href="http://atnd.org/events/43501">カーネル/VM+K*BUG勉強会@関西 ごかいめ</a>
というイベントの会場が行きやすい場所の中だったので、
参加してみました。</p>

<!--more-->


<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20130526">第 72 回 関西 Debian 勉強会</a>
の時のナレッジサロンのあたりかと思っていたら、
全然別の場所で、
13時の1Fからの誘導に集まっていないと迷いそうな場所でした。</p>

<p>場所が分かりにくくて、
後から来た人も迷っていたようでした。
それから、
鍵がかかっていて、
ノックするなどして中の人に開けてもらわないと入れないというのが
多少不便そうな感じでした。</p>

<p>会場としては無線LANが用意されていたり、電源もあったりして、
勉強会の会場としては良い場所でした。</p>

<p>内容は ATND のページに発表者しか書いていなかったり、
始まってからも更新されたりして、
割とゆるい感じのイベントでした。</p>

<p>受付とか自己紹介などもなかったので、
誰だかわからない人はわからないままで、
申し込みしていない人がまぎれていても
わからないんじゃないかなあという感じでした。</p>

<p>発表中はスクリーンが低くて、
後ろの方の席に座っていたので、
下の方は見えないのが気になりました。
ustream の中継があったので、
帯域の無駄遣いかと思いつつ、
たまに ustream の方でチェックしようとしたら
広告が最初に出てくるので
みたいタイミングに間に合わないということもありました。</p>

<p>内容は
<a href="http://togetter.com/li/578958">カーネル/VM+K*BUG勉強会@関西 ごかいめ #kernelvm &ndash; Togetter</a>
にまとめられている部分もありますが、
基本的に他のことをしながら聞いていたので、
特にメモなどは取っていなかったのですが、
いろいろと楽しめました。</p>

<p>イベントを知ったのが直前だったので、
懇親会の申し込みは間に合っていなかったので、
終わった後はそのまま出ました。</p>
]]></content>
  </entry>
  
</feed>
