<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-02-26T23:13:15+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OSS Gate大阪ワークショップ2017-02-25に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-02-25-oss-gate-workshop.html"/>
    <updated>2017-02-25T23:59:59+09:00</updated>
    <id>http://blog.n-z.jp/blog/oss-gate-workshop</id>
    <content type="html"><![CDATA[<p><a href="https://oss-gate.doorkeeper.jp/events/56141" title="OSS Gate大阪ワークショップ2017-02-25">OSS Gate大阪ワークショップ2017-02-25</a>にメンターとして参加しました。</p>

<!--more-->


<h2>事前準備</h2>

<p>ざっと見て大丈夫そうだったので、細かくチェックしていなかったのですが、
<a href="https://oss-gate.doorkeeper.jp/events/56141" title="イベントページ">イベントページ</a>
に書いてある説明や、
そこからリンクされている
<a href="https://github.com/oss-gate/workshop/blob/master/tutorial/scenario.md#%E3%82%B7%E3%83%8A%E3%83%AA%E3%82%AA" title="シナリオ">シナリオ</a>
などは事前に見ておくと流れがわかって良さそうだと
後から思いました。</p>

<h2>移動</h2>

<p>最寄駅をちゃんとチェックしていなくて、
本町駅に行ってしまって、
ちょっと歩きました。
時間に余裕を持って出発していたので、
開始には間に合いました。</p>

<h2>準備</h2>

<p>ビギナーの横に少なくとも一人はメンターがいるようになるように席がある程度決まっていて、
無線LANの設定をしたりしながら開始を待っていました。</p>

<p>最初、無線LANに繋がるのにIPアドレスが割り振られないという状況になっていて、
ちゃんと繋がるまで少し時間がかかりましたが、問題なく始まりました。</p>

<h2>アイスブレイク</h2>

<p>ある程度、説明があった後、アイスブレイクとして4,5人のグループで軽く話をしました。
このグループ分けはこの時だけのものだったらしく、
後は個別にわかれていました。</p>

<h2>対象OSSの決定</h2>

<p>対象とする OSS をビギナーの人が決めるというのが最初にありました。</p>

<p>デモとして、隣にいたビギナーの人が呼ばれて、
前で決めていました。</p>

<p>席に戻ってきて、一緒に確認してみると、
前に出てひっかかることがあるといっていた OSS は環境依存の問題っぽい感じで、
結局他の OSS を選び直していました。</p>

<h2>対象OSSを動かす</h2>

<p>これは最初のデモで決まった OSS を例に進行役の人が
実際に細かくメモを取りつつ動かしてみるというデモをした後、
各自動かしてみるということをしていました。</p>

<p>その手順の中にライセンスが OSS かどうかを確認するというのが入っていました。
ライセンスの話はちゃんとするとそれだけで時間がかかってしまうので、
難しいところだと思いました。</p>

<p>担当していたビギナーの人は、
その時々の心情も含めて記録していて、
ちゃんとできていてすごいなと思って見ていました。</p>

<p>答えを先に言ってしまうのはよくないということだったはずなので、
知っていることでもほとんど口を挟まずに見ていました。
この辺りの加減は何度か参加して見ないとわからなそうな気がしました。</p>

<h2>休憩</h2>

<p>おやつ休憩が入りました。</p>

<h2>ミニふりかえり</h2>

<p>進行役の人が順番を間違えていたらしく、
休憩の後にミニふりかえりが入りました。</p>

<p>3列あったテーブルごとにほぼ同じペア数だったので、
ぐるっと回転するようにメンターが入れ替わって説明を聞く、
ということをしました。</p>

<p>担当しているビギナー以外の他のビギナーの人が何をやっているかというのは、
基本的にはふりかえりのタイミングしか聞く機会がないようなので、
興味深く聞きました。
ここがフィードバックできるポイントかも、という点も見つけられました。</p>

<h2>プロジェクトにフィードバックする</h2>

<p>時間配分のミスがあったらしく、2時間の予定が1時間になってしまっていたそうです。</p>

<p>担当していたビギナーの人は、この時間で、自分の言葉で書く、報告用にまとめ直す、
他の issues を見て英語にしなくても日本語のままの報告で良さそうという確認、
というところまでできていました。</p>

<h2>ふりかえり</h2>

<p>ミニふりかえりの時とは逆回りに入れ替わって、
またビギナーの人が何をやったのか話を聞きました。</p>

<p>ドキュメントの修正の pull request をすると良いのでは、
(明確な修正だと複雑な英語でのやりとりも発生しないので楽)
という話をしました。</p>

<h2>まとめ、アンケート記入</h2>

<p>まとめの話とアンケート記入がありました。</p>

<p>アンケート記入は <a href="https://github.com/oss-gate/workshop">https://github.com/oss-gate/workshop</a> を fork して
tutorial/retrospectives/2017-02-25-osaka の beginner.yaml や mentor.yaml をコピーして pull request を送る、
という方法でした。</p>

<p>YAML の文法エラーはマージする進行役の人が直すから細かいことは気にしないで良いということでした。</p>

<h2>ワークショップのふりかえり</h2>

<p>アンケート結果を見ながらふりかえりをしました。</p>

<p>関西も次回からは、進行役の人も関西の人でやる必要があるということで、
メンター用のアンケートの「進行役をできそうか」で
「何人かでフォローしあえばやれそう」が多かったので、
何人かで分担しながらやることになりそうな気がしました。</p>

<p>アンケート結果の表示には <code>aggregate.rb</code> というのを使っていたように見えたので、
たぶん <code>tutorial/retrospectives/aggregate.rb</code> を実行していたのだろうと思いました。</p>

<h2>最後に</h2>

<p>テーブルの移動などをして、宣伝用の集合写真を撮って終わりました。</p>

<h2>終わった後</h2>

<p>終わった後は、用事があったので、懇親会には参加せずにそのまま帰りました。</p>

<p>用事は梅田で時間が少し空いていて微妙だったので、
梅田まで歩いて帰ったところ、
ちょうど良いぐらいの時間になりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語のsync.WaitGroupで出力待ち]]></title>
    <link href="http://blog.n-z.jp/blog/2017-02-22-golang-waitgroup.html"/>
    <updated>2017-02-22T22:22:22+09:00</updated>
    <id>http://blog.n-z.jp/blog/golang-waitgroup</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2017-02-19-golang-windows-gui.html">先日作ったアプリ</a>で、
<code>cmd.Wait()</code>
の前に出力待ちができていなくて困っていたのですが、
<a href="http://amzn.to/2l3wZ5L">みんなのGo言語【現場で使える実践テクニック】</a>という本に <code>sync.WaitGroup</code> というのを知ったので使ってみました。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li><code>go version go1.8 darwin/amd64</code></li>
</ul>


<h2><code>sync.WaitGroup</code> の追加</h2>

<p>呼び出し側は以下のように追加しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var wg sync.WaitGroup
</span><span class='line'>wg.Add(2)
</span><span class='line'>go processLinesShiftJIS(stdoutHandler, stdout, &wg)
</span><span class='line'>go processLinesShiftJIS(stderrHandler, stderr, &wg)
</span><span class='line'>wg.Wait()</span></code></pre></td></tr></table></div></figure>


<p>呼び出される側では、以下のように最後に <code>wg.Done()</code> を呼ぶようにしました。
記事を書いていて気づいたのですが、途中で抜ける可能性を考えて、 <code>defer</code> を使った方が良さそうです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func processLinesShiftJIS(lineProcessor func(string), r io.Reader, wg *sync.WaitGroup) {
</span><span class='line'>  // ...処理...
</span><span class='line'>  wg.Done()
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>動かなかったコード</h2>

<p>最初は <code>func processLinesShiftJIS(lineProcessor func(string), r io.Reader, wg sync.WaitGroup)</code> で受け取って <code>go processLinesShiftJIS(stdoutHandler, stdout, wg)</code> で呼び出していました。</p>

<p>これだと、<code>WaitGroup</code> のコピーで <code>Done()</code> が呼ばれてしまって、元の <code>WaitGroup</code> のカウントが減らずにうまく動きませんでした。</p>

<p>本に書いてあった例やネットで見つけた例は同じスコープで使っているものばかりだったので
わからなかったのですが、
ちゃんとポインタを渡す必要があるようです。</p>

<h2>関連コード全体</h2>

<p>全体としては関係する部分の <a href="https://github.com/znz/winipset/blob/cb4a80ebdaf3c1492bb81f0654424205cf8aa87e/winipset.go">winipset.go</a> を以下のように変更しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func processLinesShiftJIS(lineProcessor func(string), r io.Reader, wg *sync.WaitGroup) {
</span><span class='line'>  decoder := japanese.ShiftJIS.NewDecoder()
</span><span class='line'>  scanner := bufio.NewScanner(decoder.Reader(r))
</span><span class='line'>  for scanner.Scan() {
</span><span class='line'>      line := scanner.Text()
</span><span class='line'>      lineProcessor(line)
</span><span class='line'>  }
</span><span class='line'>  wg.Done()
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func runCommand(stdoutHandler, stderrHandler func(string), name string, arg ...string) (err error) {
</span><span class='line'>  cmd := exec.Command(name, arg...)
</span><span class='line'>  cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
</span><span class='line'>  stdout, err := cmd.StdoutPipe()
</span><span class='line'>  if err != nil {
</span><span class='line'>      log.Println("StdoutPipe:", err)
</span><span class='line'>      return
</span><span class='line'>  }
</span><span class='line'>  stderr, err := cmd.StderrPipe()
</span><span class='line'>  if err != nil {
</span><span class='line'>      log.Println("StderrPipe:", err)
</span><span class='line'>      return
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  err = cmd.Start()
</span><span class='line'>  if err != nil {
</span><span class='line'>      log.Println("Start:", err)
</span><span class='line'>      return
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  var wg sync.WaitGroup
</span><span class='line'>  wg.Add(2)
</span><span class='line'>  go processLinesShiftJIS(stdoutHandler, stdout, &wg)
</span><span class='line'>  go processLinesShiftJIS(stderrHandler, stderr, &wg)
</span><span class='line'>  wg.Wait()
</span><span class='line'>
</span><span class='line'>  err = cmd.Wait()
</span><span class='line'>  if err != nil {
</span><span class='line'>      log.Println("Wait:", err)
</span><span class='line'>      return
</span><span class='line'>  }
</span><span class='line'>  return nil
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>同期方法の確認</h2>

<p>この同期方法で問題が起きなかった <code>cmd.Wait()</code> を呼ばないと <code>wg.Done()</code> が呼ばれないということはなかった、という点と、
出力をちゃんと読んだ後で <code>cmd.Wait()</code> を呼べるようになったという点で、この方法で大丈夫だということがわかりました。</p>

<h2>まとめ</h2>

<p><code>sync.WaitGroup</code> を他の関数へ受け渡す時に失敗してしまうと同期に失敗してしまうことがありましたが、
簡単に同期が取れて、使いやすい仕組みだと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語でWindowsのnetshラッパーのGUIアプリを作った]]></title>
    <link href="http://blog.n-z.jp/blog/2017-02-19-golang-windows-gui.html"/>
    <updated>2017-02-19T19:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/golang-windows-gui</id>
    <content type="html"><![CDATA[<p>インテリジェントスイッチングハブなどのネットワーク機器の設定をする時に、
Windows だといちいちコントロールパネルを辿ってアダプター一覧を表示して、
そこから UAC の権限昇格 (環境によってはパスワード入力が必要) を挟んでプロパティを開いて、
IPv4 の設定を開いて変更して閉じて行って反映、という作業が大変だったので、
<code>netsh</code> を呼び出して<a href="https://github.com/znz/winipset">省力化する GUI アプリ</a>を作りました。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>開発環境: go version go1.7.5 darwin/amd64 (Homebrew で入れた go)</li>
<li>動作対象環境: Windows 7 などの Windows 環境</li>
</ul>


<h2>GUI ツールキットの選定</h2>

<p>開発環境を Windows に入れたくなかった (配布先のユーザーの環境に近い環境にしておきたかった) のと、確実に1バイナリで配布がすみそうということで、
最終的には <a href="http://qiita.com/alucky0707/items/b066ccd2ff8517cf79fb">WindowsでGo言語でGUIするにはWALKがいいかもしれない</a> の記事をみて <a href="https://github.com/lxn/walk">A Windows GUI toolkit for the Go Programming Language (WALK)</a> に決めました。</p>

<h2>go get walk</h2>

<p>現状は <a href="https://github.com/lxn/walk/issues/237">https://github.com/lxn/walk/issues/237</a> に報告されているように</p>

<pre><code>%  GOPATH=/tmp/g GOOS=windows go get github.com/lxn/walk
# github.com/lxn/walk
/tmp/g/src/github.com/lxn/walk/splitterlayout.go:314: undefined: sort.SliceStable
</code></pre>

<p>というエラーになるので、</p>

<pre><code>% cd $GOPATH/src/github.com/lxn/walk
% git log -p master
</code></pre>

<p>で <code>sort.SliceStable</code> が入った直前のコミットを探して、</p>

<pre><code>% git checkout 5c627b7fa8fb66c201b0273609c61c8117e45bb0
% cd -
%  GOPATH=/tmp/g GOOS=windows go get github.com/lxn/walk
</code></pre>

<p>のようにちょっと古い WALK を使っています。</p>

<h2>サンプルなどで動作確認</h2>

<p>Qiita の記事の例を動かして見たり、<code>github.com/lxn/walk</code> の <code>examples</code> を参考にしてどんな感じなのか確かめました。</p>

<p>README などに書いてあるように <code>-ldflags="-H windowsgui"</code> をつけて、</p>

<pre><code>GOOS=windows go build -ldflags="-H windowsgui"
</code></pre>

<p>でコマンドプロンプトの出ない GUI アプリが作成できました。</p>

<h2>manifest 作成</h2>

<p>walk の README には</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
</span><span class='line'>    &lt;assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"&gt;
</span><span class='line'>        &lt;assemblyIdentity version="1.0.0.0" processorArchitecture="*" name="SomeFunkyNameHere" type="win32"/&gt;
</span><span class='line'>        &lt;dependency&gt;
</span><span class='line'>            &lt;dependentAssembly&gt;
</span><span class='line'>                &lt;assemblyIdentity type="win32" name="Microsoft.Windows.Common-Controls" version="6.0.0.0" processorArchitecture="*" publicKeyToken="6595b64144ccf1df" language="*"/&gt;
</span><span class='line'>            &lt;/dependentAssembly&gt;
</span><span class='line'>        &lt;/dependency&gt;
</span><span class='line'>    &lt;/assembly&gt;</span></code></pre></td></tr></table></div></figure>


<p>と書いてありますが、</p>

<p><code>examples</code> 以下から dpiAware の設定も入っている manifest をコピーしてくるのが良さそうです。
コピーしてくると BOM もついているようです。</p>

<p><code>name="SomeFunkyNameHere"</code> は書き換えた方が良いのかと思ったのですが、
<code>examples</code> 以下では全て同じだったので、別に書き換えなくても良いようです。</p>

<h2>manifest 変更</h2>

<p>これは後でやったことなのですが、
<code>netsh</code> で IP アドレスなどの設定を変更するには、
ローカルの Network Configuration Operators のグループの権限が必要なので、
<a href="http://www.atmarkit.co.jp/fdotnet/dotnettips/958uacmanifest/uacmanifest.html">常に管理者としてアプリケーションを実行させるには？</a>
を参考にして、
自動で UAC の要求をするように以下の設定を追加しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;trustInfo xmlns="urn:schemas-microsoft-com:asm.v2"&gt;
</span><span class='line'>  &lt;security&gt;
</span><span class='line'>      &lt;requestedPrivileges xmlns="urn:schemas-microsoft-com:asm.v3"&gt;
</span><span class='line'>          &lt;requestedExecutionLevel level="highestAvailable" uiAccess="false" /&gt;
</span><span class='line'>      &lt;/requestedPrivileges&gt;
</span><span class='line'>  &lt;/security&gt;
</span><span class='line'>&lt;/trustInfo&gt;</span></code></pre></td></tr></table></div></figure>


<p>これでドメイン環境で Administrators 権限が得られなくても、
自分のアカウントがローカルの Network Configuration Operators グループに所属していれば、
UAC で自分のアカウントのパスワードを入力すれば IP アドレスの変更ができるようになります。
(変更ができるのはコントロールパネルの方からでも <code>netsh</code> (を使うこのアプリ) でも。)</p>

<h2>manifest のコンパイル</h2>

<p><code>rsrc</code> を実行するのはビルド側なので GOOS の指定は不要です。</p>

<pre><code>% go get github.com/akavel/rsrc
% $GOPATH/bin/rsrc -manifest test.manifest -o rsrc.syso
Manifest ID:  1
</code></pre>

<p><code>rsrc.syso</code> がある状態で</p>

<pre><code>GOOS=windows go build -ldflags="-H windowsgui"
</code></pre>

<p>すると作成される <code>exe</code> ファイルのサイズがちょっと増えていました。</p>

<p><code>rsrc.syso</code> ファイルを取り込ませる必要があるので、
<code>go build test.go</code> などのようにファイル指定での <code>go build</code> は避ける必要があるようです。</p>

<p><a href="http://d.hatena.ne.jp/hake/20150816/p1">Go言語でGUIプログラム on Windows - はけの徒然日記</a> によると
<code>-ldflags="-s -H windowsgui"</code> で strip をかけてサイズを縮小するという方法もあるようです。</p>

<h2>netsh の実行</h2>

<p><a href="http://www.atmarkit.co.jp/ait/articles/1002/05/news097.html">WindowsのnetshコマンドでTCP/IPのパラメータを設定する</a>
などを参考にすると以下のコマンドを使えば良いことがわかります。</p>

<ul>
<li><code>netsh interface ip show interfaces</code></li>
<li><code>netsh interface ip set address "ローカル エリア接続" dhcp</code></li>
<li><code>netsh interface ip set address "ローカル エリア接続" static 192.168.20.2 255.255.255.0</code></li>
</ul>


<p><code>show interfaces</code> で一覧を取得して、
<code>dhcp</code> で DHCP に戻す、
<code>static</code> で固定 IP アドレス設定です。</p>

<p>ルーターやインテリジェントスイッチングハブに直結して設定する用途を想定しているので、
ネットマスクは <code>255.255.255.0</code> 固定で、ゲートウェイなどは設定しません。</p>

<p>まず、Go 言語から呼び出す前に、管理者権限のコマンドプロンプトで実行して期待する動作をするのを確認しました。</p>

<p>ただし、DHCP に戻すのは、なぜかイーサネットケーブルを接続した状態じゃないとエラーになって戻せませんでした。
コントロールパネルだと戻せるので謎挙動です。</p>

<h2>ログ表示</h2>

<p><code>examples/logview</code> が便利そうだったので、そのまま使うことにしました。</p>

<p><code>NewLogView</code> に <code>MainWindow</code> のインスタンスを渡すと、
自動で一番下に追加されたので、これでいいとおもってそのまま使いました。</p>

<p><code>log.Fatal</code> はプログラムが終了してしまって意味がないので、
<code>log.Println</code> や <code>log.Printf</code> だけ使いました。</p>

<h2>外部コマンド実行</h2>

<p><a href="http://qiita.com/hnakamur/items/9701f40c1fec83b1cd1f">Goで外部コマンドを実行して出力をリアルタイム表示するサンプル</a>などを参考にして、
<code>StdoutPipe</code> と <code>StderrPipe</code> を使いました。</p>

<p><a href="https://golang.org/pkg/os/exec/#Cmd.StdoutPipe">https://golang.org/pkg/os/exec/#Cmd.StdoutPipe</a> や <a href="https://golang.org/pkg/os/exec/#Cmd.StderrPipe">https://golang.org/pkg/os/exec/#Cmd.StderrPipe</a> には <code>Wait</code> を呼ぶ前に
全部 <code>read</code> しろと書いてあるように思うのですが、
この Qiita の記事のやり方でそれが保証されているかどうかわからなかったのと、
読み込みの goroutine がちゃんと終了するのかどうかがわからなかったのですが、
間違っていても、多少メッセージが抜けたり、リソースがリークするだけで
機能自体に大きな問題はないと判断して、この方法で行くことにしました。</p>

<p>(2017-02-22 追記: <a href="http://blog.n-z.jp/blog/2017-02-22-golang-waitgroup.html">Go言語のsync.WaitGroupで出力待ち</a>で解決しました。)</p>

<h2>コマンドの出力の文字コード変換</h2>

<p>コマンドラインの方は UTF-8 のままで大丈夫なのに、
<code>netsh</code> の出力は CP932 のようだったので、
<a href="http://kazzna.hatenablog.com/entry/2016/02/05/102827">GolangでShift_JIS(Windows31J)のファイルを読み込み - 来世から頑張る！！</a>などを参考にして、
<code>golang.org/x/text/encoding/japanese</code> を使って</p>

<pre><code>decoder := japanese.ShiftJIS.NewDecoder()
scanner := bufio.NewScanner(decoder.Reader(r))
</code></pre>

<p>のように読み込み側だけ変換を挟むことで解決しました。</p>

<p>後で呼び出すコマンドラインに指定するインターフェイス名の方は、この変換後の UTF-8 の文字列のままで良いので、
非対称なのが気になります。</p>

<h2>行毎の処理</h2>

<p><a href="http://qiita.com/ikawaha/items/28186d965780fab5533d">Go でファイルを1行ずつ読み込む（csv ファイルも）</a>などを参考にして、
<code>bufio</code> の <code>Scanner</code> というのを使ってみました。</p>

<h2>外部コマンド実行時のコマンドプロンプト非表示</h2>

<p>そのまま実行してしまうと、
<code>netsh</code> 起動時にコマンドプロンプトが出てしまうので、
<a href="http://ch.nicovideo.jp/lunaorbit/blomaga/ar1064613">【プログラミング】非表示にして起動する方法を模索:るなおーびっと！ - ブロマガ</a>などを参考にして、</p>

<pre><code>si.dwFlags = STARTF_USESHOWWINDOW;
si.wShowWindow = SW_HIDE;
</code></pre>

<p>を指定すれば良いとわかり、
<a href="https://golang.org/src/syscall/exec_windows.go">https://golang.org/src/syscall/exec_windows.go</a>
を見ると
StartProcess の attr の Sys の HideWindow を true にすれば良さそうとわかりました。</p>

<p>最初、<code>cmd.SysProcAttr.HideWindow = true</code> としてみたら落ちてしまってうまくいかなかったので、
もう少し調べてみたところ、</p>

<pre><code>cmd.SysProcAttr = &amp;syscall.SysProcAttr{HideWindow :true}
</code></pre>

<p>でうまくいきました。</p>

<h2>1行入力</h2>

<p>WALK は <code>TextEdit</code> が複数行入力だったので、1行入力はどうするのかと思って調べて見たところ、
<code>git grep '"EDIT"'</code> で探して見ると <code>"EDIT"</code> というウィンドウクラス名を使っているのは
<code>TextEdit</code> の他に <code>LineEdit</code> があるとわかったので、
<code>LineEdit</code> を試して見たところ、
1行入力でした。</p>

<h2>コンボボックス</h2>

<p>IP アドレスの入力は全て入力しないといけない <code>LineEdit</code> よりも、
ある程度のプリセットが入っているコンボボックスの方が良いと思って
さらに調べて見ると、
<code>ComboBox</code> というのがあったので使って見ましたが、
HTML の <code>select</code> 要素と同じように選択できるだけで
入力できるコンボボックスになっていませんでした。</p>

<p><code>git grep "COMBOBOX"</code> で探しても他にはなかったので、
さらに調べて見ると
<code>declarative/combobox.go</code> で <code>Editable</code> によって <code>NewComboBox</code> と <code>NewDropDownBox</code> を呼び分けていて、
デフォルトは <code>false</code> で <code>NewDropDownBox</code> になっていました。</p>

<p>そこで、<code>Editable: true</code> を追加すると、
望み通りの <code>ComboBox</code> になりました。</p>

<h2>出力処理のクロージャ</h2>

<p>ruby などに慣れていると、用途によって違う一番内側の処理はクロージャで渡したくなるので、
以下のように <code>func</code> を渡すようにしました。</p>

<p>最終的にコマンド実行周りは以下のようになりました。</p>

<p>標準エラー出力も処理していますが、
使っている範囲の <code>netsh</code> の呼び出しでは標準エラー出力には何も出てこないようです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func processLinesShiftJIS(lineProcessor func(string), r io.Reader) {
</span><span class='line'>        decoder := japanese.ShiftJIS.NewDecoder()
</span><span class='line'>        scanner := bufio.NewScanner(decoder.Reader(r))
</span><span class='line'>        for scanner.Scan() {
</span><span class='line'>                line := scanner.Text()
</span><span class='line'>                lineProcessor(line)
</span><span class='line'>        }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func outputStdout(line string) {
</span><span class='line'>        if line != "" {
</span><span class='line'>                log.Println("o:", line)
</span><span class='line'>        }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func outputStderr(line string) {
</span><span class='line'>        if line != "" {
</span><span class='line'>                log.Println("e:", line)
</span><span class='line'>        }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func runCommand(stdoutHandler, stderrHandler func(string), name string, arg ...string) (err error) {
</span><span class='line'>        cmd := exec.Command(name, arg...)
</span><span class='line'>        cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
</span><span class='line'>        stdout, err := cmd.StdoutPipe()
</span><span class='line'>        if err != nil {
</span><span class='line'>                log.Println("StdoutPipe:", err)
</span><span class='line'>                return
</span><span class='line'>        }
</span><span class='line'>        stderr, err := cmd.StderrPipe()
</span><span class='line'>        if err != nil {
</span><span class='line'>                log.Println("StderrPipe:", err)
</span><span class='line'>                return
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        err = cmd.Start()
</span><span class='line'>        if err != nil {
</span><span class='line'>                log.Println("Start:", err)
</span><span class='line'>                return
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        go processLinesShiftJIS(stdoutHandler, stdout)
</span><span class='line'>        go processLinesShiftJIS(stderrHandler, stderr)
</span><span class='line'>
</span><span class='line'>        err = cmd.Wait()
</span><span class='line'>        if err != nil {
</span><span class='line'>                log.Println("Wait:", err)
</span><span class='line'>                return
</span><span class='line'>        }
</span><span class='line'>        return nil
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>配布</h2>

<p>実際に配布して見ると 64 ビット環境ではなかったらしく、
エラーになってしまったので、
<code>GOOS=windows GOARCH=386 go build -ldflags="-H windowsgui"</code>
で作り直した実行ファイルを渡し直して解決しました。</p>

<p>念のため、
<code>go get</code> も <code>GOARCH=386</code> ありでやり直してからビルドした実行ファイルを渡したのですが、
<code>go get</code> をし直さなくても
<code>GOOS=windows GOARCH=386 go build -ldflags="-H windowsgui" -o winipset32.exe</code>
だけでもエラーなくビルドできるようでした。</p>

<h2>github へのリリース</h2>

<p><code>git tag v0.1.0</code> して <code>git push --tags</code> した後、
ブラウザーで github の Releases にもあげようとしたところ、
エラーになったので何度かやり直したのですが、
Firefox だとうまくアップロードできなくて
Chrome だとうまくアップロードできました。</p>

<p>Referer などのチェックが入っていて制限しているとダメなのかもしれませんが、
未調査です。</p>

<p>Chrome に切り替える時に <code>*.exe</code> はダメそうだったので、
<code>*.zip</code> に切り替えたのですが、その辺りも関係しているのかもしれません。</p>

<p>zip ファイルの作成は 7z コマンドの方が圧縮率が良いので、</p>

<pre><code>7z a winipset_windows_amd64.zip winipset.exe
7z a winipset_windows_386.zip winipset32.exe
</code></pre>

<p>で作成しました。</p>

<h2>感想</h2>

<p>Go 言語で Windows の GUI アプリを作って見た感想としては、
クロスコンパイルや配布がしやすかったのは予想通りで、
非常によかったです。</p>

<p>WALK という GUI ツールキットも部品のサイズをいちいち指定しなくても、
良い感じにしてくれるので楽でよかったです。</p>

<p>部品探しやコマンド実行周りはどうしても Windows 固有の知識がないと厳しそうだと思いましたが、
ツールキット固有の知識が必要になるか、
OS の薄いラッパーなので OS の知識が必要になるかの差なので、
まあ仕方がないかなと思いました。</p>

<p><code>log.Fatal</code> を使ってしまった場合など、エラーの時に黙って終了してしまうので、
用途によっては使いにくいかもしれないと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[関西 Debian 勉強会 + openSUSE Meetup + LILO & 東海道らぐLT大会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-01-29-kansai4cjointsession.html"/>
    <updated>2017-01-29T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai4cjointsession</id>
    <content type="html"><![CDATA[<p><a href="https://opensuseja.connpass.com/event/47907/" title="関西 Debian 勉強会 + openSUSE Meetup + LILO &amp; 東海道らぐLT大会">関西 Debian 勉強会 + openSUSE Meetup + LILO &amp; 東海道らぐLT大会</a>
に参加しました。</p>

<!--more-->


<h2>自己紹介など</h2>

<ul>
<li>人数が多いので、一言ずつの自己紹介と出欠チェックのための connpass のアカウントの申告でした。</li>
<li>会場費は人数が多かったのと学生が少なかったので、学生無料で社会人 100 円になりました。</li>
<li>Debian の発表者の到着が遅れていたので、順番が入れ替えになりました。</li>
<li>ハッシュタグは connpass のページに書いてあるように <code>#Kansai4cJointSession</code></li>
</ul>


<h2>Leap 42.2, 42.3とAsia Summitについて語る</h2>

<ul>
<li>Tumbleweed : 常に最新 (ローリングリリース)</li>
<li>Leap : 安定</li>
<li>Leap 42 系は 42.1 が最初</li>
<li>デスクトップ環境のデフォルトは存在しないが KDE Plasma を使っている人が多いらしい</li>
<li>YaST は GUI, TUI でいろいろ設定できる</li>
<li>パーティショニングから fstab の設定までまとめてできる</li>
<li>Samba の共有の設定も簡単にできる</li>
<li>YaST2 と YaST の違い : 特にない? 会場にいる人は YaST1 の頃を誰も知らなかった。 Ruby に書き換わった時も YaST3 にはならなかった。</li>
<li>openSUSE.Asia Summit</li>
<li><a href="http://blog.geeko.jp/ftake/1405">http://blog.geeko.jp/ftake/1405</a></li>
<li>KDE の翻訳が危うい</li>
</ul>


<h2>openSUSE Build Serviceへの愛を語る</h2>

<ul>
<li>etckeeper や tamago などのパッケージのメンテナ</li>
<li>デフォルトのファイルシステムが btrfs</li>
<li>VirtualBox のゲスト OS としてインストールしたら Guest Additions が最初から入っている</li>
<li>DE (デスクトップ環境) が選べるからというのがカメレオン (Geeko) の由来らしい</li>
<li>1枚のインストーラDVDで複数DE、複数ロケール対応</li>
<li>dpkg 系は git build package が楽なのでは? → 会場から CI などに使える一式の環境が一発で用意できるのが良いという話</li>
<li>アカウントは Novell のシングルサインオン</li>
<li>OBS にログインして実演</li>
<li>github の fork 的なこともできる</li>
<li>ビルドされたパッケージを公開するかどうかを選べる</li>
<li>ビルドされたパッケージのユーザーとしては Ubuntu PPA のように使える</li>
<li>github の pull request のようなこともできる (Submit Request)</li>
<li>spec ファイルに clean 処理が不要</li>
<li>OBS の弱点はネットに繋がっていないとほとんど何もできない</li>
<li><a href="http://miniconf.debian.or.jp/">Mini Debian Conference Japan 2016</a> の Open Build Service in Debian の資料も参照</li>
<li>upstream が git だった場合の話</li>
</ul>


<h2>Debian Updates</h2>

<ul>
<li>到着が遅れた話</li>
<li>LaTeX Beamer のテーマを更新した話</li>
<li>Debian とは?</li>
<li>Debian Updates</li>
<li>autoreconf の話</li>
<li>autoconf-archive パッケージがあるので古い autoconf に依存しているものも動く</li>
<li>Next Debian Release</li>
<li>ビルドインフラが足りないからサポートアーキテクチャから落ちる話</li>
<li>新テーマ Soft waves</li>
<li>Tシャツが作りにくい</li>
<li><a href="https://wiki.debian.org/DebianDesktop/Artwork/Stretch">https://wiki.debian.org/DebianDesktop/Artwork/Stretch</a></li>
<li>PHP5 が消える話</li>
<li>Wayland の話</li>
<li>emacs 25 があるが emacs で入るのは 24</li>
<li>vim が 8</li>
<li>Linux kernel は 4.9 が LTS <a href="https://lkml.org/lkml/2017/1/19/339">https://lkml.org/lkml/2017/1/19/339</a></li>
<li>KDE Connect</li>
</ul>


<h2>集合写真</h2>

<p>休憩時間に集合写真を撮りました。</p>

<h2>LT 大会</h2>

<ul>
<li>Debian を Windows タブレットに入れる話</li>
<li><a href="https://github.com/znz/rabbit-slide-ssh-ed25519">sshでed25519鍵</a> の話をしました。(<a href="http://blog.n-z.jp/blog/2016-12-04-ssh-ed25519.html">sshでed25519鍵を使うようにした話</a>と基本的に同じ内容なので、スライドサイトへの公開はしていません。)</li>
<li>16進数が好きになりました</li>
<li>年末恒例、IM飲み会に行ってみた</li>
<li>Debconf 16, cape town, South Africa</li>
</ul>


<h2>今後の予定の告知</h2>

<ul>
<li><a href="https://wiki.debian.org/KansaiDebianMeeting">https://wiki.debian.org/KansaiDebianMeeting</a></li>
<li><a href="https://lilo.linux.or.jp/">https://lilo.linux.or.jp/</a></li>
<li><a href="https://histudy.github.io/">姫路IT系勉強会</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第76回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-01-14-rubykansai76.html"/>
    <updated>2017-01-14T17:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai76</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/55398" title="第76回 Ruby関西 勉強会">第76回 Ruby関西 勉強会</a>
に参加して発表してきました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<p>ちょっと場所がわかりにくいところでした。
グランフロントに着いたあと、ちゃんと「タワーB」を目指して、一度9階で乗り換えて18階に上がりました。</p>

<h2>オープニング</h2>

<ul>
<li>会場案内</li>
<li>懇親会は適当に集まる感じ</li>
<li>ネットワークあり</li>
<li>ustream 中継あり (ライブのみで録画はなし)</li>
<li>公式タグは rubykansai76</li>
<li>公式ハッシュタグは <code>#rubykansai</code></li>
<li>受付はあとで</li>
</ul>


<h2>ゲーム会社でのRuby / Rails活用事例</h2>

<ul>
<li>スポンサーセッション的なセッション</li>
<li>Aiming さんは開発も運用もしている</li>
<li>MessagePack で C++ や C# とやりとり</li>
<li>共通基盤開発</li>
<li>インフラ</li>
<li>運用</li>
<li>Ruby は開発速度が利点</li>
<li>実行速度が求められるサーバーは C++ のままのものもあるらしい</li>
</ul>


<h2>Rails 使いがデータ集計でハマりがちな罠</h2>

<ul>
<li>ActiveRecord は集計には向いていない</li>
<li>集計に O/R mapping は不要</li>
<li>サブクエリが入りみだれると ActiveRecord や ARel はつらい</li>
<li>scope の組合せで DRY にする作戦もうまくいくことがまれでだいたいはカオスになる</li>
<li>適材適所</li>
<li>アンチパターン2: 1項目1クエリ作戦</li>
<li>アンチパターン3: 集計データが text</li>
<li>正体は YAML, JSON のデータ</li>
<li>頑張って移行</li>
<li>SQL は覚えるしかない</li>
<li>alter table せずに drop して create table しなおして集計し直し</li>
<li>クエリの分割: 中間集計テーブル</li>
<li>Q: 集計中に空のテーブルが見えてしまうのでは?</li>
<li>PostGRESQL, Redshift だと DDL にもトランザクションがきくので大丈夫</li>
<li>順序が重要</li>
<li>bricolage: SQL 実行に特化したワークフローエンジン</li>
<li>Redshift 用</li>
<li>dry run できるというのが重要</li>
<li>AWS Redshift の特徴</li>
<li>PostgreSQL 系の SQL の便利機能</li>
<li>ウィンドウ関数</li>
<li>例: <code>rank()</code>, <code>row_number()</code></li>
<li>WITH 句</li>
<li>サブクエリの代わり</li>
<li>ネストが減る</li>
</ul>


<h2>Ruby ボード GR-CITRUS の紹介 #2</h2>

<ul>
<li>ロボホンが写真をとっていたがとれていない?</li>
<li>Ruby の話はほとんど出てこない</li>
<li>GR-CITRUS</li>
<li>チップに Ruby Inside と刻印されている</li>
<li>mruby/c という16ビットマイコンなどに向けたさらに省メモリなものがある</li>
<li>今日は mruby の話</li>
<li>本題は実装について</li>
<li>バインドしている mrbgem</li>
<li>mruby-math: Math.sin</li>
<li>mruby-numeric-ext: 10.chr, 0.zero?</li>
<li>独自実装のクラス</li>
<li>mruby 組込み方法</li>
<li>クロスコンパイル</li>
<li>mrbgem の独自追加</li>
<li>wrbb-v2lib-firm の build_config.rb を使う</li>
<li>クロスコンパイル方法は Qiita に記事がある</li>
<li>mrb 実行の仕組み</li>
<li>コード読み</li>
</ul>


<h2><code>frozen_string_literal</code> の話</h2>

<p>スライドはいつも通り
<a href="http://slide.rabbit-shocker.org/authors/znz/frozen_string_literal/">Rabbit Slide Show</a>
(<a href="https://rubygems.org/gems/rabbit-slide-znz-frozen_string_literal">RubyGems</a>),
<a href="http://www.slideshare.net/znzjp/frozenstringliteral">SlideShare</a>,
<a href="https://speakerdeck.com/znz/frozen-string-literal-falsehua">Speaker Deck</a>
にあげています。
(ソースは
<a href="https://github.com/znz/rubykansai76-frozen_string_literal">github</a>
にあげています。)</p>

<h2>Ruby モンキーパッチの世界</h2>

<ul>
<li>モンキーパッチとは</li>
<li>CarrierWaveDirect で <code>path/to/file</code>, <code>path/to/to/file</code>, <code>path/to/to/to/file</code> のようになるバグがあったのをモンキーパッチで対応した</li>
<li>ActiveSupport が <code>NilClass</code> に <code>blank?</code> メソッドを足している</li>
<li>Refinement</li>
<li>トップレベルの <code>using</code> は <code>using</code> より下にあれば <code>class</code> などの中も対象</li>
<li>クラススコープの <code>using</code> は <code>using</code> より下で <code>class</code> に対応する <code>end</code> までが対象</li>
<li><a href="https://docs.ruby-lang.org/en/trunk/syntax/refinements_rdoc.html">https://docs.ruby-lang.org/en/trunk/syntax/refinements_rdoc.html</a></li>
<li>Rails での例: <a href="https://github.com/rails/rails/blob/07307a7b9d14b752fc5aef474f3c29585676c9fa/activesupport/lib/active_support/core_ext/enumerable.rb#L117-L135">https://github.com/rails/rails/blob/07307a7b9d14b752fc5aef474f3c29585676c9fa/activesupport/lib/active_support/core_ext/enumerable.rb#L117-L135</a></li>
</ul>


<h2>Rails の有限オートマトン</h2>

<ul>
<li><a href="https://github.com/amatsuda/stateful_enum" title="stateful_enum">stateful_enum</a></li>
<li>graphviz や plantuml を使って図を出力できる</li>
<li>gulp で plantuml の図の自動更新</li>
<li><code>draw_uml</code> を使って rails 経由で図を表示</li>
<li>browser sync でブラウザーも自動リロード</li>
<li><code>draw_erd</code>, <code>draw_smd</code> というのもある</li>
<li>guard は rspec を流すのに使っていて、重くなるので gulp は開発の初期だけに使うもの用に分けている</li>
</ul>


<h2>告知 (Rails Girls Osaka, OSS Gate Osaka, 関西Ruby会議)</h2>

<ul>
<li>引き続き ogomr さん</li>
<li><a href="https://speakerdeck.com/ogom/ibentofalseshao-jie-tomu-ji">イベントの紹介と募集</a></li>
<li><a href="https://coderdojo-hommachi.doorkeeper.jp/events/56121">CoderDojo 本町 #4</a></li>
<li><a href="https://railsgirls-osaka.doorkeeper.jp/events/55949">RailsGirls Osaka #4 コーチ希望者募集</a></li>
<li><a href="https://railsgirls-osaka.doorkeeper.jp/events/55947">RailsGirls Osaka #4</a></li>
<li><a href="https://oss-gate.doorkeeper.jp/events/56141">OSS Gate Osaka #1</a></li>
<li><a href="https://rubykansai.github.io/kansai2017/">関西Ruby会議2017</a></li>
</ul>


<h2>Ruby初級者向けレッスン 60回 ─ クラス</h2>

<ul>
<li><a href="https://github.com/higaki/learn_ruby_kansai_76">https://github.com/higaki/learn_ruby_kansai_76</a></li>
<li>解答例</li>
<li><code>to_s</code> で <code>@name</code> なのは <code>name</code> の方が良いのではないかという話</li>
<li><code>age</code> の実装の話</li>
<li><code>Mashal.load Marshal.dump</code> の話</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>懇親会の募集</li>
<li>Rails Follow-up Osaka の紹介</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[frozen_string_literalをtrueにしていっている]]></title>
    <link href="http://blog.n-z.jp/blog/2017-01-08-frozen-string-literal.html"/>
    <updated>2017-01-08T17:35:03+09:00</updated>
    <id>http://blog.n-z.jp/blog/frozen-string-literal</id>
    <content type="html"><![CDATA[<p><a href="https://www.ruby-lang.org/ja/documentation/repository-guide/">Ruby の trunk</a> で最近は <code>frozen_string_literal</code> を <code>true</code> に変更するというコミットをしていっています。
(<a href="https://svn.ruby-lang.org/cgi-bin/viewvc.cgi?revision=53141&amp;view=revision" title="Revision 53141">Revision 53141</a> で <code>frozen_string_literal: false</code> として magic comment 自体は追加されています。)</p>

<p>その時にちょっと確認に手間取った変更があったので、そのメモです。</p>

<!--more-->


<h2>lib/fileutils.rb</h2>

<p>確認に手間取ったのは <a href="https://svn.ruby-lang.org/cgi-bin/viewvc.cgi?revision=57275&amp;view=revision" title="Revision 57275">Revision 57275</a> の <code>lib/fileutils.rb</code> の変更です。</p>

<h2>freeze の削除</h2>

<p>まず最初は <code>.freeze</code> を削除した変更です。</p>

<p><code>frozen_string_literal: true</code> にすれば <code>"文字列リテラル".freeze</code> の <code>.freeze</code> は不要になるはずと思ったのですが、実行してみてちゃんと <code>frozen?</code> が <code>true</code> になるのかと <code>--dump=insns</code> で disasm の結果をみて確認しました。</p>

<p>該当部分の変更は以下の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gu">@@ -1432,9 +1432,9 @@ def join(dir, base)</span>
</span><span class='line'>     end
</span><span class='line'>
</span><span class='line'>     if File::ALT_SEPARATOR
</span><span class='line'><span class="gd">-      DIRECTORY_TERM = &quot;(?=[/#{Regexp.quote(File::ALT_SEPARATOR)}]|\\z)&quot;.freeze</span>
</span><span class='line'><span class="gi">+      DIRECTORY_TERM = &quot;(?=[/#{Regexp.quote(File::ALT_SEPARATOR)}]|\\z)&quot;</span>
</span><span class='line'>     else
</span><span class='line'><span class="gd">-      DIRECTORY_TERM = &quot;(?=/|\\z)&quot;.freeze</span>
</span><span class='line'><span class="gi">+      DIRECTORY_TERM = &quot;(?=/|\\z)&quot;</span>
</span><span class='line'>     end
</span><span class='line'>     SYSCASE = File::FNM_SYSCASE.nonzero? ? &quot;-i&quot; : &quot;&quot;
</span></code></pre></td></tr></table></div></figure>


<p>文字列補間がある場合は <code>freeze</code> の呼び出しが減っていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> cat /tmp/a.rb
</span><span class='line'><span class="gp">#</span> frozen_string_literal: <span class="nb">true</span>
</span><span class='line'><span class="go">ALT_SEPARATOR = &#39;\\&#39;</span>
</span><span class='line'><span class="go">p &quot;(?=[/#{Regexp.quote(ALT_SEPARATOR)}]|\\z)&quot;.freeze.frozen?</span>
</span><span class='line'><span class="gp">%</span> cat /tmp/b.rb
</span><span class='line'><span class="gp">#</span> frozen_string_literal: <span class="nb">true</span>
</span><span class='line'><span class="go">ALT_SEPARATOR = &#39;\\&#39;</span>
</span><span class='line'><span class="go">p &quot;(?=[/#{Regexp.quote(ALT_SEPARATOR)}]|\\z)&quot;.frozen?</span>
</span><span class='line'><span class="gp">%</span> ruby /tmp/a.rb
</span><span class='line'><span class="go">true</span>
</span><span class='line'><span class="gp">%</span> ruby /tmp/b.rb
</span><span class='line'><span class="go">true</span>
</span><span class='line'><span class="gp">%</span> diff -u &lt;<span class="o">(</span>ruby --dump<span class="o">=</span>insns /tmp/a.rb<span class="o">)</span> &lt;<span class="o">(</span>ruby --dump<span class="o">=</span>insns /tmp/b.rb<span class="o">)</span>
</span><span class='line'><span class="go">--- /proc/self/fd/11    2017-01-08 17:43:38.532932848 +0900</span>
</span><span class='line'><span class="go">+++ /proc/self/fd/13    2017-01-08 17:43:38.532932848 +0900</span>
</span><span class='line'><span class="go">@@ -1,4 +1,4 @@</span>
</span><span class='line'><span class="go">-== disasm: #&lt;ISeq:&lt;main&gt;@/tmp/a.rb&gt;=====================================</span>
</span><span class='line'><span class="go">+== disasm: #&lt;ISeq:&lt;main&gt;@/tmp/b.rb&gt;=====================================</span>
</span><span class='line'><span class="go"> 0000 trace            1                                               (   2)</span>
</span><span class='line'><span class="go"> 0002 putobject        &quot;\\&quot;</span>
</span><span class='line'><span class="go"> 0004 putspecialobject 3</span>
</span><span class='line'><span class="go">@@ -17,7 +17,6 @@</span>
</span><span class='line'><span class="go"> 0031 putobject        &quot;]|\\z)&quot;</span>
</span><span class='line'><span class="go"> 0033 concatstrings    3</span>
</span><span class='line'><span class="go"> 0035 freezestring     nil</span>
</span><span class='line'><span class="go">-0037 opt_send_without_block &lt;callinfo!mid:freeze, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span>
</span><span class='line'><span class="go">-0040 opt_send_without_block &lt;callinfo!mid:frozen?, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span>
</span><span class='line'><span class="go">-0043 opt_send_without_block &lt;callinfo!mid:p, argc:1, FCALL|ARGS_SIMPLE&gt;, &lt;callcache&gt;</span>
</span><span class='line'><span class="go">-0046 leave</span>
</span><span class='line'><span class="go">+0037 opt_send_without_block &lt;callinfo!mid:frozen?, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span>
</span><span class='line'><span class="go">+0040 opt_send_without_block &lt;callinfo!mid:p, argc:1, FCALL|ARGS_SIMPLE&gt;, &lt;callcache&gt;</span>
</span><span class='line'><span class="go">+0043 leave</span>
</span></code></pre></td></tr></table></div></figure>


<p>文字列補間がない場合は <code>opt_str_freeze</code> (<code>freeze</code> が再定義されていたら呼ぶ) から <code>putobject</code> (単純にスタックにプッシュするだけ) に変わっていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> cat /tmp/1.rb
</span><span class='line'><span class="gp">#</span> frozen_string_literal: <span class="nb">false</span>
</span><span class='line'><span class="go">p &#39;&#39;.freeze.frozen?</span>
</span><span class='line'><span class="gp">%</span> cat /tmp/2.rb
</span><span class='line'><span class="gp">#</span> frozen_string_literal: <span class="nb">true</span>
</span><span class='line'><span class="go">p &#39;&#39;.freeze.frozen?</span>
</span><span class='line'><span class="gp">%</span> cat /tmp/3.rb
</span><span class='line'><span class="gp">#</span> frozen_string_literal: <span class="nb">true</span>
</span><span class='line'><span class="go">p &#39;&#39;.frozen?</span>
</span><span class='line'><span class="gp">%</span> ruby /tmp/1.rb
</span><span class='line'><span class="go">true</span>
</span><span class='line'><span class="gp">%</span> ruby /tmp/2.rb
</span><span class='line'><span class="go">true</span>
</span><span class='line'><span class="gp">%</span> ruby /tmp/3.rb
</span><span class='line'><span class="go">true</span>
</span><span class='line'><span class="gp">%</span> diff -u &lt;<span class="o">(</span>ruby --dump<span class="o">=</span>insns /tmp/1.rb<span class="o">)</span> &lt;<span class="o">(</span>ruby --dump<span class="o">=</span>insns /tmp/2.rb<span class="o">)</span>
</span><span class='line'><span class="go">--- /proc/self/fd/11    2017-01-08 17:52:25.569282848 +0900</span>
</span><span class='line'><span class="go">+++ /proc/self/fd/13    2017-01-08 17:52:25.569282848 +0900</span>
</span><span class='line'><span class="go">@@ -1,4 +1,4 @@</span>
</span><span class='line'><span class="go">-== disasm: #&lt;ISeq:&lt;main&gt;@/tmp/1.rb&gt;=====================================</span>
</span><span class='line'><span class="go">+== disasm: #&lt;ISeq:&lt;main&gt;@/tmp/2.rb&gt;=====================================</span>
</span><span class='line'><span class="go"> 0000 trace            1                                               (   2)</span>
</span><span class='line'><span class="go"> 0002 putself</span>
</span><span class='line'><span class="go"> 0003 opt_str_freeze   &quot;&quot;</span>
</span><span class='line'><span class="gp">%</span> diff -u &lt;<span class="o">(</span>ruby --dump<span class="o">=</span>insns /tmp/1.rb<span class="o">)</span> &lt;<span class="o">(</span>ruby --dump<span class="o">=</span>insns /tmp/3.rb<span class="o">)</span>
</span><span class='line'><span class="go">--- /proc/self/fd/11    2017-01-08 17:52:27.952090848 +0900</span>
</span><span class='line'><span class="go">+++ /proc/self/fd/13    2017-01-08 17:52:27.952090848 +0900</span>
</span><span class='line'><span class="go">@@ -1,7 +1,7 @@</span>
</span><span class='line'><span class="go">-== disasm: #&lt;ISeq:&lt;main&gt;@/tmp/1.rb&gt;=====================================</span>
</span><span class='line'><span class="go">+== disasm: #&lt;ISeq:&lt;main&gt;@/tmp/3.rb&gt;=====================================</span>
</span><span class='line'><span class="go"> 0000 trace            1                                               (   2)</span>
</span><span class='line'><span class="go"> 0002 putself</span>
</span><span class='line'><span class="go">-0003 opt_str_freeze   &quot;&quot;</span>
</span><span class='line'><span class="go">+0003 putobject        &quot;&quot;</span>
</span><span class='line'><span class="go"> 0005 opt_send_without_block &lt;callinfo!mid:frozen?, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span>
</span><span class='line'><span class="go"> 0008 opt_send_without_block &lt;callinfo!mid:p, argc:1, FCALL|ARGS_SIMPLE&gt;, &lt;callcache&gt;</span>
</span><span class='line'><span class="go"> 0011 leave</span>
</span></code></pre></td></tr></table></div></figure>


<h2>String.new への変更</h2>

<p>同じコミットの <code>compare_stream</code> の変更は一通り目視確認していた時には <code>&lt;&lt;</code> による破壊的変更ではないので見落としていて、 <code>make install</code> を実行したら引っかかったので気づいたのですが、 <code>File#read</code> にバッファとして文字列を渡していることによる破壊的変更でした。</p>

<p>該当部分の変更は以下の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gu">@@ -735,8 +735,8 @@ def compare_file(a, b)</span>
</span><span class='line'>   #
</span><span class='line'>   def compare_stream(a, b)
</span><span class='line'>     bsize = fu_stream_blksize(a, b)
</span><span class='line'><span class="gd">-    sa = &quot;&quot;</span>
</span><span class='line'><span class="gd">-    sb = &quot;&quot;</span>
</span><span class='line'><span class="gi">+    sa = String.new(capacity: bsize)</span>
</span><span class='line'><span class="gi">+    sb = String.new(capacity: bsize)</span>
</span><span class='line'>     begin
</span><span class='line'>       a.read(bsize, sa)
</span><span class='line'>       b.read(bsize, sb)
</span></code></pre></td></tr></table></div></figure>


<p>変更候補として</p>

<ul>
<li><code>"".dup</code> にする (文字列のエンコーディングがソースエンコーディング (この場合は UTF-8) になる)</li>
<li><code>String.new</code> にする (文字列のエンコーディングが ASCII-8BIT になる)</li>
</ul>


<p>がありましたが、エンコーディングはどちらでも良かったのと、
ここではバッファサイズとして <code>bsize</code> バイトが望ましいという情報が別途存在していたので、
ruby 2.4.0 からの新機能の <code>String.new(capacity: size)</code> を使うことにしました。</p>

<p>エンコーディングの違いは以下のように確認できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> cat /tmp/a.rb
</span><span class='line'><span class="gp">#</span> frozen_string_literal: <span class="nb">true</span>
</span><span class='line'><span class="go">p &quot;&quot;.dup.frozen?</span>
</span><span class='line'><span class="go">p &quot;&quot;.dup.encoding</span>
</span><span class='line'><span class="go">p String.new.frozen?</span>
</span><span class='line'><span class="go">p String.new.encoding</span>
</span><span class='line'><span class="gp">%</span> ruby /tmp/a.rb
</span><span class='line'><span class="go">false</span>
</span><span class='line'><span class="gp">#</span>&lt;Encoding:UTF-8&gt;
</span><span class='line'><span class="go">false</span>
</span><span class='line'><span class="gp">#</span>&lt;Encoding:ASCII-8BIT&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO&東海道らぐオフラインミーティング 2017/01/07]]></title>
    <link href="http://blog.n-z.jp/blog/2017-01-07-lilo-tokaidolug.html"/>
    <updated>2017-01-07T13:20:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-tokaidolug</id>
    <content type="html"><![CDATA[<p><a href="https://lilo.connpass.com/event/47841/" title="LILO&amp;東海道らぐオフラインミーティング 2017/01/07">LILO&amp;東海道らぐオフラインミーティング 2017/01/07</a> に参加しました。</p>

<p>今回もアンカンファレンス形式でした。</p>

<!--more-->


<h2>メモ</h2>

<p>今回のメモです。</p>

<ul>
<li>本を読んでいたら電車を乗り過ごしてしまって一度梅田まで行ってしまってちょっと遅くなりました。(開始時刻の13時には間に合いました。)</li>
<li>会場の建物は同じでも、いつもの4階と違って6階でした。</li>
<li>ハッシュタグ: <code>#lilo_jp</code> <code>#東海道らぐ</code></li>
<li>登録参加者数 8名</li>
<li>自己紹介から</li>
<li><a href="https://opensuseja.connpass.com/event/47907/" title="関西 Debian 勉強会 + openSUSE Meetup + LILO &amp; 東海道らぐLT大会">関西 Debian 勉強会 + openSUSE Meetup + LILO &amp; 東海道らぐLT大会</a></li>
<li>ラズパイで音楽 (山内さん)</li>
<li>サンハヤトのハイレゾオーディオDACボード AS-E404RAS</li>
<li>Volumio</li>
<li>Spotify</li>
<li>AirPlay対応スピーカーにできた</li>
<li>lilo.linux.or.jp のサーバー管理の話 (自分)</li>
<li>unattended-upgrades の公式っぽさを確認するにはメンテナをみればいいのではという話があったので確認してみたところ、 unattended-upgrades のメンテナを確認すると apt のメンテナの一人でした。 cron-apt のメンテナは全然別の人でした。</li>
<li>休憩</li>
<li>LibreOffice Kaigi 2016.12 の時の資料を使っての話 (榎さん)</li>
<li>LibreOffice Conference の話</li>
<li>Debian を再インストールした話 (さとうさん)</li>
<li>OSM の話 (さかのしたさん)</li>
<li>Overpass API</li>
<li>umap</li>
<li>LOF の LILO 展示の復習 (まるいちさん)</li>
<li>gPhoto2</li>
<li>最後にまた <a href="https://opensuseja.connpass.com/event/47907/" title="関西 Debian 勉強会 + openSUSE Meetup + LILO &amp; 東海道らぐLT大会">関西 Debian 勉強会 + openSUSE Meetup + LILO &amp; 東海道らぐLT大会</a> についての案内</li>
</ul>


<h2>発表した内容</h2>

<p>スライドはいつも通り <a href="http://slide.rabbit-shocker.org/authors/znz/lilo-20170107/">Rabbit Slide Show</a> (<a href="https://rubygems.org/gems/rabbit-slide-znz-lilo-20170107">RubyGems</a>), <a href="https://slideshare.net/znzjp/lilolinuxorjp-20171">SlideShare</a>, <a href="https://speakerdeck.com/u/znz/p/lilo-dot-linux-dot-or-dot-jp-falsehua-2017nian-1yue">Speaker Deck</a> にあげています。(ソースは <a href="https://github.com/znz/lilo-20170107">github</a> にあげています。)</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/lilo-20170107/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/lilo-20170107/" title="lilo.linux.or.jp の話 (2017年1月)">lilo.linux.or.jp の話 (2017年1月)</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[certbot の renew hook について (その2)]]></title>
    <link href="http://blog.n-z.jp/blog/2017-01-03-certbot-renew-hook.html"/>
    <updated>2017-01-03T13:06:39+09:00</updated>
    <id>http://blog.n-z.jp/blog/certbot-renew-hook</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2016-11-20-certbot-renew-hook.html">certbot で設定の再読み込みには post-hook よりも renew-hook を使った方が良さそうという話</a> の続きです。</p>

<p>前回の記事の時点では同時に複数証明書が更新される時の挙動が確認できていませんでしたが、
確認できたので、その説明です。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li><h2>対象バージョン</h2></li>
<li><p>Ubuntu 14.04.5 LTS (trusty)</p></li>
<li>letsencrypt 0.9.3</li>
</ul>


<h2>RENEWED_DOMAINS の挙動</h2>

<p>pre-hook, post-hook, renew-hook でそれぞれ env を実行して環境変数を記録してみたところ、同時に更新される時は pre-hook, post-hook は 1 回ずつ、 renew-hook はドメインごとに呼ばれることがわかりました。</p>

<p>ドメインに応じてメールサーバーの reload などの処理をする場合は post-hook ではなく renew-hook を使う必要がありそうです。</p>

<p>ドメインなどは置き換えていますが、以下のような出力でした。
(<code>TMPDIR</code> などが <code>/tmp/user/0</code> になっているのは libpam-tmpdir を設定しているからだと思います。)</p>

<p>pre-hook の env:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TEMPDIR=/tmp/user/0
</span><span class='line'>HOME=/root
</span><span class='line'>OLDPWD=/root
</span><span class='line'>TMPDIR=/tmp/user/0
</span><span class='line'>LOGNAME=root
</span><span class='line'>TEMP=/tmp/user/0
</span><span class='line'>COLUMNS=80
</span><span class='line'>PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
</span><span class='line'>CERTBOT_AUTO=/home/vpsuser/letsencrypt/letsencrypt-auto
</span><span class='line'>LANG=ja_JP.UTF-8
</span><span class='line'>TMP=/tmp/user/0
</span><span class='line'>SHELL=/bin/sh
</span><span class='line'>PWD=/
</span><span class='line'>LINES=24</span></code></pre></td></tr></table></div></figure>


<p>post-hook の env:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TEMPDIR=/tmp/user/0
</span><span class='line'>HOME=/root
</span><span class='line'>OLDPWD=/root
</span><span class='line'>RENEWED_LINEAGE=/etc/letsencrypt/live/other.example.net
</span><span class='line'>TMPDIR=/tmp/user/0
</span><span class='line'>LOGNAME=root
</span><span class='line'>TEMP=/tmp/user/0
</span><span class='line'>COLUMNS=80
</span><span class='line'>PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
</span><span class='line'>CERTBOT_AUTO=/home/vpsuser/letsencrypt/letsencrypt-auto
</span><span class='line'>LANG=ja_JP.UTF-8
</span><span class='line'>TMP=/tmp/user/0
</span><span class='line'>SHELL=/bin/sh
</span><span class='line'>PWD=/
</span><span class='line'>RENEWED_DOMAINS=other.example.net
</span><span class='line'>LINES=24</span></code></pre></td></tr></table></div></figure>


<p>renew-hook の env:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TEMPDIR=/tmp/user/0
</span><span class='line'>HOME=/root
</span><span class='line'>OLDPWD=/root
</span><span class='line'>RENEWED_LINEAGE=/etc/letsencrypt/live/www.example.com
</span><span class='line'>TMPDIR=/tmp/user/0
</span><span class='line'>LOGNAME=root
</span><span class='line'>TEMP=/tmp/user/0
</span><span class='line'>COLUMNS=80
</span><span class='line'>PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
</span><span class='line'>CERTBOT_AUTO=/home/vpsuser/letsencrypt/letsencrypt-auto
</span><span class='line'>LANG=ja_JP.UTF-8
</span><span class='line'>TMP=/tmp/user/0
</span><span class='line'>SHELL=/bin/sh
</span><span class='line'>PWD=/
</span><span class='line'>RENEWED_DOMAINS=www.example.com
</span><span class='line'>LINES=24</span></code></pre></td></tr></table></div></figure>


<p>renew-hook 2 回目:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TEMPDIR=/tmp/user/0
</span><span class='line'>HOME=/root
</span><span class='line'>OLDPWD=/root
</span><span class='line'>RENEWED_LINEAGE=/etc/letsencrypt/live/other.example.net
</span><span class='line'>TMPDIR=/tmp/user/0
</span><span class='line'>LOGNAME=root
</span><span class='line'>TEMP=/tmp/user/0
</span><span class='line'>COLUMNS=80
</span><span class='line'>PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
</span><span class='line'>CERTBOT_AUTO=/home/vpsuser/letsencrypt/letsencrypt-auto
</span><span class='line'>LANG=ja_JP.UTF-8
</span><span class='line'>TMP=/tmp/user/0
</span><span class='line'>SHELL=/bin/sh
</span><span class='line'>PWD=/
</span><span class='line'>RENEWED_DOMAINS=other.example.net
</span><span class='line'>LINES=24</span></code></pre></td></tr></table></div></figure>


<h2>hook の例</h2>

<p>hook を cli.ini で設定します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat /etc/letsencrypt/cli.ini
</span><span class='line'>rsa-key-size = 4096
</span><span class='line'>pre-hook = /etc/letsencrypt/pre-hook
</span><span class='line'>post-hook = /etc/letsencrypt/post-hook
</span><span class='line'>renew-hook = /etc/letsencrypt/renew-hook</span></code></pre></td></tr></table></div></figure>


<p>hook の実行ファイルを作成します。
忘れずに実行属性をつけておく必要があります。</p>

<p>pre-hook と post-hook は呼ばれたことと環境変数の記録だけですが、
renew-hook は呼ばれたことと環境変数の記録をしつつ、
apache に証明書の反映と、
メールサーバーのドメインの時のみ、
メール関係のデーモンにも反映をしています。
postfix だけ reload 時に標準出力にメッセージを出していたので、
捨てています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat /etc/letsencrypt/pre-hook
</span><span class='line'>#!/bin/sh
</span><span class='line'>{
</span><span class='line'>  date
</span><span class='line'>  env
</span><span class='line'>} &gt;&gt; /tmp/pre-hook.env
</span><span class='line'>% cat /etc/letsencrypt/post-hook
</span><span class='line'>#!/bin/sh
</span><span class='line'>{
</span><span class='line'>  date
</span><span class='line'>  env
</span><span class='line'>} &gt;&gt; /tmp/post-hook.env
</span><span class='line'>% cat /etc/letsencrypt/renew-hook
</span><span class='line'>#!/bin/sh
</span><span class='line'>{
</span><span class='line'>  date
</span><span class='line'>  env
</span><span class='line'>} &gt;&gt; /tmp/renew-hook.env
</span><span class='line'>apachectl graceful
</span><span class='line'>for domain in $RENEWED_DOMAINS; do
</span><span class='line'>  case "$domain" in
</span><span class='line'>    mx*)
</span><span class='line'>      service postfix reload &gt;/dev/null
</span><span class='line'>      service dovecot reload
</span><span class='line'>      ;;
</span><span class='line'>  esac
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mini Debian Conference Japan 2016に参加して発表してきた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-12-10-mini-debian-conference-japan-2016.html"/>
    <updated>2016-12-10T10:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/mini-debian-conference-japan-2016</id>
    <content type="html"><![CDATA[<p><a href="http://miniconf.debian.or.jp/" title="Mini Debian Conference Japan 2016">Mini Debian Conference Japan 2016</a>
に参加して、発表してきました。</p>

<!--more-->


<h2>会場</h2>

<p>前日に東京に移動していたので、余裕がありましたが、
東京駅から近いので、当日移動でも頑張れば間に合いそうな場所でした。</p>

<p>ネットワークはゲスト用の無線があって、接続すると Web 画面が出てきてそこでユーザーとパスワードを入れて認証するという方式でした。</p>

<h2>セッション</h2>

<p>2トラックなので、どちらを聞きに行くのか悩む必要がありました。
さらに午後からは LibreOffice Kaigi 2016.12 も併催なので、さらに悩みました。</p>

<h2>オープニング</h2>

<ul>
<li>DebConf を日本でやりたいので、カンファレンス開催のノウハウをためたい</li>
<li>諸注意で Windows の画面が出てきてブーイング</li>
<li>結局映らなかったので口頭で</li>
<li>自動販売機は使用禁止とか</li>
<li>休憩中の予定説明とか</li>
<li>さっき出てきた DebConf の<a href="https://twitter.com/yasulab/status/807399231107584001">写真</a>のような集合写真撮影があるよとか</li>
<li>機材の関係で最初のセッションは部屋を入れ替え</li>
</ul>


<h2>Open Build Service in Debian</h2>

<ul>
<li>Open Build Service のアーキテクチャの説明</li>
<li>フロントエンドは Rails</li>
<li><a href="https://goo.gl/OSBNqv">https://goo.gl/OSBNqv</a></li>
<li><a href="https://goo.gl/2rNPMx">https://goo.gl/2rNPMx</a></li>
<li>デモはディスクフルで終了</li>
</ul>


<h2>昼食及びPGP/GPGキーサインパーティ</h2>

<p>パスポートを机の上に準備していたのに持ってくるのを忘れてしまっていて、
ID が運転免許証しかなかったので、日本人とだけにしておきました。</p>

<h2>OSS license 101</h2>

<ul>
<li>ライセンスは一部の権利を許諾するもの</li>
<li>著作権の他に特許、商標、契約も関係する</li>
<li>商標の例: &ldquo;Firefox&rdquo; と Iceweasel</li>
<li>契約の例: Red Hat エンタープライズ契約書</li>
<li>「5.2 検査。」という項目がある</li>
<li>ライセンスを選ぶ</li>
<li>目的に合わせて</li>
<li>万能のライセンスはない</li>
<li>ライセンスを独自に作るのはよくない</li>
<li>OSS ライセンスは well-tested library</li>
<li>独自ライセンスは使うときに吟味が必要になるし、互換性も問題になる</li>
<li>コードを書きたい人は既存のライセンスを使ってコードを書いていた方が生産性が高い</li>
<li>Proprietary license vs OSS license</li>
<li>Default deny vs Default allow</li>
<li>Whitelist vs Blacklist</li>
<li>The Open Source Definition (Annotated) <a href="https://opensource.org/osd-annotated/">https://opensource.org/osd-annotated/</a></li>
<li>DFSG-free (OSS), OSI-Certified and fake-OSS</li>
<li>Well-known OSS license</li>
<li>どのライセンスが良いか?</li>
<li>目的と利用方法によって変わる</li>
<li>Copyleft vs Permissive <a href="https://www.gnu.org/licenses/copyleft.ja.html">https://www.gnu.org/licenses/copyleft.ja.html</a></li>
<li>patent-free or not</li>
<li>Domain-specific</li>
<li>OFL,CC,GFDL, etc.</li>
<li>残りの時間はライセンスがらみの雑談</li>
<li>Zstd <a href="https://github.com/facebook/zstd">https://github.com/facebook/zstd</a></li>
<li>BSD-3-clause license However, its &ldquo;PATENTS&rdquo; file says</li>
<li>Zfs (GPL vs CDDL) by Canonical, Ltd.</li>
<li>GPL: Linux &ldquo;T-800&rdquo; issue</li>
<li>第三者はソースコードを請求できない</li>
<li>「Linux で稼働しているターミネーターを掴まえたとしても、そのバイナリの所有権を得たわけではないので、ソースコードは請求できない。」 <a href="https://twitter.com/elim/status/807442658830336001">https://twitter.com/elim/status/807442658830336001</a></li>
</ul>


<h2>Go言語で書かれたソフトウェアをDebianパッケージにする方法</h2>

<ul>
<li><a href="https://twitter.com/tSU_RooT">https://twitter.com/tSU_RooT</a></li>
<li>GPG ID: 63A6 000E</li>
<li>peco の Debian パッケージを入れた人</li>
<li>dh-make-golang</li>
<li>佐々木さんは自分用パッケージを作ったが、メンテナンスするプログラミング言語を増やしたくなかったので公式にはあげなかったらしい</li>
<li>公式に入れるとメリットが多い</li>
<li>公式に入ったっときのデメリットはパッケージメンテナがアップデートに追随してくれないことがある</li>
<li>パッケージに限らない問題</li>
<li>下準備</li>
<li>sid の環境を用意</li>
<li>リポジトリの確認</li>
<li>ソースコードからビルドできるか</li>
<li>ライセンスが付属しているか</li>
<li>go get するだけでビルドできるか</li>
<li>依存ライブラリがすでにパッケージになっているか</li>
<li>依存ライブラリも同じチェック</li>
<li>ライセンスがない場合: issue でお願いする</li>
<li>複雑なビルド手順が必要な場合: debian/rules で頑張る必要がある、今回は対象外</li>
<li>依存ライブラリが多い場合</li>
<li>ライセンス確認</li>
<li>例えば、サンプルに Gopher くんの画像がついていたら debian/copyright に明記する必要あり</li>
<li>pkg-go.alioth.debian.org</li>
<li>パッケージの命名規則がある</li>
<li>fork したリポジトリも別パッケージで問題ない</li>
<li>Go 1.6 で正式導入された vendor ディレクトリの扱いはまだ完全には決まってないっぽい</li>
<li>peco (v0.4.2) での実例</li>
<li>依存パッケージの話</li>
<li><code>apt showsrc golang-go-flags-dev 2&gt;/dev/null | grep Homepage</code> で upstream を確認</li>
<li>古いパッケージで依存なしで消えていたものを復活させた</li>
<li>lintian の警告を消す</li>
<li>debian/copyright を書く</li>
<li>debian/changelog を直す (ITP の番号を埋める、UNRELEASED を unstable に)</li>
<li>debian/control の README から自動で生成された説明文を直す</li>
<li>ライブラリパッケージすべてに行う</li>
<li>バイナリパッケージは man ページも用意する</li>
<li>今回話せなかったこと</li>
<li>参考資料</li>
<li>質疑応答</li>
<li>pristine-tar と git-buildpackage の話</li>
</ul>


<h2>Certbotで無料TLSサーバー</h2>

<p>Certbotで無料TLSサーバーというタイトルで発表しました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/debian-certbot/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/debian-certbot/" title="Certbotで無料TLSサーバー">Certbotで無料TLSサーバー</a>
</div>


<p><a href="https://github.com/sorah/acmesmith">https://github.com/sorah/acmesmith</a> というクライアントもあるらしい。</p>

<p><a href="https://github.com/dokku/dokku-letsencrypt">https://github.com/dokku/dokku-letsencrypt</a> で使っている <code>simp_le</code> は 開発が止まっている ( <a href="https://github.com/kuba/simp_le/issues/114">https://github.com/kuba/simp_le/issues/114</a> )。</p>

<h2>休憩及び集合写真撮影</h2>

<p>集合写真を撮影して、おやつ休憩がありました。</p>

<h2>FOSS バーチャルシンガー 徴音梅林 と LINNE プラットホーム</h2>

<ul>
<li>英語なので頑張って聞いていました。</li>
<li><a href="http://projectmeilin.github.io/ja/">http://projectmeilin.github.io/ja/</a></li>
</ul>


<h2>最近のGnuPG</h2>

<ul>
<li>二ヶ国語でプレゼン</li>
<li>メモリ不足でプレゼンツールがうまく動かないので佐々木さんのマシンに切り替え</li>
<li>Jessie は gnupg パッケージは 1.4 (新しいバージョンは gnupg2 パッケージ)</li>
<li>Stretch は gnupg パッケージは 2.1 (古いバージョンは gnupg1 パッケージ)</li>
<li>GnuPG 2.1?</li>
<li>公開鍵のフォーマットが KBX に変わった。(昔の形式もサポート)</li>
<li>プライベート鍵は gpg-agent が管理するようになった。</li>
<li>gpg, gpg-agent, pinentry, scdaemon, dirmngr, (gpgsm, ssh)</li>
<li>おすすめの使い方</li>
<li>gpg-agent を ssh-agent として使う</li>
<li>Token を使う</li>
<li>Curve25519 を使う (Ed25519/X25519 is more secure, key is small, fast)</li>
<li>キーサインパーティー</li>
<li>WKD: Web key directory</li>
<li>ToFU: Trust On First Use</li>
<li>g13 + dm-crypt</li>
<li>質疑応答</li>
<li>RSA 鍵からの移行</li>
<li>サブキーの追加よりも新規に作るのがおすすめ</li>
<li>gnuk の話</li>
<li>curve25519 サポートしている</li>
<li>楕円曲線暗号は輸出入の規制にひっかかることがある</li>
</ul>


<h2>休憩</h2>

<p>2つの部屋をくっつけて広くなった。</p>

<h2>DebConf 2018 台湾 参加表明準備とステータスの更新</h2>

<ul>
<li>英語なので twitter の <code>#debianjp</code> を参考にして頑張って聞いていました。</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>アンケート: <a href="https://goo.gl/BsPrgA">https://goo.gl/BsPrgA</a></li>
</ul>


<h2>懇親会</h2>

<ul>
<li>LT 大会をやっていました。</li>
<li>全体的にマイクの通りが悪いのか、英語に限らず話が聞き取りにくかったです。</li>
<li>Unicode の <a href="https://ja.wikipedia.org/wiki/%E6%BC%A2%E5%AD%97%E8%A8%98%E8%BF%B0%E8%A8%80%E8%AA%9E#.E6.BC.A2.E5.AD.97.E6.A7.8B.E6.88.90.E8.A8.98.E8.BF.B0.E6.96.87.E5.AD.97.E5.88.97_.28IDS.29" title="漢字構成記述文字列 (Ideographic Description Sequence; IDS)">漢字構成記述文字列 (Ideographic Description Sequence; IDS)</a> ですごい漢字を出しているのとか自作 OS の話とかが印象に残りました。</li>
<li>2回あった自動販売機の話もなかなか面白かったです。 <a href="https://twitter.com/OrientalHistory/status/807530627293593600">https://twitter.com/OrientalHistory/status/807530627293593600</a> <a href="https://twitter.com/OrientalHistory/status/807535513779322880">https://twitter.com/OrientalHistory/status/807535513779322880</a></li>
<li>セッション中は結局 LibreOffice Kaigi 2016.12 の方はいけなかったが、 LibreOffice 側にいた人とも話ができてよかった。</li>
<li>昔の RubyKaigi でセッションがのびたのに別の部屋の次のセッションは始まってしまって、両方見たかった人が最初の方を見逃すということがあって、その後、別の部屋とも同期をとるようになったということがあったのを思い出したのですが、別イベントなので、そこまで同期を取る必要はないにしても、せめてセッションの開始終了予定時刻が同じくらいの時間になっていれば、相互に行き来が発生しやすかったのではないかと思いました。</li>
<li>この話は LibreOffice 側の人にしたのですが、もともとイベントの企画は別々に始まっていて、たまたま会場と日付が一緒だったから合同にしたという流れだったようで、そこまで考えていなかったということのようでした。</li>
</ul>


<h2>まとめ</h2>

<p>k-of.jp で発表者募集を見て応募するまで参加する予定は全くなかったので、
前回会ったのがいつだったか忘れるぐらい久しぶりに会った人もいて、
全体としては楽しかったので、
参加して良かったと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sshでed25519鍵を使うようにした]]></title>
    <link href="http://blog.n-z.jp/blog/2016-12-04-ssh-ed25519.html"/>
    <updated>2016-12-04T14:25:40+09:00</updated>
    <id>http://blog.n-z.jp/blog/ssh-ed25519</id>
    <content type="html"><![CDATA[<p>ssh で使っている鍵が RSA 2048 ビットでちょっと古くなってきているということもあり、
OpenSSH 6.5 で追加された ed25519 鍵に更新することにしました。</p>

<!--more-->


<h2>鍵の種類</h2>

<p><a href="http://jnst.hateblo.jp/entry/2014/12/15/200542" title="GitHubでEd25519鍵をつかう">GitHubでEd25519鍵をつかう</a>
の説明が詳しいですが、他のサイトでも調べた情報によると</p>

<ul>
<li>RSA の 2048 ビットが今の <code>ssh-keygen</code> でのデフォルトなので主流</li>
<li>RSA や ECDSA は <code>ssh-keygen</code> に <code>-b</code> でビット数が指定できる</li>
<li>ECDSA の 521 ビットは 512 の間違いではない</li>
<li>ed25519はビット数が指定出来ない</li>
<li>OpenSSH のssh-keygenは1024bitのDSA鍵しか作れない (<a href="http://d.hatena.ne.jp/hnw/20140705" title="GitHubユーザーのSSH鍵6万個を調べてみた">GitHubユーザーのSSH鍵6万個を調べてみた</a>)</li>
<li>DSA 鍵は弱いので使うべきではない</li>
<li>ed25519はECDSAより署名生成/検証のパフォーマンスが良い</li>
</ul>


<p>などの情報がありました。</p>

<p>ビット数で悩まなくて良いのと、パフォーマンスが良いという情報があったので、
ed25519 を使うことにしました。</p>

<h2>主な環境</h2>

<p>OpenSSH のバージョンは <code>ssh -V</code> で調べました。</p>

<ul>
<li>OS X El Captitan 10.11.6 の OpenSSH_6.9p1, LibreSSL 2.1.8</li>
<li>Ubuntu 14.04.5 LTS (trusty) の OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.8, OpenSSL 1.0.1f 6 Jan 2014</li>
<li>Debian GNU/Linux 8.6 (jessie) の OpenSSH_6.7p1 Debian-5+deb8u3, OpenSSL 1.0.1t  3 May 2016</li>
</ul>


<h2>バージョン情報</h2>

<p>Debian は <a href="https://packages.debian.org/openssh-server">https://packages.debian.org/openssh-server</a> によると wheezy (oldstable) は 1:6.0p1-4+deb7u6 で対応してなさそう (wheezy-backports が 1:6.6p1-4~bpo70+1 なので backports を使えば対応できそう) で、
jessie (stable) は 1:6.7p1-5+deb8u3 なので、今の安定版以降なら問題なく ed25519 が使えそうです。</p>

<p>Ubuntu は <a href="http://packages.ubuntu.com/openssh-server">http://packages.ubuntu.com/openssh-server</a> によると precise (12.04LTS) が 1:5.9p1-5ubuntu1.10 で対応してなさそうでしたが、
trusty (14.04LTS) が 1:6.6p1-2ubuntu2.8 で、
現在主流のバージョンでは問題なく使えそうでした。</p>

<h2>鍵生成</h2>

<p>vagrant 環境で鍵を生成して比較してみたところ、
ed25519 は公開鍵が RSA と比べてかなり短いことがわかりました。
ついでに比較してみたところ、 ECDSA よりも短いということがわかりました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%  ssh-keygen -t ed25519
</span><span class='line'>Generating public/private ed25519 key pair.
</span><span class='line'>Enter file in which to save the key (/home/vagrant/.ssh/id_ed25519):
</span><span class='line'>Enter passphrase (empty for no passphrase):
</span><span class='line'>Enter same passphrase again:
</span><span class='line'>Your identification has been saved in /home/vagrant/.ssh/id_ed25519.
</span><span class='line'>Your public key has been saved in /home/vagrant/.ssh/id_ed25519.pub.
</span><span class='line'>The key fingerprint is:
</span><span class='line'>SHA256:tlGs9kP67mLZzd9lh1/UJY2R/vZc1Q1GA9gyADsRGlw vagrant@yakkety64
</span><span class='line'>The key's randomart image is:
</span><span class='line'>+--[ED25519 256]--+
</span><span class='line'>|   ...Eo.. o.o+. |
</span><span class='line'>|    .o o .+ . += |
</span><span class='line'>|    . o   oo oo.=|
</span><span class='line'>|       . o    ..*|
</span><span class='line'>|        S .    .+|
</span><span class='line'>|       o *     o+|
</span><span class='line'>|        oooo  .oB|
</span><span class='line'>|        +...o  +*|
</span><span class='line'>|       . ++  .. o|
</span><span class='line'>+----[SHA256]-----+
</span><span class='line'>%  cat ~/.ssh/id_ed25519.pub
</span><span class='line'>ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGvN6KKrqsvbFOfLclK/fYIDye6Lms7NhOn0yYNkjMza vagrant@yakkety64
</span><span class='line'>%  ssh-keygen -t ecdsa
</span><span class='line'>Generating public/private ecdsa key pair.
</span><span class='line'>Enter file in which to save the key (/home/vagrant/.ssh/id_ecdsa):
</span><span class='line'>Enter passphrase (empty for no passphrase):
</span><span class='line'>Enter same passphrase again:
</span><span class='line'>Your identification has been saved in /home/vagrant/.ssh/id_ecdsa.
</span><span class='line'>Your public key has been saved in /home/vagrant/.ssh/id_ecdsa.pub.
</span><span class='line'>The key fingerprint is:
</span><span class='line'>SHA256:DebC1pOk6EEL5MVGP0PIziMdAmzgmqAYJl/C14DuSOM vagrant@yakkety64
</span><span class='line'>The key's randomart image is:
</span><span class='line'>+---[ECDSA 256]---+
</span><span class='line'>|=..=+..          |
</span><span class='line'>|.*o.*=           |
</span><span class='line'>|=+=*+.= +        |
</span><span class='line'>|B*o*=+ O +       |
</span><span class='line'>|Boo.+.= S .      |
</span><span class='line'>|.E.. o . .       |
</span><span class='line'>|    .            |
</span><span class='line'>|                 |
</span><span class='line'>|                 |
</span><span class='line'>+----[SHA256]-----+
</span><span class='line'>%  cat ~/.ssh/id_ecdsa.pub
</span><span class='line'>ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCQeG28rZh/SX9MBfKsnltv+hpr41CAT4CZZ9YsmsjVRdb3iKsYq4K4SNwfiVGNaIjKAcuDnaJbk50zOoa8V/Tc= vagrant@yakkety64
</span><span class='line'>%  ssh-keygen
</span><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>Enter file in which to save the key (/home/vagrant/.ssh/id_rsa):
</span><span class='line'>Enter passphrase (empty for no passphrase):
</span><span class='line'>Enter same passphrase again:
</span><span class='line'>Your identification has been saved in /home/vagrant/.ssh/id_rsa.
</span><span class='line'>Your public key has been saved in /home/vagrant/.ssh/id_rsa.pub.
</span><span class='line'>The key fingerprint is:
</span><span class='line'>SHA256:sR7WZK2npMgv8lRZrhofejURfuEs04VJv0quu3xtLiw vagrant@yakkety64
</span><span class='line'>The key's randomart image is:
</span><span class='line'>+---[RSA 2048]----+
</span><span class='line'>|           ..o   |
</span><span class='line'>|          ..+..  |
</span><span class='line'>|        ..+=.o.  |
</span><span class='line'>|         X=.=  . |
</span><span class='line'>|        S ==o .  |
</span><span class='line'>|     . = =o= .   |
</span><span class='line'>|      = =..oo.   |
</span><span class='line'>|    ...*.oE.+ o  |
</span><span class='line'>|     o+oo == +.  |
</span><span class='line'>+----[SHA256]-----+
</span><span class='line'>%  cat ~/.ssh/id_rsa.pub
</span><span class='line'>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCnSyvz7oShBRgD8q91eG4WtdJ83cPJfQAtSKEiE8ELHhqRulL6liPz/jqqpMjQpp/3e3QS8OoxGnuXGgHdkly4cd2UdnWxqbz4oN6ig64rYK/ZshQp5FyKb5L3Ksr+3mkhzxPHQVbSZWa8YoaCEzbteVbdFTXUMO/HFPFTL9s2HHyJoDlzUT0XdyovN6WQ2SEbx6pLudsvhZiaiqrPEHLl4ltq33tGcIMFjeu8XvW3d8jTmuAw0KrL7U3bD20n0xsKj9XBigew9K0PjJQ6QKyNUpXXB94jWv+hpkatHlw0NJm/XUQiHDtWaMCTRB8KDSrFarRbYL5ErfHuCePmYerR vagrant@yakkety64</span></code></pre></td></tr></table></div></figure>


<h2>サービスに登録</h2>

<p>二要素認証の時はちょっと楽しい面もありましたが、
ssh の鍵の変更は面倒なだけでした。</p>

<p>GitHub, BitBucket, Heroku など、試したところはすべて ed25519 の公開鍵に対応していました。</p>

<h2>IdentityFile 更新</h2>

<p><code>~/.ssh/config</code> で余計な鍵を試さないように</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IdentitiesOnly yes
</span><span class='line'>IdentityFile ~/.ssh/id_rsa</span></code></pre></td></tr></table></div></figure>


<p>のような設定を入れている場合は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IdentitiesOnly yes
</span><span class='line'>IdentityFile ~/.ssh/id_ed25519</span></code></pre></td></tr></table></div></figure>


<p>に変更する必要がありました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[certbot の renew hook について]]></title>
    <link href="http://blog.n-z.jp/blog/2016-11-20-certbot-renew-hook.html"/>
    <updated>2016-11-20T14:52:31+09:00</updated>
    <id>http://blog.n-z.jp/blog/certbot-renew-hook</id>
    <content type="html"><![CDATA[<p>certbot で設定の再読み込みには post-hook よりも renew-hook を使った方が良さそうでした。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Debian GNU/Linux 8.6 (jessie)</li>
<li>certbot 0.9.3-1~bpo8+1</li>
</ul>


<h2>hook の指定方法について</h2>

<p><code>certbot renew --pre-hook "service nginx stop" --post-hook "service nginx start"</code> のように <code>certbot</code> コマンドの引数で直接指定するか、 <code>/etc/letsencrypt/cli.ini</code> または <code>$XDG_CONFIG_HOME/letsencrypt/cli.ini</code> (<code>$XDG_CONFIG_HOME</code> が設定されていなければ <code>~/.config/letsencrypt/cli.ini</code>) に <code>renew-hook = service nginx reload</code> のように <code>--</code> を省いたオプション名で ini ファイルに指定する方法があるようです。(<code>ini</code> ファイルは <code>--config cli.ini</code> または <code>-c cli.ini</code> のようにコマンドラインで指定も可能)</p>

<h2>pre-hook, post-hook について</h2>

<p><code>pre-hook</code> と <code>post-hook</code> は standalone プラグインを使っている時に、 <code>certbot</code> の Web サーバーが 80 番ポートを使えるようにするために、通常の Web サーバーを止める用途に適しているようです。</p>

<p>そのため、<code>--dry-run</code> の時でも呼ばれるようです。</p>

<p>使用例:
<code>certbot renew --pre-hook "service nginx stop" --post-hook "service nginx start"</code></p>

<h2>renew-hook について</h2>

<p><code>renew-hook</code> は証明書の更新が成功するごとに呼ばれるので、証明書の再読み込みに適しているようです。</p>

<p>環境変数 <code>RENEWED_LINEAGE</code> に <code>/etc/letsencrypt/live/www.example.com</code> のような証明書の場所へのパスが、
環境変数 <code>RENEWED_DOMAINS</code> に <code>www.example.com example.com</code> のようにスペース区切りの更新されたドメインのリストが渡ってくるようです。</p>

<p>証明書の更新ごとに呼ばれるようなので、たまたま同じタイミングで <code>www.example.com</code> と <code>other.example.net</code> の更新が起こったとして、
証明書の作成の時に <code>-d</code> を同時に指定して同じ証明書の SAN (Subject Alternative Name) に入っているなら、
<code>RENEWED_DOMAINS</code> に並んでいて、
別々に証明書を作成していれば <code>renew-hook</code> が別々に呼ばれました。</p>

<p>(2017-01-03 追記: <code>post-hook</code> は 1 回しか呼ばれませんでした。詳細は<a href="http://blog.n-z.jp/blog/2017-01-03-certbot-renew-hook.html">certbot の renew hook について (その2)</a>を参照)</p>

<h2>renew-hook のすすめ</h2>

<p>以上の違いから、
<code>webroot</code> プラグインを使っている時の証明書の自動再読み込みには
<code>post-hook</code> ではなく <code>renew-hook</code> を使うのがおすすめです。</p>

<p>Web 上で <code>post-hook</code> を使っている例の方が多いのは、
<code>renew-hook</code> の方が後から実装されたからではないかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[関西オープンフォーラム2016にいってきた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-11-12-k-of-jp.html"/>
    <updated>2016-11-12T14:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/k-of-jp</id>
    <content type="html"><![CDATA[<p><a href="https://k-of.jp/2016/" title="KOF 2016：関西オープンフォーラム2016">KOF 2016：関西オープンフォーラム2016</a>
にいってきました。</p>

<!--more-->


<p>主に東海道らぐの LT と Debian Updates を見にいったので、そのメモです。</p>

<h2>東海道らぐ・鹿肥ゆる秋の大阪湾ライトニングトーク大会 in KOF</h2>

<ul>
<li>かな漢字変換ソフト「Genji」をつくってみた</li>
<li>ベジェ曲線を極めたい</li>
<li>自宅サーバのトラブルを楽しもう カーネル編</li>
<li>(Ubuntu 16.04 から 16.10 にあげたらカーネルパッケージのインストールに失敗して、結局原因は Sophos の無料版を入れていて 16.10 のカーネルに対応していなかったという話)</li>
<li>ビットコインとかブロックチェーン</li>
<li>Bitcoin の他には Ripple が有名</li>
<li>bitFlyer, coincheck, Zaif</li>
<li><a href="https://twitter.com/shu_kob">https://twitter.com/shu_kob</a></li>
<li>mikutter 活動報告</li>
<li>あひる焼き</li>
<li>月額利用料0円のモバイルネットワーク通信</li>
<li>Y!mobile (旧WILLCOM) の 2,3 台目の基本料金無料と WILLCOM 同士の通話料無料を使うという話だった。</li>
<li>Mini Debian Conference Japan 2016, PyConJP 2017</li>
</ul>


<h2>Debian Updates</h2>

<ul>
<li>スライドを KDE Connect で Android 端末から操作していた。(ただしマウスカーソルの移動とクリックで次のページはできていたが、それ以外の前のページへ戻るなどの操作は操作方法がわからないからか、できていないようだった。)</li>
<li>Debian とは? についていろいろ説明</li>
<li><a href="https://ja.wikipedia.org/wiki/GNU_Hurd">https://ja.wikipedia.org/wiki/GNU_Hurd</a> で使われているロゴじゃない Hurd のロゴがあるらしい <a href="https://www.gnu.org/graphics/ahurdlogo.html">https://www.gnu.org/graphics/ahurdlogo.html</a></li>
<li>Debian Updates</li>
<li>2016/02/29 Debian 6 Long Term Support (LTS) 終了 (2つ前のバージョン, 今の安定版は 8)</li>
<li>2016/04/02 Updated Debian 8.4, 7.10</li>
<li>2016 年度 Debian Project Leader 決定</li>
<li>2016/04/25 Debian 7 のセキュリティサポートが LTS チームに移行</li>
<li>2016/05/07 Debian 9 の i386 アーキテクチャのサポート CPU 変更アナウンス: i686 以降に変更 <a href="https://lists.debian.org/debian-devel-announce/2016/05/msg00001.html">https://lists.debian.org/debian-devel-announce/2016/05/msg00001.html</a></li>
<li>2016/06/04 Updated Debian 8.5, 7.11</li>
<li>2016/05/15 ZFS in Debian/contrib</li>
<li>2016/07/02-09 Debconf16</li>
<li>2016/08/16 Debian 23 歳</li>
<li>2016/09/17 Debian 8.6</li>
<li>Debug symbol 用パッケージ新規スイート提供開始</li>
<li>パッケージ名-dbgsym</li>
<li>deb.debian.org/debian-debug stretch-debug main</li>
<li>debhelper 10</li>
<li>Next Debian Release</li>
<li>2016/11/05 Transitions freeze</li>
<li>ライブラリの ABI が変わるものは認めない</li>
<li>2017/01/05 &ldquo;Soft&rdquo; freeze</li>
<li>2017/02/05 Full freeze</li>
<li>今後のイベント情報</li>
<li><a href="https://tokyodebian.alioth.debian.org/" title="東京エリアDebian勉強会">東京エリアDebian勉強会</a></li>
<li><a href="http://miniconf.debian.or.jp/" title="Mini Debian Conference Japan 2016">Mini Debian Conference Japan 2016</a></li>
<li><a href="https://wiki.debian.org/KansaiDebianMeeting" title="関西Debian勉強会">関西Debian勉強会</a></li>
</ul>


<h2>終了後</h2>

<p>Debian の人たちと懇親会に行きました。</p>

<p>最後の方は端末の話で盛り上がっていたので、次回の関西Debian勉強会は端末ネタになりそうかもしれません。</p>

<p>いろいろ話を聞きましたが、<a href="http://blog.n-z.jp/blog/2016-08-20-mac-easypg-gpg2.html" title="OS X の Emacs で EasyPG が gpg2 で Opening input file: Decryption failed, になったので対処した">OS X の Emacs で EasyPG が gpg2 で Opening input file: Decryption failed, になったので対処した</a>で書いたように gnupg のデフォルトが 2 系列になると emacs ではまるので確認してみたところ、stretch では 2 系列がデフォルトになって影響がありそうとわかりました。</p>

<p>佐々木さんは Desktop 環境で使っているので GUI の pinentry を使っていて問題なくつかえているという話でした。</p>

<p>帰ってきてから確認してみると、<a href="https://packages.debian.org/search?keywords=gnupg-agent" title="gnupg-agent パッケージ">gnupg-agent パッケージ</a>が 2.1.15 で 2.1.5 より新しいので <code>--allow-emacs-pinentry</code> が使えそうでした。
Ubuntu の <a href="http://packages.ubuntu.com/search?keywords=gnupg" title="gnupg パッケージ">gnupg パッケージ</a> で確認すると yakkety (16.10) では 2.1.15-1ubuntu6 のようで、すでに 2 系列のようなので、 Debian リリース前でも Ubuntu の方を使えば安定版で gnupg が 2 系列になったものを用意できそうなので、後で調べてみようと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jessie の certbot が 0.9.3 に上がったので設定を変更した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-11-08-certbot-0-dot-9-3.html"/>
    <updated>2016-11-08T23:14:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/certbot-0-dot-9-3</id>
    <content type="html"><![CDATA[<p>jessie の certbot が 0.9.3 に上がって、
<code>/etc/cron.d/certbot</code> よりも systemd の <code>certbot.timer</code> が優先して動くように変わったので、
reload に post-hook を使うように変えたり、
ログの差分メールの仕組みを変えたりしました。</p>

<!--more-->


<h2>今までの方法</h2>

<p>今までは <code>/etc/cron.daily/local-letsencrypt</code> で <code>certbot renew</code> を呼び出して、ログを保存して <code>diff</code> を出力して cron からメールを送信させて、
<code>reload</code> は更新の有無にかかわらず実行していました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">LOGFILE</span><span class="o">=</span>/var/log/certbot-renew.log
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;$LOGFILE&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    savelog -c <span class="m">90</span> -q <span class="s2">&quot;$LOGFILE&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> ! certbot renew &gt; <span class="s2">&quot;$LOGFILE&quot;</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">echo </span>Automated renewal failed:
</span><span class='line'>    cat <span class="s2">&quot;$LOGFILE&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;$LOGFILE&quot;</span>.0 <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    diff -u <span class="s2">&quot;$LOGFILE&quot;</span>.0 <span class="s2">&quot;$LOGFILE&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>apachectl graceful
</span><span class='line'>service postfix reload
</span></code></pre></td></tr></table></div></figure>


<h2>certbot パッケージでインストールされた自動更新の仕組み</h2>

<p><code>/etc/cron.d/certbot</code> は <code>/run/systemd/system</code> をチェックして普通は動かないようになっていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> % cat /etc/cron.d/certbot
</span><span class='line'> <span class="c"># /etc/cron.d/certbot: crontab entries for the certbot package</span>
</span><span class='line'> <span class="c">#</span>
</span><span class='line'> <span class="c"># Upstream recommends attempting renewal twice a day</span>
</span><span class='line'> <span class="c">#</span>
</span><span class='line'> <span class="c"># Eventually, this will be an opportunity to validate certificates</span>
</span><span class='line'> <span class="c"># haven&#39;t been revoked, etc.  Renewal will only occur if expiration</span>
</span><span class='line'> <span class="c"># is within 30 days.</span>
</span><span class='line'> <span class="nv">SHELL</span><span class="o">=</span>/bin/sh
</span><span class='line'> <span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
</span><span class='line'>
</span><span class='line'> <span class="m">0</span> */12 * * * root <span class="nb">test</span> -x /usr/bin/certbot -a <span class="se">\!</span> -d /run/systemd/system <span class="o">&amp;&amp;</span> perl -e <span class="s1">&#39;sleep int(rand(3600))&#39;</span> <span class="o">&amp;&amp;</span> certbot -q renew
</span></code></pre></td></tr></table></div></figure>


<p>systemd の方では、<code>timer</code> から動かすため、有効化されていない <code>certbot.service</code> と、 service を動かすための <code>certbot.timer</code> が入っていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% cat /lib/systemd/system/certbot.service
</span><span class='line'><span class="o">[</span>Unit<span class="o">]</span>
</span><span class='line'><span class="nv">Description</span><span class="o">=</span>Certbot
</span><span class='line'><span class="nv">Documentation</span><span class="o">=</span>file:///usr/share/doc/python-certbot-doc/html/index.html
</span><span class='line'><span class="nv">Documentation</span><span class="o">=</span>https://letsencrypt.readthedocs.io/en/latest/
</span><span class='line'><span class="o">[</span>Service<span class="o">]</span>
</span><span class='line'><span class="nv">Type</span><span class="o">=</span>oneshot
</span><span class='line'><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/certbot -q renew
</span><span class='line'><span class="nv">PrivateTmp</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'>% cat /lib/systemd/system/certbot.timer
</span><span class='line'><span class="o">[</span>Unit<span class="o">]</span>
</span><span class='line'><span class="nv">Description</span><span class="o">=</span>Run certbot twice daily
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Timer<span class="o">]</span>
</span><span class='line'><span class="nv">OnCalendar</span><span class="o">=</span>*-*-* 00,12:00:00
</span><span class='line'><span class="nv">RandomizedDelaySec</span><span class="o">=</span>3600
</span><span class='line'><span class="nv">Persistent</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Install<span class="o">]</span>
</span><span class='line'><span class="nv">WantedBy</span><span class="o">=</span>timers.target
</span></code></pre></td></tr></table></div></figure>


<p><code>OnCalendar</code> で毎日 00:00:00 と 12:00:00 に動くようになっていました。
<code>RandomizedDelaySec</code> でランダムな遅延の設定をしようとしているようですが、
jessie の systemd は対応していないようで、
<code>systemd[1]: [/lib/systemd/system/certbot.timer:6] Unknown lvalue 'RandomizedDelaySec' in section 'Timer'</code>
というログが出ていました。
(<a href="https://bugs.debian.org/843607" title="#843607 - certbot: Unknown lvalue 'RandomizedDelaySec' in section 'Timer'">#843607 - certbot: Unknown lvalue &lsquo;RandomizedDelaySec&rsquo; in section &lsquo;Timer&rsquo;</a> として報告済みです。)</p>

<h2>ログの diff のメール送信方法変更</h2>

<p>設定を追加するには <code>/etc/systemd/system/certbot.service.d</code> にファイルをおけば良いので、
以下の内容の <code>/etc/systemd/system/certbot.service.d/diffmail.conf</code> を作成しました。</p>

<p><code>certbot.service</code> の <code>ExecStart=/usr/bin/certbot -q renew</code> の後に実行したかったので、
<code>ExecStopPost</code> を使ってみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>Service<span class="o">]</span>
</span><span class='line'><span class="nv">ExecStopPost</span><span class="o">=</span>/bin/bash -c <span class="s2">&quot;diff -u &lt;(cut -d: -f4- /var/log/letsencrypt/letsencrypt.log.1 | egrep -v &#39;^DEBUG&#39;) &lt;(cut -d: -f4- /var/log/letsencrypt/letsencrypt.log | egrep -v &#39;^DEBUG&#39;) | ifne mail -s &#39;Change certbot log&#39; root&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>前回のログ (<code>letsencrypt.log.1</code>) と今回のログ (<code>letsencrypt.log</code>) から、必ず差分になってしまう時刻を <code>cut</code> で削って、さらに DEBUG ログの中にも現在日時で変化する部分があったので除外するようにしてから差分をとっています。</p>

<p>そして <a href="https://packages.debian.org/moreutils" title="moreutils">moreutils</a> の <code>ifne</code> を使って差分があるときだけメール送信をするようにしています。</p>

<h2>post-hook への変更</h2>

<p>systemd の <code>ExecStart</code> を書き換えるのは、メンテナンスしにくいとか、手動で <code>certbot renew</code> を実行したときに使われないなど、あまりよくないかと思い、
<code>/etc/letsencrypt/cli.ini</code> で設定することにしました。</p>

<p>letsencrypt の証明書を apache のみで使っているサーバーでは post-hook にリロードするコマンドを直接設定しました。</p>

<p>ついでに <code>rsa-key-size</code> も 2048 から 4096 に変更するようにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% cat /etc/letsencrypt/cli.ini
</span><span class='line'>rsa-key-size <span class="o">=</span> 4096
</span><span class='line'>post-hook <span class="o">=</span> apachectl graceful
</span></code></pre></td></tr></table></div></figure>


<h2>複数コマンドの post-hook</h2>

<p><code>post-hook = apachectl graceful; service postfix reload &gt;/dev/null</code> のような書き方は
<code>certbot: error: Unexpected line 1 in /etc/letsencrypt/cli.ini: post-hook = apachectl graceful; service postfix reload &gt;/dev/null</code>
というエラーになってうまくいかなかったので、
<code>/etc/letsencrypt/post-hook</code> に実行ファイルを作って、それを post-hook に指定することにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> % sudoedit /etc/letsencrypt/cli.ini
</span><span class='line'> % sudoedit /etc/letsencrypt/post-hook
</span><span class='line'> % sudo chmod +x /etc/letsencrypt/post-hook
</span><span class='line'> % cat /etc/letsencrypt/cli.ini
</span><span class='line'> rsa-key-size <span class="o">=</span> 4096
</span><span class='line'> post-hook <span class="o">=</span> /etc/letsencrypt/post-hook
</span><span class='line'> % cat /etc/letsencrypt/post-hook
</span><span class='line'> <span class="c">#!/bin/sh</span>
</span><span class='line'> apachectl graceful
</span><span class='line'> service postfix reload &gt;/dev/null
</span></code></pre></td></tr></table></div></figure>


<h2>テスト実行</h2>

<p><code>sudo certbot renew</code> で試しに実行してみたところ、以下のような感じで更新の必要がないときは <code>post-hook</code> は実行されないことが確認できました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% sudo certbot renew
</span><span class='line'>Saving debug log to /var/log/letsencrypt/letsencrypt.log
</span><span class='line'>
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>Processing /etc/letsencrypt/renewal/www.example.org.conf
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>Cert not yet due <span class="k">for</span> renewal
</span><span class='line'>
</span><span class='line'>The following certs are not due <span class="k">for</span> renewal yet:
</span><span class='line'>  /etc/letsencrypt/live/www.example.org/fullchain.pem <span class="o">(</span>skipped<span class="o">)</span>
</span><span class='line'>No renewals were attempted.
</span><span class='line'>No renewals attempted, so not running post-hook
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p><code>certbot renew</code> で証明書が更新されたときに実行したいことは <code>post-hook</code> に、
証明書の更新とは関係なく毎回実行したいことは systemd の <code>ExecStopPost</code> を使えば良いことがわかりました。</p>

<p>certbot の hook には <code>post-hook</code> 以外に <code>pre-hook</code> と <code>renew-hook</code> もあるので、
用途によってはそちらも使えそうです。
(<code>webroot</code> プラグインを使っているので使っていませんが、
<code>standalone</code> プラグインを使っているのなら <code>pre-hook</code> で <code>stop</code> して <code>post-hook</code> で <code>start</code> するとか、
<code>renew-hook</code> で更新されたドメインに応じて必要な時だけ <code>postfix reload</code> するとか)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第75回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-11-05-rubykansai75.html"/>
    <updated>2016-11-05T13:26:28+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai75</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/52902" title="第75回 Ruby関西 勉強会">第75回 Ruby関西 勉強会</a>
に参加して発表してきました。</p>

<p>今回は (ustream) 中継はありませんでした。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>オープニング</h2>

<ul>
<li>会場の電源とかの話とか</li>
<li>最初の発表者の紹介とか</li>
</ul>


<h2>機械学習概論</h2>

<ul>
<li>サンプルコードもないので Ruby とは全く関係のない話</li>
<li>機械学習入門書の入門 (挫折しないために)</li>
<li>「Machine Learning: A Probabilistic Perspective」は1000ページ超え</li>
<li>機械学習手法の大分類: 教師あり学習, 教師なし学習, 半教師あり学習, 強化学習</li>
<li>入門書で取り上げられる割合: 教師あり学習:9割, 教師なし学習:1割, 半教師あり学習:0割, 強化学習:0割</li>
<li>入門書で取り上げられる割合: 教師あり学習:9割のうち: パラメトリック:9割, ノンパレメトリック:1割</li>
<li>なので、この発表では教師あり学習・パラメトリックの話</li>
<li>パラメトリック推定</li>
<li><code>y=f(x)</code> となる <code>f</code> を見つけること</li>
<li>パラメータ <code>θ</code> を持つ何らかの特定の関数群(集合) <code>f(x, θ)</code> の中で <code>y=f(x, θ)</code> と最も近似できるような <code>θ</code> を探す</li>
<li>ベイズの定理</li>
<li>最尤推定</li>
<li>種々の推定</li>
<li>MAP 推定</li>
<li>点推定しない</li>
<li>共役事前分布</li>
<li>おすすめのマイルストーン</li>
<li>tinyurl.com/ruby-boshu</li>
<li>13:50 までの予定が 14:13 までになっていた。</li>
<li>質疑応答</li>
<li>14:16 までだった。</li>
</ul>


<h2>懇親会募集</h2>

<ul>
<li>8名?</li>
</ul>


<h2>Ruby 2.4.0 の主な非互換</h2>

<p>発表しました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykansai75-ruby24/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykansai75-ruby24/" title="Ruby 2.4.0 の主な非互換">Ruby 2.4.0 の主な非互換</a>
</div>


<ul>
<li>質問は特になかった。</li>
<li>14:38 までだった。</li>
</ul>


<h2>休憩</h2>

<ul>
<li>14:45頃まで</li>
<li>発表者ということで k-of.jp で配る予定のステッカーをもらった。</li>
</ul>


<h2>さよならsprockets</h2>

<ul>
<li>いかに Qiita は sprockets を捨てるに至ったか</li>
<li>前半:技術選定の話, 後半:さよならsprockets</li>
<li>技術マネジメントの話</li>
<li>(個人的な) 普遍的な要求: 学習コスパがいい, 撤退しやすい, 速い</li>
<li>作るものの特性によって変わる要求</li>
<li>SoR (System of Record), SoE (System of Engagement)</li>
<li>さよなら sprockets</li>
<li>sprockets のおさらい</li>
<li>sprockets の問題点</li>
<li>sprockets は SoE を支援する gem</li>
<li>利点: Rails との統合が進んでいる, ハッシュダイジェスト埋め込みは便利</li>
<li>良いところは残しつつ、もっと高速にトライ・アンド・エラーできるようにしたい</li>
<li>browserify-rails</li>
<li>sprockets + ES6 modules ができる</li>
<li>脱 sprockets のための経由地</li>
<li>JS が小さいうちはここで快適に暮らしてもいい</li>
<li>気合いで ES6 modules 化</li>
<li>browserify v.s. webpack</li>
<li>webpack はなんでもできすぎて撤退しづらくなりそう → browserify を採用した</li>
<li>(世の中的には webpack が主流になりつつある)</li>
<li>ビルドタスクを書く</li>
<li>全部 npm-scripts に書く (Grant gulp は使わない)</li>
<li>ワンライナーに納まらない場合は Node.js スクリプトを書く</li>
<li>Tips: npm-scripts 用シェル芸</li>
<li><code>((a &amp;&amp; (b &amp; c &amp; wait)) &amp; d &amp; wait) &amp;&amp; e</code></li>
<li>マニフェストファイル: 開発環境では admin.js で本番環境では admin-xxxxx.min.js</li>
<li>開発環境: watchify</li>
<li>非同期ビルドの問題</li>
<li>CSSのビルドが微妙にかかるので反映されていないことがある</li>
<li>コンパイル中は sleep する Rack ミドルウェアを追加して解決</li>
<li>移行の結果何が変わった?</li>
<li>デプロイ速度が4分速くなった</li>
<li>開発時の待ち時間がかなり速くなった</li>
<li>開発にすべての npm パッケージを使えるようになった</li>
<li>15:25 までだった。</li>
<li>質疑応答は特になし</li>
</ul>


<h2>社内勉強会で読んだ本とか</h2>

<ul>
<li>15:27 から</li>
<li>Rails5 リリースノート</li>
<li>The Twelve-Factor App</li>
<li>The Rails Doctrine</li>
<li>Domain Driven Design Quickly</li>
<li>メタプログラミング Ruby 第2版</li>
<li>15:37 まで</li>
<li><a href="http://www.slideshare.net/ShinsukeKuroki/ss-68228347" title="社内勉強会で読んだ本とか">社内勉強会で読んだ本とか</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li>15:50頃まで</li>
</ul>


<h2>mruby 初級者向けレッスン</h2>

<ul>
<li><a href="http://qiita.com/ogomr/items/04f2734bfef0a5ef082c" title="Ruby Miniature Book">Ruby Miniature Book</a></li>
<li><a href="http://qiita.com/ogomr/items/ca0c6cb5450bf6f86652" title="mruby on GR-CITRUS">mruby on GR-CITRUS</a></li>
<li><a href="https://github.com/ogom/crione">https://github.com/ogom/crione</a></li>
<li>16:57 まで</li>
<li>質疑応答</li>
<li>16:59 まで</li>
</ul>


<h2>告知タイム / クロージング</h2>

<ul>
<li>k-of.jp の手伝い募集</li>
<li>KansaiRubyKaigi 2017 開催決定</li>
<li>2017-05-27 に大阪産業創造館で</li>
<li>これもスタッフの募集予定</li>
<li>発表者やスポンサーも時期が来れば募集予定</li>
<li><a href="http://qiita.com/advent-calendar/2016/shinosakarb" title="Shinosaka.rb Advent Calendar 2016">Shinosaka.rb Advent Calendar 2016</a></li>
<li><a href="http://rubykansai.github.io/kansai-ruby-community/" title="関西 Ruby コミュニティー 紹介">関西 Ruby コミュニティー 紹介</a></li>
<li><a href="http://www.coderdojo.jp/">http://www.coderdojo.jp/</a></li>
<li>17:17 終了</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bash で PATH を配列に分解の続き]]></title>
    <link href="http://blog.n-z.jp/blog/2016-10-07-bash-path-to-array-again.html"/>
    <updated>2016-10-07T21:39:31+09:00</updated>
    <id>http://blog.n-z.jp/blog/bash-path-to-array-again</id>
    <content type="html"><![CDATA[<p>zsh だと <code>PATH</code> と同期している配列変数として <code>path</code> があるのですが、
bash にはそういうものがなくて困ったので、分解する方法を考えてみた話の続きです。
末尾の空文字列や改行に対応しました。</p>

<!--more-->


<h2>昨日の方法の問題点</h2>

<p><a href="http://blog.n-z.jp/blog/2016-10-06-bash-path-to-array.html">昨日の記事</a> に書きましたが、末尾の空文字列の処理に問題がありました。
また、書いていませんでしたが、改行に対応できていませんでした。</p>

<h2>末尾対応</h2>

<p><code>PATH= bash -c 'ls'</code> を <code>/bin</code> やそれ以外で実行してみたら
空の <code>PATH</code> はカレントディレクトリのみと同じ意味のようなので、
「<a href="https://twitter.com/fixedpoint_jp/status/784229832930369536">末尾の空文字列に対応するために、PATHにの最後に:を追加した文字列をreadすればいい?</a>」
という指摘のように末尾に <code>:</code> を追加する方法で良さそうでした。</p>

<p>つまり、以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> bash -c <span class="s1">&#39;PATH=/bin:; IFS=: read -r -a path &lt;&lt;&lt;&quot;$PATH:&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/bin&quot; [1]=&quot;&quot;)&#39;</span>
</span><span class='line'><span class="gp">%</span> bash -c <span class="s1">&#39;PATH=/bin; IFS=: read -r -a path &lt;&lt;&lt;&quot;$PATH:&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/bin&quot;)&#39;</span>
</span><span class='line'><span class="gp">%</span> bash -c <span class="s1">&#39;PATH=; IFS=: read -r -a path &lt;&lt;&lt;&quot;$PATH:&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>「PATH自体が空だった場合は振舞いが変わるけど。」という話もありましたが、
<code>PATH</code> 探索を再現できれば良いということを考えると空の場合も問題なさそうでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> bash -c <span class="s1">&#39;PATH=; ls&#39;</span>
</span><span class='line'><span class="go">bash: ls: No such file or directory</span>
</span><span class='line'><span class="gp">%</span> <span class="nb">cd</span> /bin
</span><span class='line'><span class="gp">%</span> bash -c <span class="s1">&#39;PATH=; ls /bin/bash&#39;</span>
</span><span class='line'><span class="go">/bin/bash</span>
</span></code></pre></td></tr></table></div></figure>


<h2>改行対応</h2>

<p>いろいろ試していると改行を含む <code>PATH</code> を扱えないことに気づいたのですが、
<code>-d $'\0'</code> (以下の例ではコマンドラインのエスケープでひどいことになっていますが) を
指定して区切り文字を変えると here string の末尾に付く改行も入力の一部として
扱われてしまうのでうまくいかないようでしたが、末尾の要素を <code>unset</code> で削除することで
良い感じになりました。</p>

<p><code>$'\0'</code> は NUL 文字で C 言語での終端文字なので、普通は <code>PATH</code> の途中に入らないことが期待できるので、ありえない文字として指定しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> bash -c <span class="s1">&#39;PATH=/bin; IFS=: read -d $&#39;</span><span class="s2">&quot;&#39;&quot;</span><span class="s1">&#39;\0&#39;</span><span class="s2">&quot;&#39;&quot;</span><span class="s1">&#39; -r -a path &lt;&lt;&lt;&quot;$PATH:&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/bin&quot; [1]=&quot;</span>
</span><span class='line'><span class="go">&quot;)&#39;</span>
</span><span class='line'><span class="gp">%</span> bash -c <span class="s1">&#39;PATH=/bin; IFS=: read -d $&#39;</span><span class="s2">&quot;&#39;&quot;</span><span class="s1">&#39;\0&#39;</span><span class="s2">&quot;&#39;&quot;</span><span class="s1">&#39; -r -a path &lt;&lt;&lt;&quot;$PATH:&quot;; unset path[-1]; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/bin&quot;)&#39;</span>
</span><span class='line'><span class="gp">%</span> bash -c <span class="s1">&#39;PATH=/foo$&#39;</span><span class="s2">&quot;&#39;&quot;</span><span class="s1">&#39;\n&#39;</span><span class="s2">&quot;&#39;&quot;</span><span class="s1">&#39;bar:/bin; IFS=: read -d $&#39;</span><span class="s2">&quot;&#39;&quot;</span><span class="s1">&#39;\0&#39;</span><span class="s2">&quot;&#39;&quot;</span><span class="s1">&#39; -r -a path &lt;&lt;&lt;&quot;$PATH:&quot;; unset path[-1]; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/foo</span>
</span><span class='line'><span class="go">bar&quot; [1]=&quot;/bin&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>わかりやすいようにファイルにして実行すると以下のような感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> cat /tmp/p.bash
</span><span class='line'><span class="go">PATH=/foo$&#39;\n&#39;bar:/bin</span>
</span><span class='line'><span class="go">IFS=: read -d $&#39;\0&#39; -r -a path &lt;&lt;&lt;&quot;$PATH:&quot;</span>
</span><span class='line'><span class="go">unset path[-1]</span>
</span><span class='line'><span class="go">declare -p path</span>
</span><span class='line'><span class="go">PATH=/foo$&#39;\n&#39;bar:/bin:</span>
</span><span class='line'><span class="go">IFS=: read -d $&#39;\0&#39; -r -a path &lt;&lt;&lt;&quot;$PATH:&quot;</span>
</span><span class='line'><span class="go">unset path[-1]</span>
</span><span class='line'><span class="go">declare -p path</span>
</span><span class='line'><span class="gp">%</span> bash /tmp/p.bash
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/foo</span>
</span><span class='line'><span class="go">bar&quot; [1]=&quot;/bin&quot;)&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/foo</span>
</span><span class='line'><span class="go">bar&quot; [1]=&quot;/bin&quot; [2]=&quot;&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>他の処理例</h2>

<p><code>/etc/group</code> くらいのデータになると awk などを使った方が良いと思いますが、
<code>/etc/group</code> (末尾に空文字列が入ることがある) のパースも良い感じにできるようです。</p>

<p>設定されていない状態でも構わなかったり、
末尾に空文字列が入らないことがわかっている <code>/etc/passwd</code> などの場合は
bash の組み込みコマンドだけでいけそうです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> cat /tmp/t.bash
</span><span class='line'><span class="gp">#</span>!/bin/bash
</span><span class='line'><span class="go">sed &#39;s/$/:/&#39; /etc/group | while IFS=: read -r -a group; do</span>
</span><span class='line'><span class="go">  declare -p group</span>
</span><span class='line'><span class="go">done</span>
</span><span class='line'><span class="gp">%</span> bash /tmp/t.bash
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;root&quot; [1]=&quot;x&quot; [2]=&quot;0&quot; [3]=&quot;&quot;)&#39;</span>
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;daemon&quot; [1]=&quot;x&quot; [2]=&quot;1&quot; [3]=&quot;&quot;)&#39;</span>
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;bin&quot; [1]=&quot;x&quot; [2]=&quot;2&quot; [3]=&quot;&quot;)&#39;</span>
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;sys&quot; [1]=&quot;x&quot; [2]=&quot;3&quot; [3]=&quot;&quot;)&#39;</span>
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;adm&quot; [1]=&quot;x&quot; [2]=&quot;4&quot; [3]=&quot;syslog,vagrant&quot;)&#39;</span>
</span><span class='line'><span class="go">(略)</span>
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;lpadmin&quot; [1]=&quot;x&quot; [2]=&quot;114&quot; [3]=&quot;vagrant&quot;)&#39;</span>
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;sambashare&quot; [1]=&quot;x&quot; [2]=&quot;115&quot; [3]=&quot;vagrant&quot;)&#39;</span>
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;vboxsf&quot; [1]=&quot;x&quot; [2]=&quot;999&quot; [3]=&quot;&quot;)&#39;</span>
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;scanner&quot; [1]=&quot;x&quot; [2]=&quot;116&quot; [3]=&quot;&quot;)&#39;</span>
</span><span class='line'><span class="go">declare -a group=&#39;([0]=&quot;colord&quot; [1]=&quot;x&quot; [2]=&quot;117&quot; [3]=&quot;&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>最終的には</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">IFS</span><span class="o">=</span>: <span class="nb">read</span> -d <span class="s1">$&#39;\0&#39;</span> -r -a path <span class="o">&lt;&lt;&lt;</span><span class="s2">&quot;$PATH:&quot;</span>
</span><span class='line'><span class="nb">unset </span>path<span class="o">[</span>-1<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>で <code>PATH</code> を配列に変換できることがわかりました。</p>

<p>入力データに改行がないとわかっているなら <code>-d $'\0'</code> などは省略できるので、
入力データの性質に応じて適度に手を抜きつつ処理をするのが良いのではないでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bash で PATH を配列に分解]]></title>
    <link href="http://blog.n-z.jp/blog/2016-10-06-bash-path-to-array.html"/>
    <updated>2016-10-06T23:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/bash-path-to-array</id>
    <content type="html"><![CDATA[<p>zsh だと <code>PATH</code> と同期している配列変数として <code>path</code> があるのですが、
bash にはそういうものがなくて困ったので、分解する方法を考えてみました。</p>

<!--more-->


<h2>結論</h2>

<p>先に結論を書いておくと、最終的には <code>IFS=: read -r -a path &lt;&lt;&lt;"$PATH"</code> という方法で分解できました。</p>

<p>2016-10-07 追記: 詳細は<a href="http://blog.n-z.jp/blog/2016-10-07-bash-path-to-array-again.html">続き</a> に書きましたが、改行などに対応できていませんでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> bash -c <span class="s1">&#39;IFS=: read -r -a path &lt;&lt;&lt;&quot;$PATH&quot;; declare -p path&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように動作確認できます。</p>

<p>declare で表示というのは <a href="http://yonchu.hatenablog.com/entry/2013/07/09/230656" title="シェルスクリプトのデバッグは typeset または declare を使うと良いかも - よんちゅBlog">シェルスクリプトのデバッグは typeset または declare を使うと良いかも - よんちゅBlog</a> を参考にしました。</p>

<h2><code>-r</code> オプション</h2>

<p><code>-r</code> オプションは <code>read</code> コマンドを使うときの定石ですが、具体的には <code>\:</code> のような並びがあるときに影響がありました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/bin:/tmp/foo\:/tmp/bar&quot;</span> bash -c <span class="s1">&#39;IFS=: read -r -a path &lt;&lt;&lt;&quot;$PATH&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/bin&quot; [1]=&quot;/tmp/foo\\&quot; [2]=&quot;/tmp/bar&quot;)&#39;</span>
</span><span class='line'><span class="gp">%</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/bin:/tmp/foo\:/tmp/bar&quot;</span> bash -c <span class="s1">&#39;IFS=: read -a path &lt;&lt;&lt;&quot;$PATH&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/bin&quot; [1]=&quot;/tmp/foo:/tmp/bar&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際のパスの挙動は <code>-r</code> がある場合と同じようでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> mkdir /tmp/foo<span class="se">\\</span>
</span><span class='line'><span class="gp">%</span> <span class="nb">echo echo </span>hoge &gt; /tmp/foo<span class="se">\\</span>/hoge
</span><span class='line'><span class="gp">%</span> chmod +x /tmp/foo<span class="se">\\</span>/hoge
</span><span class='line'><span class="gp">%</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/bin:/tmp/foo\:/tmp/bar&quot;</span> bash -c <span class="s1">&#39;IFS=: read -a path &lt;&lt;&lt;&quot;$PATH&quot;; for p in &quot;${path[@]}&quot;; do test -x &quot;$p/hoge&quot; &amp;&amp; &quot;$p/hoge&quot;; done&#39;</span>
</span><span class='line'><span class="go">PATH=&quot;/bin:/tmp/foo\:/tmp/bar&quot; bash -c &#39;IFS=: read -r -a path &lt;&lt;&lt;&quot;$PATH&quot;; for p in &quot;${path[@]}&quot;; do test -x &quot;$p/hoge&quot; &amp;&amp; &quot;$p/hoge&quot;; done&#39;</span>
</span><span class='line'><span class="go">hoge</span>
</span><span class='line'><span class="gp">%</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/bin:/tmp/foo\:/tmp/bar&quot;</span> hoge
</span><span class='line'><span class="go">hoge</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>-d</code> オプション</h2>

<p><code>-d</code> オプションというのもあったので試してみたのですが、そこで完全に読み込み終了になってしまって、期待した動作にはなりませんでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/bin:/tmp/foo\:/tmp/bar&quot;</span> bash -c <span class="s1">&#39;read -d : -r -a path &lt;&lt;&lt;&quot;$PATH&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/bin&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>-a</code> オプション</h2>

<p><code>-a</code> オプションはこのように複数の変数を指定する代わりにひとつの変数を指定して配列を代入してくれるオプションでした。</p>

<p><code>-a</code> オプションがないと指定した変数のうち、最後に残り全て入ってしまうようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">PATH=&quot;/bin:/tmp/foo\:/tmp/bar:/tmp/baz&quot; bash -c &#39;IFS=: read -r path1 path2 path3 &lt;&lt;&lt;&quot;$PATH&quot;; declare -p path1 path2 path3&#39;</span>
</span><span class='line'><span class="go">declare -- path1=&quot;/bin&quot;</span>
</span><span class='line'><span class="go">declare -- path2=&quot;/tmp/foo\\&quot;</span>
</span><span class='line'><span class="go">declare -- path3=&quot;/tmp/bar:/tmp/baz&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>here string</h2>

<p><code>&lt;&lt;&lt;word</code> は <code>echo word |</code> のようなもので、標準入力に <code>word</code> を渡してくれる機能です。</p>

<h2>IFS</h2>

<p><code>read</code> などの単語区切りです。
デフォルトは空白、タブ、改行です。</p>

<p>ずっと変えてしまうと影響が大きすぎるので、 <code>read</code> の行だけ変更するようにしています。</p>

<p>また、このやり方を使うことで空白の入ったディレクトリを含むパスもうまく扱えます。</p>

<h2>カレントディレクトリを表す空のパスの扱い</h2>

<p>頭や途中に入った空文字列 (カレントディレクトリを表す) は扱えたのですが、末尾にある場合はうまくいきませんでした。</p>

<p>セキュリティ上の問題もあるので、普通は設定しないと思うので、対応しなくても問題はないと思いますが、完全に変換したい場合は特別扱いを追加する必要がありそうでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span>  bash -c <span class="s1">&#39;PATH=:/bin; IFS=: read -r -a path &lt;&lt;&lt;&quot;$PATH&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;&quot; [1]=&quot;/bin&quot;)&#39;</span>
</span><span class='line'><span class="gp">%</span>  bash -c <span class="s1">&#39;PATH=/bin::/bin; IFS=: read -r -a path &lt;&lt;&lt;&quot;$PATH&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/bin&quot; [1]=&quot;&quot; [2]=&quot;/bin&quot;)&#39;</span>
</span><span class='line'><span class="gp">%</span>  bash -c <span class="s1">&#39;PATH=/bin:; IFS=: read -r -a path &lt;&lt;&lt;&quot;$PATH&quot;; declare -p path&#39;</span>
</span><span class='line'><span class="go">declare -a path=&#39;([0]=&quot;/bin&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>zsh には元から <code>path</code> があるし、 <code>/bin/sh</code> には配列がないので bash 限定ではありますが、
<code>IFS=: read -r -a path &lt;&lt;&lt;"$PATH"</code> で実用上問題なく変換できるということがわかったので、必要な時には使うと良いのではないでしょうか。</p>

<p>2016-10-07 追記: 末尾の空文字列や改行に対応した<a href="http://blog.n-z.jp/blog/2016-10-07-bash-path-to-array-again.html">続き</a>を書きました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React On Rails の react-webpack-rails-tutorial を Dokku で試してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-10-02-react-webpack-rails-tutorial-on-dokku.html"/>
    <updated>2016-10-02T22:24:55+09:00</updated>
    <id>http://blog.n-z.jp/blog/react-webpack-rails-tutorial-on-dokku</id>
    <content type="html"><![CDATA[<p>react.js を rails と組み合わせて使うにはどうすればいいんだろうと思って調べてみると、<code>react-rails</code> gem の他に <code>react_on_rails</code> gem というもっとまとめていろんなことの面倒を見てくれるものがあったので、そのサンプルアプリである
<a href="https://github.com/shakacode/react-webpack-rails-tutorial" title="react-webpack-rails-tutorial">react-webpack-rails-tutorial</a>
を <a href="https://github.com/dokku/dokku/" title="Dokku">Dokku</a> にデプロイできるか試してみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>OS X El Capitan 10.11.6</li>
<li>VirtualBox 5.1.6</li>
<li>Vagrant 1.8.6</li>
<li>Dokku master (0.7.2 からちょっと変更が進んだもの)</li>
<li>react-webpack-rails-tutorial master</li>
<li>ruby 2.3.1</li>
<li>rails 5.0.0</li>
<li>node 6.7.0</li>
</ul>


<h2>環境構築</h2>

<p>まず <a href="https://github.com/dokku/dokku">https://github.com/dokku/dokku</a> を git clone したディレクトリで作業します。</p>

<p>vagrant の provision から何度も試すようなら、 apt で日本のミラーを使うように shell provisioning を追加しておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/Vagrantfile b/Vagrantfile</span>
</span><span class='line'><span class="gh">index 4f3fc6c..bccceb9 100644</span>
</span><span class='line'><span class="gd">--- a/Vagrantfile</span>
</span><span class='line'><span class="gi">+++ b/Vagrantfile</span>
</span><span class='line'><span class="gu">@@ -47,6 +47,7 @@ Vagrant::configure(&quot;2&quot;) do |config|</span>
</span><span class='line'>       vb.customize [&quot;modifyvm&quot;, :id, &quot;--natdnsproxy1&quot;, &quot;off&quot;]
</span><span class='line'>     end
</span><span class='line'>
</span><span class='line'><span class="gi">+    vm.vm.provision :shell, :inline =&gt; &quot;sed -i -e &#39;s,//us\\.archive\\.ubuntu\\.com,//jp.archive.ubuntu.com,&#39; /etc/apt/sources.list&quot;</span>
</span><span class='line'>     vm.vm.provision :shell, :inline =&gt; &quot;export DEBIAN_FRONTEND=noninteractive &amp;&amp; apt-get update &gt; /dev/null &amp;&amp; apt-get -qq -y install git &gt; /dev/null &amp;&amp; cd /root/dokku &amp;&amp; #{make_cmd}&quot;
</span><span class='line'>     vm.vm.provision :shell, :inline =&gt; &quot;cd /root/dokku &amp;&amp; make dokku-installer&quot;
</span><span class='line'>     vm.vm.provision :shell do |s|
</span></code></pre></td></tr></table></div></figure>


<p><code>vagrant up</code> します。
gliderlabs/herokuish の docker イメージのダウンロードなどもあるので時間がかかります。</p>

<h2>Web UI での設定</h2>

<p><a href="http://dokku.me/">http://dokku.me/</a> を開いて初期設定します。
<code>Hostname</code> を <code>dokku.me</code> に変更して <code>Use virtualhost naming for apps</code> にチェックを入れて <code>Finish Setup</code> を押します。</p>

<p>意図した動作かどうかはわかりませんが、この作業をしなくても <code>app-name.dokku.me</code> は使えました。
(<code>not-found-app.dokku.me</code> で初期設定画面は出てくるまま)</p>

<h2>初期設定</h2>

<p><code>/vagrant/tmp/init.sh</code> に以下のファイルをおいて実行します。
<code>tmp</code> は <code>.gitignore</code> に入っていてローカルな作業ファイルをおくのに都合が良いです。</p>

<p>内容としては以下のようなことをしています。</p>

<ul>
<li><code>docker</code> コマンドを <code>sudo</code> なしで呼べるように <code>docker</code> グループに <code>vagrant</code> ユーザーを追加</li>
<li><code>/home/dokku</code> を調べたりするときなどに都合が良いように <code>dokku</code> グループに <code>vagrant</code> ユーザーを追加</li>
<li>ruby などのダウンロードでタイムアウトしないように <code>CURL_TIMEOUT</code> を増やす</li>
<li><code>dokku run</code> などで一時的に作成されるコンテナーをデフォルトで削除するように <code>DOKKU_RM_CONTAINER</code> を設定</li>
<li><code>~/.ssh/known_hosts</code> がハッシュ化されているとどの行がどのホストかわからなくなるので <code>HashKnownHosts no</code> で無効化</li>
<li>あとで git push のときに使う <code>10.0.0.2</code> のホスト鍵を <code>~/.ssh/known_hosts</code> に追加</li>
<li>ssh の鍵ペアを作成して <code>dokku ssh-keys:add</code> で登録</li>
<li>ruby のビルドに必要なパッケージなどをインストール</li>
<li>anyenv, rbenv, ndenv をインストール</li>
<li><code>~/.gemrc</code> を作成してデフォルトでドキュメントのインストールを無効化</li>
<li>ndenv で最新の node をインストール</li>
</ul>


<p>デプロイするだけなら anyenv などは不要ですが、あとで開発環境としても動かしたかったので入れています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">set</span> -euo pipefail
</span><span class='line'><span class="nb">set</span> -x
</span><span class='line'><span class="nb">cd</span> /home/vagrant
</span><span class='line'>sudo usermod -aG docker vagrant
</span><span class='line'>sudo usermod -aG dokku vagrant
</span><span class='line'>dokku config:set --global <span class="nv">CURL_TIMEOUT</span><span class="o">=</span>120
</span><span class='line'>dokku config:set --global <span class="nv">DOKKU_RM_CONTAINER</span><span class="o">=</span>1
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -e <span class="s2">&quot;$HOME/.ssh/config&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;HashKnownHosts no&quot;</span> &gt;<span class="s2">&quot;$HOME/.ssh/config&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -e <span class="s2">&quot;$HOME/.ssh/known_hosts&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  ssh-keyscan -t ecdsa-sha2-nistp256 10.0.0.2 <span class="p">|</span> grep -v <span class="s1">&#39;#&#39;</span> &gt; <span class="s2">&quot;$HOME/.ssh/known_hosts&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -e <span class="s2">&quot;$HOME/.ssh/id_rsa&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  ssh-keygen -N <span class="s1">&#39;&#39;</span> -f <span class="s2">&quot;$HOME/.ssh/id_rsa&quot;</span>
</span><span class='line'>  sudo dokku ssh-keys:add vagrant <span class="s2">&quot;$HOME/.ssh/id_rsa.pub&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -z <span class="s2">&quot;$(dpkg -l | grep libsqlite3-dev)&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  sudo sed -i~ -e <span class="s1">&#39;s/us\.archive/jp.archive/&#39;</span> /etc/apt/sources.list
</span><span class='line'>  sudo apt-get update
</span><span class='line'>  sudo apt-get -y install autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm3 libgdbm-dev
</span><span class='line'>  sudo apt-get -y install libpq-dev
</span><span class='line'>  sudo apt-get -y install libsqlite3-dev
</span><span class='line'>  sudo apt-get -y install jq
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d ~/.anyenv <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  git clone https://github.com/riywo/anyenv.git ~/.anyenv
</span><span class='line'>  <span class="nb">echo</span> <span class="s1">&#39;export PATH=&quot;$HOME/.anyenv/bin:$PATH&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'>  <span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(anyenv init -)&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -z <span class="s2">&quot;$(command -v anyenv)&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$HOME/.anyenv/bin:$PATH&quot;</span>
</span><span class='line'>  <span class="nb">set</span> +x
</span><span class='line'>  <span class="nb">eval</span> <span class="s2">&quot;$(anyenv init - --no-rehash)&quot;</span>
</span><span class='line'>  <span class="nb">set</span> -x
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d ~/.anyenv/envs/rbenv <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  anyenv install rbenv
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -f ~/.gemrc <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  cat <span class="s">&lt;&lt;EOF &gt;~/.gemrc</span>
</span><span class='line'><span class="s">install: --no-rdoc --no-ri --format-executable</span>
</span><span class='line'><span class="s">update: --no-rdoc --no-ri --format-executable</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d <span class="s2">&quot;$HOME/.anyenv/envs/ndenv&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  anyenv install ndenv
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nv">node_version</span><span class="o">=</span><span class="k">$(</span>ndenv install -l <span class="p">|</span> grep <span class="s1">&#39;^ *v&#39;</span> <span class="p">|</span> tail -n1 <span class="p">|</span> xargs<span class="k">)</span>
</span><span class='line'><span class="k">if</span> ! ndenv versions <span class="p">|</span> grep -q <span class="s2">&quot;$node_version&quot;</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  ndenv install <span class="s2">&quot;$node_version&quot;</span>
</span><span class='line'>  ndenv global <span class="s2">&quot;$node_version&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h2>react-webpack-rails-tutorial のデプロイ</h2>

<p>一度 <code>exit</code> で抜けて <code>vagrant ssh</code> で入りなおしてグループの変更や anyenv などのインストールを反映します。</p>

<p><code>/vagrant/tmp/react-webpack-rails-tutorial.sh</code> に以下のファイルをおいて実行します。</p>

<p>内容としては以下のようなことをしています。</p>

<ul>
<li><a href="https://github.com/shakacode/react-webpack-rails-tutorial">https://github.com/shakacode/react-webpack-rails-tutorial</a> の取得</li>
<li>react-webpack-rails-tutorial アプリの作成 (リンク作業に必要)</li>
<li>dokku-postgres が入っていなければ入れる</li>
<li>react-webpack-rails-tutorial-db を作ってリンク</li>
<li>dokku という remote を追加</li>
<li><a href="https://github.com/heroku/heroku-buildpack-multi">https://github.com/heroku/heroku-buildpack-multi</a> を使うため <code>.buildpacks</code> を作成</li>
<li><code>rake db:migrate</code> の自動実行のため <code>app.json</code> を作成</li>
<li>デプロイ</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">set</span> -euo pipefail
</span><span class='line'><span class="nb">set</span> -x
</span><span class='line'><span class="nb">cd</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d react-webpack-rails-tutorial <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  git clone https://github.com/shakacode/react-webpack-rails-tutorial
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d /home/dokku/react-webpack-rails-tutorial <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  dokku apps:create react-webpack-rails-tutorial
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d /var/lib/dokku/plugins/available/postgres <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  sudo dokku plugin:install https://github.com/dokku/dokku-postgres.git <span class="o">||</span> :
</span><span class='line'>  sudo docker pull gliderlabs/herokuish
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -f /home/dokku/react-webpack-rails-tutorial/DOCKER_OPTIONS_RUN <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  dokku postgres:create react-webpack-rails-tutorial-db <span class="o">||</span> :
</span><span class='line'>  dokku postgres:link react-webpack-rails-tutorial-db react-webpack-rails-tutorial
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">cd </span>react-webpack-rails-tutorial
</span><span class='line'><span class="k">if</span> ! git remote <span class="p">|</span> grep -q dokku<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  git remote add dokku dokku@10.0.0.2:react-webpack-rails-tutorial
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>cat &gt;.buildpacks <span class="s">&lt;&lt;EOF</span>
</span><span class='line'><span class="s">https://github.com/heroku/heroku-buildpack-nodejs</span>
</span><span class='line'><span class="s">https://github.com/heroku/heroku-buildpack-ruby</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>git add .buildpacks
</span><span class='line'>git commit -m <span class="s1">&#39;Add .buildpacks&#39;</span> <span class="o">||</span> :
</span><span class='line'>cat <span class="s">&lt;&lt;EOF &gt;app.json</span>
</span><span class='line'><span class="s">{</span>
</span><span class='line'><span class="s">  &quot;scripts&quot;: {</span>
</span><span class='line'><span class="s">    &quot;dokku&quot;: {</span>
</span><span class='line'><span class="s">      &quot;predeploy&quot;: &quot;bundle exec rake db:migrate&quot;</span>
</span><span class='line'><span class="s">    }</span>
</span><span class='line'><span class="s">  }</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>git add app.json
</span><span class='line'>git commit -m <span class="s2">&quot;Set script.dokku.predeploy to app.json&quot;</span> <span class="o">||</span> :
</span><span class='line'>git push dokku master
</span></code></pre></td></tr></table></div></figure>


<h2>動作確認</h2>

<p>ブラウザーで <a href="http://react-webpack-rails-tutorial.dokku.me/">http://react-webpack-rails-tutorial.dokku.me/</a> を開いて動作確認します。</p>

<h2>.buildpacks の順番</h2>

<p><code>.buildpacks</code> で nodejs, ruby という順番で指定しましたが、逆の順番にすると以下のエラーで失敗しました。
<code>react_on_rails</code> で使っているので、 nodejs の方を先に入れる必要があるようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>-----&gt; Preparing app for Rails asset pipeline
</span><span class='line'>       Running: rake assets:precompile
</span><span class='line'>       cd client &amp;&amp; npm run build:production
</span><span class='line'>       sh: 1: npm: not found
</span><span class='line'>       rake aborted!
</span><span class='line'>       Command failed with status (127): [cd client &amp;&amp; npm run build:production...]
</span><span class='line'>       /tmp/build/vendor/bundle/ruby/2.3.0/gems/react_on_rails-6.1.0/lib/tasks/assets.rake:33:in `block (3 levels) in &lt;top (required)&gt;&#39;
</span><span class='line'>       /tmp/build/vendor/bundle/ruby/2.3.0/gems/rake-11.2.2/exe/rake:27:in `&lt;top (required)&gt;&#39;
</span><span class='line'>       Tasks: TOP =&gt; assets:precompile =&gt; react_on_rails:assets:compile_environment =&gt; react_on_rails:assets:webpack
</span><span class='line'>       (See full trace by running task with --trace)
</span><span class='line'>       !
</span><span class='line'>       !     Precompiling assets failed.
</span><span class='line'>       !
</span></code></pre></td></tr></table></div></figure>


<h2>開発環境設定</h2>

<p><a href="https://github.com/shakacode/react-webpack-rails-tutorial#basic-demo-setup">https://github.com/shakacode/react-webpack-rails-tutorial#basic-demo-setup</a> を参考にして設定します。</p>

<p><code>/vagrant/tmp/react-webpack-rails-tutorial-dev.sh</code> に以下のファイルをおいて実行します。</p>

<p>内容としては以下のようなことをしています。</p>

<ul>
<li><code>.ruby-version</code> で指定されている ruby のインストール
<a href="https://github.com/thoughtbot/capybara-webkit/wiki/Installing-Qt-and-compiling-capybara-webkit#ubuntu-trusty-1404">https://github.com/thoughtbot/capybara-webkit/wiki/Installing-Qt-and-compiling-capybara-webkit#ubuntu-trusty-1404</a> のインストール (OS X 上で直接試したときにはこの依存をインストールする部分が大変でした)</li>
<li>余計な差分が出ないように <code>Gemfile.lock</code> に記録されているバージョンの bundler をインストール</li>
<li><code>bundle install</code> で依存している gem をインストール</li>
<li><code>npm install</code> で依存している node modules をインストール</li>
<li>sqlite3 のデータベース作成</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">set</span> -euo pipefail
</span><span class='line'><span class="nb">set</span> -x
</span><span class='line'><span class="nb">cd</span> <span class="s2">&quot;$HOME/react-webpack-rails-tutorial&quot;</span>
</span><span class='line'><span class="nv">ruby_version</span><span class="o">=</span><span class="s2">&quot;$(&lt;.ruby-version)&quot;</span>
</span><span class='line'><span class="k">if</span> ! rbenv versions <span class="p">|</span> grep -q <span class="s2">&quot;$ruby_version&quot;</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  rbenv install <span class="s2">&quot;$ruby_version&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>sudo apt-get -y install libqt4-dev libqtwebkit-dev
</span><span class='line'><span class="nv">bundler_version</span><span class="o">=</span><span class="k">$(</span>grep -A1 <span class="s1">&#39;BUNDLED WITH&#39;</span> Gemfile.lock <span class="p">|</span> tail -n1 <span class="p">|</span> tr -d <span class="s1">&#39; &#39;</span><span class="k">)</span>
</span><span class='line'><span class="k">if</span> ! gem list <span class="p">|</span> grep -q bundler<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  gem install bundler -v <span class="s2">&quot;$bundler_version&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>bundle install
</span><span class='line'>npm install
</span><span class='line'>rake db:setup
</span></code></pre></td></tr></table></div></figure>


<h2>開発環境追加設定</h2>

<p><code>foreman start -f Procfile.hot</code> で起動して
<a href="http://dokku.me:5000/">http://dokku.me:5000/</a> で表示を確認すると「FATAL: Listen error: unable to monitor directories for changes. Visit <a href="https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers">https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers</a> for info on how to fix this.」というエラーになるので、サイトに書いてある通り、
<code>echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</code>
を実行しました。</p>

<p>実行前の <code>cat /proc/sys/fs/inotify/max_user_watches</code> は 8192 でした。</p>

<p>起動途中だと <code>ActionView::Template::Error (No such file or directory @ rb_file_s_mtime - app/assets/webpack/server-bundle.js):</code> というエラーになるので少し待てば良いようです。</p>

<p>しかし、次にアクセスしてみるとなぜか hot-assets が落ちてしまってうまく動きませんでした。
そして <code>ps x</code> でプロセスを確認するとちゃんと終了せずに残ってしまっているプロセスがあるので <code>pkill -f puma</code>, <code>pkill node</code> で終了させる必要がありました。</p>

<p>表示できても assets として <code>http://localhost:3500/</code> を参照しているため、ポートフォワーディングの設定追加が必要そうでした。</p>

<h2>Procfile.static</h2>

<p><code>foreman start -f Procfile.static</code> で起動して <code>http://dokku.me:5000/</code> を開いたところ、開けることもありましたが、落ちることも多くて安定しませんでした。</p>

<h2>まとめ</h2>

<p>Vagrant の VM は開発環境としてはなぜか安定しませんでしたが、 Dokku をデプロイ先としては安定して使えたので、
<code>react_on_rails</code> は開発対象の選択肢として入れても良さそうな感じがしました。</p>

<p>開発環境として OS X 上で直接動かしたときは問題なく動いたので、<code>localhost</code> ではなく <code>10.0.2.2</code> を使ってしまったのが不具合の原因だったのかもしれませんが、もう少し調べてみないとなんとも言えません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2要素認証を設定し直した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-09-25-update-2fa.html"/>
    <updated>2016-09-25T22:59:39+09:00</updated>
    <id>http://blog.n-z.jp/blog/update-2fa</id>
    <content type="html"><![CDATA[<p>Google Authenticator を入れているデバイスを買い換えたので、2要素認証 (2FA: two-factor authentication) (サービスによっては MFA: Multi-factor authentication) を設定し直してみました。</p>

<!--more-->


<h2>2要素認証一般の話</h2>

<ul>
<li>今回使用しているのは TOTP という RFC にもなっている規格なので Google に依存しているわけではありません</li>
<li><a href="https://support.apple.com/ja-jp/HT204915" title="Apple ID の 2 ファクタ認証">Apple ID の 2 ファクタ認証</a> は TOTP ではなさそうです</li>
<li><a href="https://itunes.apple.com/jp/app/google-authenticator/id388497605?mt=8" title="Google Authenticator">Google Authenticator</a> (iOS) や <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;amp;hl=ja" title="Google 認証システム">Google 認証システム</a> (Android) がよく使われている気がします</li>
<li>Google 依存を避けたいのなら <a href="http://www.iij.ad.jp/smartkey/" title="IIJ SmartKey">IIJ SmartKey</a> や Microsoft Authenticator というのもあるようです</li>
<li>TOTP は QR コードかテキスト入力した秘密情報と時刻を元に認証用の数字を生成しているだけなので、複数の端末・アプリに同時に設定することも可能です (当然ですが、紛失した時のリスクは増加します)</li>
</ul>


<h2>github.com</h2>

<ul>
<li>ログインしておく</li>
<li>右上の自分のアイコンをクリックして Settings をクリック</li>
<li>Security をクリック</li>
<li>Two-factor authentication の Edit をクリック</li>
<li>パスワードの確認が入る</li>
<li>Reconfigure two-factor authentication をクリック</li>
<li>リカバリーコードと fallback SMS 設定には影響がないという説明を確認</li>
<li><a href="https://help.github.com/articles/configuring-two-factor-authentication-via-a-totp-mobile-app/">https://help.github.com/articles/configuring-two-factor-authentication-via-a-totp-mobile-app/</a> に対応アプリの説明あり</li>
<li>Set up using an app をクリック</li>
<li>QR コードをアプリでスキャン</li>
<li>アプリに表示されている6桁の数字を入力して Enable two-factor authentication をクリック</li>
</ul>


<h2>Google アカウント</h2>

<ul>
<li>ログインしておく</li>
<li><a href="https://myaccount.google.com/">https://myaccount.google.com/</a> から「Google へのログイン」をクリック</li>
<li>「2 段階認証プロセス」をクリック</li>
<li>パスワードを再入力</li>
<li>2 段階認証の確認コードを入力</li>
<li>「2 つ目の手順」の「認証システム アプリ （デフォルト）」のペンのアイコンをクリック</li>
<li>「登録された認証システム アプリ」ポップアップが出てきたので「変更」をクリック</li>
<li>「お使いのスマートフォンの種類」で「Android」が選択されていたのでそのまま「次へ」をクリック (iPhone を選ぶとたぶん説明が違う)</li>
<li>QR コードをアプリでスキャン</li>
<li>「次へ」をクリック</li>
<li>アプリに表示されている6桁の数字を入力して「確認」をクリック</li>
<li>「完了」をクリック</li>
</ul>


<h2>Evernote</h2>

<ul>
<li>ログインする</li>
<li>左下のアイコンから「設定」を開く</li>
<li>「セキュリティ概要」を開く</li>
<li>「2 段階認証が有効です」になっているので「設定を管理」をクリック</li>
<li>再設定はなさそうなので「2 段階認証を無効化」で一度無効化</li>
<li>「2 段階認証を無効化しますか？」が出てきたので「確認」をクリック</li>
<li>「2 段階認証が有効化されていません」になったので「有効化」をクリック</li>
<li>説明が出てくるので「続ける」をクリック</li>
<li>重要事項が出てくるのでさらに「続ける」をクリック</li>
<li>メールアドレスを確認が出てくるので「確認用Eメールを送信する」をクリック</li>
<li>メールを確認して確認コードを入力して「続ける」をクリック</li>
<li>「携帯電話番号を入力」で「日本 (+81)」のまま「90-xxxx-yyyy」のように入力して「続ける」をクリック</li>
<li>SMS で確認コードが届くので確認コードを入力して「続ける」をクリック</li>
<li>「（任意）バックアップ用電話番号を設定」が出てくるので左下の「スキップ」をクリック</li>
<li>「Google 認証システムを入手する」の説明が出てくるので「iOS で続行」をクリック (一番上にあったので)</li>
<li>QR コードをアプリでスキャン</li>
<li>アプリに表示されている6桁の数字を入力して「続ける」をクリック</li>
<li>「バックアップコード」が表示されるのでコピーするなり印刷するなりして安全な場所に保存 (個人的には gpg で暗号化したファイルに保存している)</li>
<li>「続ける」をクリック</li>
<li>「バックアップコードを入力」でバックアップコードのひとつを入力して「セットアップを完了」(ここで入力しても無効にはならない)</li>
<li>「2 段階認証のセットアップが完了しました」の説明が出てくるので「完了」をクリック</li>
<li>「2 段階認証が有効です」になっているので、必要なら「設定を管理」からアプリケーション用パスワードを再設定していく必要がありそう (使っていなかったので不明)</li>
</ul>


<h2>live.jp</h2>

<ul>
<li>ログインする</li>
<li>右上のアカウント画像から「アカウントの表示」をクリック</li>
<li>上のところから「セキュリティとプライバシー」をクリック</li>
<li>「アカウント セキュリティ」の「その他のセキュリティ設定」をクリック</li>
<li>「認証アプリ」から「本人確認アプリをセットアップ」をクリック</li>
<li>「認証アプリの設定」に入るので「アプリをインストールするモバイル デバイス」から「iPhone、iPad、または iPod touch」を選択して「次へ」をクリック</li>
<li>Microsoft Authenticator で「個人のアカウント」を追加</li>
<li>同様に Android の設定の場合</li>
<li>「認証アプリの設定」に入るので「アプリをインストールするモバイル デバイス」から「Android」を選択して「次へ」をクリック</li>
<li>Microsoft Authenticator で「個人のアカウント」を追加</li>
<li>同様に TOTP アプリの場合</li>
<li>「認証アプリの設定」で「その他」を選択して「次へ」をクリック</li>
<li>「この設定を行うと、以前に認証アプリを使って生成し、設定したコードがすべて無効になります。続行してもよろしいですか?」という確認が出てくるので「次へ」をクリック</li>
<li>QR コードをアプリでスキャン</li>
<li>「アプリによって生成されたコード」にアプリに表示されている6桁の数字を入力して「次へ」をクリック</li>
</ul>


<p>ログイン時に通知で許可するか拒否するか出てくるようになりました。
「その他」で TOTP の設定をするとそちらが優先されるようになりましたが、どちらが優先されるかは最後にどちらを使ったかで決まるようです。</p>

<p>TOTP から Microsoft Authenticator への通知への切り替えは「Microsoft アカウント アプリに本人確認要求を送ります。」でできて、通知から TOTP への切り替えは「問題が発生した場合」をクリックすると出てくる「セキュリティ コードを入力してください」でできるようです。</p>

<p>Microsoft Authenticator の方は通知で認証できたり、表示されているのが 8 桁だったりして、
Microsoft のアカウントの認証に対しては TOTP で一般的な 6 桁ではないので、
他の方式なのかもしれないと思って、ちょっと調べてみたのですが、
よくわかりませんでした。</p>

<h2>Dropbox</h2>

<ul>
<li>ログインする</li>
<li>右上のアカウントのところから「設定」をクリック</li>
<li>「セキュリティ」タブをクリック</li>
<li>「2 段階認証」の「主要」の「認証アプリ」の「編集」をクリック</li>
<li>パスワードを入力して「次へ」をクリック</li>
<li>「モバイル アプリを使用」を選んだまま「次へ」をクリック</li>
<li>QR コードをアプリでスキャン</li>
<li>「次へ」をクリック</li>
<li>対応アプリについては <a href="https://www.dropbox.com/help/363#2fa-apps">https://www.dropbox.com/help/363#2fa-apps</a> に説明あり</li>
<li>アプリに表示されている6桁の数字を入力して「確認」をクリック</li>
<li>「予備の携帯番号 （オプション）」に「日本 (+81)」と「90xxxxyyyy」のように入力されていたのでそのまま「次へ」をクリック</li>
</ul>


<p>セキュリティの画面に戻って設定完了しました。</p>

<h2>amazon.com</h2>

<p>root-account-mfa-device とだけ出ていて、何のものなのかわかりにくかったのですが、
Amazon Product Advertising API で使っている amazon.com のものでした。</p>

<p>Amazon Product Advertising API で使っているだけなので、AWS の無料期間を始めないように注意しながら探しました。</p>

<ul>
<li><a href="https://console.aws.amazon.com/iam/home?#security_credential">https://console.aws.amazon.com/iam/home?#security_credential</a> の「Multi-Factor Authentication（MFA）」</li>
<li>「再同期」は意味がなかったので「無効化」してから「MFA の有効化」をしなおしました</li>
<li>「仮想 MFA デバイス」を選んで「次のステップ」</li>
<li>対応アプリの説明は <a href="https://aws.amazon.com/jp/iam/details/mfa/">https://aws.amazon.com/jp/iam/details/mfa/</a></li>
<li>説明を読んで「次のステップ」</li>
<li>QR コードをアプリでスキャン</li>
<li>アプリに表示されている6桁の数字を「認証コード1」に入力して、しばらく待って表示が変わったら「認証コード2」に入力して「仮想 MFA の有効化」</li>
<li>「MFA デバイスは正常に関連付けられました。」と出るので「完了」</li>
</ul>


<h2>さくらの会員メニュー</h2>

<ul>
<li>ログインする</li>
<li>説明ページ: <a href="https://help.sakura.ad.jp/hc/ja/articles/206057222">https://help.sakura.ad.jp/hc/ja/articles/206057222</a></li>
<li>「2段階認証の設定」をクリックする (わかりにくいがタイトルっぽいところがリンクにもなっている)</li>
<li>「※QRコードを発行・表示できるのは一度のみです。紛失した場合、一度設定を「無効」にする必要があります。」とあるので一度「無効」にして「設定変更」をクリック</li>
<li>確認が出るので「無効化」をクリック</li>
<li>再び「有効」にして「設定変更」をクリック</li>
<li>「2段階認証設定」をクリック</li>
<li>「QRコードを発行する」をクリック</li>
<li>QR コードをアプリでスキャン</li>
<li>「認証コード入力画面へ」をクリック</li>
<li>認証コードを入力して「ログイン(認証)」をクリック</li>
<li>「QRコード発行済み」になっていれば2FAは設定完了</li>
<li>さらに「バックアップコードを作成」をクリック</li>
<li>「現在のバックアップコードを表示する」をクリック</li>
<li>バックアップコードを安全な場所に保管</li>
</ul>


<h2>libpam-google-authenticator</h2>

<ul>
<li>ログインする</li>
<li><code>google-authenticator</code> コマンドを実行して <code>.google_authenticator</code> ファイルを上書きする</li>
<li>途中で表示される QR コードをアプリでスキャン</li>
<li>emergency scratch codes (バックアップコード) も再発行されるので安全な場所に控えておく</li>
</ul>


<h2>まとめ</h2>

<p>再設定機能があるサービスは再設定がしやすくて良かったのですが、そういう機能がないところは一時的に無効にしてセキュリティレベルが下がってしまうのが気になりました。</p>

<p>どちらが良いのかはわかりませんが、再設定によってバックアップコードが影響を受けないところと再発行のところがあるのも気になりました。</p>

<p>二要素認証 (多要素認証) はセキュリティにとって重要なものなので、デバイスの買い替えなどの適当なタイミングで再設定できたのは良い機会だったのかと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bundled gem と default gem の違いの具体例]]></title>
    <link href="http://blog.n-z.jp/blog/2016-09-13-bundled-gem-and-default-gem-more.html"/>
    <updated>2016-09-13T23:33:33+09:00</updated>
    <id>http://blog.n-z.jp/blog/bundled-gem-and-default-gem-more</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2016-09-10-bundled-gem-and-default-gem.html">bundled gem と default gem の違い</a>で概要は説明しましたが、具体的にどうなっているのか試してみました。</p>

<!--more-->


<h2>動作確認環境</h2>

<ul>
<li>Mac OS X Yosemite (10.10.5)</li>
<li>homebrew</li>
<li>rbenv 1.0.0</li>
<li>ruby-build v20160913</li>
<li>ruby 2.4.0-preview2, 2.3.1</li>
<li>bundler 1.13.0, 1.12.5</li>
<li>activesupport 5.0.0.1</li>
<li>rdoc 4.2.1, 5.0.0.beta2</li>
</ul>


<h2>クリーンな 2.4.0-preview2 を準備</h2>

<p>homebrew で入れた rbenv + ruby-build を使って 2.4.0-preview2 をインストールしました。
bundler も必要なのでインストールして、普通の gem の例として activesupport も入れておきました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rbenv install 2.4.0-preview2
</span><span class='line'>Downloading ruby-2.4.0-preview2.tar.bz2...
</span><span class='line'>-&gt; https://cache.ruby-lang.org/pub/ruby/2.4/ruby-2.4.0-preview2.tar.bz2
</span><span class='line'>Installing ruby-2.4.0-preview2...
</span><span class='line'>Installed ruby-2.4.0-preview2 to /Users/kazu/.rbenv/versions/2.4.0-preview2
</span><span class='line'>% rbenv shell 2.4.0-preview2
</span><span class='line'>% gem list
</span><span class='line'>
</span><span class='line'>*** LOCAL GEMS ***
</span><span class='line'>
</span><span class='line'>bigdecimal (default: 1.2.8)
</span><span class='line'>did_you_mean (1.0.2)
</span><span class='line'>io-console (default: 0.4.6)
</span><span class='line'>json (default: 2.0.2)
</span><span class='line'>minitest (5.9.0)
</span><span class='line'>net-telnet (0.1.1)
</span><span class='line'>openssl (default: 2.0.0.beta.2)
</span><span class='line'>power_assert (0.3.1)
</span><span class='line'>psych (default: 2.1.1)
</span><span class='line'>rake (11.2.2)
</span><span class='line'>rdoc (default: 5.0.0.beta2)
</span><span class='line'>test-unit (3.2.1)
</span><span class='line'>xmlrpc (0.1.1)
</span><span class='line'>% gem install bundler
</span><span class='line'>Fetching: bundler-1.13.0.gem (100%)
</span><span class='line'>Successfully installed bundler-1.13.0
</span><span class='line'>1 gem installed
</span><span class='line'>% gem install activesupport
</span><span class='line'>Fetching: i18n-0.7.0.gem (100%)
</span><span class='line'>Successfully installed i18n-0.7.0
</span><span class='line'>Fetching: thread_safe-0.3.5.gem (100%)
</span><span class='line'>Successfully installed thread_safe-0.3.5
</span><span class='line'>Fetching: tzinfo-1.2.2.gem (100%)
</span><span class='line'>Successfully installed tzinfo-1.2.2
</span><span class='line'>Fetching: concurrent-ruby-1.0.2.gem (100%)
</span><span class='line'>Successfully installed concurrent-ruby-1.0.2
</span><span class='line'>Fetching: activesupport-5.0.0.1.gem (100%)
</span><span class='line'>Successfully installed activesupport-5.0.0.1
</span><span class='line'>5 gems installed</span></code></pre></td></tr></table></div></figure>


<h2>bundler なしの環境での require</h2>

<p>普通の状態ではどれも問題なく require できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rbenv exec irb -r irb/completion --simple-prompt
</span><span class='line'>&gt;&gt; require 'json' # default gem
</span><span class='line'>=&gt; true
</span><span class='line'>&gt;&gt; require 'xmlrpc' # bundled gem
</span><span class='line'>=&gt; true
</span><span class='line'>&gt;&gt; require 'uri' # stdlib
</span><span class='line'>=&gt; true
</span><span class='line'>&gt;&gt; require 'active_support/all' # normal gem
</span><span class='line'>=&gt; true</span></code></pre></td></tr></table></div></figure>


<h2>bundler 環境でのテスト</h2>

<p>bundler 環境下では bundled gem は普通の gem と同じように読み込めないことがわかります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% mkdir /tmp/test
</span><span class='line'>% cd /tmp/test
</span><span class='line'>% bundle init
</span><span class='line'>Writing new Gemfile to /private/tmp/test/Gemfile
</span><span class='line'>% bundle exec irb -r irb/completion --simple-prompt
</span><span class='line'>&gt;&gt; require 'json' # default gem
</span><span class='line'>=&gt; true
</span><span class='line'>&gt;&gt; begin; require 'xmlrpc'; rescue LoadError; $!; end # bundled gem
</span><span class='line'>=&gt; #&lt;LoadError: cannot load such file -- xmlrpc&gt;
</span><span class='line'>&gt;&gt; require 'uri' # stdlib
</span><span class='line'>=&gt; false
</span><span class='line'>&gt;&gt; begin; require 'active_support/all'; rescue LoadError; $!; end # normal gem
</span><span class='line'>=&gt; #&lt;LoadError: cannot load such file -- active_support/all&gt;
</span><span class='line'>&gt;&gt;</span></code></pre></td></tr></table></div></figure>


<h2>uninstall</h2>

<p>default gem は uninstall ができなくて、bundled gem は uninstall できることがわかります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% gem uninstall json
</span><span class='line'>ERROR:  While executing gem ... (Gem::InstallError)
</span><span class='line'>    gem "json" cannot be uninstalled because it is a default gem
</span><span class='line'>% gem uninstall xmlrpc
</span><span class='line'>Successfully uninstalled xmlrpc-0.1.1</span></code></pre></td></tr></table></div></figure>


<h2>Gemfile でバージョン指定</h2>

<p><code>Gemfile</code> でバージョン指定していれば default gem の代わりに指定したバージョンの gem が使われることがわかります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% echo "gem 'json', '2.0.0'" &gt;&gt; Gemfile
</span><span class='line'>% bundle install
</span><span class='line'>Fetching gem metadata from https://rubygems.org/.
</span><span class='line'>Fetching version metadata from https://rubygems.org/
</span><span class='line'>Resolving dependencies...
</span><span class='line'>Installing json 2.0.0 with native extensions
</span><span class='line'>Using bundler 1.13.0
</span><span class='line'>Bundle complete! 1 Gemfile dependency, 2 gems now installed.
</span><span class='line'>Use `bundle show [gemname]` to see where a bundled gem is installed.
</span><span class='line'>% bundle exec irb -r irb/completion --simple-prompt
</span><span class='line'>&gt;&gt; require 'json'
</span><span class='line'>=&gt; true
</span><span class='line'>&gt;&gt; JSON::VERSION
</span><span class='line'>=&gt; "2.0.0"</span></code></pre></td></tr></table></div></figure>


<h2>おかしなことが起こる例</h2>

<p>ruby 2.4 だと古い json 1.x が入らない関係で rdoc 4.x が入らなかったので、
ここだけ使用中の ruby 2.3.1 で検証しました。</p>

<h3>準備</h3>

<p>rubygems が古いため、 <code>default:</code> は付いていませんが、 4.2.1 が default gem です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rbenv shell 2.3.1
</span><span class='line'>% echo "gem 'rdoc', '= 5.0.0.beta2'" &gt;&gt; Gemfile
</span><span class='line'>% bundle install
</span><span class='line'>Warning: the running version of Bundler is older than the version that created the lockfile. We suggest you upgrade to the latest version of Bundler by running `gem install bundler`.
</span><span class='line'>Fetching gem metadata from https://rubygems.org/
</span><span class='line'>Fetching version metadata from https://rubygems.org/
</span><span class='line'>Resolving dependencies...
</span><span class='line'>Installing json 2.0.0 with native extensions
</span><span class='line'>Installing rdoc 5.0.0.beta2
</span><span class='line'>Using bundler 1.12.5
</span><span class='line'>Bundle complete! 2 Gemfile dependencies, 3 gems now installed.
</span><span class='line'>Use `bundle show [gemname]` to see where a bundled gem is installed.
</span><span class='line'>% gem list rdoc
</span><span class='line'>
</span><span class='line'>*** LOCAL GEMS ***
</span><span class='line'>
</span><span class='line'>rdoc (5.0.0.beta2, 4.2.1)</span></code></pre></td></tr></table></div></figure>


<h3>rdoc 5 で減ったファイルを探す</h3>

<p>探してみたところ、 <code>rdoc/markdown/literals_1_9.rb</code> が <code>rdoc/markdown/literals.rb</code> に改名されていてなくなっていたのを見つけたので、
これを使っておかしな挙動を確かめてみました。</p>

<h3>bundler 環境下で確認</h3>

<p>bundler 環境下では <code>Gemfile</code> で指定した 5.0.0.beta2 が読み込まれるのがわかります。</p>

<p>ここまでは良いのですが、 5.0.0.beta2 ではなくなっているファイルを <code>require 'rdoc/markdown/literals_1_9'</code> で読み込もうとすると、
default gem の 4.2.1 のファイルが (組み合わせがおかしいので警告が出つつ) 読み込めてしまいます。</p>

<p><code>$LOAD_PATH</code> を確認してみると、そういう挙動になる理由はわかるのですが、増減するファイルによっては何か気づきにくい問題が起きるかもしれません。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% bundle exec irb -r irb/completion --simple-prompt
</span><span class='line'>&gt;&gt; require 'rdoc'
</span><span class='line'>=&gt; true
</span><span class='line'>&gt;&gt; RDoc::VERSION
</span><span class='line'>=&gt; "5.0.0.beta2"
</span><span class='line'>&gt;&gt; require 'rdoc/markdown/literals_1_9'
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/2.3.0/rdoc/markdown/literals_1_9.rb:413: warning: already initialized constant RDoc::Markdown::Literals::Rules
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rdoc-5.0.0.beta2/lib/rdoc/markdown/literals.rb:409: warning: previous definition of Rules was here
</span><span class='line'>=&gt; true
</span><span class='line'>&gt;&gt; puts $LOAD_PATH
</span><span class='line'>/usr/local/Cellar/rbenv/1.0.0/rbenv.d/exec/gem-rehash
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.12.5/lib
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rdoc-5.0.0.beta2/lib
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/json-2.0.0/lib
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/extensions/x86_64-darwin-14/2.3.0-static/json-2.0.0
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/site_ruby/2.3.0
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/site_ruby/2.3.0/x86_64-darwin14
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/site_ruby
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/vendor_ruby/2.3.0
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/vendor_ruby/2.3.0/x86_64-darwin14
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/vendor_ruby
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/2.3.0
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/2.3.0/x86_64-darwin14
</span><span class='line'>=&gt; nil</span></code></pre></td></tr></table></div></figure>


<h3>gem which で確認</h3>

<p><code>gem which</code> でどのファイルが <code>require</code> で読み込まれるのか確認できるので、参考になるかもしれません。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% gem which rdoc/markdown/entities
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/2.3.0/rdoc/markdown/entities.rb
</span><span class='line'>% bundle exec gem which rdoc/markdown/entities
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rdoc-5.0.0.beta2/lib/rdoc/markdown/entities.rb
</span><span class='line'>% bundle exec gem which rdoc/markdown/literals_1_9
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/2.3.0/rdoc/markdown/literals_1_9.rb
</span><span class='line'>% bundle exec gem which rdoc/markdown/literals
</span><span class='line'>/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rdoc-5.0.0.beta2/lib/rdoc/markdown/literals.rb</span></code></pre></td></tr></table></div></figure>


<h2>普通は問題にならないであろう問題点</h2>

<p>基本的には Ruby コミッターしか影響しないはずなので、単なるおまけです。</p>

<p>どこに報告すればいいのかわからなかったので、とりあえず gist にメモを書いた (<a href="https://gist.github.com/znz/62946cbb55de4fe58a5101d7875a2ba1">rubygems with multi default gem problem</a>) のですが、Ruby コミッターのように開発版を上書きインストールし続けている環境を持っていると、
default gem として複数バージョンの gemspec を持ってしまうことがあり、実際には後から <code>make install</code> した方しか入っていないので、ダミーの gemspec だけ残っているバージョンを指定した時におかしなことになるという話です。</p>

<p>クリーンインストールしなおすなり、 <code>$(gem env gemdir)/specifications/default</code> の古い gemspec を消すなりすれば良いだけなので、そんなに困る問題でもないです。</p>

<h2>まとめ</h2>

<p>bundled gem と default gem の違いを実際の動作を元に比べてみました。
また、 bundler と組み合わせて問題が起きる可能性がある例をみてみました。
通常の使い方では問題が起きることはないと思いますが、トリビア的に知っておくとおもしろいかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bundled gem と default gem の違い]]></title>
    <link href="http://blog.n-z.jp/blog/2016-09-10-bundled-gem-and-default-gem.html"/>
    <updated>2016-09-10T18:55:55+09:00</updated>
    <id>http://blog.n-z.jp/blog/bundled-gem-and-default-gem</id>
    <content type="html"><![CDATA[<p>RubyKaigi 2016 の後の移動中に hsbt さんに bundled gem と default gem との違いについて聞いてみた話をまとめてみました。</p>

<!--more-->


<h2>違い</h2>

<ul>
<li>bundled gem は単なる gem で gem uninstall もできる普通の gem</li>
<li>default gem は

<ul>
<li>uninstall できない</li>
<li>bundler の <code>clean_env</code> 環境でも見える</li>
<li>bundler で別のバージョンを指定してインストールしていれば、通常の bundler の load path の挙動に従って、そちらが使われる</li>
<li>たとえば ruby 2.3.1 だと <code>lib/ruby/gems/2.3.0/gems/rdoc-4.2.1</code> に <code>bin/rdoc</code> と <code>bin/ri</code> しかなくて他は <code>lib/ruby/2.3.0/rdoc*</code> などの標準添付のところに入っている</li>
</ul>
</li>
</ul>


<p>というような違いだと聞きました。</p>

<p>調べてみたところ、他には</p>

<ul>
<li><code>$(gem env gemdir)/specifications/default</code> に <code>*.gemspec</code> ファイルが入っている</li>
<li>新しい rubygems だと <code>gem list</code> で <code>json (default: 2.0.2)</code> のように <code>default:</code> がつく</li>
</ul>


<p>という違いがあるようでした。</p>

<h2>続く</h2>

<p><a href="http://blog.n-z.jp/blog/2016-09-13-bundled-gem-and-default-gem-more.html">bundled gem と default gem の違いの具体例</a>に続きを書きました。</p>
]]></content>
  </entry>
  
</feed>
