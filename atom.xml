<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-07-26T21:53:48+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[62nd Ruby/Rails勉強会@関西に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-26-kansaiworkshop062.html"/>
    <updated>2014-07-26T13:27:09+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansaiworkshop062</id>
    <content type="html"><![CDATA[<p><a href="http://rubykansai.doorkeeper.jp/events/13160" title="62nd Ruby/Rails勉強会@関西">62nd Ruby/Rails勉強会@関西</a>
に参加しました。</p>

<!--more-->


<h2>スクレイピングの話</h2>

<p>後で資料は公開してくれるということで、メモはとらずに話をきいていましたが、
実際にどういうことに使っている話も多くて面白かったです。</p>

<p>資料は
<a href="http://www.slideshare.net/takurosasaki/ruby-crawler" title="Rubyで作るクローラー Ruby crawler">Rubyで作るクローラー Ruby crawler</a>
で公開されています。</p>

<h2>Rails Girls Osaka の話</h2>

<p><a href="http://railsgirls.com/osaka" title="Osaka 6-7th June 2014">Rails Girls Osaka 6-7th June 2014</a>
の話でした。
写真が多いので資料の公開はないということでした。</p>

<p>今後の予定としては、
<a href="http://railsgirls.jp/events/" title="近日開催のイベント">近日開催のイベント</a>
にはないですが、
<a href="http://railsgirls.com/events" title="Upcoming Events">Upcoming Events</a>
には
<a href="http://rubyhiroba.org/2014/" title="RubyHiroba 2014">RubyHiroba 2014</a>
での
<a href="http://rubyhiroba.org/2014/rails-girls.html" title="Rails Girls Tokyo 4th">Rails Girls Tokyo 4th</a>
も書いていました。</p>

<h2>Gemfile.local の話</h2>

<p>redmine とかでも使っている方法で、
追記せずに何か良い方法はないのかという相談でした。</p>

<h2>るびま (Rubyist Magazine) の話</h2>

<ul>
<li><a href="http://magazine.rubyist.net/">http://magazine.rubyist.net/</a></li>
<li>誤植などの指摘は <a href="https://github.com/rubima/rubima-support">https://github.com/rubima/rubima-support</a> へ。</li>
<li><a href="http://goo.gl/KpASY9">Rubyist Magazine 十周年へのメッセージ</a> 募集中</li>
</ul>


<h2>GitLab の Git Flow の話</h2>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=477416366X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<ul>
<li><a href="https://gitlab.com/gitlab-org/cookbook-gitlab/blob/master/README.md" title="GitLab Cookbook">GitLab Cookbook</a> のベースを作った。</li>
<li><a href="http://www.amazon.co.jp/gp/product/477416366X/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=477416366X&amp;linkCode=as2&amp;tag=znz-22">GitHub実践入門 ~Pull Requestによる開発の変革 (WEB+DB PRESS plus)</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=477416366X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> はおすすめと言っていました。</li>
<li><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.ja_JP.html" title="git-flow cheatsheet">git-flow cheatsheet</a></li>
<li><a href="https://guides.github.com/introduction/flow/index.html" title="Understanding the GitHub Flow · GitHub Guides">Understanding the GitHub Flow · GitHub Guides</a></li>
<li>GitLab Flow の提案</li>
<li>Git Flow について詳細に説明</li>
</ul>


<p>GitLab Flow は git flow を知っている人向けに大雑把に説明すると</p>

<ul>
<li>release ブランチは使わない。</li>
<li>develop ブランチの代わりに master ブランチを使う。</li>
<li>master ブランチの代わりに stable ブランチを作る。</li>
</ul>


<p>ということだと理解しました。</p>

<h2>Ruby 初級者向けレッスン 50回 ブロック</h2>

<p><code>block.call</code> の引数に複数渡すのがいいのか、配列でまとめて渡すのが良いのかという話はきいたことがなかったので、どういう話なのかちょっと気になりました。</p>

<p>多重代入について深入りすると大変そうなので、さらっと流したのはありだと思いました。</p>

<h2>@IT Rails4 入門記事をツッコもう</h2>

<p>ここはメモを取っていました。</p>

<ul>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1402/28/news047_2.html" title="開発現場でちゃんと使えるRails 4入門（1）：簡単インストールから始める初心者のためのRuby on Railsチュートリアル (2/3) - ＠IT">開発現場でちゃんと使えるRails 4入門（1）：簡単インストールから始める初心者のためのRuby on Railsチュートリアル (2/3) &ndash; ＠IT</a></li>
<li>rbenv 対 RVM</li>
<li>エディタは Sublime Text, Vim, Emacs が多くて、その他 Atom, Eclipse</li>
<li><code>rails new</code> の時の <code>--skip-bundle</code> と <code>bundle install --path vendor/bundle</code> の話</li>
<li><code>bundle exec</code> の話</li>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1405/16/news024.html" title="開発現場でちゃんと使えるRails 4入門（4）：現場で使えるか見極めたいRails 4.1の新機能8選 - ＠IT">開発現場でちゃんと使えるRails 4入門（4）：現場で使えるか見極めたいRails 4.1の新機能8選 &ndash; ＠IT</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zshの機能のみで既に存在しないディレクトリをcdrのリストから削除する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-25-compact-chpwd-recent-dirs.html"/>
    <updated>2014-07-25T21:54:57+09:00</updated>
    <id>http://blog.n-z.jp/blog/compact-chpwd-recent-dirs</id>
    <content type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/syohex/20140425/1398394421" title="既に存在しないディレクトリを cdrのリストから削除する - Life is very short">既に存在しないディレクトリを cdrのリストから削除する &ndash; Life is very short</a>
をみて perl を使っていて、
ファイル名の変更にも対応していなくてポータブルではないと思ったので、
zsh の機能のみで実装してみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>zsh 5.0.2</li>
</ul>


<h2>実装</h2>

<p>cdr の実装の中の
<code>chpwd_recent_add</code>
<code>chpwd_recent_dirs</code>
<code>chpwd_recent_filehandler</code>
の中を良くみてみると
引数なしで <code>chpwd_recent_filehandler</code> を呼び出すと
<code>$reply</code> に配列でディレクトリ一覧を返してくれて、
引数を渡すとファイルに保存してくれるとわかりました。</p>

<p>そこで、その間で <code>(N)</code> を使って存在しないディレクトリを除外すれば良いということで
以下の実装になりました。
<code>emulate -L zsh</code> などは参考にした部分にあったので、そのまま使っています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>my-compact-chpwd-recent-dirs <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    emulate -L zsh
</span><span class='line'>    setopt extendedglob
</span><span class='line'>    <span class="nb">local</span> -aU reply
</span><span class='line'>    integer history_size
</span><span class='line'>    autoload -Uz chpwd_recent_filehandler
</span><span class='line'>    chpwd_recent_filehandler
</span><span class='line'>    <span class="nv">history_size</span><span class="o">=</span><span class="nv">$#reply</span>
</span><span class='line'>    <span class="nv">reply</span><span class="o">=(</span><span class="k">${</span><span class="p">^reply</span><span class="k">}</span><span class="o">(</span>N<span class="o">))</span>
</span><span class='line'>    <span class="o">((</span> <span class="nv">$history_size</span> <span class="o">==</span> <span class="nv">$#reply</span> <span class="o">))</span> <span class="o">||</span> chpwd_recent_filehandler <span class="nv">$reply</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使い方としては</p>

<ul>
<li>必要に応じて手で <code>my-compact-chpwd-recent-dirs</code> を呼び出す</li>
<li><code>.zshrc</code> から起動時に <code>my-compact-chpwd-recent-dirs</code> を実行</li>
<li><code>add-zsh-hook chpwd my-compact-chpwd-recent-dirs</code> で毎回実行</li>
</ul>


<p>などが考えられます。</p>

<p><a href="http://blog.n-z.jp/blog/2014-07-17-peco-cdr.html" title="pecoとcdrなどを組み合わせてみた">pecoとcdrなどを組み合わせてみた</a>ときに、
<code>peco</code> に渡す前のところで <code>(N-/)</code> でフィルタリングしていたので、
個人的には必要に応じて手で呼び出す使い方にしようと思っています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant Cloudでboxを公開してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-21-vagrantcloud-box.html"/>
    <updated>2014-07-21T15:52:35+09:00</updated>
    <id>http://blog.n-z.jp/blog/vagrantcloud-box</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2014-07-18-wheezy-from-vagrant-cloud.html" title="Vagrant CloudからWheezyを入れてみた">Vagrant CloudからWheezyを入れてみた</a>で公開されているものを使ってみたので、
今回は
<a href="https://vagrantcloud.com/">Vagrant Cloud</a>
で日本語で日本向けの Box の公開も試してみました。</p>

<!--more-->


<h2>手順概要</h2>

<ol>
<li><a href="https://vagrantcloud.com/">https://vagrantcloud.com/</a> にログイン</li>
<li><a href="https://vagrantcloud.com/boxes/new">Create Box</a> で作成</li>
<li>Create new version でバージョンを作成</li>
<li>Create new provider でバージョンに対応する provider を作成</li>
<li>無料アカウントだと Upload は使えないようなので URL を指定</li>
<li>バージョンの編集で Release すると公開</li>
</ol>


<h2>登録される情報</h2>

<p>ユーザーアカウントに複数の Box が対応していて、
Box に複数のバージョンが対応していて、
バージョンに複数の provider (VirtualBox とか VMware とか) が対応している、
という構造になっているようです。</p>

<p>バージョンは Release するまでは公開されないようです。</p>

<p>古いバージョンは Revoke で破棄できるようなので、
box を置く URL を使い回すなら Revoke してから
ファイルを置き換えて新しいバージョンを登録するのが
良さそうに思いました。</p>

<h2>作成した box の packer テンプレート</h2>

<p><a href="https://github.com/znz/packer-templates">packer-templates</a>
で公開しています。</p>

<p>使い方は</p>

<pre><code>git clone https://github.com/znz/packer-templates
cd debian-7.6.0-amd64-ja_jp
packer build debian-7.6.0-amd64-ja_jp.json
</code></pre>

<p>で <code>debian-7.6.0-amd64-ja_jp_virtualbox.box</code> が作成できます。
試した環境では1時間ぐらいかかりました。</p>

<h2>使用方法</h2>

<p><code>vagrant init znzj/debian-7.6.0-amd64-ja_jp</code>
のように <code>vagrant init</code> の引数に <code>ユーザー名/BOX名</code> を指定して
<code>Vagrantfile</code> を作成すると
<code>config.vm.box = "znzj/debian-7.6.0-amd64-ja_jp"</code>
と指定されていて <code>vagrant up</code> で自動ダウンロードされて使えます。</p>

<h2>登録した URL の扱い</h2>

<p>box は URL で登録したので、
<code>https://vagrantcloud.com/znzj/debian-7.6.0-amd64-ja_jp/version/1/provider/virtualbox.box</code>
のように <code>vagrantcloud.com</code> の URL に見えるところからダウンロードしようとした時、
リダイレクトされて登録した URL からのダウンロードになるようです。</p>

<p><code>vagrantcloud</code> 側でキャッシュなどをしてくれるわけではないようなので、
置き場所には注意する必要がありそうです。</p>

<p>今回は需要も多くなさそうで、
日本向けということで
さくらのVPS
に置いてみました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible-galaxy用のroleにversionを付ける]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-19-ansible-galaxy-version.html"/>
    <updated>2014-07-19T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-galaxy-version</id>
    <content type="html"><![CDATA[<p><a href="https://galaxy.ansible.com/" title="Ansible Galaxy">Ansible Galaxy</a>
に登録されている role を使う時にバージョンを指定する方法は書いてあるのに、
自分で登録した role にバージョンを付ける方法がわからなかったので、
既にバージョンが付いているものを参考にして調べてみました。</p>

<!--more-->


<h2>結論</h2>

<p><a href="https://galaxy.ansible.com/intro">Ansible Galaxy の intro</a>
の最後の方に
「If you have applied any tags in your repo, Ansible Galaxy will automatically make a “version” object for each tag. This means users will be able to choose which version (tag) to download.」
と書いてあるように github で tag (release) を作るだけでした。</p>

<h2>バージョンの命名規則</h2>

<p>同じページのバージョン指定の例が</p>

<pre><code>user1.role1,v1.0.0
user2.role2,v0.5
...
</code></pre>

<p>となっているので、頭に <code>v</code> を付けて <code>v0.1.2</code> のようなバージョンの付け方にするのが良さそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant CloudからWheezyを入れてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-18-wheezy-from-vagrant-cloud.html"/>
    <updated>2014-07-18T21:30:25+09:00</updated>
    <id>http://blog.n-z.jp/blog/wheezy-from-vagrant-cloud</id>
    <content type="html"><![CDATA[<p>Debian 7.6 がリリースされたので、新しい box がないか探してみたところ、
<a href="http://www.vagrantbox.es/" title="A list of base boxes for Vagrant - Vagrantbox.es">A list of base boxes for Vagrant &ndash; Vagrantbox.es</a>
から探すのではなく
<a href="https://vagrantcloud.com/">Vagrant Cloud</a>
を使えば良いということがわかりました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>VirtualBox 4.3.12</li>
<li>Vagrant 1.6.3</li>
<li><a href="https://vagrantcloud.com/ffuenf/debian-7.6.0-amd64" title="Debian Wheezy 7.6.0 x86_64">Debian Wheezy 7.6.0 x86_64</a> 0.0.27</li>
</ul>


<h2>書き換え</h2>

<p>古い box は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  config.vm.box = ENV["VM_BOX"] || "opscode_debian-7.4_chef-provisionerless"
</span><span class='line'>  config.vm.box_url = ENV["VM_BOX_URL"] || "http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_debian-7.4_chef-provisionerless.box"</span></code></pre></td></tr></table></div></figure>


<p>と指定していたのを
<a href="https://github.com/ffuenf/vagrant-boxes" title="ffuenf/vagrant-boxes">ffuenf/vagrant-boxes</a>
からリンクされている
<a href="https://vagrantcloud.com/ffuenf/debian-7.6.0-amd64" title="ffuenf/debian-7.6.0-amd64">ffuenf/debian-7.6.0-amd64</a>
の説明通り <code>vagrant init ffuenf/debian-7.6.0-amd64</code> で作成された
<code>Vagrantfile</code> を参考にして、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  config.vm.box = "ffuenf/debian-7.6.0-amd64"</span></code></pre></td></tr></table></div></figure>


<p>に書き換えました。</p>

<p>以前の box を使っている 古い VM を <code>vagrant destroy</code> ですべて破棄した後、
<code>vagrant box remove opscode_debian-7.4_chef-provisionerless</code>
で box も削除しました。</p>

<h2>余談</h2>

<p><code>vagrant box outdated</code> や <code>vagrant box update</code> の使い方がわからなかったのですが、
<code>box_url</code> でダウンロードしてきた box で使うものではなく Vagrant Cloud から
ダウンロードしてきた box で使うものだったようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rsyslogでherokuのログを記録する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-18-heroku-rsyslog.html"/>
    <updated>2014-07-18T19:37:27+09:00</updated>
    <id>http://blog.n-z.jp/blog/heroku-rsyslog</id>
    <content type="html"><![CDATA[<p>heroku のログは何も設定していないと最近のログしか残らないので、
VPS で動かしている Ubuntu の rsyslog で受け取って好きなだけ
残せるように設定してみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 12.04 LTS</li>
<li>rsyslog 5.8.6-1ubuntu8.6</li>
</ul>


<h2>rsyslog の設定</h2>

<p>rsyslog でリモートからのログを受け取って <code>/var/log/remote</code> 以下に記録する設定をします。</p>

<p>ポート番号は外からの攻撃を減らすためや rsyslog の起動時に root 権限を不要にするために、
デフォルトの 514 ではなく適当なポート番号に変更しました。</p>

<p>リモートからのログはここで日付とホスト名から決まるファイル名のログに記録して、
ローカルのログと混ざらないようにしています。</p>

<p>ファイル名は日付を前にするか、送信元ホスト名を前にするかは好みで決めると良いと思います。</p>

<figure class='code'><figcaption><span>/etc/rsyslog.d/10-local.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># provides UDP syslog reception
</span><span class='line'>$ModLoad imudp
</span><span class='line'>$UDPServerRun 51514
</span><span class='line'>
</span><span class='line'># provides TCP syslog reception
</span><span class='line'>$ModLoad imtcp
</span><span class='line'>$InputTCPServerRun 51514
</span><span class='line'>
</span><span class='line'>$template RemoteLog,&quot;/var/log/remote/%$year%%$month%%$day%_%hostname%.log&quot;
</span><span class='line'>:fromhost-ip,!isequal,&quot;127.0.0.1&quot; ?RemoteLog
</span><span class='line'>&amp; ~
</span></code></pre></td></tr></table></div></figure>


<h2><code>/var/log/remote</code> 作成</h2>

<p>ディレクトリを自動で作成はしてくれないので、あらかじめ作成しておきます。
同じ理由でログファイルをディレクトリ分けすることは出来ませんでした。</p>

<p>syslog ユーザーが書き込めて adm グループで読めるようにしました。</p>

<pre><code>sudo install -o syslog -g adm -m 2750 -d /var/log/remote
</code></pre>

<h2>ufw 設定</h2>

<p><code>ufw allow 51514</code> で外から udp も tcp も受け付けるようにします。</p>

<h2>heroku からの送信設定</h2>

<p><code>heroku drains</code> コマンドで設定しました。</p>

<p>Heroku 側のドキュメントは
<a href="https://devcenter.heroku.com/articles/logging#syslog-drains" title="Syslog drains">Syslog drains</a>
にありますが、情報が少ないので、同様のログを蓄積するアドオンの設定を参考にするのが良いようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> heroku drains
</span><span class='line'><span class="go">No drains for this app</span>
</span><span class='line'><span class="gp">%</span> heroku drains:add
</span><span class='line'><span class="go"> !    Usage: heroku drains:add URL</span>
</span><span class='line'><span class="go">zsh: exit 1     heroku drains:add</span>
</span><span class='line'><span class="gp">%</span> heroku drains:add syslog://syslog.example.jp:51514
</span><span class='line'><span class="go">Successfully added drain syslog://syslog.example.jp:51514</span>
</span><span class='line'><span class="gp">%</span> heroku drains
</span><span class='line'><span class="go">syslog://syslog.example.jp:51514 (d.xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pecoとcdrなどを組み合わせてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-17-peco-cdr.html"/>
    <updated>2014-07-17T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/peco-cdr</id>
    <content type="html"><![CDATA[<p>自作の cd 履歴管理が <code>~/VirtualBox VMs</code> という空白入りのディレクトリ名の扱いに対応していなかったので、
せっかくなので独自で頑張るのは止めて、
cdr の履歴を使うことにしました。</p>

<p>さらに選択部分は peco と組み合わせて <code>ghq</code> や <code>cdpath</code> にも対応してみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>peco 0.2.0</li>
<li>zsh 5.0.2</li>
</ul>


<h2>peco のインストール</h2>

<p>Homebrew でインストールするなら <code>brew install peco/peco/peco</code> か</p>

<pre><code>brew tap peco/peco
brew install peco
</code></pre>

<p>です。</p>

<p>アンインストールは</p>

<pre><code>brew uninstall peco
brew untap peco/peco
</code></pre>

<p>です。</p>

<p><code>go get</code> でインストールするなら <code>GOPATH</code> を設定して
<code>go get github.com/peco/peco/cmd/peco</code>
です。
アンインストールは <code>GOPATH</code> にあるインストールされたファイルを消すしかなさそうです。</p>

<h2>peco の設定</h2>

<p><a href="http://shibayu36.hatenablog.com/entry/2014/06/27/223538" title="pecoを使い始めた - $shibayu36-&gt;blog;">pecoを使い始めた &ndash; $shibayu36-&gt;blog;</a>
はいろいろキーバインドを設定していますが、
デフォルトのまま使っています。</p>

<h2>zsh の設定</h2>

<p><a href="https://github.com/znz/dot-shell/blob/4ee27990e8de4b3c089442c0d997ad3fc836b96a/profile.d/50peco.zsh" title="50peco.zsh">50peco.zsh</a>
の <code>peco-go-to-dir</code> のように設定して <code>M-g</code> で使えるようにしました。</p>

<p>以下に該当部分を抜き出しておきます。</p>

<figure class='code'><figcaption><span>50peco.zsh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">if</span> <span class="o">((</span> <span class="k">${</span><span class="p">+commands[peco]</span><span class="k">}</span> <span class="o">))</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span>peco-go-to-dir <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">local </span>line
</span><span class='line'>    <span class="nb">local </span><span class="nv">selected</span><span class="o">=</span><span class="s2">&quot;$(</span>
</span><span class='line'><span class="s2">      {</span>
</span><span class='line'><span class="s2">        (</span>
</span><span class='line'><span class="s2">          autoload -Uz chpwd_recent_filehandler</span>
</span><span class='line'><span class="s2">          chpwd_recent_filehandler &amp;&amp; for line in $reply; do</span>
</span><span class='line'><span class="s2">            if [[ -d &quot;</span><span class="nv">$line</span><span class="s2">&quot; ]]; then</span>
</span><span class='line'><span class="s2">              echo &quot;</span><span class="nv">$line</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">            fi</span>
</span><span class='line'><span class="s2">          done</span>
</span><span class='line'><span class="s2">        )</span>
</span><span class='line'><span class="s2">        ghq list --full-path</span>
</span><span class='line'><span class="s2">        for line in *(-/) ${^cdpath}/*(N-/); do echo &quot;</span><span class="nv">$line</span><span class="s2">&quot;; done | sort -u</span>
</span><span class='line'><span class="s2">      } | peco --query &quot;</span><span class="nv">$LBUFFER</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">    )&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;$selected&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nv">BUFFER</span><span class="o">=</span><span class="s2">&quot;cd ${(q)selected}&quot;</span>
</span><span class='line'>      zle accept-line
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">    </span>zle clear-screen
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  zle -N peco-go-to-dir
</span><span class='line'>  bindkey <span class="s1">&#39;^[g&#39;</span> peco-go-to-dir
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>まず <code>(( ${+commands[peco]} ))</code> で <code>peco</code> コマンドの存在チェックをしています。
zsh スクリプトの中では <code>type peco &gt;/dev/null 2&gt;&amp;1</code> のようなチェック方法の代わりに使えます。</p>

<p>次にカレントディレクトリと <code>$cdpath</code> の処理に使っている <code>line</code> をローカル変数にしています。</p>

<p>次がメイン部分で</p>

<ol>
<li><code>cdr</code> のディレクトリ一覧</li>
<li><code>ghq</code> のディレクトリ一覧</li>
<li>カレントディレクトリと <code>$cdpath</code> の中のディレクトリ一覧</li>
</ol>


<p>を <code>peco</code> に渡して選択しています。
順番や何を選択肢に入れるかなどは好みで調節してください。</p>

<p>最後に参考にした記事と同じように、選択されていたら <code>cd</code> コマンドを実行しています。</p>

<h2>空白ディレクトリ対応</h2>

<p><code>selected=$()</code> を <code>selected="$()"</code> に変更するなど適切にクオートした上で、
さらに最後の <code>cd</code> コマンドに渡す部分では <code>q</code> という Parameter Expansion Flag (<code>${(q)var}</code> の部分) を使って
適切にエスケープしています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 13 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-16-rubymotion-mokumoku-osaka.html"/>
    <updated>2014-07-16T19:33:35+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 12 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://rubymotionjp.connpass.com/event/7079/">第 13 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。
今日はほぼ途中の会話はなくて、みんなでもくもくしていました。
その代わり、最後の成果発表の時は盛り上がっていました。</p>

<p>次回の
<a href="http://rubymotionjp.connpass.com/event/7583/" title="第 14 回 RubyMotion もくもく会 in Osaka">第 14 回 RubyMotion もくもく会 in Osaka</a>
は 08/20(水) になりました。</p>

<!--more-->


<h2>メモ</h2>

<ul>
<li>AppCode</li>
<li>TapTheCircle</li>
<li>motion-osx-cli</li>
<li><a href="https://speakerdeck.com/iwazer/rubymotionfalseqi-chi-tiiitokoro" title="RubyMotionの気持ちいいところ // Speaker Deck">RubyMotionの気持ちいいところ // Speaker Deck</a></li>
<li>RubyMotion + IB で参考にしたもの

<ul>
<li><a href="http://tama.hatenablog.jp/entry/2014/05/02/231633" title="RubyMotion(MacOS)でIBの作成方法 - たまたんのぶろぐ">RubyMotion(MacOS)でIBの作成方法 &ndash; たまたんのぶろぐ</a></li>
<li><a href="http://d.hatena.ne.jp/laiso+iphone/20130510/1368201914" title="RubyMotionアプリでStoryboardとIBのアウトレット+アクションを使う話 - laiso+iphone">RubyMotionアプリでStoryboardとIBのアウトレット+アクションを使う話 &ndash; laiso+iphone</a></li>
</ul>
</li>
<li><a href="https://github.com/omoon/rm-test-test">https://github.com/omoon/rm-test-test</a>

<ul>
<li>travis-ci で RubyMotion のテストも動かせるという話</li>
<li><code>bundle exec rake spec osx=true</code> にすれば OSX も動く。</li>
<li>参考: <a href="https://github.com/rubymotion/BubbleWrap/blob/master/.travis.yml">https://github.com/rubymotion/BubbleWrap/blob/master/.travis.yml</a></li>
</ul>
</li>
<li><a href="https://github.com/mattsears/nyan-cat-formatter">https://github.com/mattsears/nyan-cat-formatter</a></li>
</ul>


<h2>今日の成果</h2>

<p>情報を探してみたら <code>rake ib</code> で Interface Builder を起動すれば stub を自動生成してくれて、
ボタンクリックとアクションのひも付けができるとわかったので、
ボタンをクリックした時にメソッド呼び出しはできるようになりました。</p>

<p>しかし、 <code>ib_outlet</code> で宣言したプロパティに outlet でひも付けしたインスタンス変数が <code>nil</code> のままで悩んでいたところ、
最後に <code>outlet</code> に変えると動くようになりました。
<code>ib_outlet</code> のままでも Interface Builder で出てくるので使えるのかと勘違いしていました。</p>

<p>家に帰ってから
<code>$(find /System/Library/Frameworks -name lsregister) -kill -r -domain local -domain user</code>
で既存の起動の関連付けを削除して、
ib 版で <code>Set Default Browser</code> をやり直したところ、
まだ問題があったので、それも直して以前のものと同様に使えるところまでは出来ました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[doorkeeper providerサンプルアプリに対応するOAuthクライアントをdeviseで作成した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-15-doorkeeper-devise-client.html"/>
    <updated>2014-07-15T18:50:40+09:00</updated>
    <id>http://blog.n-z.jp/blog/doorkeeper-devise-client</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/znz/doorkeeper-provider-app">doorkeeper-provider-app</a>
を使って SSO (Single Sign On) のように使うクライアントアプリを作成しました。
<a href="https://github.com/znz/doorkeeper-devise-client-app">doorkeeper-devise-client-app</a>
で公開しています。</p>

<p>SSO は OAuth 2.0 の本来の使い方ではないので、不便な部分もありますが、
クライアント側の例として参考になると思います。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>ruby 2.1.2</li>
<li>rails 4.1.4</li>
<li>bootstrap 3.2.0</li>
<li>devise 3.2.4</li>
<li>omniauth 1.2.2</li>
<li>omniauth-oauth2 1.2.0</li>
<li>bootstrap-sass 3.2.0.0</li>
<li>dotenv-rails 0.11.1</li>
</ul>


<h2>簡単な役割解説</h2>

<p>provider は doorkeeper gem を入れている rails アプリ側で認証や認可を受け持ちます。
(OAuth の仕様的には認証と認可が別々のサーバーのこともあります。)</p>

<p>ここでいう OAuth クライアントは devise + omniauth + omniauth-oauth2 を使った rails アプリのことです。
ブラウザーなどのユーザー側にあるクライアントではなく、ユーザーから見れば、これもサーバーです。</p>

<p>詳しいことは OAuth 2.0 の仕様を調べてください。</p>

<h2>大まかな流れ</h2>

<ol>
<li><code>lib/omniauth/strategies/doorkeeper.rb</code> 作成</li>
<li><code>config/initializers/devise.rb</code> で <code>config.omniauth :doorkeeper, ...</code></li>
<li><code>app/controllers/users/omniauth_callbacks_controller.rb</code> 作成
(<code>uid</code> でユーザーを自動作成したり、 <code>access_token</code> (<code>credentials.token</code>) を保存したり)</li>
<li><code>config/routes.rb</code> に設定</li>
<li><code>user</code> に <code>provider</code> を追加</li>
<li><code>app/models/user.rb</code> で <code>devise :omniauthable</code> や <code>uid</code> を使った処理を実装</li>
<li><code>OAuth2::AccessToken</code> を生成</li>
<li>それを使って API アクセス</li>
</ol>


<p><code>access_token</code> を session に保存するかデータベースに保存するかは
アプリケーションのポリシー次第になります。
このアプリでは session に保存しています。</p>

<p>別途 callback uri として <code>http://localhost:3000/users/auth/doorkeeper/callback</code> のような URL を指定して
doorkeeper 側の <code>oauth/applications</code> に登録しておく必要があります。</p>

<h2><code>lib/omniauth/strategies/doorkeeper.rb</code> 作成</h2>

<p>例として
<a href="https://github.com/doorkeeper-gem/doorkeeper-devise-client" title="Dookreeper Devise+Omniauth Client">Dookreeper Devise+Omniauth Client</a>
と比較して <code>info</code> に <code>name</code> を増やしています。</p>

<p>コントローラーを <code>users</code> の下の <code>Users::OmniauthCallbacksController</code> にしたので、
戻り先の <code>authorize_path</code> は <code>'/oauth/authorize'</code> ではなく <code>'/users/oauth/authorize'</code> になっています。</p>

<p>info のハッシュはサーバーから受け取れていて、後の処理でもっと欲しい情報があれば自由に増やせます。</p>

<figure class='code'><figcaption><span>lib/omniauth/strategies/doorkeeper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">OmniAuth</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Strategies</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Doorkeeper</span> <span class="o">&lt;</span> <span class="ss">OmniAuth</span><span class="p">:</span><span class="ss">:Strategies</span><span class="o">::</span><span class="no">OAuth2</span>
</span><span class='line'>      <span class="n">option</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:doorkeeper</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">option</span> <span class="ss">:client_options</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="ss">site</span><span class="p">:</span> <span class="s1">&#39;http://localhost:4000&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">authorize_path</span><span class="p">:</span> <span class="s1">&#39;/users/oauth/authorize&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">uid</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">raw_info</span><span class="o">[</span><span class="s1">&#39;id&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">info</span> <span class="k">do</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="ss">email</span><span class="p">:</span> <span class="n">raw_info</span><span class="o">[</span><span class="s1">&#39;email&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="nb">name</span><span class="p">:</span> <span class="n">raw_info</span><span class="o">[</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">raw_info</span>
</span><span class='line'>        <span class="vi">@raw_info</span> <span class="o">||=</span> <span class="n">access_token</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;/api/v1/me.json&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">parsed</span> <span class="o">||</span> <span class="p">{}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>config/initializers/devise.rb</code> で設定</h2>

<p><a href="https://github.com/doorkeeper-gem/doorkeeper-devise-client">サンプルアプリ</a>
では</p>

<figure class='code'><figcaption><span>config/initializers/devise.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">omniauth</span> <span class="ss">:doorkeeper</span><span class="p">,</span>  <span class="no">DOORKEEPER_APP_ID</span><span class="p">,</span> <span class="no">DOORKEEPER_APP_SECRET</span><span class="p">,</span> <span class="ss">:client_options</span> <span class="o">=&gt;</span>  <span class="p">{</span><span class="ss">:site</span> <span class="o">=&gt;</span> <span class="no">DOORKEEPER_APP_URL</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>となっていました。</p>

<p><code>scope</code> も追加すると以下のようになります。
<code>dotenv</code> を使って <code>ENV</code> から取るようにしました。</p>

<figure class='code'><figcaption><span>config/initializers/devise.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">omniauth</span> <span class="ss">:doorkeeper</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;DOORKEEPER_APP_ID&#39;</span><span class="o">]</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;DOORKEEPER_APP_SECRET&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">client_options</span><span class="p">:</span> <span class="p">{</span><span class="ss">site</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;DOORKEEPER_APP_URL&#39;</span><span class="o">]</span> <span class="p">},</span> <span class="ss">scope</span><span class="p">:</span> <span class="s1">&#39;public write&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>scope</code> は <code>'public,write'</code> だと <code>The requested scope is invalid, unknown, or malformed.</code> というエラーになってしまったので、
<code>,</code> 区切りではなくスペース区切りにしています。</p>

<h2><code>app/controllers/users/omniauth_callbacks_controller.rb</code> 作成</h2>

<p>callback で認証結果を受け取る部分を作成します。
ここで認証結果を受け取って、ユーザーを必要に応じてひも付けたり、
後で API アクセスに使うアクセストークンを保存したりします。</p>

<p>認証に失敗した時はログイン画面 (あれば) か <code>root_path</code> に戻すようにしています。</p>

<figure class='code'><figcaption><span>app/controllers/users/omniauth_callbacks_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Users</span><span class="o">::</span><span class="no">OmniauthCallbacksController</span> <span class="o">&lt;</span> <span class="ss">Devise</span><span class="p">:</span><span class="ss">:OmniauthCallbacksController</span>
</span><span class='line'>  <span class="c1"># https://github.com/plataformatec/devise/issues/2432</span>
</span><span class='line'>  <span class="n">protect_from_forgery</span> <span class="ss">except</span><span class="p">:</span> <span class="ss">:doorkeeper</span>
</span><span class='line'>  <span class="n">skip_filter</span> <span class="ss">:auto_authenticate_omniauth_user!</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="ss">:doorkeeper</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">doorkeeper</span>
</span><span class='line'>    <span class="c1"># You need to implement the method below in your model (e.g. app/models/user.rb)</span>
</span><span class='line'>    <span class="n">oauth_data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;omniauth.auth&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_or_create_for_doorkeeper_oauth</span><span class="p">(</span><span class="n">oauth_data</span><span class="p">)</span>
</span><span class='line'>    <span class="n">session</span><span class="o">[</span><span class="ss">:doorkeeper_token</span><span class="o">]</span> <span class="o">=</span> <span class="n">oauth_data</span><span class="o">[</span><span class="s1">&#39;credentials&#39;</span><span class="o">][</span><span class="s1">&#39;token&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">persisted?</span>
</span><span class='line'>      <span class="n">sign_in_and_redirect</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:event</span> <span class="o">=&gt;</span> <span class="ss">:authentication</span> <span class="c1">#this will throw if @user is not activated</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">is_navigational_format?</span>
</span><span class='line'>        <span class="n">set_flash_message</span><span class="p">(</span><span class="ss">:notice</span><span class="p">,</span> <span class="ss">:success</span><span class="p">,</span> <span class="ss">kind</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;DOORKEEPER_APP_NAME&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;Doorkeeper&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="c1"># hide flash message after auto sign in</span>
</span><span class='line'>        <span class="c1">#flash.delete(:notice)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">session</span><span class="o">[</span><span class="s1">&#39;devise.doorkeeper_data&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;omniauth.auth&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="ss">:new_user_registration_url</span><span class="p">)</span>
</span><span class='line'>        <span class="n">redirect_to</span> <span class="n">new_user_registration_url</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">redirect_to</span> <span class="n">root_url</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">after_omniauth_failure_path_for</span><span class="p">(</span><span class="n">scope</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="ss">:new_session_path</span><span class="p">)</span>
</span><span class='line'>      <span class="n">new_session_path</span><span class="p">(</span><span class="n">scope</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">root_path</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>自動ログイン後のメッセージが不要なら <code>set_flash_message</code> の部分を <code>flash.delete(:notice)</code> に置き換えます。
「Doorkeeper でログインしました」だとどのサイトか区別がつかないので、
<code>ENV['DOORKEEPER_APP_NAME']</code> で表示用の名前を設定できるようにしています。</p>

<h2><code>config/routes.rb</code> に設定</h2>

<p><code>config/routes.rb</code> で <code>omniauth_callbacks</code> として独自のものを使うように設定します。</p>

<p>今回は認証必須なので不要ですが、
例として <code>sign_in</code> と <code>sign_out</code> の URL も入れました。
実際に試してみるとすぐに自動ログインで再ログインしてしまいます。</p>

<p><code>sign_out</code> が <code>get</code> か <code>delete</code> か違うことがあるので、
<code>sign_out_via</code> を使ってどちらでも対応できるようにしました。</p>

<figure class='code'><figcaption><span>config/routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">devise_for</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">controllers</span><span class="p">:</span> <span class="p">{</span> <span class="n">omniauth_callbacks</span><span class="p">:</span> <span class="s1">&#39;users/omniauth_callbacks&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">devise_scope</span> <span class="ss">:user</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;sign_in&#39;</span><span class="p">,</span>  <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;devise/sessions#new&#39;</span><span class="p">,</span>     <span class="ss">as</span><span class="p">:</span> <span class="ss">:new_user_session</span>
</span><span class='line'>    <span class="nb">__send__</span> <span class="no">Devise</span><span class="o">.</span><span class="n">sign_out_via</span><span class="p">,</span> <span class="s1">&#39;sign_out&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;devise/sessions#destroy&#39;</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:destroy_user_session</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>timeoutable 設定</h2>

<p>SSO 的に使うのは
OAuth 2.0 の本来の目的ではないので、
ログアウトは難しい問題です。
たとえば
doorkeeper
と連携するアプリが複数あるときにまとめてログアウト出来ないなどの問題があります。</p>

<p>そのため、このアプリでは一定時間で再ログインが必要になるように <code>timeoutable</code> を使って、
こまめに認証し直すようにしてログアウト問題を緩和しています。</p>

<p>その副作用として入力に時間のかかるフォームがあると入力途中でタイムアウトしてしまって
投稿に失敗するなどの問題も起きるので、その点を考慮しておく必要があります。</p>

<figure class='code'><figcaption><span>config/initializers/devise.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># Default is 30 minutes.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">timeout_in</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="n">minutes</span> <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">development?</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">expire_auth_token_on_timeout</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>app/models/user.rb に実装</h2>

<p><code>find_or_create_for_doorkeeper_oauth</code> の実装は <code>concerns</code> に分けてみました。
<code>omniauthable</code> に <code>omniauth_providers</code> も設定して余計な route が生成されないようにしています。
<code>timeoutable</code> も入れています。</p>

<figure class='code'><figcaption><span>app/models/user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">devise</span> <span class="ss">:omniauthable</span><span class="p">,</span> <span class="n">omniauth_providers</span><span class="p">:</span> <span class="o">[</span><span class="ss">:doorkeeper</span><span class="o">]</span>
</span><span class='line'>  <span class="n">devise</span> <span class="ss">:timeoutable</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">DoorkeeperOauthFinder</span>
</span></code></pre></td></tr></table></div></figure>


<p>ログインしたときに <code>name</code> や <code>email</code> が変わっていたら反映するようにしています。</p>

<p><code>id</code> を統一したいのなら、 <code>create</code> のときに <code>id</code> まで指定すると
doorkeeper gem による OAuth provider 側とユーザーの ID を統一できます。</p>

<p>SSO 的に使うのならパスワードは不要なので、
ここではコメントアウトしています。</p>

<figure class='code'><figcaption><span>app/models/concerns/doorkeeper_oauth_finder.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">DoorkeeperOauthFinder</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">find_or_create_for_doorkeeper_oauth</span><span class="p">(</span><span class="n">oauth_data</span><span class="p">)</span>
</span><span class='line'>      <span class="n">uid</span> <span class="o">=</span> <span class="n">oauth_data</span><span class="o">.</span><span class="n">uid</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>      <span class="nb">id</span> <span class="o">=</span> <span class="n">uid</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">provider</span><span class="p">:</span> <span class="n">oauth_data</span><span class="o">.</span><span class="n">provider</span><span class="p">,</span> <span class="ss">uid</span><span class="p">:</span> <span class="n">uid</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">user</span>
</span><span class='line'>        <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">oauth_data</span><span class="o">.</span><span class="n">info</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>        <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">oauth_data</span><span class="o">.</span><span class="n">info</span><span class="o">.</span><span class="n">email</span>
</span><span class='line'>        <span class="n">user</span><span class="o">.</span><span class="n">save!</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">changed?</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">user</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">create!</span><span class="p">({</span>
</span><span class='line'>          <span class="nb">id</span><span class="p">:</span> <span class="nb">id</span><span class="p">,</span> <span class="c1"># use same id</span>
</span><span class='line'>          <span class="nb">name</span><span class="p">:</span> <span class="n">oauth_data</span><span class="o">.</span><span class="n">info</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">provider</span><span class="p">:</span> <span class="n">oauth_data</span><span class="o">.</span><span class="n">provider</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">uid</span><span class="p">:</span> <span class="n">uid</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">email</span><span class="p">:</span> <span class="n">oauth_data</span><span class="o">.</span><span class="n">info</span><span class="o">.</span><span class="n">email</span><span class="p">,</span>
</span><span class='line'>          <span class="c1">#password: Devise.friendly_token[0,20]</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">user</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>データベースの migration の方でも削除して unique index の制約なども不要なものは外しておきます。</p>

<figure class='code'><figcaption><span>db/migrate/*_devise_create_users.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1">## Database authenticatable</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:email</span><span class="p">,</span>              <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="c1"># t.string :encrypted_password, null: false, default: &quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>代わりに <code>provider</code> と <code>uid</code> と <code>name</code> を追加しました。
このアプリは Doorkeeper 専用なので、直接 <code>users</code> に追加していますが、
複数プロバイダに対応するには <code>provider</code> と <code>uid</code> の組を別テーブルにします。</p>

<figure class='code'><figcaption><span>db/migrate/*_add_omniauth_columns_to_users.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AddOmniauthColumnsToUsers</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:provider</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:uid</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">add_index</span> <span class="ss">:users</span><span class="p">,</span> <span class="o">[</span><span class="ss">:provider</span><span class="p">,</span> <span class="ss">:uid</span><span class="o">]</span><span class="p">,</span> <span class="ss">unique</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>OAuth2::AccessToken</code> を生成</h2>

<p><code>OAuth2::Client</code> と保存しておいた <code>access_token</code> を引数にして <code>OAuth2::AccessToken</code> を生成します。
ここでは <code>concerns</code> に分けて必要なコントローラーでだけ <code>include DoorkeeperApiV1</code> するようにしました。
全体で使いたいのなら <code>ApplicationController</code> に <code>include</code> すれば良いと思います。</p>

<figure class='code'><figcaption><span>app/controllers/concerns/doorkeeper_api_v1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">DoorkeeperApiV1</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">access_token</span>
</span><span class='line'>    <span class="k">return</span> <span class="vi">@access_token</span> <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="vi">@access_token</span><span class="p">)</span>
</span><span class='line'>    <span class="n">config</span> <span class="o">=</span> <span class="no">Devise</span><span class="o">.</span><span class="n">omniauth_configs</span><span class="o">[</span><span class="ss">:doorkeeper</span><span class="o">]</span>
</span><span class='line'>    <span class="n">strategy</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">strategy_class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">*</span><span class="n">config</span><span class="o">.</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">token</span> <span class="o">=</span> <span class="n">session</span><span class="o">[</span><span class="ss">:doorkeeper_token</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@access_token</span> <span class="o">=</span> <span class="ss">OAuth2</span><span class="p">:</span><span class="ss">:AccessToken</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">strategy</span><span class="o">.</span><span class="n">client</span><span class="p">,</span> <span class="n">token</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_me</span>
</span><span class='line'>    <span class="n">access_token</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;/api/v1/me.json&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">parsed</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_microposts</span>
</span><span class='line'>    <span class="n">access_token</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;/api/v1/microposts.json&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">parsed</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">MICROPOST_CONTENT_MAX_LENGTH</span> <span class="o">=</span> <span class="mi">140</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">post_micropost</span><span class="p">(</span><span class="n">micropost</span><span class="p">)</span>
</span><span class='line'>    <span class="n">micropost</span><span class="o">[</span><span class="ss">:content</span><span class="o">]</span> <span class="o">=</span> <span class="n">micropost</span><span class="o">[</span><span class="ss">:content</span><span class="o">].</span><span class="n">truncate</span><span class="p">(</span><span class="no">MICROPOST_CONTENT_MAX_LENGTH</span><span class="p">)</span>
</span><span class='line'>    <span class="n">access_token</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;/api/v1/microposts&quot;</span><span class="p">,</span> <span class="ss">params</span><span class="p">:</span> <span class="p">{</span> <span class="ss">micropost</span><span class="p">:</span> <span class="n">micropost</span> <span class="p">})</span><span class="o">.</span><span class="n">parsed</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>使い方は <code>get_me</code> などを呼び出すだけなので省略します。</p>

<h2>ログインを強制する</h2>

<p>常に Doorkeeper の方でログインさせておきたいアプリの場合は、
User クラスを使っている場合の devise での戻り先の <code>session[:user_return_to]</code> に URL を保存しておいて、
<code>user_omniauth_authorize_path(:doorkeeper)</code> に強制的にリダイレクトしています。
<code>main_app.</code> をつけているのは route で mount している engine の中で問題が起きたことがあったためです。</p>

<figure class='code'><figcaption><span>app/controllers/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="kp">include</span> <span class="no">AuthDoorkeeper</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:auto_authenticate_omniauth_user!</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/controllers/concerns/auth_doorkeeper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">AuthDoorkeeper</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">auto_authenticate_omniauth_user!</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="n">current_user</span>
</span><span class='line'>    <span class="n">session</span><span class="o">[</span><span class="ss">:user_return_to</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">original_url</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">main_app</span><span class="o">.</span><span class="n">user_omniauth_authorize_path</span><span class="p">(</span><span class="ss">:doorkeeper</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>テストについて</h2>

<p>API 呼び出しの部分の対処が出来ていなくて、まだテストが通る状態には出来ていません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apt-cacher-ngでliveイメージ作成を繰り返す時の無駄なダウンロードを減らす]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-14-apt-cacher-ng.html"/>
    <updated>2014-07-14T23:53:14+09:00</updated>
    <id>http://blog.n-z.jp/blog/apt-cacher-ng</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/znz/rubylive-builder" title="rubylive-builder">rubylive-builder</a>
で
<a href="https://github.com/znz/rubylive" title="RubyLive">RubyLive</a>
という Debian wheezy ベースの Live イメージを作成するときに
<code>apt-get update</code> などで何度も無駄にダウンロードしてしまうので、
<code>apt-cacher-ng</code> で Live イメージ作成を繰り返す時の無駄なダウンロードを減らすことにしました。</p>

<!--more-->


<h2>Vagrant の provision でインストール</h2>

<p>Vagrantfile では</p>

<figure class='code'><figcaption><span>Vagrantfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:shell</span> <span class="k">do</span> <span class="o">|</span><span class="n">shell</span><span class="o">|</span>
</span><span class='line'>    <span class="n">shell</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="s2">&quot;provision.sh&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようにシェルスクリプトでプロビジョニングしているだけだったので、
その中で以下のようにインストールして設定するようにしました。</p>

<figure class='code'><figcaption><span>provision.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get install -y apt-cacher-ng
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;Acquire::http::Proxy &quot;http://localhost:3142/&quot;;&#39;</span> &gt;/etc/apt/apt.conf.d/02proxy
</span></code></pre></td></tr></table></div></figure>


<p>Vagrantfile で以下のようにポートフォワーディングを設定していれば
<a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0315" title="第315回　apt-cacher-ngを使ってAPT用キャッシュプロキシの構築：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社">第315回　apt-cacher-ngを使ってAPT用キャッシュプロキシの構築：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社</a>
の2ページ目に説明があるようにヒット率などを確認できます。</p>

<figure class='code'><figcaption><span>Vagrantfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># apt-cacher-ng</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">3142</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">3142</span>
</span></code></pre></td></tr></table></div></figure>


<h2>rake コマンドで環境変数を渡す</h2>

<p><code>APT_HTTP_PROXY=http://localhost:3142 rake</code> でも良かったのですが、
rake コマンドは引数の <code>FOO=bar</code> を <code>ENV</code> に設定してくれるので、
<code>rake APT_HTTP_PROXY=http://localhost:3142</code> で渡して、
Rakefile の中では以下のように受け取って <code>lb config</code> に渡しました。</p>

<figure class='code'><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;config RubyLive&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:config</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:clean</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">sh</span> <span class="s1">&#39;lb config&#39;</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;APT_HTTP_PROXY&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">sh</span> <span class="s2">&quot;lb config --apt-http-proxy </span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;APT_HTTP_PROXY&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>live-build で apt-cacher-ng を使う</h2>

<p>既に出てきたように
<code>lb config</code> の <code>--apt-http-proxy</code> オプションや <code>--apt-ftp-proxy</code> オプションで指定すると
Live イメージ作成の時に proxy を使ってくれるようになります。
今回は apt-line に <code>http</code> しか使っていないので
<code>--apt-http-proxy</code> だけ指定しています。</p>

<p>もちろん、作成後の Live イメージには proxy 設定は残りません。</p>

<h2>感想</h2>

<p>live-build は cache ディレクトリにも、かなりキャッシュしてくれるのですが、
<code>apt-get update</code> などの proxy じゃないとキャッシュしにくいものもあるので、
どんな場合でもダウンロード量削減に役に立ちそうだと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyLiveを仮想環境で作成]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-13-build-rubylive-on-vm.html"/>
    <updated>2014-07-13T09:35:02+09:00</updated>
    <id>http://blog.n-z.jp/blog/build-rubylive-on-vm</id>
    <content type="html"><![CDATA[<p>最近流行りの仮想環境を使ってクリーンな wheezy 環境で RubyLive を作成できるようにしました。</p>

<p>VirtualBox + Vagrant は特殊な制限のない仮想環境なので Live イメージが作成できたのですが、
docker は後述の制限のために作成できませんでした。</p>

<!--more-->


<h2>RubyLive を Vagrant で作成</h2>

<p>Vagrant を使ってクリーンな wheezy 環境で RubyLive の ISO を作成できるようにしました。
こちらは問題なく作成できました。</p>

<h3>動作確認バージョン</h3>

<ul>
<li>VirtualBox 4.3.12</li>
<li>Vagrant 1.6.3</li>
</ul>


<h3>使い方</h3>

<ul>
<li>VirtualBox と Vagrant をインストールしておきます。</li>
<li><code>git clone https://github.com/znz/rubylive-builder</code> で取得します。</li>
<li><code>cd rubylive-builder</code> で中に入ります。</li>
<li><code>VM_MEMORY=512 vagrant up</code> のように適当なメモリ容量を指定して起動します。 (指定なしなら 1024)

<ul>
<li>他の項目も環境変数である程度変更できるようにしています。</li>
<li>初回起動時は box をダウンロードするので非常に時間がかかります。</li>
<li>provision で live-build などの必要なパッケージをインストールしています。</li>
</ul>
</li>
<li><code>vagrant ssh</code> でゲストにログインします。</li>
<li><code>/vagrant/rubylive.sh</code> を実行すると <code>/home/vagrant/rubylive</code> で RubyLive のイメージを作成します。

<ul>
<li>実行するたびにタイムスタンプの入ったファイル名の ISO ファイルが作成されます。</li>
<li>ネットワークの速度やマシンスペックに影響を受けると思いますが、試した環境では約1時間かかりました。</li>
</ul>
</li>
<li>作成できた <code>/home/vagrant/rubylive/*.iso</code> を <code>/vagrant</code> にコピーまたは移動して、ホスト OS 側に取り出します。</li>
<li>取り出した ISO ファイルを使用します。</li>
</ul>


<p>なぜか</p>

<pre><code>chroot: failed to run command `/usr/bin/env': No such file or directory
</code></pre>

<p>で失敗することがありましたが、再度 <code>/vagrant/rubylive.sh</code> を実行すれば問題なく作成できました。</p>

<h3>片付け方</h3>

<ul>
<li><code>vagrant destroy</code> で VM を破棄します。</li>
<li><code>git clone</code> した作業ディレクトリを削除します。</li>
<li>wheezy の box が不要なら <code>vagrant box remove opscode_debian-7.4_chef-provisionerless</code> で削除します。</li>
<li>Vagrant や VirtualBox も不要ならアンインストールします。</li>
</ul>


<h2>RubyLive を Docker で作成 (失敗)</h2>

<p>docker 環境の中では <code>chroot /rubylive/chroot mount -t proc proc /proc</code> が <code>EPERM</code> で失敗するため、作成できませんでした。</p>

<h3>動作確認バージョン</h3>

<ul>
<li>docker 1.1.1</li>
</ul>


<h3>試し方</h3>

<ul>
<li>docker をインストールしておきます。</li>
<li><code>git clone https://github.com/znz/rubylive-builder</code> で取得します。</li>
<li><code>docker build rubylive-builder</code> で作成に挑戦します。

<ul>
<li>または <code>cd rubylive-builder</code> で中に入って <code>docker build .</code> です。</li>
</ul>
</li>
<li><code>docker ps -a</code> で最近の CREATED の IMAGE を確認します。

<ul>
<li>もしくは <code>docker images</code> で確認します。</li>
<li>最後の失敗した後の状態は残っていないようでした。</li>
</ul>
</li>
<li><code>docker run -i -t --rm 4b8bc4523794 /bin/bash</code> のように中に入ります。

<ul>
<li>4b8bc4523794 のところは確認した IMAGE の ID にしてください。</li>
</ul>
</li>
<li><code>cd rubylive</code> で rubylive ディレクトリに入って <code>rake</code> で作成に再挑戦します。</li>
<li><code>less /rubylive/chroot/debootstrap/debootstrap.log</code> でログを確認したり、
<code>chroot /rubylive/chroot mount -t proc proc /proc</code> や
<code>mount -t proc proc /rubylive/chroot/proc</code> を直接実行してみたりして
原因を確認します。</li>
</ul>


<h3>失敗部分のメッセージ</h3>

<pre><code>W: Failure trying to run: chroot /rubylive/chroot mount -t proc proc /proc
W: See /rubylive/chroot/debootstrap/debootstrap.log for details
P: Begin unmounting filesystems...
P: Saving caches...
/usr/bin/env: apt-get: No such file or directory
rake aborted!
Command failed with status (1): [sudo lb build...]
</code></pre>

<p><code>/rubylive/chroot/debootstrap/debootstrap.log</code> をみると <code>mount: permission denied</code> と出ていました。</p>

<h3>Dockerfile 直接指定 (失敗)</h3>

<p><code>docker build https://raw.githubusercontent.com/znz/rubylive-builder/master/Dockerfile</code>
のように直接 URL を指定する方法は
<code>sources.list</code> を国内ミラーに差し替える部分が失敗して使えませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian 7 (wheezy) の RubyLive をカスタマイズ中]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-12-debian-ruby-live.html"/>
    <updated>2014-07-12T10:08:26+09:00</updated>
    <id>http://blog.n-z.jp/blog/debian-ruby-live</id>
    <content type="html"><![CDATA[<p>今年の
<a href="https://k-of.jp/2014/" title="KOF 2014：関西オープンフォーラム2014">KOF 2014：関西オープンフォーラム2014</a>
に向けて
<a href="https://github.com/znz/rubylive" title="RubyLive">RubyLive</a>
を作成しています。
fork 元の <a href="https://github.com/no6v/rubylive">no6v 版</a> との違いをまとめていきます。</p>

<!--more-->


<h2>カスタマイズの基本</h2>

<p>README から今回に関係する部分を引用しておくと以下のようになっています。</p>

<ul>
<li>config/hooks/

<ul>
<li>インストールの最後の方で実行するフックスクリプトを置くディレクトリ。</li>
<li>拡張子を .chroot にして実行権限を付けておく。</li>
</ul>
</li>
<li>config/includes.chroot/

<ul>
<li>このディレクトリを root に見立てて LiveCD 環境にコピーしたいファイルを置くディレクトリ。</li>
</ul>
</li>
<li>config/package-lists/

<ul>
<li>特別にインストールしたいパッケージのリストを置くディレクトリ。</li>
<li>拡張子を .list.chroot にしてパッケージ名を列挙する。</li>
</ul>
</li>
</ul>


<h2>壁紙などの変更</h2>

<p><code>resources.yml</code> で設定されたファイルは <code>url</code> から自動ダウンロードして <code>path</code> に置くようになっています。</p>

<p><code>size</code> と <code>sha256sum</code> をチェックするだけで違っていても削除はしないようなので、
ダウンロードに失敗した時は<code>path</code> のファイルは手動で削除する必要がありました。</p>

<p><code>path</code> を変更した時も古いファイルが残ってしまうので、削除する必要がありました。</p>

<h2>dconf の設定</h2>

<p><code>config/includes.chroot/etc/skel/.config/dconf/user</code>
に設定変更後のバイナリが置かれていて、
これはひどいと思ったので、
<code>config/includes.chroot/etc/skel/.gnomerc</code>
で <code>gsettings set</code> を使って設定するようにしました。</p>

<h3>壁紙の変更</h3>

<p>起動後の <code>dconf-editor</code> で選択肢を確認しつつ、
<code>gsettings set org.gnome.desktop.background picture-options centered</code>
にしたり、
<code>gsettings set org.gnome.desktop.background picture-uri 'file:///usr/share/images/desktop-base/RubyKaigi2014-commonLogo.svg</code>
にしたりしました。</p>

<p>2014-07-13 追記:
生成後のイメージに CC-BY 3.0 の説明がないのは良くないと思って、
<code>config/includes.chroot/etc/skel/README.txt</code>
に説明を追加することにしました。</p>

<h3>デスクトップのアイコン</h3>

<p>以前は <code>gnome-panel</code> (上のバーのところ) に起動用のアイコンを追加していたようですが、
<code>gsettings set</code> で設定しようとすると
<code>org.gnome.gnome-panel.layout object-id-list</code> の他に
<code>org.gnome.gnome-panel.layout.objects.object-0</code> や
<code>org.gnome.gnome-panel.layout.objects.object-0.instance-config</code> などの
複数設定が必要で管理の手間もかかりそうだったので、
<code>gsettings set org.gnome.desktop.background show-desktop-icons true</code>
でデスクトップのアイコンが見えるように変更しました。</p>

<h3>スクリーンセーバーの停止</h3>

<p><code>gsettings set org.gnome.desktop.screensaver idle-activation-enabled false</code>
で止めました。</p>

<h2>chm の変更</h2>

<p><a href="http://ruby.morphball.net/refm-remix.html" title="Rubyリファレンスマニュアル chm版リミックス">Rubyリファレンスマニュアル chm版リミックス</a>
の標準テーマのRuby 2.1.0向け chm に差し替えました。
zip ファイルなので、先ほどの <code>.gnomerc</code> でデスクトップに展開するようにしました。</p>

<p>xCHM v. 1.20 で背景画像や色とかがつかないようなので、サイズが小さい標準を選びました。</p>

<h2>パッケージ変更</h2>

<p><code>jfbterm</code> の代わりに <code>fbterm</code> にしたり、
<code>ruby-build</code> でビルドに必要なパッケージを追加したり、
<code>config/includes.chroot/etc/iceweasel/profile/prefs.js</code> の代わりに <code>iceweasel-l10n-ja</code> を追加したり、
<code>bash-completion</code> などを追加したりしました。</p>

<h2>ruby-build で ruby 2.1.2 のインストール</h2>

<p><a href="http://qiita.com/takahashim/items/406421d515ef1d4f1189" title="[ReVIEW Tips] DockerでRe:VIEW - Qiita">[ReVIEW Tips] DockerでRe:VIEW &ndash; Qiita</a>
を参考にして rbenv は使わずに ruby-build だけ使って <code>/usr/local</code> に ruby 2.1.2 をインストールしました。</p>

<h2>localepurge</h2>

<p>locale の設定は live-config で起動時にやっていて hook の中で
<code>DEBIAN_FRONTEND=noninteractive dpkg-reconfigure localepurge</code>
としても起動後と違って ja locale の設定がなかったので、
起動後や設定した後に <code>debconf-show localepurge</code> で確認した値を使って、
<code>localepurge/nopurge</code> が <code>NEEDSCONFIGFIRST</code> のままなら
<code>echo localepurge localepurge/nopurge string "ja, ja_JP.UTF-8" | debconf-set-selections</code>
で設定することにしました。</p>

<p>これで約 200MB ぐらい小さくなりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4.1 で Doorkeeper を使った OAuth2 Provider のサンプルを実装した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-11-doorkeeper-provider-example-app.html"/>
    <updated>2014-07-11T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/doorkeeper-provider-example-app</id>
    <content type="html"><![CDATA[<p>ソースは github の
<a href="https://github.com/znz/doorkeeper-provider-app" title="znz/doorkeeper-provider-app">znz/doorkeeper-provider-app</a>
で公開しています。</p>

<p>基本的にはソースをみて参考にしてもらうと良いと思いますが、
説明が必要な部分を続きに書いてみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ruby 2.1.2</li>
<li>rails 4.1.4</li>
<li>bootstrap-sass 3.2.0.0</li>
<li>devise 3.2.4</li>
<li>devise-i18n-views 0.2.8</li>
<li>doorkeeper 1.3.1</li>
<li>cancancan 1.8.4</li>
<li>rolify 3.4.0</li>
<li>rspec-rails 3.0.1</li>
</ul>


<h2>試し方</h2>

<p>README に書いたようにローカルで動かすか heroku に deploy して
<a href="https://github.com/doorkeeper-gem/doorkeeper/wiki/Example-Applications" title="Example Applications">Example Applications</a>
にある Client examples の Sinatra and OAuth2 gem の
<a href="https://github.com/doorkeeper-gem/doorkeeper-sinatra-client" title="Doorkeeper Sinatra Client">Doorkeeper Sinatra Client</a>
を使って試しました。</p>

<h2>初期設定</h2>

<p>devise, doorkeeper, cancancan, rolify, rspec の個別の初期設定は普通に <code>rails generate</code> を使いました。</p>

<h2>ユーザー情報追加</h2>

<p>とれる情報を増やすために <code>User</code> に <code>name</code> を追加しました。
<code>devise-i18n-views</code> を使っている関係で view のカスタマイズはしていないので、
<code>rake db:seed</code> で設定したユーザーだけ <code>name</code> が設定されています。</p>

<p>必要に応じて view もカスタマイズしてください。</p>

<p>また <code>devise-i18n</code> の ja.yml を devise.ja.yml として入れています。
これは flash のメッセージやメールのメッセージなど、
<code>app/views</code> 以外の翻訳になるようです。</p>

<p><code>devise-i18n-views</code> は <code>app/views</code> を翻訳可能な view にするプロジェクトです。
なぜ <code>devise</code> とは別プロジェクトでやっているのかはよくわかりません。</p>

<h2><code>I18n.available_locales</code></h2>

<p><code>devise-i18n-views</code> を入れてしまうと <code>I18n.available_locales</code> が増えてしまうので、
困るのなら、カスタマイズ用の view を generate して、必要な言語だけ取り込んで
<code>Gemfile</code> から外してしまうのが良いと思います。</p>

<p>今回はそのまま残して右上の <code>Locale</code> で選択できるようにしています。
選択肢の翻訳は Wikipedia の左や www.debian.org の下などを参考にしたのですが <code>es-AR</code> はわからなかったので、
<code>es</code> と同じになってしまっています。</p>

<h2><code>/oauth/applications</code> のアクセス制限</h2>

<p><code>cancancan</code> と <code>rolify</code> を使って admin role があるユーザーだけに制限しています。
secret も見えてしまうので、 read 権限までしっかり制限する必要があるようです。</p>

<p><code>load_and_authorize_resource</code> でのロードと親クラス (<code>Doorkeeper::ApplicationsController</code>) の中でのロードでモデルの読み込みが二重になってしまうのですが、変更を少なくするためにそこは許容しました。</p>

<h2><code>GET /api/v1/me.json</code></h2>

<p>Doorkeeper gem の Wiki の例にあるようにユーザー情報をとれるようにしています。
制限していないと以下のような情報がとれました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span> <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;email&quot;</span><span class="p">:</span> <span class="s2">&quot;admin@example.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;created_at&quot;</span><span class="p">:</span> <span class="s2">&quot;2014-07-11T06:32:22.077Z&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;updated_at&quot;</span><span class="p">:</span> <span class="s2">&quot;2014-07-11T09:33:42.143Z&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;admin&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>制限したり関連するモデルの情報を増やしたりするなら
<a href="http://sugamasao.hatenablog.com/entry/20100914/1284415669" title="Rails のモデル関係と to_json(to_xml) - すがブロ">Rails のモデル関係と to_json(to_xml) &ndash; すがブロ</a>
に書いてあるように <code>respond_with</code> に <code>:only</code> をつけたり <code>:include</code> をつけたりすると出来るようです。</p>

<p>入ったり入らなかったりする条件がよくわからなかったのですが、
<code>devise</code> 関連では <code>authentication_token</code> が入っていることがあったので、
User モデルにいろんな情報を入れているなら、
きちんと制限した方が良さそうに思いました。</p>

<h2>microposts</h2>

<p><a href="http://railstutorial.jp/" title="Ruby on Rails チュートリアル：実例を使って Rails を学ぼう">Ruby on Rails チュートリアル：実例を使って Rails を学ぼう</a>
のように <code>Micropost</code> モデルを作成して、 API からも投稿できるようにしました。</p>

<p>投稿は scope で制限していて、デフォルトの <code>public</code> のみでは書き込めずに <code>write</code> も必要にしています。</p>

<p>API としては</p>

<ul>
<li><code>GET /api/v1/microposts</code> で投稿一覧</li>
<li><code>POST /api/v1/microposts</code> で新規投稿</li>
</ul>


<p>を用意しています。</p>

<h3><code>Can't verify CSRF token authenticity</code></h3>

<p>(2014-07-15 追記)</p>

<p>新規投稿の <code>POST</code> は <code>CSRF</code> チェックにひっかかってしまうので、
<code>skip_before_action :verify_authenticity_token</code>
を入れました。</p>

<p>以前から doorkeeper gem を使っているアプリでは
<code>Can't verify CSRF token authenticity</code>
というメッセージが出るだけで投稿自体は出来ていたのですが、
サンプルアプリでは投稿できなかったので、
<code>skip_before_action</code> を入れました。
(Rails 4 なので <code>skip_before_filter</code> ではなく <code>skip_before_action</code>)</p>

<h2>その後の変更点 (2014-07-15 追記)</h2>

<p>その後 <code>kaminari</code> 対応などを入れました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devise で通常ログイン出来るユーザーが他の複数サービス連携でログインできるようにした]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-08-devise-omniauth.html"/>
    <updated>2014-07-08T08:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/devise-omniauth</id>
    <content type="html"><![CDATA[<p><code>devise</code> でデータベース認証を実装している Rails アプリに Twitter などでもログインできるように
実装を追加してみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ruby 2.1.2</li>
<li>rails 4.1.4</li>
<li>devise 3.2.4</li>
<li>omniauth 1.2.1</li>
<li>omniauth-facebook 1.6.0</li>
<li>omniauth-github 1.1.2</li>
<li>omniauth-google-oauth2 0.2.4</li>
<li>omniauth-twitter 1.0.1</li>
<li>(dotenv 0.11.1) (key と secret の管理)</li>
<li>(font-awesome-sass 4.1.0) (view での <code>icon</code> メソッド)</li>
</ul>


<h2>前提条件</h2>

<ul>
<li>devise で通常の User モデルにメールアドレスとパスワードによる認証は実装されている。</li>
<li>複数サービスとの連携をするために User モデルには連携サービスの情報は直接持たずに UserAuth モデルに分ける。</li>
<li>連携対象サービスは Facebook, GitHub, Google+, Twitter</li>
<li>連携サービスからの追加情報はメールアドレスなども含めて一切とらずに認証だけに利用する。</li>
<li>どの連携サービス (provider) かと識別するための ID だけ保存する。</li>
<li>key や secret は環境変数で渡す。 (今回は dotenv を使ったが、 config/secrets.yml 経由でも良さそう)</li>
<li>今回はテストは未実装 (連携部分のテストの書き方をまだ調べていないため)</li>
<li>今回の実装範囲では I18n は使わずにメッセージは日本語固定</li>
</ul>


<h2>実装</h2>

<p>今回は以下のように実装を追加すると連携サービスでログインできるようになりました。</p>

<h3>Gemfile</h3>

<p>OmniAuth と使用するサービスを追加します。</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;omniauth&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;omniauth-facebook&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;omniauth-github&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;omniauth-google-oauth2&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;omniauth-twitter&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>initializer 追加</h3>

<p>key と secret があれば provider 登録するようにしました。</p>

<p>view で使うために、
登録されている provider の情報の取り方がわからなかったのと
追加で名前や Font Awesome のアイコン名も入れたかったので、
<code>AUTH_PROVIDERS</code> という配列にハッシュを入れるようにしています。</p>

<figure class='code'><figcaption><span>config/initializers/omniauth.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">AUTH_PROVIDERS</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="ss">OmniAuth</span><span class="p">:</span><span class="ss">:Builder</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">key</span><span class="p">,</span> <span class="n">secret</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FACEBOOK_KEY&#39;</span><span class="o">]</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FACEBOOK_SECRET&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">key</span> <span class="o">&amp;&amp;</span> <span class="n">secret</span>
</span><span class='line'>    <span class="n">provider</span> <span class="ss">:facebook</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">secret</span>
</span><span class='line'>    <span class="no">AUTH_PROVIDERS</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">provider</span><span class="p">:</span> <span class="ss">:facebook</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Facebook&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">key</span><span class="p">,</span> <span class="n">secret</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;GITHUB_CONSUMER_KEY&#39;</span><span class="o">]</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;GITHUB_CONSUMER_SECRET&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">key</span> <span class="o">&amp;&amp;</span> <span class="n">secret</span>
</span><span class='line'>    <span class="n">provider</span> <span class="ss">:github</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">secret</span>
</span><span class='line'>    <span class="no">AUTH_PROVIDERS</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">provider</span><span class="p">:</span> <span class="ss">:github</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;GitHub&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">key</span><span class="p">,</span> <span class="n">secret</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;GOOGLE_CLIENT_ID&#39;</span><span class="o">]</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;GOOGLE_CLIENT_SECRET&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">key</span> <span class="o">&amp;&amp;</span> <span class="n">secret</span>
</span><span class='line'>    <span class="n">provider</span> <span class="ss">:google_oauth2</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">secret</span>
</span><span class='line'>    <span class="no">AUTH_PROVIDERS</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">provider</span><span class="p">:</span> <span class="ss">:google_oauth2</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Google&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">icon</span><span class="p">:</span> <span class="ss">:google</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">key</span><span class="p">,</span> <span class="n">secret</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;TWITTER_CONSUMER_KEY&#39;</span><span class="o">]</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;TWITTER_CONSUMER_SECRET&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">key</span> <span class="o">&amp;&amp;</span> <span class="n">secret</span>
</span><span class='line'>    <span class="n">provider</span> <span class="ss">:twitter</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">secret</span>
</span><span class='line'>    <span class="no">AUTH_PROVIDERS</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">provider</span><span class="p">:</span> <span class="ss">:twitter</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Twitter&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">AUTH_PROVIDERS</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">provider</span><span class="o">|</span>
</span><span class='line'>    <span class="n">provider</span><span class="o">[</span><span class="ss">:icon</span><span class="o">]</span> <span class="o">||=</span> <span class="n">provider</span><span class="o">[</span><span class="ss">:provider</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>UserAuth モデル作成</h3>

<p><code>rails g model UserAuth user:references uid:string provider:string</code> で作成します。</p>

<p>モデルクラスは生成されたまま使いましたが、
validation を追加した方が良さそうです。</p>

<figure class='code'><figcaption><span>app/models/user_auth.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserAuth</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>データベースの方は <code>null: false</code> や index を追加しました。</p>

<figure class='code'><figcaption><span>db/migrate/*_create_user_auths.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateUserAuths</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:user_auths</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">references</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:uid</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:provider</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">add_index</span> <span class="ss">:user_auths</span><span class="p">,</span> <span class="o">[</span><span class="ss">:uid</span><span class="p">,</span> <span class="ss">:provider</span><span class="o">]</span><span class="p">,</span> <span class="ss">unique</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>rake db:migrate</code></h3>

<p><code>rake db:migrate</code> で反映しておきます。</p>

<h3>User クラス側</h3>

<p><code>has_many</code> を追加しておきます。</p>

<figure class='code'><figcaption><span>app/models/user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">has_many</span> <span class="ss">:user_auths</span><span class="p">,</span> <span class="ss">dependent</span><span class="p">:</span> <span class="ss">:destroy</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ルーティング追加</h3>

<p>まず、どう使われるのか把握するためにルーティングを追加します。</p>

<p><code>auth_help</code> は後でプライバシーポリシーなどを書いています。</p>

<figure class='code'><figcaption><span>config/routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/auth/help&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;auth#help&#39;</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:auth_help</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/auth/:provider/callback&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;auth#create&#39;</span>
</span><span class='line'>  <span class="n">delete</span> <span class="s1">&#39;/auth/destroy/:provider&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;auth#destroy&#39;</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:destroy_connection</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここには出てきていませんが、
OmniAuth で <code>/auth/:provider</code> がルーティングされるようです。</p>

<h3>AuthController 実装</h3>

<p>参考サイトの実装例を参考にして AuthController を実装しました。</p>

<p>help は静的な情報を表示するだけなので、実装は空です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="k">class</span> <span class="nc">AuthController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">skip_before_filter</span> <span class="ss">:authenticate_user!</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">auth</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;omniauth.auth&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">uid</span> <span class="o">=</span> <span class="n">auth</span><span class="o">[</span><span class="s1">&#39;uid&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">provider</span> <span class="o">=</span> <span class="n">auth</span><span class="o">[</span><span class="s1">&#39;provider&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">auth</span> <span class="o">=</span> <span class="no">UserAuth</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">uid</span><span class="p">:</span> <span class="n">uid</span><span class="p">,</span> <span class="ss">provider</span><span class="p">:</span> <span class="n">provider</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">auth</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">provider</span><span class="si">}</span><span class="s2">でログインしました。&quot;</span>
</span><span class='line'>      <span class="n">sign_in_and_redirect</span> <span class="n">auth</span><span class="o">.</span><span class="n">user</span><span class="p">,</span> <span class="ss">event</span><span class="p">:</span> <span class="ss">:authentication</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">authenticate_user!</span>
</span><span class='line'>      <span class="no">UserAuth</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">uid</span><span class="p">:</span> <span class="n">uid</span><span class="p">,</span> <span class="ss">provider</span><span class="p">:</span> <span class="n">provider</span><span class="p">,</span> <span class="n">user_id</span><span class="p">:</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">root_url</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">provider</span><span class="si">}</span><span class="s2">と連携しました。&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="n">provider</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:provider</span><span class="p">)</span>
</span><span class='line'>    <span class="n">authenticate_user!</span>
</span><span class='line'>    <span class="n">auth</span> <span class="o">=</span> <span class="no">UserAuth</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">provider</span><span class="p">:</span> <span class="n">provider</span><span class="p">,</span> <span class="n">user_id</span><span class="p">:</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="n">auth</span><span class="o">.</span><span class="n">destroy</span> <span class="k">if</span> <span class="n">auth</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">root_url</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">provider</span><span class="si">}</span><span class="s2">と連携解除しました。&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">help</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>まだ連携を登録していない状態で</p>

<ul>
<li>ログアウト状態</li>
<li>連携サービスで認証・連携許可</li>
<li>戻ってきて通常ログイン</li>
<li><code>auth/failure</code> に飛ばされる</li>
</ul>


<p>ということがおきているのですが、
<code>auth/failure</code>
を実装していないので、デフォルトの 404 エラー画面になってしまいます。</p>

<h3>view helpers 実装</h3>

<p>以前から使っていた <code>link_to_sign_in_or_out</code> の実装も同じファイルに持ってきて、
<code>link_to_provider</code> という汎用的なメソッドを実装しました。
使い方は後述します。</p>

<p><code>AUTH_PROVIDERS</code> のハッシュはここで使っています。</p>

<figure class='code'><figcaption><span>app/helpers/link_to_auth_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="k">module</span> <span class="nn">LinkToAuthHelper</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">link_to_sign_in_or_out</span><span class="p">(</span><span class="n">html_options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">user_signed_in?</span>
</span><span class='line'>      <span class="n">body</span> <span class="o">=</span> <span class="n">icon</span><span class="p">(</span><span class="ss">:&#39;sign-out&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="n">t</span><span class="p">(</span><span class="ss">:&quot;devise.shared.links.sign_out&quot;</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="s2">&quot;Sign out&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">html_options</span> <span class="o">=</span> <span class="p">{</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:delete</span> <span class="p">}</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">html_options</span><span class="p">)</span>
</span><span class='line'>      <span class="n">link_to</span> <span class="n">body</span><span class="p">,</span> <span class="ss">:destroy_user_session</span><span class="p">,</span> <span class="n">html_options</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">body</span> <span class="o">=</span> <span class="n">icon</span><span class="p">(</span><span class="ss">:&#39;sign-in&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="n">t</span><span class="p">(</span><span class="ss">:&quot;devise.shared.links.sign_in&quot;</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="s2">&quot;Sign in&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">link_to</span> <span class="n">body</span><span class="p">,</span> <span class="ss">:new_user_session</span><span class="p">,</span> <span class="n">html_options</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">link_to_provider</span><span class="p">(</span><span class="n">provider</span><span class="p">,</span> <span class="n">html_options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">current_user</span>
</span><span class='line'>      <span class="k">if</span> <span class="no">UserAuth</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">provider</span><span class="p">:</span> <span class="n">provider</span><span class="o">[</span><span class="ss">:provider</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">exists?</span>
</span><span class='line'>        <span class="n">html_options</span> <span class="o">=</span> <span class="p">{</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:delete</span> <span class="p">}</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">html_options</span><span class="p">)</span>
</span><span class='line'>        <span class="n">link_to</span> <span class="n">icon</span><span class="p">(</span><span class="n">provider</span><span class="o">[</span><span class="ss">:icon</span><span class="o">]</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">provider</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span><span class="si">}</span><span class="s2">との連携を解除&quot;</span><span class="p">,</span> <span class="n">destroy_connection_path</span><span class="p">(</span><span class="ss">provider</span><span class="p">:</span> <span class="n">provider</span><span class="o">[</span><span class="ss">:provider</span><span class="o">]</span><span class="p">),</span> <span class="n">html_options</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">link_to</span> <span class="n">icon</span><span class="p">(</span><span class="n">provider</span><span class="o">[</span><span class="ss">:icon</span><span class="o">]</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">provider</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span><span class="si">}</span><span class="s2">と連携&quot;</span><span class="p">,</span> <span class="s2">&quot;/auth/</span><span class="si">#{</span><span class="n">provider</span><span class="o">[</span><span class="ss">:provider</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">html_options</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">link_to</span> <span class="n">icon</span><span class="p">(</span><span class="n">provider</span><span class="o">[</span><span class="ss">:icon</span><span class="o">]</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">provider</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span><span class="si">}</span><span class="s2">でログイン&quot;</span><span class="p">,</span> <span class="s2">&quot;/auth/</span><span class="si">#{</span><span class="n">provider</span><span class="o">[</span><span class="ss">:provider</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">html_options</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>view に追加</h3>

<p>ナビゲーションに以下のように追加しました。
認証連携がないときは従来のログイン・ログアウトだけ表示しています。</p>

<p><code>AUTH_PROVIDERS</code> に登録されているときだけ連携のリンクを表示するようにしています。</p>

<figure class='code'><figcaption><span>app/views/layouts/_navigation.html.slim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>    li.dropdown
</span><span class='line'>      a.dropdown-toggle data-toggle=&quot;dropdown&quot;
</span><span class='line'>        = icon(:user) + &#39;ログイン管理&#39;
</span><span class='line'>        b.caret
</span><span class='line'>      ul.dropdown-menu
</span><span class='line'>        li= link_to_sign_in_or_out
</span><span class='line'>        - unless AUTH_PROVIDERS.empty?
</span><span class='line'>          li= link_to icon(:info)+&quot;認証連携のヘルプ&quot;, auth_help_path
</span><span class='line'>        - AUTH_PROVIDERS.each do |provider|
</span><span class='line'>          li= link_to_provider(provider)
</span></code></pre></td></tr></table></div></figure>


<h3>twitter 連携</h3>

<p>Twitter は複数アカウントを使うことも通常の使用範囲として想定されていて、
アプリ専用のアカウントもとりやすいので、
Twitter 連携から試してみました。</p>

<p><a href="https://apps.twitter.com/">https://apps.twitter.com/</a> から <code>Create New App</code> で作成します。</p>

<ul>
<li>Name: Twitter 全体で一意になるアプリケーションの ID 的にも使われるもの。ツイートの時にツイートしたアプリ名としても埋め込まれるが、今回は認証のみなので、他とぶつからないような名前という以上はこだわらなかった。</li>
<li>Description: 認証のときに出てくる説明。</li>
<li>Website: たとえば <code>http://app.127.0.0.1.xip.io:3000/</code> など</li>
<li>Callback URL: たとえば <code>http://app.127.0.0.1.xip.io:3000/auth/twitter/callback</code> のように <code>/auth/twitter/callback</code> にする。実サイトなら <code>https</code> にすべき。</li>
</ul>


<p>作成後には <code>Allow this application to be used to Sign in with Twitter</code> のチェックを入れておきます。
チェックがないと Twitter 連携でのログインがうまくいかないようです。</p>

<p>アイコンや Organization なども必要に応じて変更します。</p>

<p>API keys タブで key と secret を取得します。</p>

<ul>
<li>API key : 環境変数 <code>TWITTER_CONSUMER_KEY</code> に設定</li>
<li>API secret : 環境変数 <code>TWITTER_CONSUMER_SECRET</code> に設定</li>
</ul>


<p>dotenv を使っているので <code>.env</code> に以下のような感じで設定しました。
ランダムな文字列のように見えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>TWITTER_CONSUMER_KEY=&quot;xxxxXXxxXxXxXXXxXxXXXXxxx&quot;
</span><span class='line'>TWITTER_CONSUMER_SECRET=&quot;xxXXxXXxxxxxxXXXXXxXxXXxxXXXxXXxxxxXXxxXxxXXxxXxxx&quot;
</span></code></pre></td></tr></table></div></figure>


<h3>動作確認</h3>

<ul>
<li>通常のログインをした状態で「Twitter と連携」で Twitter の許可画面に飛びます。</li>
<li>許可すると「Twitter 側に許可情報」と「UserAuth に連携情報」が保存されます。</li>
<li>「Twitter との連携を解除」で「UserAuth が削除」されます。</li>
<li>「ログアウト」して「Twitter でログイン」すると「ログイン画面」に戻ります。</li>
<li>ログインすると <code>auth/failure</code> が 404 エラーになります。ここは後で実装する予定です。</li>
<li>再度ログイン後の画面を直接開きます。</li>
<li>再度「Twitter と連携」で「UserAuth に連携情報」が保存されます。「Twitter 側の許可情報」は古いままです。</li>
<li>「ログアウト」して「Twitter でログイン」でログインできます。</li>
<li><a href="https://twitter.com/settings/applications">https://twitter.com/settings/applications</a> で許可を取り消します。</li>
<li>「ログアウト」して「Twitter でログイン」で Twitter の許可画面に飛びます。</li>
<li>許可すると「Twitter 側に許可情報」が保存されて、「UserAuth」は残っているので、そのままログインできます。</li>
</ul>


<h3>GitHub 連携</h3>

<p>GitHub 連携は作成後にすぐに使えるので、アプリケーション作成に使っても良いアカウントがあれば一番簡単です。</p>

<p><a href="https://github.com/settings/applications">https://github.com/settings/applications</a> から <code>Register new application</code> で作成します。</p>

<ul>
<li>Application name: 適切な名前を設定</li>
<li>Homepage URL: たとえば <code>http://app.127.0.0.1.xip.io:3000/</code> など</li>
<li>Application description: ユーザーが許可するときにわかりやすい説明</li>
<li>Authorization callback URL: たとえば <code>http://app.127.0.0.1.xip.io:3000/auth/github/callback</code> のように <code>/auth/github/callback</code> にする。実サイトなら <code>https</code> にすべき。</li>
</ul>


<p>右上に見えている Client ID と Client Secret を使います。</p>

<ul>
<li>Client ID : 環境変数 <code>GITHUB_CONSUMER_KEY</code> に設定</li>
<li>Client Secret : 環境変数 <code>GITHUB_CONSUMER_SECRET</code> に設定</li>
</ul>


<p>dotenv を使っているので <code>.env</code> に以下のような感じで設定しました。
十六進数の数字のように見えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>GITHUB_CONSUMER_KEY=&quot;xxxxxxxxxxxxxxxxxxxx&quot;
</span><span class='line'>GITHUB_CONSUMER_SECRET=&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;
</span></code></pre></td></tr></table></div></figure>


<h2>Facebook 連携</h2>

<p><a href="https://developers.facebook.com/">https://developers.facebook.com/</a> から上の <code>Apps</code> の中にある <code>Craete a New App</code> で作成します。
最初は作成前に開発者関連の規約などに同意する必要があるようです。</p>

<ul>
<li>Display Name: 適切な名前を設定します。</li>
<li>Namespace: optional なので空欄のままで良いようです。</li>
<li>カテゴリ: 適当に選択します。</li>
</ul>


<p>セキュリティチェックがあるので、入力すると作成できます。</p>

<p>右上に見えている App ID と App Secret (Show を押すとパスワード認証の後に内容表示) を使います。</p>

<ul>
<li>App ID : 環境変数 <code>FACEBOOK_KEY</code> に設定</li>
<li>App Secret : 環境変数 <code>FACEBOOK_SECRET</code> に設定</li>
</ul>


<p>dotenv を使っているので <code>.env</code> に以下のような感じで設定しました。
十進数と十六進数の数字のように見えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>FACEBOOK_KEY=&quot;xxxxxxxxxxxxxxx&quot;
</span><span class='line'>FACEBOOK_SECRET=&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;
</span></code></pre></td></tr></table></div></figure>


<p><code>Settings</code> の <code>Add Platform</code> で <code>Website</code> を選んで追加します。</p>

<ul>
<li>Site URL: たとえば <code>http://app.127.0.0.1.xip.io:3000/</code> など</li>
<li>Mobile Site URL: 空欄のまま</li>
</ul>


<p>callback URL は設定が不要だったので、
Site URL の下ならどこでも良さそうです。</p>

<h3><code>google_oauth2</code> 連携</h3>

<p><a href="https://github.com/zquestz/omniauth-google-oauth2">https://github.com/zquestz/omniauth-google-oauth2</a> に書いてあるように
<a href="https://code.google.com/apis/console/">https://code.google.com/apis/console/</a> を開きます。</p>

<p>飛ばされる先で <code>API &amp; AUTH</code> の中の <code>Credentials</code> で <code>Create new Client ID</code> で作成します。</p>

<ul>
<li>Application type : Web application</li>
<li>Authorized JavaScript origins : たとえば <code>http://app.127.0.0.1.xip.io:3000</code> など</li>
<li>Authorized redirect URI : たとえば <code>http://app.127.0.0.1.xip.io:3000/auth/google_oauth2/callback</code> のように <code>/auth/google_oauth2/callback</code> にする。実サイトなら <code>https</code> にすべき。</li>
</ul>


<p>右に見えている Client ID と Client secret を使います。</p>

<ul>
<li>Client ID : 環境変数 <code>GOOGLE_CLIENT_ID</code> に設定</li>
<li>Client secret : 環境変数 <code>GOOGLE_CLIENT_SECRET</code> に設定</li>
</ul>


<p>dotenv を使っているので <code>.env</code> に以下のような感じで設定しました。
ドメインっぽい文字列とランダムな文字列のように見えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>GOOGLE_CLIENT_ID=&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com&quot;
</span><span class='line'>GOOGLE_CLIENT_SECRET=&quot;XXxxxXxXxxxXXxXXxXxXXxxX&quot;
</span></code></pre></td></tr></table></div></figure>


<p>さらに <code>Consent screen</code> での設定が必要です。
しかも全アプリ共通のようなので、名前を分けたい場合はグーグルアカウントごと違うものにしないといけないように見えました。</p>

<ul>
<li>Email address : グーグルアカウントのアドレス選択</li>
<li>Product name : 適切な名前を設定</li>
<li>Homepage URL 以下 : 必要に応じて設定</li>
</ul>


<p>さらにエラーメッセージ (<code>"Access Not Configured. Please use Google Developers Console to activate the API for your project."</code>) で検索してわかったのですが、
<a href="http://qiita.com/aikyo02/items/459d03af304e1188f110" title="Google OAuth 2.0 loginが2014年9月に使えなくなる(Googleアカウントからのユーザ登録機能がある場合は注意)">Google OAuth 2.0 loginが2014年9月に使えなくなる(Googleアカウントからのユーザ登録機能がある場合は注意)</a>
に書いてあるように、
APIs で <code>Google+ API</code> も有効にする必要がありました。</p>

<h2>参考サイト</h2>

<ul>
<li><a href="http://xoyip.hatenablog.com/entry/2013/12/20/212109" title="Railsでログインとは別に複数のサービスとの連携を行う方法 - PILOG">Railsでログインとは別に複数のサービスとの連携を行う方法 &ndash; PILOG</a>
と<a href="https://github.com/xoyip/multi-oauth">その実装</a>は非常に参考になりました。</li>
<li><a href="http://qiita.com/aikyo02/items/459d03af304e1188f110" title="Google OAuth 2.0 loginが2014年9月に使えなくなる(Googleアカウントからのユーザ登録機能がある場合は注意)">Google OAuth 2.0 loginが2014年9月に使えなくなる(Googleアカウントからのユーザ登録機能がある場合は注意)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAWS-UG三都物語2014に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-05-jawsug-santo.html"/>
    <updated>2014-07-05T13:07:03+09:00</updated>
    <id>http://blog.n-z.jp/blog/jawsug-santo</id>
    <content type="html"><![CDATA[<p><a href="http://santo2014.jaws-ug.jp/" title="夏のJAWS-UG 三都物語 2014">夏のJAWS-UG 三都物語 2014</a>
に午後から参加して、
主に Vagrant の話を聞いたのと、
CDP道場（初中級）に参加していました。</p>

<!--more-->


<h2>開発現場で活用する Vagrant</h2>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00F418SQ8" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>まず最初に Vagrant の話をきいてきました。</p>

<p><a href="http://www.amazon.co.jp/gp/product/B00F418SQ8/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00F418SQ8&amp;linkCode=as2&amp;tag=znz-22">Vagrant入門ガイド</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=B00F418SQ8" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
がなぜか今200円になっていると言っていました。</p>

<p><a href="https://github.com/shin1x1/vagrant-demo-20140705">https://github.com/shin1x1/vagrant-demo-20140705</a> にデモの内容が公開されていますが、後で聞いてみたらスライドの番号では 4 が vagrant share だけだったので、番号がずれていると言っていました。</p>

<p>vagrant up だけで開発環境が構築できるようにしておくというのはマネしてみようと思いました。</p>

<p>ansible をゲスト OS 側に入れるのは vagrant up だけで済む (ホスト側に ansible を入れる必要がない) という他にホスト側の ansible のバージョンが上がって provisioning に影響が出るのを避けられるという利点もあると思いました。</p>

<h2>オンプレから AWS への劇的ビフォーアフター</h2>

<p>オンプレという言葉がさしているものが期待していたものと違ったので、あまり聞いていなくて他のことをしていました。</p>

<h2>AWS と mackerel で実践する Immutable Infrastructure</h2>

<p>他の作業がはかどっていたので、作業しながら聞いていました。</p>

<p>とりあえず、まだ流動的な部分もありそうで、
しばらく様子見な部分も多そうだと思いました。</p>

<h2>CDP 道場（初中級）</h2>

<p>CDP というのはクラウドデザインパターンという意味だったらしく、
クラウドを実際にどういう構成で使うのかというのが勉強になりました。</p>

<h2>その後</h2>

<p>懇親会が無料というのを知らなかったこともあり、
そのまま帰りました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GOPATHとghqの設定を変更した話とgitconfigのコマンドでの設定の話]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-05-ghq-gitconfig.html"/>
    <updated>2014-07-05T09:55:07+09:00</updated>
    <id>http://blog.n-z.jp/blog/ghq-gitconfig</id>
    <content type="html"><![CDATA[<p><a href="http://blog.kentarok.org/entry/2014/06/03/135300" title="ghqを使ったローカルリポジトリの統一的・効率的な管理について - delirious thoughts">ghqを使ったローカルリポジトリの統一的・効率的な管理について &ndash; delirious thoughts</a>
を参考にして、
go と ghq で同じディレクトリを使っていたのですが、
go で自動で追加ダウンロードされたものと
自分でダウンロードしたものが混ざるとわかりにくいと思ったので、
分けることにしました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>go version go1.3 darwin/amd64</li>
<li>git verseion 2.0.0</li>
<li>Mercurial Distributed SCM (version 3.0.1)</li>
<li>ghq version HEAD (2014-06-27 が最新コミットの状態)</li>
</ul>


<h2>go などのインストール</h2>

<p><a href="http://brew.sh/">Homebrew</a> を使って
<code>brew install go --cross-compile-common</code>
でインストールしました。</p>

<p>git と mercurial もインストールしておきました。</p>

<h2>シェルの設定 (GOPATH など)</h2>

<p>bash と zsh の共通の設定として
<a href="https://github.com/znz/dot-shell/blob/bb84c5aefc83eab5ce1841508abd726ee9db6577/profile.d/50gopath.sh" title="50gopath.sh">50gopath.sh</a>
で以下のように設定しています。</p>

<p>統合している時は go とか git とかの意味をかねて g だけにしていましたが、
今は go 専用にしています。</p>

<figure class='code'><figcaption><span>50gopath.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;${GOPATH:-}&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">export </span><span class="nv">GOPATH</span><span class="o">=</span><span class="nv">$HOME</span>/g
</span><span class='line'>    <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$GOPATH</span>/bin
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>その後に zsh 専用の追加設定で
<a href="https://github.com/znz/dot-shell/blob/bb84c5aefc83eab5ce1841508abd726ee9db6577/profile.d/50gopath.zsh" title="50gopath.zsh">50gopath.zsh</a>
で以下のように設定しています。</p>

<p>GOPATH が PATH のように <code>:</code> 区切りで複数になる可能性を考慮してしまったのですが、
<a href="http://golang.org/doc/code.html#GOPATH" title="The GOPATH environment variable">The GOPATH environment variable</a>
をみるとそういうことはなさそうなので、
<code>${^${(s/:/)GOPATH}}</code> は単純に <code>${GOPATH}</code> でも良さそうです。</p>

<p>そして fpath に <code>_ghq</code> のパスを追加して <code>ghq</code> の引数を補完できるようにしています。</p>

<figure class='code'><figcaption><span>50gopath.zsh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">path</span><span class="o">=(</span> <span class="nv">$path</span> <span class="k">${</span><span class="p">^</span><span class="k">${</span><span class="p">(s/:/)GOPATH</span><span class="k">}}</span>/bin<span class="o">(</span>N<span class="o">)</span> <span class="o">)</span>
</span><span class='line'><span class="nv">fpath</span><span class="o">=(</span> <span class="nv">$fpath</span> <span class="k">${</span><span class="p">^</span><span class="k">${</span><span class="p">(s/:/)GOPATH</span><span class="k">}}</span>/src/*/*/ghq/zsh<span class="o">(</span>N<span class="o">)</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ghq のインストール</h2>

<p><code>go get -v github.com/motemen/ghq</code>
でインストールしました。</p>

<h3><code>https://</code> の要不要</h3>

<p><code>ghq get</code> では <code>github.com</code> から書く時は <code>https://</code> が必須なのですが、
こちらは <code>https://</code> は不要というか、
むしろ付けるとエラーになりました。</p>

<h2>.gitconfig の設定</h2>

<p><a href="https://github.com/znz/dot-shell/blob/bb84c5aefc83eab5ce1841508abd726ee9db6577/git-config.sh" title="git-config.sh">git-config.sh</a>
で <code>user.name</code> や <code>user.email</code> 以外の共通のものはまとめて設定しています。</p>

<h3>コマンドでの設定の追加削除</h3>

<p>詳細はドキュメントをみてもらうとして、まとめておくと以下のようになります。</p>

<ul>
<li>単独の設定 : <code>git config --global section.key value</code></li>
<li>複数設定 : <code>git config --global section.key value</code> の後で <code>git config --global --add section.key value</code></li>
<li>複数設定削除 : <code>git config --global --unset-all section.key</code> (ただしセクションが空になっても残る)</li>
<li>セクションごと削除 : <code>git config --global --remove-section セクション</code></li>
</ul>


<h3>ghq の設定</h3>

<p><code>ghq.root</code> を <code>--unset-all</code> だけすると git-config.sh を実行する度に
ghq セクション、つまり <code>[ghq]</code> の行が増えていってしまったので、
<code>--remove-section</code> を使いました。
他に <code>ghq</code> セクションに設定を入れていたら、
それも消えてしまうので注意してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># ghq section</span>
</span><span class='line'>git config --global --remove-section <span class="s2">&quot;ghq&quot;</span> <span class="o">||</span> :
</span><span class='line'><span class="nv">GHQ_ROOT</span><span class="o">=</span><span class="s2">&quot;ghq.root&quot;</span>
</span><span class='line'><span class="c">#git config --global --unset-all &quot;$GHQ_ROOT&quot; || :</span>
</span><span class='line'>git config --global <span class="s2">&quot;$GHQ_ROOT&quot;</span> <span class="s2">&quot;$HOME/s&quot;</span>
</span><span class='line'>git config --global --add <span class="s2">&quot;$GHQ_ROOT&quot;</span> <span class="s2">&quot;$HOME/g/src&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで <code>ghq get</code> は <code>$HOME/s</code> に入って
<code>ghq look</code> では両方見えるようになりました。</p>

<h3>github の URL 統一の話</h3>

<p>github の URL は https に統一して、
gitconfig の設定で
push は ssh プロトコル、
pull などは git プロトコル (昔は Git Read-Only と書いてあった URL)
を使うようにしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># github upload</span>
</span><span class='line'><span class="nv">GITHUB_URL_PREFIX</span><span class="o">=</span><span class="s2">&quot;url.git@github.com:&quot;</span>
</span><span class='line'>git config --global --remove-section <span class="s2">&quot;$GITHUB_URL_PREFIX&quot;</span> <span class="o">||</span> :
</span><span class='line'>git config --global <span class="s2">&quot;$GITHUB_URL_PREFIX&quot;</span>.pushInsteadOf <span class="s2">&quot;git://github.com/&quot;</span>
</span><span class='line'>git config --global --add <span class="s2">&quot;$GITHUB_URL_PREFIX&quot;</span>.pushInsteadOf <span class="s2">&quot;https://github.com/&quot;</span>
</span><span class='line'><span class="c"># gist upload</span>
</span><span class='line'>git config --global <span class="s2">&quot;url.git@gist.github.com:&quot;</span>.pushInsteadOf <span class="s2">&quot;https://gist.github.com/$(git config github.user)/&quot;</span>
</span><span class='line'><span class="c"># github download</span>
</span><span class='line'>git config --global url.<span class="s2">&quot;git://github.com/&quot;</span>.insteadOf <span class="s2">&quot;https://github.com/&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>詳細は
<a href="http://blog.n-z.jp/blog/2013-11-28-git-insteadof.html" title="githubでhttpsのURLを指定してもgitプロトコルやssh経由にする方法">githubでhttpsのURLを指定してもgitプロトコルやssh経由にする方法</a>
を参照してください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amagasakirb特別編 須藤さん関連プロダクツ勉強会に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-28-amagasakirb.html"/>
    <updated>2014-06-28T13:16:24+09:00</updated>
    <id>http://blog.n-z.jp/blog/amagasakirb</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/event/index/186111/" title="6月28日 Amagasakirb特別編 須藤さん関連プロダクツ勉強会(兵庫県)">6月28日 Amagasakirb特別編 須藤さん関連プロダクツ勉強会(兵庫県)</a>
に参加しました。</p>

<!--more-->


<h2>自己紹介</h2>

<p>まず最初に、使っている須藤さん関連プロダクツの話を中心に自己紹介していました。
イベントのページには書いていませんでしたが、
<a href="http://docs.ruby-lang.org/ja/search/" title="るりまサーチ">るりまサーチ</a>
も須藤さん関連プロダクツでした。</p>

<h2>メモ</h2>

<p>その後は須藤さん関連プロダクツの話をいろいろしていたので、
その中からのメモです。
話としては groonga 関連と ActiveLdap 関連が多かったです。</p>

<h3>groonga 関連</h3>

<ul>
<li><a href="http://ongaeshi.hatenablog.com/entry/honyomi-init" title="数万の電子書籍から目的のページを一瞬で見つけ出す、Honyomi - ブログのおんがえし">数万の電子書籍から目的のページを一瞬で見つけ出す、Honyomi &ndash; ブログのおんがえし</a></li>
<li><a href="http://milkode.ongaeshi.me/" title="Milkode - 行指向のソースコード検索エンジン">Milkode &ndash; 行指向のソースコード検索エンジン</a></li>
<li><a href="http://patentfield.com/%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B8" title="PatentField | 無料特許検索">PatentField | 無料特許検索</a></li>
</ul>


<h3>ActiveLdap 関連</h3>

<ul>
<li>値が1個しかなくても常に配列を返す使い方も出来る</li>
<li>使い方が Net-LDAP より直感的</li>
</ul>


<h3>groonga と競合する?プロダクト</h3>

<ul>
<li>solr</li>
<li>lucene</li>
<li>xapian</li>
</ul>


<h3>mroonga 関連メモ</h3>

<p>他の話はメモしきれなかったので、
テーブルの情報取得に</p>

<ul>
<li><code>show create table test;</code></li>
<li><code>desc test;</code></li>
</ul>


<p>の2種類の方法を使っていたことぐらいはメモしておきたいと思いました。</p>

<h3>ChupaText</h3>

<ul>
<li>チュパカブラが名前の由来</li>
<li>groonga と組み合わせれば Hyper Estraier のようなものが作れるかも</li>
</ul>


<h3>Jekyll のコンテンツの翻訳の話</h3>

<ul>
<li><a href="http://www.clear-code.com/blog/2014/4/23.html" title="Jekyllで複数言語のコンテンツを継続してメンテナンスする方法 - ククログ(2014-04-23)">Jekyllで複数言語のコンテンツを継続してメンテナンスする方法 &ndash; ククログ(2014-04-23)</a></li>
<li><a href="https://www.ruby-lang.org/admin/translation-status/" title="www.ruby-lang.org - News Post Translation Status">www.ruby-lang.org &ndash; News Post Translation Status</a></li>
</ul>


<h3>須藤さん関連</h3>

<ul>
<li><a href="http://slide.rabbit-shocker.org/authors/kou/">http://slide.rabbit-shocker.org/authors/kou/</a></li>
<li><a href="https://github.com/kou">https://github.com/kou</a></li>
<li><a href="https://github.com/clear-code/sezemi-2014-readable-code">https://github.com/clear-code/sezemi-2014-readable-code</a></li>
</ul>


<h3>最後に須藤さんの過去のプレゼンから</h3>

<ul>
<li><a href="http://slide.rabbit-shocker.org/authors/kou/devmi-2013/">http://slide.rabbit-shocker.org/authors/kou/devmi-2013/</a></li>
</ul>


<h2>rabbiter 問題</h2>

<p>自己紹介の時に rabbit を使ったので、せっかくなので、
rabbiter を使おうとしたのですが、今回も事前に動かせる状態までは
もっていけませんでした。</p>

<p>しかし、
Homebrew で rabbiter がインストールできなかったり、動かなかったりしたのが、
須藤さんの助言で解決しました。</p>

<p>まず <code>libffi</code> は <code>PKG_CONFIG_PATH</code> で <code>libffi.pc</code> の場所を指定すれば通りました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PKG_CONFIG_PATH=/usr/local/Cellar/libffi/3.0.13/lib/pkgconfig
</span><span class='line'>gem install rabbiter</span></code></pre></td></tr></table></div></figure>


<p>この件は <code>/usr/local/lib/pkgconfig</code> に symlink がないのが問題なので、
<a href="https://github.com/Homebrew/homebrew/pull/30516">Homebrew 側の問題の修正</a>
を pull request してみました。</p>

<p>次に <code>rabbiter --filter twitter</code> のように起動しても
<code>(rabbiter:99703): GLib-GIO-ERROR **: No GSettings schemas are installed on the system</code>
ですぐに落ちてしまうという問題が起きました。</p>

<p>これは須藤さんに調べてもらって、環境変数 <code>GSETTINGS_SCHEMA_DIR</code> で <code>schemas</code> のディレクトリを指定すれば良いということで、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export GSETTINGS_SCHEMA_DIR=/usr/local/Cellar/gsettings-desktop-schemas/3.12.2/share/glib-2.0/schemas
</span><span class='line'>rabbiter --filter 'twitter'</span></code></pre></td></tr></table></div></figure>


<p>のように起動して解決しました。</p>

<p>こちらは対処方法がわからなかったので、
<a href="https://github.com/Homebrew/homebrew/issues/26455">gsettings-desktop-schemas crashes under current configure options</a>
という同様の現象が報告されている issue に回避策をコメントしておきました。</p>

<p>その後も以下のエラーで動いていませんでしたが、これは
<code>~/.rabbit/twitter-oauth.yaml</code>
が古いままで、アプリ連携の許可を取り消してしまっていたためで、
ファイルを削除して許可し直せば直りました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rabbiter --filter 'twitter'
</span><span class='line'>[エラー]
</span><span class='line'>[twitter] invalid status code: 401.</span></code></pre></td></tr></table></div></figure>


<h2>自分のスライド</h2>

<p>最後に自分の自己紹介の時に使ったスライドを載せておきます。
<code>ActiveLdap</code> と書いていますが、
<code>ActiveSambaLdap</code> の間違いでした。</p>

<iframe src="http://slide.rabbit-shocker.org/authors/znz/amagasakirb-201406/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="http://slide.rabbit-shocker.org/authors/znz/amagasakirb-201406/" title="普段使っている須藤さん関連プロダクツ">普段使っている須藤さん関連プロダクツ</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[環境変数にハッシュの配列を入れてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-25-env-array-hash.html"/>
    <updated>2014-06-25T21:37:22+09:00</updated>
    <id>http://blog.n-z.jp/blog/env-array-hash</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/znz/status/481691675136245760">環境変数にハッシュを入れたいと思って、ちょっと考えてみたら LTSV を使えば良いということに気づいた</a>ので、
実装してみました。
実際には単独のハッシュではなくハッシュの配列がほしかったので、
連続する数値を末尾に付けて複数受け取れるようにしています。</p>

<!--more-->


<h2>実装</h2>

<p>キーワード引数を使っているので、
以下の実装のままだと ruby 2.0.0 以降必須です。
必要なら適当に変更して使ってください。</p>

<div><script src='https://gist.github.com/849166c048a2117c341d.js?file=env_ltsv_each.rb'></script>
<noscript><pre><code># -*- coding: utf-8 -*-
# env_ltsv_each.rb
# copyright (c) 2014 Kazuhiro NISHIYAMA
# This software is released under the MIT License.
# http://opensource.org/licenses/MIT
require &#39;ostruct&#39;

def env_ltsv_each(prefix, start: 0, encoding: Encoding::UTF_8, scrub: false)
  block_given? or return enum_for(__method__)
  i = start
  loop do
    ltsv = ENV[&quot;#{prefix}_#{i}&quot;]
    i = i.succ
    break unless ltsv
    h = OpenStruct.new
    ltsv.split(/\t/).each do |pair|
      key, value = pair.split(&#39;:&#39;, 2)
      value.force_encoding(encoding)
      value.scrub! if scrub
      h[key] = value
    end
    yield h
  end
  nil
end

if __FILE__ == $0
  ENV[&#39;NAVI_0&#39;] = &#39;icon:top label:Top   uri:/&#39;
  ENV[&#39;NAVI_1&#39;] = &#39;icon:posts   label:Listing Posts uri:/posts&#39;
  ENV[&#39;NAVI_2&#39;] = &#39;icon:users   label:Listing Users uri:/users&#39;
  env_ltsv_each(&#39;NAVI&#39;) do |h|
    puts %Q(&lt;a href=&quot;#{h.uri}&quot;&gt;&lt;img src=&quot;#{h.icon}.png&quot; alt=&quot;#{h.label}&quot;&gt;&lt;/a&gt;)
    #=&gt;
    # &lt;a href=&quot;/&quot;&gt;&lt;img src=&quot;top.png&quot; alt=&quot;Top&quot;&gt;&lt;/a&gt;
    # &lt;a href=&quot;/posts&quot;&gt;&lt;img src=&quot;posts.png&quot; alt=&quot;Listing Posts&quot;&gt;&lt;/a&gt;
    # &lt;a href=&quot;/users&quot;&gt;&lt;img src=&quot;users.png&quot; alt=&quot;Listing Users&quot;&gt;&lt;/a&gt;
  end
end
</code></pre></noscript></div>


<h2>詳細</h2>

<p><code>String#scrub!</code> は 2.1.0 以降か
<a href="https://rubygems.org/gems/string-scrub">string-scrub gem</a>
が必要なのでデフォルトでは呼ばないようにしています。</p>

<p><code>Hash</code> だと取り出すのが面倒だったので、
<code>OpenStruct</code> を使ってみました。
メソッド名として問題がある場合は
<code>h['send']</code> のように普通の <code>Hash</code> のように取り出せます。</p>

<p>添字をまわすのに <code>succ</code> を使っているので <code>FOO_A</code>, <code>FOO_B</code>, &hellip; のような使い方も出来ると思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[caffでキーサインした]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-22-key-sign-caff.html"/>
    <updated>2014-06-22T19:07:19+09:00</updated>
    <id>http://blog.n-z.jp/blog/key-sign-caff</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20140622" title="第 85 回 関西 Debian 勉強会">第 85 回 関西 Debian 勉強会</a>
で
<a href="https://launchpad.net/~mocchi">坂本さん</a>とキーサインをしたので、そのメモです。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 12.04.4 LTS</li>
<li>gnupg 1.4.11-3ubuntu2.5</li>
<li>signing-party 1.1.4-1</li>
</ul>


<h2>事前準備</h2>

<p>事前にキーサインをするとわかっていれば <code>gpg-key2ps</code> コマンドで fingerprint の紙を用意しておくと良いと思います。
今回は少人数だったので、
fingerprint は画面上で見せて確認してもらいました。</p>

<h2>本人確認</h2>

<p>対面で運転免許証などの写真付きの身分証明書で名前を確認して、
それと署名対象の鍵の uid に入っている名前が一致するのを確認しておきます。
また、後で署名するために fingerprint の情報も入手しておきます。</p>

<h2>caff の設定</h2>

<p>基本的には
<a href="http://tokyodebian.alioth.debian.org/pdf/debianmeetingresume200910-presentation.pdf">Why GPG Key sign? 東京エリア Debian 勉強会 in OSC 2009 Tokyo/Fall</a>
の PDF の内容のままです。</p>

<h3>.caffrc</h3>

<p>自分の鍵 ID を <code>gpg --list-secret-keys</code> で確認すると、
<code>4096R/B4222F7A</code> とわかるので、
<code>gpg --fingerprint B4222F7A</code>
で fingerprint 全体を確認しておきます。
(fingerprint の末尾が鍵 ID です。)</p>

<p>spam よけのために email のところはちょっと改変していますが、
<code>~/.caffrc</code> は以下のように設定しています。
<code>keyid</code> は fingerprint の末尾のうち、
設定例と同じ長さだけ普通の鍵 ID よりちょっと長めに取り出して設定しています。
<code>owner</code> と <code>email</code> はメール送信の時に使われます。</p>

<figure class='code'><figcaption><span>~/.caffrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># .caffrc -- vim:ft=perl:</span>
</span><span class='line'><span class="c1"># This file is in perl(1) format - see caff(1) for details.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$CONFIG</span><span class="p">{</span><span class="s">&#39;owner&#39;</span><span class="p">}</span> <span class="o">=</span> <span class="s">&#39;Kazuhiro NISHIYAMA&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$CONFIG</span><span class="p">{</span><span class="s">&#39;email&#39;</span><span class="p">}</span> <span class="o">=</span> <span class="s">&#39;zn mbf.nifty.com&#39;</span><span class="p">;</span>
</span><span class='line'><span class="c1">#$CONFIG{&#39;reply-to&#39;} = &#39;foo@bla.org&#39;;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># You can get your long keyid from</span>
</span><span class='line'><span class="c1">#   gpg --with-colons --list-key &lt;yourkeyid|name|emailaddress..&gt;</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># If you have a v4 key, it will simply be the last 16 digits of</span>
</span><span class='line'><span class="c1"># your fingerprint.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Example:</span>
</span><span class='line'><span class="c1">#   $CONFIG{&#39;keyid&#39;} = [ qw{FEDCBA9876543210} ];</span>
</span><span class='line'><span class="c1">#  or, if you have more than one key:</span>
</span><span class='line'><span class="c1">#   $CONFIG{&#39;keyid&#39;} = [ qw{0123456789ABCDEF 89ABCDEF76543210} ];</span>
</span><span class='line'><span class="nv">$CONFIG</span><span class="p">{</span><span class="s">&#39;keyid&#39;</span><span class="p">}</span> <span class="o">=</span> <span class="p">[</span> <span class="sx">qw{262ED8DBB4222F7A}</span> <span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Select this/these keys to sign with</span>
</span><span class='line'><span class="c1">#$CONFIG{&#39;local-user&#39;} = [ qw{EE739B28C657086C 9B585538ED7E1B73 262ED8DBB4222F7A C9429DABCB28285B} ];</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Additionally encrypt messages for these keyids</span>
</span><span class='line'><span class="c1">#$CONFIG{&#39;also-encrypt-to&#39;} = [ qw{EE739B28C657086C 9B585538ED7E1B73 262ED8DBB4222F7A C9429DABCB28285B} ];</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Mail template to use for the encrypted part</span>
</span><span class='line'><span class="c1">#$CONFIG{&#39;mail-template&#39;} = &lt;&lt; &#39;EOM&#39;;</span>
</span><span class='line'><span class="c1">#Hi,</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#please find attached the user id{(scalar @uids &gt;= 2 ? &#39;s&#39; : &#39;&#39;)}</span>
</span><span class='line'><span class="c1">#{foreach $uid (@uids) {</span>
</span><span class='line'><span class="c1">#    $OUT .= &quot;\t&quot;.$uid.&quot;\n&quot;;</span>
</span><span class='line'><span class="c1">#};}of your key {$key} signed by me.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#If you have multiple user ids, I sent the signature for each user id</span>
</span><span class='line'><span class="c1">#separately to that user id&#39;s associated email address. You can import</span>
</span><span class='line'><span class="c1">#the signatures by running each through `gpg --import`.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#Note that I did not upload your key to any keyservers. If you want this</span>
</span><span class='line'><span class="c1">#new signature to be available to others, please upload it yourself.</span>
</span><span class='line'><span class="c1">#With GnuPG this can be done using</span>
</span><span class='line'><span class="c1">#       gpg --keyserver pool.sks-keyservers.net --send-key {$key}</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#If you have any questions, don&#39;t hesitate to ask.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#Regards,</span>
</span><span class='line'><span class="c1">#{$owner}</span>
</span><span class='line'><span class="c1">#EOM</span>
</span></code></pre></td></tr></table></div></figure>


<h3>~/.caff/gnupghome/gpg.conf の設定</h3>

<p>以前参考にした設定のまま</p>

<figure class='code'><figcaption><span>~/.caff/gnupghome/gpg.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>keyserver pgp.mit.edu
</span><span class='line'>cert-digest-algo SHA256
</span><span class='line'>personal-digest-preferences SHA256
</span></code></pre></td></tr></table></div></figure>


<p>となっていました。
PDF では SHA512 になっていたので、
SHA256 から SHA512 に変更しました。
今日の caff での署名した時点では SHA256 のままだったので、
次回から変わる予定です。</p>

<figure class='code'><figcaption><span>~/.caff/gnupghome/gpg.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>keyserver pgp.mit.edu
</span><span class='line'>cert-digest-algo SHA512
</span><span class='line'>personal-digest-preferences SHA512
</span></code></pre></td></tr></table></div></figure>


<h2>caff -u で署名</h2>

<p>spam よけのためメールアドレスの所は改変した状態のログは以下の通りです。
「本当に署名しますか? (y/N)」のところで身分証明書と一緒に確認した fingerprint と合っているか確認します。</p>

<p>最後にメールを送信して終了です。
相手の鍵で暗号化されたメールが localhost の SMTP サーバー送信されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> caff -u B4222F7A D66FD341
</span><span class='line'><span class="go">[INFO] Importing key 262ED8DBB4222F7A from your normal GnuPGHome.</span>
</span><span class='line'><span class="go">[INFO] fetching keys, this will take a while...</span>
</span><span class='line'><span class="go">[INFO] Sign the following keys according to your policy, then exit gpg with &#39;save&#39; after signing each key</span>
</span><span class='line'><span class="go">gpg --local-user B4222F7A --homedir=/home/kazu/.caff/gnupghome --secret-keyring /home/kazu/.gnupg/secring.gpg --no-auto-check-trustdb --trust-model=always --edit 25DA5B9699F132DB74BD2270B5A586C7D66FD341 sign</span>
</span><span class='line'><span class="go">gpg (GnuPG) 1.4.11; Copyright (C) 2010 Free Software Foundation, Inc.</span>
</span><span class='line'><span class="go">This is free software: you are free to change and redistribute it.</span>
</span><span class='line'><span class="go">There is NO WARRANTY, to the extent permitted by law.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="go">pub  4096R/D66FD341  作成: 2014-06-22  満了: 無期限       利用法: SC</span>
</span><span class='line'><span class="go">sub  4096R/5D3BA622  作成: 2014-06-22  満了: 無期限       利用法: E</span>
</span><span class='line'><span class="go">[ unknown] (1). Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="go">pub  4096R/D66FD341  作成: 2014-06-22  満了: 無期限       利用法: SC</span>
</span><span class='line'><span class="go"> 主鍵の指紋: 25DA 5B96 99F1 32DB 74BD  2270 B5A5 86C7 D66F D341</span>
</span><span class='line'>
</span><span class='line'><span class="go">     Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">本当にこの鍵にあなたの鍵“Kazuhiro NISHIYAMA &lt;zn mbf.nifty.com&gt;”で署名してよいですか</span>
</span><span class='line'><span class="go">(B4222F7A)</span>
</span><span class='line'>
</span><span class='line'><span class="go">本当に署名しますか? (y/N) y</span>
</span><span class='line'>
</span><span class='line'><span class="go">次のユーザーの秘密鍵のロックを解除するには</span>
</span><span class='line'><span class="go">パスフレーズがいります:“Kazuhiro NISHIYAMA &lt;zn mbf.nifty.com&gt;”</span>
</span><span class='line'><span class="go">4096ビットRSA鍵, ID B4222F7A作成日付は2010-06-27</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="go">gpg&gt; save</span>
</span><span class='line'><span class="go">[INFO] B5A586C7D66FD341 1 Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt; done.</span>
</span><span class='line'><span class="go">[INFO] key 25DA5B9699F132DB74BD2270B5A586C7D66FD341 done.</span>
</span><span class='line'><span class="go">Mail signature for Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt; to &#39;o-takashi sakamocchi.jp&#39;? [Y/n]</span>
</span><span class='line'><span class="gp">%</span>
</span></code></pre></td></tr></table></div></figure>


<h2>caff からのメールを受け取った相手のすべきこと</h2>

<p>暗号化されたメールが届くので、
対応する秘密鍵を使って復号してメールを確認します。
さらにその中にある署名を自分の鍵束にインポートしてキーサーバーに送信します。</p>

<p>caff のやり方はここでメールアドレスの到達性もチェックしているようなので、
署名した側はキーサーバーに送信する必要はなさそうです。
むしろそういうことをしないようにするために
<code>~/.caff/gnupghome</code> に独自の鍵束を用意しているように思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 85 回 関西 Debian 勉強会に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-22-kansai-debian-meeting.html"/>
    <updated>2014-06-22T13:43:06+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20140622" title="第 85 回 関西 Debian 勉強会">第 85 回 関西 Debian 勉強会</a>
に参加してきました。</p>

<p>そのときのメモです。
詳細は勉強会のページからリンクされている資料を参照してください。</p>

<!--more-->


<h2>Intro</h2>

<ul>
<li>MATE 1.8 が Debian に入ったという話

<ul>
<li><a href="https://www.debian.org/News/weekly/2014/10/" title="Debian Project News - June 9th, 2014">Debian Project News &ndash; June 9th, 2014</a></li>
</ul>
</li>
<li>Debian 6 の LTS (long term support) の話

<ul>
<li>全パッケージが対象というわけではない</li>
<li>たとえば rails とか chromium とかは対象外</li>
</ul>
</li>
<li>Berkeley DB を post jessie で外す予定

<ul>
<li>AGPL に変わったから</li>
</ul>
</li>
<li>事前課題発表と自己紹介

<ul>
<li>おすすめの IM</li>
<li>webwml-git の運用</li>
<li>web-mode.el (melpa にはある)</li>
</ul>
</li>
</ul>


<h2>「Linuxのドライバメンテナになった体験記」(担当：坂本)</h2>

<ul>
<li>質問から派生して残った疑問点

<ul>
<li>character device とは何か (block device との違いは何か)</li>
</ul>
</li>
</ul>


<h2>「Debian での systemd とのつきあい方」(担当：佐々木)</h2>

<p>状況確認コマンドいろいろのメモです。
一部のコマンドは自動で <code>$PAGER</code> を通してくれるようですが、
<code>PAGER=lv</code> の場合は <code>LV=-c</code> がないとエスケープシーケンスが解釈されなくて読みにくくなります。</p>

<ul>
<li><code>systemd-analyze</code></li>
<li><code>systemd-analyze blame</code></li>
<li><code>systemd-analyze plot &gt; systemd-analyze_plot.svg</code></li>
<li><code>systemctl list-dependencies</code></li>
<li><code>systemctl status</code></li>
<li><code>systemctl list-unit-files</code></li>
<li><code>systemctl list-units</code></li>
<li><code>sudo LV=-c journalctl</code></li>
<li><code>systemd-cgls</code></li>
</ul>

]]></content>
  </entry>
  
</feed>
