<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2016-04-18T22:37:53+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[公開鍵認証 + libpam-google-authenticator による二要素認証を特定のユーザーだけ対象に導入する]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-18-libpam-google-authenticator.html"/>
    <updated>2016-04-18T21:26:42+09:00</updated>
    <id>http://blog.n-z.jp/blog/libpam-google-authenticator</id>
    <content type="html"><![CDATA[<p>普通に <code>libpam-google-authenticator</code> を PAM の設定に追加するだけだと公開鍵認証の時に使われなくて二要素認証として嬉しくなかったのと、
<code>libpam-google-authenticator</code> による二要素認証をいきなり全ユーザーに導入してしまうと <code>google-authenticator</code> コマンドによるトークン作成をしていないユーザーが入れなくなってしまったり、リモートバックアップ処理の自動実行などで入れなくなったりして困るので、
一部のユーザーだけ二要素認証が必須になる設定を考えてみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Debian GNU/Linux 8.4 (jessie)</li>
<li>openssh-server 1:6.7p1-5+deb8u1</li>
<li>libpam-google-authenticator 20130529-2</li>
</ul>


<h2>設定時の注意</h2>

<p>PAM の設定変更は失敗するとログインできなくなって危険なので、設定を戻したりできるシェルを最低一個は残した状態で設定を変更することをおすすめします。</p>

<h2>PAM の設定</h2>

<p>PAM の設定では <code>@include common-auth</code> の代わりに <code>pam_unix.so</code> を <code>pam_google_authenticator.so</code> に置き換えた設定を <code>/etc/pam.d/sshd</code> に追加しました。</p>

<p>これで <code>keyboard-interactive</code> 認証では unix password による認証は使えなくなって <code>libpam-google-authenticator</code> による認証だけになります。</p>

<p>ワンタイムパスワードなので、入力している値を見られても困らないし、実際 GitHub などでの入力画面では隠されていないので、 <code>/usr/share/doc/libpam-google-authenticator/README.gz</code> にも書いてある <code>echo_verification_code</code> の設定も追加してエコーバックされるようにしてみました。</p>

<figure class='code'><figcaption><span>/etc/pam.d/sshd</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+auth [success=1 default=ignore] pam_google_authenticator.so echo_verification_code
</span><span class='line'>+auth requisite pam_deny.so
</span><span class='line'>+auth required pam_permit.so
</span><span class='line'> # Standard Un*x authentication.
</span><span class='line'>-@include common-auth
</span><span class='line'>+#@include common-auth</span></code></pre></td></tr></table></div></figure>


<h2>sshd の設定</h2>

<p>他の <code>pam_google_authenticator.so</code> 導入記事にも書いてあるように
<code>ChallengeResponseAuthentication</code> を <code>yes</code> に変更します。
この設定を変更しないと <code>Verification code:</code> の入力プロンプトが出てこなくて、
認証コードの入力ができません。</p>

<figure class='code'><figcaption><span>/etc/ssh/sshd_config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ChallengeResponseAuthentication yes</span></code></pre></td></tr></table></div></figure>


<p>最後に適当なグループ (今回は <code>/var/log/</code> のログファイルのグループなどに利用されている <code>adm</code> グループを利用しましたが <code>sudo</code> グループなどでも良いかもしれません) を <code>Match</code> で指定して、そのグループに属するユーザーの時だけ <code>AuthenticationMethods</code> で公開鍵認証と <code>keyboard-interactive</code> 認証の両方を必須にしました。</p>

<figure class='code'><figcaption><span>/etc/ssh/sshd_config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Match Group adm
</span><span class='line'>AuthenticationMethods publickey,keyboard-interactive</span></code></pre></td></tr></table></div></figure>


<h2>トークンを生成しているユーザーだけ有効にする設定</h2>

<p><code>google-authenticator</code> コマンドで <code>~/.google-authenticator</code> を生成しているユーザーだけ有効にすることができたので、その方法もメモしておきます。</p>

<p>方法としては <code>pam_exec</code> を使ってファイルの存在チェックをすれば可能でした。
<code>pam_exec.so</code> の引数部分では直接環境変数展開ができなかったので、別途外部に実行ファイルを用意する方法がデバッグもしやすくておすすめです。</p>

<p>存在チェックが成功すればそのまま次の行に進んで、存在しなければ後続の 2 行を飛ばして <code>pam_permit.so</code> で許可するようにしました。</p>

<p><code>pam_exec.so</code> に <code>quiet</code> をつけないと <code>~/.google-authenticator</code> がない場合に毎回 <code>/usr/local/bin/check_google_authenticator.sh failed: exit code 1</code> が出るので、 <code>quiet</code> をつけて抑制するようにしました。
<code>Authenticated with partial success.</code> というメッセージは <code>ssh</code> が出しているので消せませんでした。</p>

<p>PAM の設定の詳細については<a href="http://tokyodebian.alioth.debian.org/pdf/debianmeetingresume2012-natsu.pdf">大統一Debian勉強会 特大号 東京エリア/関西Debian勉強会のPDF</a> か、<a href="http://gum.debian.or.jp/2012/">大統一Debian勉強会</a> の「Linux-PAMの設定について」の発表資料を参考にしてください。</p>

<figure class='code'><figcaption><span>/etc/pam.d/sshd</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auth [success=ignore default=2] pam_exec.so quiet /usr/local/bin/check_google_authenticator.sh
</span><span class='line'>auth [success=1 default=ignore] pam_google_authenticator.so echo_verification_code
</span><span class='line'>auth requisite pam_deny.so
</span><span class='line'>auth required pam_permit.so</span></code></pre></td></tr></table></div></figure>


<p>存在のチェック用スクリプトは <code>pam_exec</code> 経由で実行された時には <code>HOME</code> 環境変数が設定されていなくて、代わりに <code>PAM_USER</code> などが設定されているのを利用して <code>HOME</code> を設定されていなければ設定するようにしました。</p>

<figure class='code'><figcaption><span>/usr/local/bin/check_google_authenticator.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>: <span class="k">${</span><span class="nv">HOME</span><span class="p">:=</span><span class="k">$(</span>getent passwd <span class="s2">&quot;$PAM_USER&quot;</span> <span class="p">|</span> awk -F: <span class="s1">&#39;{print $6}&#39;</span><span class="k">)}</span>
</span><span class='line'><span class="nb">test</span> -f <span class="s2">&quot;$HOME/.google_authenticator&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>/etc/pam.d/sshd にまとめる書き方</h2>

<p>発表資料の PDF を確認して気付いたのですが、 <code>[ ]</code> でくくれば空白の入った引数も渡せるので、シェルを経由するようにすれば変数展開付きのコマンドを含められました。</p>

<figure class='code'><figcaption><span>/etc/pam.d/sshd</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auth [success=ignore default=2] pam_exec.so quiet /bin/sh -c [: ${HOME:=$(getent passwd "$PAM_USER" | awk -F: '{print $6}')}; test -f "$HOME/.google_authenticator"]
</span><span class='line'>auth [success=1 default=ignore] pam_google_authenticator.so echo_verification_code
</span><span class='line'>auth requisite pam_deny.so
</span><span class='line'>auth required pam_permit.so</span></code></pre></td></tr></table></div></figure>


<h2>google-authenticator コマンドによるトークンの作成</h2>

<p>二要素認証を使うユーザーで <code>google-authenticator</code> コマンドを実行してトークンを作成して、 iOS なら Google Authenticator のアプリに、 Android なら Google 認証システムアプリに QR コードを読み込ませておきます。
<code>google-authenticator</code> コマンドの質問は全部 <code>y</code> で良いと思います。</p>

<p>設定は <code>~/.google_authenticator</code> に保存されています。</p>

<p>テスト環境では QR コードは読み込ませずに <code>emergency scratch codes</code> を使っていたのですが、
<code>emergency scratch codes</code> は使っていくと <code>~/.google_authenticator</code> からどんどん減っていくので、適当なタイミングで <code>google-authenticator</code> コマンドを使って再生成させないと入れなくなりそうでした。</p>

<h2>失敗した設定例</h2>

<p><code>Match</code> で <code>ChallengeResponseAuthentication</code> を設定しようとしましたが、 <code>Directive 'ChallengeResponseAuthentication' is not allowed within a Match block</code> というエラーで設定できませんでした。</p>

<p>公開鍵ごとに二要素認証の設定ができないか、検討してみましたが、使えそうな設定項目が見つかりませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jessie で dovecot-imapd と postfix の設定をして Thunderbird 用の autoconfig ファイルを用意した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-17-jessie-dovecot.html"/>
    <updated>2016-04-17T21:14:05+09:00</updated>
    <id>http://blog.n-z.jp/blog/jessie-dovecot</id>
    <content type="html"><![CDATA[<p><a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0387?page=4">Ubuntu Weekly Recipe 第387回　UbuntuでSSLを利用したサービスを構築する</a> を参考にして、 Debian jessie で dovecot-imapd で IMAP サーバーの設定をしました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Debian GNU/Linux 8.4 (jessie)</li>
<li>postfix 2.11.3-1</li>
<li>dovecot-imapd 1:2.2.13-12~deb8u1</li>
<li>Thunderbird 38.6.0</li>
</ul>


<h2>インストール</h2>

<p><code>sudo aptitude install dovecot-imapd</code> でインストールしました。</p>

<h2>認証設定</h2>

<p>クライアントによっては plain 認証は使えず login 認証が必要なので <code>sudoedit /etc/dovecot/conf.d/10-auth.conf</code> で <code>auth_mechanisms = plain login</code> に設定を変更しました。</p>

<h2>ssl 設定</h2>

<p><code>sudoedit /etc/dovecot/conf.d/10-ssl.conf</code> で以下の設定を変更しました。</p>

<ul>
<li><code>ssl = no</code> を <code>ssl = required</code> に</li>
<li><code>ssl_cert</code>, <code>ssl_key</code> を設定</li>
<li><code>#ssl_protocols = !SSLv2</code> を <code>ssl_protocols = !SSLv2 !SSLv3</code> に</li>
</ul>


<p><a href="http://wiki.dovecot.org/SSL/DovecotConfiguration">http://wiki.dovecot.org/SSL/DovecotConfiguration</a> によると <code>ssl</code> の設定については <code>ssl=no</code>, <code>ssl=yes and disable_plaintext_auth=yes</code>, <code>ssl=yes and disable_plaintext_auth=yes</code>, <code>ssl=required</code> という設定の組み合わせがあるようです。</p>

<h2>Maildir 設定</h2>

<p>postfix の設定で <code>Maildir</code> への配送を使っているので、 <code>sudoedit /etc/dovecot/conf.d/10-mail.conf</code> で <code>mail_location = mbox:~/mail:INBOX=/var/mail/%u</code> を <code>mail_location = maildir:~/Maildir</code> に設定を変更しました。</p>

<h2>postfix との認証連携</h2>

<p>まず <code>sudo ls -al /var/spool/postfix/private</code> で <code>auth</code> がないのを確認しました。</p>

<p><code>sudoedit /etc/dovecot/conf.d/10-master.conf</code> で</p>

<figure class='code'><figcaption><span>/etc/dovecot/conf.d/10-master.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  #unix_listener /var/spool/postfix/private/auth {
</span><span class='line'>  #  mode = 0666
</span><span class='line'>  #}</span></code></pre></td></tr></table></div></figure>


<p>を</p>

<figure class='code'><figcaption><span>/etc/dovecot/conf.d/10-master.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  unix_listener /var/spool/postfix/private/auth {
</span><span class='line'>    mode = 0660
</span><span class='line'>    user = postfix
</span><span class='line'>    group = postfix
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>に変更しました。</p>

<p>設定反映後に <code>sudo ls -al /var/spool/postfix/private</code> で <code>auth</code> が owner も group も postfix でパーミッションが <code>srw-rw----</code> になっているのを確認します。</p>

<h2>設定反映</h2>

<p><code>sudo service dovecot restart</code> で設定を反映しました。</p>

<p><code>journalctl -u dovecot.service</code> や <code>sudo ss -lntp | grep dovecot</code> で問題なく起動していることを確認しました。</p>

<h2>ufw でポート開放</h2>

<p><code>ufw allow 993/tcp</code> と <code>ufw limit 993/tcp</code> でポートを開放して連続接続数制限をしました。</p>

<h2>postfix 設定</h2>

<h3>SSL 設定</h3>

<p><code>smtpd_tls_cert_file</code> と <code>smtpd_tls_key_file</code> を設定します。
<code>smtpd_tls_cert_file</code> は中間証明書も結合したファイルを指定します。</p>

<p>その他の設定は以下のように設定しました。</p>

<figure class='code'><figcaption><span>/etc/postfix/main.cf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>smtpd_tls_mandatory_protocols = !SSLv2, !SSLv3
</span><span class='line'>smtpd_tls_protocols = !SSLv2, !SSLv3
</span><span class='line'>smtp_tls_mandatory_protocols = !SSLv2, !SSLv3
</span><span class='line'>smtp_tls_protocols = !SSLv2, !SSLv3</span></code></pre></td></tr></table></div></figure>


<p><code>smtpd_tls_security_level = may</code> は設定すると外部からのメール送信で問題が起きたことがあったので、メールの送信テストをしつつ、様子を見ながら設定するかどうか決めます。</p>

<h3>SASL 設定</h3>

<p><a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0387?page=4">Ubuntu Weekly Recipe</a> では <code>smtpd_sasl_auth_enable</code> は <code>/etc/postfix/main.cf</code> でも <code>yes</code> にしていますが、 <code>/etc/postfix/master.cf</code> で <code>smtps</code> と <code>submission</code> で個別に <code>yes</code> に設定されているので、 <code>/etc/postfix/main.cf</code> では <code>no</code> のままにしておきます。</p>

<p>そうしておかないと 25 番ポートでも SMTP-Auth が有効になって、しかも <code>smtpd_tls_security_level = may</code> だとパスワードが平文で流れても良いということになるので、危険なことが起きる可能性があります。
最近は OBP25B という対策が普及しているので、一般のクライアントが間違って平文で送信してしまう可能性は低いと思いますが、余計な危険は避けておくのが良いと思います。</p>

<p>CRAM-MD5 が有効なら <code>smtpd_sasl_security_options = noanonymous,noplaintext</code> にして <code>master.cf</code> で <code>noanonymous</code> だけにしても良いかと思ったのですが、 plain 認証と login 認証しかない状態で <code>noplaintext</code> もつけてしまうと 25 番ポートで listen しているのに接続しても最初の <code>220 mail.example.org ESMTP Postfix (Debian/GNU)</code> が出てこなくてログに <code>fatal: no SASL authentication mechanisms</code> と記録されるという状態になってしまいました。
<code>/etc/passwd</code> (<code>/etc/shadow</code>) による認証だとパスワードをハッシュ化された状態でしか保存していないため、 CRAM-MD5 は使えないので、これ以上の検証はできませんでした。</p>

<p>以上を踏まえて以下のように設定しました。</p>

<figure class='code'><figcaption><span>/etc/postfix/main.cf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>smtpd_sasl_auth_enable = no
</span><span class='line'>smtpd_sasl_local_domain = $myhostname
</span><span class='line'>smtpd_sasl_security_options = noanonymous
</span><span class='line'>smtpd_sasl_type = dovecot
</span><span class='line'>smtpd_sasl_path = private/auth
</span><span class='line'>broken_sasl_auth_clients = yes</span></code></pre></td></tr></table></div></figure>


<p><code>smtpd_sasl_local_domain</code> や <code>broken_sasl_auth_clients</code> は不要かもしれません。</p>

<h2>Thunderbird 用自動設定ファイル設置</h2>

<p><a href="https://developer.mozilla.org/ja/docs/Mozilla/Thunderbird/Autoconfiguration">Thunderbird のアカウント情報自動設定機能</a>のために <code>mail/config-v1.1.xml</code> を設置します。</p>

<p><code>@example.com</code> のメールアドレスに対して <code>http://autoconfig.example.com/mail/config-v1.1.xml</code> か <code>http://example.com/.well-known/autoconfig/mail/config-v1.1.xml</code> を用意します。</p>

<p>内容は以下のような感じになります。
<code>mozilla.org</code> の例との主な違いは <code>authentication</code> を <code>password-encrypted</code> ではなく <code>password-cleartext</code> にしているところと、 <code>username</code> を <code>%EMAILADDRESS%</code> ではなく <code>%EMAILLOCALPART%</code> にしているところです。</p>

<figure class='code'><figcaption><span>mail/config-v1.1.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;clientConfig</span> <span class="na">version=</span><span class="s">&quot;1.1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;emailProvider</span> <span class="na">id=</span><span class="s">&quot;example.com&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;domain&gt;</span>example.com<span class="nt">&lt;/domain&gt;</span>
</span><span class='line'>    <span class="nt">&lt;displayName&gt;</span>Example.com Mail<span class="nt">&lt;/displayName&gt;</span>
</span><span class='line'>    <span class="nt">&lt;displayShortName&gt;</span>example.com<span class="nt">&lt;/displayShortName&gt;</span>
</span><span class='line'>    <span class="nt">&lt;incomingServer</span> <span class="na">type=</span><span class="s">&quot;imap&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;hostname&gt;</span>mail.example.com<span class="nt">&lt;/hostname&gt;</span>
</span><span class='line'>      <span class="nt">&lt;port&gt;</span>993<span class="nt">&lt;/port&gt;</span>
</span><span class='line'>      <span class="nt">&lt;socketType&gt;</span>SSL<span class="nt">&lt;/socketType&gt;</span>
</span><span class='line'>      <span class="nt">&lt;authentication&gt;</span>password-cleartext<span class="nt">&lt;/authentication&gt;</span>
</span><span class='line'>      <span class="nt">&lt;username&gt;</span>%EMAILLOCALPART%<span class="nt">&lt;/username&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/incomingServer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;outgoingServer</span> <span class="na">type=</span><span class="s">&quot;smtp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;hostname&gt;</span>mail.example.com<span class="nt">&lt;/hostname&gt;</span>
</span><span class='line'>      <span class="nt">&lt;port&gt;</span>587<span class="nt">&lt;/port&gt;</span>
</span><span class='line'>      <span class="nt">&lt;socketType&gt;</span>STARTTLS<span class="nt">&lt;/socketType&gt;</span>
</span><span class='line'>      <span class="nt">&lt;authentication&gt;</span>password-cleartext<span class="nt">&lt;/authentication&gt;</span>
</span><span class='line'>      <span class="nt">&lt;username&gt;</span>%EMAILLOCALPART%<span class="nt">&lt;/username&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/outgoingServer&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/emailProvider&gt;</span>
</span><span class='line'><span class="nt">&lt;/clientConfig&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p><a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0387?page=4">Ubuntu Weekly Recipe</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ngircd から inspircd に移行した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-13-ircd.html"/>
    <updated>2016-04-13T22:42:32+09:00</updated>
    <id>http://blog.n-z.jp/blog/ircd</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2016-03-29-inspircd.html">jessie で inspircd を設定した</a>話に書いたように、 inspircd を設定したのですが、移行元の ngircd との機能比較を使っている範囲内でしてみたいと思います。</p>

<!--more-->


<h2>確認バージョン</h2>

<ul>
<li>ngircd 18-2 (on Ubuntu 12.04.5 LTS)</li>
<li>inspircd 2.0.17-1+deb8u1 (on Debian GNU/Linux 8.4 (jessie))</li>
</ul>


<h2>SSL/TLS 設定</h2>

<p>ngircd では <code>[SSL]</code> セクションで設定するだけでしたが、 inspircd では推奨されている <code>m_ssl_gnutls</code> を使うか <code>m_ssl_openssl</code> を使うか選ぶ必要がありました。
推奨があるので、特に迷うことはありませんでした。</p>

<h2>nick の長さ制限</h2>

<p>ngircd では <code>MaxNickLength</code> を 9 から 18 に変えていたのですが、 inspircd ではデフォルトで <code>NICKLEN=32</code> になっていて、設定は少し探した範囲では見つけられませんでした。</p>

<h2>チャンネルの作成制限</h2>

<p>ngircd では <code>PredefChannelsOnly = yes</code> にしていました。 inspircd では <a href="https://wiki.inspircd.org/Modules/2.0/restrictchans">m_restrictchans</a> で制限することができました。</p>

<h2>チャンネル自動作成</h2>

<p>ngircd では <code>[Channel]</code> でチャンネルをサーバー起動時に作成していました。 inspircd では <a href="https://wiki.inspircd.org/Modules/2.0/permchannels">m_permchannels</a> で作成しておくことができました。</p>

<h2>チャンネル自動参加</h2>

<p>ngircd では接続時に自動参加させることはできなかったのですが、 inspircd では <a href="https://wiki.inspircd.org/Modules/2.0/conn_join">m_conn_join</a> で接続時に強制的にチャンネルに参加させる設定ができました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devise で電子メールアドレスのドメイン部分を省略してもログインできるようにする]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-13-devise-default-domain.html"/>
    <updated>2016-04-13T21:29:43+09:00</updated>
    <id>http://blog.n-z.jp/blog/devise-default-domain</id>
    <content type="html"><![CDATA[<p>社内向けアプリケーションのように、特定のドメインのユーザーがほとんどの場合、メールアドレスの全体を入力させるのは、余計な手間をしいていることが多いです。</p>

<p>そこで省略可能にするように変更しました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ruby 2.2.4</li>
<li>rails 4.2.6</li>
<li>devise 3.5.6</li>
<li>warden 1.2.6</li>
</ul>


<h2>config/initializers/devise.rb での設定</h2>

<p>直接は関係ないですが、 <code>config/initializers/devise.rb</code> では以下のような感じの設定でユーザー登録できるメールアドレスのドメインを制限しています。</p>

<p>特殊用途に別ドメインのユーザーを登録する必要があったので、そこは <code>|</code> (or) で繋げて許可しています。</p>

<figure class='code'><figcaption><span>config/initializers/devise.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">email_regexp</span> <span class="o">=</span> <span class="sr">/\A[\w+\-.]+@example\.co\.jp\z\|\Aspecial@example\.com\z/i</span>
</span></code></pre></td></tr></table></div></figure>


<h2>User クラスへの追加</h2>

<p><a href="https://github.com/plataformatec/devise/wiki/How-To:-Allow-users-to-sign-in-using-their-username-or-email-address">How To: Allow users to sign in using their username or email address</a> を参考にして <code>User.find_first_by_auth_conditions(warden_conditions)</code> を定義すれば良いということがわかったので、以下のように定義しました。</p>

<figure class='code'><figcaption><span>app/models/user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_for_database_authentication</span><span class="p">(</span><span class="n">warden_conditions</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="sr">/@/</span> <span class="o">=~</span> <span class="n">warden_conditions</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span>
</span><span class='line'>      <span class="k">super</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">super</span><span class="p">(</span><span class="n">warden_conditions</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">email</span><span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">warden_conditions</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span><span class="si">}</span><span class="s2">@example.co.jp&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>メールアドレス全体が入力された時 (<code>@</code> を含む時) はデフォルトの挙動をそのまま使い、省略された時はデフォルトのドメイン (例では <code>example.co.jp</code>) を補ってデフォルトの挙動を呼び出すようにしました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[aasm 4.10.0 の警告に monkey patch で対処した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-12-aasm-warn.html"/>
    <updated>2016-04-12T22:08:11+09:00</updated>
    <id>http://blog.n-z.jp/blog/aasm-warn</id>
    <content type="html"><![CDATA[<p>aasm を 4.10.0 にあげると <code>Job: overriding method 'sleeping?'!</code> のような警告が出るようになってしまい、<a href="https://github.com/aasm/aasm/issues/347">Warning when specifing states at ActiveRecord enum</a> で報告されているものの、まだ何も対応されていないので、とりあえず monkey patch で対処することにしました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ruby 2.2.4</li>
<li>rails 4.2.6</li>
<li>aasm 4.10.0</li>
</ul>


<h2>対処方針</h2>

<p>モデルごとに対応するのは面倒なことになるので、 Rails 5 で導入される予定の <code>ApplicationRecord</code> に対応して、そこに対処を入れることにしました。</p>

<h2>ApplicationRecord 対応</h2>

<p>まず <code>sed -i~ -e 's/ActiveRecord::Base/ApplicationRecord/' app/models/*.rb</code> などで継承元を <code>ActiveRecord::Base</code> から <code>ApplicationRecord</code> に書き換えます。
(実際には <code>application_record.rb</code> の作成後にやってしまって <code>RuntimeError: Circular dependency detected while autoloading constant ApplicationRecord</code> になってしまったので、 <code>application_record.rb</code> だけ元に戻しました。)</p>

<p>次に以下の内容で <code>app/models/application_record.rb</code> を作成します。</p>

<figure class='code'><figcaption><span>app/models/application_record.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationRecord</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">abstract_class</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>テスト実行などで影響がないことを確認します。</p>

<h2>monkey patch</h2>

<p>aasm の README に書いてあるように</p>

<figure class='code'><figcaption><span>app/models/job.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Job</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">AASM</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">enum</span> <span class="ss">state</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">sleeping</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">running</span><span class="p">:</span> <span class="mi">99</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">aasm</span> <span class="ss">:column</span> <span class="o">=&gt;</span> <span class="ss">:state</span><span class="p">,</span> <span class="ss">:enum</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">state</span> <span class="ss">:sleeping</span><span class="p">,</span> <span class="ss">:initial</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">state</span> <span class="ss">:running</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようなハッシュを使った <code>enum</code> 呼び出ししかしていなかった (<code>enum status: [ :active, :archived ]</code> のような配列を使った呼び出しはしていなかった) ので、以下のように <code>each_value</code> と <code>each_key</code> の組み合わせ決め打ちで <code>undef_method</code> を呼び出すことにしました。</p>

<figure class='code'><figcaption><span>app/models/application_record.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationRecord</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">abstract_class</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="no">AASM</span><span class="o">::</span><span class="no">VERSION</span> <span class="o">==</span> <span class="s1">&#39;4.10.0&#39;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">enum</span><span class="p">(</span><span class="n">definitions</span><span class="p">)</span>
</span><span class='line'>      <span class="k">super</span>
</span><span class='line'>      <span class="n">definitions</span><span class="o">.</span><span class="n">each_value</span> <span class="k">do</span> <span class="o">|</span><span class="n">statuses</span><span class="o">|</span>
</span><span class='line'>        <span class="n">statuses</span><span class="o">.</span><span class="n">each_key</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span>
</span><span class='line'>          <span class="n">undef_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">?&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ActiveRecord::Enum</code> では <code>enum</code> を呼び出したクラスに直接 <code>sleeping?</code> などのメソッドを定義するのではなく、無名モジュールに定義されているので、 <code>remove_method</code> ではなく <code>undef_method</code> を使う必要がありました。
(<code>aasm</code> は <code>aasm</code> を呼び出したクラスに直接定義していました。)</p>

<h2>今後の予定</h2>

<p>将来のバージョンでどう挙動が変わるのかわからないので、バージョン番号決め打ちで monkey patch をあてていて、バージョンアップで問題が再発するようならバージョン番号を更新、解決するようなら monkey patch を削除しようと思っています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4月9日 型システム入門読書会 第4回(兵庫県)に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-09-amagasakirb.html"/>
    <updated>2016-04-09T13:19:38+09:00</updated>
    <id>http://blog.n-z.jp/blog/amagasakirb</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/event/index/388328/" title="4月9日 型システム入門読書会 第4回(兵庫県)">4月9日 型システム入門読書会 第4回(兵庫県)</a>
に参加しました。
今回は第 20 章からでした。</p>

<!--more-->




<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4274069117" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>以下、今回のメモです。</p>

<ul>
<li>今回は深江駅前でした。</li>
<li>Kotlin</li>
<li>第 20 章は難しい</li>
<li>数学の基礎の本のオススメは? 数学ガールの秘密のノートシリーズ?</li>
<li>誰も OCaml のコードは試していないという話</li>
<li>Visual Studio Code</li>
<li>Visual Studio Community</li>
<li>Xamarin</li>
<li><a href="https://code.visualstudio.com/docs/languages/overview">https://code.visualstudio.com/docs/languages/overview</a></li>
<li>NetBook の話</li>
<li>ARM などの CPU の話</li>
<li>深江駅には初めて来たという話</li>
<li><code>⊂</code> と <code>⊆</code> の違いについて</li>
<li><a href="https://ja.wikipedia.org/wiki/%E9%BB%92%E6%9D%BF%E5%A4%AA%E5%AD%97">黒板書体</a></li>
<li><a href="https://ja.wikipedia.org/wiki/%E4%B8%B8%E6%95%B0%E5%AD%97">丸数字</a></li>
<li>OS X で画面外にはみ出すサイズに window をリサイズした後、移動すると勝手に画面内に収まるサイズにリサイズされてしまって困るという話 (縦いっぱいの window を下げる、上に伸ばして画面サイズ以上の高さにする、ちょっと移動させる、という操作で再現可能)</li>
<li>Windows のアップデート通知の話</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jessie に backports から letsencrypt を入れてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-08-jessie-letsencrypt.html"/>
    <updated>2016-04-08T14:30:02+09:00</updated>
    <id>http://blog.n-z.jp/blog/jessie-letsencrypt</id>
    <content type="html"><![CDATA[<p>現在リリースされている Ubuntu と違って Debian jessie には backports に letsencrypt パッケージがあるので、ちょっと古いですがパッケージ版の letsencrypt を使ってみることにしました。</p>

<p>Ubuntu も今月リリースされる 16.04 (xenial) には universe ですが letsencrypt パッケージが含まれるので、それが使えると思います。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Debian GNU/Linux 8.4 (jessie) (amd64)</li>
<li>letsencrypt 0.4.1-1~bpo8+1</li>
<li>apache2 2.4.10-10+deb8u4</li>
</ul>


<h2>インストール</h2>

<p><code>/etc/apt/sources.list</code> で <code>deb http://ftp.jp.debian.org/debian jessie-backports main contrib non-free</code> のように backports を有効にしておきます。</p>

<p>依存パッケージも backports のものが必要なので <code>-t jessie-backports</code> 付きでインストールする必要がありました。</p>

<p><code>webroot</code> を使う予定だったので、 <code>python-letsencrypt-apache</code> はインストールしませんでした。</p>

<p>stable にあるパッケージのうち、いくつかのパッケージも backports のものに上がってしまうので、そのリスクが許容できない場合は <code>letsencrypt-auto</code> など、他のインストール方法を検討した方が良さそうです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%  sudo apt install letsencrypt
</span><span class='line'>パッケージリストを読み込んでいます... 完了
</span><span class='line'>依存関係ツリーを作成しています
</span><span class='line'>状態情報を読み取っています... 完了
</span><span class='line'>インストールすることができないパッケージがありました。おそらく、あり得
</span><span class='line'>ない状況を要求したか、(不安定版ディストリビューションを使用しているの
</span><span class='line'>であれば) 必要なパッケージがまだ作成されていなかったり Incoming から移
</span><span class='line'>動されていないことが考えられます。
</span><span class='line'>以下の情報がこの問題を解決するために役立つかもしれません:
</span><span class='line'>
</span><span class='line'>以下のパッケージには満たせない依存関係があります:
</span><span class='line'> letsencrypt : 依存: python-letsencrypt (= 0.4.1-1~bpo8+1) しかし、インストールされようとしていませ ん
</span><span class='line'>E: 問題を解決することができません。壊れた変更禁止パッケージがあります。
</span><span class='line'>zsh: exit 100   sudo apt install letsencrypt
</span><span class='line'>%  sudo apt install -t jessie-backports letsencrypt
</span><span class='line'>パッケージリストを読み込んでいます... 完了
</span><span class='line'>依存関係ツリーを作成しています
</span><span class='line'>状態情報を読み取っています... 完了
</span><span class='line'>以下のパッケージが自動でインストールされましたが、もう必要とされていません:
</span><span class='line'>  python-cffi python-ply python-pycparser
</span><span class='line'>これを削除するには 'apt-get autoremove' を利用してください。
</span><span class='line'>以下の追加パッケージがインストールされます:
</span><span class='line'>  dialog python-acme python-cffi python-cffi-backend python-configargparse python-configobj
</span><span class='line'>  python-cryptography python-dialog python-enum34 python-funcsigs python-idna python-ipaddress
</span><span class='line'>  python-letsencrypt python-mock python-ndg-httpsclient python-openssl python-parsedatetime
</span><span class='line'>  python-pbr python-psutil python-pyasn1 python-pyicu python-requests python-rfc3339 python-six
</span><span class='line'>  python-urllib3 python-zope.component python-zope.event python-zope.interface
</span><span class='line'>提案パッケージ:
</span><span class='line'>  python-letsencrypt-apache python-letsencrypt-doc python-configobj-doc python-cryptography-doc
</span><span class='line'>  python-cryptography-vectors python-enum34-doc python-funcsigs-doc python-mock-doc
</span><span class='line'>  python-openssl-doc python-openssl-dbg doc-base python-ntlm
</span><span class='line'>以下のパッケージが新たにインストールされます:
</span><span class='line'>  dialog letsencrypt python-acme python-cffi-backend python-configargparse python-configobj
</span><span class='line'>  python-dialog python-enum34 python-funcsigs python-idna python-ipaddress python-letsencrypt
</span><span class='line'>  python-mock python-ndg-httpsclient python-parsedatetime python-pbr python-psutil python-pyasn1
</span><span class='line'>  python-pyicu python-requests python-rfc3339 python-urllib3 python-zope.component
</span><span class='line'>  python-zope.event python-zope.interface
</span><span class='line'>以下のパッケージはアップグレードされます:
</span><span class='line'>  python-cffi python-cryptography python-openssl python-six
</span><span class='line'>アップグレード: 4 個、新規インストール: 25 個、削除: 0 個、保留: 24 個。
</span><span class='line'>1,906 kB のアーカイブを取得する必要があります。
</span><span class='line'>この操作後に追加で 8,772 kB のディスク容量が消費されます。
</span><span class='line'>続行しますか? [Y/n]</span></code></pre></td></tr></table></div></figure>


<h2>letsencrypt コマンド実行</h2>

<p>一般ユーザー権限で実行するとエラーになり、カレントディレクトリに <code>letsencrypt.log</code> が作成されていました。
<code>--help</code> 付きでの実行は特にエラーもなく、 <code>letsencrypt.log</code> も作成されることなくヘルプが表示されました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%  letsencrypt
</span><span class='line'>An unexpected error occurred:
</span><span class='line'>OSError: [Errno 13] Permission denied: '/etc/letsencrypt'
</span><span class='line'>Please see the logfile 'letsencrypt.log' for more details.
</span><span class='line'>%  rm letsencrypt.log
</span><span class='line'>%  letsencrypt --help
</span><span class='line'>
</span><span class='line'>  letsencrypt [SUBCOMMAND] [options] [-d domain] [-d domain] ...
</span><span class='line'>
</span><span class='line'>The Let's Encrypt agent can obtain and install HTTPS/TLS/SSL certificates.  By
</span><span class='line'>default, it will attempt to use a webserver both for obtaining and installing
</span><span class='line'>the cert. Major SUBCOMMANDS are:
</span><span class='line'>
</span><span class='line'>  (default) run        Obtain & install a cert in your current webserver
</span><span class='line'>  certonly             Obtain cert, but do not install it (aka "auth")
</span><span class='line'>  install              Install a previously obtained cert in a server
</span><span class='line'>  renew                Renew previously obtained certs that are near expiry
</span><span class='line'>  revoke               Revoke a previously obtained certificate
</span><span class='line'>  rollback             Rollback server configuration changes made during install
</span><span class='line'>  config_changes       Show changes made to server config during installation
</span><span class='line'>  plugins              Display information about installed plugins
</span><span class='line'>
</span><span class='line'>Choice of server plugins for obtaining and installing cert:
</span><span class='line'>
</span><span class='line'>  (the apache plugin is not installed)
</span><span class='line'>  --standalone      Run a standalone webserver for authentication
</span><span class='line'>  (nginx support is experimental, buggy, and not installed by default)
</span><span class='line'>  --webroot         Place files in a server's webroot folder for authentication
</span><span class='line'>
</span><span class='line'>OR use different plugins to obtain (authenticate) the cert and then install it:
</span><span class='line'>
</span><span class='line'>  --authenticator standalone --installer apache
</span><span class='line'>
</span><span class='line'>More detailed help:
</span><span class='line'>
</span><span class='line'>  -h, --help [topic]    print this message, or detailed help on a topic;
</span><span class='line'>                        the available topics are:
</span><span class='line'>
</span><span class='line'>   all, automation, paths, security, testing, or any of the subcommands or
</span><span class='line'>   plugins (certonly, install, nginx, apache, standalone, webroot, etc)</span></code></pre></td></tr></table></div></figure>


<h2>本番実行</h2>

<p><code>letsencrypt certonly</code> で証明書発行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%  sudo letsencrypt certonly --webroot -w /srv/www/www.example.org/htdocs -d www.example.org</span></code></pre></td></tr></table></div></figure>


<p>まず、アカウントの作成があるので、アカウントの作成はメールアドレス入力しました。
アカウントのリカバリや緊急時の連絡などに使われるだけのようで、今の所ここで入力したメールアドレスに letsencrypt からメールが来たことはありません。</p>

<pre><code>         ┌──────────────────────────────────────────────────────────────────────┐
         │ Enter email address (used for urgent notices and lost key recovery)  │
         │ ┌──────────────────────────────────────────────────────────────────┐ │
         │ │                                                                  │ │
         │ └──────────────────────────────────────────────────────────────────┘ │
         ├──────────────────────────────────────────────────────────────────────┤
         │                     &lt; 了解 &gt;           &lt; 取消 &gt;                      │
         └──────────────────────────────────────────────────────────────────────┘
</code></pre>

<p>Terms of Service は前回みた時から変わっていないので、今度も Agree しました。</p>

<pre><code>         ┌──────────────────────────────────────────────────────────────────────┐
         │ Please read the Terms of Service at                                  │
         │ https://letsencrypt.org/documents/LE-SA-v1.0.1-July-27-2015.pdf. You │
         │ must agree in order to register with the ACME server at              │
         │ https://acme-v01.api.letsencrypt.org/directory                       │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         ├──────────────────────────────────────────────────────────────────────┤
         │                     &lt;Agree &gt;           &lt;Cancel&gt;                      │
         └──────────────────────────────────────────────────────────────────────┘
</code></pre>

<p>以下のような作成完了のメッセージが出ました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IMPORTANT NOTES:
</span><span class='line'> - If you lose your account credentials, you can recover through
</span><span class='line'>   e-mails sent to z@n-z.jp.
</span><span class='line'> - Congratulations! Your certificate and chain have been saved at
</span><span class='line'>   /etc/letsencrypt/live/www.example.org/fullchain.pem. Your cert will
</span><span class='line'>   expire on 2016-07-07. To obtain a new version of the certificate in
</span><span class='line'>   the future, simply run Let's Encrypt again.
</span><span class='line'> - Your account credentials have been saved in your Let's Encrypt
</span><span class='line'>   configuration directory at /etc/letsencrypt. You should make a
</span><span class='line'>   secure backup of this folder now. This configuration directory will
</span><span class='line'>   also contain certificates and private keys obtained by Let's
</span><span class='line'>   Encrypt so making regular backups of this folder is ideal.
</span><span class='line'> - If you like Let's Encrypt, please consider supporting our work by:
</span><span class='line'>
</span><span class='line'>   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
</span><span class='line'>   Donating to EFF:                    https://eff.org/donate-le</span></code></pre></td></tr></table></div></figure>


<p>問題があれば <code>/var/log/letsencrypt/letsencrypt.log</code> でログを確認します。</p>

<h2>apache2 の設定変更</h2>

<p>apache2 の設定を変更して、 <code>sudo service apache2 reload</code> で反映します。
ブラウザーで Let&rsquo;s Encrypt Authority X3 の証明書になっていることが確認できたら設定完了です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SSLCertificateKeyFile /etc/letsencrypt/live/www.example.org/privkey.pem
</span><span class='line'>SSLCertificateFile /etc/letsencrypt/live/www.example.org/fullchain.pem</span></code></pre></td></tr></table></div></figure>


<h2>自動更新設定</h2>

<p>パッケージの <code>letsencrypt</code> でインストールされたものではないということを明示するために <code>local</code> をつけて <code>/etc/cron.daily/local-letsencrypt</code> に自動更新の設定をしました。</p>

<p>試しに実行してみてちゃんと動いていれば設定完了です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% sudoedit /etc/cron.daily/local-letsencrypt
</span><span class='line'>% sudo chmod +x /etc/cron.daily/local-letsencrypt
</span><span class='line'>% sudo /etc/cron.daily/local-letsencrypt
</span><span class='line'>% sudo cat /var/log/letsencrypt/renew.log
</span><span class='line'>Processing /etc/letsencrypt/renewal/www.example.org.conf
</span><span class='line'>
</span><span class='line'>The following certs are not due for renewal yet:
</span><span class='line'>  /etc/letsencrypt/live/www.example.org/fullchain.pem (skipped)
</span><span class='line'>No renewals were attempted.</span></code></pre></td></tr></table></div></figure>


<p><a href="http://blog.n-z.jp/blog/2016-04-07-letsencrypt.html">前回の記事</a> のように <a href="http://packages.debian.org/debianutils">debianutils</a> の <code>savelog</code> でログをローテートして、証明書の有効期限の 90 日分残すようにしています。</p>

<figure class='code'><figcaption><span>/etc/cron.daily/local-letsencrypt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">LOGFILE</span><span class="o">=</span>/var/log/letsencrypt/renew.log
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;$LOGFILE&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    savelog -c <span class="m">90</span> -q <span class="s2">&quot;$LOGFILE&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> ! letsencrypt renew &gt; <span class="s2">&quot;$LOGFILE&quot;</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">echo </span>Automated renewal failed:
</span><span class='line'>    cat <span class="s2">&quot;$LOGFILE&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>apachectl graceful
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[letsencrypt-auto の自動アップグレードを止めて手動でアップグレード]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-07-letsencrypt.html"/>
    <updated>2016-04-07T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/letsencrypt</id>
    <content type="html"><![CDATA[<p><code>/etc/cron.daily/letsencrypt</code> は <code>root</code> 権限で実行されるため、そこで自動アップグレードがかかるとファイルのオーナーが <code>root</code> になってしまうかもしれないと思ったので、自動更新を止めて手動でアップグレードするようにしました。</p>

<!--more-->


<h2>自動アップグレードを止めた <code>/etc/cron.daily/local-letsencrypt</code></h2>

<p><a href="http://blog.n-z.jp/blog/2016-03-06-letsencrypt.html">前回の記事</a> からの差分としては <a href="http://packages.debian.org/debianutils">debianutils</a> の <code>savelog</code> でログをローテートして、証明書の有効期限の 90 日分残すようにしたのと、 <code>--no-self-upgrade</code> をつけて自動アップグレードを止めたことです。
それから、パッケージで入れたものではないということを明示するために <code>local</code> という文字列を入れたファイル名に変更しました。</p>

<figure class='code'><figcaption><span>/etc/cron.daily/local-letsencrypt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">LOGFILE</span><span class="o">=</span>/var/log/letsencrypt/renew.log
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;$LOGFILE&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    /usr/bin/savelog -c <span class="m">90</span> -q <span class="s2">&quot;$LOGFILE&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> ! /home/hoge/letsencrypt/letsencrypt-auto renew --no-self-upgrade &gt; <span class="s2">&quot;$LOGFILE&quot;</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">echo </span>Automated renewal failed:
</span><span class='line'>    cat <span class="s2">&quot;$LOGFILE&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>apachectl graceful
</span><span class='line'>service postfix reload &gt;/dev/null
</span><span class='line'>service dovecot reload
</span></code></pre></td></tr></table></div></figure>


<h2>手動アップグレードしたログ</h2>

<p>手動実行したところ、ちょうど 0.4.2 から 0.5.0 へのアップグレードが実行されました。</p>

<figure class='code'><figcaption><span>/etc/cron.daily/local-letsencrypt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% ~/letsencrypt/letsencrypt-auto --help
</span><span class='line'>Checking <span class="k">for</span> new version...
</span><span class='line'>Upgrading letsencrypt-auto 0.4.2 to 0.5.0...
</span><span class='line'>Replacing letsencrypt-auto...
</span><span class='line'>   sudo cp -p /home/hoge/letsencrypt/letsencrypt-auto /tmp/user/1000/tmp.MclJH3TO68/letsencrypt-auto.permission-clone
</span><span class='line'>   sudo cp /tmp/user/1000/tmp.MclJH3TO68/letsencrypt-auto /tmp/user/1000/tmp.MclJH3TO68/letsencrypt-auto.permission-clone
</span><span class='line'>   sudo mv -f /tmp/user/1000/tmp.MclJH3TO68/letsencrypt-auto.permission-clone /home/hoge/letsencrypt/letsencrypt-auto
</span><span class='line'>Creating virtual environment...
</span><span class='line'>Installing Python packages...
</span><span class='line'>Installation succeeded.
</span><span class='line'>Requesting root privileges to run letsencrypt...
</span><span class='line'>   sudo /home/hoge/.local/share/letsencrypt/bin/letsencrypt --help
</span><span class='line'>
</span><span class='line'>  letsencrypt-auto <span class="o">[</span>SUBCOMMAND<span class="o">]</span> <span class="o">[</span>options<span class="o">]</span> <span class="o">[</span>-d domain<span class="o">]</span> <span class="o">[</span>-d domain<span class="o">]</span> ...
</span><span class='line'>
</span><span class='line'>The Let<span class="s1">&#39;s Encrypt agent can obtain and install HTTPS/TLS/SSL certificates.  By</span>
</span><span class='line'><span class="s1">default, it will attempt to use a webserver both for obtaining and installing</span>
</span><span class='line'><span class="s1">the cert. Major SUBCOMMANDS are:</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  (default) run        Obtain &amp; install a cert in your current webserver</span>
</span><span class='line'><span class="s1">  certonly             Obtain cert, but do not install it (aka &quot;auth&quot;)</span>
</span><span class='line'><span class="s1">  install              Install a previously obtained cert in a server</span>
</span><span class='line'><span class="s1">  renew                Renew previously obtained certs that are near expiry</span>
</span><span class='line'><span class="s1">  revoke               Revoke a previously obtained certificate</span>
</span><span class='line'><span class="s1">  rollback             Rollback server configuration changes made during install</span>
</span><span class='line'><span class="s1">  config_changes       Show changes made to server config during installation</span>
</span><span class='line'><span class="s1">  plugins              Display information about installed plugins</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Choice of server plugins for obtaining and installing cert:</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  --apache          Use the Apache plugin for authentication &amp; installation</span>
</span><span class='line'><span class="s1">  --standalone      Run a standalone webserver for authentication</span>
</span><span class='line'><span class="s1">  (nginx support is experimental, buggy, and not installed by default)</span>
</span><span class='line'><span class="s1">  --webroot         Place files in a server&#39;</span>s webroot folder <span class="k">for</span> authentication
</span><span class='line'>
</span><span class='line'>OR use different plugins to obtain <span class="o">(</span>authenticate<span class="o">)</span> the cert and <span class="k">then</span> install it:
</span><span class='line'>
</span><span class='line'>  --authenticator standalone --installer apache
</span><span class='line'>
</span><span class='line'>More detailed <span class="nb">help</span>:
</span><span class='line'>
</span><span class='line'>  -h, --help <span class="o">[</span>topic<span class="o">]</span>    print this message, or detailed <span class="nb">help </span>on a topic<span class="p">;</span>
</span><span class='line'>                        the available topics are:
</span><span class='line'>
</span><span class='line'>   all, automation, paths, security, testing, or any of the subcommands or
</span><span class='line'>   plugins <span class="o">(</span>certonly, install, nginx, apache, standalone, webroot, etc<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>アップグレードがないときのログ</h2>

<figure class='code'><figcaption><span>/etc/cron.daily/local-letsencrypt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% ~/letsencrypt/letsencrypt-auto --help
</span><span class='line'>Checking <span class="k">for</span> new version...
</span><span class='line'>Requesting root privileges to run letsencrypt...
</span><span class='line'>   sudo /home/hoge/.local/share/letsencrypt/bin/letsencrypt --help
</span><span class='line'>
</span><span class='line'>  letsencrypt-auto <span class="o">[</span>SUBCOMMAND<span class="o">]</span> <span class="o">[</span>options<span class="o">]</span> <span class="o">[</span>-d domain<span class="o">]</span> <span class="o">[</span>-d domain<span class="o">]</span> ...
</span><span class='line'>
</span><span class='line'>The Let<span class="s1">&#39;s Encrypt agent can obtain and install HTTPS/TLS/SSL certificates.  By</span>
</span><span class='line'><span class="s1">default, it will attempt to use a webserver both for obtaining and installing</span>
</span><span class='line'><span class="s1">the cert. Major SUBCOMMANDS are:</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  (default) run        Obtain &amp; install a cert in your current webserver</span>
</span><span class='line'><span class="s1">  certonly             Obtain cert, but do not install it (aka &quot;auth&quot;)</span>
</span><span class='line'><span class="s1">  install              Install a previously obtained cert in a server</span>
</span><span class='line'><span class="s1">  renew                Renew previously obtained certs that are near expiry</span>
</span><span class='line'><span class="s1">  revoke               Revoke a previously obtained certificate</span>
</span><span class='line'><span class="s1">  rollback             Rollback server configuration changes made during install</span>
</span><span class='line'><span class="s1">  config_changes       Show changes made to server config during installation</span>
</span><span class='line'><span class="s1">  plugins              Display information about installed plugins</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Choice of server plugins for obtaining and installing cert:</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  --apache          Use the Apache plugin for authentication &amp; installation</span>
</span><span class='line'><span class="s1">  --standalone      Run a standalone webserver for authentication</span>
</span><span class='line'><span class="s1">  (nginx support is experimental, buggy, and not installed by default)</span>
</span><span class='line'><span class="s1">  --webroot         Place files in a server&#39;</span>s webroot folder <span class="k">for</span> authentication
</span><span class='line'>
</span><span class='line'>OR use different plugins to obtain <span class="o">(</span>authenticate<span class="o">)</span> the cert and <span class="k">then</span> install it:
</span><span class='line'>
</span><span class='line'>  --authenticator standalone --installer apache
</span><span class='line'>
</span><span class='line'>More detailed <span class="nb">help</span>:
</span><span class='line'>
</span><span class='line'>  -h, --help <span class="o">[</span>topic<span class="o">]</span>    print this message, or detailed <span class="nb">help </span>on a topic<span class="p">;</span>
</span><span class='line'>                        the available topics are:
</span><span class='line'>
</span><span class='line'>   all, automation, paths, security, testing, or any of the subcommands or
</span><span class='line'>   plugins <span class="o">(</span>certonly, install, nginx, apache, standalone, webroot, etc<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dokku-letsencrypt を使ってみた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-06-dokku-letsencrypt.html"/>
    <updated>2016-04-06T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dokku-letsencrypt</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/dokku/dokku-letsencrypt">dokku-letsencrypt</a> を試してみたのでそのメモです。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 14.04.4 LTS</li>
<li>Docker 1.10.3</li>
<li>Dokku 0.5.3</li>
<li>dokku-letsencrypt v0.7.0-7-gb4950b8</li>
</ul>


<h2>インストール</h2>

<p>README.md に書いてある手順の通りインストールして、 <code>git describe --tags</code> でバージョンを確認しておきました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo dokku plugin:install https://github.com/dokku/dokku-letsencrypt.git
</span><span class='line'>-----&gt; Cloning plugin repo https://github.com/dokku/dokku-letsencrypt.git to /var/lib/dokku/plugins/available/letsencrypt
</span><span class='line'>Cloning into 'letsencrypt'...
</span><span class='line'>remote: Counting objects: 233, done.
</span><span class='line'>remote: Compressing objects: 100% (4/4), done.
</span><span class='line'>remote: Total 233 (delta 0), reused 0 (delta 0), pack-reused 229
</span><span class='line'>Receiving objects: 100% (233/233), 48.62 KiB | 0 bytes/s, done.
</span><span class='line'>Resolving deltas: 100% (136/136), done.
</span><span class='line'>Checking connectivity... done.
</span><span class='line'>-----&gt; Plugin letsencrypt enabled
</span><span class='line'>-----&gt; Migrating zero downtime env variables. The following variables have been deprecated
</span><span class='line'>=====&gt; DOKKU_SKIP_ALL_CHECKS DOKKU_SKIP_DEFAULT_CHECKS
</span><span class='line'>=====&gt; Please use dokku checks:[disable|enable] &lt;app&gt; to control zero downtime functionality
</span><span class='line'>=====&gt; Migration complete
</span><span class='line'>=====&gt;
</span><span class='line'>=====&gt; Migration complete
</span><span class='line'>=====&gt;
</span><span class='line'>=====&gt; Migration complete
</span><span class='line'>=====&gt;
</span><span class='line'>=====&gt; Migration complete
</span><span class='line'>=====&gt;
</span><span class='line'>=====&gt; Migration complete
</span><span class='line'>=====&gt;
</span><span class='line'>Adding user dokku to group adm
</span><span class='line'>$ cd /var/lib/dokku/plugins/available/letsencrypt/
</span><span class='line'>$ git describe --tags
</span><span class='line'>v0.7.0-7-gb4950b8
</span><span class='line'>$ cd</span></code></pre></td></tr></table></div></figure>


<h2>アップグレード</h2>

<p>README.md にアップグレードの手順も書いてあったので、試しておきました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo dokku plugin:update letsencrypt
</span><span class='line'>Plugin (letsencrypt) updated</span></code></pre></td></tr></table></div></figure>


<h2>対象アプリの確認</h2>

<p><code>dokku apps</code> でアプリケーション一覧を表示して、対象とするアプリケーションの名前を確認しておきました。</p>

<ul>
<li><code>dokku help</code></li>
<li><code>dokku apps:help</code></li>
<li><code>dokku apps</code></li>
</ul>


<h2>メールアドレス設定</h2>

<p>Let&rsquo;s Encrypt に登録するメールアドレスを設定しておきます。
<a href="https://letsencrypt.jp/usage/" title="Let's Encrypt の使い方">Let&rsquo;s Encrypt の使い方</a>の説明によると「ここで入力したメールアドレスは、緊急の通知や鍵を紛失したときの復旧に使われます。」</p>

<p>dokku-letsencrypt プラグインでは「利用規約への同意」に相当する手順がありませんが、念のため利用規約 (現在のバージョンは <a href="https://letsencrypt.org/documents/LE-SA-v1.0.1-July-27-2015.pdf">https://letsencrypt.org/documents/LE-SA-v1.0.1-July-27-2015.pdf</a> ) に目を通しておくと良いと思います。</p>

<p>ちなみに今のところ letsencrypt に登録したメールアドレスに letsencrypt からメールが来たことはありません。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dokku config:set --no-restart staging.example.co.jp DOKKU_LETSENCRYPT_EMAIL=root@example.co.jp
</span><span class='line'>-----&gt; Setting config vars
</span><span class='line'>       DOKKU_LETSENCRYPT_EMAIL: root@example.co.jp</span></code></pre></td></tr></table></div></figure>


<h2>メールアドレスをグローバルに設定するかアプリケーションごとに設定するか</h2>

<p>グローバルに設定することも可能だと思いますが、メールアドレスを設定していなければ <code>dokku letsencrypt APP</code> の最初のチェックで止まって、既存の TLS 設定を上書きされる心配がないので、すべてのアプリケーションで letsencrypt を使うのでなければ、アプリケーションごとに設定することをおすすめします。</p>

<p>メールアドレスを設定していなければ、以下のように失敗して止まってくれます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dokku letsencrypt node-js-app
</span><span class='line'>=====&gt; Let's Encrypt node-js-app...
</span><span class='line'> !     ERROR: Cannot request a certificate without an e-mail address!
</span><span class='line'> !       please provide your e-mail address using
</span><span class='line'> !       dokku config:set --no-restart node-js-app DOKKU_LETSENCRYPT_EMAIL=&lt;e-mail&gt;</span></code></pre></td></tr></table></div></figure>


<h2>証明書発行と設定</h2>

<p><code>dokku letsencrypt APP</code> で証明書発行から設定まで自動で実行されます。</p>

<p>すでに <code>tls/server.{crt,key}</code> が存在していても強制的にシンボリックリンクで上書きされるので、他で発行された証明書を使っている場合は注意が必要です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dokku letsencrypt staging.example.co.jp
</span><span class='line'>=====&gt; Let's Encrypt staging.example.co.jp...
</span><span class='line'>-----&gt; Updating letsencrypt docker image...
</span><span class='line'>latest: Pulling from m3adow/letsencrypt-simp_le
</span><span class='line'>420890c9e918: Pull complete
</span><span class='line'>acbaf1e6012f: Pull complete
</span><span class='line'>5f71a1a2d3dc: Pull complete
</span><span class='line'>Digest: sha256:be1d7aca214d5277af18d7bf75a2bc78afa5a1eabf98aaa8a606c4ca2a7fdeb5
</span><span class='line'>Status: Downloaded newer image for m3adow/letsencrypt-simp_le:latest
</span><span class='line'>       done
</span><span class='line'>-----&gt; Enabling ACME proxy for staging.example.co.jp...
</span><span class='line'>-----&gt; Getting letsencrypt certificate for staging.example.co.jp...
</span><span class='line'>        - Domain 'staging.example.co.jp'
</span><span class='line'>darkhttpd/1.11, copyright (c) 2003-2015 Emil Mikulic.
</span><span class='line'>listening on: http://0.0.0.0:80/
</span><span class='line'>2016-04-04 03:26:42,946:INFO:__main__:1202: Generating new account key
</span><span class='line'>2016-04-04 03:26:43,831:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
</span><span class='line'>2016-04-04 03:26:44,110:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
</span><span class='line'>2016-04-04 03:26:44,302:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
</span><span class='line'>2016-04-04 03:26:44,841:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): letsencrypt.org
</span><span class='line'>2016-04-04 03:26:45,410:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
</span><span class='line'>2016-04-04 03:26:45,664:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
</span><span class='line'>2016-04-04 03:26:45,940:INFO:requests.packages.urllib3.connectionpool:207: Starting new HTTP connection (1): staging.example.co.jp
</span><span class='line'>2016-04-04 03:26:45,946:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): staging.example.co.jp
</span><span class='line'>2016-04-04 03:26:45,995:INFO:__main__:1294: staging.example.co.jp was successfully self-verified
</span><span class='line'>2016-04-04 03:26:46,022:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
</span><span class='line'>2016-04-04 03:26:46,272:INFO:__main__:1302: Generating new certificate private key
</span><span class='line'>2016-04-04 03:26:47,528:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
</span><span class='line'>2016-04-04 03:26:47,723:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
</span><span class='line'>2016-04-04 03:26:47,987:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
</span><span class='line'>2016-04-04 03:26:48,215:INFO:__main__:385: Saving account_key.json
</span><span class='line'>2016-04-04 03:26:48,216:INFO:__main__:385: Saving fullchain.pem
</span><span class='line'>2016-04-04 03:26:48,216:INFO:__main__:385: Saving chain.pem
</span><span class='line'>2016-04-04 03:26:48,216:INFO:__main__:385: Saving cert.pem
</span><span class='line'>2016-04-04 03:26:48,216:INFO:__main__:385: Saving key.pem
</span><span class='line'>-----&gt; Certificate retrieved successfully.
</span><span class='line'>-----&gt; Symlinking let's encrypt certificates
</span><span class='line'>-----&gt; Configuring staging.example.co.jp...(using built-in template)
</span><span class='line'>-----&gt; Creating https nginx.conf
</span><span class='line'>-----&gt; Running nginx-pre-reload
</span><span class='line'>       Reloading nginx
</span><span class='line'>-----&gt; Disabling ACME proxy for staging.example.co.jp...
</span><span class='line'>       done</span></code></pre></td></tr></table></div></figure>


<h2>有効になっているアプリケーション一覧確認</h2>

<p><code>dokku letsencrypt:ls</code> で有効になっているアプリケーションとその有効期限を確認します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dokku letsencrypt:ls
</span><span class='line'>-----&gt; App name           Certificate Expiry        Time before expiry        Time before renewal
</span><span class='line'>staging.example.co.jp 2016-07-03 11:27:00       89d, 22h, 56m, 55s        59d, 22h, 56m, 55s</span></code></pre></td></tr></table></div></figure>


<h2>自動更新</h2>

<p>有効期限が 30 日 (<code>DOKKU_LETSENCRYPT_GRACEPERIOD</code> で変更可能) を切ると自動更新してくれる <code>dokku letsencrypt:auto-renew</code> も試しておきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dokku letsencrypt:auto-renew
</span><span class='line'>=====&gt; Auto-renewing all apps...
</span><span class='line'>       staging.example.co.jp still has 59d, 22h, 48m, 36s days left before renewal
</span><span class='line'>=====&gt; Finished auto-renewal</span></code></pre></td></tr></table></div></figure>


<p>問題なさそうなので、<code>dokku</code> ユーザーの <code>crontab</code> で設定して自動実行するようにしておきます。
リモートからのトリガーで実行されるように ssh で入れるユーザーの <code>crontab</code> で <code>ssh dokku letsencrypt:auto-renew</code> を設定しておくのでも良いと思います。</p>

<h2>セキュリティ上の問題点</h2>

<p><code>dokku-letsencrypt</code> が使用している <a href="https://github.com/kuba/simp_le" title="Simple Let's Encrypt Client">Simple Let&rsquo;s Encrypt Client</a> の issue の <a href="https://github.com/kuba/simp_le/issues/29" title="private key permissions">private key permissions</a> で指摘されているように、 <code>ls -al /home/dokku/staging.example.co.jp/letsencrypt/certs/current/</code> で確認してみると、他のユーザーからは読めなくするべき <code>account_key.json</code> や <code>key.pem</code> も誰でも読めるパーミッションになってしまっているので、 <code>sudo chmod 700 /home/dokku/staging.example.co.jp/letsencrypt</code> などでパーミッションを落としておく方が良さそうです。</p>

<p>ファイル自体のパーミッションを落としても良さそうですが、更新された後のことも考えると <code>/home/dokku/APP/letsencrypt</code> ディレクトリ自体のパーミッションを落としておくのが良さそうです。</p>

<h2>Rate Limit</h2>

<p><a href="https://letsencrypt.jp/faq/#RateLimiting" title="Let's Encrypt の証明書に取得数制限はありますか？">Let&rsquo;s Encrypt の証明書に取得数制限はありますか？</a> のリンク先に書いてあるように、この記事執筆時点では「アカウント登録/IP アドレスごと」(3 時間で 10 個) と「証明書発行/ドメインごと」(1 週間で 5 個) の制限があるので、注意が必要です。</p>

<p>特に dokku-letsencrypt では<a href="https://github.com/letsencrypt/letsencrypt">公式のクライアント</a>が <code>/etc/letsencrypt/accounts</code> でアカウントを共有するのと違って、 <code>account_key.json</code> をアプリケーションごとに作成しているので、注意が必要そうです。</p>

<p>ただし、現状の制限だと証明書発行数の制限の方が引っかかりやすいので、アカウント登録の制限は問題にならないようにも思います。</p>

<p>証明書発行数の制限については <code>dokku domains:add</code> や <code>dokku domains:remove</code> で適切にドメインの追加や削除をしてから <code>dokku letsencrypt</code> を実行するように README.md の <a href="https://github.com/dokku/dokku-letsencrypt/tree/b4950b8254f683e4af775bad44e390763a699de1#dealing-with-rate-limit" title="Dealing with rate limit">Dealing with rate limit</a> に書いてあります。</p>

<h2>証明書の情報表示</h2>

<p><code>dokku certs:info</code> で letsencrypt のものに限らず、証明書の情報を表示できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adminuser@tk2-213-16013:~$ dokku certs:info staging.example.co.jp
</span><span class='line'>-----&gt; Fetching SSL Endpoint info for staging.example.co.jp...
</span><span class='line'>-----&gt; Certificate details:
</span><span class='line'>=====&gt; Common Name(s):
</span><span class='line'>=====&gt;    staging.example.co.jp
</span><span class='line'>=====&gt;    staging.example.co.jp
</span><span class='line'>=====&gt; Expires At: Jul  3 02:27:00 2016 GMT
</span><span class='line'>=====&gt; Issuer: C=US, O=Lets Encrypt, CN=Lets Encrypt Authority X3
</span><span class='line'>=====&gt; Starts At: Apr  4 02:27:00 2016 GMT
</span><span class='line'>=====&gt; Subject: CN=staging.example.co.jp
</span><span class='line'>=====&gt; SSL certificate is self signed.
</span><span class='line'>adminuser@tk2-213-16013:~$ dokku certs:info production.example.co.jp
</span><span class='line'>-----&gt; Fetching SSL Endpoint info for production.example.co.jp...
</span><span class='line'>-----&gt; Certificate details:
</span><span class='line'>=====&gt; Common Name(s):
</span><span class='line'>=====&gt;    production.example.co.jp
</span><span class='line'>=====&gt;    production.example.co.jp
</span><span class='line'>=====&gt;    example.co.jp
</span><span class='line'>=====&gt; Expires At: Aug  4 00:05:31 2016 GMT
</span><span class='line'>=====&gt; Issuer: C=IL, O=StartCom Ltd., OU=Secure Digital Certificate Signing, CN=StartCom Class 1 Primary Intermediate Server CA
</span><span class='line'>=====&gt; Starts At: Aug  3 18:20:22 2015 GMT
</span><span class='line'>=====&gt; Subject: C=JP; CN=production.example.co.jp; emailAddress=hostmaster@example.co.jp
</span><span class='line'>=====&gt; SSL certificate is self signed.
</span><span class='line'>adminuser@tk2-213-16013:~$ dokku certs:info another.example.co.jp
</span><span class='line'>-----&gt; Fetching SSL Endpoint info for another.example.co.jp...
</span><span class='line'>-----&gt; Certificate details:
</span><span class='line'>=====&gt; Common Name(s):
</span><span class='line'>=====&gt;    another.example.co.jp
</span><span class='line'>=====&gt;    another.example.co.jp
</span><span class='line'>=====&gt;    example.co.jp
</span><span class='line'>=====&gt; Expires At: Apr 23 04:56:14 2016 GMT
</span><span class='line'>=====&gt; Issuer: C=IL, O=StartCom Ltd., OU=Secure Digital Certificate Signing, CN=StartCom Class 1 Primary Intermediate Server CA
</span><span class='line'>=====&gt; Starts At: Apr 22 23:55:13 2015 GMT
</span><span class='line'>=====&gt; Subject: C=JP; CN=another.example.co.jp; emailAddress=hostmaster@example.co.jp
</span><span class='line'>=====&gt; SSL certificate is self signed.
</span><span class='line'>adminuser@tk2-213-16013:~$</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ccollect によるバックアップの設定]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-04-ccollect.html"/>
    <updated>2016-04-04T22:51:06+09:00</updated>
    <id>http://blog.n-z.jp/blog/ccollect</id>
    <content type="html"><![CDATA[<p><code>ccollect</code> という <code>rsync</code> の <code>--link-dest</code> オプションによるハードリンクをうまく使って差分バックアップをしてくれるツールでバックアップ設定をしました。</p>

<!--more-->


<h2>インストール</h2>

<p>deb パッケージは存在しないので、まず <code>git clone https://github.com/ungleich/ccollect ~/src/github.com/ungleich/ccollect</code> などで最新 (現時点で 1.0) の ccollect を github のミラーから取得します。</p>

<p><a href="http://www.nico.schottelius.org/software/ccollect/">本家</a> の download ページにある tarball は 0.8 まででちょっと古いです。</p>

<h2>共通設定</h2>

<p>設定は <code>CCOLLECT_CONF</code> (デフォルトは <code>/etc/ccollect</code>) の中に置いていきます。</p>

<p>共通設定は <code>defaults</code> の中に、バックアップごとの設定は <code>sources</code> の中に置いていきます。</p>

<h3>バックアップ保存回数の設定</h3>

<p><code>defaults/intervals</code> の中に適当なファイル名でバックアップの保存回数を設定していきます。</p>

<p><code>daily</code> などの名前をつけることが多いようですが、 <code>ccollect</code> 自体に毎日自動実行する機能があるわけではないので、自前で <code>cron</code> などを使って実行する必要が有ります。</p>

<ul>
<li><code>sudo mkdir -p /etc/ccollect/defaults/intervals</code></li>
<li><code>echo 10 | sudo tee /etc/ccollect/defaults/intervals/daily</code></li>
<li><code>echo 24 | sudo tee /etc/ccollect/defaults/intervals/monthly</code></li>
<li><code>echo 10 | sudo tee /etc/ccollect/defaults/intervals/weekly</code></li>
</ul>


<p>ここでは日時バックアップと週次バックアップは 10 回分、月次バックアップは 2 年分保存するようにしてみました。</p>

<h3>不完全なバックアップの削除</h3>

<p><code>ccollect</code> では構造化された設定ファイルをパースするのではなく、簡単な内容のファイルの中身が設定値になっていたり、ファイルの存在がフラグとなっていたりするようになっています。</p>

<p>ここでは <code>rsync</code> の途中で <code>ssh</code> が切れたなどの理由で不完全なバックアップができてしまった時に削除するフラグを設定します。</p>

<ul>
<li><code>sudo touch /etc/ccollect/defaults/delete_incomplete</code></li>
</ul>


<h2>ローカルのバックアップ設定の追加</h2>

<p>まず動作確認も兼ねて、ローカルのバックアップを取る設定を追加してみます。</p>

<ul>
<li><code>sudo mkdir -p /etc/ccollect/sources/$(hostname)-home</code></li>
<li><code>echo '/home' | sudo tee /etc/ccollect/sources/$(hostname)-home/source</code></li>
<li><code>echo "/srv/backup/$(hostname)-home" | sudo tee /etc/ccollect/sources/$(hostname)-home/destination</code></li>
</ul>


<p>バックアップから除外するファイルも設定してみます。
除外指定ということを明示するために <code>-</code> をつけていますが、つけずにパターンだけでもこの場合は同じです。
<code>exclude</code> ファイルの書式の詳細は <code>rsync "--exclude-from"</code> で検索して調べてください。</p>

<ul>
<li><code>echo '- *.swp' | sudo tee /etc/ccollect/sources/$(hostname)-home/exclude</code></li>
<li><code>echo '- *~' | sudo tee -a /etc/ccollect/sources/$(hostname)-home/exclude</code></li>
</ul>


<p>今回は関係ないかもしれませんが、 <code>/</code> パーティションなどをバックアップする時にはつけた方が良い <code>--one-file-system</code> オプションも追加しておきます。</p>

<ul>
<li><code>echo '--one-file-system' | sudo tee /etc/ccollect/sources/$(hostname)-home/rsync_options</code></li>
</ul>


<p>サマリー表示を有効にしておきます。
初回実行なので詳細表示も有効にしてみます。</p>

<ul>
<li><code>sudo touch /etc/ccollect/sources/$(hostname)-home/summary</code></li>
<li><code>sudo touch /etc/ccollect/sources/$(hostname)-home/verbose</code></li>
</ul>


<h3>初回バックアップ実行</h3>

<p><code>destination</code> ファイルで指定したバックアップ先ディレクトリは自動作成されないので、手動で作成してバックアップを実行します。
2 回実行してちゃんと差分バックアップになっているのを確認します。</p>

<ul>
<li><code>sudo mkdir -pv $(cat /etc/ccollect/sources/*/destination)</code></li>
<li><code>sudo ~/src/github.com/ungleich/ccollect/ccollect daily $(hostname)-home</code></li>
<li><code>sudo ~/src/github.com/ungleich/ccollect/ccollect daily $(hostname)-home</code></li>
</ul>


<p>容量も 2 倍になっていないのを確認します。</p>

<ul>
<li><code>sudo du -s /srv/backup/$(hostname)-home /home</code></li>
</ul>


<p>動作確認ができたので、詳細表示オプションを削除しておきます。</p>

<ul>
<li><code>sudo rm /etc/ccollect/sources/$(hostname)-home/verbose</code></li>
</ul>


<h2>リモートからのバックアップ設定の追加</h2>

<p><code>source</code> にリモートホストを設定する以外はローカルの設定と同様に設定していきます。</p>

<ul>
<li><code>sudo mkdir /etc/ccollect/sources/vps-etc</code></li>
<li><code>echo /srv/backup/vps-etc | sudo tee /etc/ccollect/sources/vps-etc/destination</code></li>
<li><code>echo root@vps.example.jp:/etc | sudo tee /etc/ccollect/sources/vps-etc/source</code></li>
<li><code>echo '- *.swp' | sudo tee -a /etc/ccollect/sources/vps-etc/exclude</code></li>
<li><code>echo '- *~' | sudo tee -a /etc/ccollect/sources/vps-etc/exclude</code></li>
<li><code>sudo touch /etc/ccollect/sources/vps-etc/summary</code></li>
</ul>


<p>ネットワーク的につながらない時はバックアップが失敗するので、事前チェックするようにします。</p>

<ul>
<li><code>sudoedit /etc/ccollect/sources/vps-etc/pre_exec</code></li>
<li><code>sudo chmod +x /etc/ccollect/sources/vps-etc/pre_exec</code></li>
</ul>


<p><code>pre_exec</code> の内容は以下の通りです。
<a href="https://github.com/ungleich/ccollect/blob/5356370233e0883b5c6cc62b12c84ef058f8c239/doc/ccollect.text#L872-L884">ccollect のドキュメントの Testing for host reachabilty</a> を参考にしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'><span class="nv">cur_conf_dir</span><span class="o">=</span><span class="s2">&quot;${CCOLLECT_CONF:-/etc/ccollect}/sources/$name&quot;</span>
</span><span class='line'><span class="nv">SRC_HOST</span><span class="o">=</span><span class="sb">`</span>cat <span class="s2">&quot;$cur_conf_dir/source&quot;</span> <span class="p">|</span> cut -d<span class="s2">&quot;@&quot;</span> -f2 <span class="p">|</span> cut -d<span class="s2">&quot;:&quot;</span> -f1<span class="sb">`</span>
</span><span class='line'>ping -c1 -q <span class="s2">&quot;$SRC_HOST&quot;</span> <span class="o">||</span> <span class="nb">exit</span> <span class="nv">$?</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ssh 設定</h3>

<p>セキュリティ的にはあまり好ましくないのですが、バックアップ用に root から root に ssh で接続できるようにします。</p>

<p>まず、バックアップ先のローカルのマシンで root の ssh 用の鍵を作成します。</p>

<ul>
<li><code>sudo ls -al /root/.ssh</code> で root に ssh の鍵がないのを確認したら <code>sudo ssh-keygen</code> で生成します。存在する場合は別のファイル名で生成して <code>sudoedit /root/.ssh/config</code> で <code>IdentityFile</code> を設定しておきます。自動実行で使用するので、パスフレーズは空にしておきます。</li>
<li>ssh のポート番号を変更しているなど、別途設定が必要な場合は <code>sudoedit /root/.ssh/config</code> で設定しておくのを忘れないように注意が必要です。</li>
<li><code>sudo cat /root/.ssh/id_rsa.pub</code> で公開鍵を表示してコピーしておきます。</li>
</ul>


<p>続いて、バックアップ対象の VPS (バックアップ元) の方で ssh を許可する設定をします。</p>

<ul>
<li><code>sudo install -m700 -d /root/.ssh</code> で <code>/root/.ssh</code> がなければ作成します。</li>
<li><code>sudoedit /root/.ssh/authorized_keys</code> で接続を許可する鍵として、先ほどコピーした公開鍵を貼り付けます。</li>
<li>必要に応じて <code>from="pattern-list"</code> や <code>no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding</code> などの制限も追加しておきます。</li>
<li><code>sudoedit /etc/ssh/sshd_config</code> で <code>PermitRootLogin</code> を <code>no</code> 以外にします。例えば <code>without-password</code> にしておきます。</li>
<li><code>sudoedit /etc/ssh/sshd_config</code> で <code>AllowUsers</code> による制限をしている時は <code>AllowUsers root@接続元IPアドレス</code> を追加しておきます。接続元 IP アドレスが固定ではない場合は、セキュリティ的に弱くなりますが <code>AllowUsers root</code> で許可します。</li>
<li><code>/etc/ssh/sshd_config</code> の設定を変更した場合は <code>sudo service ssh restart</code> で反映させておきます。</li>
</ul>


<p>設定ができたら、接続元 (バックアップ先のローカルのマシン) から ssh の接続確認をします。</p>

<ul>
<li><code>sudo ssh root@vps.example.jp hostname</code> などで ssh 接続ができることの確認とホスト鍵の確認を済ませておきます。</li>
</ul>


<h3>初回バックアップ実行</h3>

<p>ローカルでのバックアップと同様にバックアップ先ディレクトリを作成してからバックアップを実行します。</p>

<ul>
<li><code>sudo mkdir -pv $(cat /etc/ccollect/sources/*/destination)</code></li>
<li><code>sudo ~/src/github.com/ungleich/ccollect/ccollect daily vps-etc</code></li>
<li><code>sudo ~/src/github.com/ungleich/ccollect/ccollect daily vps-etc</code></li>
</ul>


<h2>リモートからの一般ユーザー権限でのバックアップ設定の追加</h2>

<p>dokku で persistent storage としてボリュームマウントを使っているとファイルの所有者とグループがアプリケーションのデプロイのたびに変わってしまって、差分バックアップに支障が出そうだったので、一般ユーザーでのバックアップも設定しました。</p>

<p><a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html" title="XDG Base Directory Specification">XDG Base Directory Specification</a> の <code>XDG_CONFIG_HOME</code> を参考にして <code>~/.config</code> 以下に <code>/etc</code> 以下と同じ構造で設定を作成することにしました。</p>

<ul>
<li><code>mkdir -p ~/.config/ccollect/defaults/intervals</code></li>
<li><code>echo 10 &gt; ~/.config/ccollect/defaults/intervals/daily</code></li>
<li><code>echo 24 &gt; ~/.config/ccollect/defaults/intervals/monthly</code></li>
<li><code>echo 10 &gt; ~/.config/ccollect/defaults/intervals/weekly</code></li>
<li><code>mkdir -p ~/.config/ccollect/sources/vps-srv</code></li>
<li><code>echo /srv/backup/vps-srv &gt; ~/.config/ccollect/sources/vps-srv/destination</code></li>
<li><code>echo vpsuser@vps.example.jp:/srv &gt; ~/.config/ccollect/sources/vps-srv/source</code></li>
<li><code>echo '- *.swp' &gt; ~/.config/ccollect/sources/vps-srv/exclude</code></li>
<li><code>echo '- *~' &gt;&gt; ~/.config/ccollect/sources/vps-srv/exclude</code></li>
<li><code>touch ~/.config/ccollect/sources/vps-srv/summary</code></li>
</ul>


<p>ネットワーク的につながらない時はバックアップが失敗するので、事前チェックするようにします。</p>

<ul>
<li><code>editor ~/.config/ccollect/sources/vps-srv/pre_exec</code></li>
<li><code>chmod +x ~/.config/ccollect/sources/vps-srv/pre_exec</code></li>
</ul>


<p><code>pre_exec</code> の内容は以下の通りです。
「リモートからのバックアップ設定の追加」で作成したものと全く同じ内容です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'><span class="nv">cur_conf_dir</span><span class="o">=</span><span class="s2">&quot;${CCOLLECT_CONF:-/etc/ccollect}/sources/$name&quot;</span>
</span><span class='line'><span class="nv">SRC_HOST</span><span class="o">=</span><span class="sb">`</span>cat <span class="s2">&quot;$cur_conf_dir/source&quot;</span> <span class="p">|</span> cut -d<span class="s2">&quot;@&quot;</span> -f2 <span class="p">|</span> cut -d<span class="s2">&quot;:&quot;</span> -f1<span class="sb">`</span>
</span><span class='line'>ping -c1 -q <span class="s2">&quot;$SRC_HOST&quot;</span> <span class="o">||</span> <span class="nb">exit</span> <span class="nv">$?</span>
</span></code></pre></td></tr></table></div></figure>


<h3>初回バックアップ実行</h3>

<p>一般ユーザー権限でバックアップするので、バックアップ先ディレクトリを <code>chown</code> しておきます。</p>

<p><code>ssh vpsuser@vps.example.jp</code> で一度接続してホスト鍵の確認なども終わらせておきます。</p>

<p>設定ファイルの場所が違うので、環境変数 <code>CCOLLECT_CONF</code> を設定しつつ実行します。</p>

<ul>
<li><code>sudo mkdir -pv $(cat ~/.config/ccollect/sources/*/destination)</code></li>
<li><code>sudo chown $(id -u) /srv/backup/vps-srv</code></li>
<li><code>env CCOLLECT_CONF=$HOME/.config/ccollect ~/src/github.com/ungleich/ccollect/ccollect daily vps-srv</code></li>
<li><code>env CCOLLECT_CONF=$HOME/.config/ccollect ~/src/github.com/ungleich/ccollect/ccollect daily vps-srv</code></li>
</ul>


<h2>バックアップ自動実行設定</h2>

<p>cron で毎日自動バックアップが動くように設定します。
時間がかかるので、 <code>cron.daily</code> のファイルの中でも最後に実行されるように <code>zz-</code> で始まる名前にしています。
そして、パッケージで入れたファイルと区別できるように <code>local</code> という文字列を名前に入れています。</p>

<p>その際、保存回数が一番多くて保存期間が長い <code>monthly</code> を優先するようにしてみました。</p>

<p>ログ保存用のディレクトリは一般的な debian の流儀に合わせて adm グループのみ読めるようにしています。
<code>install</code> コマンドについては <a href="http://blog.n-z.jp/blog/2014-02-14-install.html" title="installコマンドでコマンド数を減らす">installコマンドでコマンド数を減らす</a> を参考にしてください。</p>

<p>ログは rotate などはせずに全部残して、 <code>tools/ccollect_analyse_logs</code> でエラーや警告があれば cron からのメールとして飛ぶようにしました。
その際、 <code>tools/ccollect_analyse_logs</code> の exit status が <code>grep</code> の exit status そのままなので、エラーの有無と逆の意味に感じられてしまうので、反転するようにしました。</p>

<ul>
<li><code>sudoedit /etc/cron.daily/zz-local-ccollect</code></li>
<li><code>sudo chmod +x /etc/cron.daily/zz-local-ccollect</code></li>
</ul>


<figure class='code'><figcaption><span>/etc/cron.daily/zz-local-ccollect</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">INTERVAL</span><span class="o">=</span>daily
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">7</span> <span class="o">=</span> <span class="s2">&quot;$(date +%u)&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nv">INTERVAL</span><span class="o">=</span>weekly
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">01</span> <span class="o">=</span> <span class="s2">&quot;$(date +%d)&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nv">INTERVAL</span><span class="o">=</span>monthly
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>mkdir -p /var/log/ccollect
</span><span class='line'><span class="nv">LOGDIR</span><span class="o">=</span><span class="s2">&quot;/var/log/ccollect&quot;</span>
</span><span class='line'><span class="nv">LOGFILE</span><span class="o">=</span><span class="s2">&quot;$LOGDIR/$(date +%Y%m%d-%H%M).log&quot;</span>
</span><span class='line'><span class="nv">LOCALUSER</span><span class="o">=</span><span class="s2">&quot;localuser&quot;</span>
</span><span class='line'><span class="nv">CCOLLECT_DIR</span><span class="o">=</span><span class="s2">&quot;/home/$LOCALUSER/src/github.com/ungleich/ccollect&quot;</span>
</span><span class='line'>install -m750 -oroot -gadm -d <span class="s2">&quot;$LOGDIR&quot;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  su - <span class="s2">&quot;$LOCALUSER&quot;</span> -c <span class="s1">&#39;env CCOLLECT_CONF=$HOME/.config/ccollect &#39;</span><span class="s2">&quot;$CCOLLECT_DIR&quot;</span><span class="s1">&#39;/ccollect -a &#39;</span><span class="s2">&quot;$INTERVAL&quot;</span>
</span><span class='line'>  <span class="s2">&quot;$CCOLLECT_DIR/ccollect&quot;</span> -a <span class="s2">&quot;$INTERVAL&quot;</span>
</span><span class='line'><span class="o">}</span> &gt;<span class="s2">&quot;$LOGFILE&quot;</span> 2&gt;<span class="p">&amp;</span>1
</span><span class='line'><span class="k">if</span> /bin/sh <span class="s2">&quot;$CCOLLECT_DIR/tools/ccollect_analyse_logs&quot;</span> <span class="s2">&quot;we&quot;</span> &lt; <span class="s2">&quot;$LOGFILE&quot;</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="c"># found</span>
</span><span class='line'>  <span class="nb">exit </span>1
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="c"># not found</span>
</span><span class='line'>  <span class="nb">exit </span>0
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h2>リモートの dokku の home のバックアップ設定</h2>

<p>他の設定例として、リモートの dokku の home のバックアップ設定もしてみました。
設定が似ている <code>vps-etc</code> を雛形としてコピーして <code>destination</code> と <code>source</code> などを書き換える形で設定しました。</p>

<ul>
<li><code>cd /etc/ccollect/sources</code></li>
<li><code>sudo cp -a vps-etc vps-home</code></li>
<li><code>sudoedit vps-home/destination</code> で <code>/srv/backup/vps-home</code> に変更</li>
<li><code>sudoedit vps-home/source</code> で <code>root@vps.example.jp:/home</code> に変更</li>
<li><code>sudoedit vps-home/exclude</code> で <code>- cache</code> を追加 (<code>/home/dokku/$APP/cache/</code> は buildpack での build 時などのキャッシュに使われるのと、ファイルの所有者とグループがどんどん変わるので、バックアップからは除外)</li>
</ul>


<h3>初回バックアップ実行</h3>

<p><code>vps-etc</code> のバックアップと同様にバックアップ先ディレクトリを作成してからバックアップを実行します。</p>

<ul>
<li><code>sudo mkdir -pv $(cat /etc/ccollect/sources/*/destination)</code></li>
<li><code>sudo ~/src/github.com/ungleich/ccollect/ccollect daily vps-home</code></li>
<li><code>sudo ~/src/github.com/ungleich/ccollect/ccollect daily vps-home</code></li>
</ul>


<h2>uid, gid 問題</h2>

<p>LDAP などでアカウントを共通化していれば問題ないのですが、 <code>rsync</code> では uid や gid を数値のまま保存してコピーするので、バックアップ元とバックアップ先で同じ uid に対して別のユーザーが存在すると、意図しないユーザーが読めるバックアップができてしまうので、注意が必要です。</p>

<p>この記事の例だと <code>/srv/backup/vps-home</code> のパーミッションを変更する (<code>sudo chmod 700 /srv/backup/vps-home</code>) などの対処をしておくと良いと思います。</p>

<h2>バックアップの差分の確認</h2>

<p><a href="https://github.com/ungleich/ccollect/blob/5356370233e0883b5c6cc62b12c84ef058f8c239/doc/ccollect.text#L858-L869" title="ccollect.text の Comparing backups">ccollect.text の Comparing backups</a> によると <code>rsync -n -a --delete --stats --progress daily.20080324-0313.17841/ daily.20080325-0313.31148/</code> のように <code>-n</code> オプション付きで <code>rsync</code> を実行することによってバックアップの差分を確認できるようです。</p>

<h2>まとめ</h2>

<p><code>ccollect</code> で差分バックアップを作成するようにしました。</p>

<p><code>rsync</code> によるバックアップなので、圧縮などもするバックアップツールと違い、バックアップの内容も元のディレクトリ構造そのままでわかりやすいので、一部だけ復元するなどの操作も素直に実行しやすくなっています。</p>

<p>ハードリンクなので i-node は消費しますが、変化がないファイルについては容量を消費しないので、バックアップサイズも抑えられます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dokku 0.5.3 を vagrant 環境で試してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-03-30-dokku-053.html"/>
    <updated>2016-03-30T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dokku-053</id>
    <content type="html"><![CDATA[<p>社内向けアプリで本番環境でも使っている dokku のバージョン 0.5.3 をいろいろ試しやすくするために vagrant 環境で試してみました。</p>

<!--more-->


<h2>確認バージョン</h2>

<ul>
<li>VirtualBox 5.0.16</li>
<li>Vagrant 1.8.1</li>
<li>dokku 0.5.3</li>
</ul>


<h2>dokku v0.5.0 での主な変更点</h2>

<p><a href="https://github.com/dokku/dokku/releases/tag/v0.5.0">v0.5.0</a> での主な変更点は以下の通りです。</p>

<ul>
<li>docker 1.10/1.11 のサポートと、 docker 1.9.1 以上の必須化</li>
<li>ドキュメント改善</li>
<li><a href="http://dokku.viewdocs.io/dokku/deployment/deployment-tasks/" title="Deployment Tasks">Deployment Tasks</a> (<code>app.json</code> での <code>scripts.dokku.predeploy</code> と <code>scripts.dokku.postdeploy</code> のサポート)</li>
<li><a href="http://dokku.viewdocs.io/dokku/deployment/dockerfiles/" title="Dockerfile Deployment">Dockerfile Deployment</a> で <code>Procfile</code> サポート、<code>EXPOSE</code> の扱いの変更</li>
<li><a href="http://dokku.viewdocs.io/dokku/dokku-storage/">persistent storage plugin</a> のオフィシャル化</li>
</ul>


<h2>初期設定</h2>

<p><code>git clone https://github.com/dokku/dokku</code> で clone してきたディレクトリの中に入って <code>vagrant up</code> します。
最初は box のダウンロードもあるので時間がかかります。</p>

<p><a href="http://xip.io/">xip.io</a> を使ってサブドメインを使ったデプロイを試します。</p>

<p><code>http://10.0.0.2.xip.io/</code> を開き、 <code>Hostname</code> を <code>10.0.0.2.xip.io</code> にして <code>Use virtualhost naming for apps</code> にチェックを入れて、 <code>Finish Setup</code> を押します。</p>

<p><a href="http://dokku.viewdocs.io/dokku/application-deployment/">http://dokku.viewdocs.io/dokku/application-deployment/</a> にリダイレクトされるので、そのチュートリアルを試します。</p>

<h2>チュートリアル前の準備</h2>

<p><code>vagrant ssh</code> で入って操作します。</p>

<p><code>docker</code> コマンドや <code>dokku</code> コマンドで <code>sudo</code> を不要にするためにグループに追加します。</p>

<ul>
<li><code>sudo usermod -aG docker vagrant</code></li>
<li><code>sudo usermod -aG dokku vagrant</code></li>
</ul>


<p>ビルド中のダウンロードでタイムアウトしにくくするためにタイムアウト時間をのばします。</p>

<ul>
<li><code>dokku config:set --global CURL_TIMEOUT=120</code></li>
</ul>


<p><code>dokku run</code> などで実行して終了したコンテナが溜まっていかないようにするために、デフォルトで <code>--rm</code> をつけるようにします。(この設定をしなくても <code>git push</code> したときに自動で実行される <code>dokku cleanup</code> で削除されます。)</p>

<ul>
<li><code>dokku config:set --global DOKKU_RM_CONTAINER=1</code></li>
</ul>


<h2>チュートリアル</h2>

<p>チュートリアルも <code>vagrant ssh</code> で入った環境で試します。
<code>sudo dokku plugin:install</code> 以外はホスト側からでも実行できます。</p>

<ul>
<li><code>git clone git@github.com:heroku/ruby-rails-sample.git</code> で rails のサンプルを clone しておきます。</li>
<li><code>dokku apps:create ruby-rails-sample</code> でアプリケーションを作成します。データベースとのリンクに必要なので、事前に作成していますが、 <a href="https://github.com/heroku/node-js-sample">https://github.com/heroku/node-js-sample</a> のように単独で動くアプリケーションでは事前に <code>apps:create</code> しなくても構いません。</li>
<li><code>sudo dokku plugin:install https://github.com/dokku/dokku-postgres.git</code> で postgres プラグインをインストールします。インストールの後処理で <code>postgres:9.5.0</code>, <code>svendowideit/ambassador:latest</code>, <code>dokkupaas/wait:latest</code> が docker pull されるので、ダウンロードに少し時間がかかります。</li>
<li><code>docker images</code> で確認するとわかるのですが、なぜか <code>gliderlabs/herokuish</code> が 0 バイトのイメージになってしまっているので <code>docker pull gliderlabs/herokuish</code> でダウンロードしておきます。ここもダウンロードに時間がかかります。この手順は普通にインストールした場合は不要なはずです。</li>
<li><code>dokku postgres:create rails-database</code> でデータベースのコンテナを作成して <code>dokku postgres:link rails-database ruby-rails-sample</code> でリンクします。</li>
<li><code>git remote add dokku dokku@10.0.0.2:ruby-rails-sample</code> で remote に dokku を登録して <code>git push dokku master</code> でデプロイします。</li>
<li><code>curl</code> コマンドでエラーになった場合、 <code>CURL_TIMEOUT</code> をのばして、再度 <code>git push dokku master</code> します。</li>
<li><code>http://ruby-rails-sample.10.0.0.2.xip.io/</code> を開いて <code>Hello World</code> と現在時刻が UTC (+0000) で表示されていたら成功です。</li>
</ul>


<h2>チュートリアル後の変更例</h2>

<p>現在時刻が UTC で表示されていたので JST に変更してみます。</p>

<ul>
<li><code>dokku config:set ruby-rails-sample TZ=Asia/Tokyo</code></li>
</ul>


<p><code>http://ruby-rails-sample.10.0.0.2.xip.io/</code> を開いて <code>Hello World</code> と現在時刻が JST (+0900) で表示されていたら成功です。</p>

<h2><code>rake db:migrate</code> を実行する</h2>

<p><code>dokku run ruby-rails-sample bundle exec rake db:migrate</code> で実行できます。</p>

<h2><code>scripts.dokku.predeploy</code> で <code>rake db:migrate</code> を自動実行する</h2>

<p><a href="http://dokku.viewdocs.io/dokku~v0.5.3/deployment/deployment-tasks/">Deployment Tasks</a> に書いてあるように v0.5.0 から <code>app.json</code> に <code>scripts.dokku.predeploy</code> を設定できるようになっているので、そこで <code>rake db:migrate</code> を自動実行するように設定してみます。</p>

<p>heroku が対応している <code>scripts.postdeploy</code> は初回の deploy 時にしか実行されないのに対して、 <code>scripts.dokku.predeploy</code> と <code>scripts.dokku.postdeploy</code> は毎回実行されるという違いがあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/app.json b/app.json</span>
</span><span class='line'><span class="gh">index 452cef1..4c828fa 100644</span>
</span><span class='line'><span class="gd">--- a/app.json</span>
</span><span class='line'><span class="gi">+++ b/app.json</span>
</span><span class='line'><span class="gu">@@ -5,6 +5,9 @@</span>
</span><span class='line'>   &quot;repository&quot;: &quot;https://github.com/heroku/ruby-rails-sample&quot;,
</span><span class='line'>   &quot;logo&quot;: &quot;https://upload.wikimedia.org/wikipedia/commons/c/c3/Ruby_on_Rails_logo.svg&quot;,
</span><span class='line'>   &quot;scripts&quot;: {
</span><span class='line'><span class="gi">+    &quot;dokku&quot;: {</span>
</span><span class='line'><span class="gi">+      &quot;predeploy&quot;: &quot;bundle exec rake db:migrate&quot;</span>
</span><span class='line'><span class="gi">+    },</span>
</span><span class='line'>     &quot;postdeploy&quot;: &quot;bundle exec rake db:migrate&quot;
</span><span class='line'>   },
</span><span class='line'>   &quot;env&quot;: {
</span></code></pre></td></tr></table></div></figure>


<p>という変更を commit して push して動作確認します。</p>

<p>さらに <code>rails g model</code> などで migration ファイルを作成してさらに動作確認できます。</p>

<h2>pre-flight checks</h2>

<p><a href="http://dokku.viewdocs.io/dokku~v0.5.3/checks-examples/">Zero Downtime Deploys</a> に書いてあるようにゼロダウンタイムデプロイを実現するために <code>CHECKS</code> ファイルを作成します。
(デプロイ後のメッセージに <code>Shutting down old containers in 60 seconds</code> とあるように、デプロイして新しいコンテナに切り替わった直後の 1 分間は古いコンテナも動いています。)</p>

<p>以下の内容の <code>CHECKS</code> ファイルを作成して、デプロイ時の起動確認をデフォルトの 10 秒待つだけの動作から、 http で特定の URL にアクセスして指定した内容が含まれるかどうかのチェックに変更します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>/ Hello World
</span></code></pre></td></tr></table></div></figure>


<p>デフォルトでは 5 秒ごとに 5 回までのチェックですが、以下の内容にすると 10 秒ごとに 20 回までのチェックになります。
起動に時間がかかるアプリケーションの場合に、回数を増やしたり時間をのばしたりすると良いと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>WAIT=10
</span><span class='line'>ATTEMPTS=20
</span><span class='line'>/ Hello World
</span></code></pre></td></tr></table></div></figure>


<h2>アプリケーションを削除する</h2>

<p><code>dokku apps:destroy ruby-rails-sample</code> で削除できます。
heroku での削除と同じように、確認のため、アプリケーション名を再度入力しないと消えないようになっています。</p>

<p>データベースも作成していたので、同様に <code>dokku postgres:destroy rails-database</code> で削除します。</p>

<h2>node-js-sample を試す</h2>

<p>Dokku の昔のバージョンのチュートリアルは node-js-sample を使っていたので、 node-js-sample も試してみます。</p>

<ul>
<li><code>git clone git@github.com:heroku/node-js-sample.git</code></li>
<li><code>cd node-js-sample</code></li>
<li><code>git remote add dokku dokku@10.0.0.2:node-js-sample</code></li>
<li><code>git push dokku master</code></li>
</ul>


<p><code>http://node-js-sample.10.0.0.2.xip.io/</code> を開いて <code>Hello World!</code> が表示されたら成功です。</p>

<h2>動作確認用シェルスクリプト</h2>

<p><code>rails g model</code> 用に <a href="https://github.com/riywo/anyenv">anyenv</a> と <a href="https://github.com/rbenv/rbenv">rbenv</a> を使って ruby と rails のインストールまでしています。</p>

<p>実行前に <code>http://10.0.0.2.xip.io/</code> を開いて設定をしないと途中で失敗して止まります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">set</span> -euo pipefail
</span><span class='line'><span class="nb">set</span> -x
</span><span class='line'><span class="nb">cd</span> /home/vagrant
</span><span class='line'>sudo usermod -aG docker vagrant
</span><span class='line'>sudo usermod -aG dokku vagrant
</span><span class='line'>dokku config:set --global <span class="nv">CURL_TIMEOUT</span><span class="o">=</span>120
</span><span class='line'>dokku config:set --global <span class="nv">DOKKU_RM_CONTAINER</span><span class="o">=</span>1
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d ruby-rails-sample <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  git clone https://github.com/heroku/ruby-rails-sample.git
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d /home/dokku/ruby-rails-sample <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  dokku apps:create ruby-rails-sample
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d /var/lib/dokku/plugins/available/postgres <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  sudo dokku plugin:install https://github.com/dokku/dokku-postgres.git <span class="o">||</span> :
</span><span class='line'>  sudo docker pull gliderlabs/herokuish
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -f /home/dokku/ruby-rails-sample/DOCKER_OPTIONS_RUN <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  dokku postgres:create rails-database <span class="o">||</span> :
</span><span class='line'>  dokku postgres:link rails-database ruby-rails-sample
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">pushd</span> ~/ruby-rails-sample
</span><span class='line'><span class="k">if</span> ! git remote <span class="p">|</span> grep -q dokku<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  git remote add dokku dokku@10.0.0.2:ruby-rails-sample
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>git push dokku master
</span><span class='line'><span class="k">if</span> ! dokku config ruby-rails-sample <span class="p">|</span> grep -q <span class="s1">&#39;^TZ&#39;</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  dokku config:set ruby-rails-sample <span class="nv">TZ</span><span class="o">=</span>Asia/Tokyo
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">popd</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d node-js-sample <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  git clone https://github.com/heroku/node-js-sample.git
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">pushd</span> ~/node-js-sample
</span><span class='line'><span class="k">if</span> ! git remote <span class="p">|</span> grep -q dokku<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  git remote add dokku dokku@10.0.0.2:node-js-sample
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>git push dokku master
</span><span class='line'><span class="nb">popd</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -z <span class="s2">&quot;$(dpkg -l | grep nodejs)&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  sudo sed -i~ -e <span class="s1">&#39;s/us\.archive/jp.archive/&#39;</span> /etc/apt/sources.list
</span><span class='line'>  sudo apt-get update
</span><span class='line'>  sudo apt-get -y install autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm3 libgdbm-dev
</span><span class='line'>  sudo apt-get -y install libpq-dev
</span><span class='line'>  sudo apt-get -y install nodejs
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d ~/.anyenv <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  git clone https://github.com/riywo/anyenv.git ~/.anyenv
</span><span class='line'>  <span class="nb">echo</span> <span class="s1">&#39;export PATH=&quot;$HOME/.anyenv/bin:$PATH&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'>  <span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(anyenv init -)&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -z <span class="s2">&quot;$(command -v anyenv)&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$HOME/.anyenv/bin:$PATH&quot;</span>
</span><span class='line'>  <span class="nb">set</span> +x
</span><span class='line'>  <span class="nb">eval</span> <span class="s2">&quot;$(anyenv init - --no-rehash)&quot;</span>
</span><span class='line'>  <span class="nb">set</span> -x
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d ~/.anyenv/envs/rbenv <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  anyenv install rbenv
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -z <span class="s2">&quot;$(command -v rbenv)&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">set</span> +x
</span><span class='line'>  <span class="nb">eval</span> <span class="s2">&quot;$(anyenv init - --no-rehash)&quot;</span>
</span><span class='line'>  <span class="nb">set</span> -x
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nv">ruby_version</span><span class="o">=</span><span class="k">$(</span>awk <span class="s1">&#39;/^ruby/{print $2}&#39;</span> ~/ruby-rails-sample/Gemfile <span class="p">|</span> tr -d <span class="s2">&quot;&#39;&quot;</span><span class="k">)</span>
</span><span class='line'><span class="k">if</span> ! rbenv versions <span class="p">|</span> grep -q <span class="s2">&quot;$ruby_version&quot;</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  rbenv install <span class="s2">&quot;$ruby_version&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -f ~/.gemrc <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  cat <span class="s">&lt;&lt;EOF &gt;~/.gemrc</span>
</span><span class='line'><span class="s">install: --no-rdoc --no-ri --format-executable</span>
</span><span class='line'><span class="s">update: --no-rdoc --no-ri --format-executable</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">export </span><span class="nv">RBENV_VERSION</span><span class="o">=</span><span class="s2">&quot;$ruby_version&quot;</span>
</span><span class='line'><span class="k">if</span> ! gem list <span class="p">|</span> grep -q bundler<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  gem install bundler
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">pushd</span> ~/ruby-rails-sample
</span><span class='line'>bundle
</span><span class='line'>cat <span class="s">&lt;&lt;EOF &gt;CHECKS</span>
</span><span class='line'><span class="s">WAIT=10</span>
</span><span class='line'><span class="s">ATTEMPTS=20</span>
</span><span class='line'><span class="s">/ Hello World</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>git add CHECKS
</span><span class='line'>git commit -m <span class="s2">&quot;Add pre-flight checks file&quot;</span> <span class="o">||</span> :
</span><span class='line'>git push dokku master
</span><span class='line'>cat <span class="s">&lt;&lt;EOF &gt;app.json</span>
</span><span class='line'><span class="s">{</span>
</span><span class='line'><span class="s">  &quot;scripts&quot;: {</span>
</span><span class='line'><span class="s">    &quot;dokku&quot;: {</span>
</span><span class='line'><span class="s">      &quot;predeploy&quot;: &quot;bundle exec rake db:migrate&quot;</span>
</span><span class='line'><span class="s">    }</span>
</span><span class='line'><span class="s">  }</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>git add app.json
</span><span class='line'>git commit -m <span class="s2">&quot;Set script.dokku.predeploy to app.json&quot;</span> <span class="o">||</span> :
</span><span class='line'>git push dokku master
</span><span class='line'><span class="nb">popd</span>
</span><span class='line'><span class="nb">pushd</span> ~/node-js-sample
</span><span class='line'>cat <span class="s">&lt;&lt;EOF &gt;CHECKS</span>
</span><span class='line'><span class="s">/ Hello World!</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>git add CHECKS
</span><span class='line'>git commit -m <span class="s2">&quot;Add pre-flight checks file&quot;</span> <span class="o">||</span> :
</span><span class='line'>git push dokku master
</span><span class='line'><span class="nb">popd</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>vagrant を使って dokku をいろいろ試す環境を簡単に作ることができました。
この環境を使ってテストやデバッグなどいろいろ試しやすくなると思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jessie で inspircd を設定した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-03-29-inspircd.html"/>
    <updated>2016-03-29T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/inspircd</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2016-03-22-wheezy-to-jessie.html">先日 wheezy から jessie にあげた</a>マシンでサーバー管理にも使っている ircd として inspircd の設定をしたので、そのメモです。</p>

<!--more-->


<h2>確認バージョン</h2>

<ul>
<li>Debian GNU/Linux 8.3 (jessie)</li>
<li>inspircd 2.0.17-1+deb8u1</li>
</ul>


<h2>インストールと起動確認</h2>

<p><code>sudo aptitude install inspircd</code> でインストールしました。</p>

<p>systemd 管理になって <code>/etc/default/inspircd</code> の <code>INSPIRCD_ENABLED=0</code> に関係なく起動するようになっていました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% systemctl status inspircd
</span><span class='line'>● inspircd.service - IRC server
</span><span class='line'>   Loaded: loaded (/lib/systemd/system/inspircd.service; enabled)
</span><span class='line'>   Active: active (running) since 火 2016-03-29 17:37:37 JST; 3min 34s ago
</span><span class='line'> Main PID: 11613 (inspircd)
</span><span class='line'>   CGroup: /system.slice/inspircd.service
</span><span class='line'>           └─11613 /usr/sbin/inspircd --logfile /var/log/inspircd.log --config /etc/inspircd/insp...
</span><span class='line'>
</span><span class='line'> 3月 29 17:37:37 ns8 inspircd[11613]: Inspire Internet Relay Chat Server, compiled on Mar 23...1:24
</span><span class='line'> 3月 29 17:37:37 ns8 inspircd[11613]: (C) InspIRCd Development Team.
</span><span class='line'> 3月 29 17:37:37 ns8 inspircd[11613]: Developers:
</span><span class='line'> 3月 29 17:37:37 ns8 inspircd[11613]:         Brain, FrostyCoolSlug, w00t, Om, Special, peavey
</span><span class='line'> 3月 29 17:37:37 ns8 inspircd[11613]: aquanight, psychon, dz, danieldg, jackmcbarn
</span><span class='line'> 3月 29 17:37:37 ns8 inspircd[11613]: Attila
</span><span class='line'> 3月 29 17:37:37 ns8 inspircd[11613]: Others:                        See /INFO Output
</span><span class='line'> 3月 29 17:37:37 ns8 inspircd[11613]: Loading core commands........................................
</span><span class='line'> 3月 29 17:37:37 ns8 inspircd[11613]: InspIRCd is now running as 'irc.local'[811] with 1024 ...kets
</span><span class='line'>Hint: Some lines were ellipsized, use -l to show in full.</span></code></pre></td></tr></table></div></figure>


<p><code>systemd-journal</code> グループに所属しているので、ログも出ています。</p>

<h2>設定変更</h2>

<p><code>sudoedit /etc/inspircd/inspircd.conf</code> で設定変更して、 <code>sudo service inspircd reload</code> で反映しました。</p>

<pre><code>&lt;server name="irc.example.org"
        description="Example.org IRC Server"
        network="example.org"&gt;

&lt;admin name="Kazuhiro Nishiyama"
       nick="znz"
       email="zn@mbf.nifty.com"&gt;
</code></pre>

<p>に変更しました。</p>

<p>NAT の中のサーバー群からも接続するので connect の localmax と globalmax を 3 から 9 に変更しました。</p>

<h3>tls 設定</h3>

<p>推奨設定の gnutls を使って設定をしました。
証明書は <a href="https://www.startssl.com/">https://www.startssl.com/</a> で無料で発行してもらったものを使いました。</p>

<pre><code>&lt;bind address="" port="6697" ssl="gnutls"&gt;
&lt;module name="m_ssl_gnutls.so"&gt;
&lt;gnutls cafile="" crlfile="" certfile="/etc/ssl/certs/irc.example.org.2016.crt" keyfile="/etc/ssl/private/irc.example.org.2016.key" dh_bits="1024"&gt;
</code></pre>

<h3>auto join 設定</h3>

<p>slack に似せて <code>#general</code> と <code>#random</code> に自動で join するように</p>

<pre><code>&lt;module name="m_conn_join.so"&gt;
&lt;autojoin channel="#general,#random"&gt;
</code></pre>

<p>を追加しました。</p>

<h3>server password 設定</h3>

<p>connect タグに password 属性を追加しました。</p>

<h3>permchannels 設定</h3>

<p><code>#general</code> と <code>#random</code> はトピックを自動設定、 <code>#servers</code> についてはパスワードを設定するために permchannels 設定を使いました。</p>

<pre><code>&lt;module name="m_permchannels.so"&gt;
&lt;permchannels channel="#general" modes="n" topic="General Talk"&gt;
&lt;permchannels channel="#random" modes="n" topic="Random Talk"&gt;
&lt;permchannels channel="#servers" modes="stnk PASSWORD" topic="Servers Status"&gt;
</code></pre>

<p>を追加しました。</p>

<h2>チャンネル作成制限</h2>

<p>permchannels であらかじめチャンネルを作成しておくことにしたので、 <code>restrictchans</code> でチャンネル作成を完全に禁止することにしました。</p>

<pre><code>&lt;module name="m_restrictchans.so"&gt;
</code></pre>

<h2>ufw</h2>

<pre><code>sudo ufw allow 6697/tcp
</code></pre>

<p>で 6697 番ポートへの接続を許可しました。</p>

<h2>tls 関係ファイル設置</h2>

<p>inspircd は irc ユーザー権限で動くので、そのユーザーが読めるように秘密鍵を設置しました。
<code>/etc/ssl/private</code> ディレクトリを読めるようにするために <code>ssl-cert</code> グループへの追加も行いました。</p>

<pre><code>%  sudoedit /etc/ssl/irc.example.org.2016.csr
%  sudoedit /etc/ssl/certs/irc.example.org.2016.crt
%  sudoedit /etc/ssl/private/irc.example.org.2016.key
%  sudo chmod 640 /etc/ssl/private/irc.example.org.2016.key
%  sudo chgrp irc /etc/ssl/private/irc.example.org.2016.key
%  sudo adduser irc ssl-cert
ユーザ `irc' をグループ `ssl-cert' に追加しています...
ユーザ irc をグループ ssl-cert に追加
完了。
</code></pre>

<h2>DNS 設定</h2>

<p>今まで別のサーバーで動かしていたので、 DNS の A レコードを変更して、変更が反映されるのを待ち、新しいサーバーにクライアントが接続されるのを確認しました。</p>

<h2>まとめ</h2>

<p><code>systemd</code> になって <code>/etc/default/inspircd</code> がきかなくなるなど、 Debian 的にまだ過渡期な部分があるようですが、 inspircd としては問題なく動かすことができました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 108 回 関西 Debian 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-03-27-kansai-debian-meeting.html"/>
    <updated>2016-03-27T14:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20160327" title="第 108 回 関西 Debian 勉強会">第 108 回 関西 Debian 勉強会</a>に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>オープニングなど</h2>

<ul>
<li><a href="https://twitter.com/search?q=%23kansaidebian&amp;src=typd">ハッシュタグは #kansaidebian</a></li>
<li><a href="https://wiki.debian.org/KansaiDebianMeeting/20160228">前回</a> の事前配布資料がまだアップロードされていなかった。</li>
<li><a href="http://mozilla.debian.net/">http://mozilla.debian.net/</a> から jessie にも firefox がインストールできる。</li>
<li><a href="http://abi-laboratory.pro/tracker/">Application Binary Interface (ABI) Tracker</a></li>
<li>その他の話題</li>
<li><a href="http://badlock.org/" title="Badlock Bug">Badlock Bug</a></li>
<li><a href="http://security.srad.jp/story/16/03/25/2045223/" title="WindowsおよびSambaの重大なバグ「Badlock」、4月12日のパッチリリースが告知される">WindowsおよびSambaの重大なバグ「Badlock」、4月12日のパッチリリースが告知される</a></li>
<li>Wheezy LTS</li>
<li><a href="https://debian-handbook.info/browse/ja-JP/stable/" title="Debian 管理者ハンドブック">Debian 管理者ハンドブック</a> のペーパーバック版が発売されているという話</li>
<li>jessie で tdiary が消えた理由などを聞いた。</li>
<li><a href="https://packages.qa.debian.org/t/tdiary/news/20140624T163916Z.html" title="tdiary REMOVED from testing">tdiary REMOVED from testing</a> にあるように ruby-imagesize が壊れたのが原因で upstream で ruby-fastimage に依存が変わっていたので、新規パッケージで入れて tdiary の更新をしようとしたら freeze されて jessie に入らなかったという感じの話だった。</li>
<li>doorkeeper の申し込みで事前課題の入力必須だったのがわかりにくいという話</li>
<li>doorkeeper で管理者側でアンケート結果の一覧が表示できないので不便という話</li>
<li>doorkeeper の方は事前課題として「systemd で起動する Jessie 環境を御用意下さい．幾つか設定を変更することがありますので，VM 環境の方が無難かもしれません．」というのが出ていたのに debian wiki の方には書いていなかった話</li>
</ul>


<h2>休憩</h2>

<ul>
<li>tdiary で org-mode</li>
</ul>


<h2>systemd に浸ってみた</h2>

<ul>
<li><code>systemctl</code></li>
<li><code>systemctl status</code></li>
<li><code>systemd-analyze</code></li>
<li><code>systemd-analyze blame</code></li>
<li><code>systemd-cgls</code></li>
<li><code>timedatectl</code></li>
<li><code>systemctl status systemd-timesyncd</code></li>
<li><code>sudo timedatectl set-ntp true</code></li>
<li><code>systemctl status -l systemd-timesyncd</code></li>
<li><code>/etc/systemd/timesyncd.conf</code></li>
<li><code>timesyncd.conf(5)</code> の man がない (jessie だと)</li>
<li>sid だと設定が変わっているが jessie と同じ設定でも動いている</li>
<li><code>/usr/lib/systemd/ntp-units.d/</code></li>
<li><code>/usr/share/doc/systemd/changelog.Debian.gz</code> に <code>* Run timesyncd in virtual machines. (Closes: #762343)</code> という行があって仮想環境では upstream の timesyncd は動かないようになっている</li>
<li><code>dmesg</code> と <code>dmesg -T</code></li>
<li><a href="https://0xstubs.org/systemd-timesyncd-and-leap-seconds/" title="How systemd-timesyncd handles leap seconds">How systemd-timesyncd handles leap seconds</a></li>
<li><code>systemctl status systemd-resolved</code></li>
<li>使うには有効にした後、 <code>/etc/nsswitch.conf</code> の <code>dns</code> を <code>resolve</code> に変更、または <code>/run/systemd/resolve/resolv.conf</code> を <code>/etc/resolv.conf</code> にシンボリックリンク</li>
<li><code>/etc/systemd/resolved.conf</code> に設定</li>
<li><code>systemctl status systemd-networkd</code></li>
<li><code>/etc/systemd/network/</code> 以下で設定</li>
<li>debian では udev に設定が入っていて eth0 とかになる</li>
<li><code>systemd.network(5)</code> の man を見る</li>
<li><code>Driver=</code> が有効になるのは systemd 216 で jessie では使えない</li>
<li><code>[DHCP]</code> セクションに <code>UseDNS=</code> という設定がある</li>
<li><code>systemd.link(5)</code> や <code>systemd.netdev(5)</code> も参照</li>
<li><code>ConditionHost=</code> などを使えば単一の設定ファイルを複数ホストで共有できる</li>
<li>無線を使う場合には向かない</li>
<li>NetworkManager とは排他</li>
<li><code>sudo apt-get install systemd-cron</code></li>
<li>cron, anacron とは conflict していて入れ替わる</li>
<li><code>systemctl list-unit-files | grep cron</code></li>
<li><code>cat /lib/systemd/system/cron-hourly.timer</code></li>
<li><code>crontab -e</code> は動かなくなる</li>
<li><code>~/.config/systemd/user/</code> 以下にユーザーごとの設定を置ける</li>
<li><code>systemctl --user list-unit-files</code></li>
<li>GNOME や KDE だと systemd を使うしかなさそう</li>
<li>Xfce だと systemd はハイバネーションで失敗するのでやめた方が良い</li>
<li>systemd の情報を見る時はバージョン番号を確認しましょう</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[さくらの VPS の Debian wheezy を jessie にあげた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-03-22-wheezy-to-jessie.html"/>
    <updated>2016-03-22T12:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/wheezy-to-jessie</id>
    <content type="html"><![CDATA[<p>Debian 6 &ldquo;Squeeze&rdquo; の <a href="https://wiki.debian.org/LTS/Using">LTS</a> が終わって Debian 7 &ldquo;Wheezy&rdquo; もそろそろ Debian 8 &ldquo;Jessie&rdquo; にあげた方が良さそうな気がしてきたので、
<a href="http://vps.sakura.ad.jp/">さくらの VPS</a> で使っている Debian 環境を Debian 7.9 から Debian 8.3 にあげてみました。</p>

<!--more-->


<h2>事前準備</h2>

<p><a href="https://www.debian.org/releases/jessie/amd64/release-notes/ch-upgrading.ja.html" title="第4章 Debian 7 (wheezy) からのアップグレード">第4章 Debian 7 (wheezy) からのアップグレード</a> などを読んで事前に注意点を確認しておきました。</p>

<h3>古いパッケージの削除</h3>

<p>Squeeze から残っているパッケージを確認するため</p>

<pre><code>aptitude search '~i!~Odebian'
</code></pre>

<p>で現在インストールできないパッケージを調べました。</p>

<p><code>pg_upgradecluster</code> コマンドで移行したのに残したままだった postgresql-8.4 と postgresql-client-8.4 を purge しました。</p>

<h3>scponly</h3>

<p>scponly を設定しているユーザーがいたのですが、 wheezy で既にパッケージがなくなっていたことに気づいたので、
「scponly wheezy」で検索して出てきた
<a href="http://chxor.chxo.com/post/74647790171/how-to-restrict-linux-users-to-only-sftp-without">http://chxor.chxo.com/post/74647790171/how-to-restrict-linux-users-to-only-sftp-without</a>
を参考にして設定を移行しました。</p>

<p>まず <code>/home/hoge/</code> 以下の bin dev etc usr を削除しました。</p>

<p>次に <code>sftponly</code> グループを追加して、そのグループに該当ユーザーを追加しました。</p>

<pre><code>% sudo usermod -a -G sftponly hoge
usermod: グループ 'sftponly' は存在しません
zsh: exit 6     sudo usermod -a -G sftponly hoge
% sudo addgroup sftponly
グループ `sftponly' (グループ ID 1001) を追加しています...
完了。
% sudo usermod -a -G sftponly hoge
</code></pre>

<p><code>/etc/ssh/sshd_config</code> の設定を変更しました。
関連するところだけ抜き出すと以下のような変更をしました。</p>

<pre><code>-Subsystem sftp /usr/lib/openssh/sftp-server
+#Subsystem sftp /usr/lib/openssh/sftp-server
+Subsystem sftp internal-sftp

+# sftponly users, chrooted
+Match group sftponly
+ChrootDirectory /home/%u
+AllowTcpForwarding no
+X11Forwarding no
+ForceCommand internal-sftp
</code></pre>

<p><code>sudo service sshd restart</code> で設定を反映して、 sftp コマンドで接続して put や rm ができるのを確認しました。</p>

<h3>その他古いパッケージの削除</h3>

<p><code>sudo aptitude purge '~i!~Odebian'</code> で古いパッケージを削除しました。</p>

<pre><code>%  sudo aptitude purge '~i!~Odebian'
以下のパッケージが削除されます:
  doc-linux-text{p} libbind9-60{p} libboost-iostreams1.42.0{p} libdb4.6{p} libdb4.7{p}
  libdb4.8{p} libdns69{p} libevent-1.4-2{p} libisc62{p} libisccc60{p} libisccfg62{p}
  libkadm5clnt-mit7{p} libkadm5srv-mit7{p} libkdb5-4{p} liblwres60{p} liblzma2{p}
  libssl0.9.8{p} libtokyocabinet8{p}
更新: 0 個、新規インストール: 0 個、削除: 18 個、保留: 0 個。
0  バイトのアーカイブを取得する必要があります。展開後に 20.4 M バイトのディスク領域が解放されます。
先に進みますか? [Y/n/?]
</code></pre>

<p><code>/etc/init.d</code> に余計なファイルが残っていると問題がおきるかもしれないので <code>sudo aptitude purge '~c'</code> で設定だけ残っているパッケージも purge しておきました。</p>

<pre><code>%  sudo aptitude purge '~c'
[sudo] password for adminuser:
以下のパッケージが削除されます:
  defoma{p} libept1{p} libexiv2-9{p} libgmp3c2{p} libgs8{p} libgsf-1-114{p} libgtk2.0-0{p}
  libgtk2.0-common{p} libmagickcore3{p} libmagickwand3{p} libmysqlclient16{p} libnl1{p}
  libopenipmi0{p} libpango1.0-common{p} libprotobuf6{p} libserf-0-0{p} libxcb-render-util0{p}
  libxcomposite1{p} libxcursor1{p} libxdamage1{p} libxfixes3{p} libxi6{p} libxinerama1{p}
  libxrandr2{p} mysql-server-5.1{p} odbcinst{p} odbcinst1debian2{p} php5-suhosin{p}
  update-inetd{p} x-ttcidfont-conf{p}
更新: 0 個、新規インストール: 0 個、削除: 30 個、保留: 0 個。
0  バイトのアーカイブを取得する必要があります。展開後に 0  バイトのディスク領域が新たに消費されます
。
先に進みますか? [Y/n/?]
</code></pre>

<h3>sudo find /etc -name &lsquo;<em>.dpkg-</em>&rsquo;</h3>

<p>移行時の設定マージ作業が途中で残っていたファイルがあったので、 <code>sudo find /etc -name '*.dpkg-*'</code> で探して必要に応じて設定をマージして <code>*.dpkg-old</code> や <code>*.dpkg-dist</code> は削除しておきました。</p>

<h3>プロセス一覧の確認</h3>

<p>pstree などでプロセス一覧をみて、アップグレード時に問題が起きそうなコマンドに目星をつけておきました。
一番の大物は apache 2.2 系から apache 2.4 系だと思いました。
slapd は 2.4.31-2+deb7u1 から 2.4.40+dfsg-1+deb8u2 でバージョン番号の変更も少なく互換性も高そうなので、問題はおきなさそうだと思いました。(実際大丈夫でした。)</p>

<h2>apt-line の変更</h2>

<p>コメントアウトされていない部分の wheezy を jessie に置き換えました。</p>

<pre><code>--- a/apt/sources.list
+++ b/apt/sources.list
@@ -4,18 +4,18 @@

 #deb cdrom:[Debian GNU/Linux 6.0.1a _Squeeze_ - Official amd64 NETINST Binary-1 20110320-15:00]/ wheezy main

-deb http://ftp.jp.debian.org/debian wheezy main non-free contrib
-deb-src http://ftp.jp.debian.org/debian wheezy main non-free contrib
+deb http://ftp.jp.debian.org/debian jessie main non-free contrib
+deb-src http://ftp.jp.debian.org/debian jessie main non-free contrib

-deb http://security.debian.org/ wheezy/updates main contrib non-free
-deb-src http://security.debian.org/ wheezy/updates main contrib non-free
+deb http://security.debian.org/ jessie/updates main contrib non-free
+deb-src http://security.debian.org/ jessie/updates main contrib non-free

 # wheezy-updates, previously known as 'volatile'
-deb http://ftp.jp.debian.org/debian wheezy-updates main contrib non-free
-deb-src http://ftp.jp.debian.org/debian wheezy-updates main contrib non-free
+deb http://ftp.jp.debian.org/debian jessie-updates main contrib non-free
+deb-src http://ftp.jp.debian.org/debian jessie-updates main contrib non-free

-deb http://ftp.jp.debian.org/debian wheezy-backports main contrib non-free
-deb-src http://ftp.jp.debian.org/debian wheezy-backports main contrib non-free
+deb http://ftp.jp.debian.org/debian jessie-backports main contrib non-free
+deb-src http://ftp.jp.debian.org/debian jessie-backports main contrib non-free

 #deb http://ftp.jp.debian.org/debian wheezy-lts main non-free contrib
 #deb-src http://ftp.jp.debian.org/debian wheezy-lts main non-free contrib
</code></pre>

<h2>upgrade, dist-upgrade</h2>

<p><a href="https://www.debian.org/releases/jessie/amd64/release-notes/ch-upgrading.ja.html#upgradingpackages" title="4.4. パッケージのアップグレード">4.4. パッケージのアップグレード</a> に以前は <code>aptitude</code> が推奨されていたこともあったが、今は <code>apt-get</code> がおすすめというようなことが書いてあったので、 <code>apt-get</code> で upgrade しました。</p>

<p>postgresql はまた /usr/share/doc/postgresql-common/README.Debian.gz をみて <code>pg_upgradecluster</code> が必要だと思いました。</p>

<p><code>Configuring libc6:amd64</code> のときに apache2 の restart に失敗しましたが、認証周りなどの設定の書き方が変わった影響だろうと思って、後で直せばいいということで気にせず進みました。</p>

<p>その他は特に問題なく dist-upgrade 自体は終わりました。</p>

<h2>apache2 の設定調整</h2>

<p><code>/etc/apache2/sites-available/*</code>, <code>/etc/apache2/sites-enabled/*</code> の <code>.conf</code> 化などは upgrade 前に作業しておけば停止時間が短くて済ませられたのに、と後から気付きました。</p>

<h3>認証・認可設定の変更</h3>

<p><code>/</code> はアクセス不可で <code>DocumentRoot</code> を個別にアクセス許可していたので、</p>

<pre><code>Order allow,deny
Allow from all
</code></pre>

<p>を</p>

<pre><code>Require all granted
</code></pre>

<p>に変更して回りました。</p>

<h3>mod_python</h3>

<p>apache の error.log を見ると</p>

<pre><code>The mod_python module can not be used on conjunction with mod_wsgi 4.0+. Remove the mod_python module from the Apache configuration.
</code></pre>

<p>というエラーが出ていたので、 <code>libapache2-mod-python</code> を purge したら apache2 が起動しました。
しかし後で <code>trac</code> で使っていたのに気付いたので、入れ直して代わりに <code>libapache2-mod-wsgi</code> の方を purge しました。</p>

<h3>.conf 化</h3>

<p>設定ファイルに <code>.conf</code> が必須化されていたので、 <code>site-available</code> のファイルを <code>hoge.example.com</code> から <code>hoge.example.com.conf</code> のようにに改名して <code>a2ensite</code> しなおしました。</p>

<p><code>conf.d</code> も available と enabled に仕組みが変わっていたので、
<code>/etc/apache2/conf.d/passenger.conf</code> も <code>conf-available</code> に移動して <code>a2enconf</code> しました。</p>

<h3>passenger-install-apache2-module</h3>

<p><code>sudo apache2ctl configtest</code> で起動しない原因を調べてみると、エラーメッセージを記録し忘れたのですが、<code>passenger</code> がリンクエラーで起動しないということになっていたので、 <code>passenger-install-apache2-module</code> を実行し直しました。</p>

<p>初回は開発用パッケージが足りないということで出てきたメッセージに従い <code>sudo apt-get install apache2-threaded-dev</code> でインストールして再実行して解決しました。 <code>apache2-dev</code> パッケージが入りました。</p>

<p>wheezy のときは <code>apache2-prefork-dev</code> パッケージを入れていたのですが、自動移行はされなかったようです。</p>

<h3>SSL 関連</h3>

<p><code>SSLCertificateChainFile</code> を指定していたところがあったので、 <code>SSLCertificateFile</code> に結合した証明書を指定するように移行しました。</p>

<h3>NameVirtualHost</h3>

<p><code>NameVirtualHost</code> を指定していたところを削除しました。</p>

<h2>trac</h2>

<p>trac のプロジェクトごとのページを開くと</p>

<pre><code>Error

TracError: The Trac Environment needs to be upgraded.

Run "trac-admin /srv/trac/fprog.org/testproject upgrade"
</code></pre>

<p>というメッセージが出ていたので、その通りに実行しました。</p>

<pre><code>% sudo trac-admin /srv/trac/fprog.org/testproject upgrade
Warning: Detected setuptools version 5.5.1. The environment variable 'PKG_RESOURCES_CACHE_ZIP_MANIFE
STS' must be set to avoid significant performance degradation.
アップグレードが終了しました。

次のコマンドを実行すると Trac のドキュメントをアップグレードできます:

  trac-admin /srv/trac/fprog.org/testproject wiki upgrade
</code></pre>

<p>wiki upgrade も促されたので、実行しました。</p>

<p>すると <a href="http://www.fprog.org/projects/testproject">http://www.fprog.org/projects/testproject</a> が</p>

<pre><code>設定エラー
None という名前の IRequestFilter インターフェイスの実装を見つけられません。コンポーネントが有効になっているかチェックするか、trac.ini の [trac] request_filters オプションを更新してください。
</code></pre>

<p>に変わったので、 <code>/srv/trac/fprog.org/testproject/conf/trac.ini</code> の</p>

<pre><code>request_filters = None
</code></pre>

<p>を</p>

<pre><code>request_filters =
</code></pre>

<p>に変更しました。
キーワードが一般的すぎて検索しきれなかったので、バグ報告などはしていません。</p>

<p><a href="http://www.fprog.org/projects">http://www.fprog.org/projects</a> の Available Projects を見て、他のプロジェクトも同様に upgrade と <code>request_filters</code> の修正をしました。</p>

<h2>nadoka さん</h2>

<p>iconv を使っていたところを kconv を使うように<a href="https://github.com/nadoka/nadoka/commit/328e01a5a2ae731ddc09f435dc4089eead3ba4ed">変更</a>しました。</p>

<h2>w3ml</h2>

<p>apache のエラーログに</p>

<pre><code>AH01215: ./w3ml:8:in `load'
AH01215: : /home/w3ml/etc/w3ml.conf:10: invalid multibyte char (UTF-8) (SyntaxError)
AH01215: /home/w3ml/etc/w3ml.conf:10: invalid multibyte char (UTF-8)
AH01215: \tfrom ./w3ml:8:in `&lt;main&gt;'
End of script output before headers: w3ml.cgi
</code></pre>

<p>と出ていたので、 <code>/home/w3ml/etc/w3ml.conf</code> の先頭に</p>

<pre><code># -*- coding: euc-jp -*-
</code></pre>

<p>を追加しました。
これで表示は問題なく見えるようになりましたが、メールの取り込みなどがちゃんと動くかどうかはまだ様子見です。</p>

<h2>tdiary</h2>

<p>ホスティングしている tdiary を確認してみると</p>

<pre><code>no such file to load -- redcarpet.so (LoadError)
/usr/lib/ruby/vendor_ruby/redcarpet.rb:1:in `require'
</code></pre>

<p>とうエラーが出ていて、 <code>dpkg -L ruby-redcarpet</code> を確認してみると <code>redcarpet.so</code> は 2.1 用しかなかったので、
wheezy にあげたときに <code>public_html/diary/index.rb</code> を <code>#!/usr/bin/ruby1.8</code> に変更していたのを
<code>#!/usr/bin/ruby</code> に変更しました。</p>

<p>すると次は <code>500 Internal Server Error</code> とだけ出るようになったので、 apache のエラーログを確認してみると</p>

<pre><code>AH01215: /usr/lib/ruby/2.1.0/cgi/util.rb:37:in `gsub': invalid byte sequence in UTF-8 (ArgumentError)
AH01215: \tfrom /usr/lib/ruby/2.1.0/cgi/util.rb:37:in `escapeHTML'
AH01215: \tfrom /usr/share/tdiary/index.rb:50:in `rescue in &lt;top (required)&gt;'
AH01215: \tfrom /usr/share/tdiary/index.rb:16:in `&lt;top (required)&gt;'
AH01215: \tfrom /usr/lib/ruby/2.1.0/rubygems/core_ext/kernel_require.rb:55:in `require'
AH01215: \tfrom /usr/lib/ruby/2.1.0/rubygems/core_ext/kernel_require.rb:55:in `require'
AH01215: \tfrom index.rb:2:in `&lt;main&gt;'
</code></pre>

<p>というエラーが出ていました。
そこで <code>/usr/share/tdiary/index.rb</code> を <code>coding: utf-8</code> から <code>coding: ascii-8bit</code> に変更したところ、
<code>public_html/diary/filter/antirefspam.rb:240: invalid multibyte char (UTF-8)</code> というエラーが確認できたので、
コメントが euc-jp で書かれていたのが確認できたので <code>antirefspam.rb</code> に <code>coding: euc-jp</code> を追加しました。
<code>public_html/diary/filter/default.rb</code> でも同様のエラーが出たので <code>coding: ascii-8bit</code> を追加したところ、
正常に表示できるようになりました。</p>

<p>最初の <code>500 Internal Server Error</code> については <a href="https://github.com/tdiary/tdiary-core/issues/555">tdiary-core に報告</a>したところ、<a href="https://github.com/tdiary/tdiary-core/commit/59557302e2dfd0cfa86b04b5d05e74dfe917900e">直った</a> ようです。</p>

<p>修正コミットでは update.rb も同様の修正がされていたので、 <code>/usr/share/tdiary/update.rb</code> も同様に <code>coding: ascii-8bit</code> にしておきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[letsencrypt をメールサーバーにも導入して自動化するまで]]></title>
    <link href="http://blog.n-z.jp/blog/2016-03-06-letsencrypt.html"/>
    <updated>2016-03-06T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/letsencrypt</id>
    <content type="html"><![CDATA[<p>Ubuntu 12.04.5 LTS で letsencrypt 0.4.2 を使って apache2 と postfix と dovecot の証明書の自動更新を設定してみました。</p>

<!--more-->


<h2>対象環境</h2>

<ul>
<li>Ubuntu 12.04.5 LTS (amd64)</li>
<li>letsencrypt 0.4.2</li>
<li>apache2-mpm-prefork 2.2.22-1ubuntu1.10</li>
<li>postfix 2.9.6-1~12.04.3</li>
<li>dovecot-imapd 1:2.0.19-0ubuntu2.2</li>
<li>python 2.7.3-0ubuntu2.2</li>
<li>git 1:1.7.9.5-1ubuntu0.2</li>
</ul>


<h2>事前知識</h2>

<p><a href="https://letsencrypt.jp/">https://letsencrypt.jp/</a> や <a href="http://qiita.com/tags/letsencrypt">Qiita の記事</a> などを見て事前に予備知識を得た上で、
<a href="https://letsencrypt.org/getting-started/" title="Getting Started">Getting Started</a> などで最新情報を確認しました。</p>

<p><a href="http://qiita.com/hidekuro/items/482520f220a305dc147b" title="Let's Encrypt 証明書の自動発行とELB自動登録を行ったログ">Let&rsquo;s Encrypt 証明書の自動発行とELB自動登録を行ったログ</a>に書いてある</p>

<ul>
<li>letsencrypt-auto は virtualenv 上で動き、実行ユーザーの ~/.local に Python 環境を作ります。</li>
<li>Let&rsquo;s Encrypt は、 5 renew / 7 days の制限があります。</li>
</ul>


<p>の 2 点は事前に知っておくと良いと思います。</p>

<h2>初期設定 (インストール)</h2>

<p>まず
<a href="https://letsencrypt.org/getting-started/" title="Getting Started">Getting Started</a>
に従って初期設定をしました。</p>

<ul>
<li>一般ユーザーのホームディレクトリで <code>git clone https://github.com/letsencrypt/letsencrypt</code> で最新版をとってきます。</li>
<li><code>cd letsencrypt</code> で clone したディレクトリに入ります。</li>
<li><code>letsencrypt-auto</code> スクリプトの中をある程度確認しておきます。

<ul>
<li>ここで precise (Ubuntu 12.04 LTS) や wheezy (Debian 7) だと backports の apt-line が設定されていない場合は自動で追加されるというのを知りました。 (apache プラグインが libaugeas0 の 1.0 以上に依存しているため)</li>
</ul>
</li>
<li><code>./letsencrypt-auto --help</code> で依存関係の自動インストールが走ります。

<ul>
<li>sudo のパスワードがきかれるので入力します。</li>
<li>apt で libaugeas0 などが勝手に入ります。</li>
<li>その後、<code>Installing Python packages...</code> でしばらく時間がかかります。 (ここで <code>~/.local/share/letsencrypt</code> 以下にファイルがインストールされるので、何か不具合があった時には <code>~/.local</code> 以下を消して試すと良いらしいです。)</li>
</ul>
</li>
</ul>


<p>この時点では <code>/etc</code> 以下に変化はありませんでした。 (backports の apt-line は既に追加済みだったため)</p>

<h2>ヘルプ表示</h2>

<p><code>./letsencrypt-auto --help</code> や <code>./letsencrypt-auto --help all</code> でヘルプが確認できます。
ヘルプの表示だけでも <code>sudo</code> を経由するようです。</p>

<h2>テスト実行</h2>

<p>1 週間に 5 回までの制限にひっかからないように、最初は staging サーバーで試そうと思ったため、 <code>--test-cert</code> を付けて
<code>./letsencrypt-auto certonly --test-cert --webroot -w /srv/www/hoge.n-z.jp/htdocs -d hoge.n-z.jp</code>
のように実行しました。</p>

<p>初回実行のため、メールアドレスと ToS の Agree が必要でした。</p>

<pre><code> ┌──────────────────────────────────────────────────────────────────────┐
 │ Enter email address (used for urgent notices and lost key recovery)  │
 │ ┌──────────────────────────────────────────────────────────────────┐ │
 │ │                                                                  │ │
 │ └──────────────────────────────────────────────────────────────────┘ │
 ├──────────────────────────────────────────────────────────────────────┤
 │                     &lt; 了解 &gt;           &lt; 取消 &gt;                      │
 └──────────────────────────────────────────────────────────────────────┘
</code></pre>

<p>でメールアドレスを入力しました。</p>

<pre><code> ┌──────────────────────────────────────────────────────────────────────┐
 │ Please read the Terms of Service at                                  │
 │ https://letsencrypt.org/documents/LE-SA-v1.0.1-July-27-2015.pdf. You │
 │ must agree in order to register with the ACME server at              │
 │ https://acme-v01.api.letsencrypt.org/directory                       │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 ├──────────────────────────────────────────────────────────────────────┤
 │                     &lt;Agree &gt;           &lt;Cancel&gt;                      │
 └──────────────────────────────────────────────────────────────────────┘
</code></pre>

<p>で表示された URL の PDF の内容を確認して Agree しました。</p>

<p>成功すると最後に以下のような注意事項が表示されました。
メールアドレスや ToS への同意は <code>/etc/letsencrypt/accounts</code> 以下にアカウントの秘密鍵などと一緒に保存されるようです。</p>

<pre><code>IMPORTANT NOTES:
 - If you lose your account credentials, you can recover through
   e-mails sent to mail@example.jp.
 - Congratulations! Your certificate and chain have been saved at
   /etc/letsencrypt/live/hoge.n-z.jp/fullchain.pem. Your cert will
   expire on 2016-06-04. To obtain a new version of the certificate in
   the future, simply run Let's Encrypt again.
 - Your account credentials have been saved in your Let's Encrypt
   configuration directory at /etc/letsencrypt. You should make a
   secure backup of this folder now. This configuration directory will
   also contain certificates and private keys obtained by Let's
   Encrypt so making regular backups of this folder is ideal.
 - If you like Let's Encrypt, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le
</code></pre>

<h2>Apache 2.2 への設定反映</h2>

<p>Apache 2.4.8 未満のため、 <code>fullchain.pem</code> ではなく <code>chain.pem</code> と <code>cert.pem</code> で設定します。</p>

<pre><code>SSLCertificateKeyFile /etc/letsencrypt/live/hoge.n-z.jp/privkey.pem
SSLCertificateChainFile /etc/letsencrypt/live/hoge.n-z.jp/chain.pem
SSLCertificateFile /etc/letsencrypt/live/hoge.n-z.jp/cert.pem
</code></pre>

<p><code>sudo apache2ctl graceful</code> で反映し、 <code>https://hoge.n-z.jp</code> を開いて信頼していないルート証明書の問題による証明書エラーが出るのを確認しました。</p>

<h2>本番実行</h2>

<p><code>--test-cert</code> を外して、
<code>./letsencrypt-auto certonly --webroot -w /srv/www/hoge.n-z.jp/htdocs -d hoge.n-z.jp</code>
のように実行しました。</p>

<p>staging サーバー (<code>acme-staging.api.letsencrypt.org</code>) ではなく、本番サーバー (<code>acme-v01.api.letsencrypt.org</code>) への接続になるため、メールアドレスの入力と ToS への同意が再度必要になりました。</p>

<p>再作成扱いのためか、こんな確認ダイアログが出たので、 2 を選択して OK を押しました。</p>

<pre><code>┌──────────────────────────────────────────────────────────────────────┐
│ You have an existing certificate that contains exactly the same      │
│ domains you requested and isn't close to expiry.                     │
│ (ref: /etc/letsencrypt/renewal/hoge.n-z.jp.conf)                     │
│                                                                      │
│ What would you like to do?                                           │
│ ┌──────────────────────────────────────────────────────────────────┐ │
│ │        1  Keep the existing certificate for now                  │ │
│ │        2  Renew &amp; replace the cert (limit ~5 per 7 days)         │ │
│ │                                                                  │ │
│ │                                                                  │ │
│ │                                                                  │ │
│ │                                                                  │ │
│ │                                                                  │ │
│ │                                                                  │ │
│ │                                                                  │ │
│ └──────────────────────────────────────────────────────────────────┘ │
├──────────────────────────────────────────────────────────────────────┤
│                     &lt;  OK  &gt;           &lt;Cancel&gt;                      │
└──────────────────────────────────────────────────────────────────────┘
</code></pre>

<p><code>sudo apache2ctl graceful</code> で反映し、 <code>https://hoge.n-z.jp</code> を開いて証明書エラーが出ないのを確認しました。</p>

<h2>renew</h2>

<p>letsencrypt 0.4 で <code>letsencrypt renew</code> というサブコマンドが増えていて、有効期限が 30 日未満の証明書の更新が簡単にできるようになっています。</p>

<p>これも最初は <code>--dry-run</code> を付けて staging サーバーで試してみました。
cron で実行する時のことを考えて、最初から root 権限付きになるように <code>sudo</code> 付きで実行してみました。
すると以下のようになって <code>/etc/letsencrypt/csr</code> と <code>/etc/letsencrypt/keys</code> 以下にはファイルが作成されてしまいました。
<code>/etc</code> を汚したくない場合は <code>--dry-run</code> はあまり実行しない方が良さそうだと思いました。</p>

<pre><code>% sudo /home/hoge/letsencrypt-auto renew --dry-run
Checking for new version...
Requesting root privileges to run letsencrypt...
   /home/hoge/.local/share/letsencrypt/bin/letsencrypt renew --dry-run
Processing /etc/letsencrypt/renewal/hoge.n-z.jp.conf
** DRY RUN: simulating 'letsencrypt renew' close to cert expiry
**          (The test certificates below have not been saved.)

Congratulations, all renewals succeeded. The following certs have been renewed:
  /etc/letsencrypt/live/hoge.n-z.jp/fullchain.pem (success)
** DRY RUN: simulating 'letsencrypt renew' close to cert expiry
**          (The test certificates above have not been saved.)
</code></pre>

<p>普通に実行したら skipped になって何も変化はありませんでした。</p>

<pre><code>% sudo /home/hoge/letsencrypt/letsencrypt-auto renew
Checking for new version...
Requesting root privileges to run letsencrypt...
   /home/hoge/.local/share/letsencrypt/bin/letsencrypt renew
Processing /etc/letsencrypt/renewal/hoge.n-z.jp.conf

The following certs are not due for renewal yet:
  /etc/letsencrypt/live/hoge.n-z.jp/fullchain.pem (skipped)
No renewals were attempted.
</code></pre>

<h2>メールサーバー用証明書作成</h2>

<p>まず、ドメイン認証で必要になるため、 <code>mx6.n-z.jp</code> にも apache2 の VirtualHost 設定を追加しました。
<code>https</code> は必要ないため、 <code>http</code> だけの設定をしました。</p>

<p>今回は 2 度目なので、いきなり <code>--test-cert</code> なしで実行しました。</p>

<pre><code>% /home/hoge/letsencrypt/letsencrypt-auto certonly --webroot -w /srv/www/mx6.n-z.jp/htdocs -d mx6.n-z.jp
Checking for new version...
Requesting root privileges to run letsencrypt...
   sudo /home/hoge/.local/share/letsencrypt/bin/letsencrypt certonly --webroot -w /srv/www/mx6.n-z.jp/htdocs -d mx6.n-z.jp

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at
   /etc/letsencrypt/live/mx6.n-z.jp/fullchain.pem. Your cert will
   expire on 2016-06-04. To obtain a new version of the certificate in
   the future, simply run Let's Encrypt again.
 - If you like Let's Encrypt, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le
</code></pre>

<h2>postfix の設定変更</h2>

<p><code>/etc/postfix/main.cf</code> で以下の設定をしました。</p>

<pre><code>smtpd_tls_cert_file = /etc/letsencrypt/live/mx6.n-z.jp/fullchain.pem
smtpd_tls_key_file = /etc/letsencrypt/live/mx6.n-z.jp/privkey.pem
smtpd_tls_mandatory_protocols = !SSLv2,!SSLv3
</code></pre>

<p>そして <code>sudo service postfix reload</code> で反映しました。</p>

<p>postfix の reload は <code>apache2ctl graceful</code> などと違ってメッセージが出てくるのが後の自動化の時に邪魔だったので標準出力に捨てるようにしました (後述)。</p>

<pre><code>% sudo service postfix reload
 * Reloading Postfix configuration...
   ...done.
</code></pre>

<h2>dovecot の設定変更</h2>

<p><code>/etc/dovecot/local.conf</code> で以下の設定をしました。</p>

<pre><code>ssl_cert = &lt;/etc/letsencrypt/live/mx6.n-z.jp/fullchain.pem
ssl_key = &lt;/etc/letsencrypt/live/mx6.n-z.jp/privkey.pem
</code></pre>

<p><code>sudo service dovecot reload</code> で反映しました。</p>

<h2>自動更新</h2>

<p><a href="https://letsencrypt.org/getting-started/#writing-your-own-renewal-script" title="Writing your own renewal script">Writing your own renewal script</a> を参考にして、以下のように <code>/etc/cron.daily/letsencrypt</code> を作成して毎日 <code>letsencrypt-auto renew</code> が実行されるようにしました。
postfix と dovecot の reload を追加しています。
前述したように、 postfix の reload は標準出力を捨てて、余計なメールが飛ばないようにしています。</p>

<pre><code>% sudoedit /etc/cron.daily/letsencrypt
% cat /etc/cron.daily/letsencrypt
#!/bin/sh
if ! /home/hoge/letsencrypt/letsencrypt-auto renew &gt; /var/log/letsencrypt/renew.log 2&gt;&amp;1 ; then
    echo Automated renewal failed:
    cat /var/log/letsencrypt/renew.log
    exit 1
fi
apachectl graceful
service postfix reload &gt;/dev/null
service dovecot reload
% sudo chmod +x /etc/cron.daily/letsencrypt
</code></pre>

<p>作成したファイルの動作確認をしておきます。</p>

<pre><code>% sudo /etc/cron.daily/letsencrypt
% sudo cat /var/log/letsencrypt/renew.log
Checking for new version...
Requesting root privileges to run letsencrypt...
   /home/hoge/.local/share/letsencrypt/bin/letsencrypt renew
Processing /etc/letsencrypt/renewal/mx6.n-z.jp.conf
Processing /etc/letsencrypt/renewal/hoge.n-z.jp.conf

The following certs are not due for renewal yet:
  /etc/letsencrypt/live/mx6.n-z.jp/fullchain.pem (skipped)
  /etc/letsencrypt/live/hoge.n-z.jp/fullchain.pem (skipped)
No renewals were attempted.
%
</code></pre>

<h2>まとめ</h2>

<p>letsencrypt の導入から証明書の自動更新の設定までしました。</p>

<p>簡単に導入できて自動化もでき、しかも無料なので、まだベータ版であるという点が問題にならないところでは、積極的に使っていけば良さそうだと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第71回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-03-05-rubykansai71.html"/>
    <updated>2016-03-05T12:58:44+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai71</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/37341" title="第71回 Ruby関西 勉強会">第71回 Ruby関西 勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>オープニング</h2>

<ul>
<li>開場が 10 分前にしかできなくて準備の時間の都合で受付は休憩の時に</li>
<li>会場説明</li>
<li>yasulab さんの資料作成の都合で順番を入れ替えて開始</li>
</ul>


<h2>中級者向け: 楽速開発 on Rails by @ogomr (前半)</h2>

<ul>
<li><a href="https://speakerdeck.com/ogom/enjoy-agile-development">https://speakerdeck.com/ogom/enjoy-agile-development</a></li>
<li>前回のつじたさんのどんな gem を使っていますかという質問に対するアンサーセッションのような幹事でどんな gem を使って開発しているかという紹介</li>
<li>デミングサイクル</li>
<li>データベースのスキーマでデミングサイクル</li>
<li>rspec や spring や guard などの 8 個の gem</li>
<li>ridgepole gem というのは知らなかった</li>
<li>rails-erd gem も使っているらしい</li>
<li>guard shell で <code>db/migrate/*.rb</code> が変わったら処理をしている</li>
<li>seed 関係の gem 3 個 (<code>seedbank</code>, <code>seed_dump</code>, <code>seed-fu</code>)</li>
<li>seed 関係の guard shell 設定</li>
<li><code>seed_dump</code> gem は SQL ではなく rb ファイルに dump してくれる</li>
<li>rails console で試せるし seed ファイルにも再利用できる</li>
<li>guard を使っている人をきいてみたら会場には少なかった</li>
<li>rails で開発したことがある人は多かった</li>
<li><code>factory_girl</code> は 1/3 程度</li>
<li>デモの前に休憩</li>
</ul>


<h2>休憩</h2>

<ul>
<li>休憩の間に受付</li>
</ul>


<h2>中級者向け: 楽速開発 on Rails by @ogomr (後半)</h2>

<ul>
<li>質問</li>
<li>guard とは grunt のようなものなのかという質問</li>
<li>同じようなもの。時系列的には guard の方が古い</li>
<li>guard の実行時間は 1,2 秒ぐらい</li>
<li>デモ</li>
<li>普段はサブディスプレイを使っている</li>
<li><code>rails new</code> するところからライブコーディングによるデモ</li>
<li><code>rails-erd</code> を使っている人は少しいた</li>
<li><code>.erdconfig</code> ファイルで設定できる</li>
<li>Guardfile の書き換え</li>
<li>spring を使っているので bin/rspec を使うように書き換え</li>
<li>その他 rspec 関係の追加とか</li>
<li>factories も監視して rspec を動かしている</li>
<li>generators で不要なものを false に設定</li>
<li>scaffold で生成</li>
<li>pdf の変化で open コマンドを呼んでいるのでサブディスプレイに最新の状態が自動表示される</li>
<li>seed の guard shell 設定</li>
<li>seedbank を使って seed の設定</li>
<li>データベースのカラム追加のデモ</li>
</ul>


<h2>休憩</h2>

<ul>
<li>14:30-14:40</li>
<li>休憩時間中に yasulab さんから質問</li>
<li>rails で開発したことのない人もいる</li>
<li>ruby を使ったことない人はいないみたいだった</li>
<li>k-of.jp などのイベントなどの時にも配っている豆本をアナウンスしたら人気だった</li>
</ul>


<h2>初心者向け: Railsチュートリアルの変遷からみる今ドキのRails勉強法 by @yasulab</h2>

<ul>
<li>第2版から第3版の変更点を解説</li>
<li>Rails 活用事例と学習曲線</li>
<li>第2版 vs. 第3版</li>
<li>第3版では画像アップロードが増えている</li>
<li>第2版でよく見かけた例</li>
<li>セットアップ (第1章) で挫折</li>
<li>テストがうまく動かなくて挫折</li>
<li>近くにいないと問題解決しづらい</li>
<li>第2版から第3版での改善点</li>
<li>Cloud9 を使ってブラウザで開発 (OS非依存)</li>
<li>ログイン機構がモダンになっている</li>
<li>RSpec から minitest になって学習コストが低くなっている</li>
<li>ActionMailer を使ったメール送信を解説</li>
<li>マイクロポストに画像投稿機能が追加</li>
<li>他、独自バリデーションやメタプロの導入など</li>
<li>今どきの Rails 学習法</li>
<li><ol>
<li>学習の優先度付け</li>
</ol>
</li>
<li>第２版によくあった批判</li>
<li>テスト技術が学びたいわけじゃない</li>
<li>環境構築を学びたいわけじゃない</li>
<li><ol>
<li>まずは体験、あとで探求</li>
</ol>
</li>
<li><ol>
<li>クラウド IDE を最大限活用する</li>
</ol>
</li>
<li>第2版と第3版の違い</li>
<li>第1章における離脱率の激減</li>
<li>解説セミナーの平均点数上昇</li>
<li>ちょっと未来の話</li>
<li>「まずは」の裾野を広げて「あとで」の探求先の拡大</li>
<li>Learn Enough シリーズ (前提知識を 0 に)</li>
<li>everyday Rails</li>
<li>Rails ガイド</li>
</ul>


<h2>休憩</h2>

<ul>
<li>15:21-15:30</li>
<li>k-of.jp や書籍の紹介</li>
</ul>


<h2>Ruby 初級者向けレッスン 57回 ─── テスト駆動開発 by @higaki</h2>

<ul>
<li><a href="http://slide.rabbit-shocker.org/authors/kou/rubykaigi-2015/" title="The history of testing framework in Ruby">The history of testing framework in Ruby</a></li>
<li><a href="http://magazine.rubyist.net/?0021-Rspec">http://magazine.rubyist.net/?0021-Rspec</a></li>
<li><a href="http://magazine.rubyist.net/?0042-FromCucumberToTurnip">http://magazine.rubyist.net/?0042-FromCucumberToTurnip</a></li>
<li>レッスンでは test-unit gem を使用</li>
<li><a href="http://goyoki.hatenablog.com/entry/20120301/1330608789" title="xUnit Test PatternsのTest Doubleパターン(Mock、Stub、Fake、Dummy等の定義)">xUnit Test PatternsのTest Doubleパターン(Mock、Stub、Fake、Dummy等の定義)</a></li>
<li>kagemusha gem</li>
<li>mocha gem</li>
<li>rr gem</li>
<li>レッスンには出てこなかったが、参考として、他に時刻専用の gem として timecop gem とか delorean gem とかもある</li>
<li><a href="https://github.com/higaki/learn_ruby_kansai_71">https://github.com/higaki/learn_ruby_kansai_71</a></li>
<li>参考: <a href="http://goyoki.hatenablog.com/entry/20110202/1296663870" title="XP祭り関西にてユニットテストの保守に関する発表">XP祭り関西にてユニットテストの保守に関する発表</a></li>
</ul>


<h2>クロージング</h2>

<ul>
<li><a href="https://ja-jp.facebook.com/RubyKansai">https://ja-jp.facebook.com/RubyKansai</a></li>
<li><a href="https://ruby-maizuru.doorkeeper.jp/" title="Ruby舞鶴">Ruby舞鶴</a></li>
<li><a href="https://dddrb.doorkeeper.jp/" title="DDD.rb">DDD.rb</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KOF勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-02-27-kof.html"/>
    <updated>2016-02-27T13:17:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kof</id>
    <content type="html"><![CDATA[<p><a href="https://atnd.org/events/74121" title="KOF勉強会(今回のテーマ：サーバー) #KOF勉強会 #さくらクラブ #クラウドサーバー管理者若葉の会">KOF勉強会(今回のテーマ：サーバー) #KOF勉強会 #さくらクラブ #クラウドサーバー管理者若葉の会</a>
に参加しました。</p>

<p>LILO のサーバー管理の参考になるかと思って参加してみました。</p>

<!--more-->


<p>以下、今回のメモです。</p>

<h2>会場案内、全体説明</h2>

<ul>
<li><a href="https://k-of.jp/2015/">https://k-of.jp/2015/</a></li>
<li>ハッシュタグは<a href="https://twitter.com/search?f=tweets&amp;vertical=default&amp;q=%23KOF%E5%8B%89%E5%BC%B7%E4%BC%9A&amp;src=typd">#KOF勉強会</a></li>
<li>会場無線 LAN がありました。</li>
</ul>


<h2>KOFとは</h2>

<ul>
<li>＜概要＞KOFって何？、どういうモチベーションでやっているの？</li>
<li>最初は 2002 年 <a href="https://k-of.jp/2002/">https://k-of.jp/2002/</a> (euc-jp でなぜか文字化けしている)</li>
<li>KANSAI OPEN SOURCE + FREEWARE 2002 という名前だった</li>
<li>FREEWARE という名前の部分に文句がついたので名前が変わった</li>
<li>pure な open source 対象だけではなく広く IT コミュニティの集まりの場に</li>
<li>古い話がいろいろ</li>
</ul>


<h2>kofサーバの舞台裏とセキュリティの話</h2>

<ul>
<li>さくらの VPS の 2G のプラン</li>
<li>SELinux disabled</li>
<li>ufw (CentOS だが python で直接入れているらしい)</li>
<li>メンテナンスサポートの長いものということで Debian から CentOS 6 にしたらしい</li>
<li>ssh 接続</li>
<li>ポート番号変更</li>
<li>公開鍵認証のみ</li>
<li>root ユーザーでのログイン不可 (一般ユーザーでログインして <code>sudo su -</code> で)</li>
<li>chkconfig で on になっているものの紹介</li>
<li>opendkim も動かしている</li>
<li>yum-cron が便利らしい (Ubuntu の unattended-upgrades 相当?)</li>
<li>Apache/2.2.15</li>
<li>PHP 5.3.3 (CentOS のレポジトリから入れているので Redhat のサポートが続いている)</li>
<li>ruby 2.1.5p273</li>
<li>mysql Ver 14.14 Distrib 5.1.73 (これも CentOS のパッケージで入れている)</li>
<li>Drupal + Redmine + ML 連携</li>
<li><code>redmine_retrieve_mail_to_ticket.sh</code> で 15 分ごとに imap.gmail.com から取り込んでいる</li>
<li>redmine は 3.0.2</li>
<li>yum-cron でアップデートがあればメールが飛ぶ</li>
<li>logwatch で統計レポートが毎日メールで飛ぶ</li>
<li><code>/etc/passwd</code> の監視とか</li>
<li>https 対応</li>
<li>tripwire, fail2ban などは検討中</li>
<li>バックアップも検討中 (現在は単独サーバーで運用中)</li>
</ul>


<h2>VPSサービスについて</h2>

<ul>
<li>＜概要＞KOFのサーバー環境が稼働するVPSサービスの概要、特徴</li>
<li><a href="http://vps.sakura.ad.jp/">http://vps.sakura.ad.jp/</a></li>
<li><a href="http://www.sakura.ad.jp/press/2010/0901_vps.html">http://www.sakura.ad.jp/press/2010/0901_vps.html</a></li>
</ul>


<h2>KOFのサーバー環境ってどうなってるの？パートⅡ（仮）</h2>

<ul>
<li>Web 側の話</li>
<li>KOFサイト</li>
<li>古い年のサイトは静的ファイルに変換して残している</li>
<li><a href="https://k-of.jp/2015/slide_data_list">https://k-of.jp/2015/slide_data_list</a> のように発表資料まとめがある</li>
<li>管理者と発表者のやりとりができる</li>
<li>CSV にエクスポートできて連絡やパンフレットの元データにできる</li>
<li>タイムテーブルの自動生成</li>
<li>企画申請フォームが前のシステムを引き継いで動的なので複雑になってしまっている</li>
<li>今のところはユーザーアカウントは毎年引き継いでいる</li>
<li>Redmine</li>
<li>Slack クローンの Rocket.Chat も検討 (Slack の有料プランも検討)</li>
</ul>


<h2>フリーディスカッション</h2>

<ul>
<li>Q&amp;A</li>
<li>中野先生への質問</li>
<li>実行委員以外の人の感想</li>
<li>gmail を使っていて spam 判定されて連携がうまくいかないことはないのか?</li>
<li>そのために DKIM などの設定をしているので、可能性は低い。</li>
<li>バックアップの話</li>
<li>メール周りの話</li>
<li>次回以降のテーマ</li>
<li>Drupal</li>
<li>会場ネットワーク</li>
<li>メール</li>
<li>人</li>
<li>当日の運営</li>
<li>リハーサル (当日のタイムライン確認のシミュレーション)</li>
<li>オープンソース</li>
<li>KOF2016 のサイトをどうする?</li>
<li>ティザーサイトを置く話</li>
<li>参考として <a href="http://rubykaigi.org/2016">RubyKaigi 2016</a> は今のところ pre で書いてあるものが置いてあるだけ</li>
<li>他、参考: <a href="https://2015.kansai.wordcamp.org/">https://2015.kansai.wordcamp.org/</a> <a href="http://2014.drupalcampjapan.net/">http://2014.drupalcampjapan.net/</a></li>
<li>他の大規模イベントの人との交流の話</li>
<li><a href="http://histudy.github.io/otsc/">http://histudy.github.io/otsc/</a> の話</li>
<li>他のイベントとの日程の調整の話</li>
</ul>


<h2>closing</h2>

<ul>
<li>次回は 3/21 に予定</li>
<li>テーマは未定</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2月7日 「型システム入門」読書会第3回(兵庫県)に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-02-07-amagasakirb.html"/>
    <updated>2016-02-07T13:17:06+09:00</updated>
    <id>http://blog.n-z.jp/blog/amagasakirb</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/event/index/372662/" title="2月7日 「型システム入門」読書会第3回(兵庫県)">2月7日 「型システム入門」読書会第3回(兵庫県)</a>
に参加しました。
今回は第 15 章から第 19 章でした。</p>

<!--more-->




<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4274069117" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>以下、今回のメモです。</p>

<ul>
<li>いつもの部屋は予約が取れなかったということで、いつもと違う部屋だった。</li>
<li>昨日は<a href="https://konamifl.doorkeeper.jp/" title="小波秀雄教授最終講義">小波秀雄教授最終講義</a>だった。</li>
<li>サンプルコードは誰も試していないという話</li>
<li><a href="http://www.cis.upenn.edu/~bcpierce/tapl">http://www.cis.upenn.edu/~bcpierce/tapl</a></li>
<li>個人的には 11 章の途中だったので、その続きから読んだ。</li>
<li>前回の話にもあったように 12 章は飛ばした。</li>
<li>Mac の AC アダプタが大きいという話</li>
<li>第15章 部分型付け の概要の話</li>
<li>英語での 15 章のタイトルは Subtyping</li>
<li>P.152 の E-TYPETEST2 がよくわからないという話</li>
<li>Ruby の Fixnum とかの話</li>
<li>NArray の話</li>
<li>Python の話</li>
<li>Perl 6 は去年 12 月にリリースされた話 <a href="http://perl6.org/">http://perl6.org/</a></li>
<li>Haskell とか Swift とかの話</li>
<li>Ruby の oneliner だけの時の特殊な挙動の話</li>
<li>Smalltalk の話</li>
<li>Bacon.js の話</li>
<li>F# の話</li>
<li>Visual Haskell というのも昔はあったという話</li>
<li>インデントの話</li>
<li>IDE の話</li>
<li>Visual Studio の話</li>
<li>Dll Hell の話</li>
<li>Go 言語の話</li>
<li>Terraform の話 <a href="https://www.terraform.io/">https://www.terraform.io/</a></li>
<li>fix コンビネータの話</li>
<li>C# にも async,await が入っているという話</li>
<li>HTTP2 の話</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO&東海道らぐオフラインミーティング 2016/01/16 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-01-16-lilo-tokaidolug.html"/>
    <updated>2016-01-16T13:00:34+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-tokaidolug</id>
    <content type="html"><![CDATA[<p><a href="https://lilo.doorkeeper.jp/events/36903" title="LILO&amp;東海道らぐオフラインミーティング 2016/01/16 - LILO | Doorkeeper">LILO&amp;東海道らぐオフラインミーティング 2016/01/16 - LILO | Doorkeeper</a>
に参加しました。</p>

<p>今回もアンカンファレンス形式でした。</p>

<!--more-->


<h2>メモ</h2>

<p>今回のメモです。</p>

<ul>
<li>ハッシュタグ: <code>#lilo_jp</code> <code>#東海道らぐ</code></li>
<li>登録参加者数 10名</li>
<li>自己紹介から</li>
<li>Chromecast を持ってきている人がいてプロジェクターにさしていた。</li>
<li>Kapper さん : ARM Linux、Android、RaspberryPi で Windows とアプリをX86エミュで動かそう</li>
<li>ARM は x86 に比べて浮動小数点演算が遅い</li>
<li>ExaGear Desktop という商用のエミュレータもあるらしい</li>
<li>qemu より速い</li>
<li>DOSBox, Bochs は遅いが移植性が高い</li>
<li>qemu-user-static と schroot で Wine などを動かしている話</li>
<li>Debian は mutlilib をサポートしているが multi-binary はサポートしていないので <code>apt-get *:i386</code> で i386 のバイナリで上書きされてしまわないように schroot で環境を分けているという話</li>
<li>プレゼンに使った環境は Ubuntu を追加で入れた Chromebook</li>
<li><code>uname</code> は <code>armv7l</code></li>
<li>Crouton</li>
<li>派生して Windows 上で仮想環境の話</li>
<li>Virtual PC, Hyper-V, VirtualBox, VMware Player</li>
<li>山内さん : Raspberry Pi で遊んだ後は Piface を買ってホームエレクトロニクスとホームセキュリティで実用しよう</li>
<li>Tocos 無線DIO</li>
<li>TWE-Lite DIP (トワイライト・ディップ)</li>
<li><a href="https://osdn.jp/projects/pepolinux/wiki/epicon">epicon</a> でシリアル通信</li>
<li>休憩</li>
<li>榎さん : LibreOffice の最近の動向と Debian での LibreOffice パッケージについて</li>
<li>LibreOffice Online (LOOL)</li>
<li>ownCloud の編集画面で LOOL を使うデモがある</li>
<li>VirtualBox のイメージが用意されているので簡単に試せる</li>
<li>LibreOffice Viewer for Android</li>
<li>Advisory Board</li>
<li>ヨーロッパでは行政中心に導入が進行中</li>
<li>日本での活動</li>
<li>UI の翻訳率は高い</li>
<li>Help などは追いついていない</li>
<li>イベント</li>
<li>HackFest</li>
<li>LibreOffice Conference 2015 への日本からの参加者は 3 名</li>
<li>各言語のコミュニティ : LibreItalia (非営利団体), ベトナムコミュニティ</li>
<li><a href="http://itpro.nikkeibp.co.jp/atcl/column/15/102800252/102800003/" title="ヨーロッパでのLibreOffice活用は移行期から安定期に、アジアも活発な動き">ヨーロッパでのLibreOffice活用は移行期から安定期に、アジアも活発な動き</a></li>
<li>LibreOffice mini Conference 2016 in Japan</li>
<li>現時点での参加者が 13 名に増えている話</li>
<li>Debian での LibreOffice パッケージ</li>
<li>遅れてきた人の自己紹介</li>
<li>Shimada Hirofumi さん : opencocon</li>
<li>新ビルドサーバ</li>
<li>Allwinner タブレットの OS を作ってみる (途中)</li>
<li>linux-sunxi コミュニティ</li>
<li><a href="http://linux-sunxi.org/Identification_guide">http://linux-sunxi.org/Identification_guide</a></li>
<li><a href="http://linux-sunxi.org/GPL_Violations">http://linux-sunxi.org/GPL_Violations</a></li>
<li>Android 上だと型番などの情報がわからないので、バラしてプロセッサなどを確認</li>
<li><a href="http://linux-sunxi.org/Format_Q8">http://linux-sunxi.org/Format_Q8</a></li>
<li>OpenEmbedded + meta-sunxi</li>
<li><a href="https://github.com/linux-sunxi/meta-sunxi">https://github.com/linux-sunxi/meta-sunxi</a></li>
<li>Device Tree, FEX</li>
<li>sunxi-tools</li>
<li>microUSB で転送</li>
<li>現状はカーネルが起動するところまで</li>
<li>デモ</li>
<li>まとめ</li>
<li>上周りはどうするのかが問題</li>
<li>選択肢のひとつ : <a href="http://plasma-mobile.org/technology/">http://plasma-mobile.org/technology/</a></li>
<li>休憩</li>
<li>矢吹さん : Sphinx + VOoM</li>
<li><a href="http://www.vim.org/scripts/script.php?script_id=2657" title="VOoM : Vim two-pane outliner">VOoM : Vim two-pane outliner</a></li>
<li><a href="http://vim-voom.github.io/" title="VOoM: two-pane text outliner">VOoM: two-pane text outliner</a></li>
<li><a href="http://sphinx-users.jp/" title="Sphinx-Users.jp — Python製ドキュメンテーションビルダー、Sphinxの日本ユーザ会">Sphinx-Users.jp — Python製ドキュメンテーションビルダー、Sphinxの日本ユーザ会</a></li>
<li><a rel="nofollow" href="http://www.amazon.co.jp/gp/product/4478490279/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4478490279&amp;linkCode=as2&amp;tag=znz-22">考える技術・書く技術―問題解決力を伸ばすピラミッド原則</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4478490279" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="https://packages.debian.org/sid/vim-voom">https://packages.debian.org/sid/vim-voom</a></li>
<li>すがさん : <a href="http://www.geocities.jp/sugachan1973/doc/funtouki.html" title="システム奮闘記">システム奮闘記</a> 進捗</li>
<li>LAN の減衰、表皮効果</li>
<li>さとうさん : Raspberry Pi と魚眼レンズのカメラなどの実演</li>
<li>丸市 展之さん : OSM 3D マップの話</li>
<li>榎さん : 最後にちょっとだけ ownCloud + LibreOffice Online のデモ</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第70回 Ruby関西 勉強会で発表しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-01-09-rubykansai70.html"/>
    <updated>2016-01-09T14:01:12+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai70</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/36351" title="第70回 Ruby関西 勉強会">第70回 Ruby関西 勉強会</a>
で発表してきました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>Ruby 2.3.0 の新機能について</h2>

<p>この内容で発表しました。</p>

<iframe src="http://slide.rabbit-shocker.org/authors/znz/rubykansai70-ruby230/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="http://slide.rabbit-shocker.org/authors/znz/rubykansai70-ruby230/" title="Ruby 2.3.0 の新機能について">Ruby 2.3.0 の新機能について</a>
</div>


<h2>10 分休憩</h2>

<h2>gems on Rails</h2>

<ul>
<li>What is a gem?</li>
<li>gem を探す</li>
<li><a href="https://rubygems.org/">https://rubygems.org/</a></li>
<li><a href="https://www.ruby-toolbox.com/">https://www.ruby-toolbox.com/</a></li>
<li>gem を選ぶ</li>
<li>ダウンロード数とか</li>
<li>コードの相性</li>
<li>作者やロゴも基準にしている</li>
<li>gem を使う</li>
<li>Github の README, Wiki を読む、から始まる</li>
<li>個人的に良く使う gems on Rails</li>
<li>認証・権限周辺 : devise, cancancan, pundit</li>
<li>入出力ドキュメント : prawn, pdfkit, rubyzip, axlsx, docx_templater</li>
<li>(docx_templater は知らなかった)</li>
<li>その他 : kaminari, carrierwave, rails-assets, whenever, simplecov</li>
<li>みなさんのお気に入りの gems</li>
<li>有名な rails 製アプリ (GitLab とか) の Gemfile を参考にする</li>
<li><a href="https://github.com/gitlabhq/gitlabhq/blob/master/Gemfile">https://github.com/gitlabhq/gitlabhq/blob/master/Gemfile</a></li>
<li><a href="http://awesome-ruby.com/">http://awesome-ruby.com/</a></li>
<li><a href="http://www.thinreports.org/">http://www.thinreports.org/</a></li>
</ul>


<h2>10 分休憩</h2>

<h2>Rails Engine のすすめ</h2>

<ul>
<li>Engine の例 : turbolinks, devise</li>
<li>サービス指向: Rails</li>
<li>コンポーネント指向 : Rails Engine, React and Redux</li>
<li>オブジェクト指向 : Ruby</li>
<li>デモ</li>
<li><code>mount なんとか::Engine =&gt; "/api"</code> みたいにして使う</li>
<li>Engine のメリット・デメリット</li>
<li>たとえば <code>/api</code> を <code>/v1/api</code> にするのも <code>mount</code> のところを変えるだけ</li>
<li>Rails 5.0 ではデフォルトでは <code>jbuilder</code> は使わなくなって <code>render json: @products</code> で <code>to_json</code> を呼び出すだけになっている。</li>
<li>React Redux のクライアントは Electron でネイティブにも対応できる</li>
<li>サンプルアプリは <a href="https://github.com/dddrb/bouquet">https://github.com/dddrb/bouquet</a></li>
</ul>


<h2>5 分ぐらい休憩</h2>

<h2>Ruby 初級者向けレッスン (ブロック)</h2>

<ul>
<li><a href="https://github.com/higaki/learn_ruby_kansai_70">https://github.com/higaki/learn_ruby_kansai_70</a></li>
</ul>


<h2>クロージング</h2>

<ul>
<li><a href="https://rubyassociation.doorkeeper.jp/events/35687" title="[大阪] Rubyビジネスセミナー loTのエコシステムとワークライフバランス">大阪 Rubyビジネスセミナー loTのエコシステムとワークライフバランス</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
