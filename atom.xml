<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-10-19T23:14:17+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Developers Meetup #6 大阪会場に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-10-19-railsdm.html"/>
    <updated>2017-10-19T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/railsdm</id>
    <content type="html"><![CDATA[<p><a href="https://techplay.jp/event/631426">Rails Developers Meetup #6 大阪会場</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>前回までと同じ場所なので、スムーズに到着することができました。</p>

<h2>オープニング</h2>

<ul>
<li>プログラムの紹介</li>
<li>ハッシュタグは <code>#railsdm</code></li>
</ul>


<h2>Railsエンジニアの交換型インターンシップについて</h2>

<ul>
<li>自己紹介と会社紹介</li>
<li>インターンシップを始めた同機</li>
<li>開発者不足</li>
<li>交換型インターンシップとは何か</li>
<li>プログラミングスクール的な学習週とインターン的な作業週を交互にやる</li>
<li>学習週は 平均3ヶ月 (交互なので6ヶ月) で終わるぐらいのボリューム</li>
<li>作業週</li>
<li>pull request の練習にもなるということで好評</li>
<li>ローカル (学生が多い) とリモート (社会人が多い) がある</li>
<li>シニアインターン: バイトリーダー的な存在</li>
<li>インターンの成果: アルバイトとしての成果とスクールとしての成果 (就職先) がある</li>
<li>モチベーションがもたない</li>
<li>対策としては見てますよというメッセージを送り続ける</li>
<li>いいね！ がんばれ！ 大丈夫！</li>
<li>不安に対してはメッセージを送り続けるしかない</li>
<li>所属感がない</li>
<li>対策: ミートアップや忘年会を開催</li>
<li>ニートやひきこもりが社会復帰した</li>
<li>就職先の会社からとても喜ばれる</li>
<li>仕事が増えた</li>
<li>有名じゃない会社のインターン戦略</li>
<li>出入りしやすくして単純に人数が多いため、確率的に優秀な人も多くなる</li>
<li>来るもの拒まず、去る者追わず</li>
<li>社会人が7割</li>
<li>無料なのでいろいろなところから紹介される</li>
<li>RubyKaigi のスタッフをやったら就職できる</li>
<li>求人への応用</li>
<li>採用はしていない</li>
<li>探すんじゃなくて育てる</li>
<li>組んでくれる会社</li>
<li>質疑応答</li>
<li>id的には183名</li>
<li>7割ぐらい去っている?</li>
<li>社会人は求職中の人もいれば仕事をしながらの人もいる</li>
<li>課金サービスはない</li>
</ul>


<p><a href="http://docs.komagata.org/5463">発表資料</a></p>

<h2>Railsコントリビューション</h2>

<ul>
<li>自己紹介</li>
<li><a href="http://contributors.rubyonrails.org/">http://contributors.rubyonrails.org/</a> で24位</li>
<li><a href="http://contributors.rubyonrails.org/releases">http://contributors.rubyonrails.org/releases</a> の v5.0.0 が 9999 Commits というコネタ</li>
<li>コミットログを読むブログを続けている <a href="http://y-yagi.hatenablog.com/">http://y-yagi.hatenablog.com/</a></li>
<li>わからないことも多かったが動かして確認した</li>
<li>テストがちゃんと書かれるようになったころだったのでテストでなんとなくわかった</li>
<li>2,3ヶ月で Rails のコードに慣れて、いろいろとミスに気づくようになった</li>
<li>問題がある状態をそのままにしておくのはよくないということでコントリビュートし始めた</li>
<li>どんな時にコントリビュートするか? 期待通りに動かない時、機能追加したい時</li>
<li>期待通りに動かないというのはまあまあある</li>
<li>よく使う道具なので期待通り動いて欲しい</li>
<li>Issue をつくる or PR を作る</li>
<li>Issue をつくるのも大事なコントリビュート</li>
<li>英語が苦手なので PR を投げてしまうことの方が多い</li>
<li>機能を追加したい時</li>
<li>よく使う道具なので機能が足りてて欲しい</li>
<li><a href="https://github.com/rails/rails">https://github.com/rails/rails</a> のみを対象 (<a href="https://github.com/rails">https://github.com/rails</a> の他のレポジトリは方針などが違うことがある)</li>
<li><a href="http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html">http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html</a></li>
<li>Issue はバグ管理のみ</li>
<li>新機能提案などの issue は即 close されたりする</li>
<li>新機能についての議論は rails-core ML</li>
<li>PR 投げて、そこで議論をするのでも大丈夫 (その方が多そう)</li>
<li><a href="https://github.com/rails/rails/tree/master/guides/bug_report_templates">https://github.com/rails/rails/tree/master/guides/bug_report_templates</a> を参考にして再現手順が作れると良い</li>
<li>master ブランチでも再現するか確認</li>
<li>サポート対象外の古い Rails での Issue は無視されるか即 close</li>
<li>サポート対象: <a href="http://guides.rubyonrails.org/maintenance_policy.html">http://guides.rubyonrails.org/maintenance_policy.html</a></li>
<li>似たような PR がもうないか検索してみる (open だけではなく close されているものも)</li>
<li>close されていたら理由を確認して、それでも PR を出すなら、そのことも書く</li>
<li>やりとりが止まっている場合は確認して引き継いでしまう</li>
<li>Rails 本体にいるかどうか gem じゃだめなのか考える</li>
<li>foreigner や migration_comments のように本体に取り込まれることもある</li>
<li>フォーマットに従う <a href="https://github.com/rails/rails/blob/master/.github/pull_request_template.md">https://github.com/rails/rails/blob/master/.github/pull_request_template.md</a></li>
<li>テストは大体は bundle exec rake test で動く</li>
<li>CI の結果も確認する</li>
<li>doc やコメントのみの修正は <code>[ci skip]</code> を入れる</li>
<li>パフォーマンス改善はベンチマークスクリプトと結果もコミットログに入れる</li>
<li>PR の description に書くようなことはコミットログに入れれば良い</li>
<li>後から参照しやすい</li>
<li>使われてないはずのものを消す場合は使われなくなった場所の確認の他に gem に切り出されたものが使っている可能性も考える必要がある</li>
<li>public API の挙動を変えない</li>
<li><a href="http://api.rubyonrails.org/">http://api.rubyonrails.org/</a> にのっているものが public API</li>
<li>挙動を変えたい場合は deprecate から</li>
<li>squash</li>
<li>何から始めたらいいか</li>
<li>doc</li>
<li><a href="http://api.rubyonrails.org/">http://api.rubyonrails.org/</a> と <a href="http://guides.rubyonrails.org/">http://guides.rubyonrails.org/</a> がリリースされているものに対応</li>
<li>master ブランチは <a href="http://edgeapi.rubyonrails.org/">http://edgeapi.rubyonrails.org/</a> と <a href="http://edgeguides.rubyonrails.org/">http://edgeguides.rubyonrails.org/</a></li>
<li>新しいバージョンを触る</li>
<li>rc をまたずに beta1 が出たら試す</li>
<li>新しい機能はバグっていることが多い</li>
<li>既存の機能が壊れていることもある</li>
<li>新しい Ruby で触る</li>
<li>Issue をみる: コードをみるとっかかりになる, 意外と簡単に直せるバグもある</li>
<li>英語ができない: コミットログや PR を参考にする</li>
<li>何か怖い: 慣れるしかない, <a href="https://oss-gate.github.io/">https://oss-gate.github.io/</a> もおすすめ</li>
<li>質疑応答</li>
</ul>


<p><a href="https://docs.google.com/presentation/d/e/2PACX-1vTQx7WQDPQmvMHRyc8Pj1kP9SOqHAlmLUUGA22G7nU7qtXJsFEwYMaMPwBHWMc-dx9OZaAPl3S7pmtw/pub">発表資料</a></p>

<h2>休憩</h2>

<h2>Railsでつくる ファイルアップロード 2017</h2>

<ul>
<li>会社紹介</li>
<li><p>自己紹介</p></li>
<li><p>きっかけ</p></li>
<li>サービスを Perl の独自フレームワークから Rails に移行中に画像アップロードを作り直したことがなかったことに気づいた</li>
<li>Active Storage の登場</li>
<li><p>スマホ時代のファイルアップロード</p></li>
<li><p>画像アップロードで考えるポイント</p></li>
<li>画像アップロード自体</li>
<li>画像の参照</li>
<li><p>画像ファイルの置き場所</p></li>
<li><p>UI から考える 2017 年の画像アップロード</p></li>
<li>例: クックパッド, esa</li>
<li><p>非同期</p></li>
<li><p>form_with</p></li>
<li><p>Headless browser</p></li>
<li><p>Step 1: public に画像アップロード</p></li>
<li>ActionDispatch::<a href="Http::UploadedFile">Http::UploadedFile</a></li>
<li>validate が画像ファイル自体と画像と紐づく情報の2軸になる</li>
<li>フォームオブジェクトで処理すると良さそう</li>
<li>Step 2: S3 に画像アップロード</li>
<li>認証、アクセス制御、モック</li>
<li>問題発生? ファイルアップロードに時間がかかる気がする</li>
<li>サーバー経由ではなくダイレクトにアップロードに</li>
<li>Step 3: ダイレクトアップロード (S3)</li>
<li>Step 4: 複数ファイルのアップロード</li>
<li>multiple では非同期が必要だった</li>
<li>Step 5: ECMAScript 6 や File API など</li>
<li>新しい画像フォーマット (Live Photos?)</li>
<li>技術の積み重ねとユーザー体験</li>
<li><p>ユーザー体験を向上させようとすると rails から離れた技術も必要になってくる</p></li>
<li><p>質疑応答</p></li>
</ul>


<p><a href="https://speakerdeck.com/matsuhisa/rails-developers-meetup6-image-upload">発表資料</a></p>

<h2>How, Why, What がわからないコードの調べ方</h2>

<ul>
<li>ネタバレ: 最終的には負けた</li>
<li>ベストは、「知っている人に聞く」</li>
<li>誰もいないなら調べるしかない</li>
<li>git blame は -L で範囲を絞り込める</li>
<li><code>git blame -L "/regex",+20 file</code></li>
<li>git blame rev file</li>
<li><a href="https://github.com/akr/vcs-ann">https://github.com/akr/vcs-ann</a></li>
<li>tig blame file</li>
<li><code>","</code> でカーソル行の親コミットの blame に移動</li>
<li>歴史をみてもわからなかった</li>
<li>ログを出す</li>
<li><code>Kernel.#caller</code></li>
<li><code>logger.tagged("hoge") do ... end</code></li>
<li>歴史を見ても、動きを見ても、よくわからない</li>
<li>それは、作り直して良いというフラグでは?</li>
<li>結論: 強く生きよう</li>
</ul>


<h2>How to improve OSS Rails application</h2>

<ul>
<li>自己紹介</li>
<li>GitLab</li>
<li>時間がおしているので質疑応答はなし</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>次回予告: #7 は 2017.11.16</li>
<li>月1開催は次回で最終回</li>
<li>募集は 2017.10.30 10:00から</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第79回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-10-07-rubykansai79.html"/>
    <updated>2017-10-07T14:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai79</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/65609">第79回 Ruby関西 勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<p>今回は amagasakirb でよく来ていた尼崎市立小田公民館でした。</p>

<p>プロジェクターは 800x600 でした。</p>

<h2>How to specify <code>frozen_string_literal: true</code></h2>

<p>発表資料は RubyKaigi 2017 で使ったものと同じで、 <a href="https://github.com/znz/rubykaigi2017-frozen_string_literal">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-how-to-specify-frozenstringliteral-true/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/how-to-specify-frozenstringliteral-true">slideshare</a>, <a href="https://speakerdeck.com/znz/how-to-specify-frozen-string-literal-true">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-rubykaigi2017-frozen_string_literal">RubyGems</a> にあげているものを、 <code>allotted-time</code> を 5m から 10m に変更して使いました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-frozen_string_literal/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-frozen_string_literal/" title="How to specify `frozen_string_literal: true`">How to specify `frozen_string_literal: true`</a>
</div>


<h2>西谷さんの文書管理の話</h2>

<ul>
<li>会場アンケート: 初参加の人が多かった</li>
<li>OSS Gate で rubocop にバグ報告したら直してもらえた <a href="https://github.com/bbatsov/rubocop/issues/4644">https://github.com/bbatsov/rubocop/issues/4644</a></li>
<li><a href="https://ja.wikipedia.org/wiki/%E5%8F%8C%E6%9B%B2%E5%89%B2%E5%BC%95">双曲割引</a></li>
<li>今18万円もらうか、1年後に20万円もらうか</li>
<li>2年後に18万円もらうか、3年後に20万円もらうか</li>
<li>マシュマロテスト</li>
<li>既知感</li>
<li>記憶

<ul>
<li>記述記憶</li>
<li>非記述記憶

<ul>
<li>身体的記憶</li>
<li>経験記憶</li>
<li>場所の記憶</li>
</ul>
</li>
</ul>
</li>
<li>文書管理</li>
<li>文書管理の原則: 決める, 見える, tight binding, 利用する</li>
<li>会場に質問 → markdown や org-mode でメモしている人がいた<!-- e-文書法 関連の仕事をしているという人がいた --></li>
<li>おすすめの本は? → <a href="http://amzn.to/2hT6Qdq">野口 悠紀雄の「超」整理法</a>, あとはだいたい失敗している</li>
<li>日付で整理している人は多い</li>
</ul>


<h2>休憩</h2>

<ul>
<li>14:45 まで休憩</li>
</ul>


<h2>もう放置しない！画面遷移図の作り方</h2>

<ul>
<li>今までの発表中に急遽発表資料を作った</li>
<li>Sky Grid の山本さん</li>
<li>西谷さんのところの卒業生</li>
<li>急いでショッピングサイトを作っていて、急遽画面遷移が必要になった</li>
<li>移動中に UI Flows というのをみつけた</li>
<li>手書き or ホワイトボード ? (or Excel ?)</li>
<li>おうおうにして放置される</li>
<li>guiflow というものをみつけた</li>
<li><a href="https://qiita.com/hirokidaichi/items/ff54a968bdd7bcc50d42">もう保守されない画面遷移図は嫌なので、UI Flow図を簡単にマークダウンぽく書くエディタ作った</a></li>
<li>質疑応答</li>
<li>rails なら routes から自動生成できないか?</li>
<li>画面遷移図を先に作るのなら無理そう</li>
<li>漏れをなくすよりも主要な遷移だけにしたい?</li>
<li>feature テストからならできそう?</li>
</ul>


<h2>RubyKaigi 2017 のキーノート紹介</h2>

<ul>
<li>なかださんの発表</li>
<li>事務処理できる人がいなくなった</li>
<li>概要</li>
<li>Subversion を使っていて、なぜ Git を使わないのかという話</li>
<li>新機能/課題の管理: Redmine で管理している</li>
<li>開発者会議: 月1回</li>
<li>Ruby のビルドの仕方</li>
<li>バグフィックスの事例</li>
<li>Ruby は「簡単な文法」だと「錯覚」させている</li>
<li><a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/50578">[ruby-list:50578] [質問] 変数pが定義されている時のabsの動作について</a></li>
<li><code>String#intern</code> と refinements の話</li>
<li>Ruby 2.5 の新機能の話</li>
<li>右代入についても話題になっている</li>
<li>感想: もっと「Rubyを」いじってね、ということだと思った</li>
<li><a href="https://codeiq.jp/magazine/2017/09/53932/">Rubyのなかを覗いてみよう！「Cookpad Ruby Hack Challenge」に参加してみた</a></li>
<li><p><a href="https://github.com/ko1/rubyhackchallenge">https://github.com/ko1/rubyhackchallenge</a></p></li>
<li><p>GitPitch というのを使ってスライドを作っている</p></li>
<li><a href="https://github.com/urimaro/79th_workshop_1">https://github.com/urimaro/79th_workshop_1</a></li>
<li><a href="https://gitpitch.com/urimaro/79th_workshop_1">https://gitpitch.com/urimaro/79th_workshop_1</a></li>
<li><a href="https://github.com/urimaro/79th_workshop_2">https://github.com/urimaro/79th_workshop_2</a></li>
<li><p><a href="https://gitpitch.com/urimaro/79th_workshop_2">https://gitpitch.com/urimaro/79th_workshop_2</a></p></li>
<li><p>Matz のキーノート</p></li>
<li>概要: module について</li>
<li>RubyKaigi について</li>
<li>RubyConf より大きい</li>
<li>module の話</li>
<li>単一継承</li>
<li>多重継承 (C3アルゴリズム)</li>
<li>Mixin の話</li>
<li>module の使われ方</li>
<li>Mixin 以外の使われ方もするようになった</li>
<li>namespace とか</li>
<li>alias method chain は2回呼び出すと壊れる</li>
<li><code>Module#prepend</code> の登場</li>
<li>CLOS の method combination が実現できる</li>
<li>aspect 指向プログラミングを実現できる</li>
<li>refinements</li>
<li>Structural signature</li>
<li>質疑応答</li>
<li>prepend は外せないという話があったが include も外せない? → たぶん外せない</li>
<li>Rails の concern と helper の使い分け? → まだ helper の方がよく使われていて concern はそんなに使われていない?</li>
</ul>


<h2><a href="https://qiita.com/yuyakato">Kato Yuya</a> さん</h2>

<ul>
<li>概要: zeromq, GitHub, ハードウェア工作</li>
<li>GitHub の private repo の issues で色々管理している</li>
<li>ベッド型体重計: 9月にベッドを買い直したのをきっかけに再度挑戦開始</li>
<li>zeromq というライブラリの紹介</li>
<li>コネクションの方向と中身の通信の方向の自由度が高い (Pub-Sub のどちらからの接続開始でも良いなど)</li>
<li>zeromq は対応言語が多いので言語の勉強にもおすすめ</li>
<li>Pub-Sub とかも簡単にかける</li>
<li>ロードセル専用のアンプモジュールが安価に手に入るようになった</li>
<li>水のペットボトルで校正</li>
<li>校正は大変なので、体重計はよくできているなあと感じた</li>
<li>GitHub 上で 3D データもプレビューできる</li>
<li>UDP のデータを zeromq に流すのに久しぶりに ruby を書いた</li>
<li><p>後の処理はデータ処理の都合により python</p></li>
<li><p>質疑応答</p></li>
<li>製品化はしないんですか? → 製品化する予定はない。情報は全部公開する予定</li>
<li>pycall は使わない? → 無理に ruby にする必要はなさそう</li>
<li>ruby だとターミナルで作業することが多いが python だと jupyter で完結することが多いと感じているがどうか? → テストコードを書くような部品化できる部分は別ファイルにする、適材適所で使っている</li>
</ul>


<h2>Ruby初級者向けレッスン 63回 ─ Array と Hash</h2>

<p>今回は初心者の人も多かったようです。</p>

<h2>RubyKaigi 2017 のノベルティプレゼント</h2>

<p>トートバッグなどの RubyKaigi 2017 の入り口で配布していたノベルティの一部を、今年もRuby関西のスタッフの人があらかじめいくつかもらってきていたのをプレゼントしていました。</p>

<p>トートバッグは、広島なので瀬戸内海と四国が見えてるようなデザインなのかなと思っていたら <a href="https://twitter.com/is8r_/status/909752063323754496">https://twitter.com/is8r_/status/909752063323754496</a> ということだったらしいです。
プレゼントの時にこのヒントを紹介しようかと思っていたら、時間がなかったので、できませんでした。</p>

<h2>感想</h2>

<p>今回は、本当に開催するかどうかを RubyKaigi 2017 の会期中に相談するなど、最終的な開催の決定から開催までの時間が短かったからか、いつもと比べて参加人数は少なめでしたが、初参加の人や初心者の人が多かったので、開催して非常によかったと思いました。</p>

<p>発表内容も事前発表していたもの以外は RubyKaigi 2017 の振り返りをのんびりやって終わるのかなと思っていたら、当日発表者を募集したら3名も発表してくれる人が出てきて、時間が足りないぐらいになっていました。</p>

<p>だいたい2ヶ月ごとに開催されていますが、次回は12月に開催されるかどうかはまだ未定なので、来年になるかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Developers Meetup #5 大阪会場に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-28-railsdm.html"/>
    <updated>2017-09-28T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/railsdm</id>
    <content type="html"><![CDATA[<p><a href="https://techplay.jp/event/631423">Rails Developers Meetup #5 大阪会場</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>前回と同じ場所なので、スムーズに到着することができました。</p>

<p>今回は、ストリーミングの問題なのか、聞き取りにくいことが多かったので、特に質疑応答はメモが取れていません。</p>

<h2>オープニング</h2>

<ul>
<li>会場の説明</li>
<li>ハッシュタグは <code>#railsdm</code></li>
<li>プログラムの紹介</li>
</ul>


<h2>Railsで日報共有アプリケーションをOSSとして開発している話</h2>

<ul>
<li><p><a href="https://speakerdeck.com/kami/railsderi-bao-gong-you-apurikesiyonwoosstositekai-fa-siteiruhua">https://speakerdeck.com/kami/railsderi-bao-gong-you-apurikesiyonwoosstositekai-fa-siteiruhua</a></p></li>
<li><p>Rails で SPA の事例</p></li>
<li>Repost という日報共有アプリケーション <a href="https://github.com/kami-zh/repost">https://github.com/kami-zh/repost</a></li>
<li>Slack 連携部分を例に説明</li>
<li>View → Action → API → Reducer → View</li>
<li><p>Mastodon の app/javascript や package.json も参考になる</p></li>
<li><p>Rails 5.1 での機能をどう使ったか</p></li>
<li>webpacker</li>
<li>rails new するときに &ndash;webpack=react をつける</li>
<li>必要に応じて yarn add</li>
<li>開発時は bin/webpack-dev-server</li>
<li>webpacker 3 系は多くの設定がライブラリ側に吸収されてアプリケーション側はシンプルにできる</li>
<li><code>javascript_pack_tag</code></li>
<li>Rails 5.1 から yarn をサポート</li>
<li>yarn は install / add / remove ぐらいを知っておけば良い</li>
<li><code>ActionDispatch::SystemTestCase</code></li>
<li>トランザクション管理をしてくれる</li>
<li><p>参考: <code>Minitest::Retry</code> がちょっと不安定なテストに便利 <a href="https://github.com/y-yagi/minitest-retry">https://github.com/y-yagi/minitest-retry</a></p></li>
<li><p>工夫したこと</p></li>
<li>ユニットテストと E2E テストをしっかり書いた</li>
<li>Sprockets は削除した</li>
<li>セットアップを楽にする: bin/setup, bin/update をメンテナンスする</li>
<li>モーダルは慎重に導入する</li>
<li><a href="https://github.com/rails/rails/pull/30614">Install JavaScript dependencies on bin/update</a></li>
<li><p>Rails の資産を活用する: Turbolinks や FormHelper など</p></li>
<li><p>余談</p></li>
<li><p>知識欲求駆動開発</p></li>
<li><p>質疑応答</p></li>
<li>webpack-dev-server との同時起動に foreman は使っていない</li>
<li>react は使ってよかった感じ</li>
<li>react, vue, angular などから react を選んだ理由は? → 使ってみたかったから</li>
</ul>


<h2>パフォーマンス計測CIサービスを作って得た知見</h2>

<ul>
<li><p><a href="https://www.slideshare.net/zaruhiroyukisakuraba/ci-80250430">https://www.slideshare.net/zaruhiroyukisakuraba/ci-80250430</a></p></li>
<li><p>個人で開発しているパフォーマンス計測をする CI サービス</p></li>
<li><p>現在は Rails のみサポート、プライベートベータ</p></li>
<li><p>OAuth Apps と GitHub Apps の違い</p></li>
<li>OAuth Apps (従来のもの) ユーザーに対してインストール</li>
<li>GitHub Apps はリポジトリに対してインストール、マーケットプレイスに出せる</li>
<li>コメントもユーザーとしてか、独自権限にできるかの違いがある</li>
<li><p>マーケットプレイスに出す条件はちょっと厳しい (250人以上にインストールされていることとか)</p></li>
<li><p>GitHub Apps を作るのは簡単</p></li>
<li>アクセストークンと API</li>
<li>JWT の expire に注意: 10分や8分だとうまくいかないことがあったので5分にした</li>
<li>取得できるユーザー情報は限定的</li>
<li>GitHub Apps の API は少しずつ解放されている</li>
<li><p>GitHub Enterprise ではまだ使えないかも</p></li>
<li><p>GitHub Apps で気をつけるところ</p></li>
<li>Webhook を取りこぼすとデータロスト</li>
<li>パーミッションの変更はなるべくしない: ユーザーに承認してもらう必要があるがわかりにくい</li>
<li>GitHub Apps のインストールの導線: インストール後がわかりにくいらしい</li>
<li><p>ローカルで webhook を受け取る方法: ngrok は無料だと起動のたびにホスト名が変わるので面倒、ポートフォワーディングをしている</p></li>
<li><p>Docker in Docker</p></li>
<li>privileged オプションが必要</li>
<li>良い点: 階層構造なので管理しやすい</li>
<li>悪い点: パフォーマンス, privileged オプションで怖い, ボリュームが残ってしまう</li>
<li><p>そもそも製作者自身があまり推奨していない</p></li>
<li><p><code>/var/lib/docker.sock</code> を共有</p></li>
<li>良い点: シンプル, ビルドキャッシュも簡単</li>
<li>悪い点: 他のコンテナが丸見え</li>
<li><p>内部利用限定なら良いかも</p></li>
<li><p>オーケストレーション</p></li>
<li>GKE + k8s</li>
<li><p>小規模/シンプルなら Heroku おすすめ</p></li>
<li><p>CI, 計測の仕方</p></li>
<li>CI サービスを作るのに使った小技</li>
<li>resources をちゃんと指定しないとパフォーマンスがぶれる</li>
<li><p>Container Builder のローカル開発環境がある <a href="https://github.com/GoogleCloudPlatform/container-builder-local">https://github.com/GoogleCloudPlatform/container-builder-local</a></p></li>
<li><p>個人開発プロジェクトについて</p></li>
<li>毎日やるのが大事</li>
<li>コードを捨てるのを躊躇しない</li>
<li>何のためにやるのか</li>
<li>途中経過も公開する</li>
<li><p>やらないことを決める</p></li>
<li><p>質疑応答</p></li>
<li>個人開発でも k8s を使っている? → 使っている</li>
<li>heroku ではなく k8s を使う理由 → docker のため</li>
<li>(メモ取れず)</li>
</ul>


<h2>休憩</h2>

<h2>マイクロサービスにおける非同期アーキテクチャ</h2>

<ul>
<li><p><a href="https://www.slideshare.net/ota42y/ss-80254350">https://www.slideshare.net/ota42y/ss-80254350</a></p></li>
<li><p>microservice</p></li>
<li>外から見たときは一つのアプリ</li>
<li>内部的にはドメインごとに別々のサーバー</li>
<li>API で連携</li>
<li>非同期もある</li>
<li><p>巨大かつ複雑になりやすい → 知見</p></li>
<li><p>非同期処理</p></li>
<li>今回は特に Job Queue の話</li>
<li><p>ActiveJob は Rails 標準なので一般的な構成のはず</p></li>
<li><p>歴史</p></li>
<li>牧歌的時代: なんでも delayed_job に突っ込む</li>
<li>RDB に保存する</li>
<li>delay メソッドを挟むだけ</li>
<li>障害発生: job がどんどん溜まっていった</li>
<li>delayed_job では job の同時実行を防ぐ機構がある</li>
<li>index がきかない where 句の絞り込み＆ソート → テーブルロック</li>
<li>処理速度 ＜ 増加速度 になって打つ手がなくなる</li>
<li>大移行時代</li>
<li>非同期処理の整理</li>
<li>巨大な処理はクリティカルかどうかで場合分け</li>
<li>重要度に応じて処理分け</li>
<li>クリティカルではないものは別バックエンドへ移動して delayed_job の job 数を減らした</li>
<li>移行先として sidekiq, resque から sidekiq を選んだ</li>
<li><p>クリティカルではないものは delayed_job から ActiveJob(+sidekiq) に書き換え</p></li>
<li><p>複数サービスへの連携</p></li>
<li>結合度が高かった</li>
<li>イベント駆動アーキテクチャ</li>
<li>Event の送受信に変更</li>
<li>具体的には AWS の SNS (Simple Notification Service) と SQS (Simple Queue Service) を利用</li>
<li>送信側が SNS で受信側のサービスごとに SQS</li>
<li>癖があるので注意: 複数回や並列実行を考慮して、べき等である必要がある、など</li>
<li>統一フォーマットが必要</li>
<li>移行するなら、送信側・受信側両方移行する必要がある</li>
<li><p>楽にするための gem を作った <a href="https://github.com/ota42y/rising_dragon">https://github.com/ota42y/rising_dragon</a></p></li>
<li><p>質疑応答</p></li>
<li>Queue をどうわけているか? → ほとんどわけていない</li>
</ul>


<h2>5000兆人欲しい！ 優秀なRailsエンジニアを採用するための3つ(仮)の方法</h2>

<ul>
<li>日本の Rails エンジニアの数は推定10万人ぐらい?</li>
<li>世界中の人の数 74億人</li>
<li><code>'74億人' &gt; '5000兆人' #=&gt; true</code></li>
<li>制限を外す</li>
<li>Rails 経験者にこだわらない</li>
<li>日本人にこだわらない</li>
<li>エンジニアにこだわらない</li>
</ul>


<h2>Railsを6年間やってきたぼくが最近Railsでハマったこと</h2>

<ul>
<li><a href="https://speakerdeck.com/kazumax1218/railswo6nian-jian-yatutekitabokugazui-jin-railsdehamatutakoto">https://speakerdeck.com/kazumax1218/railswo6nian-jian-yatutekitabokugazui-jin-railsdehamatutakoto</a></li>
<li>1: カラム追加時に index がはられない</li>
<li><code>add_column</code> には index オプションがなかった</li>
<li>対策: <code>add_index</code> を使う</li>
<li>2: try</li>
<li>メソッドがない場合 (typo など) も例外を出さずに nil を返す</li>
<li>対策: <code>try!</code> を使うか ruby 2.3 以降ならぼっち演算子 <code>&amp;.</code> を使う</li>
<li>3: fragment cache</li>
<li>共通のパーシャルを変更してもキャッシュがクリアされない</li>
<li>template が見つからないのでダイジェストが計算できていなかった</li>
<li>対策: パスを省略しない</li>
<li>パーシャルのパスが動的な場合も注意</li>
<li>プチ情報</li>
<li>Rails 5 からは <code>rails dev:cache</code> で簡単にキャッシュの ON/OFF を切り替えられるようになった</li>
<li>fragment cache のログを出す設定がある</li>
<li>4: 新規作成画面に戻ったら作成したはずのレコードが消えた</li>
<li>原因: <code>has_one</code> に <code>dependent: :destroy</code> がついていると <code>build_xxx</code> 時にレコードが削除される</li>
<li>対策: new アクションで <code>build_xxx</code> を使わない</li>
</ul>


<h2>次回予告</h2>

<ul>
<li>次回 10/19: <a href="https://techplay.jp/event/631425">東京</a>, <a href="https://techplay.jp/event/631426">大阪</a>, <a href="https://techplay.jp/event/631427">リモート</a></li>
<li><a href="https://techplay.jp/event/631431">2017/12/09（土） 13:00 開催 の Rails Developers Meetup 2017</a>, <a href="https://techplay.jp/event/636560">大阪</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developers.IO 2017 WORLD in 大阪 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-23-cmdevio2017.html"/>
    <updated>2017-09-23T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/cmdevio2017</id>
    <content type="html"><![CDATA[<p><a href="http://dev.classmethod.jp/news/developers-io-2017-world-osaka/">Developers.IO 2017 WORLD in 大阪</a> に参加したので、そのメモです。
主に OAuth の話が気になったので行ってみたのですが、他の話もおもしろかったです。</p>

<p>ハッシュタグは <code>#cmdevio2017</code> でした。</p>

<!--more-->


<h2>会場</h2>

<p>スカイビルのタワーウエストは初めて入った気がします。(イーストの方は映画館があるので、そこまでは行ったことがありました。)</p>

<h2>ごあいさつと会場の説明</h2>

<p>スカイビルの場所がわかりにくくて迷った話とか、 Developers.IO の東京で複数トラックでやっていたもののうち、アンケートで評判が良かったものを各地を回ってやっている話とかがありました。</p>

<h2>クラメソの請求を支える技術（サーバーレス編）</h2>

<ul>
<li>会場アンケート: 20代, 30代, 40代で3分の1ずつぐらい?</li>
<li>自己紹介<!-- @czkuk --></li>
<li>刷新の経緯</li>
<li>請求書が毎月300枚になってつらい</li>
<li>請求システムを刷新した話</li>
<li>新システムのポイント</li>
<li>データの一元管理</li>
<li>API, OAuth 2.0</li>
<li>Python simple_salesforce</li>
<li>MFクラウド請求で CSV フォーマットが変更されるということがあったので、ベータが提供されていた API に乗り換えた</li>
<li>OAuth 2.0 のクライアントとしての利用は簡単</li>
<li>Problem: Salesforce 24時間API呼び出し上限</li>
<li>更新がわからないので、全部のデータに対して API を呼び出したら、あっという間に上限に</li>
<li>Solved: S3 ETag</li>
<li>登録できた JSON ファイルは S3 にキャッシュ</li>
<li>変更のみを登録できるようになって解決</li>
<li>とある運用担当者の訴え: 「絶対にサーバーは管理したくないでござる」</li>
<li>Problem: 処理に時間がかる</li>
<li>Lambda は5分で強制タイムアウトがある</li>
<li>Solved: SQS worker Queue</li>
<li>Lambda ログ監視</li>
<li>CloudWatch Logs の Lambda によるログ監視</li>
<li>ログレベルごとに通知先を変えられる log2sns2.yml がオススメ</li>
<li>成功したら請求担当のみ、失敗したら開発者にもとか</li>
<li>AWS 月額利用費 $17</li>
<li>Salesforce について</li>
<li>請求締め部分は外製</li>
<li>visualforce, apex で画面を内製</li>
<li>カバレッジが高くないとリリースできないとか、よくできている</li>
<li>Trailhead で自習</li>
<li>外製? 内製?</li>
<li>仕様が固めやすい部分は外製</li>
<li>画面などトライアンドエラー部分は内製</li>
<li>過度なカスタマイズはしない</li>
<li>業務をパッケージにあわせる</li>
<li>刷新後</li>
<li>半月かかってた請求業務が数時間に</li>
<li>営業への契約確認 → ほぼゼロ</li>
<li>「しがないOL」がJavaプログラマーに</li>
<li>請求システムの話終了</li>
<li>昔話</li>
<li>糊付けエンジニア</li>
<li>「なんでもできる人なんていない」</li>
<li>同じシステムに長く関わっている人は少ない</li>
<li>1年ぐらいが多くて、5年以上は少ない</li>
<li>40歳の生存戦略</li>
<li>半径5メートルの人を幸せにするのが良い</li>
</ul>


<h2>基礎からのOAuth2.0</h2>

<ul>
<li><a href="http://bit.ly/cmdevio2017-oauth2">http://bit.ly/cmdevio2017-oauth2</a></li>
<li>自己紹介<!-- @daisuke_m --></li>
<li>OAuth の動機: 認証、属性取得、委譲</li>
<li>OAuth は認証の委譲プロトコルではなく、認可の委譲プロトコル</li>
<li>認証と認可の基礎知識</li>
<li>認証 (Authentication) : 通信相手が誰か、確認すること。</li>
<li>認可 (Authorization) : リクエストが許可されるかどうかを決めること。(ポリシー定義段階)</li>
<li>厳密には「ポリシー施行段階」は別だが、あまり区別しなくても良い</li>
<li>認証と認可は、本来、相互に独立した概念。</li>
<li>401 Unauthorized : 認証の失敗 『お前誰だよ』</li>
<li>RFC さえ混同しているが、本来は Unauthenticated が正しいのでは。</li>
<li>403 Forbidden : 認可の不足 『理解した。だが断る』</li>
<li>鍵 (key) と錠 (lock)</li>
<li>ユーザーには「鍵 (key)」を与えて、リソースには「錠 (lock)」をかける</li>
<li>認証の委譲 (OpenID Connect)</li>
<li>登場人物: End-User, Relying Party (RP), ID Provider (IdP)</li>
<li>RP=アプリ, ID Provider=TwitterとかFacebookとか</li>
<li>図解</li>
<li>ID Token</li>
<li>JWT (JSON Web Token) (じょっとと読むらしい)</li>
<li>ヘッダ、ペイロード、電子署名 (ID Provider の秘密鍵で署名)</li>
<li>Relying Party が ID Provider の公開鍵で検証</li>
<li>神は誰か? 問題</li>
<li>よくある Web+DBシステム: アプリケーション</li>
<li>API データソースになっても同様</li>
<li>OAuth においては神様はユーザー</li>
<li>だから OAuth は認可の委譲プロトコル</li>
<li>みなさんが OAuth を使いたくないであろう理由</li>
<li>ここから OAuth の話</li>
<li>OAuth 2.0 の登場人物 : Resource owner (RO), Client, Authorization server (AS), Resource server (RS)</li>
<li>例: RO=ユーザー, Client=togetter, ASとRS=twitter</li>
<li>図解</li>
<li>アクセストークン (AT) とは、リソースにかかった「錠」を開ける「鍵」</li>
<li>つまり、鍵に「誰?」を求めてはいけない。</li>
<li>では「OAuth認証」とは一体…?</li>
<li>認証したいだけなのに、渡す権限が大きすぎて怖い。</li>
<li>これを認証の根拠としてよい、という裏付けが弱い。</li>
<li>OAuth 2.0 が成し遂げたいこと (一部)</li>
<li>(リストはメモが取れなかったので公開されている資料参照)</li>
<li>Client が AT を得るフロー 4種</li>
<li>1: Client credentials grant</li>
<li>client id/secret を AT に引き換えるだけ</li>
<li>リソースオーナー不在</li>
<li>ユースケース: 古いスキームに適合。 Twitter の public timeline など。</li>
<li>2: Resource owner password grant</li>
<li>RO のユーザー名とパスワードを AT に引き換えるだけ</li>
<li>ユースケース: 公式クライアント向け</li>
<li>3: Implicit grant</li>
<li>AT がユーザーやブラウザーに見えてしまう</li>
<li>ユースケース: モバイルや JS アプリケーションなど、エンドユーザーの支配下にあるクライアント向け</li>
<li>4: Authorization code grant</li>
<li>フロントチャネル・バックチャネル</li>
<li>3 の場合は AT がフロントチャネルを通るので User Agent に漏れる</li>
<li>4 の場合は AT をフロントチャネルに流さない</li>
<li>最悪 AC は漏れても、単独であればリスクは低い</li>
<li>AC のライフタイムは短い</li>
<li>AC → AT の引き換えには client id/secret が必要</li>
<li>ユースケース: サーバーサイド Web アプリケーション向け</li>
<li>OAuth 2.0 が規定しないこと</li>
<li>1: Resource owner とのインタラクション様式</li>
<li>2: Resource owner の権限及びその確認</li>
<li>よく考えて設計しないと、 User が持っていない権限を Client に与えてしまう</li>
<li>OAuth における「スコープ」とは</li>
<li>User が委譲に同意した権限の種類</li>
<li>Client が行使できる権限の種類ではない</li>
<li>Client が AT を使って行使できる権限 = User が持っている権限と Client が持つ AT のスコープの共通部分</li>
<li>3: アクセストークンに関する諸々</li>
<li>3a: AuthZ server における AT の生成方法</li>
<li>現実的にはランダムか JWT の二択</li>
<li>3b: Client における RS への AT の送り方</li>
<li>3c: Resource server における AT の確認方法</li>
<li>ランダムなら AuthZ server にきくしかない</li>
<li>Sprint Security OAuth 2 独自実装</li>
<li>JWT トークンは revoke しづらい</li>
<li>まとめ</li>
<li>認証と認可の概念</li>
<li>アクセストークンの意味</li>
<li>認可コードの意味</li>
<li>スコープの意味</li>
</ul>


<h2>クラメソのWebサイトを支える技術</h2>

<ul>
<li>自己紹介<!-- @suzryo --></li>
<li>コーポレートサイト 2016年12月にリニューアル</li>
<li>静的ウェブサイトホスティング</li>
<li>AWS</li>
<li>S3: ファイル置き場</li>
<li>Amazon CloudFront: CDN</li>
<li>ACM: SSL の証明書管理</li>
<li>Amazon Route53 (ルートフィフティスリー): クラウドDNS</li>
<li>Amazon Route53 (ALIAS): A レコードと応答、ホスト名の省略 (ZoneApex) 設定可能</li>
<li>Amazon Route53 (ヘルスチェック)</li>
<li>Amazon Route53 (ヘルスチェック+DNSファイルオーバー利用例)</li>
<li>重み付けラウンドロビン (スポットインスタンス活用)</li>
<li>Amazon Route53 (GeoDNS利用例)</li>
<li>Route53ヘルスチェックとDatadog連携</li>
<li>AWSWAF</li>
<li>ステージングの表示制限にも利用</li>
<li>Amazon EC2 (CMS)</li>
<li>WordPress + staticpress</li>
<li>S3 に転送して公開</li>
<li>コーポレートサイト (動的ページ) は SaaS 利用</li>
<li>問い合わせフォーム : kintone + salesforce</li>
<li>サイト内検索: Google カスタム検索エンジン</li>
<li>ブログサイト <a href="http://dev.classmethod.jp/">http://dev.classmethod.jp/</a> 2011年7月1日公開</li>
<li>掲載記事数: 年間約3000件ペース (1日平均8.2件)</li>
<li>初期は EC2 スタンドアローン</li>
<li>Offload S3 導入: 画像データをS3、CloudFront で配信</li>
<li>RDS 導入: MySQL を RDS 化、DB 運用の省力化</li>
<li>ELB, Elasticbeanstalk 導入: ELB 配下で負荷分散、EB で管理改善</li>
<li>nginx 導入: ページキャッシュを追加</li>
<li>ApacheBench</li>
<li>Amazon Aurora 導入</li>
<li>拡張方針: キャッシュを多段化、クラウドの柔軟性を活用</li>
<li>アクセスログの解析</li>
<li>nginx → ltsv → fluentd → Amazon Kinesis Firehose → DB (アイコンでは何かわからず)</li>
<li>Athena</li>
<li>AWS WAF 連携 <a href="http://dev.classmethod.jp/cloud/aws/ids-with-kinesis-waf/">http://dev.classmethod.jp/cloud/aws/ids-with-kinesis-waf/</a></li>
<li>改善計画</li>
<li>評価システム: 執筆者評価, 記事のSNSシェア数</li>
<li>既存評価システム: ページ表示の度にSNS情報取得、再集計</li>
<li>新評価システム: 非同期に取得、S3 の集計済みデータを参照</li>
<li>AWS のマネージドサービス弄り倒してます</li>
<li>個々の詳細はブログにて</li>
<li>SaaS の紹介</li>
<li>Datadog</li>
<li>エラー率とか通知とか</li>
</ul>


<h2>Alexaで変わる開発、変わらない開発</h2>

<ul>
<li>Alexa の概要</li>
<li>Amazon Echo: スマートスピーカー, Alexa の機能を呼び出せる, 米英独など国外で展開中</li>
<li>Amazon Alexa: Amazon が提供する音声アシスタント, Echo という端末が呼び出しているサービス, 標準機能の他に、拡張機能を開発して呼び出せる</li>
<li>Alexa Custom Skill: アプリのように、独自開発のスキルを呼び出せる, 自作エンドポイントを登録して審査に通ればOK</li>
<li>Alexa Voice Service: Alexa のフロント側の規格, アプリにも組み込める</li>
<li>アプリ例: Friendly Voice Assistant</li>
<li>Alexa スキルの開発</li>
<li>サンプル: <a href="https://github.com/alexa/skill-sample-nodejs-highlowgame">https://github.com/alexa/skill-sample-nodejs-highlowgame</a></li>
<li>amazon.com でログイン → Alexa → Alexa Skill Kit で作成</li>
<li>デモ</li>
<li>使うサンプルを <a href="https://github.com/alexa/skill-sample-nodejs-fact">https://github.com/alexa/skill-sample-nodejs-fact</a> に変更</li>
<li>開発者コンソールで文字列でのテスト</li>
<li>APP ID の指定が <code>""</code> で括られていないように見えたけど、一瞬だったので見落としかなと思っていたら、エラーになったので、指摘してみたらやっぱりそこだったようでした。</li>
<li>echosim.io で音声でのテスト</li>
<li>デモ終了</li>
<li>スキルの構成要素: wake word, launch, invocation name, utterance, slot value</li>
<li>画像は <a href="https://developer.amazon.com/designing-for-voice/what-users-say/">https://developer.amazon.com/designing-for-voice/what-users-say/</a> 参照</li>
<li>Utterance をユーザが言うと Intent がプログラムに渡ってくる</li>
<li><a href="https://github.com/alexa/alexa-skills-kit-sdk-for-nodejs">https://github.com/alexa/alexa-skills-kit-sdk-for-nodejs</a></li>
<li>普通の Lambda の開発では webpack は使わないが、Alexa では使った方が良さそう</li>
<li>初回起動時間: 約5秒 → 約2秒</li>
<li>5秒は不安になる</li>
<li>ルーティング機能がプラットフォーム側</li>
<li>Lambda はステートレスだが、Skill が State を提供していて、会話を実現している</li>
<li>視覚表現はある?</li>
<li>Echo Show にはカードというのがある</li>
<li>HTML っぽいのは何?</li>
<li>SSML</li>
</ul>


<h2>感想</h2>

<p>知り合いが一人もいない勉強会に参加したのは久しぶりのような気がしました。</p>

<p>鍵と錠のたとえとか、 OAuth 2.0 が成し遂げたいことを元に複数フローで何ができていて、何ができていないのかなど、非常にわかりやすくて良かったです。</p>

<p>Salesforce も連携する何かを作るかもしれないので、 Trailhead というものの存在を知れたのは良かったです。</p>

<p>自社サイトを例にして Amazon のサービスの運用例を知れたのもおもしろかったです。</p>

<p>Alexa はそういうものもあるのか、とか、会話にするのは技術的な難しさよりもただ大変そう、という感じでおもしろかったです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2017 の3日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-20-rubykaigi2017.html"/>
    <updated>2017-09-20T09:59:32+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi2017</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2017">RubyKaigi 2017</a> の3日目に参加したので、そのメモです。</p>

<!--more-->


<h2>朝</h2>

<p>時間があれば広島平和記念資料館に行こうかと思っていましたが、宿を出るのが遅くなってしまって時間がなかったので行けませんでした。</p>

<h2>Compacting GC in MRI</h2>

<ul>
<li>自己紹介</li>
<li>草生える の英語解説で有名になった</li>
<li>Copy on Write Optimization</li>
<li><code>require 'objspace'</code> と <code>ObjectSpace.memsize_of(obj)</code> で CoW の確認</li>
<li>fork と CoW</li>
<li>CoW Page Fault</li>
<li>Unicorn での話</li>
<li>Page Fault を減らす方法</li>
<li>共有メモリの変更が原因</li>
<li>Garbage Collector の影響</li>
<li>Object Allocation</li>
<li>空きがあるとオブジェクトのサイズは OS のページより小さいので、1オブジェクトの生成でもページ全体のコピーが発生するのでコンパクションする</li>
<li>Two Finger Compaction (2本指コンパクション) というアルゴリズムを選んだ</li>
<li>欠点: 遅い、オブジェクトがランダムな場所に移動する</li>
<li>利点: 簡単!</li>
<li>アルゴリズム: オブジェクトの移動をして、参照の更新</li>
<li>Free Pointer と Scan Pointer で左右からみていってオブジェクトを左に空きを右に固まるように交換していく</li>
<li>オブジェクトを順番に見ていって参照を更新</li>
<li>移動先番号にしていたところを空きに変更</li>
<li>unicorn の fork 前に rails の読み込みと GC.start をするようにした</li>
<li>gc.c への変更の詳細解説</li>
<li>C 実装されている中にオブジェクトへのポインターを持っていると更新できないので、移動するとクラッシュする</li>
<li>そのため、そういうオブジェクトは移動しないようにピン留めしておく</li>
<li><code>hash_key(オブジェクト)</code> がメモリアドレスなので、移動できない</li>
<li>Dual References</li>
<li>C と Ruby の両方から参照されている場合も移動するとクラッシュする</li>
<li>グローバル変数もヒューリスティックスにピン留めする</li>
<li>文字列リテラル</li>
<li>リテラルを移動すると bytecode を変更する必要があるが、難しいのでまだ対応していない</li>
<li>結局何も移動できない?</li>
<li>ほとんどの問題は解決できる</li>
<li>現在使用中の Rails のコードでも 46% のオブジェクトは移動可能</li>
<li>コンパクション前後のグラフ</li>
<li>メモリ検査ツール</li>
<li><code>ObjectSpace.dump_all</code> : JSON でファイルに書き出せる</li>
<li>ヒープの断片化のグラフ</li>
<li><code>/proc/${PID}/smaps</code> はスキップ</li>
<li>まとめ</li>
<li>小さいプログラムにはあまり節約にならないのでプロダクションでテスト中</li>
<li>コンパクションは不可能だと思っていたが、その質問に答えることができなかったので、もっと早く試せばよかったと思った</li>
<li>不可能と思っても可能かもしれない</li>
</ul>


<h2>Irb 20th anniversary memorial session: Reish and Irb2</h2>

<ul>
<li>勝手に20周年記念講演</li>
<li>ちょっと irb の話と Reish の話をする</li>
<li>Ruby 考古学の復習と追加の話</li>
<li>irb の昔の名前の rbc の由来は bc コマンド</li>
<li>他に perl -de 0 や sample/eval.rb が開発のきっかけ</li>
<li>REPL (Read-Eval-Print-Loop)</li>
<li>Lisp の <code>(loop (print (eval (read))))</code></li>
<li>Ruby 的には <code>loop{p eval gets}</code></li>
<li>複雑な構文の言語では初ではないか</li>
<li>REPL の用途</li>
<li>Ruby の振る舞いを確かめる</li>
<li>ライブラリなどのデバッグ用コンソール</li>
<li>情報科学入門 Rubyを使って学ぶ という本では irb を使っているらしい</li>
<li>しかし irb 上で生活している人はいなさそう</li>
<li>そこで Reish</li>
<li>shell の上でも ruby 的な生活を満喫するため</li>
<li>Enumerable, Iterator (たぶん今ではブロックと呼ばれるもの全般をさしてそう), OO, ほか</li>
<li>何がシェルっぽいか: comma なし <code>""</code> とかなくても良い文字列ベース</li>
<li>Reish のコードは Ruby に変換して実行</li>
<li>パイプラインは lazy enumerator で繋がっている</li>
<li>ブロックも使えるが do を予約語にはしにくかったので <code>ls -l --do</code> という感じになっている (<code>{}</code> は普通)</li>
<li>デモ</li>
<li><a href="https://github.com/keiju/reish">https://github.com/keiju/reish</a></li>
<li>job コントロールもある</li>
<li>job ごとに Thread を起動している</li>
<li>補完</li>
<li>irb 再考</li>
<li>長い間開発は停止していたが Reish の開発で irb の方も構想が見えてきた</li>
<li>irb の lexer は使っている gem があるので、大幅に変更は難しそう</li>
<li>Reish は完全なパーサーを持っていて、高機能なことができている</li>
<li>irb2 = reirb ?</li>
<li>zsh の <code>ls --a[TAB]</code> で出てくるヘルプのようなことができるとうれしそう</li>
<li>zsh は 複数行の編集機能 (zle) があったり</li>
<li>Reish 用のマルチラインエディタ Reidline を開発中</li>
<li>Q(次の時間の発表者のaycabtaさん) メモ取れず</li>
</ul>


<h2>昼休み</h2>

<p>途中の時間でセッションを諦めて見にいくのは難しいかなと思って、コンビニで軽く食事をして、広島平和記念資料館に行ってきました。(Twitter で RubyKaigi 2017 の名札を見せると無料で入れるという情報があったため)</p>

<p>本館はリニューアル工事中で、東館だけが開いているということのようでした。</p>

<p>小学校の修学旅行できた覚えがあるのですが、最初の上の階をぐるっと見て回る常設展示は最近の情報もあって、昔来た時には絶対なかったものだなあと思いつつ見ていました。</p>

<p>最後に階段を降りた後にあった企画展示室のところは、昔トラウマになった白黒写真などが少しありました。もらったパンフレットには、閉館中の本館で展示していた資料などを展示していると書いてあるので、本館が復活すれば、昔見たようなものがたくさんあるのではないかと思いました。</p>

<h2>Ruby Parser In IRB 20th Anniversary&hellip;Now Let Time Resume</h2>

<ul>
<li><a href="https://bugs.ruby-lang.org/issues/11389">https://bugs.ruby-lang.org/issues/11389</a></li>
<li>asakusa.rb とか</li>
<li>IRB: 1997, RDoc: 2003</li>
<li>RDoc は IRB の lexical analyser を使っていた</li>
<li>legacy になってしまってメンテナンスコストが増大していた</li>
<li>private def foo のような書き方の対応とか</li>
<li>IRB: 1997, RDoc: 2003, Ripper: 2004</li>
<li>parse.y, IRB, RDoc の3個の Ruby パーサーが重複して含まれている</li>
<li>2016年12月から作業開始</li>
<li>RDoc がクラッシュしたので直した</li>
<li>古い実装と書き直した実装で出力を比べて見たら、 RDoc がバグっていたので古い lexer で新しいものに対応した</li>
<li>最終的にマージされた</li>
<li>後置 if と普通の if の区別などに <code>lex_state</code> が重要</li>
<li><a href="https://github.com/ruby/rdoc/pull/512">https://github.com/ruby/rdoc/pull/512</a></li>
<li>RDoc 6 beta</li>
<li>質疑応答 (翻訳は zzak)</li>
<li>Q(ujm): <code>lex_state</code> を古い ripper では pure ruby で実装したのはどうやったみたいな質問っぽい → メモ取れず</li>
<li>Q(かねこさん): ripper は使っているバージョンの ruby で動くので、古い ruby バージョンのドキュメントを処理すると問題が起きることもあるのでは? → 壊れることもあるかもしれないが、大丈夫なのではないかという感じ(?)</li>
<li>Q(tenderlove): ripper はコード内のコメントを保存していますか? → AST の段階ではコメントは含まれないが、tokenize しかしていないので、開始、中身の謎の文字列、終端のようになって、中が何を意味するかには踏み込まないので、情報が消えたりはしない。</li>
<li>Q(ujm): RDoc は既存のものと互換性があるように ripper に置き換えたが次は何に挑戦する予定? → Ruby コードの情報をとるライブラリ、 irb の TAB キーでの補完でドキュメント (RDoc) も出るようにしたい</li>
<li>Q: irb のパーサーをどうにかする予定は? → nobu が ripper に置き換えようとしたが諦めた。多分できそうだが、大変そう。メソッドドキュメントの表示をしたい。</li>
<li>nobu の irb は syntax highlight がついていた。</li>
<li>syntax highlight もやりたい。</li>
<li>Q: Cのファイルのドキュメントは? → 今回の変更とは無関係。</li>
<li>C extension のドキュメントの方も必要に応じてみた方が良いのかもしれないが、まだ見ていない。</li>
<li>Q(ujm): 6ページあった修正点の中からピックアップするなら? → legacy な lexer で、新しい ruby syntax のサポートが大変だった</li>
<li>テストが壊れた</li>
<li>Q: 聞き取れず → 答えられない</li>
<li>Q: 1日どれくらいやっている? → 1ヶ月ぐらい、1日16時間?</li>
</ul>


<h2>一回休み</h2>

<p>セッションは諦めて休憩していました。</p>

<h2>Writing Lint for Ruby</h2>

<ul>
<li>SideCI</li>
<li>Lint ツール: RuboCop, Reek, Brakeman, Querly, &hellip;</li>
<li>Rules of Lint, Lint tools をかけるようになることがこのプレゼンの目標</li>
<li>lint tool があればより安全にプログラムが作れるようになる</li>
<li>Lint とは何か?</li>
<li>もともと C 言語用のツールの名前だったが、今ではいろんな言語にある</li>
<li>RuboCop の例を紹介</li>
<li><code>if 10 &lt; x &lt; 20</code> は実行するとエラー</li>
<li><code>foo bar { body }</code> や <code>x *y</code> は曖昧</li>
<li>そういうコードをチェックする</li>
<li>どう動くか?</li>
<li>AST (Abstract Syntax Tree) で扱う</li>
<li>parser gem を使って AST に変換している</li>
<li>parser gem の AST の node は type と children を持つ</li>
<li>行、桁、ソースなどのメタデータも持っている</li>
<li>他のパーサー</li>
<li>Ripper は標準で含まれているが、パースで想定するバージョンと実行する ruby のバージョンが同じになってしまう</li>
<li>ruby 2.4 で ruby 2.0.0 の lint ができない</li>
<li>ruby_parser は使ったことがないが parser gem と似たような感じらしい</li>
<li>Traverser: Depth-first search をして node ごとに <code>on_send</code> などの <code>on_#{node.type}</code> を呼び出す</li>
<li>if の条件に Integer リテラルのみを直接書いた場合に警告を出す例</li>
<li>Lint の限界 (Ruby の場合)</li>
<li>ローカル変数はただの変数</li>
<li><code>num = 1; if num; something; end</code> のようなコードは対象外</li>
<li>不可能ではないが複雑になる: たとえば Brakeman では追跡している</li>
<li>メソッドの定義やクラスや定数が正確にはわからない</li>
<li><code>sprintf('%s, %s', str)</code> は警告されるが <code>sprintf</code> が再定義されていると意味がない可能性があるが、そんなことはしないだろうと想定して動いている</li>
<li>動的なものは Lint より Test の方が向いている</li>
<li>Lint は AST がわかる</li>
<li>Lint は実行せずに解析できる</li>
<li>トレードオフがある</li>
<li>RuboCop に cop (ルール) を追加する</li>
<li>汎用的なものはヘルパーメソッドがあるので書きやすい: <code>if 1 ; end</code>, <code>ruby -cw</code> のようなもの</li>
<li>デモ: <code>rake new_cop[Lint/LitInCond]</code></li>
<li>特定のフレームワークに対して追加したい場合</li>
<li>RuboCop Plugin としてかける</li>
<li>例: backus/rubocop-rspec</li>
<li>1から作る場合</li>
<li>たとえば Lint + Git Diff, Ruby + YAML 用など</li>
<li>新しく作った方が作りやすい</li>
<li>質疑応答</li>
<li>Q: sprintf の再定義のような <code>Kernel</code> に再定義しているのを検出する cop は? → ない。ある程度は作れそう。本体には入りそうにない。</li>
<li>Q: デフォルト false では? → デフォルト false のものはメンテされないという現実があるので入れたくない。</li>
<li>Q(mame): RuboCop のゴールは? <code>10 &lt; x &lt; 20</code> のような初心者が陥りがちなものだけではなく、コーディングスタイルを押し付けられる感じがある? → 二面性がある。スタイルチェッカーと Lint としての側面がある。どっちも増えそう。</li>
<li>アップデートが辛い問題はツールを作っている。Style 系をオフにするとか。</li>
<li>Q: 汎用的なもののようにみえるが、プロジェクト固有のものはどうすれば? → 自社用のプラグインを作る or soutaro さんが作っている YAML でかくものがあるのでそれを使う のが良いのではないか</li>
<li>Q: カスタムコップを作りたい場合のドキュメントがなさそうな理由は? → 現状カスタムコップ、プラグインを作る仕組みが整備されていない。issue が止まったままなので頑張りたい。</li>
<li>Q: <code>new_cop</code> タスクは stable? → 本体に入っているので大丈夫だが、将来的に変更される可能性はあるかも。</li>
<li>Q: Rails は本体に config が入っているが? → 現状では特にロードマップはない。個人的には rails 関連は外に切り出したい。</li>
<li>Q: 一部は <code>ruby -cw</code> にあった方が良いのでは? → 本体に持っていく動きは今のところない。<code>ruby -cw</code> とかぶっているものもある。パフォーマンス的にできるのかというものもある。</li>
<li>Q: メモ取れず → ローカル変数をトレースするのはやりたいが、良い方法を思いついていないので、手がついていない。</li>
<li>Q: 速度が遅いのが気になっている。 parser gem が遅いのではないか。バージョンをわけたいという希望はないので ripper で高速化できないか? → ライブラリの CI で困りそう。インターフェースが違うので簡単に移行できない。</li>
<li>Q(znz): feature request の issue を書いたことがあるが、request だけだと難しい? → できるだけ実装するか、無理なら無理と返信したいが、たまっていてなかなか手が回っていない。</li>
</ul>


<h2>How to write synchronization mechanisms for Fiber</h2>

<ul>
<li>dRuby 本まだ買えます</li>
<li>Web 版もあります</li>
<li>Process - Thread - Fiber</li>
<li>80s はプロセスへの憧れがあった</li>
<li>90s のノンプリエンティブな協調型マルチタスクって Fiber じゃん?</li>
<li>実際のシステムは、プロセスだけ隔離しても結局はダメだった</li>
<li>ほかのプロセスとどうにかして共有が必要だった</li>
<li>IPC はめんどくさい</li>
<li>説明や使うのがめんどくさい</li>
<li>Thread: 多くの人にはプロセスの方がいいと思う</li>
<li>ほかのスレッドのメモリを触らないようにものすごく気をつける必要がある</li>
<li>Thread を使うには OS よりうまく扱えるという傲慢さが必要</li>
<li>Fiber: ほとんどの人には Thread の方がいいと思う</li>
<li>Fiber を使うには Ruby よりコンテキストスイッチをうまく扱えるという傲慢さが必要</li>
<li>Fiber → 自動的にスイッチしてよ → Thread → メモリを自動的に保護してよ → Process</li>
<li>Fiber を使ったフレームワークがすごいらしい</li>
<li>Fiber を使うプログラムを自分でも作って見たいと思った</li>
<li>Thread よりも難しいと思ったら、その通りだったので共有したい</li>
<li>Fibonacci の例</li>
<li>ループで書くと簡単</li>
<li>Fiber で書く例 (初日であったような感じ)</li>
<li><code>Fiber.new</code>, <code>Fiber#resume</code>, <code>Fiber.yield</code></li>
<li>new しただけでは実行されない</li>
<li>resume で Fiber にコンテキストを移す</li>
<li>一度目は先頭へ</li>
<li>二度目以降は <code>Fiber.yield</code> したところへ</li>
<li>これは何度目の resume かな…</li>
<li>resume と yield の概念がとっつきにくい</li>
<li>Enumerator で書き直す</li>
<li>おすすめ</li>
<li>次のテーマは同期 (待ち合わせ)</li>
<li>Thread での Queue を介した協調の Fiber 版を書きたい</li>
<li>rendez-vous (Rdv) の実装</li>
<li>イディオム: とりあえず resume、行き詰まったら yield</li>
<li>Fiber.new してすぐに resume すると Thread.new のように使える</li>
<li>やれることがなくなったら yield して Fiber.current を覚えてもらう</li>
<li>実装例: push, pop</li>
<li>Fiber だと条件検査の排他制御が不要</li>
<li>Thread だと危険</li>
<li>動きの例</li>
<li>同期の条件検査に排他制御が入らないので、Fiber のつもりが Thread だったというのは危険なので、Auto Fiber のようなものより、Thread のつもりが Fiber だったの方が安全ではないか</li>
<li>Multiplexer: socket のある例</li>
<li><code>read_nonblock</code> を使う</li>
<li>ブロックしそうな時 (<code>IO::WaitReadable</code>) に yield してメインループに戻る</li>
<li>block-ish nonblock I/O</li>
<li>ライブラリを作った: <a href="https://github.com/seki/bartender">https://github.com/seki/bartender</a></li>
<li>実際のアプリケーション例</li>
<li>tiny_drb の抜粋</li>
<li>昔よく見たバグの話</li>
<li>デモは作って見たが、見てもよくわからなかったので、説明</li>
<li>Multiplexer のまとめ</li>
<li>Fiber 入門のまとめ: 難しいよね</li>
<li>Fiber は難しいところが面白い</li>
<li>全体が暗記できるぐらいのサイズだったので罠を避けられた</li>
<li>すみずみまでわかっていないとハマることがある</li>
<li>ハマる可能性があると覚えておけば大丈夫</li>
<li>例: twitter クライアントの gem が全部読んで String にしてから JSON.parse するのでハマったので、ストリーム対応の JSON.parse はあるのかな?</li>
<li>ハマりそう: RDBMS のドライバ</li>
<li>質疑応答</li>
<li>Q: 読み書きしようとして安直にするとブロックするが、読めるだけ読むのがあるが書く方は? → 書く方もかけるだけ書くというのがある</li>
<li>Q: gets とか使えなくて不便? → 聞き取れず</li>
<li>Q(cuzic): Fiber の方が良いユースケースは? → Enumerator が良い例</li>
<li>Q(cuzic): 外部イテレーターではなく agent のようなパフォーマンスがよくなるという例は? → ゲームのキャラクターを動かすような誰かがビートを刻むような例は良さそう。 I/O は向いてなさそう。 Auto Fiber や co-routine の例をみると良い例があるのかも。</li>
<li>Q(joker): Thread で書いた場合は GIL で1コアでしか動かないが、(聞き取れず)だと別実装だと複数コア使えるとかあるが、Auto Fiber とかだと使えるようになる? → Fiber は Thread の中で動くので無理ではないか</li>
<li>Q(joker): 外部イテレーターにするとか見せ方の変更はできるが、マルチコアでパフォーマンスの改善という用途ではない? → そう理解している</li>
<li>Q: Thread と Fiber は違うのになぜ Fiber という名前なのかという感じの質問っぽい → Windows でそういう名前だから</li>
</ul>


<h2>MEDLEY のスポンサーセッション</h2>

<ul>
<li>会場アンケート</li>
<li>知っている人? → 少ない</li>
<li>昨日呑んだくれて疲れている人? → それなり?</li>
<li>遠隔診療が実質解禁されたので CLINICS というアプリを作った</li>
<li>医療 x IT への挑戦</li>
</ul>


<h2>Towards Ruby 3x3 performance</h2>

<ul>
<li>Ruby 3 performance goal</li>
<li>RTL (register transfer language) insns</li>
<li>RTL insns と stack insns の比較</li>
<li>RTL insns の精製方法</li>
<li>RTL insns のオペランド</li>
<li>RTL complications</li>
<li>RTL insn combing and specialization</li>
<li>Speculative insn generation</li>
<li>RTL insn status and future work</li>
<li>Possible JIT approaches</li>
<li>Option 1: Writing own JIT from scratch</li>
<li>メンテナンスするのが大変</li>
<li>Option 2: Using widely used optimizing compilers</li>
<li>コンパイルが遅い</li>
<li>Option 3: Using existing JITs</li>
<li>License issues and patent minefield</li>
<li>Own or existing JITs vs GCC/LLVM based JITs</li>
<li>How to use GCC/LLVM for implementing JITs</li>
<li>MJIT: <strong>M</strong>RI JIT, <strong>M</strong>ethod JIT</li>
<li>Example</li>
<li>MJIT performance results</li>
<li>どれが何かわからないグラフ</li>
<li>途中からちゃんと下まで出てきた</li>
<li>Recommendations to use GCC/LLVM for a JIT</li>
<li>MJIT status and future directions</li>
<li>RTL と MJIT が MRI の一部になるかはわからないがこの方向性で頑張る</li>
<li>質疑応答</li>
<li>Q(tenderlove): (メモ取れず)</li>
<li>Q: inline 化の話っぽい</li>
<li>Q: メモリ使用量の話っぽい</li>
<li>Q(ujm): make check が通らない理由は? → 並列実行とか callcc とか GC が関わるものとか(?)</li>
<li>Q: モチベーションは? → (よくわからず)</li>
<li>Q(ko1): GCC でループが最適化が測地になる例があったが、再定義対応は? → (よくわからず)</li>
<li>matz のコメント</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>MINASWAN 乙</li>
<li>936枚チケットが売れた</li>
<li>Next: Sendai May 31 (Thu) - June 2 (Sat)</li>
</ul>


<h2>全体の感想</h2>

<p>とりとめもなく色々と。</p>

<p>Twitter で @takatayoshitake さんとかの情報提供が色々と便利でした。(特に最終日のロッカー情報)</p>

<p>Twitter のハッシュタグ <code>#rubykaigi</code> は流れが速いと全然追いきれないので、あとで togetter でみれるかなと思っていたら、今年は特になさそうで残念な思いをしました。
RubyKaigi 全体のハッシュタグも、部屋ごとのハッシュタグも入り口に書いてあっただけで、特にアナウンスはなかった気がするので、部屋ごとのハッシュタグはつけずに <code>#rubykaigi</code> だけのツイートを、その人がどの部屋に参加していたか識別してまとめに振り分ける、という判断をしつつ、まとめを作ってくれる人が必要そうな気がします。</p>

<p>台風が移動に影響したり、カープ優勝でセールがあったりなど、外部要因でもいろんなことがあったのが印象深かったです。</p>

<p>3トラックあったので、興味があったのに見に行けなかったものも多いので、あとでチェックしたいと思いました。</p>

<p>昼の弁当スポンサーがなかった代わりに、夜の懇親会が大量にあったのがよかったです。</p>

<p>LT の発表は通訳の人との打ち合わせがない分、気軽だった代わりに、ちゃんと時間で切られる LT が久しぶりだったので、非常に緊張しました。
そして、実際には練習より早口だったのか、予定よりたくさん喋っても時間が余ってしまうという感じになってしまいました。
ネタが多い分には、後でRuby関西で使うなりブログに書くなり、他の発表場所はあるので、今後機会があれば多めに用意して調整できるようにしてみたい、と思いました。
日本語での発表でも、発表資料は頑張って英語で書いておいたからか、<a href="https://twitter.com/drbrain/status/910069298789588998">英語での反応があった</a>のが嬉しかったです。
基本的に何か反応があると嬉しいものなので(承認欲求)、発表とかしないという人でも、積極的にいいねをしたり、スターをつけたりすると良いと思います。</p>

<p>開催の頭が連休だと、休みの部分を観光に、と思っても、期間中に出て来たオススメ情報を活用できないので、来年のように、後に休みが続く方が嬉しいと思いました。
今回の場合は、台風で日曜に観光は無理だったということがありましたが、広島平和記念資料館に無料で入れるという特典が、前日に知らずに行っていたら無駄になる、ということがおきたのではないかと思いました。</p>

<p>基本的に人を覚えるのが苦手なので、今回会った人で、次回忘れていたらすみません。</p>

<p>Workshop は気になったのと、普通の発表は後で録画をみることもできる、というので、できれば参加したかったのですが、 <a href="https://github.com/rubydata/rubykaigi2017">https://github.com/rubydata/rubykaigi2017</a> の事前準備をしようとしたら、前日に止まっていたホテルだと帯域制限らしき状態になってしまって、 <code>rake docker:pull</code> できなかったということもあって諦めました。
Afternoon Break の時間に重なっていた方も、 LT の前の接続確認をする必要があったので、諦めました。</p>

<p>LT の接続確認は、なぜか最大化したときの表示がリサイズ前の範囲しか表示されない、という現象がなおらず (以前は次のページに移動したり、一覧ページに移動したりすればなおっていた)、発表準備期間中に n0kada さんが rabbit の方に終了時に落ちる (正常終了ではなく SEGV 的な終わり方をする) のを報告していたので、同じ macOS っぽいとわかっていたので、どうしていたのかきいてみたら、 <code>rabbit -S 1920,1080 hoge.md</code> のように <code>-S</code> で画面サイズを指定して起動すれば良いと教えてもらって解決しました。ありがとうございました。</p>

<h2>まとめ</h2>

<p>色々と大変なこともありましたが、大きな問題もなく、無事終わって良い RubyKaigi でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2017 の2日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-19-rubykaigi2017.html"/>
    <updated>2017-09-19T09:42:14+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi2017</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2017">RubyKaigi 2017</a> の2日目に参加したので、そのメモです。</p>

<!--more-->


<h2>ドリコムさんのスポンサーセッション</h2>

<h2>The Many Faces of Module</h2>

<ul>
<li>島根との時差ボケで眠い</li>
<li>RubyKaigi は世界最大の Ruby カンファレンス</li>
<li>The best and brightest</li>
<li>matz が母国語で話をする (翻訳付き) のはここ (と RubyWorld Conference (技術よりではない) だけ)</li>
<li>Recent topics</li>
<li>amatsuda さんが発表内容のハードルを上げてくる</li>
<li>どこのカンファレンスでもコミュニティの主要な日本人をみかける</li>
<li>Performance, Concurrency, Static Types は他のセッションにお任せ</li>
<li>天才プログラマーではなく、才能ある言語デザイナーだと思っている</li>
<li>あまり評判のよくない言語も含めて例外なくすべてのプログラミング言語を愛している</li>
<li>&ldquo;matz に他言語に攻撃的であるので嫌い"と言われることがある</li>
<li>理由を聞いたことがある</li>
<li>いいところはいい、悪いところは悪いと言った時に Ruby の宣伝のように取られることがあるらしい</li>
<li>Python の ML に、という過去のあやまちのようなこともあることはある</li>
<li>Simula (1968) : 最初のオブジェクト指向言語と言われている</li>
<li>Lisp や Smalltalk 経由でオブジェクト指向を取り込んでいる</li>
<li>Dr. Kristen Nygaard : すべてのオブジェクト指向言語はわしの孫のようなもの、と言われたという話</li>
<li>継承の概念が重要</li>
<li>単一継承と多重継承</li>
<li>多重継承は調べられた限りでは Lisp (Flavors) が最初</li>
<li>多重継承はダイヤモンド継承とかのネットワーク構造になりうる</li>
<li>言語設計者は最悪のケースを考えなければいけない、なぜならするやつがいるから</li>
<li><a href="https://en.wikipedia.org/wiki/C3_linearization">C3 linearization algorithm</a></li>
<li>Mixin : Lisp では Flavors と呼ばれていた</li>
<li>MIT 近くにあった Steve&rsquo;s ice cream shop が発想の元</li>
<li>バニラアイスクリームにチョコチップを、という感じ</li>
<li>Flavors は抽象クラスでインスタンスは作れない</li>
<li>Flavors 同士を混ぜる (継承する) ことはできるが、元のクラスの方は混ぜることができない</li>
<li>Ruby の module の話</li>
<li>1: Module は mixin の単位として作られたのが最初の用途</li>
<li>他の機能としても使われるようになってきた</li>
<li>2: ネームスペース、たとえば <code>class Net::HTTP</code></li>
<li>3: シングルトン、たとえば <code>module FileUtils</code></li>
<li>4: 機能の集まり、たとえば <code>module Math</code></li>
<li><code>module_function</code></li>
<li>5: メソッド結合の単位として</li>
<li>AMC (alias method chain) の呪い</li>
<li>複数回使うと壊れやすい</li>
<li><code>Module#prepend</code> : 同じ名前で複数の提案があったので、誰が元祖かわからない</li>
<li>欠点はダイナミックさが足りない: 一度入れたものを外せない</li>
<li>include や prepend が外せないのは意図的にそうしている</li>
<li>しばらく聞き流していたが CLOS (Common Lisp Object System) の method combination を思い出した</li>
<li>アスペクト指向プログラミングにも繋がる</li>
<li>似ているのは同じ人 (Gregor Kiczales) が考えた機能だった</li>
<li>6: refinement の単位</li>
<li>オープンクラスの機能を利用してモンキーパッチングができる</li>
<li>昔は ゴリラパッチング</li>
<li>さらに昔は ゲリラパッチング</li>
<li>有名な利用例は Active Support</li>
<li>全体に影響があるので、一箇所にまとめておくのが良い</li>
<li>できるからやればよいというものではない</li>
<li>できれば特定の範囲に影響範囲をせばめたい</li>
<li>変数がグローバル変数だけだったのがローカル変数ができたように</li>
<li>似た発想: ClassBox (Java/Smalltalk), Selector Namespace (Smallscript / (ECMAScript4))</li>
<li>local rebinding : 置き換えたものがメソッドを呼び出した先でも置き換えられるかどうかに違いがある</li>
<li>GUI で Windows 風のボタンにするか Mac 風のボタンにするかを切り替えられたり</li>
<li>Selector namespace = lexical</li>
<li>ClassBox は先まで置き換えるので強力</li>
<li>Refinement</li>
<li>使用例: 既存のクラスにメソッドを追加したい</li>
<li>C# extension のようなもの</li>
<li>想定している使用例 RSpec</li>
<li>using をあちこち書かないといけないのでまだ使われていない</li>
<li>refinement が最適な解決策とは思っていない</li>
<li>local rebinding がないから</li>
<li>知らないところで挙動が変わるということがないということとのトレードオフ</li>
<li>7: Structural signature</li>
<li><p>Structural type check に使われるかも</p></li>
<li><p>Performance</p></li>
<li>Benchmark Suite, MJIT, Rubex</li>
<li>Concurrency</li>
<li>Fiber, (Guild), Auto Fiber</li>
<li>normalperson さん: 会ったことある人がほとんどいない, 飛行機に乗らない,  プロプラなサービスは使わない, unicorn の人</li>
<li>Static analyses or インタラクティブプログラミング</li>
<li><p>これもいくつか発表がある</p></li>
<li><p>Ruby は my language ではなく our language</p></li>
<li>コミュニティの努力</li>
<li><p>みんなで Ruby をもっと良くしていこう、世界を良くしていこう</p></li>
<li><p>Sponsors</p></li>
<li><p>質疑応答</p></li>
<li>Q(ujm?): 遠い将来に複数のライブラリの複数バージョンを同時に使用できる構想はあるか? → そういう触れ込みの言語はあるがうまくいっている例がまだなさそう。Ruby のネームスペースはシンプル。誰でも使えるようなパッケージシステムはまだできてない。発明されれば取り込みたい。</li>
</ul>


<h2>An introduction and future of Ruby coverage library</h2>

<ul>
<li>Esoteric Recipe</li>
<li>Ruby に対する主な貢献</li>
<li>今日の話はそのうちテストカバレッジの話</li>
<li>会場アンケート</li>
<li>Ruby or Rails を production で使っている人? → 多い</li>
<li>テストをしている? → 多い</li>
<li>カバレッジを測定している? → それなり</li>
<li>カバレッジとは?</li>
<li>実行 (テスト) されていないコードを見つけるなど</li>
<li>関数カバレッジ</li>
<li>行カバレッジが良く使われている</li>
<li>コメントや else や end の行は無視される (対応する iseq がない行)</li>
<li>後置 if で行全体は実行されたと判断されるなどが弱点</li>
<li>ブランチカバレッジ</li>
<li>ビジュアライズが難しい</li>
<li>今までは行カバレッジしかサポートしていなかった</li>
<li>他のカバレッジの紹介</li>
<li>C0/C1/C2 カバレッジ</li>
<li>C0 = 行カバレッジ</li>
<li>C1 = branch or path?</li>
<li>C2 = condition or path?</li>
<li>Ruby にとってカバレッジは重要</li>
<li>あまり使われていない理由は?</li>
<li>あまり知られていない? 使われ方が知られていない? 機能が不十分?</li>
<li>カバレッジはコードについての網羅だけで仕様をカバーしているかどうかは計測できない</li>
<li>カバレッジは指標であって、ゴールではない</li>
<li>カバレッジをゴールにすると、あまりよくないテストをつくりがち</li>
<li>テストデザインをちゃんと考えながら追加するのが大事</li>
<li>目安</li>
<li>人が傷ついたりするような重要なモジュールは 100% にした方が良いが他はそうでもない</li>
<li>環境によって実行されないコードもあったりするのでほどほどに</li>
<li>SimpleCov</li>
<li>使い方は test/test_helper.rb の頭で <code>require "simplecov"; SimpleCov.start</code></li>
<li><code>coverage.so</code> は後でロードされたライブラリは測定対象にならないので、測定対象より前に、というのが重要</li>
<li>テスト結果は nil になっている行は無視される行</li>
<li><code>def</code> の行はメソッド定義自体の実行回数で、メソッドの内容が実行された回数ではない</li>
<li>Ruby 本体用に作ったので experimental feature と書いてあるが、使われるようになったので気軽に変更しにくくなった</li>
<li>Concov</li>
<li>他の言語</li>
<li>C/++: GCOV/LCOV</li>
<li>Java: いろいろ</li>
<li>JavaScript: Istanbul</li>
<li>Ruby 2.5 に向けての計画</li>
<li>関数カバレッジとブランチカバレッジをサポートしたい</li>
<li>API を後悔しないものにしたいので、意見があれば <a href="https://bugs.ruby-lang.org/issues/13901">Add branch coverage</a> にコメントを</li>
<li>API はキーワード引数を受け取れるようにした</li>
<li>結果の同じ行に</li>
<li>カバレッジのオーバーヘッド</li>
<li>LCOV の可視化例</li>
<li>securerandom の環境依存のところが実行されていない例</li>
<li>今後の予定</li>
<li>callsite coverage: <code>obj.foo.bar</code> の foo で例外が実行された場合とか</li>
<li>Block coverage: <code>ary.map { ... }</code> で空配列だけだとブロックの中が実行されない可能性</li>
<li>質疑応答</li>
<li>Q(すとうさん) 実行されなくても大丈夫なところはメモしておけると、あとで見直すときにわかるので、何かないか? → <code>coverage.so</code> ではなく、ラッパー側で。</li>
<li>Q(hsbt) SimpleCov は coverage.so だけで取れるようにならない? 依存ライブラリを減らしたい。 → 改良がどんどん進む余地がある部分は、将来の拡張の余地がなくなるので、あまりやる気がない。</li>
<li>amatsuda: SimpleCov のメンテナもやっているので、ブランチカバレッジ対応とか必要があればやる気はある</li>
<li>Q(amatsuda) 手伝って欲しいところとか? → Java とかだと IDE との連携が便利らしい。そのへんのエコシステムを一緒に作ってくれる人が増えるとありがたい</li>
</ul>


<h2>What visually impaired programmers are thinking about Ruby?</h2>

<ul>
<li>自己紹介</li>
<li>Non Visual Desktop Access (NVDA)</li>
<li>Mac には Insert キーがないので、Escape キーを代わりに使える拡張</li>
<li>Excel の罫線の読み上げなど他の国の人がやらないようなところをやっている</li>
<li>島根県 CMS はアクセシビリティがしっかりしている</li>
<li><a href="https://github.com/edhowland/viper">https://github.com/edhowland/viper</a></li>
<li>Mac のターミナルの読み上げ機能を利用して文字を出力して読み上げさせるエディタ</li>
<li>Braille Memo BM46</li>
<li>Console (Terminal) applications</li>
<li>Terminal + screen reader だけ使っている人はエンジニアもいる</li>
<li>デモ</li>
<li>展示ディスプレイとの組み合わせでリモートの Linux マシンの Emacs を操作して ruby プログラムを編集するようなデモ</li>
<li>インデントはビープ音で表現していた</li>
<li>Screen reader, Tactile</li>
<li>アクセシビリティ対応のモダンなテキストエディタ: Visual Studio Code, Eclipse</li>
<li>Eclipse のデモ</li>
<li>Ruby の利点</li>
<li>日本語ドキュメント</li>
<li>読みやすい、描きやすい、コード量が少ない</li>
<li>サーバーエンジニア用のツール</li>
<li>テスト駆動</li>
<li>Ruby の欠点</li>
<li>Windows アプリの作り方に良い方法がない</li>
<li>GUI がなかなか良いものがない (visual ではない方法で)</li>
<li>Tk はアクセシブルではない</li>
<li>そういうときは、お手上げか文字認識で頑張るしかない</li>
<li>GUI フレームワークとアクセシビリティ</li>
<li>アプリケーションは OS から問い合わせが来た時に適切な情報を返せる必要がある</li>
<li>wxRuby は良いが、開発が止まっていて残念</li>
<li>ドキュメンテーションツール: rdoc, yard</li>
<li>ハッピーだったり辛かったりするデモ: Windows 10 + NVDA + Firefox</li>
<li>メインのランドマークに移動するショートカットキーがある</li>
<li>見出しでジャンプできたりできなかったり</li>
<li>rdoc はマウスホバーするとソース表示のトグルが出てくるのが気づきにくい</li>
<li>yard もソースを展開して読むことができる</li>
<li>メソッドが見出しになっていると探しやすくて良いのに、という話がある</li>
<li>なぜ重要か?</li>
<li>標準に準拠</li>
<li>機械処理などにも強い</li>
<li>誰もがハンディキャップを持つ可能性がある</li>
<li>デジタルになることがそもそも可能性を広げている</li>
<li>Ruby のアクセシビリティは良いがまだ良くできる</li>
<li>知り合いの視覚障害者が来てくれるかと思ったが、ハードルが高かったようなので、そういう人たちも来れるようになると嬉しい</li>
<li>質疑応答</li>
<li>Q: 健常者が普通に作っているだけでは気づきにくい点があるので、実際にチェックしてもらうのが重要 → NPA とかでアクセシビリティ診断とかやっている</li>
<li>Q: ドキュメントのアクセシビリティ。他の言語 sphinx とか? → 確認できてない。興味はある人はいる。悪い評判は聞いたことがない。また調べて Python のコミュニティで発表したい。</li>
</ul>


<h2>Regular Expressions Inside Out</h2>

<ul>
<li>会場アンケート</li>
<li>正規表現を使ったことある人? → ほとんど</li>
<li>正規表現でてこずったことある人? → ほとんど</li>
<li>中身を見たことある人? → 1,2人</li>
<li>Onigmo, Onigumo</li>
<li>鬼雲? 鬼蜘蛛?</li>
<li>最小の例: <code>//</code></li>
<li>何もマッチしない? → wrong</li>
<li>どんな文字にもマッチしない</li>
<li>空文字列にマッチ</li>
<li>文字の先頭・間・末尾にマッチ</li>
<li><code>'abcde'.gsub //, 'x'</code></li>
<li>空の正規表現が隠れていることがある: <code>"xyz" =~ /a+|b*/</code></li>
<li>有効な使い方</li>
<li><code>=~</code> (<code>match</code>), <code>sub</code> の他に <code>slice</code>, <code>split</code>, <code>scan</code>, <code>gsub</code></li>
<li>Pure Ruby で効率的な Unocode の正規化</li>
<li><code>unicode_normalize</code></li>
<li>Unicode Standard Annex #15</li>
<li>German to NFC</li>
<li><code>gsub /[AaOoUu]\u0308/, {...hash...}</code></li>
<li>Unicode にはもっとたくさんの組み合わせがある</li>
<li><code>/[BaseCharacters][CombinationCharacters]*/</code></li>
<li>実際のものは <code>lib/unicode_normalize/tables.rb</code> にある</li>
<li>文字にしたいが nobu に反対されている(?)ので <code>\uXXXX</code> のまま</li>
<li>ハッシュも工夫している</li>
<li>Ruby が速くなれば速くなる</li>
<li>gsub にハッシュを渡せるのは Ruby だけなので他の言語だとできない</li>
<li>gsub にハッシュが使えるようになった developer meeting が初参加だった</li>
<li>Improving Unicode Property Support</li>
<li><code>\p{Digit}</code>, <code>\p{Hiragana}</code></li>
<li>Unicode はコードポイントは ISO 10646 互換</li>
<li>Properties などは Unicode での追加</li>
<li>プロパティは Boolean properties (二値プロパティ), Enumerable properties (多値プロパティ) がある</li>
<li>データ量が多い</li>
<li>enc/unicode/10.0.0/nam2ctype.h</li>
<li><a href="https://bugs.ruby-lang.org/issues/13240">Change Unicode property implementation in Onigmo from inversion lists to direct lookup</a></li>
<li>二値プロパティは反転リストで持っている</li>
<li>多値プロパティはプロパティの値ごとに反転リストを持つ必要がある</li>
<li>値は Unicode 10.0.0 で 138 個ある</li>
<li>チェックは二分探索</li>
<li>svn.ruby-lang.org でダウンロードしようとすると拒否されるぐらい大きい (checkout はできる)</li>
<li>新しい表現方法</li>
<li>プロパティが一緒のものは同値類にする</li>
<li>定数時間で探索できる</li>
<li>まだサイズが大きかったので、二段階の同値類にした</li>
<li>パフォーマンス: 二分探索で対数時間かかっていたのが、定数時間になった</li>
<li><a href="https://bugs.ruby-lang.org/issues/13241">Method(s) to access Unicode properties for characters/strings</a></li>
<li>問題点もまだある</li>
<li>まとめ</li>
<li>質疑応答</li>
<li>Q: 実装は Ruby 本体に入っている? Onigmo に入っている? → Ruby 本体の Onigmo 部分に入る、最終的には同期を取るので調整が必要</li>
</ul>


<h2>Type Checking Ruby Programs with Annotations</h2>

<ul>
<li>4個の Ruby のタイプチェッカーを実装した</li>
<li>2005, Type inference, structural subtyping</li>
<li>2007, Type inference, polymorphic record types</li>
<li>2009, Control flow analysis</li>
<li>2017, Local type inference, structural subtyping</li>
<li>なぜ型チェッカーが必要か?</li>
<li>バグ発見</li>
<li>ドキュメントが検証可能</li>
<li>自動補完</li>
<li>リファクタリングしやすい</li>
<li>高度なプログラム解析に使える、セキュリティチェッカーとか</li>
<li>Ruby の型チェック</li>
<li>少なくとも12年いろんな人が試して来た</li>
<li>Ruby は変数に型がないので、型推論しようとした</li>
<li>Static Type inference for Ruby</li>
<li>Diamondback Ruby</li>
<li>structural subtyping ベースなので、 polymorphic types は推論できない</li>
<li>Type inference for Ruby Programs Based on Polymorphic Record Types</li>
<li>RubyKaigi 2008</li>
<li>ML の型推論と polymorphic record types ベースで polymorphic types が推論できる</li>
<li>いくつかの組み込みで型を提供できない</li>
<li>polymorphic recursion (Array cannot be polymorphic)</li>
<li>Non regular types (<code>Array#map</code>)</li>
<li>Type Checking for Ruby</li>
<li>ここまでのまとめ</li>
<li>Ruby プログラムから型推論は構築できない</li>
<li>subtyping を選んでも polymorphic type inference を選んでも限界があるから</li>
<li>Requirements</li>
<li>Correctness: 型チェッカーが通れば実行時に型エラーが起きない</li>
<li>Static: 実行せずに</li>
<li>No annotation: 型推論</li>
<li>Relaxing Requirements</li>
<li>Forget Correctness</li>
<li>Incorrect type checking でもプログラマーの助けになる</li>
<li>TypeScript accepts unsound co-varieant subtyping on function parameters</li>
<li>Lint tools: アドホックな悪いプログラムのパターン集だが役たっている</li>
<li>Type Checking at Runtime</li>
<li>メソッドボディの実行前にチェック</li>
<li>Annotate Ruby Programs</li>
<li><a href="https://github.com/soutaro/steep">https://github.com/soutaro/steep</a></li>
<li>Key Ideas</li>
<li>Gradual Typing : アノテーションがなければチェックしない</li>
<li>Programmers annotate their Ruby programs</li>
<li>Another language to define types</li>
<li>例</li>
<li>Annotating Constants?</li>
<li>Type Definition</li>
<li>What is Signature?</li>
<li>Signature Code Separation</li>
<li>Steep まとめ</li>
<li>Q(jokerさん): DSL は Ruby で? → racc などを使って ruby で実装しているが、ruby のコンテキストで動くわけではない。</li>
<li>Q: 聞き取れず (たくさんサポートするのは大変とかいう話?)</li>
<li>Q(ko1) rails? → TypeScript はコミュニティでたくさん揃っているので、そういう感じになって欲しい</li>
<li>Q(yugui) Active Support? How can we (community) help you? → 聞き取れず</li>
<li>Q(mame) Ruby core に入れたい? add-on? → パフォーマンスがなんとかまでしか聞き取れず</li>
</ul>


<h2>Ruby Language Server</h2>

<ul>
<li>自己紹介</li>
<li>手書き麻雀フォント</li>
<li>qwik2md</li>
<li>asakusarb.esa.io</li>
<li>麻雀, Ruby, Docker 好き</li>
<li>Language Server とは?</li>
<li>エディターやツールに便利な情報を提供してくれるツール</li>
<li>Language Server Protocol (LSP) (JSON-RPC ベース) でやりとり</li>
<li>syntax error のチェックとか整形とか</li>
<li>Editor → LSP Client (Plugin) → Language Server</li>
<li>LSP Client はエディターごとのものと汎用的なものがある</li>
<li>汎用的なものの場合は Boot setting for Ruby などが必要</li>
<li>利点欠点まとめ</li>
<li>まず VS Code 向けを作り始め</li>
<li>Language Server に必要なもの</li>
<li>JSON-RPC</li>
<li>トランスポートは socket でも stdio でも http でも使える</li>
<li>サンプルは node ipc</li>
<li>既存の json-rpc の gem は http のみ対応っぽいので、実装する必要あり</li>
<li>Language Server は STDIO が多数派らしいということで、STDIO を選択</li>
<li>Language Server Protocol</li>
<li>initialize で capabilities を返すので徐々に実装していける</li>
<li>TypeScript から Ruby のコードを生成して language_server gem を作れた</li>
<li>まだ alpha 段階</li>
<li>pure Ruby</li>
<li>syntax check</li>
<li>自動補完や定義へのジャンプは実装中</li>
<li>使い方</li>
<li>dokcer か gem で使う</li>
<li>具体的な実装</li>
<li>syntax check は <code>ruby -wc</code> を使っている</li>
<li>自動補完は rcodetools を使っている</li>
<li><a href="https://github.com/rcodetools/rcodetools">https://github.com/rcodetools/rcodetools</a></li>
<li>そのまま組み込めなかったので wrapper 層がある</li>
<li>実際に実行するので副作用がある</li>
<li>Ripper を使っている</li>
<li>定義ジャンプ</li>
<li>Future prospects</li>
<li>Conclusion</li>
<li>language server が一般的になっている</li>
<li>一実装として language_server gem を作った</li>
<li>気に入らなければ language_serer-protocol gem を使って別実装を</li>
<li><a href="http://langserver.org/">http://langserver.org/</a> の一覧に追加された</li>
<li>Q(ko1) このために ruby をこうしてほしいという意見があれば → warning を正規表現で頑張るのではなく、機械可読可能に</li>
<li>逆質問: <code>ruby -wc</code> を実行するのではなく、今実行している ruby 上でやりたい → ko1: ISeq を使えば良い</li>
<li>逆質問: ripper が苦しいので parser gem にしようかと検討している。理由は始点と終点が欲しい。 → mame さんが検討している</li>
<li>Q(mame) ripper は遅くないですか? → parser gem より速かった。</li>
<li>Q(mame) 編集段階の壊れたものも ripper に渡す? → その通り</li>
<li>Q(shugo) protocol の仕様としてインデントの計算をして返すものはあるのか? → format が近そう</li>
<li>カラースキーマーや syntax highlight がまだ PR 段階など、 LSP 自体が発展途中</li>
</ul>


<h2>Write once, run on every boards: portable mruby</h2>

<ul>
<li>自己紹介</li>
<li>ローカルな話</li>
<li>Sessalet</li>
<li>別ボードへの移植</li>
<li>ハードウェアを操作する部分はC言語で書いて mrbgems を作成する必要がある</li>
<li>デモ</li>
<li>GR-PEACH</li>
<li>Nucleo F411RE</li>
<li>Architecture 表</li>
<li>Writing Ruby Code</li>
<li>Sensors</li>
<li>Motor はモーターごとに挙動が違うので別クラス</li>
<li>ハードウェア依存部分</li>
<li>CMSIS : デバッグ用の共通仕様</li>
<li>HAL (Hardware Abstraction Layer)</li>
<li>mbed library, C++</li>
<li>Arduino &amp; mbed</li>
<li>Arduino : library, IDE</li>
<li>利点: サンプルがたくさん、たくさんのボードをサポートしている</li>
<li>Arduino 互換機</li>
<li>mruby の普及に必要なものを Arduino から mbed から学んだ</li>
<li>まとめ</li>
<li>ボード非依存なコードを</li>
<li>ボード依存部分はまとめる</li>
<li>たくさんサンプルがあると良い</li>
<li>Q: 3秒スリープをどうやってるかみたいな質問 → ハードウェアのライブラリにそれ用の機能がある</li>
</ul>


<h2>Lightning Talks</h2>

<p>自分も発表していたので、疲れてメモは取れず。</p>

<p>発表資料はいつも通り<a href="https://github.com/znz/rubykaigi2017-frozen_string_literal">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-how-to-specify-frozenstringliteral-true/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/how-to-specify-frozenstringliteral-true">slideshare</a>, <a href="https://speakerdeck.com/znz/how-to-specify-frozen-string-literal-true">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-rubykaigi2017-frozen_string_literal">RubyGems</a> にあげています。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-frozen_string_literal/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-frozen_string_literal/" title="How to specify `frozen_string_literal: true`">How to specify `frozen_string_literal: true`</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2017 の1日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-18-rubykaigi2017.html"/>
    <updated>2017-09-18T10:34:48+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi2017</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2017">RubyKaigi 2017</a> の1日目に参加したので、そのメモです。</p>

<!--more-->


<p>最初の方は個人的なメモなので、興味がなければ飛ばして、オープニング以降からどうぞ。</p>

<h2>移動と前夜祭</h2>

<p>土曜日に姫路に寄ってから、岡山県の実家に泊まっていて、日曜に台風の影響で11時ごろから岡山の在来線が止まるということで、その前に移動していたので、広島には問題なく到着していました。広島では10時ごろから在来線が止まっていたようでした。
午後は新幹線も広島より西で停電があった影響で遅れたり、博多と広島の間は止まったりしていたようです。</p>

<p>飛行機はだいたい止まっていたようで、東京からの人はさっさと新幹線に切り替えた人は問題なくたどり着けて、遅く新幹線に乗った人は遅れていて、前夜祭に間に合わなかったりしたようです。</p>

<p>前夜祭は、ホテルから移動している時に傘が壊れる (1本骨が曲がる) ということはありましたが、問題なくたどり着いて参加できました。
終わった後はほとんど雨は降っていませんでした。
Twitter のハッシュタグ <code>#rubykaigi</code> をみていると、会場準備をしていたスタッフの人で終わった後にきて、残っていたものを食べたりお土産をもらったりしていた人もいるようでした。</p>

<h2>朝の移動</h2>

<p>近くのホテルに泊まっていたので、開場前に会場につけるかと思っていたら、ちょっと準備に手間取ってしまって、結局9:40頃に到着しました。</p>

<h2>オープニング</h2>

<p>オープニングというか最初のキーセッションの前のつなぎとして、松田さんが会場アンケートしたりしていました。
初参加の人が意外と多かったようです。</p>

<h2>Ruby Forward</h2>

<ul>
<li>Money Forward によるスポンサーセッション</li>
<li>BtoC の新サービスを明日リリース予定</li>
<li>Ruby逆引きハンドブックの改訂版を出版(予定)</li>
<li>福岡の開発拠点を新設</li>
</ul>


<h2>Making Ruby? ゆるふわRuby生活</h2>

<ul>
<li>Heroku の matz team</li>
<li>日々の話</li>
<li>Repository は svn.ruby-lang.org がメインで github.com にはミラーがある</li>
<li>pull request は裏口</li>
<li>Why not Git?</li>
<li>ruby は Git より昔からあるから</li>
<li>作業する人がいない</li>
<li>個人的に hash がリビジョン番号の方が良い</li>
<li>コミッターにとっての利点不足</li>
<li>issue は redmine</li>
<li>開発者会議</li>
<li>tarball からのビルドの仕方: configure + make</li>
<li>Out-of-place build</li>
<li>configure に色々オプションがあったりいろんな環境をサポートしていたり</li>
<li>一度にビルドできる Makefile <a href="https://github.com/nobu/build-files/blob/master/Ruby.mk">https://github.com/nobu/build-files/blob/master/Ruby.mk</a></li>
<li>repo からのビルド</li>
<li>subversion or git / autoconf / bison / gperf / ruby</li>
<li>BASERUBY, MINIRUBY</li>
<li>トラブルによりすとうさんのサポート</li>
<li>MINIRUBY の機能や制限</li>
<li>2.4 までは miniruby と拡張ライブラリのビルドは parallel だったが、extconf.rb の実行が逐次実行だった</li>
<li>親にしか依存していないので 2.5 では exts.mk ファイルを分割生成して parallel に実行できるようになって速くなった</li>
<li>拡張ライブラリ作成時の問題点</li>
<li>C ヘッダーの場所とかが問題</li>
<li>Solution: <code>trace_var</code></li>
<li><code>$extmk</code>, <code>$ruby</code></li>
<li>? (突然の質疑応答タイム) → 特になし</li>
<li>Bug Report</li>
<li><a href="http://mla.n-z.jp/?ruby-list=50578">ruby-list:50578</a></li>
<li><code>p = 2; p (-1.3).abs</code> の話</li>
<li>スペースの有無によって意味ががらっと変わることがある</li>
<li>良くいって罠</li>
<li>少なくとも 1.1 からの仕様 (それより古いものはコンパイルが通らないので調べていない)</li>
<li>悪魔城 parse.y</li>
<li>難しくない?</li>
<li>ruby -w で警告が出るのでそのソースコード解説</li>
<li><code>EXPR_LABEL</code> はキーワード引数の名前が置けるところ</li>
<li><code>lvar_defined</code></li>
<li>matz issue</li>
<li>? 再び</li>
<li>literal symbol by intern</li>
<li><code>:"#{foo}"</code> が intern を再定義していると Symbol 以外になることがある</li>
<li>昨晩前夜祭の前に<a href="https://github.com/ruby/ruby/blob/d1e63172c6ecf2606ff9a947d917117eb6923436/parse.y#L7894-L7900">直した</a></li>
<li><a href="https://bugs.ruby-lang.org/issues/13812">Refinements で定義した to_s を String interpolation が呼んでくれない</a></li>
<li>.x86_64-darwin などをビルドディレクトリに使っている</li>
<li><code>.gitignore</code> に <code>.*-*</code> が入っている</li>
<li><code>make -C .x86_64-darwin exam commit</code></li>
<li>違い: 変換が明示的に見えるようにするのと見えないようにする</li>
<li>2.5 には目玉機能がない?</li>
<li>NEWS をみると色々</li>
<li>Reject された feature</li>
<li>議論中</li>
<li><code>Kernel#method</code> に対応する演算子?</li>
<li><p>Rightward assignment: <code>-&gt;</code> とか <code>=&gt;</code> とか使っているので良いものがない</p></li>
<li><p>質疑応答</p></li>
<li>extmk の分割の話で親子関係しか依存がないのを確認した? → digest が openssl に依存していた (チェックするためのメソッドを共有していた) のを切り分けた。 Windows で何かあったのを親子関係にした。実行時の依存ではなくビルド時の依存関係なのでもともと多くはなかった。</li>
<li>Rightward assignment の記号の提案 (:= が書籍では ← と書かれる言語があるので =: は?) → トークンの追加は衝突がなければ難しくない、<code>a=:b</code> がシンボルと衝突する。 <code>a ~&gt; b</code>, <code>a |&gt; b</code> ?</li>
<li><code>String#intern</code> を再定義する? → する人もいるらしいので、先手を打って直した</li>
<li>yield_self が目玉機能になる? → 機能としては長い間要望されていたものが、名前問題でなかなか入らなかった。とりあえず説明的な名前で入れて、良い名前があれば alias 追加すればいいという感じで入った。</li>
</ul>


<h2>Fiber in the 10th year</h2>

<ul>
<li>ささださんすごいとツイートしてほしい話</li>
<li>所属が変わっても基本的に ruby のコアの開発をしている</li>
<li>Fiber の紹介</li>
<li><p>Proc との違いは restart できる</p></li>
<li><p>Fiber の利用例</p></li>
<li>内部イテレーターを外部イテレータ〜にする例</li>
<li>Enumerator が内部で Fiber を使っている</li>
<li>Agent simulation : ゲームのキャラクター表現など</li>
<li><p>Non-blocking IO scheduler</p></li>
<li><p>Thread との違い</p></li>
<li>timer で自動で切り替わるかどうか</li>
<li>I/O ブロックで勝手に切り替わるかどうか</li>
<li>同期処理が必要かどうか</li>
<li>次のコンテキストを指定する必要があるかどうか</li>
<li><p>パフォーマンス</p></li>
<li><p>以上が Fiber の歴史</p></li>
<li><p>背景: Ruby 1.9 における Callcc と Fiber</p></li>
<li>2007/05 作り始め</li>
<li>Fiber の名前は Windows API から</li>
<li>今では他の言語でも Fiber という名前が使われているものがある</li>
<li><p>最初は <code>Fiber#pass</code> しかなかった</p></li>
<li><p>Coroutine or Semi-coroutine</p></li>
<li>Coroutine は難しいがパワフル</li>
<li>Semi-coroutine (Fiber) and Coroutine (Fiber::Core)</li>
<li>大クラス主義 (big class principle) を理由に Fiber::Core を削除してマージ</li>
<li><p>Semi-coroutine: resume, Coroutine: transfer</p></li>
<li><p>Fiber の実装</p></li>
<li>2007年: Copy machine stack</li>
<li>2010年: Use Native support</li>
<li>2017年: More light weight switching</li>
<li>速度: 5% 改善, メモリ: 30% 削減</li>
<li>VM stack や Machine stack があるので構造体のメモリ削減の影響は小さい?</li>
<li><p>Guild に繋げるための整理になった</p></li>
<li><p>Auto Fiber proposal</p></li>
<li>Automatic schedule on I/O blocking</li>
<li>次のターゲットを指定する必要がなくなる</li>
<li>同期が必要になる</li>
<li>利点: 既存のプログラムを変更する必要がない、Fiber 同様に軽い、Thread より安全</li>
<li><p>欠点: Thread と同様にバグりやすい</p></li>
<li><p>質疑応答</p></li>
<li>想定より多かった使い方は? → IO のスケジュールに使ってくれるのが想定より多かった。Enumerator が隠蔽するので直接使う人は少ないと思っていた。</li>
<li>アーキテクチャ依存やパフォーマンスで苦労したと思ったが、一番苦労した点は? → アーキテクチャ依存部分の最初は 1.8 を参考にしたので、ほとんど苦労しなかった。NetBSD の setcontext が動かなかったとかの話。</li>
</ul>


<h2>Handling mails on a text editor</h2>

<ul>
<li>通訳の方が Emacs を知らなかったので直前まで打ち合わせをしていた</li>
<li>自己紹介</li>
<li>Ruby で書いたテキストエディタ</li>
<li><a href="https://github.com/shugo/textbringer">Textbringer</a></li>
<li>Emacs 風</li>
<li>ターミナル上のみ</li>
<li>Pure Ruby</li>
<li>かっこいい名前</li>
<li>Law, Chaos, and Cosmic Balance</li>
<li>エディターだと <a href="https://twitter.com/ujm/status/909642340863688704">https://twitter.com/ujm/status/909642340863688704</a></li>
<li>コードの修正もたとえば rubocop を盲信するのではなくバランスが大事</li>
<li>キーバインディングは Emacs 風で help は少ないのでリンクからソースをみる</li>
<li>実装詳細</li>
<li>Linked Line ではなく Buffer Gap を採用</li>
<li>Internal encoding: UTF-8</li>
<li>indexing が問題になったので、基本的に ASCII-8BIT で持っておいて必要に応じて <code>force_encoding('UTF-8')</code></li>
<li>配列を使うのは文字列に変換するのが <code>force_encoding</code> だけより重そうだったので採用せず</li>
<li>部分再描画は curses 任せ</li>
<li>curses を使っているなら pure Ruby じゃないというツッコミがあった</li>
<li>動的な部分で ruby の特徴を活かせる</li>
<li><code>eval_expression</code></li>
<li><code>eval_buffer</code></li>
<li><code>eval_region</code></li>
<li>Suppress warnings : <code>$VERBOSE = nil</code></li>
<li><code>def</code> を使っていない理由</li>
<li>Plugin</li>
<li>Mournmail</li>
<li>MUAs for Emacs の話</li>
<li>Demo</li>
<li>メールの同期にバックグラウンド処理が必要になる</li>
<li>UI スレッドを用意した</li>
<li>UI スレッド以外では Textbringer のメソッドをよんではいけない</li>
<li>必要に応じて <code>next_tick</code> を使う</li>
<li>メールを扱うライブラリ: mail.gem, Net::IAMP</li>
<li>refine でローカルなモンキーパッチ</li>
<li>質疑応答</li>
<li>Auto Fiber? → 通訳さんとの打ち合わせで聞けていなかった。切り替わりのタイミングが想定できなくなるのは向いていないかも。</li>
<li>Emacs なのにS式がない? → Ruby で実装していて Emacs ではない</li>
<li>Emacs だと M-x だと <code>-</code> つながり? → Textbringer はタブを押すと <code>-</code> を <code>_</code> に変換する</li>
<li>名前空間の衝突は大丈夫? → 適切に prefix をつければいい</li>
</ul>


<h2>Gemification for Ruby 2.5/3.0</h2>

<ul>
<li>self.introduce</li>
<li>歴史: RAA, RubyForge, gems.github.com, gemcutter.org, rubygems.org, bundler</li>
<li>組み込みライブラリ: require しなくても使えるもの</li>
<li>標準添付ライブラリ: 別途インストールしなくても require できるもの</li>
<li>Standard Libraries, Default Gems, Bundled Gems</li>
<li>Pure Ruby, C extensions</li>
<li>Standard Libraries: upstream が svn.ruby-lang.org</li>
<li>Default Gems: Upstream が GitHub の Ruby team</li>
<li>Bundled Gems: メンテナが別</li>
<li>Default gem</li>
<li><code>*.gemspec</code> があると特別扱いされる</li>
<li>具体例: ruby/openssl</li>
<li>メインの upstream は <a href="https://github.com/ruby/openssl">https://github.com/ruby/openssl</a></li>
<li>利点: gem update openssl で新しい openssl gem を使える</li>
<li>セキュリティアップデートも、例えば最近の例なら json gem だけあげて ruby 本体をあげなくてもできる</li>
<li>psych : libyaml に依存、upstream に JRuby integration がある</li>
<li>rdoc: rdoc/rdoc から ruby/rdoc に移動</li>
<li>ripper 対応してくれた人が現れた</li>
<li>Bundled gems</li>
<li><code>gems/bundled_gems</code> にある gem を普通にインストールする</li>
<li>アンインストールも普通にできる</li>
<li>test framework の問題</li>
<li>test-unit, minitest が upstream と非互換になった</li>
<li>標準添付から外して本体のテスト専用に</li>
<li>test library がなくなるのは問題ということで bundled gem という方法が生み出された</li>
<li>rake は標準添付ライブラリでなくて良いのでは、ということで bundled gem になった例</li>
<li>bundled gem の問題</li>
<li>コンパイルがちゃんとできるかサポートできないので、拡張ライブラリを含むものはサポートしていない</li>
<li>bundled gem のテストが必要</li>
<li><a href="https://bugs.ruby-lang.org/issues/5481">Gemifying Ruby standard library</a></li>
<li>bundled gem や default gem の仕組みができたことで段階的に外していくことができるようになった</li>
<li>Gemification は利用者に利点は多いがメンテナは大変</li>
<li>たとえば rubygems はまだ Ruby 1.8 対応しているので大変</li>
<li>rubygems</li>
<li>rubygems/rubygems.org は rails で書かれているサイトそのもの</li>
<li>rubygems/rubygems はコマンドラインツール</li>
<li>メンテナなどは完全に別</li>
<li>Reserved words on rubygems.org</li>
<li>fileutils, fiddle, gdbm</li>
<li>Future</li>
<li>Ruby 2.5 では bundler が default gem に</li>
<li>RubyGems に Bundler 統合予定</li>
<li>全部 default gem, bundled gem にしたい</li>
<li>rubygems-2.7.0 がテストで bundler を使うようになる</li>
<li>bundler-2.0 のリリース後に rubygems-3.0 は本体でも bundler を使うように開発していく予定</li>
<li><a href="https://bugs.ruby-lang.org/issues/13847">Gem activated problem for default gems</a></li>
<li><a href="https://bugs.ruby-lang.org/issues/10320">require into module</a></li>
<li>shared library 問題, LOADED_FEATURES 問題</li>
</ul>


<h2>How to optimize Ruby internal</h2>

<ul>
<li>私用により途中から聞いていました。</li>
<li>細かい改善の話でした。</li>
<li>質疑応答</li>
<li>Hash の最適化で st_table を再利用するという案はなかったのか? → とりあえず想定していなかった? よく聞き取れず</li>
<li>聞き取れず → Ruby のメソッド一つ一つを計測してどうなったのかだけ</li>
<li>ベンチマークツール? → Apple 提供の可視化ツール</li>
<li>CI に回すのがどれくらいできそうか? → 1時間半ぐらいかかるが大丈夫か? グラフ表示したい。→ RubyBench が何か持っているかも。</li>
<li>どのくらい網羅しているかとか、みんなで追加すればいいのではないかとか → 発表が終わったのでオープンにしていきたい</li>
<li>ユーザーがカスタマイズする余地が消えたもの、壊す可能性が消えたものの見極めは? → 基本はテストが通るもの</li>
</ul>


<h2>Development of Data Science Ecosystem for Ruby</h2>

<ul>
<li>BigData is important in your business</li>
<li>RubyKaigi 2016 in Kyoto で Ruby が Data Science に使えない話とどうすれば良いかという話をした</li>
<li>今は使えるようになっている</li>
<li>将来も使える状態を維持していきたい</li>
<li>self.introduce</li>
<li>私はカエルです</li>
<li>現状</li>
<li>Ruby で書かれているものに追加したい場合</li>
<li>Ruby だけでやるか Python や R を JSON 経由で併用する方法があった</li>
<li>第3の選択肢として PyCall を作った</li>
<li>PyCall の話</li>
<li>使用例</li>
<li>数列の合計</li>
<li>bugs.ruby-lang.org の7月ごろのスナップショットをもらってデモ: ソースは <a href="https://github.com/mrkn/bugs-viewer-rk2017">https://github.com/mrkn/bugs-viewer-rk2017</a></li>
<li><code>Pandas.read_from_sql</code> は第二引数に ActiveRecord の connection を渡せるように拡張してある</li>
<li>Object recognition (物体検出) by Keras</li>
<li><a href="https://github.com/mrkn/ssd_keras">https://github.com/mrkn/ssd_keras</a></li>
<li>Python is a best friend of Ruby from now on</li>
<li><a href="https://github.com/mrkn/pycall.rb">https://github.com/mrkn/pycall.rb</a></li>
<li>Python での選択肢は Python のみか Rpy2 で R と連携の2個</li>
<li>今は PyCall を使えば良いが将来的には Ruby で</li>
<li><a href="https://red-data-tools.github.io/">https://red-data-tools.github.io/</a></li>
<li>Apache Arrow <a href="https://arrow.apache.org/">https://arrow.apache.org/</a></li>
<li>一つの言語で完結することは少ないので、データ交換が必要</li>
<li>シリアライズで結構 CPU 時間を使っている</li>
<li>シリアライズも組み合わせそれぞれから、共通化しようとしている</li>
<li><a href="https://github.com/red-data-tools/red-arrow">https://github.com/red-data-tools/red-arrow</a></li>
<li>Apache Arrow のコアメンバーにすとうさんが昨日入った</li>
<li><a href="https://gitter.im/red-data-tools/ja">https://gitter.im/red-data-tools/ja</a> <a href="https://gitter.im/red-data-tools/en">https://gitter.im/red-data-tools/en</a></li>
<li>明日の 13:50-15:50 in Room Ran で RubyData Workshop in RubyKaigi 2017</li>
<li>jupyter との連携は? → いい感じに使えている</li>
<li>Python のオブジェクトのメモリ管理と PyCall のオーバーヘッド → Ruby のオブジェクトが死んだ段階でデクリメントしている、オーバーヘッドは呼び出す処理による、 sin 関数などだとオーバーヘッドが大きいが numpy の行列計算などの重たい処理の場合はオーバーヘッドはあまり考えなくて良い</li>
<li>オブジェクトを変換しているか? → numpy のオブジェクトなどは変換していない、プリミティブは変換している</li>
</ul>


<h2>cookpad のスポンサーセッション</h2>

<ul>
<li>microservice 化でモデル数は減っている</li>
<li>なぜ Ruby <em>Committer</em> Sponsor ?</li>
<li>もっと良い言語が出てきたらどうするの? → Ruby を強くすれば良い</li>
<li>Ruby 3 に本気で向き合っている</li>
<li>cookpad &lt;&lt; mame</li>
</ul>


<h2>Ruby Committers vs the World</h2>

<p>コミッターなので壇上にいました。</p>

<ul>
<li>新コミッター紹介</li>
<li>rhe さん : openssl</li>
<li>k0kubun さん : ERB</li>
<li>watson さん : ちまちま速くするパッチを投げていたらコミッターになれた</li>
<li>質問のサンプルとして、型注釈の話</li>
<li>絶対書きたくない : 6人ぐらい</li>
<li>書かなくても良いが書くと良くなる : 多め</li>
<li>コメントぐらいなら良い (いざとなれば無視できる) : 多め</li>
<li>OpenMP みたいな感じ?</li>
<li>rdoc みたいなのがうれしい</li>
<li>古い処理系で無視されるといえば、すでにマジックコメントがある</li>
<li>現状だと動くものが型で制限されると嫌</li>
<li>matz: nominal type は絶対採用しない、String と書いても structal にしたい、できれば未来のためにプログラムの中に書くのは採用したくない、最低でもコメントに留めていたい</li>
<li>型を書かせたくないと思っているコミッター? → 4人ぐらい</li>
<li>Q(ujm): 右代入の本気度? →</li>
<li>akr: yield_self は右代入の代用の部分があるのではないか、左から右に流れるように書きたいことがあるのではないか</li>
<li>matz: 完全にフリーハンドであれば入れたい、長い歴史の中で記号を使い尽くしているので良い候補がない、既存のプログラムを壊れるような変更をしてまで入れるようなものではない</li>
<li>shyouhei: 他の言語では?</li>
<li>メモ取れず</li>
<li>durest: メソッドチェーンの話があったので、記号がなければメソッドでやってみるのはありではないか</li>
<li>会場を含めたアンケート</li>
<li>概念としてありは割といる</li>
<li>ないだろうはほとんどいない</li>
<li>Q(ujm): 変数とか定数とかどのあたりまでサポートするかという質問だった →</li>
<li>matz: 今代入の左辺になれるものは右代入でもサポートしたい</li>
<li>多重代入は難しい?</li>
<li>Q: YARV の命令仕様を確定して公開すると他の言語処理系が作れる? → 変化していくために固定する予定はないという感じ</li>
<li>他の案としては LLVM とか</li>
<li>Q: 右代入は <code>setter=</code> も対象? → matz: 当然</li>
<li>一番大変なのは parser</li>
<li>右代入で多重代入</li>
<li>後置 if との組み合わせ? → akr: 今の代入は式なのでできる、右代入は文にするというのはありかもしれない</li>
<li>機能制限するバージョンがあるか? → matz: ない、補助輪みたいなものは別のツールでサポートすれば良いのではないか</li>
<li>takao: 実際に使わせている子供達は補助輪を外したがっていたり、Ruby 認定資格を取りたがっていたりする場合もある</li>
<li>CI の実機が足りない問題は解決した? 今日の別の発表で Rails アプリケーションのベンチマークが取れるものが出てきている。Ruby 3x3 のユーザーからのフィードバックは何が必要? →</li>
<li>mame: 速くするパッチが必要 (watoson さんがやっているような)</li>
<li>以前 Mac の CI が足りないとか、ベンチマークが足りないとかいっていたが解決した? → matz: その件についてはだいぶ解決した</li>
<li>hsbt: CI 用のマシンは Ruby Association (RA) 経由である程度手配できるようになったが、 Windows の環境が足りない</li>
<li>Windows Server とか Visual Studio のライセンスを良い感じにする必要がある</li>
<li>matz: benchmark CI?</li>
<li>naruse: watson さんのが欲しい</li>
<li>ko1: RA や日本 Ruby の会経由で CI 用のマシンはなんとかなっている</li>
<li>さらにその上でベンチマークをなんとかしたい</li>
<li>RubyBench というのが何かやっている</li>
<li>watson: 今は個人のマシンで動かしている、自宅にはおきたくない、安定した結果が欲しいので実機が望ましい、足りないベンチマークを増やしたい</li>
<li>ko1: rails とか optcarrot とかだけではなく、これを速くして欲しいというのを提案して欲しい</li>
<li>matz: RA か日本 Ruby の会に寄付してくれると嬉しいが控除などはないのが申し訳ない</li>
<li>shyouhei: パッチを投稿していただくのはありがたいが、敷居が高いなら、雇って書かせるという手がある</li>
<li>Ruby 会議の運営を手伝ってもらえると、手が空いて間接的に、というのもある</li>
<li>hsbt: RubyKaigi 後に回復したら、パフォーマンスベンチを進めたい</li>
<li>matz: 転職活動している人?</li>
<li>ko1: 手があげられないのでは。</li>
<li>ko1: optcarrot と Rails 以外に使っている人?</li>
<li>shugo: テキストエディタが速くなると嬉しい、String が速くなるとうれしい</li>
<li>会場: fluentd</li>
<li>会場: puppet</li>
<li>amatsuda: ハッシュが速くなったので、fluentd が速くなったという話を聞いた</li>
<li>Q(ujm): Ruby, C, Streem, Emacs Lisp 以外に好きな言語?</li>
<li>matz: Swift, Clojure</li>
<li>mame: OCaml, Haskell?</li>
<li>takano: Smalltalk</li>
<li>akr: coq</li>
<li>nobu: FORTH</li>
<li>mrkn: julia</li>
<li>ko1: Ruby は好きだけど不満があるから直したい人が壇上には多いのでは</li>
<li>Q: インスピレーションの源になっているのは何?</li>
<li>matz: Lisp からたくさん、今後もたぶん、最近 2.0 の method prepend は CLOS のメソッドコンビネーション</li>
<li>takano: Lisp のマクロが羨ましい</li>
<li>mrkn: julia 推し</li>
<li><code>transform_keys</code> は Active Support (AS) と挙動は同じ? → nobu: 同じはず、<code>Hash#slice</code> も同様</li>
<li>amatsuda: 使い勝手は変わらないが、C実装になるのでちょっと速くなる</li>
<li>AS のようなものをどんどん入れる?</li>
<li>matz: 全部入れる気はないが、use case などでちゃんと説得してもらえば入る可能性はある、AS に入っているからという理由で入ることはない</li>
<li>amatsuda: AS は Web では便利だが、汎用的に入れるものかどうかは疑問</li>
<li>ko1: 年単位で議論して入ったものもある (入らなかったものもある)</li>
<li>amatsuda: 違う仕様で入ったものもある、 <code>Array#sum</code> とか</li>
<li>mrkn: Cで書くと float の誤差が改善されるということで、そういう実装が入った</li>
</ul>


<h2>懇親会</h2>

<p>食べ物の列は待っていれば短くなるかなと思って、話をしながら待っていたらそんなことはなかったので、並んでみたらギリギリ少し残っていたのが食べられて、その後で野菜が残っているのをみつけたのでそれを食べたりしていたので、全然食べられないということはなかったので、二次会には行きませんでした。</p>

<p>明日の懇親会と違って、オフィシャルパーティーはみんな集まっているので、複数人で話したいこと(<a href="https://bugs.ruby-lang.org/issues/13904">getter for original information of Enumerator</a>の件)は、この日のうちに話しておくべきだと思ったのですが、集められなかったので無理でした。後から確認したら、頑張って英語で書いたおかげで代わりにメンテナーを説得しようとしてくれる人がいて、結果的には大丈夫そうです。いいたかったのも、直接は関係がないので mrkn さんとかに説得を頑張って欲しいと言いたかっただけぐらいなので、明日以降に個別に言っておいても良いかもしれないと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[姫路IT系勉強会 2017.09 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-16-histudy.html"/>
    <updated>2017-09-16T13:40:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/histudy</id>
    <content type="html"><![CDATA[<p>RubyKaigi 2017 への移動途中に参加可能だったので、<a href="https://histudy.connpass.com/event/66084/">姫路IT系勉強会 2017.09</a>に参加しました。
公式の記録は勉強会のページからリンクされている HackMD のページ<!-- https://hackmd.io/s/r1rUBZF9Z -->に残っています。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場</h2>

<p>iPod touch の connpass アプリの「マップで見る」でピンが表示されている場所に向かっている途中でさとうさんをみつけたので、一緒に行こうとしたら会場の建物の前だったようで、ピンが表示されていた場所はずれていたように思いました。</p>

<h2>自己紹介</h2>

<p>まずは connpass の参加者一覧を元に自己紹介でした。</p>

<h2>休憩</h2>

<h2>HTML の勉強方法</h2>

<ul>
<li>Hexo のテーマを作り始めたが HTML4 の頃の知識で止まっているので、モダンな HTML, CSS の勉強方法は?</li>
<li>初心者向けとかのサイトではなく、差分だけ知りたい</li>
<li><a href="https://caniuse.com/#search=flexbox">https://caniuse.com/#search=flexbox</a> とか</li>
<li>Hexo 界隈では sass ではなく Stylus がよく使われているらしい</li>
<li><a href="https://www.w3schools.com/cssref/css3_browsersupport.asp">https://www.w3schools.com/cssref/css3_browsersupport.asp</a></li>
<li>Bootstrap とかフレームワークはどうかという話</li>
<li>フルスタックなものと軽量なものを知っておくと良い?</li>
<li><a href="http://bourbon.io/">http://bourbon.io/</a> : 軽量な sass の mixin 集</li>
<li><a href="http://neat.bourbon.io/">http://neat.bourbon.io/</a> を組み合わせると grid system も使える</li>
<li><a href="http://bitters.bourbon.io/">http://bitters.bourbon.io/</a> だと基本的なスタイルまで付いている</li>
<li><a href="http://bourbon.io/docs/">http://bourbon.io/docs/</a> deprecated になっているものが多い</li>
<li>フルスタックが鬱陶しい人にはおすすめ</li>
<li>軽量なフレームワークで流行っているものはあまりない?</li>
<li>node の sass は ruby の sass とほぼ互換性があるらしい</li>
<li>node に限らないが独自作法が大変な話</li>
<li>プラグインアーキテクチャが流行っているらしい</li>
<li>ruby は PHP などに比べて非互換がきついことがある</li>
<li>node はタスクランナー周りのものがたくさんあってメンテナンスされなくなってきて、npm 直接使うことが多くなっている</li>
<li>Web 界隈は色々とカオス</li>
<li>作った後、ちゃんと更新されていないものがきつい</li>
<li>awesome から github を辿っていって使うと少しまし <a href="https://github.com/sindresorhus/awesome">https://github.com/sindresorhus/awesome</a></li>
<li>CentOS とか古いので wpscan でチェックすると色々言われる?</li>
</ul>


<h2>WordPress の話</h2>

<ul>
<li>なぜか話が来たが、情報が少なくてよくわからず</li>
<li>とりあえず WordPress の情報が集まっている場所は?</li>
<li>まず WordBench がおすすめ</li>
<li>おすすめプラグイン</li>
<li>WordPressプラグイン100選 の目次から良さそうなプラグインを探す</li>
<li>パーミッションをちゃんとしよう</li>
<li>関連する話が先週の<a href="https://histudy.connpass.com/event/66082/">加古川IT系インフラ勉強会 2017.09</a>であったらしい</li>
<li>困ったら金で解決という手段もある</li>
</ul>


<h2>Markdown の話</h2>

<ul>
<li>途中抜けているところがあっても手順書があるだけまし</li>
</ul>


<h2>女子中学生チケット詐欺事件</h2>

<ul>
<li><a href="https://gist.github.com/shunirr/2bd6a5a00b966e1e534b443790c68eda">女子中学生チケット詐欺事件</a> (オリジナル)</li>
<li><a href="https://gist.github.com/kawabata/fefd78b84856ed7900c69eb9aba3af19">女子中学生チケット詐欺事件</a> (詳しい fork 版)</li>
</ul>


<h2>Markdown の話</h2>

<ul>
<li>話が戻って発表</li>
<li><a href="https://gitpitch.com/sky-y/himeji-it-2017-09">Markdownのカオスと付き合う</a> (発表資料)</li>
<li><a href="https://bitjourney.kibe.la/shared/entries/f740d533-0d57-44fe-a891-dfe669d16121">Markdownはなぜ拡張され続けるのか</a> は一読をおすすめ</li>
<li><a href="https://babelmark.github.io/?text=%40__gfx__">https://babelmark.github.io/?text=%40__gfx__</a> が strong になることがある問題</li>
<li>Markdown きつい問題 → 根本的な解決策はない</li>
<li>他の軽量マークアップ言語: reST など以外にも Ruby の RD や Perl の POD なども昔からある</li>
<li>表現力が高いマークアップ言語はなかなか流行らない: SGML vs HTML など (XHTML → HTML5 とか)</li>
<li>無難な記法: CommonMark か GFM (GitHub Flavored Markdown) がおすすめ</li>
<li><code>#</code> の後ろにスペースを入れた方が良いなど、標準的な書き方を覚えておけば方言に対応しやすい</li>
<li><a href="http://commonmark.org/help/">http://commonmark.org/help/</a> が基本</li>
<li>改行の扱い <a href="https://babelmark.github.io/?text=abc%0Adef%0A%0Aghi%0Ajkl">https://babelmark.github.io/?text=abc%0Adef%0A%0Aghi%0Ajkl</a> 連続の改行で p が分割されて単独の改行は br になったりならなかったり</li>
<li>改行の扱いは CommonMark と GFM で違う</li>
<li>ASCII Art などなら code block を使えば良い</li>
<li>表現力の高いものから低いものに変換するとゴミ (HTML 断片) が入ったりする</li>
<li><p>CSV から Markdown? : pandoc のフィルターにあるかも</p></li>
<li><p>org-mode から HTML にエクスポートで使っている話</p></li>
<li><p>markdown にエクスポートもできるらしい</p></li>
<li><p>ドキュメントを書くことを普及させたい</p></li>
<li><p>同じ名前なのが混乱の元?</p></li>
<li>継承して拡張とかできるので別の名前をつけるのも難しそう</li>
<li>CommonMark で統一しようとしている</li>
<li><p>GFM も参考になる</p></li>
<li><p>Markdown は英語圏のメールなどの文章を書く時の一般的な作法が元になっているらしい</p></li>
<li><p>最低限のドキュメントは書きましょうという話</p></li>
<li>ansible とか terraform とか</li>
<li>Jupyter</li>
</ul>


<h2>休憩</h2>

<p>15:50 まで</p>

<h2>Perl の Acme::EyeDrops</h2>

<ul>
<li>デモ</li>
<li>プログラム解説</li>
<li>改行と空白削除</li>
<li>文ごとに改行追加</li>
<li>などなど順番に変更していってプログラム解説</li>
<li>ビット演算とか Web 系の人はしらなさそう</li>
<li>カラーコードで16進数は知ってそうだが、ビット演算はしらなさそう</li>
<li>ビット演算を知らないとパーミッションとかもわからなさそう</li>
<li><code>(?{...})</code> は Perl 5.18 から <code>use re "eval"</code> が必要になっている</li>
</ul>


<h2>BlueBorne</h2>

<ul>
<li>Android で Bluetooth テザリングを便利に使っていたのに使えなくなった</li>
<li>カーナビはアップデートとかできなさそうなので厳しい</li>
<li>車はエンジン系とエンタメ系のエンタメ系しか Bluetooth で繋がらないので問題があったとしても大丈夫?</li>
<li>CAN という規格 (認証とかがない) でエンジン系と通信ができるので可能性はある?</li>
<li>iOS は大丈夫だったので iPhone で Bluetooth イヤホンとか使ってる人は大丈夫</li>
<li>サーバーは関係なさそう</li>
</ul>


<h2>これから未来ある開発言語またはシステムは?</h2>

<ul>
<li>言語は教養として全然違うものを勉強するのが良いのではないか。 Prolog とか PostScript とか SQL とか</li>
<li>仕事という面では PHP がとりあえずわかれば Web 担当になれる</li>
<li>WordPress をカスタマイズする時とか PHP が必須になる</li>
<li>機械学習なら Python になりそう</li>
<li>未来はわからないので直近を考える</li>
<li>JavaScript が作れるものの幅が一番広い</li>
<li>大穴狙いなら COBOL?</li>
<li>COBOL のプログラムはまだなくなりそうにない</li>
<li>Ruby のようにコミュニティの雰囲気が良いという観点で選ぶのもあり (元々楽しくプログラミングという基本思想があるので、それが影響しているのかコミュニティの雰囲気が良い)</li>
<li>この勉強会はなんでもありなので、派生したものを作るのは歓迎</li>
</ul>


<h2>HoloLens とかの話</h2>

<ul>
<li>HoloLens は完全に視界をおおう VR ではなく、現実世界にホログラムを載せるようなもの</li>
<li>最近は WinMR というのもあるらしい</li>
<li>HoloLens は Windows 10</li>
<li>Edge も VR に対応しているらしい</li>
<li>開発環境とかは?</li>
<li>Unity</li>
<li>ユニバーサル Windows プラットフォーム (UWP)</li>
<li>Unreal Engine</li>
<li>まずは企業向けで使われるようになる?</li>
<li>研究は長い間されていたが、やっと実用化されるようになってきた</li>
<li>脆弱性対策の話</li>
<li>VR アプリのデバッグ</li>
<li>通常の Windows アプリとしてのデバッグ</li>
<li>体験のデバッグ</li>
<li>酔う対策は、まだ知見が足りない</li>
</ul>


<h2>Lisp 入門?</h2>

<ul>
<li>ふわっとした理由で Lisp を勉強したいということだったので色々紹介的な話</li>
<li>Lisp-1 と Lisp-2</li>
<li>Scheme と Common Lisp</li>
<li>コンパクトなのが Scheme</li>
<li>なんでもありなのが Common Lisp</li>
<li>Common Lisp HyperSpec</li>
<li>一番有名な処理系が sbcl</li>
<li>clisp, Clozure CL</li>
<li>Gauche</li>
</ul>


<h2>退出</h2>

<p>17時を過ぎても続いていて、移動しないと間に合わなくなりそうだったので、Lisp の話の途中で出ました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第11回 HosCon - GMO Hosting Conference - @大阪 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-14-hoscon.html"/>
    <updated>2017-09-14T22:46:24+09:00</updated>
    <id>http://blog.n-z.jp/blog/hoscon</id>
    <content type="html"><![CDATA[<p><a href="https://gmohoscon.connpass.com/event/63440/">第11回 HosCon - GMO Hosting Conference - @大阪</a> に参加したので、そのメモです。</p>

<!--more-->


<h2>会場</h2>

<p>グランフロントタワー B の 梅田・GMO Yours での開催でした。
前に何かの勉強会で一度来たことがあるような気がするのですが、何だったか思い出せませんでした。</p>

<p>タワー B 自体は最近 Rails Developers Meetup #4 大阪会場 で来ていました。</p>

<h2>その他</h2>

<p>ハッシュタグは <code>#hoscon</code> でしたが、ツイートはあまりありませんでした。</p>

<p><a href="https://twitter.com/rzl5/status/908276901914882049">https://twitter.com/rzl5/status/908276901914882049</a> に写真がありますが、 ConoHa カードをもらったので、使ってみたいと思いました。</p>

<h2>コンテナ基盤であるLXC/LXDを本番環境で運用する話</h2>

<ul>
<li>2011年に物理からKVMによる完全仮想化へ</li>
<li>完全仮想化はリソースに無駄があるということで準仮想化、コンテナ化へ</li>
<li>なぜLXDか?</li>
<li>他に検討した選択肢は Docker, KVM, OpenVZ, (VMware は高いので選択肢に入らず)</li>
<li>質問: Linux だけで Windows や BSD はなかった? カーネルモジュールなども問題なかった? → Linux で、カスタマイズはしていたが共通の kernel だったので問題なく集約できた。</li>
<li>質問: OpenVZ が遅かった? → 一般的には遅くないかもしれないが、試した環境ではコンテナより遅かった。</li>
<li>LXDは2017年2月から運用開始</li>
<li>ホストOSは Ubuntu 16.04 LTS</li>
<li>ゲストOSは使い慣れたCentOS</li>
<li>なぜZFSか?　→ 公式がオススメしているのとベンチマークの結果がよかった</li>
<li>今も苦労している部分はある</li>
<li>fio で計測</li>
<li>ZFS を採用した理由: 機能性、柔軟性, 比較対象: lvm, dir</li>
<li>ホストシステム構築時のトラブル</li>
<li>オープンファイル数の上限など色々な上限に引っかかった</li>
<li>ネットワーク編</li>
<li>NIC の MAC アドレスがかぶっていた</li>
<li>LXD 運用編</li>
<li>Apache RLimitNPROC にひっかかった</li>
<li>ホストのロードアベレージが急激に上昇 → ZFS がボトルネックだったのでチューニングを実施 (ZFS ARC?)</li>
<li>2ラック (KVM) → 1ラック (LXD)</li>
<li>質問タイム</li>
<li>LXD で新しくサービスできるようになったことはある? → 新たなサービスはないが、快適なディスクIOを提供できている</li>
<li>まだリリースできていないが、準専有の基盤ができた</li>
<li>ZFS はメモリをたくさん使って残りがユーザーの領域? → ご想像にお任せします</li>
<li>どのようなところで運用負荷の軽減? 運用でカバーしているところ? → 物理が減ったので楽になった。リソースの制限の自動化を目標に手動でやっている。物理より柔軟にできるのが良い。</li>
<li>ライブマイグレーションをしているかどうか? → やっていない。今後対応していく。</li>
<li>内製でコントロールパネルのようなものを作っている? → ない。全部コマンドで。</li>
<li>CentOS? → 既存のノウハウをいかすために選んだ。</li>
<li>OS のアップデートはどうしている? → カーネル以外は通常のアップデート</li>
<li>ホスト側のリソース監視はしていると思うが、コンテナ側はどうしている? → 緩めの limit を設定してる</li>
<li>PHP などのバージョン違い? → 問い合わせで個別に対応することもある</li>
<li>サポートが終了したものはなるべく引き継がない</li>
<li>CentOS 6? 7? → 7</li>
</ul>


<h2>休憩</h2>

<p><!-- 20:12 から? -->20:16 まで</p>

<h2>ロリポップ！マネージドクラウド FastContainerの裏側</h2>

<ul>
<li>ロリポップ！マネージドクラウドは FastContainer アーキテクチャを採用していて、コンテナエンジンに haconiwa</li>
<li>質問: 価格? → 価格についてはまだ未定</li>
<li>オートスケール</li>
<li>質問: 何をもってマネージド? → コンテナの起動の仕方が特殊 (FastContainer) で、完全に root 権限があるわけではないなど</li>
<li>質問: データベース? → データベースはコンテナで動いていないので、オートスケールではない</li>
<li>質問: オートスケールは php だけ? → apache + php</li>
<li>質問: データベースがオートスケールではないのなら、ユーザーごとのリソース制御? → まだ未確定</li>
<li>質問: 具体的にアクセスが増えると、とは? → 実際は CPU のスロットルタイムをみているので、CPU の負荷が高くなれば。</li>
<li>逆に負荷が下がればコンテナを減らす。</li>
<li>質問: ユーザーごとのリソースの分割? 他のユーザーの影響は受けるのか? → 基本的には影響は受けない。リソースは分離している。ホスト自体が重くなっても負荷分散できるアーキテクチャになっている。</li>
<li>FastContainer とは?</li>
<li>FastCGI のコンテナ版といったイメージ</li>
<li>リクエスト契機で Web アプリのコンテナが起動</li>
<li><p>一度起動したコンテナはその後しばらく使い回して、一定時間が経過したら終了</p></li>
<li><p>利点</p></li>
<li>オートスケール</li>
<li>リクエストがないと停止するのでリソースの節約</li>
<li>いろんなコンテナで色々なアプリを提供</li>
<li>常に最新</li>
<li><p>他のマシンへの載せ替えも楽</p></li>
<li><p>マネージドクラウドの構成</p></li>
<li>CMDB というところでコンテナの情報を管理</li>
<li>質問: 構成が速度に影響があるか? → ある。今は動くものを優先。 nfs が重いというのは多方面から突っ込まれている</li>
<li>質問: 起動していない時と起動している時のパフォーマンスの差? → 確かにたちがっていない状態のアクセスは時間がかかる。調整中</li>
<li>質問: どこが大きくなっていく? compute? → 今のところ compute と datapool が増えるのを想定している。</li>
<li>パフォーマンスは調整していく段階なので、今後機会があれば。</li>
<li>ngx_mruby</li>
<li>haconiwa</li>
<li>コンテナ</li>
<li>基本は1コンテナに1プロセス</li>
<li>ssh も sshd コンテナ経由</li>
<li>FastContainer リクエスト制御フロー</li>
<li>質問 → 今はチューニングがすんでいないので初回は 2,3 秒ぐらいかかる</li>
<li>質問 → ユーザーが予約枠を設定していて、そこまでしか上がらないようにしている</li>
<li><p>予約枠は金額で設定できるようにしたい</p></li>
<li><p>コンテナの死</p></li>
<li>コンテナの寿命: lifetime が設定されていて一定時間経過で自動停止</li>
<li>なぜ寿命?</li>
<li>リソースの節約</li>
<li>新しくなるタイミングでライブラリなども更新されてセキュア</li>
<li>別ホストに移行したい時も CMDB をいじるだけ</li>
<li>compute のメンテも簡単</li>
<li><p>質問: リクエストが有る限り死なない? → lifetime で死ぬ</p></li>
<li><p>オートスケール</p></li>
<li>haconiwa が cgroup から各コンテナの CPU, I/O 負荷を計測・監視</li>
<li>ユーザーはコンテナの予約枠を設定可能</li>
<li>スケールインは CMDB の変更だけで停止は自動停止任せ</li>
<li><p>予約枠を取るだけでオートスケール</p></li>
<li><p>コンテナの種類も増やしていきたい</p></li>
<li><p>質問タイム</p></li>
<li>予約枠? パケット量をみる? → 設計中。基本的には使ったぶんだけ課金する予定?</li>
<li>コンテナのサーバー自体が高負荷になったり物理的な障害が起きても自動でフェイルオーバー? → 自動ではできていない。手動でのせかえることはできる。自動化は可能ではある。</li>
<li>SSL 証明書? Symantec のような台数分の場合とか → あとで</li>
<li>オートスケールをする監視をしている間隔? → 暫定で1秒</li>
<li>オートスケールの課金の指標は? ニュースで取り上げられる予定だから、とか。 → 設計中</li>
<li>聞き逃し</li>
<li>WAN の IP は共有? → 共有</li>
<li>コンテナはドメインでみている</li>
<li>IP アドレス単位で他のユーザーの影響は受ける可能性がある</li>
<li>現状 CMDB はデータベースのフェイルオーバー任せなので、そこが止まると止まる可能性はある</li>
<li>のせるアプリの開発環境? → 将来的には用意したい</li>
<li>聞き逃し → コンテナ単位でどのくらいパフォーマンスが出ているかだそうとか色々話はある</li>
</ul>


<h2>懇親会</h2>

<p>5分休憩の後で懇親会でした。</p>

<h2>感想</h2>

<p>LXD を採用したという話自体は以前に別の勉強会で聞いたことがあったので、それと重複した話もありましたが、もっと技術的につっこんだ話も聞けておもしろかったです。</p>

<p>LXD は他では使っているという話を聞いたことがないので、使っている人はもっと情報を出してくれればいいのに、という気がしています。
個人的には、情報がなくて探しても何もわからないよりは、Docker のように情報がたくさんあって玉石混交で、自分で見極めないといけない、という状態の方が望ましいです。</p>

<p>マネージドクラウドの話は haconiwa って作ってみたというようなものじゃなくて、ちゃんと実用的に使うためのものだったのかというのが驚きました。
FastContainer は用途があえば良さそうな感じなので、機会があれば使ってみたいと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby の文字リテラルについて]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-10-ruby-char-literal.html"/>
    <updated>2017-09-10T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ruby-char-literal</id>
    <content type="html"><![CDATA[<p>Ruby には <code>?a</code> で 1 文字のみの文字列を返す文字リテラルというものがあります。</p>

<p>Ruby を 1.9 以降から使い始めた人には <code>'a'</code> などの文字列リテラルとの使い分けや <code>String#chr</code> の存在意義などがわからないと思ったので、知っている範囲で歴史的経緯を説明してみたいと思います。</p>

<!--more-->


<h2>Ruby 1.8 以前と Ruby 1.9 以降の違い</h2>

<p>マルチエンコーディング対応が入る前の文字リテラルは1バイト文字用のリテラルで、多バイト文字は使えませんでした。
コントロールやメタは昔から使えました。</p>

<p>以降の実行例も含めて、実行例は 2.0 以降も同じなので、省略しています。
1.8.6 以前は未確認ですが、1.8.7 とほぼ同じはずです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rbenv each ruby -ve 'p ?a'
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>97
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>"a"
</span><span class='line'>% rbenv each ruby -ve 'p ?あ'
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>-e:1: Invalid char `\201' in expression
</span><span class='line'>-e:1: Invalid char `\202' in expression
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>"あ"
</span><span class='line'>% rbenv each ruby -ve 'p ?\C-a'
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>1
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>"\u0001"
</span><span class='line'>% rbenv each ruby -ve 'p ?\M-a'
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>225
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>"\xE1"</span></code></pre></td></tr></table></div></figure>


<h2>文字とは?</h2>

<p>文字を表すのに専用のクラスを導入するという案もあったようですが、Ruby は大クラス主義だという点や、必要とされる機能が文字列とほとんど変わらない、文字というのを文字列とは別に定義するのは難しいなどの理由から、最終的には1文字だけの String で文字を表すことになったと記憶しています。
詳細はメーリングリストや redmine の issue の議論などを探してみてください。</p>

<h2>getc と文字リテラル</h2>

<p>文字リテラルの用途として CUI アプリなどで <code>getc</code> で入力した文字との比較という使われ方があったようで、 <code>getc</code> などを使っているプログラムが、文字リテラルと比較する書き方をしていれば壊れないようになっています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rbenv each ruby -ve 'p ARGF.getc' /dev/zero
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>0
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>"\u0000"
</span><span class='line'>% rbenv each ruby -ve 'p ARGF.getc == ?\C-@' /dev/zero
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>true
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>true</span></code></pre></td></tr></table></div></figure>


<h2><code>String#chr</code></h2>

<p><a href="https://docs.ruby-lang.org/ja/latest/method/String/i/chr.html">String#chr</a> は単独で見ると <code>str[0]</code> などで代用できるので不要そうなメソッドですが、
文字リテラルや <code>getc</code> の返り値を文字列にするのに <code>chr</code> が使われていたので、
<code>String#chr</code> も互換性のために存在します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rbenv each ruby -ve 'p ?a.chr'
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>"a"
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>"a"
</span><span class='line'>% rbenv each ruby -ve 'p ARGF.read(1) == ?\C-@.chr' /dev/zero
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>true
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>true</span></code></pre></td></tr></table></div></figure>


<h2>ord</h2>

<p>逆に <code>ord</code> は <code>str[0]</code> の返り値が文字列に変わってしまったので、常に数値が欲しい時にも使っていました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rbenv each ruby -ve 'p ?\C-@.ord'
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>0
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>0
</span><span class='line'>% rbenv each ruby -ve 'p "a"[0]'
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>97
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>"a"
</span><span class='line'>% rbenv each ruby -ve 'p "a"[0].ord'
</span><span class='line'>ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
</span><span class='line'>97
</span><span class='line'>ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
</span><span class='line'>97</span></code></pre></td></tr></table></div></figure>


<h2>結論</h2>

<p>新規に書くプログラムで積極的に文字リテラル ( <code>?a</code> ) を使う必要性はほとんどないので、普通は文字列リテラルだけ使っておけば良いと思います。</p>

<p><code>getc</code> などとの組み合わせのときに文字リテラルを使えば意味を明確にできますが、今更 1.8 以前との互換性を気にすることもないと思うので、古いプログラムで使われていたときに読めればいいだけで、書くときに使う必要はないと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO&東海道らぐオフラインミーティング 2017/08/27 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-27-lilo-tokaidolug.html"/>
    <updated>2017-08-27T13:33:33+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-tokaidolug</id>
    <content type="html"><![CDATA[<p><a href="https://lilo.connpass.com/event/64381/">LILO&amp;東海道らぐオフラインミーティング 2017/08/27</a> に参加しました。</p>

<p>今回もアンカンファレンス形式でした。</p>

<!--more-->


<h2>メモ</h2>

<ul>
<li>会場はいつもの 4 階でした。</li>
<li>ハッシュタグ: <code>#lilo_jp</code> <code>#東海道らぐ</code></li>
<li>登録参加者数 12名</li>
<li>自己紹介から</li>
<li>最初の発表は発表者の希望により非公開</li>
<li>途中からきた人は発表の合間に随時自己紹介</li>
</ul>


<h2>自分の発表</h2>

<ul>
<li>自分の lilo.linux.or.jp の話</li>
<li>発表資料に入れていなかった部分については以下の通り</li>
<li>OGP を入れたきっかけは <a href="https://togetter.com/li/1107707">LILO&amp;東海道らぐオフラインミーティング 2017/05/06の記録 - Togetterまとめ</a> で connpass だけ概要と画像が出ていたため</li>
<li><a href="https://developers.facebook.com/tools/debug/">Open Graph Debugger - Developers Facebook</a> (Facebook アカウントがないと使えない?) は OGP がなくても自動検出した内容で埋められるため、本当に反映されるかどうかの確認には使えなかった覚えがあります</li>
<li><a href="https://ja.osdn.net/projects/clamav-jp/lists/archive/users/2017-August/000280.html">[clamav-jp 281] ウィルスDB更新の異常について（解決済）</a></li>
<li><a href="http://qiita.com/ttdoda/items/f16422d709e264cbb8a1">Postfix 2.12 の compatibility_level</a></li>
<li>dokuwiki は <a href="https://bugs.debian.org/854592">#854592 dokuwiki: Unable to login, missing usr/share/php/Crypt/AES.php</a> で消えていた</li>
</ul>


<h2>休憩</h2>

<h2>GPD-Pocket に Ubuntu 17.04 をインストールした話</h2>

<ul>
<li>東海道らぐ四日市 11/25</li>
<li>GPD-Pocket でも Ubuntu 17.04 が動いた</li>
<li>Kernel 4.13RC + Intel Graphics Driver OSS + 蓋開閉</li>
<li>色々な条件で試してNGだったが、偶然蓋を開けたら画面がうつった</li>
<li>ATOM はバニラカーネルの時点でバグがあるらしい</li>
</ul>


<h2>Fireduck OS</h2>

<ul>
<li>東海道LUG有志によるLinuxディストリビューションプロジェクト</li>
<li>○○焼き → Fire duck (あひる焼き)</li>
<li>タブレット向け</li>
<li><a href="https://github.com/TokaidoLUG/fireduckos">https://github.com/TokaidoLUG/fireduckos</a></li>
<li>アーキテクチャ説明</li>
<li>悩み事</li>
<li>journald が起動したプロセスの出力をファイルに書き込むので重い</li>
<li>OSM のアプリ?</li>
<li>UEFI32 向けに 64 bit 環境で 32 bit 向けのビルドが必要なので multilib を使った</li>
<li><a href="https://github.com/TokaidoLUG/meta-intel-mobile">https://github.com/TokaidoLUG/meta-intel-mobile</a></li>
<li><a href="https://github.com/TokaidoLUG">Tokaido Linux User Group</a></li>
<li>欲しいアプリの話</li>
<li>資料は <a href="https://www.slideshare.net/wata2ki">https://www.slideshare.net/wata2ki</a> に公開予定</li>
</ul>


<h2>休憩</h2>

<ul>
<li>懇親会参加者の確認</li>
</ul>


<h2>つなぎの発表</h2>

<ul>
<li>オープンソースカンファレンス広島の紹介</li>
<li>Allwinner タブレットの実演</li>
<li>firefox を動かして、ネットワークが繋がっていないので about:mozilla とか about:robots とか</li>
</ul>


<h2>State of the Map 2017 に行ってきたよ</h2>

<ul>
<li>Open Street Map の国際会議</li>
<li>日本で国際会議をやるのは珍しい</li>
<li>会津若松市は LibreOffice を使っているので、ついでに話を聞きに行った</li>
<li>写真を見ながら色々な話</li>
<li>Maps With Me というアプリが便利らしい</li>
</ul>


<h2>最後の話</h2>

<p>プロジェクターに映らなかったので、集まって話をきいていました。</p>

<h2>クロージング</h2>

<ul>
<li>今後の予定など</li>
<li>会場費は学生以外が 100 円でした。</li>
</ul>


<h2>発表した内容</h2>

<p>スライドはいつも通り <a href="http://slide.rabbit-shocker.org/authors/znz/lilo-20170827/">Rabbit Slide Show</a> (<a href="https://rubygems.org/gems/rabbit-slide-znz-lilo-20170827">RubyGems</a>), <a href="https://slideshare.net/znzjp/lilolinuxorjp-20178">SlideShare</a>, <a href="https://speakerdeck.com/u/znz/p/lilo-dot-linux-dot-or-dot-jp-falsehua-2017nian-8yue">Speaker Deck</a> にあげています。(ソースは <a href="https://github.com/znz/lilo-20170827">github</a> にあげています。)</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/lilo-20170827/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/lilo-20170827/" title="lilo.linux.or.jp の話 (2017年8月)">lilo.linux.or.jp の話 (2017年8月)</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第30回シェル芸勉強会　大阪サテライト＠さくらインターネット大阪本社に午後から参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-26-usptomo-osaka.html"/>
    <updated>2017-08-26T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/usptomo-osaka</id>
    <content type="html"><![CDATA[<p><a href="https://atnd.org/events/90102">第30回シェル芸勉強会　大阪サテライト＠さくらインターネット大阪本社</a>に午後から参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>最近よくいっているグランフロントタワーAのさくらインターネットさんでしたが、今回は初めて部屋の中の方に参加しました。</p>

<h2>第30回シェル芸勉強会</h2>

<p>問題は <a href="https://blog.ueda.tech/?p=10188">【問題のみ】jus共催 第30回危念シェル芸勉強会</a> にあります。</p>

<p>主に macOS の環境で確認しました。</p>

<h3>Q1</h3>

<ul>
<li><code>awk '/^Keywords:/{print FILENAME ":" $0;nextfile}' posts/*/*.md</code> としてみた。</li>
<li>nextfile などを調べていたら時間がかかってしまってあまりちゃんとできず。</li>
<li>ファイル名部分のパスなどの掃除が必要と気づいてなかったのでできていなかった。</li>
<li>解答例では <code>grep -m 1</code> を使っていたけど、 macOS の grep (BSD grep) 2.5.1-FreeBSD だと動作が違うようで、最初のファイルで止まってしまって、うまく動かなかった。</li>
</ul>


<p>macOS Sierra 10.12.6 の例:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% grep --version
</span><span class='line'>grep (BSD grep) 2.5.1-FreeBSD
</span><span class='line'>% grep -m 1 : /etc/passwd /etc/group
</span><span class='line'>/etc/passwd:nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false</span></code></pre></td></tr></table></div></figure>


<p>Debian GNU/Linux 9.1 (stretch) の例:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ grep --version
</span><span class='line'>grep (GNU grep) 2.27
</span><span class='line'>Copyright (C) 2016 Free Software Foundation, Inc.
</span><span class='line'>ライセンス GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
</span><span class='line'>This is free software: you are free to change and redistribute it.
</span><span class='line'>There is NO WARRANTY, to the extent permitted by law.
</span><span class='line'>
</span><span class='line'>作者 Mike Haertel および その他の方々は &lt;http://git.sv.gnu.org/cgit/grep.git/tree/AUTHORS&gt; を参照してください。
</span><span class='line'>$ grep -m 1 : /etc/passwd /etc/group
</span><span class='line'>/etc/passwd:root:x:0:0:root:/root:/bin/bash
</span><span class='line'>/etc/group:root:x:0:</span></code></pre></td></tr></table></div></figure>


<h3>Q2</h3>

<ul>
<li><code>perl -pe 's,(href|src)="(?!http|/)(\./)?,$1="/files/,g' url.html</code></li>
<li><code>(?!)</code> を使いたかったので Perl で。</li>
<li>最初に試しに書いたのはゆるすぎていらないところにつきまくっていた。</li>
<li>正規表現が緩いと charset の属性まで変換してしまうという罠があった。</li>
<li>気にせず置き換えてあとで <code>/files/http://</code> などになった場合に戻すという方針の人が多かった。</li>
</ul>


<h3>Q3</h3>

<ul>
<li><code>&lt; list | awk 'BEGIN{print "...";print "..."};/^\* /{print "&lt;li&gt;" $2 "&lt;/li&gt;"};END{print "...";print "..."}'</code></li>
<li>前後の部分の内容を省略するとこんな感じになった。</li>
<li><code>cat list | pandoc -t html5 -s</code> して削るという手もありらしい</li>
<li>Web サーバーにするには list.html の内容だけではなく <code>HTTP/1.1 200 OK</code> の行も追加する必要があった</li>
</ul>


<h3>Q4</h3>

<ul>
<li>hub コマンドを使ってよかったらしい</li>
<li>がんばって API をたたくのもありっぽい</li>
</ul>


<h3>Q5</h3>

<ul>
<li><code>sed -e 's/[ *]//g' -e '1s/^/p /' -e '$!s/$/*/' complex | ruby</code> はかっこ不足だった。(複素数リテラルが優先されると思ってしまっていた。)</li>
<li><code>sed -e 's/[ *]//g' -e '1s/^/p (/' -e '$!s/$/)*(/' -e '$s/$/)/' complex | ruby</code> でうまくいった。</li>
<li>別解として1行ごとに解釈して inject してみた : <code>ruby -e 'p ARGF.each_line.map{|s|eval(s.gsub(/(?&lt;!\d)i/,"1i"))}.inject(:*)' complex</code></li>
</ul>


<h3>Q6</h3>

<ul>
<li>真面目に計算すると <code>ruby -e 'a=[1,1];f=-&gt;(n){a[n]||=f[n-1]+f[n-2]};1.step{|n|if f[n]==6765;p f[n-4];exit;end}'</code> になった。</li>
<li>自分で計算せずに出そうとすると <code>curl https://en.wikipedia.org/wiki/Fibonacci_number | grep -B4 6765 | head -n 1 | grep -Eo '[[:digit:]]+'</code> になった。英語版 Wikipedia を使っているのは URL が短くてわかりやすいからで、日本語版 Wikipedia の URL でも可能でした。</li>
<li>最初、curl のダウンロード状況出力の右に隠れてしまって1行見落としていて <code>grep -B5</code> にしてしまっていましたが、 <code>grep -B4</code> でした。</li>
</ul>


<h3>Q7</h3>

<ul>
<li>zsh の組み込みのみで <code>for n in {00..99}; [[ -z ${(FM)"$(&lt; nums)":#*$n*} ]] &amp;&amp; echo $n</code></li>
<li>解説は <a href="http://blog.n-z.jp/blog/2014-12-11-zsh-grep.html">zshでgrepのようなことをする</a> を参照</li>
<li>シーケンスは <code>seq -w 0 99</code> とか <code>{0..9}{0..9}</code> とか</li>
<li><code>{00..99}</code> は bash 3 だとダメそうだった。 (0 1 &hellip; になった)</li>
<li><code>grep -o ..</code> は <code>echo 1234 | grep -o ..</code> で 23 が出てこないのでダメ</li>
<li><code>echo 1234 | sed p | sed '1s/.//' | grep -o ..</code> のようにする</li>
<li>解答例: <code>cat nums | sed p | sed '1s/.//' | grep -o .. | cat - &lt;(seq -w 0 99) | sort | uniq -u</code></li>
<li>fold -w 2 とかこういう時に使ってみると良さそうなコマンドは色々あるっぽい</li>
</ul>


<h3>Q8</h3>

<ul>
<li>問題 差し替え <a href="https://twitter.com/ryuichiueda/status/901330659527897088">https://twitter.com/ryuichiueda/status/901330659527897088</a></li>
<li><code>ruby -e 'ARGF.each_line.map{|s|[(s[2].ord-s[0].ord).abs,s]}.max[1].display' alphabet</code></li>
<li><code>z-v</code> という逆順のところも考慮して abs を入れたけどいらなかったかもしれない。</li>
<li>別解で36進数を使ってみた: <code>ruby -e 'ARGF.each_line.map{|s|[eval(s.gsub(/\w+/){$&amp;.to_i(36)}).abs,s]}.max[1].display' alphabet</code></li>
<li>abs の代わりにソートして引くという方法もあるらしい</li>
<li><code>map</code> + <code>max[1]</code> でシュワルツ変換的なことをしなくても <code>max_by</code> でよかったらしい</li>
<li>解答例は bash のブレース展開を使っていた</li>
<li>xxd で変換して計算する解答例も紹介されていた</li>
</ul>


<h2>午後の部終了</h2>

<p>午後の部まで参加の人はここで帰っていました。</p>

<h2>LT 大会</h2>

<p>LT は中継はどうなるんだろうと思っていたら、大阪は大阪で LT をしていました。</p>

<h3>シェル芸思考</h3>

<ul>
<li><a href="https://www.slideshare.net/kunst1080/30lt">第30回シェル芸勉強会LT シェル芸思考</a></li>
<li>問題を解く時にどう考えているのか</li>
<li>1: コマンド一撃でオプションを知っていればすぐにできるようなものかどうか考える</li>
<li>終わりそうにない場合続きを考える</li>
<li>2: 中間データの形式を設計する</li>
<li>3: コマンドを組み合わせて解いていく</li>
<li>メインは 2</li>
<li>設計の考え方</li>
<li>形について考える</li>
<li>例: <a href="https://togetter.com/li/1041621">【ファン迷惑】「響け！ユーフォニアム」という文字列だけで遊ぶシェル芸人達</a></li>
<li>中間データ1: 11回繰り返す</li>
<li>中間データ2: 11文字で折り返す</li>
<li>中間データ3: 10文字で切り出す</li>
</ul>


<h3>FORK 爆弾爆発中のロードアベレージを見る</h3>

<ul>
<li><a href="https://speakerdeck.com/msr_i386/cgroup">https://speakerdeck.com/msr_i386/cgroup</a></li>
<li>前回 SysRq でクラッシュさせてカーネルダンプで見た</li>
<li>今回 実行中にみたい</li>
<li>uptime コマンド, w コマンド, top コマンド, カーネルダンプの解析</li>
<li>カーネルダンプは1回のみでリアルタイムは無理</li>
<li>uptime, w は起動できない</li>
<li>top は反応が止まるので無理</li>
<li>cgroup で制御: cpuset を 0-2 と memory を 1GB に制限</li>
<li>root:bash に制限</li>
<li>forkbomb というグループを用意する</li>
<li>仮想4コア, メモリ16GB の VM でデモ</li>
<li>bash はランダムに kill されるのでデフォルトシェルを zsh にしておいて zsh から bash を起動</li>
<li>キーボード配列がおかしかったのでメモ帳で入力して貼り付けしたら zsh で実行してしまう事故発生</li>
<li>VM 再起動待ち</li>
<li>今度はちゃんと bash で実行</li>
<li>メモリ 1GB だと 11700 個ぐらい bash が起動している</li>
<li>ロードアベレージは 10000 を超えていた</li>
<li>cgconfig.conf は CentOS 7 では非推奨で systemd 経由で使うようになっている</li>
</ul>


<h3>破壊的難読化シェル芸</h3>

<ul>
<li>難読化シェル芸</li>
<li>置換による難読化はあまりにも弱い</li>
<li>難読化シェル芸には新たな武器が必要</li>
<li>武器っぽいコマンド gunzip (ガンジップ)</li>
<li>gun(銃)が弱いわけがない</li>
<li>gzip -cf</li>
<li>入力できない</li>
<li>xxd を通す</li>
<li>xxd -r -p | gunzip</li>
<li>別のアプローチ</li>
<li>gunzip の代わりに cut と組み合わせる</li>
<li>いろいろ探してみつけた例を実行</li>
</ul>


<h3>AWS API リクエストへの署名</h3>

<ul>
<li>REST API</li>
<li>リクエストに access key と secret access key で署名する必要がある</li>
<li>署名バージョン4: AWS4-HMAC-SHA256</li>
<li>署名のテストスイートも公開されている</li>
<li>署名のプロセスをシェル芸で追いかける</li>
<li>CLI / SDK に存在しない API がある: Amazon RDS / DownloadCompleteDBLogFile</li>
<li>CLI / SDK にあるのは download-db-log-file-portion のみで分割ダウンロードされる</li>
<li>例に使うのは AWS IAM / ListUsers</li>
<li>例に使う時刻も固定しておく</li>
<li>署名作成手順の説明</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Developers Meetup #4 大阪会場に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-24-railsdm.html"/>
    <updated>2017-08-24T22:52:52+09:00</updated>
    <id>http://blog.n-z.jp/blog/railsdm</id>
    <content type="html"><![CDATA[<p><a href="https://rails-developers-meetup.connpass.com/event/63373/">Rails Developers Meetup #4 大阪会場</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>最近よくいっているタワーAではなく、タワーBだったので、グランフロント内の案内をみながらたどり着きました。</p>

<h2>オープニング</h2>

<ul>
<li>会場の説明</li>
<li>ハッシュタグは <code>#railsdm</code></li>
<li>プログラムの紹介</li>
</ul>


<h2>Keynote 01: Dive into Rubygems</h2>

<ul>
<li><a href="http://qiita.com/pocke/items/1db63a3aecade1245f42">Dive into Rubygems</a></li>
<li>rails は new しただけでも依存している gem が結構多い</li>
<li>Gem のコードを読んだ実例</li>
<li>Gem の読み方</li>
<li>gem-src が便利</li>
<li>Gem のディレクトリ構成</li>
<li>lib: 基本的にlib/直下にはGEMNAME.rbとGEMNAME/しか置かれていない (rubocop とか)</li>
<li>spec, test: テストコードは動くexample</li>
<li>exe, bin: 実行ファイル (最近は exe)</li>
<li>Gem の依存関係</li>
<li><code>add_development_dependency</code> を使わずに <code>Gemfile</code> に書いてしまっている場合もある</li>
<li>Gem をインストールする</li>
<li>tmpgem の紹介</li>
<li>Gem を作る</li>
<li>exe ディレクトリは自分で作る</li>
<li><p>git に stage しないと gem に追加されない (gemspec で <code>git ls-files -z</code> を使っているため)</p></li>
<li><p><a href="https://twitter.com/p_ck_/status/803420202008313856">https://twitter.com/p_ck_/status/803420202008313856</a> <code>alias taketemp='cd "$(mktemp -d)"'</code></p></li>
<li>zsh の <code>REPORTTIME</code> と <code>TIMEFMT</code></li>
</ul>


<h2>Keynote 02: プロを目指すRailsエンジニアのための公開コードレビュー</h2>

<ul>
<li>自己紹介</li>
<li><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails</a></li>
<li><a href="http://blog.jnito.com/entry/2017/05/30/120148">「プロを目指す人のためのRuby入門」という本が出る予定</a></li>
<li>公開コードレビュー・その1: <a href="https://github.com/JunichiIto/train-ticket-rails/pull/27/files">https://github.com/JunichiIto/train-ticket-rails/pull/27/files</a></li>
<li>公開コードレビュー・その2: <a href="https://github.com/JunichiIto/train-ticket-rails/pull/15/files">https://github.com/JunichiIto/train-ticket-rails/pull/15/files</a></li>
<li><code>calculate</code> が 0 を返すのが 0 円ではなく、特別扱いするという意味なのが将来バグの元になりそう</li>
<li>出題者の解答例: <a href="https://github.com/JunichiIto/train-ticket-rails/compare/answer">https://github.com/JunichiIto/train-ticket-rails/compare/answer</a></li>
<li>気になったポイント</li>
<li>使用済みの切符: 1. nil でなければ真, 2. present? で明治, 3. インスタンスメソッドを使って抽象化</li>
<li>3が読み手にやさしい</li>
<li><code>?</code> で終わるメソッドの責務を考える</li>
<li>例: <a href="https://github.com/JunichiIto/train-ticket-rails/pull/10/files">https://github.com/JunichiIto/train-ticket-rails/pull/10/files</a></li>
<li>チェックして <code>redirect_to</code>, チェックして <code>errors.add</code></li>
<li>いいの?</li>
<li><code>?</code> で終わるメソッドは真偽値を返すだけにするのが良いのではないか</li>
<li>例外: ActiveRecord の valid? メソッド</li>
<li>redirect_to + return の return っている?</li>
<li>複数回呼ぶと DoubleRenderError になるので、場合によっては必要</li>
<li>まとめ</li>
<li>メソッドの責務を考えよう</li>
<li>いい感じに抽象化しよう: 「意図がわかるロジック」よりも「意図がわかる名前」を</li>
<li>不要なコンテキストをなくそう</li>
<li>Rails の機能を使いこなそう</li>
<li><p>この発表までの間に pull request してくれたものは全て動画でコメントする予定</p></li>
<li><p><a href="https://github.com/JunichiIto/train-ticket-rails/compare/answer#diff-c5c8cfc10273d831451b7acc93c3809dR7">https://github.com/JunichiIto/train-ticket-rails/compare/answer#diff-c5c8cfc10273d831451b7acc93c3809dR7</a> で <code>exited?</code> を使っていないのは、降りきってないのに validate するのは英語として不自然に感じたから</p></li>
<li><p>後置 if を使うかどうかは読んだ時に不自然に感じないかどうか</p></li>
<li><p><a href="https://speakerdeck.com/jnchito/number-railsdm">https://speakerdeck.com/jnchito/number-railsdm</a></p></li>
</ul>


<h2>休憩</h2>

<h2>LT 01: Bye, tachikoma gem</h2>

<ul>
<li><a href="https://www.slideshare.net/sanemat/byetachikomagem">Bye, tachikoma gem</a></li>
<li>tachikoma gem が deprecated</li>
<li>2015-12-10 に Tachikoma next というスライドを作っていた</li>
<li>tachikoma gem の思い出</li>
<li><p><a href="http://tachikoma.io/">http://tachikoma.io/</a> は続く</p></li>
<li><p>Saddler gem → Reviewdog</p></li>
<li><a href="https://github.com/packsaddle">https://github.com/packsaddle</a></li>
<li><p>reviewdog は reviewdog design docs がある</p></li>
<li><p>Heroku の CLI は Go 実装から Pure Node.js に変更したらしい <a href="https://blog.heroku.com/evolution-of-heroku-cli-2008-2017">https://blog.heroku.com/evolution-of-heroku-cli-2008-2017</a></p></li>
</ul>


<h2>LT 02: Rubyistだった僕がRailsを使ってみて（仮）</h2>

<ul>
<li>1: Ruby で感動したこと</li>
<li>ブロックと従属節: 従属節も2つとる自然言語はない</li>
<li>2: Ruby をやらずに Rails から入った人にありがちなこと</li>
<li>(面白かったけど速くてメモ取れず)</li>
<li>基本が大事</li>
<li>3: マネーフォワード API</li>
<li>認証: OpenID Connect</li>
<li>認可: OAuth 2.0</li>
<li>doorkeeper gem を使っている</li>
</ul>


<h2>LT 03: Railsで新規サービスを開発する際にやったこと</h2>

<ul>
<li><a href="https://www.slideshare.net/JyunichiKuriyama/rails-79120665">https://www.slideshare.net/JyunichiKuriyama/rails-79120665</a></li>
<li><a href="https://ydkr.jp/">https://ydkr.jp/</a></li>
<li>プロジェクトの目的、目標とは別に自分の目的を決めた: 「技術を正しくつかう」</li>
<li>docker による開発環境などを準備</li>
<li>テストは必ず書くと決めた</li>
<li>モチベーションの維持のため、まえにすすむことを意識</li>
<li>どんなによいコードでもサービスが当たらなければ意味ない</li>
<li>どう書いてほしいのかどういう考えで作ってるのかを考えながらやるのはよかった</li>
<li>最後に自己紹介</li>
<li>質疑応答</li>
<li>最低限 controller の spec</li>
</ul>


<h2>LT 04: Webpacker is installed</h2>

<ul>
<li>webpacker gem</li>
<li>Misoca に導入した時の話</li>
<li>Before: sprockets, browserify-rails, npm 依存とそうでないものが混在, フルビルドに時間がかかる</li>
<li><p>After: js は webpacker に完全移行, CSS は引き続き sprockets, フルビルドが20〜30秒</p></li>
<li><p>よかったところ</p></li>
<li>環境に応じた切り替え, fingerprint 付きファイルの生成 などを一気にやってくれる</li>
<li>webpack 自体を活用できる</li>
<li>例: CommonsChunkPlugin</li>
<li><p>webpacker 自体の恩恵ではなく、 webpacker はきっかけ</p></li>
<li><p>つらかったところ</p></li>
<li>Rails と webpack の境界が曖昧</li>
<li>開発中の問題: webpack の起動がめんどくさい</li>
<li>foreman で一緒に起動はできるが、なんか止まることがある?</li>
<li>feature spec でビルドされないことがある</li>
<li><p><code>javascript_pack_tag</code> が更新の時にビルドされない</p></li>
<li><p>感想</p></li>
<li>総合してふりかえると webpacker はよかった</li>
<li>Rails Way に乗れることは大きい</li>
<li><p>カスタマイズ時には知識が必要</p></li>
<li><p>質疑応答</p></li>
<li><p>webpacker のデフォルトのディレクトリ構成に移行した</p></li>
<li><p><a href="https://speakerdeck.com/mugi_uno/webpacker-is-installed">https://speakerdeck.com/mugi_uno/webpacker-is-installed</a></p></li>
</ul>


<h2>LT 05: Automation test in RoR project</h2>

<ul>
<li>後の工程でバグが見つかると高いコストがかかる</li>
<li>UI テスト: 手動テスト vs 自動テスト</li>
<li>自動テストツール cucumber</li>
<li>Gherkin language: Cucumber nomenclator</li>
<li>Capybara</li>
<li>Gherkin to Capybara</li>
<li>results</li>
<li>Cucumber: tagging</li>
<li><p>Distributed testing with Docker</p></li>
<li><p>質疑応答</p></li>
<li>Q: エンジニア以外がかけるという話があるが、結局エンジニアが書くことになってつらい?</li>
<li>A: 結局エンジニアが書いてるっぽい(?)</li>
<li>Q: UI テストに cucumber 以外を使うなら何を使う?</li>
<li>A: Selenium IDE を使っている</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>次回予告</li>
<li>次回から TECH PLAY で募集</li>
<li>12月に Rails Meetup 2017 というのをやる</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Languages 2017 in ODC に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-20-ll-in-odc.html"/>
    <updated>2017-08-20T22:55:49+09:00</updated>
    <id>http://blog.n-z.jp/blog/ll-in-odc</id>
    <content type="html"><![CDATA[<p><a href="https://ll.jus.or.jp/2017/">LLイベント2017 – Learn Languages</a> に参加しました。
今回は名前が Lightweight Language から Learn Languages に変わって (単数形から複数形に変わってる)、
<a href="https://www.ospn.jp/odc2017/">オープンデベロッパーズカンファレンス2017 Tokyo</a> というイベントの一部としての開催でした。
今年は本編の方は無料イベントになっていました。</p>

<!--more-->


<h2>会場</h2>

<p>たまには飛行機に乗りたいと思ったので、行きは飛行機で移動しました。</p>

<p>京急蒲田駅から(路線検索によると15分ぐらい)歩く必要がありました。</p>

<p>帰りは新幹線でしたが、金券ショップで買える指定席の回数券が使えない時期の最終日だったので、自由席で帰りました。
ギリギリだと座れないと辛そうというのと翌日がつらいかもということもあって、懇親会には参加せずに帰りました。</p>

<p>0泊で東京のイベントに参加したのは、思い出せる限りでは Binary 2.0カンファレンス 2005 以来のような気がします。</p>

<h2>オープニング</h2>

<ul>
<li>いろいろあって名前が変わった</li>
<li>会場無線LANはなし</li>
<li>LT の枠が余っているのでまだ募集中</li>
</ul>


<h2>基調講演「ハッカーになるためには何の言語を勉強したらいいですか？」</h2>

<ul>
<li>SECCON</li>
<li>CTF (Capture The Flag)</li>
<li>ハッカー育成</li>
<li>ハッカー vs. クラッカー</li>
<li>世界で有名な日本人ハッカー</li>
<li>ハッカーの誕生場所</li>
<li>初期のハッカーはハードウェア対象だったのでわかりやすかった</li>
<li>ソフトウェアだとわかりにくいので、可視化が重要</li>
<li>ENIAC : 配線でプログラミング</li>
<li>紙でプログラミング</li>
<li>FORTRAN : パンチカード</li>
<li>紙テープ</li>
<li>若者の「01」離れ</li>
<li>TK-80</li>
<li>回路図もついていた</li>
<li>大人の科学 vol.24 (4bitマイコン)</li>
<li>Harvard Mark I Computer (1944)</li>
<li>世界初の汎用計算機 (完全自動計算機)</li>
<li>プログラムとデータが別々</li>
<li>グレース・ホッパーの作業日誌 (1945年)</li>
<li>史上初のコンピュータ・バグ</li>
<li>原因となった「蛾」</li>
<li>COBOL</li>
<li>COBOL は英語の文法をベースにしている</li>
<li>文末が「.」で終わるのは古い言語</li>
<li>「.」が抜けるとわかりにくいなどデバッグしにくい</li>
<li>ハーバード・アーキテクチャの復権?</li>
<li>現代のコンピュータセキュリティの根本問題: データとコードの分離がされていないこと</li>
<li>XSS脆弱性、SQLインジェクション、x86任意コード実行(マルウェア感染)</li>
<li>01を実践的に学べる場所が必要</li>
<li>ローマは1日にしてならず</li>
<li>せめて2日はほしい</li>
<li>ハッカーになるためには 何の言語を勉強したらいいですか?</li>
<li>ペルシャ語</li>
<li>Stuxnet (スタックスネット)</li>
<li>イランの核施設の遠心分離機をターゲットにした。SiemensのSTEP7 (ビジュアルプログラミング言語、JIS 3503でも標準化されてる) (メモできていなかったので <a href="https://twitter.com/tadsan/status/899118034182316032">https://twitter.com/tadsan/status/899118034182316032</a> より)</li>
<li>アドレッシング表記 127.7 (小数点 .0-7 はビット目)</li>
<li>マルウェアFlameではLua言語が使われていた? SQLiteも?</li>
<li>ベルシャ語 (外国語)、機械語 (CPU, VM)、ビジュアル言語 (ラダープログラミング)、ドメイン言語 (EUCの発展)</li>
<li>一番いいたかったのは外国語を勉強しましょう</li>
<li>初めての PC から大学時代の話</li>
<li>制約のある環境だと、ハッカーが育ちやすい</li>
<li>Perl でマインスイーパーの自動クリアのデモ</li>
<li>Win32::GuiTest のデモ</li>
<li>ケータイやスマホの機械操作</li>
<li>会社で PRML 読書会</li>
<li>関連情報を書籍化</li>
<li>機械学習のプログラミング (最近)</li>
<li>scikit-learn</li>
<li>機械学習では最近 Python, R がよく使われる</li>
<li>画像解析はデバッグが大変</li>
<li>暴走問題</li>
<li>自動操作中なのでタスクマネージャーも操作できない</li>
<li>コンソールもひらけないので taskkill も使えない</li>
<li>USB メモリーの autorun.inf で <code>[Autorun] open=taskkill /F /IM perl.exe</code></li>
<li>悪用されたので autorun は Vista 以降だとデフォルトで無効</li>
<li>USB にさすと cmd.exe がどんどん開くデバイス (キーボードとして振る舞う)</li>
<li>MikuMikuDance</li>
<li>MMM と kinect で機械学習を使ったモーションキャプチャ</li>
<li>akinator</li>
<li>集団学習アルゴリズム</li>
<li>Randomized Forests in Vision</li>
<li><a href="https://twitter.com/kinyuka/status/892577093166419968">https://twitter.com/kinyuka/status/892577093166419968</a> (「AI人材を募集します」で始まるツイート) の紹介</li>
<li>質疑応答</li>
<li>アセンブラかるた</li>
<li>アセンブラ・クロスワードパズル</li>
<li>study と learn の違い</li>
<li>高校 (児童・生徒) までは教えてもらう、大学 (学生) は自分で勉強する</li>
<li>study は学習していること、learn は習得した</li>
<li>小学生とかに教えるときにビジュアルプログラミングとかだけではなく高度なことを教えるのは?</li>
<li>ぺたスクリプト というのがある</li>
<li>国語が重要</li>
<li>同年代以外のいろんな人と話をするのも大事</li>
</ul>


<h2>休憩</h2>

<p>LT の募集案内があった。</p>

<h2>関数型言語のすすめ</h2>

<ul>
<li>関数プログラミング用言語としての Haskell</li>
<li><a href="http://www.sampou.org/">http://www.sampou.org/</a></li>
<li>関数プログラミングとは</li>
<li>副作用を使わない?</li>
<li>関数?</li>
<li>なぜ関数プログラミング : 抽象的にわかりやすく考えたい, 簡潔で読みやすいプログラム</li>
<li>Haskell : 汎用の純粋関数プログラミング言語</li>
<li>ポイントは、ほしい値の仕様は型で構成する, ほしい値は式で構成する</li>
<li>書く前に読めるようになってほしい</li>
<li>コードの読み方のポイントは関数の型シグネチャ</li>
<li>型シグネチャの中の <code>-&gt;</code> は型構成演算子で右結合</li>
<li><code>g :: a -&gt; b -&gt; c</code> は <code>g :: a -&gt; (b -&gt; c)</code></li>
<li>関数適用は左結合なので <code>g x y</code> は <code>(g x) y</code></li>
<li>無名関数はあるが実際にはほとんど使わない</li>
<li><p>例: 最初は型を書いて実装は undefined にしておいてあとで書く</p></li>
<li><p>Scala 言語紹介</p></li>
<li>2003年に開発された</li>
<li>Scalable Language</li>
<li>オブジェクト指向と関数型の融合</li>
<li>全ての値はオブジェクト</li>
<li>var と val</li>
<li>統一的な型階層: 全ての型は Any のサブタイプ、 Nothing は全ての型のスーパータイプ</li>
<li>case classes</li>
<li>代数的データ型とパターンマッチ</li>
<li>不変コレクションとパターンマッチ</li>
<li>ローカル型推論</li>
<li><p>第一級関数と高階関数</p></li>
<li><p>Elixir 言語紹介</p></li>
<li>アクターモデル</li>
<li>動的型付け</li>
<li>ネットワークサーバー構築に特化した</li>
<li>関数の引数のパターンマッチ</li>
<li>ドキュメント</li>
<li>ドキュメントテスト</li>
<li>mix test でドキュメント中の example が動く</li>
<li>型システムは(まだ)ない</li>
<li>Elixir プログラミング = 関数型プログラミング + アクターモデル</li>
<li>Elixir の計算モデル</li>
<li>Elixir のアーキテクチャ</li>
<li><p>なぜ Elixir を使うのか?</p></li>
<li><p>関数型プログラミングとは入力から出力への写像</p></li>
<li><p>今回のお題</p></li>
<li>関数型プログラミングのメリットを示す、比較的簡潔なコードになる、意味のある問題</li>
<li>構文解析を行うライブラリを作成せよ (パーザコンビネータ)、様々な用途に対応できる、簡潔にかける</li>
<li><p>サンプルの入力: 四則演算の数式: カッコを含む, 空白は含まない, 整数のみ</p></li>
<li><p>Haskell 版</p></li>
<li>パーサ「言語」を構成する要件</li>
<li>型から考える</li>
<li><p>(感想: 抽象的で難しかった)</p></li>
<li><p>Scala 版</p></li>
<li>計算しない場合は10行程度</li>
<li>foldLeft を使って計算</li>
<li>ここまではライブラリを使った例、ここからはライブラリの方の説明</li>
<li>作る側は60行程度</li>
<li>第一級関数やパターンマッチの恩恵</li>
<li><p>パーザを関数とみなすことの恩恵</p></li>
<li><p>Elixir 版</p></li>
<li>パーサー I/F: 入力と出力を決める</li>
<li>BaseModule と CalcModule を作る</li>
<li>ドキュメントにテストを書きながら実装</li>
<li>Elixir ではパイプ演算子 (<code>|&gt;</code>) を多用する</li>
<li><a href="https://github.com/ohr486/LearnLanguage2017inODC">https://github.com/ohr486/LearnLanguage2017inODC</a></li>
<li><p><a href="https://twitter.com/ohrdev/status/899156490832945152">https://twitter.com/ohrdev/status/899156490832945152</a></p></li>
<li><p>質疑応答</p></li>
<li>バージョンアップするときに無停止でできるという話があったが Erlang の VM のバージョンアップのときは無停止ではできないであっているか → あっている</li>
<li>プロセスのメモリ消費: トランポリン実装? プロセス実装のドキュメントを見るのが良いのでは。</li>
<li>Haskell にはそもそも副作用という概念がない</li>
<li>Scala は中庸的で、できるだけ状態が変化するオブジェクトを返すが、必要なら var を使うし、IO も制限していない</li>
<li>「Scalaでもvarを使うことはあまり推奨されず、オブジェクトの性質を利用して副作用を使える」 <a href="https://twitter.com/golden_lucky/status/899153339564269570">https://twitter.com/golden_lucky/status/899153339564269570</a></li>
<li>テスティングフレームワーク、データベースアクセス、アプリケーションサーバー</li>
<li>Haskell: Web フレームワークは3種類ぐらい, データベースはいろいろ, QuickCheck</li>
<li>Scala: Web フレームワークは Play 2, データベースは Slick, quill というのもある, テストは Scala Test</li>
<li>Elixir: Web フレームワーク Phoenix, データベース ?(覚えきれず), テスト ?(覚えきれず)</li>
</ul>


<h2>第2プログラミング言語鑑定団</h2>

<ul>
<li>初心者が複数言語を知っていた方が良いと言われて次の言語に悩む</li>
<li>Teratail や Yahoo 知恵袋を参考にした</li>
</ul>


<!-- https://www.lambdanote.com/ -->


<ul>
<li>質問1: 文系の大学4年生の時に独学で C と Java の初歩, 会社で HTML, CSS, JavaScript <a href="https://twitter.com/hourin/status/899159271807397888">https://twitter.com/hourin/status/899159271807397888</a></li>
<li>OCaml: 独学ができるようなので Web と対極にあるもの, プログラミング OCaml (<a href="http://amzn.to/2vUrRap">これ?</a>) がよかった</li>
<li>Ruby とか Go とか: サーバーサイドやインフラ系, 周りが使っているものなら Ruby じゃなくても Python とかでもとインフラ系として Go</li>
<li>◎本命 C#, ○対抗 DevOps, ×大穴 PhotoShop: C や Java に似ているもので Web だけでは心配とあったので C#, 将来が不安なら上から下まで自分でできた方が安心できそうなので DevOps, あとは将来が不安ならとりあえず PhotoShop</li>
<li><p>Xamarin + C#: 微妙な感じなので、微妙なところ</p></li>
<li><p>質問2: 文系大学, ゲーム好き, ゲームクリエイターになりたい, プログラミングはまだできない, 特筆したスキルもない, ゲーム開発者になるためにはどの言語から学ぶのがよいでしょうか? <a href="https://twitter.com/hourin/status/899161811827646464">https://twitter.com/hourin/status/899161811827646464</a></p></li>
<li>◎NScripter, ○Unity, ▲スポーツジム: (NScripter についてはメモとれず), Flash みたいな感じで Unity を使う, 最終的には C# に辿りつけばいいな, ゲーム開発者は体が資本</li>
<li>◎Unity, ○Unreal Engine: <a href="http://amzn.to/2vUoy2S">「Unreal Engine 4 で極めるゲーム開発」(ボーンデジタル)</a></li>
<li>HyperCard, LiveCode: 文系なら英語も大丈夫, ボードゲーム?</li>
<li><p>何でもいいからさっさと作る: 作りたいものがあるはずなので頑張ってほしい</p></li>
<li><p>質問3: サーバーサイドエンジニア, Ruby on Rails, AI や機械学習が気になっている <a href="https://twitter.com/hourin/status/899162996777164800">https://twitter.com/hourin/status/899162996777164800</a></p></li>
<li>Python: <a href="http://amzn.to/2x32a7M">「ゼロから作るディープラーニング」(オライリー)</a></li>
<li>(Python), (PyCall), 数学: まず数学</li>
<li>◎Python, ○R, ▲C/C++: 文系しばりがなくなった。Ruby を使っているのなら Python ぐらい知っているだろう。なんとか偏差とかも簡単にできる R。最適な、とあるので C/C++</li>
<li>Prolog: 使いこなす、とあるので。Watson や Pepper の裏側で使われている。</li>
<li><p>処理系はいっぱいある。入れやすいのは GNU Prolog</p></li>
<li><p>質問4: SIer 2次下請け, Struts, Java しか使ったことがない <a href="https://twitter.com/hourin/status/899164784163041280">https://twitter.com/hourin/status/899164784163041280</a></p></li>
<li>作った感じの質問</li>
<li>会場アンケート: Struts を使っている人? → いない</li>
<li>Common Lisp: <a href="http://amzn.to/2vUncoY">「実践 Common Lisp」(オーム社)</a>, 身につけると長く役に立つ</li>
<li>Haskell: <a href="http://amzn.to/2fWfHtK">「すごいHaskell」(オーム社)</a>, 最近和書がたくさん出ているので恐れずにやってみると良い</li>
<li>Lisp: 圧倒的に長く役に立つ, 転職は探せばある?, すべての言語が Lisp, Lisp を学ぶと悟り体験が得られるらしい</li>
<li>Ruby, C, アセンブラ: だんだん掘っていけば長く使えるはず</li>
<li><p>◎PHP, ○C/C++, ▲COBOL: 相変わらず2次下請けで良い?ならPHP, 組み込みなど他の分野に変わるなら C/C++, COBOL をやっていたら転職もできるし長く使える, アセンブラはアーキテクチャが変わると長く使えるという条件に当てはまらなそうなので COBOL にした</p></li>
<li><p>質問5: Web サイト作成のために PHP 学習中, 効率的なプログラミング学習法, 面白いプログラミング言語とその理由 <a href="https://twitter.com/hourin/status/899166828559122433">https://twitter.com/hourin/status/899166828559122433</a></p></li>
<li>これも作った感じの質問</li>
<li><a href="http://amzn.to/2fWHdYg">「あなたの知らない超絶技巧プログラミングの世界」(Ruby)</a>: esolang は他の人が出すだろうと思って、これにした。</li>
<li>◎Ruby, ○JavaScript, ▲<a href="https://ja.wikipedia.org/wiki/Curl_%28%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E%29">Curl</a>: Ruby: <a href="http://amzn.to/2xfKtkx">たのしいRuby</a> という本がある, JavaScript: Web サイト制作のために、とあるので, Web サイトはインフラを用意するのが大変, ちょっとした変更ならローカルでできる, Curl: 面白いという点だけなら Curl という言語, サーバー側もクライアント側も Curl</li>
<li><code>Brainf*ck</code>: <a href="http://amzn.to/2vUnOLi">「Ruby で作る奇妙なプログラミング言語」(マイコミ)</a>, <code>Brainf*ck</code> の実装をどんな言語でもいいのでやってみるのが面白い, 実装が簡単なのが <code>Brainf*ck</code></li>
<li><p>おっぱい言語, なでしこ/ひまわり/プロデル: <code>Brainf*ck</code> 系の言語におっぱい言語というのがある, 日本語プログラミング言語</p></li>
<li><p>質問6: インフラ運用エンジニア, 使える言語はシェル, 仕事で使っている OSS の言語は多様, 自動化をやっていくために、どのような言語を学ぶのがよい? <a href="https://twitter.com/hourin/status/899169062915235840">https://twitter.com/hourin/status/899169062915235840</a></p></li>
<li>Go: <a href="http://amzn.to/2fWM5wg">「プログラミング言語Go」(丸善)</a>, <a href="https://www.lambdanote.com/">「Go ならわかるシステムプログラミング」(ラムダノート)</a> (まだ出てない), 列挙されていた言語になかったもの, Google が推している, 下回りを C とかアセンブラで学ぶのは古い</li>
<li>YAML とそれを使える言語: 設定ファイルが YAML のことが多い, ツールの実装言語を学べば良い</li>
<li>◎Python, ○Ruby, ▲Go: Python: インストーラーとかマネージメント系がシェルから Python になっているので, libpcap を直接扱えるライブラリとかでスキルセットを広げていける, 自動化は ansible が YAML を使っていて Python で書かれている, Ruby: chef が Ruby で書かれている, 自分でプラグインとか書ける, Go: 上のレイヤーからみて Docker を使っているのではないかということで Docker の実装に使われている Go</li>
<li><p>怒りに身をまかせろ: 怒りさえあれば勉強しなくて良い, 必要があれば読むので自然に覚えていく, インフラエンジニアはプログラマと仲良くすると色々教えてもらえる, 怒ってもいいけど怒られないように</p></li>
<li><p>会場から質問: 小学3年生の子供に教えるのに適した言語は? Scratch の番組とかは見て興味をもってやっている</p></li>
<li>Scratch はそんなにやっていなくて、結局ゲームをやっている</li>
<li>Scheme 「SICP」(翔泳社)</li>
<li>(日本語), Smalruby</li>
<li>◎English, ○Smalltalk, △N-88 BASIC</li>
<li>ボードゲーム, アセンブラカルタ</li>
</ul>


<h2>ライトニングトーク</h2>

<h3>従来言語で理解する次世代言語の概念 高野光弘 @takano32</h3>

<ul>
<li>次世代の発想は既存の発想の発展が多い</li>
<li>空飛ぶ車 = 車 + 飛行機</li>
<li>プログラミングにも同様のことが多い</li>
<li>Perl = sh + sed + awk</li>
<li>C++ = C + オブジェクト指向</li>
<li>Java = オブジェクト指向 + 仮装計算機</li>
<li>サンプルはアンケート項目</li>
<li>Ruby = Perl + オブジェクト指向</li>
<li>&hellip; (はやすぎるのでメモを取るのを諦めました)</li>
</ul>


<h3>同じ処理を複数の言語で書いてみよう 増井 敏克 (ますい としかつ) @masuipeo</h3>

<ul>
<li>いろんな本を書いている</li>
<li>プログラミング言語図鑑</li>
<li>本を書いた経緯</li>
<li>CodeIQ で出題者をしている</li>
<li>提出された回答をみていたら、いろんな言語が読み書きできるようになった</li>
<li>言語の人気は変わる</li>
<li>言語を勉強するときのコツは?</li>
<li>とにかく手を動かす</li>
<li>「読む量は学力の上限を規定し、閣僚は学力の下限を規定する」</li>
<li>言語を学ぶときの姿勢</li>
</ul>


<h3>おいら的テスティングフレームワーク比較 Java C# PHP JavaScript sengoku</h3>

<ul>
<li>Java: モックの作成が簡単</li>
<li>JavaScript: ファイル監視が楽チンすぎる</li>
<li>describe と it に日本語をかけてわかりやすい</li>
<li>expect の書き心地が英語っぽくて良い</li>
<li>C#: マウス操作するのがつらい (キーボードショートカットがうまく動かなかった), モック化を阻むフレームワーク (.Net Framework) 内のクラス</li>
<li>PHP: とくに可もなく不可もなく</li>
<li>SQlite はテストが5000万行で本体7万行</li>
<li>テストを書きやすい環境を選ぶ方が良いのでは</li>
</ul>


<h3>PHPにおけるメタプログラミングの温床 うさみけんた @tadsan</h3>

<ul>
<li>オープンクラスなどではなく静的解析しやすい</li>
<li>その和を乱す動的な機能がある</li>
<li>初級編</li>
<li>callable <code>$f($arg)</code></li>
<li><code>compact</code></li>
<li><code>extract</code></li>
<li><code>$$var</code> 可変変数</li>
<li><code>debug_backtrace</code></li>
<li>中級編</li>
<li>マジックメソッド</li>
<li><code>__get()</code>, <code>__set()</code></li>
<li><code>__call()</code></li>
<li>上級編</li>
<li><code>spl_autoload_register</code></li>
</ul>


<h3>関係記述型言語 ラダーのすすめ 土井 康正</h3>

<ul>
<li>PLC 上で実行</li>
<li>抽象化、オブジェクト化、構造化しなくても良い</li>
<li>値は全てグローバル変数で良い</li>
<li><p>静的な世界</p></li>
<li><p><a href="https://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%80%E3%83%BC%E3%83%BB%E3%83%AD%E3%82%B8%E3%83%83%E3%82%AF">ラダー・ロジックまたはラダー言語（ラダーげんご）</a></p></li>
</ul>


<h3>now going with go @nasa9084</h3>

<ul>
<li>emacs!</li>
<li>会場アンケート: 昨日も来ていた人は少なかった</li>
<li>go言語</li>
<li>go special syntax</li>
<li>iota</li>
<li>Initializer Statement</li>
<li>defer Statement</li>
<li>testing package</li>
<li><code>go test</code> や <code>go test -bench</code></li>
<li>testing.T</li>
<li>testing.B</li>
<li>Example Tests</li>
<li>go generate</li>
<li><code>// go:generate stringer</code></li>
<li>便利な標準ライブラリ</li>
<li>gofmt</li>
<li>go vet</li>
<li>godoc</li>
</ul>


<h3>Klassic言語の宣伝 水島宏太</h3>

<ul>
<li><a href="http://kmizu.github.io/klassic_ll2017/">http://kmizu.github.io/klassic_ll2017/</a></li>
<li>静的型</li>
<li>式ベース</li>
<li>型推論</li>
<li>スペースセンシティブリテラル</li>
<li>Java FFI</li>
<li>Row Polymorphism</li>
</ul>


<h3>RubyKaigi 2017 のご紹介+α @takatayoshitake</h3>

<ul>
<li><a href="http://rubykaigi.org/2017/schedule">http://rubykaigi.org/2017/schedule</a></li>
<li>昨日の RejectKaigi でやった内容らしい</li>
</ul>


<h2>クロージング</h2>

<p>恒例の抽選での書籍プレゼントは、全員分あるということだったので、どうするのかと思ったら、今までのボール投げとは違ってくじ引きでした。
書籍は2冊もらえた人もいたようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[姫路IT系勉強会 2017.08 出張版に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-19-histudy.html"/>
    <updated>2017-08-19T13:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/histudy</id>
    <content type="html"><![CDATA[<p><a href="https://histudy.connpass.com/event/57870/">姫路IT系勉強会 2017.08 出張版</a>に参加しました。
公式の記録は勉強会のページからリンクされている HackMD のページ<!-- https://hackmd.io/s/rJ7lA-r_- -->に残っています。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場</h2>

<p>最近よく行っているさくらインターネット様のイベントスペースでした。</p>

<p>阪急梅田駅の茶屋町口から出て、ヨドバシの北側を通って行ったら、外は少し暑かったので、南側の地下を通った方がよかったと思いました。</p>

<h2>紹介</h2>

<ul>
<li>5年たっている</li>
<li>毎月第3土曜日</li>
<li>細分化していると人が集まらないのでなんでもあり</li>
<li>今は座談会形式</li>
<li>HackMD にみんなで記録する</li>
</ul>


<h2>自己紹介</h2>

<ul>
<li>人数が多かった</li>
</ul>


<h2>始まったきっかけ</h2>

<ul>
<li>ハックカフェで姫路から神戸や大阪は遠いという話があった</li>
<li>講師をたてるのが大変だったので福岡の勉強会を参考にして座談会形式に</li>
<li>兵庫県は長続きしている勉強会がなかった</li>
<li>言語系が途中から増えた</li>
<li>明石高専の人とか</li>
<li>巣立っていた人が活躍しているのをみるのも楽しい</li>
<li>プログラミングを知らない状態から勉強会で教えてもらってシステムを作った人も</li>
</ul>


<h2>休憩</h2>

<h2>GIT の脆弱性</h2>

<ul>
<li><a href="https://github.com/greymd/CVE-2017-1000117">https://github.com/greymd/CVE-2017-1000117</a></li>
<li><a href="https://www.debian.org/security/2017/">https://www.debian.org/security/2017/</a> で git に続いて subversion や cvs も同様っぽいセキュリティアップデートが出ている</li>
<li>twitter によると <a href="https://community.atlassian.com/t5/Agile-articles/Git-Mercurial-SVN-%E3%81%AE%E8%84%86%E5%BC%B1%E6%80%A7%E3%81%AE%E5%BD%B1%E9%9F%BF%E3%82%92%E5%8F%97%E3%81%91%E3%82%8B%E8%A3%BD%E5%93%81%E3%81%A8%E5%AF%BE%E5%BF%9C%E6%96%B9%E6%B3%95%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/ba-p/625280">https://community.atlassian.com/t5/Agile-articles/Git-Mercurial-SVN-%E3%81%AE%E8%84%86%E5%BC%B1%E6%80%A7%E3%81%AE%E5%BD%B1%E9%9F%BF%E3%82%92%E5%8F%97%E3%81%91%E3%82%8B%E8%A3%BD%E5%93%81%E3%81%A8%E5%AF%BE%E5%BF%9C%E6%96%B9%E6%B3%95%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/ba-p/625280</a> という情報もあるらしい</li>
</ul>


<h2>電源断耐性のあるファイルシステムを知りたい</h2>

<ul>
<li>UPS を使えばいいのでは</li>
<li>RasPi などの話っぽい?</li>
<li>UPS につないだ NAS でネットワークブートすれば良いのでは</li>
<li>設定は外だししてデータは unionfs とか使う?</li>
<li>データは外に置くのが良さそう?</li>
</ul>


<h2>自宅NW更改してみた</h2>

<ul>
<li>自宅(ラックマウント)サーバーはじめました</li>
<li>エアフローと火事には気をつけましょう</li>
</ul>


<h2>自宅サーバーを稼働し続ける上で安全性を保つために必要なことは?</h2>

<ul>
<li>クラウドがオススメ</li>
<li>自宅サーバーのメリットはストレージの安さ</li>
<li>ロマンがある</li>
<li>NAPT とか</li>
<li>さくらのクラウドのようないきなり外に晒されている環境で勉強するとか、VPC に隔離されている AWS とか</li>
<li><a href="https://www.vultr.com/">https://www.vultr.com/</a> が東京リージョンもあって Hourly Pricing もあって安いので、このあたりで試してみるのも良い</li>
</ul>


<h2>情報系の勉強をするにあたって、何かアドバイスをください</h2>

<ul>
<li>何か作りたいものを作ってみる</li>
</ul>


<h2>ファイルの共有をしたい話</h2>

<ul>
<li>さくらのサーバーで WordPress を使っている</li>
<li>WordPress にこだわらず他の方法を考えた方が良い</li>
</ul>


<h2>Chocolatey やろうぜ</h2>

<ul>
<li>Chocolatey (ちょこれってぃー)</li>
<li>PowerShell の実行ポリシーの変更が必要</li>
<li>config ファイルでインストールを自動化できる</li>
<li>例: <a href="https://github.com/223n/Chocolatey/blob/master/packages.config">https://github.com/223n/Chocolatey/blob/master/packages.config</a></li>
<li>パッケージがなければ作れば良い</li>
</ul>


<h2>Boxstarter</h2>

<ul>
<li><a href="https://chocolatey.org/packages/boxstarter">https://chocolatey.org/packages/boxstarter</a></li>
<li>Windows Update のインストールや再起動などもできるらしい</li>
<li>別パッケージで Hyper-V にも対応しているらしい</li>
</ul>


<h2>DNSSEC について</h2>

<ul>
<li><a href="https://www.sakura.ad.jp/news/sakurainfo/newsentry.php?id=1683">ルートゾーンKSKロールオーバーによる影響について | さくらインターネット</a> の話かと思ったらそうでもなかった?</li>
<li>主にキャッシュサーバーに影響する話のはずなのに、権威サーバーの話しかなかった</li>
</ul>


<h2>なぜヤツラは働き方改革といえば IT となるのか?</h2>

<ul>
<li>いろいろ議論していた</li>
</ul>


<h2>休憩</h2>

<h2>AWK &amp; sed プログラミング</h2>

<ul>
<li>DWARF の話をしたという話からちょっと DWARF の紹介</li>
<li>awk についてのアンケート</li>
<li><a href="https://github.com/takubo/awkGL">https://github.com/takubo/awkGL</a></li>
<li>awkGL のデモ</li>
<li><a href="https://github.com/takubo/gsed-dbg">https://github.com/takubo/gsed-dbg</a></li>
<li>sed のデバッガーのデモ</li>
</ul>


<h2>Infrastructure as code は実際どのくらい進んでる?</h2>

<ul>
<li><a href="http://amzn.to/2wjc9IU">Infrastructure as Code ―クラウドにおけるサーバ管理の原則とプラクティス</a> という日本語の本もある</li>
<li>シェルスクリプトならまだまし</li>
<li>手順書の場合もある</li>
<li>それさえもない場合もある</li>
<li>ansible とか chef とか puppet とか</li>
<li>ネットワークなどのホストごとの設定は terraform がある</li>
<li>ネットワーク事業者などは半年に1回ぐらい壊れるものがでてくるので普通に使っている</li>
<li>ansible は最近は RedHat が関わっているので説得しやすい?</li>
<li>複数台構成は ansible だけだと辛くなるので terraform も使う</li>
<li>さくらのクラウドはサンドボックスリージョンがあるので terraform の試行錯誤もしやすい</li>
<li>terraform はさくらのクラウドプラグインもある</li>
<li>terraform まで必要ない場合は usacloud というのもある</li>
<li>会場アンケート: 業務で自動化ツールを使っている人は少ない、個人で使っている人は割といる</li>
</ul>


<h2>おうちのネット環境 速い? 遅い?</h2>

<ul>
<li>パズドラが繋がらない</li>
<li>IPoE で IPv6 経由で解決</li>
</ul>


<h2>技術系書籍執筆環境はどうしてますか?</h2>

<ul>
<li>textlint? gitbook?</li>
<li>Re:VIEW?</li>
<li>執筆途中を見せたい</li>
<li>技術書典</li>
<li>投稿サイトからや同人誌からというのもある</li>
</ul>


<h2>Mac OS サーバー (Xserve) の使い方</h2>

<ul>
<li>OS は El Capitan まで</li>
<li>CI サーバーにするのが良さそう</li>
</ul>


<h2>VR の世界教えて</h2>

<ul>
<li>360 度カメラで撮影した内容を VR でみたい (動画でも写真でも良い)</li>
<li>THETA</li>
<li><a href="http://www.pano-vr.com/service/panocreator/">PanoCreator – パノラマVR専用CMS - | パノラマ工房</a></li>
<li>ハコスコ</li>
<li><a href="http://www.asahi.com/multimedia/vr360/">http://www.asahi.com/multimedia/vr360/</a></li>
<li>360度だと自分がうつりこまないようにするのに頭の上にのせるとかしないといけないので、撮影が難しい</li>
<li>最近は180度というのもあるらしい</li>
<li>THETA の画質はそれなり (特に上下)</li>
</ul>


<h2>クーベルネイテスでコンテナ管理</h2>

<ul>
<li>kubernetes</li>
<li>よくわかっていないので知りたいという話</li>
<li>lxd などを含めたコンテナ全般の理解を深めないと厳しいのでは</li>
</ul>


<h2>vagrant のプロビジョナー ansible_local の使い方</h2>

<ul>
<li>hosts ファイルが送り込まれないので、実行対象を絞れない</li>
<li>ホスト側が Windows でも使えるので便利</li>
<li><a href="https://github.com/wate/lde">https://github.com/wate/lde</a></li>
</ul>


<h2>ip-link(8)で何が面白いの</h2>

<p>特に使っている人はいなかった。</p>

<h2>初代 OpenBlockS</h2>

<ul>
<li><a href="http://www.plathome.co.jp/support/labo/obs/">http://www.plathome.co.jp/support/labo/obs/</a></li>
<li>NetBSD なら動く?</li>
</ul>


<h2>vagrant proxmox が動かない</h2>

<ul>
<li>自己解決していた</li>
</ul>


<h2>ライセンス管理について</h2>

<!-- http://d.hatena.ne.jp/fu7mu4/ -->


<ul>
<li>和をもって貴しとなす</li>
<li><a href="https://www.openchainproject.org/">https://www.openchainproject.org/</a></li>
<li>Xmppframework for IOS。自身はBSDライセンスだけどスタティックリンクのlibidn(LGPLv2.1+)が必要 <a href="https://github.com/robbiehanson/XMPPFramework/issues/217">https://github.com/robbiehanson/XMPPFramework/issues/217</a></li>
<li>Electron App で npm で入るライブラリーのライセンス問題</li>
<li>Xampp for Windows のMercury MTSは商用不可。そしてXAMPP Control panel のソースが見当たらない(GPL?) <a href="https://twitter.com/sato_makoto/status/898849752757919744">https://twitter.com/sato_makoto/status/898849752757919744</a></li>
<li><a href="https://github.com/fzaninotto/Faker/issues/881">https://github.com/fzaninotto/Faker/issues/881</a></li>
<li><a href="http://techlife.cookpad.com/entry/oss-policy">オープンソースソフトウェアポリシーをつくろう - クックパッド開発者ブログ</a></li>
<li>OSS ライセンスを見つける</li>
<li>重量級: 例 protex, Palamida, Protecode</li>
<li>中級: 例 Fossology</li>
<li>軽量級: 例 oslc</li>
<li>Fossology オススメ <a href="https://www.fossology.org/">https://www.fossology.org/</a></li>
<li>ライセンス読もう <a href="https://tldrlegal.com/">https://tldrlegal.com/</a></li>
</ul>


<h2>自宅NW更改してみた の続き</h2>

<!-- twitter.com/sperkbird -->


<p>BGP とかは名前や概要は知っていても実際に使ったことはなかったので、よくわからない部分もありました。</p>

<h2>MySQL to PostgreSQL + Redmine 移行</h2>

<ul>
<li>変換元は AWS 上の Ubuntu</li>
<li>手元の Debian で変換</li>
<li>yaml_db は redmine が必要だったので不採用</li>
<li>PGLoader のパッケージだとエラーでうまくいかなかったので自分でコンパイルしたバイナリで変換完了</li>
<li>移行先は Ubuntu or Debian ではなく Amazon Linux だった</li>
</ul>


<h2>Terraform で始める「Infrastructure as Code」入門</h2>

<ul>
<li><a href="https://github.com/sacloud">https://github.com/sacloud</a></li>
</ul>


<h2>さくらのクラウド</h2>

<ul>
<li><a href="http://cloud.sakura.ad.jp/">http://cloud.sakura.ad.jp/</a></li>
<li>会場アンケート: 個人で使ったことがある人は割といるが、仕事で使っている人はほとんどいない</li>
</ul>


<h2>感想</h2>

<p>アンカンファレンス形式ということで、LILO＆東海道らぐのようなものを想定していたら、それよりも緩いというか、
全員に付箋が配られて、話のネタ (自分で話をする必要はない) を記入するという方式だったので、驚きました。</p>

<p>タイムテーブルに書かれているのはあくまでも目安で、基本的にお題は集まった付箋からその場で決まっているようでした。</p>

<p>懇親会は、引き続き同じ場所で17時以降にやって、本編よりも深いネタもやるという感じでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSS Gate Workshopのブランチ名の調査]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-15-oss-gate-workshop-branch-name.html"/>
    <updated>2017-08-15T20:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/oss-gate-workshop-branch-name</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/oss-gate/workshop">OSS Gate ワークショップのリポジトリー</a>では、ワークショップの最後にアンケートを pull request で集めているのですが、
tutorial/retrospectives/README.md には <a href="https://github.com/oss-gate/workshop/commit/0d12651d72f8bcec0cd550da6a4e97d25caa3968">https://github.com/oss-gate/workshop/commit/0d12651d72f8bcec0cd550da6a4e97d25caa3968</a> で「適当なブランチ名」と追加され (今は <a href="https://github.com/oss-gate/workshop/pull/549">#549</a> で <code>add-retrospective</code> に変更済み)、
以前は全く指針などはなかったので、
みんなどんなブランチ名を使っていたのか気になったので、
集計してみました。</p>

<!--more-->


<h2>集計スクリプト</h2>

<p>簡単のため、<code>git log</code> の出力から日付などの可変部分はできるだけまとめて集計するようにしてみました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!ruby
</span><span class='line'>count = Hash.new(0)
</span><span class='line'>ARGF.each_line do |line|
</span><span class='line'>  if /Merge pull request #\d+ from / =~ line
</span><span class='line'>    id, branch = $'.split('/', 2)
</span><span class='line'>    branch.sub!(Regexp.quote(id), "{id}")
</span><span class='line'>    branch.sub!(/\d{4}(.?)\d{2}(.?)\d{2}/, 'YYYY\1MM\2DD')
</span><span class='line'>    branch.sub!(/tokyo|osaka|pixiv/, '{place}')
</span><span class='line'>    count[branch] += 1
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>count.keys.sort_by do |k|
</span><span class='line'>  [-count[k], k]
</span><span class='line'>end.each do |k|
</span><span class='line'>  puts "#{count[k]}:#{k}"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>集計結果</h2>

<p>ふりかえり以外の pull request もあるので、すべてがふりかえりのものとは断言できないのですが、
圧倒的に master, patch-1, patch-2 が多かったです。</p>

<p>master は別ブランチを作っていないことが多いということを示しています。</p>

<p>patch-1, patch-2, patch-3 などは github の Web から Edit で編集を開始するとできるブランチ名だったはずなので、
Web で操作して作成した pull request かもしれません。</p>

<p><code>masayuki14_closed_workshop</code> は「社内向けのクローズドでWorkshopを開催したので、ふりかえりのアンケートを共有します」とあるので、
特殊なので無視して良さそうです。</p>

<p>形式がバラバラで集計ではバラバラのままにしていますが、日付・場所・ID・役割 (beginner や mentor など) が入っていることが多く、
workshop (や meetup)、retrospective (answer, comment, enquete) や add などの単語が使われていることが多いようです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% git log | ruby /tmp/s.rb
</span><span class='line'>99:master
</span><span class='line'>60:patch-1
</span><span class='line'>14:patch-2
</span><span class='line'>6:masayuki14_closed_workshop
</span><span class='line'>5:{id}
</span><span class='line'>4:YYYY-MM-DD-{place}
</span><span class='line'>4:YYYYMMDD_{place}_meetup_{id}
</span><span class='line'>4:patch-3
</span><span class='line'>3:retrospectives-YYYY-MM-DD
</span><span class='line'>3:{id}-patch-1
</span><span class='line'>2:YYYY-MM-DD-{id}
</span><span class='line'>2:YYYYMMDD-{place}-workshop
</span><span class='line'>2:YYYYMMDD_{place}_{id}
</span><span class='line'>2:add-{id}-comment
</span><span class='line'>2:knokmki612-patch-1
</span><span class='line'>1:Add-{id}-enquete
</span><span class='line'>1:YYYY-MM-DD-{place}-{id}
</span><span class='line'>1:YYYY-MM-DD-{place}-{id}-answer
</span><span class='line'>1:YYYY-MM-DD-{place}_{id}_retrospective
</span><span class='line'>1:YYYYMMDD
</span><span class='line'>1:YYYYMMDD_oss_gate_{place}_{id}_enquete
</span><span class='line'>1:YYYYMMDD_retro
</span><span class='line'>1:YYYYMMDD_ryo-endo
</span><span class='line'>1:YYYYMMDD_{id}
</span><span class='line'>1:YYYYMMDD_{place}_mentor_{id}
</span><span class='line'>1:YYYYMMDD_{place}_{id}_answer
</span><span class='line'>1:add-YYYYMMDD-{id}
</span><span class='line'>1:add-YYYYMMDD-{place}
</span><span class='line'>1:add-cm-wada-yusuke
</span><span class='line'>1:add-comment
</span><span class='line'>1:add-mentor-tSU-RooT-11-26
</span><span class='line'>1:add-questionnaire-desc
</span><span class='line'>1:add-yaml
</span><span class='line'>1:add-{id}-0116
</span><span class='line'>1:add-{id}-YYYY-MM-DD
</span><span class='line'>1:add_beginner-{id}
</span><span class='line'>1:add_description_of_oss_gate
</span><span class='line'>1:add_mentor_yaml_by_{id}
</span><span class='line'>1:add_questionnaire
</span><span class='line'>1:add_retrospective_{id}
</span><span class='line'>1:aggeregate
</span><span class='line'>1:answer_by_satoryu
</span><span class='line'>1:begginer-n-ina
</span><span class='line'>1:beginner-{id}
</span><span class='line'>1:change_issue_template
</span><span class='line'>1:enquete
</span><span class='line'>1:feature/YYYY_MM_DD_{place}_supporter_{id}
</span><span class='line'>1:feature/add_{id}_answer
</span><span class='line'>1:feature/retrospective
</span><span class='line'>1:fill_retrospective_{id}
</span><span class='line'>1:fix/issue_26
</span><span class='line'>1:fix/retrospective_27
</span><span class='line'>1:fix/typo
</span><span class='line'>1:fix_retrospective
</span><span class='line'>1:fix_supporter_questionnaire
</span><span class='line'>1:fix_survey_url
</span><span class='line'>1:fix_yaml_error
</span><span class='line'>1:gitter-badge
</span><span class='line'>1:goto_add_comment
</span><span class='line'>1:hiroysato
</span><span class='line'>1:improve_slide_2
</span><span class='line'>1:improve_slide_split_2
</span><span class='line'>1:issue_template
</span><span class='line'>1:issue_template-2
</span><span class='line'>1:kamimura
</span><span class='line'>1:link-to-tutorial
</span><span class='line'>1:make_template
</span><span class='line'>1:mentor-majima
</span><span class='line'>1:mentor-matsue
</span><span class='line'>1:my_retrospectives
</span><span class='line'>1:opinionaire_YYYYMMDD_morioka
</span><span class='line'>1:patch-5
</span><span class='line'>1:question_template
</span><span class='line'>1:questionnaire
</span><span class='line'>1:questionnaire-YYYY-MM-DD-{place}
</span><span class='line'>1:rename
</span><span class='line'>1:result_of_YYYY_MM_DD
</span><span class='line'>1:retrospective
</span><span class='line'>1:retrospective-{id}
</span><span class='line'>1:retrospective_instruction
</span><span class='line'>1:retrospective_{id}
</span><span class='line'>1:retrospectives/{id}
</span><span class='line'>1:sort_retrospectives
</span><span class='line'>1:stat-rate
</span><span class='line'>1:support-yaml-with-bom
</span><span class='line'>1:survey_2017_3_25
</span><span class='line'>1:tdtds
</span><span class='line'>1:tricknotes
</span><span class='line'>1:tricknotes-patch-1
</span><span class='line'>1:update-retrospectives-readme
</span><span class='line'>1:update_for_2016_9_24
</span><span class='line'>1:write_questionnaire_kohei_otsuka
</span><span class='line'>1:write_retrospectives
</span><span class='line'>1:y-goto_surver_YYYYMMDD
</span><span class='line'>1:y-goto_survey_YYYYMMDD
</span><span class='line'>1:{id}-enquete-170116
</span><span class='line'>1:{id}-mentor
</span><span class='line'>1:{id}-oss-comment
</span><span class='line'>1:{id}-questionnaire
</span><span class='line'>1:{id}-workshop-answer1
</span><span class='line'>1:{id}/n-n-n-
</span><span class='line'>1:{id}/retrospective
</span><span class='line'>1:{id}1
</span><span class='line'>1:{id}_ans
</span><span class='line'>1:{id}_closed_workshop
</span><span class='line'>1:{place}_0629</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>今回は <a href="https://github.com/oss-gate/workshop/pull/549">#549</a> の時に目視で確認していたのを、もうちょっとちゃんと確認してみました。
ブランチ名やコミットメッセージはみんな色々悩んでつけている感じがして、過去のものを眺めてみると面白いと思います。</p>

<p>OSS Gate のワークショップのふりかえりはワークショップの特性上、できるだけブランチ名も悩まずにとりあえずこれを使ってもらう、というのがあるのが望ましいので、固定の説明に変更しましたが、慣れていれば独自のブランチ名やコミットメッセージでも全く問題なさそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSS Gate大阪ワークショップ2017-08-12 with さくらクラブに参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-12-oss-gate-osaka.html"/>
    <updated>2017-08-12T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/oss-gate-osaka</id>
    <content type="html"><![CDATA[<p><a href="https://oss-gate.doorkeeper.jp/events/63163">OSS Gate大阪ワークショップ2017-08-12 with さくらクラブ</a>に参加しました。</p>

<!--more-->


<p>以下、今回感じたことを適当にメモしておきます。</p>

<h2>会場</h2>

<p>最近よく行っている気がするグランフロント大阪タワーA 35Fのさくらインターネットさんでした。
やはり1階からは入れなくて、2階から入る必要がありました。
9階で乗り換えが必要なのも最初はわかりにくそうです。</p>

<p>プロジェクター3台に同じ画面を出すには分配器を用意してもらう必要があったようで、今回は途中で用意してもらいましたが、必要なら開始前に用意しておいてもらうのが良さそうでした。</p>

<h2>座席</h2>

<p>4人がけできるテーブルがメインだったので、1人のサポーターの左右に2人のビギナーという体制でした。
余ったサポーターはサポートメンターということになったので、一応サポートメンターでした。</p>

<h2>改善できそうだと思ったところ</h2>

<p>Doorkeeper で参加申し込みするところに壁があるという話があったので、 <a href="https://oss-gate.github.io/">https://oss-gate.github.io/</a> では良い感じに目立っている動画を doorkeeper の方でも気付きやすいところで紹介すると良いのではないかという話がありました。</p>

<h2>未経験者の理由</h2>

<p>スライドに書いてある理由の予想とはだいたい違う回答が出てくるのですが、今回は英語だからという感じの理由でした。</p>

<h2>BOM 問題</h2>

<p>アンケートの集計で BOM 付きの YAML ファイルになっていた人がいて、結構はまったので、YAML は意外と難しいなと思いました。</p>

<p>今は BOM 対応が入ったので次回以降は大丈夫だと思います。</p>

<h2>事前準備</h2>

<p>初めてのサポーターの人には動画を見てもらっておくと、だいたいどんな感じのことをするのか、わかってもらえて良いのではないかと思いました。</p>

<h2>ふりかえり</h2>

<p>サポーター1人にビギナー2人だとふりかえりの時間にフィードバックをしっかりしていると時間が足りないと感じました。</p>

<h2>ドキュメント</h2>

<p>モデレーター(進行役)やサポートメンター用のドキュメントが不足しているようなので、もっとまとめられると良さそうに思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オープンソースカンファレンス2017 Kyotoに参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-05-osc2017-kyoto.html"/>
    <updated>2017-08-05T20:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/osc2017-kyoto</id>
    <content type="html"><![CDATA[<p><a href="https://www.ospn.jp/osc2017-kyoto/">オープンソースカンファレンス2017 Kyoto</a>
に参加しました。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場</h2>

<p>KRP は遠いですが、行きは西院駅から歩きました。
帰りは天気が悪かったので、丹波口駅から帰りました。</p>

<p>朝からは行けなかったので、13時すぎに到着しました。</p>

<h2>「DLL読み込みの問題」を読み解く</h2>

<p>よく見かける DLL 読み込みの脆弱性がどういうことなのか気になっていたので、途中からになってしまいましたが、聴きに行きました。</p>

<ul>
<li><p>DLL の検索パス <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682586(v=vs.85%29.aspx">Dynamic-Link Library Search Order (Windows)</a></p>

<ul>
<li>KnownDLLs に登録されているかどうか</li>
<li>実行ファイルがあるディレクトリ (アプリケーションディレクトリ)</li>
<li>Windows システムディレクトリ</li>
<li>Windows ディレクトリ</li>
<li>カレントディレクトリ</li>
<li>環境変数 PATH</li>
</ul>
</li>
<li><p>sysinternals の Process Monitor (procmon)</p></li>
<li>Dependency Walker</li>
<li><p>procmon の使い方の例</p></li>
<li><p>2010年ごろの状況</p></li>
<li>DLL 読み込みの脆弱性に対する攻撃手法が公開され、注目を集める</li>
<li><a href="https://www.jpcert.or.jp/sc-magazine/codezine02-8.html">第8回　WindowsのDLLだけが危ないのか？DLL hijacking vulnerability概説（前編）</a></li>
<li>ドキュメントと一緒に細工した DLL を置いてアプリを起動するとカレントディレクトリの DLL を読み込む</li>
<li><p>この対策としてカレントディレクトリの優先順位が下がった</p></li>
<li><p>2016年ごろから「インストーラ」「自己解凍書庫」に対するDLL読み込み脆弱性の届出が増える</p></li>
<li><p>インストーラーと一緒に細工した DLL を置いてインストーラーを起動すると同一ディレクトリにある DLL を使ってしまう</p></li>
<li><p>Windows や Program Files といったシステム領域はアプリ側ではなくシステム側が保護</p></li>
<li>ユーザディレクトリは管理はユーザーの責任だが</li>
<li>システム領域外で動作するアプリには、よりセキュアな実装を求めたい</li>
<li><p>インストーラ、自己解凍書庫、ポータブルアプリなど</p></li>
<li><p>ユーザーが行うべき対策</p></li>
<li>あやしいファイルを放置しない</li>
<li>インストーラーや自己解凍書庫を安全な形で実行する</li>
<li><p>安全な形で実行: インストーラーをダウンロード、新規にディレクトリを作成、作成したディレクトリにインストーラーを移動、インストーラーを起動</p></li>
<li><p>開発者が行うべき対策</p></li>
<li>DLL の読み込み方法に注意する</li>
<li>アプリ/インストーラーの挙動についてユーザーに説明し、注意を促す</li>
<li>SetDefaultDllDirectories() や SetDllDirectory() でアプリケーションディレクトリやカレントディレクトリを排除</li>
<li>DLL 読み込みは可能な限り絶対パスで</li>
<li><p>インストーラー作成ツールによるインストーラー作成やアーカイバーによる自己解凍書庫作成時にはツールの対応状況を確認</p></li>
<li><p>開発者が対処しきれないケース</p></li>
<li>アプリのスタートアップ部分で勝手にロード</li>
<li>Windows 標準 DLL が独自に他 DLL をロード</li>
<li>Windows 標準機能 (DLL forwarding, OS 互換機能の発動など)</li>
<li>動作監視ソフトの影響など</li>
<li><p>(参考: <a href="http://micco.mars.jp/vul/2017/mhsvi20170515_01.htm">UNLHA32.DLLで作成された自己解凍書庫における任意のDLL読み込みに関する脆弱性</a>など)</p></li>
<li><p>DLL 読み込みと合わせてコマンド呼び出しについても注意</p></li>
<li><p>関連情報</p></li>
<li><a href="https://www.slideshare.net/jpcert_securecoding/dll-78581339">DLL読み込みの問題を読み解く</a></li>
</ul>


<p>ユーザーの対策として、ダウンロードしたファイルを実行する際に別途ディレクトリを作って、という話があったので、ブラウザーにダウンロード時にディレクトリを作る機能を要望したりはしていないのでしょうか? という質問をしてみました。
今の所、そういう話はしていないが、話をしてみるのは良いかもというかランダムなディレクトリを作るのは利便性が問題なのではとか、ブラウザーのアップデーターはランダムなディレクトリを作って実行しているから大丈夫という感じの回答だったと思います。</p>

<h2>Ubuntuはどこへ向かうのか～方針転換の解説～</h2>

<p>どういう系統の話か全然わかってなくて聴きにいったら、 Unity の話でした。
狭い部屋がほぼいっぱいで人気でした。</p>

<ul>
<li>R.I.P. Unity 2010-2017</li>
<li>2007年頃(?) に Netbook の登場</li>
<li>ディスプレイが狭いので専用のチューニングが求められた</li>
<li>Dell Inspiron Mini 9 : 日本で発売された Ubuntu プリインストールの Netbook</li>
<li>1024×600</li>
<li>Ubuntu Netbook Remix の登場 : Ubuntu 9.04 ベース</li>
<li>Remix はアンオフィシャル</li>
<li>Ubuntu Netbook Edition : Ubuntu 10.04 ベースと 10.10 ベースのみ</li>
<li>Edition はオフィシャルリリース</li>
<li>10.04 は LTS だが Netbook Edition は LTS ではなかった</li>
<li>Unity 初登場は Ubuntu Netbook Edition 10.10</li>
<li>Mutter ベース</li>
<li>Ubuntu 11.04 : Unity がデフォルトになった最初の Ubuntu</li>
<li>Desktop Edition と Netbook Edition を統合</li>
<li>Compiz ベースの Unity と Metacity ベースの Unity 2D</li>
<li>Ubuntu 11.10 の Unity</li>
<li>Ubuntu 12.04 LTS : Unity がデフォルトになって初めての LTS</li>
<li>じゃんけんタイム: 日経 Linux 6 月号</li>
<li>Ubuntu 12.10 : Unity 2D はなくなった</li>
<li>Ubuntu 13.04 : Unity 7 になった</li>
<li><p>逆に言えばここから 4 年間 Unity 7 が続いた</p></li>
<li><p>Unity 8</p></li>
<li>デスクトップ用とスマートデバイス用 Ubuntu を統合する UI が必要となった</li>
<li>スクラッチから開発</li>
<li>UI だけでなく、ディスプレイマネージャ (Mir) から開発</li>
<li>X.Org ではスマートデバイスは辛い</li>
<li>2012年8月: 当初 qml-phone-shell という名前</li>
<li>2013年6月から Unity 8 に</li>
<li><p>Ubuntu 17.10 で概ね実用的に (日本語を打たなければという条件付きで)</p></li>
<li><p>じゃんけんタイム: 日経 Linux 7 月号</p></li>
<li><p>2017.04.05 <a href="https://insights.ubuntu.com/?p=65030">https://insights.ubuntu.com/?p=65030</a></p></li>
<li>スマートデバイスやコンバージェンスよりもクラウドや IoT に重点的に投資するという内容</li>
<li>Unity 8 への投資も中止し、 GNOME に戻る</li>
<li><p>Ubuntu デスクトップはユーザーも多く今尚重要である</p></li>
<li><p>現時点での確定事項</p></li>
<li>GNOME Shell と GDM をデフォルトに</li>
<li>Ubuntu GNOME はリリースせず</li>
<li><p>Unity 7 から GNOME Shell への移行サポート</p></li>
<li><p>現時点での未確定事項</p></li>
<li>デフォルトのアプリケーション</li>
<li>インプットメソッド: Fcitx の現行バージョンは Wayland 非対応</li>
<li><p>ディスプレイマネージャ: Wayland がデフォルトになりそう</p></li>
<li><p>Unity 7 を使用したいなら Ubuntu 16.04 LTS にするのがおすすめ</p></li>
<li><p>Unity 8 は yunit というフォークとして生き残る見込み <a href="https://yunit.io/">https://yunit.io/</a></p></li>
<li><p>Ubuntu のセカンドチョイスは Ubuntu GNOME だった</p></li>
<li><p>今後その役目は Ubuntu MATE か?</p></li>
<li><p>Ubuntu Weekly Topics 2017年4月7日号</p></li>
<li>Ubuntu Weekly Recipe 第 467 回 GNOME 初心者向け</li>
<li>Software Design</li>
<li>日経 Linux</li>
</ul>


<h2>Debian updates</h2>

<p>とりあえず OSC に行こうかと思ったきっかけになった Debian の話も聴きました。
時間がなくなったので後半は急いで終わりました。</p>

<ul>
<li>Debian とは?</li>
<li>Debian は連携する個人の集団</li>
<li>Debian は開発元企業はなく、ボランティアのみ</li>
<li>世界中に開発者がいる</li>
<li>Debian Free Software Guideline</li>
<li><a href="https://www.debian.org/social_contract#guidelines">https://www.debian.org/social_contract#guidelines</a></li>
<li><a href="http://www.opensource.jp/osd/osd-japanese.html">http://www.opensource.jp/osd/osd-japanese.html</a></li>
<li><a href="https://www.debian.org/social_contract">https://www.debian.org/social_contract</a></li>
<li>Debian Policy</li>
<li>Debian Derivatives</li>
<li><a href="https://en.wikipedia.org/wiki/List_of_Linux_distributions">https://en.wikipedia.org/wiki/List_of_Linux_distributions</a> の図</li>
<li>stable, testing, unstable</li>
<li>Debian JP Project とは?</li>
<li>次回の関西勉強会は 8/27(日) に IM の話</li>
<li>Debian 9 Stretch</li>
<li>2017-06-17: Debian 9.0</li>
<li>2017-07-22: Debian 9.1</li>
<li>主な変更点</li>
<li>サポートアーキテクチャ</li>
<li>mips64el</li>
<li>i386 が i686 以降に変更</li>
<li>サポートから外れたアーキテクチャ: powerpc</li>
<li>kFreeBSD はテクノロジープレビューから porter (?) になった</li>
<li>ポメラで Debian (armhf) が動く</li>
<li>theme: softwaves</li>
<li>主な Software のバージョン</li>
<li>クロスコンパイルがデフォルトでサポート</li>
<li>変更点, 注意点</li>
<li>実行ファイルは PIE が有効になっている</li>
<li>iproute2 が推奨、 net-tools は非推奨 (net-tools: ifconfig, arp, netstat, route, &hellip;)</li>
<li>iceweasel → firefox 、 icedove → thunderbird</li>
<li>mysql から mariadb : jessie からのアップグレードの際には自動的に mariadb へ</li>
<li>Xorg がユーザー権限でも動作可能に</li>
<li>セキュリティ関連</li>
<li>Firefox, Chromium のセキュリティ更新の提供</li>
<li>Firefox ESR, Thunderbird ESR</li>
<li>libv8, nodejs, node-* のセキュリティ更新は提供されない</li>
<li>OpenSSL: 3DES, RC4 の TLS/SSL 利用は提供されない</li>
<li>Ruby チームは Redmine と他2個ぐらいのパッケージが必要とする gem を中心にメンテしている</li>
<li>Adobe Flash が Stretch に入らない</li>
<li>互換性</li>
<li>PIE</li>
<li>NIC : predictable name (jessie からの更新の際には据え置き)</li>
<li>OpenSSH : 旧式暗号と SSH v2 が無効</li>
<li>Xorg: evdev から libinput</li>
<li>Upstart は削除</li>
<li>デフォルトは systemd</li>
<li>sysvinit, OpenRC も利用可能</li>
<li>installer</li>
<li>GUI インストールがデフォルト</li>
<li>UEFI のセキュアブートは未対応</li>
<li>screen 対応</li>
<li>CD イメージを廃止</li>
<li>アップグレード</li>
<li>リリースノートを読むことを推奨</li>
<li>apt-line が <code>ftp://</code> の場合は <code>http://</code> に変更が必須</li>
<li>Debian 8.8 以降にあげてから一度再起動してからあげないと PIE 関連ではまる</li>
</ul>


<h2>ライトニングトーク＆閉会式</h2>

<ul>
<li><a href="https://github.com/verifast/verifast">https://github.com/verifast/verifast</a></li>
<li>コメントで注釈を入れるとC言語のプログラムを検証してくれる</li>
<li><p><a href="https://metasepi.connpass.com/event/55350/">#静的コード解析の会 第4回@大阪 - connpass</a></p></li>
<li><p>近くの海外カンファレンスに行こう！</p></li>
<li><p>openSUSE.Asia Summit 2017 Tokyo</p></li>
<li><p><a href="https://opensuseja.connpass.com/event/62902/">openSUSE Leap 42.3 Release Party Kyoto &amp; もくもく会 - connpass</a></p></li>
<li><p>KRP 周辺グルメガイド</p></li>
<li><p>順番に紹介していってドラがなったところで終了だった</p></li>
<li><p>鉄道とオープンデータ</p></li>
<li><p>時刻表データは自由なものが少ないので架空の路線を作っていろいろやっている話だった</p></li>
<li><p>どうしてもあれが欲しくなった</p></li>
<li>500兆円ほしいジェネレーターを fork してクリッピングするようにした</li>
<li>iOS も対応した</li>
<li><p><a href="http://tmx3.net/5000choyen/">http://tmx3.net/5000choyen/</a></p></li>
<li><p>大学で無理やり Splatoon2 をやった話</p></li>
<li>VPN + mac のインターネット共有</li>
<li><p>共有する接続経路で VPN を選ぶ必要があった</p></li>
<li><p>便利？な機能を使って開発していく</p></li>
<li><p><a href="https://github.com/shiotomo/cPractice">https://github.com/shiotomo/cPractice</a></p></li>
<li><p>最近の学生コミュニティーについて</p></li>
<li>ICT トラブルシューティングコンテスト</li>
<li>ネットワーク講座</li>
<li>OITLT</li>
<li>東京に負けない魅力的なコミュニティーとイベントを作りたい</li>
<li>関西を盛り上げたい</li>
<li><p>「とある工大生の死活日記」で検索</p></li>
<li><p>山形で OSC 開催したい！</p></li>
<li><p>OSC サミットと  11/26(日) OSC 広島のご紹介</p></li>
<li><p>IT 企業の裏側を知りたい！ アンケート調査</p></li>
<li>会場でアンケートをとっていたらしく、その結果発表でした。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ELFとDWARF勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-30-elf-dwarf.html"/>
    <updated>2017-07-30T13:19:55+09:00</updated>
    <id>http://blog.n-z.jp/blog/elf-dwarf</id>
    <content type="html"><![CDATA[<p><a href="https://techplay.jp/event/626491">ELFとDWARF勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、今回のメモです。</p>

<p>資料は後日公開されるようなので、公開されたらリンクする予定です。</p>

<h2>会場</h2>

<p>昨日と同じ場所なので、迷わずたどり着けましたが、なぜか1階からはタワーAに入れなくて2階から入る必要がありました。</p>

<h2>参加者自己紹介</h2>

<p>一言ずつぐらい参加者の自己紹介がありました。
大阪以外からきている人も多く、遠くからきている人もいて驚きました。
組み込み系などで普段から関連するようなことをしていそうな人が多そうな感じでした。</p>

<p>遠くから参加といえば Binary 2.0 カンファレンス2005 の時はイベントのためだけにわざわざ東京に行ったような覚えがあるので、レアなイベントだと遠くからの参加もよくあることなのかもしれません。</p>

<h2>ドキュメントを読まずに知るELF入門</h2>

<ul>
<li><a href="http://kozos.jp/">http://kozos.jp/</a></li>
<li>本日の内容は<a href="http://amzn.to/2waRSkD">リンカ・ローダ実践開発テクニック</a> という本にかいてある内容のさわり</li>
<li><a href="http://amzn.to/2uNvsqs">Linkers and Loaders</a> は概要だけで実装するには他の資料に当たる必要がある</li>
<li>リンカ・ローダについて詳しくかいてある本は他にはないのではないか</li>
<li>発表者が主に使っているのが FreeBSD なので FreeBSD の話が中心</li>
<li>Executable and Linking Format なので本来は ELF フォーマットというのはおかしい (が、RPG などのエルフと紛らわしいので ELF フォーマットといってしまうことも多い)</li>
<li>実行ファイルやオブジェクトファイル、共有ライブラリだけではなくコアダンプも表現可能</li>
<li>「リンク」のための領域情報と「ロード」のための領域情報を別々に持つというのは珍しい</li>
<li>リンクとロードの説明</li>
<li>バイナリエディタを入れるのがおすすめ</li>
<li>hexedit というのを使っている</li>
<li>最初の方は 00 が多い部分、次に ASCII データっぽい部分、配列データっぽい部分、機械語コードっぽい部分のように領域ごとに特徴が分かれている</li>
<li>xpm に変換して眺める</li>
<li>英語のドキュメントを探すのではなく <code>/usr/include/**/*elf*</code> などを探すことが多い</li>
<li><code>/usr/include/elf.h</code> → <code>/usr/include/sys/elf32.h</code> をみてみる</li>
<li>hdr は header など、略語などを知っているとソースコードを読むのがはやくなる</li>
<li>ELF ヘッダ - ファイルの先頭に1個</li>
<li>プログラムヘッダ - ロード用 - セグメントをさしている</li>
<li>セクションヘッダ - リンク用 - セクションをさしている</li>
<li>セグメントとセクションは独立した領域だが、セグメントの中に複数セクションがあったりする</li>
<li><code>Elf32_Half</code> は 2 バイト</li>
<li><code>Elf32_Word</code> は 4 バイト</li>
<li><code>Elf32_Addr</code> は 4 バイト (32ビット環境をみているので)</li>
<li>readelf -a 実行ファイル で情報表示できる</li>
<li><code>elf_common.h</code> に <code>EM_386</code> として 3 が定義されている</li>
<li><code>e_machine</code> のところを書き換えて readelf -a で変わったのを確認して、実行してみて実行できないのを確認 (間違ったアーキテクチャです と出てきた)</li>
<li>2,3 種類以上の情報を見比べて確認すると良い</li>
<li>ロードしてエラーにしている部分を探す</li>
<li>FreeBSD は <code>/usr/src/sys</code> にカーネルソースがある</li>
<li>重要なものはそんなに深いところにはないので <code>find . -name "*elf*"</code> ではなく <code>ls */*elf*</code> ぐらいで探せば良い</li>
<li>ちょっと見つからなかったのでパス</li>
<li>セグメントをロードしている部分をみてみる</li>
<li>実際のロード処理は <code>load_section</code> という名前になっているっぽい (<code>load_segment</code> の方が良いのではないかという指摘)</li>
<li>セクションという単語は割と適当に使う人もいるらしいので注意が必要</li>
<li>プログラムヘッダの情報をみていくのは簡単に作れる (<code>e_phoff</code> から <code>e_phentsize</code> バイト を <code>e_phnum</code> 個みていけば良い)</li>
<li>実際にライブコーディングで作ってみる</li>
<li>OS を作っているとフラグをちょっと変えたいとかいうことがある</li>
<li>objcopy などでできることもあるが、対応できない場合に自作のコードがあると応用できるので、 <code>readelf</code> でできるようなことでも自作できると良いことがある</li>
<li>Debian などでは bintuils にある (ビンユーティリティと読んでいた)</li>
<li>kozos のブートローダをみる (本質的にはプログラムヘッダをループでコピーしているだけ)</li>
<li>リンクはセグメントではなくセクションを見ていく</li>
<li>readelf -a 実行ファイルの <code>.text</code> セクションのオフセット部分を実際にバイナリエディタで見てみると確かに機械語っぽい</li>
<li>オブジェクトファイルの <code>.text</code> をみてみる</li>
<li>デフォルトのリンカスクリプトは <code>ld -verbose</code> でみえる</li>
<li>リンカスクリプトの自作例 (<code>-Wl,Tld.scr</code> で指定)</li>
<li><code>objdump -d hello.o</code> と <code>objdump -d hello</code> をみてみる</li>
<li>関数呼び出しのアドレスがオブジェクトファイルだと 0 (空欄) になっているのが実行ファイルだと埋められている</li>
<li><code>.rela.text</code> セクションに埋める必要のある位置が書かれている</li>
<li>リンカがやっているのはセクションを寄せ集めるのと再配置情報を埋めること</li>
<li>書籍では簡易リンカを作るサンプルコードがある</li>
<li>コアダンプをみてみる</li>
<li>prstatus というキーワードでカーネルのソースコードをみてみる</li>
<li>質疑応答</li>
<li>各セクションが何なのかの説明はまとまったものはなさそう</li>
<li>調べるときは FreeBSD と Linux 両方のソースコードをみることが多い</li>
<li>リンカスクリプトで <code>.text</code> セクションのアドレスを指定しなかったらアボートしていたが指定したアドレスの意味は?</li>
<li>他で使っていたアドレスをそのまま使っているだけで詳細は不明</li>
<li>CPU などで決まっているアーキテクチャの場合はそのアドレスを使う</li>
<li>リンカスクリプトの文法は info ld の Scripts が一番詳しい (だいたいは書籍にもかいてある)</li>
</ul>


<h2>休憩</h2>

<h2>DWARFとデバッガのからくり</h2>

<ul>
<li>自己紹介</li>
<li><a href="https://github.com/takubo">https://github.com/takubo</a></li>
<li>UNIX 文化 (ハッカー文化) と、組み込み文化を結びつけたい</li>
<li>関西でも、勉強する勉強する勉強会をしたい</li>
<li>「〜の使い方」じゃなくて50年戦える「技術」と「知識」を</li>
<li>AWK, sed</li>
<li>今回は AWK ではなく DWARF の話</li>
<li>基礎情報</li>
<li>デバッグ情報フォーマット (の規格)</li>
<li>Debug With Attributed Record Format の略</li>
<li>デバッガでできること、わかること (ユーザ視点): 実行制御 (ブレークポイント、ステップ実行、〜まで実行)、スタックトレース、変数の値を表示</li>
<li>デバッガに課せられた任務: 実際は機械語が実行されているが、ソースコードがそのまま実行されているかのような錯覚を与える</li>
<li>デバッガが知るべきこと: ソースの各行に対応する機械語、関数の先頭・末尾に対応する機械語、変数のありか、変数のビット幅・表現形式(文字列、整数、浮動小数)、文字列や配列の境界、コールスタックを巻き戻す方法</li>
<li>コールスタックの例: スタックに return アドレスを持つ、レジスタウィンドウ、リンクリスト</li>
<li>ブレークポイントの仕組みの例: デバッグレジスタにアドレスを設定、メモリアクセスを監視、MMU などでメモリ番地の rwx を落として例外を発生させる、命令を書き換えて例外を発生させる</li>
<li>どの方法でもブレークポイントを設定するアドレスを知る必要がある</li>
<li>デバッグ情報とは: 「デバッガが知るべきこと」が保存されている情報が「デバッグ情報」</li>
<li>デバッグ情報を生成するのはコンパイラやリンカの役目</li>
<li>ソースの情報を直接知れるのはコンパイラのみ</li>
<li>リンカは再配置に伴う処理や重複情報の削除</li>
<li>デバッグ情報の課題、あるいは、デバッガにとっての難問</li>
<li>最適化:</li>
<li>ソースの原型をとどめない機械語: 対応がめちゃくちゃ、ソースと機械語の対応は1対1ではない、インライン展開</li>
<li>不要な変数は消される</li>
<li>消されなかった変数もどこへ行った</li>
<li>メモリ上になかったりレジスタも関数呼び出しを挟んで同じ変数が別のレジスタになっているかもしれない</li>
<li>RISC の台頭: デバッグ中でも最適化を切れない</li>
<li>アセンブラさえも命令の並べ替えを行うことがある (例: 遅延スロット)</li>
<li>デバッガがソースを再現するための全ての情報は、通常は非常に巨大になる: ディスクを圧迫する、メモリにはとても乗らない</li>
<li>これをなんとかして小さくしないといけない</li>
<li>DWARF の特徴: オープンかつフリー、デバッグフォーマットとして優秀、実際に広く使われている</li>
<li><a href="http://www.dwarfstd.org/">http://www.dwarfstd.org/</a></li>
<li>GFDL</li>
<li>DWARF の歴史</li>
<li>1992 に Version 1</li>
<li>現在は 2017.2 リリースの Version 5</li>
<li>他のデバッグ形式: STABS, *COFF, PDB, IEEE695</li>
<li>DWARF の精神: 何にも依存しない、暗黙ではなく明示、ゆるい標準、ベンダー拡張対応、より小さなデータ表現、効率的に処理できる</li>
<li>DWARF の目標</li>
<li>DWARF はなぜ難しいのか?: 日本語の情報も英語の情報も少ない、より小さなデータ表現</li>
<li>圧縮について確認</li>
<li>DWARF フォーマット解説</li>
<li>重要な用語</li>
<li>LEB128 (Little Endian Base 128)</li>
<li>uLEB128 (unsigned LEB128、符号なし)</li>
<li>sLEB128 (signed LEB128、符号付き)</li>
<li>CU (Compilation Unit)</li>
<li>翻訳単位</li>
</ul>


<h2>休憩</h2>

<p>時間がおしているので短めに</p>

<h2>バイナリかるた体験</h2>

<ul>
<li><a href="http://kozos.jp/binary-karuta/">http://kozos.jp/binary-karuta/</a></li>
<li><a href="http://amzn.to/2eYaTnn">0と1のコンピュータ世界 バイナリで遊ぼう!</a> という本に解説あり</li>
<li>説明があった後、「バイナリかるたのサンプル」の「スライド」をみながら実際に何のファイルなのかという話をしていました。</li>
<li>最後までいかなくても、問題の区切りで終了できるので、最後のセッションに最適だそうで、時間があまりなかったこともあって、スライドの途中で終了しました。</li>
</ul>


<h2>クロージング、後片付け</h2>

<ul>
<li>振り返り</li>
<li>振り返りの中の意見であったライブコーディング (とは言ってなかったけど) がよかったというのは同感でした。</li>
<li>資料は ELF の方も DWARF の方も後日公開してもらえるということでした。バイナリかるたはサイトをみながらだったので、特に別途用意された資料はありませんでした。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第78回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-29-rubykansai78.html"/>
    <updated>2017-07-29T13:04:59+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai78</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/62491">第78回 Ruby関西 勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<p>グランフロントでわかりにくい場所でしたが、きたことがあったので、すんなり来れました。
会場無線 LAN も前回の設定のまま使えました。</p>

<h2>rails にコントリビュートしてきました</h2>

<ul>
<li>integration test は get などを使う</li>
<li>system test は visit などを使う</li>
<li>system test のクラスは integration test のクラスを継承しているので get が使えて何も起こらなくてはまった</li>
<li>メソッドを消す pull request を送った</li>
<li>迷ったらとりあえず送ってみてリジェクトされても気にしない</li>
<li>英語もだいたいなんとかなる</li>
</ul>


<h2>GitLab + Dokku で作る CI/CD 環境</h2>

<p>発表資料はいつも通り<a href="https://github.com/znz/rubykansai78-gitlab-dokku">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/rubykansai78-gitlab-dokku/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/gitlab-dokku-cicd">slideshare</a>, <a href="https://speakerdeck.com/znz/cd-huan-jing">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-rubykansai78-gitlab-dokku">RubyGems</a> にあげています。</p>

<p><a href="http://blog.n-z.jp/blog/categories/gitlab/">gitlab カテゴリー</a>の一覧へのリンクを発表直前に追加したので、GitHub のソース以外には7月30日になってから反映しました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykansai78-gitlab-dokku/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykansai78-gitlab-dokku/" title="GitLab + Dokku で作る CI/CD 環境">GitLab + Dokku で作る CI/CD 環境</a>
</div>


<h2>AM/PMって知ってます？</h2>

<ul>
<li>acquisition (獲得) metaphor</li>
<li>participation (参加) metaphor</li>
</ul>


<h2>rubocopとの付き合い方　〜守・破・離〜</h2>

<ul>
<li>コードレビュー</li>
<li>新人教育, 品質向上, 相互学習</li>
<li><a href="http://d.hatena.ne.jp/naoya/20140313/1394664578">些末なコードレビュー - naoyaのはてなダイアリー</a> の &ldquo;やらなければいけないのは、「その設計は拡張に対して開いていないから開くべき」とか「これではエッジケースが想定されていないからこういう不具合につながるのでは」とか「そのテストでは後日見返したときに第三者が要求仕様を解釈しづらい」とかそういう指摘である。&rdquo;</li>
<li>&ldquo;lint ツールか何かで機械的にチェックすればよい&rdquo;</li>
<li><a href="https://github.com/bbatsov/ruby-style-guide">https://github.com/bbatsov/ruby-style-guide</a></li>
<li>Cop: StyleCop, LayoutCop, LintCop, MetricsCop, PerformanceCop, SecurityCop, RailsCop, BundlerCop</li>
<li>auto-correct</li>
<li>Todo リスト: <code>rubocop --auto-gen-config</code></li>
<li>守・破・離</li>
<li>houndci, sideci など</li>
<li>エディタ連携, guard-rubocop</li>
<li>syntastic だと非同期処理してくれなくて保存の度に固まるので deoplete (+neovim) を使っている</li>
<li>rails developer meetup, 次回: 8/24(木)19:30から, connpass での募集は8/1から, ハッシュタグ <code>#railsdm</code></li>
</ul>


<h2>Ruby と C# をつなぐ</h2>

<ul>
<li><a href="https://github.com/masoo/ruby-csharp_script">https://github.com/masoo/ruby-csharp_script</a></li>
<li>Ruby から C# を使う話だった</li>
<li>色々大変そうだった</li>
</ul>


<h2>RubyはPythonにしてやられてはいない</h2>

<ul>
<li>Ruby ビジネスフォーラムに参加した</li>
<li>午後のパネルディスカッションの内容の紹介</li>
<li>午前の基調講演の内容の紹介</li>
<li>その他イベント紹介</li>
</ul>


<h2>Ruby 初級者向けレッスン 61回 - 文字列</h2>

<p>安定したいつものような内容でした。</p>

<h2>クロージング</h2>

<ul>
<li>イベント告知など</li>
<li>明日同じ場所で<a href="https://techplay.jp/event/626491">ELFとDWARF勉強会</a></li>
<li><a href="https://dddrb.doorkeeper.jp/events/63433">DDD.rb #14 Redux で気軽に始める テスト駆動開発 - DDD.rb | Doorkeeper</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
