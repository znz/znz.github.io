<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-08-14T23:22:00+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OSS Gate大阪ワークショップ2017-08-12 with さくらクラブに参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-12-oss-gate-osaka.html"/>
    <updated>2017-08-12T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/oss-gate-osaka</id>
    <content type="html"><![CDATA[<p><a href="https://oss-gate.doorkeeper.jp/events/63163">OSS Gate大阪ワークショップ2017-08-12 with さくらクラブ</a>に参加しました。</p>

<!--more-->


<p>以下、今回感じたことを適当にメモしておきます。</p>

<h2>会場</h2>

<p>最近よく行っている気がするグランフロント大阪タワーA 35Fのさくらインターネットさんでした。
やはり1階からは入れなくて、2階から入る必要がありました。
9階で乗り換えが必要なのも最初はわかりにくそうです。</p>

<p>プロジェクター3台に同じ画面を出すには分配器を用意してもらう必要があったようで、今回は途中で用意してもらいましたが、必要なら開始前に用意しておいてもらうのが良さそうでした。</p>

<h2>座席</h2>

<p>4人がけできるテーブルがメインだったので、1人のサポーターの左右に2人のビギナーという体制でした。
余ったサポーターはサポートメンターということになったので、一応サポートメンターでした。</p>

<h2>改善できそうだと思ったところ</h2>

<p>Doorkeeper で参加申し込みするところに壁があるという話があったので、 <a href="https://oss-gate.github.io/">https://oss-gate.github.io/</a> では良い感じに目立っている動画を doorkeeper の方でも気付きやすいところで紹介すると良いのではないかという話がありました。</p>

<h2>未経験者の理由</h2>

<p>スライドに書いてある理由の予想とはだいたい違う回答が出てくるのですが、今回は英語だからという感じの理由でした。</p>

<h2>BOM 問題</h2>

<p>アンケートの集計で BOM 付きの YAML ファイルになっていた人がいて、結構はまったので、YAML は意外と難しいなと思いました。</p>

<p>今は BOM 対応が入ったので次回以降は大丈夫だと思います。</p>

<h2>事前準備</h2>

<p>初めてのサポーターの人には動画を見てもらっておくと、だいたいどんな感じのことをするのか、わかってもらえて良いのではないかと思いました。</p>

<h2>ふりかえり</h2>

<p>サポーター1人にビギナー2人だとふりかえりの時間にフィードバックをしっかりしていると時間が足りないと感じました。</p>

<h2>ドキュメント</h2>

<p>モデレーター(進行役)やサポートメンター用のドキュメントが不足しているようなので、もっとまとめられると良さそうに思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オープンソースカンファレンス2017 Kyotoに参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-05-osc2017-kyoto.html"/>
    <updated>2017-08-05T20:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/osc2017-kyoto</id>
    <content type="html"><![CDATA[<p><a href="https://www.ospn.jp/osc2017-kyoto/">オープンソースカンファレンス2017 Kyoto</a>
に参加しました。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場</h2>

<p>KRP は遠いですが、行きは西院駅から歩きました。
帰りは天気が悪かったので、丹波口駅から帰りました。</p>

<p>朝からは行けなかったので、13時すぎに到着しました。</p>

<h2>「DLL読み込みの問題」を読み解く</h2>

<p>よく見かける DLL 読み込みの脆弱性がどういうことなのか気になっていたので、途中からになってしまいましたが、聴きに行きました。</p>

<ul>
<li><p>DLL の検索パス <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682586(v=vs.85%29.aspx">Dynamic-Link Library Search Order (Windows)</a></p>

<ul>
<li>KnownDLLs に登録されているかどうか</li>
<li>実行ファイルがあるディレクトリ (アプリケーションディレクトリ)</li>
<li>Windows システムディレクトリ</li>
<li>Windows ディレクトリ</li>
<li>カレントディレクトリ</li>
<li>環境変数 PATH</li>
</ul>
</li>
<li><p>sysinternals の Process Monitor (procmon)</p></li>
<li>Dependency Walker</li>
<li><p>procmon の使い方の例</p></li>
<li><p>2010年ごろの状況</p></li>
<li>DLL 読み込みの脆弱性に対する攻撃手法が公開され、注目を集める</li>
<li><a href="https://www.jpcert.or.jp/sc-magazine/codezine02-8.html">第8回　WindowsのDLLだけが危ないのか？DLL hijacking vulnerability概説（前編）</a></li>
<li>ドキュメントと一緒に細工した DLL を置いてアプリを起動するとカレントディレクトリの DLL を読み込む</li>
<li><p>この対策としてカレントディレクトリの優先順位が下がった</p></li>
<li><p>2016年ごろから「インストーラ」「自己解凍書庫」に対するDLL読み込み脆弱性の届出が増える</p></li>
<li><p>インストーラーと一緒に細工した DLL を置いてインストーラーを起動すると同一ディレクトリにある DLL を使ってしまう</p></li>
<li><p>Windows や Program Files といったシステム領域はアプリ側ではなくシステム側が保護</p></li>
<li>ユーザディレクトリは管理はユーザーの責任だが</li>
<li>システム領域外で動作するアプリには、よりセキュアな実装を求めたい</li>
<li><p>インストーラ、自己解凍書庫、ポータブルアプリなど</p></li>
<li><p>ユーザーが行うべき対策</p></li>
<li>あやしいファイルを放置しない</li>
<li>インストーラーや自己解凍書庫を安全な形で実行する</li>
<li><p>安全な形で実行: インストーラーをダウンロード、新規にディレクトリを作成、作成したディレクトリにインストーラーを移動、インストーラーを起動</p></li>
<li><p>開発者が行うべき対策</p></li>
<li>DLL の読み込み方法に注意する</li>
<li>アプリ/インストーラーの挙動についてユーザーに説明し、注意を促す</li>
<li>SetDefaultDllDirectories() や SetDllDirectory() でアプリケーションディレクトリやカレントディレクトリを排除</li>
<li>DLL 読み込みは可能な限り絶対パスで</li>
<li><p>インストーラー作成ツールによるインストーラー作成やアーカイバーによる自己解凍書庫作成時にはツールの対応状況を確認</p></li>
<li><p>開発者が対処しきれないケース</p></li>
<li>アプリのスタートアップ部分で勝手にロード</li>
<li>Windows 標準 DLL が独自に他 DLL をロード</li>
<li>Windows 標準機能 (DLL forwarding, OS 互換機能の発動など)</li>
<li>動作監視ソフトの影響など</li>
<li><p>(参考: <a href="http://micco.mars.jp/vul/2017/mhsvi20170515_01.htm">UNLHA32.DLLで作成された自己解凍書庫における任意のDLL読み込みに関する脆弱性</a>など)</p></li>
<li><p>DLL 読み込みと合わせてコマンド呼び出しについても注意</p></li>
<li><p>関連情報</p></li>
<li><a href="https://www.slideshare.net/jpcert_securecoding/dll-78581339">DLL読み込みの問題を読み解く</a></li>
</ul>


<p>ユーザーの対策として、ダウンロードしたファイルを実行する際に別途ディレクトリを作って、という話があったので、ブラウザーにダウンロード時にディレクトリを作る機能を要望したりはしていないのでしょうか? という質問をしてみました。
今の所、そういう話はしていないが、話をしてみるのは良いかもというかランダムなディレクトリを作るのは利便性が問題なのではとか、ブラウザーのアップデーターはランダムなディレクトリを作って実行しているから大丈夫という感じの回答だったと思います。</p>

<h2>Ubuntuはどこへ向かうのか～方針転換の解説～</h2>

<p>どういう系統の話か全然わかってなくて聴きにいったら、 Unity の話でした。
狭い部屋がほぼいっぱいで人気でした。</p>

<ul>
<li>R.I.P. Unity 2010-2017</li>
<li>2007年頃(?) に Netbook の登場</li>
<li>ディスプレイが狭いので専用のチューニングが求められた</li>
<li>Dell Inspiron Mini 9 : 日本で発売された Ubuntu プリインストールの Netbook</li>
<li>1024×600</li>
<li>Ubuntu Netbook Remix の登場 : Ubuntu 9.04 ベース</li>
<li>Remix はアンオフィシャル</li>
<li>Ubuntu Netbook Edition : Ubuntu 10.04 ベースと 10.10 ベースのみ</li>
<li>Edition はオフィシャルリリース</li>
<li>10.04 は LTS だが Netbook Edition は LTS ではなかった</li>
<li>Unity 初登場は Ubuntu Netbook Edition 10.10</li>
<li>Mutter ベース</li>
<li>Ubuntu 11.04 : Unity がデフォルトになった最初の Ubuntu</li>
<li>Desktop Edition と Netbook Edition を統合</li>
<li>Compiz ベースの Unity と Metacity ベースの Unity 2D</li>
<li>Ubuntu 11.10 の Unity</li>
<li>Ubuntu 12.04 LTS : Unity がデフォルトになって初めての LTS</li>
<li>じゃんけんタイム: 日経 Linux 6 月号</li>
<li>Ubuntu 12.10 : Unity 2D はなくなった</li>
<li>Ubuntu 13.04 : Unity 7 になった</li>
<li><p>逆に言えばここから 4 年間 Unity 7 が続いた</p></li>
<li><p>Unity 8</p></li>
<li>デスクトップ用とスマートデバイス用 Ubuntu を統合する UI が必要となった</li>
<li>スクラッチから開発</li>
<li>UI だけでなく、ディスプレイマネージャ (Mir) から開発</li>
<li>X.Org ではスマートデバイスは辛い</li>
<li>2012年8月: 当初 qml-phone-shell という名前</li>
<li>2013年6月から Unity 8 に</li>
<li><p>Ubuntu 17.10 で概ね実用的に (日本語を打たなければという条件付きで)</p></li>
<li><p>じゃんけんタイム: 日経 Linux 7 月号</p></li>
<li><p>2017.04.05 <a href="https://insights.ubuntu.com/?p=65030">https://insights.ubuntu.com/?p=65030</a></p></li>
<li>スマートデバイスやコンバージェンスよりもクラウドや IoT に重点的に投資するという内容</li>
<li>Unity 8 への投資も中止し、 GNOME に戻る</li>
<li><p>Ubuntu デスクトップはユーザーも多く今尚重要である</p></li>
<li><p>現時点での確定事項</p></li>
<li>GNOME Shell と GDM をデフォルトに</li>
<li>Ubuntu GNOME はリリースせず</li>
<li><p>Unity 7 から GNOME Shell への移行サポート</p></li>
<li><p>現時点での未確定事項</p></li>
<li>デフォルトのアプリケーション</li>
<li>インプットメソッド: Fcitx の現行バージョンは Wayland 非対応</li>
<li><p>ディスプレイマネージャ: Wayland がデフォルトになりそう</p></li>
<li><p>Unity 7 を使用したいなら Ubuntu 16.04 LTS にするのがおすすめ</p></li>
<li><p>Unity 8 は yunit というフォークとして生き残る見込み <a href="https://yunit.io/">https://yunit.io/</a></p></li>
<li><p>Ubuntu のセカンドチョイスは Ubuntu GNOME だった</p></li>
<li><p>今後その役目は Ubuntu MATE か?</p></li>
<li><p>Ubuntu Weekly Topics 2017年4月7日号</p></li>
<li>Ubuntu Weekly Recipe 第 467 回 GNOME 初心者向け</li>
<li>Software Design</li>
<li>日経 Linux</li>
</ul>


<h2>Debian updates</h2>

<p>とりあえず OSC に行こうかと思ったきっかけになった Debian の話も聴きました。
時間がなくなったので後半は急いで終わりました。</p>

<ul>
<li>Debian とは?</li>
<li>Debian は連携する個人の集団</li>
<li>Debian は開発元企業はなく、ボランティアのみ</li>
<li>世界中に開発者がいる</li>
<li>Debian Free Software Guideline</li>
<li><a href="https://www.debian.org/social_contract#guidelines">https://www.debian.org/social_contract#guidelines</a></li>
<li><a href="http://www.opensource.jp/osd/osd-japanese.html">http://www.opensource.jp/osd/osd-japanese.html</a></li>
<li><a href="https://www.debian.org/social_contract">https://www.debian.org/social_contract</a></li>
<li>Debian Policy</li>
<li>Debian Derivatives</li>
<li><a href="https://en.wikipedia.org/wiki/List_of_Linux_distributions">https://en.wikipedia.org/wiki/List_of_Linux_distributions</a> の図</li>
<li>stable, testing, unstable</li>
<li>Debian JP Project とは?</li>
<li>次回の関西勉強会は 8/27(日) に IM の話</li>
<li>Debian 9 Stretch</li>
<li>2017-06-17: Debian 9.0</li>
<li>2017-07-22: Debian 9.1</li>
<li>主な変更点</li>
<li>サポートアーキテクチャ</li>
<li>mips64el</li>
<li>i386 が i686 以降に変更</li>
<li>サポートから外れたアーキテクチャ: powerpc</li>
<li>kFreeBSD はテクノロジープレビューから porter (?) になった</li>
<li>ポメラで Debian (armhf) が動く</li>
<li>theme: softwaves</li>
<li>主な Software のバージョン</li>
<li>クロスコンパイルがデフォルトでサポート</li>
<li>変更点, 注意点</li>
<li>実行ファイルは PIE が有効になっている</li>
<li>iproute2 が推奨、 net-tools は非推奨 (net-tools: ifconfig, arp, netstat, route, &hellip;)</li>
<li>iceweasel → firefox 、 icedove → thunderbird</li>
<li>mysql から mariadb : jessie からのアップグレードの際には自動的に mariadb へ</li>
<li>Xorg がユーザー権限でも動作可能に</li>
<li>セキュリティ関連</li>
<li>Firefox, Chromium のセキュリティ更新の提供</li>
<li>Firefox ESR, Thunderbird ESR</li>
<li>libv8, nodejs, node-* のセキュリティ更新は提供されない</li>
<li>OpenSSL: 3DES, RC4 の TLS/SSL 利用は提供されない</li>
<li>Ruby チームは Redmine と他2個ぐらいのパッケージが必要とする gem を中心にメンテしている</li>
<li>Adobe Flash が Stretch に入らない</li>
<li>互換性</li>
<li>PIE</li>
<li>NIC : predictable name (jessie からの更新の際には据え置き)</li>
<li>OpenSSH : 旧式暗号と SSH v2 が無効</li>
<li>Xorg: evdev から libinput</li>
<li>Upstart は削除</li>
<li>デフォルトは systemd</li>
<li>sysvinit, OpenRC も利用可能</li>
<li>installer</li>
<li>GUI インストールがデフォルト</li>
<li>UEFI のセキュアブートは未対応</li>
<li>screen 対応</li>
<li>CD イメージを廃止</li>
<li>アップグレード</li>
<li>リリースノートを読むことを推奨</li>
<li>apt-line が <code>ftp://</code> の場合は <code>http://</code> に変更が必須</li>
<li>Debian 8.8 以降にあげてから一度再起動してからあげないと PIE 関連ではまる</li>
</ul>


<h2>ライトニングトーク＆閉会式</h2>

<ul>
<li><a href="https://github.com/verifast/verifast">https://github.com/verifast/verifast</a></li>
<li>コメントで注釈を入れるとC言語のプログラムを検証してくれる</li>
<li><p><a href="https://metasepi.connpass.com/event/55350/">#静的コード解析の会 第4回@大阪 - connpass</a></p></li>
<li><p>近くの海外カンファレンスに行こう！</p></li>
<li><p>openSUSE.Asia Summit 2017 Tokyo</p></li>
<li><p><a href="https://opensuseja.connpass.com/event/62902/">openSUSE Leap 42.3 Release Party Kyoto &amp; もくもく会 - connpass</a></p></li>
<li><p>KRP 周辺グルメガイド</p></li>
<li><p>順番に紹介していってドラがなったところで終了だった</p></li>
<li><p>鉄道とオープンデータ</p></li>
<li><p>時刻表データは自由なものが少ないので架空の路線を作っていろいろやっている話だった</p></li>
<li><p>どうしてもあれが欲しくなった</p></li>
<li>500兆円ほしいジェネレーターを fork してクリッピングするようにした</li>
<li>iOS も対応した</li>
<li><p><a href="http://tmx3.net/5000choyen/">http://tmx3.net/5000choyen/</a></p></li>
<li><p>大学で無理やり Splatoon2 をやった話</p></li>
<li>VPN + mac のインターネット共有</li>
<li><p>共有する接続経路で VPN を選ぶ必要があった</p></li>
<li><p>便利？な機能を使って開発していく</p></li>
<li><p><a href="https://github.com/shiotomo/cPractice">https://github.com/shiotomo/cPractice</a></p></li>
<li><p>最近の学生コミュニティーについて</p></li>
<li>ICT トラブルシューティングコンテスト</li>
<li>ネットワーク講座</li>
<li>OITLT</li>
<li>東京に負けない魅力的なコミュニティーとイベントを作りたい</li>
<li>関西を盛り上げたい</li>
<li><p>「とある工大生の死活日記」で検索</p></li>
<li><p>山形で OSC 開催したい！</p></li>
<li><p>OSC サミットと  11/26(日) OSC 広島のご紹介</p></li>
<li><p>IT 企業の裏側を知りたい！ アンケート調査</p></li>
<li>会場でアンケートをとっていたらしく、その結果発表でした。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ELFとDWARF勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-30-elf-dwarf.html"/>
    <updated>2017-07-30T13:19:55+09:00</updated>
    <id>http://blog.n-z.jp/blog/elf-dwarf</id>
    <content type="html"><![CDATA[<p><a href="https://techplay.jp/event/626491">ELFとDWARF勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、今回のメモです。</p>

<p>資料は後日公開されるようなので、公開されたらリンクする予定です。</p>

<h2>会場</h2>

<p>昨日と同じ場所なので、迷わずたどり着けましたが、なぜか1階からはタワーAに入れなくて2階から入る必要がありました。</p>

<h2>参加者自己紹介</h2>

<p>一言ずつぐらい参加者の自己紹介がありました。
大阪以外からきている人も多く、遠くからきている人もいて驚きました。
組み込み系などで普段から関連するようなことをしていそうな人が多そうな感じでした。</p>

<p>遠くから参加といえば Binary 2.0 カンファレンス2005 の時はイベントのためだけにわざわざ東京に行ったような覚えがあるので、レアなイベントだと遠くからの参加もよくあることなのかもしれません。</p>

<h2>ドキュメントを読まずに知るELF入門</h2>

<ul>
<li><a href="http://kozos.jp/">http://kozos.jp/</a></li>
<li>本日の内容は<a href="http://amzn.to/2waRSkD">リンカ・ローダ実践開発テクニック</a> という本にかいてある内容のさわり</li>
<li><a href="http://amzn.to/2uNvsqs">Linkers and Loaders</a> は概要だけで実装するには他の資料に当たる必要がある</li>
<li>リンカ・ローダについて詳しくかいてある本は他にはないのではないか</li>
<li>発表者が主に使っているのが FreeBSD なので FreeBSD の話が中心</li>
<li>Executable and Linking Format なので本来は ELF フォーマットというのはおかしい (が、RPG などのエルフと紛らわしいので ELF フォーマットといってしまうことも多い)</li>
<li>実行ファイルやオブジェクトファイル、共有ライブラリだけではなくコアダンプも表現可能</li>
<li>「リンク」のための領域情報と「ロード」のための領域情報を別々に持つというのは珍しい</li>
<li>リンクとロードの説明</li>
<li>バイナリエディタを入れるのがおすすめ</li>
<li>hexedit というのを使っている</li>
<li>最初の方は 00 が多い部分、次に ASCII データっぽい部分、配列データっぽい部分、機械語コードっぽい部分のように領域ごとに特徴が分かれている</li>
<li>xpm に変換して眺める</li>
<li>英語のドキュメントを探すのではなく <code>/usr/include/**/*elf*</code> などを探すことが多い</li>
<li><code>/usr/include/elf.h</code> → <code>/usr/include/sys/elf32.h</code> をみてみる</li>
<li>hdr は header など、略語などを知っているとソースコードを読むのがはやくなる</li>
<li>ELF ヘッダ - ファイルの先頭に1個</li>
<li>プログラムヘッダ - ロード用 - セグメントをさしている</li>
<li>セクションヘッダ - リンク用 - セクションをさしている</li>
<li>セグメントとセクションは独立した領域だが、セグメントの中に複数セクションがあったりする</li>
<li><code>Elf32_Half</code> は 2 バイト</li>
<li><code>Elf32_Word</code> は 4 バイト</li>
<li><code>Elf32_Addr</code> は 4 バイト (32ビット環境をみているので)</li>
<li>readelf -a 実行ファイル で情報表示できる</li>
<li><code>elf_common.h</code> に <code>EM_386</code> として 3 が定義されている</li>
<li><code>e_machine</code> のところを書き換えて readelf -a で変わったのを確認して、実行してみて実行できないのを確認 (間違ったアーキテクチャです と出てきた)</li>
<li>2,3 種類以上の情報を見比べて確認すると良い</li>
<li>ロードしてエラーにしている部分を探す</li>
<li>FreeBSD は <code>/usr/src/sys</code> にカーネルソースがある</li>
<li>重要なものはそんなに深いところにはないので <code>find . -name "*elf*"</code> ではなく <code>ls */*elf*</code> ぐらいで探せば良い</li>
<li>ちょっと見つからなかったのでパス</li>
<li>セグメントをロードしている部分をみてみる</li>
<li>実際のロード処理は <code>load_section</code> という名前になっているっぽい (<code>load_segment</code> の方が良いのではないかという指摘)</li>
<li>セクションという単語は割と適当に使う人もいるらしいので注意が必要</li>
<li>プログラムヘッダの情報をみていくのは簡単に作れる (<code>e_phoff</code> から <code>e_phentsize</code> バイト を <code>e_phnum</code> 個みていけば良い)</li>
<li>実際にライブコーディングで作ってみる</li>
<li>OS を作っているとフラグをちょっと変えたいとかいうことがある</li>
<li>objcopy などでできることもあるが、対応できない場合に自作のコードがあると応用できるので、 <code>readelf</code> でできるようなことでも自作できると良いことがある</li>
<li>Debian などでは bintuils にある (ビンユーティリティと読んでいた)</li>
<li>kozos のブートローダをみる (本質的にはプログラムヘッダをループでコピーしているだけ)</li>
<li>リンクはセグメントではなくセクションを見ていく</li>
<li>readelf -a 実行ファイルの <code>.text</code> セクションのオフセット部分を実際にバイナリエディタで見てみると確かに機械語っぽい</li>
<li>オブジェクトファイルの <code>.text</code> をみてみる</li>
<li>デフォルトのリンカスクリプトは <code>ld -verbose</code> でみえる</li>
<li>リンカスクリプトの自作例 (<code>-Wl,Tld.scr</code> で指定)</li>
<li><code>objdump -d hello.o</code> と <code>objdump -d hello</code> をみてみる</li>
<li>関数呼び出しのアドレスがオブジェクトファイルだと 0 (空欄) になっているのが実行ファイルだと埋められている</li>
<li><code>.rela.text</code> セクションに埋める必要のある位置が書かれている</li>
<li>リンカがやっているのはセクションを寄せ集めるのと再配置情報を埋めること</li>
<li>書籍では簡易リンカを作るサンプルコードがある</li>
<li>コアダンプをみてみる</li>
<li>prstatus というキーワードでカーネルのソースコードをみてみる</li>
<li>質疑応答</li>
<li>各セクションが何なのかの説明はまとまったものはなさそう</li>
<li>調べるときは FreeBSD と Linux 両方のソースコードをみることが多い</li>
<li>リンカスクリプトで <code>.text</code> セクションのアドレスを指定しなかったらアボートしていたが指定したアドレスの意味は?</li>
<li>他で使っていたアドレスをそのまま使っているだけで詳細は不明</li>
<li>CPU などで決まっているアーキテクチャの場合はそのアドレスを使う</li>
<li>リンカスクリプトの文法は info ld の Scripts が一番詳しい (だいたいは書籍にもかいてある)</li>
</ul>


<h2>休憩</h2>

<h2>DWARFとデバッガのからくり</h2>

<ul>
<li>自己紹介</li>
<li><a href="https://github.com/takubo">https://github.com/takubo</a></li>
<li>UNIX 文化 (ハッカー文化) と、組み込み文化を結びつけたい</li>
<li>関西でも、勉強する勉強する勉強会をしたい</li>
<li>「〜の使い方」じゃなくて50年戦える「技術」と「知識」を</li>
<li>AWK, sed</li>
<li>今回は AWK ではなく DWARF の話</li>
<li>基礎情報</li>
<li>デバッグ情報フォーマット (の規格)</li>
<li>Debug With Attributed Record Format の略</li>
<li>デバッガでできること、わかること (ユーザ視点): 実行制御 (ブレークポイント、ステップ実行、〜まで実行)、スタックトレース、変数の値を表示</li>
<li>デバッガに課せられた任務: 実際は機械語が実行されているが、ソースコードがそのまま実行されているかのような錯覚を与える</li>
<li>デバッガが知るべきこと: ソースの各行に対応する機械語、関数の先頭・末尾に対応する機械語、変数のありか、変数のビット幅・表現形式(文字列、整数、浮動小数)、文字列や配列の境界、コールスタックを巻き戻す方法</li>
<li>コールスタックの例: スタックに return アドレスを持つ、レジスタウィンドウ、リンクリスト</li>
<li>ブレークポイントの仕組みの例: デバッグレジスタにアドレスを設定、メモリアクセスを監視、MMU などでメモリ番地の rwx を落として例外を発生させる、命令を書き換えて例外を発生させる</li>
<li>どの方法でもブレークポイントを設定するアドレスを知る必要がある</li>
<li>デバッグ情報とは: 「デバッガが知るべきこと」が保存されている情報が「デバッグ情報」</li>
<li>デバッグ情報を生成するのはコンパイラやリンカの役目</li>
<li>ソースの情報を直接知れるのはコンパイラのみ</li>
<li>リンカは再配置に伴う処理や重複情報の削除</li>
<li>デバッグ情報の課題、あるいは、デバッガにとっての難問</li>
<li>最適化:</li>
<li>ソースの原型をとどめない機械語: 対応がめちゃくちゃ、ソースと機械語の対応は1対1ではない、インライン展開</li>
<li>不要な変数は消される</li>
<li>消されなかった変数もどこへ行った</li>
<li>メモリ上になかったりレジスタも関数呼び出しを挟んで同じ変数が別のレジスタになっているかもしれない</li>
<li>RISC の台頭: デバッグ中でも最適化を切れない</li>
<li>アセンブラさえも命令の並べ替えを行うことがある (例: 遅延スロット)</li>
<li>デバッガがソースを再現するための全ての情報は、通常は非常に巨大になる: ディスクを圧迫する、メモリにはとても乗らない</li>
<li>これをなんとかして小さくしないといけない</li>
<li>DWARF の特徴: オープンかつフリー、デバッグフォーマットとして優秀、実際に広く使われている</li>
<li><a href="http://www.dwarfstd.org/">http://www.dwarfstd.org/</a></li>
<li>GFDL</li>
<li>DWARF の歴史</li>
<li>1992 に Version 1</li>
<li>現在は 2017.2 リリースの Version 5</li>
<li>他のデバッグ形式: STABS, *COFF, PDB, IEEE695</li>
<li>DWARF の精神: 何にも依存しない、暗黙ではなく明示、ゆるい標準、ベンダー拡張対応、より小さなデータ表現、効率的に処理できる</li>
<li>DWARF の目標</li>
<li>DWARF はなぜ難しいのか?: 日本語の情報も英語の情報も少ない、より小さなデータ表現</li>
<li>圧縮について確認</li>
<li>DWARF フォーマット解説</li>
<li>重要な用語</li>
<li>LEB128 (Little Endian Base 128)</li>
<li>uLEB128 (unsigned LEB128、符号なし)</li>
<li>sLEB128 (signed LEB128、符号付き)</li>
<li>CU (Compilation Unit)</li>
<li>翻訳単位</li>
</ul>


<h2>休憩</h2>

<p>時間がおしているので短めに</p>

<h2>バイナリかるた体験</h2>

<ul>
<li><a href="http://kozos.jp/binary-karuta/">http://kozos.jp/binary-karuta/</a></li>
<li><a href="http://amzn.to/2eYaTnn">0と1のコンピュータ世界 バイナリで遊ぼう!</a> という本に解説あり</li>
<li>説明があった後、「バイナリかるたのサンプル」の「スライド」をみながら実際に何のファイルなのかという話をしていました。</li>
<li>最後までいかなくても、問題の区切りで終了できるので、最後のセッションに最適だそうで、時間があまりなかったこともあって、スライドの途中で終了しました。</li>
</ul>


<h2>クロージング、後片付け</h2>

<ul>
<li>振り返り</li>
<li>振り返りの中の意見であったライブコーディング (とは言ってなかったけど) がよかったというのは同感でした。</li>
<li>資料は ELF の方も DWARF の方も後日公開してもらえるということでした。バイナリかるたはサイトをみながらだったので、特に別途用意された資料はありませんでした。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第78回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-29-rubykansai78.html"/>
    <updated>2017-07-29T13:04:59+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai78</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/62491">第78回 Ruby関西 勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<p>グランフロントでわかりにくい場所でしたが、きたことがあったので、すんなり来れました。
会場無線 LAN も前回の設定のまま使えました。</p>

<h2>rails にコントリビュートしてきました</h2>

<ul>
<li>integration test は get などを使う</li>
<li>system test は visit などを使う</li>
<li>system test のクラスは integration test のクラスを継承しているので get が使えて何も起こらなくてはまった</li>
<li>メソッドを消す pull request を送った</li>
<li>迷ったらとりあえず送ってみてリジェクトされても気にしない</li>
<li>英語もだいたいなんとかなる</li>
</ul>


<h2>GitLab + Dokku で作る CI/CD 環境</h2>

<p>発表資料はいつも通り<a href="">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/rubykansai78-gitlab-dokku/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/gitlab-dokku-cicd">slideshare</a>, <a href="https://speakerdeck.com/znz/cd-huan-jing">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-rubykansai78-gitlab-dokku">RubyGems</a> にあげています。</p>

<p><a href="http://blog.n-z.jp/blog/categories/gitlab/">gitlab カテゴリー</a>の一覧へのリンクを発表直前に追加したので、GitHub のソース以外には7月30日になってから反映しました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykansai78-gitlab-dokku/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykansai78-gitlab-dokku/" title="GitLab + Dokku で作る CI/CD 環境">GitLab + Dokku で作る CI/CD 環境</a>
</div>


<h2>AM/PMって知ってます？</h2>

<ul>
<li>acquisition (獲得) metaphor</li>
<li>participation (参加) metaphor</li>
</ul>


<h2>rubocopとの付き合い方　〜守・破・離〜</h2>

<ul>
<li>コードレビュー</li>
<li>新人教育, 品質向上, 相互学習</li>
<li><a href="http://d.hatena.ne.jp/naoya/20140313/1394664578">些末なコードレビュー - naoyaのはてなダイアリー</a> の &ldquo;やらなければいけないのは、「その設計は拡張に対して開いていないから開くべき」とか「これではエッジケースが想定されていないからこういう不具合につながるのでは」とか「そのテストでは後日見返したときに第三者が要求仕様を解釈しづらい」とかそういう指摘である。&rdquo;</li>
<li>&ldquo;lint ツールか何かで機械的にチェックすればよい&rdquo;</li>
<li><a href="https://github.com/bbatsov/ruby-style-guide">https://github.com/bbatsov/ruby-style-guide</a></li>
<li>Cop: StyleCop, LayoutCop, LintCop, MetricsCop, PerformanceCop, SecurityCop, RailsCop, BundlerCop</li>
<li>auto-correct</li>
<li>Todo リスト: <code>rubocop --auto-gen-config</code></li>
<li>守・破・離</li>
<li>houndci, sideci など</li>
<li>エディタ連携, guard-rubocop</li>
<li>syntastic だと非同期処理してくれなくて保存の度に固まるので deoplete (+neovim) を使っている</li>
<li>rails developer meetup, 次回: 8/24(木)19:30から, connpass での募集は8/1から, ハッシュタグ <code>#railsdm</code></li>
</ul>


<h2>Ruby と C# をつなぐ</h2>

<ul>
<li><a href="https://github.com/masoo/ruby-csharp_script">https://github.com/masoo/ruby-csharp_script</a></li>
<li>Ruby から C# を使う話だった</li>
<li>色々大変そうだった</li>
</ul>


<h2>RubyはPythonにしてやられてはいない</h2>

<ul>
<li>Ruby ビジネスフォーラムに参加した</li>
<li>午後のパネルディスカッションの内容の紹介</li>
<li>午前の基調講演の内容の紹介</li>
<li>その他イベント紹介</li>
</ul>


<h2>Ruby 初級者向けレッスン 61回 - 文字列</h2>

<p>安定したいつものような内容でした。</p>

<h2>クロージング</h2>

<ul>
<li>イベント告知など</li>
<li>明日同じ場所で<a href="https://techplay.jp/event/626491">ELFとDWARF勉強会</a></li>
<li><a href="https://dddrb.doorkeeper.jp/events/63433">DDD.rb #14 Redux で気軽に始める テスト駆動開発 - DDD.rb | Doorkeeper</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.gitlab-ci.ymlでDokkuとHerokuにdeployする]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-13-gitlab-ci-heroku.html"/>
    <updated>2017-07-13T21:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/gitlab-ci-heroku</id>
    <content type="html"><![CDATA[<p>GitLab と Dokku (と一部 Heroku) を使って CI/CD (Continuous Integration / Continuous Deployment) 環境を作ってみた話の続きです。
CI 部分のメインとなる <code>.gitlab-ci.yml</code> の設定の別パターンの話です。
review 環境は Dokku を使って、 staging と production に Heroku を使います。</p>

<p><a href="http://blog.n-z.jp/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 16.04.2 LTS</li>
<li>Omnibus GitLab 9.1.4-ce.0 (インストール時) から 9.3.5-ce.0 (記事執筆時)</li>
<li>gitlab-ci-multi-runner 9.2.0 (インストール時) から 9.3.0 (記事執筆時)</li>
<li>Dokku 0.9.4 (インストール時) から 0.10.2 (記事執筆時)</li>
</ul>


<h2>構成</h2>

<p>今回は、
git push すると CI が走り、 master 以外のブランチなら review 環境にデプロイされて、
master ブランチなら staging 環境にデプロイして、
tag が push されたら production 環境にデプロイされる、
という状態にします。</p>

<p>そして、 staging と production の deploy 先は Dokku ではなく Heroku を使います。</p>

<h2>.gitlab-ci.yml</h2>

<p>この後は <code>.gitlab-ci.yml</code> に設定する内容の説明になります。</p>

<h2>image 設定</h2>

<p>ここは前回と同じです。</p>

<p>ここでは <a href="https://hub.docker.com/r/_/ruby/">library/ruby - Docker Hub</a> の 2.3.3 を使いました。
<code>.ruby-version</code> や <code>Gemfile</code> と同じバージョンを指定します。</p>

<pre><code>image: ruby:2.3.3
</code></pre>

<p>2.3 だと 2.3.4 になるので、 2.3.3 まで指定しています。
2.3.4 はセキュリティアップデートではなかったので、まだ 2.3.3 のままですが、様子をみてあげる予定です。</p>

<h2>cache 設定</h2>

<p>ここも前回と同じです。</p>

<p><a href="https://docs.gitlab.com/ce/ci/yaml/README.html#cache-key">cache:key</a> から per-branch caching を選んで以下のように設定しました。</p>

<pre><code>cache:
  key: "$CI_COMMIT_REF_NAME"
  untracked: true
</code></pre>

<h2>環境変数設定</h2>

<p>ここも前回と同じです。</p>

<p><a href="https://hub.docker.com/r/_/postgres/">library/postgres - Docker Hub</a> で使う <code>POSTGRES_PASSWORD</code> などと、それに接続するための Rails 用の <code>DATABASE_URL</code>、
デプロイ用の省略表記のための <code>DOKKU</code> などを設定しています。</p>

<p><code>APP_NAME</code> と <code>DB_NAME</code> は <code>CI_ENVIRONMENT_SLUG</code> を使ってブランチごとに自動生成される名前を使っています。</p>

<pre><code>variables:
  # for test
  POSTGRES_DB: dbname
  POSTGRES_USER: dbuser
  POSTGRES_PASSWORD: dbpass
  DATABASE_URL: "postgres://dbuser:dbpass@postgres:5432/dbname"
  # for deploy
  DOKKU: ssh dokku@$DOKKU_HOST
  APP_NAME: $CI_ENVIRONMENT_SLUG
  DB_NAME: $CI_ENVIRONMENT_SLUG-database
</code></pre>

<h2>stages 設定</h2>

<p>ここも設定内容は前回と同じですが、 staging と production が別 Pipeline になって、それぞれで test が実行されるのが違います。</p>

<p>最初に説明したように、 test の後に review、 staging、 production となるように stages を設定します。</p>

<pre><code>stages:
  - test
  - review
  - staging
  - production
</code></pre>

<h2>before_script</h2>

<p>ここも前回と同じです。</p>

<p>テスト用の before_script を設定しています。(デプロイの方は個別に上書きしています。)</p>

<p>apt や bundler ではキャッシュ用のディレクトリである <code>/cache</code> を使うように指定しています。</p>

<p>開発環境と共通になっている都合上、 sqlite3 を入れています。
JavaScript ランタイムも必要なので、 nodejs も入れています。</p>

<pre><code>before_script:
  - 'apt-get update -qq &amp;&amp; apt-get -o dir::cache::archives="/cache/apt" install -y -qq sqlite3 libsqlite3-dev nodejs'
  - ruby -v
  - gem install bundler --no-ri --no-rdoc
  - bundle install --jobs $(nproc) --path=/cache/bundler
  - ln -nfs .test.env .env
</code></pre>

<h2>デプロイ用の before_script</h2>

<p>ここも前回と同じです。</p>

<p><a href="https://docs.gitlab.com/ce/ci/yaml/README.html#hidden-keys">Hidden keys</a>に書いてあるようにキーが <code>.</code> で始まるものは無視されるので、
YAML のアンカーを使って参照用に使えます。</p>

<p>ruby image には openssh-client は入っていたのですが、他の image に変えても動くように参考にした <a href="https://docs.gitlab.com/ce/ci/ssh_keys/README.html">Using SSH keys</a> に書いてあった通り、 openssh-client のインストール手順も入れています。</p>

<p><code>~/.ssh/config</code> で Hostname や Port や User などを指定したかったことがあったので、設定できるようにしました。</p>

<pre><code>.before_ssh: &amp;before_ssh
  # https://docs.gitlab.com/ce/ci/ssh_keys/README.html
  - 'which ssh-agent || ( apt-get update -y &amp;&amp; apt-get -o dir::cache::archives="/cache/apt" install -y openssh-client )'
  - eval $(ssh-agent -s)
  - ssh-add &lt;(echo "$SSH_PRIVATE_KEY")
  - mkdir -p ~/.ssh
  # Set `ssh-keyscan $DOKKU_HOST` to SSH_SERVER_HOSTKEYS
  - '[[ -f /.dockerenv ]] &amp;&amp; echo "$SSH_SERVER_HOSTKEYS" &gt; ~/.ssh/known_hosts'
  - '[[ -f /.dockerenv ]] &amp;&amp; echo "$SSH_CONFIG" &gt; ~/.ssh/config'
</code></pre>

<h2>GitLab の Web での環境変数設定</h2>

<p>ここも前回とほぼ同じですが、 production と staging の deploy 用の API 鍵を設定しているところが違います。</p>

<p>ここで <code>.gitlab-ci.yml</code> の話は中断して、 Secret variables の設定の話です。</p>

<p>GitLab で該当プロジェクトを開いて、 Settings の Pipelines から Secret variables で <code>SSH_PRIVATE_KEY</code> などを設定します。</p>

<p>ここでは、以下のように設定しました。</p>

<ul>
<li><code>DOKKU_HOST</code> : Dokku に ssh するときのホスト名 (<code>dokku.example.com</code> など)</li>
<li><code>DOKKU_DOMAIN</code> : Dokku の VHOST に設定したドメイン (<code>10.1.2.3.xip.io</code> など)</li>
<li><code>SSH_PRIVATE_KEY</code> : 秘密鍵 (<code>~/.ssh/id_gitlab</code> など) の内容</li>
<li><code>SSH_SERVER_HOSTKEYS</code> : <code>ssh-keyscan $DOKKU_HOST</code> の出力</li>
<li><code>SSH_CONFIG</code> : <code>~/.ssh/config</code> に設定したい内容</li>
<li><code>HEROKU_PRODUCTION_API_KEY</code> : <a href="https://dashboard.heroku.com/account">Manage Account</a> から production 用の Heroku アカウントの API key</li>
<li><code>HEROKU_STAGING_API_KEY</code> : <a href="https://dashboard.heroku.com/account">Manage Account</a> から staging 用の Heroku アカウントの API key</li>
</ul>


<p><code>SSH_PRIVATE_KEY</code> は Protected を Yes にすると review 環境への deploy に失敗するので、 No のままにする必要がありそうです。</p>

<p><code>HEROKU_PRODUCTION_API_KEY</code> や <code>HEROKU_STAGING_API_KEY</code> は Protected branch などの運用次第で Protected を Yes にできそうです。</p>

<h2>review 環境への deploy 用 script</h2>

<p>ここも前回とほぼ同じです。</p>

<p>まず Dokku でアプリとデータベースを作成して接続します。
2度目以降は同じアプリを更新するので、作成などのエラーは無視します。</p>

<p>環境変数は <code>TZ</code> と <code>RAILS_SERVE_STATIC_FILES</code> あたりがほぼ必須だと思いますが、他は staging 環境や review 環境用に独自に設定できるようにしています。
<code>RACK_DEV_MARK_ENV</code> は rack-dev-mark gem の設定です。</p>

<p><code>Procfile</code> で web だけではなく clockwork gem を使ったプロセスも動かしている関係で <code>letter_opener</code> 用のディレクトリをマウントしていますが、
<code>/usr/bin/find '/var/lib/dokku/data/storage/letter_opener' -mtime '+2' -delete</code> のような感じで古いファイルは自動削除する予定です。
(自動削除はまだしていません。)</p>

<p>デプロイ本体部分の <code>git push</code> は、単純に <code>master</code> だとうまくいかないことがあったので、 <code>HEAD:refs/heads/master</code> という指定にしています。
Heroku にデプロイするときも git でデプロイするなら同様になります。</p>

<p><code>db:seed</code> の実行は <code>ssh</code> に <code>-tt</code> をつけて強制的に tty を確保する必要がありました。</p>

<pre><code>.deploy_script: &amp;deploy_script
  - $DOKKU apps:create $APP_NAME || echo $?
  # require `sudo dokku plugin:install https://github.com/dokku/dokku-postgres`
  - $DOKKU postgres:create $DB_NAME || echo $?
  - $DOKKU postgres:link $DB_NAME $APP_NAME || echo $?
  - $DOKKU config:set --no-restart $APP_NAME
    TZ=Asia/Tokyo
    RAILS_SERVE_STATIC_FILES=1
    NO_FORCE_SSL=1
    RACK_DEV_MARK_ENV=review
  - git push dokku@$DOKKU_HOST:$APP_NAME HEAD:refs/heads/master
  - $DOKKU -tt run $APP_NAME bundle exec rake db:seed
</code></pre>

<p>前回と違って <code>RAILS_ENV</code> の変更をしていなかったり、 <code>letter_opener_web</code> や <code>seed_fu</code> は使っていないという違いがあります。</p>

<h2>test stage のジョブ</h2>

<p>ここも前回と同じです。</p>

<p>postgres を使って rake でテストを走らせます。</p>

<p>データベースの設定は <code>DATABASE_URL</code> で指定しているので、 <code>config/database.yml</code> は特に何もしていません。</p>

<pre><code>rake:
  stage: test
  services:
    - postgres:latest
  script:
    - bundle exec rake db:setup RAILS_ENV=test
    - bundle exec rake
</code></pre>

<p>rubocop なども使うなら同様に設定します。</p>

<h2>production 環境への deploy</h2>

<p>順番が前後しますが、最初に production 環境への deploy 設定です。</p>

<p>production 環境はちゃんと名前が決まっているので <code>APP_NAME</code> を上書きします。</p>

<p>Heroku への deploy には <a href="https://docs.gitlab.com/ce/ci/examples/test-and-deploy-ruby-application-to-heroku.html">Test and Deploy a ruby application</a> に書いてある dpl gem を使っています。
git push による deploy の方が好みなら git push を使っても良いと思います。</p>

<p>environment を設定することで GitLab の Web のプロジェクトの Pipelines の Environments からリンクが貼られます。</p>

<p>only で tags を指定することで tag が push されたら開始するようにしています。</p>

<p>only で master のみに制限しています。</p>

<pre><code>production:
  stage: production
  variables:
    APP_NAME: hello-app
  script:
  - gem install dpl
  - dpl --provider=heroku --app=$APP_NAME --api-key=$HEROKU_PRODUCTION_API_KEY
  environment:
    name: production
    url: https://$APP_NAME.herokuapp.com/
  only:
  - tags
</code></pre>

<h2>staging 環境への deploy</h2>

<p>production 環境と同様に staging 環境への deploy 設定をしています。</p>

<p><code>APP_NAME</code> や API key や URL などが違う以外は基本的に production と同じです。</p>

<pre><code>staging:
  stage: staging
  variables:
    APP_NAME: hello-staging-app
  script:
  - gem install dpl
  - dpl --provider=heroku --app=$APP_NAME --api-key=$HEROKU_STAGING_API_KEY
  environment:
    name: staging
    url: https://$APP_NAME.herokuapp.com/
  only:
  - master
</code></pre>

<h2>review 環境への deploy</h2>

<p>review 環境への deploy は前回と同じです。</p>

<p>deploy 本体の script は事前に定義した <code>deploy_script</code> を使います。
結局ここでしか使っていないので、直接ここに書いても良かったかもしれません。</p>

<p>environment は name に <code>review/</code> をつけることで複数の review 環境が同時に存在している時に折りたたまれるようになります。</p>

<p>review 環境は動的に作ったり消したりするので、 https ではなく http になっています。</p>

<p><code>on_stop</code> を指定することで環境の削除ジョブを指定できます。</p>

<p>only と except で master 以外のブランチの時に review 環境が作成されるようにしています。</p>

<pre><code>review:
  stage: review
  before_script: *before_ssh
  script: *deploy_script
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_ENVIRONMENT_SLUG.$DOKKU_DOMAIN
    on_stop: stop_review
  only:
    - branches
  except:
    - master
</code></pre>

<h2>review 環境の削除</h2>

<p>ここも前回と同じです。</p>

<p><code>action: stop</code> で環境を削除するジョブとして設定しています。</p>

<p><code>when: manual</code> で手動実行するように設定していますが、基本的にはマージリクエストがマージされた時に Remove source branch にチェックを入れて、自動で停止しています。</p>

<p><code>GIT_STRATEGY: none</code> で git 関連の操作はせずに速やかに停止処理のみするようにしています。</p>

<p>postgres は使用中だと停止できないので、先にアプリケーションを削除してからデータベースを削除しています。
自動実行なので <code>--force</code> で確認なしに削除するようにしています。</p>

<pre><code>stop_review:
  stage: review
  variables:
    GIT_STRATEGY: none
  before_script: *before_ssh
  script:
    - $DOKKU apps:destroy $CI_ENVIRONMENT_SLUG --force || echo $?
    - $DOKKU postgres:destroy $CI_ENVIRONMENT_SLUG-database --force || echo $?
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  only:
    - branches
  except:
    - master
</code></pre>

<h2>まとめ</h2>

<p>GitLab CI と Dokku と Heroku を組み合わせて CI/CD 環境を作る例を紹介しました。</p>

<p>今回紹介した様に、 Heroku に似ていてもある程度違いのある Dokku で自由に review 環境を作成して、 production に近い方が良い staging 環境は Heroku を使うというのが、自前の環境のリソースには余裕がある場合には良いのではないでしょうか。</p>

<p>GitLab + Dokku 関連の記事は<a href="http://blog.n-z.jp/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.gitlab-ci.ymlでDokkuにdeployする]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-11-gitlab-ci-dokku.html"/>
    <updated>2017-07-11T22:15:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/gitlab-ci-dokku</id>
    <content type="html"><![CDATA[<p>GitLab と Dokku (と一部 Heroku) を使って CI/CD (Continuous Integration / Continuous Deployment) 環境を作ってみた話の続きです。
CI 部分のメインとなる <code>.gitlab-ci.yml</code> の設定の話です。</p>

<p><a href="http://blog.n-z.jp/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 16.04.2 LTS</li>
<li>Omnibus GitLab 9.1.4-ce.0 (インストール時) から 9.3.5-ce.0 (記事執筆時)</li>
<li>gitlab-ci-multi-runner 9.2.0 (インストール時) から 9.3.0 (記事執筆時)</li>
<li>Dokku 0.9.4 (インストール時) から 0.10.2 (記事執筆時)</li>
</ul>


<h2>構成</h2>

<p><a href="https://docs.gitlab.com/ce/ci/README.html">GitLab Continuous Integration (GitLab CI)</a>の冒頭の画像にあるように、
git push すると CI が走り、 master 以外のブランチなら review 環境にデプロイされて、
master ブランチなら staging 環境にデプロイして、その後、手動で production 環境にデプロイできる、
という状態にします。</p>

<h2>.gitlab-ci.yml</h2>

<p>この後は <code>.gitlab-ci.yml</code> に設定する内容の説明になります。</p>

<h2>image 設定</h2>

<p>ここでは <a href="https://hub.docker.com/r/_/ruby/">library/ruby - Docker Hub</a> の 2.3.3 を使いました。
<code>.ruby-version</code> や <code>Gemfile</code> と同じバージョンを指定します。</p>

<pre><code>image: ruby:2.3.3
</code></pre>

<p>2.3 だと 2.3.4 になるので、 2.3.3 まで指定しています。
2.3.4 はセキュリティアップデートではなかったので、まだ 2.3.3 のままですが、様子をみてあげる予定です。</p>

<h2>cache 設定</h2>

<p><a href="https://docs.gitlab.com/ce/ci/yaml/README.html#cache-key">cache:key</a> から per-branch caching を選んで以下のように設定しました。</p>

<pre><code>cache:
  key: "$CI_COMMIT_REF_NAME"
  untracked: true
</code></pre>

<h2>環境変数設定</h2>

<p><a href="https://hub.docker.com/r/_/postgres/">library/postgres - Docker Hub</a> で使う <code>POSTGRES_PASSWORD</code> などと、それに接続するための Rails 用の <code>DATABASE_URL</code>、
デプロイ用の省略表記のための <code>DOKKU</code> などを設定しています。</p>

<p><code>APP_NAME</code> と <code>DB_NAME</code> は <code>CI_ENVIRONMENT_SLUG</code> を使ってブランチごとに自動生成される名前を使っています。</p>

<pre><code>variables:
  # for test
  POSTGRES_DB: dbname
  POSTGRES_USER: dbuser
  POSTGRES_PASSWORD: dbpass
  DATABASE_URL: "postgres://dbuser:dbpass@postgres:5432/dbname"
  # for deploy
  DOKKU: ssh dokku@$DOKKU_HOST
  APP_NAME: $CI_ENVIRONMENT_SLUG
  DB_NAME: $CI_ENVIRONMENT_SLUG-database
</code></pre>

<h2>stages 設定</h2>

<p>最初に説明したように、 test の後に review、 staging の後に production となるように stages を設定します。</p>

<pre><code>stages:
  - test
  - review
  - staging
  - production
</code></pre>

<h2>before_script</h2>

<p>テスト用の before_script を設定しています。(デプロイの方は個別に上書きしています。)</p>

<p>apt や bundler ではキャッシュ用のディレクトリである <code>/cache</code> を使うように指定しています。</p>

<p>開発環境と共通になっている都合上、 sqlite3 を入れています。
JavaScript ランタイムも必要なので、 nodejs も入れています。</p>

<pre><code>before_script:
  - 'apt-get update -qq &amp;&amp; apt-get -o dir::cache::archives="/cache/apt" install -y -qq sqlite3 libsqlite3-dev nodejs'
  - ruby -v
  - gem install bundler --no-ri --no-rdoc
  - bundle install --jobs $(nproc) --path=/cache/bundler
  - ln -nfs .test.env .env
</code></pre>

<h2>デプロイ用の before_script</h2>

<p><a href="https://docs.gitlab.com/ce/ci/yaml/README.html#hidden-keys">Hidden keys</a>に書いてあるようにキーが <code>.</code> で始まるものは無視されるので、
YAML のアンカーを使って参照用に使えます。</p>

<p>ruby image には openssh-client は入っていたのですが、他の image に変えても動くように参考にした <a href="https://docs.gitlab.com/ce/ci/ssh_keys/README.html">Using SSH keys</a> に書いてあった通り、 openssh-client のインストール手順も入れています。</p>

<p><code>~/.ssh/config</code> で Hostname や Port や User などを指定したかったことがあったので、設定できるようにしました。</p>

<pre><code>.before_ssh: &amp;before_ssh
  # https://docs.gitlab.com/ce/ci/ssh_keys/README.html
  - 'which ssh-agent || ( apt-get update -y &amp;&amp; apt-get -o dir::cache::archives="/cache/apt" install -y openssh-client )'
  - eval $(ssh-agent -s)
  - ssh-add &lt;(echo "$SSH_PRIVATE_KEY")
  - mkdir -p ~/.ssh
  # Set `ssh-keyscan $DOKKU_HOST` to SSH_SERVER_HOSTKEYS
  - '[[ -f /.dockerenv ]] &amp;&amp; echo "$SSH_SERVER_HOSTKEYS" &gt; ~/.ssh/known_hosts'
  - '[[ -f /.dockerenv ]] &amp;&amp; echo "$SSH_CONFIG" &gt; ~/.ssh/config'
</code></pre>

<h2>GitLab の Web での環境変数設定</h2>

<p>ここで <code>.gitlab-ci.yml</code> の話は中断して、 Secret variables の設定の話です。</p>

<p>GitLab で該当プロジェクトを開いて、 Settings の Pipelines から Secret variables で <code>SSH_PRIVATE_KEY</code> などを設定します。</p>

<p>ここでは、以下のように設定しました。</p>

<ul>
<li><code>DOKKU_HOST</code> : Dokku に ssh するときのホスト名 (<code>dokku.example.com</code> など)</li>
<li><code>DOKKU_DOMAIN</code> : Dokku の VHOST に設定したドメイン (<code>10.1.2.3.xip.io</code> など)</li>
<li><code>SSH_PRIVATE_KEY</code> : 秘密鍵 (<code>~/.ssh/id_gitlab</code> など) の内容</li>
<li><code>SSH_SERVER_HOSTKEYS</code> : <code>ssh-keyscan $DOKKU_HOST</code> の出力</li>
<li><code>PRODUCTION_DOKKU_HOST</code> : production 用の Dokku に ssh するときのホスト名</li>
<li><code>SSH_CONFIG</code> : <code>~/.ssh/config</code> に設定したい内容</li>
</ul>


<p><code>SSH_PRIVATE_KEY</code> は Protected を Yes にしたいところですが、 review 環境への deploy に失敗するので、 No のままにする必要がありました。</p>

<h2>review 環境への deploy 用 script</h2>

<p>まず Dokku でアプリとデータベースを作成して接続します。
2度目以降は同じアプリを更新するので、作成などのエラーは無視します。</p>

<p>環境変数は <code>TZ</code> と <code>RAILS_SERVE_STATIC_FILES</code> あたりがほぼ必須だと思いますが、他は staging 環境や review 環境用に独自に設定できるようにしています。
<code>RACK_DEV_MARK_ENV</code> は rack-dev-mark gem の設定です。</p>

<p><code>Procfile</code> で web だけではなく clockwork gem を使ったプロセスも動かしている関係で <code>letter_opener</code> 用のディレクトリをマウントしていますが、
<code>/usr/bin/find '/var/lib/dokku/data/storage/letter_opener' -mtime '+2' -delete</code> のような感じで古いファイルは自動削除する予定です。
(自動削除はまだしていません。)</p>

<p>デプロイ本体部分の <code>git push</code> は、単純に <code>master</code> だとうまくいかないことがあったので、 <code>HEAD:refs/heads/master</code> という指定にしています。
Heroku にデプロイするときも git でデプロイするなら同様になります。</p>

<p><code>db:seed</code> の実行は <code>ssh</code> に <code>-tt</code> をつけて強制的に tty を確保する必要がありました。</p>

<pre><code>.deploy_script: &amp;deploy_script
  - $DOKKU apps:create $APP_NAME || echo $?
  # require `sudo dokku plugin:install https://github.com/dokku/dokku-postgres`
  - $DOKKU postgres:create $DB_NAME || echo $?
  - $DOKKU postgres:link $DB_NAME $APP_NAME || echo $?
  - $DOKKU config:set --no-restart $APP_NAME
    TZ=Asia/Tokyo
    RAILS_SERVE_STATIC_FILES=1
    NO_FORCE_SSL=1
    USE_LETTER_OPENER_WEB=1
    RACK_DEV_MARK_ENV=review
    RACK_ENV=review
    RAILS_ENV=review
  - $DOKKU storage:mount $APP_NAME /var/lib/dokku/data/storage/letter_opener/$APP_NAME:/app/tmp/letter_opener || echo $?
  - git push dokku@$DOKKU_HOST:$APP_NAME HEAD:refs/heads/master
  - $DOKKU -tt run $APP_NAME bundle exec rake db:seed db:seed_fu
</code></pre>

<h2>test stage のジョブ</h2>

<p>postgres を使って rake でテストを走らせます。</p>

<p>データベースの設定は <code>DATABASE_URL</code> で指定しているので、 <code>config/database.yml</code> は特に何もしていません。</p>

<pre><code>rake:
  stage: test
  services:
    - postgres:latest
  script:
    - bundle exec rake db:setup RAILS_ENV=test
    - bundle exec rake
</code></pre>

<p>rubocop なども使うなら同様に設定します。</p>

<h2>production 環境への deploy</h2>

<p>順番が前後しますが、最初に production 環境への deploy 設定です。</p>

<p>production 環境はちゃんと名前が決まっているので <code>APP_NAME</code> を上書きします。</p>

<p><code>before_script</code> はテスト環境用のものを <code>before_ssh</code> で上書きします。
(デプロイ用のジョブの方が多いので逆にテスト用のジョブで <code>before_script</code> を上書きする方がよかったかもしれません。)</p>

<p>production 環境は環境がすでに整っているはずなので、デプロイは <code>git push</code> による更新のみです。</p>

<p>environment を設定することで GitLab の Web のプロジェクトの Pipelines の Environments からリンクが貼られます。</p>

<p><code>when: manual</code> にすることで手動で開始するようにしています。</p>

<p>only で master のみに制限しています。</p>

<pre><code>production:
  stage: production
  variables:
    APP_NAME: hello-app
  before_script: *before_ssh
  script:
    - git push dokku@$PRODUCTION_DOKKU_HOST:$APP_NAME HEAD:refs/heads/master
  environment:
    name: production
    url: https://hello-app.example.jp/
  when: manual
  only:
    - master
</code></pre>

<h2>staging 環境への deploy</h2>

<p>production 環境と同様に staging 環境への deploy 設定をしています。</p>

<p>テストが通ったら自動実行されるのと <code>APP_NAME</code> や URL などが違う以外は基本的に production と同じです。</p>

<pre><code>staging:
  stage: staging
  variables:
    APP_NAME: hello-app-staging
  before_script: *before_ssh
  script:
    - git push dokku@$PRODUCTION_DOKKU_HOST:$APP_NAME HEAD:refs/heads/master
  environment:
    name: staging
    url: https://hello-app-staging.example.jp/
  only:
    - master
</code></pre>

<h2>review 環境への deploy</h2>

<p>review 環境への deploy も似たような感じです。</p>

<p>deploy 本体の script は事前に定義した <code>deploy_script</code> を使います。
結局ここでしか使っていないので、直接ここに書いても良かったかもしれません。</p>

<p>environment は name に <code>review/</code> をつけることで複数の review 環境が同時に存在している時に折りたたまれるようになります。</p>

<p>review 環境は動的に作ったり消したりするので、 https ではなく http になっています。</p>

<p><code>on_stop</code> を指定することで環境の削除ジョブを指定できます。</p>

<p>only と except で master 以外のブランチの時に review 環境が作成されるようにしています。</p>

<pre><code>review:
  stage: review
  before_script: *before_ssh
  script: *deploy_script
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_ENVIRONMENT_SLUG.$DOKKU_DOMAIN
    on_stop: stop_review
  only:
    - branches
  except:
    - master
</code></pre>

<h2>review 環境の削除</h2>

<p><code>action: stop</code> で環境を削除するジョブとして設定しています。</p>

<p><code>when: manual</code> で手動実行するように設定していますが、基本的にはマージリクエストがマージされた時に Remove source branch にチェックを入れて、自動で停止しています。</p>

<p><code>GIT_STRATEGY: none</code> で git 関連の操作はせずに速やかに停止処理のみするようにしています。</p>

<p>postgres は使用中だと停止できないので、先にアプリケーションを削除してからデータベースを削除しています。
自動実行なので <code>--force</code> で確認なしに削除するようにしています。</p>

<pre><code>stop_review:
  stage: review
  variables:
    GIT_STRATEGY: none
  before_script: *before_ssh
  script:
    - $DOKKU apps:destroy $CI_ENVIRONMENT_SLUG --force || echo $?
    - $DOKKU postgres:destroy $CI_ENVIRONMENT_SLUG-database --force || echo $?
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  only:
    - branches
  except:
    - master
</code></pre>

<h2>まとめ</h2>

<p>GitLab CI と Dokku を組み合わせて CI/CD 環境を作る例を紹介しました。</p>

<p>ちゃんと動く review 環境にするには seed の設定だったり、メール関係の設定だったり、色々とアプリケーション側でも対応が必要ですが、一度環境ができてしまえば変更の確認を他の人にもしてもらいやすくなるので、便利になるのではないでしょうか。</p>

<p>次は staging 環境と production 環境に Heroku を使う例を紹介します。</p>

<p>GitLab + Dokku 関連の記事は<a href="http://blog.n-z.jp/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitLabと連携するDokkuの初期設定]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-10-gitlab-dokku.html"/>
    <updated>2017-07-10T21:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/gitlab-dokku</id>
    <content type="html"><![CDATA[<p>GitLab と Dokku (と一部 Heroku) を使って CI/CD (Continuous Integration / Continuous Deployment) 環境を作ってみた話の続きです。
今回は Dokku の設定の話になります。</p>

<p><a href="http://blog.n-z.jp/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 16.04.2 LTS</li>
<li>Omnibus GitLab 9.1.4-ce.0 (インストール時) から 9.3.5-ce.0 (記事執筆時)</li>
<li>gitlab-ci-multi-runner 9.2.0 (インストール時) から 9.3.0 (記事執筆時)</li>
<li>Dokku 0.9.4 (インストール時) から 0.10.2 (記事執筆時)</li>
</ul>


<h2>Dokku とは?</h2>

<p><a href="http://dokku.viewdocs.io/dokku/">Dokku - The smallest PaaS implementation you&rsquo;ve ever seen</a>は bash で書かれた OSS の PaaS です。</p>

<p>Heroku のように git push でデプロイするというのが基本的な使い方になります。</p>

<p>環境変数の操作などのような heroku コマンドで操作に相当することは ssh 経由と Dokku ホスト上での dokku コマンドの両方でできることが多いです。
プラグインのインストールなど、一部の操作は Dokku ホスト上で直接実行する必要があります。</p>

<p>データベースなどはプラグインで対応しています。</p>

<p>Dokku の更新が止まっていた時にできた <a href="https://github.com/dokku-alt/dokku-alt">Dokku Alternative</a> という fork もありましたが、メンテナンスが止まっているので使うべきではありません。</p>

<p>最近はコアプラグインから少しずつ Go 言語への移行を進めているようです。</p>

<h2>インストール</h2>

<p><a href="http://dokku.viewdocs.io/dokku/">Dokku</a> に書いてあるように <code>bootstrap.sh</code> を使うと自動で <code>get.docker.com</code> からの docker のインストールも含めて、 apt から dokku をインストールしてくれます。</p>

<h2>初期設定</h2>

<p>debconf であらかじめ設定しておくか、<code>web_config</code> を使って設定します。</p>

<p>デフォルトのままなどで <code>web_config</code> が有効な場合、 Dokku をインストールしたホストをブラウザーで開くと初期設定画面が出てきます。</p>

<p>そこでデプロイや ssh 経由での操作に使う ssh の公開鍵の登録とホスト名の設定をします。
ホスト名はアプリケーションごとに個別のバーチャルホストを別途設定できるので、とりあえず xip.io や nip.io を使っておくのが手軽だと思います。</p>

<h2>プラグインのインストール</h2>

<p><a href="http://dokku.viewdocs.io/dokku/community/plugins/">プラグイン一覧</a>から Compatibility を確認して必要なプラグインをインストールします。</p>

<p>Heroku と似た感じで使いたいのなら <a href="https://github.com/dokku/dokku-postgres">dokku postgres</a> を入れておくと良いと思います。</p>

<p>Dokku ホストで</p>

<pre><code>sudo dokku plugin:install https://github.com/dokku/dokku-postgres.git postgres
</code></pre>

<p>でインストールできます。</p>

<p><a href="https://github.com/dokku/dokku-maintenance">dokku-maintenance</a> のように Heroku だと標準で対応していることがプラグインになっていたり、
<a href="https://github.com/F4-Group/dokku-apt">dokku-apt</a> のように Heroku だと複数 buildpack で対応していたようなことがプラグインになっていたりすることもあります。</p>

<h2>ssh の公開鍵設定</h2>

<p>後で GitLab CI の secret variables に秘密鍵を設定するので、専用の鍵ペアを作成して、 <a href="http://dokku.viewdocs.io/dokku/deployment/user-management/">User Management</a> の方法で Dokku に公開鍵を登録しておきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% ssh-keygen
</span><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>Enter file in which to save the key (/home/vagrant/.ssh/id_rsa): /home/vagrant/.ssh/id_gitlab
</span><span class='line'>Enter passphrase (empty for no passphrase):
</span><span class='line'>Enter same passphrase again:
</span><span class='line'>Your identification has been saved in /home/vagrant/.ssh/id_gitlab.
</span><span class='line'>Your public key has been saved in /home/vagrant/.ssh/id_gitlab.pub.
</span><span class='line'>The key fingerprint is:
</span><span class='line'>(略)
</span><span class='line'>% cat ~/.ssh/id_gitlab.pub | ssh dokku@dokku.example.jp ssh-keys:add gitlab</span></code></pre></td></tr></table></div></figure>


<h2>動作確認</h2>

<p>データベースの必要な例を試すなら、<a href="http://dokku.viewdocs.io/dokku/deployment/application-deployment/">Deploy tutorial</a>を試してみると良いと思います。</p>

<p>データベースの不要な例を試すなら、<a href="https://devcenter.heroku.com/articles/rack">Deploying Rack-based Apps | Heroku Dev Center</a> の <code>heroku create</code> を <code>git remote add dokku dokku@dokku.example.test:hello</code> に変えて、 <code>git push heroku master</code> の代わりに <code>git push dokku master</code> で試してみたりすると良いと思います。</p>

<h2>まとめ</h2>

<p>Dokku のインストールから簡単な動作確認方法まで紹介しました。
次は <code>.gitlab-ci.yml</code> を作成して連携する話です。</p>

<p><a href="http://blog.n-z.jp/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitLab Runner の設定]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-09-gitlab-runner.html"/>
    <updated>2017-07-09T14:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/gitlab-runner</id>
    <content type="html"><![CDATA[<p>GitLab と Dokku (と一部 Heroku) を使って CI/CD (Continuous Integration / Continuous Deployment) 環境を作ってみた話の続きです。
CI 部分のメインとなる GitLab Runner の設定の話です。</p>

<p><a href="http://blog.n-z.jp/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 16.04.2 LTS</li>
<li>Omnibus GitLab 9.1.4-ce.0 (インストール時) から 9.3.5-ce.0 (記事執筆時)</li>
<li>gitlab-ci-multi-runner 9.2.0 (インストール時) から 9.3.0 (記事執筆時)</li>
<li>Dokku 0.9.4 (インストール時) から 0.10.2 (記事執筆時)</li>
</ul>


<h2>GitLab Runner とは?</h2>

<p><a href="https://docs.gitlab.com/runner/">GitLab Runner</a> とは GitLab CI のジョブを実行する部分のことです。</p>

<p>Jenkins でいうと (ジョブを実行しない設定にした) master が GitLab CI で、 slave が GitLab Runner に相当します。</p>

<h2>名前について</h2>

<p>昔は gitlab-ci-multi-runner という名前だったらしく、 repository は <a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner">https://gitlab.com/gitlab-org/gitlab-ci-multi-runner</a> になっています。</p>

<p>GitLab CI は GitLab 8.x の時に GitLab 本体に統合されたということで、古いドキュメントを参照するときは注意が必要そうです。</p>

<h2>executor 選択</h2>

<p>GitLab Runner を入れたマシン上で直接実行する Shell executor や Docker で実行する Docker executor などがありますが、一番簡単で便利そうな Docker executor を使うことにしました。
また、管理を簡単にするために全てのプロジェクトで共通の Runner を使うことにしました。</p>

<p>必要なら複数登録してタグで使い分けることもできます。
プロジェクトごとに使い分けることもできます。</p>

<h2>インストール</h2>

<p>GitLab とは別マシンが推奨のようなので、別仮想マシンを用意しました。
<a href="https://docs.gitlab.com/runner/install/linux-repository.html">Install GitLab Runner using the official GitLab repositories</a> の方法でパッケージをインストールしました。</p>

<p>「Note: Debian users should use APT pinning」とありますが、<a href="https://packages.debian.org/gitlab-ci-multi-runner">Debian の gitlab-ci-multi-runner パッケージ</a>をみてもリリースされた Stretch には入っていないようです。<a href="https://packages.ubuntu.com/gitlab-ci-multi-runner">Ubuntu の gitlab-ci-multi-runner パッケージ</a>も xenial (16.04LTS) には入っていないようなので、 APT pinning はなくても良さそうです。(今回の設定では念のため入れています。)</p>

<h2>GitLab CI に登録</h2>

<p><a href="https://docs.gitlab.com/runner/register/index.html">Registering Runners</a> に書いてあるように <code>sudo gitlab-runner register</code> で登録します。
オプションなしで実行すると対話的にいろいろきかれます。</p>

<p>gitlab-ci coordinator URL は古いドキュメントだと <code>/ci</code> が付いていることがあるようですが、今はあってもなくてもどちらでも大丈夫のようです。</p>

<p>自動設定するなら token は GitLab 側の初期設定をする時に <code>gitlab_rails['initial_shared_runners_registration_token']</code> で固定しておくと良いと思います。</p>

<p>タグを空欄にした場合はタグなしのジョブも実行されるのですが、タグを設定した場合は run untagged jobs も設定しておかないとジョブが実行されなくて悩むことになります。
(タグは GitLab の Web UI で後から空欄にできなくて、実行されない条件を絞り込むのに unregister して register し直す必要があって面倒だったのですが、当時のバージョンのバグだったのか、GitLab 9.3.5 では問題なく空欄に変更できました。)</p>

<p>Docker executor を選んだ時のデフォルトの Docker image は <code>hello-world</code> ぐらいの使いにくいものにしておいて、 <code>.gitlab-ci.yml</code> で image を常に指定する方が Runner の設定に影響されないので無難かもしれません。</p>

<h2>GitLab CI から登録解除</h2>

<p><code>gitlab-runner list</code> で token などを確認して <code>gitlab-runner unregister</code> で登録解除できます。</p>

<p>unregister せずに GitLab Runner がいなくなってしまった場合は GitLab の Admin Area の Runners から Remove できます。</p>

<h2>同時実行数指定</h2>

<p><code>/etc/gitlab-runner/config.toml</code> の <code>concurrent =</code> で同時に実行するジョブ数を指定できます。
自動で再読み込みしているらしく、試した感じだと runner の restart をしなくても設定が反映されるようでした。</p>

<h2>.gitlab-ci.yml の Lint</h2>

<p><a href="http://qiita.com/sei40kr/items/407e08cc45f218738d4c">GitLab CIの設定ファイルを手元でLintする</a>によると <code>/api/v4/ci/lint</code> で Lint できるようなので、 curl と jq をインストールしておいて、</p>

<pre><code>linter_api_url='https://gitlab.com/api/v4/ci/lint'
curl -sH 'Content-Type: application/json' "$linter_api_url" -d "$(jq -Rs '{"content":.}' &lt; .gitlab-ci.yml)" | jq
</code></pre>

<p>のようにすれば良いようです。</p>

<p><code>linter_api_url</code> を自前の GitLab の URL にしておけば外部に送信することなく Lint できます。</p>

<h2>GitLab Container Registry と連携</h2>

<p>Docker executor を使って GitLab Container Registry を扱いたい場合、 Docker executor と同じホスト側の docker を使う方法と docker in docker を使う方法があります。</p>

<p>詳細は <a href="https://docs.gitlab.com/ce/ci/docker/using_docker_build.html">Using Docker Build</a> を参考にしてください。</p>

<p>GitLab Container Registry にちゃんとした https の証明書が設定できる場合は良いのですが、テスト環境などで http しか有効にできない場合は困ることがあります。</p>

<h3>ホスト側の docker を使う方法</h3>

<p>ホスト側の docker を使うということは、ホスト側の docker の権限を GitLab CI で使えるようにしてしまうということなので、信頼できないユーザーが <code>.gitlab-ci.yml</code> を操作できる環境では使えません。</p>

<p>使い方としては GitLab Runner の register の時に <code>--docker-volumes /var/run/docker.sock:/var/run/docker.sock</code> を指定します。</p>

<p>GitLab Container Registry が http のみの場合は、ホスト側の Docker に insecure-registry の設定をすることになります。</p>

<p><code>/etc/systemd/system/docker.service.d/local.conf</code> などで <code>ExecStart</code> を上書きして設定するか、 <code>/etc/docker/daemon.json</code> に</p>

<pre><code>{"insecure-registries": ["registry.example.test"]}
</code></pre>

<p>のように設定することで http で接続できるようになります。
(daemon.json では<a href="http://docs.docker.jp/engine/reference/commandline/daemon.html#daemon-configuration-file">デーモン設定ファイル</a>に書いてあるようにコマンドラインオプションの <code>--insecure-registry</code> が複数形の <code>"insecure-registries"</code> になります。 <code>dns</code> のように複数形でも変わらないものもあるので、指定できるオプションはドキュメントを参照するのが無難です。)</p>

<h3>docker in docker を使う方法</h3>

<p><code>.gitlab-ci.yml</code> の services に <code>docker:dind</code> を指定して使う、という方法になります。
<code>docker:dind</code> サービスに insecure-registry を設定する方法がないので、試していませんが http のみで使いたい場合は派生 image を自分で作るなどの対応が必要そうです。</p>

<p>使い方としては GitLab Runner の register の時に <code>--docker-privileged</code> を指定します。
register の時に指定し忘れていた場合は、後から config.toml に <code>privileged = true</code> を追加でも良いと思います。</p>

<h3>.gitlab-ci.yml での設定</h3>

<p><a href="https://docs.gitlab.com/ce/ci/docker/using_docker_build.html">Using Docker Build</a> に書いてあるように</p>

<pre><code>- docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.example.com
</code></pre>

<p>か</p>

<pre><code>- docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
</code></pre>

<p>のようにログインした後、 build や push などができるようになります。</p>

<p><code>gitlab-ci-token</code> も固定ではなく環境変数を参照するようにできますが、固定で書いてある設定例が多いので、変わる可能性は低そうなので、固定で書いておいても良いと思います。</p>

<h2>まとめ</h2>

<p>GitLab Runner の設定と Lint の使い方、 GitLab Container Registry と連携方法を紹介しました。
次は Dokku の設定になります。</p>

<p><a href="http://blog.n-z.jp/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Omnibus GitLabをContainer RegistryやMattermostを有効にして使う]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-08-omnibus-gitlab.html"/>
    <updated>2017-07-08T16:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/omnibus-gitlab</id>
    <content type="html"><![CDATA[<p>GitLab と Dokku (と一部 Heroku) を使って CI/CD (Continuous Integration / Continuous Deployment) 環境を作ってみたので、何回かにわけてその話を書いていきます。
最初は Omnibus GitLab 自体の設定の話です。
certbot で https を有効にして、 GitLab Container Registry や GitLab Mattermost も有効にします。
GitLab Pages も有効にしますが、 certbot での自動化はできなかったので http のみの設定です。</p>

<p><a href="http://blog.n-z.jp/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 16.04.2 LTS</li>
<li>Omnibus GitLab 9.1.4-ce.0 (インストール時) から 9.3.5-ce.0 (記事執筆時)</li>
<li>gitlab-ci-multi-runner 9.2.0 (インストール時) から 9.3.0 (記事執筆時)</li>
<li>Dokku 0.9.4 (インストール時) から 0.10.2 (記事執筆時)</li>
</ul>


<h2>インストール方法選択</h2>

<p><a href="https://about.gitlab.com/installation/">Installation methods for GitLab</a> にある方法のうち、Omnibus package installation (recommended) を選択しました。
理由としては以下のようなことを考慮しました。</p>

<ul>
<li>ソースインストールはインストールもバージョンアップも管理も大変そうなので除外</li>
<li>Docker でのインストールはバージョンを上げて問題がおきた場合に戻しやすそうだが、バージョンアップ情報を自分で追いかけないといけない</li>
<li>Omnibus package は apt で他のパッケージの更新と同様にバージョンアップが検知可能</li>
<li>GitLab 自体は仮想マシン1台で動かすのでバージョンアップ時に停止時間が発生するのは許容</li>
</ul>


<h2>カスタマイズ方法</h2>

<p>Docker イメージは <code>GITLAB_OMNIBUS_CONFIG</code> で、 Omnibus package は <code>/etc/gitlab/gitlab.rb</code> でカスタマイズできます。
(設定できる項目は <a href="https://docs.gitlab.com/omnibus/docker/README.html">https://docs.gitlab.com/omnibus/docker/README.html</a> からリンクされている <a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template">Omnibus GitLab template</a> 参照)</p>

<p>自動構築したい場合は <code>gitlab_rails['initial_root_password']</code> や <code>gitlab_rails['initial_shared_runners_registration_token']</code> が設定できるというのを知っておくと良さそうです。</p>

<p>設定項目によっては Web UI で変更しても <code>sudo gitlab-ctl reconfigure</code> を実行すると再設定されてしまうものもあるようなので、影響しそうな設定を変更するときは気にしておくと良さそうです。
(気づいた範囲では GitLab Mattermost 関係の設定が再設定されました。)</p>

<h2>最低限の設定</h2>

<p>相対時間で表示されることも多いので、デフォルトのままでもあまり気にならないかもしれませんが、</p>

<pre><code>gitlab_rails['time_zone'] = 'Asia/Tokyo'
</code></pre>

<p>でタイムゾーンの設定をしておくと良いと思います。</p>

<h2>メール設定</h2>

<p><a href="https://docs.gitlab.com/omnibus/settings/smtp.html">SMTP settings</a> を参考にしてメール送信の設定をしておきます。</p>

<p>以下は SMTP over TLS (smtps) で送信する例です。</p>

<pre><code># https://docs.gitlab.com/omnibus/settings/smtp.html
gitlab_rails['smtp_enable'] = true
gitlab_rails['smtp_address'] = 'smtp.example.com'
gitlab_rails['smtp_port'] = 465
gitlab_rails['smtp_user_name'] = 'username'
gitlab_rails['smtp_password'] = 'password'
gitlab_rails['smtp_tls'] = true
</code></pre>

<p>Mattermost も使うなら一緒に設定しておきます。</p>

<pre><code>mattermost['email_smtp_username'] = 'username'
mattermost['email_smtp_password'] = 'password'
mattermost['email_smtp_server'] = 'smtp.example.com'
mattermost['email_smtp_port'] = 465
mattermost['email_connection_security'] = 'TLS'
mattermost['email_feedback_name'] = 'GitLab Mattermost'
mattermost['email_feedback_email'] = 'email@example.com'
mattermost['support_email'] =  'support@example.com'
</code></pre>

<h2>後で使う変数設定</h2>

<p>config は ruby のコードなので、ローカル変数でドメインをまとめて設定できるようにしておきます。</p>

<pre><code>base_domain = 'example.test'
gitlab_domain = "gitlab.#{base_domain}"
registry_domain = "registry.#{base_domain}"
mattermost_domain = "mattermost.#{base_domain}"
</code></pre>

<h2>https 設定</h2>

<p>GitLab で <a href="https://launchpad.net/~certbot/+archive/ubuntu/certbot">Certbot</a> で <a href="https://letsencrypt.org/">Let&rsquo;s Encrypt - Free SSL/TLS Certificates</a> の証明書を使うので、そのファイルの有無で設定を分岐します。</p>

<p>これで、最初の証明書がない状態や vagrant などでの検証環境では http でつながり、証明書発行後に <code>sudo gitlab-ctl reconfigure</code> すれば https でつながるようになる、という設定が実現できます。</p>

<pre><code>if File.exist?("/etc/letsencrypt/live/#{gitlab_domain}/fullchain.pem")
  external_url "https://#{gitlab_domain}"
  nginx['redirect_http_to_https'] = true
  nginx['ssl_certificate'] = "/etc/letsencrypt/live/#{gitlab_domain}/fullchain.pem"
  nginx['ssl_certificate_key'] = "/etc/letsencrypt/live/#{gitlab_domain}/privkey.pem"
else
  external_url "http://#{gitlab_domain}"
end
nginx['custom_gitlab_server_config'] = 'location ^~ /.well-known { root /var/www/letsencrypt; }'
</code></pre>

<h2>GitLab Container Registry 設定</h2>

<p>Docker の Container Registry の <a href="https://docs.gitlab.com/ce/user/project/container_registry.html">GitLab Container Registry</a> も設定します。
GitLab と同様に証明書の有無で分岐しています。</p>

<p>Container Registry は https を使わない場合、 insecure-registry で困ることになると思います。</p>

<pre><code>if File.exist?("/etc/letsencrypt/live/#{registry_domain}/fullchain.pem")
  registry_external_url "https://#{registry_domain}"
  registry_nginx['redirect_http_to_https'] = true
  registry_nginx['ssl_certificate'] = "/etc/letsencrypt/live/#{registry_domain}/fullchain.pem"
  registry_nginx['ssl_certificate_key'] = "/etc/letsencrypt/live/#{registry_domain}/privkey.pem"
else
  registry_external_url "http://#{registry_domain}"
end
registry_nginx['custom_gitlab_server_config'] = 'location ^~ /.well-known { root /var/www/letsencrypt; }'
</code></pre>

<p>設定はしましたが、今のところ使っていません。</p>

<h2>GitLab Mattermost 設定</h2>

<p>GitLab Mattermost も同様に https の設定をします。</p>

<pre><code>if File.exist?("/etc/letsencrypt/live/#{mattermost_domain}/fullchain.pem")
  mattermost_scheme = "https"
  mattermost_port = 443
  mattermost_external_url "#{mattermost_scheme}://#{mattermost_domain}"
  mattermost_nginx['redirect_http_to_https'] = true
  mattermost_nginx['ssl_certificate'] = "/etc/letsencrypt/live/#{mattermost_domain}/fullchain.pem"
  mattermost_nginx['ssl_certificate_key'] = "/etc/letsencrypt/live/#{mattermost_domain}/privkey.pem"
  mattermost['service_use_ssl'] = true
else
  mattermost_scheme = "http"
  mattermost_port = 80
  mattermost_external_url "#{mattermost_scheme}://#{mattermost_domain}"
end
mattermost_nginx['custom_gitlab_mattermost_server_config'] = 'location ^~ /.well-known { root /var/www/letsencrypt; }'
</code></pre>

<p><a href="https://docs.gitlab.com/omnibus/gitlab-mattermost/#email-batching">Email Batching</a> にはポート番号付きで書いてありますが、ポート番号付きで設定していると Omnibus GitLab 9.2.0 の Mattermost で Bad token type error になってしまってログインできなくなってしまったので、ポート番号なしで設定しています。</p>

<pre><code># required by Email Batching
#mattermost['service_site_url'] = "#{mattermost_scheme}://#{mattermost_domain}:#{mattermost_port}"
# port causes Bad token type error https://github.com/mattermost/platform/issues/6489
mattermost['service_site_url'] = "#{mattermost_scheme}://#{mattermost_domain}"
mattermost['email_enable_batching'] = true
</code></pre>

<p>Mattermost の方だけにアカウントを作れる必要はなかったので、 GitLab 連携のアカウントだけに制限しています。</p>

<pre><code>mattermost['email_enable_sign_in_with_email'] = false # gitlab accounts only
mattermost['email_enable_sign_up_with_email'] = false # default
</code></pre>

<p>チーム作成も GitLab のグループ作成のときに連動して作ることを想定して制限しています。
ただし Admin Area の方からグループを作成しようとすると「Create a Mattermost team for this group」のチェックボックスが出てこないので、 Dashboard の Groups の方から New group で作成する必要があるようです。</p>

<pre><code>mattermost['team_enable_team_creation'] = false
mattermost['team_enable_user_creation'] = true # default, required by GitLab SSO
mattermost['team_restrict_creation_to_domains'] = 'example.com'
</code></pre>

<p>デフォルトの言語設定をしておきます。</p>

<pre><code>mattermost['localization_server_locale'] = 'ja'
mattermost['localization_client_locale'] = 'ja'
</code></pre>

<p>Webhook を有効にします。
このあたりの設定は Web UI から変更しても <code>sudo gitlab-ctl reconfigure</code> すると、こちらの設定が優先されるようです。</p>

<pre><code>mattermost['service_enable_incoming_webhooks'] = true
</code></pre>

<h2>GitLab Pages</h2>

<p><a href="https://docs.gitlab.com/ce/user/project/pages/index.html">GitLab Pages</a> の設定をします。</p>

<p>github.io と同様にグループやユーザーのサブドメインで見えるようになるので、 xip.io や nip.io などのようなワイルドカード DNS を使うのが簡単だと思います。</p>

<pre><code>pages_external_url 'http://10.0.0.10.nip.io'
</code></pre>

<p>この設定で <code>http://hello.10.0.0.10.nip.io/world/</code> などでみえるようになります。</p>

<p>https を使うには証明書と秘密鍵を Web UI から設定する必要があるようなので、自動化は難しそうな印象を受けました。</p>

<h2>機能制限</h2>

<p>デフォルトではグループを作成できないようにしました。</p>

<pre><code># GitLab user privileges
gitlab_rails['gitlab_default_can_create_group'] = false
gitlab_rails['gitlab_username_changing_enabled'] = false
</code></pre>

<p>すべてのプロジェクトですべての機能を使うわけではないので、デフォルトでは無効にしました。</p>

<pre><code># Default project feature settings
gitlab_rails['gitlab_default_projects_features_issues'] = false
gitlab_rails['gitlab_default_projects_features_merge_requests'] = false
gitlab_rails['gitlab_default_projects_features_wiki'] = false
gitlab_rails['gitlab_default_projects_features_snippets'] = false
gitlab_rails['gitlab_default_projects_features_builds'] = false
gitlab_rails['gitlab_default_projects_features_container_registry'] = false
</code></pre>

<h2>certbot 実行</h2>

<p>Ubuntu 16.04.2 LTS にはまだ certbot が含まれていないので、 <a href="https://launchpad.net/~certbot/+archive/ubuntu/certbot">Certbot PPA</a> から certbot パッケージをインストールして、</p>

<pre><code>sudo certbot certonly --webroot --webroot-path=/var/www/letsencrypt -d gitlab.example.jp
sudo certbot certonly --webroot --webroot-path=/var/www/letsencrypt -d registry.example.jp
sudo certbot certonly --webroot --webroot-path=/var/www/letsencrypt -d mattermost.example.jp
</code></pre>

<p>のように証明書を発行して、</p>

<pre><code>sudo gitlab-ctl reconfigure
</code></pre>

<p>で反映させました。</p>

<p>後は certbot の timer で 60 日ごとに証明書が自動更新されるはずです。</p>

<h2>Web から設定</h2>

<p>以上で <code>/etc/gitlab/gitlab.rb</code> での設定や端末での作業は終わりなので、 Web から設定していきます。</p>

<h2>グループ作成</h2>

<p>Mattermost のチーム作成に必要だったので、 GitLab の Administrator (@root) ユーザーには Web UI からグループ作成権限をつけて、 Dashboard の Groups の方から New group で「Create a Mattermost team for this group」のチェックを入れてグループを作成しました。</p>

<p>チェックを入れて作成しても、特にリンクなどはつかないようなので、 Group の Description に <code>https://mattermost.example.jp/</code> の URL を書いておきました。</p>

<h2>GitLab からの通知用 Webhook 設定</h2>

<p>Mattermost のチャンネルのサイドバー3点マークから「統合機能」を選んで「内向きのウェブフック」を追加します。
事前に通知用にチャンネルを作成して、送信先を分離しておくと良いかもしれません。
追加したら URL を控えておきます。</p>

<p>GitLab の Admin area (上のレンチ) を開いて、右上の歯車から「Service Templates」を開きます。
「Mattermost notifications」を選んで「Active」にチェックを入れて、「Webhook」に先ほどの URL を貼り付けます。
できるだけ通知して欲しいので「Notify only broken pipelines」と「Notify only default branch」のチェックは外しました。
最後に「Save」で設定を保存するとプロジェクトを作成する時に自動で通知する設定が入るようになります。</p>

<h2>まとめ</h2>

<p>以上で GitLab の基本的な機能は使えるようになります。
後は GitLab CI (GitLab Runner) の設定と Dokku の設定とバックアップの設定になります。</p>

<p><a href="http://blog.n-z.jp/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hyper-V のゲスト環境で systemd timer がうまく動いていなかった]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-07-hyperv-systemd-timer.html"/>
    <updated>2017-07-07T00:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/hyperv-systemd-timer</id>
    <content type="html"><![CDATA[<p>Hyper-V のゲストとしてインストールした Linux 環境で systemd timer の <code>RandomizedDelaySec</code> がおかしくて timer が実行されないことがあったのですが、Hyper-V の時刻の同期との相性が悪いのが原因でした。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>ホスト: Windows Server 2012</li>
<li>ゲスト: Ubuntu 16.04.2 LTS (xenial) と Debian GNU/Linux 9.0 (stretch)</li>
</ul>


<h2>現象</h2>

<p>journalctl で過去のログを確認してみると</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 6月 28 12:07:56 hostname systemd[9928]: Time has been changed
</span><span class='line'> 6月 28 12:07:59 hostname systemd[9928]: Time has been changed
</span><span class='line'> 6月 28 12:08:04 hostname systemd[9928]: Time has been changed
</span><span class='line'> 6月 28 12:08:09 hostname systemd[9928]: Time has been changed
</span><span class='line'> 6月 28 12:08:14 hostname systemd[9928]: Time has been changed
</span><span class='line'> 6月 28 12:08:19 hostname systemd[9928]: Time has been changed</span></code></pre></td></tr></table></div></figure>


<p>のように Time has been changed が頻繁に記録されていました。</p>

<p>再起動した後からは RandomizedDelaySec が設定されている timer のランダムな時間挿入が Time has been changed の直後におきていました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 6月 28 15:07:51 hostname systemd[1]: Time has been changed
</span><span class='line'> 6月 28 15:07:51 hostname systemd[1]: apt-daily-upgrade.timer: Adding 46min 16.478521s random time.
</span><span class='line'> 6月 28 15:07:51 hostname systemd[1]: apt-daily.timer: Adding 3h 45min 54.621700s random time.
</span><span class='line'> 6月 28 15:07:56 hostname systemd[1]: Time has been changed
</span><span class='line'> 6月 28 15:07:56 hostname systemd[1]: apt-daily-upgrade.timer: Adding 25min 59.320458s random time.
</span><span class='line'> 6月 28 15:07:56 hostname systemd[1]: apt-daily.timer: Adding 11h 34min 9.012513s random time.
</span><span class='line'> 6月 28 15:08:01 hostname systemd[1]: Time has been changed
</span><span class='line'> 6月 28 15:08:01 hostname systemd[1]: apt-daily-upgrade.timer: Adding 42min 37.932995s random time.
</span><span class='line'> 6月 28 15:08:01 hostname systemd[1]: apt-daily.timer: Adding 4h 48min 31.255279s random time.
</span><span class='line'> 6月 28 15:08:06 hostname systemd[1]: Time has been changed
</span><span class='line'> 6月 28 15:08:06 hostname systemd[1]: apt-daily-upgrade.timer: Adding 13min 44.192537s random time.
</span><span class='line'> 6月 28 15:08:06 hostname systemd[1]: apt-daily.timer: Adding 38min 56.349412s random time.</span></code></pre></td></tr></table></div></figure>


<p>自作した timer が実行されなくて <code>journalctl -u local-backup.timer</code> のように調べた時に「Adding &hellip; random time.」のログで埋まっていて、他の動いている timer との違いも特になくて悩んでいましたが、ふと <code>journalctl</code> (引数なし) を実行してみたら「Time has been changed」とセットでおきていることに気づきました。</p>

<h2>解決策</h2>

<p>「Time has been changed」で検索して最初に出てきた <a href="https://askubuntu.com/questions/888493/var-log-syslog-systemd1-time-has-been-changed-message-every-5-seconds">16.04 - /var/log/syslog &lsquo;systemd[1]: Time has been changed&rsquo; message every 5 seconds - Ask Ubuntu</a> に</p>

<blockquote><p>I encountered this issue of &ldquo;systemd[&hellip;]Time has been changed&rdquo; messages logged every five seconds in /var/log/syslog on a 16.04 server running under Windows 8.1 Hyper-V. To fix it, I disabled time synchronization on the Hyper-V side. In Hyper-V Manager, I highlighted the VM, selected &ldquo;Settings&hellip;&rdquo;, then &ldquo;Integration Services&rdquo;, unchecked &ldquo;Time synchronization&rdquo;, and clicked Apply. The messages stopped instantly - no VM restart was required.</p></blockquote>

<p>と書いてあったので、「設定&hellip;」から「統合サービス」の「時刻の同期」のチェックを外して (再起動なしで) 解決しました。</p>

<h2>解決確認</h2>

<p>「Time has been changed」も出なくなって「Adding &hellip; random time.」も出なくなって、翌日まで待ってみるとちゃんと実行されていたので、解決したようです。</p>

<h2>まとめ</h2>

<p>ntp サーバー機能も必要で、 ntp パッケージを入れている環境で発生したので、時刻の同期の仕方によっては発生しないのかもしれませんが、「Time has been changed」で検索して出てきた他の方法はログを無視するだけとか、根本的な解決になっていないものが多そうだったので、Hyper-V との組み合わせなら systemd-timesyncd でも発生するのかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian/Ubuntuで暗号化 LVM を使いつつ自動起動する]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-01-cryptsetup.html"/>
    <updated>2017-07-01T14:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/cryptsetup</id>
    <content type="html"><![CDATA[<p>さくらの VPS 環境でも ssh などの秘密鍵を置くなら、ディスクの暗号化は使いたいので、リリースされたばかりの Debian 9 の ISO をアップロードしてインストールして、暗号化されていない <code>/boot</code> に鍵ファイルを置いて自動起動を設定しました。</p>

<p>自動起動を設定するということはセキュリティ的には弱くなりますが、そこはホストを信用するということにしています。</p>

<p>自動起動設定時に <code>/etc/crypttab</code> の設定ミスで起動しなくなるということがあったので、そういう時の直し方も含めてまとめてみました。</p>

<!--more-->


<h2>確認環境</h2>

<ul>
<li>Debian GNU/Linux 9.0 (stretch)</li>
</ul>


<p>Ubuntu でも debian-installer ベースのインストーラーを使った場合は同じだと思います。
(Live 環境が起動するデスクトップ版のインストーラーの場合は暗号化 LVM でのインストールができるかどうか確認していないのでわかりません。)</p>

<p>他のバージョンの Debian でも luks 対応の cryptsetup があれば同じだと思います。</p>

<h2>インストール</h2>

<p>普通に netinst の iso でインストールします。</p>

<p>ただし途中の「ディスクのパーティショニング」で「ガイド - ディスク全体を使い、暗号化 LVM をセットアップする」を選んだ場合が対象です。
パーティションは <code>/</code> (と <code>/boot</code>) だけを想定しています。
暗号化のパスフレーズは鍵ファイル設定前の起動時と、鍵ファイルの追加時などしか使わないので、長くて強いものにしておくと良いと思います。</p>

<p>VirtualBox などの仮想環境で試す時は、暗号化前のランダムなデータで上書きでデータ用のパーティション全体に書き込みが発生するので、可変サイズのディスクではなく固定サイズのディスクにしておくと良いかもしれません。</p>

<h2>鍵ファイル作成</h2>

<p>まず、鍵ファイルを作成します。
内容作成前に root しか読み書きできないようにするために、touch して chmod しておきます。
次に urandom から読んだランダムデータを鍵ファイルに書き込みます。
前回設定したときは count=1 で 1024 バイトにしていましたが、今回は 4096 バイトにしてみました。
最後に root はパーミッションだと書き込み禁止できないので、誤操作防止 (削除やヒストリーから dd を再実行してしまうなど) のために chattr で ext2 の immutable 属性をつけておきます。(確認は <code>sudo lsattr /boot/keyfile</code>)</p>

<pre><code>sudo touch /boot/keyfile
sudo chmod 400 /boot/keyfile
sudo dd if=/dev/urandom of=/boot/keyfile bs=1024 count=4
sudo chattr +i /boot/keyfile
</code></pre>

<h2>情報確認</h2>

<ul>
<li><code>/etc/fstab</code>: <code>/dev/mapper/HOSTNAME--vg-root</code> が <code>/</code> に、 <code>/dev/mapper/HOSTNAME--vg_swap_1</code> がスワップパーティションに設定されています (<code>HOSTNAME</code> はインストーラーで設定したホスト名)</li>
<li><code>/etc/crypttab</code>: <code>vda5_crypt UUID=... none luks</code> で UUID で指定された <code>/dev/vda5</code> の暗号化が解除された状態が <code>/dev/mapper/vda5_crypt</code> として見えるということがわかります</li>
<li><code>lsblk</code>: ツリー上にみえます (<code>lsblk -f</code> だと UUID も表示されました)</li>
<li><code>ls -l /dev/disk/by-uuid</code>: uuid とデバイスの対応を確認できます (これで確認できる vda1 のパスをあとで使います)</li>
<li><code>sudo cryptsetup luksDump /dev/vda5</code>: luks の情報が表示できます (最初は Key Slot 0 だけ ENABLED で 1 から 7 は DISABLED になっています)</li>
</ul>


<h2>鍵追加</h2>

<p><code>cryptsetup luksAddKey</code> で鍵を追加します。
ここで最初に設定したパスフレーズが必要です。
なぜか <code>Key slot 0 unlocked.</code> が2回でましたが、特に問題はなさそうです。</p>

<pre><code>$ sudo cryptsetup -v luksAddKey /dev/vda5 /boot/keyfile
Enter any passphrase:
Key slot 0 unlocked.
Key slot 0 unlocked.
Command successful.
</code></pre>

<h2>鍵削除</h2>

<p>違うファイルを登録してしまったり、同じ鍵を複数回追加してしまったりしたときには <code>cryptsetup luksRemoveKey</code> で削除できます。
この場合はその鍵自身で unlock されるようなので、パスフレーズは不要でした。</p>

<pre><code>$ sudo cryptsetup -v luksRemoveKey /dev/vda5 /boot/keyfile
Key slot 1 unlocked.
Key slot 1 selected for deletion.
Command successful.
</code></pre>

<p>特定の Key Slot を DISABLED に戻したいときは <code>cryptsetup luksKillSlot</code> が使えます。
この場合はパスフレーズが必要でした。</p>

<pre><code>$ sudo cryptsetup -v luksKillSlot /dev/vda5 2
Key slot 2 selected for deletion.
Enter any remaining passphrase:
Key slot 0 unlocked.
Command successful.
</code></pre>

<h2>自動起動設定</h2>

<p>この段階ではまだ暗号化解除に使える鍵が増えただけで、再起動してもパスフレーズを要求されるままです。</p>

<p><code>/etc/crypttab</code> を以下のように書き換えます。</p>

<pre><code>vda5_crypt UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx /dev/disk/by-uuid/yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy:/keyfile luks,keyscript=/lib/cryptsetup/scripts/passdev
</code></pre>

<p>xxx&hellip; の方の UUID は <code>/dev/vda5</code> の UUID なので、そのまま書き換えません。
第3項目の <code>none</code> を <code>/boot</code> パーティションのデバイスを UUID を使って指定したパス + <code>:</code> + <code>/boot</code> パーティション内での <code>keyfile</code> へのパスに書き換えます。
第4項目の <code>luks</code> は <code>luks,keyscript=/lib/cryptsetup/scripts/passdev</code> に書き換えます。
<code>passdev</code> は <code>cryptsetup</code> パッケージで用意されているファイルなので、そのまま書きます。</p>

<h2>initramfs 更新</h2>

<p>書き換えてもまだブートプロセスに反映されていないので、再起動してもパスフレーズを要求されるままなので、
最後に initramfs を更新します。</p>

<pre><code>sudo update-initramfs -u
</code></pre>

<p>これで再起動すると自動起動するようになります。</p>

<p>keyscript のパスが間違っていると以下のように WARNING が出るので、再起動する前に気づくことができますが、
keyfile の指定は間違っていても何も出ないので注意する必要があります。</p>

<pre><code>$ sudo update-initramfs -u
update-initramfs: Generating /boot/initrd.img-4.9.0-3-amd64
cryptsetup: WARNING: target vda5_crypt has an invalid keyscript, skipped
cryptsetup: WARNING: target vda5_crypt has an invalid keyscript, skipped
</code></pre>

<h2>起動失敗した場合</h2>

<p><code>/etc/crypttab</code> の設定をミスして起動しなくなった場合、 netinst の ISO からレスキューモードで起動すればパスフレーズでマウントできます。
そしてルートファイルシステムとして <code>/dev/HOSTNAME-vg/root</code> (<code>HOSTNAME</code> はインストーラーで設定したホスト名) を選び、 <code>/boot</code> パーティションもマウントしてシェルを起動します。</p>

<p>シェルは <code>/bin/sh -i</code> なので使いにくければ <code>bash</code> を起動して、<code>/etc/crypttab</code> を修正して <code>update-initramfs -u</code> で反映させます。
そして exit で抜けて再起動します。</p>

<p>レスキュー環境での修正が難しそうなら、 <code>none</code> と <code>luks</code> だけに戻して、パスフレーズを使う通常起動にしてから直すという方法もあります。</p>

<h2>最後に</h2>

<p>知らないところで暗号化が解除できてしまうのは、コンソール接続が毎回必要になることとのトレードオフですが、鍵ファイルでも解約時に <code>chattr -i /boot/keyfile; shred --remove /boot/keyfile</code> でディスク全体の削除に似た効果を期待できます。ただし <a href="https://linuxjm.osdn.jp/html/GNU_coreutils/man1/shred.1.html">Man page of SHRED</a>の警告に書いてあるように上書きを期待しているので、 ext2 になっている <code>/boot</code> はファイルシステム的には大丈夫だとしても、その下のブロックデバイスで上書きされていない可能性は残りそうです。</p>

<h2>まとめ</h2>

<p>暗号化 LVM を使うことで macOS の FileVault や Windows BitLocker のように簡単にディスクほぼ全体 (<code>/boot</code> を除く) を暗号化できました。
そして、再起動したい時に常にコンソールに接続できるとは限らない環境向けに鍵ファイルで自動起動の設定もできました。</p>

<p>トレードオフもちゃんと考えた上で設定すれば、安全な環境が簡単に作れると思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby と Perl 5.26 の &lt;&lt;~ の挙動の違い]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-25-indented-here-document.html"/>
    <updated>2017-06-25T22:22:22+09:00</updated>
    <id>http://blog.n-z.jp/blog/indented-here-document</id>
    <content type="html"><![CDATA[<p>Ruby には 2.3.0 から入っていた indented here document が<a href="https://mag.osdn.jp/17/06/02/161500">「Perl 5.26」リリース、「@INC」の仕様が変更される | OSDN Magazine</a> によると、Perl 5.26 にも入ったようなのですが、挙動が若干違うようなので、調べてみました。
(最初に調べたのは OSDN Magazine の記事をみた直後だったのですが、調べた結果を残し忘れていたので、今日調べなおしたものになります。)</p>

<!--more-->


<h2>動作確認環境</h2>

<p>Perl の最新を試すために archlinux を使ってみました。</p>

<ul>
<li>OS は vagrant で <a href="https://atlas.hashicorp.com/terrywang/boxes/archlinux">terrywang/archlinux</a> の box を使って <code>sudo pacman -Syu</code> した環境</li>
<li>ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux]</li>
<li>This is perl 5, version 26, subversion 0 (v5.26.0) built for x86_64-linux-thread-multi</li>
</ul>


<h2>Ruby での基本動作</h2>

<p>Ruby では基本的に indented here document の中で一番インデントが浅いところを基準に削られます。</p>

<p>Perl では <code>&lt;&lt;</code> の代わりに <code>&lt;&lt;~</code> を使っただけでは削られません。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@archlinux:~$ cat /tmp/a
</span><span class='line'>print &lt;&lt;~END;
</span><span class='line'>    4
</span><span class='line'> 1
</span><span class='line'>  2
</span><span class='line'>END
</span><span class='line'>vagrant@archlinux:~$ ruby /tmp/a
</span><span class='line'>   4
</span><span class='line'>1
</span><span class='line'> 2
</span><span class='line'>vagrant@archlinux:~$ perl /tmp/a
</span><span class='line'>    4
</span><span class='line'> 1
</span><span class='line'>  2</span></code></pre></td></tr></table></div></figure>


<h2>Perl での基本動作</h2>

<p>Ruby では <code>&lt;&lt;-</code> と同様に閉じる識別子のインデントは意味を持ちませんが、
Perl では閉じる識別子のインデント分が削られます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@archlinux:~$ cat /tmp/b
</span><span class='line'>print &lt;&lt;~END;
</span><span class='line'>   3
</span><span class='line'>    4
</span><span class='line'>  2
</span><span class='line'> END
</span><span class='line'>vagrant@archlinux:~$ ruby /tmp/b
</span><span class='line'> 3
</span><span class='line'>  4
</span><span class='line'>2
</span><span class='line'>vagrant@archlinux:~$ perl /tmp/b
</span><span class='line'>  3
</span><span class='line'>   4
</span><span class='line'> 2</span></code></pre></td></tr></table></div></figure>


<h2>Perl でのエラー例</h2>

<p>Perl では閉じる識別子のインデントより浅い部分があるとエラーになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@archlinux:~$ cat /tmp/c
</span><span class='line'>print &lt;&lt;~END;
</span><span class='line'> 1
</span><span class='line'>    4
</span><span class='line'>  2
</span><span class='line'>  END
</span><span class='line'>vagrant@archlinux:~$ ruby /tmp/c
</span><span class='line'>1
</span><span class='line'>   4
</span><span class='line'> 2
</span><span class='line'>vagrant@archlinux:~$ perl /tmp/c
</span><span class='line'>Indentation on line 1 of here-doc doesn't match delimiter at /tmp/c line 1.</span></code></pre></td></tr></table></div></figure>


<h2>Ruby で一番浅い行頭に空白を入れたい場合</h2>

<p>Ruby では一番浅い行頭に空白を入れたい場合はエスケープする必要があります。</p>

<p>Perl では最初の2例のように閉じる識別子のインデントの方を浅くするだけです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@archlinux:~$ cat /tmp/d
</span><span class='line'>print &lt;&lt;~END;
</span><span class='line'> \ x
</span><span class='line'>    4
</span><span class='line'>  2
</span><span class='line'> END
</span><span class='line'>vagrant@archlinux:~$ ruby /tmp/d
</span><span class='line'> x
</span><span class='line'>   4
</span><span class='line'> 2
</span><span class='line'>vagrant@archlinux:~$ perl /tmp/d
</span><span class='line'> x
</span><span class='line'>   4
</span><span class='line'> 2</span></code></pre></td></tr></table></div></figure>


<h2>感想</h2>

<ul>
<li>Ruby の仕様の方が内容を開始の行と終了の行よりインデントしたい時には都合が良さそうと感じました。</li>
<li>Perl の仕様の方がパーサーは単純になって速そうという印象を受けました。 (実際に速いかどうかは調べていません。)</li>
<li>Perl の仕様の方が行頭にある程度の空白を残したい場合は都合が良さそうと感じました。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shinosaka.rb #27 (GraphQL) に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-24-shinosaka-rb-graphql.html"/>
    <updated>2017-06-24T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/shinosaka-rb-graphql</id>
    <content type="html"><![CDATA[<p><a href="https://shinosakarb.doorkeeper.jp/events/61090">Shinosaka.rb #27</a> に参加しました。
Shinosaka.rb 自体は初参加でした。</p>

<p>今回は GraphQL の解説と node と rails でのハンズオンでした。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>メモ</h2>

<ul>
<li><a href="http://www.kokuchpro.com/event/tddbcosaka4/">TDDBC大阪4.0 2017年7月1日（大阪府） - こくちーずプロ（告知'sプロ）</a></li>
<li><a href="https://management30.doorkeeper.jp/events/61787">［認定証発行］アジャイル・リーダーシップとチェンジ・マネジメント・ワークショップ（Management 3.0） - Management 3.0（アジャイル・リーダーシップ、チェンジ･マネジメント、イノベーション・マネジメント） | Doorkeeper</a></li>
<li>自己紹介</li>
<li>QraphQL とは?</li>
<li>単一のエンドポイント</li>
<li>ライブラリーもいろんな言語や環境に対応している</li>
<li>REST API がツライから</li>
<li>GraphQL の微妙な点: pagination, 認証も考慮されていない</li>
<li>React との相性が良い: データ駆動</li>
<li>GitHub が GraphQL を採用: <a href="https://developer.github.com/v4/explorer/">https://developer.github.com/v4/explorer/</a></li>
<li><a href="http://graphql.org/">http://graphql.org/</a></li>
</ul>


<h2>動作確認環境</h2>

<ul>
<li>macOS Sierra 10.12.5</li>
<li>node v8.1.2</li>
<li>npm 5.0.3</li>
<li>graphql などのバージョン: <a href="https://github.com/znz/getting_started_graphql">https://github.com/znz/getting_started_graphql</a> を参照</li>
<li>ruby ruby 2.3.3p222 (2016-11-21 revision 56859) [x86_64-darwin15]</li>
<li>Bundler version 1.15.1</li>
<li>Rails 5.1.1</li>
<li>graphql 1.6.4, graphiql-rails 1.4.2</li>
<li>その他: <a href="https://github.com/znz/getting_started_graphql_ruby">https://github.com/znz/getting_started_graphql_ruby</a> を参照</li>
</ul>


<h2>ソースコード</h2>

<ul>
<li>node 版は <a href="https://github.com/znz/getting_started_graphql">https://github.com/znz/getting_started_graphql</a> を参照</li>
<li>Rails 版は <a href="https://github.com/znz/getting_started_graphql_ruby">https://github.com/znz/getting_started_graphql_ruby</a> を参照</li>
</ul>


<p>途中での graphiql での確認方法は下の作業メモの方に書いてあるので、あわせて参照してください。</p>

<h2>感想</h2>

<p>作業メモが長く続くので、先に感想を書いておきます。</p>

<p>node の方はエラーも json で帰ってきてブラウザーで見えて開発環境として使いやすそうな感じでしたが、
graphiql-rails の方はエラーの時に <code>SyntaxError: Unexpected token &lt; in JSON at position 0</code> とだけ出て、
詳細はサーバー側のログをみないといけないので、node に比べるとちょっと使いづらいかもしれない、と思いました。</p>

<p>GraphQL 自体は色々と利点も多そうだと思いましたが、サーバー側は結局 REST とは別に作り込まないといけなさそうで、
アクセス権限などを考えると、既存のアプリケーションで簡単に置き換えられるものでもなさそうかな、と思いました。</p>

<h2>実際に使ってみる</h2>

<ul>
<li><a href="http://graphql.org/code/">http://graphql.org/code/</a></li>
<li>npm init -y</li>
<li>npm install graphql</li>
</ul>


<h2>step 1</h2>

<p>index.js として以下の内容を作成:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict'
</span><span class='line'>
</span><span class='line'>const { graphql, buildSchema } = require('graphql')
</span><span class='line'>
</span><span class='line'>const schema = buildSchema(`
</span><span class='line'>type Query {
</span><span class='line'>  foo: String
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>type Schema {
</span><span class='line'>  query: Query
</span><span class='line'>}
</span><span class='line'>`)
</span><span class='line'>
</span><span class='line'>const resolvers = {
</span><span class='line'>  foo: () =&gt; 'bar',
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>const query = `
</span><span class='line'>query myQuery {
</span><span class='line'>  foo
</span><span class='line'>}
</span><span class='line'>`
</span><span class='line'>
</span><span class='line'>graphql(schema, query, resolvers)
</span><span class='line'>  .then(result =&gt; console.log(result))
</span><span class='line'>  .catch(err =&gt; console.log(err))</span></code></pre></td></tr></table></div></figure>


<p>実行結果:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% node.index.js
</span><span class='line'>{ data: { foo: 'bar' } }</span></code></pre></td></tr></table></div></figure>


<h2>step 2</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const schema = buildSchema(`
</span><span class='line'>type Query {
</span><span class='line'>  id: ID,
</span><span class='line'>  title: String,
</span><span class='line'>  watched: Boolean,
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>type Schema {
</span><span class='line'>  query: Query
</span><span class='line'>}
</span><span class='line'>`)</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const resolvers = {
</span><span class='line'>  id: () =&gt; 1,
</span><span class='line'>  title: () =&gt; 'bar',
</span><span class='line'>  watched: () =&gt; true,
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const query = `
</span><span class='line'>query myQuery {
</span><span class='line'>  id,
</span><span class='line'>  title,
</span><span class='line'>  watched,
</span><span class='line'>}
</span><span class='line'>`</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% node index.js
</span><span class='line'>{ data: { id: '1', title: 'bar', watched: true } }</span></code></pre></td></tr></table></div></figure>


<p>query から watched を削ると <code>{ data: { id: '1', title: 'bar' } }</code> になる。</p>

<h2>step 3</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const schema = buildSchema(`
</span><span class='line'>type Video {
</span><span class='line'>  id: ID,
</span><span class='line'>  title: String,
</span><span class='line'>  watched: Boolean,
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>type Query {
</span><span class='line'>  video: Video
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>type Schema {
</span><span class='line'>  query: Query
</span><span class='line'>}
</span><span class='line'>`)</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const resolvers = {
</span><span class='line'>  video: () =&gt;({
</span><span class='line'>    id: 1,
</span><span class='line'>    title: 'bar',
</span><span class='line'>    watched: true
</span><span class='line'>  }),
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const query = `
</span><span class='line'>query myQuery {
</span><span class='line'>  video {
</span><span class='line'>    id,
</span><span class='line'>    title,
</span><span class='line'>    watched,
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>`</span></code></pre></td></tr></table></div></figure>


<h2>step 4</h2>

<p>videos 対応</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const schema = buildSchema(`
</span><span class='line'>type Video {
</span><span class='line'>  id: ID,
</span><span class='line'>  title: String,
</span><span class='line'>  watched: Boolean,
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>type Query {
</span><span class='line'>  video: Video,
</span><span class='line'>  videos: [Video],
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>type Schema {
</span><span class='line'>  query: Query
</span><span class='line'>}
</span><span class='line'>`)</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const videoA = {
</span><span class='line'>  id: 1,
</span><span class='line'>  title: 'title1',
</span><span class='line'>  watched: true
</span><span class='line'>}
</span><span class='line'>const videoB = {
</span><span class='line'>  id: 2,
</span><span class='line'>  title: 'title2',
</span><span class='line'>  watched: false
</span><span class='line'>}
</span><span class='line'>const videos = [videoA, videoB]</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const resolvers = {
</span><span class='line'>  video: () =&gt; ({
</span><span class='line'>    id: 1,
</span><span class='line'>    title: 'bar',
</span><span class='line'>    watched: true,
</span><span class='line'>  }),
</span><span class='line'>  videos: () =&gt; videos,
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const query = `
</span><span class='line'>query myQuery {
</span><span class='line'>  videos {
</span><span class='line'>    id,
</span><span class='line'>    title,
</span><span class='line'>    watched,
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>`</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% node index.js
</span><span class='line'>{ data: { videos: [ [Object], [Object] ] } }</span></code></pre></td></tr></table></div></figure>


<h2>step 5</h2>

<p><code>yarn add express express-graphql</code> or <code>npm install express express-graphql</code></p>

<p><code>require('graphql')</code> の行の上に追加:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const express = require('express')
</span><span class='line'>const graphqlHTTP = require('express-graphql')</span></code></pre></td></tr></table></div></figure>


<p>追加:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const PORT = process.env.PORT || 3000
</span><span class='line'>const server = express()</span></code></pre></td></tr></table></div></figure>


<p>末尾の <code>graphql</code> の呼び出しを置き換え:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server.use('/graphql', graphqlHTTP({
</span><span class='line'>  schema,
</span><span class='line'>  graphiql: true,
</span><span class='line'>  rootValue: resolvers,
</span><span class='line'>}))
</span><span class='line'>
</span><span class='line'>server.listen(PORT, () =&gt; {
</span><span class='line'>  console.log(`Listening on http://localhost:${PORT}`)
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p><code>http://localhost:3000/graphql</code> を開いて</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  videos {
</span><span class='line'>    id,
</span><span class='line'>    title,
</span><span class='line'>    watched,
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>などを試す。</p>

<p>右上の Docs でスキーマも見える。</p>

<h2>step 6</h2>

<p>graphql の require のところを書き換え:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const {
</span><span class='line'>  GraphQLSchema,
</span><span class='line'>  GraphQLObjectType,
</span><span class='line'>  GraphQLID,
</span><span class='line'>  GraphQLString,
</span><span class='line'>  GraphQLBoolean,
</span><span class='line'>} = require('graphql')</span></code></pre></td></tr></table></div></figure>


<p>buildSchema を書き換え:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const videoType = new GraphQLObjectType({
</span><span class='line'>  name: 'Video',
</span><span class='line'>  description: 'video',
</span><span class='line'>  fields: {
</span><span class='line'>    id: {
</span><span class='line'>      type: GraphQLID,
</span><span class='line'>      description: 'id of video',
</span><span class='line'>    },
</span><span class='line'>    title: {
</span><span class='line'>      type: GraphQLString,
</span><span class='line'>      description: 'title of video'
</span><span class='line'>    },
</span><span class='line'>    watched: {
</span><span class='line'>      type: GraphQLBoolean,
</span><span class='line'>      description: 'has watched'
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const queryType = new GraphQLObjectType({
</span><span class='line'>  name: 'QueryType',
</span><span class='line'>  description: 'root query',
</span><span class='line'>  fields: {
</span><span class='line'>    video: {
</span><span class='line'>      type: videoType,
</span><span class='line'>      resolve: () =&gt; new Promise(resolve =&gt; {
</span><span class='line'>        resolve({
</span><span class='line'>          id: 1,
</span><span class='line'>          title: 'title1',
</span><span class='line'>          watched: true,
</span><span class='line'>        })
</span><span class='line'>      })
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const schema = new GraphQLSchema({
</span><span class='line'>  query: queryType,
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  video {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>    watched
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>などを試す。</p>

<h2>休憩</h2>

<h2>id: 1 だけ欲しいときなど</h2>

<p>videos を移動して data.js を作成:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict'
</span><span class='line'>
</span><span class='line'>const videoA = {
</span><span class='line'>  id: 1,
</span><span class='line'>  title: 'title1',
</span><span class='line'>  watched: true
</span><span class='line'>}
</span><span class='line'>const videoB = {
</span><span class='line'>  id: 2,
</span><span class='line'>  title: 'title2',
</span><span class='line'>  watched: false
</span><span class='line'>}
</span><span class='line'>const videos = [videoA, videoB]
</span><span class='line'>
</span><span class='line'>const getVideoById = (id) =&gt; new Promise(resolve =&gt; {
</span><span class='line'>  const [video] = videos.filter(v =&gt; (v.id + '') === id)
</span><span class='line'>  resolve(video)
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>exports.getVideoById = getVideoById</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const { getVideoById } = require('./data')</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const queryType = new GraphQLObjectType({
</span><span class='line'>  name: 'QueryType',
</span><span class='line'>  description: 'root query',
</span><span class='line'>  fields: {
</span><span class='line'>    video: {
</span><span class='line'>      type: videoType,
</span><span class='line'>      args: {
</span><span class='line'>        id: {
</span><span class='line'>          type: GraphQLID,
</span><span class='line'>          description: 'id of video',
</span><span class='line'>        },
</span><span class='line'>      },
</span><span class='line'>      resolve: (_, args) =&gt; getVideoById(args.id)
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  video(id: 2) {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>    watched
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>などを試す。</p>

<h2>id を必須にしたい</h2>

<p><code>require('graphql')</code> のところに <code>GraphQLNonNull,</code> を追加。</p>

<p><code>type: new GraphQLNonNull(GraphQLID),</code> にする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "errors": [
</span><span class='line'>    {
</span><span class='line'>      "message": "Unknown operation named \"null\"."
</span><span class='line'>    }
</span><span class='line'>  ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>になってしまったが、 getVideos の追加の後、もう一度試したら動いたので謎。
謎のエラーが発生した時は Prettify を押すとエラーが起きなくなるみたい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  video {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>    watched
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>などを試すと以下のように意図通りのエラーになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "errors": [
</span><span class='line'>    {
</span><span class='line'>      "message": "Field \"video\" argument \"id\" of type \"ID!\" is required but not provided.",
</span><span class='line'>      "locations": [
</span><span class='line'>        {
</span><span class='line'>          "line": 2,
</span><span class='line'>          "column": 3
</span><span class='line'>        }
</span><span class='line'>      ]
</span><span class='line'>    }
</span><span class='line'>  ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>配列</h2>

<p><code>GraphQLList</code> を追加</p>

<p>data.js に追加:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const getVideos = () =&gt; new Promise(resolve =&gt; resolve(videos))</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exports.getVideos = getVideos</span></code></pre></td></tr></table></div></figure>


<p>index.js:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const { getVideoById, getVideos } = require('./data')</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>videos: {
</span><span class='line'>  type: new GraphQLList(videoType),
</span><span class='line'>  resolve: getVideos,
</span><span class='line'>},</span></code></pre></td></tr></table></div></figure>


<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  videos {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>    watched
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>などを試す。</p>

<h2>mutation</h2>

<p>schema に mutation を追加:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const schema = new GraphQLSchema({
</span><span class='line'>  query: queryType,
</span><span class='line'>  mutation: mutationType,
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>schema の上に追加:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const mutationType = new GraphQLObjectType({
</span><span class='line'>  name: 'Mutation',
</span><span class='line'>  description: 'Mutation type',
</span><span class='line'>  fields: {
</span><span class='line'>    createVideo: {
</span><span class='line'>      type: videoType,
</span><span class='line'>      args: {
</span><span class='line'>        title: {
</span><span class='line'>          type: new GraphQLNonNull(GraphQLString),
</span><span class='line'>          description: 'title of video',
</span><span class='line'>        },
</span><span class='line'>      },
</span><span class='line'>      resolve: (_, args) =&gt; {
</span><span class='line'>        return createVideo(args)
</span><span class='line'>      }
</span><span class='line'>    },
</span><span class='line'>  },
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>data.js:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const createVideo = ({ title }) =&gt; {
</span><span class='line'>  const maxId = Math.max.apply(null, videos.map(v =&gt; v.id))
</span><span class='line'>  const watched = false
</span><span class='line'>  const video = {
</span><span class='line'>    id: maxId + 1,
</span><span class='line'>    title,
</span><span class='line'>    watched,
</span><span class='line'>  }
</span><span class='line'>  return video
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>(videos への push が抜けていた。)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exports.createVideo = createVideo</span></code></pre></td></tr></table></div></figure>


<p>index.js:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const { getVideoById, getVideos, createVideo } = require('./data')</span></code></pre></td></tr></table></div></figure>


<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mutation M {
</span><span class='line'>  createVideo(title: "hoge") {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>    watched
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>を試す。</p>

<p>この時点の index.js:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict'
</span><span class='line'>
</span><span class='line'>const express = require('express')
</span><span class='line'>const graphqlHTTP = require('express-graphql')
</span><span class='line'>const {
</span><span class='line'>  GraphQLSchema,
</span><span class='line'>  GraphQLObjectType,
</span><span class='line'>  GraphQLID,
</span><span class='line'>  GraphQLString,
</span><span class='line'>  GraphQLBoolean,
</span><span class='line'>  GraphQLNonNull,
</span><span class='line'>  GraphQLList,
</span><span class='line'>} = require('graphql')
</span><span class='line'>const { getVideoById, getVideos, createVideo } = require('./data')
</span><span class='line'>
</span><span class='line'>const PORT = process.env.PORT || 3000
</span><span class='line'>const server = express()
</span><span class='line'>
</span><span class='line'>/*
</span><span class='line'>video
</span><span class='line'>  id
</span><span class='line'>  title
</span><span class='line'>  watched
</span><span class='line'>*/
</span><span class='line'>
</span><span class='line'>const videoType = new GraphQLObjectType({
</span><span class='line'>  name: 'Video',
</span><span class='line'>  description: 'video',
</span><span class='line'>  fields: {
</span><span class='line'>    id: {
</span><span class='line'>      type: GraphQLID,
</span><span class='line'>      description: 'id of video',
</span><span class='line'>    },
</span><span class='line'>    title: {
</span><span class='line'>      type: GraphQLString,
</span><span class='line'>      description: 'title of video'
</span><span class='line'>    },
</span><span class='line'>    watched: {
</span><span class='line'>      type: GraphQLBoolean,
</span><span class='line'>      description: 'has watched'
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>const queryType = new GraphQLObjectType({
</span><span class='line'>  name: 'QueryType',
</span><span class='line'>  description: 'root query',
</span><span class='line'>  fields: {
</span><span class='line'>    videos: {
</span><span class='line'>      type: new GraphQLList(videoType),
</span><span class='line'>      resolve: getVideos,
</span><span class='line'>    },
</span><span class='line'>    video: {
</span><span class='line'>      type: videoType,
</span><span class='line'>      args: {
</span><span class='line'>        id: {
</span><span class='line'>          type: new GraphQLNonNull(GraphQLID),
</span><span class='line'>          description: 'id of video',
</span><span class='line'>        }
</span><span class='line'>      },
</span><span class='line'>      resolve: (_, args) =&gt; getVideoById(args.id)
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>const mutationType = new GraphQLObjectType({
</span><span class='line'>  name: 'Mutation',
</span><span class='line'>  description: 'Mutation type',
</span><span class='line'>  fields: {
</span><span class='line'>    createVideo: {
</span><span class='line'>      type: videoType,
</span><span class='line'>      args: {
</span><span class='line'>        title: {
</span><span class='line'>          type: new GraphQLNonNull(GraphQLString),
</span><span class='line'>          description: 'title of video',
</span><span class='line'>        },
</span><span class='line'>      },
</span><span class='line'>      resolve: (_, args) =&gt; {
</span><span class='line'>        return createVideo(args)
</span><span class='line'>      }
</span><span class='line'>    },
</span><span class='line'>  },
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>const schema = new GraphQLSchema({
</span><span class='line'>  query: queryType,
</span><span class='line'>  mutation: mutationType,
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>server.use('/graphql', graphqlHTTP({
</span><span class='line'>  schema,
</span><span class='line'>  graphiql: true,
</span><span class='line'>}))
</span><span class='line'>
</span><span class='line'>server.listen(PORT, () =&gt; {
</span><span class='line'>  console.log(`Listening on http://localhost:${PORT}`)
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>data.js:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict'
</span><span class='line'>
</span><span class='line'>const videoA = {
</span><span class='line'>  id: 1,
</span><span class='line'>  title: 'title1',
</span><span class='line'>  watched: true
</span><span class='line'>}
</span><span class='line'>const videoB = {
</span><span class='line'>  id: 2,
</span><span class='line'>  title: 'title2',
</span><span class='line'>  watched: false
</span><span class='line'>}
</span><span class='line'>const videos = [videoA, videoB]
</span><span class='line'>
</span><span class='line'>const getVideos = () =&gt; new Promise(resolve =&gt; resolve(videos))
</span><span class='line'>
</span><span class='line'>const createVideo = ({ title }) =&gt; {
</span><span class='line'>  const maxId = Math.max.apply(null, videos.map(v =&gt; v.id))
</span><span class='line'>  const watched = false
</span><span class='line'>  const video = {
</span><span class='line'>    id: maxId + 1,
</span><span class='line'>    title,
</span><span class='line'>    watched,
</span><span class='line'>  }
</span><span class='line'>  videos.push(video)
</span><span class='line'>  return video
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>const getVideoById = (id) =&gt; new Promise(resolve =&gt; {
</span><span class='line'>  const [video] = videos.filter(v =&gt; (v.id + '') === id)
</span><span class='line'>  resolve(video)
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>exports.getVideoById = getVideoById
</span><span class='line'>exports.getVideos = getVideos
</span><span class='line'>exports.createVideo = createVideo</span></code></pre></td></tr></table></div></figure>


<h2>createVideo の args を分離したい</h2>

<p>require のところに <code>GraphQLInputObjectType,</code> を追加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const videoInputType = new GraphQLInputObjectType({
</span><span class='line'>  name: 'VideoInputType',
</span><span class='line'>  description: 'video input type',
</span><span class='line'>  fields: {
</span><span class='line'>    title: {
</span><span class='line'>      type: new GraphQLNonNull(GraphQLString),
</span><span class='line'>      description: 'title of video',
</span><span class='line'>    },
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>const mutationType = new GraphQLObjectType({
</span><span class='line'>  name: 'Mutation',
</span><span class='line'>  description: 'Mutation type',
</span><span class='line'>  fields: {
</span><span class='line'>    createVideo: {
</span><span class='line'>      type: videoType,
</span><span class='line'>      args: {
</span><span class='line'>        video: {
</span><span class='line'>          type: new GraphQLNonNull(videoInputType)
</span><span class='line'>        },
</span><span class='line'>      },
</span><span class='line'>      resolve: (_, args) =&gt; {
</span><span class='line'>        return createVideo(args.video)
</span><span class='line'>      }
</span><span class='line'>    },
</span><span class='line'>  },
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mutation M {
</span><span class='line'>  createVideo(video: {title: "hoge"}) {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>    watched
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>を試す (<code>video:</code> で一段増えているので注意)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  videos {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>などを試す。</p>

<h2>休憩</h2>

<h3>createVideo も Promise にするとどうか</h3>

<p>createVideo の末尾を <code>return Promise.resolve(video)</code> にしても問題なく動いた。</p>

<h2>ruby でどうか</h2>

<ul>
<li><code>rails new getting_started_graphql_ruby</code></li>
<li><a href="http://graphql-ruby.org/getting_started">http://graphql-ruby.org/getting_started</a></li>
<li>Gemfile に <code>gem 'graphql'</code> を追加</li>
<li><code>bundle install</code></li>
<li><code>rails g graphql:install</code></li>
<li>Gemfile に <code>graphiql-rails</code> が追加されているので <code>bundle install</code></li>
</ul>


<h2>video 追加</h2>

<ul>
<li><code>rails g graphql:object Video id:Int title:String watched:Boolean</code></li>
<li>id は Int ではなく ID が正しいので <code>rails d graphql:object Video id:Int title:String watched:Boolean</code> で消してやり直し</li>
<li><code>rails g graphql:object Video id:ID title:String watched:Boolean</code></li>
<li><code>app/graphql/types/query_type.rb</code> を変更</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  field :video do
</span><span class='line'>    type Types::VideoType
</span><span class='line'>    argument :id, !types.ID
</span><span class='line'>    description 'Find video by ID'
</span><span class='line'>    resolve -&gt;(obj, args, ctx) { Video.find(args["id"]) }
</span><span class='line'>  end</span></code></pre></td></tr></table></div></figure>


<p><code>rails s</code> を起動して <code>http://localhost:3000/graphiql</code> (express-graphql での例と違って <code>/graphql</code> ではなく <code>i</code> が入る) で</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  video(id: 1) {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>を試すと server 側で <code>NameError (uninitialized constant Video):</code> になるのを確認。</p>

<ul>
<li><code>rails g model video title watched:boolean</code></li>
<li><code>rake db:migrate</code></li>
<li><code>rails c</code> で <code>Video.create(title: "Hoge", watched: false)</code> などでレコードを作成しておく</li>
<li>graphiql で試す</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  video(id: 1) {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>    watched
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>mutation</h2>

<ul>
<li><code>app/graphql/mutations/create_video.rb</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 動かない
</span><span class='line'>Mutations::CreateVideo = GraphQL::Relay::Mutation.define do
</span><span class='line'>  name "CreateVideo"
</span><span class='line'>
</span><span class='line'>  return_field :video, Types::VideoType
</span><span class='line'>
</span><span class='line'>  input_field :title, !types.String
</span><span class='line'>
</span><span class='line'>  resolve -&gt;(obj, args, ctx) {
</span><span class='line'>    return Video.create(title: args["title"])
</span><span class='line'>  }
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>app/graphql/getting_started_graphql_ruby_schema.rb</code> に <code>mutation(Mutations::CreateVideo)</code> を追加</li>
<li><code>GraphQL::Schema::InvalidTypeError (CreateVideo has an invalid type: must be an instance of GraphQL::BaseType, not GraphQL::Relay::Mutation</code> になってうまくいかない</li>
<li><code>rails g graphql:mutation</code> は relay mutation 用で違うらしい</li>
</ul>


<h2>クライアント</h2>

<ul>
<li><a href="http://dev.apollodata.com/react/">http://dev.apollodata.com/react/</a> が redux っぽくてしっくりきたらしい。</li>
<li>rack-cors の設定が必要?</li>
<li><a href="https://github.com/facebook/relay">https://github.com/facebook/relay</a></li>
</ul>


<h2>mutation の動くコード例</h2>

<p>rito さんに動く例をみせてもらって修正。</p>

<p><code>app/graphql/mutations/video.rb</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Mutations::Video = GraphQL::ObjectType.define do
</span><span class='line'>  name "mutation"
</span><span class='line'>
</span><span class='line'>  field :video, Types::VideoType do
</span><span class='line'>    description "Create a video"
</span><span class='line'>    argument :title, !types.String
</span><span class='line'>
</span><span class='line'>    resolve -&gt;(obj, args, ctx) {
</span><span class='line'>      Video.create(title: args["title"], watched: false)
</span><span class='line'>    }
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>(<code>name "Video"</code> にすると <code>Duplicate type definition found for name 'Video'</code> で動かなかった。)</p>

<p><code>app/graphql/getting_started_graphql_ruby_schema.rb</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GettingStartedGraphqlRubySchema = GraphQL::Schema.define do
</span><span class='line'>  query(Types::QueryType)
</span><span class='line'>  mutation(Mutations::Video)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><code>http://localhost:3000/graphiql</code> で以下を試す。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mutation M {
</span><span class='line'>  video(title: "foo") {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>    watched
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  video(id: 2) {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>    watched
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>追加されたのがみえたら OK</p>

<p>時間切れで試せなかったけど、 mutation を複数追加する場合はどうなるのかがわからなかった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian 9 "Stretch" リリースパーティ in 関西に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-18-kansai-debian-meeting.html"/>
    <updated>2017-06-18T13:24:10+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://debianjp.connpass.com/event/59443/">Debian 9 &ldquo;Stretch&rdquo; リリースパーティ in 関西</a>に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<h2>オープニング</h2>

<ul>
<li>リリースされたらしい。</li>
<li>リリースノートからのパッケージのバージョンいろいろ</li>
<li>変更点いろいろ</li>
<li>MariaDB → MySQL</li>
<li>GnuPG</li>
<li>デバッグシンボル向けの新しいアーカイブ: stretch-debug</li>
<li>Xorg サーバーは root 権限が不要になった</li>
<li>sysvinit だと X で問題がおきるらしい?</li>
<li>upstart はなくなったらしい</li>
<li>Perl 関連で問題が起きる可能性がある?</li>
</ul>


<h2>さくらインターネット様からお知らせ</h2>

<p>さくらの VPS やさくらのクラウドでは ISO イメージアップロードで使えますという話</p>

<h2>オープニング続き</h2>

<ul>
<li><a href="https://www.debian.org/News/2017/20170617">https://www.debian.org/News/2017/20170617</a></li>
<li>リリースが確認できたので乾杯に移行</li>
</ul>


<h2>デスクトップ環境の話</h2>

<ul>
<li>インストーラーの途中でデスクトップ環境が選べるようになった</li>
<li>リリースノートとインストールガイドは流し読みで良いのでみておくと良い</li>
<li>UEFI は対応しているが、セキュアブート対応は見送られた</li>
<li>プロプライエタリなファームウェアが必要なハードウェアの場合はフェームウェア入り非公式イメージを使うのが楽</li>
<li>カーネルにおけるフリーと Debian のフリーが違うので、そういうもの (非公式イメージ) が存在する</li>
<li>non-free が Debian 公式ではないのと同様の意味で非公式</li>
<li>root パスワードを設定しなければ root を無効にして sudo を使うようにできる (以前からそうだった)</li>
<li>netinst の iso でデスクトップ環境のみチェックして個別のデスクトップ環境を選ばなかった場合は GNOME になる</li>
<li>複数入れた場合にどうなるのかは未調査</li>
<li>というわけで GNOME デスクトップの話</li>
<li>GNOME 3 は初見だと使い方がわからない</li>
<li>今回は gnome-initial-setup パッケージが追加されたので案内が出るかと思ったら出ない?</li>
<li>gnome-initial-setup パッケージを手動で入れてログアウトしてログインし直すと出る</li>
<li>初期設定の後、ヘルプが開く</li>
<li>gnome-initial-setup で設定されていないと、キーボード設定が英語キーボードになっている</li>
<li>フォントを入れる</li>
<li>フォントを削除する</li>
<li>fonts-droid-fallback が Android でのいわゆる中華フォントなので、完全削除すると良い</li>
<li>Noto Serif CJK は backports に入るらしい</li>
<li>ターミナルとか向けには migmix とか ricty とか</li>
<li>丸いフォントが好みでない人は fonts-vlgothic を消して IPA フォントを使うと良い</li>
<li>ツッコミで fontconfig が難しい話</li>
<li>右上から開ける設定の他に Tweak Tool</li>
<li>GNOME 拡張機能は JavaScript と CSS でできている</li>
<li>主要なものはパッケージで入れるのが良いのでは</li>
<li>オススメ: gnome-shell-extension-dashtodock, gnome-shell-extension-top-icons-plus</li>
<li>会場から: Alt+F2 r Enter で gnome-shell が再起動する</li>
<li>uim-toolbar-gtk3-systray が出てこない?</li>
<li>起動順序の問題で uim-toolbar-gtk3-systray の後に gnome-shell が起動するので認識されていない</li>
<li>回避策1: gnome-shell を再起動</li>
<li>回避策2: alternative で /bin/true にしておいて uim-toolbar-gtk3-systray は autostart でユーザーが起動する</li>
<li>回避策3: uim を諦める</li>
<li>お好みで: gnome-shell-extension-move-dock, gnome-shell-extension-remove-dropdown-arrows, gnome-shell-extension-impatience, gnome-shell-extension-suspend-button</li>
<li>パッケージ以外の拡張機能は GNOME Shell Extensions というサイトから</li>
<li>ブラウザー拡張の chrome-gnome-shell でアップデートがブラウザー経由でできる</li>
<li>Dash to Panel と Arc Menu で Windows 風にできる</li>
<li>デスクトップにアイコンを表示して Nautilus のアイコンサイズを変更するとデスクトップのも一緒に変わる</li>
<li>隠し設定で切り離すこともできるらしい</li>
<li>プロプライエタリなビデオドライバを使うなら contrib と non-free は必須</li>
<li>backports の話</li>
<li>software-properties-gtk で (synaptic から) 追加すると /etc/apt/trusted.gpg が壊れるのに昨日気づいた</li>
<li>Firefox ESR の Accept-Language が en のまま</li>
<li>削除して登録し直すとなおる</li>
</ul>


<p>追加で Debian T シャツの話</p>

<h2>Ryzen の話</h2>

<ul>
<li>lurdan さん</li>
<li>Ryzen の話</li>
<li><a href="https://www.sakura.ad.jp/koukaryoku/">機械学習、データ解析なら 高火力コンピューティング | さくらインターネット</a></li>
<li><a href="http://itpro.nikkeibp.co.jp/atcl/column/14/346926/022700857/">ニュース解説 - グーグルもGPUクラウドに参入、4社のコスパ比較：ITpro</a></li>
<li>テラフロップスあたりの月額料金が安い</li>
<li>時間貸しなどの時は初期費用はいらないらしい</li>
<li>Ubuntu インストールしたての状態なので、使うパッケージなどのインストール作業が必要</li>
<li><a href="https://www.sakura.ad.jp/education/">さくらの文教向けソリューション｜さくらインターネット</a></li>
<li>Ryzen の話に戻り</li>
<li>linux kernel 4.10 から対応コードが入っている</li>
<li>その他の対応も考えると 4.11 以降が望ましい</li>
<li>Proxmox は Debian のユーザーランドに Ubuntu zesty のカーネルなので、こういう用途の自宅サーバーには Proxmox VE が良いのではないか</li>
<li><a href="https://twitter.com/search?q=%23Ryzen_SEGV_Battle">#Ryzen_SEGV_Battle - Twitter検索</a></li>
</ul>


<h2>Stretch リリース</h2>

<ul>
<li>uwabami さん</li>
<li>アップグレードの人柱の話</li>
<li>何台もあげたが特にはまらなかった</li>
<li>リリースノート読み</li>
<li><a href="https://www.debian.org/releases/stretch/amd64/release-notes/ch-whats-new.ja.html">第2章 Debian 9 の最新情報</a></li>
<li><a href="https://www.debian.org/releases/stretch/amd64/release-notes/ch-information.ja.html">第5章 stretch で注意すべき点</a></li>
<li>pass がおすすめ</li>
<li>net-tools パッケージ (ifconfig など) が非推奨</li>
<li>sl 的なものを設定するのが良いかも</li>
<li>PIE: カーネルを更新しておかないとセグメンテーションフォルトになる可能性があるので jessie でもちゃんと 8.8 (以降) に更新してから stretch にあげ始める必要がある</li>
<li>一番のハマりどころになりそう</li>
<li>セキュリティサポートの制限</li>
<li>midori, konqueror などは完全なセキュリティサポートがないので Firefox や Chromium を使いましょう</li>
<li>node.js はリソース不足で一切対応されない</li>
<li>php とかコンパイラー対応がなくなった Chromium とか WordPress とか、セキュリティサポートがなくなった例は過去にもある</li>
<li><a href="https://security-tracker.debian.org/tracker/">Security Bug Tracker</a></li>
<li>「旧式の暗号と SSH1 プロトコルは OpenSSH では標準で無効にされています」</li>
<li>evdev から libinput</li>
<li>「Perl での変更がサードパーティ製ソフトウェアを壊す可能性があります」</li>
<li>カレントディレクトリが <code>@INC</code> からなくなる話</li>
<li>ライブアップグレード</li>
<li>jessie のまま最新に更新を確認</li>
<li>apt line 書き換え</li>
<li>apt-get update</li>
<li>apt-get upgrade</li>
<li>apt-get dist-upgrade</li>
<li><a href="https://wiki.debian.org/UnattendedUpgrades">UnattendedUpgrades - Debian Wiki</a></li>
<li>設定ファイルは選択に応じて <code>*.dpkg-old</code> とか <code>*.dpkg-dist</code> ができる</li>
<li>apt autoremove</li>
<li>reboot</li>
<li>sysvinit にしていたので systemd に移行</li>
<li>sysvinit がなくなったので sudo reboot は進むがコンソールに帰ってこなくなるので、処理が進んだ段階でブチっと切れて進む</li>
<li>atig は bundle し直しで動いた</li>
<li>znc も何か直したら動いた</li>
<li>bitlbee は動いていなかった</li>
<li>さくらインターネットさんで借りている VPS の stretch への upgrade の Live 実演終了</li>
</ul>


<h2>LT</h2>

<p>ここから LT タイム。</p>

<h2>最新ハードウェアへのインストール</h2>

<ul>
<li>初めて Jessie をインストールしたときに起きたエラーについて</li>
<li>「ブートローダーのインストールに失敗しました。」</li>
<li>原因: GRUB が NVMe に対応していない</li>
<li>解決策1: NVMe 規格の SSD を買わない (おすすめは SATA)</li>
<li>解決策2: NVMe に対応しているブートローダーを使う</li>
<li>NVMe に対応しているブートローダー: rEFInd</li>
</ul>


<p>「ブートローダーのインストールに失敗しました。」というメッセージは見覚えがあったので、インストーラーで出たメッセージだとすぐにわかったけど、わからなかった人もいたようで、どんな状況で見たのか思い出そうとしたけど、思い出せなかったので、仮想環境か何かで特殊なことをしていて出ただけで困らなかったのかもしれない、と思った。</p>

<h2>yabuki さんの話</h2>

<p>自分の準備中で聞けず。</p>

<h2>Debian での OpenSSH の TCP wrappers サポート</h2>

<p>なぜか HDMI を接続しても反応しなかったので、PDF にして、さとうさんの PC を借りて発表しました。</p>

<p>発表資料はいつも通り<a href="https://github.com/znz/openssh-on-debian9">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/openssh-on-debian9/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/stretchopensshtcp-wrappers">slideshare</a>, <a href="https://speakerdeck.com/znz/stretchdefalseopensshfalsetcp-wrapperssapoto">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-openssh-on-debian9">RubyGems</a> にあげています。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/openssh-on-debian9/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/openssh-on-debian9/" title="stretchでのOpenSSHのTCP wrappersサポート">stretchでのOpenSSHのTCP wrappersサポート</a>
</div>


<h2>T シャツの話</h2>

<p>欲しい人は OSC 京都や勉強会で、または @nogajun さんに直接連絡</p>

<h2>告知</h2>

<ul>
<li>次回は 7月はなしで、代わりに<a href="https://www.ospn.jp/osc2017-kyoto/">オープンソースカンファレンス2017 Kyoto</a>の8月5日で。</li>
<li><a href="https://k-of.jp/">KOF</a> (今年のサイトはまだない)</li>
<li><a href="https://histudy.connpass.com/">姫路IT系勉強会</a>の8月が今回と同じさくらインターネットさんが会場</li>
</ul>


<h2>感想</h2>

<p>リリースは twitter などではリリースされたっぽい感じでしたが、たぶん最後のアナウンスっぽい<a href="https://lists.debian.org/debian-announce/2017/msg00003.html">リリースアナウンスのメール</a>が「Sat, 17 Jun 2017 20:22:36 -1000」つまり日本時間だと「2017-06-18 15:22:36 +0900」で、少なくともリリースパーティー中にはリリースされていたようです。</p>

<p>すでにあげた人の話では、特に大きなトラブルもなさそうなので、安心してあげられそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第11回 コンテナ型仮想化の情報交換会＠大阪に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-17-lxcjp.html"/>
    <updated>2017-06-17T13:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lxcjp</id>
    <content type="html"><![CDATA[<p><a href="https://ct-study.connpass.com/event/55305/">第11回 コンテナ型仮想化の情報交換会＠大阪</a>に参加してきました。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>案内など</h2>

<ul>
<li>Wi-Fi はないはずだったが、提供できた</li>
<li>ハッシュタグは <a href="https://twitter.com/search?q=%23lxcjp">#lxcjp</a></li>
<li>(<a href="https://togetter.com/li/1121078">第11回 コンテナ型仮想化の情報交換会＠大阪 #lxcjp - Togetterまとめ</a>にまとめられています。質疑応答はメモ間違いもありそうなので、Togetter の方が正確そうです。)</li>
</ul>


<h2>Linuxコンテナ基礎(仮)</h2>

<ul>
<li>自己紹介</li>
<li><a href="http://gihyo.jp/admin/serial/01/linux_containers">LXCで学ぶコンテナ入門 －軽量仮想化環境を実現する技術</a></li>
<li>基礎知識</li>
<li>単独の機能があるわけではなく、 namespace とか cgroup とかを組みわせて実現されている</li>
<li>chroot とか pivot_root とか</li>
<li>speakerdeck で資料は公開予定</li>
<li>speakerdeck に元になった情報の多い資料も公開されている</li>
<li><a href="https://speakerdeck.com/tenforward/11th-ctstudy">Linux コンテナの基礎 / 11th CTStudy by tenforward</a></li>
</ul>


<h2>Haconiwa</h2>

<ul>
<li>イベントページでは「変拍子パワーポップ系コンテナランタイムHaconiwa - 夏を古くするな！」というタイトルになっていましたが、実際のタイトルは変わっていました。</li>
<li>自己紹介</li>
<li>Haconiwa とは?</li>
<li>mruby</li>
<li>ビュッフェ型コンテナランタイム</li>
<li>ビュッフェ型とは Web フレームワークでいうと Padrino</li>
<li>ruby で色々かける</li>
<li>コンテナの初期化処理とか</li>
<li>シグナルハンドラで CPU 割り当てを増減したりとか</li>
<li>Sqale という PaaS の運用のお手伝いの話</li>
<li>やりたいことが lxc などが古くて実現が難しかった</li>
<li>もしイチからやるなら?</li>
<li>コンテナ勉強会との出会い</li>
<li>RubyKaigi 2016 に応募して選考に通る前に完成</li>
<li>Haconiwa の実装方針</li>
<li>コア部分は Pure Ruby</li>
<li>システムコールは mruby gem でラップ</li>
<li>全てはプロセス</li>
<li>sample/process.rb を改変したものでデモ</li>
<li>関連技術</li>
<li>FastContainer</li>
<li><a href="http://hb.matsumoto-r.jp/entry/2016/11/11/234915">FastContainerアーキテクチャ構想</a></li>
<li>プロセスの3分類: immortal (いわゆるデーモン), short-lived (バッチとか ls とかの単独のコマンド), mortal</li>
<li>2つの中間的なものを定義する</li>
<li>mortal な存在としての FastCGI</li>
<li>inetd, xinetd</li>
<li>immortal なコンテナ: システムコンテナ, アプリケーションコンテナ, VPS として使う場合, Dokku</li>
<li>short-lived なコンテナ: アプリケーションコンテナで単一のジョブ: systemd-nspawn, FaaS</li>
<li>なぜ FastContainer か</li>
<li>負荷が上がった時: スケールアップ, スケールアウト</li>
<li>従来の VM では高速なスケールアップは非常に困難</li>
<li>コンテナでも煩雑さは残る</li>
<li>Haconiwa がスケールアップについての問題を解決</li>
<li>スケールアウトも従来の VM ではインスタンスの複製が難しいなど</li>
<li>コンテナもコストは下がるが自動化には課題がある</li>
<li><a href="http://mikeda.hatenablog.com/entry/2015/02/01/195102">負荷低すぎはもはや障害じゃないのか</a></li>
<li>FastContainer が解決するもの: スケールアウトについて インスタンスの入れ替え、増減が容易になる</li>
<li>+Haconiwa が解決するもの: 起動するコンテナ数をコンテナ自身で動的に操作させることが可能</li>
<li>Container as Code</li>
<li>その他のメリット</li>
<li>セキュリティ的観点: コンテナは、常に入れ替わるので、パッケージのアップグレードや、ミドルウェアの更新が非常になめらかに行える</li>
<li>運用的観点: どのホストであっても同じように動く。ホストをリソースプールとみなして透過的に扱える</li>
<li>FastContainer は実現できるか?</li>
<li>Scheduler: nomad</li>
<li>CoreAPI+CMDB</li>
<li>Web Proxy / Dispatcher : 起動のきっかけにもなるので Dispatcher</li>
<li>どうして Haconiwa を作ったのですか?</li>
<li>alternative rock</li>
<li>Docker はすごいが、それだけでいいのか</li>
<li>オルタナティブな存在が新しい価値観を届けるかもしれないのだ。</li>
<li>質疑応答</li>
<li>Q: どこで負荷を判別するか</li>
<li>A: cgroup の stat をベースに, veth (?) とかの負荷をみて</li>
<li>udzura cgroup で検索</li>
<li><a href="http://udzura.hatenablog.jp/entry/2017/05/02/175445">cgroup経由でシステムの利用状況を知る - CPU編</a> あたりが関連?</li>
<li>Q: mruby?</li>
<li>A: mruby の説明など</li>
<li>システムコール部分も Ruby っぽくやるために mruby という感じ?</li>
<li>Q: Web 以外の技術で FastCGI のような技術を応用することを考えているか?</li>
<li>A: nginx は tcp proxy 機能もあるので sshd とかも試している</li>
<li>Q: 具体的な利用予定は?</li>
<li>A: ロリポップ的に使えてオートスケールできるものができると良いかも?</li>
<li><a href="https://speakerdeck.com/udzura/the-alternative-container">変拍子パワーポップ系コンテナ、Haconiwa /the-alternative-container</a></li>
</ul>


<h2>休憩</h2>

<p>懇親会の追加申し込み受付案内</p>

<h2>chrootとnetwork namespaceでつくる簡易コンテナ</h2>

<ul>
<li>自己紹介</li>
<li>自作コンテナのモチベーション</li>
<li>Linux コンテナの勉強、既存コンテナ技術の再確認、手元でのネットワークテスト環境</li>
<li>chroot × network namespace × UTS namespace</li>
<li>UTS namespace は管理しやすいから</li>
<li>nginx + mackerel-agent + sshd</li>
<li>コマンドで作成</li>
<li>デモ</li>
<li>イメージ作成は docker export とか debootstrap とかが使える</li>
<li>namespace の永続化</li>
<li>/proc/[PID]/ns 配下にある特殊ファイル</li>
<li>bind マウントを使って永続化する</li>
<li>mount &ndash;bind /run/utsns /run/utsns</li>
<li>mount &ndash;make-shared /run/utsns</li>
<li>unshare -u mount &ndash;bind /proc/self/ns/uts /run/utsns/test01</li>
<li>最近の unshare コマンドなら unshare &ndash;uts=/run/utsns/test01</li>
<li>UTS namespace: 主に管理のため</li>
<li>Network の作成</li>
<li>veth 作って bridge に接続</li>
<li>Netowrk はポータビリティに影響が出やすい</li>
<li>一時期 docker が頑張ってた: VXLAN による overlay Network など</li>
<li>改善すべき箇所がたくさんある面白い分野</li>
<li>chroot 環境の作成</li>
<li>コンテナの中でも systemd を動かすと shared マウントだとコンテナの片付けの時に親の方まで一緒にアンマウントされてしまってはまるので、 rslave が必要</li>
<li>コンテナ内でのプロセスの実行: nsenter した上で chroot する</li>
<li>chroot 配下では systemd は動作しないので注意が必要</li>
<li>chroot の代わりに systemd-nspawn を使う</li>
<li>PID namespace</li>
<li>docker 1.13 で run に init オプションがついた</li>
<li>ss はネームスペースを指定できる</li>
<li>いけてない箇所</li>
<li>質疑応答</li>
<li>Q: udzuraさん: VXLAN を検証している?</li>
<li>A: 業務では使っていなくて趣味でやっている。 Open vSwitch で軽く試したことはある。</li>
</ul>


<p>veth のデモは <a href="https://asciinema.org/a/122327">Network Namespace &amp; Veth demo</a> を参照</p>

<h2>LXD 採用から運用までの顛末記</h2>

<ul>
<li>自己紹介</li>
<li>LXD 採用で、XREA、ハイパフォーマンスで安定稼働しております</li>
<li>XERA の歴史</li>
<li>古い物理サーバーから KVM</li>
<li>完全仮想化の利点と問題点</li>
<li>時代はコンテナだということで準仮想化</li>
<li>なぜ LXD か?</li>
<li>Docker: ユーザーの権限独立とネットワーク周りの問題が解決できず</li>
<li>KVM: オーバーヘッドが多くてリソースが無駄</li>
<li>OpenVZ: コンテナより遅かった</li>
<li>VMware: 考えたこともない</li>
<li>LXD: コンテナだし、リソースが有効に使えて、ヒャッハーだ！</li>
<li>LXD 採用からサービス開始まで</li>
<li>マイグレーションに伴う障害はあったが、コンテナが原因の問題はおきなかった</li>
<li>LXD の運用環境</li>
<li>ホスト Ubuntu 16.04 LTS</li>
<li>ゲスト CentOS 7</li>
<li>ZFS + ブロックデバイス</li>
<li>ホストシステム構築時のトラブル</li>
<li>オープンファイル数の上限編</li>
<li>試行錯誤した結果 <code>fs.inotify.max_user_instances</code> だった</li>
<li>その他色々上限解除</li>
<li>LXD 運用編</li>
<li>1: ユーザークォータがきかない→運用でカバー</li>
<li>2: マイグレーション時に Apache のアラートがあがる</li>
<li>原因は Apache RLimitNPROC + Potential DoS attacks</li>
<li>同じユーザーだったのが原因</li>
<li><a href="https://linuxcontainers.org/lxc/security/">https://linuxcontainers.org/lxc/security/</a></li>
<li>3: ホストのロードアベレージが急激に上昇→ZFS がボトルネック、チューニングを実施</li>
<li>4: コンテナ自体のリソース制御</li>
<li>5: (よそ見をしていたら見逃した)</li>
<li>LXD に変えてどうだったか</li>
<li>よかったという話</li>
<li>質疑応答</li>
<li>Q: ホスト間のマイグレーションは使っているか?</li>
<li>A: KVM からのマイグレーションだったので今回は使っていない。次回は使うかもしれない。</li>
<li>Q: ZFS で苦労されたという話だったが、他に選択肢はあったのか?</li>
<li>A: ZFS がデフォルトっぽい感じだったので、選んだ。ブロックデバイスかどうかというのはあったが、ブロックデバイスを選んだ。</li>
<li>Q: Docker のネットワーク周りの問題とは?</li>
<li>担当者 A: ポートとか IP とかの問題</li>
</ul>


<h2>休憩</h2>

<p>懇親会の案内</p>

<h2>Joe&rsquo;s と LXC とその運用実例と</h2>

<ul>
<li>Joe&rsquo;s Cloud Computing</li>
<li>会社紹介</li>
<li>Speaker 紹介</li>
<li>Joe&rsquo;s と LXC</li>
<li>2001年: Scientific Linux 6 with kernel 2.6.42 (後で訂正あり) + patch, zfs on fuse: 当初よりテンプレートを意識した設計</li>
<li>2010年〜: ubuntu に乗り換え, LXD への移行模索中</li>
<li>現在: 共用サーバーの半分が LXC 駆動</li>
<li>LXC と Docker</li>
<li>kvm との比較</li>
<li>LXC 運用のメリット: リソース管理がしやすい</li>
<li>運用例: zabbix 運用, 障害対応, IPブロック, プロセス管理</li>
<li>運用テストで LXC で zabbix を作成</li>
<li>nagios から移行</li>
<li>本番環境に移動</li>
<li>lxc だと rsync でコピーして起動できる</li>
<li>同一ネットワークだと監視の意味が、ということでさくらクラウドに移動</li>
<li>障害対応</li>
<li>ハードウェア障害</li>
<li>起動しなくても HDD から読み出せるならレスキュー環境で起動して吸い出してなんとかできる</li>
<li>IP ブロック</li>
<li>ホスト側の FORWARD チェインでブロック</li>
<li>FORWARD なので失敗しても取り消しやすい</li>
<li>ゲスト側が古くて ipset が使えなくてもホスト側で使えるので便利</li>
<li>プロセス管理: ホスト側から監視できる (htop とか)</li>
<li>これからの LXC ホスティング</li>
<li>デプロイ速度の向上</li>
<li>仮想コンソールの実装</li>
<li>Migration / HA の実装</li>
<li>まだまだこれから楽しめる分野</li>
<li>質疑応答</li>
<li>Q: Zabbix のバックアップ運用は?</li>
<li>A: ローカルは HDD が多いマシンがあるのでそこにとっている。リモートはホスト側で rsync と database のバックアップ</li>
<li>Q: ゲスト数はどのくらい?</li>
<li>A: 4コアで1台ぐらいのイメージ。テストでは40台ぐらいで</li>
<li>ディスクの I/O がボトルネックになる。</li>
<li>Q: 特権コンテナ?</li>
<li>A: マネージドは特権コンテナで問題ない。 VPS は非特権コンテナの予定あり。</li>
<li>Q: LXC のバージョンアップやマイグレーションでの気をつけたポイントは?</li>
<li>A: 古いサーバーのバージョン確認 kernel 2.6.42 ではなかった 2.6.32.41 LXC 0.7.4.1</li>
<li><a href="https://speakerdeck.com/samaiyou/joes-and-working-with-lxc">Joe&rsquo;s and working with LXC by samaiyou</a></li>
</ul>


<h2>Dockerコンテナ監視要素の検討</h2>

<ul>
<li>古い情報で誤解されていることがある</li>
<li><a href="http://docs.docker.jp/">http://docs.docker.jp/</a></li>
<li>動機: どのように監視をしたら良いのか?, runC と containerD, 私は私が欲しい監視システムを作りたい</li>
<li>監視と運用: システム稼働状況の把握と対策, サービスレベル</li>
<li><a href="http://www.brendangregg.com/linuxperf.html">http://www.brendangregg.com/linuxperf.html</a></li>
<li>ストレージドライバーによってパフォーマンスが大きく異なる</li>
<li>dockerd (Docker Engine), containerD</li>
<li>スケジューリング + クラスタ管理 = オーケストレーション</li>
<li>良い感じの自動化ツールはまだなさそう</li>
<li>Prometheus</li>
<li>Docker Engine とデーモンの変遷</li>
<li>v1.11〜 は dockerd - containerd - runC になっている</li>
<li><a href="https://www.opencontainers.org/">https://www.opencontainers.org/</a> - runC</li>
<li><a href="https://www.cncf.io/">https://www.cncf.io/</a> - containerd</li>
<li>2013年→2016年夏現在: dockerd デーモンの解体, 従来のコンテナ監視はメトリクス取得に集中</li>
<li>runC</li>
<li>バイナリ配布はされていないので自分で make する必要あり</li>
<li>runc のデモ</li>
<li>Docker Compose</li>
<li>fig が買収されて docker-compose になった</li>
<li>docker swarm mode, overlay network で Routing mesh, docker service create でサービス作成</li>
<li>サービス名で名前解決できる</li>
<li>監視はどうする?</li>
<li>Docker Swarm という swarm mode とは名前は似ているが別物がまだ残っているがそのうち消えるはず</li>
<li>API と SDK</li>
<li><code>curl --unix-socket /var/run/docker.sock -X GET http://v1.29/containers/json?size=true | jq "." | less</code> とかでも情報がとれる</li>
<li><a href="https://github.com/yadutaf/ctop">https://github.com/yadutaf/ctop</a></li>
<li>systemd-cgtop より便利</li>
<li>Q: containerd と runc を意識する必要はあるか?</li>
<li>A: 普段はあまり意識する必要はない</li>
<li>Q: ホスティングサービスでは docker を選ばなかったが、お客様から見えない部分では使いたい</li>
<li>A: さくらの VPS のコントロールパネルなどで docker を使っている</li>
<li>Q: kubernetes とかは?</li>
<li>A: 用途が違うので使い分ければ良いのでは。使いたいものを使えば良いのでは。</li>
<li>ユーザー目線で使いやすいのは swarm mode とか</li>
<li>リソースを有効活用したいのなら mesos とか</li>
<li>kubernetes はあまり詳しくない</li>
<li>mesos は API があって使いやすいらしい</li>
<li>ctop は同じ名前で別のものがある</li>
</ul>


<h2>感想</h2>

<p>lxc/lxd の話がきけてよかったです。Web 上ではあまり見かけないと思っていましたが、使っているところではちゃんと使っていて、安定して運用できていると聞いて、用途によっては使ってみたいと思いました。</p>

<p>Docker の話も普段 Dokku などで使っていて、なんか色々変わっていっているとは感じていましたが、まとまった話として聞けてよかったです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansibleでjsonファイルの設定を更新した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-16-ansible-json.html"/>
    <updated>2017-06-16T21:26:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-json</id>
    <content type="html"><![CDATA[<p>ansible で json ファイル (今回は <code>/etc/docker/daemon.json</code>) を更新したかったのですが、 <code>lineinfile</code> や <code>replace</code> や <code>ini_file</code> のように単独のモジュールで簡単にできるものではなかったので、少し工夫をして実現しました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>ansible 2.3.1.0</li>
</ul>


<p>combine フィルター (後述) が New in version 2.0 なので、 1.x では動かないと思います。</p>

<h2>実例</h2>

<p><a href="https://github.com/znz/ansible-role-docker">https://github.com/znz/ansible-role-docker</a> や <a href="https://github.com/znz/ansible-playbook-gitlab-dokku/tree/master/provision/roles/docker-dns">https://github.com/znz/ansible-playbook-gitlab-dokku/tree/master/provision/roles/docker-dns</a> にあります。</p>

<h2>json ファイル読み込み</h2>

<p>まずは <code>command</code> モジュールで読み込んで、 <code>set_fact</code> で変数に設定しておきます。</p>

<pre><code>- name: "Read daemon.json"
  command: cat /etc/docker/daemon.json
  register: result
  changed_when: no
</code></pre>

<p>記事を書いていて気づいたのですが、リモートからファイルを読み込むには <code>slurp</code> モジュールというのがあるようですが、作った時点では知らなかったので、使っていません。</p>

<p>base64 でエンコードされていて b64decode を通す必要があるようなので、何度も参照するなら、次の <code>set_fact</code> を組み合わせた方が良さそうなのは変わらなさそうです。</p>

<h2>json から dict に変換</h2>

<p>json の文字列から <a href="http://docs.ansible.com/ansible/playbooks_filters.html#filters-for-formatting-data"><code>from_json</code>フィルター</a>で変換します。</p>

<pre><code>- set_fact: docker_daemon_json="{{ result.stdout | from_json }}"
</code></pre>

<h2>combine フィルターでマージ</h2>

<p><a href="http://docs.ansible.com/ansible/playbooks_filters.html#combining-hashes-dictionaries"><code>combine</code>フィルター</a>で設定をマージして、 <code>to_json</code> フィルターで json 文字列に変換してファイルに書き出します。</p>

<p>今回の用途では、ネストしたデータは考慮する必要がなく、トップレベルのキーが一致するもので置き換えられればよかったので、 <code>recursive=True</code> は指定していません。</p>

<p><code>when</code> でのチェックもしておかないと、設定内容としては変わっていないのに、 json 文字列になった時にキーの順番が変わっているのか、 changed になってしまうことがあったので、 <code>when</code> で設定内容に変更がある時だけ書き込むようにしています。</p>

<pre><code>- name: "Update daemon.json"
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0400
  when: "docker_daemon_json != docker_daemon_json|combine({'dns':dns})"
  notify:
  - restart docker
</code></pre>

<p>templates/daemon.json.j2:</p>

<pre><code>{{ docker_daemon_json | combine({"dns": dns}) | to_json }}
</code></pre>

<h2>動作確認</h2>

<p>全体ができた後に、</p>

<ul>
<li>ファイルがない時の動作</li>
<li>設定が変わらない時の動作</li>
<li>設定が変わる時の動作</li>
</ul>


<p>も確認しておきます。</p>

<h2>docker のデーモン設定ファイル</h2>

<p>docker の<a href="http://docs.docker.jp/engine/reference/commandline/dockerd.html#daemon-configuration-file">デーモン設定ファイル</a>は <code>insecure-registries</code> (<code>--insecure-registry=[]</code>) や <code>dns</code> や <code>bip</code> など dockerd のオプションで指定できるものはなんでも指定できます。</p>

<p><a href="http://docs.docker.jp/engine/admin/systemd.html#custom-docker-daemon-options">docker デーモンのオプション変更</a>は systemd の docker.service の設定を変更する方法もあるようですが、ローカルの変更をローカルの独立ファイルに隔離できて、バージョンアップの影響も少なそうなので、 daemon.json を使うことにしました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[letsencryptの証明書の更新に失敗していた(IPv6が原因だった)]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-14-failed-to-update-letsencrypt.html"/>
    <updated>2017-06-14T19:36:08+09:00</updated>
    <id>http://blog.n-z.jp/blog/failed-to-update-letsencrypt</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s Encrypt の証明書の自動更新が失敗しているサーバーがあって、原因を調べたら AAAA レコードに設定している IPv6 アドレスが間違っていたのが原因でした。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>Debian GNU/Linux 8.8 (jessie)</li>
<li>certbot 0.10.2-1~bpo8+1</li>
<li>さくらインターネットの VPS で IPv6 を使用 (過去に tun6rd を使っていた)</li>
</ul>


<h2>現象</h2>

<p>2016-03-29 に現在のサーバーに移動した時に A レコードを書き換えただけではなく、追加で tun6rd の頃の IPv6 アドレスを AAAA レコードに設定してしまいました。
別の IPv6 アドレスを設定しているサーバーからの接続に時間がかかるという現象が発生していたものの、原因がわからず、ずっとそのままの状態でした。</p>

<p>StartCom の証明書が事実上使えなくなってしまったので、 2016-12-04 に Let&rsquo;s Encrypt の証明書に変更しました。
初回の証明書の発行のときには問題なく発行できていました。
2017-02-03,2017-04-04 の自動更新も問題なく動いていました。</p>

<p>6月の自動更新で突然失敗するようになり、数日様子を見ていましたが、失敗し続けていたので、詳しく調査することにしました。</p>

<h2>調査</h2>

<p>色々悩んだ結果、 <code>/var/log/letsencrypt/letsencrypt.log</code> を眺めていたところ <code>addressUsed</code> に IPv6 のアドレスが出ているのに気づいて、もしかして、と思ってさらに調べることにしました。</p>

<pre><code>"validationRecord": [
  {
    "url": "http://XXX.example.org/.well-known/acme-challenge/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
    "hostname": "XXX.example.org",
    "port": "80",
    "addressesResolved": [
      "XX.XXX.XXX.XX",
      "2001:e41:XXXX:XXXX::1"
    ],
    "addressUsed": "2001:e41:XXXX:XXXX::1",
    "addressesTried": []
  }
]
</code></pre>

<p>該当のサーバーから <code>ping6 www.kame.net</code> などは問題なく通り、該当サーバーへの <code>ping6</code> も問題なく通ることなどを確認していたところ、IPv6 アドレスが違うことに気づきました。</p>

<h2>修正</h2>

<p>AAAA レコードを <code>2403:3a00:XXX:XXXX:XX:XXX:XXX:XX</code> に修正して、急いでいるわけでもないので certbot の自動実行を待ってみたところ、ちゃんと更新されました。</p>

<h2>関連情報</h2>

<p><a href="https://letsencrypt.jp/usage/dvsni-challenge-error.html">DVSNI challenge エラーの対処法</a>に <code>urn:acme:error:connection</code> の原因の例として A レコードのことは書いてあったのに AAAA レコードのことが書かれていなくて、可能性に気づくのが遅れたので、 AAAA レコードのことも書いてあると良いのではないかと思いました。</p>

<h2>まとめ</h2>

<p>Let&rsquo;s Encrypt のサーバーの実装が変わったのか、IPv6 アドレスから IPv4 へのフォールバックをしなくなっていて、IPv6 アドレスの間違いに気づくことができ、接続が遅かった現象も解決しました。</p>

<p>主に IPv4 を使っているとなかなか気づかないので、 AAAA レコードを設定するときは、ちゃんと確認しておかないと、後でわかりにくいトラブルの原因になると実感しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cron(crontab)の代わりにsystemdのtimerを使う]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-04-cron-systemd-timer.html"/>
    <updated>2017-06-04T14:18:19+09:00</updated>
    <id>http://blog.n-z.jp/blog/cron-systemd-timer</id>
    <content type="html"><![CDATA[<p>最近 <a href="https://github.com/znz/ansible-playbook-gitlab-dokku">gitlab omnibus などの環境</a>を作っていて、<a href="https://github.com/znz/ansible-role-gitlab-ce">GitLab CE の role</a> でバックアップ処理を定期実行するのに crontab ではなく systemd の timer を使ってみました。</p>

<!--more-->


<h2>利点</h2>

<ul>
<li>systemd 管理下で統一的に扱えるので、覚えれば楽</li>
<li>ログも journald で統一されるので cron だといちいちメールが飛ぶと鬱陶しいような粒度でも簡単にログに残せる</li>
<li>環境変数なども含めた環境が本番と同じ状態ですぐに実行を試しやすい</li>
<li>systemd 依存の機能が使える (後述の例では After と Requires)</li>
</ul>


<p>などが利点に感じました。</p>

<h2>欠点</h2>

<ul>
<li>情報が cron (crontab) に比べてまだ少ないので、何かあったときに調べにくい</li>
<li>systemd に大きく依存してしまう</li>
</ul>


<p>などが欠点に感じました。</p>

<h2>確認環境</h2>

<ul>
<li>Ubuntu 16.04.2 LTS (xenial)</li>
<li>systemd 229-4ubuntu17</li>
</ul>


<h2>情報表示</h2>

<ul>
<li><code>systemctl list-timers</code> でタイマーの次回実行予定時刻、前回実行時刻などを含めて表示されます。</li>
<li><code>systemctl status systemd-tmpfiles-clean.timer</code> でタイマーの情報、<code>systemctl status systemd-tmpfiles-clean.service</code> で実行されるサービスの情報が表示されます。</li>
<li><code>journalctl -u systemd-tmpfiles-clean.timer</code> や <code>journalctl -u systemd-tmpfiles-clean.service</code> でログが表示されます。 <code>systemd-journal</code> グループに入っていない場合は <code>sudo</code> が必要かもしれません。 <code>systemd-journal</code> に入っていれば <code>systemctl status</code> でも最近のログが表示されます。</li>
<li>Type=oneshot (後述) の場合、ログの Starting が実行開始時刻で Started が実行終了時刻になるようです。</li>
</ul>


<h2>設定ファイルの場所</h2>

<p><code>systemctl status</code> で <code>Loaded: loaded (/lib/systemd/system/systemd-tmpfiles-clean.timer; static; vendor preset: enabled)</code> のようにパスが出るので、システムのものは <code>/lib/systemd/system/</code> にあることがわかります。</p>

<p>タイマーではありませんが、 gitlab-ce では <code>/usr/lib/systemd/system/gitlab-runsvdir.service</code> に service が入っていたので、 <code>/usr/lib/systemd/system/</code> も参照されるようです。</p>

<p>自分で作成する場合は systemd の流儀に従って <code>/etc/systemd/system/</code> に作成すれば良いと思います。</p>

<h2>service 作成</h2>

<p><code>/etc/systemd/system/gitlab-backup.service</code> を以下の内容で作成しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Backup gitlab
</span><span class='line'>After=gitlab-runsvdir.service
</span><span class='line'>Requires=gitlab-runsvdir.service
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>Type=oneshot
</span><span class='line'>ExecStart=/opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Unit の Description は適当にわかりやすい説明を書けば良いと思います。</li>
<li>Service の Type は cron 代わりに使う場合は oneshot にするのが普通のようです。</li>
<li>ExecStart に crontab で書いていたようにコマンドを書きます。 crontab と同じように、複雑な場合は無理にここに書こうとせずに別途シェルスクリプトなどを作成して実行する方が良さそうです。</li>
<li>After と Requires はバックアップ処理を実行するのに postgresql などが実行されている必要がありそうだったので書きました。このあたりが必要かどうかは用途によると思います。</li>
</ul>


<h2>timer 作成</h2>

<p><code>/etc/systemd/system/gitlab-backup.timer</code> は以下の内容で作成しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Backup gitlab
</span><span class='line'>
</span><span class='line'>[Timer]
</span><span class='line'>OnCalendar=*-*-* 2,14:00
</span><span class='line'>Persistent=true
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=timers.target</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Unit の Description は適当にわかりやすい説明を書けば良いと思います。</li>
<li>OnCalendar で毎日 2:00 と 14:00 に実行するように設定しています。ローカルタイムでの指定になります。詳細は systemd のドキュメントを参照してください。</li>
<li>Persistent=true は<a href="https://wiki.archlinuxjp.org/index.php/Systemd/%E3%82%BF%E3%82%A4%E3%83%9E%E3%83%BC" title="systemd/タイマー - ArchWiki">systemd/タイマー - ArchWiki</a>によると「システムの電源が切られていたなどの理由で、最後の起動時間を過ぎていた場合、すぐに実行されます」ということのようで、 anacron 的な動作が期待できるかと思って指定しています。</li>
<li>Install の WantedBy=timers は <code>systemctl enable</code> や <code>systemctl disable</code> ができるようにするための定型句のようです。</li>
</ul>


<h2>設定反映</h2>

<p><code>sudo systemctl daemon-reload</code> で反映させます。
新規作成時などは必要ないかもしれませんが、実行しておくと確実です。</p>

<h2>有効化</h2>

<p><code>sudo systemctl enable gitlab-backup.timer</code> で <code>/etc/systemd/system/timers.target.wants/gitlab-backup.timer</code> に <code>/etc/systemd/system/gitlab-backup.timer</code> へのシンボリックリンクが作成されて有効になります。</p>

<h2>無効化</h2>

<p><code>sudo systemctl disable gitlab-backup.timer</code> で無効に戻せます。
timer を消したくなったときには disable してから timer ファイル (と service ファイル) を削除すると良いと思います。
(ファイル削除後は <code>sudo systemctl daemon-reload</code> もすると良いかもしれません。)</p>

<h2>テスト実行</h2>

<p><code>sudo systemctl start gitlab-backup.service</code> でテスト実行できます。</p>

<h2>実行時間を散らす</h2>

<p>Timer セクションに RandomizedDelaySec を設定するとランダムスリープをいれて実行時間をばらけさせることができます。
<code>certbot.timer</code> などで使われています。</p>

<p>試しに <code>RandomizedDelaySec=10min</code> といれてみると、これを使ったときには設定が反映されたタイミングや前回の実行終了後などの次の実行が決まった段階でランダムスリープの時間が決まるようで、 <code>journalctl -u gitlab-misc-backup.timer</code> で <code>gitlab-misc-backup.timer: Adding 6min 33.234976s random time.</code> と出て、 <code>systemctl list-timers</code> の NEXT も遅延後の時刻になっていて、実行された時のログの Starting もその時刻以降 (AccuracySec がデフォルト 1min なので NEXT に出ていた時刻よりちょっと遅かった) になっていました。</p>

<h2>atd</h2>

<p>crond の crontab の代わりは service ファイルと timer ファイルを作成して反映させて有効にして、という操作が必要でした。</p>

<p>atd の at の代わりとしては systemd-run というコマンドがあるようです。
試しに使ったことしかないので、紹介だけに留めておきます。</p>

<h2>まとめ</h2>

<p>設定ファイルが複数必要だったり、反映するのに一手間必要だったりして、使い始めは crontab より面倒ですが、 systemd との連携が必要だったり、ログ管理をまとめたかったり、 RandomizedDelaySec のように systemd の機能を使った方がすっきりする場合などは積極的に timer を使っていくと良いのではないかと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible で role を新規作成して ansible galaxy で公開して更新した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-03-ansible-galaxy-new-role.html"/>
    <updated>2017-06-03T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-galaxy-new-role</id>
    <content type="html"><![CDATA[<p>ansible で role を新規作成して ansible galaxy で公開して更新するときにやっているいつもの手順を紹介します。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ansible 2.3.0.0</li>
</ul>


<h2>ansible-galaxy init</h2>

<p><code>ansible-galaxy init</code> でファイルを作成します。</p>

<pre><code>% ansible-galaxy init ansible-role-unattended-upgrades
- ansible-role-unattended-upgrades was created successfully
% cd ansible-role-unattended-upgrades
% find . -type f | sort
./README.md
./defaults/main.yml
./handlers/main.yml
./meta/main.yml
./tasks/main.yml
./tests/inventory
./tests/test.yml
./vars/main.yml
</code></pre>

<p><code>tests</code> は使い方がよくわからないのですが、そのままにしています。</p>

<h2>LICENSE 作成</h2>

<p>すでに作成済みの role から The MIT License (MIT) のファイルをコピーしてきました。
新規の場合は github に push した後にブラウザーから作成するのが簡単だと思います。</p>

<h2>README 更新</h2>

<p>ここで自分の他の role を参考に書き換えました。</p>

<h2>vars 削除</h2>

<p>上書きしやすいように、 <code>defaults/main.yml</code> しか使っていないので <code>vars/main.yml</code> は削除しました。</p>

<pre><code>% rm -r vars
</code></pre>

<h2>中身作成</h2>

<p><code>tasks</code>, <code>defaults</code>, <code>handlers</code>, <code>files</code>, <code>templates</code> などのディレクトリを使って作成します。</p>

<h2>meta/main.yml 更新</h2>

<p><code>meta/main.yml</code> を更新します。
<code>galaxy_tags</code> は <a href="https://galaxy.ansible.com/">https://galaxy.ansible.com/</a> の browse roles を参考にして適当に選んでいます。</p>

<h2>examples</h2>

<p>テスト用に vagrant で serverspec を動かせるように <code>examples</code> を入れています。
どうするのが良いのかわかっていないのですが、とりあえず全くテストしないよりはましなので、こういう方法をとっています。</p>

<p><code>debian/wheezy64</code> の box は synced folder が rsync なのでシンボリックリンクのループでエラーになってしまうので、 <code>vagrant up wheezy64</code>, <code>vagrant provision wheezy64</code>, <code>rake spec:wheezy64</code> のように provision を別途実行しないといけないのが不便なのですが、 <a href="https://atlas.hashicorp.com/debian/">https://atlas.hashicorp.com/debian/</a> には VirtualBox Guest Addition が入った box が <code>debian/contrib-jessie64</code> しかないので、今のところ wheezy と stretch ではどうしようもなさそうです。</p>

<p>テストに使った VM はディスクの無駄なので、こまめに vagrant destroy しています。</p>

<h2>git push</h2>

<p><code>basename $(pwd) | pbcopy</code> した名前で github に repository を作成します。
タグもうっておきます。</p>

<pre><code>git remote add origin git@github.com:znz/ansible-role-unattended-upgrades.git
git push -u origin master
git tag v1.0.0
git push --tags
</code></pre>

<h2>ansible galaxy に反映</h2>

<p>github 連携でログインして、 my roles を開きます。</p>

<p>Search Roles の入力欄の右にあるボタンをクリックして refresh して github の新しい repository を表示させます。
(たぶん <code>meta/main.yml</code> をチェックして一覧に出すかどうか決めているのだと思います。)</p>

<p>追加した role を有効にします。
Role Settings を開くとわかるのですが、なぜか Role Name は自動的に <code>ansible-role-</code> がとれて <code>unattended-upgrades</code> になっています。</p>

<h2>role の更新</h2>

<p>role を更新したら <a href="http://semver.org/lang/ja/">セマンティック バージョニング</a> にそってバージョン番号をあげて、タグをうって push しておきます。</p>

<p>my roles のページで該当する role の行の一番右にある Import Role をクリックすると新しいタグが反映されます。
(role 個別ページには該当する操作はなさそうです。)</p>

<h2>まとめ</h2>

<p>ansible で新規 role を作成して、 github と ansible galaxy で公開して更新しているときにやっている手順を紹介しました。</p>

<p>昔は ansible-galaxy で role を取ってくるのに ansible galaxy への登録が必須だったので登録していたのですが、最近は他の人が role を作るときに参考になるかもと思って登録しています。
あまり汎用性のない自分用の role の場合は github だけに登録して YAML ファイルで</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- src: https://github.com/znz/ansible-role-nadoka
</span><span class='line'>  version: master
</span><span class='line'>  name: znz.nadoka</span></code></pre></td></tr></table></div></figure>


<p>のように指定して使っていたり (この場合でも meta/main.yml は必要)、 playbook 用の repository の role 以下にそのまま入れていたり (この場合は meta/main.yml は不要) します。</p>

<p>複数 role を登録していて、こういうフローで作業をしている人もいるということで、参考になれば幸いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 123 回関西 Debian 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-28-kansai-debian-meeting.html"/>
    <updated>2017-05-28T13:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://debianjp.connpass.com/event/57323/" title="第 123 回関西 Debian 勉強会">第 123 回関西 Debian 勉強会</a>に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<p>Apache Arrow の勉強会の後、一緒にランチに行くのに参加していたら、ちょっと遅くなってしまって、 13:40 すぎに到着しました。</p>

<h2>オープニング</h2>

<ul>
<li>事前課題は必須項目になっていなかったため、 connpass での参加登録時に出ていなかったので、その場で発表して資料が更新されていた。</li>
<li>初参加の人がいた</li>
<li>初めて作った人とか長い間使っていない人とか</li>
<li>easypg は表示は復号されているがメモリダンプをしても平文はないらしい</li>
<li>期限切れと revoke の違い: 期限切れはのばせるが、 revoke は取り消せない</li>
</ul>


<p>ruby の svn のコミットに必要という話は <a href="https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowto">https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowto</a> <a href="https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowtoJa">https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowtoJa</a> あたりに書いてあるのですが、今見ると <code>ssh-keygen -b 2048 -f ruby_key</code> になってて古い感じ。英語の方は <code>~/.ssh/id_rsa or ~/.ssh/id_dsa</code> と書いてあるのでもっと古い感じが。</p>

<h3>途中で矢吹さんの話</h3>

<ul>
<li>カジュアルに使うのも良いけど、暗号関連は色々気にしている人もいるので気をつけましょう (色々なポリシーがあるのを尊重しましょう) という話とか</li>
<li>cypherpunk : 暗号の民主化</li>
<li>FST-01 を入手した (まだ秘密鍵は入れていない) ので回覧</li>
</ul>


<h2>GnuPG にまつわるアレコレ - GnuPG2 とか Keybase とか Yubikey とか</h2>

<ul>
<li>key id は昔は 8 文字だったけど conflict が作れるという話になって、今は 16 文字 (以上?) が普通らしい</li>
<li>(勉強会中に聞きそびれてしまったけど、GPG の key id が fingerprint の末尾っていうのは、みんなどうやって知るんだろう?)</li>
<li>(自分は昔の key sign party で fingerprint しか書いてないけど、どうやって fetch するの? と聞いたときに教えてもらったけど。)</li>
<li>GnuPG とは?</li>
<li>OpenPGP: RFC になっている</li>
<li>暗号化によって盗聴を防ぐ (機密性)</li>
<li>署名によって改ざんを検知可能にする (完全性)</li>
<li>例: secure-apt, DKIM</li>
<li>信頼の輪 (Web of trust) によって本人を同定</li>
<li>過去の資料の参照情報紹介</li>
<li><a href="https://wiki.debian.org/KansaiDebianMeeting/20150823" title="第 101 回 関西 Debian 勉強会">第 101 回 関西 Debian 勉強会</a>の「wiki:Subkeys」が気になった</li>
<li>Windows の GUI の GPG クライアントで良いものがない</li>
<li>mac は GPG Tools というので標準の Mail.app で GPG 対応できるらしい</li>
<li>Web メールで困る話</li>
<li>Thunderbird は Enigmail</li>
<li>鍵の選び方の話</li>
<li>ED25519 は gnupg 1.4 系 (今は oldstable ブランチ) で復号できない</li>
<li>今の所は互換性のための RSA4096 と速い ED25519 を併用するのが良いかもしれない</li>
<li>GnuPG 2 - Stretch での変更点</li>
<li>gnupg (1.4 → 2.1), gnupg1 (なし → 1.4), gnupg2 (2.0 → drop)</li>
<li>gnupg 2.1 は初回実行時に自動的に移行が実行されて、2.1 用のファイル (<code>pubring.kbx</code> とか <code>private-keys-v1.d/</code> とか) が作成される</li>
<li>古いバージョン用のファイル (<code>pubring.gpg</code> とか <code>secring.gpg</code> とか) はそのまま残るので古いバージョンの共存も可能 (だがそれぞれのバージョンのファイルしか更新されないので、併用すると情報がずれていくはず)</li>
<li>2.0 がどっちのファイルを使うのかは検証してないので不明</li>
<li>プログラムの分離具合が整理された (<a href="http://miniconf.debian.or.jp/">Mini Debian Conference Japan 2016</a> の<a href="http://miniconf.debian.or.jp/assets/files/gnupg-now.html">g新部さんのスライド</a> の図が非常にわかりやすい (GnuPG programs (2) の図))</li>
<li>proxy 設定が gpg.conf から dirmngr.conf に変わった</li>
<li>use-gpg-agent が obsolete (常に有効で単純に無視される)</li>
<li>大量の ssh 接続に使うと scdaemon がエントロピーが足りないという話</li>
<li>haveged (はべーじでぃー(と言っていた)) とか rng-tools とか</li>
<li>disable-scdaemon をつけておくと無駄に scdaemon が起動しなくなる (gpg-agent から scdaemon が起動して scdaemon 対応のデバイスがなければ、すぐに gpg-agent に返ってくるらしいが、起動するだけ無駄という話)</li>
<li>gpg-agent を ssh-agent として使うのは簡単</li>
<li>GNOME で gnome keyring daemon は止めやすい</li>
<li>mate や xfce では ssh-agent を止めにくい</li>
<li>ssh-agent を入れないときは <code>.xsessionrc</code> で <code>SSH_AUTH_SOCK</code> を自分で設定する必要がある</li>
<li>mate や xfce では <code>.xsessionrc</code> で設定しても、さらに上書きされるらしい</li>
<li>YubiKey <a href="https://yubikey.yubion.com/">https://yubikey.yubion.com/</a> <a href="https://www.cloudgate.jp/yubikey.html">https://www.cloudgate.jp/yubikey.html</a></li>
<li>ED25519 には対応していない</li>
<li>RSA 4096 で復号で 0.5 秒ぐらい</li>
<li>(後でし</li>
<li>Qt5 での GUI ツールとコマンドラインツールがある</li>
<li>keybase.io というサービスがあるらしいが秘密鍵もアップロードできるらしく?</li>
<li>アカウントを作ってみた <a href="https://keybase.io/uwabami">https://keybase.io/uwabami</a> が消すかも。</li>
<li><a href="https://github.com/keybase/client">https://github.com/keybase/client</a> には大量の Issues が。</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>今後の予定</li>
<li>来月は17日に stretch がリリース予定なので、25日から18日に予定を変更してリリースパーティの可能性が高そう</li>
</ul>


<h2>よくわからないままだった点</h2>

<ul>
<li>懇親会への移動中などにある程度話しましたが</li>
<li><code>gpg --version</code> で出てくる「公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA」の「EDDSA」(ECDSA ではなく)と「ED25519」は同じ?</li>
<li>Curve25519 と ED25519 の関係</li>
<li><a href="https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%89%E3%83%AF%E3%83%BC%E3%82%BA%E6%9B%B2%E7%B7%9A%E3%83%87%E3%82%B8%E3%82%BF%E3%83%AB%E7%BD%B2%E5%90%8D%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0" title="エドワーズ曲線デジタル署名アルゴリズム">エドワーズ曲線デジタル署名アルゴリズム</a> に多少説明がある</li>
</ul>

]]></content>
  </entry>
  
</feed>
