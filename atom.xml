<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-06-25T22:42:54+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby と Perl 5.26 の &lt;&lt;~ の挙動の違い]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-25-indented-here-document.html"/>
    <updated>2017-06-25T22:22:22+09:00</updated>
    <id>http://blog.n-z.jp/blog/indented-here-document</id>
    <content type="html"><![CDATA[<p>Ruby には 2.3.0 から入っていた indented here document が<a href="https://mag.osdn.jp/17/06/02/161500">「Perl 5.26」リリース、「@INC」の仕様が変更される | OSDN Magazine</a> によると、Perl 5.26 にも入ったようなのですが、挙動が若干違うようなので、調べてみました。
(最初に調べたのは OSDN Magazine の記事をみた直後だったのですが、調べた結果を残し忘れていたので、今日調べなおしたものになります。)</p>

<!--more-->


<h2>動作確認環境</h2>

<p>Perl の最新を試すために archlinux を使ってみました。</p>

<ul>
<li>OS は vagrant で <a href="https://atlas.hashicorp.com/terrywang/boxes/archlinux">terrywang/archlinux</a> の box を使って <code>sudo pacman -Syu</code> した環境</li>
<li>ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux]</li>
<li>This is perl 5, version 26, subversion 0 (v5.26.0) built for x86_64-linux-thread-multi</li>
</ul>


<h2>Ruby での基本動作</h2>

<p>Ruby では基本的に indented here document の中で一番インデントが浅いところを基準に削られます。</p>

<p>Perl では <code>&lt;&lt;</code> の代わりに <code>&lt;&lt;~</code> を使っただけでは削られません。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@archlinux:~$ cat /tmp/a
</span><span class='line'>print &lt;&lt;~END;
</span><span class='line'>    4
</span><span class='line'> 1
</span><span class='line'>  2
</span><span class='line'>END
</span><span class='line'>vagrant@archlinux:~$ ruby /tmp/a
</span><span class='line'>   4
</span><span class='line'>1
</span><span class='line'> 2
</span><span class='line'>vagrant@archlinux:~$ perl /tmp/a
</span><span class='line'>    4
</span><span class='line'> 1
</span><span class='line'>  2</span></code></pre></td></tr></table></div></figure>


<h2>Perl での基本動作</h2>

<p>Ruby では <code>&lt;&lt;-</code> と同様に閉じる識別子のインデントは意味を持ちませんが、
Perl では閉じる識別子のインデント分が削られます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@archlinux:~$ cat /tmp/b
</span><span class='line'>print &lt;&lt;~END;
</span><span class='line'>   3
</span><span class='line'>    4
</span><span class='line'>  2
</span><span class='line'> END
</span><span class='line'>vagrant@archlinux:~$ ruby /tmp/b
</span><span class='line'> 3
</span><span class='line'>  4
</span><span class='line'>2
</span><span class='line'>vagrant@archlinux:~$ perl /tmp/b
</span><span class='line'>  3
</span><span class='line'>   4
</span><span class='line'> 2</span></code></pre></td></tr></table></div></figure>


<h2>Perl でのエラー例</h2>

<p>Perl では閉じる識別子のインデントより浅い部分があるとエラーになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@archlinux:~$ cat /tmp/c
</span><span class='line'>print &lt;&lt;~END;
</span><span class='line'> 1
</span><span class='line'>    4
</span><span class='line'>  2
</span><span class='line'>  END
</span><span class='line'>vagrant@archlinux:~$ ruby /tmp/c
</span><span class='line'>1
</span><span class='line'>   4
</span><span class='line'> 2
</span><span class='line'>vagrant@archlinux:~$ perl /tmp/c
</span><span class='line'>Indentation on line 1 of here-doc doesn't match delimiter at /tmp/c line 1.</span></code></pre></td></tr></table></div></figure>


<h2>Ruby で一番浅い行頭に空白を入れたい場合</h2>

<p>Ruby では一番浅い行頭に空白を入れたい場合はエスケープする必要があります。</p>

<p>Perl では最初の2例のように閉じる識別子のインデントの方を浅くするだけです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@archlinux:~$ cat /tmp/d
</span><span class='line'>print &lt;&lt;~END;
</span><span class='line'> \ x
</span><span class='line'>    4
</span><span class='line'>  2
</span><span class='line'> END
</span><span class='line'>vagrant@archlinux:~$ ruby /tmp/d
</span><span class='line'> x
</span><span class='line'>   4
</span><span class='line'> 2
</span><span class='line'>vagrant@archlinux:~$ perl /tmp/d
</span><span class='line'> x
</span><span class='line'>   4
</span><span class='line'> 2</span></code></pre></td></tr></table></div></figure>


<h2>感想</h2>

<ul>
<li>Ruby の仕様の方が内容を開始の行と終了の行よりインデントしたい時には都合が良さそうと感じました。</li>
<li>Perl の仕様の方がパーサーは単純になって速そうという印象を受けました。 (実際に速いかどうかは調べていません。)</li>
<li>Perl の仕様の方が行頭にある程度の空白を残したい場合は都合が良さそうと感じました。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shinosaka.rb #27 (GraphQL) に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-24-shinosaka-rb-graphql.html"/>
    <updated>2017-06-24T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/shinosaka-rb-graphql</id>
    <content type="html"><![CDATA[<p><a href="https://shinosakarb.doorkeeper.jp/events/61090">Shinosaka.rb #27</a> に参加しました。
Shinosaka.rb 自体は初参加でした。</p>

<p>今回は GraphQL の解説と node と rails でのハンズオンでした。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>メモ</h2>

<ul>
<li><a href="http://www.kokuchpro.com/event/tddbcosaka4/">TDDBC大阪4.0 2017年7月1日（大阪府） - こくちーずプロ（告知'sプロ）</a></li>
<li><a href="https://management30.doorkeeper.jp/events/61787">［認定証発行］アジャイル・リーダーシップとチェンジ・マネジメント・ワークショップ（Management 3.0） - Management 3.0（アジャイル・リーダーシップ、チェンジ･マネジメント、イノベーション・マネジメント） | Doorkeeper</a></li>
<li>自己紹介</li>
<li>QraphQL とは?</li>
<li>単一のエンドポイント</li>
<li>ライブラリーもいろんな言語や環境に対応している</li>
<li>REST API がツライから</li>
<li>GraphQL の微妙な点: pagination, 認証も考慮されていない</li>
<li>React との相性が良い: データ駆動</li>
<li>GitHub が GraphQL を採用: <a href="https://developer.github.com/v4/explorer/">https://developer.github.com/v4/explorer/</a></li>
<li><a href="http://graphql.org/">http://graphql.org/</a></li>
</ul>


<h2>動作確認環境</h2>

<ul>
<li>macOS Sierra 10.12.5</li>
<li>node v8.1.2</li>
<li>npm 5.0.3</li>
<li>graphql などのバージョン: <a href="https://github.com/znz/getting_started_graphql">https://github.com/znz/getting_started_graphql</a> を参照</li>
<li>ruby ruby 2.3.3p222 (2016-11-21 revision 56859) [x86_64-darwin15]</li>
<li>Bundler version 1.15.1</li>
<li>Rails 5.1.1</li>
<li>graphql 1.6.4, graphiql-rails 1.4.2</li>
<li>その他: <a href="https://github.com/znz/getting_started_graphql_ruby">https://github.com/znz/getting_started_graphql_ruby</a> を参照</li>
</ul>


<h2>ソースコード</h2>

<ul>
<li>node 版は <a href="https://github.com/znz/getting_started_graphql">https://github.com/znz/getting_started_graphql</a> を参照</li>
<li>Rails 版は <a href="https://github.com/znz/getting_started_graphql_ruby">https://github.com/znz/getting_started_graphql_ruby</a> を参照</li>
</ul>


<p>途中での graphiql での確認方法は下の作業メモの方に書いてあるので、あわせて参照してください。</p>

<h2>感想</h2>

<p>作業メモが長く続くので、先に感想を書いておきます。</p>

<p>node の方はエラーも json で帰ってきてブラウザーで見えて開発環境として使いやすそうな感じでしたが、
graphiql-rails の方はエラーの時に <code>SyntaxError: Unexpected token &lt; in JSON at position 0</code> とだけ出て、
詳細はサーバー側のログをみないといけないので、node に比べるとちょっと使いづらいかもしれない、と思いました。</p>

<p>GraphQL 自体は色々と利点も多そうだと思いましたが、サーバー側は結局 REST とは別に作り込まないといけなさそうで、
アクセス権限などを考えると、既存のアプリケーションで簡単に置き換えられるものでもなさそうかな、と思いました。</p>

<h2>実際に使ってみる</h2>

<ul>
<li><a href="http://graphql.org/code/">http://graphql.org/code/</a></li>
<li>npm init -y</li>
<li>npm install graphql</li>
</ul>


<h2>step 1</h2>

<p>index.js として以下の内容を作成:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict'
</span><span class='line'>
</span><span class='line'>const { graphql, buildSchema } = require('graphql')
</span><span class='line'>
</span><span class='line'>const schema = buildSchema(`
</span><span class='line'>type Query {
</span><span class='line'>  foo: String
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>type Schema {
</span><span class='line'>  query: Query
</span><span class='line'>}
</span><span class='line'>`)
</span><span class='line'>
</span><span class='line'>const resolvers = {
</span><span class='line'>  foo: () =&gt; 'bar',
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>const query = `
</span><span class='line'>query myQuery {
</span><span class='line'>  foo
</span><span class='line'>}
</span><span class='line'>`
</span><span class='line'>
</span><span class='line'>graphql(schema, query, resolvers)
</span><span class='line'>  .then(result =&gt; console.log(result))
</span><span class='line'>  .catch(err =&gt; console.log(err))</span></code></pre></td></tr></table></div></figure>


<p>実行結果:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% node.index.js
</span><span class='line'>{ data: { foo: 'bar' } }</span></code></pre></td></tr></table></div></figure>


<h2>step 2</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const schema = buildSchema(`
</span><span class='line'>type Query {
</span><span class='line'>  id: ID,
</span><span class='line'>  title: String,
</span><span class='line'>  watched: Boolean,
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>type Schema {
</span><span class='line'>  query: Query
</span><span class='line'>}
</span><span class='line'>`)</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const resolvers = {
</span><span class='line'>  id: () =&gt; 1,
</span><span class='line'>  title: () =&gt; 'bar',
</span><span class='line'>  watched: () =&gt; true,
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const query = `
</span><span class='line'>query myQuery {
</span><span class='line'>  id,
</span><span class='line'>  title,
</span><span class='line'>  watched,
</span><span class='line'>}
</span><span class='line'>`</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% node index.js
</span><span class='line'>{ data: { id: '1', title: 'bar', watched: true } }</span></code></pre></td></tr></table></div></figure>


<p>query から watched を削ると <code>{ data: { id: '1', title: 'bar' } }</code> になる。</p>

<h2>step 3</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const schema = buildSchema(`
</span><span class='line'>type Video {
</span><span class='line'>  id: ID,
</span><span class='line'>  title: String,
</span><span class='line'>  watched: Boolean,
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>type Query {
</span><span class='line'>  video: Video
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>type Schema {
</span><span class='line'>  query: Query
</span><span class='line'>}
</span><span class='line'>`)</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const resolvers = {
</span><span class='line'>  video: () =&gt;({
</span><span class='line'>    id: 1,
</span><span class='line'>    title: 'bar',
</span><span class='line'>    watched: true
</span><span class='line'>  }),
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const query = `
</span><span class='line'>query myQuery {
</span><span class='line'>  video {
</span><span class='line'>    id,
</span><span class='line'>    title,
</span><span class='line'>    watched,
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>`</span></code></pre></td></tr></table></div></figure>


<h2>step 4</h2>

<p>videos 対応</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const schema = buildSchema(`
</span><span class='line'>type Video {
</span><span class='line'>  id: ID,
</span><span class='line'>  title: String,
</span><span class='line'>  watched: Boolean,
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>type Query {
</span><span class='line'>  video: Video,
</span><span class='line'>  videos: [Video],
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>type Schema {
</span><span class='line'>  query: Query
</span><span class='line'>}
</span><span class='line'>`)</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const videoA = {
</span><span class='line'>  id: 1,
</span><span class='line'>  title: 'title1',
</span><span class='line'>  watched: true
</span><span class='line'>}
</span><span class='line'>const videoB = {
</span><span class='line'>  id: 2,
</span><span class='line'>  title: 'title2',
</span><span class='line'>  watched: false
</span><span class='line'>}
</span><span class='line'>const videos = [videoA, videoB]</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const resolvers = {
</span><span class='line'>  video: () =&gt; ({
</span><span class='line'>    id: 1,
</span><span class='line'>    title: 'bar',
</span><span class='line'>    watched: true,
</span><span class='line'>  }),
</span><span class='line'>  videos: () =&gt; videos,
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const query = `
</span><span class='line'>query myQuery {
</span><span class='line'>  videos {
</span><span class='line'>    id,
</span><span class='line'>    title,
</span><span class='line'>    watched,
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>`</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% node index.js
</span><span class='line'>{ data: { videos: [ [Object], [Object] ] } }</span></code></pre></td></tr></table></div></figure>


<h2>step 5</h2>

<p><code>yarn add express express-graphql</code> or <code>npm install express express-graphql</code></p>

<p><code>require('graphql')</code> の行の上に追加:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const express = require('express')
</span><span class='line'>const graphqlHTTP = require('express-graphql')</span></code></pre></td></tr></table></div></figure>


<p>追加:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const PORT = process.env.PORT || 3000
</span><span class='line'>const server = express()</span></code></pre></td></tr></table></div></figure>


<p>末尾の <code>graphql</code> の呼び出しを置き換え:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server.use('/graphql', graphqlHTTP({
</span><span class='line'>  schema,
</span><span class='line'>  graphiql: true,
</span><span class='line'>  rootValue: resolvers,
</span><span class='line'>}))
</span><span class='line'>
</span><span class='line'>server.listen(PORT, () =&gt; {
</span><span class='line'>  console.log(`Listening on http://localhost:${PORT}`)
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p><code>http://localhost:3000/graphql</code> を開いて</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  videos {
</span><span class='line'>    id,
</span><span class='line'>    title,
</span><span class='line'>    watched,
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>などを試す。</p>

<p>右上の Docs でスキーマも見える。</p>

<h2>step 6</h2>

<p>graphql の require のところを書き換え:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const {
</span><span class='line'>  GraphQLSchema,
</span><span class='line'>  GraphQLObjectType,
</span><span class='line'>  GraphQLID,
</span><span class='line'>  GraphQLString,
</span><span class='line'>  GraphQLBoolean,
</span><span class='line'>} = require('graphql')</span></code></pre></td></tr></table></div></figure>


<p>buildSchema を書き換え:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const videoType = new GraphQLObjectType({
</span><span class='line'>  name: 'Video',
</span><span class='line'>  description: 'video',
</span><span class='line'>  fields: {
</span><span class='line'>    id: {
</span><span class='line'>      type: GraphQLID,
</span><span class='line'>      description: 'id of video',
</span><span class='line'>    },
</span><span class='line'>    title: {
</span><span class='line'>      type: GraphQLString,
</span><span class='line'>      description: 'title of video'
</span><span class='line'>    },
</span><span class='line'>    watched: {
</span><span class='line'>      type: GraphQLBoolean,
</span><span class='line'>      description: 'has watched'
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const queryType = new GraphQLObjectType({
</span><span class='line'>  name: 'QueryType',
</span><span class='line'>  description: 'root query',
</span><span class='line'>  fields: {
</span><span class='line'>    video: {
</span><span class='line'>      type: videoType,
</span><span class='line'>      resolve: () =&gt; new Promise(resolve =&gt; {
</span><span class='line'>        resolve({
</span><span class='line'>          id: 1,
</span><span class='line'>          title: 'title1',
</span><span class='line'>          watched: true,
</span><span class='line'>        })
</span><span class='line'>      })
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const schema = new GraphQLSchema({
</span><span class='line'>  query: queryType,
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  video {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>    watched
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>などを試す。</p>

<h2>休憩</h2>

<h2>id: 1 だけ欲しいときなど</h2>

<p>videos を移動して data.js を作成:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict'
</span><span class='line'>
</span><span class='line'>const videoA = {
</span><span class='line'>  id: 1,
</span><span class='line'>  title: 'title1',
</span><span class='line'>  watched: true
</span><span class='line'>}
</span><span class='line'>const videoB = {
</span><span class='line'>  id: 2,
</span><span class='line'>  title: 'title2',
</span><span class='line'>  watched: false
</span><span class='line'>}
</span><span class='line'>const videos = [videoA, videoB]
</span><span class='line'>
</span><span class='line'>const getVideoById = (id) =&gt; new Promise(resolve =&gt; {
</span><span class='line'>  const [video] = videos.filter(v =&gt; (v.id + '') === id)
</span><span class='line'>  resolve(video)
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>exports.getVideoById = getVideoById</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const { getVideoById } = require('./data')</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const queryType = new GraphQLObjectType({
</span><span class='line'>  name: 'QueryType',
</span><span class='line'>  description: 'root query',
</span><span class='line'>  fields: {
</span><span class='line'>    video: {
</span><span class='line'>      type: videoType,
</span><span class='line'>      args: {
</span><span class='line'>        id: {
</span><span class='line'>          type: GraphQLID,
</span><span class='line'>          description: 'id of video',
</span><span class='line'>        },
</span><span class='line'>      },
</span><span class='line'>      resolve: (_, args) =&gt; getVideoById(args.id)
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  video(id: 2) {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>    watched
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>などを試す。</p>

<h2>id を必須にしたい</h2>

<p><code>require('graphql')</code> のところに <code>GraphQLNonNull,</code> を追加。</p>

<p><code>type: new GraphQLNonNull(GraphQLID),</code> にする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "errors": [
</span><span class='line'>    {
</span><span class='line'>      "message": "Unknown operation named \"null\"."
</span><span class='line'>    }
</span><span class='line'>  ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>になってしまったが、 getVideos の追加の後、もう一度試したら動いたので謎。
謎のエラーが発生した時は Prettify を押すとエラーが起きなくなるみたい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  video {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>    watched
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>などを試すと以下のように意図通りのエラーになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "errors": [
</span><span class='line'>    {
</span><span class='line'>      "message": "Field \"video\" argument \"id\" of type \"ID!\" is required but not provided.",
</span><span class='line'>      "locations": [
</span><span class='line'>        {
</span><span class='line'>          "line": 2,
</span><span class='line'>          "column": 3
</span><span class='line'>        }
</span><span class='line'>      ]
</span><span class='line'>    }
</span><span class='line'>  ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>配列</h2>

<p><code>GraphQLList</code> を追加</p>

<p>data.js に追加:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const getVideos = () =&gt; new Promise(resolve =&gt; resolve(videos))</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exports.getVideos = getVideos</span></code></pre></td></tr></table></div></figure>


<p>index.js:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const { getVideoById, getVideos } = require('./data')</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>videos: {
</span><span class='line'>  type: new GraphQLList(videoType),
</span><span class='line'>  resolve: getVideos,
</span><span class='line'>},</span></code></pre></td></tr></table></div></figure>


<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  videos {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>    watched
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>などを試す。</p>

<h2>mutation</h2>

<p>schema に mutation を追加:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const schema = new GraphQLSchema({
</span><span class='line'>  query: queryType,
</span><span class='line'>  mutation: mutationType,
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>schema の上に追加:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const mutationType = new GraphQLObjectType({
</span><span class='line'>  name: 'Mutation',
</span><span class='line'>  description: 'Mutation type',
</span><span class='line'>  fields: {
</span><span class='line'>    createVideo: {
</span><span class='line'>      type: videoType,
</span><span class='line'>      args: {
</span><span class='line'>        title: {
</span><span class='line'>          type: new GraphQLNonNull(GraphQLString),
</span><span class='line'>          description: 'title of video',
</span><span class='line'>        },
</span><span class='line'>      },
</span><span class='line'>      resolve: (_, args) =&gt; {
</span><span class='line'>        return createVideo(args)
</span><span class='line'>      }
</span><span class='line'>    },
</span><span class='line'>  },
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>data.js:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const createVideo = ({ title }) =&gt; {
</span><span class='line'>  const maxId = Math.max.apply(null, videos.map(v =&gt; v.id))
</span><span class='line'>  const watched = false
</span><span class='line'>  const video = {
</span><span class='line'>    id: maxId + 1,
</span><span class='line'>    title,
</span><span class='line'>    watched,
</span><span class='line'>  }
</span><span class='line'>  return video
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>(videos への push が抜けていた。)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exports.createVideo = createVideo</span></code></pre></td></tr></table></div></figure>


<p>index.js:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const { getVideoById, getVideos, createVideo } = require('./data')</span></code></pre></td></tr></table></div></figure>


<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mutation M {
</span><span class='line'>  createVideo(title: "hoge") {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>    watched
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>を試す。</p>

<p>この時点の index.js:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict'
</span><span class='line'>
</span><span class='line'>const express = require('express')
</span><span class='line'>const graphqlHTTP = require('express-graphql')
</span><span class='line'>const {
</span><span class='line'>  GraphQLSchema,
</span><span class='line'>  GraphQLObjectType,
</span><span class='line'>  GraphQLID,
</span><span class='line'>  GraphQLString,
</span><span class='line'>  GraphQLBoolean,
</span><span class='line'>  GraphQLNonNull,
</span><span class='line'>  GraphQLList,
</span><span class='line'>} = require('graphql')
</span><span class='line'>const { getVideoById, getVideos, createVideo } = require('./data')
</span><span class='line'>
</span><span class='line'>const PORT = process.env.PORT || 3000
</span><span class='line'>const server = express()
</span><span class='line'>
</span><span class='line'>/*
</span><span class='line'>video
</span><span class='line'>  id
</span><span class='line'>  title
</span><span class='line'>  watched
</span><span class='line'>*/
</span><span class='line'>
</span><span class='line'>const videoType = new GraphQLObjectType({
</span><span class='line'>  name: 'Video',
</span><span class='line'>  description: 'video',
</span><span class='line'>  fields: {
</span><span class='line'>    id: {
</span><span class='line'>      type: GraphQLID,
</span><span class='line'>      description: 'id of video',
</span><span class='line'>    },
</span><span class='line'>    title: {
</span><span class='line'>      type: GraphQLString,
</span><span class='line'>      description: 'title of video'
</span><span class='line'>    },
</span><span class='line'>    watched: {
</span><span class='line'>      type: GraphQLBoolean,
</span><span class='line'>      description: 'has watched'
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>const queryType = new GraphQLObjectType({
</span><span class='line'>  name: 'QueryType',
</span><span class='line'>  description: 'root query',
</span><span class='line'>  fields: {
</span><span class='line'>    videos: {
</span><span class='line'>      type: new GraphQLList(videoType),
</span><span class='line'>      resolve: getVideos,
</span><span class='line'>    },
</span><span class='line'>    video: {
</span><span class='line'>      type: videoType,
</span><span class='line'>      args: {
</span><span class='line'>        id: {
</span><span class='line'>          type: new GraphQLNonNull(GraphQLID),
</span><span class='line'>          description: 'id of video',
</span><span class='line'>        }
</span><span class='line'>      },
</span><span class='line'>      resolve: (_, args) =&gt; getVideoById(args.id)
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>const mutationType = new GraphQLObjectType({
</span><span class='line'>  name: 'Mutation',
</span><span class='line'>  description: 'Mutation type',
</span><span class='line'>  fields: {
</span><span class='line'>    createVideo: {
</span><span class='line'>      type: videoType,
</span><span class='line'>      args: {
</span><span class='line'>        title: {
</span><span class='line'>          type: new GraphQLNonNull(GraphQLString),
</span><span class='line'>          description: 'title of video',
</span><span class='line'>        },
</span><span class='line'>      },
</span><span class='line'>      resolve: (_, args) =&gt; {
</span><span class='line'>        return createVideo(args)
</span><span class='line'>      }
</span><span class='line'>    },
</span><span class='line'>  },
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>const schema = new GraphQLSchema({
</span><span class='line'>  query: queryType,
</span><span class='line'>  mutation: mutationType,
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>server.use('/graphql', graphqlHTTP({
</span><span class='line'>  schema,
</span><span class='line'>  graphiql: true,
</span><span class='line'>}))
</span><span class='line'>
</span><span class='line'>server.listen(PORT, () =&gt; {
</span><span class='line'>  console.log(`Listening on http://localhost:${PORT}`)
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>data.js:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict'
</span><span class='line'>
</span><span class='line'>const videoA = {
</span><span class='line'>  id: 1,
</span><span class='line'>  title: 'title1',
</span><span class='line'>  watched: true
</span><span class='line'>}
</span><span class='line'>const videoB = {
</span><span class='line'>  id: 2,
</span><span class='line'>  title: 'title2',
</span><span class='line'>  watched: false
</span><span class='line'>}
</span><span class='line'>const videos = [videoA, videoB]
</span><span class='line'>
</span><span class='line'>const getVideos = () =&gt; new Promise(resolve =&gt; resolve(videos))
</span><span class='line'>
</span><span class='line'>const createVideo = ({ title }) =&gt; {
</span><span class='line'>  const maxId = Math.max.apply(null, videos.map(v =&gt; v.id))
</span><span class='line'>  const watched = false
</span><span class='line'>  const video = {
</span><span class='line'>    id: maxId + 1,
</span><span class='line'>    title,
</span><span class='line'>    watched,
</span><span class='line'>  }
</span><span class='line'>  videos.push(video)
</span><span class='line'>  return video
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>const getVideoById = (id) =&gt; new Promise(resolve =&gt; {
</span><span class='line'>  const [video] = videos.filter(v =&gt; (v.id + '') === id)
</span><span class='line'>  resolve(video)
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>exports.getVideoById = getVideoById
</span><span class='line'>exports.getVideos = getVideos
</span><span class='line'>exports.createVideo = createVideo</span></code></pre></td></tr></table></div></figure>


<h2>createVideo の args を分離したい</h2>

<p>require のところに <code>GraphQLInputObjectType,</code> を追加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const videoInputType = new GraphQLInputObjectType({
</span><span class='line'>  name: 'VideoInputType',
</span><span class='line'>  description: 'video input type',
</span><span class='line'>  fields: {
</span><span class='line'>    title: {
</span><span class='line'>      type: new GraphQLNonNull(GraphQLString),
</span><span class='line'>      description: 'title of video',
</span><span class='line'>    },
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>const mutationType = new GraphQLObjectType({
</span><span class='line'>  name: 'Mutation',
</span><span class='line'>  description: 'Mutation type',
</span><span class='line'>  fields: {
</span><span class='line'>    createVideo: {
</span><span class='line'>      type: videoType,
</span><span class='line'>      args: {
</span><span class='line'>        video: {
</span><span class='line'>          type: new GraphQLNonNull(videoInputType)
</span><span class='line'>        },
</span><span class='line'>      },
</span><span class='line'>      resolve: (_, args) =&gt; {
</span><span class='line'>        return createVideo(args.video)
</span><span class='line'>      }
</span><span class='line'>    },
</span><span class='line'>  },
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mutation M {
</span><span class='line'>  createVideo(video: {title: "hoge"}) {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>    watched
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>を試す (<code>video:</code> で一段増えているので注意)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  videos {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>などを試す。</p>

<h2>休憩</h2>

<h3>createVideo も Promise にするとどうか</h3>

<p>createVideo の末尾を <code>return Promise.resolve(video)</code> にしても問題なく動いた。</p>

<h2>ruby でどうか</h2>

<ul>
<li><code>rails new getting_started_graphql_ruby</code></li>
<li><a href="http://graphql-ruby.org/getting_started">http://graphql-ruby.org/getting_started</a></li>
<li>Gemfile に <code>gem 'graphql'</code> を追加</li>
<li><code>bundle install</code></li>
<li><code>rails g graphql:install</code></li>
<li>Gemfile に <code>graphiql-rails</code> が追加されているので <code>bundle install</code></li>
</ul>


<h2>video 追加</h2>

<ul>
<li><code>rails g graphql:object Video id:Int title:String watched:Boolean</code></li>
<li>id は Int ではなく ID が正しいので <code>rails d graphql:object Video id:Int title:String watched:Boolean</code> で消してやり直し</li>
<li><code>rails g graphql:object Video id:ID title:String watched:Boolean</code></li>
<li><code>app/graphql/types/query_type.rb</code> を変更</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  field :video do
</span><span class='line'>    type Types::VideoType
</span><span class='line'>    argument :id, !types.ID
</span><span class='line'>    description 'Find video by ID'
</span><span class='line'>    resolve -&gt;(obj, args, ctx) { Video.find(args["id"]) }
</span><span class='line'>  end</span></code></pre></td></tr></table></div></figure>


<p><code>rails s</code> を起動して <code>http://localhost:3000/graphiql</code> (express-graphql での例と違って <code>/graphql</code> ではなく <code>i</code> が入る) で</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  video(id: 1) {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>を試すと server 側で <code>NameError (uninitialized constant Video):</code> になるのを確認。</p>

<ul>
<li><code>rails g model video title watched:boolean</code></li>
<li><code>rake db:migrate</code></li>
<li><code>rails c</code> で <code>Video.create(title: "Hoge", watched: false)</code> などでレコードを作成しておく</li>
<li>graphiql で試す</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  video(id: 1) {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>    watched
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>mutation</h2>

<ul>
<li><code>app/graphql/mutations/create_video.rb</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 動かない
</span><span class='line'>Mutations::CreateVideo = GraphQL::Relay::Mutation.define do
</span><span class='line'>  name "CreateVideo"
</span><span class='line'>
</span><span class='line'>  return_field :video, Types::VideoType
</span><span class='line'>
</span><span class='line'>  input_field :title, !types.String
</span><span class='line'>
</span><span class='line'>  resolve -&gt;(obj, args, ctx) {
</span><span class='line'>    return Video.create(title: args["title"])
</span><span class='line'>  }
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>app/graphql/getting_started_graphql_ruby_schema.rb</code> に <code>mutation(Mutations::CreateVideo)</code> を追加</li>
<li><code>GraphQL::Schema::InvalidTypeError (CreateVideo has an invalid type: must be an instance of GraphQL::BaseType, not GraphQL::Relay::Mutation</code> になってうまくいかない</li>
<li><code>rails g graphql:mutation</code> は relay mutation 用で違うらしい</li>
</ul>


<h2>クライアント</h2>

<ul>
<li><a href="http://dev.apollodata.com/react/">http://dev.apollodata.com/react/</a> が redux っぽくてしっくりきたらしい。</li>
<li>rack-cors の設定が必要?</li>
<li><a href="https://github.com/facebook/relay">https://github.com/facebook/relay</a></li>
</ul>


<h2>mutation の動くコード例</h2>

<p>rito さんに動く例をみせてもらって修正。</p>

<p><code>app/graphql/mutations/video.rb</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Mutations::Video = GraphQL::ObjectType.define do
</span><span class='line'>  name "mutation"
</span><span class='line'>
</span><span class='line'>  field :video, Types::VideoType do
</span><span class='line'>    description "Create a video"
</span><span class='line'>    argument :title, !types.String
</span><span class='line'>
</span><span class='line'>    resolve -&gt;(obj, args, ctx) {
</span><span class='line'>      Video.create(title: args["title"], watched: false)
</span><span class='line'>    }
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>(<code>name "Video"</code> にすると <code>Duplicate type definition found for name 'Video'</code> で動かなかった。)</p>

<p><code>app/graphql/getting_started_graphql_ruby_schema.rb</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GettingStartedGraphqlRubySchema = GraphQL::Schema.define do
</span><span class='line'>  query(Types::QueryType)
</span><span class='line'>  mutation(Mutations::Video)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><code>http://localhost:3000/graphiql</code> で以下を試す。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mutation M {
</span><span class='line'>  video(title: "foo") {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>    watched
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  video(id: 2) {
</span><span class='line'>    id
</span><span class='line'>    title
</span><span class='line'>    watched
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>追加されたのがみえたら OK</p>

<p>時間切れで試せなかったけど、 mutation を複数追加する場合はどうなるのかがわからなかった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian 9 "Stretch" リリースパーティ in 関西に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-18-kansai-debian-meeting.html"/>
    <updated>2017-06-18T13:24:10+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://debianjp.connpass.com/event/59443/">Debian 9 &ldquo;Stretch&rdquo; リリースパーティ in 関西</a>に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<h2>オープニング</h2>

<ul>
<li>リリースされたらしい。</li>
<li>リリースノートからのパッケージのバージョンいろいろ</li>
<li>変更点いろいろ</li>
<li>MariaDB → MySQL</li>
<li>GnuPG</li>
<li>デバッグシンボル向けの新しいアーカイブ: stretch-debug</li>
<li>Xorg サーバーは root 権限が不要になった</li>
<li>sysvinit だと X で問題がおきるらしい?</li>
<li>upstart はなくなったらしい</li>
<li>Perl 関連で問題が起きる可能性がある?</li>
</ul>


<h2>さくらインターネット様からお知らせ</h2>

<p>さくらの VPS やさくらのクラウドでは ISO イメージアップロードで使えますという話</p>

<h2>オープニング続き</h2>

<ul>
<li><a href="https://www.debian.org/News/2017/20170617">https://www.debian.org/News/2017/20170617</a></li>
<li>リリースが確認できたので乾杯に移行</li>
</ul>


<h2>デスクトップ環境の話</h2>

<ul>
<li>インストーラーの途中でデスクトップ環境が選べるようになった</li>
<li>リリースノートとインストールガイドは流し読みで良いのでみておくと良い</li>
<li>UEFI は対応しているが、セキュアブート対応は見送られた</li>
<li>プロプライエタリなファームウェアが必要なハードウェアの場合はフェームウェア入り非公式イメージを使うのが楽</li>
<li>カーネルにおけるフリーと Debian のフリーが違うので、そういうもの (非公式イメージ) が存在する</li>
<li>non-free が Debian 公式ではないのと同様の意味で非公式</li>
<li>root パスワードを設定しなければ root を無効にして sudo を使うようにできる (以前からそうだった)</li>
<li>netinst の iso でデスクトップ環境のみチェックして個別のデスクトップ環境を選ばなかった場合は GNOME になる</li>
<li>複数入れた場合にどうなるのかは未調査</li>
<li>というわけで GNOME デスクトップの話</li>
<li>GNOME 3 は初見だと使い方がわからない</li>
<li>今回は gnome-initial-setup パッケージが追加されたので案内が出るかと思ったら出ない?</li>
<li>gnome-initial-setup パッケージを手動で入れてログアウトしてログインし直すと出る</li>
<li>初期設定の後、ヘルプが開く</li>
<li>gnome-initial-setup で設定されていないと、キーボード設定が英語キーボードになっている</li>
<li>フォントを入れる</li>
<li>フォントを削除する</li>
<li>fonts-droid-fallback が Android でのいわゆる中華フォントなので、完全削除すると良い</li>
<li>Noto Serif CJK は backports に入るらしい</li>
<li>ターミナルとか向けには migmix とか ricty とか</li>
<li>丸いフォントが好みでない人は fonts-vlgothic を消して IPA フォントを使うと良い</li>
<li>ツッコミで fontconfig が難しい話</li>
<li>右上から開ける設定の他に Tweak Tool</li>
<li>GNOME 拡張機能は JavaScript と CSS でできている</li>
<li>主要なものはパッケージで入れるのが良いのでは</li>
<li>オススメ: gnome-shell-extension-dashtodock, gnome-shell-extension-top-icons-plus</li>
<li>会場から: Alt+F2 r Enter で gnome-shell が再起動する</li>
<li>uim-toolbar-gtk3-systray が出てこない?</li>
<li>起動順序の問題で uim-toolbar-gtk3-systray の後に gnome-shell が起動するので認識されていない</li>
<li>回避策1: gnome-shell を再起動</li>
<li>回避策2: alternative で /bin/true にしておいて uim-toolbar-gtk3-systray は autostart でユーザーが起動する</li>
<li>回避策3: uim を諦める</li>
<li>お好みで: gnome-shell-extension-move-dock, gnome-shell-extension-remove-dropdown-arrows, gnome-shell-extension-impatience, gnome-shell-extension-suspend-button</li>
<li>パッケージ以外の拡張機能は GNOME Shell Extensions というサイトから</li>
<li>ブラウザー拡張の chrome-gnome-shell でアップデートがブラウザー経由でできる</li>
<li>Dash to Panel と Arc Menu で Windows 風にできる</li>
<li>デスクトップにアイコンを表示して Nautilus のアイコンサイズを変更するとデスクトップのも一緒に変わる</li>
<li>隠し設定で切り離すこともできるらしい</li>
<li>プロプライエタリなビデオドライバを使うなら contrib と non-free は必須</li>
<li>backports の話</li>
<li>software-properties-gtk で (synaptic から) 追加すると /etc/apt/trusted.gpg が壊れるのに昨日気づいた</li>
<li>Firefox ESR の Accept-Language が en のまま</li>
<li>削除して登録し直すとなおる</li>
</ul>


<p>追加で Debian T シャツの話</p>

<h2>Ryzen の話</h2>

<ul>
<li>lurdan さん</li>
<li>Ryzen の話</li>
<li><a href="https://www.sakura.ad.jp/koukaryoku/">機械学習、データ解析なら 高火力コンピューティング | さくらインターネット</a></li>
<li><a href="http://itpro.nikkeibp.co.jp/atcl/column/14/346926/022700857/">ニュース解説 - グーグルもGPUクラウドに参入、4社のコスパ比較：ITpro</a></li>
<li>テラフロップスあたりの月額料金が安い</li>
<li>時間貸しなどの時は初期費用はいらないらしい</li>
<li>Ubuntu インストールしたての状態なので、使うパッケージなどのインストール作業が必要</li>
<li><a href="https://www.sakura.ad.jp/education/">さくらの文教向けソリューション｜さくらインターネット</a></li>
<li>Ryzen の話に戻り</li>
<li>linux kernel 4.10 から対応コードが入っている</li>
<li>その他の対応も考えると 4.11 以降が望ましい</li>
<li>Proxmox は Debian のユーザーランドに Ubuntu zesty のカーネルなので、こういう用途の自宅サーバーには Proxmox VE が良いのではないか</li>
<li><a href="https://twitter.com/search?q=%23Ryzen_SEGV_Battle">#Ryzen_SEGV_Battle - Twitter検索</a></li>
</ul>


<h2>Stretch リリース</h2>

<ul>
<li>uwabami さん</li>
<li>アップグレードの人柱の話</li>
<li>何台もあげたが特にはまらなかった</li>
<li>リリースノート読み</li>
<li><a href="https://www.debian.org/releases/stretch/amd64/release-notes/ch-whats-new.ja.html">第2章 Debian 9 の最新情報</a></li>
<li><a href="https://www.debian.org/releases/stretch/amd64/release-notes/ch-information.ja.html">第5章 stretch で注意すべき点</a></li>
<li>pass がおすすめ</li>
<li>net-tools パッケージ (ifconfig など) が非推奨</li>
<li>sl 的なものを設定するのが良いかも</li>
<li>PIE: カーネルを更新しておかないとセグメンテーションフォルトになる可能性があるので jessie でもちゃんと 8.8 (以降) に更新してから stretch にあげ始める必要がある</li>
<li>一番のハマりどころになりそう</li>
<li>セキュリティサポートの制限</li>
<li>midori, konqueror などは完全なセキュリティサポートがないので Firefox や Chromium を使いましょう</li>
<li>node.js はリソース不足で一切対応されない</li>
<li>php とかコンパイラー対応がなくなった Chromium とか WordPress とか、セキュリティサポートがなくなった例は過去にもある</li>
<li><a href="https://security-tracker.debian.org/tracker/">Security Bug Tracker</a></li>
<li>「旧式の暗号と SSH1 プロトコルは OpenSSH では標準で無効にされています」</li>
<li>evdev から libinput</li>
<li>「Perl での変更がサードパーティ製ソフトウェアを壊す可能性があります」</li>
<li>カレントディレクトリが <code>@INC</code> からなくなる話</li>
<li>ライブアップグレード</li>
<li>jessie のまま最新に更新を確認</li>
<li>apt line 書き換え</li>
<li>apt-get update</li>
<li>apt-get upgrade</li>
<li>apt-get dist-upgrade</li>
<li><a href="https://wiki.debian.org/UnattendedUpgrades">UnattendedUpgrades - Debian Wiki</a></li>
<li>設定ファイルは選択に応じて <code>*.dpkg-old</code> とか <code>*.dpkg-dist</code> ができる</li>
<li>apt autoremove</li>
<li>reboot</li>
<li>sysvinit にしていたので systemd に移行</li>
<li>sysvinit がなくなったので sudo reboot は進むがコンソールに帰ってこなくなるので、処理が進んだ段階でブチっと切れて進む</li>
<li>atig は bundle し直しで動いた</li>
<li>znc も何か直したら動いた</li>
<li>bitlbee は動いていなかった</li>
<li>さくらインターネットさんで借りている VPS の stretch への upgrade の Live 実演終了</li>
</ul>


<h2>LT</h2>

<p>ここから LT タイム。</p>

<h2>最新ハードウェアへのインストール</h2>

<ul>
<li>初めて Jessie をインストールしたときに起きたエラーについて</li>
<li>「ブートローダーのインストールに失敗しました。」</li>
<li>原因: GRUB が NVMe に対応していない</li>
<li>解決策1: NVMe 規格の SSD を買わない (おすすめは SATA)</li>
<li>解決策2: NVMe に対応しているブートローダーを使う</li>
<li>NVMe に対応しているブートローダー: rEFInd</li>
</ul>


<p>「ブートローダーのインストールに失敗しました。」というメッセージは見覚えがあったので、インストーラーで出たメッセージだとすぐにわかったけど、わからなかった人もいたようで、どんな状況で見たのか思い出そうとしたけど、思い出せなかったので、仮想環境か何かで特殊なことをしていて出ただけで困らなかったのかもしれない、と思った。</p>

<h2>yabuki さんの話</h2>

<p>自分の準備中で聞けず。</p>

<h2>Debian での OpenSSH の TCP wrappers サポート</h2>

<p>なぜか HDMI を接続しても反応しなかったので、PDF にして、さとうさんの PC を借りて発表しました。</p>

<p>発表資料はいつも通り<a href="https://github.com/znz/openssh-on-debian9">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/openssh-on-debian9/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/stretchopensshtcp-wrappers">slideshare</a>, <a href="https://speakerdeck.com/znz/stretchdefalseopensshfalsetcp-wrapperssapoto">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-openssh-on-debian9">RubyGems</a> にあげています。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/openssh-on-debian9/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/openssh-on-debian9/" title="stretchでのOpenSSHのTCP wrappersサポート">stretchでのOpenSSHのTCP wrappersサポート</a>
</div>


<h2>T シャツの話</h2>

<p>欲しい人は OSC 京都や勉強会で、または @nogajun さんに直接連絡</p>

<h2>告知</h2>

<ul>
<li>次回は 7月はなしで、代わりに<a href="https://www.ospn.jp/osc2017-kyoto/">オープンソースカンファレンス2017 Kyoto</a>の8月5日で。</li>
<li><a href="https://k-of.jp/">KOF</a> (今年のサイトはまだない)</li>
<li><a href="https://histudy.connpass.com/">姫路IT系勉強会</a>の8月が今回と同じさくらインターネットさんが会場</li>
</ul>


<h2>感想</h2>

<p>リリースは twitter などではリリースされたっぽい感じでしたが、たぶん最後のアナウンスっぽい<a href="https://lists.debian.org/debian-announce/2017/msg00003.html">リリースアナウンスのメール</a>が「Sat, 17 Jun 2017 20:22:36 -1000」つまり日本時間だと「2017-06-18 15:22:36 +0900」で、少なくともリリースパーティー中にはリリースされていたようです。</p>

<p>すでにあげた人の話では、特に大きなトラブルもなさそうなので、安心してあげられそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第11回 コンテナ型仮想化の情報交換会＠大阪に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-17-lxcjp.html"/>
    <updated>2017-06-17T13:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lxcjp</id>
    <content type="html"><![CDATA[<p><a href="https://ct-study.connpass.com/event/55305/">第11回 コンテナ型仮想化の情報交換会＠大阪</a>に参加してきました。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>案内など</h2>

<ul>
<li>Wi-Fi はないはずだったが、提供できた</li>
<li>ハッシュタグは <a href="https://twitter.com/search?q=%23lxcjp">#lxcjp</a></li>
<li>(<a href="https://togetter.com/li/1121078">第11回 コンテナ型仮想化の情報交換会＠大阪 #lxcjp - Togetterまとめ</a>にまとめられています。質疑応答はメモ間違いもありそうなので、Togetter の方が正確そうです。)</li>
</ul>


<h2>Linuxコンテナ基礎(仮)</h2>

<ul>
<li>自己紹介</li>
<li><a href="http://gihyo.jp/admin/serial/01/linux_containers">LXCで学ぶコンテナ入門 －軽量仮想化環境を実現する技術</a></li>
<li>基礎知識</li>
<li>単独の機能があるわけではなく、 namespace とか cgroup とかを組みわせて実現されている</li>
<li>chroot とか pivot_root とか</li>
<li>speakerdeck で資料は公開予定</li>
<li>speakerdeck に元になった情報の多い資料も公開されている</li>
<li><a href="https://speakerdeck.com/tenforward/11th-ctstudy">Linux コンテナの基礎 / 11th CTStudy by tenforward</a></li>
</ul>


<h2>Haconiwa</h2>

<ul>
<li>イベントページでは「変拍子パワーポップ系コンテナランタイムHaconiwa - 夏を古くするな！」というタイトルになっていましたが、実際のタイトルは変わっていました。</li>
<li>自己紹介</li>
<li>Haconiwa とは?</li>
<li>mruby</li>
<li>ビュッフェ型コンテナランタイム</li>
<li>ビュッフェ型とは Web フレームワークでいうと Padrino</li>
<li>ruby で色々かける</li>
<li>コンテナの初期化処理とか</li>
<li>シグナルハンドラで CPU 割り当てを増減したりとか</li>
<li>Sqale という PaaS の運用のお手伝いの話</li>
<li>やりたいことが lxc などが古くて実現が難しかった</li>
<li>もしイチからやるなら?</li>
<li>コンテナ勉強会との出会い</li>
<li>RubyKaigi 2016 に応募して選考に通る前に完成</li>
<li>Haconiwa の実装方針</li>
<li>コア部分は Pure Ruby</li>
<li>システムコールは mruby gem でラップ</li>
<li>全てはプロセス</li>
<li>sample/process.rb を改変したものでデモ</li>
<li>関連技術</li>
<li>FastContainer</li>
<li><a href="http://hb.matsumoto-r.jp/entry/2016/11/11/234915">FastContainerアーキテクチャ構想</a></li>
<li>プロセスの3分類: immortal (いわゆるデーモン), short-lived (バッチとか ls とかの単独のコマンド), mortal</li>
<li>2つの中間的なものを定義する</li>
<li>mortal な存在としての FastCGI</li>
<li>inetd, xinetd</li>
<li>immortal なコンテナ: システムコンテナ, アプリケーションコンテナ, VPS として使う場合, Dokku</li>
<li>short-lived なコンテナ: アプリケーションコンテナで単一のジョブ: systemd-nspawn, FaaS</li>
<li>なぜ FastContainer か</li>
<li>負荷が上がった時: スケールアップ, スケールアウト</li>
<li>従来の VM では高速なスケールアップは非常に困難</li>
<li>コンテナでも煩雑さは残る</li>
<li>Haconiwa がスケールアップについての問題を解決</li>
<li>スケールアウトも従来の VM ではインスタンスの複製が難しいなど</li>
<li>コンテナもコストは下がるが自動化には課題がある</li>
<li><a href="http://mikeda.hatenablog.com/entry/2015/02/01/195102">負荷低すぎはもはや障害じゃないのか</a></li>
<li>FastContainer が解決するもの: スケールアウトについて インスタンスの入れ替え、増減が容易になる</li>
<li>+Haconiwa が解決するもの: 起動するコンテナ数をコンテナ自身で動的に操作させることが可能</li>
<li>Container as Code</li>
<li>その他のメリット</li>
<li>セキュリティ的観点: コンテナは、常に入れ替わるので、パッケージのアップグレードや、ミドルウェアの更新が非常になめらかに行える</li>
<li>運用的観点: どのホストであっても同じように動く。ホストをリソースプールとみなして透過的に扱える</li>
<li>FastContainer は実現できるか?</li>
<li>Scheduler: nomad</li>
<li>CoreAPI+CMDB</li>
<li>Web Proxy / Dispatcher : 起動のきっかけにもなるので Dispatcher</li>
<li>どうして Haconiwa を作ったのですか?</li>
<li>alternative rock</li>
<li>Docker はすごいが、それだけでいいのか</li>
<li>オルタナティブな存在が新しい価値観を届けるかもしれないのだ。</li>
<li>質疑応答</li>
<li>Q: どこで負荷を判別するか</li>
<li>A: cgroup の stat をベースに, veth (?) とかの負荷をみて</li>
<li>udzura cgroup で検索</li>
<li><a href="http://udzura.hatenablog.jp/entry/2017/05/02/175445">cgroup経由でシステムの利用状況を知る - CPU編</a> あたりが関連?</li>
<li>Q: mruby?</li>
<li>A: mruby の説明など</li>
<li>システムコール部分も Ruby っぽくやるために mruby という感じ?</li>
<li>Q: Web 以外の技術で FastCGI のような技術を応用することを考えているか?</li>
<li>A: nginx は tcp proxy 機能もあるので sshd とかも試している</li>
<li>Q: 具体的な利用予定は?</li>
<li>A: ロリポップ的に使えてオートスケールできるものができると良いかも?</li>
<li><a href="https://speakerdeck.com/udzura/the-alternative-container">変拍子パワーポップ系コンテナ、Haconiwa /the-alternative-container</a></li>
</ul>


<h2>休憩</h2>

<p>懇親会の追加申し込み受付案内</p>

<h2>chrootとnetwork namespaceでつくる簡易コンテナ</h2>

<ul>
<li>自己紹介</li>
<li>自作コンテナのモチベーション</li>
<li>Linux コンテナの勉強、既存コンテナ技術の再確認、手元でのネットワークテスト環境</li>
<li>chroot × network namespace × UTS namespace</li>
<li>UTS namespace は管理しやすいから</li>
<li>nginx + mackerel-agent + sshd</li>
<li>コマンドで作成</li>
<li>デモ</li>
<li>イメージ作成は docker export とか debootstrap とかが使える</li>
<li>namespace の永続化</li>
<li>/proc/[PID]/ns 配下にある特殊ファイル</li>
<li>bind マウントを使って永続化する</li>
<li>mount &ndash;bind /run/utsns /run/utsns</li>
<li>mount &ndash;make-shared /run/utsns</li>
<li>unshare -u mount &ndash;bind /proc/self/ns/uts /run/utsns/test01</li>
<li>最近の unshare コマンドなら unshare &ndash;uts=/run/utsns/test01</li>
<li>UTS namespace: 主に管理のため</li>
<li>Network の作成</li>
<li>veth 作って bridge に接続</li>
<li>Netowrk はポータビリティに影響が出やすい</li>
<li>一時期 docker が頑張ってた: VXLAN による overlay Network など</li>
<li>改善すべき箇所がたくさんある面白い分野</li>
<li>chroot 環境の作成</li>
<li>コンテナの中でも systemd を動かすと shared マウントだとコンテナの片付けの時に親の方まで一緒にアンマウントされてしまってはまるので、 rslave が必要</li>
<li>コンテナ内でのプロセスの実行: nsenter した上で chroot する</li>
<li>chroot 配下では systemd は動作しないので注意が必要</li>
<li>chroot の代わりに systemd-nspawn を使う</li>
<li>PID namespace</li>
<li>docker 1.13 で run に init オプションがついた</li>
<li>ss はネームスペースを指定できる</li>
<li>いけてない箇所</li>
<li>質疑応答</li>
<li>Q: udzuraさん: VXLAN を検証している?</li>
<li>A: 業務では使っていなくて趣味でやっている。 Open vSwitch で軽く試したことはある。</li>
</ul>


<p>veth のデモは <a href="https://asciinema.org/a/122327">Network Namespace &amp; Veth demo</a> を参照</p>

<h2>LXD 採用から運用までの顛末記</h2>

<ul>
<li>自己紹介</li>
<li>LXD 採用で、XREA、ハイパフォーマンスで安定稼働しております</li>
<li>XERA の歴史</li>
<li>古い物理サーバーから KVM</li>
<li>完全仮想化の利点と問題点</li>
<li>時代はコンテナだということで準仮想化</li>
<li>なぜ LXD か?</li>
<li>Docker: ユーザーの権限独立とネットワーク周りの問題が解決できず</li>
<li>KVM: オーバーヘッドが多くてリソースが無駄</li>
<li>OpenVZ: コンテナより遅かった</li>
<li>VMware: 考えたこともない</li>
<li>LXD: コンテナだし、リソースが有効に使えて、ヒャッハーだ！</li>
<li>LXD 採用からサービス開始まで</li>
<li>マイグレーションに伴う障害はあったが、コンテナが原因の問題はおきなかった</li>
<li>LXD の運用環境</li>
<li>ホスト Ubuntu 16.04 LTS</li>
<li>ゲスト CentOS 7</li>
<li>ZFS + ブロックデバイス</li>
<li>ホストシステム構築時のトラブル</li>
<li>オープンファイル数の上限編</li>
<li>試行錯誤した結果 <code>fs.inotify.max_user_instances</code> だった</li>
<li>その他色々上限解除</li>
<li>LXD 運用編</li>
<li>1: ユーザークォータがきかない→運用でカバー</li>
<li>2: マイグレーション時に Apache のアラートがあがる</li>
<li>原因は Apache RLimitNPROC + Potential DoS attacks</li>
<li>同じユーザーだったのが原因</li>
<li><a href="https://linuxcontainers.org/lxc/security/">https://linuxcontainers.org/lxc/security/</a></li>
<li>3: ホストのロードアベレージが急激に上昇→ZFS がボトルネック、チューニングを実施</li>
<li>4: コンテナ自体のリソース制御</li>
<li>5: (よそ見をしていたら見逃した)</li>
<li>LXD に変えてどうだったか</li>
<li>よかったという話</li>
<li>質疑応答</li>
<li>Q: ホスト間のマイグレーションは使っているか?</li>
<li>A: KVM からのマイグレーションだったので今回は使っていない。次回は使うかもしれない。</li>
<li>Q: ZFS で苦労されたという話だったが、他に選択肢はあったのか?</li>
<li>A: ZFS がデフォルトっぽい感じだったので、選んだ。ブロックデバイスかどうかというのはあったが、ブロックデバイスを選んだ。</li>
<li>Q: Docker のネットワーク周りの問題とは?</li>
<li>担当者 A: ポートとか IP とかの問題</li>
</ul>


<h2>休憩</h2>

<p>懇親会の案内</p>

<h2>Joe&rsquo;s と LXC とその運用実例と</h2>

<ul>
<li>Joe&rsquo;s Cloud Computing</li>
<li>会社紹介</li>
<li>Speaker 紹介</li>
<li>Joe&rsquo;s と LXC</li>
<li>2001年: Scientific Linux 6 with kernel 2.6.42 (後で訂正あり) + patch, zfs on fuse: 当初よりテンプレートを意識した設計</li>
<li>2010年〜: ubuntu に乗り換え, LXD への移行模索中</li>
<li>現在: 共用サーバーの半分が LXC 駆動</li>
<li>LXC と Docker</li>
<li>kvm との比較</li>
<li>LXC 運用のメリット: リソース管理がしやすい</li>
<li>運用例: zabbix 運用, 障害対応, IPブロック, プロセス管理</li>
<li>運用テストで LXC で zabbix を作成</li>
<li>nagios から移行</li>
<li>本番環境に移動</li>
<li>lxc だと rsync でコピーして起動できる</li>
<li>同一ネットワークだと監視の意味が、ということでさくらクラウドに移動</li>
<li>障害対応</li>
<li>ハードウェア障害</li>
<li>起動しなくても HDD から読み出せるならレスキュー環境で起動して吸い出してなんとかできる</li>
<li>IP ブロック</li>
<li>ホスト側の FORWARD チェインでブロック</li>
<li>FORWARD なので失敗しても取り消しやすい</li>
<li>ゲスト側が古くて ipset が使えなくてもホスト側で使えるので便利</li>
<li>プロセス管理: ホスト側から監視できる (htop とか)</li>
<li>これからの LXC ホスティング</li>
<li>デプロイ速度の向上</li>
<li>仮想コンソールの実装</li>
<li>Migration / HA の実装</li>
<li>まだまだこれから楽しめる分野</li>
<li>質疑応答</li>
<li>Q: Zabbix のバックアップ運用は?</li>
<li>A: ローカルは HDD が多いマシンがあるのでそこにとっている。リモートはホスト側で rsync と database のバックアップ</li>
<li>Q: ゲスト数はどのくらい?</li>
<li>A: 4コアで1台ぐらいのイメージ。テストでは40台ぐらいで</li>
<li>ディスクの I/O がボトルネックになる。</li>
<li>Q: 特権コンテナ?</li>
<li>A: マネージドは特権コンテナで問題ない。 VPS は非特権コンテナの予定あり。</li>
<li>Q: LXC のバージョンアップやマイグレーションでの気をつけたポイントは?</li>
<li>A: 古いサーバーのバージョン確認 kernel 2.6.42 ではなかった 2.6.32.41 LXC 0.7.4.1</li>
<li><a href="https://speakerdeck.com/samaiyou/joes-and-working-with-lxc">Joe&rsquo;s and working with LXC by samaiyou</a></li>
</ul>


<h2>Dockerコンテナ監視要素の検討</h2>

<ul>
<li>古い情報で誤解されていることがある</li>
<li><a href="http://docs.docker.jp/">http://docs.docker.jp/</a></li>
<li>動機: どのように監視をしたら良いのか?, runC と containerD, 私は私が欲しい監視システムを作りたい</li>
<li>監視と運用: システム稼働状況の把握と対策, サービスレベル</li>
<li><a href="http://www.brendangregg.com/linuxperf.html">http://www.brendangregg.com/linuxperf.html</a></li>
<li>ストレージドライバーによってパフォーマンスが大きく異なる</li>
<li>dockerd (Docker Engine), containerD</li>
<li>スケジューリング + クラスタ管理 = オーケストレーション</li>
<li>良い感じの自動化ツールはまだなさそう</li>
<li>Prometheus</li>
<li>Docker Engine とデーモンの変遷</li>
<li>v1.11〜 は dockerd - containerd - runC になっている</li>
<li><a href="https://www.opencontainers.org/">https://www.opencontainers.org/</a> - runC</li>
<li><a href="https://www.cncf.io/">https://www.cncf.io/</a> - containerd</li>
<li>2013年→2016年夏現在: dockerd デーモンの解体, 従来のコンテナ監視はメトリクス取得に集中</li>
<li>runC</li>
<li>バイナリ配布はされていないので自分で make する必要あり</li>
<li>runc のデモ</li>
<li>Docker Compose</li>
<li>fig が買収されて docker-compose になった</li>
<li>docker swarm mode, overlay network で Routing mesh, docker service create でサービス作成</li>
<li>サービス名で名前解決できる</li>
<li>監視はどうする?</li>
<li>Docker Swarm という swarm mode とは名前は似ているが別物がまだ残っているがそのうち消えるはず</li>
<li>API と SDK</li>
<li><code>curl --unix-socket /var/run/docker.sock -X GET http://v1.29/containers/json?size=true | jq "." | less</code> とかでも情報がとれる</li>
<li><a href="https://github.com/yadutaf/ctop">https://github.com/yadutaf/ctop</a></li>
<li>systemd-cgtop より便利</li>
<li>Q: containerd と runc を意識する必要はあるか?</li>
<li>A: 普段はあまり意識する必要はない</li>
<li>Q: ホスティングサービスでは docker を選ばなかったが、お客様から見えない部分では使いたい</li>
<li>A: さくらの VPS のコントロールパネルなどで docker を使っている</li>
<li>Q: kubernetes とかは?</li>
<li>A: 用途が違うので使い分ければ良いのでは。使いたいものを使えば良いのでは。</li>
<li>ユーザー目線で使いやすいのは swarm mode とか</li>
<li>リソースを有効活用したいのなら mesos とか</li>
<li>kubernetes はあまり詳しくない</li>
<li>mesos は API があって使いやすいらしい</li>
<li>ctop は同じ名前で別のものがある</li>
</ul>


<h2>感想</h2>

<p>lxc/lxd の話がきけてよかったです。Web 上ではあまり見かけないと思っていましたが、使っているところではちゃんと使っていて、安定して運用できていると聞いて、用途によっては使ってみたいと思いました。</p>

<p>Docker の話も普段 Dokku などで使っていて、なんか色々変わっていっているとは感じていましたが、まとまった話として聞けてよかったです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansibleでjsonファイルの設定を更新した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-16-ansible-json.html"/>
    <updated>2017-06-16T21:26:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-json</id>
    <content type="html"><![CDATA[<p>ansible で json ファイル (今回は <code>/etc/docker/daemon.json</code>) を更新したかったのですが、 <code>lineinfile</code> や <code>replace</code> や <code>ini_file</code> のように単独のモジュールで簡単にできるものではなかったので、少し工夫をして実現しました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>ansible 2.3.1.0</li>
</ul>


<p>combine フィルター (後述) が New in version 2.0 なので、 1.x では動かないと思います。</p>

<h2>実例</h2>

<p><a href="https://github.com/znz/ansible-role-docker">https://github.com/znz/ansible-role-docker</a> や <a href="https://github.com/znz/ansible-playbook-gitlab-dokku/tree/master/provision/roles/docker-dns">https://github.com/znz/ansible-playbook-gitlab-dokku/tree/master/provision/roles/docker-dns</a> にあります。</p>

<h2>json ファイル読み込み</h2>

<p>まずは <code>command</code> モジュールで読み込んで、 <code>set_fact</code> で変数に設定しておきます。</p>

<pre><code>- name: "Read daemon.json"
  command: cat /etc/docker/daemon.json
  register: result
  changed_when: no
</code></pre>

<p>記事を書いていて気づいたのですが、リモートからファイルを読み込むには <code>slurp</code> モジュールというのがあるようですが、作った時点では知らなかったので、使っていません。</p>

<p>base64 でエンコードされていて b64decode を通す必要があるようなので、何度も参照するなら、次の <code>set_fact</code> を組み合わせた方が良さそうなのは変わらなさそうです。</p>

<h2>json から dict に変換</h2>

<p>json の文字列から <a href="http://docs.ansible.com/ansible/playbooks_filters.html#filters-for-formatting-data"><code>from_json</code>フィルター</a>で変換します。</p>

<pre><code>- set_fact: docker_daemon_json="{{ result.stdout | from_json }}"
</code></pre>

<h2>combine フィルターでマージ</h2>

<p><a href="http://docs.ansible.com/ansible/playbooks_filters.html#combining-hashes-dictionaries"><code>combine</code>フィルター</a>で設定をマージして、 <code>to_json</code> フィルターで json 文字列に変換してファイルに書き出します。</p>

<p>今回の用途では、ネストしたデータは考慮する必要がなく、トップレベルのキーが一致するもので置き換えられればよかったので、 <code>recursive=True</code> は指定していません。</p>

<p><code>when</code> でのチェックもしておかないと、設定内容としては変わっていないのに、 json 文字列になった時にキーの順番が変わっているのか、 changed になってしまうことがあったので、 <code>when</code> で設定内容に変更がある時だけ書き込むようにしています。</p>

<pre><code>- name: "Update daemon.json"
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0400
  when: "docker_daemon_json != docker_daemon_json|combine({'dns':dns})"
  notify:
  - restart docker
</code></pre>

<p>templates/daemon.json.j2:</p>

<pre><code>{{ docker_daemon_json | combine({"dns": dns}) | to_json }}
</code></pre>

<h2>動作確認</h2>

<p>全体ができた後に、</p>

<ul>
<li>ファイルがない時の動作</li>
<li>設定が変わらない時の動作</li>
<li>設定が変わる時の動作</li>
</ul>


<p>も確認しておきます。</p>

<h2>docker のデーモン設定ファイル</h2>

<p>docker の<a href="http://docs.docker.jp/engine/reference/commandline/dockerd.html#daemon-configuration-file">デーモン設定ファイル</a>は <code>insecure-registries</code> (<code>--insecure-registry=[]</code>) や <code>dns</code> や <code>bip</code> など dockerd のオプションで指定できるものはなんでも指定できます。</p>

<p><a href="http://docs.docker.jp/engine/admin/systemd.html#custom-docker-daemon-options">docker デーモンのオプション変更</a>は systemd の docker.service の設定を変更する方法もあるようですが、ローカルの変更をローカルの独立ファイルに隔離できて、バージョンアップの影響も少なそうなので、 daemon.json を使うことにしました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[letsencryptの証明書の更新に失敗していた(IPv6が原因だった)]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-14-failed-to-update-letsencrypt.html"/>
    <updated>2017-06-14T19:36:08+09:00</updated>
    <id>http://blog.n-z.jp/blog/failed-to-update-letsencrypt</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s Encrypt の証明書の自動更新が失敗しているサーバーがあって、原因を調べたら AAAA レコードに設定している IPv6 アドレスが間違っていたのが原因でした。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>Debian GNU/Linux 8.8 (jessie)</li>
<li>certbot 0.10.2-1~bpo8+1</li>
<li>さくらインターネットの VPS で IPv6 を使用 (過去に tun6rd を使っていた)</li>
</ul>


<h2>現象</h2>

<p>2016-03-29 に現在のサーバーに移動した時に A レコードを書き換えただけではなく、追加で tun6rd の頃の IPv6 アドレスを AAAA レコードに設定してしまいました。
別の IPv6 アドレスを設定しているサーバーからの接続に時間がかかるという現象が発生していたものの、原因がわからず、ずっとそのままの状態でした。</p>

<p>StartCom の証明書が事実上使えなくなってしまったので、 2016-12-04 に Let&rsquo;s Encrypt の証明書に変更しました。
初回の証明書の発行のときには問題なく発行できていました。
2017-02-03,2017-04-04 の自動更新も問題なく動いていました。</p>

<p>6月の自動更新で突然失敗するようになり、数日様子を見ていましたが、失敗し続けていたので、詳しく調査することにしました。</p>

<h2>調査</h2>

<p>色々悩んだ結果、 <code>/var/log/letsencrypt/letsencrypt.log</code> を眺めていたところ <code>addressUsed</code> に IPv6 のアドレスが出ているのに気づいて、もしかして、と思ってさらに調べることにしました。</p>

<pre><code>"validationRecord": [
  {
    "url": "http://XXX.example.org/.well-known/acme-challenge/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
    "hostname": "XXX.example.org",
    "port": "80",
    "addressesResolved": [
      "XX.XXX.XXX.XX",
      "2001:e41:XXXX:XXXX::1"
    ],
    "addressUsed": "2001:e41:XXXX:XXXX::1",
    "addressesTried": []
  }
]
</code></pre>

<p>該当のサーバーから <code>ping6 www.kame.net</code> などは問題なく通り、該当サーバーへの <code>ping6</code> も問題なく通ることなどを確認していたところ、IPv6 アドレスが違うことに気づきました。</p>

<h2>修正</h2>

<p>AAAA レコードを <code>2403:3a00:XXX:XXXX:XX:XXX:XXX:XX</code> に修正して、急いでいるわけでもないので certbot の自動実行を待ってみたところ、ちゃんと更新されました。</p>

<h2>関連情報</h2>

<p><a href="https://letsencrypt.jp/usage/dvsni-challenge-error.html">DVSNI challenge エラーの対処法</a>に <code>urn:acme:error:connection</code> の原因の例として A レコードのことは書いてあったのに AAAA レコードのことが書かれていなくて、可能性に気づくのが遅れたので、 AAAA レコードのことも書いてあると良いのではないかと思いました。</p>

<h2>まとめ</h2>

<p>Let&rsquo;s Encrypt のサーバーの実装が変わったのか、IPv6 アドレスから IPv4 へのフォールバックをしなくなっていて、IPv6 アドレスの間違いに気づくことができ、接続が遅かった現象も解決しました。</p>

<p>主に IPv4 を使っているとなかなか気づかないので、 AAAA レコードを設定するときは、ちゃんと確認しておかないと、後でわかりにくいトラブルの原因になると実感しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cron(crontab)の代わりにsystemdのtimerを使う]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-04-cron-systemd-timer.html"/>
    <updated>2017-06-04T14:18:19+09:00</updated>
    <id>http://blog.n-z.jp/blog/cron-systemd-timer</id>
    <content type="html"><![CDATA[<p>最近 <a href="https://github.com/znz/ansible-playbook-gitlab-dokku">gitlab omnibus などの環境</a>を作っていて、<a href="https://github.com/znz/ansible-role-gitlab-ce">GitLab CE の role</a> でバックアップ処理を定期実行するのに crontab ではなく systemd の timer を使ってみました。</p>

<!--more-->


<h2>利点</h2>

<ul>
<li>systemd 管理下で統一的に扱えるので、覚えれば楽</li>
<li>ログも journald で統一されるので cron だといちいちメールが飛ぶと鬱陶しいような粒度でも簡単にログに残せる</li>
<li>環境変数なども含めた環境が本番と同じ状態ですぐに実行を試しやすい</li>
<li>systemd 依存の機能が使える (後述の例では After と Requires)</li>
</ul>


<p>などが利点に感じました。</p>

<h2>欠点</h2>

<ul>
<li>情報が cron (crontab) に比べてまだ少ないので、何かあったときに調べにくい</li>
<li>systemd に大きく依存してしまう</li>
</ul>


<p>などが欠点に感じました。</p>

<h2>確認環境</h2>

<ul>
<li>Ubuntu 16.04.2 LTS (xenial)</li>
<li>systemd 229-4ubuntu17</li>
</ul>


<h2>情報表示</h2>

<ul>
<li><code>systemctl list-timers</code> でタイマーの次回実行予定時刻、前回実行時刻などを含めて表示されます。</li>
<li><code>systemctl status systemd-tmpfiles-clean.timer</code> でタイマーの情報、<code>systemctl status systemd-tmpfiles-clean.service</code> で実行されるサービスの情報が表示されます。</li>
<li><code>journalctl -u systemd-tmpfiles-clean.timer</code> や <code>journalctl -u systemd-tmpfiles-clean.service</code> でログが表示されます。 <code>systemd-journal</code> グループに入っていない場合は <code>sudo</code> が必要かもしれません。 <code>systemd-journal</code> に入っていれば <code>systemctl status</code> でも最近のログが表示されます。</li>
<li>Type=oneshot (後述) の場合、ログの Starting が実行開始時刻で Started が実行終了時刻になるようです。</li>
</ul>


<h2>設定ファイルの場所</h2>

<p><code>systemctl status</code> で <code>Loaded: loaded (/lib/systemd/system/systemd-tmpfiles-clean.timer; static; vendor preset: enabled)</code> のようにパスが出るので、システムのものは <code>/lib/systemd/system/</code> にあることがわかります。</p>

<p>タイマーではありませんが、 gitlab-ce では <code>/usr/lib/systemd/system/gitlab-runsvdir.service</code> に service が入っていたので、 <code>/usr/lib/systemd/system/</code> も参照されるようです。</p>

<p>自分で作成する場合は systemd の流儀に従って <code>/etc/systemd/system/</code> に作成すれば良いと思います。</p>

<h2>service 作成</h2>

<p><code>/etc/systemd/system/gitlab-backup.service</code> を以下の内容で作成しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Backup gitlab
</span><span class='line'>After=gitlab-runsvdir.service
</span><span class='line'>Requires=gitlab-runsvdir.service
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>Type=oneshot
</span><span class='line'>ExecStart=/opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Unit の Description は適当にわかりやすい説明を書けば良いと思います。</li>
<li>Service の Type は cron 代わりに使う場合は oneshot にするのが普通のようです。</li>
<li>ExecStart に crontab で書いていたようにコマンドを書きます。 crontab と同じように、複雑な場合は無理にここに書こうとせずに別途シェルスクリプトなどを作成して実行する方が良さそうです。</li>
<li>After と Requires はバックアップ処理を実行するのに postgresql などが実行されている必要がありそうだったので書きました。このあたりが必要かどうかは用途によると思います。</li>
</ul>


<h2>timer 作成</h2>

<p><code>/etc/systemd/system/gitlab-backup.timer</code> は以下の内容で作成しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Backup gitlab
</span><span class='line'>
</span><span class='line'>[Timer]
</span><span class='line'>OnCalendar=*-*-* 2,14:00
</span><span class='line'>Persistent=true
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=timers.target</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Unit の Description は適当にわかりやすい説明を書けば良いと思います。</li>
<li>OnCalendar で毎日 2:00 と 14:00 に実行するように設定しています。ローカルタイムでの指定になります。詳細は systemd のドキュメントを参照してください。</li>
<li>Persistent=true は<a href="https://wiki.archlinuxjp.org/index.php/Systemd/%E3%82%BF%E3%82%A4%E3%83%9E%E3%83%BC" title="systemd/タイマー - ArchWiki">systemd/タイマー - ArchWiki</a>によると「システムの電源が切られていたなどの理由で、最後の起動時間を過ぎていた場合、すぐに実行されます」ということのようで、 anacron 的な動作が期待できるかと思って指定しています。</li>
<li>Install の WantedBy=timers は <code>systemctl enable</code> や <code>systemctl disable</code> ができるようにするための定型句のようです。</li>
</ul>


<h2>設定反映</h2>

<p><code>sudo systemctl daemon-reload</code> で反映させます。
新規作成時などは必要ないかもしれませんが、実行しておくと確実です。</p>

<h2>有効化</h2>

<p><code>sudo systemctl enable gitlab-backup.timer</code> で <code>/etc/systemd/system/timers.target.wants/gitlab-backup.timer</code> に <code>/etc/systemd/system/gitlab-backup.timer</code> へのシンボリックリンクが作成されて有効になります。</p>

<h2>無効化</h2>

<p><code>sudo systemctl disable gitlab-backup.timer</code> で無効に戻せます。
timer を消したくなったときには disable してから timer ファイル (と service ファイル) を削除すると良いと思います。
(ファイル削除後は <code>sudo systemctl daemon-reload</code> もすると良いかもしれません。)</p>

<h2>テスト実行</h2>

<p><code>sudo systemctl start gitlab-backup.service</code> でテスト実行できます。</p>

<h2>実行時間を散らす</h2>

<p>Timer セクションに RandomizedDelaySec を設定するとランダムスリープをいれて実行時間をばらけさせることができます。
<code>certbot.timer</code> などで使われています。</p>

<p>試しに <code>RandomizedDelaySec=10min</code> といれてみると、これを使ったときには設定が反映されたタイミングや前回の実行終了後などの次の実行が決まった段階でランダムスリープの時間が決まるようで、 <code>journalctl -u gitlab-misc-backup.timer</code> で <code>gitlab-misc-backup.timer: Adding 6min 33.234976s random time.</code> と出て、 <code>systemctl list-timers</code> の NEXT も遅延後の時刻になっていて、実行された時のログの Starting もその時刻以降 (AccuracySec がデフォルト 1min なので NEXT に出ていた時刻よりちょっと遅かった) になっていました。</p>

<h2>atd</h2>

<p>crond の crontab の代わりは service ファイルと timer ファイルを作成して反映させて有効にして、という操作が必要でした。</p>

<p>atd の at の代わりとしては systemd-run というコマンドがあるようです。
試しに使ったことしかないので、紹介だけに留めておきます。</p>

<h2>まとめ</h2>

<p>設定ファイルが複数必要だったり、反映するのに一手間必要だったりして、使い始めは crontab より面倒ですが、 systemd との連携が必要だったり、ログ管理をまとめたかったり、 RandomizedDelaySec のように systemd の機能を使った方がすっきりする場合などは積極的に timer を使っていくと良いのではないかと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible で role を新規作成して ansible galaxy で公開して更新した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-03-ansible-galaxy-new-role.html"/>
    <updated>2017-06-03T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-galaxy-new-role</id>
    <content type="html"><![CDATA[<p>ansible で role を新規作成して ansible galaxy で公開して更新するときにやっているいつもの手順を紹介します。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ansible 2.3.0.0</li>
</ul>


<h2>ansible-galaxy init</h2>

<p><code>ansible-galaxy init</code> でファイルを作成します。</p>

<pre><code>% ansible-galaxy init ansible-role-unattended-upgrades
- ansible-role-unattended-upgrades was created successfully
% cd ansible-role-unattended-upgrades
% find . -type f | sort
./README.md
./defaults/main.yml
./handlers/main.yml
./meta/main.yml
./tasks/main.yml
./tests/inventory
./tests/test.yml
./vars/main.yml
</code></pre>

<p><code>tests</code> は使い方がよくわからないのですが、そのままにしています。</p>

<h2>LICENSE 作成</h2>

<p>すでに作成済みの role から The MIT License (MIT) のファイルをコピーしてきました。
新規の場合は github に push した後にブラウザーから作成するのが簡単だと思います。</p>

<h2>README 更新</h2>

<p>ここで自分の他の role を参考に書き換えました。</p>

<h2>vars 削除</h2>

<p>上書きしやすいように、 <code>defaults/main.yml</code> しか使っていないので <code>vars/main.yml</code> は削除しました。</p>

<pre><code>% rm -r vars
</code></pre>

<h2>中身作成</h2>

<p><code>tasks</code>, <code>defaults</code>, <code>handlers</code>, <code>files</code>, <code>templates</code> などのディレクトリを使って作成します。</p>

<h2>meta/main.yml 更新</h2>

<p><code>meta/main.yml</code> を更新します。
<code>galaxy_tags</code> は <a href="https://galaxy.ansible.com/">https://galaxy.ansible.com/</a> の browse roles を参考にして適当に選んでいます。</p>

<h2>examples</h2>

<p>テスト用に vagrant で serverspec を動かせるように <code>examples</code> を入れています。
どうするのが良いのかわかっていないのですが、とりあえず全くテストしないよりはましなので、こういう方法をとっています。</p>

<p><code>debian/wheezy64</code> の box は synced folder が rsync なのでシンボリックリンクのループでエラーになってしまうので、 <code>vagrant up wheezy64</code>, <code>vagrant provision wheezy64</code>, <code>rake spec:wheezy64</code> のように provision を別途実行しないといけないのが不便なのですが、 <a href="https://atlas.hashicorp.com/debian/">https://atlas.hashicorp.com/debian/</a> には VirtualBox Guest Addition が入った box が <code>debian/contrib-jessie64</code> しかないので、今のところ wheezy と stretch ではどうしようもなさそうです。</p>

<p>テストに使った VM はディスクの無駄なので、こまめに vagrant destroy しています。</p>

<h2>git push</h2>

<p><code>basename $(pwd) | pbcopy</code> した名前で github に repository を作成します。
タグもうっておきます。</p>

<pre><code>git remote add origin git@github.com:znz/ansible-role-unattended-upgrades.git
git push -u origin master
git tag v1.0.0
git push --tags
</code></pre>

<h2>ansible galaxy に反映</h2>

<p>github 連携でログインして、 my roles を開きます。</p>

<p>Search Roles の入力欄の右にあるボタンをクリックして refresh して github の新しい repository を表示させます。
(たぶん <code>meta/main.yml</code> をチェックして一覧に出すかどうか決めているのだと思います。)</p>

<p>追加した role を有効にします。
Role Settings を開くとわかるのですが、なぜか Role Name は自動的に <code>ansible-role-</code> がとれて <code>unattended-upgrades</code> になっています。</p>

<h2>role の更新</h2>

<p>role を更新したら <a href="http://semver.org/lang/ja/">セマンティック バージョニング</a> にそってバージョン番号をあげて、タグをうって push しておきます。</p>

<p>my roles のページで該当する role の行の一番右にある Import Role をクリックすると新しいタグが反映されます。
(role 個別ページには該当する操作はなさそうです。)</p>

<h2>まとめ</h2>

<p>ansible で新規 role を作成して、 github と ansible galaxy で公開して更新しているときにやっている手順を紹介しました。</p>

<p>昔は ansible-galaxy で role を取ってくるのに ansible galaxy への登録が必須だったので登録していたのですが、最近は他の人が role を作るときに参考になるかもと思って登録しています。
あまり汎用性のない自分用の role の場合は github だけに登録して YAML ファイルで</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- src: https://github.com/znz/ansible-role-nadoka
</span><span class='line'>  version: master
</span><span class='line'>  name: znz.nadoka</span></code></pre></td></tr></table></div></figure>


<p>のように指定して使っていたり (この場合でも meta/main.yml は必要)、 playbook 用の repository の role 以下にそのまま入れていたり (この場合は meta/main.yml は不要) します。</p>

<p>複数 role を登録していて、こういうフローで作業をしている人もいるということで、参考になれば幸いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 123 回関西 Debian 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-28-kansai-debian-meeting.html"/>
    <updated>2017-05-28T13:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://debianjp.connpass.com/event/57323/" title="第 123 回関西 Debian 勉強会">第 123 回関西 Debian 勉強会</a>に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<p>Apache Arrow の勉強会の後、一緒にランチに行くのに参加していたら、ちょっと遅くなってしまって、 13:40 すぎに到着しました。</p>

<h2>オープニング</h2>

<ul>
<li>事前課題は必須項目になっていなかったため、 connpass での参加登録時に出ていなかったので、その場で発表して資料が更新されていた。</li>
<li>初参加の人がいた</li>
<li>初めて作った人とか長い間使っていない人とか</li>
<li>easypg は表示は復号されているがメモリダンプをしても平文はないらしい</li>
<li>期限切れと revoke の違い: 期限切れはのばせるが、 revoke は取り消せない</li>
</ul>


<p>ruby の svn のコミットに必要という話は <a href="https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowto">https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowto</a> <a href="https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowtoJa">https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowtoJa</a> あたりに書いてあるのですが、今見ると <code>ssh-keygen -b 2048 -f ruby_key</code> になってて古い感じ。英語の方は <code>~/.ssh/id_rsa or ~/.ssh/id_dsa</code> と書いてあるのでもっと古い感じが。</p>

<h3>途中で矢吹さんの話</h3>

<ul>
<li>カジュアルに使うのも良いけど、暗号関連は色々気にしている人もいるので気をつけましょう (色々なポリシーがあるのを尊重しましょう) という話とか</li>
<li>cypherpunk : 暗号の民主化</li>
<li>FST-01 を入手した (まだ秘密鍵は入れていない) ので回覧</li>
</ul>


<h2>GnuPG にまつわるアレコレ - GnuPG2 とか Keybase とか Yubikey とか</h2>

<ul>
<li>key id は昔は 8 文字だったけど conflict が作れるという話になって、今は 16 文字 (以上?) が普通らしい</li>
<li>(勉強会中に聞きそびれてしまったけど、GPG の key id が fingerprint の末尾っていうのは、みんなどうやって知るんだろう?)</li>
<li>(自分は昔の key sign party で fingerprint しか書いてないけど、どうやって fetch するの? と聞いたときに教えてもらったけど。)</li>
<li>GnuPG とは?</li>
<li>OpenPGP: RFC になっている</li>
<li>暗号化によって盗聴を防ぐ (機密性)</li>
<li>署名によって改ざんを検知可能にする (完全性)</li>
<li>例: secure-apt, DKIM</li>
<li>信頼の輪 (Web of trust) によって本人を同定</li>
<li>過去の資料の参照情報紹介</li>
<li><a href="https://wiki.debian.org/KansaiDebianMeeting/20150823" title="第 101 回 関西 Debian 勉強会">第 101 回 関西 Debian 勉強会</a>の「wiki:Subkeys」が気になった</li>
<li>Windows の GUI の GPG クライアントで良いものがない</li>
<li>mac は GPG Tools というので標準の Mail.app で GPG 対応できるらしい</li>
<li>Web メールで困る話</li>
<li>Thunderbird は Enigmail</li>
<li>鍵の選び方の話</li>
<li>ED25519 は gnupg 1.4 系 (今は oldstable ブランチ) で復号できない</li>
<li>今の所は互換性のための RSA4096 と速い ED25519 を併用するのが良いかもしれない</li>
<li>GnuPG 2 - Stretch での変更点</li>
<li>gnupg (1.4 → 2.1), gnupg1 (なし → 1.4), gnupg2 (2.0 → drop)</li>
<li>gnupg 2.1 は初回実行時に自動的に移行が実行されて、2.1 用のファイル (<code>pubring.kbx</code> とか <code>private-keys-v1.d/</code> とか) が作成される</li>
<li>古いバージョン用のファイル (<code>pubring.gpg</code> とか <code>secring.gpg</code> とか) はそのまま残るので古いバージョンの共存も可能 (だがそれぞれのバージョンのファイルしか更新されないので、併用すると情報がずれていくはず)</li>
<li>2.0 がどっちのファイルを使うのかは検証してないので不明</li>
<li>プログラムの分離具合が整理された (<a href="http://miniconf.debian.or.jp/">Mini Debian Conference Japan 2016</a> の<a href="http://miniconf.debian.or.jp/assets/files/gnupg-now.html">g新部さんのスライド</a> の図が非常にわかりやすい (GnuPG programs (2) の図))</li>
<li>proxy 設定が gpg.conf から dirmngr.conf に変わった</li>
<li>use-gpg-agent が obsolete (常に有効で単純に無視される)</li>
<li>大量の ssh 接続に使うと scdaemon がエントロピーが足りないという話</li>
<li>haveged (はべーじでぃー(と言っていた)) とか rng-tools とか</li>
<li>disable-scdaemon をつけておくと無駄に scdaemon が起動しなくなる (gpg-agent から scdaemon が起動して scdaemon 対応のデバイスがなければ、すぐに gpg-agent に返ってくるらしいが、起動するだけ無駄という話)</li>
<li>gpg-agent を ssh-agent として使うのは簡単</li>
<li>GNOME で gnome keyring daemon は止めやすい</li>
<li>mate や xfce では ssh-agent を止めにくい</li>
<li>ssh-agent を入れないときは <code>.xsessionrc</code> で <code>SSH_AUTH_SOCK</code> を自分で設定する必要がある</li>
<li>mate や xfce では <code>.xsessionrc</code> で設定しても、さらに上書きされるらしい</li>
<li>YubiKey <a href="https://yubikey.yubion.com/">https://yubikey.yubion.com/</a> <a href="https://www.cloudgate.jp/yubikey.html">https://www.cloudgate.jp/yubikey.html</a></li>
<li>ED25519 には対応していない</li>
<li>RSA 4096 で復号で 0.5 秒ぐらい</li>
<li>(後でし</li>
<li>Qt5 での GUI ツールとコマンドラインツールがある</li>
<li>keybase.io というサービスがあるらしいが秘密鍵もアップロードできるらしく?</li>
<li>アカウントを作ってみた <a href="https://keybase.io/uwabami">https://keybase.io/uwabami</a> が消すかも。</li>
<li><a href="https://github.com/keybase/client">https://github.com/keybase/client</a> には大量の Issues が。</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>今後の予定</li>
<li>来月は17日に stretch がリリース予定なので、25日から18日に予定を変更してリリースパーティの可能性が高そう</li>
</ul>


<h2>よくわからないままだった点</h2>

<ul>
<li>懇親会への移動中などにある程度話しましたが</li>
<li><code>gpg --version</code> で出てくる「公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA」の「EDDSA」(ECDSA ではなく)と「ED25519」は同じ?</li>
<li>Curve25519 と ED25519 の関係</li>
<li><a href="https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%89%E3%83%AF%E3%83%BC%E3%82%BA%E6%9B%B2%E7%B7%9A%E3%83%87%E3%82%B8%E3%82%BF%E3%83%AB%E7%BD%B2%E5%90%8D%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0" title="エドワーズ曲線デジタル署名アルゴリズム">エドワーズ曲線デジタル署名アルゴリズム</a> に多少説明がある</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【5/28大阪】データ分析用次世代データフォーマットApache Arrow勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-28-apache-arrow.html"/>
    <updated>2017-05-28T10:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/apache-arrow</id>
    <content type="html"><![CDATA[<p><a href="https://classmethod.connpass.com/event/56478/" title="【5/28大阪】データ分析用次世代データフォーマットApache Arrow勉強会">【5/28大阪】データ分析用次世代データフォーマットApache Arrow勉強会</a>に参加しました。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場</h2>

<p>早めに到着していたのですが、1階の入り口があいていなくて、案内してもらうまではいれませんでした。</p>

<h2>ハッシュタグ</h2>

<p><code>#osaka_arrow</code></p>

<h2>会場アンケート</h2>

<ul>
<li>普段使ってる言語</li>
<li>データ分析をしているか</li>
<li>使っているならツールは?</li>
</ul>


<p>使ってる言語としては Python や Ruby や C# が多い?
データ分析をしていない人も多かったけど、している人はデータ分析には Python や R が多い?</p>

<h2>スライドなど</h2>

<ul>
<li>今回のメインのスライドは (まだ?) 公開されていないっぽい? (<a href="https://slide.rabbit-shocker.org/">https://slide.rabbit-shocker.org/</a> にはなかった)</li>
<li>Arrow については <a href="https://slide.rabbit-shocker.org/authors/kou/data-science-rb/">RubyもApache Arrowでデータ処理言語の仲間入り</a> を使って説明 (Apache Arrow とは何なのかがわかるので、一読をオススメします。)</li>
<li>今回は Apache Arrow がメインなので Ruby 関連のところは飛ばしていた。</li>
<li>以下の関連資料の URL は <code>#osaka_arrow</code> でツイートしてから飛ばしつつ説明していました。</li>
<li><a href="https://www.slideshare.net/wesm/nextgeneration-python-big-data-tools-powered-by-apache-arrow">Next-generation Python Big Data Tools, powered by Apache Arrow</a></li>
<li><a href="https://www.slideshare.net/wesm/memory-interoperability-in-analytics-and-machine-learning">Memory Interoperability in Analytics and Machine Learning</a></li>
<li><code>#osaka_arrow</code> でWesさん(Arrow のメイン開発者?)のblogの翻訳をしている方が以下の翻訳の URL をツイートしていました。</li>
<li><a href="http://qiita.com/tamagawa-ryuji/items/deb3f63ed4c7c8065e81">（翻訳）2017年の展望: pandas, Arrow, Feather, Parquet, Spark, Ibis</a></li>
<li><a href="http://qiita.com/tamagawa-ryuji/items/9ba22061fc78907a5826">（翻訳）毎秒10GBでArrowからpandasへ</a></li>
</ul>


<h2>メモ</h2>

<ul>
<li>Feather は R と Python の間だけ用の Arrow のようなもの</li>
<li>作っている人が同じで Feather での知見が Arrow に生かされている</li>
<li>Parquet は保存用でデータサイズを小さくすることを重視</li>
<li>Parquet は無圧縮もできて、それだとサイズが大きくなることがある</li>
<li>Arrow や Parquet は特定の列だけ読むとかもできるので、サイズが同じでも処理効率がよくなることがある</li>
<li><p>多次元配列 (テンソル) は中身が同じ型で、そういう用途向けに最適化されている</p></li>
<li><p>Wes McKinney さん: pandas を作った人でその知見が Arrow にも生かされている</p></li>
<li><p>Hadoop のディストリビューター</p></li>
<li><p>SlideShare で apache arrow で検索すると色々資料がみつかる</p></li>
<li><p>zero-copy が大事</p></li>
<li>in memory が前提としてある</li>
<li>メモリレイアウトや record batch とかもその関連</li>
<li>メモリに収まるような record batch のサイズ指定は API で手動設定</li>
<li>Arrow は基本的に read only</li>
<li>元データはアプリケーション次第</li>
<li><p>IPC: 同じマシンなら mmap とか</p></li>
<li><p>PySpark だと JVM と Python とのやりとりが重い</p></li>
<li>個別にチューニングするのは無駄なので Arrow でみんなで共通のチューニングをする</li>
<li><p>Ruby のオブジェクトにすると変換すると負けなので、高速に処理したい場合は Arrow の世界で演算も済ませる必要がある</p></li>
<li><p>streaming もある</p></li>
<li><p>開発に参加しようという話</p></li>
<li><a href="https://issues.apache.org/jira/browse/ARROW/">https://issues.apache.org/jira/browse/ARROW/</a></li>
<li><p><a href="https://red-data-tools.github.io/">https://red-data-tools.github.io/</a></p></li>
<li><p>質問タイム</p></li>
<li>fluentd で message pack をパースしてルーティングの情報だけ読んでまた message pack にシリアライズして、だと読んでない部分のパースとシリアライズが無駄なので、そこを arrow で置き換えると改善できないかなあという話</li>
<li>Red Data Tools の名前の由来: Ruby に限定したくなかったので redmine などで使われている red と PyData などの Data を組み合わせて、 red data だけだと絶滅危惧種などの意味とぶつかるので、何が良いか悩んで最終的に tools をつけた。</li>
<li>データベースとの絡み</li>
</ul>


<h2>まとめ</h2>

<p>基本的には開発者としての参加をしやすくするための勉強会でした。
Apache Arrow 自体でデータ分析ができるようになるわけではなく、ツールを作るための共通基盤という感じでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[関西Ruby会議2017に参加しました #kanrk2017]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-27-kansairubykaigi2017.html"/>
    <updated>2017-05-27T21:09:15+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansairubykaigi2017</id>
    <content type="html"><![CDATA[<p><a href="http://regional.rubykaigi.org/kansai2017/" title="関西Ruby会議2017">関西Ruby会議2017</a>に参加しました。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>オープニング</h2>

<ul>
<li>スポンサーの紹介</li>
<li>会場のトイレの場所などの説明</li>
</ul>


<p>オープニングでは何も言っていませんでしたが、ハッシュタグは <code>#kanrk2017</code> のようでした。(doorkeeper のイベントページからツイートしようとするとつく)</p>

<h2>スポンサーセッション</h2>

<p>最初はアジャイルウェアさんのスポンサーセッションでした。</p>

<h2>基調講演: 株式会社クリアコード</h2>

<ul>
<li>「株式会社クリアコード」というタイトルの発表</li>
<li>テーマ: コミュニティーとビジネス</li>
<li>twitter 連携が下に出ていた。たぶん <a href="https://rabbit-shocker.org/ja/rabbiter/" title="Rabbiter">Rabbiter</a> (Rabbitter ではない) です。</li>
<li>大事にしていること: フリーソフトウェアの推進と稼ぐことの両立</li>
<li>学んだこと1: 問題は upstream で直す</li>
<li>フリーソフトウェアが大事にしていることの1つは「直せること」！</li>
<li><a href="http://www.clear-code.com/blog/2011/12/6.html" title="デバッグ力: よく知らないプログラムの直し方 - ククログ(2011-12-06)">デバッグ力: よく知らないプログラムの直し方 - ククログ(2011-12-06)</a></li>
<li>学んだこと2: 開発を続けられるコードを書く</li>
<li>継続的に開発とビジネス</li>
<li>長期間一緒にやれる仕事を優先</li>
<li>フリーソフトウェア開発の世界</li>
<li>ユースケースを確認する</li>
<li>学んだこと3: 相手が想像しなくてもわかるように説明する</li>
<li>学んだこと4: 楽しく開発する</li>
<li>学んだこと5: 非難するよりも手を動かす</li>
<li>学んだこと6: 回避策よりも根本解決</li>
<li>受託開発の優先度</li>
<li>a: フリーソフトウェアを直接的に推進できる仕事</li>
<li>b: フリーソフトウェアを間接的に推進できる仕事</li>
<li>c: いずれ推進につながりそうな仕事</li>
<li>FLOSSサポート: 導入支援と障害調査</li>
<li>事例：Firefox/Thunderbirdの企業導入</li>
<li>公開することで宣伝にもなるので次の仕事に繋がることがある</li>
<li>OSS開発支援</li>
<li>どうして仕事になるか</li>
<li>OSSのエコシステムに参加</li>
<li>自分たちのソフトウェアとOSSを同じように扱う</li>
<li>問題があれば直す</li>
<li>気になるところがあれば共有</li>
<li>仕事の作り方: お客さんに見つけてもらう</li>
<li>お客さん探しを頑張らない</li>
<li>諦めることは大事</li>
<li>決断</li>
<li>決断する基準があると楽しめる (自分の中で基準がはっきりしていないうちは大変だった)</li>
<li>クリアコードの基準: フリーソフトウェアの推進と稼ぐことの両立</li>
<li>お客さん探しと稼ぐこと</li>
<li>推進と稼ぐことの両取り</li>
<li>推進→見つけてもらった例: milter manager</li>
<li>最近の推進兼営業活動: Apache Arrow</li>
<li><a href="https://classmethod.connpass.com/event/56478/" title="【5/28大阪】データ分析用次世代データフォーマットApache Arrow勉強会 - connpass">【5/28大阪】データ分析用次世代データフォーマットApache Arrow勉強会 - connpass</a></li>
<li>採用</li>
<li>マッチする人は少なそう</li>
<li>業務内容ではなくポリシーでマッチ</li>
<li>フリーソフトウェアの推進 → 見つけてもらう</li>
<li>RubyKaigiにスポンサー: Rubyを応援したいので始めた, 採用は期待していなかった</li>
<li><a href="https://slide.rabbit-shocker.org/authors/kou/kansai-rubykaigi-2017/" title="株式会社クリアコード - Kouhei Sutou - Rabbit Slide Show">株式会社クリアコード - Kouhei Sutou - Rabbit Slide Show</a></li>
<li>質疑応答</li>
<li>かくたにさんを指名</li>
<li>とてもいい会社説明会でした</li>
<li>joker1007 さん: upstream に取り込まれなかった場合は?</li>
<li>一言で言うとケースバイケース</li>
<li>ユースケースに合わせた形で再検討</li>
<li>?: フリーソフトウェアと OSS という言葉の使い分け</li>
<li>本質が大事だと思うときはフリーソフトウェア</li>
<li>お客さん視点のときは OSS</li>
<li>クリアコード視点だとフリーソフトウェア</li>
<li>外からは OSS</li>
<li>あとで個別に説明します</li>
<li>むりょういさん: 使っているソフトウェアについて(?) (ちゃんと聞き取れなかった)</li>
<li>Firefox / Thunderbird: すでにノウハウがあった(?) (ちゃんと聞き取れなかった)</li>
<li>Apache Arrow: いけると思って推進している</li>
<li><a href="https://slide.rabbit-shocker.org/authors/kou/kansai-rubykaigi-2017">https://slide.rabbit-shocker.org/authors/kou/kansai-rubykaigi-2017</a></li>
</ul>


<h2>休憩</h2>

<p>スポンサーブースとどら焼きの案内があった。</p>

<h2>Rubyでデータサイエンスを行うための取り組み</h2>

<ul>
<li>ko1 さんと mrkn さんが始めた活動</li>
<li>データサイエンスは技術的にどうおもしろいか</li>
<li>データサイエンスとは</li>
<li>データソース (Excel, RDB, &hellip;) - 前処理 (文字列整形, 欠損値処理, &hellip;) - 分析 (機械学習, 統計) - 可視化 (散布図, 棒, 箱ひげ, &hellip;) - 多次元データの理解, モデルに基づいた予測</li>
<li>データサイエンスは、9割を前処理に費す</li>
<li>具体例</li>
<li>近年の状況</li>
<li>データが増えている</li>
<li>データ分析環境が進歩している</li>
<li>データサイエンスの民主化が進んでいる</li>
<li>Ruby のデータサイエンスの現状</li>
<li>ウェブブラウザからのRubyの実行</li>
<li>データサイエンスに関わるRubyのgem群</li>
<li>docker で試す</li>
<li><a href="https://hub.docker.com/r/sciruby/">https://hub.docker.com/r/sciruby/</a> <a href="https://hub.docker.com/r/rubynumo/">https://hub.docker.com/r/rubynumo/</a> のあたり?</li>
<li>PyCall について</li>
<li>Arrow を介した Ruby 外言語との連携</li>
<li>Python と R が二大言語</li>
<li>Python でできるけど R だと簡単にできないとか R だとできるけど Python だと簡単にできないとかいうときにも Arrow で簡単に連携できるようになったらしい</li>
<li>コミュニティの重要性</li>
<li>(red-)arrow の出現に伴う変化?</li>
<li>複数言語の連携が容易になる</li>
<li>他言語にはない優位性を持つ gem や独自機能を持つ gem が求められる?</li>
<li><a href="http://sciruby-slack.herokuapp.com/">http://sciruby-slack.herokuapp.com/</a></li>
<li><a href="https://gitter.im/red-data-tools/">https://gitter.im/red-data-tools/</a></li>
<li>質疑応答</li>
<li>発表者: データサイエンスに興味がある人が少ない?</li>
<li>joker1007 さん: Ruby でやれると嬉しいが、目の前の問題を解決するには他の手段を使ってしまう。 Ruby は分散処理のコンポーネントが少ない? Ruby は好きなので長期的には Ruby でできると嬉しい。</li>
<li>arrow があっても独自性がないと厳しい?</li>
<li>すぐには難しい</li>
<li>可視化あたり?</li>
<li><a href="https://github.com/sciruby-jp/ruby-datascience-examples/blob/master/Ruby%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9%E3%82%92%E8%A1%8C%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF.pdf">https://github.com/sciruby-jp/ruby-datascience-examples/blob/master/Ruby%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9%E3%82%92%E8%A1%8C%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF.pdf</a></li>
</ul>


<h2>昼休憩</h2>

<p>11:56 から 12:50 まで。</p>

<h2>エンタープライズRubyOnRails エンプラでぶち当たった2つの壁と突破法</h2>

<ul>
<li>自己紹介</li>
<li>会社紹介</li>
<li>エンタープライズに Ruby on Rails は不向きと言われている</li>
<li>1: 高すぎる柔軟性</li>
<li>2: Rails による規約の縛り</li>
<li>本日お伝えしたいこと: 具体的な壁と突破方法</li>
<li>プロジェクト概要: 写真は <a href="https://twitter.com/ujm/status/868315623561977856">https://twitter.com/ujm/status/868315623561977856</a></li>
<li>ソース管理: GitLab (ギットラボとよんでいた)</li>
<li>経験者が少ない (10人に1人)</li>
<li>2つの壁にあたった</li>
<li>コードのメンテナンス性低下</li>
<li>経験者が不足するとどうなるか</li>
<li>一貫性のないコードが量産される</li>
<li>レビュアーが困る</li>
<li>コンフリクトの多発</li>
<li>merge request でモデルのコンフリクトが多発</li>
<li>レビュアーの負担が激増</li>
<li>壁は想像以上に高かった</li>
<li>突破法を考えてみた</li>
<li>コードメンテナンス性の壁 → 強力な IDE レベルの仕組み → 開発統制</li>
<li>コンフリクトの壁 → 人が編集するファイルの極少化 → 自動生成</li>
<li>RuboCop SubimeText3 独自チェッカー Drone</li>
<li>rb ファイルと erb ファイルをチェック</li>
<li>RuboCop でチェック</li>
<li>erb は注釈宣言を警告して erb のコメントアウトを使うように</li>
<li>CI がパスしなかったら merge request をマージできない</li>
<li>Excel の設計書から自動生成</li>
<li>権限やルーティングを自動生成</li>
<li>routing ファイルを分割</li>
<li>一部は手動変更可能 (gem 関連とか)</li>
<li>ER 図からも自動生成</li>
<li>マイグレーション、RSpec、Model を生成</li>
<li>モデルファイルをモジュールに分割して自動生成</li>
<li>画面設計から view も自動生成</li>
<li>ロジックが必要ない部分は基本的に自動生成にした</li>
<li>結果</li>
<li>レビュアーの負担が減少</li>
<li>64.9% (約31000行) が自動生成</li>
<li>コンフリクト発生率 25% → 5%</li>
<li>質疑応答</li>
<li>?: コンフリクト解決の責任はレビュアー?</li>
<li>そうです。</li>
<li>?: ? (メモ取れず)</li>
<li>決めるにあたって色々葛藤があったが詳細は懇親会で</li>
<li><a href="https://www.slideshare.net/kakko1003/ruby-on-rails-2">https://www.slideshare.net/kakko1003/ruby-on-rails-2</a></li>
</ul>


<h2>Rubygem開発の流儀</h2>

<ul>
<li>プロジェクター接続トラブル</li>
<li>awesome なのでサイズ調整ができない</li>
<li>表示がおかしい (上の一部が下に出ている)</li>
<li>自己紹介</li>
<li>会社紹介</li>
<li>本題の Rubygem 開発について</li>
<li>Rubygem についておさらい</li>
<li>bundler 便利</li>
<li>パーフェクト Ruby 第二版</li>
<li>著者献本を持ってきたのでブログに書いてくれる人にプレゼントしたい</li>
<li>作り始めが簡単でも gem を作ってリリースするには別のハードルがある</li>
<li>gem をざっくり分類</li>
<li>開発支援系: ほとんどの gem</li>
<li>クライアント系</li>
<li>フレームワーク/ミドルウェア系</li>
<li>プラグイン系</li>
<li>既存 gem 改造系</li>
<li>業務特化系</li>
<li>便利ツール系</li>
<li>パフォーマンス向上系</li>
<li>既存gem の改造やプラグイン系が作りやすいし、ゴールがわかりやすい</li>
<li>色々な gem を参考にネタを探す</li>
<li>とにかく日々のイライラや不満を言語化し、色々な gem のパターンと突き合わせる。</li>
<li>gem を作り始める前にやること</li>
<li>gem 開発のコストとは</li>
<li>activerecord-cause の場合</li>
<li>gem を作るときに考えておくこと</li>
<li>行儀の良さとは</li>
<li>gem の外の世界を壊さないなど</li>
<li>rspec-storage の場合</li>
<li>よくない例</li>
<li>非公開な API 使いまくり</li>
<li>汎用化の暗部</li>
<li>たとえば <code>devise</code> や <code>rails_admin</code> のコードが簡単に読めますか?</li>
<li>作った後の OSS 活動</li>
<li>昨日追加要求について</li>
<li>基本的に「Welcome your PR」で良いと思っている。</li>
<li>Welcome PR なんだけど&hellip;</li>
<li>機能追加系の対応にはポリシーが必要</li>
<li>実装せずに済ます強い心の例</li>
<li>まとめ</li>
<li>kozo2 さん: embulk の gem には jar が同梱されていると言う話があったがファイルサイズの上限はあるのか?</li>
<li>あった気がするが引っかかったことがないのでわからない。</li>
<li>kozo2 さん: データを大量に入れたい。</li>
<li>日本の祝日の gem のようにデータのみの gem の例はある。</li>
<li>パーフェクト Ruby 第二版のプレゼントのじゃんけん大会</li>
<li><a href="https://twitter.com/9gmotonari/status/868332186025443328">https://twitter.com/9gmotonari/status/868332186025443328</a></li>
<li><a href="https://speakerdeck.com/joker1007/rubygemkai-fa-falseliu-yi" title="Rubygem開発の流儀 // Speaker Deck">Rubygem開発の流儀 // Speaker Deck</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li><a href="https://rubykaigi.doorkeeper.jp/events/61062" title="RubyKaigi 2017">RubyKaigi 2017</a> の受付が始まっている</li>
</ul>


<h2>コミュニティ文化の取り込みとその機会で得た知見</h2>

<ul>
<li>会社のスポンサー表示</li>
<li>Contents</li>
<li>Community?</li>
<li>社内のコミュニティ感</li>
<li>個人的成果の紹介</li>
<li>webpacker を使っている人: 1桁ぐらいしかいない</li>
<li>自己紹介</li>
<li><a href="https://github.com/muryoimpl/buoys">https://github.com/muryoimpl/buoys</a></li>
<li>Community とは?</li>
<li>この場もコミュニティ</li>
<li>一緒に仕事をする人たちもコミュニティと言える</li>
<li>コミュニティとの接点</li>
<li>(同じタイトルで違うスライドがしばらく続いていたのでメモを取り損ねたので、諦めて聞いていた)</li>
<li><a href="https://github.com/muryoimpl/slippr">https://github.com/muryoimpl/slippr</a></li>
<li><a href="https://github.com/muryoimpl/talker-signupper">https://github.com/muryoimpl/talker-signupper</a></li>
<li>時間がおしているので質疑応答はなし</li>
<li><a href="https://speakerdeck.com/muryoimpl/kansai-ruby-kaigi-2017">https://speakerdeck.com/muryoimpl/kansai-ruby-kaigi-2017</a></li>
</ul>


<h2>Rubyistと技術記事 ～なぜ書くの？どう書くの？何が起きるの？～</h2>

<ul>
<li>自己紹介</li>
<li>Rubyist と技術記事</li>
<li>技術記事を書く = 知見のオープンソース化</li>
<li>一般論から個人の話へ</li>
<li>これまでの活動内容</li>
<li>知っている人挙手 → 写真とらせて</li>
<li>なぜ書くの?</li>
<li>困る、ググる、助かった！のギブアンドテイク</li>
<li>助かった、ありがとうの声が1つでもあると嬉しい</li>
<li>何を書くの?</li>
<li>困る、ググる、助かった！の流れをイメージする</li>
<li>いつ、どう書くの?</li>
<li>朝型なので、起床してから仕事を始めるまでの時間で書く</li>
<li>公開前に何度も読み直して校正する</li>
<li>公開後でも校正する</li>
<li>わかりやすい記事を書くためには</li>
<li>読者ファースト: 困っている人を想定して書く</li>
<li>その技術のおいしさを引き出せる、実践的な例を出す</li>
<li>文章とコードをバランスよく配分する</li>
<li>タイトルは超重要！</li>
<li>Qiita とブログの使い分け</li>
<li>Qiita は技術が主役</li>
<li>ブログは自分が主役</li>
<li>Twitter と YouTube の使い分け</li>
<li>参考: 初期のブログ</li>
<li>何が起きるの?</li>
<li>お金の話</li>
<li>技術記事とお金の話</li>
<li>お金より、信頼やレピュテーション</li>
<li>技術記事Q&amp;A</li>
<li>Q3: 執筆時間を短くするコツは?</li>
<li>A: 時間を気にしたことがない。それよりもわかりやすさ重視</li>
<li>描き続ければ基本的な速さは身につく</li>
<li>Q4: 反響がなくてよくヘコみます。これを克服するには?</li>
<li>A: 狙ってもどうせ当たらない。1件でも反響があれば成功と考える</li>
<li>Q5: 描きたいけどかけない。時間もない。どうすれば?</li>
<li>A: タスク管理をしっかり。</li>
<li>まとめ</li>
<li>まとめ (ふたたび一般論)</li>
<li>最後に追加アナウンス: 「プロを目指す人のためのRuby入門」という本が2017年11月発売予定</li>
<li><a href="https://speakerdeck.com/jnchito/number-kanrk2017" title="Rubyistと技術記事 // #kanrk2017 // Speaker Deck">Rubyistと技術記事 // #kanrk2017 // Speaker Deck</a></li>
</ul>


<h2>子どものためのプログラミング道場「CoderDojo」を支えるRails CMSの活用事例</h2>

<ul>
<li>上の5階でやっていた様子を取材してきた</li>
<li>子供同士も含めたコミュニティ</li>
<li>全国各地でやっている (85 以上、今年中に 100 を超えそう)</li>
<li>世界中でやっている (1200 以上)</li>
<li>本日の話</li>
<li>CoderDojo とは (済)</li>
<li>なぜ Rails + CMS?</li>
<li>Scrivito の活用事例</li>
<li>なぜ Rails?</li>
<li>初期は GitHub Pages で生成</li>
<li>デザイン改善 + Parse 利用</li>
<li>Parse 終了のお知らせ</li>
<li>要望や状況を整理するよい機会だった</li>
<li>コミットしているのが2人 (実際は1人) だけだった</li>
<li>状況の変化に対応しやすい Rails</li>
<li>ドキュメントも多い</li>
<li>Rails Tutorial, Rails ガイド</li>
<li>翻訳をやっているのは弊社</li>
<li>ただ Rails の学習コストは高い (と思う)</li>
<li>CMS?</li>
<li>様々なコントリビュータ</li>
<li>「エンジニア」じゃなくても貢献できる</li>
<li>Scrivito: Cloud-Based Rails CMS</li>
<li>Rails に Scrivito gem を足す</li>
<li>ブラウザーで編集できる機能を追加できる</li>
<li>コントリビューターが以前2人が今は15人</li>
<li>Scrivito の活用事例</li>
<li>CoderDojo Japan 公式本</li>
<li>大枠を Rails 側の view で作って、各章の担当者が該当する部分の文言を直接編集</li>
<li><a href="https://coderdojo.jp/kata">https://coderdojo.jp/kata</a> の「2017年1月には全国で70ヶ所以上」を「2017年5月には全国で84ヶ所以上」に更新するデモ</li>
<li><a href="https://github.com/coderdojo-japan/coderdojo.jp">https://github.com/coderdojo-japan/coderdojo.jp</a></li>
<li><a href="https://speakerdeck.com/yasulab/coderdojo-wozhi-eru-rails-cms-falsehuo-yong-shi-li">https://speakerdeck.com/yasulab/coderdojo-wozhi-eru-rails-cms-falsehuo-yong-shi-li</a></li>
</ul>


<h2>スポンサーセッション</h2>

<p>Ruby開発さんのスポンサーセッションでした。</p>

<h2>基調講演: 18年でRubyから学んだこと</h2>

<ul>
<li>自己紹介</li>
<li>風呂グラマー</li>
<li>IT芸人</li>
<li>Ruby歴 18年ぐらい</li>
<li>一番好きなメソッド: <code>method_missing</code></li>
<li>次は <code>define_method</code>, その次は <code>eval</code></li>
<li>局所的に綺麗にかけるものが好き</li>
<li>dRuby</li>
<li>ずーっとユーザ</li>
<li>gem も 1 個だけ <code>pr_geohash</code></li>
<li>mruby</li>
<li>1999年: i-mode など</li>
<li>Ruby本が立て続けに出た時期があった</li>
<li>オブジェクト指向</li>
<li>Ruby に教わったこと</li>
<li>2000年代前半: PHPでPukiWiki作ってた など</li>
<li>伽藍(がらん)とバザールだけでも良いので読むのをおすすめ</li>
<li>元の作者から引き継いでコミュニティを作って、年末には別のコミッターに渡した</li>
<li>Windows でも頑張ってた</li>
<li>wxWindows とか QT 使って GUI アプリ作り</li>
<li>exerb 使ってパッケージング</li>
<li>ActiveScript Ruby</li>
<li>Ruby on Rails</li>
<li>2004/07 - DHH が公開</li>
<li>2005年頭ぐらいに発見</li>
<li>すごい! Ruby で Web アプリがキレイに作れる</li>
<li>2005年から Ruby 漬け: Rails を試して, ブログ書いて, 雑誌に記事を書く</li>
<li>OSC Hokkaido 2005</li>
<li>たぶん初めて Matz を見たのはこのとき</li>
<li>英語で質疑応答していた</li>
<li>10分で作る Rails アプリ for Windows</li>
<li>編集ソフトがなかったので無編集</li>
<li>本当に10分でできるというのを示す意味もあった</li>
<li>typo とかで何度もとりなおした</li>
<li>pingking.jp</li>
<li>@nifty の about me</li>
<li>RailsConf 2006</li>
<li>初めての海外</li>
<li>英語力ゼロ</li>
<li>リアル Ruby 友達もほぼゼロ</li>
<li>初の海外カンファレンス</li>
<li>スライドのキーワードでなんとなくわかる</li>
<li>内容はRails勉強会@東京の方がすごいのでは?</li>
<li>Ruby歴なら絶対自分の方が長い</li>
<li>なら渡米しよう</li>
<li>色々あって2008年渡米</li>
<li>結局英語は喋れるようにはならなかった</li>
<li>Seattle.rb</li>
<li>英語わからないけどなんとなく参加して覚えた</li>
<li>英語はブロークンな20代の若者の英語が身についた</li>
<li>Appcelerator へ転職</li>
<li>知り合いのいないコミュニティーで活動したい</li>
<li>Node.js と Titanium Mobile</li>
<li>Titanium Mobile にパッチ送ったりチャットで話ししたりしているうちに中の人に</li>
<li>GitHub のスターが多かったからだとあとで聞いた</li>
<li>影響を受けた人: matz さん, hyuki さん (スライドではアイコンだけ)</li>
<li>どちらもキリスト教の人</li>
<li>テクノロジーに愛を謳う</li>
<li>ロジカルじゃない</li>
<li>MINSWAN = Matz Is Nice So We Are Nice</li>
<li>心理的安全性</li>
<li>Matz はストーリーを語るのが上手い</li>
<li>DHHも</li>
<li>こういうのがうまい人は抽象化がうまい</li>
<li>初めてのRuby本体への貢献</li>
<li>mruby</li>
<li>RubyConf 2010 で聞いた</li>
<li>そっから進捗を全然聞かない</li>
<li>2012年のリリース前時点の private repo のアクセス権をもらった</li>
<li>やること多数</li>
<li>GitHub 以後の開発コミュニティ</li>
<li>MobiRuby</li>
<li>MobiRuby のもくろみ</li>
<li>Matz にはなれない</li>
<li>あきやすいので無理だった</li>
<li>手離れよく作ることを考えるようになった</li>
<li>Ruby から得たもの</li>
<li>一番大きいのは「軸」</li>
<li><a href="https://speakerdeck.com/masuidrive/18nian-derubykaraxue-ndakoto-guan-xi-rubyhui-yi-2017">https://speakerdeck.com/masuidrive/18nian-derubykaraxue-ndakoto-guan-xi-rubyhui-yi-2017</a></li>
</ul>


<h2>クロージング</h2>

<p>時間がなかったので、Ruby 関西の宣伝などはなく、前に集まって写真撮影のみでした。</p>

<h2>懇親会</h2>

<p>事前に予告されていた通り LT がありました。
本編でスポンサーセッションがなかったスポンサーの LT もありました。</p>

<p>前にどこかで聞いたことあるような内容もありましたが、いろいろな話があって楽しめました。</p>

<p>特に何も準備していなかったのと MacBook Pro の電池が残り少なかったこともあり、特に LT はしませんでした。</p>

<h2>全体的な感想</h2>

<p>RubyKaigi 2015 の T シャツを着て行ったのですが、上にもう一枚着ていたので、知らない人にはただの寿司の T シャツにしか見えないような気がしていました。
一部の人には背中の Committer と書かれている部分を見せたりできたので、着て行った意味はあったと思いました。</p>

<p>会場は9時にならないと鍵が借りられなかったり、撤収完了の時間が決まっていたり (ロビーに残っているのは OK だったらしい)、プロジェクターでトラブルがあったり (ミラーリングかどうかが影響したらしい?)、電源が不十分だったり (これは各自できるだけタップを持ってきてくださいとアナウンスがあればよかったのかも)、などの問題点はありましたが、迷わずたどり着けたり (途中でひがきさんにあったので入り口を自分で探さなくてよかったのも幸いした)、マイクなどの設備も整っていたり、撤収時に椅子やテーブルは特に気にしなくてよかったりしたのはよかったと思いました。</p>

<p>全体の進行は時間がおしてしまって、それを取り戻すために減らす休憩時間の余裕もなくて、最後まで時間が足りないままでした。</p>

<p>発表の内容はどれも面白く、twitter でもハッシュタグがトレンド入りしていたらしいというぐらい盛り上がっていたようです。</p>

<p>@nifty の about me は使っていたので懐かしいと思いました。
@nifty で Rails を使っていると前面に打ち出していたのは、他に @nifty TimeLine があったのも思い出しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenSSH の ~/.ssh/config の見直しをした]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-20-openssh-config.html"/>
    <updated>2017-05-20T14:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/openssh-config</id>
    <content type="html"><![CDATA[<p>最新の man を参考にしながら OpenSSH の <code>~/.ssh/config</code> の設定を見直してみたので、使っている設定項目についてまとめてみました。</p>

<!--more-->


<h2>確認バージョン</h2>

<p>全て確認したわけではないですが、古いのや新しいのを確認したいときはこの辺りを使いました。</p>

<ul>
<li>Debian GNU/Linux 8.7 (jessie) の OpenSSH_6.7p1 Debian-5+deb8u3, OpenSSL 1.0.1t  3 May 2016</li>
<li>archlinux の OpenSSH_7.5p1, OpenSSL 1.1.0e  16 Feb 2017</li>
</ul>


<h2>参考</h2>

<p><a href="https://euske.github.io/openssh-jman/ssh_config.html">https://euske.github.io/openssh-jman/ssh_config.html</a> の日本語訳や <code>man ssh_config</code> で英語のマニュアルを確認したりしました。</p>

<h2>優先順位</h2>

<ol>
<li>コマンドラインオプション</li>
<li>ユーザごとの設定ファイル <code>~/.ssh/config</code></li>
<li>システム全体にわたる (system-wide) 設定ファイル <code>/etc/ssh/ssh_config</code></li>
</ol>


<p>の順番で最初に見つかった設定が使われます。</p>

<p>設定ファイルは <code>Host</code> の行で区切られていて、設定ファイルの中でも前に見つかったものが優先されるので、ホストごとの設定をファイルの先頭の方に、全体的な設定を末尾の方に書くことを想定しているようです。</p>

<h2>Host</h2>

<p><code>Host</code> または <code>Match</code> は設定ファイルの区切りです。</p>

<p>コマンドラインで指定されたホスト名にマッチするので、<code>ssh localhost</code> の時には <code>Host localhost</code> の設定が使われて <code>Host 127.0.0.1</code> や <code>Host ::1</code> の設定は使われません。</p>

<h2>CheckHostIP</h2>

<p>同じホスト名なのに IP アドレスが変わる可能性がある場合に <code>CheckHostIP no</code> にしておくと <code>known_hosts</code> に IP アドレスが記録されないようになります。</p>

<p>DNS を工夫して LAN 内では直接、外からはルーターのポートフォワーディング経由で接続できるようにしている場合など、接続の仕方によって変わる場合や、 GitHub などのようにホスト鍵はそのままで IP アドレスが変わることがあるサービスを使っている時に使うと良いと思います。</p>

<h2>Ciphers</h2>

<p><a href="http://blog.n-z.jp/blog/2014-08-11-openssh-arcfour256.html">vagrantなどのローカルへのssh接続のみarcfour256で高速化する</a>ということをしていたこともありましたが、<a href="https://srad.jp/comment/2875861">https://srad.jp/comment/2875861</a> のリンク先の <a href="http://www.openssh.com/txt/release-7.1">http://www.openssh.com/txt/release-7.1</a> に</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Future deprecation notice
</span><span class='line'>=========================
</span><span class='line'>
</span><span class='line'>We plan on retiring more legacy cryptography in the next release
</span><span class='line'>including:
</span><span class='line'>
</span><span class='line'> * Refusing all RSA keys smaller than 1024 bits (the current minimum
</span><span class='line'>   is 768 bits)
</span><span class='line'>
</span><span class='line'> * Several ciphers will be disabled by default: blowfish-cbc,
</span><span class='line'>   cast128-cbc, all arcfour variants and the rijndael-cbc aliases
</span><span class='line'>   for AES.
</span><span class='line'>
</span><span class='line'> * MD5-based HMAC algorithms will be disabled by default.
</span><span class='line'>
</span><span class='line'>This list reflects our current intentions, but please check the final
</span><span class='line'>release notes for OpenSSH 7.2 when it is released.</span></code></pre></td></tr></table></div></figure>


<p>と書いてあって、 <a href="http://www.openssh.com/txt/release-7.2">http://www.openssh.com/txt/release-7.2</a> には</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Potentially-incompatible changes
</span><span class='line'>================================
</span><span class='line'>
</span><span class='line'>This release disables a number of legacy cryptographic algorithms
</span><span class='line'>by default in ssh:
</span><span class='line'>
</span><span class='line'> * Several ciphers blowfish-cbc, cast128-cbc, all arcfour variants
</span><span class='line'>   and the rijndael-cbc aliases for AES.
</span><span class='line'>
</span><span class='line'> * MD5-based and truncated HMAC algorithms.
</span><span class='line'>
</span><span class='line'>These algorithms are already disabled by default in sshd.</span></code></pre></td></tr></table></div></figure>


<p>となっていて arcfour 系はデフォルトでは使われないようになったようなので、 arcfour 系はもうあまり使わない方が良さそうです。</p>

<p>OpenSSH_7.5p1 で <code>ssh -Q cipher</code> を確認しても残っていますが、サーバー側で無効になっていると結局使えないので、将来的には使えないものと考えて良さそうです。</p>

<p>速度を気にするなら <a href="http://blog.uu59.org/2014-04-12-ssh-ciphers.html">OpenSSH 6.6p1の各cipherのスループットを計測した</a> を参考にして実際に計測するのが良さそうです。</p>

<p>試した感じだと <code>chacha20-poly1305@openssh.com</code> が遅くて <code>aes*-ctr</code> 系と <code>aes*-gcm@openssh.com</code> 系はそんなに違いがない感じだったので、速度を気にする場合は</p>

<pre><code>Ciphers aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
</code></pre>

<p>ぐらいでいいのではないかと思いました。(セキュリティを優先するならビット数が多い方を前に持ってくると良いと思います。)</p>

<h2>ControlMaster, ControlPath, ControlPersist</h2>

<p>デフォルトの <code>ControlMaster no</code> のまま、使いたい Host だけ <code>ControlMaster auto</code> を設定する方法と、末尾の <code>Host *</code> でデフォルトを <code>ControlMaster auto</code> にしてしまって不要な Host や設定していると問題が起きる Host だけ <code>ControlMaster no</code> を設定する方法があると思います。</p>

<p><code>ControlPath</code> は XDG Base Directory Specification の <code>XDG_CACHE_HOME</code> を参考にして <code>$HOME/.cache</code> を使って <code>ControlPath ~/.cache/ssh,%r,%h,%p,sock</code> にしています。(区切りはどの OS でも問題が起きにくそうなのとホスト名の中の <code>.</code> と区別できるように、ということで <code>,</code> にしています。)</p>

<p><code>ControlPersist</code>は OpenSSH 5.6 で、存在を知った当時はまだ対応していない OS の方が多かったので、使っていませんでしたが、せっかくなので <code>ControlPersist 10</code> に設定してみました。</p>

<h2>DynamicForward</h2>

<p>SOCKS proxy 機能です。</p>

<p>ブラウザーの接続元 IP アドレスを変えてテストしたい時に使うことがあったので、</p>

<pre><code>Host hoge hoge-proxy
HostName FQDNかIPアドレス
# ...その他の設定...

Host hoge-proxy
DynamicForward 1088
</code></pre>

<p>のように、<code>ssh hoge-proxy</code> で有効になるように設定していることもありましたが、滅多に使わないので、コマンドラインで <code>-D 1080</code> のように明示的に指定して使うことの方が多くなりました。</p>

<h2>ExitOnForwardFailure</h2>

<p>ポートフォワーディングを設定しているのにポートフォワーディングされていないことの方が、ポートフォワーディングを設定している先に多重に接続できなくて困ることより多かったので、 <code>ExitOnForwardFailure yes</code> で有効にしています。</p>

<h2>FingerprintHash</h2>

<p>サーバー側の OpenSSH が古い時に <code>ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub</code> などの結果が md5 固定なので、クライアントの OpenSSH が新しい時に <code>ssh -o FingerprintHash=md5</code> で md5 に変更して照合しています。</p>

<p>サーバー側が新しくて、クライアントが古い時に md5 の fingerprint を出すのは <code>ssh-keygen -l -E md5 -f /etc/ssh/ssh_host_ecdsa_key.pub</code> などのようです。</p>

<p>おまけの情報として、簡単に fingerprint の照合をするのに、適当なエディターにコピペして検索して全体がハイライトされるのを確認するという方法があります。
ダウンロードしたファイルのハッシュの確認にも同じ方法を使っています。</p>

<h2>ForwardAgent, ForwardX11</h2>

<p>セキュリティリスクがあるので、必要な時はコマンドラインで明示的に <code>-A</code> や <code>-X</code> で使うようにしています。</p>

<h2>HashKnownHosts</h2>

<p>不便さの方が大きい (IP アドレスも追加されているかどうか確認しにくいなど) と感じているので、 <code>HashKnownHosts no</code> で無効にしています。</p>

<h2>HostKeyAlias</h2>

<p>多段 SSH の時などに使っています。</p>

<h2>HostName</h2>

<pre><code>Host hoge hoge.example.com
HostName hoge.example.com
</code></pre>

<p>のようにして、 FQDN の代わりに短いホスト名で接続できるようにしたり、 <code>HostName IPアドレス</code> で IP アドレスを直接指定したり、よく使っています。</p>

<h2>IdentitiesOnly, IdentityFile</h2>

<p><code>IdentitiesOnly yes</code> と <code>IdentityFile</code> をセットで使って特定の鍵を使うように指定できます。
<code>IdentityFile</code> のみだと <code>ssh-agent</code> に登録されている全ての鍵を試してしまうので、普通は <code>IdentitiesOnly yes</code> とセットにして使うと思います。</p>

<p>GitHub や Heroku などのように鍵でユーザーが区別されるサービスで複数ユーザーを使い分ける時には必須だと思います。</p>

<h2>LocalCommand, PermitLocalCommand</h2>

<p>あまり使うことはなさそうですが、不用意に出力を伴うコマンドを設定していると、内部的に ssh を使うコマンドが謎の失敗をする原因になることがあります。</p>

<h2>LocalForward</h2>

<p>IRC bouncer に接続するのに</p>

<pre><code>LocalForward 6665 127.0.0.1:6665
LocalForward 6666 127.0.0.1:6666
LocalForward 6667 127.0.0.1:6667
</code></pre>

<p>という感じで使っていましたが、 TCP over TCP はあまりよくないということで、今は OpenVPN を使うようになったので、使っていません。</p>

<h2>NoHostAuthenticationForLocalhost</h2>

<p>仮想環境への接続で問題が起きたことがあるので <code>NoHostAuthenticationForLocalhost yes</code> にしています。</p>

<h2>Port</h2>

<p>ポート番号を変更している Host の設定によく使います。
明示的に <code>Port 22</code> を書いていることもあります。</p>

<h2>ProxyCommand, ProxyJump</h2>

<p>gateway を経由して target に接続するのに</p>

<pre><code>Host target
HostKeyAlias target.example.com
Hostname target.example.com
ProxyCommand ssh gateway.example.com nc -w 330 target.example.com 22
</code></pre>

<p>のように使っていました。</p>

<p>このような場合に OpenSSH 7.3 以降だと <code>ProxyJump</code> という設定が使えそうです。</p>

<p>今はそういう接続が必要な Host がないので使っていません。</p>

<h2>RequestTTY</h2>

<p><a href="http://dokku.viewdocs.io/dokku/" title="Dokku">Dokku</a> のように常に有効にしていた方が便利な Host に <code>RequestTTY yes</code> を指定しています。</p>

<p>たとえば dokku の vagrant 環境用の設定全体は以下のようにしています。</p>

<pre><code> Host dokku dokku.me
 User dokku
 HostName 10.0.0.2
 Port 22
 UserKnownHostsFile /dev/null
 StrictHostKeyChecking no
 PasswordAuthentication no
 #IdentityFile ~/.vagrant.d/insecure_private_key
 IdentityFile ~/.ssh/id_rsa
 IdentitiesOnly yes
 LogLevel FATAL
 RequestTTY yes
</code></pre>

<h2>ServerAliveInterval</h2>

<p>接続が切れた時にタイムアウトしてくれる設定です。
昔 Debian には <code>ProtocolKeepAlives</code> という設定がありましたが、今は <code>ServerAliveInterval</code> がどの OS でも使えます。
<code>ServerAliveInterval 300</code> や <code>ServerAliveInterval 30</code> を設定しています。</p>

<h2>StrictHostKeyChecking</h2>

<p>vagrant 環境など、ローカルの接続でホスト鍵も変わる可能性のある Host で <code>StrictHostKeyChecking no</code> にしています。</p>

<h2>Tunnel, TunnelDevice</h2>

<p>ssh のプロセスに与える権限が大きくなりすぎてしまうので使いにくいと思って使っていません。
代わりにトンネルには OpenVPN を使っています。</p>

<h2>UpdateHostKeys</h2>

<p>OpenSSH 6.8 以降のサーバーとクライアントだと複数のホスト鍵を受け取れるようになるようなので <code>UpdateHostKeys ask</code> にしておくと良さそうです。</p>

<p>試してみると、たとえば <code>ecdsa-sha2-nistp256</code> のホスト鍵だけ <code>known_hosts</code> に登録されているホストに接続する時に</p>

<pre><code>% ssh localhost
vagrant@localhost's password:
Learned new hostkey: RSA SHA256:+sjb9SQChXBlm/pZDyl8ORJQb4wP16eeKDqUvDli5wU
Learned new hostkey: ED25519 SHA256:rvlZW3lRcN86oPu19ym032zhuzVLz37E88A3VX2fVHE
Accept updated hostkeys? (yes/no): yes
</code></pre>

<p>のように RSA のホスト鍵と ED25519 のホスト鍵も <code>known_hosts</code> に登録するかどうかきいてきました。
(試した範囲では DSA の鍵は追加されませんでした。)</p>

<p>サーバー側が古いバージョンでも特に何も悪影響はなさそうなので、クライアントが OpenSSH 6.8 以降ならデフォルトで有効にしても良さそうです。
(クライアントが古いとエラーになるので、バージョンが古いうちから書いておくことはできない。)</p>

<p><code>ssh_config</code> の説明に書いてあるように <code>ControlPersist</code> を有効にしていると <code>UpdateHostKeys</code> は無効になるようです。</p>

<h2>User</h2>

<p><code>ssh user@host</code> で指定する代わりに <code>~/.ssh/config</code> で <code>User</code> を設定することが多いです。</p>

<h2>UserKnownHostsFile</h2>

<p>ローカルの仮想環境は <code>UserKnownHostsFile /dev/null</code> で事実上無効にしたり、<code>UserKnownHostsFile ~/.ssh/known_hosts.d/hoge.known_hosts</code> のように個別ファイルにして調べる行数を減らして速くしたりしています。</p>

<h2>VerifyHostKeyDNS</h2>

<p><a href="https://devcenter.heroku.com/articles/git-repository-ssh-fingerprints#verifying-with-dns" title="Verifying with DNS">Verifying with DNS</a> に書いてあるように <code>heroku.com</code> は SSHFP リソースレコードが設定されているようなので、 <code>VerifyHostKeyDNS yes</code> にしています。</p>

<h2>まとめ</h2>

<p><code>ServerAliveInterval</code> のように以前設定を見直したときにどの環境でも使えるようになっていたものもありましたが、 <code>ControlPersist</code> のように以前は使えない環境もあったけど、今はどこでも使える設定があったり、 <code>UpdateHostKeys</code> のようにまだ使えない環境もある設定もあったりするので、たまに気が向いたときに設定の見直しをするのはお勧めだと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DDD.rb #11 (Rails with React) (Mastodon のコードリーディング) に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-10-mastodon.html"/>
    <updated>2017-05-10T23:59:59+09:00</updated>
    <id>http://blog.n-z.jp/blog/mastodon</id>
    <content type="html"><![CDATA[<p><a href="https://dddrb.doorkeeper.jp/events/60099" title="DDD.rb #11 (Rails with React)">DDD.rb #11 (Rails with React)</a> という Mastodon のコードリーディングに参加したので、そのメモです。</p>

<p>インストールがほとんどでコードリーディングはほとんどできなかったので、大まかな読み方の話だけで、あまり突っ込んだ話はありませんでした。</p>

<!--more-->


<h2>メモ</h2>

<ul>
<li>次回は <a href="https://dddrb.doorkeeper.jp/events/60238" title="DDD.rb #12 RDRA for DDD ワークショップ！ - DDD.rb | Doorkeeper">DDD.rb #12 RDRA for DDD ワークショップ！ - DDD.rb | Doorkeeper</a> (RDRA はラドラと読むらしい)</li>
<li><a href="http://motokase.com/mastodon-matome/" title="マストドン評判とは！SNS初心者が安全にMastodonを楽しむ方法">マストドン評判とは！SNS初心者が安全にMastodonを楽しむ方法</a>の最初の方が参考になる</li>
<li>ローカルで起動するには <a href="https://github.com/tootsuite/mastodon/blob/e2491680e696d2c285a798ec4c66b26d2748df66/docs/Running-Mastodon/Development-guide.md">docs/Running-Mastodon/Development-guide.md</a> のリンク先の <a href="https://github.com/tootsuite/documentation/blob/master/Running-Mastodon/Development-guide.md">Development guide</a> を参照</li>
<li>vagrant も手軽</li>
<li>開発環境のメールは <a href="https://github.com/ryanb/letter_opener">https://github.com/ryanb/letter_opener</a> を使っている</li>
<li>master だと jquery-rails が消えている</li>
<li>master だと .foreman と Procfile.dev で streaming のサーバーなども起動する</li>
<li>今の master は cld3 でエラーになりやすい</li>
<li>基本的に v1.3.3 のタグで試そうという話に</li>
<li>react のルーティングは <code>./app/assets/javascripts/components/containers/mastodon.jsx</code> をみる</li>
<li><code>&lt;Route path='getting-started' component={GettingStarted} /&gt;</code> とか</li>
<li>翻訳が難しい話 (連合とか未収載とか)</li>
<li>docker を使うなら docker-compose.yml を直接書き換える代わりに docker-compose.override.yml が使える</li>
</ul>


<h3>getElementById</h3>

<ul>
<li>HTML ソースに <code>&lt;script id='initial-state' type='application/json'&gt;</code> がある</li>
<li><code>getElementById</code> で検索</li>
<li><code>app/assets/javascripts/components/containers/mastodon.jsx</code> に <code>const initialState = JSON.parse(document.getElementById("initial-state").textContent);</code> とある</li>
</ul>


<h3>react のソースの読み方</h3>

<ul>
<li>react のページのざっくりとした見分け方は HTML ソースがやけに少ないときは react (登録ページなど devise 由来のページは react を使っていない)</li>
<li><code>data-react-class</code> がついてるところに差し込まれている</li>
<li>react のルーティングは <code>./app/assets/javascripts/components/containers/mastodon.jsx</code> をみる</li>
<li><code>&lt;Route path='getting-started' component={GettingStarted} /&gt;</code> とか</li>
<li><code>localhost:3000/web/</code> は残して <code>localhost:3000/web/getting-started</code> を開くと出てくる</li>
<li><code>&lt;Route path='blocks' component={Blocks} /&gt;</code> は <code>import Blocks from '../features/blocks';</code> なので <code>app/assets/javascripts/components/features/blocks/index.jsx</code> にある</li>
</ul>


<h3>ストリーミングは?</h3>

<ul>
<li><code>app/assets/javascripts/components/api.jsx</code> にクライアントがある</li>
<li><code>axios</code> (アクシオス) を使っている</li>
<li><p><code>Authorization</code> で <code>Bearer</code> トークンを渡している</p></li>
<li><p>サーバー側は <code>streaming/index.js</code> にある (トップ直下)</p></li>
<li><code>import WebSocket from 'ws'</code></li>
<li>nginx などで受けて rails と振り分けられてここにくるので <code>wss</code> ではなく <code>ws</code> のみ</li>
</ul>


<h3>storybook とは?</h3>

<ul>
<li>直下に storybook ディレクトリがあるのでその話題</li>
<li>動くスタイルガイド?</li>
</ul>


<h3>その他</h3>

<ul>
<li><code>app/controllers/auth</code> に <code>devise</code> 関連</li>
<li><code>User</code> と <code>Account</code> が別にある</li>
<li><code>app/controllers/api</code> に API 関連</li>
</ul>


<h3><code>package.json</code></h3>

<ul>
<li><code>chai</code> はいろいろなものを入れる必要がある</li>
<li>rails を使う人はよく使っているらしい</li>
<li><code>sinon</code> もテストのライブラリでスタブを使いたいからではないか</li>
</ul>


<h3>ActionCable</h3>

<ul>
<li>actioncable という node (npm) のモジュールがある</li>
<li>開発元は <a href="https://github.com/rails/rails/blob/master/actioncable/package.json">https://github.com/rails/rails/blob/master/actioncable/package.json</a> らしい</li>
<li>サーバー側とクライアント側で同じ名前なので紛らわしい</li>
<li>npm の方の actioncable はあまり情報がない</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ LILO&東海道らぐオフラインミーティング 2017/05/06]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-06-lilo-tokaidolug.html"/>
    <updated>2017-05-06T13:17:50+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-tokaidolug</id>
    <content type="html"><![CDATA[<p><a href="https://lilo.connpass.com/event/55003/" title="LILO&amp;東海道らぐオフラインミーティング 2017/05/06">LILO&amp;東海道らぐオフラインミーティング 2017/05/06</a> に参加しました。</p>

<p>今回もアンカンファレンス形式でした。</p>

<!--more-->


<h2>メモ</h2>

<p>今回のメモです。</p>

<ul>
<li>会場はいつもの 4 階でした。</li>
<li>ハッシュタグ: <code>#lilo_jp</code> <code>#東海道らぐ</code></li>
<li>登録参加者数 16名</li>
<li>自己紹介から</li>
</ul>


<h2>自分の発表</h2>

<ul>
<li>資料にある話</li>
<li>資料にないけど DNS CAA の話</li>
<li>CAA レコードに書いて spam が増えなかったかという話</li>
<li>公開しているアドレスなので変化はわからず</li>
<li>.travis.yml に書いた時には明らかに増えた</li>
<li>質問があったので、ちょっと etckeeper の話 (etckeeper vcs とか)</li>
</ul>


<h2>こんどうさん</h2>

<ul>
<li>ESP パーティションの話</li>
<li>ESP 内の grub データを消せば Windows のみになる</li>
<li>BIOS/MBR から UEFI の過渡期の話</li>
<li>openSUSE の話</li>
<li>openSUSE Asia Summit 招聘中</li>
<li>LibO もほぼ併催確定</li>
<li>Cinnamon を入れた</li>
<li>Linux Mint 17.3 with NVIDIA Driver は GPU 切り替えがログアウトだけで可能</li>
<li>18.1 では切り替え NG (プロプラドライバとの相性も悪い)</li>
<li>M17N: ibus の設定</li>
<li>SUSE のデフォルトは <code>/</code> が btrfs で <code>/home</code> が XFS</li>
</ul>


<h2>5分休憩</h2>

<h2>としひささん</h2>

<ul>
<li>スマートウォッチ</li>
<li>WSD-F20 と Pebble</li>
<li>必要な理由とか要件とか</li>
<li>特徴とか比較とか</li>
<li>個人的には Pebble の方が良い</li>
<li>WSD-F20 は GPS ロガーにはならない</li>
<li><p>Android Wear 2.0 はアプリが少ない</p></li>
<li><p>LILO の歴史 <a href="https://lilo.linux.or.jp/history/">https://lilo.linux.or.jp/history/</a></p></li>
<li>今年で 20 年</li>
<li>インストールからサポートする場、九州でやっているから関西でも、というのが発足理由</li>
<li>Samba の話で 150 人ぐらいきたことがあるのがピーク</li>
<li>普通は多くて50人ぐらい</li>
<li>普通は10から20人ぐらい</li>
<li>タコを育てようという文化</li>
<li>JF がすばらしい</li>
<li>Linux は初心者を大切にするのが良い</li>
<li><a href="https://twitter.com/xoxyuxu/status/860737579657732098">https://twitter.com/xoxyuxu/status/860737579657732098</a> JFは素晴らしい(ドキュメントがあることは素晴らしい) タコを育てよ(判らないことがある環境が悪い,という考え方)</li>
<li>みんないろんなものを持ってきていた</li>
<li>NAIST でやっていた奈良時代</li>
<li>場所が先端</li>
<li>デスクトップマシンを持ってくるのが普通</li>
<li>Doom をやりたくて Linux を入れた人もいる</li>
<li>Enlightment は昔からかっこいい</li>
<li>昔は重かったが時代が変わって今は軽い</li>
<li>Tizen にのっているので今も開発は活発</li>
<li>第3回のアンケート結果</li>
<li>2002年より後の歴史は分散していてまとまっていない</li>
<li>Wiki にある <a href="https://lilo.linux.or.jp/wiki/history">https://lilo.linux.or.jp/wiki/history</a></li>
<li>トップから辿れる一覧ページもある <a href="https://lilo.linux.or.jp/event/">https://lilo.linux.or.jp/event/</a></li>
<li>LMS だけ別ページ <a href="https://lilo.linux.or.jp/event/lms/">https://lilo.linux.or.jp/event/lms/</a></li>
</ul>


<h2>さかのしたさん</h2>

<ul>
<li>「Google map 印刷 制約」で検索</li>
<li><a href="https://www.google.co.jp/intl/ja/permissions/geoguidelines.html">https://www.google.co.jp/intl/ja/permissions/geoguidelines.html</a></li>
<li>Google Map は使用に制限がある</li>
<li>Open Street Map</li>
<li>facebook のチェックインなどに使われている</li>
<li>overpass turbo</li>
<li>f4map - 延暦寺</li>
<li><a href="https://www.netfort.gr.jp/~saka/accessmap/">OSM Access Map</a> というのを作った</li>
<li>道路のみの画像を保存できる</li>
<li>道路の区別は実データを元にご意見募集中</li>
<li>ゼンリンが地図グッズを売っている <a href="http://www.zenrin.co.jp/goods/matimati/item/">http://www.zenrin.co.jp/goods/matimati/item/</a></li>
<li>SUZURI でグッズを売る?</li>
<li>5月20日(土) 【西国街道#04】摂津富田の街並みと寺社巡り <a href="https://countries-romantic.connpass.com/event/56126/">https://countries-romantic.connpass.com/event/56126/</a></li>
</ul>


<h2>やまうちさん</h2>

<ul>
<li>実践IOTハウス 古いPCで</li>
<li>Tocos 無線モジュール</li>
<li>Raspberry Pi が遅いので古い PC に置き換え</li>
<li>Linux Beans</li>
<li>TOCOS TWE-Lite と ToCoStick で簡易照度センサー(100均電卓)</li>
<li>太陽電池部分の電圧をとっている</li>
<li>デモはうまく動かず</li>
</ul>


<h2>休憩</h2>

<ul>
<li>懇親会参加予定は 10 名</li>
<li>会場費は 100 円</li>
</ul>


<h2>もりわかさん</h2>

<ul>
<li><a href="https://developers.redhat.com/">https://developers.redhat.com/</a></li>
<li>登録すると 1 年間無料で開発用途に使える</li>
<li>1 年後に更新すればずっと使える</li>
<li>シェルスクリプト10行ぐらい書くよねという話</li>
<li>JBoss などもある</li>
<li>ナレッジベースやドキュメントにもアクセスできる</li>
<li>質の高いドキュメント</li>
<li>実マシン1台という制限があるが、VM の制限はないのですごいマシンを用意して 100 VM とかでも OK</li>
<li>会社で開発者がそれぞれ登録して手元のマシンはそれで動かすと言うのもあり</li>
<li>バグかどうか困ったらサポートを買うのが良い</li>
</ul>


<h2>のがたさん</h2>

<ul>
<li><a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0462">第462回　韓国開催，Korea Community Day参加レポート 〜Ubuntu KRのみなさんと交流してきました：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社</a></li>
<li>記事とは違う話を</li>
<li><a href="http://cogniti.github.io/nimf/ja/">http://cogniti.github.io/nimf/ja/</a> (ibus などの層のもの) の開発者の人と Google 翻訳を使って話をした</li>
<li>Google 翻訳は韓国語と日本語の翻訳はスラングなどを使わずきれいに話せば精度良く翻訳できるので、突っ込んだ話もできた</li>
<li>Samsung と Tizen</li>
<li>言語が違うだけでやっていることは同じだと思った話</li>
</ul>


<h2>ぉゅぅさん</h2>

<ul>
<li>Ext4 filesystem ではまった話</li>
<li>32 bit OS だと 16TiB まで</li>
<li>ブロックアロケータまで調べた</li>
<li><code>posix_fallocate</code></li>
<li><a href="http://www.ujiya.net/linux/">http://www.ujiya.net/linux/</a></li>
</ul>


<h2>今後の予定</h2>

<ul>
<li>次回はたぶん 8 月</li>
</ul>


<h2>発表した内容</h2>

<p>スライドはいつも通り <a href="http://slide.rabbit-shocker.org/authors/znz/lilo-20170506/">Rabbit Slide Show</a> (<a href="https://rubygems.org/gems/rabbit-slide-znz-lilo-20170506">RubyGems</a>), <a href="https://slideshare.net/znzjp/lilolinuxorjp-20175">SlideShare</a>, <a href="https://speakerdeck.com/u/znz/p/lilo-dot-linux-dot-or-dot-jp-falsehua-2017nian-5yue">Speaker Deck</a> にあげています。(ソースは <a href="https://github.com/znz/lilo-20170506">github</a> にあげています。)</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/lilo-20170506/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/lilo-20170506/" title="lilo.linux.or.jp の話 (2017年5月)">lilo.linux.or.jp の話 (2017年5月)</a>
</div>


<h2>Togetter まとめ</h2>

<p><a href="https://togetter.com/li/1107707">LILO&amp;東海道らぐオフラインミーティング 2017/05/06の記録 - Togetterまとめ</a>にまとめられているようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rubyのsample/cbreak.rbをSolarisで試した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-02-ruby-sample.html"/>
    <updated>2017-05-02T21:23:14+09:00</updated>
    <id>http://blog.n-z.jp/blog/ruby-sample</id>
    <content type="html"><![CDATA[<p>ruby の <a href="https://github.com/ruby/ruby/blob/3692fd69ca10fb921db5cc74a6da5eaa66808f38/sample/cbreak.rb">sample/cbreak.rb</a> は Linux で試しても動かなくて、ファイルの頭に <code># ioctl example works on Sun</code> と書いてあったので、
Solaris で試してみました。</p>

<!--more-->


<h2>vagrant box 探し</h2>

<p>「vagrant solaris」で検索して
<a href="https://vagrantcloud.com/boxes/search?q=solaris&amp;utf8=%E2%9C%93">https://vagrantcloud.com/boxes/search?q=solaris&amp;utf8=%E2%9C%93</a>
の中から
<a href="https://vagrantcloud.com/plaurin/boxes/solaris-11_3">plaurin/solaris-11_3</a>
が比較的新しくて良さそうかなと思って使うことにしました。</p>

<h2>VM 作成</h2>

<p>適当なディレクトリを作成して <code>vagrant init</code> をしました。</p>

<pre><code>mkdir solaris-11_3
cd solaris-11_3
vagrant init plaurin/solaris-11_3
</code></pre>

<p>説明ページに書いてあったので <code>vi Vagrantfile</code> で</p>

<pre><code>config.ssh.password = "1vagrant"
</code></pre>

<p>を追加しました。</p>

<pre><code>vagrant up
</code></pre>

<p>してダウンロードなどを待ちます。</p>

<p>後は</p>

<pre><code>vagrant ssh
</code></pre>

<p>で入って VM の中で作業しました。</p>

<h2>git インストール</h2>

<p>とりあえず git をインストールすることにしました。</p>

<p><a href="https://git-scm.com/download/linux">https://git-scm.com/download/linux</a> に書いてあったように</p>

<pre><code>sudo pkg install developer/versioning/git
</code></pre>

<p>でインストールできました。</p>

<h2>autoconf インストール</h2>

<p>必要になるのがわかっているので autoconf もインストールしました。
パッケージ名は適当に指定してみたらインストールできました。</p>

<pre><code>sudo pkg install autoconf
</code></pre>

<h2>git clone</h2>

<p>履歴はなくても良いので、 <code>--depth 1</code> で最新だけとってきました。</p>

<pre><code>git clone --depth 1 https://github.com/ruby/ruby
</code></pre>

<h2>とりあえず configure</h2>

<p>とりあえず configure まで実行するとエラーになりました。</p>

<pre><code>vagrant@solaris:~$ cd ruby
vagrant@solaris:~/ruby$ autoconf
vagrant@solaris:~/ruby$ mkdir build
vagrant@solaris:~/ruby$ cd build
vagrant@solaris:~/ruby/build$ ../configure --prefix=$HOME/opt/ruby
checking for ruby... false
configure: error: cannot run /bin/sh ../tool/config.sub
</code></pre>

<h2>baseruby をインストール</h2>

<p>リリースされたアーカイブではないので、baseruby となる ruby が必要ということで ruby をインストールしてやり直しました。</p>

<pre><code>vagrant@solaris:~/ruby/build$ sudo pkg install ruby
(略)
vagrant@solaris:~/ruby/build$ ../configure --prefix=$HOME/opt/ruby
checking for ruby... /usr/bin/ruby
downloading config.guess ... done
downloading config.sub ... done
checking build system type... i386-pc-solaris2.11
checking host system type... i386-pc-solaris2.11
checking target system type... i386-pc-solaris2.11
checking for gcc... no
checking for cc... no
checking for cl.exe... no
configure: error: in `/export/home/vagrant/ruby/build':
configure: error: no acceptable C compiler found in $PATH
See `config.log' for more details
</code></pre>

<h2>gcc をインストール</h2>

<p>C compiler がなくて、何を入れればいいのかよくわからなかったので、とりあえず gcc を指定してみたら入りました。</p>

<pre><code>vagrant@solaris:~/ruby/build$ sudo pkg install gcc
(略)
vagrant@solaris:~/ruby/build$ ../configure --prefix=$HOME/opt/ruby
(略)
---
Configuration summary for ruby version 2.5.0

head: illegal option -- c
usage: head [-n #] [-#] [filename...]
/export/home/vagrant/opt/ruby
head: illegal option -- c
usage: head [-n #] [-#] [filename...]
${prefix}
head: illegal option -- c
(略)
head: illegal option -- c
usage: head [-n #] [-#] [filename...]
yes
head: illegal option -- c
usage: head [-n #] [-#] [filename...]
man

---
</code></pre>

<p>configure 自体は問題がなかったようですが、サマリーの表示部分でエラーになりました。</p>

<h2>head -c を書き換え</h2>

<p>head -c は <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/head.html">POSIX</a> になくて、代わりの手段を探してみたところ、<a href="http://qiita.com/richmikan@github/items/bd4b21cf1fe503ab2e5c#head%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89">どの環境でも使えるシェルスクリプトを書くためのメモ ver4.51 - Qiita の headコマンド</a> にあったので <code>head -c26</code> を <code>dd bs=1 count=26 2&gt;/dev/null</code> に書き換えました。</p>

<pre><code>vagrant@solaris:~/ruby/build$ cd ..
vagrant@solaris:~/ruby$ vi configure.in
vagrant@solaris:~/ruby$ autoconf
vagrant@solaris:~/ruby$ cd build
vagrant@solaris:~/ruby/build$ ../configure --prefix=$HOME/opt/ruby
(略)
vagrant@solaris:~/ruby/build$ make
(略)
generating parse.c
sh: line 1: bison: not found
*** Error code 127
The following command caused the error:
bison -d  -o y.tab.c parse.tmp.y
make: Fatal error: Command failed for target `parse.c'
</code></pre>

<h2>bison インストール</h2>

<p>リリースされたアーカイブだと不要なので configure ではチェックされない bison が必要だったのでインストールしました。</p>

<pre><code>vagrant@solaris:~/ruby/build$ sudo pkg install bison
(略)
vagrant@solaris:~/ruby/build$ make
(略)
 compiling ../process.c
 ../process.c: In function ‘retry_fork_async_signal_safe’:
 ../process.c:3573:9: error: ‘fork’ is deprecated (declared at /usr/include/unistd.h:301) [-Werror=deprecated-declarations]
          pid = fork();
          ^
 ../process.c: In function ‘retry_fork_ruby’:
 ../process.c:3638:9: error: ‘fork’ is deprecated (declared at /usr/include/unistd.h:301) [-Werror=deprecated-declarations]
          pid = fork();
          ^
 ../process.c: At top level:
 cc1: warning: unrecognized command line option "-Wno-self-assign" [enabled by default]
 cc1: warning: unrecognized command line option "-Wno-constant-logical-operand" [enabled by default]
 cc1: warning: unrecognized command line option "-Wno-parentheses-equality" [enabled by default]
 cc1: warning: unrecognized command line option "-Wno-tautological-compare" [enabled by default]
 cc1: some warnings being treated as errors
 *** Error code 1
 The following command caused the error:
 gcc -O3 -fno-fast-math -ggdb3 -Wall -Wextra -Wno-unused-parameter -Wno-parentheses -Wno-long-long -Wno-missing-field-initializers -Wno-tautological-compare -Wno-parentheses-equality -Wno-constant-logical-operand -Wno-self-assign -Wunused-variable -Werror=implicit-int -Werror=pointer-arith -Werror=write-strings -Werror=declaration-after-statement -Werror=implicit-function-declaration -Werror=deprecated-declarations -Wno-packed-bitfield-compat -Wsuggest-attribute=noreturn -Wsuggest-attribute=format -std=gnu99  -D_FORTIFY_SOURCE=2 -fstack-protector -fno-strict-overflow -fvisibility=hidden -fexcess-precision=standard -DRUBY_EXPORT -fPIE   -I. -I.ext/include/i386-solaris2.11 -I../include -I.. -I../enc/unicode/9.0.0 -o process.o -c ../process.c
 make: Fatal error: Command failed for target `process.o'
</code></pre>

<p><code>fork</code> が deprecated だということでエラーになりました。</p>

<h2><code>-Werror=deprecated-declarations</code> 削除</h2>

<p>とりあえず今回試したい件とは関係ないので <code>warnflags</code> から <code>-Werror=deprecated-declarations</code> を削除しました。</p>

<pre><code>vagrant@solaris:~/ruby/build$ sed -e 's/-Werror=deprecated-declarations//' Makefile &gt; a
vagrant@solaris:~/ruby/build$ mv a Makefile
vagrant@solaris:~/ruby/build$ make
(略)
vagrant@solaris:~/ruby/build$ make install
(略)
</code></pre>

<h2>sample/cbreak.rb の動作確認</h2>

<p>動かしてみたら <code>STDIN.ioctl(TIOCGETP, tty)</code> で <code>Errno::EINVAL</code> になりました。</p>

<pre><code>vagrant@solaris:~/ruby/build$ export PATH=$HOME/opt/ruby/bin:$PATH
vagrant@solaris:~/ruby/build$ ruby -v
ruby 2.5.0dev (2017-05-02 trunk 58541) [i386-solaris2.11]
vagrant@solaris:~/ruby/build$ ruby ../sample/cbreak.rb
        from ../sample/cbreak.rb:30:in `&lt;main&gt;'
        from ../sample/cbreak.rb:9:in `cbreak'
        from ../sample/cbreak.rb:18:in `set_cbreak'
../sample/cbreak.rb:18:in `ioctl': Invalid argument @ rb_ioctl - &lt;STDIN&gt; (Errno::EINVAL)
</code></pre>

<h2>TIOCGETP の確認</h2>

<pre><code>vagrant@solaris:~/ruby/build$ find /usr/include -name '*.h' | xargs grep TIOCGETP
/usr/include/sgtty.h:#define    TIOCGETP        (('t'&lt;&lt;8)|8)
/usr/include/sys/mtio.h:#define MTIOCGETPOS             (MTIOC|17)      /* Get drive position */
/usr/include/sys/termios.h:#define      TIOCGETP        (tIOC|8)
/usr/include/sys/ttold.h: * Structure for TIOCGETP and TIOCSETP ioctls.
/usr/include/sys/ttold.h:#define        TIOCGETP        (tIOC|8)
vagrant@solaris:~/ruby/build$ vi a.c
vagrant@solaris:~/ruby/build$ gcc a.c
vagrant@solaris:~/ruby/build$ ./a.out
7408
vagrant@solaris:~/ruby/build$ cat a.c
#include &lt;sgtty.h&gt;
#include &lt;stdio.h&gt;

int main() {
        printf("%x\n", TIOCGETP);
        return 0;
}
</code></pre>

<p>include するのが <code>sys/termios.h</code> でも <code>sys/ttold.h</code> でも 7408 でした。</p>

<p><code>sample/cbreak.rb</code> では <code>TIOCGETP = 0x40067408</code> なので、何か違うようです。</p>

<h2>macOS で確認</h2>

<p>そういえば macOS だとどうだろうと思って試してみたら、動いてしまいました。</p>

<p>ただし <code>readline().print</code> のところで <code>sample/cbreak.rb:33:in `&lt;main&gt;': private method `print' called for "hoge\n":String (NoMethodError)</code> でこけたので、直す必要がありました。</p>

<h2>まとめ</h2>

<p>ruby の sample はリリースに含まれていても、そのバージョンで動作確認されているとは限らないようです。</p>

<p><code>readline().print</code> は <code>Kernel#readline</code> が <code>String</code> を返して、その <code>Kernel#print</code> を呼んでいるようなので、どのくらい古い ruby だと動くのか、それとも最初から動かなかったのか、よくわかりませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第14回関西LibreOffice勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-29-libokansai.html"/>
    <updated>2017-04-29T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/libokansai</id>
    <content type="html"><![CDATA[<p><a href="https://connpass.com/event/53960/" title="第14回関西LibreOffice勉強会">第14回関西LibreOffice勉強会</a>に参加しました。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場など</h2>

<ul>
<li>地図ソフトで三国駅から歩くルートも表示されたので、早めに出発して時間もあったので、歩いてみました。(帰りは懇親会には参加しなかったので、十三駅まで歩いてちょっと梅田に出てから帰りました。)</li>
<li>セキュリティがかかって閉まっていてオフィスフロアに入れなくて、しばらく待っていました。</li>
<li>普通の土曜日なら開いているのに、祝日だから閉まっていたようです。</li>
<li>電源やネットワークはなし</li>
<li>飲食は可能</li>
</ul>


<h2>自己紹介</h2>

<p>自分はたぶん初参加でした。</p>

<p>久しぶりに参加という人も何人かいて、長く続いている勉強会という感じを受けました。</p>

<h2>書式の自由が社会を変える―LibreOfficeとPandocができること</h2>

<ul>
<li>発表資料: <a href="https://github.com/sky-y/libreoffice-kansai-14-pandoc">https://github.com/sky-y/libreoffice-kansai-14-pandoc</a></li>
<li><p>Pandoc の日本語ドキュメントは古くなってしまっているので、英語が読めるなら本家の英語を推奨</p></li>
<li><p>この発表の概要</p></li>
<li>Pandoc の概要</li>
<li>Pandoc をインストールする</li>
<li>Pandoc でドキュメントを変換する (LibreOffice Writer 文書を中心に)</li>
<li><p>「書式の自由」について</p></li>
<li><p>対応フォーマットが多い</p></li>
<li>ODT などは入力にも対応</li>
<li><p>Markdown とは</p></li>
<li><p>Pandoc でできないこと</p></li>
<li>スプレッドシートは扱えない</li>
<li>簡単な表は対応している</li>
<li>LibreOffice Impress には対応してない</li>
<li><p>LaTeX Beamer/HTML プレゼンには変換可能</p></li>
<li><p>Pandoc を使う心得</p></li>
<li>過剰な期待をし過ぎないこと</li>
<li>Pandoc は万能でないし、文書仕様の全てを満たしているわけではない</li>
<li><p>補助的に使うのがベスト</p></li>
<li><p>Pandoc の実装は Haskell</p></li>
<li><p>補足: Markdownと標準仕様</p></li>
<li>RFC で Media Typeにて「Markdownであること」と「方言の名前」を明示する方法を定めた</li>
<li><p>(RFC でうまくいかなかったというと Cookie を思い出した)</p></li>
<li><p>質疑応答</p></li>
<li><p>文字コードは UTF-8 で</p></li>
<li><p>Pandoc をインストールする</p></li>
<li>wkhtmltopdf の wk は WebKit らしい</li>
<li>動作確認</li>
<li><code>echo "http://localhost" | pandoc -f markdown_github -t html</code> のように <code>markdown_github</code> だと自動リンクがある</li>
<li><p><code>echo "**Hello**" | pandoc -f markdown -t html5 -o hello.pdf</code></p></li>
<li><p>おまけ: Pandocで作れるスライド</p></li>
<li>今回は「reveal.js」形式に変換</li>
<li><p>LaTeX Beamer など他のプレゼン形式にも変換できる</p></li>
<li><p>Pandoc でドキュメントを変換する</p></li>
<li><a href="https://github.com/sky-y/libreoffice-kansai-14-pandoc">https://github.com/sky-y/libreoffice-kansai-14-pandoc</a> の sample で変換を試す</li>
<li><p>Windows の start コマンド、GNOME の gnome-open や macOS の open に相当</p></li>
<li><p>テンプレート</p></li>
<li><code>pandoc --print-default-data-file reference.odt &gt; reference.odt</code></li>
<li>左の <code>reference.odt</code> は pandoc 内部のテンプレートディレクトリの中のファイル名を指定している</li>
<li>右は出力ファイル名なので紛らわしいが別物</li>
<li><p>スタイルで 源ノ角ゴシック (げんの かくごしっく) に変えるとか</p></li>
<li><p>画像に関するノウハウ</p></li>
<li><p>96dpi よりも 300dpi の方が良いという指摘あり <a href="https://twitter.com/nogajun/status/858193042309861377">https://twitter.com/nogajun/status/858193042309861377</a></p></li>
<li><p>「書式の自由」について</p></li>
<li><p>質疑応答</p></li>
</ul>


<h2>休憩</h2>

<p>10分間休憩</p>

<h2>Office文書を手打ちハックする ～FlatODF活用のすすめ～</h2>

<ul>
<li>JO3EMC さん</li>
<li>文書の自動生成をやりたい</li>
<li>文書を細部まで思い通りにコントロールしたい</li>
<li>アプローチ例1: LibreOffice 以外のツール・言語を利用する</li>
<li>アプローチ例2: LibreOffice 関連のツールを利用する</li>
<li>FlatODF</li>
<li>単一の圧縮されていない XML ファイル</li>
<li>弱点</li>
<li>ファイルサイズが大きくなる</li>
<li>圧縮されていないので</li>
<li>あとで ODF に変換すれば良い</li>
<li>画像やオブジェクトの埋め込みは少し面倒</li>
<li>Base64</li>
<li>fodt で保存してテキストエディタで書き換えて開き直すデモ</li>
<li>UTF-8 以外には対応していないらしい</li>
<li>LibreOffice を使って他フォーマットへ変換・印刷</li>
<li><code>soffice --headless --convert-to pdf *.fodt</code></li>
<li><code>soffice -p *.fodt</code></li>
<li>活用例</li>
<li>FlatODF の構造の概略</li>
<li>質疑応答</li>
<li>zip された中の content.xml をいじる方法も FlatODF をいじる方法もそれぞれ長所や短所があるのでいろんな方法があるのは良いんじゃないかという話</li>
</ul>


<h2>休憩</h2>

<ul>
<li>時間がおしているので5分間休憩</li>
<li>休憩前に懇親会参加者確認</li>
</ul>


<h2>LibreOffice Online環境の構築</h2>

<ul>
<li>LibreOffice Online (LOOL)</li>
<li>LOOL (ろーる)</li>
<li>CentOS 7.3.1611 で環境構築</li>
<li>LibreOffice の make に時間がかかる (一晩?)</li>
<li>依存をいろいろ入れる</li>
<li>日本語フォントも別途入れる必要あり</li>
<li>LibreOffice Online のコンパイル (5〜10分ぐらい?)</li>
<li>LOOL はファイルのインプットの GUI がない</li>
<li>Nextcloud と連携</li>
<li>サーバー側でレンダリングして画面を転送しているので、サーバー側にフォントが必要</li>
<li><a href="https://librepc.jp/">https://librepc.jp/</a></li>
</ul>


<h2>LT</h2>

<ul>
<li>矢吹さんの話</li>
<li>会場アンケート</li>
<li>スプレッドシートを使ったことがある人</li>
<li>SQL を使ったことがある人</li>
<li>領収書を集計するのが面倒だった話</li>
<li>バベルの塔</li>
<li>ピボットテーブル = GROUP BY を知るのに時間がかかった話</li>
<li>相手の文化を知る必要がある</li>
<li>用語集の必要性</li>
<li>抽象度の上げ下げ</li>
</ul>


<h2>ディスカッション</h2>

<ul>
<li>来年 LibreOffice 6 になる</li>
<li>デザインを一新するのでデザイナーを募集している</li>
<li><a href="https://design.blog.documentfoundation.org/2017/04/21/new-branding-libreoffice-6-0/">New branding for LibreOffice 6.0 - LibreOffice Design Team</a></li>
<li><p><a href="http://opensourcedesign.net/jobs/jobs/2017-04-20-branding-for-libreoffice-60">BRANDING FOR LIBREOFFICE 6.0</a></p></li>
<li><p><a href="https://design.blog.documentfoundation.org/2017/04/27/table-styles-survey/">Please participate in a survey about table styles - LibreOffice Design Team</a></p></li>
<li>表スタイルというのが追加された</li>
<li><p>デザインのアンケートを実施中</p></li>
<li><p><a href="http://www.clear-code.com/blog/2017/4/24.html" title="LibreOffice Calcのスプレッドシートの変更点をgit diffで見られるようにする - ククログ(2017-04-24)">LibreOffice Calcのスプレッドシートの変更点をgit diffで見られるようにする - ククログ(2017-04-24)</a></p></li>
<li><p>本?</p></li>
<li><p>HackFest</p></li>
<li><p>バグハンティング・セッション</p></li>
<li><p>源ノ明朝</p></li>
<li>IPA フォントはデザインなどが古い</li>
<li>源ノ角ゴシック 源ノ明朝 と Noto はパッケージの違い</li>
<li>CJK にも対応しているのが良い</li>
<li>デザインも今風</li>
<li><p>LibreOffice 5.2 だと縦書きが変? 5.3 だと太字しか出ない?</p></li>
<li><p>テストの話</p></li>
<li>普通のテスターが簡単に使える Selenium のような自動化がないのがつらい</li>
<li><p>xautomation ?</p></li>
<li><p>デザインチームなどの話</p></li>
<li><p>ドキュメントの翻訳の話</p></li>
<li>OmegaT は odt に直接対応している</li>
</ul>


<h2>ふりかえり</h2>

<ul>
<li>抽象度の話がよかった</li>
<li>LibreOffice を直接触る話はなかった</li>
<li>前処理は好き勝手にできるというのは良い</li>
<li>表現とデータをわけると嬉しいと思ってくれる人が増えると嬉しい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[homebrewの更新はbrew upgrade --cleanupだけでよくなっている]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-27-homebrew-upgrade-cleanup.html"/>
    <updated>2017-04-27T20:00:48+09:00</updated>
    <id>http://blog.n-z.jp/blog/homebrew-upgrade-cleanup</id>
    <content type="html"><![CDATA[<p>Homebrew のパッケージの更新に昔は <code>brew update</code>; <code>brew upgrade</code>; <code>brew cleanup</code> と 3 コマンドを使っていましたが、今は <code>brew upgrade --cleanup</code> だけでよくなっています。</p>

<!--more-->


<h2>確認バージョン</h2>

<ul>
<li>Homebrew 1.1.13</li>
</ul>


<h2><code>brew update</code></h2>

<p>Debian 系で使われている <code>apt</code> の <code>sudo apt-get update</code> に相当するパッケージ情報を更新するサブコマンドです。
基本的には <code>git</code> で更新しているだけなので、こけたら <code>git</code> コマンドを直接使ってなおす必要がありそうです。</p>

<p>今は他のサブコマンドを実行した時に情報が古ければ自動で更新されるので不要になっています。</p>

<h2><code>brew upgrade</code></h2>

<p>パッケージを更新するサブコマンドです。</p>

<p>古いバージョンも残るので、 <code>gem update</code> に近いような気がします。</p>

<h2><code>brew cleanup</code></h2>

<p>古いバージョンを消したり、ダウンロードしたファイルのキャッシュを消したりします。</p>

<p><code>brew upgrade --cleanup</code> のように <code>upgrade</code> サブコマンドに <code>--cleanup</code> オプションをつけると <code>upgrade</code> 中に削除してくれるようです。
(例えば 2 個更新があった時に、更新、削除、更新、削除になる。)</p>

<p>後から <code>brew cleanup</code> するのと違って <code>upgrade</code> 中に削除してくれるので、何が削除されたのかの確認はしにくくなったり、問題が起きた時に戻しにくくなったりという欠点はありますが、一時的に空き容量が減るのが緩やかになったり、消し忘れがなくなるなどの利点があると思います。</p>

<h2>まとめ</h2>

<p><code>brew update</code>; <code>brew upgrade</code>; <code>brew cleanup</code> と 3 コマンドを連続で使っている人は、 <code>brew upgrade --cleanup</code> だけに置き換えると便利です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cronでcertbot renewの--force-renewalを使用してはいけない]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-26-certbot-renew.html"/>
    <updated>2017-04-26T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/certbot-renew</id>
    <content type="html"><![CDATA[<p>タイトルで言いたいことはすべてですが、 <code>cron</code>で定期実行する <code>certbot renew</code> で <code>--force-renewal</code> オプションは使わない方が良いという話です。</p>

<!--more-->


<h2><code>--force-renewal</code> とは?</h2>

<p><code>certbot</code> の <code>renew</code> サブコマンドは、標準で期限切れが近い (30 日未満) の証明書だけを自動で更新してくれる便利なサブコマンドです。
期限切れが近い証明書がなければ letsencrypt のサーバーへのアクセスがなく、余計な負荷をかけないので、1日2回実行が推奨されています。</p>

<p><code>--force-renewal</code> をつけると有効期限に関係なく更新が実行されます。</p>

<h2>悪い設定例</h2>

<p>例えば <a href="http://cloud-news.sakura.ad.jp/2017/04/24/mastodon-startupscript-update/" title="スタートアップスクリプト「Mastodon」の更新のお知らせ・旧スクリプトを使用して作成されたインスタンス向けの作業のお願い | さくらのクラウドニュース">スタートアップスクリプト「Mastodon」の更新のお知らせ・旧スクリプトを使用して作成されたインスタンス向けの作業のお願い | さくらのクラウドニュース</a> に書いてある</p>

<pre><code>echo "0 5 1 * * root /usr/local/certbot/certbot-auto renew --webroot --webroot-path /home/mastodon/live/public --force-renew &amp;&amp; /bin/systemctl reload nginx postfix" &gt; /etc/cron.d/certbot-auto
</code></pre>

<p>という設定だと毎月 1 日の 5:00 に更新するという設定になっています。</p>

<h2>letsencrypt へのサーバーの負荷の問題</h2>

<h3>回数の問題</h3>

<p>letsencrypt の証明書の有効期限は 90 日なので、 <code>--force-renewal</code> がなければ 2 ヶ月ごとに letsencrypt のサーバーへのアクセスが発生するのに対して、上記の例だと毎月アクセスが発生して、 letsencrypt のサーバーへの負荷は 2 倍になります。</p>

<h3>固定時刻の問題</h3>

<p>また 5:00 固定なので、同じ設定をしているサーバーが増えれば同時にアクセスが発生するのもよくない設定です。</p>

<h2>更新失敗時の問題</h2>

<p>マシンが起動していなくて <code>cron</code> が動かなかったとか、何らかの理由で証明書の更新に失敗した場合、毎月 1 回しか実行しない場合は 2,3 回しか更新のタイミングがないので、すべて失敗して証明書の期限切れになる可能性が高いです。</p>

<p>それに対して毎日 2 回実行している場合、失敗しても少なくとも 29 日の間再実行され続けるので、少なくとも 58 回はチャンスがあります。
(更新タイミング次第で 59 回になりそうです。計算が間違ってなければ。)</p>

<h2>Debian パッケージの certbot の例</h2>

<p>Debian の certbot パッケージでは</p>

<pre><code>0 */12 * * * root test -x /usr/bin/certbot -a \! -d /run/systemd/system &amp;&amp; perl -e 'sleep int(rand(3600))' &amp;&amp; certbot -q renew
</code></pre>

<p>という設定になっていて、 (systemd 環境でなければ) perl によるランダムスリープを入れて時間がばらけるようになっています。</p>

<p>systemd 環境では以下のように <code>ExecStartPre</code> でランダムスリープするようになっています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat /lib/systemd/system/certbot.timer
</span><span class='line'>[Unit]
</span><span class='line'>Description=Run certbot twice daily
</span><span class='line'>
</span><span class='line'>[Timer]
</span><span class='line'>OnCalendar=*-*-* 00,12:00:00
</span><span class='line'>Persistent=true
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=timers.target
</span><span class='line'>%  cat /lib/systemd/system/certbot.service
</span><span class='line'>[Unit]
</span><span class='line'>Description=Certbot
</span><span class='line'>Documentation=file:///usr/share/doc/python-certbot-doc/html/index.html
</span><span class='line'>Documentation=https://letsencrypt.readthedocs.io/en/latest/
</span><span class='line'>[Service]
</span><span class='line'>Type=oneshot
</span><span class='line'>ExecStartPre=/usr/bin/perl -e 'sleep int(rand(3600))'
</span><span class='line'>ExecStart=/usr/bin/certbot -q renew
</span><span class='line'>PrivateTmp=true</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p><code>--force-renewal</code> 付きで少ない回数の <code>certbot renew</code> を実行するのは欠点しかありません。</p>

<p>公式に推奨されているように <code>certbot renew</code> を <code>--force-renewal</code> なしで複数回実行する方が良いでしょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 122 回関西 Debian 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-23-kansai-debian-meeting.html"/>
    <updated>2017-04-23T13:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://debianjp.connpass.com/event/54424/" title="第 122 回関西 Debian 勉強会">第 122 回関西 Debian 勉強会</a>に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<p>早めに出発したら時間があったので、駅前ビルの金券屋で切符を買って、少し安く移動できました。</p>

<p>しばらく前に阪急三番街の KIDDY LAND で stretch のぬいぐるみが 2,3 個あったのを見かけて、次にみたときには最後の 1 個になったいたので、買っておいたのを持って行きました。</p>

<h2>オープニング</h2>

<ul>
<li>前回の話から会場候補地の話とか</li>
<li><a href="https://wiki.debian.org/KansaiDebianMeeting/DraftMemo">https://wiki.debian.org/KansaiDebianMeeting/DraftMemo</a> に古いメモがある</li>
<li><a href="http://events.linuxfoundation.jp/events/open-source-summit-japan" title="Open Source Summit Japan 2017">Open Source Summit Japan 2017</a> というのがあるらしい</li>
<li><a href="https://lists.debian.org/debian-devel-announce/2017/04/msg00008.html" title="Status on the stretch release">Status on the stretch release</a></li>
<li><a href="https://www.debian.org/News/2017/20170417" title="Statement concerning the arrest of Dmitry Bogatov">Statement concerning the arrest of Dmitry Bogatov</a></li>
<li><a href="https://blog.torproject.org/blog/statement-regarding-dmitry-bogatov" title="Statement regarding Dmitry Bogatov | The Tor Blog">Statement regarding Dmitry Bogatov | The Tor Blog</a></li>
<li>事前課題</li>
<li>maven とか make とか</li>
</ul>


<h2>休憩</h2>

<h2>CMake でビルド</h2>

<ul>
<li>Windows 版と Linux 版の両対応が動機</li>
<li>Visual Studio や Eclipse のプロジェクト出力も可能</li>
<li><a href="https://github.com/yosukesan/kansai_debian">https://github.com/yosukesan/kansai_debian</a> に今回のサンプルを用意</li>
<li><code>distclean</code> 相当がないので build ディレクトリを作る方が良い</li>
<li><code>cd 000.hello; mkdir build; cmake ../ -DCMAKE_INSTALL_PREFIX=.; make; make install</code></li>
<li><code>CMakeCache.txt</code> が <code>configure.log</code> 相当</li>
<li><code>CMakeCache.txt</code> を編集することも可能</li>
<li><code>cmake ..</code> ではなく <code>cmake ../CMakeLists.txt</code> としてしまうと build ディレクトリではなくソースディレクトリにファイルが作られてしまうので注意</li>
<li>ライブラリをリンクする例: 失敗する例が <code>001_NG.link_library</code> で成功する例が <code>001_OK.link_library</code></li>
<li>自作ライブラリのビルドとリンク</li>
<li><code>CMakeCache.txt</code> に入る変数と入らない変数がある</li>
<li>設定するのに <code>FORCE</code> オプションが必要なものとなくても良いものがあってハマった</li>
<li>echo しても空なのに、内部的には変数がある</li>
<li>変数の上書きに癖があってハマった</li>
<li>Windows でマルチスレッドかどうか、デバッグかリリースかなどでリンクするライブラリが違うのが自動でできなかった</li>
<li>Visual Studio でもリンクするライブラリの組み合わせ問題ははまることがあるらしい</li>
<li>Dependency Walker</li>
<li>デバッグビルドの DLL が混ざっていてバグっていた話</li>
<li><a href="https://ninja-build.org/manual.html">https://ninja-build.org/manual.html</a></li>
</ul>


<h2>その後</h2>

<p>時間が余ったので、次回の予定などの話をしていました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSS Gate大阪ワークショップ2017-04-22に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-22-oss-gate-workshop.html"/>
    <updated>2017-04-22T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/oss-gate-workshop</id>
    <content type="html"><![CDATA[<p><a href="https://oss-gate.doorkeeper.jp/events/58579" title="OSS Gate大阪ワークショップ2017-04-22 - OSS Gate | Doorkeeper">OSS Gate大阪ワークショップ2017-04-22 - OSS Gate | Doorkeeper</a>にサポーター (旧称: メンター) として参加しました。</p>

<!--more-->


<h2>全体の感想</h2>

<p>最後のアンケートにも書きましたが、前回はデモである程度メモをどの程度とるのかなどの方向性が示されていたのと、やる内容がインストールから初めて、ひっかかったところのドキュメントの改善をフィードバックする、というのが多かったのに対して、今回はデモがほぼなくて、サポーター (旧称: メンター) として応募したけど、人数の都合でビギナーになった人が多かったからか、いろんなことに挑戦していて、難しい感じでした。</p>

<p>作業メモの粒度としては、<a href="https://github.com/oss-gate/workshop/issues?q=is%3Aissue+is%3Aclosed">過去のビギナーの作業ログ</a>から特にコメント数が多いものを参考にしてみると、こういう細かい思考過程までメモすると良いのか、というのが、 oss-gate に限らず普段の作業メモのとり方としても、参考になるかと思います。</p>

<h2>メモ</h2>

<p>以下、今回の雑多なメモです。</p>

<h3>フォント</h3>

<p>途中のふりかえりのときのビギナーの人がブラウザーで変わったフォントを使っていたのできいてみたところ、「スマートフォントUI」というのを使っていると教えてもらいました。</p>

<h3>Chef DK のアンインストール</h3>

<p>参考のため、自分の環境にも Chef DK を入れてみていたのですが、 <a href="https://docs.chef.io/install_dk.html">https://docs.chef.io/install_dk.html</a> にアンインストールの手順があったので、それに従ってアンインストールしました。</p>

<p>symlink は削除前に確認してみたら、たくさんありました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%  sudo rm -rf /opt/chefdk
</span><span class='line'>Password:
</span><span class='line'>%  sudo pkgutil --forget com.getchef.pkg.chefdk
</span><span class='line'>Forgot package 'com.getchef.pkg.chefdk' on '/'.
</span><span class='line'>%  find /usr/local/bin -lname '/opt/chefdk/*'
</span><span class='line'>/usr/local/bin/berks
</span><span class='line'>/usr/local/bin/chef
</span><span class='line'>/usr/local/bin/chef-apply
</span><span class='line'>/usr/local/bin/chef-client
</span><span class='line'>/usr/local/bin/chef-shell
</span><span class='line'>/usr/local/bin/chef-solo
</span><span class='line'>/usr/local/bin/chef-vault
</span><span class='line'>/usr/local/bin/cookstyle
</span><span class='line'>/usr/local/bin/dco
</span><span class='line'>/usr/local/bin/delivery
</span><span class='line'>/usr/local/bin/foodcritic
</span><span class='line'>/usr/local/bin/inspec
</span><span class='line'>/usr/local/bin/kitchen
</span><span class='line'>/usr/local/bin/knife
</span><span class='line'>/usr/local/bin/ohai
</span><span class='line'>/usr/local/bin/push-apply
</span><span class='line'>/usr/local/bin/pushy-client
</span><span class='line'>/usr/local/bin/pushy-service-manager
</span><span class='line'>/usr/local/bin/rubocop
</span><span class='line'>%  sudo find /usr/local/bin -lname '/opt/chefdk/*' -delete
</span><span class='line'>%  find /usr/bin -lname '/opt/chefdk/*'</span></code></pre></td></tr></table></div></figure>


<h3>辞書</h3>

<p>macOS の辞書ではなく、Logophile という辞書ソフトを使っているのをみました。
COBUILD のシソーラスが便利だそうです。</p>

<p>たぶん <a href="http://dicwizard.jp/logophile/" title="Logophile">Logophile</a> で、シェアウェアのようです。</p>

<h3>fish shell</h3>

<p>検索しにくい名前ですが、<a href="http://fish.rubikitch.com/" title="全訳！fishシェル普及計画【コマンドラインは怖くない】">全訳！fishシェル普及計画【コマンドラインは怖くない】</a> に翻訳されたドキュメントがあるので、使い始めやすそうです。</p>

<p>個人的には rvm を入れたら環境を壊された (<code>zsh</code> なら <code>chpwd_function</code> を使えばいいのに使っていなかったらしく <code>cd</code> のカスタマイズが壊れた) ぐらいシェルはカスタマイズをしているので、乗り換える可能性は低いですが、ちょっと試してみたところ、 <code>echo</code> のオートサジェスチョンで <code>$BASH_VERSION</code> がでてきたので、<code>.bash_history</code> をみているようです。
ちょっと試した後は、 <code>rm -rf ~/.local/share/fish</code> でクリーンな状態に戻して、また最初から試せるようにしておきました。</p>
]]></content>
  </entry>
  
</feed>
