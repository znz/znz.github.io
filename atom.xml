<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-06-04T16:02:51+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[cron(crontab)の代わりにsystemdのtimerを使う]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-04-cron-systemd-timer.html"/>
    <updated>2017-06-04T14:18:19+09:00</updated>
    <id>http://blog.n-z.jp/blog/cron-systemd-timer</id>
    <content type="html"><![CDATA[<p>最近 <a href="https://github.com/znz/ansible-playbook-gitlab-dokku">gitlab omnibus などの環境</a>を作っていて、<a href="https://github.com/znz/ansible-role-gitlab-ce">GitLab CE の role</a> でバックアップ処理を定期実行するのに crontab ではなく systemd の timer を使ってみました。</p>

<!--more-->


<h2>利点</h2>

<ul>
<li>systemd 管理下で統一的に扱えるので、覚えれば楽</li>
<li>ログも journald で統一されるので cron だといちいちメールが飛ぶと鬱陶しいような粒度でも簡単にログに残せる</li>
<li>環境変数なども含めた環境が本番と同じ状態ですぐに実行を試しやすい</li>
<li>systemd 依存の機能が使える (後述の例では After と Requires)</li>
</ul>


<p>などが利点に感じました。</p>

<h2>欠点</h2>

<ul>
<li>情報が cron (crontab) に比べてまだ少ないので、何かあったときに調べにくい</li>
<li>systemd に大きく依存してしまう</li>
</ul>


<p>などが欠点に感じました。</p>

<h2>確認環境</h2>

<ul>
<li>Ubuntu 16.04.2 LTS (xenial)</li>
<li>systemd 229-4ubuntu17</li>
</ul>


<h2>情報表示</h2>

<ul>
<li><code>systemctl list-timers</code> でタイマーの次回実行予定時刻、前回実行時刻などを含めて表示されます。</li>
<li><code>systemctl status systemd-tmpfiles-clean.timer</code> でタイマーの情報、<code>systemctl status systemd-tmpfiles-clean.service</code> で実行されるサービスの情報が表示されます。</li>
<li><code>journalctl -u systemd-tmpfiles-clean.timer</code> や <code>journalctl -u systemd-tmpfiles-clean.service</code> でログが表示されます。 <code>systemd-journal</code> グループに入っていない場合は <code>sudo</code> が必要かもしれません。 <code>systemd-journal</code> に入っていれば <code>systemctl status</code> でも最近のログが表示されます。</li>
<li>Type=oneshot (後述) の場合、ログの Starting が実行開始時刻で Started が実行終了時刻になるようです。</li>
</ul>


<h2>設定ファイルの場所</h2>

<p><code>systemctl status</code> で <code>Loaded: loaded (/lib/systemd/system/systemd-tmpfiles-clean.timer; static; vendor preset: enabled)</code> のようにパスが出るので、システムのものは <code>/lib/systemd/system/</code> にあることがわかります。</p>

<p>タイマーではありませんが、 gitlab-ce では <code>/usr/lib/systemd/system/gitlab-runsvdir.service</code> に service が入っていたので、 <code>/usr/lib/systemd/system/</code> も参照されるようです。</p>

<p>自分で作成する場合は systemd の流儀に従って <code>/etc/systemd/system/</code> に作成すれば良いと思います。</p>

<h2>service 作成</h2>

<p><code>/etc/systemd/system/gitlab-backup.service</code> を以下の内容で作成しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Backup gitlab
</span><span class='line'>After=gitlab-runsvdir.service
</span><span class='line'>Requires=gitlab-runsvdir.service
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>Type=oneshot
</span><span class='line'>ExecStart=/opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Unit の Description は適当にわかりやすい説明を書けば良いと思います。</li>
<li>Service の Type は cron 代わりに使う場合は oneshot にするのが普通のようです。</li>
<li>ExecStart に crontab で書いていたようにコマンドを書きます。 crontab と同じように、複雑な場合は無理にここに書こうとせずに別途シェルスクリプトなどを作成して実行する方が良さそうです。</li>
<li>After と Requires はバックアップ処理を実行するのに postgresql などが実行されている必要がありそうだったので書きました。このあたりが必要かどうかは用途によると思います。</li>
</ul>


<h2>timer 作成</h2>

<p><code>/etc/systemd/system/gitlab-backup.timer</code> は以下の内容で作成しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=Backup gitlab
</span><span class='line'>
</span><span class='line'>[Timer]
</span><span class='line'>OnCalendar=*-*-* 2,14:00
</span><span class='line'>Persistent=true
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=timers.target</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Unit の Description は適当にわかりやすい説明を書けば良いと思います。</li>
<li>OnCalendar で毎日 2:00 と 14:00 に実行するように設定しています。ローカルタイムでの指定になります。詳細は systemd のドキュメントを参照してください。</li>
<li>Persistent=true は<a href="https://wiki.archlinuxjp.org/index.php/Systemd/%E3%82%BF%E3%82%A4%E3%83%9E%E3%83%BC" title="systemd/タイマー - ArchWiki">systemd/タイマー - ArchWiki</a>によると「システムの電源が切られていたなどの理由で、最後の起動時間を過ぎていた場合、すぐに実行されます」ということのようで、 anacron 的な動作が期待できるかと思って指定しています。</li>
<li>Install の WantedBy=timers は <code>systemctl enable</code> や <code>systemctl disable</code> ができるようにするための定型句のようです。</li>
</ul>


<h2>設定反映</h2>

<p><code>sudo systemctl daemon-reload</code> で反映させます。
新規作成時などは必要ないかもしれませんが、実行しておくと確実です。</p>

<h2>有効化</h2>

<p><code>sudo systemctl enable gitlab-backup.timer</code> で <code>/etc/systemd/system/timers.target.wants/gitlab-backup.timer</code> に <code>/etc/systemd/system/gitlab-backup.timer</code> へのシンボリックリンクが作成されて有効になります。</p>

<h2>無効化</h2>

<p><code>sudo systemctl disable gitlab-backup.timer</code> で無効に戻せます。
timer を消したくなったときには disable してから timer ファイル (と service ファイル) を削除すると良いと思います。
(ファイル削除後は <code>sudo systemctl daemon-reload</code> もすると良いかもしれません。)</p>

<h2>テスト実行</h2>

<p><code>sudo systemctl start gitlab-backup.service</code> でテスト実行できます。</p>

<h2>実行時間を散らす</h2>

<p>Timer セクションに RandomizedDelaySec を設定するとランダムスリープをいれて実行時間をばらけさせることができます。
<code>certbot.timer</code> などで使われています。</p>

<p>試しに <code>RandomizedDelaySec=10min</code> といれてみると、これを使ったときには設定が反映されたタイミングや前回の実行終了後などの次の実行が決まった段階でランダムスリープの時間が決まるようで、 <code>journalctl -u gitlab-misc-backup.timer</code> で <code>gitlab-misc-backup.timer: Adding 6min 33.234976s random time.</code> と出て、 <code>systemctl list-timers</code> の NEXT も遅延後の時刻になっていて、実行された時のログの Starting もその時刻以降 (AccuracySec がデフォルト 1min なので NEXT に出ていた時刻よりちょっと遅かった) になっていました。</p>

<h2>atd</h2>

<p>crond の crontab の代わりは service ファイルと timer ファイルを作成して反映させて有効にして、という操作が必要でした。</p>

<p>atd の at の代わりとしては systemd-run というコマンドがあるようです。
試しに使ったことしかないので、紹介だけに留めておきます。</p>

<h2>まとめ</h2>

<p>設定ファイルが複数必要だったり、反映するのに一手間必要だったりして、使い始めは crontab より面倒ですが、 systemd との連携が必要だったり、ログ管理をまとめたかったり、 RandomizedDelaySec のように systemd の機能を使った方がすっきりする場合などは積極的に timer を使っていくと良いのではないかと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible で role を新規作成して ansible galaxy で公開して更新した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-03-ansible-galaxy-new-role.html"/>
    <updated>2017-06-03T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-galaxy-new-role</id>
    <content type="html"><![CDATA[<p>ansible で role を新規作成して ansible galaxy で公開して更新するときにやっているいつもの手順を紹介します。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ansible 2.3.0.0</li>
</ul>


<h2>ansible-galaxy init</h2>

<p><code>ansible-galaxy init</code> でファイルを作成します。</p>

<pre><code>% ansible-galaxy init ansible-role-unattended-upgrades
- ansible-role-unattended-upgrades was created successfully
% cd ansible-role-unattended-upgrades
% find . -type f | sort
./README.md
./defaults/main.yml
./handlers/main.yml
./meta/main.yml
./tasks/main.yml
./tests/inventory
./tests/test.yml
./vars/main.yml
</code></pre>

<p><code>tests</code> は使い方がよくわからないのですが、そのままにしています。</p>

<h2>LICENSE 作成</h2>

<p>すでに作成済みの role から The MIT License (MIT) のファイルをコピーしてきました。
新規の場合は github に push した後にブラウザーから作成するのが簡単だと思います。</p>

<h2>README 更新</h2>

<p>ここで自分の他の role を参考に書き換えました。</p>

<h2>vars 削除</h2>

<p>上書きしやすいように、 <code>defaults/main.yml</code> しか使っていないので <code>vars/main.yml</code> は削除しました。</p>

<pre><code>% rm -r vars
</code></pre>

<h2>中身作成</h2>

<p><code>tasks</code>, <code>defaults</code>, <code>handlers</code>, <code>files</code>, <code>templates</code> などのディレクトリを使って作成します。</p>

<h2>meta/main.yml 更新</h2>

<p><code>meta/main.yml</code> を更新します。
<code>galaxy_tags</code> は <a href="https://galaxy.ansible.com/">https://galaxy.ansible.com/</a> の browse roles を参考にして適当に選んでいます。</p>

<h2>examples</h2>

<p>テスト用に vagrant で serverspec を動かせるように <code>examples</code> を入れています。
どうするのが良いのかわかっていないのですが、とりあえず全くテストしないよりはましなので、こういう方法をとっています。</p>

<p><code>debian/wheezy64</code> の box は synced folder が rsync なのでシンボリックリンクのループでエラーになってしまうので、 <code>vagrant up wheezy64</code>, <code>vagrant provision wheezy64</code>, <code>rake spec:wheezy64</code> のように provision を別途実行しないといけないのが不便なのですが、 <a href="https://atlas.hashicorp.com/debian/">https://atlas.hashicorp.com/debian/</a> には VirtualBox Guest Addition が入った box が <code>debian/contrib-jessie64</code> しかないので、今のところ wheezy と stretch ではどうしようもなさそうです。</p>

<p>テストに使った VM はディスクの無駄なので、こまめに vagrant destroy しています。</p>

<h2>git push</h2>

<p><code>basename $(pwd) | pbcopy</code> した名前で github に repository を作成します。
タグもうっておきます。</p>

<pre><code>git remote add origin git@github.com:znz/ansible-role-unattended-upgrades.git
git push -u origin master
git tag v1.0.0
git push --tags
</code></pre>

<h2>ansible galaxy に反映</h2>

<p>github 連携でログインして、 my roles を開きます。</p>

<p>Search Roles の入力欄の右にあるボタンをクリックして refresh して github の新しい repository を表示させます。
(たぶん <code>meta/main.yml</code> をチェックして一覧に出すかどうか決めているのだと思います。)</p>

<p>追加した role を有効にします。
Role Settings を開くとわかるのですが、なぜか Role Name は自動的に <code>ansible-role-</code> がとれて <code>unattended-upgrades</code> になっています。</p>

<h2>role の更新</h2>

<p>role を更新したら <a href="http://semver.org/lang/ja/">セマンティック バージョニング</a> にそってバージョン番号をあげて、タグをうって push しておきます。</p>

<p>my roles のページで該当する role の行の一番右にある Import Role をクリックすると新しいタグが反映されます。
(role 個別ページには該当する操作はなさそうです。)</p>

<h2>まとめ</h2>

<p>ansible で新規 role を作成して、 github と ansible galaxy で公開して更新しているときにやっている手順を紹介しました。</p>

<p>昔は ansible-galaxy で role を取ってくるのに ansible galaxy への登録が必須だったので登録していたのですが、最近は他の人が role を作るときに参考になるかもと思って登録しています。
あまり汎用性のない自分用の role の場合は github だけに登録して YAML ファイルで</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- src: https://github.com/znz/ansible-role-nadoka
</span><span class='line'>  version: master
</span><span class='line'>  name: znz.nadoka</span></code></pre></td></tr></table></div></figure>


<p>のように指定して使っていたり (この場合でも meta/main.yml は必要)、 playbook 用の repository の role 以下にそのまま入れていたり (この場合は meta/main.yml は不要) します。</p>

<p>複数 role を登録していて、こういうフローで作業をしている人もいるということで、参考になれば幸いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 123 回関西 Debian 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-28-kansai-debian-meeting.html"/>
    <updated>2017-05-28T13:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://debianjp.connpass.com/event/57323/" title="第 123 回関西 Debian 勉強会">第 123 回関西 Debian 勉強会</a>に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<p>Apache Arrow の勉強会の後、一緒にランチに行くのに参加していたら、ちょっと遅くなってしまって、 13:40 すぎに到着しました。</p>

<h2>オープニング</h2>

<ul>
<li>事前課題は必須項目になっていなかったため、 connpass での参加登録時に出ていなかったので、その場で発表して資料が更新されていた。</li>
<li>初参加の人がいた</li>
<li>初めて作った人とか長い間使っていない人とか</li>
<li>easypg は表示は復号されているがメモリダンプをしても平文はないらしい</li>
<li>期限切れと revoke の違い: 期限切れはのばせるが、 revoke は取り消せない</li>
</ul>


<p>ruby の svn のコミットに必要という話は <a href="https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowto">https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowto</a> <a href="https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowtoJa">https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowtoJa</a> あたりに書いてあるのですが、今見ると <code>ssh-keygen -b 2048 -f ruby_key</code> になってて古い感じ。英語の方は <code>~/.ssh/id_rsa or ~/.ssh/id_dsa</code> と書いてあるのでもっと古い感じが。</p>

<h3>途中で矢吹さんの話</h3>

<ul>
<li>カジュアルに使うのも良いけど、暗号関連は色々気にしている人もいるので気をつけましょう (色々なポリシーがあるのを尊重しましょう) という話とか</li>
<li>cypherpunk : 暗号の民主化</li>
<li>FST-01 を入手した (まだ秘密鍵は入れていない) ので回覧</li>
</ul>


<h2>GnuPG にまつわるアレコレ - GnuPG2 とか Keybase とか Yubikey とか</h2>

<ul>
<li>key id は昔は 8 文字だったけど conflict が作れるという話になって、今は 16 文字 (以上?) が普通らしい</li>
<li>(勉強会中に聞きそびれてしまったけど、GPG の key id が fingerprint の末尾っていうのは、みんなどうやって知るんだろう?)</li>
<li>(自分は昔の key sign party で fingerprint しか書いてないけど、どうやって fetch するの? と聞いたときに教えてもらったけど。)</li>
<li>GnuPG とは?</li>
<li>OpenPGP: RFC になっている</li>
<li>暗号化によって盗聴を防ぐ (機密性)</li>
<li>署名によって改ざんを検知可能にする (完全性)</li>
<li>例: secure-apt, DKIM</li>
<li>信頼の輪 (Web of trust) によって本人を同定</li>
<li>過去の資料の参照情報紹介</li>
<li><a href="https://wiki.debian.org/KansaiDebianMeeting/20150823" title="第 101 回 関西 Debian 勉強会">第 101 回 関西 Debian 勉強会</a>の「wiki:Subkeys」が気になった</li>
<li>Windows の GUI の GPG クライアントで良いものがない</li>
<li>mac は GPG Tools というので標準の Mail.app で GPG 対応できるらしい</li>
<li>Web メールで困る話</li>
<li>Thunderbird は Enigmail</li>
<li>鍵の選び方の話</li>
<li>ED25519 は gnupg 1.4 系 (今は oldstable ブランチ) で復号できない</li>
<li>今の所は互換性のための RSA4096 と速い ED25519 を併用するのが良いかもしれない</li>
<li>GnuPG 2 - Stretch での変更点</li>
<li>gnupg (1.4 → 2.1), gnupg1 (なし → 1.4), gnupg2 (2.0 → drop)</li>
<li>gnupg 2.1 は初回実行時に自動的に移行が実行されて、2.1 用のファイル (<code>pubring.kbx</code> とか <code>private-keys-v1.d/</code> とか) が作成される</li>
<li>古いバージョン用のファイル (<code>pubring.gpg</code> とか <code>secring.gpg</code> とか) はそのまま残るので古いバージョンの共存も可能 (だがそれぞれのバージョンのファイルしか更新されないので、併用すると情報がずれていくはず)</li>
<li>2.0 がどっちのファイルを使うのかは検証してないので不明</li>
<li>プログラムの分離具合が整理された (<a href="http://miniconf.debian.or.jp/">Mini Debian Conference Japan 2016</a> の<a href="http://miniconf.debian.or.jp/assets/files/gnupg-now.html">g新部さんのスライド</a> の図が非常にわかりやすい (GnuPG programs (2) の図))</li>
<li>proxy 設定が gpg.conf から dirmngr.conf に変わった</li>
<li>use-gpg-agent が obsolete (常に有効で単純に無視される)</li>
<li>大量の ssh 接続に使うと scdaemon がエントロピーが足りないという話</li>
<li>haveged (はべーじでぃー(と言っていた)) とか rng-tools とか</li>
<li>disable-scdaemon をつけておくと無駄に scdaemon が起動しなくなる (gpg-agent から scdaemon が起動して scdaemon 対応のデバイスがなければ、すぐに gpg-agent に返ってくるらしいが、起動するだけ無駄という話)</li>
<li>gpg-agent を ssh-agent として使うのは簡単</li>
<li>GNOME で gnome keyring daemon は止めやすい</li>
<li>mate や xfce では ssh-agent を止めにくい</li>
<li>ssh-agent を入れないときは <code>.xsessionrc</code> で <code>SSH_AUTH_SOCK</code> を自分で設定する必要がある</li>
<li>mate や xfce では <code>.xsessionrc</code> で設定しても、さらに上書きされるらしい</li>
<li>YubiKey <a href="https://yubikey.yubion.com/">https://yubikey.yubion.com/</a> <a href="https://www.cloudgate.jp/yubikey.html">https://www.cloudgate.jp/yubikey.html</a></li>
<li>ED25519 には対応していない</li>
<li>RSA 4096 で復号で 0.5 秒ぐらい</li>
<li>(後でし</li>
<li>Qt5 での GUI ツールとコマンドラインツールがある</li>
<li>keybase.io というサービスがあるらしいが秘密鍵もアップロードできるらしく?</li>
<li>アカウントを作ってみた <a href="https://keybase.io/uwabami">https://keybase.io/uwabami</a> が消すかも。</li>
<li><a href="https://github.com/keybase/client">https://github.com/keybase/client</a> には大量の Issues が。</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>今後の予定</li>
<li>来月は17日に stretch がリリース予定なので、25日から18日に予定を変更してリリースパーティの可能性が高そう</li>
</ul>


<h2>よくわからないままだった点</h2>

<ul>
<li>懇親会への移動中などにある程度話しましたが</li>
<li><code>gpg --version</code> で出てくる「公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA」の「EDDSA」(ECDSA ではなく)と「ED25519」は同じ?</li>
<li>Curve25519 と ED25519 の関係</li>
<li><a href="https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%89%E3%83%AF%E3%83%BC%E3%82%BA%E6%9B%B2%E7%B7%9A%E3%83%87%E3%82%B8%E3%82%BF%E3%83%AB%E7%BD%B2%E5%90%8D%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0" title="エドワーズ曲線デジタル署名アルゴリズム">エドワーズ曲線デジタル署名アルゴリズム</a> に多少説明がある</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【5/28大阪】データ分析用次世代データフォーマットApache Arrow勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-28-apache-arrow.html"/>
    <updated>2017-05-28T10:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/apache-arrow</id>
    <content type="html"><![CDATA[<p><a href="https://classmethod.connpass.com/event/56478/" title="【5/28大阪】データ分析用次世代データフォーマットApache Arrow勉強会">【5/28大阪】データ分析用次世代データフォーマットApache Arrow勉強会</a>に参加しました。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場</h2>

<p>早めに到着していたのですが、1階の入り口があいていなくて、案内してもらうまではいれませんでした。</p>

<h2>ハッシュタグ</h2>

<p><code>#osaka_arrow</code></p>

<h2>会場アンケート</h2>

<ul>
<li>普段使ってる言語</li>
<li>データ分析をしているか</li>
<li>使っているならツールは?</li>
</ul>


<p>使ってる言語としては Python や Ruby や C# が多い?
データ分析をしていない人も多かったけど、している人はデータ分析には Python や R が多い?</p>

<h2>スライドなど</h2>

<ul>
<li>今回のメインのスライドは (まだ?) 公開されていないっぽい? (<a href="https://slide.rabbit-shocker.org/">https://slide.rabbit-shocker.org/</a> にはなかった)</li>
<li>Arrow については <a href="https://slide.rabbit-shocker.org/authors/kou/data-science-rb/">RubyもApache Arrowでデータ処理言語の仲間入り</a> を使って説明 (Apache Arrow とは何なのかがわかるので、一読をオススメします。)</li>
<li>今回は Apache Arrow がメインなので Ruby 関連のところは飛ばしていた。</li>
<li>以下の関連資料の URL は <code>#osaka_arrow</code> でツイートしてから飛ばしつつ説明していました。</li>
<li><a href="https://www.slideshare.net/wesm/nextgeneration-python-big-data-tools-powered-by-apache-arrow">Next-generation Python Big Data Tools, powered by Apache Arrow</a></li>
<li><a href="https://www.slideshare.net/wesm/memory-interoperability-in-analytics-and-machine-learning">Memory Interoperability in Analytics and Machine Learning</a></li>
<li><code>#osaka_arrow</code> でWesさん(Arrow のメイン開発者?)のblogの翻訳をしている方が以下の翻訳の URL をツイートしていました。</li>
<li><a href="http://qiita.com/tamagawa-ryuji/items/deb3f63ed4c7c8065e81">（翻訳）2017年の展望: pandas, Arrow, Feather, Parquet, Spark, Ibis</a></li>
<li><a href="http://qiita.com/tamagawa-ryuji/items/9ba22061fc78907a5826">（翻訳）毎秒10GBでArrowからpandasへ</a></li>
</ul>


<h2>メモ</h2>

<ul>
<li>Feather は R と Python の間だけ用の Arrow のようなもの</li>
<li>作っている人が同じで Feather での知見が Arrow に生かされている</li>
<li>Parquet は保存用でデータサイズを小さくすることを重視</li>
<li>Parquet は無圧縮もできて、それだとサイズが大きくなることがある</li>
<li>Arrow や Parquet は特定の列だけ読むとかもできるので、サイズが同じでも処理効率がよくなることがある</li>
<li><p>多次元配列 (テンソル) は中身が同じ型で、そういう用途向けに最適化されている</p></li>
<li><p>Wes McKinney さん: pandas を作った人でその知見が Arrow にも生かされている</p></li>
<li><p>Hadoop のディストリビューター</p></li>
<li><p>SlideShare で apache arrow で検索すると色々資料がみつかる</p></li>
<li><p>zero-copy が大事</p></li>
<li>in memory が前提としてある</li>
<li>メモリレイアウトや record batch とかもその関連</li>
<li>メモリに収まるような record batch のサイズ指定は API で手動設定</li>
<li>Arrow は基本的に read only</li>
<li>元データはアプリケーション次第</li>
<li><p>IPC: 同じマシンなら mmap とか</p></li>
<li><p>PySpark だと JVM と Python とのやりとりが重い</p></li>
<li>個別にチューニングするのは無駄なので Arrow でみんなで共通のチューニングをする</li>
<li><p>Ruby のオブジェクトにすると変換すると負けなので、高速に処理したい場合は Arrow の世界で演算も済ませる必要がある</p></li>
<li><p>streaming もある</p></li>
<li><p>開発に参加しようという話</p></li>
<li><a href="https://issues.apache.org/jira/browse/ARROW/">https://issues.apache.org/jira/browse/ARROW/</a></li>
<li><p><a href="https://red-data-tools.github.io/">https://red-data-tools.github.io/</a></p></li>
<li><p>質問タイム</p></li>
<li>fluentd で message pack をパースしてルーティングの情報だけ読んでまた message pack にシリアライズして、だと読んでない部分のパースとシリアライズが無駄なので、そこを arrow で置き換えると改善できないかなあという話</li>
<li>Red Data Tools の名前の由来: Ruby に限定したくなかったので redmine などで使われている red と PyData などの Data を組み合わせて、 red data だけだと絶滅危惧種などの意味とぶつかるので、何が良いか悩んで最終的に tools をつけた。</li>
<li>データベースとの絡み</li>
</ul>


<h2>まとめ</h2>

<p>基本的には開発者としての参加をしやすくするための勉強会でした。
Apache Arrow 自体でデータ分析ができるようになるわけではなく、ツールを作るための共通基盤という感じでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[関西Ruby会議2017に参加しました #kanrk2017]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-27-kansairubykaigi2017.html"/>
    <updated>2017-05-27T21:09:15+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansairubykaigi2017</id>
    <content type="html"><![CDATA[<p><a href="http://regional.rubykaigi.org/kansai2017/" title="関西Ruby会議2017">関西Ruby会議2017</a>に参加しました。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>オープニング</h2>

<ul>
<li>スポンサーの紹介</li>
<li>会場のトイレの場所などの説明</li>
</ul>


<p>オープニングでは何も言っていませんでしたが、ハッシュタグは <code>#kanrk2017</code> のようでした。(doorkeeper のイベントページからツイートしようとするとつく)</p>

<h2>スポンサーセッション</h2>

<p>最初はアジャイルウェアさんのスポンサーセッションでした。</p>

<h2>基調講演: 株式会社クリアコード</h2>

<ul>
<li>「株式会社クリアコード」というタイトルの発表</li>
<li>テーマ: コミュニティーとビジネス</li>
<li>twitter 連携が下に出ていた。たぶん <a href="https://rabbit-shocker.org/ja/rabbiter/" title="Rabbiter">Rabbiter</a> (Rabbitter ではない) です。</li>
<li>大事にしていること: フリーソフトウェアの推進と稼ぐことの両立</li>
<li>学んだこと1: 問題は upstream で直す</li>
<li>フリーソフトウェアが大事にしていることの1つは「直せること」！</li>
<li><a href="http://www.clear-code.com/blog/2011/12/6.html" title="デバッグ力: よく知らないプログラムの直し方 - ククログ(2011-12-06)">デバッグ力: よく知らないプログラムの直し方 - ククログ(2011-12-06)</a></li>
<li>学んだこと2: 開発を続けられるコードを書く</li>
<li>継続的に開発とビジネス</li>
<li>長期間一緒にやれる仕事を優先</li>
<li>フリーソフトウェア開発の世界</li>
<li>ユースケースを確認する</li>
<li>学んだこと3: 相手が想像しなくてもわかるように説明する</li>
<li>学んだこと4: 楽しく開発する</li>
<li>学んだこと5: 非難するよりも手を動かす</li>
<li>学んだこと6: 回避策よりも根本解決</li>
<li>受託開発の優先度</li>
<li>a: フリーソフトウェアを直接的に推進できる仕事</li>
<li>b: フリーソフトウェアを間接的に推進できる仕事</li>
<li>c: いずれ推進につながりそうな仕事</li>
<li>FLOSSサポート: 導入支援と障害調査</li>
<li>事例：Firefox/Thunderbirdの企業導入</li>
<li>公開することで宣伝にもなるので次の仕事に繋がることがある</li>
<li>OSS開発支援</li>
<li>どうして仕事になるか</li>
<li>OSSのエコシステムに参加</li>
<li>自分たちのソフトウェアとOSSを同じように扱う</li>
<li>問題があれば直す</li>
<li>気になるところがあれば共有</li>
<li>仕事の作り方: お客さんに見つけてもらう</li>
<li>お客さん探しを頑張らない</li>
<li>諦めることは大事</li>
<li>決断</li>
<li>決断する基準があると楽しめる (自分の中で基準がはっきりしていないうちは大変だった)</li>
<li>クリアコードの基準: フリーソフトウェアの推進と稼ぐことの両立</li>
<li>お客さん探しと稼ぐこと</li>
<li>推進と稼ぐことの両取り</li>
<li>推進→見つけてもらった例: milter manager</li>
<li>最近の推進兼営業活動: Apache Arrow</li>
<li><a href="https://classmethod.connpass.com/event/56478/" title="【5/28大阪】データ分析用次世代データフォーマットApache Arrow勉強会 - connpass">【5/28大阪】データ分析用次世代データフォーマットApache Arrow勉強会 - connpass</a></li>
<li>採用</li>
<li>マッチする人は少なそう</li>
<li>業務内容ではなくポリシーでマッチ</li>
<li>フリーソフトウェアの推進 → 見つけてもらう</li>
<li>RubyKaigiにスポンサー: Rubyを応援したいので始めた, 採用は期待していなかった</li>
<li><a href="https://slide.rabbit-shocker.org/authors/kou/kansai-rubykaigi-2017/" title="株式会社クリアコード - Kouhei Sutou - Rabbit Slide Show">株式会社クリアコード - Kouhei Sutou - Rabbit Slide Show</a></li>
<li>質疑応答</li>
<li>かくたにさんを指名</li>
<li>とてもいい会社説明会でした</li>
<li>joker1007 さん: upstream に取り込まれなかった場合は?</li>
<li>一言で言うとケースバイケース</li>
<li>ユースケースに合わせた形で再検討</li>
<li>?: フリーソフトウェアと OSS という言葉の使い分け</li>
<li>本質が大事だと思うときはフリーソフトウェア</li>
<li>お客さん視点のときは OSS</li>
<li>クリアコード視点だとフリーソフトウェア</li>
<li>外からは OSS</li>
<li>あとで個別に説明します</li>
<li>むりょういさん: 使っているソフトウェアについて(?) (ちゃんと聞き取れなかった)</li>
<li>Firefox / Thunderbird: すでにノウハウがあった(?) (ちゃんと聞き取れなかった)</li>
<li>Apache Arrow: いけると思って推進している</li>
</ul>


<h2>休憩</h2>

<p>スポンサーブースとどら焼きの案内があった。</p>

<h2>Rubyでデータサイエンスを行うための取り組み</h2>

<ul>
<li>ko1 さんと mrkn さんが始めた活動</li>
<li>データサイエンスは技術的にどうおもしろいか</li>
<li>データサイエンスとは</li>
<li>データソース (Excel, RDB, &hellip;) - 前処理 (文字列整形, 欠損値処理, &hellip;) - 分析 (機械学習, 統計) - 可視化 (散布図, 棒, 箱ひげ, &hellip;) - 多次元データの理解, モデルに基づいた予測</li>
<li>データサイエンスは、9割を前処理に費す</li>
<li>具体例</li>
<li>近年の状況</li>
<li>データが増えている</li>
<li>データ分析環境が進歩している</li>
<li>データサイエンスの民主化が進んでいる</li>
<li>Ruby のデータサイエンスの現状</li>
<li>ウェブブラウザからのRubyの実行</li>
<li>データサイエンスに関わるRubyのgem群</li>
<li>docker で試す</li>
<li><a href="https://hub.docker.com/r/sciruby/">https://hub.docker.com/r/sciruby/</a> <a href="https://hub.docker.com/r/rubynumo/">https://hub.docker.com/r/rubynumo/</a> のあたり?</li>
<li>PyCall について</li>
<li>Arrow を介した Ruby 外言語との連携</li>
<li>Python と R が二大言語</li>
<li>Python でできるけど R だと簡単にできないとか R だとできるけど Python だと簡単にできないとかいうときにも Arrow で簡単に連携できるようになったらしい</li>
<li>コミュニティの重要性</li>
<li>(red-)arrow の出現に伴う変化?</li>
<li>複数言語の連携が容易になる</li>
<li>他言語にはない優位性を持つ gem や独自機能を持つ gem が求められる?</li>
<li><a href="http://sciruby-slack.herokuapp.com/">http://sciruby-slack.herokuapp.com/</a></li>
<li><a href="https://gitter.im/red-data-tools/">https://gitter.im/red-data-tools/</a></li>
<li>質疑応答</li>
<li>発表者: データサイエンスに興味がある人が少ない?</li>
<li>joker1007 さん: Ruby でやれると嬉しいが、目の前の問題を解決するには他の手段を使ってしまう。 Ruby は分散処理のコンポーネントが少ない? Ruby は好きなので長期的には Ruby でできると嬉しい。</li>
<li>arrow があっても独自性がないと厳しい?</li>
<li>すぐには難しい</li>
<li>可視化あたり?</li>
<li><a href="https://github.com/sciruby-jp/ruby-datascience-examples/blob/master/Ruby%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9%E3%82%92%E8%A1%8C%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF.pdf">https://github.com/sciruby-jp/ruby-datascience-examples/blob/master/Ruby%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9%E3%82%92%E8%A1%8C%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF.pdf</a></li>
</ul>


<h2>昼休憩</h2>

<p>11:56 から 12:50 まで。</p>

<h2>エンタープライズRubyOnRails エンプラでぶち当たった2つの壁と突破法</h2>

<ul>
<li>自己紹介</li>
<li>会社紹介</li>
<li>エンタープライズに Ruby on Rails は不向きと言われている</li>
<li>1: 高すぎる柔軟性</li>
<li>2: Rails による規約の縛り</li>
<li>本日お伝えしたいこと: 具体的な壁と突破方法</li>
<li>プロジェクト概要: 写真は <a href="https://twitter.com/ujm/status/868315623561977856">https://twitter.com/ujm/status/868315623561977856</a></li>
<li>ソース管理: GitLab (ギットラボとよんでいた)</li>
<li>経験者が少ない (10人に1人)</li>
<li>2つの壁にあたった</li>
<li>コードのメンテナンス性低下</li>
<li>経験者が不足するとどうなるか</li>
<li>一貫性のないコードが量産される</li>
<li>レビュアーが困る</li>
<li>コンフリクトの多発</li>
<li>merge request でモデルのコンフリクトが多発</li>
<li>レビュアーの負担が激増</li>
<li>壁は想像以上に高かった</li>
<li>突破法を考えてみた</li>
<li>コードメンテナンス性の壁 → 強力な IDE レベルの仕組み → 開発統制</li>
<li>コンフリクトの壁 → 人が編集するファイルの極少化 → 自動生成</li>
<li>RuboCop SubimeText3 独自チェッカー Drone</li>
<li>rb ファイルと erb ファイルをチェック</li>
<li>RuboCop でチェック</li>
<li>erb は注釈宣言を警告して erb のコメントアウトを使うように</li>
<li>CI がパスしなかったら merge request をマージできない</li>
<li>Excel の設計書から自動生成</li>
<li>権限やルーティングを自動生成</li>
<li>routing ファイルを分割</li>
<li>一部は手動変更可能 (gem 関連とか)</li>
<li>ER 図からも自動生成</li>
<li>マイグレーション、RSpec、Model を生成</li>
<li>モデルファイルをモジュールに分割して自動生成</li>
<li>画面設計から view も自動生成</li>
<li>ロジックが必要ない部分は基本的に自動生成にした</li>
<li>結果</li>
<li>レビュアーの負担が減少</li>
<li>64.9% (約31000行) が自動生成</li>
<li>コンフリクト発生率 25% → 5%</li>
<li>質疑応答</li>
<li>?: コンフリクト解決の責任はレビュアー?</li>
<li>そうです。</li>
<li>?: ? (メモ取れず)</li>
<li>決めるにあたって色々葛藤があったが詳細は懇親会で</li>
</ul>


<h2>Rubygem開発の流儀</h2>

<ul>
<li>プロジェクター接続トラブル</li>
<li>awesome なのでサイズ調整ができない</li>
<li>表示がおかしい (上の一部が下に出ている)</li>
<li>自己紹介</li>
<li>会社紹介</li>
<li>本題の Rubygem 開発について</li>
<li>Rubygem についておさらい</li>
<li>bundler 便利</li>
<li>パーフェクト Ruby 第二版</li>
<li>著者献本を持ってきたのでブログに書いてくれる人にプレゼントしたい</li>
<li>作り始めが簡単でも gem を作ってリリースするには別のハードルがある</li>
<li>gem をざっくり分類</li>
<li>開発支援系: ほとんどの gem</li>
<li>クライアント系</li>
<li>フレームワーク/ミドルウェア系</li>
<li>プラグイン系</li>
<li>既存 gem 改造系</li>
<li>業務特化系</li>
<li>便利ツール系</li>
<li>パフォーマンス向上系</li>
<li>既存gem の改造やプラグイン系が作りやすいし、ゴールがわかりやすい</li>
<li>色々な gem を参考にネタを探す</li>
<li>とにかく日々のイライラや不満を言語化し、色々な gem のパターンと突き合わせる。</li>
<li>gem を作り始める前にやること</li>
<li>gem 開発のコストとは</li>
<li>activerecord-cause の場合</li>
<li>gem を作るときに考えておくこと</li>
<li>行儀の良さとは</li>
<li>gem の外の世界を壊さないなど</li>
<li>rspec-storage の場合</li>
<li>よくない例</li>
<li>非公開な API 使いまくり</li>
<li>汎用化の暗部</li>
<li>たとえば <code>devise</code> や <code>rails_admin</code> のコードが簡単に読めますか?</li>
<li>作った後の OSS 活動</li>
<li>昨日追加要求について</li>
<li>基本的に「Welcome your PR」で良いと思っている。</li>
<li>Welcome PR なんだけど&hellip;</li>
<li>機能追加系の対応にはポリシーが必要</li>
<li>実装せずに済ます強い心の例</li>
<li>まとめ</li>
<li>kozo2 さん: embulk の gem には jar が同梱されていると言う話があったがファイルサイズの上限はあるのか?</li>
<li>あった気がするが引っかかったことがないのでわからない。</li>
<li>kozo2 さん: データを大量に入れたい。</li>
<li>日本の祝日の gem のようにデータのみの gem の例はある。</li>
<li>パーフェクト Ruby 第二版のプレゼントのじゃんけん大会</li>
<li><a href="https://twitter.com/9gmotonari/status/868332186025443328">https://twitter.com/9gmotonari/status/868332186025443328</a></li>
<li><a href="https://speakerdeck.com/joker1007/rubygemkai-fa-falseliu-yi" title="Rubygem開発の流儀 // Speaker Deck">Rubygem開発の流儀 // Speaker Deck</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li><a href="https://rubykaigi.doorkeeper.jp/events/61062" title="RubyKaigi 2017">RubyKaigi 2017</a> の受付が始まっている</li>
</ul>


<h2>コミュニティ文化の取り込みとその機会で得た知見</h2>

<ul>
<li>会社のスポンサー表示</li>
<li>Contents</li>
<li>Community?</li>
<li>社内のコミュニティ感</li>
<li>個人的成果の紹介</li>
<li>webpacker を使っている人: 1桁ぐらいしかいない</li>
<li>自己紹介</li>
<li><a href="https://github.com/muryoimpl/buoys">https://github.com/muryoimpl/buoys</a></li>
<li>Community とは?</li>
<li>この場もコミュニティ</li>
<li>一緒に仕事をする人たちもコミュニティと言える</li>
<li>コミュニティとの接点</li>
<li>(同じタイトルで違うスライドがしばらく続いていたのでメモを取り損ねたので、諦めて聞いていた)</li>
<li><a href="https://github.com/muryoimpl/slippr">https://github.com/muryoimpl/slippr</a></li>
<li><a href="https://github.com/muryoimpl/talker-signupper">https://github.com/muryoimpl/talker-signupper</a></li>
<li>時間がおしているので質疑応答はなし</li>
</ul>


<h2>Rubyistと技術記事 ～なぜ書くの？どう書くの？何が起きるの？～</h2>

<ul>
<li>自己紹介</li>
<li>Rubyist と技術記事</li>
<li>技術記事を書く = 知見のオープンソース化</li>
<li>一般論から個人の話へ</li>
<li>これまでの活動内容</li>
<li>知っている人挙手 → 写真とらせて</li>
<li>なぜ書くの?</li>
<li>困る、ググる、助かった！のギブアンドテイク</li>
<li>助かった、ありがとうの声が1つでもあると嬉しい</li>
<li>何を書くの?</li>
<li>困る、ググる、助かった！の流れをイメージする</li>
<li>いつ、どう書くの?</li>
<li>朝型なので、起床してから仕事を始めるまでの時間で書く</li>
<li>公開前に何度も読み直して校正する</li>
<li>公開後でも校正する</li>
<li>わかりやすい記事を書くためには</li>
<li>読者ファースト: 困っている人を想定して書く</li>
<li>その技術のおいしさを引き出せる、実践的な例を出す</li>
<li>文章とコードをバランスよく配分する</li>
<li>タイトルは超重要！</li>
<li>Qiita とブログの使い分け</li>
<li>Qiita は技術が主役</li>
<li>ブログは自分が主役</li>
<li>Twitter と YouTube の使い分け</li>
<li>参考: 初期のブログ</li>
<li>何が起きるの?</li>
<li>お金の話</li>
<li>技術記事とお金の話</li>
<li>お金より、信頼やレピュテーション</li>
<li>技術記事Q&amp;A</li>
<li>Q3: 執筆時間を短くするコツは?</li>
<li>A: 時間を気にしたことがない。それよりもわかりやすさ重視</li>
<li>描き続ければ基本的な速さは身につく</li>
<li>Q4: 反響がなくてよくヘコみます。これを克服するには?</li>
<li>A: 狙ってもどうせ当たらない。1件でも反響があれば成功と考える</li>
<li>Q5: 描きたいけどかけない。時間もない。どうすれば?</li>
<li>A: タスク管理をしっかり。</li>
<li>まとめ</li>
<li>まとめ (ふたたび一般論)</li>
<li>最後に追加アナウンス: 「プロを目指す人のためのRuby入門」という本が2017年11月発売予定</li>
<li><a href="https://speakerdeck.com/jnchito/number-kanrk2017" title="Rubyistと技術記事 // #kanrk2017 // Speaker Deck">Rubyistと技術記事 // #kanrk2017 // Speaker Deck</a></li>
</ul>


<h2>子どものためのプログラミング道場「CoderDojo」を支えるRails CMSの活用事例</h2>

<ul>
<li>上の5階でやっていた様子を取材してきた</li>
<li>子供同士も含めたコミュニティ</li>
<li>全国各地でやっている (85 以上、今年中に 100 を超えそう)</li>
<li>世界中でやっている (1200 以上)</li>
<li>本日の話</li>
<li>CoderDojo とは (済)</li>
<li>なぜ Rails + CMS?</li>
<li>Scrivito の活用事例</li>
<li>なぜ Rails?</li>
<li>初期は GitHub Pages で生成</li>
<li>デザイン改善 + Parse 利用</li>
<li>Parse 終了のお知らせ</li>
<li>要望や状況を整理するよい機会だった</li>
<li>コミットしているのが2人 (実際は1人) だけだった</li>
<li>状況の変化に対応しやすい Rails</li>
<li>ドキュメントも多い</li>
<li>Rails Tutorial, Rails ガイド</li>
<li>翻訳をやっているのは弊社</li>
<li>ただ Rails の学習コストは高い (と思う)</li>
<li>CMS?</li>
<li>様々なコントリビュータ</li>
<li>「エンジニア」じゃなくても貢献できる</li>
<li>Scrivito: Cloud-Based Rails CMS</li>
<li>Rails に Scrivito gem を足す</li>
<li>ブラウザーで編集できる機能を追加できる</li>
<li>コントリビューターが以前2人が今は15人</li>
<li>Scrivito の活用事例</li>
<li>CoderDojo Japan 公式本</li>
<li>大枠を Rails 側の view で作って、各章の担当者が該当する部分の文言を直接編集</li>
<li><a href="https://coderdojo.jp/kata">https://coderdojo.jp/kata</a> の「2017年1月には全国で70ヶ所以上」を「2017年5月には全国で84ヶ所以上」に更新するデモ</li>
<li><a href="https://github.com/coderdojo-japan/coderdojo.jp">https://github.com/coderdojo-japan/coderdojo.jp</a></li>
</ul>


<h2>スポンサーセッション</h2>

<p>Ruby開発さんのスポンサーセッションでした。</p>

<h2>基調講演: 18年でRubyから学んだこと</h2>

<ul>
<li>自己紹介</li>
<li>風呂グラマー</li>
<li>IT芸人</li>
<li>Ruby歴 18年ぐらい</li>
<li>一番好きなメソッド: <code>method_missing</code></li>
<li>次は <code>define_method</code>, その次は <code>eval</code></li>
<li>局所的に綺麗にかけるものが好き</li>
<li>dRuby</li>
<li>ずーっとユーザ</li>
<li>gem も 1 個だけ <code>pr_geohash</code></li>
<li>mruby</li>
<li>1999年: i-mode など</li>
<li>Ruby本が立て続けに出た時期があった</li>
<li>オブジェクト指向</li>
<li>Ruby に教わったこと</li>
<li>2000年代前半: PHPでPukiWiki作ってた など</li>
<li>伽藍(がらん)とバザールだけでも良いので読むのをおすすめ</li>
<li>元の作者から引き継いでコミュニティを作って、年末には別のコミッターに渡した</li>
<li>Windows でも頑張ってた</li>
<li>wxWindows とか QT 使って GUI アプリ作り</li>
<li>exerb 使ってパッケージング</li>
<li>ActiveScript Ruby</li>
<li>Ruby on Rails</li>
<li>2004/07 - DHH が公開</li>
<li>2005年頭ぐらいに発見</li>
<li>すごい! Ruby で Web アプリがキレイに作れる</li>
<li>2005年から Ruby 漬け: Rails を試して, ブログ書いて, 雑誌に記事を書く</li>
<li>OSC Hokkaido 2005</li>
<li>たぶん初めて Matz を見たのはこのとき</li>
<li>英語で質疑応答していた</li>
<li>10分で作る Rails アプリ for Windows</li>
<li>編集ソフトがなかったので無編集</li>
<li>本当に10分でできるというのを示す意味もあった</li>
<li>typo とかで何度もとりなおした</li>
<li>pingking.jp</li>
<li>@nifty の about me</li>
<li>RailsConf 2006</li>
<li>初めての海外</li>
<li>英語力ゼロ</li>
<li>リアル Ruby 友達もほぼゼロ</li>
<li>初の海外カンファレンス</li>
<li>スライドのキーワードでなんとなくわかる</li>
<li>内容はRails勉強会@東京の方がすごいのでは?</li>
<li>Ruby歴なら絶対自分の方が長い</li>
<li>なら渡米しよう</li>
<li>色々あって2008年渡米</li>
<li>結局英語は喋れるようにはならなかった</li>
<li>Seattle.rb</li>
<li>英語わからないけどなんとなく参加して覚えた</li>
<li>英語はブロークンな20代の若者の英語が身についた</li>
<li>Appcelerator へ転職</li>
<li>知り合いのいないコミュニティーで活動したい</li>
<li>Node.js と Titanium Mobile</li>
<li>Titanium Mobile にパッチ送ったりチャットで話ししたりしているうちに中の人に</li>
<li>GitHub のスターが多かったからだとあとで聞いた</li>
<li>影響を受けた人: matz さん, hyuki さん (スライドではアイコンだけ)</li>
<li>どちらもキリスト教の人</li>
<li>テクノロジーに愛を謳う</li>
<li>ロジカルじゃない</li>
<li>MINSWAN = Matz Is Nice So We Are Nice</li>
<li>心理的安全性</li>
<li>Matz はストーリーを語るのが上手い</li>
<li>DHHも</li>
<li>こういうのがうまい人は抽象化がうまい</li>
<li>初めてのRuby本体への貢献</li>
<li>mruby</li>
<li>RubyConf 2010 で聞いた</li>
<li>そっから進捗を全然聞かない</li>
<li>2012年のリリース前時点の private repo のアクセス権をもらった</li>
<li>やること多数</li>
<li>GitHub 以後の開発コミュニティ</li>
<li>MobiRuby</li>
<li>MobiRuby のもくろみ</li>
<li>Matz にはなれない</li>
<li>あきやすいので無理だった</li>
<li>手離れよく作ることを考えるようになった</li>
<li>Ruby から得たもの</li>
<li>一番大きいのは「軸」</li>
</ul>


<h2>クロージング</h2>

<p>時間がなかったので、Ruby 関西の宣伝などはなく、前に集まって写真撮影のみでした。</p>

<h2>懇親会</h2>

<p>事前に予告されていた通り LT がありました。
本編でスポンサーセッションがなかったスポンサーの LT もありました。</p>

<p>前にどこかで聞いたことあるような内容もありましたが、いろいろな話があって楽しめました。</p>

<p>特に何も準備していなかったのと MacBook Pro の電池が残り少なかったこともあり、特に LT はしませんでした。</p>

<h2>全体的な感想</h2>

<p>RubyKaigi 2015 の T シャツを着て行ったのですが、上にもう一枚着ていたので、知らない人にはただの寿司の T シャツにしか見えないような気がしていました。
一部の人には背中の Committer と書かれている部分を見せたりできたので、着て行った意味はあったと思いました。</p>

<p>会場は9時にならないと鍵が借りられなかったり、撤収完了の時間が決まっていたり (ロビーに残っているのは OK だったらしい)、プロジェクターでトラブルがあったり (ミラーリングかどうかが影響したらしい?)、電源が不十分だったり (これは各自できるだけタップを持ってきてくださいとアナウンスがあればよかったのかも)、などの問題点はありましたが、迷わずたどり着けたり (途中でひがきさんにあったので入り口を自分で探さなくてよかったのも幸いした)、マイクなどの設備も整っていたり、撤収時に椅子やテーブルは特に気にしなくてよかったりしたのはよかったと思いました。</p>

<p>全体の進行は時間がおしてしまって、それを取り戻すために減らす休憩時間の余裕もなくて、最後まで時間が足りないままでした。</p>

<p>発表の内容はどれも面白く、twitter でもハッシュタグがトレンド入りしていたらしいというぐらい盛り上がっていたようです。</p>

<p>@nifty の about me は使っていたので懐かしいと思いました。
@nifty で Rails を使っていると前面に打ち出していたのは、他に @nifty TimeLine があったのも思い出しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenSSH の ~/.ssh/config の見直しをした]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-20-openssh-config.html"/>
    <updated>2017-05-20T14:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/openssh-config</id>
    <content type="html"><![CDATA[<p>最新の man を参考にしながら OpenSSH の <code>~/.ssh/config</code> の設定を見直してみたので、使っている設定項目についてまとめてみました。</p>

<!--more-->


<h2>確認バージョン</h2>

<p>全て確認したわけではないですが、古いのや新しいのを確認したいときはこの辺りを使いました。</p>

<ul>
<li>Debian GNU/Linux 8.7 (jessie) の OpenSSH_6.7p1 Debian-5+deb8u3, OpenSSL 1.0.1t  3 May 2016</li>
<li>archlinux の OpenSSH_7.5p1, OpenSSL 1.1.0e  16 Feb 2017</li>
</ul>


<h2>参考</h2>

<p><a href="https://euske.github.io/openssh-jman/ssh_config.html">https://euske.github.io/openssh-jman/ssh_config.html</a> の日本語訳や <code>man ssh_config</code> で英語のマニュアルを確認したりしました。</p>

<h2>優先順位</h2>

<ol>
<li>コマンドラインオプション</li>
<li>ユーザごとの設定ファイル <code>~/.ssh/config</code></li>
<li>システム全体にわたる (system-wide) 設定ファイル <code>/etc/ssh/ssh_config</code></li>
</ol>


<p>の順番で最初に見つかった設定が使われます。</p>

<p>設定ファイルは <code>Host</code> の行で区切られていて、設定ファイルの中でも前に見つかったものが優先されるので、ホストごとの設定をファイルの先頭の方に、全体的な設定を末尾の方に書くことを想定しているようです。</p>

<h2>Host</h2>

<p><code>Host</code> または <code>Match</code> は設定ファイルの区切りです。</p>

<p>コマンドラインで指定されたホスト名にマッチするので、<code>ssh localhost</code> の時には <code>Host localhost</code> の設定が使われて <code>Host 127.0.0.1</code> や <code>Host ::1</code> の設定は使われません。</p>

<h2>CheckHostIP</h2>

<p>同じホスト名なのに IP アドレスが変わる可能性がある場合に <code>CheckHostIP no</code> にしておくと <code>known_hosts</code> に IP アドレスが記録されないようになります。</p>

<p>DNS を工夫して LAN 内では直接、外からはルーターのポートフォワーディング経由で接続できるようにしている場合など、接続の仕方によって変わる場合や、 GitHub などのようにホスト鍵はそのままで IP アドレスが変わることがあるサービスを使っている時に使うと良いと思います。</p>

<h2>Ciphers</h2>

<p><a href="http://blog.n-z.jp/blog/2014-08-11-openssh-arcfour256.html">vagrantなどのローカルへのssh接続のみarcfour256で高速化する</a>ということをしていたこともありましたが、<a href="https://srad.jp/comment/2875861">https://srad.jp/comment/2875861</a> のリンク先の <a href="http://www.openssh.com/txt/release-7.1">http://www.openssh.com/txt/release-7.1</a> に</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Future deprecation notice
</span><span class='line'>=========================
</span><span class='line'>
</span><span class='line'>We plan on retiring more legacy cryptography in the next release
</span><span class='line'>including:
</span><span class='line'>
</span><span class='line'> * Refusing all RSA keys smaller than 1024 bits (the current minimum
</span><span class='line'>   is 768 bits)
</span><span class='line'>
</span><span class='line'> * Several ciphers will be disabled by default: blowfish-cbc,
</span><span class='line'>   cast128-cbc, all arcfour variants and the rijndael-cbc aliases
</span><span class='line'>   for AES.
</span><span class='line'>
</span><span class='line'> * MD5-based HMAC algorithms will be disabled by default.
</span><span class='line'>
</span><span class='line'>This list reflects our current intentions, but please check the final
</span><span class='line'>release notes for OpenSSH 7.2 when it is released.</span></code></pre></td></tr></table></div></figure>


<p>と書いてあって、 <a href="http://www.openssh.com/txt/release-7.2">http://www.openssh.com/txt/release-7.2</a> には</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Potentially-incompatible changes
</span><span class='line'>================================
</span><span class='line'>
</span><span class='line'>This release disables a number of legacy cryptographic algorithms
</span><span class='line'>by default in ssh:
</span><span class='line'>
</span><span class='line'> * Several ciphers blowfish-cbc, cast128-cbc, all arcfour variants
</span><span class='line'>   and the rijndael-cbc aliases for AES.
</span><span class='line'>
</span><span class='line'> * MD5-based and truncated HMAC algorithms.
</span><span class='line'>
</span><span class='line'>These algorithms are already disabled by default in sshd.</span></code></pre></td></tr></table></div></figure>


<p>となっていて arcfour 系はデフォルトでは使われないようになったようなので、 arcfour 系はもうあまり使わない方が良さそうです。</p>

<p>OpenSSH_7.5p1 で <code>ssh -Q cipher</code> を確認しても残っていますが、サーバー側で無効になっていると結局使えないので、将来的には使えないものと考えて良さそうです。</p>

<p>速度を気にするなら <a href="http://blog.uu59.org/2014-04-12-ssh-ciphers.html">OpenSSH 6.6p1の各cipherのスループットを計測した</a> を参考にして実際に計測するのが良さそうです。</p>

<p>試した感じだと <code>chacha20-poly1305@openssh.com</code> が遅くて <code>aes*-ctr</code> 系と <code>aes*-gcm@openssh.com</code> 系はそんなに違いがない感じだったので、速度を気にする場合は</p>

<pre><code>Ciphers aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
</code></pre>

<p>ぐらいでいいのではないかと思いました。(セキュリティを優先するならビット数が多い方を前に持ってくると良いと思います。)</p>

<h2>ControlMaster, ControlPath, ControlPersist</h2>

<p>デフォルトの <code>ControlMaster no</code> のまま、使いたい Host だけ <code>ControlMaster auto</code> を設定する方法と、末尾の <code>Host *</code> でデフォルトを <code>ControlMaster auto</code> にしてしまって不要な Host や設定していると問題が起きる Host だけ <code>ControlMaster no</code> を設定する方法があると思います。</p>

<p><code>ControlPath</code> は XDG Base Directory Specification の <code>XDG_CACHE_HOME</code> を参考にして <code>$HOME/.cache</code> を使って <code>ControlPath ~/.cache/ssh,%r,%h,%p,sock</code> にしています。(区切りはどの OS でも問題が起きにくそうなのとホスト名の中の <code>.</code> と区別できるように、ということで <code>,</code> にしています。)</p>

<p><code>ControlPersist</code>は OpenSSH 5.6 で、存在を知った当時はまだ対応していない OS の方が多かったので、使っていませんでしたが、せっかくなので <code>ControlPersist 10</code> に設定してみました。</p>

<h2>DynamicForward</h2>

<p>SOCKS proxy 機能です。</p>

<p>ブラウザーの接続元 IP アドレスを変えてテストしたい時に使うことがあったので、</p>

<pre><code>Host hoge hoge-proxy
HostName FQDNかIPアドレス
# ...その他の設定...

Host hoge-proxy
DynamicForward 1088
</code></pre>

<p>のように、<code>ssh hoge-proxy</code> で有効になるように設定していることもありましたが、滅多に使わないので、コマンドラインで <code>-D 1080</code> のように明示的に指定して使うことの方が多くなりました。</p>

<h2>ExitOnForwardFailure</h2>

<p>ポートフォワーディングを設定しているのにポートフォワーディングされていないことの方が、ポートフォワーディングを設定している先に多重に接続できなくて困ることより多かったので、 <code>ExitOnForwardFailure yes</code> で有効にしています。</p>

<h2>FingerprintHash</h2>

<p>サーバー側の OpenSSH が古い時に <code>ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub</code> などの結果が md5 固定なので、クライアントの OpenSSH が新しい時に <code>ssh -o FingerprintHash=md5</code> で md5 に変更して照合しています。</p>

<p>サーバー側が新しくて、クライアントが古い時に md5 の fingerprint を出すのは <code>ssh-keygen -l -E md5 -f /etc/ssh/ssh_host_ecdsa_key.pub</code> などのようです。</p>

<p>おまけの情報として、簡単に fingerprint の照合をするのに、適当なエディターにコピペして検索して全体がハイライトされるのを確認するという方法があります。
ダウンロードしたファイルのハッシュの確認にも同じ方法を使っています。</p>

<h2>ForwardAgent, ForwardX11</h2>

<p>セキュリティリスクがあるので、必要な時はコマンドラインで明示的に <code>-A</code> や <code>-X</code> で使うようにしています。</p>

<h2>HashKnownHosts</h2>

<p>不便さの方が大きい (IP アドレスも追加されているかどうか確認しにくいなど) と感じているので、 <code>HashKnownHosts no</code> で無効にしています。</p>

<h2>HostKeyAlias</h2>

<p>多段 SSH の時などに使っています。</p>

<h2>HostName</h2>

<pre><code>Host hoge hoge.example.com
HostName hoge.example.com
</code></pre>

<p>のようにして、 FQDN の代わりに短いホスト名で接続できるようにしたり、 <code>HostName IPアドレス</code> で IP アドレスを直接指定したり、よく使っています。</p>

<h2>IdentitiesOnly, IdentityFile</h2>

<p><code>IdentitiesOnly yes</code> と <code>IdentityFile</code> をセットで使って特定の鍵を使うように指定できます。
<code>IdentityFile</code> のみだと <code>ssh-agent</code> に登録されている全ての鍵を試してしまうので、普通は <code>IdentitiesOnly yes</code> とセットにして使うと思います。</p>

<p>GitHub や Heroku などのように鍵でユーザーが区別されるサービスで複数ユーザーを使い分ける時には必須だと思います。</p>

<h2>LocalCommand, PermitLocalCommand</h2>

<p>あまり使うことはなさそうですが、不用意に出力を伴うコマンドを設定していると、内部的に ssh を使うコマンドが謎の失敗をする原因になることがあります。</p>

<h2>LocalForward</h2>

<p>IRC bouncer に接続するのに</p>

<pre><code>LocalForward 6665 127.0.0.1:6665
LocalForward 6666 127.0.0.1:6666
LocalForward 6667 127.0.0.1:6667
</code></pre>

<p>という感じで使っていましたが、 TCP over TCP はあまりよくないということで、今は OpenVPN を使うようになったので、使っていません。</p>

<h2>NoHostAuthenticationForLocalhost</h2>

<p>仮想環境への接続で問題が起きたことがあるので <code>NoHostAuthenticationForLocalhost yes</code> にしています。</p>

<h2>Port</h2>

<p>ポート番号を変更している Host の設定によく使います。
明示的に <code>Port 22</code> を書いていることもあります。</p>

<h2>ProxyCommand, ProxyJump</h2>

<p>gateway を経由して target に接続するのに</p>

<pre><code>Host target
HostKeyAlias target.example.com
Hostname target.example.com
ProxyCommand ssh gateway.example.com nc -w 330 target.example.com 22
</code></pre>

<p>のように使っていました。</p>

<p>このような場合に OpenSSH 7.3 以降だと <code>ProxyJump</code> という設定が使えそうです。</p>

<p>今はそういう接続が必要な Host がないので使っていません。</p>

<h2>RequestTTY</h2>

<p><a href="http://dokku.viewdocs.io/dokku/" title="Dokku">Dokku</a> のように常に有効にしていた方が便利な Host に <code>RequestTTY yes</code> を指定しています。</p>

<p>たとえば dokku の vagrant 環境用の設定全体は以下のようにしています。</p>

<pre><code> Host dokku dokku.me
 User dokku
 HostName 10.0.0.2
 Port 22
 UserKnownHostsFile /dev/null
 StrictHostKeyChecking no
 PasswordAuthentication no
 #IdentityFile ~/.vagrant.d/insecure_private_key
 IdentityFile ~/.ssh/id_rsa
 IdentitiesOnly yes
 LogLevel FATAL
 RequestTTY yes
</code></pre>

<h2>ServerAliveInterval</h2>

<p>接続が切れた時にタイムアウトしてくれる設定です。
昔 Debian には <code>ProtocolKeepAlives</code> という設定がありましたが、今は <code>ServerAliveInterval</code> がどの OS でも使えます。
<code>ServerAliveInterval 300</code> や <code>ServerAliveInterval 30</code> を設定しています。</p>

<h2>StrictHostKeyChecking</h2>

<p>vagrant 環境など、ローカルの接続でホスト鍵も変わる可能性のある Host で <code>StrictHostKeyChecking no</code> にしています。</p>

<h2>Tunnel, TunnelDevice</h2>

<p>ssh のプロセスに与える権限が大きくなりすぎてしまうので使いにくいと思って使っていません。
代わりにトンネルには OpenVPN を使っています。</p>

<h2>UpdateHostKeys</h2>

<p>OpenSSH 6.8 以降のサーバーとクライアントだと複数のホスト鍵を受け取れるようになるようなので <code>UpdateHostKeys ask</code> にしておくと良さそうです。</p>

<p>試してみると、たとえば <code>ecdsa-sha2-nistp256</code> のホスト鍵だけ <code>known_hosts</code> に登録されているホストに接続する時に</p>

<pre><code>% ssh localhost
vagrant@localhost's password:
Learned new hostkey: RSA SHA256:+sjb9SQChXBlm/pZDyl8ORJQb4wP16eeKDqUvDli5wU
Learned new hostkey: ED25519 SHA256:rvlZW3lRcN86oPu19ym032zhuzVLz37E88A3VX2fVHE
Accept updated hostkeys? (yes/no): yes
</code></pre>

<p>のように RSA のホスト鍵と ED25519 のホスト鍵も <code>known_hosts</code> に登録するかどうかきいてきました。
(試した範囲では DSA の鍵は追加されませんでした。)</p>

<p>サーバー側が古いバージョンでも特に何も悪影響はなさそうなので、クライアントが OpenSSH 6.8 以降ならデフォルトで有効にしても良さそうです。
(クライアントが古いとエラーになるので、バージョンが古いうちから書いておくことはできない。)</p>

<p><code>ssh_config</code> の説明に書いてあるように <code>ControlPersist</code> を有効にしていると <code>UpdateHostKeys</code> は無効になるようです。</p>

<h2>User</h2>

<p><code>ssh user@host</code> で指定する代わりに <code>~/.ssh/config</code> で <code>User</code> を設定することが多いです。</p>

<h2>UserKnownHostsFile</h2>

<p>ローカルの仮想環境は <code>UserKnownHostsFile /dev/null</code> で事実上無効にしたり、<code>UserKnownHostsFile ~/.ssh/known_hosts.d/hoge.known_hosts</code> のように個別ファイルにして調べる行数を減らして速くしたりしています。</p>

<h2>VerifyHostKeyDNS</h2>

<p><a href="https://devcenter.heroku.com/articles/git-repository-ssh-fingerprints#verifying-with-dns" title="Verifying with DNS">Verifying with DNS</a> に書いてあるように <code>heroku.com</code> は SSHFP リソースレコードが設定されているようなので、 <code>VerifyHostKeyDNS yes</code> にしています。</p>

<h2>まとめ</h2>

<p><code>ServerAliveInterval</code> のように以前設定を見直したときにどの環境でも使えるようになっていたものもありましたが、 <code>ControlPersist</code> のように以前は使えない環境もあったけど、今はどこでも使える設定があったり、 <code>UpdateHostKeys</code> のようにまだ使えない環境もある設定もあったりするので、たまに気が向いたときに設定の見直しをするのはお勧めだと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DDD.rb #11 (Rails with React) (Mastodon のコードリーディング) に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-10-mastodon.html"/>
    <updated>2017-05-10T23:59:59+09:00</updated>
    <id>http://blog.n-z.jp/blog/mastodon</id>
    <content type="html"><![CDATA[<p><a href="https://dddrb.doorkeeper.jp/events/60099" title="DDD.rb #11 (Rails with React)">DDD.rb #11 (Rails with React)</a> という Mastodon のコードリーディングに参加したので、そのメモです。</p>

<p>インストールがほとんどでコードリーディングはほとんどできなかったので、大まかな読み方の話だけで、あまり突っ込んだ話はありませんでした。</p>

<!--more-->


<h2>メモ</h2>

<ul>
<li>次回は <a href="https://dddrb.doorkeeper.jp/events/60238" title="DDD.rb #12 RDRA for DDD ワークショップ！ - DDD.rb | Doorkeeper">DDD.rb #12 RDRA for DDD ワークショップ！ - DDD.rb | Doorkeeper</a> (RDRA はラドラと読むらしい)</li>
<li><a href="http://motokase.com/mastodon-matome/" title="マストドン評判とは！SNS初心者が安全にMastodonを楽しむ方法">マストドン評判とは！SNS初心者が安全にMastodonを楽しむ方法</a>の最初の方が参考になる</li>
<li>ローカルで起動するには <a href="https://github.com/tootsuite/mastodon/blob/e2491680e696d2c285a798ec4c66b26d2748df66/docs/Running-Mastodon/Development-guide.md">docs/Running-Mastodon/Development-guide.md</a> のリンク先の <a href="https://github.com/tootsuite/documentation/blob/master/Running-Mastodon/Development-guide.md">Development guide</a> を参照</li>
<li>vagrant も手軽</li>
<li>開発環境のメールは <a href="https://github.com/ryanb/letter_opener">https://github.com/ryanb/letter_opener</a> を使っている</li>
<li>master だと jquery-rails が消えている</li>
<li>master だと .foreman と Procfile.dev で streaming のサーバーなども起動する</li>
<li>今の master は cld3 でエラーになりやすい</li>
<li>基本的に v1.3.3 のタグで試そうという話に</li>
<li>react のルーティングは <code>./app/assets/javascripts/components/containers/mastodon.jsx</code> をみる</li>
<li><code>&lt;Route path='getting-started' component={GettingStarted} /&gt;</code> とか</li>
<li>翻訳が難しい話 (連合とか未収載とか)</li>
<li>docker を使うなら docker-compose.yml を直接書き換える代わりに docker-compose.override.yml が使える</li>
</ul>


<h3>getElementById</h3>

<ul>
<li>HTML ソースに <code>&lt;script id='initial-state' type='application/json'&gt;</code> がある</li>
<li><code>getElementById</code> で検索</li>
<li><code>app/assets/javascripts/components/containers/mastodon.jsx</code> に <code>const initialState = JSON.parse(document.getElementById("initial-state").textContent);</code> とある</li>
</ul>


<h3>react のソースの読み方</h3>

<ul>
<li>react のページのざっくりとした見分け方は HTML ソースがやけに少ないときは react (登録ページなど devise 由来のページは react を使っていない)</li>
<li><code>data-react-class</code> がついてるところに差し込まれている</li>
<li>react のルーティングは <code>./app/assets/javascripts/components/containers/mastodon.jsx</code> をみる</li>
<li><code>&lt;Route path='getting-started' component={GettingStarted} /&gt;</code> とか</li>
<li><code>localhost:3000/web/</code> は残して <code>localhost:3000/web/getting-started</code> を開くと出てくる</li>
<li><code>&lt;Route path='blocks' component={Blocks} /&gt;</code> は <code>import Blocks from '../features/blocks';</code> なので <code>app/assets/javascripts/components/features/blocks/index.jsx</code> にある</li>
</ul>


<h3>ストリーミングは?</h3>

<ul>
<li><code>app/assets/javascripts/components/api.jsx</code> にクライアントがある</li>
<li><code>axios</code> (アクシオス) を使っている</li>
<li><p><code>Authorization</code> で <code>Bearer</code> トークンを渡している</p></li>
<li><p>サーバー側は <code>streaming/index.js</code> にある (トップ直下)</p></li>
<li><code>import WebSocket from 'ws'</code></li>
<li>nginx などで受けて rails と振り分けられてここにくるので <code>wss</code> ではなく <code>ws</code> のみ</li>
</ul>


<h3>storybook とは?</h3>

<ul>
<li>直下に storybook ディレクトリがあるのでその話題</li>
<li>動くスタイルガイド?</li>
</ul>


<h3>その他</h3>

<ul>
<li><code>app/controllers/auth</code> に <code>devise</code> 関連</li>
<li><code>User</code> と <code>Account</code> が別にある</li>
<li><code>app/controllers/api</code> に API 関連</li>
</ul>


<h3><code>package.json</code></h3>

<ul>
<li><code>chai</code> はいろいろなものを入れる必要がある</li>
<li>rails を使う人はよく使っているらしい</li>
<li><code>sinon</code> もテストのライブラリでスタブを使いたいからではないか</li>
</ul>


<h3>ActionCable</h3>

<ul>
<li>actioncable という node (npm) のモジュールがある</li>
<li>開発元は <a href="https://github.com/rails/rails/blob/master/actioncable/package.json">https://github.com/rails/rails/blob/master/actioncable/package.json</a> らしい</li>
<li>サーバー側とクライアント側で同じ名前なので紛らわしい</li>
<li>npm の方の actioncable はあまり情報がない</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ LILO&東海道らぐオフラインミーティング 2017/05/06]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-06-lilo-tokaidolug.html"/>
    <updated>2017-05-06T13:17:50+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-tokaidolug</id>
    <content type="html"><![CDATA[<p><a href="https://lilo.connpass.com/event/55003/" title="LILO&amp;東海道らぐオフラインミーティング 2017/05/06">LILO&amp;東海道らぐオフラインミーティング 2017/05/06</a> に参加しました。</p>

<p>今回もアンカンファレンス形式でした。</p>

<!--more-->


<h2>メモ</h2>

<p>今回のメモです。</p>

<ul>
<li>会場はいつもの 4 階でした。</li>
<li>ハッシュタグ: <code>#lilo_jp</code> <code>#東海道らぐ</code></li>
<li>登録参加者数 16名</li>
<li>自己紹介から</li>
</ul>


<h2>自分の発表</h2>

<ul>
<li>資料にある話</li>
<li>資料にないけど DNS CAA の話</li>
<li>CAA レコードに書いて spam が増えなかったかという話</li>
<li>公開しているアドレスなので変化はわからず</li>
<li>.travis.yml に書いた時には明らかに増えた</li>
<li>質問があったので、ちょっと etckeeper の話 (etckeeper vcs とか)</li>
</ul>


<h2>こんどうさん</h2>

<ul>
<li>ESP パーティションの話</li>
<li>ESP 内の grub データを消せば Windows のみになる</li>
<li>BIOS/MBR から UEFI の過渡期の話</li>
<li>openSUSE の話</li>
<li>openSUSE Asia Summit 招聘中</li>
<li>LibO もほぼ併催確定</li>
<li>Cinnamon を入れた</li>
<li>Linux Mint 17.3 with NVIDIA Driver は GPU 切り替えがログアウトだけで可能</li>
<li>18.1 では切り替え NG (プロプラドライバとの相性も悪い)</li>
<li>M17N: ibus の設定</li>
<li>SUSE のデフォルトは <code>/</code> が btrfs で <code>/home</code> が XFS</li>
</ul>


<h2>5分休憩</h2>

<h2>としひささん</h2>

<ul>
<li>スマートウォッチ</li>
<li>WSD-F20 と Pebble</li>
<li>必要な理由とか要件とか</li>
<li>特徴とか比較とか</li>
<li>個人的には Pebble の方が良い</li>
<li>WSD-F20 は GPS ロガーにはならない</li>
<li><p>Android Wear 2.0 はアプリが少ない</p></li>
<li><p>LILO の歴史 <a href="https://lilo.linux.or.jp/history/">https://lilo.linux.or.jp/history/</a></p></li>
<li>今年で 20 年</li>
<li>インストールからサポートする場、九州でやっているから関西でも、というのが発足理由</li>
<li>Samba の話で 150 人ぐらいきたことがあるのがピーク</li>
<li>普通は多くて50人ぐらい</li>
<li>普通は10から20人ぐらい</li>
<li>タコを育てようという文化</li>
<li>JF がすばらしい</li>
<li>Linux は初心者を大切にするのが良い</li>
<li><a href="https://twitter.com/xoxyuxu/status/860737579657732098">https://twitter.com/xoxyuxu/status/860737579657732098</a> JFは素晴らしい(ドキュメントがあることは素晴らしい) タコを育てよ(判らないことがある環境が悪い,という考え方)</li>
<li>みんないろんなものを持ってきていた</li>
<li>NAIST でやっていた奈良時代</li>
<li>場所が先端</li>
<li>デスクトップマシンを持ってくるのが普通</li>
<li>Doom をやりたくて Linux を入れた人もいる</li>
<li>Enlightment は昔からかっこいい</li>
<li>昔は重かったが時代が変わって今は軽い</li>
<li>Tizen にのっているので今も開発は活発</li>
<li>第3回のアンケート結果</li>
<li>2002年より後の歴史は分散していてまとまっていない</li>
<li>Wiki にある <a href="https://lilo.linux.or.jp/wiki/history">https://lilo.linux.or.jp/wiki/history</a></li>
<li>トップから辿れる一覧ページもある <a href="https://lilo.linux.or.jp/event/">https://lilo.linux.or.jp/event/</a></li>
<li>LMS だけ別ページ <a href="https://lilo.linux.or.jp/event/lms/">https://lilo.linux.or.jp/event/lms/</a></li>
</ul>


<h2>さかのしたさん</h2>

<ul>
<li>「Google map 印刷 制約」で検索</li>
<li><a href="https://www.google.co.jp/intl/ja/permissions/geoguidelines.html">https://www.google.co.jp/intl/ja/permissions/geoguidelines.html</a></li>
<li>Google Map は使用に制限がある</li>
<li>Open Street Map</li>
<li>facebook のチェックインなどに使われている</li>
<li>overpass turbo</li>
<li>f4map - 延暦寺</li>
<li><a href="https://www.netfort.gr.jp/~saka/accessmap/">OSM Access Map</a> というのを作った</li>
<li>道路のみの画像を保存できる</li>
<li>道路の区別は実データを元にご意見募集中</li>
<li>ゼンリンが地図グッズを売っている <a href="http://www.zenrin.co.jp/goods/matimati/item/">http://www.zenrin.co.jp/goods/matimati/item/</a></li>
<li>SUZURI でグッズを売る?</li>
<li>5月20日(土) 【西国街道#04】摂津富田の街並みと寺社巡り <a href="https://countries-romantic.connpass.com/event/56126/">https://countries-romantic.connpass.com/event/56126/</a></li>
</ul>


<h2>やまうちさん</h2>

<ul>
<li>実践IOTハウス 古いPCで</li>
<li>Tocos 無線モジュール</li>
<li>Raspberry Pi が遅いので古い PC に置き換え</li>
<li>Linux Beans</li>
<li>TOCOS TWE-Lite と ToCoStick で簡易照度センサー(100均電卓)</li>
<li>太陽電池部分の電圧をとっている</li>
<li>デモはうまく動かず</li>
</ul>


<h2>休憩</h2>

<ul>
<li>懇親会参加予定は 10 名</li>
<li>会場費は 100 円</li>
</ul>


<h2>もりわかさん</h2>

<ul>
<li><a href="https://developers.redhat.com/">https://developers.redhat.com/</a></li>
<li>登録すると 1 年間無料で開発用途に使える</li>
<li>1 年後に更新すればずっと使える</li>
<li>シェルスクリプト10行ぐらい書くよねという話</li>
<li>JBoss などもある</li>
<li>ナレッジベースやドキュメントにもアクセスできる</li>
<li>質の高いドキュメント</li>
<li>実マシン1台という制限があるが、VM の制限はないのですごいマシンを用意して 100 VM とかでも OK</li>
<li>会社で開発者がそれぞれ登録して手元のマシンはそれで動かすと言うのもあり</li>
<li>バグかどうか困ったらサポートを買うのが良い</li>
</ul>


<h2>のがたさん</h2>

<ul>
<li><a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0462">第462回　韓国開催，Korea Community Day参加レポート 〜Ubuntu KRのみなさんと交流してきました：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社</a></li>
<li>記事とは違う話を</li>
<li><a href="http://cogniti.github.io/nimf/ja/">http://cogniti.github.io/nimf/ja/</a> (ibus などの層のもの) の開発者の人と Google 翻訳を使って話をした</li>
<li>Google 翻訳は韓国語と日本語の翻訳はスラングなどを使わずきれいに話せば精度良く翻訳できるので、突っ込んだ話もできた</li>
<li>Samsung と Tizen</li>
<li>言語が違うだけでやっていることは同じだと思った話</li>
</ul>


<h2>ぉゅぅさん</h2>

<ul>
<li>Ext4 filesystem ではまった話</li>
<li>32 bit OS だと 16TiB まで</li>
<li>ブロックアロケータまで調べた</li>
<li><code>posix_fallocate</code></li>
<li><a href="http://www.ujiya.net/linux/">http://www.ujiya.net/linux/</a></li>
</ul>


<h2>今後の予定</h2>

<ul>
<li>次回はたぶん 8 月</li>
</ul>


<h2>発表した内容</h2>

<p>スライドはいつも通り <a href="http://slide.rabbit-shocker.org/authors/znz/lilo-20170506/">Rabbit Slide Show</a> (<a href="https://rubygems.org/gems/rabbit-slide-znz-lilo-20170506">RubyGems</a>), <a href="https://slideshare.net/znzjp/lilolinuxorjp-20175">SlideShare</a>, <a href="https://speakerdeck.com/u/znz/p/lilo-dot-linux-dot-or-dot-jp-falsehua-2017nian-5yue">Speaker Deck</a> にあげています。(ソースは <a href="https://github.com/znz/lilo-20170506">github</a> にあげています。)</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/lilo-20170506/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/lilo-20170506/" title="lilo.linux.or.jp の話 (2017年5月)">lilo.linux.or.jp の話 (2017年5月)</a>
</div>


<h2>Togetter まとめ</h2>

<p><a href="https://togetter.com/li/1107707">LILO&amp;東海道らぐオフラインミーティング 2017/05/06の記録 - Togetterまとめ</a>にまとめられているようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rubyのsample/cbreak.rbをSolarisで試した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-02-ruby-sample.html"/>
    <updated>2017-05-02T21:23:14+09:00</updated>
    <id>http://blog.n-z.jp/blog/ruby-sample</id>
    <content type="html"><![CDATA[<p>ruby の <a href="https://github.com/ruby/ruby/blob/3692fd69ca10fb921db5cc74a6da5eaa66808f38/sample/cbreak.rb">sample/cbreak.rb</a> は Linux で試しても動かなくて、ファイルの頭に <code># ioctl example works on Sun</code> と書いてあったので、
Solaris で試してみました。</p>

<!--more-->


<h2>vagrant box 探し</h2>

<p>「vagrant solaris」で検索して
<a href="https://vagrantcloud.com/boxes/search?q=solaris&amp;utf8=%E2%9C%93">https://vagrantcloud.com/boxes/search?q=solaris&amp;utf8=%E2%9C%93</a>
の中から
<a href="https://vagrantcloud.com/plaurin/boxes/solaris-11_3">plaurin/solaris-11_3</a>
が比較的新しくて良さそうかなと思って使うことにしました。</p>

<h2>VM 作成</h2>

<p>適当なディレクトリを作成して <code>vagrant init</code> をしました。</p>

<pre><code>mkdir solaris-11_3
cd solaris-11_3
vagrant init plaurin/solaris-11_3
</code></pre>

<p>説明ページに書いてあったので <code>vi Vagrantfile</code> で</p>

<pre><code>config.ssh.password = "1vagrant"
</code></pre>

<p>を追加しました。</p>

<pre><code>vagrant up
</code></pre>

<p>してダウンロードなどを待ちます。</p>

<p>後は</p>

<pre><code>vagrant ssh
</code></pre>

<p>で入って VM の中で作業しました。</p>

<h2>git インストール</h2>

<p>とりあえず git をインストールすることにしました。</p>

<p><a href="https://git-scm.com/download/linux">https://git-scm.com/download/linux</a> に書いてあったように</p>

<pre><code>sudo pkg install developer/versioning/git
</code></pre>

<p>でインストールできました。</p>

<h2>autoconf インストール</h2>

<p>必要になるのがわかっているので autoconf もインストールしました。
パッケージ名は適当に指定してみたらインストールできました。</p>

<pre><code>sudo pkg install autoconf
</code></pre>

<h2>git clone</h2>

<p>履歴はなくても良いので、 <code>--depth 1</code> で最新だけとってきました。</p>

<pre><code>git clone --depth 1 https://github.com/ruby/ruby
</code></pre>

<h2>とりあえず configure</h2>

<p>とりあえず configure まで実行するとエラーになりました。</p>

<pre><code>vagrant@solaris:~$ cd ruby
vagrant@solaris:~/ruby$ autoconf
vagrant@solaris:~/ruby$ mkdir build
vagrant@solaris:~/ruby$ cd build
vagrant@solaris:~/ruby/build$ ../configure --prefix=$HOME/opt/ruby
checking for ruby... false
configure: error: cannot run /bin/sh ../tool/config.sub
</code></pre>

<h2>baseruby をインストール</h2>

<p>リリースされたアーカイブではないので、baseruby となる ruby が必要ということで ruby をインストールしてやり直しました。</p>

<pre><code>vagrant@solaris:~/ruby/build$ sudo pkg install ruby
(略)
vagrant@solaris:~/ruby/build$ ../configure --prefix=$HOME/opt/ruby
checking for ruby... /usr/bin/ruby
downloading config.guess ... done
downloading config.sub ... done
checking build system type... i386-pc-solaris2.11
checking host system type... i386-pc-solaris2.11
checking target system type... i386-pc-solaris2.11
checking for gcc... no
checking for cc... no
checking for cl.exe... no
configure: error: in `/export/home/vagrant/ruby/build':
configure: error: no acceptable C compiler found in $PATH
See `config.log' for more details
</code></pre>

<h2>gcc をインストール</h2>

<p>C compiler がなくて、何を入れればいいのかよくわからなかったので、とりあえず gcc を指定してみたら入りました。</p>

<pre><code>vagrant@solaris:~/ruby/build$ sudo pkg install gcc
(略)
vagrant@solaris:~/ruby/build$ ../configure --prefix=$HOME/opt/ruby
(略)
---
Configuration summary for ruby version 2.5.0

head: illegal option -- c
usage: head [-n #] [-#] [filename...]
/export/home/vagrant/opt/ruby
head: illegal option -- c
usage: head [-n #] [-#] [filename...]
${prefix}
head: illegal option -- c
(略)
head: illegal option -- c
usage: head [-n #] [-#] [filename...]
yes
head: illegal option -- c
usage: head [-n #] [-#] [filename...]
man

---
</code></pre>

<p>configure 自体は問題がなかったようですが、サマリーの表示部分でエラーになりました。</p>

<h2>head -c を書き換え</h2>

<p>head -c は <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/head.html">POSIX</a> になくて、代わりの手段を探してみたところ、<a href="http://qiita.com/richmikan@github/items/bd4b21cf1fe503ab2e5c#head%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89">どの環境でも使えるシェルスクリプトを書くためのメモ ver4.51 - Qiita の headコマンド</a> にあったので <code>head -c26</code> を <code>dd bs=1 count=26 2&gt;/dev/null</code> に書き換えました。</p>

<pre><code>vagrant@solaris:~/ruby/build$ cd ..
vagrant@solaris:~/ruby$ vi configure.in
vagrant@solaris:~/ruby$ autoconf
vagrant@solaris:~/ruby$ cd build
vagrant@solaris:~/ruby/build$ ../configure --prefix=$HOME/opt/ruby
(略)
vagrant@solaris:~/ruby/build$ make
(略)
generating parse.c
sh: line 1: bison: not found
*** Error code 127
The following command caused the error:
bison -d  -o y.tab.c parse.tmp.y
make: Fatal error: Command failed for target `parse.c'
</code></pre>

<h2>bison インストール</h2>

<p>リリースされたアーカイブだと不要なので configure ではチェックされない bison が必要だったのでインストールしました。</p>

<pre><code>vagrant@solaris:~/ruby/build$ sudo pkg install bison
(略)
vagrant@solaris:~/ruby/build$ make
(略)
 compiling ../process.c
 ../process.c: In function ‘retry_fork_async_signal_safe’:
 ../process.c:3573:9: error: ‘fork’ is deprecated (declared at /usr/include/unistd.h:301) [-Werror=deprecated-declarations]
          pid = fork();
          ^
 ../process.c: In function ‘retry_fork_ruby’:
 ../process.c:3638:9: error: ‘fork’ is deprecated (declared at /usr/include/unistd.h:301) [-Werror=deprecated-declarations]
          pid = fork();
          ^
 ../process.c: At top level:
 cc1: warning: unrecognized command line option "-Wno-self-assign" [enabled by default]
 cc1: warning: unrecognized command line option "-Wno-constant-logical-operand" [enabled by default]
 cc1: warning: unrecognized command line option "-Wno-parentheses-equality" [enabled by default]
 cc1: warning: unrecognized command line option "-Wno-tautological-compare" [enabled by default]
 cc1: some warnings being treated as errors
 *** Error code 1
 The following command caused the error:
 gcc -O3 -fno-fast-math -ggdb3 -Wall -Wextra -Wno-unused-parameter -Wno-parentheses -Wno-long-long -Wno-missing-field-initializers -Wno-tautological-compare -Wno-parentheses-equality -Wno-constant-logical-operand -Wno-self-assign -Wunused-variable -Werror=implicit-int -Werror=pointer-arith -Werror=write-strings -Werror=declaration-after-statement -Werror=implicit-function-declaration -Werror=deprecated-declarations -Wno-packed-bitfield-compat -Wsuggest-attribute=noreturn -Wsuggest-attribute=format -std=gnu99  -D_FORTIFY_SOURCE=2 -fstack-protector -fno-strict-overflow -fvisibility=hidden -fexcess-precision=standard -DRUBY_EXPORT -fPIE   -I. -I.ext/include/i386-solaris2.11 -I../include -I.. -I../enc/unicode/9.0.0 -o process.o -c ../process.c
 make: Fatal error: Command failed for target `process.o'
</code></pre>

<p><code>fork</code> が deprecated だということでエラーになりました。</p>

<h2><code>-Werror=deprecated-declarations</code> 削除</h2>

<p>とりあえず今回試したい件とは関係ないので <code>warnflags</code> から <code>-Werror=deprecated-declarations</code> を削除しました。</p>

<pre><code>vagrant@solaris:~/ruby/build$ sed -e 's/-Werror=deprecated-declarations//' Makefile &gt; a
vagrant@solaris:~/ruby/build$ mv a Makefile
vagrant@solaris:~/ruby/build$ make
(略)
vagrant@solaris:~/ruby/build$ make install
(略)
</code></pre>

<h2>sample/cbreak.rb の動作確認</h2>

<p>動かしてみたら <code>STDIN.ioctl(TIOCGETP, tty)</code> で <code>Errno::EINVAL</code> になりました。</p>

<pre><code>vagrant@solaris:~/ruby/build$ export PATH=$HOME/opt/ruby/bin:$PATH
vagrant@solaris:~/ruby/build$ ruby -v
ruby 2.5.0dev (2017-05-02 trunk 58541) [i386-solaris2.11]
vagrant@solaris:~/ruby/build$ ruby ../sample/cbreak.rb
        from ../sample/cbreak.rb:30:in `&lt;main&gt;'
        from ../sample/cbreak.rb:9:in `cbreak'
        from ../sample/cbreak.rb:18:in `set_cbreak'
../sample/cbreak.rb:18:in `ioctl': Invalid argument @ rb_ioctl - &lt;STDIN&gt; (Errno::EINVAL)
</code></pre>

<h2>TIOCGETP の確認</h2>

<pre><code>vagrant@solaris:~/ruby/build$ find /usr/include -name '*.h' | xargs grep TIOCGETP
/usr/include/sgtty.h:#define    TIOCGETP        (('t'&lt;&lt;8)|8)
/usr/include/sys/mtio.h:#define MTIOCGETPOS             (MTIOC|17)      /* Get drive position */
/usr/include/sys/termios.h:#define      TIOCGETP        (tIOC|8)
/usr/include/sys/ttold.h: * Structure for TIOCGETP and TIOCSETP ioctls.
/usr/include/sys/ttold.h:#define        TIOCGETP        (tIOC|8)
vagrant@solaris:~/ruby/build$ vi a.c
vagrant@solaris:~/ruby/build$ gcc a.c
vagrant@solaris:~/ruby/build$ ./a.out
7408
vagrant@solaris:~/ruby/build$ cat a.c
#include &lt;sgtty.h&gt;
#include &lt;stdio.h&gt;

int main() {
        printf("%x\n", TIOCGETP);
        return 0;
}
</code></pre>

<p>include するのが <code>sys/termios.h</code> でも <code>sys/ttold.h</code> でも 7408 でした。</p>

<p><code>sample/cbreak.rb</code> では <code>TIOCGETP = 0x40067408</code> なので、何か違うようです。</p>

<h2>macOS で確認</h2>

<p>そういえば macOS だとどうだろうと思って試してみたら、動いてしまいました。</p>

<p>ただし <code>readline().print</code> のところで <code>sample/cbreak.rb:33:in `&lt;main&gt;': private method `print' called for "hoge\n":String (NoMethodError)</code> でこけたので、直す必要がありました。</p>

<h2>まとめ</h2>

<p>ruby の sample はリリースに含まれていても、そのバージョンで動作確認されているとは限らないようです。</p>

<p><code>readline().print</code> は <code>Kernel#readline</code> が <code>String</code> を返して、その <code>Kernel#print</code> を呼んでいるようなので、どのくらい古い ruby だと動くのか、それとも最初から動かなかったのか、よくわかりませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第14回関西LibreOffice勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-29-libokansai.html"/>
    <updated>2017-04-29T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/libokansai</id>
    <content type="html"><![CDATA[<p><a href="https://connpass.com/event/53960/" title="第14回関西LibreOffice勉強会">第14回関西LibreOffice勉強会</a>に参加しました。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場など</h2>

<ul>
<li>地図ソフトで三国駅から歩くルートも表示されたので、早めに出発して時間もあったので、歩いてみました。(帰りは懇親会には参加しなかったので、十三駅まで歩いてちょっと梅田に出てから帰りました。)</li>
<li>セキュリティがかかって閉まっていてオフィスフロアに入れなくて、しばらく待っていました。</li>
<li>普通の土曜日なら開いているのに、祝日だから閉まっていたようです。</li>
<li>電源やネットワークはなし</li>
<li>飲食は可能</li>
</ul>


<h2>自己紹介</h2>

<p>自分はたぶん初参加でした。</p>

<p>久しぶりに参加という人も何人かいて、長く続いている勉強会という感じを受けました。</p>

<h2>書式の自由が社会を変える―LibreOfficeとPandocができること</h2>

<ul>
<li>発表資料: <a href="https://github.com/sky-y/libreoffice-kansai-14-pandoc">https://github.com/sky-y/libreoffice-kansai-14-pandoc</a></li>
<li><p>Pandoc の日本語ドキュメントは古くなってしまっているので、英語が読めるなら本家の英語を推奨</p></li>
<li><p>この発表の概要</p></li>
<li>Pandoc の概要</li>
<li>Pandoc をインストールする</li>
<li>Pandoc でドキュメントを変換する (LibreOffice Writer 文書を中心に)</li>
<li><p>「書式の自由」について</p></li>
<li><p>対応フォーマットが多い</p></li>
<li>ODT などは入力にも対応</li>
<li><p>Markdown とは</p></li>
<li><p>Pandoc でできないこと</p></li>
<li>スプレッドシートは扱えない</li>
<li>簡単な表は対応している</li>
<li>LibreOffice Impress には対応してない</li>
<li><p>LaTeX Beamer/HTML プレゼンには変換可能</p></li>
<li><p>Pandoc を使う心得</p></li>
<li>過剰な期待をし過ぎないこと</li>
<li>Pandoc は万能でないし、文書仕様の全てを満たしているわけではない</li>
<li><p>補助的に使うのがベスト</p></li>
<li><p>Pandoc の実装は Haskell</p></li>
<li><p>補足: Markdownと標準仕様</p></li>
<li>RFC で Media Typeにて「Markdownであること」と「方言の名前」を明示する方法を定めた</li>
<li><p>(RFC でうまくいかなかったというと Cookie を思い出した)</p></li>
<li><p>質疑応答</p></li>
<li><p>文字コードは UTF-8 で</p></li>
<li><p>Pandoc をインストールする</p></li>
<li>wkhtmltopdf の wk は WebKit らしい</li>
<li>動作確認</li>
<li><code>echo "http://localhost" | pandoc -f markdown_github -t html</code> のように <code>markdown_github</code> だと自動リンクがある</li>
<li><p><code>echo "**Hello**" | pandoc -f markdown -t html5 -o hello.pdf</code></p></li>
<li><p>おまけ: Pandocで作れるスライド</p></li>
<li>今回は「reveal.js」形式に変換</li>
<li><p>LaTeX Beamer など他のプレゼン形式にも変換できる</p></li>
<li><p>Pandoc でドキュメントを変換する</p></li>
<li><a href="https://github.com/sky-y/libreoffice-kansai-14-pandoc">https://github.com/sky-y/libreoffice-kansai-14-pandoc</a> の sample で変換を試す</li>
<li><p>Windows の start コマンド、GNOME の gnome-open や macOS の open に相当</p></li>
<li><p>テンプレート</p></li>
<li><code>pandoc --print-default-data-file reference.odt &gt; reference.odt</code></li>
<li>左の <code>reference.odt</code> は pandoc 内部のテンプレートディレクトリの中のファイル名を指定している</li>
<li>右は出力ファイル名なので紛らわしいが別物</li>
<li><p>スタイルで 源ノ角ゴシック (げんの かくごしっく) に変えるとか</p></li>
<li><p>画像に関するノウハウ</p></li>
<li><p>96dpi よりも 300dpi の方が良いという指摘あり <a href="https://twitter.com/nogajun/status/858193042309861377">https://twitter.com/nogajun/status/858193042309861377</a></p></li>
<li><p>「書式の自由」について</p></li>
<li><p>質疑応答</p></li>
</ul>


<h2>休憩</h2>

<p>10分間休憩</p>

<h2>Office文書を手打ちハックする ～FlatODF活用のすすめ～</h2>

<ul>
<li>JO3EMC さん</li>
<li>文書の自動生成をやりたい</li>
<li>文書を細部まで思い通りにコントロールしたい</li>
<li>アプローチ例1: LibreOffice 以外のツール・言語を利用する</li>
<li>アプローチ例2: LibreOffice 関連のツールを利用する</li>
<li>FlatODF</li>
<li>単一の圧縮されていない XML ファイル</li>
<li>弱点</li>
<li>ファイルサイズが大きくなる</li>
<li>圧縮されていないので</li>
<li>あとで ODF に変換すれば良い</li>
<li>画像やオブジェクトの埋め込みは少し面倒</li>
<li>Base64</li>
<li>fodt で保存してテキストエディタで書き換えて開き直すデモ</li>
<li>UTF-8 以外には対応していないらしい</li>
<li>LibreOffice を使って他フォーマットへ変換・印刷</li>
<li><code>soffice --headless --convert-to pdf *.fodt</code></li>
<li><code>soffice -p *.fodt</code></li>
<li>活用例</li>
<li>FlatODF の構造の概略</li>
<li>質疑応答</li>
<li>zip された中の content.xml をいじる方法も FlatODF をいじる方法もそれぞれ長所や短所があるのでいろんな方法があるのは良いんじゃないかという話</li>
</ul>


<h2>休憩</h2>

<ul>
<li>時間がおしているので5分間休憩</li>
<li>休憩前に懇親会参加者確認</li>
</ul>


<h2>LibreOffice Online環境の構築</h2>

<ul>
<li>LibreOffice Online (LOOL)</li>
<li>LOOL (ろーる)</li>
<li>CentOS 7.3.1611 で環境構築</li>
<li>LibreOffice の make に時間がかかる (一晩?)</li>
<li>依存をいろいろ入れる</li>
<li>日本語フォントも別途入れる必要あり</li>
<li>LibreOffice Online のコンパイル (5〜10分ぐらい?)</li>
<li>LOOL はファイルのインプットの GUI がない</li>
<li>Nextcloud と連携</li>
<li>サーバー側でレンダリングして画面を転送しているので、サーバー側にフォントが必要</li>
<li><a href="https://librepc.jp/">https://librepc.jp/</a></li>
</ul>


<h2>LT</h2>

<ul>
<li>矢吹さんの話</li>
<li>会場アンケート</li>
<li>スプレッドシートを使ったことがある人</li>
<li>SQL を使ったことがある人</li>
<li>領収書を集計するのが面倒だった話</li>
<li>バベルの塔</li>
<li>ピボットテーブル = GROUP BY を知るのに時間がかかった話</li>
<li>相手の文化を知る必要がある</li>
<li>用語集の必要性</li>
<li>抽象度の上げ下げ</li>
</ul>


<h2>ディスカッション</h2>

<ul>
<li>来年 LibreOffice 6 になる</li>
<li>デザインを一新するのでデザイナーを募集している</li>
<li><a href="https://design.blog.documentfoundation.org/2017/04/21/new-branding-libreoffice-6-0/">New branding for LibreOffice 6.0 - LibreOffice Design Team</a></li>
<li><p><a href="http://opensourcedesign.net/jobs/jobs/2017-04-20-branding-for-libreoffice-60">BRANDING FOR LIBREOFFICE 6.0</a></p></li>
<li><p><a href="https://design.blog.documentfoundation.org/2017/04/27/table-styles-survey/">Please participate in a survey about table styles - LibreOffice Design Team</a></p></li>
<li>表スタイルというのが追加された</li>
<li><p>デザインのアンケートを実施中</p></li>
<li><p><a href="http://www.clear-code.com/blog/2017/4/24.html" title="LibreOffice Calcのスプレッドシートの変更点をgit diffで見られるようにする - ククログ(2017-04-24)">LibreOffice Calcのスプレッドシートの変更点をgit diffで見られるようにする - ククログ(2017-04-24)</a></p></li>
<li><p>本?</p></li>
<li><p>HackFest</p></li>
<li><p>バグハンティング・セッション</p></li>
<li><p>源ノ明朝</p></li>
<li>IPA フォントはデザインなどが古い</li>
<li>源ノ角ゴシック 源ノ明朝 と Noto はパッケージの違い</li>
<li>CJK にも対応しているのが良い</li>
<li>デザインも今風</li>
<li><p>LibreOffice 5.2 だと縦書きが変? 5.3 だと太字しか出ない?</p></li>
<li><p>テストの話</p></li>
<li>普通のテスターが簡単に使える Selenium のような自動化がないのがつらい</li>
<li><p>xautomation ?</p></li>
<li><p>デザインチームなどの話</p></li>
<li><p>ドキュメントの翻訳の話</p></li>
<li>OmegaT は odt に直接対応している</li>
</ul>


<h2>ふりかえり</h2>

<ul>
<li>抽象度の話がよかった</li>
<li>LibreOffice を直接触る話はなかった</li>
<li>前処理は好き勝手にできるというのは良い</li>
<li>表現とデータをわけると嬉しいと思ってくれる人が増えると嬉しい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[homebrewの更新はbrew upgrade --cleanupだけでよくなっている]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-27-homebrew-upgrade-cleanup.html"/>
    <updated>2017-04-27T20:00:48+09:00</updated>
    <id>http://blog.n-z.jp/blog/homebrew-upgrade-cleanup</id>
    <content type="html"><![CDATA[<p>Homebrew のパッケージの更新に昔は <code>brew update</code>; <code>brew upgrade</code>; <code>brew cleanup</code> と 3 コマンドを使っていましたが、今は <code>brew upgrade --cleanup</code> だけでよくなっています。</p>

<!--more-->


<h2>確認バージョン</h2>

<ul>
<li>Homebrew 1.1.13</li>
</ul>


<h2><code>brew update</code></h2>

<p>Debian 系で使われている <code>apt</code> の <code>sudo apt-get update</code> に相当するパッケージ情報を更新するサブコマンドです。
基本的には <code>git</code> で更新しているだけなので、こけたら <code>git</code> コマンドを直接使ってなおす必要がありそうです。</p>

<p>今は他のサブコマンドを実行した時に情報が古ければ自動で更新されるので不要になっています。</p>

<h2><code>brew upgrade</code></h2>

<p>パッケージを更新するサブコマンドです。</p>

<p>古いバージョンも残るので、 <code>gem update</code> に近いような気がします。</p>

<h2><code>brew cleanup</code></h2>

<p>古いバージョンを消したり、ダウンロードしたファイルのキャッシュを消したりします。</p>

<p><code>brew upgrade --cleanup</code> のように <code>upgrade</code> サブコマンドに <code>--cleanup</code> オプションをつけると <code>upgrade</code> 中に削除してくれるようです。
(例えば 2 個更新があった時に、更新、削除、更新、削除になる。)</p>

<p>後から <code>brew cleanup</code> するのと違って <code>upgrade</code> 中に削除してくれるので、何が削除されたのかの確認はしにくくなったり、問題が起きた時に戻しにくくなったりという欠点はありますが、一時的に空き容量が減るのが緩やかになったり、消し忘れがなくなるなどの利点があると思います。</p>

<h2>まとめ</h2>

<p><code>brew update</code>; <code>brew upgrade</code>; <code>brew cleanup</code> と 3 コマンドを連続で使っている人は、 <code>brew upgrade --cleanup</code> だけに置き換えると便利です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cronでcertbot renewの--force-renewalを使用してはいけない]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-26-certbot-renew.html"/>
    <updated>2017-04-26T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/certbot-renew</id>
    <content type="html"><![CDATA[<p>タイトルで言いたいことはすべてですが、 <code>cron</code>で定期実行する <code>certbot renew</code> で <code>--force-renewal</code> オプションは使わない方が良いという話です。</p>

<!--more-->


<h2><code>--force-renewal</code> とは?</h2>

<p><code>certbot</code> の <code>renew</code> サブコマンドは、標準で期限切れが近い (30 日未満) の証明書だけを自動で更新してくれる便利なサブコマンドです。
期限切れが近い証明書がなければ letsencrypt のサーバーへのアクセスがなく、余計な負荷をかけないので、1日2回実行が推奨されています。</p>

<p><code>--force-renewal</code> をつけると有効期限に関係なく更新が実行されます。</p>

<h2>悪い設定例</h2>

<p>例えば <a href="http://cloud-news.sakura.ad.jp/2017/04/24/mastodon-startupscript-update/" title="スタートアップスクリプト「Mastodon」の更新のお知らせ・旧スクリプトを使用して作成されたインスタンス向けの作業のお願い | さくらのクラウドニュース">スタートアップスクリプト「Mastodon」の更新のお知らせ・旧スクリプトを使用して作成されたインスタンス向けの作業のお願い | さくらのクラウドニュース</a> に書いてある</p>

<pre><code>echo "0 5 1 * * root /usr/local/certbot/certbot-auto renew --webroot --webroot-path /home/mastodon/live/public --force-renew &amp;&amp; /bin/systemctl reload nginx postfix" &gt; /etc/cron.d/certbot-auto
</code></pre>

<p>という設定だと毎月 1 日の 5:00 に更新するという設定になっています。</p>

<h2>letsencrypt へのサーバーの負荷の問題</h2>

<h3>回数の問題</h3>

<p>letsencrypt の証明書の有効期限は 90 日なので、 <code>--force-renewal</code> がなければ 2 ヶ月ごとに letsencrypt のサーバーへのアクセスが発生するのに対して、上記の例だと毎月アクセスが発生して、 letsencrypt のサーバーへの負荷は 2 倍になります。</p>

<h3>固定時刻の問題</h3>

<p>また 5:00 固定なので、同じ設定をしているサーバーが増えれば同時にアクセスが発生するのもよくない設定です。</p>

<h2>更新失敗時の問題</h2>

<p>マシンが起動していなくて <code>cron</code> が動かなかったとか、何らかの理由で証明書の更新に失敗した場合、毎月 1 回しか実行しない場合は 2,3 回しか更新のタイミングがないので、すべて失敗して証明書の期限切れになる可能性が高いです。</p>

<p>それに対して毎日 2 回実行している場合、失敗しても少なくとも 29 日の間再実行され続けるので、少なくとも 58 回はチャンスがあります。
(更新タイミング次第で 59 回になりそうです。計算が間違ってなければ。)</p>

<h2>Debian パッケージの certbot の例</h2>

<p>Debian の certbot パッケージでは</p>

<pre><code>0 */12 * * * root test -x /usr/bin/certbot -a \! -d /run/systemd/system &amp;&amp; perl -e 'sleep int(rand(3600))' &amp;&amp; certbot -q renew
</code></pre>

<p>という設定になっていて、 (systemd 環境でなければ) perl によるランダムスリープを入れて時間がばらけるようになっています。</p>

<p>systemd 環境では以下のように <code>ExecStartPre</code> でランダムスリープするようになっています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat /lib/systemd/system/certbot.timer
</span><span class='line'>[Unit]
</span><span class='line'>Description=Run certbot twice daily
</span><span class='line'>
</span><span class='line'>[Timer]
</span><span class='line'>OnCalendar=*-*-* 00,12:00:00
</span><span class='line'>Persistent=true
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=timers.target
</span><span class='line'>%  cat /lib/systemd/system/certbot.service
</span><span class='line'>[Unit]
</span><span class='line'>Description=Certbot
</span><span class='line'>Documentation=file:///usr/share/doc/python-certbot-doc/html/index.html
</span><span class='line'>Documentation=https://letsencrypt.readthedocs.io/en/latest/
</span><span class='line'>[Service]
</span><span class='line'>Type=oneshot
</span><span class='line'>ExecStartPre=/usr/bin/perl -e 'sleep int(rand(3600))'
</span><span class='line'>ExecStart=/usr/bin/certbot -q renew
</span><span class='line'>PrivateTmp=true</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p><code>--force-renewal</code> 付きで少ない回数の <code>certbot renew</code> を実行するのは欠点しかありません。</p>

<p>公式に推奨されているように <code>certbot renew</code> を <code>--force-renewal</code> なしで複数回実行する方が良いでしょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 122 回関西 Debian 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-23-kansai-debian-meeting.html"/>
    <updated>2017-04-23T13:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://debianjp.connpass.com/event/54424/" title="第 122 回関西 Debian 勉強会">第 122 回関西 Debian 勉強会</a>に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<p>早めに出発したら時間があったので、駅前ビルの金券屋で切符を買って、少し安く移動できました。</p>

<p>しばらく前に阪急三番街の KIDDY LAND で stretch のぬいぐるみが 2,3 個あったのを見かけて、次にみたときには最後の 1 個になったいたので、買っておいたのを持って行きました。</p>

<h2>オープニング</h2>

<ul>
<li>前回の話から会場候補地の話とか</li>
<li><a href="https://wiki.debian.org/KansaiDebianMeeting/DraftMemo">https://wiki.debian.org/KansaiDebianMeeting/DraftMemo</a> に古いメモがある</li>
<li><a href="http://events.linuxfoundation.jp/events/open-source-summit-japan" title="Open Source Summit Japan 2017">Open Source Summit Japan 2017</a> というのがあるらしい</li>
<li><a href="https://lists.debian.org/debian-devel-announce/2017/04/msg00008.html" title="Status on the stretch release">Status on the stretch release</a></li>
<li><a href="https://www.debian.org/News/2017/20170417" title="Statement concerning the arrest of Dmitry Bogatov">Statement concerning the arrest of Dmitry Bogatov</a></li>
<li><a href="https://blog.torproject.org/blog/statement-regarding-dmitry-bogatov" title="Statement regarding Dmitry Bogatov | The Tor Blog">Statement regarding Dmitry Bogatov | The Tor Blog</a></li>
<li>事前課題</li>
<li>maven とか make とか</li>
</ul>


<h2>休憩</h2>

<h2>CMake でビルド</h2>

<ul>
<li>Windows 版と Linux 版の両対応が動機</li>
<li>Visual Studio や Eclipse のプロジェクト出力も可能</li>
<li><a href="https://github.com/yosukesan/kansai_debian">https://github.com/yosukesan/kansai_debian</a> に今回のサンプルを用意</li>
<li><code>distclean</code> 相当がないので build ディレクトリを作る方が良い</li>
<li><code>cd 000.hello; mkdir build; cmake ../ -DCMAKE_INSTALL_PREFIX=.; make; make install</code></li>
<li><code>CMakeCache.txt</code> が <code>configure.log</code> 相当</li>
<li><code>CMakeCache.txt</code> を編集することも可能</li>
<li><code>cmake ..</code> ではなく <code>cmake ../CMakeLists.txt</code> としてしまうと build ディレクトリではなくソースディレクトリにファイルが作られてしまうので注意</li>
<li>ライブラリをリンクする例: 失敗する例が <code>001_NG.link_library</code> で成功する例が <code>001_OK.link_library</code></li>
<li>自作ライブラリのビルドとリンク</li>
<li><code>CMakeCache.txt</code> に入る変数と入らない変数がある</li>
<li>設定するのに <code>FORCE</code> オプションが必要なものとなくても良いものがあってハマった</li>
<li>echo しても空なのに、内部的には変数がある</li>
<li>変数の上書きに癖があってハマった</li>
<li>Windows でマルチスレッドかどうか、デバッグかリリースかなどでリンクするライブラリが違うのが自動でできなかった</li>
<li>Visual Studio でもリンクするライブラリの組み合わせ問題ははまることがあるらしい</li>
<li>Dependency Walker</li>
<li>デバッグビルドの DLL が混ざっていてバグっていた話</li>
<li><a href="https://ninja-build.org/manual.html">https://ninja-build.org/manual.html</a></li>
</ul>


<h2>その後</h2>

<p>時間が余ったので、次回の予定などの話をしていました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSS Gate大阪ワークショップ2017-04-22に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-22-oss-gate-workshop.html"/>
    <updated>2017-04-22T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/oss-gate-workshop</id>
    <content type="html"><![CDATA[<p><a href="https://oss-gate.doorkeeper.jp/events/58579" title="OSS Gate大阪ワークショップ2017-04-22 - OSS Gate | Doorkeeper">OSS Gate大阪ワークショップ2017-04-22 - OSS Gate | Doorkeeper</a>にサポーター (旧称: メンター) として参加しました。</p>

<!--more-->


<h2>全体の感想</h2>

<p>最後のアンケートにも書きましたが、前回はデモである程度メモをどの程度とるのかなどの方向性が示されていたのと、やる内容がインストールから初めて、ひっかかったところのドキュメントの改善をフィードバックする、というのが多かったのに対して、今回はデモがほぼなくて、サポーター (旧称: メンター) として応募したけど、人数の都合でビギナーになった人が多かったからか、いろんなことに挑戦していて、難しい感じでした。</p>

<p>作業メモの粒度としては、<a href="https://github.com/oss-gate/workshop/issues?q=is%3Aissue+is%3Aclosed">過去のビギナーの作業ログ</a>から特にコメント数が多いものを参考にしてみると、こういう細かい思考過程までメモすると良いのか、というのが、 oss-gate に限らず普段の作業メモのとり方としても、参考になるかと思います。</p>

<h2>メモ</h2>

<p>以下、今回の雑多なメモです。</p>

<h3>フォント</h3>

<p>途中のふりかえりのときのビギナーの人がブラウザーで変わったフォントを使っていたのできいてみたところ、「スマートフォントUI」というのを使っていると教えてもらいました。</p>

<h3>Chef DK のアンインストール</h3>

<p>参考のため、自分の環境にも Chef DK を入れてみていたのですが、 <a href="https://docs.chef.io/install_dk.html">https://docs.chef.io/install_dk.html</a> にアンインストールの手順があったので、それに従ってアンインストールしました。</p>

<p>symlink は削除前に確認してみたら、たくさんありました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%  sudo rm -rf /opt/chefdk
</span><span class='line'>Password:
</span><span class='line'>%  sudo pkgutil --forget com.getchef.pkg.chefdk
</span><span class='line'>Forgot package 'com.getchef.pkg.chefdk' on '/'.
</span><span class='line'>%  find /usr/local/bin -lname '/opt/chefdk/*'
</span><span class='line'>/usr/local/bin/berks
</span><span class='line'>/usr/local/bin/chef
</span><span class='line'>/usr/local/bin/chef-apply
</span><span class='line'>/usr/local/bin/chef-client
</span><span class='line'>/usr/local/bin/chef-shell
</span><span class='line'>/usr/local/bin/chef-solo
</span><span class='line'>/usr/local/bin/chef-vault
</span><span class='line'>/usr/local/bin/cookstyle
</span><span class='line'>/usr/local/bin/dco
</span><span class='line'>/usr/local/bin/delivery
</span><span class='line'>/usr/local/bin/foodcritic
</span><span class='line'>/usr/local/bin/inspec
</span><span class='line'>/usr/local/bin/kitchen
</span><span class='line'>/usr/local/bin/knife
</span><span class='line'>/usr/local/bin/ohai
</span><span class='line'>/usr/local/bin/push-apply
</span><span class='line'>/usr/local/bin/pushy-client
</span><span class='line'>/usr/local/bin/pushy-service-manager
</span><span class='line'>/usr/local/bin/rubocop
</span><span class='line'>%  sudo find /usr/local/bin -lname '/opt/chefdk/*' -delete
</span><span class='line'>%  find /usr/bin -lname '/opt/chefdk/*'</span></code></pre></td></tr></table></div></figure>


<h3>辞書</h3>

<p>macOS の辞書ではなく、Logophile という辞書ソフトを使っているのをみました。
COBUILD のシソーラスが便利だそうです。</p>

<p>たぶん <a href="http://dicwizard.jp/logophile/" title="Logophile">Logophile</a> で、シェアウェアのようです。</p>

<h3>fish shell</h3>

<p>検索しにくい名前ですが、<a href="http://fish.rubikitch.com/" title="全訳！fishシェル普及計画【コマンドラインは怖くない】">全訳！fishシェル普及計画【コマンドラインは怖くない】</a> に翻訳されたドキュメントがあるので、使い始めやすそうです。</p>

<p>個人的には rvm を入れたら環境を壊された (<code>zsh</code> なら <code>chpwd_function</code> を使えばいいのに使っていなかったらしく <code>cd</code> のカスタマイズが壊れた) ぐらいシェルはカスタマイズをしているので、乗り換える可能性は低いですが、ちょっと試してみたところ、 <code>echo</code> のオートサジェスチョンで <code>$BASH_VERSION</code> がでてきたので、<code>.bash_history</code> をみているようです。
ちょっと試した後は、 <code>rm -rf ~/.local/share/fish</code> でクリーンな状態に戻して、また最初から試せるようにしておきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mastodonのAPIをcurlで試してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-17-mastodon-api-curl.html"/>
    <updated>2017-04-17T01:24:42+09:00</updated>
    <id>http://blog.n-z.jp/blog/mastodon-api-curl</id>
    <content type="html"><![CDATA[<p>curl で <a href="http://blog.n-z.jp/blog/2017-04-16-contribute-mastodon.html">mastodon の開発環境</a>を使って API を試してみたメモです。</p>

<p><a href="http://qiita.com/znz/items/c924cd4e9d5e50e50058">mastodonのAPIをcurlで試してみた</a>と同じ内容です。</p>

<h2>確認環境</h2>

<p><a href="http://blog.n-z.jp/blog/2017-04-16-contribute-mastodon.html">mastodon の開発環境</a>の通りですが、簡単に説明しておくと</p>

<ul>
<li><code>git clone https://github.com/tootsuite/mastodon</code></li>
<li><code>cd mastodon</code></li>
<li><code>vagrant up</code></li>
<li><code>vagrant ssh</code></li>
</ul>


<p>した後、初期アカウントのメールアドレスを修正した環境を想定しています。</p>

<h2>Create App</h2>

<p>クライアント名を決めてスコープを決めて作成します。
クライアント名は同じ名前でも作成できるようです。(Twitter は名前がかぶると作成できなかったはず。)
複数のスコープを指定する時はスペース区切りです。
リダイレクト先がなければ <code>urn:ietf:wg:oauth:2.0:oob</code> にしておけば良いようです。
ウェブサイトがあればその URL も設定しておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant@mastodon:~<span class="nv">$ CLIENT_NAME</span><span class="o">=</span><span class="s2">&quot;Test Client&quot;</span>
</span><span class='line'>vagrant@mastodon:~<span class="nv">$ </span>curl -X POST -d <span class="s2">&quot;client_name=$CLIENT_NAME&amp;redirect_uris=${REDIRECT_URIS:-urn:ietf:wg:oauth:2.0:oob}&amp;scopes=${SCOPES:-read write follow}&amp;website=$WEBSITE&quot;</span> http://localhost:3000/api/v1/apps<span class="p">;</span> <span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;id&quot;</span>:16,<span class="s2">&quot;redirect_uri&quot;</span>:<span class="s2">&quot;urn:ietf:wg:oauth:2.0:oob&quot;</span>,<span class="s2">&quot;client_id&quot;</span>:<span class="s2">&quot;ce06ac1d988d7f26f067dc7ea639e41523ec8135e48cceabb7cd0fd8c1413c65&quot;</span>,<span class="s2">&quot;client_secret&quot;</span>:<span class="s2">&quot;be04a4f2ca2cd5d9a1cc1314d03a15f811be7f64005483b003447cc3e35e7749&quot;</span><span class="o">}</span>0
</span></code></pre></td></tr></table></div></figure>


<p><code>echo</code> をつけているのは終了ステータスの確認と応答に改行がつかないことの対処です。</p>

<p>この応答のうち、<code>client_id</code> と <code>client_secret</code> が必要なので、保存しておきます。</p>

<h2>アカウントと紐付け</h2>

<p>保存しておいた <code>client_id</code> と <code>client_secret</code> と、対象のサーバーに登録しているアカウントのメールアドレスとパスワードが必要です。</p>

<p>スコープは Create App の時に <code>read</code> のみ以外を指定した場合には、ここにも指定しないと <code>read</code> 権限のみになってしまうようです。
Create App の時に指定していなかったスコープは指定できないようです。(<code>{"error":"invalid_scope","error_description":"The requested scope is invalid, unknown, or malformed."}</code> になる。)
<code>/api/v1/apps</code> は <code>scopes</code> (複数形) ですが、<code>/oauth/token</code> では <code>scope</code> (単数形) なので注意が必要そうです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant@mastodon:~<span class="nv">$ CLIENT_ID</span><span class="o">=</span>ce06ac1d988d7f26f067dc7ea639e41523ec8135e48cceabb7cd0fd8c1413c65
</span><span class='line'>vagrant@mastodon:~<span class="nv">$ CLIENT_SECRET</span><span class="o">=</span>be04a4f2ca2cd5d9a1cc1314d03a15f811be7f64005483b003447cc3e35e7749
</span><span class='line'>vagrant@mastodon:~<span class="nv">$ YOUR_EMAIL</span><span class="o">=</span>admin@mastodon.dev
</span><span class='line'>vagrant@mastodon:~<span class="nv">$ YOUR_PASSWORD</span><span class="o">=</span>mastodonadmin
</span><span class='line'>vagrant@mastodon:~<span class="nv">$ </span>curl -X POST -d <span class="s2">&quot;client_id=$CLIENT_ID&amp;client_secret=$CLIENT_SECRET&amp;grant_type=password&amp;username=$YOUR_EMAIL&amp;password=$YOUR_PASSWORD&amp;scope=${SCOPES:-read write follow}&quot;</span> -sS http://localhost:3000/oauth/token<span class="p">;</span> <span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;access_token&quot;</span>:<span class="s2">&quot;96efc1d5e78e6bd9497915cbdc9a464d584e934414d3db1e1d68b2370f8b698c&quot;</span>,<span class="s2">&quot;token_type&quot;</span>:<span class="s2">&quot;bearer&quot;</span>,<span class="s2">&quot;scope&quot;</span>:<span class="s2">&quot;read write follow&quot;</span>,<span class="s2">&quot;created_at&quot;</span>:1492358391<span class="o">}</span>0
</span></code></pre></td></tr></table></div></figure>


<h2>API 呼び出し</h2>

<p>ほとんどの API 呼び出しにはアクセストークンが必要です。
Create App や public タイムラインの取得などのように必要ないものもあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant@mastodon:~<span class="nv">$ ACCESS_TOKEN</span><span class="o">=</span>96efc1d5e78e6bd9497915cbdc9a464d584e934414d3db1e1d68b2370f8b698c
</span></code></pre></td></tr></table></div></figure>


<h2>アカウント情報の取得</h2>

<p><code>/api/v1/accounts/verify_credentials</code> でアクセストークンに紐づいているアカウントの情報を取得できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant@mastodon:~<span class="nv">$ </span>curl --header <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -sS http://localhost:3000/api/v1/accounts/verify_credentials<span class="p">;</span> <span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;id&quot;</span>:1,<span class="s2">&quot;username&quot;</span>:<span class="s2">&quot;admin&quot;</span>,<span class="s2">&quot;acct&quot;</span>:<span class="s2">&quot;admin&quot;</span>,<span class="s2">&quot;display_name&quot;</span>:<span class="s2">&quot;&quot;</span>,<span class="s2">&quot;locked&quot;</span>:false,<span class="s2">&quot;created_at&quot;</span>:<span class="s2">&quot;2017-04-14T04:04:40.299Z&quot;</span>,<span class="s2">&quot;followers_count&quot;</span>:0,<span class="s2">&quot;following_count&quot;</span>:1,<span class="s2">&quot;statuses_count&quot;</span>:26,<span class="s2">&quot;note&quot;</span>:<span class="s2">&quot;&quot;</span>,<span class="s2">&quot;url&quot;</span>:<span class="s2">&quot;http://mastodon.dev/@admin&quot;</span>,<span class="s2">&quot;avatar&quot;</span>:<span class="s2">&quot;http://localhost:3000/avatars/original/missing.png&quot;</span>,<span class="s2">&quot;avatar_static&quot;</span>:<span class="s2">&quot;http://localhost:3000/avatars/original/missing.png&quot;</span>,<span class="s2">&quot;header&quot;</span>:<span class="s2">&quot;http://localhost:3000/headers/original/missing.png&quot;</span>,<span class="s2">&quot;header_static&quot;</span>:<span class="s2">&quot;http://localhost:3000/headers/original/missing.png&quot;</span><span class="o">}</span>0
</span></code></pre></td></tr></table></div></figure>


<h2>情報更新</h2>

<p><code>/oauth/token</code> で scope を指定していなかった場合、 <code>{"error":"This action is outside the authorized scopes"}</code> になって更新できませんでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant@mastodon:~<span class="nv">$ </span>curl -X PATCH -d <span class="s2">&quot;display_name=Admin&quot;</span> --header <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -sS http://localhost:3000/api/v1/accounts/update_credentials<span class="p">;</span> <span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;id&quot;</span>:1,<span class="s2">&quot;username&quot;</span>:<span class="s2">&quot;admin&quot;</span>,<span class="s2">&quot;acct&quot;</span>:<span class="s2">&quot;admin&quot;</span>,<span class="s2">&quot;display_name&quot;</span>:<span class="s2">&quot;Admin&quot;</span>,<span class="s2">&quot;locked&quot;</span>:false,<span class="s2">&quot;created_at&quot;</span>:<span class="s2">&quot;2017-04-14T04:04:40.299Z&quot;</span>,<span class="s2">&quot;followers_count&quot;</span>:0,<span class="s2">&quot;following_count&quot;</span>:1,<span class="s2">&quot;statuses_count&quot;</span>:27,<span class="s2">&quot;note&quot;</span>:<span class="s2">&quot;&quot;</span>,<span class="s2">&quot;url&quot;</span>:<span class="s2">&quot;http://mastodon.dev/@admin&quot;</span>,<span class="s2">&quot;avatar&quot;</span>:<span class="s2">&quot;http://localhost:3000/avatars/original/missing.png&quot;</span>,<span class="s2">&quot;avatar_static&quot;</span>:<span class="s2">&quot;http://localhost:3000/avatars/original/missing.png&quot;</span>,<span class="s2">&quot;header&quot;</span>:<span class="s2">&quot;http://localhost:3000/headers/original/missing.png&quot;</span>,<span class="s2">&quot;header_static&quot;</span>:<span class="s2">&quot;http://localhost:3000/headers/original/missing.png&quot;</span><span class="o">}</span>0
</span></code></pre></td></tr></table></div></figure>


<h2>トゥート!</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant@mastodon:~<span class="nv">$ </span>curl -X POST -d <span class="s2">&quot;status=test message&quot;</span> --header <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -sS http://localhost:3000/api/v1/statuses<span class="p">;</span> <span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;id&quot;</span>:30,<span class="s2">&quot;created_at&quot;</span>:<span class="s2">&quot;2017-04-16T16:00:55.054Z&quot;</span>,<span class="s2">&quot;in_reply_to_id&quot;</span>:null,<span class="s2">&quot;in_reply_to_account_id&quot;</span>:null,<span class="s2">&quot;sensitive&quot;</span>:null,<span class="s2">&quot;spoiler_text&quot;</span>:<span class="s2">&quot;&quot;</span>,<span class="s2">&quot;visibility&quot;</span>:<span class="s2">&quot;public&quot;</span>,<span class="s2">&quot;application&quot;</span>:<span class="o">{</span><span class="s2">&quot;name&quot;</span>:<span class="s2">&quot;Test Client&quot;</span>,<span class="s2">&quot;website&quot;</span>:<span class="s2">&quot;&quot;</span><span class="o">}</span>,<span class="s2">&quot;account&quot;</span>:<span class="o">{</span><span class="s2">&quot;id&quot;</span>:1,<span class="s2">&quot;username&quot;</span>:<span class="s2">&quot;admin&quot;</span>,<span class="s2">&quot;acct&quot;</span>:<span class="s2">&quot;admin&quot;</span>,<span class="s2">&quot;display_name&quot;</span>:<span class="s2">&quot;&quot;</span>,<span class="s2">&quot;locked&quot;</span>:false,<span class="s2">&quot;created_at&quot;</span>:<span class="s2">&quot;2017-04-14T04:04:40.299Z&quot;</span>,<span class="s2">&quot;followers_count&quot;</span>:0,<span class="s2">&quot;following_count&quot;</span>:1,<span class="s2">&quot;statuses_count&quot;</span>:27,<span class="s2">&quot;note&quot;</span>:<span class="s2">&quot;&quot;</span>,<span class="s2">&quot;url&quot;</span>:<span class="s2">&quot;http://mastodon.dev/@admin&quot;</span>,<span class="s2">&quot;avatar&quot;</span>:<span class="s2">&quot;http://localhost:3000/avatars/original/missing.png&quot;</span>,<span class="s2">&quot;avatar_static&quot;</span>:<span class="s2">&quot;http://localhost:3000/avatars/original/missing.png&quot;</span>,<span class="s2">&quot;header&quot;</span>:<span class="s2">&quot;http://localhost:3000/headers/original/missing.png&quot;</span>,<span class="s2">&quot;header_static&quot;</span>:<span class="s2">&quot;http://localhost:3000/headers/original/missing.png&quot;</span><span class="o">}</span>,<span class="s2">&quot;media_attachments&quot;</span>:<span class="o">[]</span>,<span class="s2">&quot;mentions&quot;</span>:<span class="o">[]</span>,<span class="s2">&quot;tags&quot;</span>:<span class="o">[]</span>,<span class="s2">&quot;uri&quot;</span>:<span class="s2">&quot;tag:mastodon.dev,2017-04-16:objectId=30:objectType=Status&quot;</span>,<span class="s2">&quot;content&quot;</span>:<span class="s2">&quot;&lt;p&gt;test message&lt;/p&gt;&quot;</span>,<span class="s2">&quot;url&quot;</span>:<span class="s2">&quot;http://mastodon.dev/@admin/30&quot;</span>,<span class="s2">&quot;reblogs_count&quot;</span>:0,<span class="s2">&quot;favourites_count&quot;</span>:0,<span class="s2">&quot;reblog&quot;</span>:null,<span class="s2">&quot;favourited&quot;</span>:false,<span class="s2">&quot;reblogged&quot;</span>:false<span class="o">}</span>0
</span></code></pre></td></tr></table></div></figure>


<h2>タイムライン取得</h2>

<p><code>curl -v --header "Authorization: Bearer $ACCESS_TOKEN" -sS http://localhost:3000/api/v1/timelines/home</code> などでタイムラインを取得できます。(<code>timelines</code> は複数形)</p>

<p>Link ヘッダーに <code>Link: &lt;http://localhost:3000/api/v1/timelines/home?max_id=7&gt;; rel="next", &lt;http://localhost:3000/api/v1/timelines/home?since_id=30&gt;; rel="prev"</code> のように書いてあって、 <code>next</code> で過去に辿っていけて、 <code>prev</code> で新しいトゥートを取得できるようです。
ただし <code>prev</code> は (ローカルの開発環境ではなく普通の公開サーバーで) 時間をあけて試すと間が抜けていたので、全部取得する用途には向いていないようです。
<code>next</code> の方は確認していませんが、過去に遡るという挙動を考えると、間が抜けることはないのではないかと思っています。</p>

<h2>エラーの例</h2>

<p>パラメーターなどが間違っている時は JSON でエラーが返ってくるのですが、URL を間違えた時は空白のレスポンスが返ってくるので、知らないと悩みそうです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant@mastodon:~<span class="nv">$ </span>curl -X POST -d <span class="s2">&quot;client_name=$CLIENT_NAME&amp;redirect_uris=${REDIRECT_URIS:-urn:ietf:wg:oauth:2.0:oob}&amp;scopes=${SCOPES:-read write follow}&amp;website=$WEBSITE&quot;</span> http://localhost:3000/api/v1/apps<span class="p">;</span> <span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;error&quot;</span>:<span class="s2">&quot;Validation failed: Name can&#39;t be blank&quot;</span><span class="o">}</span>0
</span><span class='line'>vagrant@mastodon:~<span class="nv">$ </span>curl --header <span class="s2">&quot;Authorization: Bearer ACCESS_TOKEN_HERE&quot;</span> -sS http://localhost:3000/api/v1/accounts/verify_credentials<span class="p">;</span> <span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;error&quot;</span>:<span class="s2">&quot;The access token is invalid&quot;</span><span class="o">}</span>0
</span><span class='line'>vagrant@mastodon:~<span class="nv">$ </span>curl --header <span class="s2">&quot;Authorization: Bearer $ACCESS_TOKEN&quot;</span> -sS http://localhost:3000/api/v1/timeline/home<span class="p">;</span> <span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'>0
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="https://github.com/tootsuite/documentation/blob/eb32fc9738de44878697754431565260be89c17f/Using-the-API/API.md">参照時点の API のドキュメント</a> (<a href="https://github.com/tootsuite/documentation/blob/master/Using-the-API/API.md">最新</a>)</li>
<li><a href="https://github.com/tootsuite/documentation/blob/eb32fc9738de44878697754431565260be89c17f/Using-the-API/Testing-with-cURL.md">参照時点の Testing the API with cURL</a> (<a href="https://github.com/tootsuite/documentation/blob/master/Using-the-API/Testing-with-cURL.md">最新</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mastodonにpull requestを送った話と開発環境構築の話]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-16-contribute-mastodon.html"/>
    <updated>2017-04-16T22:43:41+09:00</updated>
    <id>http://blog.n-z.jp/blog/contribute-mastodon</id>
    <content type="html"><![CDATA[<p>最近流行っている mastodon に pull request を送ったので、
その環境構築などの話です。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>macOS Sierra 10.12.4</li>
<li>VirtualBox 5.1.18</li>
<li>Vagrant 1.9.3</li>
<li>vagrant-hostsupdater 1.0.2</li>
<li><a href="https://github.com/tootsuite/mastodon">https://github.com/tootsuite/mastodon</a> の master</li>
</ul>


<h2>起動まで</h2>

<p><a href="https://github.com/tootsuite/mastodon#development-with-vagrant">Development with Vagrant</a> からリンクされている
<a href="https://github.com/tootsuite/documentation/blob/master/Running-Mastodon/Vagrant-guide.md">Vagrant guide</a> を参考にして、
環境を構築しました。</p>

<p>初回起動 (<code>vagrant up</code>) 時は <code>vagrant-hostsupdater</code> での <code>sudo</code> に続けて実行されるので気づかなかったのですが、
2 回目に <code>vagrant up</code> した時に <code>/etc/exports</code> の変更のためにも <code>sudo</code> が実行されているのに気づきました。</p>

<pre><code>git clone https://github.com/tootsuite/mastodon
cd mastodon
vagrant plugin install vagrant-hostsupdater
vagrant up
</code></pre>

<h2>初期アカウント設定</h2>

<p>初期アカウントはメールアドレスが <code>admin@mastodon.dev</code> でパスワードが <code>mastodonadmin</code> と書いてあるのですが、入れなかったので、</p>

<pre><code>cd /vagrant
rails c
User.all
</code></pre>

<p>で確認してみると、メールアドレスが <code>admin@localhost:3000</code> になっていました。
そこで、そのまま <code>rails c</code> の中で、</p>

<pre><code>u=User.first
u.email="admin@mastodon.dev"
u.save!
</code></pre>

<p>で修正しました。</p>

<p>こんな感じで何か引っかかった時は rails の知識がないと辛そうです。</p>

<h2>いろいろ動作確認</h2>

<p>80 番ポートから 3000 番ポートへのポートフォワーディングは
Vagrantfile で設定しているので、
ホスト側から <code>http://mastodon.dev</code> は見えるのですが、
<code>vagrant ssh</code> で入ったゲスト側では <code>curl http://mastodon.dev</code> ではなく
<code>curl http://localhost:3000</code> や <code>curl http://mastodon.dev:3000</code> などのように
ポート番号をつける必要がありました。</p>

<h2>ストリーミング API</h2>

<p>Vagrantfile を見ればわかるのですが、
rails server が <code>rails s -d -b 0.0.0.0</code> で動いているところにポートフォワーディングしているだけなので、
streaming API は使えませんでした。</p>

<p>最初、実装されていないのかと勘違いしてしまったのですが、
実装されていると聞いたので、よくみてみると
<code>streaming/index.js</code> で rails 外のところに実装されていました。</p>

<p><code>npm run start</code> で起動すればゲストの中なら 4000 番ポートで使えるようになったので、
ストリーミング API を使いたい場合は一工夫必要そうです。</p>

<h2>メール</h2>

<p>メールは <code>http://mastodon.dev/letter_opener</code> に溜まっていました。
mailcatcher と違って、再起動しても残っていました。</p>

<h2>環境の更新</h2>

<p>最新の状態にするために master の変更に追随する必要がありますが、
<code>vagrant ssh</code> で入った中で <code>cd /vagrant</code> した状態で <code>git pull</code> するとパーミッションの関係でうまくいかないようだったので、
ホスト側で <code>git pull</code> する方が安全なようです。</p>

<p><code>yarn install</code> などでファイルが書き換わっていると、その変更を元に戻しておく必要もあるかもしれません。</p>

<p><code>git pull</code> した後は、Gemfile なども書き換わっていた時は</p>

<pre><code>vagrant ssh
cd /vagrant
bundle install
yarn install
rails db:migrate
rails assets:precompile
pkill -f puma
export $(cat ".env.vagrant" | xargs)
rails s -d -b 0.0.0.0
</code></pre>

<p>のような感じで <code>bundle install</code> と起動している rails server の停止と Vagrantfile の <code>$start</code> の処理をすると良さそうです。</p>

<p>パーミッションの問題で <code>yarn install</code> がうまくいかなかった時は <code>node_modules</code> を削除すると良さそうです。
ゲスト側だとうまくいかなかったら、ホスト側で消すなどの工夫が必要そうです。</p>

<h2>pull requests</h2>

<p><code>vagrant up</code> する前に Vagrantfile を確認していたところ、
<code>PATH</code> にカレントディレクトリを追加していたので、
<a href="https://github.com/tootsuite/mastodon/pull/1779">Remove current directory from PATH</a>
で削除する pull request を送りました。</p>

<p>そして、管理画面をみていたところ、title が並んでいてなんだこれ、と思ったので、
<a href="https://github.com/tootsuite/mastodon/pull/1785">翻訳の更新の pull request</a>
を送りました。</p>

<p><code>I18n.t</code> の最後の単語は翻訳がないときのデフォルトとしても使われるので、
そのことも考慮した単語を選んだ方が良さそうに思いましたが、
yaml ファイルをみていると title にしたい気持ちもわからなくはなかったので、
悩ましいところです。</p>

<h2>翻訳もれ?</h2>

<p>テスト環境なので短いパスワードでもいいかと思って、テストアカウントを登録する時に短いパスワードを入れてみたところ、
<code>translation missing: ja.activerecord.errors.models.user.attributes.password.too_short</code>
と出てきて調べてみると <code>config/locales/doorkeeper.fr.yml</code> にだけ <code>too_short</code> の翻訳があって何かおかしいと思って、
よく調べてみると、
rails-i18n gem に翻訳が入っている、 rails デフォルトのエラーメッセージだとわかったので、
<a href="https://github.com/tootsuite/mastodon/issues/1790">rails-i18n gem の追加リクエスト</a> を出しました。</p>

<h2>i18n-tasks</h2>

<p>前回の翻訳の更新は目視で比較して追加したのですが、
rails-i18n gem について調べているときに
i18n-tasks gem というのが入っていると気づいたので、
次はそれを使ってみました。</p>

<p><code>i18n-tasks health</code> でチェックできるのですが、デフォルトだと全言語が対象で、出過ぎなので、
<code>i18n-tasks health -l ja</code> で日本語だけに絞って表示しました。</p>

<p>そして <code>i18n-tasks add-missing -l ja</code> で <code>config/locales/ja.yml</code> に英語のまま追加され、
<code>git diff</code> で何が追加されたか確認して翻訳していきました。</p>

<p><code>i18n-tasks find '*.reset_password'</code> や <code>i18n-tasks find admin.accounts.reset_password</code> のようにして、どこで使われているのか確認して、
実際に表示させて確認しつつ翻訳しました。</p>

<p>affected_accounts は one と other で<a href="https://railsguides.jp/i18n.html#%E8%A4%87%E6%95%B0%E5%BD%A2%E5%8C%96">複数形化</a>していたのですが、
日本語にすると同じだと思ったので、
一段階浅くして共通の翻訳を使うように変更しました。</p>

<p><code>i1n-tasks add-missing -l ja</code> をした時に引用符がちょっとへんこうされてしまったのですが、
それもそのまま変更点として含めて、
<a href="https://github.com/tootsuite/mastodon/pull/1923">Add missing Japanese translations</a>
として pull request を送りました。</p>

<p><code>i18n-tasks unused -l ja</code> は本当に消して良いかどうかが不安だったので、
手をつけていません。</p>

<h2>まとめ</h2>

<p>vagrant で簡単に mastodon の開発環境を構築できました。
ただしストリーミング API はそのままだと対応していないので注意が必要そうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DNS CAA を設定した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-02-dns-caa.html"/>
    <updated>2017-04-02T15:07:30+09:00</updated>
    <id>http://blog.n-z.jp/blog/dns-caa</id>
    <content type="html"><![CDATA[<p>以前から存在は知っていただけで、利点は少ないと思って設定していなかった <a href="https://tools.ietf.org/html/rfc6844">DNS CAA</a> ですが、
<a href="https://it.srad.jp/story/17/03/17/0644247/">スラドのDNSのCAAリソース・レコード、使っていますか?</a> で
2017年9月8日以降確認が必須化される (CAA レコードの設定は必須ではない) ということを知って、
気になっていたのでいくつかのドメインで設定しました。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>DNS サーバー : bind 9.9.5</li>
</ul>


<p>CAA リソースレコードを設定するのは BIND や NSD ならどのバージョンでも良くて、
PowerDNS なら 4 以上、 Knot DNS なら 2.2.0 以上が対応しているようです。</p>

<p>不自由な DNS サーバーを使っている場合、
少なくとも Google Cloud DNS と DNSimple は対応しているようです。
他のサービスは確認できた範囲では対応していませんでした。</p>

<h2>影響範囲</h2>

<p>基本的には CA が証明書を発行するときにチェックするだけなので、
DNS の TTL の期間は CA を乗り換えられなくなる、というだけのはずです。</p>

<p>変えたくなった時も、
DNSSEC のロールオーバーのような面倒な切り替え作業も必要なくて、
レコードを変更するだけですむはずです。</p>

<p>DANE のように DNSSEC が必須ということもないので、導入も簡単です。</p>

<p>ちょっと調べただけだとわかりにくかったのですが、
<code>example.com</code> ドメインに CAA レコードを設定するだけで <code>www.example.com</code> などのサブドメインに対して有効になります。</p>

<h2>DNS レコード設定</h2>

<p><a href="https://sslmate.com/labs/caa/">CAA Record Generator</a> で雛形を作成します。</p>

<p>使い回したかったので <code>Domain name:</code> に <code>@</code> と入れたところ、設定例には <code>@.</code> で出てきてしまうので、あとで <code>@</code> だけに置き換えました。</p>

<p>最近は Let&rsquo;s Encrypt だけ使っていて、Let&rsquo;s Encrypt は Wildcard に対応していないので、
Non-Wildcard の方だけにチェックを入れました。</p>

<p>Send incident reports to (email or URL) は optional なので入れなくても良いのですが、
http サーバーを用意するのは大変そうで、メールなら簡単に設定できるので、
メインの公開しているアドレスを設定しました。
以下の例では <code>foo@example.com</code> に置き換えています。
RFC などを確認すればわかるのですが、入力欄のラベルでは明記していないので間違えそうになりますが、
メールアドレスを設定するときは <code>mailto:</code> をつけて <code>mailto:foo@example.com</code> のように URL にする必要があります。</p>

<p>すると以下のようになりました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Standard BIND Zone File
</span><span class='line'>For BIND ≥9.9.6, PowerDNS ≥4.0.0, NSD ≥4.0.1, Knot DNS ≥2.2.0
</span><span class='line'>
</span><span class='line'>@.    IN  CAA 0 issue "letsencrypt.org"
</span><span class='line'>@.    IN  CAA 0 issuewild ";"
</span><span class='line'>@.    IN  CAA 0 iodef "mailto:foo@example.com"
</span><span class='line'>Legacy Zone File (RFC 3597 Syntax)
</span><span class='line'>For BIND &lt;9.9.6, NSD &lt;4.0.1
</span><span class='line'>
</span><span class='line'>@.    IN  TYPE257 \# 22 000569737375656C657473656E63727970742E6F7267
</span><span class='line'>@.    IN  TYPE257 \# 12 0009697373756577696C643B
</span><span class='line'>@.    IN  TYPE257 \# 29 0005696F6465666D61696C746F3A666F6F406578616D706C652E636F6D
</span><span class='line'>Generic
</span><span class='line'>For Google Cloud DNS, DNSimple
</span><span class='line'>
</span><span class='line'>0 issue "letsencrypt.org"
</span><span class='line'>0 issuewild ";"
</span><span class='line'>0 iodef "mailto:foo@example.com"</span></code></pre></td></tr></table></div></figure>


<p>使っている DNS サーバーは 9.9.5 で Legacy Zone File (RFC 3597 Syntax) の書き方の方を使う必要があったので、
Standard BIND Zone File の内容をコメントとして残しておいて、
以下のように設定しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; DNS CAA
</span><span class='line'>;@      IN      CAA     0 issue "letsencrypt.org"
</span><span class='line'>;@      IN      CAA     0 issuewild ";"
</span><span class='line'>;@      IN      CAA     0 iodef "mailto:foo@example.com"
</span><span class='line'>@       IN      TYPE257 \# 22 000569737375656C657473656E63727970742E6F7267
</span><span class='line'>@       IN      TYPE257 \# 12 0009697373756577696C643B
</span><span class='line'>@       IN      TYPE257 \# 29 0005696F6465666D61696C746F3A666F6F406578616D706C652E636F6D</span></code></pre></td></tr></table></div></figure>


<h2>SSL Server Test</h2>

<p><a href="https://www.ssllabs.com/ssltest/analyze.html">SSL Server Test</a> で確認すると
DNS CAA が No から Yes になって、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>issuewild: ;
</span><span class='line'>iodef: mailto:foo@example.com
</span><span class='line'>issue: letsencrypt.org</span></code></pre></td></tr></table></div></figure>


<p>と出ていました。</p>

<h2>失敗テスト</h2>

<p>https をまだ使っていないドメインも持っていたので、すべて拒否する設定をして、
ちゃんと失敗するかどうかを試してみました。</p>

<p>zone ファイルには以下の設定を追加しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; DNS CAA
</span><span class='line'>;@      IN      CAA     0 issue ";"
</span><span class='line'>;@      IN      CAA     0 iodef "mailto:foo@example.com"
</span><span class='line'>@       IN      TYPE257 \# 8 000569737375653B
</span><span class='line'>@       IN      TYPE257 \# 29 0005696F6465666D61696C746F3A666F6F406578616D706C652E636F6D</span></code></pre></td></tr></table></div></figure>


<p>certbot では以下のようになって、ちゃんと CAA レコードによる失敗になりました。
Let&rsquo;s Encrypt の CA のソースの
<a href="https://github.com/letsencrypt/boulder/blob/8adf9d41cf0ddc141693d51f8ea01ac29d97aec0/va/va.go#L498-L515">validateChallengeAndCAA</a>
をみると CAA のチェック結果よりもチャレンジの失敗を優先しているようで、
チャレンジは成功する状態で試さないと CAA のエラーは確認できませんでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% sudo certbot certonly --webroot -w /srv/www/xxxxxxxx.example.net/htdocs -d xxxxxxxx.example.net
</span><span class='line'>                       ┌───────────────────────────────────────────────                                                                        │ Saving debug log to /var/log/letsencrypt/letsencrypt.log             │
</span><span class='line'>                       │ Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org      │
</span><span class='line'>                       │ Obtaining a new certificate                                          │
</span><span class='line'>                       │ Performing the following challenges:                                 │
</span><span class='line'>                       │ http-01 challenge for xxxxxxxx.example.net                           │
</span><span class='line'>                       │ Using the webroot path /srv/www/xxxxxxxx.example.net/htdocs for all  │
</span><span class='line'>                       │ unmatched domains.                                                   │
</span><span class='line'>                       │ Waiting for verification...                                          │
</span><span class='line'>                       │ Cleaning up challenges                                               │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       │                                                                      │
</span><span class='line'>                       └───────────────────────────────────────────────
</span><span class='line'>Failed authorization procedure. xxxxxxxx.example.net (http-01): urn:acme:error:connection :: The server could not connec
</span><span class='line'>t to the client to verify the domain :: CAA record for xxxxxxxx.example.net prevents issuance
</span><span class='line'>
</span><span class='line'>IMPORTANT NOTES:
</span><span class='line'> - The following errors were reported by the server:
</span><span class='line'>
</span><span class='line'>   Domain: xxxxxxxx.example.net
</span><span class='line'>   Type:   connection
</span><span class='line'>   Detail: CAA record for xxxxxxxx.example.net prevents issuance
</span><span class='line'>
</span><span class='line'>   To fix these errors, please make sure that your domain name was
</span><span class='line'>   entered correctly and the DNS A record(s) for that domain
</span><span class='line'>   contain(s) the right IP address. Additionally, please check that
</span><span class='line'>   your computer has a publicly routable IP address and that no
</span><span class='line'>   firewalls are preventing the server from communicating with the
</span><span class='line'>   client. If you're using the webroot plugin, you should also verify
</span><span class='line'>   that you are serving files from the webroot path you provided.</span></code></pre></td></tr></table></div></figure>


<p>メールは届かなかったので、もうちょっと調べてみると、
letsencrypt/boulder のソースを見ても iodef に対して何か送信しているようなコードはなく、
<a href="https://forums.he.net/index.php?topic=3550.0">https://forums.he.net/index.php?topic=3550.0</a> に「currently optional/not yet supported by LE」という書き込みもあったので、
現状の Let&rsquo;s Encrypt では iodef には対応してなさそうです。</p>

<h2>まとめ</h2>

<p>現状ではすべての CA が対応しているわけではないので、利点は少ないかもしれませんが、
意図していない CA から証明書が発行される可能性が減るので、ちょっと安全になったと思いました。
(DNSSEC も設定すれば、より安全なのですが、利点よりも運用の手間の方がかかると思って導入していません。)</p>

<p>iodef 対応などはまだまだ不十分のようですが、
ちゃんと通知が来るようになれば (ほぼないと思いますが) 攻撃が検知できて面白そうです。</p>

<p>それから、新しいリソースレコードということで、既存の TXT レコードを流用している SPF と違って、
不自由な DNS サービスを使っていると設定という問題もあるので、ドメインによっては導入が難しそうです。
(SPF といえば RFC7208 で SPF リソースレコードタイプはいらなくなっているようです。
<code>named-checkconf -z</code> で <code>found SPF/TXT record but no SPF/SPF record found, add matching type SPF record</code> と出て来るので気にはなってしまうのですが。)</p>

<h2>参考サイト</h2>

<ul>
<li><a href="https://rms-digicert.ne.jp/howto/basis/caa.html">DNS CAA とは：SSL | DigiCert</a></li>
<li><a href="https://jp.globalsign.com/blog/2013/caa.html">DNS Certification Authority Authorization (CAA) | GMOグローバルサインブログ</a></li>
<li><a href="https://http2.try-and-test.net/dns_caa.html">DNSサーバのCAA設定 - Apache 2.4系でHTTP/2対応サーバを構築してみるテスト。</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[elpaのpinentry.elを試してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2017-03-25-elpa-pinentry.html"/>
    <updated>2017-03-25T12:57:57+09:00</updated>
    <id>http://blog.n-z.jp/blog/elpa-pinentry</id>
    <content type="html"><![CDATA[<p>Emacs の easypg と gnupg 2 で <code>Opening input file: Decryption failed,</code> になることの対処として、
<a href="https://elpa.gnu.org/packages/pinentry.html">ELPA の pinentry.el</a> を試してみました。</p>

<!--more-->


<h2>動作確認環境</h2>

<p>デフォルトの gpg コマンドが gnupg 2 になっている Debian 系の環境で安定版がリリースされているものということで、
yakkety を使いました。</p>

<ul>
<li>Ubuntu 16.10 (yakkety)</li>
<li>gnupg 2.1.15-1ubuntu6</li>
<li>pinentry-curses 0.9.7-5 (をリビルドしたもの)</li>
<li>emacs24 24.5+1-6ubuntu3</li>
<li>pinentry-0.1.el, 2015-Jun-12, 15.8kB</li>
</ul>


<h2>結果</h2>

<p>先に結果を書いておくと、
そのままだと動きませんでした。</p>

<p><code>pinentry</code> を <code>--disable-pinentry-emacs --disable-inside-emacs</code> なしでリビルドして試すとうまくいきました。</p>

<h2>設定反映</h2>

<p>パッケージを入れ替えたり、
<code>~/.gnupg/gpg-agent.conf</code> を書き換えた後は、
<code>gpg-connect-agent killagent /bye</code> で <code>gpg-agent</code> を終了させました。
<code>pkill gpg-agent</code> でも同じようですが、
<code>gpg-connect-agent</code> の方が正式な手順のようです。
<code>gpgconf --kill gpg-agent</code> でも終了できるようです。</p>

<h2>オリジナルパッケージでの挙動</h2>

<p><code>~/.gnupg/gpg-agent.conf</code> に <code>allow-emacs-pinentry</code> を追加すると Emacs の中どころか、
コマンドライン直接でも使えなくなりました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat ~/.gnupg/gpg-agent.conf
</span><span class='line'>allow-emacs-pinentry
</span><span class='line'>log-file /tmp/gpg-agent.log</span></code></pre></td></tr></table></div></figure>


<p>のように <code>log-file</code> も指定してみると <code>gpg -c hoge</code> で暗号化したファイルを復号しようとしたときは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% gpg hoge.gpg
</span><span class='line'>gpg: AES暗号化済みデータ
</span><span class='line'>gpg: エージェントに問題: サポートされていません
</span><span class='line'>gpg: 1 個のパスフレーズで暗号化
</span><span class='line'>gpg: 復号に失敗しました: 秘密鍵がありません</span></code></pre></td></tr></table></div></figure>


<p>となって、ログには</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2017-03-25 13:XX:XX gpg-agent[XXXXX] gpg-agent (GnuPG) 2.1.15 started
</span><span class='line'>2017-03-25 13:XX:XX gpg-agent[XXXXX] command 'GET_PASSPHRASE' failed: サポートされていません &lt;Pinentry&gt;</span></code></pre></td></tr></table></div></figure>


<p>と出ていました。</p>

<p>公開鍵で暗号化したファイルを復号しようとしたときには</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% gpg fuga.gpg
</span><span class='line'>gpg: 2048-ビットRSA鍵, ID XXXXXXXXXXXXXXXX, 日付2017-03-24に暗号化されました
</span><span class='line'>      "test@example.com"
</span><span class='line'>gpg: 公開鍵の復号に失敗しました: サポートされていません
</span><span class='line'>gpg: 復号に失敗しました: 秘密鍵がありません</span></code></pre></td></tr></table></div></figure>


<p>となって、ログには</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2017-03-25 13:XX:XX gpg-agent[XXXXX] gpg-agent (GnuPG) 2.1.15 started
</span><span class='line'>2017-03-25 13:XX:XX gpg-agent[XXXXX] failed to unprotect the secret key: サポートされていません
</span><span class='line'>2017-03-25 13:XX:XX gpg-agent[XXXXX] failed to read the secret key
</span><span class='line'>2017-03-25 13:XX:XX gpg-agent[XXXXX] command 'PKDECRYPT' failed: サポートされていません &lt;Pinentry&gt;</span></code></pre></td></tr></table></div></figure>


<p>と出ていました。</p>

<h2>パッケージのリビルド</h2>

<p>変更点としては <code>debian/rules</code> の <code>--disable-pinentry-emacs --disable-inside-emacs</code> を外して <code>pinentry-curses</code> を入れ替えただけですが、
全体の手順もメモしておきます。</p>

<ul>
<li><code>apt-get source pinentry-curses</code></li>
<li><code>sudo apt-get build-dep pinentry</code></li>
<li><code>sudo apt-get install devscripts</code></li>
<li><code>cd pinentry-0.9.7</code></li>
<li><code>vi debian/rules</code> で <code>SHARED_CONFIGS = --disable-rpath --without-libcap --disable-pinentry-emacs --disable-inside-emacs</code> を <code>SHARED_CONFIGS = --disable-rpath --without-libcap</code> に変更</li>
<li><code>debuild -uc -us -rfakeroot</code></li>
<li><code>cd ..</code></li>
<li><code>sudo dpkg -i pinentry-curses_0.9.7-5_amd64.deb</code></li>
</ul>


<h2>Emacs の設定</h2>

<p><code>M-x package-install RET pinentry RET</code> などで <code>pinentry.el</code> をインストールしておきます。</p>

<p><a href="https://elpa.gnu.org/packages/pinentry.html">GNU ELPA - pinentry</a> の説明にはありませんが、
<code>INSIDE_EMACS</code> 環境変数も設定しないと <code>pinentry-curses</code> に Emacs を開いている端末を乗っ取られて操作できなくなってしまいました。
(<code>pkill pinentry</code> で復帰できました。 <code>gpg-agent</code> も終了させたり <code>C-l</code> で再描画も必要かもしれません。)</p>

<p><code>INSIDE_EMACS</code> 環境変数は <code>M-x shell</code> では <code>Emacsのバージョン,comint</code> に自動で設定されるようなので、
<code>pinentry.el</code> はそういう環境での使用を前提として作られたのかもしれません。</p>

<p><code>(package-initialize)</code> は <code>(pinentry-start)</code> を呼ぶのに必要だったので追加しています。
起動後に <code>M-x pinentry-start</code> する時には <code>M-x package-initialize</code> は必要なかったので、
初期化の順番の問題なのだと思います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat ~/.emacs.d/init.el
</span><span class='line'>(setenv "INSIDE_EMACS" "t")
</span><span class='line'>(package-initialize)
</span><span class='line'>(pinentry-start)</span></code></pre></td></tr></table></div></figure>


<h2>pinentry.el の動作</h2>

<p>共通鍵で暗号化した <code>hoge.gpg</code> を開こうとするとミニバッファで</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>パスフレーズを入力:</span></code></pre></td></tr></table></div></figure>


<p>と聞いてきて、間違ったパスフレーズを入力すると <code>Opening input file: Decryption failed,</code> になりました。</p>

<p>正しいパスフレーズを入力すると開けました。
編集して保存は新しいパスフレーズをきいてきました。
保存した時のパスフレーズがキャッシュされているらしく、
<code>C-x C-v</code> (<code>find-alternate-file</code>) での開き直しはパスフレーズ入力なしでできました。</p>

<p>公開鍵で暗号化した <code>fuga.gpg</code> を開こうとするとミニバッファで</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>OpenPGPの秘密鍵のロックを解除するためにパスフレーズを入力してください:
</span><span class='line'>"test@example.com"
</span><span class='line'>2048ビットRSA鍵, ID XXXXXXXXXXXXXXXX,
</span><span class='line'>作成日付 2017-03-24 (主鍵ID YYYYYYYYYYYYYYYY).:</span></code></pre></td></tr></table></div></figure>


<p>のようにきいてきました。</p>

<p>何も入力せずに <code>RET</code> を押すと <code>Opening input file: Decryption failed,</code> になりました。
パスフレーズを 3 回間違えても <code>Opening input file: Decryption failed,</code> になりました。</p>

<p>正しいパスフレーズを入力すると開けました。
編集して保存や <code>C-x C-v</code> (<code>find-alternate-file</code>) での開き直しもパスフレーズ入力なしでできました。</p>

<h2>パスフレーズの入力漏れに注意</h2>

<p>オリジナルの <code>pinentry-curses</code> でも発生した問題です。</p>

<p>パスフレーズを入力せずに <code>RET</code> を押してしまうと <code>Opening input file: Decryption failed,</code> になった後、
再度開こうとしてもパスフレーズをきいてこなくて、
すぐに <code>Opening input file: Decryption failed,</code> になるようになってしまいました。
間違ったパスフレーズの場合は再度きいてくるので、
普通はそのまま <code>RET</code> は避けるようにして、
やってしまったら <code>gpg-connect-agent killagent /bye</code> などで <code>gpg-agent</code> を再起動するのが良さそうです。</p>

<p><code>gpg hoge.gpg</code> で直接空欄で OK を押してしまったときも再度きいてこなくなってすぐに</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% gpg hoge.gpg
</span><span class='line'>gpg: AES暗号化済みデータ
</span><span class='line'>gpg: gcry_kdf_derive failed: 無効なデータです
</span><span class='line'>gpg: 1 個のパスフレーズで暗号化
</span><span class='line'>gpg: 復号に失敗しました: 秘密鍵がありません</span></code></pre></td></tr></table></div></figure>


<p>になるようになってしまったので、
<code>pinentry.el</code> に限らず注意した方が良さそうです。</p>

<h2>Debian パッケージで disable されている理由</h2>

<p>debian/changelog には</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pinentry (0.9.5-2) unstable; urgency=medium
</span><span class='line'>
</span><span class='line'>  * disable emacs and emacs-fallback until we get a better description of
</span><span class='line'>    them in the upstream documentation</span></code></pre></td></tr></table></div></figure>


<p>と書いてあって、
意図的に無効にされているようです。</p>

<p>経緯としては
<a href="https://bugs.gnupg.org/gnupg/issue2034">https://bugs.gnupg.org/gnupg/issue2034</a>
や
<a href="https://bugs.debian.org/854797">https://bugs.debian.org/854797</a>
をみるのが良さそうです。</p>

<p>upstream のドキュメント不足ということで、
ちゃんとドキュメントがあれば再度有効にしてもらえそうですが、
英語ドキュメントが書ける人じゃないと根本的な解決は難しそうです。</p>

<h2>まとめ</h2>

<p>現状の Debian や Ubuntu では <code>pinentry.el</code> をそのまま使うことは難しそうです。</p>

<p>この記事に書いたように自前でリビルドしてセキュリティアップデートなどがあれば頑張ってリビルドし直すようにするか、
<a href="http://blog.n-z.jp/blog/2017-03-23-pinentry-emacs.html">pinentry-emacsを使ってみた</a>記事に書いたように、
セキュリティや Emacs の外での使い勝手などを犠牲にして <code>pinentry-emacs</code> を使うか、
ということになりそうです。</p>

<p>現状で一番良い方法は Emacs のミニバッファでの入力は諦めて、
GUI のダイアログが出てくる <code>pinentry</code> を使うことのようなので、
<code>ssh</code> で入った先の <code>emacs</code> で完結しないといけないなどの制限がなければ、
手元の Emacs と GUI の <code>pinentry</code> を組み合わせて、
リモートのファイルは TRAMP 経由で開く、
というのが良いのかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pinentry-emacsを使ってみた]]></title>
    <link href="http://blog.n-z.jp/blog/2017-03-23-pinentry-emacs.html"/>
    <updated>2017-03-23T20:30:13+09:00</updated>
    <id>http://blog.n-z.jp/blog/pinentry-emacs</id>
    <content type="html"><![CDATA[<p><code>gpg-agent</code> で <code>--allow-emacs-pinentry</code> が使えない gnupg2 の環境で、
<a href="https://github.com/ecraven/pinentry-emacs">https://github.com/ecraven/pinentry-emacs</a> を使ってみました。</p>

<!--more-->


<h2>動作確認環境</h2>

<ul>
<li>macOS Sierra 10.12.3</li>
<li>GNU Emacs 25.1.1</li>
<li>gnupg2 2.0.30_3 (Homebrew で入れたもの)</li>
</ul>


<h2>注意事項</h2>

<p><a href="https://github.com/ecraven/pinentry-emacs/blob/7c384a65eaaa37d38dbbb4e4ca89a094b498d811/README.org#emacs">README.org の末尾</a>にも
「This is probably totally insecure, and your passphrase may be leaked! Use at your own risk!」と書いてありますが、
<code>read-passwd</code> した文字列をそのまま <code>emacsclient</code> に返して、シェルスクリプトでそのまま扱っているので、
全く安全ではありません。</p>

<p>他の <code>pinentry</code> が使える時は避けることをオススメします。</p>

<h2>別の方法</h2>

<p><code>gnupg</code> が 2.1.5 以降なら <code>--allow-emacs-pinentry</code> というオプションがあるので、
<a href="https://elpa.gnu.org/packages/pinentry.html">https://elpa.gnu.org/packages/pinentry.html</a> と組み合わせて使うことをオススメします。
(<code>elpa</code> の説明によると <code>pinentry</code> も 0.9.5 以上が必要のようです。)
この方法は別途試してまた記事を書く予定です。
(2017-03-27 追記: <a href="http://blog.n-z.jp/blog/2017-03-25-elpa-pinentry.html">elpaのpinentry.elを試してみた</a> という記事を書きました。)</p>

<p>今回の環境では、
<a href="https://github.com/Homebrew/homebrew-core/blob/328a89b492b600686be41b6b69b93d7c88fb8b89/Formula/gnupg2.rb">Homebrew の gnupg2</a>
が 2.0.30 で 2.1.5 未満なので使えませんでした。</p>

<p>macOS 上なら Emacs 上で入力するよりも
<a href="http://blog.n-z.jp/blog/2016-08-20-mac-easypg-gpg2.html">OS X の Emacs で EasyPG が gpg2 で Opening input file: Decryption failed, になったので対処した</a>記事に書いた
<code>pinentry-mac</code> を使うのがオススメです。</p>

<h2>設定</h2>

<h3>gpg-agent の設定</h3>

<p><code>~/.gnupg/gpg-agent.conf</code> がなければ作成して、以下の設定を入れておきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pinentry-program /path/to/github.com/ecraven/pinentry-emacs/pinentry-emacs</span></code></pre></td></tr></table></div></figure>


<h3>emacs の設定</h3>

<p>README.org に書いてあるように <code>~/.emacs.d/init.el</code> に</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defun pinentry-emacs (desc prompt ok error)
</span><span class='line'>  (let ((str (read-passwd (concat (replace-regexp-in-string "%22" "\"" (replace-regexp-in-string "%0A" "\n" desc)) prompt ": "))))
</span><span class='line'>    str))</span></code></pre></td></tr></table></div></figure>


<p>を追加しておきます。</p>

<p><code>emacsclient</code> コマンドで <code>pinentry-emacs</code> 関数を呼んでいるので、
<code>(server-start)</code> も (README.org には書いていませんが) 必要です。</p>

<h2>動作確認</h2>

<p>Emacs の中で <code>*.gpg</code> ファイルを開いてみたり、
端末上でパスフレーズの必要な <code>gpg</code> コマンドを実行してみたりして、
<code>(server-start)</code> した Emacs の mini buffer でパスフレーズがきかれるのを確認します。</p>

<h2>fallback 動作</h2>

<p><code>emacsclient</code> の呼び出しが <code>sed</code> に <a href="https://github.com/ecraven/pinentry-emacs/blob/7c384a65eaaa37d38dbbb4e4ca89a094b498d811/pinentry-emacs#L24">pipe されている</a> ので、
<a href="https://github.com/ecraven/pinentry-emacs/pull/5">Fix fallback when emacsclient failed</a>
のパッチをあてないと fallback してくれないようです。
(取り込まれたらブロク記事を書こうと思っていたのですが、取り込まれないようなのでもう書くことにしました。)</p>

<p>さらに別途 <code>pinentry-emacs</code> ディレクトリにパスを通しておくか、
<code>pinentry-emacs</code> ファイルの先頭で <code>PATH=$PATH:$(dirname "$0")</code> などとしてパスを通さないと
<code>lukspinentry</code> の実行に失敗して fallback してくれません。</p>

<p>さらに、端末上で <code>gpg</code> コマンドを実行したとしても、
<code>pinentry</code> プログラムは <code>gpg-agent</code> から起動される
(プログラム間の関係は <a href="http://miniconf.debian.or.jp/assets/files/gnupg-now.html">http://miniconf.debian.or.jp/assets/files/gnupg-now.html</a> の GnuPG programs (2) 参照)
ので、
<code>tty</code> が「<code>not a tty</code>」を返すらしく、
<code>pinentry-curses --ttyname not a tty</code>
が実行されていて fallback もうまくいきません。</p>

<p>なので、
fallback 動作は期待せず、
パッチもあてず、
<code>pinentry-emacs</code> を使うなら
必ず Emacs は起動しておく、
という運用が良さそうです。</p>

<h2>まとめ</h2>

<p><code>pinentry-emacs</code> を試してみましたが、
制限事項も多く、
修正も期待できないため、
別のもっと良い <code>pinentry</code> が使える場合は、
他のものを使うことをオススメします。</p>

<p>他の手段がない時の最終手段としては、知っておいても良いのではないかと思いました。</p>

<p>ちなみに自分の環境では、
<code>pinentry-mac</code> に戻してしまっていて、
<code>pinentry-emacs</code> は使っていません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 121 回関西 Debian 勉強会 (10 周年記念会) に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-03-19-kansai-debian-meeting.html"/>
    <updated>2017-03-19T13:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20170319" title="第 121 回 関西 Debian 勉強会 (10 周年記念会)">第 121 回 関西 Debian 勉強会 (10 周年記念会)</a>
に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<p>初めての場所だったので、迷うかと思いましたが、迷ったのは建物の入り口ぐらいで、
駅にも案内があったので、ほとんど迷わずにたどり着けました。</p>

<p>参加者は 13 名で、参加費は 150 円でした。</p>

<h2>オープニングなど</h2>

<ul>
<li><a href="https://twitter.com/search?q=%23kansaidebian&amp;src=typd">ハッシュタグは #kansaidebian</a></li>
<li>祝10周年</li>
<li>事前課題発表</li>
</ul>


<p>見つかったメモ的に、第 2 回からということにしておいたけど、詳しいことは覚えていないだけで、最初から参加していた気もするし、もっと詳しく調べてみないと本当のところは不明。</p>

<h2>休憩</h2>

<h2>Debian Developer になるのに何をしたかと勉強会の Design</h2>

<ul>
<li>やぶきさん</li>
<li>自己紹介</li>
<li>どうして関西 Debian 勉強会を立ち上げたのか</li>
<li>Debian Developer になりたかった理由</li>
<li>他人の批判を受けることも大事</li>
<li>巨人の肩に乗る</li>
<li><a href="http://amzn.to/2n9ZMtB">情熱プログラマー</a>という本</li>
<li>「いちばんのへたくそになろう」</li>
<li>どうしたら英語でコミュニケーションできる</li>
<li>海外の conf に参加してモチベーションを保っていた</li>
<li>自分のやる気を保つポイントは探らないとわからない</li>
<li>分割統治法</li>
<li>勉強会の Design として考慮したこと</li>
<li><a href="http://amzn.to/2mInFoM">コンサルタントの秘密</a> という本を参考にした</li>
<li>「プレスコットのピックルス原理」「漬け水がキュウリに漬かるよりは、キュウリが漬け水に漬かる方が早い」</li>
<li>3の法則</li>
<li>「自分の計画を駄目にする原因が3つ考えられないようなら、思考過程の方に問題がある」</li>
<li>規模のジレンマ</li>
<li>人が集まる質とサイズによって、非線形的に集まりの様相は異なる。</li>
<li>「ラズベリー・ジャムの法則」（広げようとすれば、するほど薄くなる）</li>
<li><a href="http://amzn.to/2mIf1qo">Becoming a Technical Leader</a> (原著)</li>
<li>日本語題: <a href="http://amzn.to/2n9TLNn">スーパーエンジニアへの道―技術リーダーシップの人間学</a></li>
<li>ある意味、コミュニティを作っていく指針でもある。</li>
<li>動機づけ、アイディア、組織化</li>
<li>技術コミュニティ活動だが、技術の話をするのは当然でも、社会学的アプローチ、組織論的アプローチして、勉強会を回して見たかった。</li>
<li>自分の立ち位置は、見晴らしがいい場所か?</li>
<li>質疑応答</li>
<li>本の紹介</li>
<li><a href="http://amzn.to/2mInFoM">コンサルタントの秘密</a></li>
<li><a href="http://amzn.to/2mWH32j">Fearless Change アジャイルに効く アイデアを組織に広めるための48のパターン</a></li>
</ul>


<h2>10年間の振り返り</h2>

<ul>
<li>たかやさん</li>
<li>自己紹介</li>
<li>担当者の悩み</li>
<li>場所の確保</li>
<li>定期的な場所の確保の難しさ</li>
<li>交通の便</li>
<li>電源やプロジェクタなどの費用</li>
<li>Google Map で場所の一覧を作っていた</li>
<li>講師の先生の確保 ネタが難しい</li>
<li>自分のスキルの向上</li>
<li>Debian って充実している</li>
<li>仕方がないので emacs 関係のパッケージを</li>
<li>(navi2ch, jd などは proxy を使わないと見えなくなっているらしい)</li>
<li>今後の関わり方</li>
<li>パッケージ初心者ネタ大歓迎です</li>
</ul>


<h2>休憩</h2>

<h2>宴会</h2>

<p>過去の開催の記録 (参加者数や発表タイトルなどの表) を見ながらの話をしながら軽食(
<a href="https://twitter.com/murase_syuka/status/843350811375632384">https://twitter.com/murase_syuka/status/843350811375632384</a>
<a href="https://twitter.com/rarewin/status/843355875276394497">https://twitter.com/rarewin/status/843355875276394497</a>
)。</p>

<p>もくもくしすぎな年があって、一度止まってしまうと再開するのが大変なので、とりあえず定期開催していたのは大事だったのではないかという話が印象的でした。</p>

<h2>懇親会</h2>

<p>主に懇親会前後の移動中に関西 Debian 勉強会で相談したかった話ができたので良かった。</p>

<p>懇親会に使った店では烏龍茶はおかわり自由だったらしく、別のテーブルの人たちはそれで烏龍茶を頼みまくっていて、軽食を食べていたので全体としてもあまり食べなかったからか、安かったらしい。</p>
]]></content>
  </entry>
  
</feed>
