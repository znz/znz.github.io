<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-12-11T12:54:37+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mailmanでDKIM-Signatureヘッダを削除する]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-11-mailman-strip-dkim-signature.html"/>
    <updated>2013-12-11T12:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/mailman-strip-dkim-signature</id>
    <content type="html"><![CDATA[<p>fml から移行した mailman で Subject の書き換える設定をしていると、
元の <code>DKIM-Signature</code> が残っていると受け取った側で
メールを改ざんしているのと区別がつかないので、
<code>DKIM</code> の検証に失敗してしまいます。</p>

<p>そこで mailman で <code>DKIM-Signature</code> を削除するように設定しました。</p>

<!--more-->


<h2>mailman の設定</h2>

<p><code>REMOVE_DKIM_HEADERS</code> という設定があったので、
<code>/etc/mailman/mm_cfg.py</code> の末尾に</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>REMOVE_DKIM_HEADERS = Yes</span></code></pre></td></tr></table></div></figure>


<p>という設定を追加して、
<code>sudo service mailman restart</code>
しました。</p>

<p><code>mm_cfg.py</code> での設定なので、
ML 個別の設定ではなく
mailman 全体の設定になるようです。</p>

<h2>参考</h2>

<p><a href="https://bugs.launchpad.net/mailman/+bug/557493">Bug #557493 “Mailman must not strip DKIM-Signature headers” : Bugs : GNU Mailman</a>
という話があって、設定が追加されたようです。</p>

<p><code>mm_cfg.py</code> で設定できる項目の一覧は
<code>/usr/lib/mailman/Mailman/Defaults.py</code>
にあります。
このファイルを良く見ていれば、もっと早くこの設定項目に気付けたのかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emacsのmode-lineのminor-modeなどに色をつける]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-11-emacs-color-mode-line.html"/>
    <updated>2013-12-11T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/emacs-color-mode-line</id>
    <content type="html"><![CDATA[<p>emacs の mode-line の minor mode の表示が長いので短くしているのですが、
単純に短くするとわかりにくいので、色もつけています。</p>

<p>ところが、変数で設定できるようになっているものだと単純に
<code>propertize</code> して <code>setq</code> するだけでは色がつかなかったので、
その対処も含めてまとめてみました。</p>

<p>この投稿は
<a href="http://qiita.com/advent-calendar/2013/dot-emacs">.emacs Advent Calendar 2013</a>
の11日目の記事です。</p>

<!--more-->


<h2>単純に短くする</h2>

<p>単純に短くするには <code>minor-mode-alist</code> の文字列を直接変更してしまうだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">consp</span> <span class="p">(</span><span class="nv">assq</span> <span class="ss">&#39;abbrev-mode</span> <span class="nv">minor-mode-alist</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">setcar</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nv">assq</span> <span class="ss">&#39;abbrev-mode</span> <span class="nv">minor-mode-alist</span><span class="p">))</span> <span class="s">&quot; ab&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">consp</span> <span class="p">(</span><span class="nv">assq</span> <span class="ss">&#39;auto-fill-function</span> <span class="nv">minor-mode-alist</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">setcar</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nv">assq</span> <span class="ss">&#39;auto-fill-function</span> <span class="nv">minor-mode-alist</span><span class="p">))</span> <span class="s">&quot; Fil&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>色も付ける</h2>

<p><code>propertize</code> で <code>face</code> を付けた文字列を設定すると色が付きます。</p>

<p><code>face</code> プロパティの設定としては、
最低限 <code>:foreground</code> と <code>:background</code> を知っておけば良いと思います。
指定できる色は <code>list-colors-display</code> で一覧できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">consp</span> <span class="p">(</span><span class="nv">assq</span> <span class="ss">&#39;abbrev-mode</span> <span class="nv">minor-mode-alist</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">setcar</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nv">assq</span> <span class="ss">&#39;abbrev-mode</span> <span class="nv">minor-mode-alist</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">propertize</span> <span class="s">&quot;省&quot;</span> <span class="ss">&#39;face</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">:foreground</span> <span class="s">&quot;green&quot;</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">consp</span> <span class="p">(</span><span class="nv">assq</span> <span class="ss">&#39;auto-fill-function</span> <span class="nv">minor-mode-alist</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">setcar</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nv">assq</span> <span class="ss">&#39;auto-fill-function</span> <span class="nv">minor-mode-alist</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">propertize</span> <span class="s">&quot;詰&quot;</span> <span class="ss">&#39;face</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">:foreground</span> <span class="s">&quot;yellow&quot;</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>設定対象の探し方</h2>

<p>ここでは例として <code>abbrev-mode</code> と <code>auto-fill-mode</code> をあげていますが、
<code>auto-fill-mode</code> が <code>auto-fill-function</code> になっているなど、
単純に決まっているものだけではなさそうなので、
他の設定をどうするのかは、
<code>describe-variable</code> で <code>minor-mode-alist</code> をみて探すのが良さそうでした。</p>

<h2>設定用関数</h2>

<p>毎回長々と書くのは面倒なので、以下の関数を定義して使っています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">my-shorten-minor-mode-name</span> <span class="p">(</span><span class="nv">mode-sym</span> <span class="nv">short-name</span> <span class="k">&amp;optional</span> <span class="nv">face</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;minor-modeの名前を短くする。&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">cell</span> <span class="p">(</span><span class="nv">assq</span> <span class="nv">mode-sym</span> <span class="nv">minor-mode-alist</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">consp</span> <span class="nv">cell</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">if</span> <span class="nv">face</span>
</span><span class='line'>          <span class="p">(</span><span class="k">setq</span> <span class="nv">short-name</span> <span class="p">(</span><span class="nv">propertize</span> <span class="nv">short-name</span> <span class="ss">&#39;face</span> <span class="nv">face</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="k">setq</span> <span class="nv">short-name</span> <span class="p">(</span><span class="nv">concat</span> <span class="s">&quot; &quot;</span> <span class="nv">short-name</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">setcar</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">cell</span><span class="p">)</span> <span class="nv">short-name</span><span class="p">))</span>
</span><span class='line'>    <span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>起動時に読み込まれていない minor-mode の設定</h2>

<p><code>view-mode</code> のように起動時に読み込まれていない <code>minor-mode</code> は
<code>.emacs</code> のタイミングで書き換えようとしても
<code>minor-mode-alist</code> に登録されていないのでうまくいきません。
こういう場合は <code>eval-after-load</code> で設定しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nv">eval-after-load</span> <span class="s">&quot;view&quot;</span>
</span><span class='line'>  <span class="o">&#39;</span><span class="p">(</span><span class="nv">my-shorten-minor-mode-name</span>
</span><span class='line'>    <span class="ss">&#39;view-mode</span> <span class="s">&quot;見&quot;</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">:foreground</span> <span class="s">&quot;white&quot;</span> <span class="ss">:background</span> <span class="s">&quot;DeepPink1&quot;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>変数で設定できる場合</h2>

<p><code>eldoc-minor-mode</code> のように変数で設定できるようになっているものがあります。
こういう場合は単純に <code>propertize</code> した文字列を <code>setq</code> しても
プロパティが無視されて色がつきません。</p>

<p>理由は <code>mode-line-format</code> のドキュメントの
<a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Properties-in-Mode.html#Properties-in-Mode">23.4.6 Properties in the Mode Line</a>
に書いてあって、
<code>risky-local-variable</code> が non-nil じゃないとテキストプロパティが
無視されるということでした。</p>

<p>そこで <code>risky-local-variable</code> に <code>t</code> を設定すれば色がつくようになりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;eldoc-minor-mode-string</span> <span class="ss">&#39;risky-local-variable</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">eldoc-minor-mode-string</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">propertize</span> <span class="s">&quot;d&quot;</span> <span class="ss">&#39;face</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">:foreground</span> <span class="s">&quot;purple&quot;</span> <span class="ss">:background</span> <span class="s">&quot;yellow&quot;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>anzu.el での例</h2>

<p>他の例も挙げておくと
<a href="http://qiita.com/syohex/items/56cf3b7f7d9943f7a7ba">anzu.el</a>
なら以下のように設定しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;anzu</span> <span class="no">nil</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;anzu-mode-lighter</span> <span class="ss">&#39;risky-local-variable</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">setq</span> <span class="nv">anzu-mode-lighter</span> <span class="p">(</span><span class="nv">propertize</span> <span class="s">&quot;杏&quot;</span> <span class="ss">&#39;face</span> <span class="ss">&#39;anzu-mode-line</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">global-anzu-mode</span> <span class="mi">+1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>ここでは <code>minor-mode</code> を中心に <code>mode-line</code> を短くして、
色をつける方法に付いて紹介しました。
<code>major-mode</code> も含めて実際に使っている設定は
<a href="https://github.com/znz/dot-emacs/blob/8434c73ba833791eedc1411360e10441e52b370e/init.el.d/50mode-line.el">50mode-line.el</a>
に公開しているので、参考にしてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.zshrcの自動再コンパイル]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-10-auto-zshrc-recompile.html"/>
    <updated>2013-12-10T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/auto-zshrc-recompile</id>
    <content type="html"><![CDATA[<p>zsh のスクリプトは <code>zcompile</code> コマンドでコンパイルすることができます。
<code>.zshrc</code> も大きくなって読み込みに時間がかかるようになったらコンパイルすれば良さそうですが、
変更したときに手動でコンパイルし直すのは面倒なので、
自動で再コンパイルする設定を紹介します。</p>

<p>この投稿は
<a href="http://qiita.com/advent-calendar/2013/zsh">zsh Advent Calendar 2013</a>
の10日目の記事です。</p>

<!--more-->


<h2>設定方法</h2>

<p><code>.zshrc</code> の適当な場所に以下の設定を追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">if</span> <span class="o">[</span> ~/.zshrc -nt ~/.zshrc.zwc <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span>zcompile ~/.zshrc
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで <code>.zshrc.zwc</code> より <code>.zshrc</code> の方が新しい時に
<code>zcompile .zshrc</code> が自動で実行されます。</p>

<p><code>.zshrc.zwc</code> がある時だけ実行されるので、
最初に <code>zcompile ~/.zshrc</code> を手動で実行しておきます。</p>

<h2>読み込み順序</h2>

<p>zsh 自体が <code>file.zwc</code> よりも <code>file</code> の方が新しい時に
<code>file</code> の方を読み込むようになっているので、
<code>.zshrc</code> の方が新しくて <code>zcompile</code> し直していないときに
<code>.zshrc.zwc</code> が読み込まれて
古い設定のままになるということはありません。</p>

<h2>自動作成もする場合</h2>

<p>ファイルを分割していて <code>.zshrc</code> はコンパイルする必要がない環境では
何もしない挙動になってほしいので、
こうしていますが、
最初から自動作成してほしいのなら、
存在チェックも付けて以下のようにすれば良いと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">if</span> <span class="o">[</span> ! -f ~/.zshrc.zwc -o ~/.zshrc -nt ~/.zshrc.zwc <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span>zcompile ~/.zshrc
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>ここでは <code>.zshrc</code> だけを対象にしましたが、
他にも自前の <code>fpath</code> のファイルなどで自動で再コンパイルしたいファイルがあれば
同様のことをするのがよいかもしれません。</p>

<p>あまり変更しないファイルなら更新チェックの無駄の方が大きいかもしれないので、
そのトレードオフは考えておく必要がありそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rail 3.2でcache_digestsを使ってみた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-08-cache-digests.html"/>
    <updated>2013-12-08T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/cache-digests</id>
    <content type="html"><![CDATA[<p>まだ Rails 3.2.16 のままのアプリで <code>cache_digests</code> gem を使って
fragment cache を導入してみました。</p>

<p>Rails 4.0 では標準になっているはずなので、
使い方は同じだと思います。</p>

<p>この投稿は
<a href="http://qiita.com/advent-calendar/2013/ruby-on-rails">Ruby on Rails Advent Calendar 2013</a>
の8日目の記事です。</p>

<!--more-->


<h2>インストール</h2>

<p>まず <code>Gemfile</code> に以下の gem の指定を追加してインストールしました。</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;cache_digests&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;dalli&#39;</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="ss">:production</span>
</span></code></pre></td></tr></table></div></figure>


<h2>環境設定</h2>

<p>キャッシュの影響の確認などのデバッグ用に <code>development</code> 環境でも
キャッシュを有効にしました。
ちゃんとキャッシュで来ているかどうかの確認や削除がしやすいように
保存先はデフォルトの <code>:file_store</code> のままにしています。</p>

<figure class='code'><figcaption><span>config/environments/development.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">perform_caching</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>production</code> 環境では <code>dalli</code> を使って <code>memcached</code> に保存するようにしました。
<code>dalli</code> の設定はこの記事の本題ではないので、
<code>memcached</code> の設定などは他のサイトを参考にしてください。</p>

<figure class='code'><figcaption><span>config/environments/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">cache_store</span> <span class="o">=</span> <span class="ss">:dalli_store</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>staging</code> 環境もあったので <code>config/environments/staging.rb</code> にも同様の設定をしました。</p>

<h2>fragment cache</h2>

<p>すでに
<code>app/views/comments/_comment.html.haml</code> や
<code>app/views/posts/_post.html.haml</code> のような view を使って
<code>render @comments</code> や <code>render @posts</code> のように使っていたので、</p>

<figure class='code'><figcaption><span>app/views/comments/_comment.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>- cache comment do
</span><span class='line'>  -# 今までの内容
</span></code></pre></td></tr></table></div></figure>


<p>のように <code>cache comment do ... end</code> で今までの内容をくくるだけでした。
<code>cache</code> メソッド自体の返り値は <code>=</code> で埋め込んだりせずにそのまま呼ぶだけで大丈夫でした。</p>

<h2>動作確認</h2>

<p><code>log/developement.log</code> などを <code>fragment</code> で検索してみると</p>

<figure class='code'><figcaption><span>log/developement.log</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Write fragment views/comments/29-20130905083500/96f0ec0ce36af8132826f3bfbe0079db 0.5ms
</span><span class='line'>Read fragment views/comments/30-20130905083518/96f0ec0ce36af8132826f3bfbe0079db 0.4ms
</span></code></pre></td></tr></table></div></figure>


<p>などと記録されていて、キャッシュが使われていることが確認できました。</p>

<p><code>development</code> 環境では実際のキャッシュファイルは <code>tmp/cache/</code> 以下にありました。</p>

<h2>キャッシュの無効化 (invalidate)</h2>

<p>キャッシュが古くなってもう有効ではないという状態にすることを invalidate というと思いますが、
内容が更新された時に古いキャッシュが使われると問題があるので、
その対処をする必要があります。</p>

<p><code>cache</code> メソッドの引数に <code>ActiveRecord</code> のオブジェクトを渡した時の
キャッシュのキーは先ほどの例だと
<code>views/comments/:id-:updated_at/:md5</code>
という感じで <code>comment</code> オブジェクトの <code>id</code> と <code>updated_at</code> と
<code>app/views/comments/_comment.html.haml</code> の MD5 が使われていて、
view のファイルが変更したり、
<code>comment</code> ファイルの <code>updated_at</code> を更新したりした時に
自動で無効になるようです。</p>

<p>つまり、この view の中で別の partial render を使っていると
反映されないということなので、
内側の方でも <code>cache</code> を使うなどの対処が必要そうです。
実際に <code>_post.html.haml</code> の中で <code>render post.comments</code> のようなことをしました。</p>

<p>さらに以下のように <code>belongs_to</code> に <code>touch: true</code> を付けて、
コメントが付いた時に <code>post</code> の <code>updated_at</code> も更新されるようにしました。</p>

<figure class='code'><figcaption><span>app/models/comment.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:commentable</span><span class="p">,</span> <span class="ss">polymorphic</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">touch</span><span class="p">:</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>キャッシュの完全削除</h2>

<p><code>rails console</code> で <code>Rails.cache.clear</code> を実行すれば削除できました。
他の sass などのキャッシュも <code>tmp/cache/</code> の中にあるので
一緒に削除されてしまうようです。</p>

<h2>まとめ</h2>

<p>とりあえず使い始めるための最低限の知識をまとめてみました。</p>

<p>後は
<a href="http://ja.asciicasts.com/episodes/387-cache-digests">ASCIIcasts &ndash; “Episode 387 &ndash; Cache Digests”</a>
で説明されている
<code>rake cache_digests:nested_dependencies</code>
などを知っておけば良さそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansibleで1ファイルのplaybookからroleに書き換える方法]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-07-ansible-split-playbook.html"/>
    <updated>2013-12-07T01:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-split-playbook</id>
    <content type="html"><![CDATA[<p><code>ansible</code> を使い始める時は1個の YAML ファイルから始めるのが手軽で良いのですが、
それを
<a href="http://www.ansibleworks.com/docs/playbooks_best_practices.html">Best Practices</a>
にあわせて <code>roles</code> にしようとしたら、
対応がよくわからなくて困ったことがあったので、
書き換え方をまとめてみました。</p>

<p>この投稿は
<a href="http://qiita.com/advent-calendar/2013/ansible">Ansible Advent Calendar 2013</a>
の7日目の記事です。</p>

<!--more-->


<p>全体的に動作確認せずに以前使ったファイルを参考にしているので、
間違っている部分があるかもしれないので、その時はコメントなどで
教えてください。</p>

<h2>1個の YAML ファイルの例</h2>

<p>仮にこんな感じの <code>playbook.yml</code> があって、
これを <code>roles</code> にしたいとします。</p>

<figure class='code'><figcaption><span>playbook.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">foo-servers</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>  <span class="l-Scalar-Plain">vars</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">adminuser</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">vagrant</span>
</span><span class='line'>    <span class="l-Scalar-Plain">admingroup</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">vagrant</span>
</span><span class='line'>    <span class="l-Scalar-Plain">homedir</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/home/vagrant</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">apt</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pkg=zsh</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">src=zshrc dest=/.zshrc owner= group= mode=0644</span>
</span></code></pre></td></tr></table></div></figure>


<p>この例だとテンプレートファイルとして <code>zshrc</code> ファイルが同じディレクトリにあります。</p>

<h2>role 作成</h2>

<p>ここでは role の名前を <code>zsh</code> にしてみます。</p>

<p>元の <code>playbook.yml</code> と <code>zshrc</code> から</p>

<ul>
<li><code>roles/zsh/tasks/main.yml</code></li>
<li><code>roles/zsh/templates/zshrc.j2</code></li>
<li><code>roles/zsh/vars/main.yml</code></li>
</ul>


<p>というファイルを作ることになります。</p>

<h3>roles/zsh/tasks/main.yml</h3>

<p>処理のメイン部分です。
元の <code>playbook.yml</code> の <code>tasks</code> の値に並んでいた配列を書きます。</p>

<figure class='code'><figcaption><span>roles/zsh/tasks/main.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">apt</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pkg=zsh</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">src=zshrc dest=/.zshrc owner= group= mode=0644</span>
</span></code></pre></td></tr></table></div></figure>


<h3>roles/zsh/templates/zshrc.j2</h3>

<p>元の <code>zshrc</code> にテンプレート言語がわかりやすいように拡張子を付けただけです。
例として <code>zshrc</code> にしてしまっただけなので、
本来は <code>vars</code> の変数を展開したいファイルを使うことになると思います。</p>

<h3>roles/zsh/vars/main.yml</h3>

<p>変数の定義部分です。
元の <code>playbook.yml</code> の <code>vars</code> の値に並んでいたハッシュを書きます。</p>

<figure class='code'><figcaption><span>roles/zsh/vars/main.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">adminuser</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">vagrant</span>
</span><span class='line'><span class="l-Scalar-Plain">admingroup</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">vagrant</span>
</span><span class='line'><span class="l-Scalar-Plain">homedir</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/home/vagrant</span>
</span></code></pre></td></tr></table></div></figure>


<h3>その他</h3>

<p><code>roles/zsh/handleres/main.yml</code> のような他のディレクトリとか、
<code>main.yml</code> 以外の <code>*.yml</code> ファイルとかも使えますが、
一番最初の段階では知らなくても大丈夫だと思います。</p>

<h2>読み込み側 YAML</h2>

<p><code>vars</code> とか <code>tasks</code> を並べていた代わりに <code>roles</code> を使って読み込みます。
今回は <code>role: zsh</code> で読み込みましたが、他の例をみてみると <code>- zsh</code> だけでも良さそうです。</p>

<figure class='code'><figcaption><span>site.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">foo-servers</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>  <span class="l-Scalar-Plain">roles</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">role</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">zsh</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>最初は 1ファイルの YAML と roles 用の複数の YAML ファイルの対応関係がよくわからなくて、
roles 用の YAML ファイルに余計な記述をしてここでは使えないと言われたりして悩んだので、
簡単に対応関係をまとめてみました。</p>

<p>まだあまり使っていなくて、間違っているところもあるかもしれないので、
何かあればコメントなどで指摘してもらえるとありがたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[debian-goodiesのcheckrestartで再起動が必要なプロセスを調べる]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-06-checkrestart.html"/>
    <updated>2013-12-06T14:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/checkrestart</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/advent-calendar/2013/distro-pm">ディストリビューション/パッケージマネージャー Advent Calendar 2013</a> の 12/6 のところが空いていたので、後から書いています。</p>

<p>この投稿は
<a href="http://qiita.com/advent-calendar/2013/distro-pm">ディストリビューション/パッケージマネージャー Advent Calendar 2013</a>
の6日目の記事です。</p>

<!--more-->


<h2>debian-goodies パッケージ</h2>

<p><a href="http://packages.qa.debian.org/d/debian-goodies.html">debian-goodies パッケージ</a>
には <code>/usr/bin/</code> に複数のコマンドと <code>/usr/sbin/checkrestart</code> が入っています。</p>

<p><code>/usr/bin/</code> のコマンドについては
<a href="http://uwabami.junkhub.org/log/20131204.html#p01">uwabami さんの記事</a>
を参照してください。</p>

<p>ここでは <code>checkrestart</code> を紹介します。</p>

<h2>checkrestart</h2>

<p>ライブラリのパッケージが更新されたときに、
特にセキュリティアップデートだと
そのライブラリを使っているデーモンなども再起動したいと
思うことが多いと思います。</p>

<p>そういうときに <code>checkrestart</code> コマンドを使うと
どのプロセスが置き換えられたライブラリを使っているか
調べることが出来ます。</p>

<h2>使用例 1</h2>

<p>例えば init スクリプトから起動している <code>whoopsie</code>
の再起動が必要なときは以下のようなメッセージが出てくるので、
<code>sudo /etc/init.d/whoopsie restart</code> とか
<code>sudo service whoopsie restart</code> とかで再起動すれば良いと思います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo checkrestart
</span><span class='line'>Found 1 processes using old versions of upgraded files
</span><span class='line'>(1 distinct program)
</span><span class='line'>(1 distinct packages)
</span><span class='line'>
</span><span class='line'>Of these, 1 seem to contain init scripts which can be used to restart them:
</span><span class='line'>The following packages seem to have init scripts that could be used
</span><span class='line'>to restart them:
</span><span class='line'>whoopsie:
</span><span class='line'>        953     /usr/bin/whoopsie
</span><span class='line'>
</span><span class='line'>These are the init scripts:
</span><span class='line'>/etc/init.d/whoopsie restart</span></code></pre></td></tr></table></div></figure>


<h2>使用例 2</h2>

<p>デーモン以外などで起動しているプロセスが使っているファイルが置き換えられた場合、以下のように対応する init script がわからないというメッセージが出てきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo checkrestart
</span><span class='line'>Found 1 processes using old versions of upgraded files
</span><span class='line'>(1 distinct program)
</span><span class='line'>(1 distinct packages)
</span><span class='line'>These processes do not seem to have an associated init script to restart them:
</span><span class='line'>ruby1.8:
</span><span class='line'>        906     /usr/bin/ruby1.8</span></code></pre></td></tr></table></div></figure>


<p>こういうときは
<code>sudo ls -l /proc/906</code> や
<code>sudo cat -v /proc/906/cmdline</code>
などで対応するプログラムを調べて再起動します。</p>

<h2>使用例 3</h2>

<p>再起動が必要なものがみつからなかった場合は以下のようなメッセージが出てきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo checkrestart
</span><span class='line'>Found 0 processes using old versions of upgraded files</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>今回は <code>debian-goodies</code> の中から <code>checkrestart</code> を紹介しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4.0.2のi18nで出るようになったdeprecated警告の対策方法]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-04-rails-i18n-deprecated-warning.html"/>
    <updated>2013-12-04T10:59:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rails-i18n-deprecated-warning</id>
    <content type="html"><![CDATA[<p>Ruby on Rails のセキュリティアップデートがあって、
4.0.2 にあげたら i18n gem も 0.6.5 から 0.6.9 にあがって
<code>locale</code> の設定変更をしているところで
<code>[deprecated] I18n.enforce_available_locales will default to true in the future. If you really want to skip validation of your locale you can set I18n.enforce_available_locales = false to avoid this message.</code>
という警告が出るようになりました。</p>

<!--more-->


<h2>警告の出るタイミング</h2>

<p><a href="http://stackoverflow.com/questions/20361428/rails-4-0-2-i18n-validation-deprecation-warning">deprecated &ndash; Rails 4.0.2 I18n validation deprecation warning &ndash; Stack Overflow</a>
経由で
<a href="https://github.com/svenfuchs/i18n/commit/3b6e56e06fd70f6e4507996b017238505e66608c9">Add I18n.locale_available? and enforce available locales</a>
のコミットから入った変更ということで、
コミットログをみてみると、</p>

<ul>
<li><code>I18n.config.default_locale=</code></li>
<li><code>I18n.config.locale=</code></li>
<li><code>I18n.translate</code></li>
<li><code>I18n.localize</code></li>
<li><code>I18n.transliterate</code></li>
</ul>


<p>を呼んだときに影響するようです。
つまり <code>rails new</code> で作っただけだと <code>config/application.rb</code> の
<code>config.i18n.default_locale = :de</code> がコメントアウトされていて、
警告は出ません。</p>

<h2>日本語のみで使う場合</h2>

<p>日本語のみで使うのなら、
将来のデフォルトの
<code>I18n.enforce_available_locales = true</code>
にしてしまってから、
普通に日本語をデフォルトにする
<code>config.i18n.default_locale = :ja</code>
を呼べば良いと思います。</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">I18n</span><span class="o">.</span><span class="n">enforce_available_locales</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">i18n</span><span class="o">.</span><span class="n">default_locale</span> <span class="o">=</span> <span class="ss">:ja</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただし、先にちゃんと日本語の locale ファイルを作っておかないと
<code>I18n::InvalidLocale</code>
という例外が発生して、
<code>rake</code> などで
<code>:ja is not a valid locale</code>
と言われてしまいます。</p>

<h2>今まで通りの挙動にする場合</h2>

<p><code>I18n.enforce_available_locales = false</code>
にすれば今まで通りの挙動になり、
存在しない <code>locale</code> を設定しても例外は発生しません。</p>

<h2>今のデフォルト</h2>

<p>今は
<code>I18n.enforce_available_locales = nil</code>
がデフォルトになっていて、
<code>nil</code> だと警告がでる、
ということのようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[aptitude検索パターンの紹介]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-04-aptitude-search-pattern.html"/>
    <updated>2013-12-04T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/aptitude-search-pattern</id>
    <content type="html"><![CDATA[<p>Debian や Ubuntu のパッケージのインストールなどで
コマンドライン操作では <code>apt-get</code> や <code>aptitude</code>
を使いますが、
ここでは
<code>apt-get</code> では出来ない <code>aptitude</code>
の便利な使い方を紹介します。</p>

<p>この投稿は
<a href="http://qiita.com/advent-calendar/2013/distro-pm">ディストリビューション/パッケージマネージャー Advent Calendar 2013</a>
の4日目の記事です。</p>

<!--more-->


<h2>残ってしまった設定ファイルの削除</h2>

<p>deb パッケージのアンインストールは <code>remove</code> と <code>purge</code> の二種類があって、
<code>purge</code> すれば設定ファイルまで消えるのですが、
<code>remove</code> だと設定ファイルは残ってしまいます。</p>

<p>普段は
<code>apt-get purge hoge</code>
や
<code>aptitude purge hoge</code>
で削除していたとしても、
依存関係で自動インストールされたものが
自動削除される時は <code>remove</code> になってしまって
設定ファイルが残ってしまいます。</p>

<p>そういうときに <code>aptitude</code> だと</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aptitude purge '~c'</span></code></pre></td></tr></table></div></figure>


<p>で設定ファイルだけ残ったパッケージを一気に <code>purge</code> できます。</p>

<p>この <code>~c</code> というのが <code>aptitude</code> の search term の一種で、
削除されていて <code>purge</code> (完全削除) されていない、
つまり設定ファイルがシステム上に残っているパッケージという意味になります。</p>

<h2>クオートの必要性</h2>

<p><code>''</code> でクオートしているのはシェルの展開を抑制するためで、
必須ではないのですが、
環境によって意図しない指定になることを避けるために、
常に <code>''</code> でくくっておくことをお勧めします。
ちなみに、この例だと <code>c</code> というユーザーが存在した場合に
そのホームディレクトリに展開されてしまいます。</p>

<h2>長い形式と短い形式</h2>

<p>ほとんどの search term は短い形式 (short form) と
長い形式 (long form) があり、
<code>~c</code> が短い形式で対応する長い形式は <code>?config-files</code>
になります。
つまり</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aptitude purge '?config-files'</span></code></pre></td></tr></table></div></figure>


<p>でも同じ意味になります。</p>

<h2>検索パターンの確認</h2>

<p><code>aptitude search</code> でも <code>aptitude purge</code> でも <code>aptitude install</code> でも
同じように使えるので、
<code>aptitude search</code> で確認してから <code>aptitude purge</code> するとか、
<code>aptitude install</code> するという使い方も出来ます。</p>

<h2>Search Term reference</h2>

<p>search term の一覧は <code>aptitude-doc-ja</code> パッケージを入れて参照するか、
<a href="http://aptitude.alioth.debian.org/doc/ja/ch02s04s05.html">Search term reference</a>
などを参照してください。</p>

<h2>他によく使っている search term</h2>

<p>他によく使っているものとしては、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aptitude search '~U'</span></code></pre></td></tr></table></div></figure>


<p>でアップデート対象のパッケージ一覧を見たり、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aptitude purge '~i~n 3.2.0-2[1-3]'</span></code></pre></td></tr></table></div></figure>


<p>のような指定で古いカーネル関連のパッケージを削除したりするのをよく使います。
<code>~i</code> がインストール済みのものという意味で、
<code>~n</code> はパッケージ名の検索で引数は正規表現なのですが、
ここでは他に間違ってマッチしそうなものはないため、
<code>.</code> のエスケープは省略してしまうことが多いです。
<code>linux-.*</code> の部分も指定しなくても充分絞り込めるので
省略してしまっています。</p>

<p><code>~i</code> は引数をとらなくて、デフォルトはパッケージ名の検索なので、
<code>~i 3.2.0-2[1-3]</code> と省略することも出来ます。</p>

<h2>応用例</h2>

<h3>別 apt-line で入れたパッケージの検索など</h3>

<p>たとえば Ubuntu なら</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aptitude search '~i!~Oubuntu'</span></code></pre></td></tr></table></div></figure>


<p>のように Origin が Ubuntu 以外のパッケージという検索で
Ubuntu の apt-line 以外から入れたパッケージが検索できます。</p>

<p>昔から使い続けている Debian なら</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aptitude search '~i!~Odebian'</span></code></pre></td></tr></table></div></figure>


<p>で他の apt-line からインストールしたものに加えて、
昔の Debian にパッケージが存在して、
今の Debian にはもう収録されていないパッケージが残っているものも
探すことも出来ます。</p>

<h3>exim から postfix への入れ替え</h3>

<p><code>aptitude install</code> や <code>aptitude purge</code> で
パッケージを指定する時に末尾に <code>_</code> を付けると <code>purge</code> できたり、
<code>+</code> を付けるとインストールできたりします。</p>

<p>これらを組み合わせると <code>postfix+</code> でインストールしつつ、
名前に <code>exim</code> を含むパッケージを <code>purge</code> することで
<code>default-mta</code> や <code>mail-transport-agent</code> に依存しているパッケージの
依存関係が満たせないと言われずにパッケージの入れ替えができます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo aptitude purge '~i~nexim' postfix+</span></code></pre></td></tr></table></div></figure>


<h3>バグがあったパッケージのインストールを止めたい</h3>

<p>Debian の unstable や testing を使っていて
<code>apt-listbugs</code> を入れていると
インストール前にこのパッケージの
このバージョンは入れない方が
良さそうということがありますが、
同じソースパッケージで複数のパッケージに分かれていると
指定が面倒なことがあります。</p>

<p>たとえば <code>sysv-rc</code> でバグがあった時に
<code>apt-get source sysv-rc</code> でソースパッケージ名を調べて、
対象パッケージを確認した上で
以下のように
<code>aptitude forbid-version</code>
でそのバージョンはインストールしない、
ということが出来ます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aptitude search '?installed ?source-package(sysvinit)'
</span><span class='line'>sudo aptitude forbid-version '?installed ?source-package(sysvinit)'</span></code></pre></td></tr></table></div></figure>


<h3>その他いろいろ</h3>

<p>最後にその他のいろいろな例を列挙しておきます。
詳しい説明は <code>aptitude</code> のリファレンスなどを参照してください。</p>

<ul>
<li><code>aptitude search '?maintainer(uwabami)</code> : メンテナで探す</li>
<li><code>aptitude search '~t minimal'</code> : タスクでインストールされるパッケージ</li>
<li><code>aptitude search '~n^lsb'</code> : 名前が lsb で始まるパッケージ</li>
<li><code>aptitude search '?section(metapackages)'</code> : メタパッケージ</li>
<li><code>aptitude search '?priority(important)'</code> : 優先度が重要のパッケージ</li>
<li><code>aptitude search '?provides(mail-transport-agent)'</code> : <code>mail-transport-agent</code> を提供しているパッケージ</li>
</ul>


<h2>まとめ</h2>

<p>今回は <code>aptitude</code> の検索パターンの便利な使い方を紹介しました。</p>

<p>今まで <code>apt-get</code> や <code>apt-cache</code> しか使っていなかったとか、
<code>aptitude</code> を使っていても単純にパッケージ名を指定しかしたことがなかったとか
いう人は <code>aptitude purge '~c'</code> だけでも試してみると良いのではないでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.1.0の新機能のException#cause]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-03-ruby-exception-cause.html"/>
    <updated>2013-12-03T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ruby-exception-cause</id>
    <content type="html"><![CDATA[<p><a href="https://www.ruby-lang.org/ja/news/2013/11/22/ruby-2-1-0-preview2-is-released/">Ruby 2.1.0-preview2 リリース</a>
では
<a href="http://d.hatena.ne.jp/nagachika/20131110/ruby_trunk_changes_43615_43636">2013-11-10 の大きめの変更</a>
が気になっていて、
ここでは
<code>Exception#cause</code>
というメソッドを紹介します。</p>

<p><code>"literal"f</code> のように書く freeze された文字列リテラル機能が
2.1.0-preview1 には入っていたのですが、それが削除されて
<code>"literal".freeze</code> がコンパイル時に特別扱いされるようになった、
というのも気になっています。</p>

<p>この投稿は
<a href="http://qiita.com/advent-calendar/2013/ruby">Ruby Advent Calendar 2013</a>
の3日目の記事です。</p>

<!--more-->


<h2>Exception#cause の例</h2>

<p>Ruby 2.0.0 までは <code>rescue</code> や <code>ensure</code> の中で別の例外が発生すると、
別途保存しておかない限り、
以前に発生した例外がわからなくなってしまっていましたが、
Ruby 2.1.0(-preview2) からは別の例外を <code>raise</code> した時に
以前の例外が自動で保存されて
<code>Exception#cause</code> でたどれるようになりました。
<code>cause</code> は <code>raise</code> のタイミングで設定されるので、
例外オブジェクト自体は <code>rescue</code> や <code>ensure</code>
の外で生成していても良いようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">bar</span>
</span><span class='line'>  <span class="n">e</span> <span class="o">=</span> <span class="no">Exception</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">foo</span>
</span><span class='line'><span class="k">rescue</span>
</span><span class='line'>  <span class="k">raise</span> <span class="n">e</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">baz</span>
</span><span class='line'>  <span class="n">bar</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;baz&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">baz</span>
</span><span class='line'><span class="k">rescue</span>
</span><span class='line'>  <span class="nb">p</span> <span class="vg">$!</span>                   <span class="c1">#=&gt; #&lt;RuntimeError: baz&gt;</span>
</span><span class='line'>  <span class="nb">p</span> <span class="vg">$!</span><span class="o">.</span><span class="n">cause</span>             <span class="c1">#=&gt; #&lt;Exception: bar&gt;</span>
</span><span class='line'>  <span class="nb">p</span> <span class="vg">$!</span><span class="o">.</span><span class="n">cause</span><span class="o">.</span><span class="n">cause</span>       <span class="c1">#=&gt; #&lt;RuntimeError: foo&gt;</span>
</span><span class='line'>  <span class="nb">p</span> <span class="vg">$!</span><span class="o">.</span><span class="n">cause</span><span class="o">.</span><span class="n">cause</span><span class="o">.</span><span class="n">cause</span> <span class="c1">#=&gt; nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>終了時のバックトレース</h2>

<p>ちなみに、例外が保存されていても
<code>rescue</code> せずにプログラムが終了した時のバックトレースは
今まで通り最後の例外だけ表示されるようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> cat t.rb
</span><span class='line'><span class="gp">#</span>!/usr/bin/env ruby
</span><span class='line'><span class="go">def foo</span>
</span><span class='line'><span class="go">  raise &quot;foo&quot;</span>
</span><span class='line'><span class="go">end</span>
</span><span class='line'>
</span><span class='line'><span class="go">def bar</span>
</span><span class='line'><span class="go">  foo</span>
</span><span class='line'><span class="go">rescue</span>
</span><span class='line'><span class="go">  raise &quot;bar&quot;</span>
</span><span class='line'><span class="go">end</span>
</span><span class='line'>
</span><span class='line'><span class="go">bar</span>
</span><span class='line'><span class="gp">%</span> ruby t.rb
</span><span class='line'><span class="go">t.rb:9:in `rescue in bar&#39;: bar (RuntimeError)</span>
</span><span class='line'><span class="go"> from t.rb:7:in `bar&#39;</span>
</span><span class='line'><span class="go"> from t.rb:12:in `&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nadokaさんの0.8.6をリリースした関連の話]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-29-nadoka-086-released.html"/>
    <updated>2013-11-29T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/nadoka-086-released</id>
    <content type="html"><![CDATA[<p><a href="http://mla.n-z.jp/?ruby-list:49704">nadoka さんの 0.8.6 をリリース</a>
したので、
その関連の話を書いてみようと思います。</p>

<!--more-->


<h2>なぜ続けているか</h2>

<p>短い答えとしては、自分が使っているからというのが一番大きな理由です。</p>

<p>bot というか plugin もいくつか作って、
サーバーの管理などにも便利に使っていて、
わざわざ他の IRC proxy 的なソフトに乗り換えて
プラグインを書き直すよりは、
一応動いているものをメンテナンスし続けた方が楽というのが
理由になっています。</p>

<h2>subversion repository について</h2>

<p>最初は
<a href="http://www.atdot.net/nadoka/nadoka.ja.html">atdot.net の nadoka さん</a>
のところに書いてある
<code>http://www.atdot.net/svn/nadoka/trunk</code>
にあったものが、
ささださんのサーバー管理の都合なのか、
rubyforge に移行して今に至ります。</p>

<p>途中から
(<a href="https://github.com/nadoka/nadoka/wiki/HowToRelease">HowToRelease</a>
の記録によると 0.7.7 から)
は github メインに移行しています。</p>

<p>その後、しばらく放置していたかどうだったのか忘れましたが、
最近のリリースでは github での変更をリリースのタイミングで
rubyforge の svn にも git-svn を使ってマージしていました。</p>

<p>このマージも今回で最後になります。</p>

<p>その作業をするときに
<code>http://rubyforge.org/</code>
をみてみると
<code>RubyForge Could Not Connect to Database:</code>
というエラーになっていて、
<a href="https://twitter.com/hsbt/status/406423900432506881">hsbt さん</a>
に
<a href="https://twitter.com/evanphx/status/399552820380053505">RubyForgeは5月15日で終了予定</a>
という話を教えてもらいました。</p>

<p>古いサーバーで svn co して、
そのまま使っている場合でも使い続けられるように続けていましたが、
rubyforge 自体が終わるということで、
そういうサーバーでは、
そのまま最後の svn up をして使い続けるか、
git に移行する必要がありそうです。</p>

<h2>git repository について</h2>

<p>github が主流になっていたこともあり、
pull request とかしやすくなることを期待して
移行しました。</p>

<p>pull request が来た件数も 0 ではないので、
そのあたりは活発ではないプロジェクトとしては
うまくいっているのではないでしょうか。</p>

<p>github への移行方法として、
最初は
<a href="http://darcs.net/RelatedSoftware/Tailor">tailor</a>
を検討したのですが、
既にあまり使われていなくて、
ちょっと試した感じでもうまくいかなかったので、
git-svn で移行しました。</p>

<p>今となっては変換専用ソフトはほぼ使えるものはなく、
変換先のソフト (今回は git) のプラグイン的なものを使って
変換元のソフト (今回は svn) の repository から取り出す、
という方法しかないようです。</p>

<h2>CloudCore VPS</h2>

<p><a href="http://www.cloudcore.jp/vps/develop/">開発者支援制度 &ndash; CloudCore VPS</a>
でサーバーを借りてみて、
テスト用の IRC サーバーを動かしています。</p>

<p>接続用の設定は
<a href="https://github.com/nadoka/nadokarc-example">nadokarc-example</a>
にあるので、適当に試したい時に使えると思います。</p>

<p>途中の経路の問題 (モバイルでモバイルルーターの接続が切れたとか?)
で、サーバーから応答がなくなったときに
nadoka さんの再接続がうまくいかないのを調査するのに使いたいと
思っているのですが、
切れた状況を再現する部分の作り込みがまだ出来ていないです。</p>

<p>ircd の設定は
<a href="https://github.com/nadoka/ansible-ircd">ansible-ircd</a>
のように ansible でやってみました。
SSL の証明書の問題などがあるので、
すべての情報を公開できるわけじゃないというのが難しいところです。</p>

<h2>まとめ的なもの</h2>

<p>長い間続いているといろいろあるものです。</p>

<p>小規模なプロジェクトなので、
いつも場当たり的な対応でなんとかなっていますが、
そういうのも良いんじゃないでしょうか。</p>

<p>とりあえず自分が使っている限りはリリースも続くと思いますし、
新しいバージョンの ruby への対応も続けていけると思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[githubでhttpsのURLを指定してもgitプロトコルやssh経由にする方法]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-28-git-insteadof.html"/>
    <updated>2013-11-28T22:22:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/git-insteadof</id>
    <content type="html"><![CDATA[<p>要約すると <code>url.&lt;base&gt;.inteadOf</code> や <code>url.&lt;base&gt;.pushInsteadOf</code>
を使えば良いという話です。
github 以外でも使えます。</p>

<!--more-->


<h2>設定例</h2>

<p>自分では今のところ、以下の設定にしています。</p>

<p>最初の
<code>[url "git@github.com:"]</code>
のセクションは URL の指定として
<code>https:</code> や <code>git:</code> を使っていても
<code>git push</code> のときには <code>ssh</code> 経由にする、
という意味になります。</p>

<p>次の
<code>[url "git://github.com/"]</code>
は、その他の <code>git fetch</code> や <code>git pull</code> の時は
<code>https:</code> の代わりに <code>git:</code> を使うという意味になります。</p>

<figure class='code'><figcaption><span>~/.gitconfig</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[url &quot;git@github.com:&quot;]</span>
</span><span class='line'>  <span class="na">pushInsteadOf</span> <span class="o">=</span> <span class="s">git://github.com/</span>
</span><span class='line'><span class="s">  pushInsteadOf = https://github.com/</span>
</span><span class='line'><span class="k">[url &quot;git://github.com/&quot;]</span>
</span><span class='line'>  <span class="na">insteadOf</span> <span class="o">=</span> <span class="s">https://github.com/</span>
</span></code></pre></td></tr></table></div></figure>


<h2>pushInsteadOf なしの場合</h2>

<p><code>pushInsteadOf</code> を指定せずに <code>insteadOf</code> だけの場合は
<code>git push</code> の時も <code>insteadOf</code> の設定が使われます。</p>

<p>例えば設定例とは逆に、
proxy を通さないといけないとかの理由で
すべて https に統一したいのなら
以下のような設定になると思います。</p>

<figure class='code'><figcaption><span>~/.gitconfig</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[url &quot;https://github.com/&quot;]</span>
</span><span class='line'>  <span class="na">insteadOf</span> <span class="o">=</span> <span class="s">git@github.com:</span>
</span><span class='line'><span class="s">  insteadOf = git://github.com/</span>
</span></code></pre></td></tr></table></div></figure>


<h2>コマンドでの設定方法</h2>

<p><code>git config</code> コマンド経由で <code>pushInsteadOf</code> を設定するなら、
以下のように指定します。</p>

<p><code>~/.gitconfig</code> に <code>github.token</code> などの秘密にすべき情報が入っていて
共有しにくい時にはコマンドで設定できた方が便利です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">GITHUB_URL_PREFIX</span><span class="o">=</span><span class="s2">&quot;url.git@github.com:&quot;</span>
</span><span class='line'>git config --global --remove-section <span class="s2">&quot;$GITHUB_URL_PREFIX&quot;</span> <span class="o">||</span> :
</span><span class='line'>git config --global       <span class="s2">&quot;$GITHUB_URL_PREFIX&quot;</span>.pushInsteadOf <span class="s2">&quot;git://github.com/&quot;</span>
</span><span class='line'>git config --global --add <span class="s2">&quot;$GITHUB_URL_PREFIX&quot;</span>.pushInsteadOf <span class="s2">&quot;https://github.com/&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>設定確認方法</h2>

<p>実際にどういう URL が使われるのかは
<code>git remote -v</code>
で確認できます。</p>

<p><code>.git/config</code> の <code>remote</code> の <code>url</code> と見比べると
ちゃんと設定が反映されていることがわかると思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> git remote -v
</span><span class='line'><span class="go">origin   git://github.com/znz/rbenv-plug.git (fetch)</span>
</span><span class='line'><span class="go">origin   git@github.com:znz/rbenv-plug.git (push)</span>
</span><span class='line'><span class="gp">$</span> cat .git/config
</span><span class='line'><span class="go">[core]</span>
</span><span class='line'><span class="go"> repositoryformatversion = 0</span>
</span><span class='line'><span class="go"> filemode = true</span>
</span><span class='line'><span class="go"> bare = false</span>
</span><span class='line'><span class="go"> logallrefupdates = true</span>
</span><span class='line'><span class="go"> ignorecase = true</span>
</span><span class='line'><span class="go"> precomposeunicode = false</span>
</span><span class='line'><span class="go">[remote &quot;origin&quot;]</span>
</span><span class='line'><span class="go"> url = https://github.com/znz/rbenv-plug.git</span>
</span><span class='line'><span class="go"> fetch = +refs/heads/*:refs/remotes/origin/*</span>
</span><span class='line'><span class="go">[branch &quot;master&quot;]</span>
</span><span class='line'><span class="go"> remote = origin</span>
</span><span class='line'><span class="go"> merge = refs/heads/master</span>
</span></code></pre></td></tr></table></div></figure>


<h2>URL の選ばれ方</h2>

<p>github の URL で説明していますが、
git の機能なので他の URL でも当然使えます。</p>

<p>URL は最初の部分だけ見て、最長一致するものが使われるようです。
git 1.8.4.3 の <code>git config --help</code> に
<code>When more than one insteadOf strings match a given URL, the longest match is used.</code>
と書いてあります。</p>

<h2>まとめ</h2>

<p><code>~/.gitconfig</code> での記述例の話はよくあるのですが、
コマンドでの設定方法とか、
設定の確認方法を見かけたことがなかったので、
まとめてみました。</p>

<p>そして github 以外でも使えるという話も付け加えておきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[旧暦を計算するgemを使った]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-26-qreki.html"/>
    <updated>2013-11-26T23:46:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/qreki</id>
    <content type="html"><![CDATA[<p><a href="https://forkwell.com/pub/github.com/ozamasa/qreki">https://forkwell.com/pub/github.com/ozamasa/qreki</a>
で知った
<a href="https://github.com/ozamasa/qreki">旧暦を計算するgem</a>
を使って旧暦表示を試してみました。</p>

<!--more-->


<p><a href="https://github.com/ozamasa/qreki">qreki</a>
の <code>README.md</code> には書いていませんが、
普通は
<code>require "qreki"</code>
も必要です。</p>

<p>例えば以下のように使えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;qreki&#39;</span>
</span><span class='line'><span class="n">q</span> <span class="o">=</span> <span class="no">Qreki</span><span class="o">.</span><span class="n">calc_from_date</span><span class="p">(</span><span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;旧暦</span><span class="si">#{</span><span class="n">q</span><span class="o">.</span><span class="n">year</span><span class="si">}</span><span class="s2">年</span><span class="si">#{</span><span class="n">q</span><span class="o">.</span><span class="n">uruu</span> <span class="p">?</span> <span class="s1">&#39;閏&#39;</span> <span class="p">:</span> <span class="kp">nil</span><span class="si">}#{</span><span class="n">q</span><span class="o">.</span><span class="n">month</span><span class="si">}</span><span class="s2">月</span><span class="si">#{</span><span class="n">q</span><span class="o">.</span><span class="n">day</span><span class="si">}</span><span class="s2">日(</span><span class="si">#{</span><span class="n">q</span><span class="o">.</span><span class="n">rokuyou</span><span class="si">}</span><span class="s2">)</span><span class="si">#{</span><span class="n">q</span><span class="o">.</span><span class="n">sekki</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>出力例としては <code>旧暦2013年10月24日(先負)</code> のようになります。
<code>Date.today</code> の代わりに <code>Time.now</code> のように <code>Time</code> オブジェクトも使えました。</p>

<p>実際には IRC の bot に使いました。
旧暦計算は自分で実装するのは面倒なので、
ライブラリがあるのは非常にありがたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[debianでpostfixと連携するvirtual hostではないmailmanの設定をした]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-24-debian-postfix-mailman.html"/>
    <updated>2013-11-24T19:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/debian-postfix-mailman</id>
    <content type="html"><![CDATA[<p>Debian で postfix と mailman を組み合わせて使う時に
<code>lists.example.net</code> のように ML 専用のサブドメインを使う場合は
<code>/etc/mailman/postfix-to-mailman.py</code> のコメントなどを参考にして
設定すれば良いのですが、
ドメインを分けずに他のローカル配送などと同じドメインで
ML を運用する設定の情報があまりなかったので、
どう設定したのかをまとめてみました。</p>

<p>要点としては <code>alias_maps</code> に追加するだけでした。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Debian GNU/Linux 7.2 (wheezy)</li>
<li>postfix 2.9.6-2</li>
<li>mailman 1:2.1.15-1</li>
</ul>


<h2>mailman のインストール</h2>

<p><a href="http://posokosi.seesaa.net/article/378457038.html">nginx + mailman でメーリングリスト: ぽそこし的日乗</a>
に書いてあるように、
なぜかインストール時の debconf の質問で設定した内容が反映されないので、
<code>dpkg-reconfigure mailman</code> で再設定する必要がありました。</p>

<p><code>Default language for Mailman</code> の設定だけなら
<code>/etc/mailman/mm_cfg.py</code> を直接変更でも良いのですが、
<code>Languages to support</code> で <code>ja (Japanese)</code> にチェックしたときに
生成されるファイルもあるので、
<code>dpkg-reconfigure mailman</code> で再設定するのが無難です。</p>

<h2>文字コードについて</h2>

<p>mailman の日本語の文字コードは未だに euc-jp なので、
文字コードを設定できる端末を使うか、
<a href="https://github.com/vmi/cocot">cocot</a>
で
<code>cocot -t utf-8 -p euc-jp ssh mlserver</code>
のように変換をするようにしておかないと文字化けして非常につらいです。</p>

<p><code>LANG=C</code> で mailman 関係のコマンドを実行しても
英語メッセージにはならないので、
注意が必要です。</p>

<h2>postfix の設定</h2>

<p>すでに <code>myhostname</code> とか <code>mydestination</code> に設定しているドメインに同居させるには
<code>alias_maps</code> に <code>hash:/var/lib/mailman/data/aliases</code> を追加するだけです。</p>

<p>具体的には
<code>alias_maps = hash:/etc/aliases</code>
という設定だったのなら、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias_maps = hash:/etc/aliases
</span><span class='line'> hash:/var/lib/mailman/data/aliases</span></code></pre></td></tr></table></div></figure>


<p>のように追加するだけです。
差分をとりやすいように別の行にするのが好みですが、
同じ行の末尾に追加でもかまいません。</p>

<h2>mm_cfg.py の設定</h2>

<h3>MTA</h3>

<p><code>newlist</code> で ML を作成する前に
<code>sudoedit /etc/mailman/mm_cfg.py</code> で
<code>MTA='Postfix'</code> を有効にしておきます。</p>

<p><code>newlist</code> の最後に
<code>/var/lib/mailman/bin/genaliases</code>
相当の処理が実行されるようなのですが、
<code>MTA='Postfix'</code> の設定をしておくと
<code>/var/lib/mailman/data/aliases*</code>
が自動で作成されるようになります。</p>

<p><code>MTA</code> の設定が無いと <code>aliases</code> に設定すべき内容を含むメッセージが表示されるだけでした。</p>

<h3>ML のデフォルト値</h3>

<p>以下のような感じで ML の設定のデフォルト値を設定しておくと
後から Web で設定変更する手間を省けます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEFAULT_SUBJECT_PREFIX = "[%(real_name)s:%%d] "
</span><span class='line'>DEFAULT_MSG_FOOTER = ""
</span><span class='line'>DEFAULT_REPLY_GOES_TO_LIST = 1
</span><span class='line'>DEFAULT_MAX_MESSAGE_SIZE = 0
</span><span class='line'>DEFAULT_LIST_ADVERTISED = No
</span><span class='line'>DEFAULT_PRIVATE_ROSTER = 2</span></code></pre></td></tr></table></div></figure>


<p>どんな設定項目があるのかは
<code>/usr/lib/mailman/Mailman/Defaults.py</code>
を参考にすれば良さそうです。</p>

<p><code>sudo -u list /var/lib/mailman/bin/config_list -o - mailman | iconv -f euc-jp -t utf-8 | pager</code>
のように既存の ML の設定を (Web で変更しつつ) 参考にするのも良さそうです。</p>

<h2>パーミッション修正</h2>

<p><code>sudo /var/lib/mailman/bin/check_perms -f</code>
でパーミッションの修正をします。
<code>/var/lib/mailman/messages/</code> の中身のパーミッションの修正があるので、
ほぼ必須だと思います。</p>

<p>最終的には 10 個残りましたが、
シンボリックリンクでリンク先のグループは問題ないようなので、
無視することにしました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo /var/lib/mailman/bin/check_perms -f
</span><span class='line'>/var/lib/mailman/bin bad group (has: root, expected list) (fixing)
</span><span class='line'>/var/lib/mailman/logs bad group (has: root, expected list) (fixing)
</span><span class='line'>/var/lib/mailman/cron bad group (has: root, expected list) (fixing)
</span><span class='line'>/var/lib/mailman/icons bad group (has: root, expected list) (fixing)
</span><span class='line'>/var/lib/mailman/Mailman bad group (has: root, expected list) (fixing)
</span><span class='line'>/var/lib/mailman/templates bad group (has: root, expected list) (fixing)
</span><span class='line'>/var/lib/mailman/mail bad group (has: root, expected list) (fixing)
</span><span class='line'>/var/lib/mailman/scripts bad group (has: root, expected list) (fixing)
</span><span class='line'>/var/lib/mailman/cgi-bin bad group (has: root, expected list) (fixing)
</span><span class='line'>/var/lib/mailman/locks bad group (has: root, expected list) (fixing)
</span><span class='line'>Problems found: 10
</span><span class='line'>Re-run as list (or root) with -f flag to fix</span></code></pre></td></tr></table></div></figure>


<h2>ML 作成</h2>

<p>mailman の依存で自動インストールされる <code>pwgen</code> を使って、
<code>pwgen -sB 20 1</code>
などでパスワードを生成して、
<code>sudo -u list $mlname mladmin@example.net $listpass</code>
のような感じで作成できます。</p>

<h2>その他の設定</h2>

<p>後は fml からのメールの移行とか Web 経由での設定をしていきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[postfixとmilter-managerの設定をした]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-23-postfix-and-milter-manager.html"/>
    <updated>2013-11-23T21:25:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/postfix-and-milter-manager</id>
    <content type="html"><![CDATA[<p>Debian 7.2 (amd64) のサーバーにメールサーバーの設定をしたところ、
<a href="http://milter-manager.sourceforge.net/">milter-manager</a>
関連と gmail への IPv6 経由でのメール送信関連でちょっとひっかかりましたが、
すぐに解決できました。</p>

<!--more-->


<h2>milter-manager の話</h2>

<p>まず <code>milter-manager</code> は
<a href="http://milter-manager.sourceforge.net/reference/ja/install-to-debian.html">Debianへインストール &ndash; milter manager</a>
の手順通りに設定してみたのですが、確認のところで、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ sudo -u postfix milter-test-server -s unix:/var/spool/postfix/milter-manager/milter-manager.sock
</span><span class='line'> status: temporary-failure
</span><span class='line'> elapsed-time: 0.007781 seconds</span></code></pre></td></tr></table></div></figure>


<p>のように <code>temporary-failure</code> になりました。
そこで依存しているデーモンを調べてみたところ、
<code>clamd</code> が起動していなかったので、</p>

<pre><code>sudo service clamav-daemon start
</code></pre>

<p>で起動した後、</p>

<pre><code>sudo service clamav-milter restart
</code></pre>

<p>で clamav-milter も再起動したら</p>

<pre><code>status: accept
</code></pre>

<p>になりました。</p>

<p>後で気付いたので、最初のインストール時のメッセージを
ちゃんと確認できていないのですが、
<code>/etc/init.d/clamav-daemon</code> の <code>start</code>
の処理に cvd ファイルなどの存在をチェックして起動を止める処理があるので、
<code>freshclam</code> の処理を待ってから起動しないとダメだったようです。</p>

<h2>gmail と IPv6 の話</h2>

<p><a href="http://ya.maya.st/d/201308c.html#s20130822_1">gmail の逆引き制限</a>
の人と同じように IPv6 で逆引き必須にするのは否定的なのですが、
それはおいといて、現実問題として送信できないのは困るので、
<code>smtp_address_preference = ipv4</code> の設定を追加しました。</p>

<p>その設定をする前にテストメールを送ったら、
以下のようなエラーメールが返ってきて、
エラーメッセージの中の URL が
<a href="http://www.postfix-jp.info/ML/arc-2.5/msg00237.html">以前ひっかかったとき</a>
とは変わっているということに気付きました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;自分のアドレス@gmail.com&gt; (expanded from &lt;自分@あるサーバー&gt;): host
</span><span class='line'>    gmail-smtp-in.l.google.com[2607:f8b0:4002:c01::1a] said: 550-5.7.1
</span><span class='line'>    [2401:xxxx:xxx:xxxx:xxx:xxx:xxx:xxx      16] Our system has detected
</span><span class='line'>    550-5.7.1 that this message does not meet IPv6 sending guidelines regarding
</span><span class='line'>    PTR 550-5.7.1 records and authentication. Please review 550-5.7.1
</span><span class='line'>    https://support.google.com/mail/?p=ipv6_authentication_error for more 550
</span><span class='line'>    5.7.1 information. e2si14078426yhm.125 - gsmtp (in reply to end of DATA
</span><span class='line'>    command)</span></code></pre></td></tr></table></div></figure>


<h2>余談</h2>

<p>以前はメールサーバーの spam 対策の設定は秘伝のたれ状態で
だんだんメンテナンスが難しくなってしまっていましたが、
spam 対策は milter-manager だったり、
firewall は <a href="packages.debian.org/ufw">ufw</a> だったり、
いろいろと共通で使えるものが増えてきて楽になってきたように思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[anyenvやrbenvのpluginsの更新などをしやすくするプラグインを作った]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-21-anyenv-rbenv-plugins.html"/>
    <updated>2013-11-21T18:25:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/anyenv-rbenv-plugins</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sstephenson/rbenv">rbenv</a>
には
<a href="https://github.com/rkh/rbenv-update">rbenv-update</a>
というプラグインがあって、アップデートだけは簡単にできるのに、
他の <code>git</code> の操作をまとめて実行するのが面倒なので、
まとめて実行できる
<a href="https://github.com/znz/rbenv-git">rbenv-git</a>
というプラグインを作りました。</p>

<p>それから
<a href="https://github.com/riywo/anyenv">anyenv</a>
の方でもすべての <code>**env</code> も含めてアップデートできると便利だと思い、
<a href="https://github.com/znz/anyenv-update">anyenv-update</a>
と
<a href="https://github.com/znz/anyenv-git">anyenv-git</a>
を作成しました。</p>

<!--more-->


<h2>インストール</h2>

<p>それぞれ <code>plugins</code> のディレクトリの中に <code>git clone</code> でとってくるだけです。</p>

<ul>
<li><code>git clone https://github.com/znz/rbenv-git.git $(rbenv root)/plugins/rbenv-git</code></li>
<li><code>git clone https://github.com/znz/anyenv-update.git $(anyenv root)/plugins/anyenv-update</code></li>
<li><code>git clone https://github.com/znz/anyenv-git.git $(anyenv root)/plugins/anyenv-git</code></li>
</ul>


<p><code>README</code> の方には <code>mkdir -p $(anyenv root)/plugins</code> も書いていますが、
git version 1.8.4.3 だと不要で、自動で親ディレクトリも作ってくれるようです。
git のどのバージョンからなのかわからないので、
<code>README</code> には <code>mkdir -p</code> を残しています。</p>

<h2>使い方</h2>

<h3>rbenv git</h3>

<p><code>rbenv</code> と <code>rbenv</code> のプラグインの <code>git</code> 操作をまとめて実行できます。</p>

<p><code>rbenv git pull</code> で <code>rbenv update</code> の代用が出来ます。
<code>rbenv update</code> だと <code>rbenv</code> 自体を homebrew で入れている時にも
<code>RBENV_ROOT</code> で <code>git</code> コマンドを実行してしまいますが、
<code>rbenv git</code> なら大丈夫です。</p>

<p><code>rbenv git gc</code> で cleanup も出来ます。</p>

<p><code>rbenv git remote -v</code> でどこからとってきたのか確認したり、
<code>rbenv git status</code> でローカルで何か変更しているかどうか確認したりも出来ます。</p>

<h3>anyenv update</h3>

<p><code>anyenv update</code> で</p>

<ul>
<li><code>anyenv</code></li>
<li><code>anyenv</code> のプラグイン</li>
<li><code>**env</code></li>
<li><code>**env</code> のプラグイン</li>
</ul>


<p>がアップデートできます。</p>

<p>git 管理ではないものは skip します。</p>

<h3>anyenv git</h3>

<p><code>rbenv git</code> と同様の操作が
<code>anyenv update</code> と同様の対象に
まとめて実行できます。</p>

<ul>
<li><code>anyenv git pull</code></li>
<li><code>anyenv git gc</code></li>
<li><code>anyenv git remote -v</code></li>
<li><code>anyenv git status</code></li>
</ul>


<p>など、
<code>git</code> の各種操作ができます。</p>

<h2>裏話</h2>

<p>最初は <code>rbenv update</code> のコードを fork しようとしていたのですが、
ライセンスが明記されていなかったので止めて、
他の MIT License と明示されているプラグインを主に参考にして作りました。
他にも <code>set -eo pipefail</code> というのは
<a href="https://github.com/progrium/dokku">dokku</a>
を参考にしました。</p>

<p>ライセンスが不明だと参考にするのにも困るので、
github のレポジトリを作成する時の LICENSE ファイルそのままだけでも良いので、
どういうライセンスにしたいのか明記されているとありがたいと思いました。</p>

<h2>追記</h2>

<p><code>rbenv update</code> だと <code>git pull</code> ではなく、毎回</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout master
</span><span class='line'>git fetch origin
</span><span class='line'>git pull origin master</span></code></pre></td></tr></table></div></figure>


<p>を実行していて遅いというのも <code>rbenv git</code> などを作った理由のひとつというのを
書き忘れていたので、追記しておきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 5 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-20-rubymotion-mokumoku-osaka.html"/>
    <updated>2013-11-20T21:54:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 4 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://connpass.com/event/3871/">第 5 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。</p>

<p>今回も東京と同時開催でしたが、
接続などはせずに終わってしまいました。</p>

<p>次回の
<a href="http://connpass.com/event/4211/">第 6 回 RubyMotion もくもく会 in Osaka</a>
は 12/26(木) になりました。</p>

<!--more-->


<h2>話に出たもの</h2>

<p>話に出てきたサイトなどのメモです。</p>

<ul>
<li><a href="http://shin1x1.github.io/VagrantX/">http://shin1x1.github.io/VagrantX/</a>
のサイトのデザインを
<a href="https://wrapbootstrap.com/">https://wrapbootstrap.com/</a>
から選ぼうとしたが、結局 github のテンプレートのまま使うことにしたという話</li>
<li>昔は nib というバイナリだったけど今は xib という XML ファイルになっているという話</li>
<li><a href="http://www.rainymood.com/">Rainy Mood</a>
と
<a href="http://tadaya.net/blog/2012/12/01">多田屋のBGM</a>
の組み合わせが良いという話</li>
<li>アドベントカレンダーの話

<ul>
<li><a href="http://www.adventar.org/">Adventar</a></li>
<li><a href="http://qiita.com/advent-calendar/2013/rubymotion">RubyMotion Advent Calendar 2013</a></li>
</ul>
</li>
<li><a href="http://www.img2icnsapp.com/">Img2icns</a> の無料の方で OSX アプリのアイコンへの変換が出来そうという話</li>
<li>クラウドソーシングでアイコンを募集するのはどうかという話

<ul>
<li><a href="http://www.designclue.co/">designclue（デザインクルー） &ndash; デザインクラウドソーシング</a></li>
</ul>
</li>
</ul>


<h2>やっていたこと</h2>

<h3>www.ruby-lang.org</h3>

<p><a href="https://www.ruby-lang.org/ja/news/2013/09/28/design-contest/">www.ruby-lang.org のサイトデザイン募集</a>
の投票を webmaster でやっていて、締め切りが今日だったということで、
投票しようかと思っていたら、
締め切りが 9:00 20 Nov(JST) だったのに気付いて諦めました。
まだ集計前だったようなので、間に合いそうでしたが、
無理はしないということにしました。</p>

<p>ちなみに
<a href="https://github.com/ruby/www.ruby-lang.org/issues?labels=contest">応募は7件</a>
でした。</p>

<h3>notification</h3>

<p>最初は
<a href="https://github.com/Watson1978/notification">https://github.com/Watson1978/notification</a>
という OSX のサンプルをいじってみていました。</p>

<p><code>open ./build/MacOSX-10.8-Development/notification.app</code>
で開くと右上の通知はそもそも出てきているのかどうかわからない状態で終了してしまって、
通知センターを開くとちゃんと送れていることが確認できたり、
引数は <code>-psn_なんとか</code> という
Emacs.app のカレントディレクトリ問題を調べていた時に見かけたものが渡ってきていたりしたのがわかりました。</p>

<h3>Calc</h3>

<p><a href="https://github.com/HipByte/RubyMotionSamples">RubyMotionSamples</a>
の osx に Calc というのが追加されていたので、
それを試していました。</p>

<h2>デフォルトブラウザ設定</h2>

<p>デフォルトブラウザはどこで設定しているんだろうと思って、
<code>defaults read</code>
の出力を調べたりしていたら、
<code>LSSetDefaultHandlerForURLScheme</code>
と
<code>LSSetDefaultRoleHandlerForContentType</code>
で設定できるとわかったので、
RubyMotion の中から呼び出そうとしたのですが、
<code>NoMethodError</code>
になるだけで、
結局呼び出し方がわかりませんでした。</p>

<p>試したこととしては <code>Calc</code> のボタンと同じように
ボタンが押された時に呼ばれるメソッドの中で、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle_id</span> <span class="o">=</span> <span class="no">NSBundle</span><span class="o">.</span><span class="n">mainBundle</span><span class="o">.</span><span class="n">bundleIdentifier</span>
</span><span class='line'><span class="no">LSSetDefaultHandlerForURLScheme</span><span class="p">(</span><span class="s2">&quot;http&quot;</span><span class="p">,</span> <span class="n">bundle_id</span><span class="p">)</span> <span class="c1">#~&gt; NoMethodError</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように呼び出そうとしたところ、
<code>LSSetDefaultHandlerForURLScheme</code>
で
<code>NoMethodError</code>
になりました。</p>

<p>それから <code>Rakefile</code> の
<code>Motion::Project::App.setup do |app|</code>
のブロックで
<code>app.frameworks &lt;&lt; 'ApplicationServices'</code>
のように
<code>ApplicationServices</code>
フレームワークを追加というのも試してみたのですが、
変化はありませんでした。</p>

<p>そんな感じで手詰まっていたら時間が来て終了ということになりました。</p>

<p>確認したバージョンは以下の通りです。</p>

<ul>
<li>Mac OS X 10.8.5</li>
<li>Xcode 5.0.2</li>
<li>RubyMotion 2.14</li>
</ul>


<h3>解決</h3>

<p><code>CoreServices</code> が必要と教えてもらったので、
<code>app.frameworks &lt;&lt; 'CoreServices'</code>
も足してみたのですが、
<code>NoMethodError</code>
のままで動かず、
結局
RubyMotion を 2.15 に上げると直っていました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBoxでdokkuを試した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-15-dokku.html"/>
    <updated>2013-11-15T15:35:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dokku</id>
    <content type="html"><![CDATA[<p>VirtualBox の中に Ubuntu 13.04 を入れて
<a href="https://github.com/progrium/dokku">dokku</a>
を試してみました。</p>

<p><a href="http://blog.coiney.com/2013/08/10/create-my-own-heroku/">dokku + VirtualBoxで自分のHerokuを作る</a>
を参考にしたのですが、
情報が古いのか、
README
に書いてあるのとコマンドが違うところ
(<code>gitreceive</code> が <code>sshcommand</code> になっているなど)
があるので、
README
の手順を基準にするのが良さそうです。</p>

<!--more-->


<h2>対象バージョン</h2>

<p>dokku の README に Ubuntu 13.10 と docker の組み合わせは
まだ問題があり、
13.04 が推奨と書いてあったので、
13.04 を使いました。</p>

<ul>
<li>ホストOS : OS X 10.9</li>
<li>VirtualBox 4.3.2</li>
<li>ゲストOS : Ubuntu 13.04 (amd64)</li>
<li>lxc-docker : 0.6.6</li>
<li>dokku : 今の master ブランチ (59ef6510bc)</li>
</ul>


<h2>Ubuntu 13.04 (amd64) のインストール</h2>

<p>OS のインストールは自分がこうしたというだけの話なので、
興味が無ければ dokku のインストールまで飛ばしてください。</p>

<p>いつものように
<a href="http://ftp.jaist.ac.jp/pub/Linux/ubuntu-releases/">Ubuntu Releases の jaist ミラー</a>
から
<code>ubuntu-13.04-server-amd64.iso</code>
をダウンロードしてインストールしました。</p>

<p>最初のユーザーは <code>adminuser</code> で、
<code>ssh</code> は後で入れるので、
パッケージのチェックは入れずにインストールしました。
ディスクは多めに 20GB に設定した以外はほぼデフォルトでインストールしました。</p>

<h3>etckeeper の設定</h3>

<ul>
<li><code>sudo aptitude install etckeeper git</code> で <code>git</code> と一緒にインストールして <code>bzr</code> をインストールしないようにします。
<code>bzr</code> がないので自動での <code>etckeeper init</code> は失敗するので、手動で実行します。</li>
<li><code>EDITOR=vi sudoedit /etc/etckeeper/etckeeper.conf</code> で <code>VCS="git"</code> と <code>GIT_COMMIT_OPTIONS="-v"</code> に変更します。</li>
<li><code>sudo etckeeper init</code> で初期化します。</li>
<li><code>sudo etckeeper commit "Initial commit"</code> で今の状態をコミットしておきます。</li>
<li><code>(cd /etc/ &amp;&amp; sudo git gc)</code> で <code>git gc</code> しておきます。</li>
</ul>


<h3>ufw の設定</h3>

<ul>
<li><code>/etc/default/ufw</code> の <code>DEFAULT_FORWARD_POLICY</code> を <code>DROP</code> から <code>ACCEPT</code> に変更しておきます。
<code>DROP</code> のままだと後で <code>docker</code> の中から DNS の解決ができないのが原因で <code>! [remote rejected] master -&gt; master (pre-receive hook declined)</code> になります。</li>
<li><code>sudo ufw enable</code> で有効にします。</li>
<li><code>sudo ufw allow 22/tcp</code> で <code>ssh</code> を許可します。</li>
<li><code>sudo ufw allow 80/tcp</code> で <code>http</code> を許可します。</li>
<li><code>sudo etckeeper commit "enable ufw"</code> などで変更を保存します。</li>
</ul>


<h3>ssh の設定</h3>

<ul>
<li><code>sudo aptitude install ssh</code> でインストールします。</li>
<li><code>/etc/hosts.deny</code> に <code>ALL: ALL</code> を追加してデフォルト拒否にします。</li>
<li><code>/etc/hosts.allow</code> に <code>sshd: 127.0.0.1 [::1]</code>
を追加してローカルホストからの接続を許可します。</li>
<li><code>/etc/hosts.allow</code> に <code>sshd: 10.0.0.0/8</code> も追加して
VirtualBox のポートフォワーディング経由の接続を許可します。</li>
<li><code>/etc/ssh/sshd_config</code> (<code>ssh_config</code> ではない) に
<code>AllowUsers adminuser</code> と <code>AllowUsers dokku</code> を追加して、
特定のユーザーにだけ <code>ssh</code> で接続できるようにします。</li>
</ul>


<p>ホストOS側では Vagrant も使っていたので、
ssh 用の鍵としては
<a href="https://github.com/mitchellh/vagrant/tree/master/keys">Vagrant の Insecure Keypair</a>
を使いました。</p>

<p>そして
ホストOS側の
<code>~/.ssh/config</code>
の設定としては、
グローバルの設定も含めると以下のようにしました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ExitOnForwardFailure yes
</span><span class='line'>Ciphers aes256-ctr,aes192-ctr,aes128-ctr
</span><span class='line'>HashKnownHosts no
</span><span class='line'>NoHostAuthenticationForLocalhost yes
</span><span class='line'>ServerAliveInterval 30
</span><span class='line'>Host raring64
</span><span class='line'>  Ciphers arcfour256,arcfour128
</span><span class='line'>  HostName 127.0.0.1
</span><span class='line'>  User adminuser
</span><span class='line'>  Port 21304
</span><span class='line'>  UserKnownHostsFile /dev/null
</span><span class='line'>  StrictHostKeyChecking no
</span><span class='line'>  PasswordAuthentication no
</span><span class='line'>  IdentityFile ~/.vagrant.d/insecure_private_key
</span><span class='line'>  IdentitiesOnly yes</span></code></pre></td></tr></table></div></figure>


<p><code>Ciphers</code> はデフォルトはセキュアなものを使い、
VM 用には速いものを使うようにしています。</p>

<h2>VirtualBox のポートフォワーディング設定</h2>

<p>設定のネットワークのポートフォワーディングのところで、</p>

<ul>
<li>名前:SSH, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:21304, ゲストIP:空欄, ゲストポート:22</li>
<li>名前:Web, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:1384, ゲストIP:空欄, ゲストポート:80</li>
</ul>


<p>のような感じで設定しました。</p>

<p>13.10 にしたら</p>

<ul>
<li>名前:SSH, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:21310, ゲストIP:空欄, ゲストポート:22</li>
<li>名前:Web, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:1380, ゲストIP:空欄, ゲストポート:80</li>
</ul>


<p>とすれば良いかなと思っています。</p>

<h2>dokku のインストール</h2>

<p><a href="https://github.com/progrium/dokku/blob/1d3ae29ba6bed8e1c98991c15db45724508fae30/README.md">README</a>
に書いてあるように
<code>wget -qO- https://raw.github.com/progrium/dokku/master/bootstrap.sh | sudo bash</code>
などでインストールできます。</p>

<p>実際には、
内容を確認したかったので、
<code>wget</code> でダウンロードした後、
<code>sudo bash &lt; bootstrap.sh</code>
で実行しました。</p>

<p>時間は5分程度かかると書いてありますが、
実際には
<code>docker</code>
用のイメージのダウンロードに時間がかかるので、
ネットワークの速度の影響が大きいようです。</p>

<h2>dokku の設定</h2>

<h3>VHOST の設定</h3>

<p>参考にしたサイトと同じように <code>xip.io</code> を使いました。
ポートフォワーディング経由にしているので、
<code>127.0.0.1</code>
にしています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo deploy.127.0.0.1.xip.io | sudo tee /home/dokku/VHOST</span></code></pre></td></tr></table></div></figure>


<h3>ssh 公開鍵の追加</h3>

<p><code>ssh</code>
の接続は Vagrant と共通の鍵を使うことにしたので、
<code>/home/adminuser/.ssh/authorized_keys</code>
には <code>vagrant.pub</code> と同じ内容が入っています。</p>

<p>この鍵をそのまま <code>dokku</code> の方に登録しました。</p>

<p>ここもゲストOS側での作業になります。
README の手順では <code>ssh</code> 経由で <code>sudo</code> を実行しています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat ~/.ssh/authorized_keys | sudo sshcommand acl-add dokku vagrant</span></code></pre></td></tr></table></div></figure>


<p>この手順で追加した公開鍵は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo sshcommand acl-remove dokku vagrant</span></code></pre></td></tr></table></div></figure>


<p>で削除できます。</p>

<p>他の公開鍵を追加する時は <code>vagrant</code> の部分を変更しておかないと
<code>acl-remove</code> でまとめて削除されてしまいます。</p>

<h2>アプリケーションの deploy</h2>

<p>問題なく設定できていれば以下で deploy できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/heroku/node-js-sample
</span><span class='line'>cd node-js-sample
</span><span class='line'>git remote add raring64 dokku@raring64:node-js-app
</span><span class='line'>git push raring64 master</span></code></pre></td></tr></table></div></figure>


<p>エラーになったときはログをみたり、
<code>dmesg</code>
を見たりして原因を調べてください。</p>

<p>正常に deploy できていれば
<code>http://node-js-app.deploy.127.0.0.1.xip.io:1384</code>
で <code>Hello World!</code> と表示されます。</p>

<h2>リモートからの dokku コマンド</h2>

<p>README には <code>$ dokku run node-js-app ls -alh</code> と書いてあり、
ホストOS側には <code>dokku</code> コマンドはないので、
どうすればいいのか悩んだのですが、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ssh dokku@raring64 run node-js-app ls -alh</span></code></pre></td></tr></table></div></figure>


<p>のように <code>git push</code> に使う <code>ssh</code> 経由で
<code>dokku</code> コマンドが実行されているのを使えました。</p>

<p>入力待ちになってしまうようで、
<code>control+D</code> で <code>EOF</code> を入力するなどしないと
ホストOS側のプロンプトに戻ってこないので、
想定された使い方ではなさそうな感じです。</p>

<p>他にも</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ssh dokku@raring64 delete node-js-app</span></code></pre></td></tr></table></div></figure>


<p>でアプリケーションの削除もできました。
heroku と違って確認なしにいきなり削除されてしまうので注意が必要です。</p>

<p>どんなコマンドが実行できるのかは <code>dokku help</code> 相当の</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ssh dokku@raring64 help</span></code></pre></td></tr></table></div></figure>


<p>で一覧が出てきます。</p>

<p>普段使いそうなのは <code>config</code> 関連と <code>logs</code> だと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS XでのIME制御についての考察]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-14-macosx-ime.html"/>
    <updated>2013-11-14T02:24:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/macosx-ime</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2013-11-12-cocoa-emacs-ime.html">Cocoa Emacs のインラインパッチ関連の設定</a>
の時や
<a href="http://blog.n-z.jp/blog/2013-11-13-tty-ime.html">iTerm2 で IME 制御シーケンスがきかないのを調べた</a>
時にも気になったのですが、
Mac の IME に open/close という概念はあるのかという話です。</p>

<!--more-->


<h2>IME の開閉状態?</h2>

<p>iBus 1.5 関連の記事の
<a href="http://www.kaoriya.net/blog/2013/10/18/">iBusがクソになった理由 — KaoriYa</a>
で知ったのですが、
Mac OS X は IME のオン・オフのような状態の切り替えではなく、
「ことえりのひらがな」とか
「ことえりのカタカナ」とか
「ことえりの英字」とか
のようなIMEの種類を切り替えて入力するようになっています。</p>

<p>この考え方と開閉状態しか考慮していない二値的な制御シーケンスは相性が悪いのではないかと思いました。</p>

<h2>Cocoa Emacs のインラインパッチでは?</h2>

<p>Cocoa Emacs のインラインパッチをよく見ると
<code>mac-toggle-input-source</code>
という関数があって、
<code>(mac-toggle-input-source nil)</code>
で IME オフ相当に、
<code>(mac-toggle-input-source t)</code>
で IME オン相当にできるようなので、
対応は不可能ではないのかもしれません。</p>

<h2>端末の制御シーケンスでは?</h2>

<p><a href="http://ttssh2.sourceforge.jp/manual/ja/about/ctrlseq.html">TeraTerm Pro の対応制御シーケンス</a>
には以下の3種類の IME 関連の制御シーケンスがあります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  CSI &lt; r    TTIMERSIME の開閉状態を復元する。
</span><span class='line'>  CSI &lt; s    TTIMESVIME の開閉状態を保存する。
</span><span class='line'>  CSI &lt; Ps t TTIMESTIME の開閉状態を設定する。省略時の Ps の値は 0。
</span><span class='line'>               Ps = 0      IME を閉じる。
</span><span class='line'>                  = 1      IME を開く。</span></code></pre></td></tr></table></div></figure>


<p>この中の <code>TTIMESTIME</code> の <code>Ps</code> を拡張して、
2 以上も受け付けるようにして、
(別の状態が不可能なら 1 と同じ挙動で)
可能ならカタカナ入力などの別の IME の状態を設定できるようにするという案を思いつきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[launchdでdistnotedを定期的に終了させる]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-13-killall-distnoted-periodically.html"/>
    <updated>2013-11-13T18:23:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/killall-distnoted-periodically</id>
    <content type="html"><![CDATA[<p>Mac OS X 10.9 Mavericks で気がつくと
<code>distnoted</code> というプロセスのメモリ消費が増えて
大変なことになっていることがあって、
気がついた時は手動で <code>killall distnoted</code> で対処したり、
OS 自体を再起動したりしていました。</p>

<p>たまに気がつかないうちに大量にメモリを消費して、
確認のためのアクティビティモニタを開くのも大変なことがあったので、
さすがにまずいと思って <code>launchd</code> で定期的に実行するようにしました。</p>

<!--more-->


<h2>distnoted とは?</h2>

<p>man によると <code>distributed notification server</code> というものらしいのですが、
詳細はよくわかりませんでした。</p>

<p>man には自動で起動するものなので、
手動で起動するものではないとは書いてありました。</p>

<p>必要に応じて自動で起動してくるので、
<code>killall</code> などで止めてしまっても問題が無いという情報は
どこかでみかけました。</p>

<p><code>ps</code> でプロセスを確認すると <code>root</code> 権限で
<code>/usr/sbin/distnoted daemon</code> が動いていて、
他にいくつかの
<code>/usr/sbin/distnoted agent</code>
がユーザー権限で動いていました。
そのうちの1個がログインしたユーザーの権限で動いていて、
それがメモリを大量に消費していて、
<code>killall distnoted</code>
ではそのプロセスだけを終了させています。</p>

<h2>launchd による定期実行</h2>

<p><code>launchd</code> で定期的に実行するには</p>

<figure class='code'><figcaption><span>~/Library/LaunchAgents/local.killall.distnoted.plist</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>Label<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>local.killall.distnoted<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>ProgramArguments<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>/usr/bin/killall<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>distnoted<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>StartInterval<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;integer&gt;</span>600<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>という内容のファイルを
<code>~/Library/LaunchAgents/local.killall.distnoted.plist</code>
に作成して
<code>launchctl load ~/Library/LaunchAgents/local.killall.distnoted.plist</code>
で反映します。</p>

<p>設定を変更したときは</p>

<figure class='code'><figcaption><span>~/Library/LaunchAgents/local.killall.distnoted.plist</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>launchctl unload ~/Library/LaunchAgents/local.killall.distnoted.plist
</span><span class='line'>launchctl load ~/Library/LaunchAgents/local.killall.distnoted.plist
</span></code></pre></td></tr></table></div></figure>


<p>で反映します。</p>

<p><code>StartInterval</code> は秒単位なので <code>600</code> だと10分間隔です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iTerm2でのIME制御がきかない]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-13-tty-ime.html"/>
    <updated>2013-11-13T00:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/tty-ime</id>
    <content type="html"><![CDATA[<p>iTerm2 Build 1.0.0.20131109 で確認しました。</p>

<p><a href="http://ttssh2.sourceforge.jp/manual/ja/about/ctrlseq.html">TeraTerm Pro の対応制御シーケンス</a>
や
<a href="http://nanno.dip.jp/softlib/man/rlogin/ctrlcode.html">RLogin の対応している制御コード一覧</a>
には IME の状態制御があります。</p>

<p>iTerm2 はオプションでその制御シーケンスを受け付けるようには出来るのですが、
現状は無視するだけのようです。</p>

<!--more-->


<h2>制御シーケンス</h2>

<p>TeraTerm Pro 由来で RLogin も対応したものらしいです。
具体的なシーケンスとしては
<a href="http://ttssh2.sourceforge.jp/manual/ja/about/ctrlseq.html">TeraTerm Pro の対応制御シーケンス</a>
から引用すると、
次の3種類になります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  CSI &lt; r    TTIMERSIME の開閉状態を復元する。
</span><span class='line'>  CSI &lt; s    TTIMESVIME の開閉状態を保存する。
</span><span class='line'>  CSI &lt; Ps t TTIMESTIME の開閉状態を設定する。省略時の Ps の値は 0。
</span><span class='line'>               Ps = 0      IME を閉じる。
</span><span class='line'>                  = 1      IME を開く。</span></code></pre></td></tr></table></div></figure>


<h2>iTerm2 の対応</h2>

<p><a href="https://github.com/gnachman/iTerm2">https://github.com/gnachman/iTerm2</a>
の
<a href="https://github.com/gnachman/iTerm2/blob/f47b1f815c54bb7d61adb3917a9a742c0e5cb703/VT100Terminal.m#L575">VT100Terminal.m</a>
を見るとわかるのですが、
制御シーケンスの存在は認識しているようです。
その処理で呼ばれているところを追いかけてみると、
現状はただ無視しているだけでした。</p>

<p>このあたりのコードは設定で
<code>Profiles</code> の <code>Terminal</code> タブの中にある
<code>Use modern parser (experimental)</code>
にチェックを入れないと使われないようで、
チェックなしの状態で
<code>ruby -e 'puts "\e[&lt;1t"</code>
とか実行しても
<code>&lt;1t</code>
と出るだけで何も起きませんでした。
チェックを入れると <code>puts</code> で自動的に入る改行だけになりましたが、
IME の状態に変化はありませんでした。</p>
]]></content>
  </entry>
  
</feed>
