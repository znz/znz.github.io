<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-08-16T22:59:23+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[octopress をアップデートした]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-16-update-octopress.html"/>
    <updated>2014-08-16T22:26:34+09:00</updated>
    <id>http://blog.n-z.jp/blog/update-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org/docs/updating/" title="Updating Octopress">Updating Octopress</a> を参考にして octopress をアップデートしてみました。</p>

<!--more-->


<h2>更新をマージ</h2>

<p><code>git pull octopress master</code> でマージしました。
conflict したらがんばって修正してから <code>git commit</code> します。</p>

<p>久しぶりに更新すると <code>_config.yml</code> がひっかかりやすいと思いますが、変更は少ないのでマージしやすいと思います。</p>

<h2>gem の更新</h2>

<p><code>bundle install</code> か <code>bundle update</code> で更新します。</p>

<p><code>Gemfile.lock</code> が <code>.gitignore</code> に入って octopress master からは消されてしまったので、
<code>bundle update</code> で動かなくなったときに戻せるように、
<code>git add -f Gemfile.lock</code> で自分のレポジトリでは追加しておくのも良いかもしれません。</p>

<h2>テンプレートのソースの更新</h2>

<p><code>rake update_source</code> で更新します。
カスタマイズしていると戻ってしまうので、がんばって再適用します。</p>

<p>zenback 対応の追加などの <code>_config.yml</code> の <code>default_asides</code> などでは対応しきれないカスタマイズが戻ってしまうので、
変更し直しました。</p>

<h2>テンプレートのスタイルの更新</h2>

<p><code>rake update_style</code> は特に何も変化がありませんでした。</p>

<h2><code>*.old</code> の削除</h2>

<p>テンプレートの更新でバックアップとして作成される <code>source.old/</code> と <code>sass.old/</code> は更新後には不要なので削除します。</p>

<h2>Build Warning の対処</h2>

<p>更新後に</p>

<pre><code> Build Warning: Layout 'nil' requested in blog/categories/octopress/atom.xml does not exist.
</code></pre>

<p>のような警告が出るようになってそのうち対処されると思っていたら、
<a href="http://www.bravo-kernel.com/blog/2014/08/how-to-fix-octopress-build-warning-layout-nil-requested/" title="How to fix Octopress build warning Layout nil requested - Bravo Kernel">How to fix Octopress build warning Layout nil requested - Bravo Kernel</a>
に書いてあるように</p>

<pre><code> layout: nil
</code></pre>

<p>を</p>

<pre><code> layout: null
</code></pre>

<p>にするという修正で対応が入ったのですが、
<code>source/_includes/custom/category_feed.xml</code>
は <code>source/_includes/custom/</code> 以下なので自分で修正する必要がありました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R と Ruby によるデータ解析入門　読書会　第3回に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-16-amagasakirb.html"/>
    <updated>2014-08-16T13:05:27+09:00</updated>
    <id>http://blog.n-z.jp/blog/amagasakirb</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/event/index/202642/" title="8月16日 R と Ruby によるデータ解析入門　読書会　第3回(兵庫県)">8月16日 R と Ruby によるデータ解析入門　読書会　第3回(兵庫県)</a>
に参加しました。
今回は7章から最後まででした。</p>

<p>次回は9月27日(土)です。</p>

<!--more-->


<h2>メモ</h2>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873116155" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>以下今回のメモです。</p>

<ul>
<li>Mac の Spotlight 便利</li>
<li>Windows 7 などの検索も便利</li>
<li>WAV ファイルはリトルエンディアンとビッグエンディアンが混在

<ul>
<li>ビッグエンディアンの部分は文字列でリトルエンディアンのところは数値というだけに見える</li>
</ul>
</li>
<li><a href="https://github.com/setoyama60jp/everyday">https://github.com/setoyama60jp/everyday</a> に書籍中のソースコード</li>
<li>p.196 泊数 → 拍数 ?</li>
<li>p.198 GraphicsMagic → GraphicsMagick ?</li>
<li>RMagic → RMagick ?</li>
<li>Boid の 3 つのルールを知っていた or 知らなかった</li>
<li>8 章は R が出てこなかった</li>
<li>p.218 case の when のところにせめてインデントがほしい</li>
<li>いろいろとコーディングスタイルに突っ込みが入っていた</li>
<li>寿命は一定ではなく死ぬ確率があがっていくようにした方が良いのではないか</li>
</ul>


<h2>次回の本候補</h2>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4797380357" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>可能性がありそうなものからなさそうなものまで、いろいろと候補が挙がりましたが、「Rubyによるクローラー開発技法」に決まりました。</p>

<ul>
<li><a href="http://www.amazon.co.jp/gp/product/4797380357/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4797380357&amp;linkCode=as2&amp;tag=znz-22">Rubyによるクローラー開発技法</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4797380357" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.co.jp/gp/product/4873116767/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873116767&amp;linkCode=as2&amp;tag=znz-22">ハイパフォーマンス ブラウザネットワーキング ―ネットワークアプリケーションのためのパフォーマンス最適化</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4873116767" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />は cuzic さんが既読ということで候補から外れました。</li>
<li><a href="http://www.amazon.co.jp/gp/product/4048660683/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4048660683&amp;linkCode=as2&amp;tag=znz-22">フルスクラッチから1日でCMSを作る シェルスクリプト高速開発手法入門</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4048660683" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.co.jp/gp/product/4873116899/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873116899&amp;linkCode=as2&amp;tag=znz-22">Haskellによる並列・並行プログラミング</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4873116899" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />は Haskell をそんなにわかっている人がいないということで候補から外れました。</li>
<li><a href="http://www.amazon.co.jp/gp/product/427405019X/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=427405019X&amp;linkCode=as2&amp;tag=znz-22">新装版 リファクタリング―既存のコードを安全に改善する― (OBJECT TECHNOLOGY SERIES)</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=427405019X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> は流れで出てきただけだったのか、最終候補には残りませんでした。</li>
<li><a href="http://www.amazon.co.jp/gp/product/4274069125/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4274069125&amp;linkCode=as2&amp;tag=znz-22">すごいErlangゆかいに学ぼう!</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4274069125" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />も Erlang だからという理由で候補から外れました。</li>
<li><a href="http://www.amazon.co.jp/gp/product/4873116694/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873116694&amp;linkCode=as2&amp;tag=znz-22">アルゴリズムパズル ―プログラマのための数学パズル入門</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4873116694" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />や<a href="http://www.amazon.co.jp/gp/product/4774162531/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774162531&amp;linkCode=as2&amp;tag=znz-22">プログラマのためのコードパズル ~JavaScriptで挑むコードゴルフとアルゴリズム</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4774162531" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />は予習が必要そうということで候補から外れました。</li>
<li><a href="http://www.amazon.co.jp/gp/product/4873116600/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873116600&amp;linkCode=as2&amp;tag=znz-22">JavaScriptで学ぶ関数型プログラミング</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4873116600" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />も流れで出てきただけだったので、最終候補には残りませんでした。</li>
<li><a href="http://www.amazon.co.jp/gp/product/4873116341/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873116341&amp;linkCode=as2&amp;tag=znz-22">入門 データ構造とアルゴリズム</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4873116341" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />も流れで出てきただけだったので、最終候補には残りませんでした。</li>
<li><a href="http://www.amazon.co.jp/gp/product/4873116813/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873116813&amp;linkCode=as2&amp;tag=znz-22">オブジェクト指向JavaScriptの原則</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4873116813" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />も流れで出てきただけだったので、最終候補には残りませんでした。</li>
<li><a href="http://www.amazon.co.jp/gp/product/4873113911/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873113911&amp;linkCode=as2&amp;tag=znz-22">JavaScript: The Good Parts ―「良いパーツ」によるベストプラクティス</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4873113911" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />も流れで出てきただけだったので、最終候補には残りませんでした。</li>
<li><a href="http://www.amazon.co.jp/gp/product/4873101662/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873101662&amp;linkCode=as2&amp;tag=znz-22">パターン認識と機械学習の学習―ベイズ理論に挫折しないための数学</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4873101662" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />

<ul>
<li>同じ ISBN で第2版として黒い表紙ではなく黄色い表紙の本が出ているそうです。</li>
<li>PRML (パターン認識と機械学習) をいきなりは難しいのでこれはどうかという話が出ましたが、 <a href="https://github.com/herumi/prml">https://github.com/herumi/prml</a> を git clone するなどして main.pdf を確認したところ、難しすぎるということで候補から外れました。</li>
</ul>
</li>
<li><a href="http://www.amazon.co.jp/gp/product/432011048X/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=432011048X&amp;linkCode=as2&amp;tag=znz-22">とある弁当屋の統計技師(データサイエンティスト) ―データ分析のはじめかた―</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=432011048X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />

<ul>
<li><a href="http://www.amazon.co.jp/gp/product/432011082X/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=432011082X&amp;linkCode=as2&amp;tag=znz-22">とある弁当屋の統計技師(データサイエンティスト) 2 ―因子分析大作戦―</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=432011082X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />という続編も出ていて、良さそうな本だと思いましたが、一人でも読めそうということで候補から外れました。</li>
</ul>
</li>
<li><a href="http://www.amazon.co.jp/gp/product/4274069117/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4274069117&amp;linkCode=as2&amp;tag=znz-22">型システム入門 −プログラミング言語と型の理論−</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4274069117" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />は積ん読のままということで候補から外れました。</li>
<li><a href="http://www.amazon.co.jp/gp/product/4873116856/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873116856&amp;linkCode=as2&amp;tag=znz-22">戦略的データサイエンス入門 ―ビジネスに活かすコンセプトとテクニック</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4873116856" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />も流れで出てきただけだったので、最終候補には残りませんでした。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[boot2dockerでdockerのvolumeの保存状況を調べてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-14-boot2docker-volume.html"/>
    <updated>2014-08-14T20:36:13+09:00</updated>
    <id>http://blog.n-z.jp/blog/boot2docker-volume</id>
    <content type="html"><![CDATA[<p><a href="https://docs.docker.com/userguide/dockervolumes/" title="Managing data in containers - Docker Documentation">Managing data in containers - Docker Documentation</a>
に
「Volumes persist until no containers use them」
(ボリュームは使っているコンテナがなくなるまで存続する)
と書いてあり、実際のところどうなのかを boot2docker で確認してみました。</p>

<p>確認した範囲ではコンテナを消した後でも残っていました。
確認の仕方が悪いなど気づいた点があればコメントなり twitter で指摘などをよろしくお願いします。</p>

<!--more-->


<h2>確認バージョン</h2>

<ul>
<li>Mac OS X 10.9.4</li>
<li>VirtualBox 4.3.14</li>
<li>docker 1.1.2</li>
<li>boot2docker v1.1.2</li>
</ul>


<h2>クリーンな環境で起動する</h2>

<p>まず一度 boot2docker の環境を消してから、作成し直しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span>  boot2docker delete
</span><span class='line'><span class="gp">%</span>  boot2docker init
</span><span class='line'><span class="go">2014/08/14 20:35:43 Creating VM boot2docker-vm...</span>
</span><span class='line'><span class="go">2014/08/14 20:35:43 Apply interim patch to VM boot2docker-vm (https://www.virtualbox.org/ticket/12748)</span>
</span><span class='line'><span class="go">2014/08/14 20:35:43 Setting NIC #1 to use NAT network...</span>
</span><span class='line'><span class="go">2014/08/14 20:35:43 Port forwarding [ssh] tcp://127.0.0.1:2022 --&gt; :22</span>
</span><span class='line'><span class="go">2014/08/14 20:35:43 Port forwarding [docker] tcp://127.0.0.1:2375 --&gt; :2375</span>
</span><span class='line'><span class="go">2014/08/14 20:35:43 Setting NIC #2 to use host-only network &quot;vboxnet0&quot;...</span>
</span><span class='line'><span class="go">2014/08/14 20:35:43 Setting VM storage...</span>
</span><span class='line'><span class="go">2014/08/14 20:35:50 Done. Type `boot2docker up` to start the VM.</span>
</span><span class='line'><span class="gp">%</span> <span class="nb">export </span><span class="nv">DOCKER_HOST</span><span class="o">=</span>tcp://192.168.59.103:2375
</span><span class='line'><span class="gp">%</span> boot2docker up
</span><span class='line'><span class="go">2014/08/14 20:38:02 Waiting for VM to be started...</span>
</span><span class='line'><span class="go">...........</span>
</span><span class='line'><span class="go">2014/08/14 20:38:35 Started.</span>
</span><span class='line'><span class="go">2014/08/14 20:38:35 Your DOCKER_HOST env variable is already set correctly.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>volume 作成</h2>

<p><a href="https://github.com/boot2docker/boot2docker#folder-sharing" title="Folder sharing">Folder sharing</a>
の方法で volume を使ったコンテナを作成しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> docker run -v /data --name my-data busybox <span class="nb">true</span>
</span><span class='line'><span class="go">Unable to find image &#39;busybox&#39; locally</span>
</span><span class='line'><span class="go">Pulling repository busybox</span>
</span><span class='line'><span class="go">a9eb17255234: Download complete</span>
</span><span class='line'><span class="go">511136ea3c5a: Download complete</span>
</span><span class='line'><span class="go">42eed7f1bf2a: Download complete</span>
</span><span class='line'><span class="go">120e218dd395: Download complete</span>
</span></code></pre></td></tr></table></div></figure>


<h2>実体確認</h2>

<p><code>/</code> が入ると <code>docker inspect -f '{{ index .Volumes./data }}' my-data</code> のようには確認できないので、
<a href="https://github.com/docker/docker/issues/6966">https://github.com/docker/docker/issues/6966</a> を参考にしてボリュームの実体ディレクトリを確認しました。</p>

<p>一覧で見るだけなら <code>docker inspect -f '{{ .Volumes }}' my-data</code> で確認できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> docker inspect -f <span class="s1">&#39; index .Volumes &quot;/data&quot; }}&#39;</span> my-data
</span><span class='line'><span class="go">/mnt/sda1/var/lib/docker/vfs/dir/7625e8091bafdaa0cf1342bc33f29b2708e59b1388505fdd860960b09adf1846</span>
</span><span class='line'><span class="gp">%</span> docker inspect -f <span class="s1">&#39; .Volumes }}&#39;</span> my-data
</span><span class='line'><span class="go">map[/data:/mnt/sda1/var/lib/docker/vfs/dir/7625e8091bafdaa0cf1342bc33f29b2708e59b1388505fdd860960b09adf1846]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>適当なファイル作成</h2>

<p>目的のボリュームを確認しやすくするために適当なファイルを作成しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> docker run -it --rm --volumes-from my-data ubuntu
</span><span class='line'><span class="go">Unable to find image &#39;ubuntu&#39; locally</span>
</span><span class='line'><span class="go">Pulling repository ubuntu</span>
</span><span class='line'><span class="go">c4ff7513909d: Download complete</span>
</span><span class='line'><span class="go">511136ea3c5a: Download complete</span>
</span><span class='line'><span class="go">1c9383292a8f: Download complete</span>
</span><span class='line'><span class="go">9942dd43ff21: Download complete</span>
</span><span class='line'><span class="go">d92c3c92fa73: Download complete</span>
</span><span class='line'><span class="go">0ea0d582fd90: Download complete</span>
</span><span class='line'><span class="go">cc58e55aa5a5: Download complete</span>
</span><span class='line'><span class="gp">root@bf9a312400fa:/#</span> <span class="nb">echo </span>foo &gt; /data/foo.txt
</span><span class='line'><span class="gp">root@bf9a312400fa:/#</span> <span class="nb">exit</span>
</span><span class='line'><span class="go">exit</span>
</span></code></pre></td></tr></table></div></figure>


<h2>コンテナ削除</h2>

<p>連携しているコンテナを削除します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> docker ps -a
</span><span class='line'><span class="go">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span>
</span><span class='line'><span class="go">ddd48c305f62        busybox:latest      true                6 minutes ago       Exited (0) 6 minutes ago                       my-data</span>
</span><span class='line'><span class="gp">%</span>  docker ps -a -q <span class="p">|</span> xargs docker rm
</span><span class='line'><span class="go">ddd48c305f62</span>
</span></code></pre></td></tr></table></div></figure>


<h2>実体確認</h2>

<p><code>boot2docker ssh</code> で入って確認したところ、残っていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> boot2docker ssh
</span><span class='line'><span class="go">                        ##        .</span>
</span><span class='line'><span class="go">                  ## ## ##       ==</span>
</span><span class='line'><span class="go">               ## ## ## ##      ===</span>
</span><span class='line'><span class="go">           /&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\___/ ===</span>
</span><span class='line'><span class="go">      ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~</span>
</span><span class='line'><span class="go">           \______ o          __/</span>
</span><span class='line'><span class="go">             \    \        __/</span>
</span><span class='line'><span class="go">              \____\______/</span>
</span><span class='line'><span class="go"> _                 _   ____     _            _</span>
</span><span class='line'><span class="go">| |__   ___   ___ | |_|___ \ __| | ___   ___| | _____ _ __</span>
</span><span class='line'><span class="go">| &#39;_ \ / _ \ / _ \| __| __) / _` |/ _ \ / __| |/ / _ \ &#39;__|</span>
</span><span class='line'><span class="go">| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__|   &lt;  __/ |</span>
</span><span class='line'><span class="go">|_.__/ \___/ \___/ \__|_____\__,_|\___/ \___|_|\_\___|_|</span>
</span><span class='line'><span class="go">boot2docker: 1.1.2</span>
</span><span class='line'><span class="go">             master : 740106c - Thu Jul 24 03:24:10 UTC 2014</span>
</span><span class='line'><span class="gp">docker@boot2docker:~$</span> ls -al /mnt/sda1/var/lib/docker/vfs/dir/7625e8091bafdaa0cf1342bc33f29b2708e59b
</span><span class='line'><span class="go">1388505fdd860960b09adf1846</span>
</span><span class='line'><span class="go">ls: /mnt/sda1/var/lib/docker/vfs/dir/7625e8091bafdaa0cf1342bc33f29b2708e59b1388505fdd860960b09adf1846: Permission denied</span>
</span><span class='line'><span class="gp">docker@boot2docker:~$</span> sudo ls -al /mnt/sda1/var/lib/docker/vfs/dir/7625e8091bafdaa0cf1342bc33f29b270
</span><span class='line'><span class="go">8e59b1388505fdd860960b09adf1846</span>
</span><span class='line'><span class="go">total 12</span>
</span><span class='line'><span class="go">drwxr-xr-x    2 root     root          4096 Aug 14 11:52 .</span>
</span><span class='line'><span class="go">drwx------    4 root     root          4096 Aug 14 11:49 ..</span>
</span><span class='line'><span class="go">-rw-r--r--    1 root     root             4 Aug 14 11:52 foo.txt</span>
</span><span class='line'><span class="gp">docker@boot2docker:~$</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zshでfpathからwhichのように検索する話など]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-12-zsh-which-fpath.html"/>
    <updated>2014-08-12T23:08:30+09:00</updated>
    <id>http://blog.n-z.jp/blog/zsh-which-fpath</id>
    <content type="html"><![CDATA[<p>zsh で <code>PATH</code> から <code>which</code> コマンドや <code>type</code> コマンドで実行ファイルを検索するように <code>fpath</code> から <code>autoload</code> される関数の実体を探したいことがあります。
そういうときは <code>${^fpath}/cdr(N)</code> のように書けば検索できます。</p>

<!--more-->


<h2>解説</h2>

<p>まず
<code>setopt</code> の <code>RC_EXPAND_PARAM</code> が設定されていないときには <code>$fpath/cdr</code> で配列の最後だけに <code>/cdr</code> がつくので、
<code>${^spec}</code> を使ってすべてにつけるようにしています。</p>

<p>最後に <code>(N)</code> で存在するものだけ残すようにしています。</p>

<figure class='code'><figcaption><span>実行例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> <span class="nb">echo</span> <span class="k">${</span><span class="p">^fpath</span><span class="k">}</span>/cdr<span class="o">(</span>N<span class="o">)</span>
</span><span class='line'><span class="go">/usr/share/zsh/5.0.2/functions/cdr</span>
</span></code></pre></td></tr></table></div></figure>


<h2>PATH で後ろに隠れているコマンドも探す</h2>

<p><code>rbenv</code> を使っていると <code>PATH</code> の後ろに <code>/usr/bin/ruby</code> が隠されるなど、
同じコマンドが <code>PATH</code> に複数存在することがあります。</p>

<p>そういうときに zsh なら <code>${^path}/ruby(N)</code> で隠れているコマンドも含めて展開できます。</p>

<figure class='code'><figcaption><span>実行例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> <span class="nb">echo</span> <span class="k">${</span><span class="p">^path</span><span class="k">}</span>/ruby<span class="o">(</span>N<span class="o">)</span>
</span><span class='line'><span class="go">/Users/kazu/.rbenv/shims/ruby /usr/bin/ruby</span>
</span></code></pre></td></tr></table></div></figure>


<h2>zsh スクリプトでコマンドの存在を調べる</h2>

<p>シェルスクリプトの中で、
外部コマンドが実行できるかどうか調べるのに</p>

<pre><code>type peco &gt;/dev/null 2&gt;&amp;1
</code></pre>

<p>のように <code>type</code> コマンドで調べることがありますが、
zsh なら</p>

<pre><code>(( ${+commands[peco]} ))
</code></pre>

<p>のように <code>commands</code> という連想配列を調べるという方法が使えます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrantなどのローカルへのssh接続のみarcfour256で高速化する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-11-openssh-arcfour256.html"/>
    <updated>2014-08-11T21:53:54+09:00</updated>
    <id>http://blog.n-z.jp/blog/openssh-arcfour256</id>
    <content type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/rx7/20101025/p1" title="大容量ファイルのSCP転送を高速にする方法 - 元RX-7乗りの適当な日々">大容量ファイルのSCP転送を高速にする方法 - 元RX-7乗りの適当な日々</a>
をみて、安全な可能性が高い経路だけ <code>arcfour256</code> のような高速な <code>Ciphers</code> を使いたいと思って、そうなるように設定しました。</p>

<p><a href="http://blog.n-z.jp/blog/2013-11-15-dokku.html" title="VirtualBoxでdokkuを試した">VirtualBoxでdokkuを試した</a>
での設定は意図通りには動いていませんでした。</p>

<!--more-->


<h2>確認バージョン</h2>

<ul>
<li>Mac OS X 10.9.4</li>
<li>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011</li>
</ul>


<h2>OpenSSH の <code>~/.ssh/config</code> の設定例</h2>

<p>最初に例を出しておきます。
詳しいことは説明は後でしますが、
<code>Host *</code> の設定は例として書いているだけで、
書かないことを推奨します。</p>

<figure class='code'><figcaption><span>~/.ssh/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>HashKnownHosts no
</span><span class='line'>Host 127.0.0.1
</span><span class='line'>  Ciphers arcfour256,arcfour128
</span><span class='line'>Host *
</span><span class='line'>  Ciphers aes256-ctr,aes192-ctr,aes128-ctr
</span></code></pre></td></tr></table></div></figure>


<h3>設定の固まり (セクション)</h3>

<p><code>~/.ssh/config</code> の設定は <code>Host</code> で始まる行ごとの固まり (セクション) に分かれていて、
上の例の場合は <code>HashKnownHosts</code> が全体の設定、
次が <code>127.0.0.1</code> のみの設定、
最後が <code>*</code> つまりワイルドカードですべてのホストに対する設定になります。</p>

<h3>設定の優先順位</h3>

<p>最初に見つかった設定が使われます。
これが以前は勘違いしていた点で、
ホストごとの設定を優先したいのなら、
<code>Host</code> の上のファイルの冒頭には書かずに、
ファイルの最後に <code>Host *</code> で設定する必要があります。</p>

<p>さらに詳しい優先順位は <code>man ssh_config</code> で参照できますが、</p>

<ol>
<li>コマンドラインオプション</li>
<li>ユーザー設定 (<code>~/.ssh/config</code>)</li>
<li>システムの設定 (<code>/etc/ssh/ssh_config</code>)</li>
</ol>


<p>という順番で、その中で最初に見つかったものを使うようになっています。</p>

<p>つまり、ホストごとの設定はファイルの先頭に近い方に、
一般的な設定は最後に書く必要があります。</p>

<h2>Ciphers の一般設定</h2>

<p>デフォルトは <code>man</code> で確認すると
<code>aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour</code>
になっていて、
AES の CTR のビット数が多いものを優先するために上記の設定にしています。</p>

<p>設定するなら OS などの更新ごとに毎回ちゃんと <code>man</code> でデフォルトを確認すべきです。
よくわからないのなら、
<code>Host *</code> での設定はしない方が良いでしょう。</p>

<h2>127.0.0.1 向けの Ciphers 設定</h2>

<p>参考にしたサイトのコメントに「
<a href="http://d.hatena.ne.jp/rx7/20101025/p1#c1291741909" title="ただ、arcfourには別の問題が有るので、使わない方がいいです。 arcfour128/256はその問題の対処版なので、これらのみを使うようにした方がいいでしょう。">ただ、arcfourには別の問題が有るので、使わない方がいいです。 arcfour128/256はその問題の対処版なので、これらのみを使うようにした方がいいでしょう。</a>
」とあり、速度もほとんど変わらないので、
「arcfour128/256」だけ使う設定にしています。</p>

<h2>vagrant 用設定</h2>

<p><code>vagrant ssh --help</code> で追加のオプションが渡せるとわかったので、
<code>vagrant ssh -- -v</code> で接続時の状況を調べました。</p>

<p>コマンドラインオプションが優先されるということで、
<code>vagrant ssh -- -v -o Ciphers=arcfour256</code>
のように接続すると <code>arcfour256</code> になることが確認できました。</p>

<p>以前は <code>Host vagrant</code> で設定して <code>vagrant ssh</code> の代わりに <code>ssh vagrant</code> を使っていたのですが、
複数 <code>vagrant up</code> したときに最初に起動した VM のポート (2222) にしか接続できないという問題がありました。</p>

<p>そこで、他の VM のときにも使える設定を考えたところ、
<code>Host 127.0.0.1</code> でうまくいくことがわかりました。</p>

<h2>まとめ</h2>

<p>元々のデフォルトは時代に合わせて最適なものに更新されているので、
不用意に固定してしまうと
<a href="http://d.hatena.ne.jp/jovi0608/20140808/1407483168" title="OpenSSLの脆弱性(CVE-2014-3511)でTLSプロトコルの基礎を学ぶ - ぼちぼち日記">OpenSSLの脆弱性(CVE-2014-3511)でTLSプロトコルの基礎を学ぶ - ぼちぼち日記</a>
のように強いものに固定していたつもりが弱いものに固定されてしまうことになる可能性があるので注意が必要です。</p>

<p><code>127.0.0.1</code> 以外にも LAN 内のホストなど、経路の信頼性が比較的高くて高速に転送したい場合は <code>Host</code> 設定で <code>Ciphers arcfour256</code> を追加すると良いのではないでしょうか。</p>

<h2>参考 URL</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/rx7/20101025/p1" title="大容量ファイルのSCP転送を高速にする方法 - 元RX-7乗りの適当な日々">大容量ファイルのSCP転送を高速にする方法 - 元RX-7乗りの適当な日々</a></li>
<li><a href="http://tech.nitoyon.com/ja/blog/2013/01/11/github-clone-http/" title="GitHub で clone するときは SSH じゃなく HTTP を使ったほうが高速 - てっく煮ブログ">GitHub で clone するときは SSH じゃなく HTTP を使ったほうが高速 - てっく煮ブログ</a></li>
<li><a href="http://endoyuta.com/2014/03/12/github%E3%81%AEssh%E6%8E%A5%E7%B6%9A%E3%81%8C%E9%80%9F%E3%81%8F%E3%81%AA%E3%82%8B%E3%82%89%E3%81%97%E3%81%84/" title="githubのssh接続が速くなるらしい | Logicky Blog">githubのssh接続が速くなるらしい | Logicky Blog</a></li>
<li><a href="http://blog.eiel.info/blog/2013/11/09/no-mathcing-cipher-found-on-github/" title="GitHub で SSH 接続できなくなった。SSH をつかった場合に高速化する設定が原因だった。 - そんなこと覚えてない">GitHub で SSH 接続できなくなった。SSH をつかった場合に高速化する設定が原因だった。 - そんなこと覚えてない</a></li>
<li><a href="http://d.hatena.ne.jp/jovi0608/20140808/1407483168" title="OpenSSLの脆弱性(CVE-2014-3511)でTLSプロトコルの基礎を学ぶ - ぼちぼち日記">OpenSSLの脆弱性(CVE-2014-3511)でTLSプロトコルの基礎を学ぶ - ぼちぼち日記</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4.1 で jQuery Raty を使ってみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-09-jquery-raty.html"/>
    <updated>2014-08-09T19:37:53+09:00</updated>
    <id>http://blog.n-z.jp/blog/jquery-raty</id>
    <content type="html"><![CDATA[<p>Rails で星を使った評価付けを使いたかったので、
jQuery プラグインを探してみたところ、
<a href="http://wbotelhos.com/raty" title="jQuery Raty">jQuery Raty</a>
というのが良さそうだったので使ってみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>jQuery Raty v2.7.0</li>
<li>Ruby on Rails 4.1.4</li>
<li>Ruby 2.1.2</li>
</ul>


<h2>うまくいかなかった方法</h2>

<p><a href="http://rubygems.org/" title="RubyGems.org">RubyGems.org</a>
の方には古いバージョンしかなさそうだったので、
<a href="https://rails-assets.org/" title="Rails Assets">Rails Assets</a>
で最新バージョンを使おうと思い、
<code>Gemfile</code> に以下の設定をしたのですが、
<code>raty</code> のディレクトリ配置が特殊なのか、
うまくいきませんでした。</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rails-assets.org&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails-assets-raty&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>development 環境では動いた方法</h3>

<p>以下のように書くことで development 環境では動いたのですが、
capistrano で deploy した先では画像が表示されていませんでした。</p>

<figure class='code'><figcaption><span>app/assets/stylesheets/raty.css.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//=</span> <span class="nt">require</span> <span class="nt">raty</span><span class="o">/</span><span class="nt">lib</span><span class="o">/</span><span class="nt">jquery</span><span class="nc">.raty</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/assets/javascripts/raty.js.coffee.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>#= require raty/lib/jquery.raty
</span><span class='line'> $ -&gt;
</span><span class='line'>   $(&#39;.raty&#39;).raty
</span><span class='line'>     cancel   : true
</span><span class='line'>    cancelOff: &#39;&lt;%= image_path(&#39;raty/lib/images/cancel-off.png&#39;) %&gt;&#39;
</span><span class='line'>    cancelOn : &#39;&lt;%= image_path(&#39;raty/lib/images/cancel-on.png&#39;) %&gt;&#39;
</span><span class='line'>    starHalf : &#39;&lt;%= image_path(&#39;raty/lib/images/star-half.png&#39;) %&gt;&#39;
</span><span class='line'>    starOff  : &#39;&lt;%= image_path(&#39;raty/lib/images/star-off.png&#39;) %&gt;&#39;
</span><span class='line'>    starOn   : &#39;&lt;%= image_path(&#39;raty/lib/images/star-on.png&#39;) %&gt;&#39;
</span><span class='line'>    click: (score, event) -&gt;
</span><span class='line'>      raty = $(event.target).parent()
</span><span class='line'>      $(raty.data(&#39;field&#39;)).val(score)
</span><span class='line'>    score: -&gt;
</span><span class='line'>      $($(this).data(&#39;field&#39;)).val()
</span></code></pre></td></tr></table></div></figure>


<h2>うまくいった方法</h2>

<p><code>vendor/assets/stylesheets/jquery.raty.css</code> と
<code>vendor/assets/javascripts/jquery.raty.js</code> に
ダウンロードしたファイルをおいて、
<code>assets</code> も以下のように書き換えました。
画像も <code>vendor/assets/images/raty</code> においてもうまくいかなかったので、
<code>vendor/assets/images/raty</code> におきました。</p>

<p>Web フォントは今回は使っていないので、
考慮していません。
<code>starType</code> を <code>i</code> に変更しない限り使われないはずなので、
Web フォントを配置しなくても問題ないと思います。</p>

<figure class='code'><figcaption><span>app/assets/stylesheets/raty.css.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//=</span> <span class="nt">require</span> <span class="nt">jquery</span><span class="nc">.raty</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/assets/javascripts/raty.js.coffee.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>#= require jquery.raty
</span><span class='line'> $ -&gt;
</span><span class='line'>   $(&#39;.raty&#39;).raty
</span><span class='line'>     cancel   : true
</span><span class='line'>    cancelOff: &#39;&lt;%= image_path(&#39;raty/cancel-off.png&#39;) %&gt;&#39;
</span><span class='line'>    cancelOn : &#39;&lt;%= image_path(&#39;raty/cancel-on.png&#39;) %&gt;&#39;
</span><span class='line'>    starHalf : &#39;&lt;%= image_path(&#39;raty/star-half.png&#39;) %&gt;&#39;
</span><span class='line'>    starOff  : &#39;&lt;%= image_path(&#39;raty/star-off.png&#39;) %&gt;&#39;
</span><span class='line'>    starOn   : &#39;&lt;%= image_path(&#39;raty/star-on.png&#39;) %&gt;&#39;
</span><span class='line'>    click: (score, event) -&gt;
</span><span class='line'>      raty = $(event.target).parent()
</span><span class='line'>      $(raty.data(&#39;field&#39;)).val(score)
</span><span class='line'>    score: -&gt;
</span><span class='line'>      $($(this).data(&#39;field&#39;)).val()
</span></code></pre></td></tr></table></div></figure>


<h2>フォームでの使用例</h2>

<p>bootstrap 3.2.0 の <code>form-horizontal</code> を使っているので、
slim で以下のように使っています。</p>

<figure class='code'><figcaption><span>_form.html.slim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>.form-group
</span><span class='line'>  = f.label :readability, class: &quot;control-label col-md-2&quot;
</span><span class='line'>  .col-md-10
</span><span class='line'>    .raty.form-control data-field=&#39;#book_report_readability&#39;
</span><span class='line'>    = f.hidden_field :readability, class: &quot;form-control&quot;
</span></code></pre></td></tr></table></div></figure>


<h2>show での使用例</h2>

<p>以下のように <code>raty</code> の星を使って表示しています。</p>

<figure class='code'><figcaption><span>app/helpers/raty_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">RatyHelper</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">raty_stars</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">max</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span>
</span><span class='line'>      <span class="n">image_tag</span><span class="p">(</span><span class="s1">&#39;raty/star-on.png&#39;</span><span class="p">,</span> <span class="ss">alt</span><span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">*</span> <span class="n">n</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">image_tag</span><span class="p">(</span><span class="s1">&#39;raty/star-off.png&#39;</span><span class="p">,</span> <span class="ss">alt</span><span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">max</span><span class="o">-</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>      <span class="p">)</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[boot2docker で VM のファイルをコンテナやホストと共有する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-06-docker-volume.html"/>
    <updated>2014-08-06T23:17:27+09:00</updated>
    <id>http://blog.n-z.jp/blog/docker-volume</id>
    <content type="html"><![CDATA[<p>Mac OS X 上の <code>boot2docker</code> でホストとコンテナでファイルを共有する方法を試してみました。
さらに <code>boot2docker ssh</code> で入ったときにも見えるような設定でも試してみました。</p>

<!--more-->


<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/numa08/items/e52bd18611ac159af1ac" title="boot2dockerでコンテナからホストのファイルを参照する - Qiita">boot2dockerでコンテナからホストのファイルを参照する - Qiita</a></li>
<li><a href="https://github.com/boot2docker/boot2docker#folder-sharing" title="Folder sharing">Folder sharing</a></li>
<li><a href="https://docs.docker.com/userguide/dockervolumes/" title="Managing data in containers - Docker Documentation">Managing data in containers - Docker Documentation</a></li>
</ul>


<h2>対象バージョン</h2>

<ul>
<li>Mac OS X 10.9.4</li>
<li>VirtualBox 4.3.14</li>
<li>docker 1.1.2</li>
<li>boot2docker 1.1.2</li>
</ul>


<h2>実行コマンド</h2>

<ul>
<li><code>docker run -v /mnt/sda1/data:/data --name my-data busybox true</code> で共有ボリューム用コンテナ作成</li>
<li><code>docker run --rm -v /usr/local/bin/docker:/docker -v /var/run/docker.sock:/docker.sock svendowideit/samba my-data</code> で samba 起動</li>
<li><code>docker run -it --rm --volumes-from my-data ubuntu /bin/bash</code> で確認</li>
</ul>


<h3>共有ボリューム用コンテナ作成</h3>

<p><a href="http://blog.n-z.jp/blog/2013-12-24-docker-rm.html" title="Dockerで不要になったコンテナやイメージを削除する">Dockerで不要になったコンテナやイメージを削除する</a>
のように <code>docker ps -a -q | xargs docker rm</code> などで停止しているコンテナを削除してしまうと
<code>my-data</code> という名前を付けたデータ保存用のコンテナも消えてしまうので、
<code>boot2docker</code> では永続化されているパーティションの <code>/mnt/sda1</code> に <code>data</code> をおくことにしました。</p>

<p>run の時点で <code>/mnt/sda1/data</code> は自動作成されるので、
あらかじめ作っておく必要はありません。</p>

<p>間違えてコンテナを削除してしまった場合は
<code>docker run -v /mnt/sda1/data:/data --name my-data busybox true</code>
で作成し直せばデータは残ったまま <code>my-data</code> コンテナを再作成できます。</p>

<p>このやり方は docker を動かすホストに依存してしまうので、
一般には標準のボリュームコンテナを作成する方法の方がおすすめのようです。</p>

<h3>共有ボリューム用コンテナ再作成 (標準の方法の場合)</h3>

<p><code>--volumes-from</code> で指定した共有は使っているコンテナがなくなってしまっても内容が残っていますが、
名前で指定して取り出す方法がなくなってしまうように見えます。</p>

<p><code>my-data</code> コンテナを削除してしまった場合、
<code>--volumes-from my-data</code> は使えなくなるので、
<code>docker run --volumes-from samba-server --name my-data busybox true</code>
のように残っているコンテナを <code>--volumes-from</code> で指定して再作成すれば、
また <code>docker run -it --rm --volumes-from my-data ubuntu /bin/bash</code> のように
<code>--volumes-from</code> に <code>my-data</code> を指定できるようになります。</p>

<h3>samba 起動</h3>

<p><code>docker run --rm -v /usr/local/bin/docker:/docker -v /var/run/docker.sock:/docker.sock svendowideit/samba my-data</code>
で samba を起動します。</p>

<p><code>docker.sock</code> も渡しているので、多重起動しないように既存の <code>samba-server</code> は止めてくれるようです。</p>

<p>起動時に以下のようにホスト側からの接続方法の説明が出ます。</p>

<pre><code>% docker run --rm -v /usr/local/bin/docker:/docker -v /var/run/docker.sock:/docker.sock svendowideit/samba my-data
stopping and removing existing server
starting samba server container sharing my-data:/data

# run 'docker logs samba-server' to view the samba logs

================================================

Your data volume (/data) should now be accessible at \\&lt;docker ip&gt;\ as 'guest' user (no password)

For example, on OSX, using a typical boot2docker vm:
    goto Go|Connect to Server in Finder
    enter 'cifs://192.168.59.103
    hit the 'Connect' button
    select the volumes you want to mount
    choose the 'Guest' radiobox and connect

Or on Linux:
    mount -t cifs //192.168.59.103/data /mnt/data -o username=guest

Or on Windows:
    Enter '\\192.168.59.103\data' into Explorer
    Log in as Guest - no password
</code></pre>

<h3>samba に接続</h3>

<p><code>boot2docker ip</code> で IP アドレスを確認して、
<code>192.168.59.103</code> なら、
<code>Finder</code> の <code>サーバへ接続</code> (メニューの <code>移動</code> の <code>サーバーへ接続...</code>) を開いて、
サーバアドレスとして <code>cifs://192.168.59.103/data</code> を入力して <code>接続</code> します。
<code>ユーザの種類</code> は <code>ゲスト</code> を選んで <code>接続</code> します。
すると <code>/Volumes/data</code> で見えるようになります。</p>

<p>Linux なら <code>mount -t cifs //192.168.59.103/data /mnt/data -o username=guest</code> のようにマウントするそうです。</p>

<p>Windows ならエクスプローラーで <code>\\192.168.59.103\data</code> にパスワードなしのゲスト接続すれば見えるそうです。</p>

<h3>別コンテナで確認</h3>

<p><code>docker run -it --rm --volumes-from my-data ubuntu /bin/bash</code> などで別コンテナを起動すると、
<code>/data</code> にマウントされているので、
<code>ls -l /data</code> で中身を確認したり、
<code>/data</code> の中にファイルを作成して他で見えることを確認しました。</p>

<h2>まとめ</h2>

<p><a href="https://github.com/boot2docker/boot2docker#folder-sharing">README に書いてある Folder sharing</a>
だと間違えて消してしまうことがあったので、ちょっと工夫した方法を紹介しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[boot2docker のシリアルコンソールにつなぐ]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-06-boot2docker-serial.html"/>
    <updated>2014-08-06T23:13:18+09:00</updated>
    <id>http://blog.n-z.jp/blog/boot2docker-serial</id>
    <content type="html"><![CDATA[<p>boot2docker-vm の設定をみていると、
<code>~/.boot2docker/boot2docker-vm.sock</code> にシリアルポートが設定されていたので使ってみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Mac OS X 10.9.4</li>
<li>VirtualBox 4.3.14</li>
<li>boot2docker 1.1.2</li>
</ul>


<h2>接続方法</h2>

<p><code>nc -U ~/.boot2docker/boot2docker-vm.sock</code>
で接続して一度 Enter を押してログインプロンプトを再表示させて
<code>docker</code> でログインできます。</p>

<p>Control+C の INT シグナルで <code>nc</code> が終了してしまうので、
普通は素直に <code>boot2docker ssh</code> を使う方が良さそうです。</p>

<p>ssh で入れなくなった時の予備の手段として知っておくと良いかもしれません。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% nc -U ~/.boot2docker/boot2docker-vm.sock
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Core Linux
</span><span class='line'>boot2docker login: docker
</span><span class='line'>docker
</span><span class='line'>                        ##        .
</span><span class='line'>                  ## ## ##       ==
</span><span class='line'>               ## ## ## ##      ===
</span><span class='line'>           /""""""""""""""""\___/ ===
</span><span class='line'>      ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~
</span><span class='line'>           \______ o          __/
</span><span class='line'>             \    \        __/
</span><span class='line'>              \____\______/
</span><span class='line'> _                 _   ____     _            _
</span><span class='line'>| |__   ___   ___ | |_|___ \ __| | ___   ___| | _____ _ __
</span><span class='line'>| '_ \ / _ \ / _ \| __| __) / _` |/ _ \ / __| |/ / _ \ '__|
</span><span class='line'>| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__|   &lt;  __/ |
</span><span class='line'>|_.__/ \___/ \___/ \__|_____\__,_|\___/ \___|_|\_\___|_|
</span><span class='line'>boot2docker: 1.1.2
</span><span class='line'>             master : 740106c - Thu Jul 24 03:24:10 UTC 2014
</span><span class='line'>docker@boot2docker:~$</span></code></pre></td></tr></table></div></figure>


<h2>参考サイト</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/hiboma/20140130/1391061776" title="Vagrant (VirtualBox) でシリアルコンソールに繋ぐ - hibomaのはてなダイアリー">Vagrant (VirtualBox) でシリアルコンソールに繋ぐ - hibomaのはてなダイアリー</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[boot2docker のバージョンアップ]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-06-boot2docker-upgrade.html"/>
    <updated>2014-08-06T23:10:26+09:00</updated>
    <id>http://blog.n-z.jp/blog/boot2docker-upgrade</id>
    <content type="html"><![CDATA[<p>boot2docker の ISO の更新は専用コマンドで簡単にできるとわかったので、
わざと古いバージョンに戻したりして動作確認してみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Mac OS X 10.9.4</li>
<li>VirtualBox 4.3.14</li>
<li>docker 1.1.2</li>
<li>boot2docker 1.1.2</li>
</ul>


<h2>更新準備</h2>

<p><code>boot2docker delete</code> して消してから ISO を更新して
<code>boot2docker init</code> で作り直すという説明もありますが、
再起動しても残る部分は ISO とは別の仮想ディスクの <code>/dev/sda1</code> に保存されていて、
そのまま使い回せることがほとんどなので、
作り直さなくても更新できます。</p>

<p>大きくバージョンをあげるとか、クリーンな環境でやり直したいと言うときは消して作り直せば良いと思います。</p>

<p>参考: <a href="http://qiita.com/tukiyo3/items/07f1eb77b5ffd9031e30" title="boot2dockerのデータ永続化まとめ - Qiita">boot2dockerのデータ永続化まとめ - Qiita</a></p>

<h2>更新方法</h2>

<h3>VM を停止して更新</h3>

<p><code>boot2docker upgrade</code> で VM が起動していれば停止して更新して起動し直してくれます。</p>

<h3>ISO だけ更新</h3>

<p><code>boot2docker download</code> で ISO だけ無条件にダウンロードしてくれます。</p>

<h3>boot2docker help</h3>

<p>以上の説明は <code>boot2docker help</code> にちゃんと書いてある通りです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% boot2docker help
</span><span class='line'>Usage: boot2docker [&lt;options&gt;] &lt;command&gt; [&lt;args&gt;]
</span><span class='line'>
</span><span class='line'>boot2docker management utility.
</span><span class='line'>
</span><span class='line'>Commands:
</span><span class='line'>    init                    Create a new boot2docker VM.
</span><span class='line'>    up|start|boot           Start VM from any states.
</span><span class='line'>    ssh [ssh-command]       Login to VM via SSH.
</span><span class='line'>    save|suspend            Suspend VM and save state to disk.
</span><span class='line'>    down|stop|halt          Gracefully shutdown the VM.
</span><span class='line'>    restart                 Gracefully reboot the VM.
</span><span class='line'>    poweroff                Forcefully power off the VM (might corrupt disk image).
</span><span class='line'>    reset                   Forcefully power cycle the VM (might corrupt disk image).
</span><span class='line'>    delete|destroy          Delete boot2docker VM and its disk image.
</span><span class='line'>    config|cfg              Show selected profile file settings.
</span><span class='line'>    info                    Display detailed information of VM.
</span><span class='line'>    ip                      Display the IP address of the VM's Host-only network.
</span><span class='line'>    status                  Display current state of VM.
</span><span class='line'>    download                Download boot2docker ISO image.
</span><span class='line'>    upgrade                 Upgrade the boot2docker ISO image (if vm is running it will be stopped and started).
</span><span class='line'>    version                 Display version information.
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>      --basevmdk="": Path to VMDK to use as base for persistent partition
</span><span class='line'>      --dhcp=true: enable VirtualBox host-only network DHCP.
</span><span class='line'>      --dhcpip=192.168.59.99: VirtualBox host-only network DHCP server address.
</span><span class='line'>  -s, --disksize=20000: boot2docker disk image size (in MB).
</span><span class='line'>      --dockerport=2375: host Docker port (forward to port 2375 in VM).
</span><span class='line'>      --hostip=192.168.59.3: VirtualBox host-only network IP address.
</span><span class='line'>      --iso="/Users/knishiyama/.boot2docker/boot2docker.iso": path to boot2docker ISO image.
</span><span class='line'>      --lowerip=192.168.59.103: VirtualBox host-only network DHCP lower bound.
</span><span class='line'>  -m, --memory=2048: virtual machine memory size (in MB).
</span><span class='line'>      --netmask=ffffff00: VirtualBox host-only network mask.
</span><span class='line'>      --serial=false: try serial console to get IP address (experimental)
</span><span class='line'>      --serialfile="": path to the serial socket/pipe.
</span><span class='line'>      --ssh="ssh": path to SSH client utility.
</span><span class='line'>      --ssh-keygen="ssh-keygen": path to ssh-keygen utility.
</span><span class='line'>      --sshkey="/Users/knishiyama/.ssh/id_boot2docker": path to SSH key to use.
</span><span class='line'>      --sshport=2022: host SSH port (forward to port 22 in VM).
</span><span class='line'>      --upperip=192.168.59.254: VirtualBox host-only network DHCP upper bound.
</span><span class='line'>      --vbm="VBoxManage": path to VirtualBox management utility.
</span><span class='line'>  -v, --verbose=false: display verbose command invocations.
</span><span class='line'>      --vm="boot2docker-vm": virtual machine name.</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby-buildをrbenvと組み合わせずに使う]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-27-ruby-build-without-rbenv.html"/>
    <updated>2014-07-27T17:08:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ruby-build-without-rbenv</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sstephenson/ruby-build" title="ruby-build">ruby-build</a>
は
<a href="https://github.com/sstephenson/rbenv" title="rbenv">rbenv</a>
と組み合わせて使われることが多いですが、
単独でも使えて、その情報が少ないので少し書いておきます。</p>

<!--more-->


<h2><code>/usr/local</code> にインストールする方法</h2>

<p><code>ruby-build</code> 自体もインストールしてしまう場合は
<code>install.sh</code> を使ってインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone --depth 1 https://github.com/sstephenson/ruby-build
</span><span class='line'>ruby-build/install.sh
</span><span class='line'>rm -rf ruby-build
</span><span class='line'>ruby-build 2.1.2 /usr/local
</span></code></pre></td></tr></table></div></figure>


<p>もっと詳しい使い方は
<a href="http://qiita.com/takahashim/items/406421d515ef1d4f1189" title="[ReVIEW Tips] DockerでRe:VIEW">[ReVIEW Tips] DockerでRe:VIEW</a>
が参考になると思います。</p>

<h2>ruby だけインストールする方法</h2>

<p><code>bin/ruby-build</code> を直接実行すれば <code>ruby-build</code> をインストールせずに
<code>ruby</code> だけインストールすることもできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone --depth 1 https://github.com/sstephenson/ruby-build
</span><span class='line'>ruby-build/bin/ruby-build 2.1.2 /usr/local
</span><span class='line'>rm -rf ruby-build
</span></code></pre></td></tr></table></div></figure>


<p>ドキュメントの生成を止めたり、
インストール中のメッセージを出したりするために
以下のように実行するのも良いと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone --depth 1 https://github.com/sstephenson/ruby-build
</span><span class='line'><span class="nb">export </span><span class="nv">CONFIGURE_OPTS</span><span class="o">=</span><span class="s2">&quot;--disable-install-doc&quot;</span>
</span><span class='line'>ruby-build/bin/ruby-build --verbose 2.1.2 /usr/local
</span><span class='line'>rm -rf ruby-build
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[62nd Ruby/Rails勉強会@関西に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-26-kansaiworkshop062.html"/>
    <updated>2014-07-26T13:27:09+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansaiworkshop062</id>
    <content type="html"><![CDATA[<p><a href="http://rubykansai.doorkeeper.jp/events/13160" title="62nd Ruby/Rails勉強会@関西">62nd Ruby/Rails勉強会@関西</a>
に参加したので、そのメモです。</p>

<!--more-->


<h2>スクレイピングの話</h2>

<p>後で資料は公開してくれるということで、メモはとらずに話をきいていましたが、
実際にどういうことに使っている話も多くて面白かったです。</p>

<p>資料は
<a href="http://www.slideshare.net/takurosasaki/ruby-crawler" title="Rubyで作るクローラー Ruby crawler">Rubyで作るクローラー Ruby crawler</a>
で公開されています。</p>

<h2>Rails Girls Osaka の話</h2>

<p><a href="http://railsgirls.com/osaka" title="Osaka 6-7th June 2014">Rails Girls Osaka 6-7th June 2014</a>
の話でした。
写真が多いので資料の公開はないということでした。</p>

<p>今後の予定としては、
<a href="http://railsgirls.jp/events/" title="近日開催のイベント">近日開催のイベント</a>
にはないですが、
<a href="http://railsgirls.com/events" title="Upcoming Events">Upcoming Events</a>
には
<a href="http://rubyhiroba.org/2014/" title="RubyHiroba 2014">RubyHiroba 2014</a>
での
<a href="http://rubyhiroba.org/2014/rails-girls.html" title="Rails Girls Tokyo 4th">Rails Girls Tokyo 4th</a>
も書いていました。</p>

<h2>Gemfile.local の話</h2>

<p>redmine とかでも使っている方法で、
追記せずに何か良い方法はないのかという相談でした。</p>

<h2>るびま (Rubyist Magazine) の話</h2>

<ul>
<li><a href="http://magazine.rubyist.net/">http://magazine.rubyist.net/</a></li>
<li>誤植などの指摘は <a href="https://github.com/rubima/rubima-support">https://github.com/rubima/rubima-support</a> へ。</li>
<li><a href="http://goo.gl/KpASY9">Rubyist Magazine 十周年へのメッセージ</a> 募集中</li>
</ul>


<h2>GitLab の Git Flow の話</h2>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=477416366X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<ul>
<li><a href="https://gitlab.com/gitlab-org/cookbook-gitlab/blob/master/README.md" title="GitLab Cookbook">GitLab Cookbook</a> のベースを作った。</li>
<li><a href="http://www.amazon.co.jp/gp/product/477416366X/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=477416366X&amp;linkCode=as2&amp;tag=znz-22">GitHub実践入門 ~Pull Requestによる開発の変革 (WEB+DB PRESS plus)</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=477416366X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> はおすすめと言っていました。</li>
<li><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.ja_JP.html" title="git-flow cheatsheet">git-flow cheatsheet</a></li>
<li><a href="https://guides.github.com/introduction/flow/index.html" title="Understanding the GitHub Flow · GitHub Guides">Understanding the GitHub Flow · GitHub Guides</a></li>
<li>GitLab Flow の提案</li>
<li>Git Flow について詳細に説明</li>
</ul>


<p>GitLab Flow は git flow を知っている人向けに大雑把に説明すると</p>

<ul>
<li>release ブランチは使わない。</li>
<li>develop ブランチの代わりに master ブランチを使う。</li>
<li>master ブランチの代わりに stable ブランチを作る。</li>
</ul>


<p>ということだと理解しました。</p>

<h2>Ruby 初級者向けレッスン 50回 ブロック</h2>

<p><code>block.call</code> の引数に複数渡すのがいいのか、配列でまとめて渡すのが良いのかという話はきいたことがなかったので、どういう話なのかちょっと気になりました。</p>

<p>多重代入について深入りすると大変そうなので、さらっと流したのはありだと思いました。</p>

<h2>@IT Rails4 入門記事をツッコもう</h2>

<ul>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1402/28/news047_2.html" title="開発現場でちゃんと使えるRails 4入門（1）：簡単インストールから始める初心者のためのRuby on Railsチュートリアル (2/3) - ＠IT">開発現場でちゃんと使えるRails 4入門（1）：簡単インストールから始める初心者のためのRuby on Railsチュートリアル (2/3) - ＠IT</a></li>
<li>rbenv 対 RVM</li>
<li>エディタは Sublime Text, Vim, Emacs が多くて、その他 Atom, Eclipse</li>
<li><code>rails new</code> の時の <code>--skip-bundle</code> と <code>bundle install --path vendor/bundle</code> の話</li>
<li><code>bundle exec</code> の話</li>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1405/16/news024.html" title="開発現場でちゃんと使えるRails 4入門（4）：現場で使えるか見極めたいRails 4.1の新機能8選 - ＠IT">開発現場でちゃんと使えるRails 4入門（4）：現場で使えるか見極めたいRails 4.1の新機能8選 - ＠IT</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zshの機能のみで既に存在しないディレクトリをcdrのリストから削除する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-25-compact-chpwd-recent-dirs.html"/>
    <updated>2014-07-25T21:54:57+09:00</updated>
    <id>http://blog.n-z.jp/blog/compact-chpwd-recent-dirs</id>
    <content type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/syohex/20140425/1398394421" title="既に存在しないディレクトリを cdrのリストから削除する - Life is very short">既に存在しないディレクトリを cdrのリストから削除する - Life is very short</a>
をみて perl を使っていて、
ファイル名の変更にも対応していなくてポータブルではないと思ったので、
zsh の機能のみで実装してみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>zsh 5.0.2</li>
</ul>


<h2>実装</h2>

<p>cdr の実装の中の
<code>chpwd_recent_add</code>
<code>chpwd_recent_dirs</code>
<code>chpwd_recent_filehandler</code>
の中を良くみてみると
引数なしで <code>chpwd_recent_filehandler</code> を呼び出すと
<code>$reply</code> に配列でディレクトリ一覧を返してくれて、
引数を渡すとファイルに保存してくれるとわかりました。</p>

<p>そこで、その間で <code>(N)</code> を使って存在しないディレクトリを除外すれば良いということで
以下の実装になりました。
<code>emulate -L zsh</code> などは参考にした部分にあったので、そのまま使っています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>my-compact-chpwd-recent-dirs <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    emulate -L zsh
</span><span class='line'>    setopt extendedglob
</span><span class='line'>    <span class="nb">local</span> -aU reply
</span><span class='line'>    integer history_size
</span><span class='line'>    autoload -Uz chpwd_recent_filehandler
</span><span class='line'>    chpwd_recent_filehandler
</span><span class='line'>    <span class="nv">history_size</span><span class="o">=</span><span class="nv">$#reply</span>
</span><span class='line'>    <span class="nv">reply</span><span class="o">=(</span><span class="k">${</span><span class="p">^reply</span><span class="k">}</span><span class="o">(</span>N<span class="o">))</span>
</span><span class='line'>    <span class="o">((</span> <span class="nv">$history_size</span> <span class="o">==</span> <span class="nv">$#reply</span> <span class="o">))</span> <span class="o">||</span> chpwd_recent_filehandler <span class="nv">$reply</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使い方としては</p>

<ul>
<li>必要に応じて手で <code>my-compact-chpwd-recent-dirs</code> を呼び出す</li>
<li><code>.zshrc</code> から起動時に <code>my-compact-chpwd-recent-dirs</code> を実行</li>
<li><code>add-zsh-hook chpwd my-compact-chpwd-recent-dirs</code> で毎回実行</li>
</ul>


<p>などが考えられます。</p>

<p><a href="http://blog.n-z.jp/blog/2014-07-17-peco-cdr.html" title="pecoとcdrなどを組み合わせてみた">pecoとcdrなどを組み合わせてみた</a>ときに、
<code>peco</code> に渡す前のところで <code>(N-/)</code> でフィルタリングしていたので、
個人的には必要に応じて手で呼び出す使い方にしようと思っています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant Cloudでboxを公開してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-21-vagrantcloud-box.html"/>
    <updated>2014-07-21T15:52:35+09:00</updated>
    <id>http://blog.n-z.jp/blog/vagrantcloud-box</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2014-07-18-wheezy-from-vagrant-cloud.html" title="Vagrant CloudからWheezyを入れてみた">Vagrant CloudからWheezyを入れてみた</a>で公開されているものを使ってみたので、
今回は
<a href="https://vagrantcloud.com/">Vagrant Cloud</a>
で日本語で日本向けの Box の公開も試してみました。</p>

<!--more-->


<h2>手順概要</h2>

<ol>
<li><a href="https://vagrantcloud.com/">https://vagrantcloud.com/</a> にログイン</li>
<li><a href="https://vagrantcloud.com/boxes/new">Create Box</a> で作成</li>
<li>Create new version でバージョンを作成</li>
<li>Create new provider でバージョンに対応する provider を作成</li>
<li>無料アカウントだと Upload は使えないようなので URL を指定</li>
<li>バージョンの編集で Release すると公開</li>
</ol>


<h2>登録される情報</h2>

<p>ユーザーアカウントに複数の Box が対応していて、
Box に複数のバージョンが対応していて、
バージョンに複数の provider (VirtualBox とか VMware とか) が対応している、
という構造になっているようです。</p>

<p>バージョンは Release するまでは公開されないようです。</p>

<p>古いバージョンは Revoke で破棄できるようなので、
box を置く URL を使い回すなら Revoke してから
ファイルを置き換えて新しいバージョンを登録するのが
良さそうに思いました。</p>

<h2>作成した box の packer テンプレート</h2>

<p><a href="https://github.com/znz/packer-templates">packer-templates</a>
で公開しています。</p>

<p>使い方は</p>

<pre><code>git clone https://github.com/znz/packer-templates
cd debian-7.6.0-amd64-ja_jp
packer build debian-7.6.0-amd64-ja_jp.json
</code></pre>

<p>で <code>debian-7.6.0-amd64-ja_jp_virtualbox.box</code> が作成できます。
試した環境では1時間ぐらいかかりました。</p>

<h2>使用方法</h2>

<p><code>vagrant init znzj/debian-7.6.0-amd64-ja_jp</code>
のように <code>vagrant init</code> の引数に <code>ユーザー名/BOX名</code> を指定して
<code>Vagrantfile</code> を作成すると
<code>config.vm.box = "znzj/debian-7.6.0-amd64-ja_jp"</code>
と指定されていて <code>vagrant up</code> で自動ダウンロードされて使えます。</p>

<h2>登録した URL の扱い</h2>

<p>box は URL で登録したので、
<code>https://vagrantcloud.com/znzj/debian-7.6.0-amd64-ja_jp/version/1/provider/virtualbox.box</code>
のように <code>vagrantcloud.com</code> の URL に見えるところからダウンロードしようとした時、
リダイレクトされて登録した URL からのダウンロードになるようです。</p>

<p><code>vagrantcloud</code> 側でキャッシュなどをしてくれるわけではないようなので、
置き場所には注意する必要がありそうです。</p>

<p>今回は需要も多くなさそうで、
日本向けということで
さくらのVPS
に置いてみました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible-galaxy用のroleにversionを付ける]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-19-ansible-galaxy-version.html"/>
    <updated>2014-07-19T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-galaxy-version</id>
    <content type="html"><![CDATA[<p><a href="https://galaxy.ansible.com/" title="Ansible Galaxy">Ansible Galaxy</a>
に登録されている role を使う時にバージョンを指定する方法は書いてあるのに、
自分で登録した role にバージョンを付ける方法がわからなかったので、
既にバージョンが付いているものを参考にして調べてみました。</p>

<!--more-->


<h2>結論</h2>

<p><a href="https://galaxy.ansible.com/intro">Ansible Galaxy の intro</a>
の最後の方に
「If you have applied any tags in your repo, Ansible Galaxy will automatically make a “version” object for each tag. This means users will be able to choose which version (tag) to download.」
と書いてあるように github で tag (release) を作るだけでした。</p>

<h2>バージョンの命名規則</h2>

<p>同じページのバージョン指定の例が</p>

<pre><code>user1.role1,v1.0.0
user2.role2,v0.5
...
</code></pre>

<p>となっているので、頭に <code>v</code> を付けて <code>v0.1.2</code> のようなバージョンの付け方にするのが良さそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant CloudからWheezyを入れてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-18-wheezy-from-vagrant-cloud.html"/>
    <updated>2014-07-18T21:30:25+09:00</updated>
    <id>http://blog.n-z.jp/blog/wheezy-from-vagrant-cloud</id>
    <content type="html"><![CDATA[<p>Debian 7.6 がリリースされたので、新しい box がないか探してみたところ、
<a href="http://www.vagrantbox.es/" title="A list of base boxes for Vagrant - Vagrantbox.es">A list of base boxes for Vagrant - Vagrantbox.es</a>
から探すのではなく
<a href="https://vagrantcloud.com/">Vagrant Cloud</a>
を使えば良いということがわかりました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>VirtualBox 4.3.12</li>
<li>Vagrant 1.6.3</li>
<li><a href="https://vagrantcloud.com/ffuenf/debian-7.6.0-amd64" title="Debian Wheezy 7.6.0 x86_64">Debian Wheezy 7.6.0 x86_64</a> 0.0.27</li>
</ul>


<h2>書き換え</h2>

<p>古い box は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  config.vm.box = ENV["VM_BOX"] || "opscode_debian-7.4_chef-provisionerless"
</span><span class='line'>  config.vm.box_url = ENV["VM_BOX_URL"] || "http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_debian-7.4_chef-provisionerless.box"</span></code></pre></td></tr></table></div></figure>


<p>と指定していたのを
<a href="https://github.com/ffuenf/vagrant-boxes" title="ffuenf/vagrant-boxes">ffuenf/vagrant-boxes</a>
からリンクされている
<a href="https://vagrantcloud.com/ffuenf/debian-7.6.0-amd64" title="ffuenf/debian-7.6.0-amd64">ffuenf/debian-7.6.0-amd64</a>
の説明通り <code>vagrant init ffuenf/debian-7.6.0-amd64</code> で作成された
<code>Vagrantfile</code> を参考にして、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  config.vm.box = "ffuenf/debian-7.6.0-amd64"</span></code></pre></td></tr></table></div></figure>


<p>に書き換えました。</p>

<p>以前の box を使っている 古い VM を <code>vagrant destroy</code> ですべて破棄した後、
<code>vagrant box remove opscode_debian-7.4_chef-provisionerless</code>
で box も削除しました。</p>

<h2>余談</h2>

<p><code>vagrant box outdated</code> や <code>vagrant box update</code> の使い方がわからなかったのですが、
<code>box_url</code> でダウンロードしてきた box で使うものではなく Vagrant Cloud から
ダウンロードしてきた box で使うものだったようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rsyslogでherokuのログを記録する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-18-heroku-rsyslog.html"/>
    <updated>2014-07-18T19:37:27+09:00</updated>
    <id>http://blog.n-z.jp/blog/heroku-rsyslog</id>
    <content type="html"><![CDATA[<p>heroku のログは何も設定していないと最近のログしか残らないので、
VPS で動かしている Ubuntu の rsyslog で受け取って好きなだけ
残せるように設定してみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 12.04 LTS</li>
<li>rsyslog 5.8.6-1ubuntu8.6</li>
</ul>


<h2>rsyslog の設定</h2>

<p>rsyslog でリモートからのログを受け取って <code>/var/log/remote</code> 以下に記録する設定をします。</p>

<p>ポート番号は外からの攻撃を減らすためや rsyslog の起動時に root 権限を不要にするために、
デフォルトの 514 ではなく適当なポート番号に変更しました。</p>

<p>リモートからのログはここで日付とホスト名から決まるファイル名のログに記録して、
ローカルのログと混ざらないようにしています。</p>

<p>ファイル名は日付を前にするか、送信元ホスト名を前にするかは好みで決めると良いと思います。</p>

<figure class='code'><figcaption><span>/etc/rsyslog.d/10-local.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># provides UDP syslog reception
</span><span class='line'>$ModLoad imudp
</span><span class='line'>$UDPServerRun 51514
</span><span class='line'>
</span><span class='line'># provides TCP syslog reception
</span><span class='line'>$ModLoad imtcp
</span><span class='line'>$InputTCPServerRun 51514
</span><span class='line'>
</span><span class='line'>$template RemoteLog,&quot;/var/log/remote/%$year%%$month%%$day%_%hostname%.log&quot;
</span><span class='line'>:fromhost-ip,!isequal,&quot;127.0.0.1&quot; ?RemoteLog
</span><span class='line'>&amp; ~
</span></code></pre></td></tr></table></div></figure>


<h2><code>/var/log/remote</code> 作成</h2>

<p>ディレクトリを自動で作成はしてくれないので、あらかじめ作成しておきます。
同じ理由でログファイルをディレクトリ分けすることは出来ませんでした。</p>

<p>syslog ユーザーが書き込めて adm グループで読めるようにしました。</p>

<pre><code>sudo install -o syslog -g adm -m 2750 -d /var/log/remote
</code></pre>

<h2>ufw 設定</h2>

<p><code>ufw allow 51514</code> で外から udp も tcp も受け付けるようにします。</p>

<h2>heroku からの送信設定</h2>

<p><code>heroku drains</code> コマンドで設定しました。</p>

<p>Heroku 側のドキュメントは
<a href="https://devcenter.heroku.com/articles/logging#syslog-drains" title="Syslog drains">Syslog drains</a>
にありますが、情報が少ないので、同様のログを蓄積するアドオンの設定を参考にするのが良いようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> heroku drains
</span><span class='line'><span class="go">No drains for this app</span>
</span><span class='line'><span class="gp">%</span> heroku drains:add
</span><span class='line'><span class="go"> !    Usage: heroku drains:add URL</span>
</span><span class='line'><span class="go">zsh: exit 1     heroku drains:add</span>
</span><span class='line'><span class="gp">%</span> heroku drains:add syslog://syslog.example.jp:51514
</span><span class='line'><span class="go">Successfully added drain syslog://syslog.example.jp:51514</span>
</span><span class='line'><span class="gp">%</span> heroku drains
</span><span class='line'><span class="go">syslog://syslog.example.jp:51514 (d.xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pecoとcdrなどを組み合わせてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-17-peco-cdr.html"/>
    <updated>2014-07-17T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/peco-cdr</id>
    <content type="html"><![CDATA[<p>自作の cd 履歴管理が <code>~/VirtualBox VMs</code> という空白入りのディレクトリ名の扱いに対応していなかったので、
せっかくなので独自で頑張るのは止めて、
cdr の履歴を使うことにしました。</p>

<p>さらに選択部分は peco と組み合わせて <code>ghq</code> や <code>cdpath</code> にも対応してみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>peco 0.2.0</li>
<li>zsh 5.0.2</li>
</ul>


<h2>peco のインストール</h2>

<p>Homebrew でインストールするなら <code>brew install peco/peco/peco</code> か</p>

<pre><code>brew tap peco/peco
brew install peco
</code></pre>

<p>です。</p>

<p>アンインストールは</p>

<pre><code>brew uninstall peco
brew untap peco/peco
</code></pre>

<p>です。</p>

<p><code>go get</code> でインストールするなら <code>GOPATH</code> を設定して
<code>go get github.com/peco/peco/cmd/peco</code>
です。
アンインストールは <code>GOPATH</code> にあるインストールされたファイルを消すしかなさそうです。</p>

<h2>peco の設定</h2>

<p><a href="http://shibayu36.hatenablog.com/entry/2014/06/27/223538" title="pecoを使い始めた - $shibayu36-&gt;blog;">pecoを使い始めた - $shibayu36-&gt;blog;</a>
はいろいろキーバインドを設定していますが、
デフォルトのまま使っています。</p>

<h2>zsh の設定</h2>

<p><a href="https://github.com/znz/dot-shell/blob/4ee27990e8de4b3c089442c0d997ad3fc836b96a/profile.d/50peco.zsh" title="50peco.zsh">50peco.zsh</a>
の <code>peco-go-to-dir</code> のように設定して <code>M-g</code> で使えるようにしました。</p>

<p>以下に該当部分を抜き出しておきます。</p>

<figure class='code'><figcaption><span>50peco.zsh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">if</span> <span class="o">((</span> <span class="k">${</span><span class="p">+commands[peco]</span><span class="k">}</span> <span class="o">))</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span>peco-go-to-dir <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">local </span>line
</span><span class='line'>    <span class="nb">local </span><span class="nv">selected</span><span class="o">=</span><span class="s2">&quot;$(</span>
</span><span class='line'><span class="s2">      {</span>
</span><span class='line'><span class="s2">        (</span>
</span><span class='line'><span class="s2">          autoload -Uz chpwd_recent_filehandler</span>
</span><span class='line'><span class="s2">          chpwd_recent_filehandler &amp;&amp; for line in $reply; do</span>
</span><span class='line'><span class="s2">            if [[ -d &quot;</span><span class="nv">$line</span><span class="s2">&quot; ]]; then</span>
</span><span class='line'><span class="s2">              echo &quot;</span><span class="nv">$line</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">            fi</span>
</span><span class='line'><span class="s2">          done</span>
</span><span class='line'><span class="s2">        )</span>
</span><span class='line'><span class="s2">        ghq list --full-path</span>
</span><span class='line'><span class="s2">        for line in *(-/) ${^cdpath}/*(N-/); do echo &quot;</span><span class="nv">$line</span><span class="s2">&quot;; done | sort -u</span>
</span><span class='line'><span class="s2">      } | peco --query &quot;</span><span class="nv">$LBUFFER</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">    )&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;$selected&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nv">BUFFER</span><span class="o">=</span><span class="s2">&quot;cd ${(q)selected}&quot;</span>
</span><span class='line'>      zle accept-line
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">    </span>zle clear-screen
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  zle -N peco-go-to-dir
</span><span class='line'>  bindkey <span class="s1">&#39;^[g&#39;</span> peco-go-to-dir
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>まず <code>(( ${+commands[peco]} ))</code> で <code>peco</code> コマンドの存在チェックをしています。
zsh スクリプトの中では <code>type peco &gt;/dev/null 2&gt;&amp;1</code> のようなチェック方法の代わりに使えます。</p>

<p>次にカレントディレクトリと <code>$cdpath</code> の処理に使っている <code>line</code> をローカル変数にしています。</p>

<p>次がメイン部分で</p>

<ol>
<li><code>cdr</code> のディレクトリ一覧</li>
<li><code>ghq</code> のディレクトリ一覧</li>
<li>カレントディレクトリと <code>$cdpath</code> の中のディレクトリ一覧</li>
</ol>


<p>を <code>peco</code> に渡して選択しています。
順番や何を選択肢に入れるかなどは好みで調節してください。</p>

<p>最後に参考にした記事と同じように、選択されていたら <code>cd</code> コマンドを実行しています。</p>

<h2>空白ディレクトリ対応</h2>

<p><code>selected=$()</code> を <code>selected="$()"</code> に変更するなど適切にクオートした上で、
さらに最後の <code>cd</code> コマンドに渡す部分では <code>q</code> という Parameter Expansion Flag (<code>${(q)var}</code> の部分) を使って
適切にエスケープしています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 13 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-16-rubymotion-mokumoku-osaka.html"/>
    <updated>2014-07-16T19:33:35+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 12 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://rubymotionjp.connpass.com/event/7079/">第 13 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。
今日はほぼ途中の会話はなくて、みんなでもくもくしていました。
その代わり、最後の成果発表の時は盛り上がっていました。</p>

<p>次回の
<a href="http://rubymotionjp.connpass.com/event/7583/" title="第 14 回 RubyMotion もくもく会 in Osaka">第 14 回 RubyMotion もくもく会 in Osaka</a>
は 08/20(水) になりました。</p>

<!--more-->


<h2>メモ</h2>

<ul>
<li>AppCode</li>
<li>TapTheCircle</li>
<li>motion-osx-cli</li>
<li><a href="https://speakerdeck.com/iwazer/rubymotionfalseqi-chi-tiiitokoro" title="RubyMotionの気持ちいいところ // Speaker Deck">RubyMotionの気持ちいいところ // Speaker Deck</a></li>
<li>RubyMotion + IB で参考にしたもの

<ul>
<li><a href="http://tama.hatenablog.jp/entry/2014/05/02/231633" title="RubyMotion(MacOS)でIBの作成方法 - たまたんのぶろぐ">RubyMotion(MacOS)でIBの作成方法 - たまたんのぶろぐ</a></li>
<li><a href="http://d.hatena.ne.jp/laiso+iphone/20130510/1368201914" title="RubyMotionアプリでStoryboardとIBのアウトレット+アクションを使う話 - laiso+iphone">RubyMotionアプリでStoryboardとIBのアウトレット+アクションを使う話 - laiso+iphone</a></li>
</ul>
</li>
<li><a href="https://github.com/omoon/rm-test-test">https://github.com/omoon/rm-test-test</a>

<ul>
<li>travis-ci で RubyMotion のテストも動かせるという話</li>
<li><code>bundle exec rake spec osx=true</code> にすれば OSX も動く。</li>
<li>参考: <a href="https://github.com/rubymotion/BubbleWrap/blob/master/.travis.yml">https://github.com/rubymotion/BubbleWrap/blob/master/.travis.yml</a></li>
</ul>
</li>
<li><a href="https://github.com/mattsears/nyan-cat-formatter">https://github.com/mattsears/nyan-cat-formatter</a></li>
</ul>


<h2>今日の成果</h2>

<p>情報を探してみたら <code>rake ib</code> で Interface Builder を起動すれば stub を自動生成してくれて、
ボタンクリックとアクションのひも付けができるとわかったので、
ボタンをクリックした時にメソッド呼び出しはできるようになりました。</p>

<p>しかし、 <code>ib_outlet</code> で宣言したプロパティに outlet でひも付けしたインスタンス変数が <code>nil</code> のままで悩んでいたところ、
最後に <code>outlet</code> に変えると動くようになりました。
<code>ib_outlet</code> のままでも Interface Builder で出てくるので使えるのかと勘違いしていました。</p>

<p>家に帰ってから
<code>$(find /System/Library/Frameworks -name lsregister) -kill -r -domain local -domain user</code>
で既存の起動の関連付けを削除して、
ib 版で <code>Set Default Browser</code> をやり直したところ、
まだ問題があったので、それも直して以前のものと同様に使えるところまでは出来ました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[doorkeeper providerサンプルアプリに対応するOAuthクライアントをdeviseで作成した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-15-doorkeeper-devise-client.html"/>
    <updated>2014-07-15T18:50:40+09:00</updated>
    <id>http://blog.n-z.jp/blog/doorkeeper-devise-client</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/znz/doorkeeper-provider-app">doorkeeper-provider-app</a>
を使って SSO (Single Sign On) のように使うクライアントアプリを作成しました。
<a href="https://github.com/znz/doorkeeper-devise-client-app">doorkeeper-devise-client-app</a>
で公開しています。</p>

<p>SSO は OAuth 2.0 の本来の使い方ではないので、不便な部分もありますが、
クライアント側の例として参考になると思います。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>ruby 2.1.2</li>
<li>rails 4.1.4</li>
<li>bootstrap 3.2.0</li>
<li>devise 3.2.4</li>
<li>omniauth 1.2.2</li>
<li>omniauth-oauth2 1.2.0</li>
<li>bootstrap-sass 3.2.0.0</li>
<li>dotenv-rails 0.11.1</li>
</ul>


<h2>簡単な役割解説</h2>

<p>provider は doorkeeper gem を入れている rails アプリ側で認証や認可を受け持ちます。
(OAuth の仕様的には認証と認可が別々のサーバーのこともあります。)</p>

<p>ここでいう OAuth クライアントは devise + omniauth + omniauth-oauth2 を使った rails アプリのことです。
ブラウザーなどのユーザー側にあるクライアントではなく、ユーザーから見れば、これもサーバーです。</p>

<p>詳しいことは OAuth 2.0 の仕様を調べてください。</p>

<h2>大まかな流れ</h2>

<ol>
<li><code>lib/omniauth/strategies/doorkeeper.rb</code> 作成</li>
<li><code>config/initializers/devise.rb</code> で <code>config.omniauth :doorkeeper, ...</code></li>
<li><code>app/controllers/users/omniauth_callbacks_controller.rb</code> 作成
(<code>uid</code> でユーザーを自動作成したり、 <code>access_token</code> (<code>credentials.token</code>) を保存したり)</li>
<li><code>config/routes.rb</code> に設定</li>
<li><code>user</code> に <code>provider</code> を追加</li>
<li><code>app/models/user.rb</code> で <code>devise :omniauthable</code> や <code>uid</code> を使った処理を実装</li>
<li><code>OAuth2::AccessToken</code> を生成</li>
<li>それを使って API アクセス</li>
</ol>


<p><code>access_token</code> を session に保存するかデータベースに保存するかは
アプリケーションのポリシー次第になります。
このアプリでは session に保存しています。</p>

<p>別途 callback uri として <code>http://localhost:3000/users/auth/doorkeeper/callback</code> のような URL を指定して
doorkeeper 側の <code>oauth/applications</code> に登録しておく必要があります。</p>

<h2><code>lib/omniauth/strategies/doorkeeper.rb</code> 作成</h2>

<p>例として
<a href="https://github.com/doorkeeper-gem/doorkeeper-devise-client" title="Dookreeper Devise+Omniauth Client">Dookreeper Devise+Omniauth Client</a>
と比較して <code>info</code> に <code>name</code> を増やしています。</p>

<p>コントローラーを <code>users</code> の下の <code>Users::OmniauthCallbacksController</code> にしたので、
戻り先の <code>authorize_path</code> は <code>'/oauth/authorize'</code> ではなく <code>'/users/oauth/authorize'</code> になっています。</p>

<p>info のハッシュはサーバーから受け取れていて、後の処理でもっと欲しい情報があれば自由に増やせます。</p>

<figure class='code'><figcaption><span>lib/omniauth/strategies/doorkeeper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">OmniAuth</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Strategies</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Doorkeeper</span> <span class="o">&lt;</span> <span class="ss">OmniAuth</span><span class="p">:</span><span class="ss">:Strategies</span><span class="o">::</span><span class="no">OAuth2</span>
</span><span class='line'>      <span class="n">option</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:doorkeeper</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">option</span> <span class="ss">:client_options</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="ss">site</span><span class="p">:</span> <span class="s1">&#39;http://localhost:4000&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">authorize_path</span><span class="p">:</span> <span class="s1">&#39;/users/oauth/authorize&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">uid</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">raw_info</span><span class="o">[</span><span class="s1">&#39;id&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">info</span> <span class="k">do</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="ss">email</span><span class="p">:</span> <span class="n">raw_info</span><span class="o">[</span><span class="s1">&#39;email&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="nb">name</span><span class="p">:</span> <span class="n">raw_info</span><span class="o">[</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">raw_info</span>
</span><span class='line'>        <span class="vi">@raw_info</span> <span class="o">||=</span> <span class="n">access_token</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;/api/v1/me.json&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">parsed</span> <span class="o">||</span> <span class="p">{}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>config/initializers/devise.rb</code> で設定</h2>

<p><a href="https://github.com/doorkeeper-gem/doorkeeper-devise-client">サンプルアプリ</a>
では</p>

<figure class='code'><figcaption><span>config/initializers/devise.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">omniauth</span> <span class="ss">:doorkeeper</span><span class="p">,</span>  <span class="no">DOORKEEPER_APP_ID</span><span class="p">,</span> <span class="no">DOORKEEPER_APP_SECRET</span><span class="p">,</span> <span class="ss">:client_options</span> <span class="o">=&gt;</span>  <span class="p">{</span><span class="ss">:site</span> <span class="o">=&gt;</span> <span class="no">DOORKEEPER_APP_URL</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>となっていました。</p>

<p><code>scope</code> も追加すると以下のようになります。
<code>dotenv</code> を使って <code>ENV</code> から取るようにしました。</p>

<figure class='code'><figcaption><span>config/initializers/devise.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">omniauth</span> <span class="ss">:doorkeeper</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;DOORKEEPER_APP_ID&#39;</span><span class="o">]</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;DOORKEEPER_APP_SECRET&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">client_options</span><span class="p">:</span> <span class="p">{</span><span class="ss">site</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;DOORKEEPER_APP_URL&#39;</span><span class="o">]</span> <span class="p">},</span> <span class="ss">scope</span><span class="p">:</span> <span class="s1">&#39;public write&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>scope</code> は <code>'public,write'</code> だと <code>The requested scope is invalid, unknown, or malformed.</code> というエラーになってしまったので、
<code>,</code> 区切りではなくスペース区切りにしています。</p>

<h2><code>app/controllers/users/omniauth_callbacks_controller.rb</code> 作成</h2>

<p>callback で認証結果を受け取る部分を作成します。
ここで認証結果を受け取って、ユーザーを必要に応じてひも付けたり、
後で API アクセスに使うアクセストークンを保存したりします。</p>

<p>認証に失敗した時はログイン画面 (あれば) か <code>root_path</code> に戻すようにしています。</p>

<figure class='code'><figcaption><span>app/controllers/users/omniauth_callbacks_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Users</span><span class="o">::</span><span class="no">OmniauthCallbacksController</span> <span class="o">&lt;</span> <span class="ss">Devise</span><span class="p">:</span><span class="ss">:OmniauthCallbacksController</span>
</span><span class='line'>  <span class="c1"># https://github.com/plataformatec/devise/issues/2432</span>
</span><span class='line'>  <span class="n">protect_from_forgery</span> <span class="ss">except</span><span class="p">:</span> <span class="ss">:doorkeeper</span>
</span><span class='line'>  <span class="n">skip_filter</span> <span class="ss">:auto_authenticate_omniauth_user!</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="ss">:doorkeeper</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">doorkeeper</span>
</span><span class='line'>    <span class="c1"># You need to implement the method below in your model (e.g. app/models/user.rb)</span>
</span><span class='line'>    <span class="n">oauth_data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;omniauth.auth&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_or_create_for_doorkeeper_oauth</span><span class="p">(</span><span class="n">oauth_data</span><span class="p">)</span>
</span><span class='line'>    <span class="n">session</span><span class="o">[</span><span class="ss">:doorkeeper_token</span><span class="o">]</span> <span class="o">=</span> <span class="n">oauth_data</span><span class="o">[</span><span class="s1">&#39;credentials&#39;</span><span class="o">][</span><span class="s1">&#39;token&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">persisted?</span>
</span><span class='line'>      <span class="n">sign_in_and_redirect</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:event</span> <span class="o">=&gt;</span> <span class="ss">:authentication</span> <span class="c1">#this will throw if @user is not activated</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">is_navigational_format?</span>
</span><span class='line'>        <span class="n">set_flash_message</span><span class="p">(</span><span class="ss">:notice</span><span class="p">,</span> <span class="ss">:success</span><span class="p">,</span> <span class="ss">kind</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;DOORKEEPER_APP_NAME&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;Doorkeeper&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="c1"># hide flash message after auto sign in</span>
</span><span class='line'>        <span class="c1">#flash.delete(:notice)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">session</span><span class="o">[</span><span class="s1">&#39;devise.doorkeeper_data&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;omniauth.auth&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="ss">:new_user_registration_url</span><span class="p">)</span>
</span><span class='line'>        <span class="n">redirect_to</span> <span class="n">new_user_registration_url</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">redirect_to</span> <span class="n">root_url</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">after_omniauth_failure_path_for</span><span class="p">(</span><span class="n">scope</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="ss">:new_session_path</span><span class="p">)</span>
</span><span class='line'>      <span class="n">new_session_path</span><span class="p">(</span><span class="n">scope</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">root_path</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>自動ログイン後のメッセージが不要なら <code>set_flash_message</code> の部分を <code>flash.delete(:notice)</code> に置き換えます。
「Doorkeeper でログインしました」だとどのサイトか区別がつかないので、
<code>ENV['DOORKEEPER_APP_NAME']</code> で表示用の名前を設定できるようにしています。</p>

<h2><code>config/routes.rb</code> に設定</h2>

<p><code>config/routes.rb</code> で <code>omniauth_callbacks</code> として独自のものを使うように設定します。</p>

<p>今回は認証必須なので不要ですが、
例として <code>sign_in</code> と <code>sign_out</code> の URL も入れました。
実際に試してみるとすぐに自動ログインで再ログインしてしまいます。</p>

<p><code>sign_out</code> が <code>get</code> か <code>delete</code> か違うことがあるので、
<code>sign_out_via</code> を使ってどちらでも対応できるようにしました。</p>

<figure class='code'><figcaption><span>config/routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">devise_for</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">controllers</span><span class="p">:</span> <span class="p">{</span> <span class="n">omniauth_callbacks</span><span class="p">:</span> <span class="s1">&#39;users/omniauth_callbacks&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">devise_scope</span> <span class="ss">:user</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;sign_in&#39;</span><span class="p">,</span>  <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;devise/sessions#new&#39;</span><span class="p">,</span>     <span class="ss">as</span><span class="p">:</span> <span class="ss">:new_user_session</span>
</span><span class='line'>    <span class="nb">__send__</span> <span class="no">Devise</span><span class="o">.</span><span class="n">sign_out_via</span><span class="p">,</span> <span class="s1">&#39;sign_out&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;devise/sessions#destroy&#39;</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:destroy_user_session</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>timeoutable 設定</h2>

<p>SSO 的に使うのは
OAuth 2.0 の本来の目的ではないので、
ログアウトは難しい問題です。
たとえば
doorkeeper
と連携するアプリが複数あるときにまとめてログアウト出来ないなどの問題があります。</p>

<p>そのため、このアプリでは一定時間で再ログインが必要になるように <code>timeoutable</code> を使って、
こまめに認証し直すようにしてログアウト問題を緩和しています。</p>

<p>その副作用として入力に時間のかかるフォームがあると入力途中でタイムアウトしてしまって
投稿に失敗するなどの問題も起きるので、その点を考慮しておく必要があります。</p>

<figure class='code'><figcaption><span>config/initializers/devise.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># Default is 30 minutes.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">timeout_in</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="n">minutes</span> <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">development?</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">expire_auth_token_on_timeout</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>app/models/user.rb に実装</h2>

<p><code>find_or_create_for_doorkeeper_oauth</code> の実装は <code>concerns</code> に分けてみました。
<code>omniauthable</code> に <code>omniauth_providers</code> も設定して余計な route が生成されないようにしています。
<code>timeoutable</code> も入れています。</p>

<figure class='code'><figcaption><span>app/models/user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">devise</span> <span class="ss">:omniauthable</span><span class="p">,</span> <span class="n">omniauth_providers</span><span class="p">:</span> <span class="o">[</span><span class="ss">:doorkeeper</span><span class="o">]</span>
</span><span class='line'>  <span class="n">devise</span> <span class="ss">:timeoutable</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">DoorkeeperOauthFinder</span>
</span></code></pre></td></tr></table></div></figure>


<p>ログインしたときに <code>name</code> や <code>email</code> が変わっていたら反映するようにしています。</p>

<p><code>id</code> を統一したいのなら、 <code>create</code> のときに <code>id</code> まで指定すると
doorkeeper gem による OAuth provider 側とユーザーの ID を統一できます。</p>

<p>SSO 的に使うのならパスワードは不要なので、
ここではコメントアウトしています。</p>

<figure class='code'><figcaption><span>app/models/concerns/doorkeeper_oauth_finder.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">DoorkeeperOauthFinder</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">find_or_create_for_doorkeeper_oauth</span><span class="p">(</span><span class="n">oauth_data</span><span class="p">)</span>
</span><span class='line'>      <span class="n">uid</span> <span class="o">=</span> <span class="n">oauth_data</span><span class="o">.</span><span class="n">uid</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>      <span class="nb">id</span> <span class="o">=</span> <span class="n">uid</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">provider</span><span class="p">:</span> <span class="n">oauth_data</span><span class="o">.</span><span class="n">provider</span><span class="p">,</span> <span class="ss">uid</span><span class="p">:</span> <span class="n">uid</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">user</span>
</span><span class='line'>        <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">oauth_data</span><span class="o">.</span><span class="n">info</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>        <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">oauth_data</span><span class="o">.</span><span class="n">info</span><span class="o">.</span><span class="n">email</span>
</span><span class='line'>        <span class="n">user</span><span class="o">.</span><span class="n">save!</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">changed?</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">user</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">create!</span><span class="p">({</span>
</span><span class='line'>          <span class="nb">id</span><span class="p">:</span> <span class="nb">id</span><span class="p">,</span> <span class="c1"># use same id</span>
</span><span class='line'>          <span class="nb">name</span><span class="p">:</span> <span class="n">oauth_data</span><span class="o">.</span><span class="n">info</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">provider</span><span class="p">:</span> <span class="n">oauth_data</span><span class="o">.</span><span class="n">provider</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">uid</span><span class="p">:</span> <span class="n">uid</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">email</span><span class="p">:</span> <span class="n">oauth_data</span><span class="o">.</span><span class="n">info</span><span class="o">.</span><span class="n">email</span><span class="p">,</span>
</span><span class='line'>          <span class="c1">#password: Devise.friendly_token[0,20]</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">user</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>データベースの migration の方でも削除して unique index の制約なども不要なものは外しておきます。</p>

<figure class='code'><figcaption><span>db/migrate/*_devise_create_users.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1">## Database authenticatable</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:email</span><span class="p">,</span>              <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="c1"># t.string :encrypted_password, null: false, default: &quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>代わりに <code>provider</code> と <code>uid</code> と <code>name</code> を追加しました。
このアプリは Doorkeeper 専用なので、直接 <code>users</code> に追加していますが、
複数プロバイダに対応するには <code>provider</code> と <code>uid</code> の組を別テーブルにします。</p>

<figure class='code'><figcaption><span>db/migrate/*_add_omniauth_columns_to_users.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AddOmniauthColumnsToUsers</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:provider</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:uid</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">add_index</span> <span class="ss">:users</span><span class="p">,</span> <span class="o">[</span><span class="ss">:provider</span><span class="p">,</span> <span class="ss">:uid</span><span class="o">]</span><span class="p">,</span> <span class="ss">unique</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>OAuth2::AccessToken</code> を生成</h2>

<p><code>OAuth2::Client</code> と保存しておいた <code>access_token</code> を引数にして <code>OAuth2::AccessToken</code> を生成します。
ここでは <code>concerns</code> に分けて必要なコントローラーでだけ <code>include DoorkeeperApiV1</code> するようにしました。
全体で使いたいのなら <code>ApplicationController</code> に <code>include</code> すれば良いと思います。</p>

<figure class='code'><figcaption><span>app/controllers/concerns/doorkeeper_api_v1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">DoorkeeperApiV1</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">access_token</span>
</span><span class='line'>    <span class="k">return</span> <span class="vi">@access_token</span> <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="vi">@access_token</span><span class="p">)</span>
</span><span class='line'>    <span class="n">config</span> <span class="o">=</span> <span class="no">Devise</span><span class="o">.</span><span class="n">omniauth_configs</span><span class="o">[</span><span class="ss">:doorkeeper</span><span class="o">]</span>
</span><span class='line'>    <span class="n">strategy</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">strategy_class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">*</span><span class="n">config</span><span class="o">.</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">token</span> <span class="o">=</span> <span class="n">session</span><span class="o">[</span><span class="ss">:doorkeeper_token</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@access_token</span> <span class="o">=</span> <span class="ss">OAuth2</span><span class="p">:</span><span class="ss">:AccessToken</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">strategy</span><span class="o">.</span><span class="n">client</span><span class="p">,</span> <span class="n">token</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_me</span>
</span><span class='line'>    <span class="n">access_token</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;/api/v1/me.json&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">parsed</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_microposts</span>
</span><span class='line'>    <span class="n">access_token</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;/api/v1/microposts.json&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">parsed</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">MICROPOST_CONTENT_MAX_LENGTH</span> <span class="o">=</span> <span class="mi">140</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">post_micropost</span><span class="p">(</span><span class="n">micropost</span><span class="p">)</span>
</span><span class='line'>    <span class="n">micropost</span><span class="o">[</span><span class="ss">:content</span><span class="o">]</span> <span class="o">=</span> <span class="n">micropost</span><span class="o">[</span><span class="ss">:content</span><span class="o">].</span><span class="n">truncate</span><span class="p">(</span><span class="no">MICROPOST_CONTENT_MAX_LENGTH</span><span class="p">)</span>
</span><span class='line'>    <span class="n">access_token</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;/api/v1/microposts&quot;</span><span class="p">,</span> <span class="ss">params</span><span class="p">:</span> <span class="p">{</span> <span class="ss">micropost</span><span class="p">:</span> <span class="n">micropost</span> <span class="p">})</span><span class="o">.</span><span class="n">parsed</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>使い方は <code>get_me</code> などを呼び出すだけなので省略します。</p>

<h2>ログインを強制する</h2>

<p>常に Doorkeeper の方でログインさせておきたいアプリの場合は、
User クラスを使っている場合の devise での戻り先の <code>session[:user_return_to]</code> に URL を保存しておいて、
<code>user_omniauth_authorize_path(:doorkeeper)</code> に強制的にリダイレクトしています。
<code>main_app.</code> をつけているのは route で mount している engine の中で問題が起きたことがあったためです。</p>

<figure class='code'><figcaption><span>app/controllers/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="kp">include</span> <span class="no">AuthDoorkeeper</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:auto_authenticate_omniauth_user!</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/controllers/concerns/auth_doorkeeper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">AuthDoorkeeper</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">auto_authenticate_omniauth_user!</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="n">current_user</span>
</span><span class='line'>    <span class="n">session</span><span class="o">[</span><span class="ss">:user_return_to</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">original_url</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">main_app</span><span class="o">.</span><span class="n">user_omniauth_authorize_path</span><span class="p">(</span><span class="ss">:doorkeeper</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>テストについて</h2>

<p>API 呼び出しの部分の対処が出来ていなくて、まだテストが通る状態には出来ていません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apt-cacher-ngでliveイメージ作成を繰り返す時の無駄なダウンロードを減らす]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-14-apt-cacher-ng.html"/>
    <updated>2014-07-14T23:53:14+09:00</updated>
    <id>http://blog.n-z.jp/blog/apt-cacher-ng</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/znz/rubylive-builder" title="rubylive-builder">rubylive-builder</a>
で
<a href="https://github.com/znz/rubylive" title="RubyLive">RubyLive</a>
という Debian wheezy ベースの Live イメージを作成するときに
<code>apt-get update</code> などで何度も無駄にダウンロードしてしまうので、
<code>apt-cacher-ng</code> で Live イメージ作成を繰り返す時の無駄なダウンロードを減らすことにしました。</p>

<!--more-->


<h2>Vagrant の provision でインストール</h2>

<p>Vagrantfile では</p>

<figure class='code'><figcaption><span>Vagrantfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:shell</span> <span class="k">do</span> <span class="o">|</span><span class="n">shell</span><span class="o">|</span>
</span><span class='line'>    <span class="n">shell</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="s2">&quot;provision.sh&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようにシェルスクリプトでプロビジョニングしているだけだったので、
その中で以下のようにインストールして設定するようにしました。</p>

<figure class='code'><figcaption><span>provision.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get install -y apt-cacher-ng
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;Acquire::http::Proxy &quot;http://localhost:3142/&quot;;&#39;</span> &gt;/etc/apt/apt.conf.d/02proxy
</span></code></pre></td></tr></table></div></figure>


<p>Vagrantfile で以下のようにポートフォワーディングを設定していれば
<a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0315" title="第315回　apt-cacher-ngを使ってAPT用キャッシュプロキシの構築：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社">第315回　apt-cacher-ngを使ってAPT用キャッシュプロキシの構築：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社</a>
の2ページ目に説明があるようにヒット率などを確認できます。</p>

<figure class='code'><figcaption><span>Vagrantfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># apt-cacher-ng</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">3142</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">3142</span>
</span></code></pre></td></tr></table></div></figure>


<h2>rake コマンドで環境変数を渡す</h2>

<p><code>APT_HTTP_PROXY=http://localhost:3142 rake</code> でも良かったのですが、
rake コマンドは引数の <code>FOO=bar</code> を <code>ENV</code> に設定してくれるので、
<code>rake APT_HTTP_PROXY=http://localhost:3142</code> で渡して、
Rakefile の中では以下のように受け取って <code>lb config</code> に渡しました。</p>

<figure class='code'><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;config RubyLive&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:config</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:clean</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">sh</span> <span class="s1">&#39;lb config&#39;</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;APT_HTTP_PROXY&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">sh</span> <span class="s2">&quot;lb config --apt-http-proxy </span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;APT_HTTP_PROXY&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>live-build で apt-cacher-ng を使う</h2>

<p>既に出てきたように
<code>lb config</code> の <code>--apt-http-proxy</code> オプションや <code>--apt-ftp-proxy</code> オプションで指定すると
Live イメージ作成の時に proxy を使ってくれるようになります。
今回は apt-line に <code>http</code> しか使っていないので
<code>--apt-http-proxy</code> だけ指定しています。</p>

<p>もちろん、作成後の Live イメージには proxy 設定は残りません。</p>

<h2>感想</h2>

<p>live-build は cache ディレクトリにも、かなりキャッシュしてくれるのですが、
<code>apt-get update</code> などの proxy じゃないとキャッシュしにくいものもあるので、
どんな場合でもダウンロード量削減に役に立ちそうだと思いました。</p>
]]></content>
  </entry>
  
</feed>
