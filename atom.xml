<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2016-06-12T17:51:21+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[6月12日 APIデザインケーススタディ読書会 第1回に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-06-12-amagasakirb.html"/>
    <updated>2016-06-12T12:55:16+09:00</updated>
    <id>http://blog.n-z.jp/blog/amagasakirb</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/event/index/395115/" title="6月12日 APIデザインケーススタディ読書会 第1回">6月12日 APIデザインケーススタディ読書会 第1回</a>
に参加しました。
今回は第 1,2 章でした。</p>

<!--more-->




<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4774178020" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>以下、今回のメモです。</p>

<ul>
<li>今回は本町駅近くでした。</li>
<li>ソケット関連のメソッド名の末尾につく <code>_in</code> は internet の in (unix socket などではないという意味)</li>
<li><code>gets</code>, <code>read</code>, <code>readpartial</code>, <code>read_nonblock</code> などを使い分けるユーザーはあんまりいなさそう</li>
<li>ネットワーク系の話から IRC とか net send とか msg.exe とか</li>
<li>ハッピーターンズの話、ハッピーパウダーを増量しているものがある話</li>
<li>Ruby の socket が便利になっている話</li>
<li>今の時代自分で直接ソケットプログラミングすることは少なそうという話</li>
<li>HULFT</li>
<li>全銀フォーマットの話</li>
<li>Encoding::IBM037 (alias ebcdic-cp-us; dummy) が ruby 2.3.0 から入っている話</li>
<li><code>recvmsg</code> と <code>sendmsg</code> の話</li>
<li>エコーネットとか独自規格のプロトコルを使うのには役に立つかも、という話</li>
<li><a href="https://github.com/SonyCSL/OpenECHO">https://github.com/SonyCSL/OpenECHO</a></li>
<li><code>PLC</code> は廃れてしまったという話</li>
<li>もっと良いタイトルがあったのではないかという話</li>
<li>懇親会も同じ場所という話</li>
<li><a href="https://rubykansai.doorkeeper.jp/events/46880" title="【発表者向け】 第73回 Ruby関西 勉強会 発表者募集">【発表者向け】 第73回 Ruby関西 勉強会 発表者募集</a> の話</li>
<li>寿司はダメな人がいるので、ピザが定番という話</li>
<li>会場提供者から <a href="https://sou-meetup.doorkeeper.jp/" title="SOU meetup">SOU meetup</a> などの話</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jessie の letsencrypt を certbot にあげてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-05-30-letsencrypt-to-certbot-on-jessie.html"/>
    <updated>2016-05-30T21:20:43+09:00</updated>
    <id>http://blog.n-z.jp/blog/letsencrypt-to-certbot-on-jessie</id>
    <content type="html"><![CDATA[<p>Debian で <a href="https://packages.debian.org/letsencrypt">letsencrypt パッケージ</a>が <a href="https://packages.debian.org/certbot">certbot パッケージ</a>に変わって、
jessie-backports にも反映されたので、 certbot パッケージに入れ替えてみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Debian GNU/Linux 8.4 (jessie) (amd64)</li>
<li>letsencrypt 0.5.0-1~bpo8+1 から certbot 0.6.0-2~bpo8+1</li>
</ul>


<h2>アップグレード失敗</h2>

<p>普通に upgrade しようとすると以下のように失敗します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>%  sudo aptitude full-upgrade -DV
</span><span class='line'>以下のパッケージが更新されます:
</span><span class='line'>  python-acme{b} [0.5.0-1~bpo8+1 -&gt; 0.6.0-1~bpo8+1] (破: python-letsencrypt)
</span><span class='line'>更新: 1 個、新規インストール: 0 個、削除: 0 個、保留: 0 個。
</span><span class='line'>アーカイブ 54.6 k バイト中 0  バイトを取得する必要があります。展開後に 1,024  バイトのディスク領域が新たに消費されます。以下のパッケージには満たされていない依存関係があります:
</span><span class='line'> python-acme : 破壊: python-letsencrypt (&lt; 0.6.0) [0.5.0-1~bpo8+1 が既にインストール済みです]
</span><span class='line'>以下のアクションでこれらの依存関係の問題は解決されます:
</span><span class='line'>
</span><span class='line'>     以下のパッケージを削除する:
</span><span class='line'>1)     letsencrypt
</span><span class='line'>2)     python-letsencrypt
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>この解決方法を受け入れますか? [Y/n/q/?]q
</span><span class='line'>これらの依存関係の問題を解決するための努力をすべて放棄します。
</span><span class='line'>中断。
</span></code></pre></td></tr></table></div></figure>


<h2>certbot パッケージで入れ替え</h2>

<p>以下のように <code>certbot</code> パッケージをインストールすることで <code>letsencrypt</code> パッケージが削除されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% sudo aptitude install certbot
</span><span class='line'>以下の新規パッケージがインストールされます:
</span><span class='line'>  certbot{b} python-certbot{ab}
</span><span class='line'>以下のパッケージが更新されます:
</span><span class='line'>  python-acme{b}
</span><span class='line'>更新: 1 個、新規インストール: 2 個、削除: 0 個、保留: 0 個。
</span><span class='line'>アーカイブ 204 k バイト中 149 k バイトを取得する必要があります。展開後に 816 k バイトのディスク領域が新たに消費されます 。
</span><span class='line'>以下のパッケージには満たされていない依存関係があります:
</span><span class='line'> python-acme : 破壊: python-letsencrypt (&lt; 0.6.0) [0.5.0-1~bpo8+1 が既にインストール済みです]
</span><span class='line'> python-certbot : 破壊: python-letsencrypt [0.5.0-1~bpo8+1 が既にインストール済みです]
</span><span class='line'> certbot : 破壊: letsencrypt [0.5.0-1~bpo8+1 が既にインストール済みです]
</span><span class='line'>以下のアクションでこれらの依存関係の問題は解決されます:
</span><span class='line'>
</span><span class='line'>     以下のパッケージを削除する:
</span><span class='line'>1)     letsencrypt
</span><span class='line'>2)     python-letsencrypt
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>この解決方法を受け入れますか? [Y/n/q/?]
</span><span class='line'>以下の新規パッケージがインストールされます:
</span><span class='line'>  certbot python-certbot{a}
</span><span class='line'>以下のパッケージが削除されます:
</span><span class='line'>  letsencrypt{a} python-letsencrypt{a}
</span><span class='line'>以下のパッケージが更新されます:
</span><span class='line'>  python-acme
</span><span class='line'>更新: 1 個、新規インストール: 2 個、削除: 2 個、保留: 0 個。
</span><span class='line'>アーカイブ 204 k バイト中 149 k バイトを取得する必要があります。展開後に 14.3 k バイトのディスク領域が新たに消費されます。
</span><span class='line'>先に進みますか? [Y/n/?]
</span></code></pre></td></tr></table></div></figure>


<h2>自動更新設定確認</h2>

<p>インストール後に <code>etckeeper</code> の <code>commit</code> が発生して差分があるようだったので、
<code>sudo etckeeper vcs log -p --stat</code> で確認してみたところ、
<code>/etc/cron.d/certbot</code> ができていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/cron.d/certbot b/cron.d/certbot</span>
</span><span class='line'>new file mode 100644
</span><span class='line'><span class="gh">index 0000000..9c3dc35</span>
</span><span class='line'><span class="gd">--- /dev/null</span>
</span><span class='line'><span class="gi">+++ b/cron.d/certbot</span>
</span><span class='line'><span class="gu">@@ -0,0 +1,6 @@</span>
</span><span class='line'><span class="gi">+# Upstream recommends attempting renewal twice a day</span>
</span><span class='line'><span class="gi">+#</span>
</span><span class='line'><span class="gi">+# Eventually, this will be an opportunity to validate certificates</span>
</span><span class='line'><span class="gi">+# haven&#39;t been revoked, etc.  Renewal will only occur if expiration</span>
</span><span class='line'><span class="gi">+# is within 30 days.</span>
</span><span class='line'><span class="gi">+* */12 * * * root perl -e &#39;sleep int(rand(3600))&#39;; certbot -q renew</span>
</span></code></pre></td></tr></table></div></figure>


<h2>自動更新設定変更</h2>

<p>自動更新はログを残しつつ、 apache の reload も行う自前のスクリプトを用意していたので、
そちらを引き続き使うことにして、 <code>/etc/cron.d/certbot</code> はコメントアウトして動かないようにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>% sudo etckeeper vcs diff
</span><span class='line'><span class="gh">diff --git a/cron.d/certbot b/cron.d/certbot</span>
</span><span class='line'><span class="gh">index 9c3dc35..e81f9aa 100644</span>
</span><span class='line'><span class="gd">--- a/cron.d/certbot</span>
</span><span class='line'><span class="gi">+++ b/cron.d/certbot</span>
</span><span class='line'><span class="gu">@@ -3,4 +3,4 @@</span>
</span><span class='line'> # Eventually, this will be an opportunity to validate certificates
</span><span class='line'> # haven&#39;t been revoked, etc.  Renewal will only occur if expiration
</span><span class='line'> # is within 30 days.
</span><span class='line'><span class="gd">-* */12 * * * root perl -e &#39;sleep int(rand(3600))&#39;; certbot -q renew</span>
</span><span class='line'><span class="gi">+#* */12 * * * root perl -e &#39;sleep int(rand(3600))&#39;; certbot -q renew</span>
</span><span class='line'><span class="gh">diff --git a/cron.daily/local-letsencrypt b/cron.daily/local-letsencrypt</span>
</span><span class='line'><span class="gh">index 8b83e29..40a23ea 100755</span>
</span><span class='line'><span class="gd">--- a/cron.daily/local-letsencrypt</span>
</span><span class='line'><span class="gi">+++ b/cron.daily/local-letsencrypt</span>
</span><span class='line'><span class="gu">@@ -3,7 +3,7 @@ LOGFILE=/var/log/letsencrypt/renew.log</span>
</span><span class='line'> if [ -f &quot;$LOGFILE&quot; ]; then
</span><span class='line'>     savelog -c 90 -q &quot;$LOGFILE&quot;
</span><span class='line'> fi
</span><span class='line'><span class="gd">-if ! letsencrypt renew &gt; &quot;$LOGFILE&quot; 2&gt;&amp;1 ; then</span>
</span><span class='line'><span class="gi">+if ! certbot renew &gt; &quot;$LOGFILE&quot; 2&gt;&amp;1 ; then</span>
</span><span class='line'>     echo Automated renewal failed:
</span><span class='line'>     cat &quot;$LOGFILE&quot;
</span><span class='line'>     exit 1
</span></code></pre></td></tr></table></div></figure>


<h2>現状の自動更新スクリプト</h2>

<p>現状の自動更新スクリプト <code>/etc/cron.daily/local-letsencrypt</code> は以下のようにしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">LOGFILE</span><span class="o">=</span>/var/log/letsencrypt/renew.log
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;$LOGFILE&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    savelog -c <span class="m">90</span> -q <span class="s2">&quot;$LOGFILE&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> ! certbot renew &gt; <span class="s2">&quot;$LOGFILE&quot;</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">echo </span>Automated renewal failed:
</span><span class='line'>    cat <span class="s2">&quot;$LOGFILE&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;$LOGFILE&quot;</span>.0 <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    diff -u <span class="s2">&quot;$LOGFILE&quot;</span>.0 <span class="s2">&quot;$LOGFILE&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>apachectl graceful
</span></code></pre></td></tr></table></div></figure>


<p>以下のようなシンボリックリンクがあるので、 <code>letsencrypt renew</code> のままでも大丈夫そうでしたが、念のため変更しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% ls -alF /usr/bin/letsencrypt
</span><span class='line'>lrwxrwxrwx 1 root root 7  5月 28 07:30 /usr/bin/letsencrypt -&gt; certbot*
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntuで「ハッシュサムが適合しません」で backports のパッケージが入ってしまって大変だった]]></title>
    <link href="http://blog.n-z.jp/blog/2016-05-26-ubuntu-hash-mismatch.html"/>
    <updated>2016-05-26T22:23:35+09:00</updated>
    <id>http://blog.n-z.jp/blog/ubuntu-hash-mismatch</id>
    <content type="html"><![CDATA[<p><code>jp.archive.ubuntu.com</code> のミラーが不完全だったのか、「ハッシュサムが適合しません」という警告が出て、そのまま <code>sudo aptitude full-upgrade -DV</code> をしたら backports のパッケージが入ってしまって大変な思いをしたという話です。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>Ubuntu 14.04.4 LTS</li>
</ul>


<h2>警告</h2>

<p><code>sudo aptitude update</code> で以下のような警告とエラーが出ていました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>W: http://jp.archive.ubuntu.com/ubuntu/dists/trusty-updates/main/source/Sources を取得できませんでした: ハッシュサムが適合しません
</span><span class='line'>W: http://jp.archive.ubuntu.com/ubuntu/dists/trusty-updates/universe/source/Sources を取得できませんでした: ハッシュサムが適合しません
</span><span class='line'>W: http://jp.archive.ubuntu.com/ubuntu/dists/trusty-updates/main/binary-amd64/Packages を取得できませんでした: ハッシュ サムが適合しません
</span><span class='line'>W: http://jp.archive.ubuntu.com/ubuntu/dists/trusty-updates/universe/binary-amd64/Packages を取得できませんでした: ハッ シュサムが適合しません
</span><span class='line'>W: http://jp.archive.ubuntu.com/ubuntu/dists/trusty-updates/main/binary-i386/Packages を取得できませんでした: ハッシュサムが適合しません
</span><span class='line'>W: http://jp.archive.ubuntu.com/ubuntu/dists/trusty-updates/universe/binary-i386/Packages を取得できませんでした: ハッシュサムが適合しません
</span><span class='line'>E: 一部のインデックスファイルのダウンロードに失敗しました。無視されたか古いものを代わりに利用しています。
</span><span class='line'>E: パッケージキャッシュを再構築できませんでした</span></code></pre></td></tr></table></div></figure>


<h2>不用意なアップグレード</h2>

<p>あまり気にせず、セキュリティアップデートがあれば更新しておこうと思って、 <code>sudo aptitude full-upgrade -DV</code> を実行してみたところ、以下のパッケージが更新対象に上がりました。</p>

<p>証明書の設定で <code>SSLCertificateChainFile</code> が必要なくなる 2.4.8 をまたぐので、ちょっと危険な気はしましたが、個人のサーバーなので多少の停止時間は構わないだろうと思ってアップグレードしてしまいました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>以下のパッケージが更新されます:
</span><span class='line'>  apache2 [2.4.7-1ubuntu4.9 -&gt; 2.4.10-1ubuntu1.1~ubuntu14.04.1]
</span><span class='line'>  apache2-bin [2.4.7-1ubuntu4.9 -&gt; 2.4.10-1ubuntu1.1~ubuntu14.04.1]
</span><span class='line'>  apache2-data [2.4.7-1ubuntu4.9 -&gt; 2.4.10-1ubuntu1.1~ubuntu14.04.1]
</span><span class='line'>  apache2-dev [2.4.7-1ubuntu4.9 -&gt; 2.4.10-1ubuntu1.1~ubuntu14.04.1]
</span><span class='line'>  apache2-mpm-prefork [2.4.7-1ubuntu4.9 -&gt; 2.4.10-1ubuntu1.1~ubuntu14.04.1]
</span><span class='line'>  apache2-utils [2.4.7-1ubuntu4.9 -&gt; 2.4.10-1ubuntu1.1~ubuntu14.04.1]
</span><span class='line'>  libcgmanager0 [0.24-0ubuntu7.5 -&gt; 0.39-2ubuntu2~ubuntu14.04.1]</span></code></pre></td></tr></table></div></figure>


<h2>backports のパッケージだった</h2>

<p>ダウンロード中の URL を見て backports のパッケージが入ってしまっている、と気づいたのですが、手遅れで止める間もなく上がってしまいました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% apt-cache policy apache2
</span><span class='line'>apache2:
</span><span class='line'>  インストールされているバージョン: 2.4.7-1ubuntu4.9
</span><span class='line'>  候補:               2.4.10-1ubuntu1.1~ubuntu14.04.1
</span><span class='line'>  バージョンテーブル:
</span><span class='line'>     2.4.10-1ubuntu1.1~ubuntu14.04.1 0
</span><span class='line'>        100 http://jp.archive.ubuntu.com/ubuntu/ trusty-backports/main amd64 Packages
</span><span class='line'> *** 2.4.7-1ubuntu4.9 0
</span><span class='line'>        100 /var/lib/dpkg/status
</span><span class='line'>     2.4.7-1ubuntu4.5 0
</span><span class='line'>        500 http://security.ubuntu.com/ubuntu/ trusty-security/main amd64 Packages
</span><span class='line'>     2.4.7-1ubuntu4 0
</span><span class='line'>        500 http://jp.archive.ubuntu.com/ubuntu/ trusty/main amd64 Packages</span></code></pre></td></tr></table></div></figure>


<h2>ダウングレード失敗</h2>

<p><code>/etc/apt/preferences</code> を設定してダウングレードすることにしました。</p>

<p>まず以下を試してみたところ、 <code>base-files</code> などを含む大量のパッケージがダウングレード対象になってしまったので中断しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Package: *
</span><span class='line'>Pin: release a=trusty
</span><span class='line'>Pin-Priority: 1001</span></code></pre></td></tr></table></div></figure>


<p><code>apt-cache policy</code> で確認してみると、現在のバージョンのインストール候補がなくなっているのが原因の一つでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% apt-cache policy base-files
</span><span class='line'>base-files:
</span><span class='line'>  インストールされているバージョン: 7.2ubuntu5.4
</span><span class='line'>  候補:               7.2ubuntu5
</span><span class='line'>  バージョンテーブル:
</span><span class='line'> *** 7.2ubuntu5.4 0
</span><span class='line'>        100 /var/lib/dpkg/status
</span><span class='line'>     7.2ubuntu5 0
</span><span class='line'>       1001 http://ubuntutym.u-toyama.ac.jp/ubuntu/ trusty/main amd64 Packages</span></code></pre></td></tr></table></div></figure>


<p>そこで、 <code>/etc/apt/sources.list</code> の末尾に <code>archive.ubuntu.com</code> を一時的に追加することにしました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>deb http://archive.ubuntu.com/ubuntu/ trusty main restricted universe multiverse
</span><span class='line'>#deb-src http://archive.ubuntu.com/ubuntu/ trusty main restricted universe multiverse
</span><span class='line'>deb http://archive.ubuntu.com/ubuntu/ trusty-updates main restricted universe multiverse
</span><span class='line'>deb-src http://archive.ubuntu.com/ubuntu/ trusty-updates main restricted universe multiverse</span></code></pre></td></tr></table></div></figure>


<p>すると <code>trusty-updates</code> も出てきたのですが、 priority が 500 になって期待した値になっていませんでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% apt-cache policy base-files
</span><span class='line'>base-files:
</span><span class='line'>  インストールされているバージョン: 7.2ubuntu5.4
</span><span class='line'>  候補:               7.2ubuntu5
</span><span class='line'>  バージョンテーブル:
</span><span class='line'> *** 7.2ubuntu5.4 0
</span><span class='line'>        500 http://archive.ubuntu.com/ubuntu/ trusty-updates/main amd64 Packages
</span><span class='line'>        100 /var/lib/dpkg/status
</span><span class='line'>     7.2ubuntu5 0
</span><span class='line'>       1001 http://jp.archive.ubuntu.com/ubuntu/ trusty/main amd64 Packages
</span><span class='line'>       1001 http://archive.ubuntu.com/ubuntu/ trusty/main amd64 Packages</span></code></pre></td></tr></table></div></figure>


<p>次に <code>n=trusty</code> を試してみたところ、 <code>backports</code> も priority が 1001 になってしまってダウングレードできませんでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Package: *
</span><span class='line'>Pin: release n=trusty
</span><span class='line'>Pin-Priority: 1001</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% apt-cache policy base-files
</span><span class='line'>base-files:
</span><span class='line'>  インストールされているバージョン: 7.2ubuntu5.4
</span><span class='line'>  候補:               7.2ubuntu5.4
</span><span class='line'>  バージョンテーブル:
</span><span class='line'> *** 7.2ubuntu5.4 0
</span><span class='line'>       1001 http://archive.ubuntu.com/ubuntu/ trusty-updates/main amd64 Packages
</span><span class='line'>        100 /var/lib/dpkg/status
</span><span class='line'>     7.2ubuntu5 0
</span><span class='line'>       1001 http://jp.archive.ubuntu.com/ubuntu/ trusty/main amd64 Packages
</span><span class='line'>       1001 http://archive.ubuntu.com/ubuntu/ trusty/main amd64 Packages
</span><span class='line'>% apt-cache policy apache2
</span><span class='line'>apache2:
</span><span class='line'>  インストールされているバージョン: 2.4.10-1ubuntu1.1~ubuntu14.04.1
</span><span class='line'>  候補:               2.4.10-1ubuntu1.1~ubuntu14.04.1
</span><span class='line'>  バージョンテーブル:
</span><span class='line'> *** 2.4.10-1ubuntu1.1~ubuntu14.04.1 0
</span><span class='line'>       1001 http://jp.archive.ubuntu.com/ubuntu/ trusty-backports/main amd64 Packages
</span><span class='line'>        100 /var/lib/dpkg/status
</span><span class='line'>     2.4.7-1ubuntu4.9 0
</span><span class='line'>       1001 http://archive.ubuntu.com/ubuntu/ trusty-updates/main amd64 Packages
</span><span class='line'>     2.4.7-1ubuntu4.5 0
</span><span class='line'>       1001 http://security.ubuntu.com/ubuntu/ trusty-security/main amd64 Packages
</span><span class='line'>     2.4.7-1ubuntu4 0
</span><span class='line'>       1001 http://jp.archive.ubuntu.com/ubuntu/ trusty/main amd64 Packages
</span><span class='line'>       1001 http://archive.ubuntu.com/ubuntu/ trusty/main amd64 Packages</span></code></pre></td></tr></table></div></figure>


<h2>ダウングレード成功</h2>

<p>最終的に <code>a=trusty-updates</code> と <code>a=trusty-security</code> も追加することでダウングレードできました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Package: *
</span><span class='line'>Pin: release a=trusty
</span><span class='line'>Pin-Priority: 1001
</span><span class='line'>
</span><span class='line'>Package: *
</span><span class='line'>Pin: release a=trusty-updates
</span><span class='line'>Pin-Priority: 1001
</span><span class='line'>
</span><span class='line'>Package: *
</span><span class='line'>Pin: release a=trusty-security
</span><span class='line'>Pin-Priority: 1001</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% apt-cache policy apache2
</span><span class='line'>apache2:
</span><span class='line'>  インストールされているバージョン: 2.4.10-1ubuntu1.1~ubuntu14.04.1
</span><span class='line'>  候補:               2.4.7-1ubuntu4.9
</span><span class='line'>  バージョンテーブル:
</span><span class='line'> *** 2.4.10-1ubuntu1.1~ubuntu14.04.1 0
</span><span class='line'>        100 http://jp.archive.ubuntu.com/ubuntu/ trusty-backports/main amd64 Packages
</span><span class='line'>        100 /var/lib/dpkg/status
</span><span class='line'>     2.4.7-1ubuntu4.9 0
</span><span class='line'>       1001 http://archive.ubuntu.com/ubuntu/ trusty-updates/main amd64 Packages
</span><span class='line'>     2.4.7-1ubuntu4.5 0
</span><span class='line'>       1001 http://security.ubuntu.com/ubuntu/ trusty-security/main amd64 Packages
</span><span class='line'>     2.4.7-1ubuntu4 0
</span><span class='line'>       1001 http://jp.archive.ubuntu.com/ubuntu/ trusty/main amd64 Packages
</span><span class='line'>       1001 http://archive.ubuntu.com/ubuntu/ trusty/main amd64 Packages
</span><span class='line'>% apt-cache policy base-files
</span><span class='line'>base-files:
</span><span class='line'>  インストールされているバージョン: 7.2ubuntu5.4
</span><span class='line'>  候補:               7.2ubuntu5.4
</span><span class='line'>  バージョンテーブル:
</span><span class='line'> *** 7.2ubuntu5.4 0
</span><span class='line'>       1001 http://archive.ubuntu.com/ubuntu/ trusty-updates/main amd64 Packages
</span><span class='line'>        100 /var/lib/dpkg/status
</span><span class='line'>     7.2ubuntu5 0
</span><span class='line'>       1001 http://jp.archive.ubuntu.com/ubuntu/ trusty/main amd64 Packages
</span><span class='line'>       1001 http://archive.ubuntu.com/ubuntu/ trusty/main amd64 Packages</span></code></pre></td></tr></table></div></figure>


<h2>backports のコメントアウト</h2>

<p>backports のパッケージは使っていなかったので、この後 backports の apt-line はコメントアウトしました。</p>

<h2>まとめ</h2>

<p><code>apt</code> の <code>update</code> に失敗した時はアップグレード対象のパッケージに注意しましょう。</p>

<p>ダウングレードする時は <code>apt_preferences(5)</code> の <code>Pin</code> 設定をうまく工夫しましょう。</p>

<p>backports のパッケージが不要なら backports の apt-line を追加するのは避けましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[letsencrypt-auto が certbot-auto になった]]></title>
    <link href="http://blog.n-z.jp/blog/2016-05-13-letsencrypt-certbot.html"/>
    <updated>2016-05-13T23:40:09+09:00</updated>
    <id>http://blog.n-z.jp/blog/letsencrypt-certbot</id>
    <content type="html"><![CDATA[<p><a href="https://www.eff.org/deeplinks/2016/05/announcing-certbot-new-tls-robot">EFF の Let&rsquo;s Encrypt クライアントが Certbot になった</a>という話です。</p>

<!--more-->


<h2>経緯</h2>

<p><a href="https://letsencrypt.jp/usage/">Let&rsquo;s Encrypt の使い方</a> から引用しつつまとめます。</p>

<ul>
<li>2016年4月12日 に、Let&rsquo;s Encrypt の公開ベータプログラム（Public Beta Program）が終了し、正式サービスが開始されました。</li>
<li>この時点でベータがとれたのは Let&rsquo;s Encrypt のサービス側で <code>letsencrypt-auto</code> コマンドを含む github.com/letsencrypt/letsencrypt にあったクライアントはまだベータのままでした。</li>
<li>クライアントの 0.6.0 のリリースにあたり github.com/letsencrypt/letsencrypt は github.com/certbot/certbot に移動して Certbot に改名されました。</li>
<li><a href="https://www.eff.org/deeplinks/2016/05/announcing-certbot-new-tls-robot">Announcing Certbot: EFF&rsquo;s Client for Let&rsquo;s Encrypt</a> に書いてあるように Certbot もまだベータで、今年中に Certbot 1.0 のリリースが予定されているようです。</li>
</ul>


<p>改名されたのは EFF の Let&rsquo;s Encrypt クライアントだけでサービス自体は Let&rsquo;s Encrypt という名前のままです。</p>

<h2>その他の変更点</h2>

<p>インストール方法も <code>git clone</code> して <code>letsencrypt-auto</code> を実行する方法から、 <code>https://dl.eff.org/certbot-auto</code> をダウンロードして実行する方法に変わっています。</p>

<h2>インストール済み環境への影響</h2>

<p>インストール済み環境ではどうなるのかと思って、 <code>letsencrypt-auto --help</code> を実行してアップグレードさせてみたところ、以下のようになりました。</p>

<p>出力をよく見ると <code>sudo</code> のところで <code>CERTBOT_AUTO</code> という環境変数の指定が増えていて、 <code>letsencrypt-auto</code> コマンド自体はそのまま使えるようです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% ~/letsencrypt/letsencrypt-auto --help
</span><span class='line'>Checking for new version...
</span><span class='line'>Upgrading letsencrypt-auto 0.5.0 to 0.6.0...
</span><span class='line'>Replacing letsencrypt-auto...
</span><span class='line'>   sudo cp -p /home/vpsuser/letsencrypt/letsencrypt-auto /tmp/user/1000/tmp.AiqGtrjioJ/letsencrypt-auto.permission-clone
</span><span class='line'>   sudo cp /tmp/user/1000/tmp.AiqGtrjioJ/letsencrypt-auto /tmp/user/1000/tmp.AiqGtrjioJ/letsencrypt-auto.permission-clone
</span><span class='line'>   sudo mv -f /tmp/user/1000/tmp.AiqGtrjioJ/letsencrypt-auto.permission-clone /home/vpsuser/letsencrypt/letsencrypt-auto
</span><span class='line'>Creating virtual environment...
</span><span class='line'>Installing Python packages...
</span><span class='line'>Installation succeeded.
</span><span class='line'>Requesting root privileges to run certbot...
</span><span class='line'>   sudo CERTBOT_AUTO=/home/vpsuser/letsencrypt/letsencrypt-auto /home/vpsuser/.local/share/letsencrypt/bin/letsencrypt --help
</span><span class='line'>
</span><span class='line'>  letsencrypt-auto [SUBCOMMAND] [options] [-d domain] [-d domain] ...
</span><span class='line'>
</span><span class='line'>Certbot can obtain and install HTTPS/TLS/SSL certificates.  By default,
</span><span class='line'>it will attempt to use a webserver both for obtaining and installing the
</span><span class='line'>cert. Major SUBCOMMANDS are:
</span><span class='line'>
</span><span class='line'>  (default) run        Obtain & install a cert in your current webserver
</span><span class='line'>  certonly             Obtain cert, but do not install it (aka "auth")
</span><span class='line'>  install              Install a previously obtained cert in a server
</span><span class='line'>  renew                Renew previously obtained certs that are near expiry
</span><span class='line'>  revoke               Revoke a previously obtained certificate
</span><span class='line'>  rollback             Rollback server configuration changes made during install
</span><span class='line'>  config_changes       Show changes made to server config during installation
</span><span class='line'>  plugins              Display information about installed plugins
</span><span class='line'>
</span><span class='line'>Choice of server plugins for obtaining and installing cert:
</span><span class='line'>
</span><span class='line'>  --apache          Use the Apache plugin for authentication & installation
</span><span class='line'>  --standalone      Run a standalone webserver for authentication
</span><span class='line'>  (nginx support is experimental, buggy, and not installed by default)
</span><span class='line'>  --webroot         Place files in a server's webroot folder for authentication
</span><span class='line'>
</span><span class='line'>OR use different plugins to obtain (authenticate) the cert and then install it:
</span><span class='line'>
</span><span class='line'>  --authenticator standalone --installer apache
</span><span class='line'>
</span><span class='line'>More detailed help:
</span><span class='line'>
</span><span class='line'>  -h, --help [topic]    print this message, or detailed help on a topic;
</span><span class='line'>                        the available topics are:
</span><span class='line'>
</span><span class='line'>   all, automation, paths, security, testing, or any of the subcommands or
</span><span class='line'>   plugins (certonly, install, nginx, apache, standalone, webroot, etc)</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第72回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-05-07-rubykansai72.html"/>
    <updated>2016-05-07T13:42:09+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai72</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/43253" title="第72回 Ruby関西 勉強会">第72回 Ruby関西 勉強会</a>
に参加しました。
アプローズタワーというビルに入るのは初めてだったので、どこから上に上がるのか、ちょっとわかりにくかったです。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>オープニング</h2>

<ul>
<li>会場説明</li>
<li>懇親会は事前に企画していなかったので 15 時ぐらいまでに受付で募集してその状況次第で決定</li>
<li>スポンサーセッション (西谷さん)</li>
</ul>


<h2>低レイヤから考えるrubyプログラミング</h2>

<ul>
<li>よしだあつしさん</li>
<li>自己紹介は時間がないので省略して後で</li>
<li>メモリ上のクラスやオブジェクト</li>
<li>RClass 構造体や RObject 構造体などの説明</li>
<li>ruby のメモリ利用の例</li>
<li>メソッド呼び出し</li>
<li>下のレイヤーを勉強すると理解が深まる</li>
<li>時間があったので自己紹介</li>
<li><a href="https://twitter.com/yalab">https://twitter.com/yalab</a></li>
<li><a href="http://shop.oke-ya.com/">http://shop.oke-ya.com/</a></li>
<li><a href="https://www.makuake.com/project/oke-ya/">https://www.makuake.com/project/oke-ya/</a></li>
<li><a href="https://github.com/yalab">https://github.com/yalab</a></li>
<li><a href="http://www.slideshare.net/yalab/ruby-61765227">低レイヤから見たrubyプログラミング</a></li>
</ul>


<h2>Wakayama.rb発のmrubyボード「GR-CITRUS」の使い方</h2>

<ul>
<li>Wakayama.rb のたろサさん</li>
<li>今は Mac や Windows 8, 10 で動かないので Windows 7 でしか動かない状態 (シリアルのドライバーの問題)</li>
<li>Wakayama.rb の活動報告</li>
<li>GR-CITRUS</li>
<li>ピンク色の基盤</li>
<li>GR = がじぇっとるねさす</li>
<li>CITRUS (シトラス) = 和歌山っぽい名前</li>
<li>秋月電子通商販売予定 (8 月)</li>
<li>GR-CITRUS の使い方</li>
<li><a href="https://github.com/wakayamarb/wrbb-v2lib-firm">https://github.com/wakayamarb/wrbb-v2lib-firm</a></li>
<li>firmware/citrus_sketch.bin を書き込む</li>
<li>開発環境 Rubic</li>
<li>chrome アプリなので簡単インストール</li>
<li>GR-CITRUS のライブラリ紹介</li>
<li>動作デモ</li>
<li><a href="http://www.slideshare.net/MinaoYamamoto/grcitrusruby">GR-CITRUS搭載のRubyファームウェアの説明</a></li>
<li>WA-MIKAN (みかんボード)</li>
<li>WiFi 通信ボード</li>
<li>Linux では動くかどうか試してないのでわからない</li>
</ul>


<h2>休憩</h2>

<ul>
<li><a href="http://railsgirls.com/osaka">Rails Girls Osaka #3</a> 2016年6月18日-19日</li>
<li><a href="http://rubykaigi.org/2016">RubyKaigi 2016</a> 2016年9月8日(木)-10日(土)</li>
</ul>


<h2>今すぐRailsアプリを多言語化してみよう</h2>

<ul>
<li><a href="https://twitter.com/youcune">https://twitter.com/youcune</a></li>
<li><a href="https://youcune.com/">https://youcune.com/</a></li>
<li><a href="http://yurie.sexy">http://yurie.sexy</a></li>
<li><a href="http://ur3.jp/yurie-blog">http://ur3.jp/yurie-blog</a></li>
<li><a href="https://speakerdeck.com/youcune/i18n-your-rails-application">いますぐRailsアプリを英語化してみよう / i18n your Rails application</a></li>
</ul>


<h2>Ruby on Rails もくもく会をほぼ毎週開催してきてわかった事</h2>

<ul>
<li>八木さん</li>
<li>もくもく会開催の経緯</li>
<li>感じたこと</li>
<li>起こったこと</li>
<li>みんなピザが好き</li>
<li>今後やっていきたいこと</li>
<li>なぜ?</li>
<li><a href="https://sou-meetup.doorkeeper.jp/">https://sou-meetup.doorkeeper.jp/</a></li>
</ul>


<h2>Github Pages で独自ドメインのサイトを作る</h2>

<ul>
<li>HDMI で接続できなかったので画面を OHP でうつして表示</li>
<li><a href="https://twitter.com/107steps">https://twitter.com/107steps</a></li>
<li><a href="https://ruby-maizuru.doorkeeper.jp/">Ruby舞鶴</a></li>
<li>Jekyll</li>
<li><a href="https://pages.github.com/">GitHub Pages</a></li>
<li>Google Analytics</li>
<li><a href="https://github.com/masoo/masoo.jp/blob/master/_config.yml#L8"><code>_config.yml</code></a> に変数を作り true の時だけ<a href="https://github.com/masoo/masoo.jp/blob/master/_includes/google_analytics.html">有効にした</a></li>
<li>Cloudflare の導入</li>
<li><a href="https://gtmetrix.com/">https://gtmetrix.com/</a> で B 判定が A 判定に</li>
<li>https 導入</li>
<li>Cloudflare で <a href="https://support.cloudflare.com/hc/en-us/articles/200170416-What-do-the-SSL-options-mean-">flexible SSL</a></li>
<li>Accelerated Mobile Page の対応 (失敗)</li>
<li><a href="https://github.com/juusaw/amp-jekyll">https://github.com/juusaw/amp-jekyll</a></li>
<li><a href="https://jekyllrb.com/docs/plugins/">https://jekyllrb.com/docs/plugins/</a></li>
<li><a href="http://gosyujin.github.io/2013/05/21/jekyll-plugin-githubpages/">GitHub PagesでJekyllプラグインを使えるようにするには…</a></li>
<li><a href="http://107steps.la.coocan.jp/">http://107steps.la.coocan.jp/</a></li>
<li>質疑応答</li>
<li>jekyll の <code>--config</code> オプションで <code>_config.yml</code> の設定を上書き設定できるのを使うのが良いのでは。</li>
<li>jekyll, middleman, Hugo などがある中で jekyll を選んだ理由は?</li>
<li>最初に見かけたのが jekyll だったから</li>
<li>発表資料: <a href="http://www.slideshare.net/107steps/github-pages-61765408">Github pagesで独自ドメインのサイトを作る</a></li>
</ul>


<h2>関西Rubyコミュニティー紹介</h2>

<ul>
<li><a href="https://twitter.com/ogomr">ogomr さん</a></li>
<li><a href="http://rubykansai.github.io/kansai-ruby-community/" title="関西 Ruby コミュニティー 紹介">関西 Ruby コミュニティー 紹介</a></li>
<li><a href="https://github.com/ruby-no-kai/official/wiki/RegionalRubyistMeetUp" title="地域Rubyの会">地域Rubyの会</a></li>
</ul>


<h2>Ruby 初級者向けレッスン - 文字列</h2>

<ul>
<li><a href="https://github.com/higaki/learn_ruby_kansai_72">https://github.com/higaki/learn_ruby_kansai_72</a></li>
</ul>


<h2>クロージング</h2>

<ul>
<li><a href="http://railsgirls.com/osaka">Rails Girls Osaka #3</a> 2016年6月18日-19日</li>
<li><a href="http://rubykaigi.org/2016">RubyKaigi 2016</a> 2016年9月8日(木)-10日(土)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO&東海道らぐオフラインミーティング 2016/05/01 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-05-01-lilo-tokaidolug.html"/>
    <updated>2016-05-01T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-tokaidolug</id>
    <content type="html"><![CDATA[<p><a href="https://lilo.doorkeeper.jp/events/42910" title="LILO&amp;東海道らぐオフラインミーティング 2016/05/01">LILO&amp;東海道らぐオフラインミーティング 2016/05/01</a>
に参加しました。</p>

<p>今回もアンカンファレンス形式でした。</p>

<!--more-->


<h2>メモ</h2>

<p>今回のメモです。</p>

<ul>
<li>いつものように鍵担当の人が遅れていた</li>
<li>ハッシュタグ: <code>#lilo_jp</code> <code>#東海道らぐ</code></li>
<li>登録参加者数 13名</li>
<li>自己紹介から</li>
<li>はしもとさん : 東海道らぐともうひとつの東海道</li>
<li>東海道らぐ 今年で 5 周年目突入</li>
<li>インプットメソッドの話</li>
<li><a href="https://github.com/tkd53">https://github.com/tkd53</a></li>
<li>Genji も方向性が違うので続けるという話</li>
<li>自分の発表</li>
<li>休憩</li>
<li>Kapperさん : シンガポールFossasia2016に初参加してみた</li>
<li>あひる焼き先進国</li>
<li>シンガポール英語とインド英語</li>
<li>マニアックな話が多かった</li>
<li>アンカンファレンス形式は海外ではメジャー</li>
<li>3月はチケット代が高い</li>
<li>京橋ひよわさん : 自宅サーバのトラブルを楽しもう</li>
<li><a href="http://hiyowa.com/">http://hiyowa.com/</a></li>
<li><code>SSLCertificateChainFile</code> がなくなっていたはまった話で nginx は単純に cat で中間証明書を結合すればいけるが apache はダメらしい <a href="http://serverfault.com/questions/588986/sslcertificatechainfile-deprecation-warning-on-apache-2-4-8">http://serverfault.com/questions/588986/sslcertificatechainfile-deprecation-warning-on-apache-2-4-8</a></li>
<li>owncloud はエラー表示が親切</li>
<li>こんどうさん : やりなおし方について</li>
<li>デュアルブートを諦めれば楽</li>
<li>fdisk /mbr とか fixmbr とか</li>
<li>EaseUS Todo Backup で D2D Backup</li>
<li>Windows 10 が勝手にアップグレードする話</li>
<li>UEFI だと ESP パーティションをマウントして Linux のブート情報を消すだけ</li>
<li>おくのさん : 格安モバイルノート PC で Linux</li>
<li>hp Stream 11-d000 の 2 代目モデル</li>
<li>hp Stream 11-r000</li>
<li>Wi-Fi がカニから Intel</li>
<li>Linux Mint 17.3 は Wi-Fi が新しすぎて対応していなかったのでアップグレードが必要だった</li>
<li>Lubuntu 16.04 だと問題なく動いた</li>
<li>DELL New Inspiron 11 3000 シリーズの方が良さそうだったというオチ</li>
<li>休憩</li>
<li>しまださん : このごろの状況</li>
<li>opencocon v9i</li>
<li>Libretto L1 の CD ブート対応</li>
<li>ビルド時間 3 時間の半分は WebKit</li>
<li>opencocon v10</li>
<li>Linux 4.4</li>
<li>uClibc から musl libc に変更</li>
<li>musl libc を採用しているディストリ</li>
<li>標準採用 : Alpine Linux</li>
<li>選択可能 : Gentoo, Buildroot, OpenEmbedded, などなど</li>
<li>ext4 に正式対応</li>
<li>grub-legacy も Arch Linux のパッチで対応</li>
<li>Dynabook AZ + Linux 3.18 〜 を公式サポートする唯一のディストリビューションになる予定</li>
<li>AZ はシンクライアント用途にしてはちょっと高速すぎる?</li>
<li>デスクトップでもいいぐらい</li>
<li>v10 から名前に thinclient が入って opencocon thinclient v10 になる</li>
<li>Allwinner タブレットの話</li>
<li>さとうさん</li>
<li><code>sleep 300; poweroff</code> を実行してから開始</li>
<li>タイムラプス</li>
<li>赤外線カメラと通常のカメラを並べてくっつけて同時に撮影</li>
<li>raspistill で撮影</li>
<li>mencoder で jpg から動画に変換</li>
<li>動画表示デモ</li>
<li>ききょうさん : openSUSE で bot を作ろう</li>
<li>鹿焼き</li>
<li>BotBuilder/Connector/Directly</li>
<li>LILO&amp;東海道らぐの次回は 8 月 (お盆) ぐらいの予定</li>
</ul>


<h2>発表した内容</h2>

<p>このオフラインミーティングのネタのためも兼ねて、 lilo.linux.or.jp のサーバーを wheezy から jessie にあげたので、その話をしました。</p>

<p>内容は大きく分けると jessie にあげた話、二要素認証を導入した話、 letsencrypt の証明書を導入した話でした。</p>

<p>スライドはいつも通り <a href="http://slide.rabbit-shocker.org/authors/znz/lilo-20160501/">Rabbit Slide Show</a> (<a href="https://rubygems.org/gems/rabbit-slide-znz-lilo-20160501">RubyGems</a>), <a href="http://www.slideshare.net/znzjp/lilo-20160501">SlideShare</a>, <a href="https://speakerdeck.com/znz/lilo-dot-linux-dot-or-dot-jp-from-wheezy-to-jessie">Speaker Deck</a> にあげています。</p>

<iframe src="http://slide.rabbit-shocker.org/authors/znz/lilo-20160501/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="http://slide.rabbit-shocker.org/authors/znz/lilo-20160501/" title="lilo.linux.or.jp を wheezy から jessie にあげた話">lilo.linux.or.jp を wheezy から jessie にあげた話</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wheezy から jessie にあげたら mailman でエラーが起きていた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-30-mailman-error.html"/>
    <updated>2016-04-30T23:52:04+09:00</updated>
    <id>http://blog.n-z.jp/blog/mailman-error</id>
    <content type="html"><![CDATA[<p>wheezy から jessie にあげた VPS の環境のうちの 1 個で mailman を使っていたのですが、ちゃんと確認していなかったらエラーが起きてちゃんとメールが配送されていなかったので、修正しました。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>Debian GNU/Linux amd64 の wheezy から jessie にあげた環境</li>
<li><a href="http://packages.debian.org/mailman">mailman</a> 1:2.1.15-1+deb7u1 から 1:2.1.18-2</li>
</ul>


<h2>エラーの内容</h2>

<p><code>/var/log/mailman/error</code> を見ると以下のようなエラーが出てメールの配送がされていませんでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Apr 30 17:02:36 2016 (17947) Uncaught runner exception: 'utf8' codec can't decode byte 0xcb in position 5: invalid conti
</span><span class='line'>nuation byte
</span><span class='line'>Apr 30 17:02:36 2016 (17947) Traceback (most recent call last):
</span><span class='line'>  File "/var/lib/mailman/Mailman/Queue/Runner.py", line 119, in _oneloop
</span><span class='line'>    self._onefile(msg, msgdata)
</span><span class='line'>  File "/var/lib/mailman/Mailman/Queue/Runner.py", line 190, in _onefile
</span><span class='line'>    keepqueued = self._dispose(mlist, msg, msgdata)
</span><span class='line'>  File "/var/lib/mailman/Mailman/Queue/IncomingRunner.py", line 130, in _dispose
</span><span class='line'>    more = self._dopipeline(mlist, msg, msgdata, pipeline)
</span><span class='line'>  File "/var/lib/mailman/Mailman/Queue/IncomingRunner.py", line 153, in _dopipeline
</span><span class='line'>    sys.modules[modname].process(mlist, msg, msgdata)
</span><span class='line'>  File "/var/lib/mailman/Mailman/Handlers/CookHeaders.py", line 179, in process
</span><span class='line'>    i18ndesc = uheader(mlist, mlist.description, 'Reply-To')
</span><span class='line'>  File "/var/lib/mailman/Mailman/Handlers/CookHeaders.py", line 65, in uheader
</span><span class='line'>    return Header(s, charset, maxlinelen, header_name, continuation_ws)
</span><span class='line'>  File "/usr/lib/python2.7/email/header.py", line 183, in __init__
</span><span class='line'>    self.append(s, charset, errors)
</span><span class='line'>  File "/usr/lib/python2.7/email/header.py", line 267, in append
</span><span class='line'>    ustr = unicode(s, incodec, errors)
</span><span class='line'>UnicodeDecodeError: 'utf8' codec can't decode byte 0xcb in position 5: invalid continuation byte
</span><span class='line'>
</span><span class='line'>Apr 30 17:02:36 2016 (17947) SHUNTING: 1462003356.244866+ea73a2d0f0636f691f515c4b199b5e8c21436142</span></code></pre></td></tr></table></div></figure>


<h2>調査</h2>

<p>エラーメッセージで適当に切り出していろいろ検索してみたところ、
<a href="https://bugs.launchpad.net/mailman/+bug/1462755">qrunner crashes on invalid unicode sequence</a>
と同じ現象だとわかりました。</p>

<p>コメントにあるように調査してみたところ、確かに description に問題がありそうでした。
Web の設定画面で見てみると info も化けていたので、元の設定を調査するために <code>withlist</code> の環境で表示しておきました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># withlist lilo
</span><span class='line'>lilo のリストを読み込中 (ロック解除)
</span><span class='line'>変数 `m' が lilo の MailList インスタンスです
</span><span class='line'>&gt;&gt;&gt; m.preferred_language
</span><span class='line'>'ja'
</span><span class='line'>&gt;&gt;&gt; m.description
</span><span class='line'>'LILO \xcb\xdc\xc2\xceML'
</span><span class='line'>&gt;&gt;&gt; m.info
</span><span class='line'>'LILO ( \xa4\xea\xa4\xed : Linux Install Learning Osaka ) \xa4\xcf\xb4\xd8\xc0\xbe\xa4\xce Linux \xa5\xe6\xa1\xbc\xa5\xb6\xb2\xf1\xa4\xc7\xa4\xb9\xa1\xa3 \xbc\xe7\xa4\xcb\xb4\xd8\xc0\xbe\xa4\xce Linux \xa5\xe6\xa1\xbc\xa5\xb6\xa4\xce\xb8\xf2\xce\xae\xa1\xa2\xbe\xf0\xca\xf3\xb8\xf2\xb4\xb9\xa4\xce\xbe\xec\xa4\xf2\xc4\xf3\xb6\xa1\xa4\xb9\xa4\xeb\xa4\xbf\xa4\xe1\xa4\xcb\xb3\xe8\xc6\xb0\xa4\xb7\xa4\xc6\xa4\xa4\xa4\xde\xa4\xb9\xa1\xa3'
</span><span class='line'>&gt;&gt;&gt;
</span><span class='line'>最終処理中
</span><span class='line'>#</span></code></pre></td></tr></table></div></figure>


<h2>変換</h2>

<p>何でも良かったのですが、使い慣れているという理由で ruby の nkf で変換しました。
変換した結果を Web の設定画面から設定し直しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rbenv exec irb -r irb/completion --simple-prompt
</span><span class='line'>&gt;&gt; require 'nkf'
</span><span class='line'>=&gt; true
</span><span class='line'>&gt;&gt; NKF.nkf('-w',"LILO \xcb\xdc\xc2\xceML")
</span><span class='line'>=&gt; "LILO 本体ML"
</span><span class='line'>&gt;&gt; NKF.nkf('-w',"'LILO ( \xa4\xea\xa4\xed : Linux Install Learning Osaka ) \xa4\xcf\xb4\xd8\xc0\xbe\xa4\xce Linux \xa5\xe6\xa1\xbc\xa5\xb6\xb2\xf1\xa4\xc7\xa4\xb9\xa1\xa3 \xbc\xe7\xa4\xcb\xb4\xd8\xc0\xbe\xa4\xce Linux \xa5\xe6\xa1\xbc\xa5\xb6\xa4\xce\xb8\xf2\xce\xae\xa1\xa2\xbe\xf0\xca\xf3\xb8\xf2\xb4\xb9\xa4\xce\xbe\xec\xa4\xf2\xc4\xf3\xb6\xa1\xa4\xb9\xa4\xeb\xa4\xbf\xa4\xe1\xa4\xcb\xb3\xe8\xc6\xb0\xa4\xb7\xa4\xc6\xa4\xa4\xa4\xde\xa4\xb9\xa1\xa3'")
</span><span class='line'>=&gt; "'LILO ( りろ : Linux Install Learning Osaka ) は関西の Linux ユーザ会です。 主に関西の Linux ユーザの交流、情報交換 の場を提供するために活動しています。'"
</span><span class='line'>&gt;&gt;</span></code></pre></td></tr></table></div></figure>


<h2>失敗したメールの再配送</h2>

<p>設定し直した後、しばらく待ってみても再配送はされなかったので、メールキューの強制再実行が必要かと思って、 <code>/var/lib/mailman</code> 以下を調べてみたところ、 <code>/var/lib/mailman/qfiles/shunt/</code> の中にファイルが溜まっていることがわかりました。</p>

<p>さらに調べていて見つけた
<a href="http://docs.python.jp/contrib/mailman/siteadmin.html#unshunt">http://docs.python.jp/contrib/mailman/siteadmin.html#unshunt</a>
によると qrunner が処理中にエラーを発生させて処理できなかったメールは <code>&lt;prefix&gt;/qfiles/shunt</code> に保存されていて、<code>unshunt</code> コマンドで処理できるらしいということなので、試してみたところ、ちゃんと溜まっていたメールが配送されました。</p>

<h2>NEWS.Debian 確認</h2>

<p>復旧を優先して、ちゃんと見るのを忘れていたのですが、 <code>/usr/share/doc/mailman/NEWS.Debian.gz</code> によると <code>mailman (1:2.1.16-1exp1)</code> で UTF-8 化したから description を webinterface などから設定しなおせと書いてありました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mailman (1:2.1.16-1exp1) experimental; urgency=low
</span><span class='line'>
</span><span class='line'>  This version has changed the encoding of most strings, templates
</span><span class='line'>  and pages to UTF-8 to meet the Debian release goal of full UTF-8
</span><span class='line'>  support in all packages. It also no longer automatically converts
</span><span class='line'>  mails to ISO-8859-1.
</span><span class='line'>
</span><span class='line'>  If you have been using any nōn-ASCII strings in places such as
</span><span class='line'>  the mailing list description, these were be stored wrongly in the
</span><span class='line'>  list configuration file (config.pck), so you will need to change
</span><span class='line'>  those (e.g. via the webinterface) again in order to have them be
</span><span class='line'>  displayed correctly.
</span><span class='line'>
</span><span class='line'> -- Thorsten Glaser &lt;tg@mirbsd.de&gt;  Sun, 29 Dec 2013 14:35:50 +0000</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>mailman が UTF-8 対応で description や info などに日本語などの ASCII 以外の文字を使っているとエラーが起きるという話でした。</p>

<p>実行例で気付いた人もいると思いますが、 lilo.linux.or.jp のサーバーでの話で、他にも管理用の ML などがあるのですが、それらは description や info が空だったので問題が起きていなかったようです。</p>

<p>教訓としては、急いでいても apt-listchanges で最低限 NEWS だけはちゃんと読むようにした方が良いということでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KOF勉強会(今回のテーマ：ネットワーク)に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-30-kof.html"/>
    <updated>2016-04-30T13:38:16+09:00</updated>
    <id>http://blog.n-z.jp/blog/kof</id>
    <content type="html"><![CDATA[<p><a href="https://atnd.org/events/75591" title="KOF勉強会(今回のテーマ：ネットワーク) #KOF勉強会 #さくらクラブ">KOF勉強会(今回のテーマ：ネットワーク) #KOF勉強会 #さくらクラブ</a>
に参加しました。</p>

<!--more-->


<p>以下、今回のメモです。</p>

<h2>会場案内、全体説明</h2>

<ul>
<li>今回も会場無線 LAN がありました。</li>
<li>今回は 14:00-17:00</li>
<li>今年の KOF は 11/11(金)-12(土)</li>
<li><a href="https://twitter.com/KansaiOpenForum" title="@KansaiOpenForum">@KansaiOpenForum</a></li>
<li>今後の予定</li>
<li>6/4(土) Redmine, Drupal</li>
<li>7/18(月祝) 未定</li>
<li>8/6(土) 未定</li>
<li>9/22(木祝) 未定</li>
<li>10/8(土) and/or 10/22(土) 未定</li>
</ul>


<h2>KOFとは</h2>

<ul>
<li>重要な話は飲み屋で決まる</li>
<li>問題点は会場、お金、人</li>
<li>最初は Kansai Opensource and Freeware</li>
<li>Freeware という言葉が問題になった</li>
<li>今は Kansai Open Forum</li>
<li>OSS と IT コミュニティ</li>
<li>広い意味での IT コミュニティ</li>
<li>IT コミュニティの甲子園</li>
<li>録音していた内容は VOD として公開される</li>
<li>(例として紹介された VOD は <a href="http://www.tezuka-gu.ac.jp/faculty/information_media/">http://www.tezuka-gu.ac.jp/faculty/information_media/</a> だったので、たぶんここで公開されると思います)</li>
</ul>


<h2>KOF2015会場ネットワークのできるまで</h2>

<ul>
<li>京都女子大学や学部の紹介</li>
<li>Cisco Networking Academy</li>
<li>実機演習の前の Packet Tracer のデモ</li>
<li>KOF のネットワークの担当は今が 6 代目</li>
<li>KOF での話</li>
<li>RSTP で冗長化</li>
<li>Cisco Network Assistant</li>
</ul>


<h2>NSCの取り組みご紹介と、ネットワーク運用から得られた知見</h2>

<ul>
<li>参加者向けには後で資料を配布するのでメモなどに気を取られずにしっかり話を聞くようにという話があったので、あまりメモは取っていません。</li>
<li><a href="http://www.nsc.gr.jp/">http://www.nsc.gr.jp/</a></li>
<li>Network Skills Competition → Network Skills Community</li>
</ul>


<h2>フリーディスカッション</h2>

<ul>
<li>無線 LAN を提供しても安定しない</li>
<li>安定して会場ネットワークが提供されると自発的に無線ルーターを切ってくれる</li>
<li>できるだけ 5G</li>
<li>8:2 で 2.4G が使われる</li>
<li>出展者向けには必要だとしても、参加者向けは必要か?</li>
<li>勉強会とかハンズオンとかのイベントの種類によって違ってくる</li>
<li>OS アップデートとか iTunes とか Dropbox とか制限しないとつらい</li>
<li>みんな 443 番ポートなのでアプリケーションレベルでの挙動を理解する必要がある</li>
<li>アクセスポイントの乱立をさけるための参加者向け無線 LAN 提供</li>
<li>ベンダーに頼むと繋がらない時に文句を言う先ができるので精神衛生上は良い</li>
<li>出展者が無線機器を展示している場合に会場ネットワークが強すぎると問題が出る</li>
<li>Twitter 連動とかやってる時に参加者向けネットワークを提供していないと問題</li>
<li>出展者にネットワークが繋がらなくてもなんとかなるような展示をしてくださいとお願いする</li>
<li>無線だと有線だと考えなくて良いことを考える必要がある</li>
<li>端末の偏り、移動など</li>
<li>ライトユーザー向けの話</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[公開鍵認証 + libpam-google-authenticator による二要素認証を特定のユーザーだけ対象に導入する]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-18-libpam-google-authenticator.html"/>
    <updated>2016-04-18T21:26:42+09:00</updated>
    <id>http://blog.n-z.jp/blog/libpam-google-authenticator</id>
    <content type="html"><![CDATA[<p>普通に <code>libpam-google-authenticator</code> を PAM の設定に追加するだけだと公開鍵認証の時に使われなくて二要素認証として嬉しくなかったのと、
<code>libpam-google-authenticator</code> による二要素認証をいきなり全ユーザーに導入してしまうと <code>google-authenticator</code> コマンドによるトークン作成をしていないユーザーが入れなくなってしまったり、リモートバックアップ処理の自動実行などで入れなくなったりして困るので、
一部のユーザーだけ二要素認証が必須になる設定を考えてみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Debian GNU/Linux 8.4 (jessie)</li>
<li>openssh-server 1:6.7p1-5+deb8u1</li>
<li>libpam-google-authenticator 20130529-2</li>
</ul>


<h2>設定時の注意</h2>

<p>PAM の設定変更は失敗するとログインできなくなって危険なので、設定を戻したりできるシェルを最低一個は残した状態で設定を変更することをおすすめします。</p>

<h2>PAM の設定</h2>

<p>PAM の設定では <code>@include common-auth</code> の代わりに <code>pam_unix.so</code> を <code>pam_google_authenticator.so</code> に置き換えた設定を <code>/etc/pam.d/sshd</code> に追加しました。</p>

<p>これで <code>keyboard-interactive</code> 認証では unix password による認証は使えなくなって <code>libpam-google-authenticator</code> による認証だけになります。</p>

<p>ワンタイムパスワードなので、入力している値を見られても困らないし、実際 GitHub などでの入力画面では隠されていないので、 <code>/usr/share/doc/libpam-google-authenticator/README.gz</code> にも書いてある <code>echo_verification_code</code> の設定も追加してエコーバックされるようにしてみました。</p>

<figure class='code'><figcaption><span>/etc/pam.d/sshd</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+auth [success=1 default=ignore] pam_google_authenticator.so echo_verification_code
</span><span class='line'>+auth requisite pam_deny.so
</span><span class='line'>+auth required pam_permit.so
</span><span class='line'> # Standard Un*x authentication.
</span><span class='line'>-@include common-auth
</span><span class='line'>+#@include common-auth</span></code></pre></td></tr></table></div></figure>


<h2>sshd の設定</h2>

<p>他の <code>pam_google_authenticator.so</code> 導入記事にも書いてあるように
<code>ChallengeResponseAuthentication</code> を <code>yes</code> に変更します。
この設定を変更しないと <code>Verification code:</code> の入力プロンプトが出てこなくて、
認証コードの入力ができません。</p>

<figure class='code'><figcaption><span>/etc/ssh/sshd_config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ChallengeResponseAuthentication yes</span></code></pre></td></tr></table></div></figure>


<p>最後に適当なグループ (今回は <code>/var/log/</code> のログファイルのグループなどに利用されている <code>adm</code> グループを利用しましたが <code>sudo</code> グループなどでも良いかもしれません) を <code>Match</code> で指定して、そのグループに属するユーザーの時だけ <code>AuthenticationMethods</code> で公開鍵認証と <code>keyboard-interactive</code> 認証の両方を必須にしました。</p>

<figure class='code'><figcaption><span>/etc/ssh/sshd_config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Match Group adm
</span><span class='line'>AuthenticationMethods publickey,keyboard-interactive</span></code></pre></td></tr></table></div></figure>


<h2>トークンを生成しているユーザーだけ有効にする設定</h2>

<p><code>google-authenticator</code> コマンドで <code>~/.google-authenticator</code> を生成しているユーザーだけ有効にすることができたので、その方法もメモしておきます。</p>

<p>方法としては <code>pam_exec</code> を使ってファイルの存在チェックをすれば可能でした。
<code>pam_exec.so</code> の引数部分では直接環境変数展開ができなかったので、別途外部に実行ファイルを用意する方法がデバッグもしやすくておすすめです。</p>

<p>存在チェックが成功すればそのまま次の行に進んで、存在しなければ後続の 2 行を飛ばして <code>pam_permit.so</code> で許可するようにしました。</p>

<p>PAM の設定の詳細については<a href="http://tokyodebian.alioth.debian.org/pdf/debianmeetingresume2012-natsu.pdf">大統一Debian勉強会 特大号 東京エリア/関西Debian勉強会のPDF</a> か、<a href="http://gum.debian.or.jp/2012/">大統一Debian勉強会</a> の「Linux-PAMの設定について」の発表資料を参考にしてください。</p>

<p><code>pam_exec.so</code> に <code>quiet</code> をつけないと <code>~/.google-authenticator</code> がない場合に毎回 <code>/usr/local/bin/check_google_authenticator.sh failed: exit code 1</code> が出るので、 <code>quiet</code> をつけて抑制するようにしました。
<code>Authenticated with partial success.</code> というメッセージは <code>ssh</code> が出しているので消せませんでした。</p>

<figure class='code'><figcaption><span>/etc/pam.d/sshd</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auth [success=ignore default=2] pam_exec.so quiet /usr/local/bin/check_google_authenticator.sh
</span><span class='line'>auth [success=1 default=ignore] pam_google_authenticator.so echo_verification_code
</span><span class='line'>auth requisite pam_deny.so
</span><span class='line'>auth required pam_permit.so</span></code></pre></td></tr></table></div></figure>


<p>存在のチェック用スクリプトは <code>pam_exec</code> 経由で実行された時には <code>HOME</code> 環境変数が設定されていなくて、代わりに <code>PAM_USER</code> などが設定されているのを利用して <code>HOME</code> を設定されていなければ設定するようにしました。</p>

<figure class='code'><figcaption><span>/usr/local/bin/check_google_authenticator.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>: <span class="k">${</span><span class="nv">HOME</span><span class="p">:=</span><span class="k">$(</span>getent passwd <span class="s2">&quot;$PAM_USER&quot;</span> <span class="p">|</span> awk -F: <span class="s1">&#39;{print $6}&#39;</span><span class="k">)}</span>
</span><span class='line'><span class="nb">test</span> -f <span class="s2">&quot;$HOME/.google_authenticator&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>/etc/pam.d/sshd にまとめる書き方</h2>

<p>発表資料の PDF を確認して気付いたのですが、 <code>[ ]</code> でくくれば空白の入った引数も渡せるので、シェルを経由するようにすれば変数展開付きのコマンドを含められました。</p>

<figure class='code'><figcaption><span>/etc/pam.d/sshd</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auth [success=ignore default=2] pam_exec.so quiet /bin/sh -c [: ${HOME:=$(getent passwd "$PAM_USER" | awk -F: '{print $6}')}; test -f "$HOME/.google_authenticator"]
</span><span class='line'>auth [success=1 default=ignore] pam_google_authenticator.so echo_verification_code
</span><span class='line'>auth requisite pam_deny.so
</span><span class='line'>auth required pam_permit.so</span></code></pre></td></tr></table></div></figure>


<h2>google-authenticator コマンドによるトークンの作成</h2>

<p>二要素認証を使うユーザーで <code>google-authenticator</code> コマンドを実行してトークンを作成して、 iOS なら Google Authenticator のアプリに、 Android なら Google 認証システムアプリに QR コードを読み込ませておきます。
<code>google-authenticator</code> コマンドの質問は全部 <code>y</code> で良いと思います。</p>

<p>設定は <code>~/.google_authenticator</code> に保存されています。</p>

<p>テスト環境では QR コードは読み込ませずに <code>emergency scratch codes</code> を使っていたのですが、
<code>emergency scratch codes</code> は使っていくと <code>~/.google_authenticator</code> からどんどん減っていくので、適当なタイミングで <code>google-authenticator</code> コマンドを使って再生成させないと入れなくなりそうでした。</p>

<h2>失敗した設定例</h2>

<p><code>Match</code> で <code>ChallengeResponseAuthentication</code> を設定しようとしましたが、 <code>Directive 'ChallengeResponseAuthentication' is not allowed within a Match block</code> というエラーで設定できませんでした。</p>

<p>公開鍵ごとに二要素認証の設定ができないか、検討してみましたが、使えそうな設定項目が見つかりませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jessie で dovecot-imapd と postfix の設定をして Thunderbird 用の autoconfig ファイルを用意した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-17-jessie-dovecot.html"/>
    <updated>2016-04-17T21:14:05+09:00</updated>
    <id>http://blog.n-z.jp/blog/jessie-dovecot</id>
    <content type="html"><![CDATA[<p><a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0387?page=4">Ubuntu Weekly Recipe 第387回　UbuntuでSSLを利用したサービスを構築する</a> を参考にして、 Debian jessie で dovecot-imapd で IMAP サーバーの設定をしました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Debian GNU/Linux 8.4 (jessie)</li>
<li>postfix 2.11.3-1</li>
<li>dovecot-imapd 1:2.2.13-12~deb8u1</li>
<li>Thunderbird 38.6.0</li>
</ul>


<h2>インストール</h2>

<p><code>sudo aptitude install dovecot-imapd</code> でインストールしました。</p>

<h2>認証設定</h2>

<p>クライアントによっては plain 認証は使えず login 認証が必要なので <code>sudoedit /etc/dovecot/conf.d/10-auth.conf</code> で <code>auth_mechanisms = plain login</code> に設定を変更しました。</p>

<h2>ssl 設定</h2>

<p><code>sudoedit /etc/dovecot/conf.d/10-ssl.conf</code> で以下の設定を変更しました。</p>

<ul>
<li><code>ssl = no</code> を <code>ssl = required</code> に</li>
<li><code>ssl_cert</code>, <code>ssl_key</code> を設定</li>
<li><code>#ssl_protocols = !SSLv2</code> を <code>ssl_protocols = !SSLv2 !SSLv3</code> に</li>
</ul>


<p><a href="http://wiki.dovecot.org/SSL/DovecotConfiguration">http://wiki.dovecot.org/SSL/DovecotConfiguration</a> によると <code>ssl</code> の設定については <code>ssl=no</code>, <code>ssl=yes and disable_plaintext_auth=yes</code>, <code>ssl=yes and disable_plaintext_auth=yes</code>, <code>ssl=required</code> という設定の組み合わせがあるようです。</p>

<h2>Maildir 設定</h2>

<p>postfix の設定で <code>Maildir</code> への配送を使っているので、 <code>sudoedit /etc/dovecot/conf.d/10-mail.conf</code> で <code>mail_location = mbox:~/mail:INBOX=/var/mail/%u</code> を <code>mail_location = maildir:~/Maildir</code> に設定を変更しました。</p>

<h2>postfix との認証連携</h2>

<p>まず <code>sudo ls -al /var/spool/postfix/private</code> で <code>auth</code> がないのを確認しました。</p>

<p><code>sudoedit /etc/dovecot/conf.d/10-master.conf</code> で</p>

<figure class='code'><figcaption><span>/etc/dovecot/conf.d/10-master.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  #unix_listener /var/spool/postfix/private/auth {
</span><span class='line'>  #  mode = 0666
</span><span class='line'>  #}</span></code></pre></td></tr></table></div></figure>


<p>を</p>

<figure class='code'><figcaption><span>/etc/dovecot/conf.d/10-master.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  unix_listener /var/spool/postfix/private/auth {
</span><span class='line'>    mode = 0660
</span><span class='line'>    user = postfix
</span><span class='line'>    group = postfix
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>に変更しました。</p>

<p>設定反映後に <code>sudo ls -al /var/spool/postfix/private</code> で <code>auth</code> が owner も group も postfix でパーミッションが <code>srw-rw----</code> になっているのを確認します。</p>

<h2>設定反映</h2>

<p><code>sudo service dovecot restart</code> で設定を反映しました。</p>

<p><code>journalctl -u dovecot.service</code> や <code>sudo ss -lntp | grep dovecot</code> で問題なく起動していることを確認しました。</p>

<h2>ufw でポート開放</h2>

<p><code>ufw allow 993/tcp</code> と <code>ufw limit 993/tcp</code> でポートを開放して連続接続数制限をしました。</p>

<h2>postfix 設定</h2>

<h3>SSL 設定</h3>

<p><code>smtpd_tls_cert_file</code> と <code>smtpd_tls_key_file</code> を設定します。
<code>smtpd_tls_cert_file</code> は中間証明書も結合したファイルを指定します。</p>

<p>その他の設定は以下のように設定しました。</p>

<figure class='code'><figcaption><span>/etc/postfix/main.cf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>smtpd_tls_mandatory_protocols = !SSLv2, !SSLv3
</span><span class='line'>smtpd_tls_protocols = !SSLv2, !SSLv3
</span><span class='line'>smtp_tls_mandatory_protocols = !SSLv2, !SSLv3
</span><span class='line'>smtp_tls_protocols = !SSLv2, !SSLv3</span></code></pre></td></tr></table></div></figure>


<p><code>smtpd_tls_security_level = may</code> は設定すると外部からのメール送信で問題が起きたことがあったので、メールの送信テストをしつつ、様子を見ながら設定するかどうか決めます。</p>

<h3>SASL 設定</h3>

<p><a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0387?page=4">Ubuntu Weekly Recipe</a> では <code>smtpd_sasl_auth_enable</code> は <code>/etc/postfix/main.cf</code> でも <code>yes</code> にしていますが、 <code>/etc/postfix/master.cf</code> で <code>smtps</code> と <code>submission</code> で個別に <code>yes</code> に設定されているので、 <code>/etc/postfix/main.cf</code> では <code>no</code> のままにしておきます。</p>

<p>そうしておかないと 25 番ポートでも SMTP-Auth が有効になって、しかも <code>smtpd_tls_security_level = may</code> だとパスワードが平文で流れても良いということになるので、危険なことが起きる可能性があります。
最近は OBP25B という対策が普及しているので、一般のクライアントが間違って平文で送信してしまう可能性は低いと思いますが、余計な危険は避けておくのが良いと思います。</p>

<p>CRAM-MD5 が有効なら <code>smtpd_sasl_security_options = noanonymous,noplaintext</code> にして <code>master.cf</code> で <code>noanonymous</code> だけにしても良いかと思ったのですが、 plain 認証と login 認証しかない状態で <code>noplaintext</code> もつけてしまうと 25 番ポートで listen しているのに接続しても最初の <code>220 mail.example.org ESMTP Postfix (Debian/GNU)</code> が出てこなくてログに <code>fatal: no SASL authentication mechanisms</code> と記録されるという状態になってしまいました。
<code>/etc/passwd</code> (<code>/etc/shadow</code>) による認証だとパスワードをハッシュ化された状態でしか保存していないため、 CRAM-MD5 は使えないので、これ以上の検証はできませんでした。</p>

<p>以上を踏まえて以下のように設定しました。</p>

<figure class='code'><figcaption><span>/etc/postfix/main.cf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>smtpd_sasl_auth_enable = no
</span><span class='line'>smtpd_sasl_local_domain = $myhostname
</span><span class='line'>smtpd_sasl_security_options = noanonymous
</span><span class='line'>smtpd_sasl_type = dovecot
</span><span class='line'>smtpd_sasl_path = private/auth
</span><span class='line'>broken_sasl_auth_clients = yes</span></code></pre></td></tr></table></div></figure>


<p><code>smtpd_sasl_local_domain</code> や <code>broken_sasl_auth_clients</code> は不要かもしれません。</p>

<h2>Thunderbird 用自動設定ファイル設置</h2>

<p><a href="https://developer.mozilla.org/ja/docs/Mozilla/Thunderbird/Autoconfiguration">Thunderbird のアカウント情報自動設定機能</a>のために <code>mail/config-v1.1.xml</code> を設置します。</p>

<p><code>@example.com</code> のメールアドレスに対して <code>http://autoconfig.example.com/mail/config-v1.1.xml</code> か <code>http://example.com/.well-known/autoconfig/mail/config-v1.1.xml</code> を用意します。</p>

<p>内容は以下のような感じになります。
<code>mozilla.org</code> の例との主な違いは <code>authentication</code> を <code>password-encrypted</code> ではなく <code>password-cleartext</code> にしているところと、 <code>username</code> を <code>%EMAILADDRESS%</code> ではなく <code>%EMAILLOCALPART%</code> にしているところです。</p>

<figure class='code'><figcaption><span>mail/config-v1.1.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;clientConfig</span> <span class="na">version=</span><span class="s">&quot;1.1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;emailProvider</span> <span class="na">id=</span><span class="s">&quot;example.com&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;domain&gt;</span>example.com<span class="nt">&lt;/domain&gt;</span>
</span><span class='line'>    <span class="nt">&lt;displayName&gt;</span>Example.com Mail<span class="nt">&lt;/displayName&gt;</span>
</span><span class='line'>    <span class="nt">&lt;displayShortName&gt;</span>example.com<span class="nt">&lt;/displayShortName&gt;</span>
</span><span class='line'>    <span class="nt">&lt;incomingServer</span> <span class="na">type=</span><span class="s">&quot;imap&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;hostname&gt;</span>mail.example.com<span class="nt">&lt;/hostname&gt;</span>
</span><span class='line'>      <span class="nt">&lt;port&gt;</span>993<span class="nt">&lt;/port&gt;</span>
</span><span class='line'>      <span class="nt">&lt;socketType&gt;</span>SSL<span class="nt">&lt;/socketType&gt;</span>
</span><span class='line'>      <span class="nt">&lt;authentication&gt;</span>password-cleartext<span class="nt">&lt;/authentication&gt;</span>
</span><span class='line'>      <span class="nt">&lt;username&gt;</span>%EMAILLOCALPART%<span class="nt">&lt;/username&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/incomingServer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;outgoingServer</span> <span class="na">type=</span><span class="s">&quot;smtp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;hostname&gt;</span>mail.example.com<span class="nt">&lt;/hostname&gt;</span>
</span><span class='line'>      <span class="nt">&lt;port&gt;</span>587<span class="nt">&lt;/port&gt;</span>
</span><span class='line'>      <span class="nt">&lt;socketType&gt;</span>STARTTLS<span class="nt">&lt;/socketType&gt;</span>
</span><span class='line'>      <span class="nt">&lt;authentication&gt;</span>password-cleartext<span class="nt">&lt;/authentication&gt;</span>
</span><span class='line'>      <span class="nt">&lt;username&gt;</span>%EMAILLOCALPART%<span class="nt">&lt;/username&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/outgoingServer&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/emailProvider&gt;</span>
</span><span class='line'><span class="nt">&lt;/clientConfig&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p><a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0387?page=4">Ubuntu Weekly Recipe</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ngircd から inspircd に移行した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-13-ircd.html"/>
    <updated>2016-04-13T22:42:32+09:00</updated>
    <id>http://blog.n-z.jp/blog/ircd</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2016-03-29-inspircd.html">jessie で inspircd を設定した</a>話に書いたように、 inspircd を設定したのですが、移行元の ngircd との機能比較を使っている範囲内でしてみたいと思います。</p>

<!--more-->


<h2>確認バージョン</h2>

<ul>
<li>ngircd 18-2 (on Ubuntu 12.04.5 LTS)</li>
<li>inspircd 2.0.17-1+deb8u1 (on Debian GNU/Linux 8.4 (jessie))</li>
</ul>


<h2>SSL/TLS 設定</h2>

<p>ngircd では <code>[SSL]</code> セクションで設定するだけでしたが、 inspircd では推奨されている <code>m_ssl_gnutls</code> を使うか <code>m_ssl_openssl</code> を使うか選ぶ必要がありました。
推奨があるので、特に迷うことはありませんでした。</p>

<h2>nick の長さ制限</h2>

<p>ngircd では <code>MaxNickLength</code> を 9 から 18 に変えていたのですが、 inspircd ではデフォルトで <code>NICKLEN=32</code> になっていて、設定は少し探した範囲では見つけられませんでした。</p>

<h2>チャンネルの作成制限</h2>

<p>ngircd では <code>PredefChannelsOnly = yes</code> にしていました。 inspircd では <a href="https://wiki.inspircd.org/Modules/2.0/restrictchans">m_restrictchans</a> で制限することができました。</p>

<h2>チャンネル自動作成</h2>

<p>ngircd では <code>[Channel]</code> でチャンネルをサーバー起動時に作成していました。 inspircd では <a href="https://wiki.inspircd.org/Modules/2.0/permchannels">m_permchannels</a> で作成しておくことができました。</p>

<h2>チャンネル自動参加</h2>

<p>ngircd では接続時に自動参加させることはできなかったのですが、 inspircd では <a href="https://wiki.inspircd.org/Modules/2.0/conn_join">m_conn_join</a> で接続時に強制的にチャンネルに参加させる設定ができました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devise で電子メールアドレスのドメイン部分を省略してもログインできるようにする]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-13-devise-default-domain.html"/>
    <updated>2016-04-13T21:29:43+09:00</updated>
    <id>http://blog.n-z.jp/blog/devise-default-domain</id>
    <content type="html"><![CDATA[<p>社内向けアプリケーションのように、特定のドメインのユーザーがほとんどの場合、メールアドレスの全体を入力させるのは、余計な手間をしいていることが多いです。</p>

<p>そこで省略可能にするように変更しました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ruby 2.2.4</li>
<li>rails 4.2.6</li>
<li>devise 3.5.6</li>
<li>warden 1.2.6</li>
</ul>


<h2>config/initializers/devise.rb での設定</h2>

<p>直接は関係ないですが、 <code>config/initializers/devise.rb</code> では以下のような感じの設定でユーザー登録できるメールアドレスのドメインを制限しています。</p>

<p>特殊用途に別ドメインのユーザーを登録する必要があったので、そこは <code>|</code> (or) で繋げて許可しています。</p>

<figure class='code'><figcaption><span>config/initializers/devise.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">email_regexp</span> <span class="o">=</span> <span class="sr">/\A[\w+\-.]+@example\.co\.jp\z\|\Aspecial@example\.com\z/i</span>
</span></code></pre></td></tr></table></div></figure>


<h2>User クラスへの追加</h2>

<p><a href="https://github.com/plataformatec/devise/wiki/How-To:-Allow-users-to-sign-in-using-their-username-or-email-address">How To: Allow users to sign in using their username or email address</a> を参考にして <code>User.find_first_by_auth_conditions(warden_conditions)</code> を定義すれば良いということがわかったので、以下のように定義しました。</p>

<figure class='code'><figcaption><span>app/models/user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_for_database_authentication</span><span class="p">(</span><span class="n">warden_conditions</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="sr">/@/</span> <span class="o">=~</span> <span class="n">warden_conditions</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span>
</span><span class='line'>      <span class="k">super</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">super</span><span class="p">(</span><span class="n">warden_conditions</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">email</span><span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">warden_conditions</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span><span class="si">}</span><span class="s2">@example.co.jp&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>メールアドレス全体が入力された時 (<code>@</code> を含む時) はデフォルトの挙動をそのまま使い、省略された時はデフォルトのドメイン (例では <code>example.co.jp</code>) を補ってデフォルトの挙動を呼び出すようにしました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[aasm 4.10.0 の警告に monkey patch で対処した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-12-aasm-warn.html"/>
    <updated>2016-04-12T22:08:11+09:00</updated>
    <id>http://blog.n-z.jp/blog/aasm-warn</id>
    <content type="html"><![CDATA[<p>aasm を 4.10.0 にあげると <code>Job: overriding method 'sleeping?'!</code> のような警告が出るようになってしまい、<a href="https://github.com/aasm/aasm/issues/347">Warning when specifing states at ActiveRecord enum</a> で報告されているものの、まだ何も対応されていないので、とりあえず monkey patch で対処することにしました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ruby 2.2.4</li>
<li>rails 4.2.6</li>
<li>aasm 4.10.0</li>
</ul>


<h2>対処方針</h2>

<p>モデルごとに対応するのは面倒なことになるので、 Rails 5 で導入される予定の <code>ApplicationRecord</code> に対応して、そこに対処を入れることにしました。</p>

<h2>ApplicationRecord 対応</h2>

<p>まず <code>sed -i~ -e 's/ActiveRecord::Base/ApplicationRecord/' app/models/*.rb</code> などで継承元を <code>ActiveRecord::Base</code> から <code>ApplicationRecord</code> に書き換えます。
(実際には <code>application_record.rb</code> の作成後にやってしまって <code>RuntimeError: Circular dependency detected while autoloading constant ApplicationRecord</code> になってしまったので、 <code>application_record.rb</code> だけ元に戻しました。)</p>

<p>次に以下の内容で <code>app/models/application_record.rb</code> を作成します。</p>

<figure class='code'><figcaption><span>app/models/application_record.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationRecord</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">abstract_class</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>テスト実行などで影響がないことを確認します。</p>

<h2>monkey patch</h2>

<p>aasm の README に書いてあるように</p>

<figure class='code'><figcaption><span>app/models/job.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Job</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">AASM</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">enum</span> <span class="ss">state</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">sleeping</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">running</span><span class="p">:</span> <span class="mi">99</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">aasm</span> <span class="ss">:column</span> <span class="o">=&gt;</span> <span class="ss">:state</span><span class="p">,</span> <span class="ss">:enum</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">state</span> <span class="ss">:sleeping</span><span class="p">,</span> <span class="ss">:initial</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">state</span> <span class="ss">:running</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようなハッシュを使った <code>enum</code> 呼び出ししかしていなかった (<code>enum status: [ :active, :archived ]</code> のような配列を使った呼び出しはしていなかった) ので、以下のように <code>each_value</code> と <code>each_key</code> の組み合わせ決め打ちで <code>undef_method</code> を呼び出すことにしました。</p>

<figure class='code'><figcaption><span>app/models/application_record.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationRecord</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">abstract_class</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="no">AASM</span><span class="o">::</span><span class="no">VERSION</span> <span class="o">==</span> <span class="s1">&#39;4.10.0&#39;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">enum</span><span class="p">(</span><span class="n">definitions</span><span class="p">)</span>
</span><span class='line'>      <span class="k">super</span>
</span><span class='line'>      <span class="n">definitions</span><span class="o">.</span><span class="n">each_value</span> <span class="k">do</span> <span class="o">|</span><span class="n">statuses</span><span class="o">|</span>
</span><span class='line'>        <span class="n">statuses</span><span class="o">.</span><span class="n">each_key</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span>
</span><span class='line'>          <span class="n">undef_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">?&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ActiveRecord::Enum</code> では <code>enum</code> を呼び出したクラスに直接 <code>sleeping?</code> などのメソッドを定義するのではなく、無名モジュールに定義されているので、 <code>remove_method</code> ではなく <code>undef_method</code> を使う必要がありました。
(<code>aasm</code> は <code>aasm</code> を呼び出したクラスに直接定義していました。)</p>

<h2>今後の予定</h2>

<p>将来のバージョンでどう挙動が変わるのかわからないので、バージョン番号決め打ちで monkey patch をあてていて、バージョンアップで問題が再発するようならバージョン番号を更新、解決するようなら monkey patch を削除しようと思っています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4月9日 型システム入門読書会 第4回(兵庫県)に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-09-amagasakirb.html"/>
    <updated>2016-04-09T13:19:38+09:00</updated>
    <id>http://blog.n-z.jp/blog/amagasakirb</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/event/index/388328/" title="4月9日 型システム入門読書会 第4回(兵庫県)">4月9日 型システム入門読書会 第4回(兵庫県)</a>
に参加しました。
今回は第 20 章からでした。</p>

<!--more-->




<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4274069117" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>以下、今回のメモです。</p>

<ul>
<li>今回は深江駅前でした。</li>
<li>Kotlin</li>
<li>第 20 章は難しい</li>
<li>数学の基礎の本のオススメは? 数学ガールの秘密のノートシリーズ?</li>
<li>誰も OCaml のコードは試していないという話</li>
<li>Visual Studio Code</li>
<li>Visual Studio Community</li>
<li>Xamarin</li>
<li><a href="https://code.visualstudio.com/docs/languages/overview">https://code.visualstudio.com/docs/languages/overview</a></li>
<li>NetBook の話</li>
<li>ARM などの CPU の話</li>
<li>深江駅には初めて来たという話</li>
<li><code>⊂</code> と <code>⊆</code> の違いについて</li>
<li><a href="https://ja.wikipedia.org/wiki/%E9%BB%92%E6%9D%BF%E5%A4%AA%E5%AD%97">黒板書体</a></li>
<li><a href="https://ja.wikipedia.org/wiki/%E4%B8%B8%E6%95%B0%E5%AD%97">丸数字</a></li>
<li>OS X で画面外にはみ出すサイズに window をリサイズした後、移動すると勝手に画面内に収まるサイズにリサイズされてしまって困るという話 (縦いっぱいの window を下げる、上に伸ばして画面サイズ以上の高さにする、ちょっと移動させる、という操作で再現可能)</li>
<li>Windows のアップデート通知の話</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jessie に backports から letsencrypt を入れてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-08-jessie-letsencrypt.html"/>
    <updated>2016-04-08T14:30:02+09:00</updated>
    <id>http://blog.n-z.jp/blog/jessie-letsencrypt</id>
    <content type="html"><![CDATA[<p>現在リリースされている Ubuntu と違って Debian jessie には backports に letsencrypt パッケージがあるので、ちょっと古いですがパッケージ版の letsencrypt を使ってみることにしました。</p>

<p>Ubuntu も今月リリースされる 16.04 (xenial) には universe ですが letsencrypt パッケージが含まれるので、それが使えると思います。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Debian GNU/Linux 8.4 (jessie) (amd64)</li>
<li>letsencrypt 0.4.1-1~bpo8+1</li>
<li>apache2 2.4.10-10+deb8u4</li>
</ul>


<h2>インストール</h2>

<p><code>/etc/apt/sources.list</code> で <code>deb http://ftp.jp.debian.org/debian jessie-backports main contrib non-free</code> のように backports を有効にしておきます。</p>

<p>依存パッケージも backports のものが必要なので <code>-t jessie-backports</code> 付きでインストールする必要がありました。</p>

<p><code>webroot</code> を使う予定だったので、 <code>python-letsencrypt-apache</code> はインストールしませんでした。</p>

<p>stable にあるパッケージのうち、いくつかのパッケージも backports のものに上がってしまうので、そのリスクが許容できない場合は <code>letsencrypt-auto</code> など、他のインストール方法を検討した方が良さそうです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%  sudo apt install letsencrypt
</span><span class='line'>パッケージリストを読み込んでいます... 完了
</span><span class='line'>依存関係ツリーを作成しています
</span><span class='line'>状態情報を読み取っています... 完了
</span><span class='line'>インストールすることができないパッケージがありました。おそらく、あり得
</span><span class='line'>ない状況を要求したか、(不安定版ディストリビューションを使用しているの
</span><span class='line'>であれば) 必要なパッケージがまだ作成されていなかったり Incoming から移
</span><span class='line'>動されていないことが考えられます。
</span><span class='line'>以下の情報がこの問題を解決するために役立つかもしれません:
</span><span class='line'>
</span><span class='line'>以下のパッケージには満たせない依存関係があります:
</span><span class='line'> letsencrypt : 依存: python-letsencrypt (= 0.4.1-1~bpo8+1) しかし、インストールされようとしていませ ん
</span><span class='line'>E: 問題を解決することができません。壊れた変更禁止パッケージがあります。
</span><span class='line'>zsh: exit 100   sudo apt install letsencrypt
</span><span class='line'>%  sudo apt install -t jessie-backports letsencrypt
</span><span class='line'>パッケージリストを読み込んでいます... 完了
</span><span class='line'>依存関係ツリーを作成しています
</span><span class='line'>状態情報を読み取っています... 完了
</span><span class='line'>以下のパッケージが自動でインストールされましたが、もう必要とされていません:
</span><span class='line'>  python-cffi python-ply python-pycparser
</span><span class='line'>これを削除するには 'apt-get autoremove' を利用してください。
</span><span class='line'>以下の追加パッケージがインストールされます:
</span><span class='line'>  dialog python-acme python-cffi python-cffi-backend python-configargparse python-configobj
</span><span class='line'>  python-cryptography python-dialog python-enum34 python-funcsigs python-idna python-ipaddress
</span><span class='line'>  python-letsencrypt python-mock python-ndg-httpsclient python-openssl python-parsedatetime
</span><span class='line'>  python-pbr python-psutil python-pyasn1 python-pyicu python-requests python-rfc3339 python-six
</span><span class='line'>  python-urllib3 python-zope.component python-zope.event python-zope.interface
</span><span class='line'>提案パッケージ:
</span><span class='line'>  python-letsencrypt-apache python-letsencrypt-doc python-configobj-doc python-cryptography-doc
</span><span class='line'>  python-cryptography-vectors python-enum34-doc python-funcsigs-doc python-mock-doc
</span><span class='line'>  python-openssl-doc python-openssl-dbg doc-base python-ntlm
</span><span class='line'>以下のパッケージが新たにインストールされます:
</span><span class='line'>  dialog letsencrypt python-acme python-cffi-backend python-configargparse python-configobj
</span><span class='line'>  python-dialog python-enum34 python-funcsigs python-idna python-ipaddress python-letsencrypt
</span><span class='line'>  python-mock python-ndg-httpsclient python-parsedatetime python-pbr python-psutil python-pyasn1
</span><span class='line'>  python-pyicu python-requests python-rfc3339 python-urllib3 python-zope.component
</span><span class='line'>  python-zope.event python-zope.interface
</span><span class='line'>以下のパッケージはアップグレードされます:
</span><span class='line'>  python-cffi python-cryptography python-openssl python-six
</span><span class='line'>アップグレード: 4 個、新規インストール: 25 個、削除: 0 個、保留: 24 個。
</span><span class='line'>1,906 kB のアーカイブを取得する必要があります。
</span><span class='line'>この操作後に追加で 8,772 kB のディスク容量が消費されます。
</span><span class='line'>続行しますか? [Y/n]</span></code></pre></td></tr></table></div></figure>


<h2>letsencrypt コマンド実行</h2>

<p>一般ユーザー権限で実行するとエラーになり、カレントディレクトリに <code>letsencrypt.log</code> が作成されていました。
<code>--help</code> 付きでの実行は特にエラーもなく、 <code>letsencrypt.log</code> も作成されることなくヘルプが表示されました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%  letsencrypt
</span><span class='line'>An unexpected error occurred:
</span><span class='line'>OSError: [Errno 13] Permission denied: '/etc/letsencrypt'
</span><span class='line'>Please see the logfile 'letsencrypt.log' for more details.
</span><span class='line'>%  rm letsencrypt.log
</span><span class='line'>%  letsencrypt --help
</span><span class='line'>
</span><span class='line'>  letsencrypt [SUBCOMMAND] [options] [-d domain] [-d domain] ...
</span><span class='line'>
</span><span class='line'>The Let's Encrypt agent can obtain and install HTTPS/TLS/SSL certificates.  By
</span><span class='line'>default, it will attempt to use a webserver both for obtaining and installing
</span><span class='line'>the cert. Major SUBCOMMANDS are:
</span><span class='line'>
</span><span class='line'>  (default) run        Obtain & install a cert in your current webserver
</span><span class='line'>  certonly             Obtain cert, but do not install it (aka "auth")
</span><span class='line'>  install              Install a previously obtained cert in a server
</span><span class='line'>  renew                Renew previously obtained certs that are near expiry
</span><span class='line'>  revoke               Revoke a previously obtained certificate
</span><span class='line'>  rollback             Rollback server configuration changes made during install
</span><span class='line'>  config_changes       Show changes made to server config during installation
</span><span class='line'>  plugins              Display information about installed plugins
</span><span class='line'>
</span><span class='line'>Choice of server plugins for obtaining and installing cert:
</span><span class='line'>
</span><span class='line'>  (the apache plugin is not installed)
</span><span class='line'>  --standalone      Run a standalone webserver for authentication
</span><span class='line'>  (nginx support is experimental, buggy, and not installed by default)
</span><span class='line'>  --webroot         Place files in a server's webroot folder for authentication
</span><span class='line'>
</span><span class='line'>OR use different plugins to obtain (authenticate) the cert and then install it:
</span><span class='line'>
</span><span class='line'>  --authenticator standalone --installer apache
</span><span class='line'>
</span><span class='line'>More detailed help:
</span><span class='line'>
</span><span class='line'>  -h, --help [topic]    print this message, or detailed help on a topic;
</span><span class='line'>                        the available topics are:
</span><span class='line'>
</span><span class='line'>   all, automation, paths, security, testing, or any of the subcommands or
</span><span class='line'>   plugins (certonly, install, nginx, apache, standalone, webroot, etc)</span></code></pre></td></tr></table></div></figure>


<h2>本番実行</h2>

<p><code>letsencrypt certonly</code> で証明書発行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%  sudo letsencrypt certonly --webroot -w /srv/www/www.example.org/htdocs -d www.example.org</span></code></pre></td></tr></table></div></figure>


<p>まず、アカウントの作成があるので、アカウントの作成はメールアドレス入力しました。
アカウントのリカバリや緊急時の連絡などに使われるだけのようで、今の所ここで入力したメールアドレスに letsencrypt からメールが来たことはありません。</p>

<pre><code>         ┌──────────────────────────────────────────────────────────────────────┐
         │ Enter email address (used for urgent notices and lost key recovery)  │
         │ ┌──────────────────────────────────────────────────────────────────┐ │
         │ │                                                                  │ │
         │ └──────────────────────────────────────────────────────────────────┘ │
         ├──────────────────────────────────────────────────────────────────────┤
         │                     &lt; 了解 &gt;           &lt; 取消 &gt;                      │
         └──────────────────────────────────────────────────────────────────────┘
</code></pre>

<p>Terms of Service は前回みた時から変わっていないので、今度も Agree しました。</p>

<pre><code>         ┌──────────────────────────────────────────────────────────────────────┐
         │ Please read the Terms of Service at                                  │
         │ https://letsencrypt.org/documents/LE-SA-v1.0.1-July-27-2015.pdf. You │
         │ must agree in order to register with the ACME server at              │
         │ https://acme-v01.api.letsencrypt.org/directory                       │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         ├──────────────────────────────────────────────────────────────────────┤
         │                     &lt;Agree &gt;           &lt;Cancel&gt;                      │
         └──────────────────────────────────────────────────────────────────────┘
</code></pre>

<p>以下のような作成完了のメッセージが出ました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IMPORTANT NOTES:
</span><span class='line'> - If you lose your account credentials, you can recover through
</span><span class='line'>   e-mails sent to z@n-z.jp.
</span><span class='line'> - Congratulations! Your certificate and chain have been saved at
</span><span class='line'>   /etc/letsencrypt/live/www.example.org/fullchain.pem. Your cert will
</span><span class='line'>   expire on 2016-07-07. To obtain a new version of the certificate in
</span><span class='line'>   the future, simply run Let's Encrypt again.
</span><span class='line'> - Your account credentials have been saved in your Let's Encrypt
</span><span class='line'>   configuration directory at /etc/letsencrypt. You should make a
</span><span class='line'>   secure backup of this folder now. This configuration directory will
</span><span class='line'>   also contain certificates and private keys obtained by Let's
</span><span class='line'>   Encrypt so making regular backups of this folder is ideal.
</span><span class='line'> - If you like Let's Encrypt, please consider supporting our work by:
</span><span class='line'>
</span><span class='line'>   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
</span><span class='line'>   Donating to EFF:                    https://eff.org/donate-le</span></code></pre></td></tr></table></div></figure>


<p>問題があれば <code>/var/log/letsencrypt/letsencrypt.log</code> でログを確認します。</p>

<h2>apache2 の設定変更</h2>

<p>apache2 の設定を変更して、 <code>sudo service apache2 reload</code> で反映します。
ブラウザーで Let&rsquo;s Encrypt Authority X3 の証明書になっていることが確認できたら設定完了です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SSLCertificateKeyFile /etc/letsencrypt/live/www.example.org/privkey.pem
</span><span class='line'>SSLCertificateFile /etc/letsencrypt/live/www.example.org/fullchain.pem</span></code></pre></td></tr></table></div></figure>


<h2>自動更新設定</h2>

<p>パッケージの <code>letsencrypt</code> でインストールされたものではないということを明示するために <code>local</code> をつけて <code>/etc/cron.daily/local-letsencrypt</code> に自動更新の設定をしました。</p>

<p>試しに実行してみてちゃんと動いていれば設定完了です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% sudoedit /etc/cron.daily/local-letsencrypt
</span><span class='line'>% sudo chmod +x /etc/cron.daily/local-letsencrypt
</span><span class='line'>% sudo /etc/cron.daily/local-letsencrypt
</span><span class='line'>% sudo cat /var/log/letsencrypt/renew.log
</span><span class='line'>Processing /etc/letsencrypt/renewal/www.example.org.conf
</span><span class='line'>
</span><span class='line'>The following certs are not due for renewal yet:
</span><span class='line'>  /etc/letsencrypt/live/www.example.org/fullchain.pem (skipped)
</span><span class='line'>No renewals were attempted.</span></code></pre></td></tr></table></div></figure>


<p><a href="http://blog.n-z.jp/blog/2016-04-07-letsencrypt.html">前回の記事</a> のように <a href="http://packages.debian.org/debianutils">debianutils</a> の <code>savelog</code> でログをローテートして、証明書の有効期限の 90 日分残すようにしています。</p>

<figure class='code'><figcaption><span>/etc/cron.daily/local-letsencrypt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">LOGFILE</span><span class="o">=</span>/var/log/letsencrypt/renew.log
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;$LOGFILE&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    savelog -c <span class="m">90</span> -q <span class="s2">&quot;$LOGFILE&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> ! letsencrypt renew &gt; <span class="s2">&quot;$LOGFILE&quot;</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">echo </span>Automated renewal failed:
</span><span class='line'>    cat <span class="s2">&quot;$LOGFILE&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>apachectl graceful
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[letsencrypt-auto の自動アップグレードを止めて手動でアップグレード]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-07-letsencrypt.html"/>
    <updated>2016-04-07T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/letsencrypt</id>
    <content type="html"><![CDATA[<p><code>/etc/cron.daily/letsencrypt</code> は <code>root</code> 権限で実行されるため、そこで自動アップグレードがかかるとファイルのオーナーが <code>root</code> になってしまうかもしれないと思ったので、自動更新を止めて手動でアップグレードするようにしました。</p>

<!--more-->


<h2>自動アップグレードを止めた <code>/etc/cron.daily/local-letsencrypt</code></h2>

<p><a href="http://blog.n-z.jp/blog/2016-03-06-letsencrypt.html">前回の記事</a> からの差分としては <a href="http://packages.debian.org/debianutils">debianutils</a> の <code>savelog</code> でログをローテートして、証明書の有効期限の 90 日分残すようにしたのと、 <code>--no-self-upgrade</code> をつけて自動アップグレードを止めたことです。
それから、パッケージで入れたものではないということを明示するために <code>local</code> という文字列を入れたファイル名に変更しました。</p>

<figure class='code'><figcaption><span>/etc/cron.daily/local-letsencrypt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">LOGFILE</span><span class="o">=</span>/var/log/letsencrypt/renew.log
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;$LOGFILE&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    /usr/bin/savelog -c <span class="m">90</span> -q <span class="s2">&quot;$LOGFILE&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> ! /home/hoge/letsencrypt/letsencrypt-auto renew --no-self-upgrade &gt; <span class="s2">&quot;$LOGFILE&quot;</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">echo </span>Automated renewal failed:
</span><span class='line'>    cat <span class="s2">&quot;$LOGFILE&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>apachectl graceful
</span><span class='line'>service postfix reload &gt;/dev/null
</span><span class='line'>service dovecot reload
</span></code></pre></td></tr></table></div></figure>


<h2>手動アップグレードしたログ</h2>

<p>手動実行したところ、ちょうど 0.4.2 から 0.5.0 へのアップグレードが実行されました。</p>

<figure class='code'><figcaption><span>/etc/cron.daily/local-letsencrypt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% ~/letsencrypt/letsencrypt-auto --help
</span><span class='line'>Checking <span class="k">for</span> new version...
</span><span class='line'>Upgrading letsencrypt-auto 0.4.2 to 0.5.0...
</span><span class='line'>Replacing letsencrypt-auto...
</span><span class='line'>   sudo cp -p /home/hoge/letsencrypt/letsencrypt-auto /tmp/user/1000/tmp.MclJH3TO68/letsencrypt-auto.permission-clone
</span><span class='line'>   sudo cp /tmp/user/1000/tmp.MclJH3TO68/letsencrypt-auto /tmp/user/1000/tmp.MclJH3TO68/letsencrypt-auto.permission-clone
</span><span class='line'>   sudo mv -f /tmp/user/1000/tmp.MclJH3TO68/letsencrypt-auto.permission-clone /home/hoge/letsencrypt/letsencrypt-auto
</span><span class='line'>Creating virtual environment...
</span><span class='line'>Installing Python packages...
</span><span class='line'>Installation succeeded.
</span><span class='line'>Requesting root privileges to run letsencrypt...
</span><span class='line'>   sudo /home/hoge/.local/share/letsencrypt/bin/letsencrypt --help
</span><span class='line'>
</span><span class='line'>  letsencrypt-auto <span class="o">[</span>SUBCOMMAND<span class="o">]</span> <span class="o">[</span>options<span class="o">]</span> <span class="o">[</span>-d domain<span class="o">]</span> <span class="o">[</span>-d domain<span class="o">]</span> ...
</span><span class='line'>
</span><span class='line'>The Let<span class="s1">&#39;s Encrypt agent can obtain and install HTTPS/TLS/SSL certificates.  By</span>
</span><span class='line'><span class="s1">default, it will attempt to use a webserver both for obtaining and installing</span>
</span><span class='line'><span class="s1">the cert. Major SUBCOMMANDS are:</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  (default) run        Obtain &amp; install a cert in your current webserver</span>
</span><span class='line'><span class="s1">  certonly             Obtain cert, but do not install it (aka &quot;auth&quot;)</span>
</span><span class='line'><span class="s1">  install              Install a previously obtained cert in a server</span>
</span><span class='line'><span class="s1">  renew                Renew previously obtained certs that are near expiry</span>
</span><span class='line'><span class="s1">  revoke               Revoke a previously obtained certificate</span>
</span><span class='line'><span class="s1">  rollback             Rollback server configuration changes made during install</span>
</span><span class='line'><span class="s1">  config_changes       Show changes made to server config during installation</span>
</span><span class='line'><span class="s1">  plugins              Display information about installed plugins</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Choice of server plugins for obtaining and installing cert:</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  --apache          Use the Apache plugin for authentication &amp; installation</span>
</span><span class='line'><span class="s1">  --standalone      Run a standalone webserver for authentication</span>
</span><span class='line'><span class="s1">  (nginx support is experimental, buggy, and not installed by default)</span>
</span><span class='line'><span class="s1">  --webroot         Place files in a server&#39;</span>s webroot folder <span class="k">for</span> authentication
</span><span class='line'>
</span><span class='line'>OR use different plugins to obtain <span class="o">(</span>authenticate<span class="o">)</span> the cert and <span class="k">then</span> install it:
</span><span class='line'>
</span><span class='line'>  --authenticator standalone --installer apache
</span><span class='line'>
</span><span class='line'>More detailed <span class="nb">help</span>:
</span><span class='line'>
</span><span class='line'>  -h, --help <span class="o">[</span>topic<span class="o">]</span>    print this message, or detailed <span class="nb">help </span>on a topic<span class="p">;</span>
</span><span class='line'>                        the available topics are:
</span><span class='line'>
</span><span class='line'>   all, automation, paths, security, testing, or any of the subcommands or
</span><span class='line'>   plugins <span class="o">(</span>certonly, install, nginx, apache, standalone, webroot, etc<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>アップグレードがないときのログ</h2>

<figure class='code'><figcaption><span>/etc/cron.daily/local-letsencrypt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% ~/letsencrypt/letsencrypt-auto --help
</span><span class='line'>Checking <span class="k">for</span> new version...
</span><span class='line'>Requesting root privileges to run letsencrypt...
</span><span class='line'>   sudo /home/hoge/.local/share/letsencrypt/bin/letsencrypt --help
</span><span class='line'>
</span><span class='line'>  letsencrypt-auto <span class="o">[</span>SUBCOMMAND<span class="o">]</span> <span class="o">[</span>options<span class="o">]</span> <span class="o">[</span>-d domain<span class="o">]</span> <span class="o">[</span>-d domain<span class="o">]</span> ...
</span><span class='line'>
</span><span class='line'>The Let<span class="s1">&#39;s Encrypt agent can obtain and install HTTPS/TLS/SSL certificates.  By</span>
</span><span class='line'><span class="s1">default, it will attempt to use a webserver both for obtaining and installing</span>
</span><span class='line'><span class="s1">the cert. Major SUBCOMMANDS are:</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  (default) run        Obtain &amp; install a cert in your current webserver</span>
</span><span class='line'><span class="s1">  certonly             Obtain cert, but do not install it (aka &quot;auth&quot;)</span>
</span><span class='line'><span class="s1">  install              Install a previously obtained cert in a server</span>
</span><span class='line'><span class="s1">  renew                Renew previously obtained certs that are near expiry</span>
</span><span class='line'><span class="s1">  revoke               Revoke a previously obtained certificate</span>
</span><span class='line'><span class="s1">  rollback             Rollback server configuration changes made during install</span>
</span><span class='line'><span class="s1">  config_changes       Show changes made to server config during installation</span>
</span><span class='line'><span class="s1">  plugins              Display information about installed plugins</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Choice of server plugins for obtaining and installing cert:</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  --apache          Use the Apache plugin for authentication &amp; installation</span>
</span><span class='line'><span class="s1">  --standalone      Run a standalone webserver for authentication</span>
</span><span class='line'><span class="s1">  (nginx support is experimental, buggy, and not installed by default)</span>
</span><span class='line'><span class="s1">  --webroot         Place files in a server&#39;</span>s webroot folder <span class="k">for</span> authentication
</span><span class='line'>
</span><span class='line'>OR use different plugins to obtain <span class="o">(</span>authenticate<span class="o">)</span> the cert and <span class="k">then</span> install it:
</span><span class='line'>
</span><span class='line'>  --authenticator standalone --installer apache
</span><span class='line'>
</span><span class='line'>More detailed <span class="nb">help</span>:
</span><span class='line'>
</span><span class='line'>  -h, --help <span class="o">[</span>topic<span class="o">]</span>    print this message, or detailed <span class="nb">help </span>on a topic<span class="p">;</span>
</span><span class='line'>                        the available topics are:
</span><span class='line'>
</span><span class='line'>   all, automation, paths, security, testing, or any of the subcommands or
</span><span class='line'>   plugins <span class="o">(</span>certonly, install, nginx, apache, standalone, webroot, etc<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dokku-letsencrypt を使ってみた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-06-dokku-letsencrypt.html"/>
    <updated>2016-04-06T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dokku-letsencrypt</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/dokku/dokku-letsencrypt">dokku-letsencrypt</a> を試してみたのでそのメモです。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 14.04.4 LTS</li>
<li>Docker 1.10.3</li>
<li>Dokku 0.5.3</li>
<li>dokku-letsencrypt v0.7.0-7-gb4950b8</li>
</ul>


<h2>インストール</h2>

<p>README.md に書いてある手順の通りインストールして、 <code>git describe --tags</code> でバージョンを確認しておきました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo dokku plugin:install https://github.com/dokku/dokku-letsencrypt.git
</span><span class='line'>-----&gt; Cloning plugin repo https://github.com/dokku/dokku-letsencrypt.git to /var/lib/dokku/plugins/available/letsencrypt
</span><span class='line'>Cloning into 'letsencrypt'...
</span><span class='line'>remote: Counting objects: 233, done.
</span><span class='line'>remote: Compressing objects: 100% (4/4), done.
</span><span class='line'>remote: Total 233 (delta 0), reused 0 (delta 0), pack-reused 229
</span><span class='line'>Receiving objects: 100% (233/233), 48.62 KiB | 0 bytes/s, done.
</span><span class='line'>Resolving deltas: 100% (136/136), done.
</span><span class='line'>Checking connectivity... done.
</span><span class='line'>-----&gt; Plugin letsencrypt enabled
</span><span class='line'>-----&gt; Migrating zero downtime env variables. The following variables have been deprecated
</span><span class='line'>=====&gt; DOKKU_SKIP_ALL_CHECKS DOKKU_SKIP_DEFAULT_CHECKS
</span><span class='line'>=====&gt; Please use dokku checks:[disable|enable] &lt;app&gt; to control zero downtime functionality
</span><span class='line'>=====&gt; Migration complete
</span><span class='line'>=====&gt;
</span><span class='line'>=====&gt; Migration complete
</span><span class='line'>=====&gt;
</span><span class='line'>=====&gt; Migration complete
</span><span class='line'>=====&gt;
</span><span class='line'>=====&gt; Migration complete
</span><span class='line'>=====&gt;
</span><span class='line'>=====&gt; Migration complete
</span><span class='line'>=====&gt;
</span><span class='line'>Adding user dokku to group adm
</span><span class='line'>$ cd /var/lib/dokku/plugins/available/letsencrypt/
</span><span class='line'>$ git describe --tags
</span><span class='line'>v0.7.0-7-gb4950b8
</span><span class='line'>$ cd</span></code></pre></td></tr></table></div></figure>


<h2>アップグレード</h2>

<p>README.md にアップグレードの手順も書いてあったので、試しておきました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo dokku plugin:update letsencrypt
</span><span class='line'>Plugin (letsencrypt) updated</span></code></pre></td></tr></table></div></figure>


<h2>対象アプリの確認</h2>

<p><code>dokku apps</code> でアプリケーション一覧を表示して、対象とするアプリケーションの名前を確認しておきました。</p>

<ul>
<li><code>dokku help</code></li>
<li><code>dokku apps:help</code></li>
<li><code>dokku apps</code></li>
</ul>


<h2>メールアドレス設定</h2>

<p>Let&rsquo;s Encrypt に登録するメールアドレスを設定しておきます。
<a href="https://letsencrypt.jp/usage/" title="Let's Encrypt の使い方">Let&rsquo;s Encrypt の使い方</a>の説明によると「ここで入力したメールアドレスは、緊急の通知や鍵を紛失したときの復旧に使われます。」</p>

<p>dokku-letsencrypt プラグインでは「利用規約への同意」に相当する手順がありませんが、念のため利用規約 (現在のバージョンは <a href="https://letsencrypt.org/documents/LE-SA-v1.0.1-July-27-2015.pdf">https://letsencrypt.org/documents/LE-SA-v1.0.1-July-27-2015.pdf</a> ) に目を通しておくと良いと思います。</p>

<p>ちなみに今のところ letsencrypt に登録したメールアドレスに letsencrypt からメールが来たことはありません。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dokku config:set --no-restart staging.example.co.jp DOKKU_LETSENCRYPT_EMAIL=root@example.co.jp
</span><span class='line'>-----&gt; Setting config vars
</span><span class='line'>       DOKKU_LETSENCRYPT_EMAIL: root@example.co.jp</span></code></pre></td></tr></table></div></figure>


<h2>メールアドレスをグローバルに設定するかアプリケーションごとに設定するか</h2>

<p>グローバルに設定することも可能だと思いますが、メールアドレスを設定していなければ <code>dokku letsencrypt APP</code> の最初のチェックで止まって、既存の TLS 設定を上書きされる心配がないので、すべてのアプリケーションで letsencrypt を使うのでなければ、アプリケーションごとに設定することをおすすめします。</p>

<p>メールアドレスを設定していなければ、以下のように失敗して止まってくれます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dokku letsencrypt node-js-app
</span><span class='line'>=====&gt; Let's Encrypt node-js-app...
</span><span class='line'> !     ERROR: Cannot request a certificate without an e-mail address!
</span><span class='line'> !       please provide your e-mail address using
</span><span class='line'> !       dokku config:set --no-restart node-js-app DOKKU_LETSENCRYPT_EMAIL=&lt;e-mail&gt;</span></code></pre></td></tr></table></div></figure>


<h2>証明書発行と設定</h2>

<p><code>dokku letsencrypt APP</code> で証明書発行から設定まで自動で実行されます。</p>

<p>すでに <code>tls/server.{crt,key}</code> が存在していても強制的にシンボリックリンクで上書きされるので、他で発行された証明書を使っている場合は注意が必要です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dokku letsencrypt staging.example.co.jp
</span><span class='line'>=====&gt; Let's Encrypt staging.example.co.jp...
</span><span class='line'>-----&gt; Updating letsencrypt docker image...
</span><span class='line'>latest: Pulling from m3adow/letsencrypt-simp_le
</span><span class='line'>420890c9e918: Pull complete
</span><span class='line'>acbaf1e6012f: Pull complete
</span><span class='line'>5f71a1a2d3dc: Pull complete
</span><span class='line'>Digest: sha256:be1d7aca214d5277af18d7bf75a2bc78afa5a1eabf98aaa8a606c4ca2a7fdeb5
</span><span class='line'>Status: Downloaded newer image for m3adow/letsencrypt-simp_le:latest
</span><span class='line'>       done
</span><span class='line'>-----&gt; Enabling ACME proxy for staging.example.co.jp...
</span><span class='line'>-----&gt; Getting letsencrypt certificate for staging.example.co.jp...
</span><span class='line'>        - Domain 'staging.example.co.jp'
</span><span class='line'>darkhttpd/1.11, copyright (c) 2003-2015 Emil Mikulic.
</span><span class='line'>listening on: http://0.0.0.0:80/
</span><span class='line'>2016-04-04 03:26:42,946:INFO:__main__:1202: Generating new account key
</span><span class='line'>2016-04-04 03:26:43,831:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
</span><span class='line'>2016-04-04 03:26:44,110:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
</span><span class='line'>2016-04-04 03:26:44,302:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
</span><span class='line'>2016-04-04 03:26:44,841:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): letsencrypt.org
</span><span class='line'>2016-04-04 03:26:45,410:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
</span><span class='line'>2016-04-04 03:26:45,664:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
</span><span class='line'>2016-04-04 03:26:45,940:INFO:requests.packages.urllib3.connectionpool:207: Starting new HTTP connection (1): staging.example.co.jp
</span><span class='line'>2016-04-04 03:26:45,946:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): staging.example.co.jp
</span><span class='line'>2016-04-04 03:26:45,995:INFO:__main__:1294: staging.example.co.jp was successfully self-verified
</span><span class='line'>2016-04-04 03:26:46,022:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
</span><span class='line'>2016-04-04 03:26:46,272:INFO:__main__:1302: Generating new certificate private key
</span><span class='line'>2016-04-04 03:26:47,528:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
</span><span class='line'>2016-04-04 03:26:47,723:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
</span><span class='line'>2016-04-04 03:26:47,987:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
</span><span class='line'>2016-04-04 03:26:48,215:INFO:__main__:385: Saving account_key.json
</span><span class='line'>2016-04-04 03:26:48,216:INFO:__main__:385: Saving fullchain.pem
</span><span class='line'>2016-04-04 03:26:48,216:INFO:__main__:385: Saving chain.pem
</span><span class='line'>2016-04-04 03:26:48,216:INFO:__main__:385: Saving cert.pem
</span><span class='line'>2016-04-04 03:26:48,216:INFO:__main__:385: Saving key.pem
</span><span class='line'>-----&gt; Certificate retrieved successfully.
</span><span class='line'>-----&gt; Symlinking let's encrypt certificates
</span><span class='line'>-----&gt; Configuring staging.example.co.jp...(using built-in template)
</span><span class='line'>-----&gt; Creating https nginx.conf
</span><span class='line'>-----&gt; Running nginx-pre-reload
</span><span class='line'>       Reloading nginx
</span><span class='line'>-----&gt; Disabling ACME proxy for staging.example.co.jp...
</span><span class='line'>       done</span></code></pre></td></tr></table></div></figure>


<h2>有効になっているアプリケーション一覧確認</h2>

<p><code>dokku letsencrypt:ls</code> で有効になっているアプリケーションとその有効期限を確認します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dokku letsencrypt:ls
</span><span class='line'>-----&gt; App name           Certificate Expiry        Time before expiry        Time before renewal
</span><span class='line'>staging.example.co.jp 2016-07-03 11:27:00       89d, 22h, 56m, 55s        59d, 22h, 56m, 55s</span></code></pre></td></tr></table></div></figure>


<h2>自動更新</h2>

<p>有効期限が 30 日 (<code>DOKKU_LETSENCRYPT_GRACEPERIOD</code> で変更可能) を切ると自動更新してくれる <code>dokku letsencrypt:auto-renew</code> も試しておきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dokku letsencrypt:auto-renew
</span><span class='line'>=====&gt; Auto-renewing all apps...
</span><span class='line'>       staging.example.co.jp still has 59d, 22h, 48m, 36s days left before renewal
</span><span class='line'>=====&gt; Finished auto-renewal</span></code></pre></td></tr></table></div></figure>


<p>問題なさそうなので、<code>dokku</code> ユーザーの <code>crontab</code> で設定して自動実行するようにしておきます。
リモートからのトリガーで実行されるように ssh で入れるユーザーの <code>crontab</code> で <code>ssh dokku letsencrypt:auto-renew</code> を設定しておくのでも良いと思います。</p>

<h2>セキュリティ上の問題点</h2>

<p><code>dokku-letsencrypt</code> が使用している <a href="https://github.com/kuba/simp_le" title="Simple Let's Encrypt Client">Simple Let&rsquo;s Encrypt Client</a> の issue の <a href="https://github.com/kuba/simp_le/issues/29" title="private key permissions">private key permissions</a> で指摘されているように、 <code>ls -al /home/dokku/staging.example.co.jp/letsencrypt/certs/current/</code> で確認してみると、他のユーザーからは読めなくするべき <code>account_key.json</code> や <code>key.pem</code> も誰でも読めるパーミッションになってしまっているので、 <code>sudo chmod 700 /home/dokku/staging.example.co.jp/letsencrypt</code> などでパーミッションを落としておく方が良さそうです。</p>

<p>ファイル自体のパーミッションを落としても良さそうですが、更新された後のことも考えると <code>/home/dokku/APP/letsencrypt</code> ディレクトリ自体のパーミッションを落としておくのが良さそうです。</p>

<h2>Rate Limit</h2>

<p><a href="https://letsencrypt.jp/faq/#RateLimiting" title="Let's Encrypt の証明書に取得数制限はありますか？">Let&rsquo;s Encrypt の証明書に取得数制限はありますか？</a> のリンク先に書いてあるように、この記事執筆時点では「アカウント登録/IP アドレスごと」(3 時間で 10 個) と「証明書発行/ドメインごと」(1 週間で 5 個) の制限があるので、注意が必要です。</p>

<p>特に dokku-letsencrypt では<a href="https://github.com/letsencrypt/letsencrypt">公式のクライアント</a>が <code>/etc/letsencrypt/accounts</code> でアカウントを共有するのと違って、 <code>account_key.json</code> をアプリケーションごとに作成しているので、注意が必要そうです。</p>

<p>ただし、現状の制限だと証明書発行数の制限の方が引っかかりやすいので、アカウント登録の制限は問題にならないようにも思います。</p>

<p>証明書発行数の制限については <code>dokku domains:add</code> や <code>dokku domains:remove</code> で適切にドメインの追加や削除をしてから <code>dokku letsencrypt</code> を実行するように README.md の <a href="https://github.com/dokku/dokku-letsencrypt/tree/b4950b8254f683e4af775bad44e390763a699de1#dealing-with-rate-limit" title="Dealing with rate limit">Dealing with rate limit</a> に書いてあります。</p>

<h2>証明書の情報表示</h2>

<p><code>dokku certs:info</code> で letsencrypt のものに限らず、証明書の情報を表示できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adminuser@tk2-213-16013:~$ dokku certs:info staging.example.co.jp
</span><span class='line'>-----&gt; Fetching SSL Endpoint info for staging.example.co.jp...
</span><span class='line'>-----&gt; Certificate details:
</span><span class='line'>=====&gt; Common Name(s):
</span><span class='line'>=====&gt;    staging.example.co.jp
</span><span class='line'>=====&gt;    staging.example.co.jp
</span><span class='line'>=====&gt; Expires At: Jul  3 02:27:00 2016 GMT
</span><span class='line'>=====&gt; Issuer: C=US, O=Lets Encrypt, CN=Lets Encrypt Authority X3
</span><span class='line'>=====&gt; Starts At: Apr  4 02:27:00 2016 GMT
</span><span class='line'>=====&gt; Subject: CN=staging.example.co.jp
</span><span class='line'>=====&gt; SSL certificate is self signed.
</span><span class='line'>adminuser@tk2-213-16013:~$ dokku certs:info production.example.co.jp
</span><span class='line'>-----&gt; Fetching SSL Endpoint info for production.example.co.jp...
</span><span class='line'>-----&gt; Certificate details:
</span><span class='line'>=====&gt; Common Name(s):
</span><span class='line'>=====&gt;    production.example.co.jp
</span><span class='line'>=====&gt;    production.example.co.jp
</span><span class='line'>=====&gt;    example.co.jp
</span><span class='line'>=====&gt; Expires At: Aug  4 00:05:31 2016 GMT
</span><span class='line'>=====&gt; Issuer: C=IL, O=StartCom Ltd., OU=Secure Digital Certificate Signing, CN=StartCom Class 1 Primary Intermediate Server CA
</span><span class='line'>=====&gt; Starts At: Aug  3 18:20:22 2015 GMT
</span><span class='line'>=====&gt; Subject: C=JP; CN=production.example.co.jp; emailAddress=hostmaster@example.co.jp
</span><span class='line'>=====&gt; SSL certificate is self signed.
</span><span class='line'>adminuser@tk2-213-16013:~$ dokku certs:info another.example.co.jp
</span><span class='line'>-----&gt; Fetching SSL Endpoint info for another.example.co.jp...
</span><span class='line'>-----&gt; Certificate details:
</span><span class='line'>=====&gt; Common Name(s):
</span><span class='line'>=====&gt;    another.example.co.jp
</span><span class='line'>=====&gt;    another.example.co.jp
</span><span class='line'>=====&gt;    example.co.jp
</span><span class='line'>=====&gt; Expires At: Apr 23 04:56:14 2016 GMT
</span><span class='line'>=====&gt; Issuer: C=IL, O=StartCom Ltd., OU=Secure Digital Certificate Signing, CN=StartCom Class 1 Primary Intermediate Server CA
</span><span class='line'>=====&gt; Starts At: Apr 22 23:55:13 2015 GMT
</span><span class='line'>=====&gt; Subject: C=JP; CN=another.example.co.jp; emailAddress=hostmaster@example.co.jp
</span><span class='line'>=====&gt; SSL certificate is self signed.
</span><span class='line'>adminuser@tk2-213-16013:~$</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ccollect によるバックアップの設定]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-04-ccollect.html"/>
    <updated>2016-04-04T22:51:06+09:00</updated>
    <id>http://blog.n-z.jp/blog/ccollect</id>
    <content type="html"><![CDATA[<p><code>ccollect</code> という <code>rsync</code> の <code>--link-dest</code> オプションによるハードリンクをうまく使って差分バックアップをしてくれるツールでバックアップ設定をしました。</p>

<!--more-->


<h2>インストール</h2>

<p>deb パッケージは存在しないので、まず <code>git clone https://github.com/ungleich/ccollect ~/src/github.com/ungleich/ccollect</code> などで最新 (現時点で 1.0) の ccollect を github のミラーから取得します。</p>

<p><a href="http://www.nico.schottelius.org/software/ccollect/">本家</a> の download ページにある tarball は 0.8 まででちょっと古いです。</p>

<h2>共通設定</h2>

<p>設定は <code>CCOLLECT_CONF</code> (デフォルトは <code>/etc/ccollect</code>) の中に置いていきます。</p>

<p>共通設定は <code>defaults</code> の中に、バックアップごとの設定は <code>sources</code> の中に置いていきます。</p>

<h3>バックアップ保存回数の設定</h3>

<p><code>defaults/intervals</code> の中に適当なファイル名でバックアップの保存回数を設定していきます。</p>

<p><code>daily</code> などの名前をつけることが多いようですが、 <code>ccollect</code> 自体に毎日自動実行する機能があるわけではないので、自前で <code>cron</code> などを使って実行する必要が有ります。</p>

<ul>
<li><code>sudo mkdir -p /etc/ccollect/defaults/intervals</code></li>
<li><code>echo 10 | sudo tee /etc/ccollect/defaults/intervals/daily</code></li>
<li><code>echo 24 | sudo tee /etc/ccollect/defaults/intervals/monthly</code></li>
<li><code>echo 10 | sudo tee /etc/ccollect/defaults/intervals/weekly</code></li>
</ul>


<p>ここでは日時バックアップと週次バックアップは 10 回分、月次バックアップは 2 年分保存するようにしてみました。</p>

<h3>不完全なバックアップの削除</h3>

<p><code>ccollect</code> では構造化された設定ファイルをパースするのではなく、簡単な内容のファイルの中身が設定値になっていたり、ファイルの存在がフラグとなっていたりするようになっています。</p>

<p>ここでは <code>rsync</code> の途中で <code>ssh</code> が切れたなどの理由で不完全なバックアップができてしまった時に削除するフラグを設定します。</p>

<ul>
<li><code>sudo touch /etc/ccollect/defaults/delete_incomplete</code></li>
</ul>


<h2>ローカルのバックアップ設定の追加</h2>

<p>まず動作確認も兼ねて、ローカルのバックアップを取る設定を追加してみます。</p>

<ul>
<li><code>sudo mkdir -p /etc/ccollect/sources/$(hostname)-home</code></li>
<li><code>echo '/home' | sudo tee /etc/ccollect/sources/$(hostname)-home/source</code></li>
<li><code>echo "/srv/backup/$(hostname)-home" | sudo tee /etc/ccollect/sources/$(hostname)-home/destination</code></li>
</ul>


<p>バックアップから除外するファイルも設定してみます。
除外指定ということを明示するために <code>-</code> をつけていますが、つけずにパターンだけでもこの場合は同じです。
<code>exclude</code> ファイルの書式の詳細は <code>rsync "--exclude-from"</code> で検索して調べてください。</p>

<ul>
<li><code>echo '- *.swp' | sudo tee /etc/ccollect/sources/$(hostname)-home/exclude</code></li>
<li><code>echo '- *~' | sudo tee -a /etc/ccollect/sources/$(hostname)-home/exclude</code></li>
</ul>


<p>今回は関係ないかもしれませんが、 <code>/</code> パーティションなどをバックアップする時にはつけた方が良い <code>--one-file-system</code> オプションも追加しておきます。</p>

<ul>
<li><code>echo '--one-file-system' | sudo tee /etc/ccollect/sources/$(hostname)-home/rsync_options</code></li>
</ul>


<p>サマリー表示を有効にしておきます。
初回実行なので詳細表示も有効にしてみます。</p>

<ul>
<li><code>sudo touch /etc/ccollect/sources/$(hostname)-home/summary</code></li>
<li><code>sudo touch /etc/ccollect/sources/$(hostname)-home/verbose</code></li>
</ul>


<h3>初回バックアップ実行</h3>

<p><code>destination</code> ファイルで指定したバックアップ先ディレクトリは自動作成されないので、手動で作成してバックアップを実行します。
2 回実行してちゃんと差分バックアップになっているのを確認します。</p>

<ul>
<li><code>sudo mkdir -pv $(cat /etc/ccollect/sources/*/destination)</code></li>
<li><code>sudo ~/src/github.com/ungleich/ccollect/ccollect daily $(hostname)-home</code></li>
<li><code>sudo ~/src/github.com/ungleich/ccollect/ccollect daily $(hostname)-home</code></li>
</ul>


<p>容量も 2 倍になっていないのを確認します。</p>

<ul>
<li><code>sudo du -s /srv/backup/$(hostname)-home /home</code></li>
</ul>


<p>動作確認ができたので、詳細表示オプションを削除しておきます。</p>

<ul>
<li><code>sudo rm /etc/ccollect/sources/$(hostname)-home/verbose</code></li>
</ul>


<h2>リモートからのバックアップ設定の追加</h2>

<p><code>source</code> にリモートホストを設定する以外はローカルの設定と同様に設定していきます。</p>

<ul>
<li><code>sudo mkdir /etc/ccollect/sources/vps-etc</code></li>
<li><code>echo /srv/backup/vps-etc | sudo tee /etc/ccollect/sources/vps-etc/destination</code></li>
<li><code>echo root@vps.example.jp:/etc | sudo tee /etc/ccollect/sources/vps-etc/source</code></li>
<li><code>echo '- *.swp' | sudo tee -a /etc/ccollect/sources/vps-etc/exclude</code></li>
<li><code>echo '- *~' | sudo tee -a /etc/ccollect/sources/vps-etc/exclude</code></li>
<li><code>sudo touch /etc/ccollect/sources/vps-etc/summary</code></li>
</ul>


<p>ネットワーク的につながらない時はバックアップが失敗するので、事前チェックするようにします。</p>

<ul>
<li><code>sudoedit /etc/ccollect/sources/vps-etc/pre_exec</code></li>
<li><code>sudo chmod +x /etc/ccollect/sources/vps-etc/pre_exec</code></li>
</ul>


<p><code>pre_exec</code> の内容は以下の通りです。
<a href="https://github.com/ungleich/ccollect/blob/5356370233e0883b5c6cc62b12c84ef058f8c239/doc/ccollect.text#L872-L884">ccollect のドキュメントの Testing for host reachabilty</a> を参考にしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'><span class="nv">cur_conf_dir</span><span class="o">=</span><span class="s2">&quot;${CCOLLECT_CONF:-/etc/ccollect}/sources/$name&quot;</span>
</span><span class='line'><span class="nv">SRC_HOST</span><span class="o">=</span><span class="sb">`</span>cat <span class="s2">&quot;$cur_conf_dir/source&quot;</span> <span class="p">|</span> cut -d<span class="s2">&quot;@&quot;</span> -f2 <span class="p">|</span> cut -d<span class="s2">&quot;:&quot;</span> -f1<span class="sb">`</span>
</span><span class='line'>ping -c1 -q <span class="s2">&quot;$SRC_HOST&quot;</span> <span class="o">||</span> <span class="nb">exit</span> <span class="nv">$?</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ssh 設定</h3>

<p>セキュリティ的にはあまり好ましくないのですが、バックアップ用に root から root に ssh で接続できるようにします。</p>

<p>まず、バックアップ先のローカルのマシンで root の ssh 用の鍵を作成します。</p>

<ul>
<li><code>sudo ls -al /root/.ssh</code> で root に ssh の鍵がないのを確認したら <code>sudo ssh-keygen</code> で生成します。存在する場合は別のファイル名で生成して <code>sudoedit /root/.ssh/config</code> で <code>IdentityFile</code> を設定しておきます。自動実行で使用するので、パスフレーズは空にしておきます。</li>
<li>ssh のポート番号を変更しているなど、別途設定が必要な場合は <code>sudoedit /root/.ssh/config</code> で設定しておくのを忘れないように注意が必要です。</li>
<li><code>sudo cat /root/.ssh/id_rsa.pub</code> で公開鍵を表示してコピーしておきます。</li>
</ul>


<p>続いて、バックアップ対象の VPS (バックアップ元) の方で ssh を許可する設定をします。</p>

<ul>
<li><code>sudo install -m700 -d /root/.ssh</code> で <code>/root/.ssh</code> がなければ作成します。</li>
<li><code>sudoedit /root/.ssh/authorized_keys</code> で接続を許可する鍵として、先ほどコピーした公開鍵を貼り付けます。</li>
<li>必要に応じて <code>from="pattern-list"</code> や <code>no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding</code> などの制限も追加しておきます。</li>
<li><code>sudoedit /etc/ssh/sshd_config</code> で <code>PermitRootLogin</code> を <code>no</code> 以外にします。例えば <code>without-password</code> にしておきます。</li>
<li><code>sudoedit /etc/ssh/sshd_config</code> で <code>AllowUsers</code> による制限をしている時は <code>AllowUsers root@接続元IPアドレス</code> を追加しておきます。接続元 IP アドレスが固定ではない場合は、セキュリティ的に弱くなりますが <code>AllowUsers root</code> で許可します。</li>
<li><code>/etc/ssh/sshd_config</code> の設定を変更した場合は <code>sudo service ssh restart</code> で反映させておきます。</li>
</ul>


<p>設定ができたら、接続元 (バックアップ先のローカルのマシン) から ssh の接続確認をします。</p>

<ul>
<li><code>sudo ssh root@vps.example.jp hostname</code> などで ssh 接続ができることの確認とホスト鍵の確認を済ませておきます。</li>
</ul>


<h3>初回バックアップ実行</h3>

<p>ローカルでのバックアップと同様にバックアップ先ディレクトリを作成してからバックアップを実行します。</p>

<ul>
<li><code>sudo mkdir -pv $(cat /etc/ccollect/sources/*/destination)</code></li>
<li><code>sudo ~/src/github.com/ungleich/ccollect/ccollect daily vps-etc</code></li>
<li><code>sudo ~/src/github.com/ungleich/ccollect/ccollect daily vps-etc</code></li>
</ul>


<h2>リモートからの一般ユーザー権限でのバックアップ設定の追加</h2>

<p>dokku で persistent storage としてボリュームマウントを使っているとファイルの所有者とグループがアプリケーションのデプロイのたびに変わってしまって、差分バックアップに支障が出そうだったので、一般ユーザーでのバックアップも設定しました。</p>

<p><a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html" title="XDG Base Directory Specification">XDG Base Directory Specification</a> の <code>XDG_CONFIG_HOME</code> を参考にして <code>~/.config</code> 以下に <code>/etc</code> 以下と同じ構造で設定を作成することにしました。</p>

<ul>
<li><code>mkdir -p ~/.config/ccollect/defaults/intervals</code></li>
<li><code>echo 10 &gt; ~/.config/ccollect/defaults/intervals/daily</code></li>
<li><code>echo 24 &gt; ~/.config/ccollect/defaults/intervals/monthly</code></li>
<li><code>echo 10 &gt; ~/.config/ccollect/defaults/intervals/weekly</code></li>
<li><code>mkdir -p ~/.config/ccollect/sources/vps-srv</code></li>
<li><code>echo /srv/backup/vps-srv &gt; ~/.config/ccollect/sources/vps-srv/destination</code></li>
<li><code>echo vpsuser@vps.example.jp:/srv &gt; ~/.config/ccollect/sources/vps-srv/source</code></li>
<li><code>echo '- *.swp' &gt; ~/.config/ccollect/sources/vps-srv/exclude</code></li>
<li><code>echo '- *~' &gt;&gt; ~/.config/ccollect/sources/vps-srv/exclude</code></li>
<li><code>touch ~/.config/ccollect/sources/vps-srv/summary</code></li>
</ul>


<p>ネットワーク的につながらない時はバックアップが失敗するので、事前チェックするようにします。</p>

<ul>
<li><code>editor ~/.config/ccollect/sources/vps-srv/pre_exec</code></li>
<li><code>chmod +x ~/.config/ccollect/sources/vps-srv/pre_exec</code></li>
</ul>


<p><code>pre_exec</code> の内容は以下の通りです。
「リモートからのバックアップ設定の追加」で作成したものと全く同じ内容です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'><span class="nv">cur_conf_dir</span><span class="o">=</span><span class="s2">&quot;${CCOLLECT_CONF:-/etc/ccollect}/sources/$name&quot;</span>
</span><span class='line'><span class="nv">SRC_HOST</span><span class="o">=</span><span class="sb">`</span>cat <span class="s2">&quot;$cur_conf_dir/source&quot;</span> <span class="p">|</span> cut -d<span class="s2">&quot;@&quot;</span> -f2 <span class="p">|</span> cut -d<span class="s2">&quot;:&quot;</span> -f1<span class="sb">`</span>
</span><span class='line'>ping -c1 -q <span class="s2">&quot;$SRC_HOST&quot;</span> <span class="o">||</span> <span class="nb">exit</span> <span class="nv">$?</span>
</span></code></pre></td></tr></table></div></figure>


<h3>初回バックアップ実行</h3>

<p>一般ユーザー権限でバックアップするので、バックアップ先ディレクトリを <code>chown</code> しておきます。</p>

<p><code>ssh vpsuser@vps.example.jp</code> で一度接続してホスト鍵の確認なども終わらせておきます。</p>

<p>設定ファイルの場所が違うので、環境変数 <code>CCOLLECT_CONF</code> を設定しつつ実行します。</p>

<ul>
<li><code>sudo mkdir -pv $(cat ~/.config/ccollect/sources/*/destination)</code></li>
<li><code>sudo chown $(id -u) /srv/backup/vps-srv</code></li>
<li><code>env CCOLLECT_CONF=$HOME/.config/ccollect ~/src/github.com/ungleich/ccollect/ccollect daily vps-srv</code></li>
<li><code>env CCOLLECT_CONF=$HOME/.config/ccollect ~/src/github.com/ungleich/ccollect/ccollect daily vps-srv</code></li>
</ul>


<h2>バックアップ自動実行設定</h2>

<p>cron で毎日自動バックアップが動くように設定します。
時間がかかるので、 <code>cron.daily</code> のファイルの中でも最後に実行されるように <code>zz-</code> で始まる名前にしています。
そして、パッケージで入れたファイルと区別できるように <code>local</code> という文字列を名前に入れています。</p>

<p>その際、保存回数が一番多くて保存期間が長い <code>monthly</code> を優先するようにしてみました。</p>

<p>ログ保存用のディレクトリは一般的な debian の流儀に合わせて adm グループのみ読めるようにしています。
<code>install</code> コマンドについては <a href="http://blog.n-z.jp/blog/2014-02-14-install.html" title="installコマンドでコマンド数を減らす">installコマンドでコマンド数を減らす</a> を参考にしてください。</p>

<p>ログは rotate などはせずに全部残して、 <code>tools/ccollect_analyse_logs</code> でエラーや警告があれば cron からのメールとして飛ぶようにしました。
その際、 <code>tools/ccollect_analyse_logs</code> の exit status が <code>grep</code> の exit status そのままなので、エラーの有無と逆の意味に感じられてしまうので、反転するようにしました。</p>

<ul>
<li><code>sudoedit /etc/cron.daily/zz-local-ccollect</code></li>
<li><code>sudo chmod +x /etc/cron.daily/zz-local-ccollect</code></li>
</ul>


<figure class='code'><figcaption><span>/etc/cron.daily/zz-local-ccollect</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">INTERVAL</span><span class="o">=</span>daily
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">7</span> <span class="o">=</span> <span class="s2">&quot;$(date +%u)&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nv">INTERVAL</span><span class="o">=</span>weekly
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">01</span> <span class="o">=</span> <span class="s2">&quot;$(date +%d)&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nv">INTERVAL</span><span class="o">=</span>monthly
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>mkdir -p /var/log/ccollect
</span><span class='line'><span class="nv">LOGDIR</span><span class="o">=</span><span class="s2">&quot;/var/log/ccollect&quot;</span>
</span><span class='line'><span class="nv">LOGFILE</span><span class="o">=</span><span class="s2">&quot;$LOGDIR/$(date +%Y%m%d-%H%M).log&quot;</span>
</span><span class='line'><span class="nv">LOCALUSER</span><span class="o">=</span><span class="s2">&quot;localuser&quot;</span>
</span><span class='line'><span class="nv">CCOLLECT_DIR</span><span class="o">=</span><span class="s2">&quot;/home/$LOCALUSER/src/github.com/ungleich/ccollect&quot;</span>
</span><span class='line'>install -m750 -oroot -gadm -d <span class="s2">&quot;$LOGDIR&quot;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  su - <span class="s2">&quot;$LOCALUSER&quot;</span> -c <span class="s1">&#39;env CCOLLECT_CONF=$HOME/.config/ccollect &#39;</span><span class="s2">&quot;$CCOLLECT_DIR&quot;</span><span class="s1">&#39;/ccollect -a &#39;</span><span class="s2">&quot;$INTERVAL&quot;</span>
</span><span class='line'>  <span class="s2">&quot;$CCOLLECT_DIR/ccollect&quot;</span> -a <span class="s2">&quot;$INTERVAL&quot;</span>
</span><span class='line'><span class="o">}</span> &gt;<span class="s2">&quot;$LOGFILE&quot;</span> 2&gt;<span class="p">&amp;</span>1
</span><span class='line'><span class="k">if</span> /bin/sh <span class="s2">&quot;$CCOLLECT_DIR/tools/ccollect_analyse_logs&quot;</span> <span class="s2">&quot;we&quot;</span> &lt; <span class="s2">&quot;$LOGFILE&quot;</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="c"># found</span>
</span><span class='line'>  <span class="nb">exit </span>1
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="c"># not found</span>
</span><span class='line'>  <span class="nb">exit </span>0
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h2>リモートの dokku の home のバックアップ設定</h2>

<p>他の設定例として、リモートの dokku の home のバックアップ設定もしてみました。
設定が似ている <code>vps-etc</code> を雛形としてコピーして <code>destination</code> と <code>source</code> などを書き換える形で設定しました。</p>

<ul>
<li><code>cd /etc/ccollect/sources</code></li>
<li><code>sudo cp -a vps-etc vps-home</code></li>
<li><code>sudoedit vps-home/destination</code> で <code>/srv/backup/vps-home</code> に変更</li>
<li><code>sudoedit vps-home/source</code> で <code>root@vps.example.jp:/home</code> に変更</li>
<li><code>sudoedit vps-home/exclude</code> で <code>- cache</code> を追加 (<code>/home/dokku/$APP/cache/</code> は buildpack での build 時などのキャッシュに使われるのと、ファイルの所有者とグループがどんどん変わるので、バックアップからは除外)</li>
</ul>


<h3>初回バックアップ実行</h3>

<p><code>vps-etc</code> のバックアップと同様にバックアップ先ディレクトリを作成してからバックアップを実行します。</p>

<ul>
<li><code>sudo mkdir -pv $(cat /etc/ccollect/sources/*/destination)</code></li>
<li><code>sudo ~/src/github.com/ungleich/ccollect/ccollect daily vps-home</code></li>
<li><code>sudo ~/src/github.com/ungleich/ccollect/ccollect daily vps-home</code></li>
</ul>


<h2>uid, gid 問題</h2>

<p>LDAP などでアカウントを共通化していれば問題ないのですが、 <code>rsync</code> では uid や gid を数値のまま保存してコピーするので、バックアップ元とバックアップ先で同じ uid に対して別のユーザーが存在すると、意図しないユーザーが読めるバックアップができてしまうので、注意が必要です。</p>

<p>この記事の例だと <code>/srv/backup/vps-home</code> のパーミッションを変更する (<code>sudo chmod 700 /srv/backup/vps-home</code>) などの対処をしておくと良いと思います。</p>

<h2>バックアップの差分の確認</h2>

<p><a href="https://github.com/ungleich/ccollect/blob/5356370233e0883b5c6cc62b12c84ef058f8c239/doc/ccollect.text#L858-L869" title="ccollect.text の Comparing backups">ccollect.text の Comparing backups</a> によると <code>rsync -n -a --delete --stats --progress daily.20080324-0313.17841/ daily.20080325-0313.31148/</code> のように <code>-n</code> オプション付きで <code>rsync</code> を実行することによってバックアップの差分を確認できるようです。</p>

<h2>まとめ</h2>

<p><code>ccollect</code> で差分バックアップを作成するようにしました。</p>

<p><code>rsync</code> によるバックアップなので、圧縮などもするバックアップツールと違い、バックアップの内容も元のディレクトリ構造そのままでわかりやすいので、一部だけ復元するなどの操作も素直に実行しやすくなっています。</p>

<p>ハードリンクなので i-node は消費しますが、変化がないファイルについては容量を消費しないので、バックアップサイズも抑えられます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dokku 0.5.3 を vagrant 環境で試してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-03-30-dokku-053.html"/>
    <updated>2016-03-30T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dokku-053</id>
    <content type="html"><![CDATA[<p>社内向けアプリで本番環境でも使っている dokku のバージョン 0.5.3 をいろいろ試しやすくするために vagrant 環境で試してみました。</p>

<!--more-->


<h2>確認バージョン</h2>

<ul>
<li>VirtualBox 5.0.16</li>
<li>Vagrant 1.8.1</li>
<li>dokku 0.5.3</li>
</ul>


<h2>dokku v0.5.0 での主な変更点</h2>

<p><a href="https://github.com/dokku/dokku/releases/tag/v0.5.0">v0.5.0</a> での主な変更点は以下の通りです。</p>

<ul>
<li>docker 1.10/1.11 のサポートと、 docker 1.9.1 以上の必須化</li>
<li>ドキュメント改善</li>
<li><a href="http://dokku.viewdocs.io/dokku/deployment/deployment-tasks/" title="Deployment Tasks">Deployment Tasks</a> (<code>app.json</code> での <code>scripts.dokku.predeploy</code> と <code>scripts.dokku.postdeploy</code> のサポート)</li>
<li><a href="http://dokku.viewdocs.io/dokku/deployment/dockerfiles/" title="Dockerfile Deployment">Dockerfile Deployment</a> で <code>Procfile</code> サポート、<code>EXPOSE</code> の扱いの変更</li>
<li><a href="http://dokku.viewdocs.io/dokku/dokku-storage/">persistent storage plugin</a> のオフィシャル化</li>
</ul>


<h2>初期設定</h2>

<p><code>git clone https://github.com/dokku/dokku</code> で clone してきたディレクトリの中に入って <code>vagrant up</code> します。
最初は box のダウンロードもあるので時間がかかります。</p>

<p><a href="http://xip.io/">xip.io</a> を使ってサブドメインを使ったデプロイを試します。</p>

<p><code>http://10.0.0.2.xip.io/</code> を開き、 <code>Hostname</code> を <code>10.0.0.2.xip.io</code> にして <code>Use virtualhost naming for apps</code> にチェックを入れて、 <code>Finish Setup</code> を押します。</p>

<p><a href="http://dokku.viewdocs.io/dokku/application-deployment/">http://dokku.viewdocs.io/dokku/application-deployment/</a> にリダイレクトされるので、そのチュートリアルを試します。</p>

<h2>チュートリアル前の準備</h2>

<p><code>vagrant ssh</code> で入って操作します。</p>

<p><code>docker</code> コマンドや <code>dokku</code> コマンドで <code>sudo</code> を不要にするためにグループに追加します。</p>

<ul>
<li><code>sudo usermod -aG docker vagrant</code></li>
<li><code>sudo usermod -aG dokku vagrant</code></li>
</ul>


<p>ビルド中のダウンロードでタイムアウトしにくくするためにタイムアウト時間をのばします。</p>

<ul>
<li><code>dokku config:set --global CURL_TIMEOUT=120</code></li>
</ul>


<p><code>dokku run</code> などで実行して終了したコンテナが溜まっていかないようにするために、デフォルトで <code>--rm</code> をつけるようにします。(この設定をしなくても <code>git push</code> したときに自動で実行される <code>dokku cleanup</code> で削除されます。)</p>

<ul>
<li><code>dokku config:set --global DOKKU_RM_CONTAINER=1</code></li>
</ul>


<h2>チュートリアル</h2>

<p>チュートリアルも <code>vagrant ssh</code> で入った環境で試します。
<code>sudo dokku plugin:install</code> 以外はホスト側からでも実行できます。</p>

<ul>
<li><code>git clone git@github.com:heroku/ruby-rails-sample.git</code> で rails のサンプルを clone しておきます。</li>
<li><code>dokku apps:create ruby-rails-sample</code> でアプリケーションを作成します。データベースとのリンクに必要なので、事前に作成していますが、 <a href="https://github.com/heroku/node-js-sample">https://github.com/heroku/node-js-sample</a> のように単独で動くアプリケーションでは事前に <code>apps:create</code> しなくても構いません。</li>
<li><code>sudo dokku plugin:install https://github.com/dokku/dokku-postgres.git</code> で postgres プラグインをインストールします。インストールの後処理で <code>postgres:9.5.0</code>, <code>svendowideit/ambassador:latest</code>, <code>dokkupaas/wait:latest</code> が docker pull されるので、ダウンロードに少し時間がかかります。</li>
<li><code>docker images</code> で確認するとわかるのですが、なぜか <code>gliderlabs/herokuish</code> が 0 バイトのイメージになってしまっているので <code>docker pull gliderlabs/herokuish</code> でダウンロードしておきます。ここもダウンロードに時間がかかります。この手順は普通にインストールした場合は不要なはずです。</li>
<li><code>dokku postgres:create rails-database</code> でデータベースのコンテナを作成して <code>dokku postgres:link rails-database ruby-rails-sample</code> でリンクします。</li>
<li><code>git remote add dokku dokku@10.0.0.2:ruby-rails-sample</code> で remote に dokku を登録して <code>git push dokku master</code> でデプロイします。</li>
<li><code>curl</code> コマンドでエラーになった場合、 <code>CURL_TIMEOUT</code> をのばして、再度 <code>git push dokku master</code> します。</li>
<li><code>http://ruby-rails-sample.10.0.0.2.xip.io/</code> を開いて <code>Hello World</code> と現在時刻が UTC (+0000) で表示されていたら成功です。</li>
</ul>


<h2>チュートリアル後の変更例</h2>

<p>現在時刻が UTC で表示されていたので JST に変更してみます。</p>

<ul>
<li><code>dokku config:set ruby-rails-sample TZ=Asia/Tokyo</code></li>
</ul>


<p><code>http://ruby-rails-sample.10.0.0.2.xip.io/</code> を開いて <code>Hello World</code> と現在時刻が JST (+0900) で表示されていたら成功です。</p>

<h2><code>rake db:migrate</code> を実行する</h2>

<p><code>dokku run ruby-rails-sample bundle exec rake db:migrate</code> で実行できます。</p>

<h2><code>scripts.dokku.predeploy</code> で <code>rake db:migrate</code> を自動実行する</h2>

<p><a href="http://dokku.viewdocs.io/dokku~v0.5.3/deployment/deployment-tasks/">Deployment Tasks</a> に書いてあるように v0.5.0 から <code>app.json</code> に <code>scripts.dokku.predeploy</code> を設定できるようになっているので、そこで <code>rake db:migrate</code> を自動実行するように設定してみます。</p>

<p>heroku が対応している <code>scripts.postdeploy</code> は初回の deploy 時にしか実行されないのに対して、 <code>scripts.dokku.predeploy</code> と <code>scripts.dokku.postdeploy</code> は毎回実行されるという違いがあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/app.json b/app.json</span>
</span><span class='line'><span class="gh">index 452cef1..4c828fa 100644</span>
</span><span class='line'><span class="gd">--- a/app.json</span>
</span><span class='line'><span class="gi">+++ b/app.json</span>
</span><span class='line'><span class="gu">@@ -5,6 +5,9 @@</span>
</span><span class='line'>   &quot;repository&quot;: &quot;https://github.com/heroku/ruby-rails-sample&quot;,
</span><span class='line'>   &quot;logo&quot;: &quot;https://upload.wikimedia.org/wikipedia/commons/c/c3/Ruby_on_Rails_logo.svg&quot;,
</span><span class='line'>   &quot;scripts&quot;: {
</span><span class='line'><span class="gi">+    &quot;dokku&quot;: {</span>
</span><span class='line'><span class="gi">+      &quot;predeploy&quot;: &quot;bundle exec rake db:migrate&quot;</span>
</span><span class='line'><span class="gi">+    },</span>
</span><span class='line'>     &quot;postdeploy&quot;: &quot;bundle exec rake db:migrate&quot;
</span><span class='line'>   },
</span><span class='line'>   &quot;env&quot;: {
</span></code></pre></td></tr></table></div></figure>


<p>という変更を commit して push して動作確認します。</p>

<p>さらに <code>rails g model</code> などで migration ファイルを作成してさらに動作確認できます。</p>

<h2>pre-flight checks</h2>

<p><a href="http://dokku.viewdocs.io/dokku~v0.5.3/checks-examples/">Zero Downtime Deploys</a> に書いてあるようにゼロダウンタイムデプロイを実現するために <code>CHECKS</code> ファイルを作成します。
(デプロイ後のメッセージに <code>Shutting down old containers in 60 seconds</code> とあるように、デプロイして新しいコンテナに切り替わった直後の 1 分間は古いコンテナも動いています。)</p>

<p>以下の内容の <code>CHECKS</code> ファイルを作成して、デプロイ時の起動確認をデフォルトの 10 秒待つだけの動作から、 http で特定の URL にアクセスして指定した内容が含まれるかどうかのチェックに変更します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>/ Hello World
</span></code></pre></td></tr></table></div></figure>


<p>デフォルトでは 5 秒ごとに 5 回までのチェックですが、以下の内容にすると 10 秒ごとに 20 回までのチェックになります。
起動に時間がかかるアプリケーションの場合に、回数を増やしたり時間をのばしたりすると良いと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>WAIT=10
</span><span class='line'>ATTEMPTS=20
</span><span class='line'>/ Hello World
</span></code></pre></td></tr></table></div></figure>


<h2>アプリケーションを削除する</h2>

<p><code>dokku apps:destroy ruby-rails-sample</code> で削除できます。
heroku での削除と同じように、確認のため、アプリケーション名を再度入力しないと消えないようになっています。</p>

<p>データベースも作成していたので、同様に <code>dokku postgres:destroy rails-database</code> で削除します。</p>

<h2>node-js-sample を試す</h2>

<p>Dokku の昔のバージョンのチュートリアルは node-js-sample を使っていたので、 node-js-sample も試してみます。</p>

<ul>
<li><code>git clone git@github.com:heroku/node-js-sample.git</code></li>
<li><code>cd node-js-sample</code></li>
<li><code>git remote add dokku dokku@10.0.0.2:node-js-sample</code></li>
<li><code>git push dokku master</code></li>
</ul>


<p><code>http://node-js-sample.10.0.0.2.xip.io/</code> を開いて <code>Hello World!</code> が表示されたら成功です。</p>

<h2>動作確認用シェルスクリプト</h2>

<p><code>rails g model</code> 用に <a href="https://github.com/riywo/anyenv">anyenv</a> と <a href="https://github.com/rbenv/rbenv">rbenv</a> を使って ruby と rails のインストールまでしています。</p>

<p>実行前に <code>http://10.0.0.2.xip.io/</code> を開いて設定をしないと途中で失敗して止まります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">set</span> -euo pipefail
</span><span class='line'><span class="nb">set</span> -x
</span><span class='line'><span class="nb">cd</span> /home/vagrant
</span><span class='line'>sudo usermod -aG docker vagrant
</span><span class='line'>sudo usermod -aG dokku vagrant
</span><span class='line'>dokku config:set --global <span class="nv">CURL_TIMEOUT</span><span class="o">=</span>120
</span><span class='line'>dokku config:set --global <span class="nv">DOKKU_RM_CONTAINER</span><span class="o">=</span>1
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d ruby-rails-sample <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  git clone https://github.com/heroku/ruby-rails-sample.git
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d /home/dokku/ruby-rails-sample <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  dokku apps:create ruby-rails-sample
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d /var/lib/dokku/plugins/available/postgres <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  sudo dokku plugin:install https://github.com/dokku/dokku-postgres.git <span class="o">||</span> :
</span><span class='line'>  sudo docker pull gliderlabs/herokuish
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -f /home/dokku/ruby-rails-sample/DOCKER_OPTIONS_RUN <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  dokku postgres:create rails-database <span class="o">||</span> :
</span><span class='line'>  dokku postgres:link rails-database ruby-rails-sample
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">pushd</span> ~/ruby-rails-sample
</span><span class='line'><span class="k">if</span> ! git remote <span class="p">|</span> grep -q dokku<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  git remote add dokku dokku@10.0.0.2:ruby-rails-sample
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>git push dokku master
</span><span class='line'><span class="k">if</span> ! dokku config ruby-rails-sample <span class="p">|</span> grep -q <span class="s1">&#39;^TZ&#39;</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  dokku config:set ruby-rails-sample <span class="nv">TZ</span><span class="o">=</span>Asia/Tokyo
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">popd</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d node-js-sample <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  git clone https://github.com/heroku/node-js-sample.git
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">pushd</span> ~/node-js-sample
</span><span class='line'><span class="k">if</span> ! git remote <span class="p">|</span> grep -q dokku<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  git remote add dokku dokku@10.0.0.2:node-js-sample
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>git push dokku master
</span><span class='line'><span class="nb">popd</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -z <span class="s2">&quot;$(dpkg -l | grep nodejs)&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  sudo sed -i~ -e <span class="s1">&#39;s/us\.archive/jp.archive/&#39;</span> /etc/apt/sources.list
</span><span class='line'>  sudo apt-get update
</span><span class='line'>  sudo apt-get -y install autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm3 libgdbm-dev
</span><span class='line'>  sudo apt-get -y install libpq-dev
</span><span class='line'>  sudo apt-get -y install nodejs
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d ~/.anyenv <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  git clone https://github.com/riywo/anyenv.git ~/.anyenv
</span><span class='line'>  <span class="nb">echo</span> <span class="s1">&#39;export PATH=&quot;$HOME/.anyenv/bin:$PATH&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'>  <span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(anyenv init -)&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -z <span class="s2">&quot;$(command -v anyenv)&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$HOME/.anyenv/bin:$PATH&quot;</span>
</span><span class='line'>  <span class="nb">set</span> +x
</span><span class='line'>  <span class="nb">eval</span> <span class="s2">&quot;$(anyenv init - --no-rehash)&quot;</span>
</span><span class='line'>  <span class="nb">set</span> -x
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -d ~/.anyenv/envs/rbenv <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  anyenv install rbenv
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -z <span class="s2">&quot;$(command -v rbenv)&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">set</span> +x
</span><span class='line'>  <span class="nb">eval</span> <span class="s2">&quot;$(anyenv init - --no-rehash)&quot;</span>
</span><span class='line'>  <span class="nb">set</span> -x
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nv">ruby_version</span><span class="o">=</span><span class="k">$(</span>awk <span class="s1">&#39;/^ruby/{print $2}&#39;</span> ~/ruby-rails-sample/Gemfile <span class="p">|</span> tr -d <span class="s2">&quot;&#39;&quot;</span><span class="k">)</span>
</span><span class='line'><span class="k">if</span> ! rbenv versions <span class="p">|</span> grep -q <span class="s2">&quot;$ruby_version&quot;</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  rbenv install <span class="s2">&quot;$ruby_version&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -f ~/.gemrc <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  cat <span class="s">&lt;&lt;EOF &gt;~/.gemrc</span>
</span><span class='line'><span class="s">install: --no-rdoc --no-ri --format-executable</span>
</span><span class='line'><span class="s">update: --no-rdoc --no-ri --format-executable</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">export </span><span class="nv">RBENV_VERSION</span><span class="o">=</span><span class="s2">&quot;$ruby_version&quot;</span>
</span><span class='line'><span class="k">if</span> ! gem list <span class="p">|</span> grep -q bundler<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  gem install bundler
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">pushd</span> ~/ruby-rails-sample
</span><span class='line'>bundle
</span><span class='line'>cat <span class="s">&lt;&lt;EOF &gt;CHECKS</span>
</span><span class='line'><span class="s">WAIT=10</span>
</span><span class='line'><span class="s">ATTEMPTS=20</span>
</span><span class='line'><span class="s">/ Hello World</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>git add CHECKS
</span><span class='line'>git commit -m <span class="s2">&quot;Add pre-flight checks file&quot;</span> <span class="o">||</span> :
</span><span class='line'>git push dokku master
</span><span class='line'>cat <span class="s">&lt;&lt;EOF &gt;app.json</span>
</span><span class='line'><span class="s">{</span>
</span><span class='line'><span class="s">  &quot;scripts&quot;: {</span>
</span><span class='line'><span class="s">    &quot;dokku&quot;: {</span>
</span><span class='line'><span class="s">      &quot;predeploy&quot;: &quot;bundle exec rake db:migrate&quot;</span>
</span><span class='line'><span class="s">    }</span>
</span><span class='line'><span class="s">  }</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>git add app.json
</span><span class='line'>git commit -m <span class="s2">&quot;Set script.dokku.predeploy to app.json&quot;</span> <span class="o">||</span> :
</span><span class='line'>git push dokku master
</span><span class='line'><span class="nb">popd</span>
</span><span class='line'><span class="nb">pushd</span> ~/node-js-sample
</span><span class='line'>cat <span class="s">&lt;&lt;EOF &gt;CHECKS</span>
</span><span class='line'><span class="s">/ Hello World!</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>git add CHECKS
</span><span class='line'>git commit -m <span class="s2">&quot;Add pre-flight checks file&quot;</span> <span class="o">||</span> :
</span><span class='line'>git push dokku master
</span><span class='line'><span class="nb">popd</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>vagrant を使って dokku をいろいろ試す環境を簡単に作ることができました。
この環境を使ってテストやデバッグなどいろいろ試しやすくなると思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jessie で inspircd を設定した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-03-29-inspircd.html"/>
    <updated>2016-03-29T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/inspircd</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2016-03-22-wheezy-to-jessie.html">先日 wheezy から jessie にあげた</a>マシンでサーバー管理にも使っている ircd として inspircd の設定をしたので、そのメモです。</p>

<!--more-->


<h2>確認バージョン</h2>

<ul>
<li>Debian GNU/Linux 8.3 (jessie)</li>
<li>inspircd 2.0.17-1+deb8u1</li>
</ul>


<h2>インストールと起動確認</h2>

<p><code>sudo aptitude install inspircd</code> でインストールしました。</p>

<p>systemd 管理になって <code>/etc/default/inspircd</code> の <code>INSPIRCD_ENABLED=0</code> に関係なく起動するようになっていました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% systemctl status inspircd
</span><span class='line'>● inspircd.service - IRC server
</span><span class='line'>   Loaded: loaded (/lib/systemd/system/inspircd.service; enabled)
</span><span class='line'>   Active: active (running) since 火 2016-03-29 17:37:37 JST; 3min 34s ago
</span><span class='line'> Main PID: 11613 (inspircd)
</span><span class='line'>   CGroup: /system.slice/inspircd.service
</span><span class='line'>           └─11613 /usr/sbin/inspircd --logfile /var/log/inspircd.log --config /etc/inspircd/insp...
</span><span class='line'>
</span><span class='line'> 3月 29 17:37:37 ns8 inspircd[11613]: Inspire Internet Relay Chat Server, compiled on Mar 23...1:24
</span><span class='line'> 3月 29 17:37:37 ns8 inspircd[11613]: (C) InspIRCd Development Team.
</span><span class='line'> 3月 29 17:37:37 ns8 inspircd[11613]: Developers:
</span><span class='line'> 3月 29 17:37:37 ns8 inspircd[11613]:         Brain, FrostyCoolSlug, w00t, Om, Special, peavey
</span><span class='line'> 3月 29 17:37:37 ns8 inspircd[11613]: aquanight, psychon, dz, danieldg, jackmcbarn
</span><span class='line'> 3月 29 17:37:37 ns8 inspircd[11613]: Attila
</span><span class='line'> 3月 29 17:37:37 ns8 inspircd[11613]: Others:                        See /INFO Output
</span><span class='line'> 3月 29 17:37:37 ns8 inspircd[11613]: Loading core commands........................................
</span><span class='line'> 3月 29 17:37:37 ns8 inspircd[11613]: InspIRCd is now running as 'irc.local'[811] with 1024 ...kets
</span><span class='line'>Hint: Some lines were ellipsized, use -l to show in full.</span></code></pre></td></tr></table></div></figure>


<p><code>systemd-journal</code> グループに所属しているので、ログも出ています。</p>

<h2>設定変更</h2>

<p><code>sudoedit /etc/inspircd/inspircd.conf</code> で設定変更して、 <code>sudo service inspircd reload</code> で反映しました。</p>

<pre><code>&lt;server name="irc.example.org"
        description="Example.org IRC Server"
        network="example.org"&gt;

&lt;admin name="Kazuhiro Nishiyama"
       nick="znz"
       email="zn@mbf.nifty.com"&gt;
</code></pre>

<p>に変更しました。</p>

<p>NAT の中のサーバー群からも接続するので connect の localmax と globalmax を 3 から 9 に変更しました。</p>

<h3>tls 設定</h3>

<p>推奨設定の gnutls を使って設定をしました。
証明書は <a href="https://www.startssl.com/">https://www.startssl.com/</a> で無料で発行してもらったものを使いました。</p>

<pre><code>&lt;bind address="" port="6697" ssl="gnutls"&gt;
&lt;module name="m_ssl_gnutls.so"&gt;
&lt;gnutls cafile="" crlfile="" certfile="/etc/ssl/certs/irc.example.org.2016.crt" keyfile="/etc/ssl/private/irc.example.org.2016.key" dh_bits="1024"&gt;
</code></pre>

<h3>auto join 設定</h3>

<p>slack に似せて <code>#general</code> と <code>#random</code> に自動で join するように</p>

<pre><code>&lt;module name="m_conn_join.so"&gt;
&lt;autojoin channel="#general,#random"&gt;
</code></pre>

<p>を追加しました。</p>

<h3>server password 設定</h3>

<p>connect タグに password 属性を追加しました。</p>

<h3>permchannels 設定</h3>

<p><code>#general</code> と <code>#random</code> はトピックを自動設定、 <code>#servers</code> についてはパスワードを設定するために permchannels 設定を使いました。</p>

<pre><code>&lt;module name="m_permchannels.so"&gt;
&lt;permchannels channel="#general" modes="n" topic="General Talk"&gt;
&lt;permchannels channel="#random" modes="n" topic="Random Talk"&gt;
&lt;permchannels channel="#servers" modes="stnk PASSWORD" topic="Servers Status"&gt;
</code></pre>

<p>を追加しました。</p>

<h2>チャンネル作成制限</h2>

<p>permchannels であらかじめチャンネルを作成しておくことにしたので、 <code>restrictchans</code> でチャンネル作成を完全に禁止することにしました。</p>

<pre><code>&lt;module name="m_restrictchans.so"&gt;
</code></pre>

<h2>ufw</h2>

<pre><code>sudo ufw allow 6697/tcp
</code></pre>

<p>で 6697 番ポートへの接続を許可しました。</p>

<h2>tls 関係ファイル設置</h2>

<p>inspircd は irc ユーザー権限で動くので、そのユーザーが読めるように秘密鍵を設置しました。
<code>/etc/ssl/private</code> ディレクトリを読めるようにするために <code>ssl-cert</code> グループへの追加も行いました。</p>

<pre><code>%  sudoedit /etc/ssl/irc.example.org.2016.csr
%  sudoedit /etc/ssl/certs/irc.example.org.2016.crt
%  sudoedit /etc/ssl/private/irc.example.org.2016.key
%  sudo chmod 640 /etc/ssl/private/irc.example.org.2016.key
%  sudo chgrp irc /etc/ssl/private/irc.example.org.2016.key
%  sudo adduser irc ssl-cert
ユーザ `irc' をグループ `ssl-cert' に追加しています...
ユーザ irc をグループ ssl-cert に追加
完了。
</code></pre>

<h2>DNS 設定</h2>

<p>今まで別のサーバーで動かしていたので、 DNS の A レコードを変更して、変更が反映されるのを待ち、新しいサーバーにクライアントが接続されるのを確認しました。</p>

<h2>まとめ</h2>

<p><code>systemd</code> になって <code>/etc/default/inspircd</code> がきかなくなるなど、 Debian 的にまだ過渡期な部分があるようですが、 inspircd としては問題なく動かすことができました。</p>
]]></content>
  </entry>
  
</feed>
