<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@znz blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-11-04T14:53:57+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[/dev/snd/hwC0D0でPermission deniedになる問題を調べた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-04-dev-snd-hwc0d0-permission-denied.html"/>
    <updated>2013-11-04T14:22:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dev-snd-hwc0d0-permission-denied</id>
    <content type="html"><![CDATA[<p><code>/dev/snd/hwC0D0</code> を <code>O_RDWR</code> で <code>open(2)</code> するところで
<code>Permission denied</code> になるという話
(
<a href="https://twitter.com/takaswie/status/397014733494026240">ツイート</a>、
<a href="https://forums.ubuntulinux.jp/viewtopic.php?pid=100488#p100488">Ubuntu日本語フォーラム</a>
)
が気になったので、調べてみました。</p>

<!--more-->


<h2>結論</h2>

<p>最終的にどうすれば良いか知りたい人向けの情報としては、
<code>setcap cap_sys_rawio=ep filename</code>
でケーパビリティ (capability) を設定する、ということになります。</p>

<p>以下は、その結論にたどり着くまでに調べたことのメモです。</p>

<h2>パーミッションと ACL</h2>

<p><a href="http://blog.n-z.jp/blog/2013-10-27-kansai-debian-meeting.html">第 77 回 関西 Debian 勉強会に参加した</a>
で書いたように、
audio グループに属しているか、コンソールから直接ログインしていれば
パーミッションの問題はないはずです。</p>

<h2>余談: デバイスの sticky bit</h2>

<p><code>crw-rw---T</code> になっていて、
もしかして末尾の sticky bit が影響しているのかと思って調べてみたところ、
<a href="http://lists.debian.org/debian-user/2012/02/msg01273.html">Re: Sticky bit on device files?</a>
によると udev の管理用のフラグとして使われているようでした。
今回の件とは関係なさそうだったので、これ以上深追いはしていません。</p>

<h2>AppArmor</h2>

<p><code>/etc/apparmor.d/abstractions/audio</code> に
<code>/dev/snd/*      rw,</code> とあるので、
念のため
<code>sudo service apparmor stop</code>
で <code>AppArmor</code> を止めて試してみましたが、
変化が無かったので、
<code>sudo service apparmor start</code>
で戻しました。</p>

<h2>カーネルのソースコード探索</h2>

<p><code>strace</code> などで確認しても、
ユーザーランドでは <code>EACCES</code> が返ってくるとしかわからないので、
こうなったらカーネルのソースコードから <code>EACCES</code> を返しているところを
探すしかないということで、
<code>apt-get source linux-image-$(uname -r)</code>
でソースコードをダウンロードして探してみました。</p>

<p><code>grep -r EACCES sound</code> で探してみると
<code>sound/pci/hda/hda_hwdep.c</code> で以下のように
<code>CAP_SYS_RAWIO</code> をみていることがわかりました。</p>

<figure class='code'><figcaption><span>sound/pci/hda/hda_hwdep.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="k">static</span> <span class="kt">int</span> <span class="nf">hda_hwdep_open</span><span class="p">(</span><span class="k">struct</span> <span class="n">snd_hwdep</span> <span class="o">*</span><span class="n">hw</span><span class="p">,</span> <span class="k">struct</span> <span class="n">file</span> <span class="o">*</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'> <span class="err">#</span><span class="n">ifndef</span> <span class="n">CONFIG_SND_DEBUG_VERBOSE</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">capable</span><span class="p">(</span><span class="n">CAP_SYS_RAWIO</span><span class="p">))</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="n">EACCES</span><span class="p">;</span>
</span><span class='line'> <span class="err">#</span><span class="n">endif</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Linux のケーパビリティ (capability)</h2>

<p><a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man7/capabilities.7.html">Man page of CAPABILITIES</a>
が関係しているということがわかったところで、
設定方法も調べてみると、
<code>setcap</code> で設定できるとわかったので、
以下のような簡単なテストプログラムを用意して、
<code>sudo setcap cap_sys_rawio=ep ./a.out</code>
でケーパビリティを設定すると
<code>open(2)</code>
に成功するのを確認できました。
<code>cap_sys_rawio=ep</code> は危険そうなので、
テストプログラムとはいえ、
任意のパスを受け取れるようにするのは止めた方が良さそうに思いました。</p>

<figure class='code'><figcaption><span>open-hwC0D0.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">sys</span><span class="o">/</span><span class="n">types</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'> <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">sys</span><span class="o">/</span><span class="n">stat</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'> <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">fcntl</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'> <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">open</span><span class="p">(</span><span class="s">&quot;/dev/snd/hwC0D0&quot;</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span>
</span><span class='line'>  <span class="n">perror</span><span class="p">(</span><span class="s">&quot;open&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Land of Lisp 読書会 第3回(兵庫県)に参加してきた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-02-reading-land-of-lisp-3.html"/>
    <updated>2013-11-02T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/reading-land-of-lisp-3</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/main/tag/amagasakirb">amagasakirb</a>
の
<a href="http://kokucheese.com/event/index/105390/">11月2日 Ｌａｎｄ　ｏｆ　Ｌｉｓｐ 読書会　第3回(兵庫県)</a>
に参加してきました。
今回は第III部でした。</p>

<p>次回は会場の予約が取れなかったということで、12月は無くて、
1月第2週以降の予定で第一候補は 2014年1月11日ということでした。</p>

<!--more-->


<p>今回は他のイベントとも日程が重なっていたらしく、
それが原因かどうかはわかりませんが、
Lisper の人がいなかったので、
Lisp についての疑問は割と解決出来ない感じで進みました。
そういうこともあってか、結構雑談とか Ruby の話が多かったです。</p>

<p>以下はメモです。</p>

<ul>
<li>p.188 の挿絵の意味がよくわからない?</li>
<li><code>loop</code> の <code>for</code> が複数あるときに同時に動く (Ruby の <code>Array#zip</code> のように) のが気持ち悪い

<ul>
<li>別々に動くのは <code>loop</code> のネストで代用できるからこういう仕様なのでは。</li>
</ul>
</li>
<li>網膜に焼き付ける話から Google Glass の話</li>
<li><code>(setf アクセサ 値)</code> というのが気持ち悪いという話

<ul>
<li>p.197 の <code>(setf (gethash ...) t)</code> とか</li>
<li>左辺値と右辺値の見た目が同じ言語は多い</li>
<li>シェルスクリプトは x=値 と $x で違う</li>
</ul>
</li>
<li>話には出しませんでしたが <code>*plants*</code> の値は <code>t</code> の代わりに <code>plant-energy</code> にするのもありかもと思いました。</li>
<li>変数名とかの名前の付け方がよくわからない。

<ul>
<li>p.202 <code>xnu</code> とか。</li>
</ul>
</li>
<li>ジャングルは add-plants で必ず植物が発生するので
植物が発生する確率が高い領域というだけで
最初から植物がたくさんあるわけではない。</li>
<li>loop はミニ言語

<ul>
<li>Perl の正規表現</li>
<li>Python のリスト内包表記</li>
<li>scala のリスト内包表記</li>
</ul>
</li>
<li>独自言語の話

<ul>
<li><code>printf</code> の書式文字列</li>
<li>C++ のマニピュレータは難しすぎるという話</li>
<li>Ruby の <code>#{}</code> は独自言語というほどのものではない</li>
<li>pack / unpack のテンプレート (これも Perl 由来なので、 Ruby 独自ではない)</li>
</ul>
</li>
<li>p.216 チルド文字

<ul>
<li>tilde なので変というわけではないがチルダの方がよく見かける</li>
<li>チルドの方が元の英語の発音に近い?</li>
</ul>
</li>
<li><code>@</code> は <code>printf</code> の <code>%-10d</code> のような <code>-</code> とフラグの有無での左右が逆</li>
<li>Ruby で

<ul>
<li><code>%d</code> とか <code>%f</code> 以外はあまり使わない?</li>
<li>ljust とか rjust とかあるから <code>%s</code> と数字の組み合わせはあまり使わない?</li>
<li><code>"%7.2f"</code> は他の方法では難しそう</li>
</ul>
</li>
<li><code>'</code> の必要性の話

<ul>
<li><code>'a</code> とかを指定出来るようにするため?</li>
<li><code>'</code> で埋めたい場合は <code>''</code> とか</li>
</ul>
</li>
<li><code>format</code> の方が <code>loop</code> にあった周期表のような表が欲しい</li>
<li><code>printf</code> の書式指定文字列に別の文字で埋める指定はできるか?

<ul>
<li>ljust や rjust ならできる (例: <code>"hoge".rjust(10, "!")</code>)</li>
<li><code>printf</code> は不明 (できなさそう?)</li>
<li><code>%{}d</code> とか <code>%()</code> とかの話</li>
</ul>
</li>
<li><code>~$</code> は日本円だとあまり使わなさそう

<ul>
<li>アメリカはクオーターとかダイムとか (日本人には) わかりにくい</li>
</ul>
</li>
<li><code>(fresh-line)</code> が便利なときの例は?

<ul>
<li>Ruby は <code>puts</code> が便利だから <code>fresh-line</code> のような機能の必要性が低い?</li>
</ul>
</li>
<li>p.222 <code>~t</code> 相当は Ruby にはなさそう

<ul>
<li>pack テンプレートなら <code>@</code> で似たことはできそう</li>
</ul>
</li>
<li>pack テンプレートの代わりに C の構造体をパースするものがあればわかりやすい?</li>
<li>「33文字分出力したら改行してくれ」の 33 とか数えたくない</li>
<li>p.228 のゲームは実際に実行しても <code>-</code> の繰り返しの上下の枠線の行はない</li>
<li>名前がよくない?

<ul>
<li>prin1 とか</li>
</ul>
</li>
<li>他の言語でも printf, strstr, stdio</li>
<li>cout の読み方とか</li>
<li>13.5章は表紙ページがない</li>
<li>p.233 挿絵はストリームが邪悪な感じというのを表している?</li>
<li>p.239 「残念ながら、ソケットの標準化は ANSI Common Lisp の仕様化に間に合わなかったので、ソケットを扱う標準の方法というのはない。」

<ul>
<li><a href="http://ja.wikipedia.org/wiki/Common_Lisp">Common Lisp &ndash; Wikipedia</a> によると「1984年、1994年にANSIにより標準化」</li>
</ul>
</li>
<li>p.248 REPL にエラープロンプトを表示するのは REPL から実行した時だけ</li>
<li>repl に戻る話から Ruby の話

<ul>
<li><code>better_errors</code></li>
<li><code>binding_of_caller</code></li>
<li><code>ppp</code></li>
</ul>
</li>
<li>Web 関連の雑談

<ul>
<li>Active Scaffold が IE10 で変?</li>
<li>CoffeeScript</li>
<li>ClojureScript</li>
<li>ブラウザで Ruby</li>
<li>ActiveScriptRuby</li>
<li>NougakuDo</li>
<li>Google の bot は JavaScript や CSS も解釈する</li>
</ul>
</li>
<li>p.250 q値</li>
<li>car cadr caddr cdddr nth nthcdr</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MavericksでEmacs.appが起動時にホームディレクトリにならない]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-01-emacs-on-mavericks.html"/>
    <updated>2013-11-01T18:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/emacs-on-mavericks</id>
    <content type="html"><![CDATA[<p>Mac OS X を Mavericks にあげたら homebrew で入れた
Emacs.app を起動した時に <code>default-directory</code>
がホームディレクトリから <code>/</code> に変わってしまっていたので、
原因を調べてみました。</p>

<!--more-->


<h2>調べたきっかけ</h2>

<p>きっかけは
<a href="http://qiita.com/ksato9700/items/1ec373895b9693529f82">Mavericksにアップデートして遭遇した不具合　まとめ</a>
を見て自分の環境だけで起きている現象ではないと知ったからです。</p>

<h2>原因</h2>

<p>Emacs のソースの以下の部分で <code>-psn</code> で始まる引数の有無で
ホームディレクトリに移動するかどうかを判定しているのに、
Mavericks だと引数なしで起動されるようになったからのようです。</p>

<figure class='code'><figcaption><span>emacs-24.3/src/emacs.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="err">#</span><span class="n">ifdef</span> <span class="n">HAVE_NS</span>
</span><span class='line'>   <span class="n">ns_pool</span> <span class="o">=</span> <span class="n">ns_alloc_autorelease_pool</span> <span class="p">();</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">noninteractive</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'> <span class="err">#</span><span class="n">ifdef</span> <span class="n">NS_IMPL_COCOA</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span><span class="n">skip_args</span> <span class="o">&lt;</span> <span class="n">argc</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* FIXME: Do the right thing if getenv returns NULL, or if</span>
</span><span class='line'><span class="cm">          chdir fails.  */</span>
</span><span class='line'>           <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strncmp</span> <span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">skip_args</span><span class="p">],</span> <span class="s">&quot;-psn&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
</span><span class='line'>             <span class="p">{</span>
</span><span class='line'>               <span class="n">skip_args</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>               <span class="n">chdir</span> <span class="p">(</span><span class="n">getenv</span> <span class="p">(</span><span class="s">&quot;HOME&quot;</span><span class="p">));</span>
</span><span class='line'>             <span class="p">}</span>
</span><span class='line'>           <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">skip_args</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">argc</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">strncmp</span> <span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">skip_args</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="s">&quot;-psn&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
</span><span class='line'>             <span class="p">{</span>
</span><span class='line'>               <span class="n">skip_args</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>               <span class="n">chdir</span> <span class="p">(</span><span class="n">getenv</span> <span class="p">(</span><span class="s">&quot;HOME&quot;</span><span class="p">));</span>
</span><span class='line'>             <span class="p">}</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'> <span class="err">#</span><span class="n">endif</span>  <span class="cm">/* COCOA */</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'> <span class="err">#</span><span class="n">endif</span> <span class="cm">/* HAVE_NS */</span>
</span></code></pre></td></tr></table></div></figure>


<h2>状況</h2>

<p>ちなみに Mac OS X 10.8.5 では、たとえば
<code>/usr/local/Cellar/emacs/24.3/Emacs.app/Contents/MacOS/Emacs -psn_0_29637698</code>
のように起動されていました。</p>

<p>Qiita の記事では Dock から起動した時のことを書いていますが、
<code>open -a Emacs.app</code> のように起動しても同じでした。</p>

<p>RubyMotion で最小限のカレントディレクトリを表示するだけのアプリを作って試してみたところ、
起動時にカレントディレクトリが <code>/</code> になっているのは
Cocoa アプリでは普通の動作のようでした。</p>

<h2>対応状況</h2>

<p><a href="http://osdir.com/ml/general/2013-10/msg61593.html">ML での情報</a>
によると trunk には対応がチェックインされているということで、
調べてみると
revision 114730 <!-- http://bzr.savannah.gnu.org/lh/emacs/trunk/revision/114730 -->
と
revision 114882 <!-- http://bzr.savannah.gnu.org/lh/emacs/trunk/revision/114882 -->
のパッチをあわせて以下のように対応すれば良さそうに見えました。</p>

<figure class='code'><figcaption><span>emacs.c.diff</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">--- src/emacs.c.orig    2013-02-06 13:33:36.000000000 +0900</span>
</span><span class='line'><span class="gi">+++ src/emacs.c  2013-11-02 22:38:45.000000000 +0900</span>
</span><span class='line'><span class="gu">@@ -1158,10 +1158,13 @@</span>
</span><span class='line'>   if (!noninteractive)
</span><span class='line'>     {
</span><span class='line'> #ifdef NS_IMPL_COCOA
</span><span class='line'><span class="gi">+      /* Started from GUI? */</span>
</span><span class='line'><span class="gi">+      /* FIXME: Do the right thing if getenv returns NULL, or if</span>
</span><span class='line'><span class="gi">+         chdir fails.  */</span>
</span><span class='line'><span class="gi">+      if (! inhibit_window_system &amp;&amp; ! isatty (0))</span>
</span><span class='line'><span class="gi">+        chdir (getenv (&quot;HOME&quot;));</span>
</span><span class='line'>       if (skip_args &lt; argc)
</span><span class='line'>         {
</span><span class='line'><span class="gd">-      /* FIXME: Do the right thing if getenv returns NULL, or if</span>
</span><span class='line'><span class="gd">-         chdir fails.  */</span>
</span><span class='line'>           if (!strncmp (argv[skip_args], &quot;-psn&quot;, 4))
</span><span class='line'>             {
</span><span class='line'>               skip_args += 1;
</span></code></pre></td></tr></table></div></figure>


<p>というわけで homebrew の方に
<a href="https://github.com/mxcl/homebrew/pull/23897">fix default-directory on Cocoa and Mavericks</a>
として pull request を出してみました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LC_COLLATEの問題でuniqで丸数字が同一視されてしまう]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-31-lc-collate-uniq.html"/>
    <updated>2013-10-31T23:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lc-collate-uniq</id>
    <content type="html"><![CDATA[<p><code>uniq -c</code> で重複がないのを確認しようとしたら、
丸数字のところだけ違う行が同一視されてしまって、
2以上になることがあって困ったので、
原因を調べてみました。</p>

<!--more-->


<h2>現象</h2>

<p>以下のように丸数字などが同一視されています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat n.txt
</span><span class='line'>①
</span><span class='line'>②
</span><span class='line'>$ uniq n.txt
</span><span class='line'>①
</span><span class='line'>$ sort n.txt
</span><span class='line'>①
</span><span class='line'>②
</span><span class='line'>$ tac n.txt | sort
</span><span class='line'>②
</span><span class='line'>①
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat n.txt
</span><span class='line'>①
</span><span class='line'>②
</span><span class='line'>$ LANG=ja_JP.utf8 uniq -c n.txt
</span><span class='line'>      2 ①
</span><span class='line'>$ LANG=C uniq -c n.txt
</span><span class='line'>      1 ①
</span><span class='line'>      1 ②
</span><span class='line'>$ uniq --version
</span><span class='line'>uniq (GNU coreutils) 8.20
</span><span class='line'>Copyright (C) 2012 Free Software Foundation, Inc.
</span><span class='line'>ライセンス GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
</span><span class='line'>This is free software: you are free to change and redistribute it.
</span><span class='line'>There is NO WARRANTY, to the extent permitted by law.
</span><span class='line'>
</span><span class='line'>作者 Richard M. Stallman および David MacKenzie。
</span><span class='line'>$ lsb_release -a
</span><span class='line'>No LSB modules are available.
</span><span class='line'>Distributor ID: Ubuntu
</span><span class='line'>Description:    Ubuntu 13.04
</span><span class='line'>Release:        13.04
</span><span class='line'>Codename:       raring
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<h2>調査</h2>

<p><code>apt-get source locales</code>
でソースをとってきて調べてみると
<code>locales/ja_JP</code> の <code>LC_COLLATE</code> から <code>END LC_COLLATE</code>
の間に書いていないコードポイントは同一視されているように見えました。</p>

<p>これは glibc の問題だと思って、既に報告されているかどうか調べてみると
<a href="https://sourceware.org/bugzilla/show_bug.cgi?id=13063">Bug 13063 – &lsquo;sort -u&rsquo; will erase some Chinese characters</a>
に同じような話がありました。</p>

<h2>ML で聞いてみた</h2>

<p><a href="http://listserv.linux.or.jp/pipermail/linux-users/2013-October/000527.html">linux-users: 108951</a>
で質問してみたところ、
<a href="http://listserv.linux.or.jp/pipermail/linux-users/2013-October/000528.html">linux-users: 108952</a>
で返信があり、
<code>LC_COLLATE</code>
をちゃんと定義して解決するか、
単純にバイト順でソートしたいだけなら
<code>LC_COLLATE=C</code> で良いという話でした。</p>

<h2>結論</h2>

<p>結局今回の目的はソートではなく重複検査だったので、
<code>LC_COLLATE=C</code> で解決ということになりました。</p>

<p>誰か興味のある人は真面目に
<code>LC_COLLATE</code>
の定義に挑戦してみると良いのではないでしょうか。</p>

<p>それとは別に定義されていない文字を同一視せずにバイト順でも何でもいいので、
適当に別の文字として扱ってくれるようになればいいのに、
とは思いました。
誰かそういう方向での対応も挑戦してみると
他の言語も含めて幸せになれるのではないかと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rbenvのプラグインを簡単に追加出来るようにするrbenv-plugを作った]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-29-rbenv-plug.html"/>
    <updated>2013-10-29T23:55:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rbenv-plug</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sstephenson/rbenv">rbenv</a> のプラグインをインストールするのに
<code>git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build</code>
のように <code>ruby-build</code> を二回指定しないといけなかったり、
git の URL をコピペしないといけなかったりして面倒なので、
簡単にインストールできるようにするプラグイン
<a href="https://github.com/znz/rbenv-plug">rbenv-plug</a>
を作りました。</p>

<p><a href="https://github.com/sstephenson/ruby-build">ruby-build</a>
のように <code>share</code> の下に一覧を持つようにしたので、
インストールできるプラグインは簡単に増やせます。</p>

<!--more-->


<h2>使い方</h2>

<p><a href="https://github.com/znz/rbenv-plug">README</a> に書いた通りです。</p>

<p><a href="https://github.com/sstephenson/rbenv/wiki/Plugins">plugins</a>
に載っているプラグインなら以下のように簡単にインストールできます。</p>

<pre><code>rbenv plug &lt;plugin-name&gt;
</code></pre>

<p>例えば
<a href="https://github.com/sstephenson/ruby-build">ruby-build</a>
をインストールするなら以下のようになります。</p>

<pre><code>rbenv plug ruby-build
</code></pre>

<p>例えば
<a href="https://github.com/rkh/rbenv-update">rbenv-update</a>
をインストールするなら、</p>

<pre><code>rbenv plug rbenv-update
</code></pre>

<p>のようにするか、
<code>rbenv-</code>
を省略して以下のようにします。</p>

<pre><code>rbenv plug update
</code></pre>

<p>git の URL を指定して任意のプラグインをインストールすることもできます。</p>

<pre><code>rbenv plug https://github.com/sstephenson/ruby-build.git
</code></pre>

<p>アンインストールも簡単にできます。
例えば
<code>rbenv-update</code>
をアンインストールするなら、</p>

<pre><code>rbenv unplug rbenv-update
</code></pre>

<p>のようにするか、
<code>rbenv-</code>
を省略して以下のようにします。</p>

<pre><code>rbenv unplug update
</code></pre>

<h2>インストール方法</h2>

<p>以下のようにプラグインの一般的なインストール方法そのままで、
<code>$RBENV_ROOT/plugins</code> に <code>git clone</code> するだけです。</p>

<pre><code>mkdir -p ~/.rbenv/plugins
git clone https://github.com/znz/rbenv-plug.git ~/.rbenv/plugins/rbenv-plug
</code></pre>

<h2>仕組み</h2>

<p>URL が指定された時は上の一般的なインストール方法と同様のことを実行するだけです。</p>

<p>プラグイン名を指定された時は
<code>share/rbenv-plug</code>
の中のスクリプトを実行します。</p>

<p>名前が <code>rbenv-</code> で始まるプラグインがほとんどなので、
<code>rbenv plug</code> や <code>rbenv unplug</code> の引数では
<code>rbenv-</code> を省略できるようにしました。</p>

<p><code>share/rbenv-plug</code> のスクリプトで
<a href="https://github.com/tpope/rbenv-aliases">rbenv-aliases</a>
なら <code>rbenv alias --auto</code> を追加で実行したり、
<a href="https://github.com/rkh/rbenv-use">rbenv-use</a>
なら依存している <code>rbenv-whatis</code> もインストールしたりしています。</p>

<h2>余談</h2>

<p><code>share/rbenv-plug</code> のファイルを追加している時に
<a href="https://github.com/taqtiqa/rbenv-plugin">rbenv-plugin</a>
というのがあって、
今の <code>rbenv-plug</code> (と <code>rbenv-unplug</code>) という名前に変えました。
最初は <code>rbenv-plugin-install</code> (と <code>rbenv-plugin-uninstall</code>)
という名前で作りかけていたので、
<code>rbenv-plugin</code> のサブコマンドと思いっきり名前がかぶっていました。
<code>rbenv-plugins-install</code> という複数形の名前も使われてしまっていたので、
思い切って短い名前に変更しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 77 回 関西 Debian 勉強会に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-27-kansai-debian-meeting.html"/>
    <updated>2013-10-27T13:46:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20131027">第 77 回 関西 Debian 勉強会</a>
に参加してきました。</p>

<p>前回の「Linuxとサウンドシステム」
の続きの
「ALSAのユーザーランド解説」
と
「git-buildpackage 入門 again」
という話でした。</p>

<!--more-->


<h2>Intro</h2>

<p><code>jessie</code> に向けての話で、
デフォルトの <code>init</code> が <code>systemd</code> に変わるかも、
というのが気になりました。
他に UTF-8 といえば UTF-8 に対応していない namazu のようなものが
どうなるのかというのもちょっと気になりました。</p>

<p>事前課題では、
前回の時に発表者の坂本さんに
VirtualBox の中の wheezy で音が出ない原因を調べてもらって、
<code>alsamixer</code> でボリュームが 0 になっていたから、
というのを直してもらっていたので、
すんなり音を出すことができました。</p>

<p>佐々木さんは警告のフラグ (<code>-Wall -Wextra</code>) を増やしてビルドしていて、
その警告メッセージを事前課題のところに書いていました。</p>

<p>警告の一部は <code>if</code> 文の処理内容が <code>;</code> だけで <code>{}</code> でくくった方が良いという警告だったのですが、
何もしないままよりも、
後ろにコメントで書いてあるメッセージを <code>puts</code> などで出力するようにした方が良いのではないかと思いました。</p>

<h2>ALSA のユーザーランド解説</h2>

<p>事前課題の添付ファイルの <code>pcm_minimal.c</code> の <code>device</code> のところにある
PCM ノードの指定は <code>default</code> 以外にも
<code>aplay -L</code> (または <code>arecord -L</code>) で表示されるものが指定できるという話がありました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* playback PCM node */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">char</span> <span class="o">*</span><span class="n">device</span> <span class="o">=</span> <span class="s">&quot;default&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>dmix</code>, <code>dsnoop</code>, <code>hw</code>, <code>plughw</code> はデフォルトでは隠されていて、
<code>~/.asoundrc</code> で以下のように設定をオーバーライドすれば <code>aplay -L</code> などで
出てくるようになるという話がありました。
(ALSA の上流や Debian では出ないのがデフォルトで、
Ubuntu ではパッチが当たっていて、
標準で出てくるようになっているという話もありました。)</p>

<figure class='code'><figcaption><span>~/.asoundrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>defaults.namehint.extended on
</span></code></pre></td></tr></table></div></figure>


<p>その前に asound の設定ファイルは独自形式で、
書式の説明は <code>libasound2-doc</code> パッケージの
<code>/usr/share/doc/libasound2-doc/html/</code>
以下にあるという話もありました。
独自形式のため、ライブラリとして設定ファイルを読み込む部分も持っているそうです。</p>

<p>PulseAudio 関係のパッケージを入れた時に
default が dmix/dsnoop から pulse に変わって、
PulseAudio のデーモンはログイン時に起動するという話もありました。</p>

<p>Android ではユーザーランドは asound ではなく tinyalsa で
カーネルランドは ASoC という話もありました。</p>

<h2>git-buildpackage 入門 again</h2>

<p>実際に <code>git-buildpackage</code> を使ってみるという内容でした。
最初にモバイルルーターなどを使ってみんなネットにつながるようにしてから始まりました。</p>

<p>事前課題で候補にあがったものを実際に <code>git-buildpackage</code> でビルドしてみるという話が続きました。
最後は時間切れで次回予告などは片付けをしながらになってしまいました。</p>

<p>最新の <code>git-buildpackage</code> だと <code>git</code> と同じように <code>gbp</code> コマンドとそのサブコマンドになっていて、
<code>wheezy</code> だと <code>gbp-clone</code> などの <code>-</code> 付きのコマンドを実行する必要がありました。</p>

<p><code>git-dch</code> という <code>git</code> のコミットログから <code>debian/changelog</code> を生成するツールではコミットログの1行目だけとってくるのがデフォルトの動作で、
<code>--full</code> というオプションでコミットログ全体を使えるとか、
man page の <code>META TAGS</code> にあるような情報を入れられるとか、
そういう話もしていました。</p>

<p><code>gbp clone</code> と <code>git clone</code> の違いは、
gbp 用の設定 (<code>debian/gbp.conf</code> とか) を見るとか、
upstream ブランチとかの設定をしてくれるということでした。</p>

<p><code>pbuilder</code> を使っていても前処理の <code>fakeroot debian/rules clean</code> が <code>pbuilder</code> の外で動いて、
そこで依存パッケージが必要なことがあるので <code>git-buildpackage</code> の前に
<code>build-dep</code> でビルドに必要なパッケージを入れる必要があるという話がありました。</p>

<h2>/dev/snd の ACL</h2>

<p>Debian 勉強会ということでホスト OS は Mac OS X なのですが、
サウンド関連や git-buildpackage は
VirtualBox の中の wheezy で試していました。</p>

<p>そのときに <code>ls -al /dev/snd</code> でサウンド関連のデバイスファイルに
<code>+</code> がついていて ACL がついているということに気がついて、
どこで設定されているのか気になったので帰ってから調べてみました。</p>

<figure class='code'><figcaption><span>~/.asoundrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ ls -al /dev/snd
</span><span class='line'>合計 0
</span><span class='line'>drwxr-xr-x   3 root root      180 10月 27 22:44 .
</span><span class='line'>drwxr-xr-x  13 root root     3180 10月 27 22:44 ..
</span><span class='line'>drwxr-xr-x   2 root root       60 10月 27 22:44 by-path
</span><span class='line'>crw-rw---T+  1 root audio 116,  5 10月 27 22:44 controlC0
</span><span class='line'>crw-rw---T+  1 root audio 116,  4 10月 27 22:44 pcmC0D0c
</span><span class='line'>crw-rw---T+  1 root audio 116,  3 10月 27 22:44 pcmC0D0p
</span><span class='line'>crw-rw---T+  1 root audio 116,  2 10月 27 22:44 pcmC0D1c
</span><span class='line'>crw-rw---T+  1 root audio 116,  1 10月 27 22:44 seq
</span><span class='line'>crw-rw---T+  1 root audio 116, 33 10月 27 22:44 timer
</span><span class='line'>$ getfacl /dev/snd/seq
</span><span class='line'>getfacl: Removing leading &#39;/&#39; from absolute path names
</span><span class='line'># file: dev/snd/seq
</span><span class='line'># owner: root
</span><span class='line'># group: audio
</span><span class='line'># flags: --t
</span><span class='line'>user::rw-
</span><span class='line'>user:admin0:rw-
</span><span class='line'>group::rw-
</span><span class='line'>mask::rw-
</span><span class='line'>other::---
</span></code></pre></td></tr></table></div></figure>


<p>まず、 <code>grep -r snd /lib/udev/rules.d</code> でデバイスを作成している場所を
探してみましたが、 <code>audio</code> グループに設定している箇所しか見つかりませんでした。</p>

<figure class='code'><figcaption><span>/lib/udev/rules.d/91-permissions.rules</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># sound devices
</span><span class='line'>SUBSYSTEM==&quot;sound&quot;,                             GROUP=&quot;audio&quot;,
</span><span class='line'>        OPTIONS+=&quot;static_node=snd/seq&quot;, OPTIONS+=&quot;static_node=snd/timer&quot;
</span></code></pre></td></tr></table></div></figure>


<p>次に、ログインしているユーザーの ACL が追加されているということで、
PAM が関係しているだろうという見当をつけて、
<code>/etc/pam.d</code> を確認してみたところ、
<code>common-session</code> の <code>pam_ck_connector</code> が関係してそうだと気付きました。</p>

<figure class='code'><figcaption><span>/etc/pam.d/common-session</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>session  optional            pam_ck_connector.so nox11
</span></code></pre></td></tr></table></div></figure>


<p>そこで <code>dpkg -L consolekit</code> などで <code>ConsoleKit</code> 関連のファイルをみていくと
<code>/usr/lib/ConsoleKit/run-seat.d/udev-acl.ck -&gt; /lib/udev/udev-acl</code>
が関係してそうだと気がついたので、
もう一度 udev のルールを確認してみると <code>70-udev-acl.rules</code> で
<code>udev-acl</code> というタグを設定していました。</p>

<figure class='code'><figcaption><span>/lib/udev/rules.d/70-udev-acl.rules</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># sound devices
</span><span class='line'>SUBSYSTEM==&quot;sound&quot;, TAG+=&quot;udev-acl&quot;
</span></code></pre></td></tr></table></div></figure>


<p><code>70-udev-acl.rules</code> をみたり <code>udev-acl</code> のソースをみると <code>ACL</code> を設定しているのは
<code>udev-acl</code> で間違いなさそうでした。
ただし、 <code>70-udev-acl.rules</code> で
<code># systemd replaces udev-acl entirely, skip if active</code>
と書いてあったので、 <code>systemd</code> を使っている環境だと
<code>udev-acl</code> は何もしないようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第8回 関西Emacs勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-26-kansai-emacs.html"/>
    <updated>2013-10-26T14:19:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-emacs</id>
    <content type="html"><![CDATA[<p><a href="http://atnd.org/events/44155">(kansai-emacs #x08) #関西Emacs : ATND</a>
というイベントに参加してきました。</p>

<!--more-->


<h2>ポジションペーパー</h2>

<p>以前作りかけで一部は
<a href="http://regional.rubykaigi.org/kansai05">関西Ruby会議05</a>
の時に使った rabbit での自己紹介のスライドに
Emacs 関係の情報を追加して作った PDF だったので、
1ページにできずに複数ページになってしまいました。</p>

<p>会場への移動中に作成したのですが、
作成前に既にアップロードされているものを確認したら
複数ページのものがあるので、
まあいいかと思ったのも理由でした。</p>

<h2>会場到着から開始まで</h2>

<p>到着時点では知っている人がいなくて、
どうすればいいのかよくわからなかったので、
入り口近くで座って twitter とか見ながら待っていました。
13時を少しすぎたところで準備ができたらしく案内があったので、
席に移動しました。</p>

<h2>発表</h2>

<p><code>package-install</code> だと
環境を作り直した時に magit とかがバージョンアップで挙動が変わって
困ることがあるのでどうするのが良いのかという相談とか、
<code>ac-mozc</code> の紹介とか、ちゃんとメモをとっていなかったのですが、
いろいろありました。</p>

<p><code>ac-mozc</code> の質疑応答では</p>

<ul>
<li>英単語に続けて日本語を入力する時はスペースを入れて入力して、確定するとスペースが消える、スペースが必要な時はその直後に undo すればいい</li>
<li>英単語を入力していてローマ字ともみなせて不要なのに ac-mozc の候補が出てきたときは ac のキャンセルと同じように C-g で消せばいい</li>
<li>コメントの中とか文字列の中とかで一部だけ変換したい時とかは変換用のコマンドを直接呼び出せばいい</li>
</ul>


<p>のような話があったと記憶しています。</p>

<h2>やっていたこと</h2>

<h3>package.el</h3>

<p><a href="http://emacs-jp.github.io/packages/package-management/package-el.html">package.el &ndash; Emacs JP</a>
を参考にして <code>package.el</code> を使う設定をしました。</p>

<h3>shell-pop</h3>

<p>上のメモには書いていませんが、発表にあった <code>shell-pop</code> を
<code>package.el</code> を使って入れてみました。
昔ちょっと試したことがあって、その設定が悪さをしていて、
最初は
<code>(void-function shell-pop-set-internal-mode)</code>
というエラーになってしまっていましたが、
古い設定を削除すれば直りました。</p>

<p><a href="http://www.emacswiki.org/emacs/ShellPop">EmacsWiki の Shell Pop</a>
には上の方に小さく書いてあるだけですが、
github の方が新しくて互換性がなくなっているのが理由でした。</p>

<h3>ansi-term</h3>

<p><code>shell-pop</code> の設定例にある <code>ansi-term</code> を使ってみると
最下行で文字を入力すると一瞬上にスクロールして戻るという現象が出て、
<code>ansi-term</code> 単体でもおきたので、
<code>ansi-term</code> の問題かと思ってクリーンな環境でも試してみると発生しませんでした。</p>

<p>scroll 関係の設定があやしいと思って、
<code>scroll-margin</code> を <code>2</code> にしていたのを <code>0</code> にしたらなおったのですが、
クリーンな環境で <code>scroll-margin</code> だけ変更しても現象が出なかったので、
結局何が再現条件なのかはわかりませんでした。
<code>scroll-step</code> を <code>1</code> にしているのも関係しているかと思ったのですが、
関係ありませんでした。</p>

<h3>elscreen</h3>

<p><code>auto-install</code> でインストールしていた <code>elscreen.el</code> を
<code>package.el</code> でインストールしたものに変更しました。</p>

<p><code>(elscreen-start)</code> が必要になっているというのを知らなかったので、
うまく動かなくてかなり悩んでいましたが、教えてもらって解決しました。</p>

<h3>anything.el から helm への変更</h3>

<p><code>anything.el</code> は一時期はいろいろ設定を頑張っていたのですが、
結局デフォルトの <code>anything</code> 以外はほとんど使っていなかったので、
<code>helm-mini</code> に置き換えるだけで問題なさそうな感じでした。</p>

<p><code>anything.el</code> だとメニューに登録されていたり
<code>(anything-execute-anything-command)</code> とか
<code>(anything-call-source)</code> のようなメタ機能があったりして、
存在を知らない機能でも探しやすいのですが、
<code>helm</code> にはそういうものがあるのかどうかわかりませんでした。</p>

<p>ちなみに <code>M-x</code> で <code>helm-</code> で始まる <code>interactive</code> な関数を探すのは
<code>helm</code> 関係のバッファでのキーバインドようの関数が混ざっているので
この用途には使えません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X で ansible を入れてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-25-ansible.html"/>
    <updated>2013-10-25T13:45:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible</id>
    <content type="html"><![CDATA[<p>Mac OS X 10.8.5 でシステム側の python は使わずに pyenv を使って ansible を入れてみました。</p>

<!--more-->


<h2>参考サイト</h2>

<ul>
<li><a href="http://qiita.com/ryurock/items/c4065da9f16c1f6248b7">Ansible &ndash; OSXでpyenvインストールメモ</a></li>
<li><a href="http://qiita.com/yamasaki-masahide/items/0546b2b7770150394159">ansible pyenvを使った環境に依存しないインストール</a></li>
<li><a href="http://ansibleworks.com/docs/intro_installation.html">Installation | AnsibleWorks</a></li>
</ul>


<h2>必要なもの</h2>

<ul>
<li>homebrew</li>
</ul>


<h2>pyenv</h2>

<p>参考サイトと同じように homebrew で pyenv をインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew update
</span><span class='line'>brew install pyenv</span></code></pre></td></tr></table></div></figure>


<p><a href="http://mobileapplication.blog.fc2.com/blog-entry-21.html">(旧) 猫好きモバイルアプリケーション開発者記録 rbenv init が重い問題に対する対処法</a>
という話をみてから <code>init</code> の時には <code>rehash</code> しないようにしていたので、
<code>--no-rehash</code> というオプションを付けています。</p>

<figure class='code'><figcaption><span>https://github.com/znz/dot-shell/blob/master/profile.d/50pyenv.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if </span><span class="nb">type </span>pyenv &gt;/dev/null 2&gt;&amp;1; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">eval</span> <span class="s2">&quot;$(pyenv init - --no-rehash)&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>exec zsh</code> でシェルを再起動するなり、設定ファイルをドットコマンドや <code>source</code> コマンドで読み直すなり、
<code>eval "$(pyenv init -)"</code>
を直接実行するなりして設定を反映させます。</p>

<h2>pyenv でインストール</h2>

<p><a href="http://qiita.com/yamasaki-masahide/items/0546b2b7770150394159">ansible pyenvを使った環境に依存しないインストール</a>
で 2.7.5 を入れていたので、
<code>pyenv install [TAB]</code>
で補完候補をみて、
2.7 系の最新が 2.7.5 のままなのを確認してインストールしました。
この後で必要になる <code>pip</code> は <code>pyenv</code> が自動でインストールしてくれていました。</p>

<figure class='code'><figcaption><span>https://github.com/znz/dot-shell/blob/master/profile.d/50pyenv.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pyenv install 2.7.5
</span><span class='line'>pyenv rehash
</span><span class='line'>pyenv global 2.7.5
</span></code></pre></td></tr></table></div></figure>


<h2>pip でライブラリをインストール (不要?)</h2>

<p>必要なライブラリをインストールしましたが、
この手順は不要そうです。
PyYAML のインストールのところで libyaml が見つからないというエラーがでていましたが、
<code>pip install</code> 自体は成功していたので、問題はなかったようです。</p>

<figure class='code'><figcaption><span>https://github.com/znz/dot-shell/blob/master/profile.d/50pyenv.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pip install paramiko jinja2 PyYAML pycrypto markupsafe
</span></code></pre></td></tr></table></div></figure>


<h2>git clone して試す</h2>

<p>ライブラリをインストールしたので、
<a href="http://ansibleworks.com/docs/intro_installation.html#running-from-source">Running From Source</a>
の方法で試せましたが、
この方法で入れたものは後で消しました。</p>

<figure class='code'><figcaption><span>https://github.com/znz/dot-shell/blob/master/profile.d/50pyenv.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/ansible/ansible.git
</span><span class='line'><span class="nb">cd </span>ansible
</span><span class='line'><span class="nb">source</span> ./hacking/env-setup
</span></code></pre></td></tr></table></div></figure>


<h2>pip で ansible をインストール</h2>

<p>ansible の
<a href="http://ansibleworks.com/docs/intro_installation.html#latest-releases-via-pip">Latest Releases Via Pip</a>
で ansible 自体も pip でインストールできるとわかったので、
<code>sudo</code> なしの <code>pip install ansible</code> でインストールしました。
必要なライブラリは依存関係でここで一緒にインストールされるので、
先に個別にインストールする必要はなさそうでした。</p>

<p>そのままだと
<code>error: could not create '/usr/share/ansible': Permission denied</code>
で失敗したので、
homebrew で <code>/usr/local</code> が admin グループに書き込み可能に設定されるのを参考にして、
admin グループに書き込み可能で作成してからインストールすると大丈夫でした。</p>

<p><code>install</code> コマンドでのディレクトリの作成やパーミッションの設定は、
何度実行しても同じ結果になるという点では
<code>mkdir -p</code> や <code>chmod</code> や <code>chown</code> の組み合わせと同じですが、
1コマンドで済むのでオススメです。</p>

<figure class='code'><figcaption><span>https://github.com/znz/dot-shell/blob/master/profile.d/50pyenv.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo install -d -g admin -m 775 /usr/share/ansible
</span><span class='line'>pip install ansible
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 4 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-23-rubymotion-mokumoku-osaka.html"/>
    <updated>2013-10-23T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 3 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://connpass.com/event/3557/">第 4 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。</p>

<p>今回も前回と同じく東京と同時開催でした。
前回はハングアウトで接続していたのですが、
今回は接続せずに終わってしまいました。</p>

<!--more-->


<h2>話に出たもの</h2>

<p>話に出てきたアプリやサイトのメモです。</p>

<ul>
<li><a href="http://www.airsquirrels.com/reflectorc/">Reflector &ndash; AirPlay mirror your iPhone or iPad to any Mac or PC</a>

<ul>
<li>Mac OS X が Apple TV の代わりに iOS の画面を受け取れるようになる (有償 $12.99)。</li>
<li>最後の成果発表の時に、複数の画面を同時に受け取れるという発見がありました。</li>
<li>それを使えば複数の画面をまとめて同時に Apple TV に出せました。</li>
<li>同じ会社が作っている
<a href="http://www.airsquirrels.com/airparrot/">AirParrot &ndash; AirPlay your Mac or PC&rsquo;s screen to Apple TV</a>
を使えば Windows PC からでも Apple TV に画面を飛ばせるという話もありました。</li>
</ul>
</li>
<li><a href="https://popapp.in/">POP &ndash; Prototyping on Paper | iPhone App Prototyping Made Easy</a>
ペーパープロトタイピングで UI の設計 (無償)</li>
<li><a href="https://www.flinto.com/">Flinto – iPhone and iPad Prototyping</a>
こちらもペーパープロトタイピングでブラウザ上でも見えます (有償)。
画像のアップロードが面倒なので POP の方を使っているという話でした。</li>
<li><a href="http://asciiwwdc.com/">ASCIIwwdc</a>
WWDC をテキストにおこしたサイト</li>
<li><a href="http://estimote.com/">Estimote Beacons — real world context for your apps</a>
iBeacon 関連のハードウェア</li>
<li><a href="http://www.rainymood.com/">Rainy Mood</a>
落ち着く BGM</li>
<li><a href="http://connpass.com/event/3871/">第 5 回 RubyMotion もくもく会 in Osaka &ndash; connpass</a>
次回は 2013/11/20(水) 19:30 〜 21:30
(ハッシュタグが設定されていない?)</li>
<li><a href="http://connpass.com/event/3870/">第15回 RubyMotion もくもく会 in Tokyo &ndash; connpass</a>
東京の次回
(ハッシュタグが設定されているから参加しますツイートにハッシュタグがついている?)</li>
<li><a href="http://www.bohemiancoding.com/sketch/">Sketch | The designer’s toolbox</a>
iOS アプリでアイコンとか作るのに使っているという話</li>
<li><a href="http://peatix.com/">Peatix | 簡単イベント管理、チケット販売サイト（ピーティックス） | Peatix</a>
手数料が安いという話</li>
</ul>


<h2>やっていたこと</h2>

<p>前回の続きで
<a href="https://github.com/HipByte/RubyMotionSamples">https://github.com/HipByte/RubyMotionSamples</a>
のサンプルを試していたのですが、
<a href="https://github.com/HipByte/RubyMotionSamples/tree/master/osx/Tweets">https://github.com/HipByte/RubyMotionSamples/tree/master/osx/Tweets</a>
が Twitter API 1.1 への変更の影響で動かなくなっていました。</p>

<p>具体的には</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">json</span> <span class="o">=</span> <span class="no">JSONParser</span><span class="o">.</span><span class="n">parse_from_url</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">RuntimeError</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>      <span class="n">presentError</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>という部分で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Terminating</span> <span class="n">app</span> <span class="n">due</span> <span class="n">to</span> <span class="n">uncaught</span> <span class="n">exception</span> <span class="s1">&#39;TypeError&#39;</span><span class="p">,</span> <span class="ss">reason</span><span class="p">:</span> <span class="s1">&#39;data_parser.rb:6:in `parse:&#39;</span><span class="p">:</span> <span class="n">exception</span> <span class="n">class</span><span class="o">/</span><span class="n">object</span> <span class="n">expected</span> <span class="p">(</span><span class="no">TypeError</span><span class="p">)</span>
</span><span class='line'>  <span class="n">from</span> <span class="n">json_parser</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">3</span><span class="ss">:in</span> <span class="sb">`parse_from_url:&#39;</span>
</span><span class='line'><span class="sb"> from app_delegate.rb:71:in `</span><span class="n">block</span> <span class="k">in</span> <span class="ss">search</span><span class="p">:</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>というエラーになっていました。</p>

<p>ブラウザで
<code>http://search.twitter.com/search.json?q=xcode%20crash</code>
にアクセスしてみると
<code>{"errors": [{"message": "The Twitter REST API v1 is no longer active. Please migrate to API v1.1. https://dev.twitter.com/docs/api/1.1/overview.", "code": 68}]}</code>
というエラーが
<code>HTTP/1.1 410 Gone</code>
で返ってきていました。</p>

<p>API 1.1 に対応するには OAuth 対応が必須ということで、
簡単には対処できなさそうでしたが、
<a href="https://github.com/HipByte/RubyMotionSamples/issues/31">https://github.com/HipByte/RubyMotionSamples/issues/31</a>
に報告がすでにあったのでコメントをつけておきました。</p>

<p>それとは別に、エラー処理も <code>RuntimeError</code> しか <code>rescue</code> していないので、
<code>TypeError</code> は <code>rescue</code> できていなかったり、
<code>rescue</code> できても</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Terminating</span> <span class="n">app</span> <span class="n">due</span> <span class="n">to</span> <span class="n">uncaught</span> <span class="n">exception</span> <span class="s1">&#39;NoMethodError&#39;</span><span class="p">,</span> <span class="ss">reason</span><span class="p">:</span> <span class="s1">&#39;app_delegate.rb:73:in `block in search:&#39;</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`presentError&#39; for #&lt;AppDelegate:0x7fe1eb107910 ...&gt; (NoMethodError)</span>
</span></code></pre></td></tr></table></div></figure>


<p>でエラー処理がちゃんと動いていなかったりしました。</p>

<p>これは <code>NSApplication.sharedApplication.presentError error_ptr</code> にすれば良いのかも、
と思って試してみたけどうまくいかない、というところで時間が来て終了になりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブラウザのみで使えるバーコードリーダーを作った]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-20-web-barcode-reader.html"/>
    <updated>2013-10-20T19:27:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/web-barcode-reader</id>
    <content type="html"><![CDATA[<p>最近の HTML5 の getUserMedia API でカメラの画像をブラウザ上で処理できるようになったということで、
専用のバーコードリーダー機器を買ったり、
モバイル機器で専用のアプリを入れたりしなくても、
ノートPCの内蔵のカメラでも使えるバーコードリーダーを作ってみました。</p>

<!--more-->


<h2>使い方</h2>

<p><a href="http://web-barcode-reader.herokuapp.com/">Web Barcode Reader</a>
を開いて、
既にPC上に画像がある場合はその画像を選択してください。
選択するだけでバーコードの認識が始まります。
iOS や Android などではファイル選択かカメラで撮影かを選べます。</p>

<p><a href="https://github.com/EddieLa/BarcodeReader">BarcodeReader</a>
のライブラリを使って
JavaScript のみで認識していて、
バーコードの認識は初回はちょっと時間がかかるようなので、
ゆっくり待ってください。</p>

<p>Google Chrome などではファイル選択の横に
「ブラウザの中でカメラ画像を取得」
ボタンが出るので、
そのボタンを押した後、
カメラへのアクセスの許可を求められるので、
「許可」を押して許可してください。</p>

<p>そしてカメラに入るようにバーコードをうつして、
画像をクリックすると認識が始まります。
(クリックできる範囲が広い方が良いかと思って画像のクリックにしています。)</p>

<p>向きは逆さまなどでも良いようですが、
画質が悪いと認識できないことが多いようなので、
しっかりピントを合わせてカメラいっぱいにうつすと認識しやすいようです。</p>

<p>必要な数だけ繰り返した後、
不要になったら
「カメラを閉じる」
ボタンを押せば
ブラウザからカメラを使うのを止めます。</p>

<p>最後に下のテキストエリアに認識できたバーコードがたまっているので、
コピーして自由に使えます。</p>

<h2>仕組み</h2>

<p>画像ファイルから認識する方は
HTML5 の File API
を使ってローカルファイルを読み込んでいます。</p>

<p>iOS や Android で撮影が選べる機能は
<code>&lt;input type="file" accept="image/*;capture=camera"&gt;</code>
のように
<code>accept</code>
属性を付けるだけで使えます。</p>

<p>画像は
<code>img</code>
要素に読み込んで、
読み終わったら
<code>canvas</code>
要素にコピーして
<code>canvas</code>
要素から画像データを取得しています。</p>

<p>最終的にその画像データは、
Web Workers
という HTML5 の機能を使ってバックグラウンドで
<a href="https://github.com/EddieLa/BarcodeReader">BarcodeReader</a>
の
<code>DecoderWorker.js</code>
を動かして、
バーコードの認識をしています。</p>

<h3>カメラを扱う仕組み</h3>

<p>まず
<code>getUserMedia</code>
でカメラを開いて
video
要素に設定します。</p>

<p>よくある使用例では
<code>video</code>
要素には
<code>autoplay</code>
属性を付けることが多いようですが、
今回は <code>video</code> 要素の <code>play()</code> を呼ぶようにしました。</p>

<p><code>getUserMedia</code>
は一度変数に保存して、
その function を呼ぶという使い方は出来ないようだったので、
以下のように <code>call</code> で呼ぶようにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nv">getUserMedia =</span>
</span><span class='line'>    <span class="nx">navigator</span><span class="p">.</span><span class="nx">getUserMedia</span> <span class="o">||</span>
</span><span class='line'>    <span class="nx">navigator</span><span class="p">.</span><span class="nx">webkitGetUserMedia</span> <span class="o">||</span>
</span><span class='line'>    <span class="nx">navigator</span><span class="p">.</span><span class="nx">mozGetUserMedia</span> <span class="o">||</span>
</span><span class='line'>    <span class="nx">navigator</span><span class="p">.</span><span class="nx">msGetUserMedia</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">getUserMedia</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">navigator</span><span class="p">,</span> <span class="p">{</span><span class="nx">audio</span><span class="o">:</span><span class="kc">false</span><span class="p">,</span><span class="nx">video</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">toString</span><span class="o">:</span><span class="nf">-&gt;</span><span class="s">&quot;video&quot;</span><span class="p">},</span> <span class="nx">onStream</span><span class="p">,</span> <span class="nx">onError</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>onStream</code>
の引数にわたってきた
<code>stream</code>
は保存しておいて後で使いました。</p>

<p>カメラを閉じるには
<code>video</code> 要素で再生を止めるのではなく、
<code>stream</code> の方の <code>stop()</code> を呼ぶ必要がありました。</p>

<p>一度 <code>stream</code> を <code>stop()</code> してしまうと、
再度再生するには、
また許可を求める必要があったので、
毎回閉じるのではなく、
連続読み込み用に閉じるのは別ボタンの機能にしました。</p>

<h2>ソースコード</h2>

<p>ソースコードは実験的に Gumroad で売ってみることにしました。
先週の三連休で作って、さらに今日追加で細かい調整をして4日もかかっている感じなので、
缶コーヒーでもおごる感じで買ってもらえると良いかもしれません。</p>

<ul>
<li><a href="https://gum.co/egEG">WebBarcodeReaderのCoffeeScript部分のソース</a></li>
<li><a href="https://gum.co/OSLo">WebBarcodeReaderのRailsプロジェクト全体のソース</a></li>
</ul>


<script type="text/javascript" src="https://gumroad.com/js/gumroad.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カーネル/VM+K*BUG勉強会@関西 ごかいめ に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-20-kernelvm.html"/>
    <updated>2013-10-20T19:10:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kernelvm</id>
    <content type="html"><![CDATA[<p><a href="http://atnd.org/events/43501">カーネル/VM+K*BUG勉強会@関西 ごかいめ</a>
というイベントの会場が行きやすい場所の中だったので、
参加してみました。</p>

<!--more-->


<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20130526">第 72 回 関西 Debian 勉強会</a>
の時のナレッジサロンのあたりかと思っていたら、
全然別の場所で、
13時の1Fからの誘導に集まっていないと迷いそうな場所でした。</p>

<p>場所が分かりにくくて、
後から来た人も迷っていたようでした。
それから、
鍵がかかっていて、
ノックするなどして中の人に開けてもらわないと入れないというのが
多少不便そうな感じでした。</p>

<p>会場としては無線LANが用意されていたり、電源もあったりして、
勉強会の会場としては良い場所でした。</p>

<p>内容は ATND のページに発表者しか書いていなかったり、
始まってからも更新されたりして、
割とゆるい感じのイベントでした。</p>

<p>受付とか自己紹介などもなかったので、
誰だかわからない人はわからないままで、
申し込みしていない人がまぎれていても
わからないんじゃないかなあという感じでした。</p>

<p>発表中はスクリーンが低くて、
後ろの方の席に座っていたので、
下の方は見えないのが気になりました。
ustream の中継があったので、
帯域の無駄遣いかと思いつつ、
たまに ustream の方でチェックしようとしたら
広告が最初に出てくるので
みたいタイミングに間に合わないということもありました。</p>

<p>内容は
<a href="http://togetter.com/li/578958">カーネル/VM+K*BUG勉強会@関西 ごかいめ #kernelvm &ndash; Togetter</a>
にまとめられている部分もありますが、
基本的に他のことをしながら聞いていたので、
特にメモなどは取っていなかったのですが、
いろいろと楽しめました。</p>

<p>イベントを知ったのが直前だったので、
懇親会の申し込みは間に合っていなかったので、
終わった後はそのまま出ました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby で ISBN をチェックしたりハイフンを入れたり]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-12-isbn.html"/>
    <updated>2013-10-12T14:38:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/isbn</id>
    <content type="html"><![CDATA[<p>本には
<a href="http://ja.wikipedia.org/wiki/ISBN">ISBN</a>
というものが付いていて、
末尾のチェックディジットは仕様を参照すれば
簡単に計算出来そうです。</p>

<p>10 桁のものと新しい 13 桁のものがあったり、
出版者の部分の桁数が違ったりして
ちゃんとハイフンを入れるのは面倒そうです。</p>

<p>チェックディジットの方も自分で実装すると
バグっていたときに面倒なので、
良さそうな gem がないか探してみました。</p>

<p>最終的にはいくつかの理由から
<a href="http://rubygems.org/gems/lisbn">lisbn</a>
という gem を使いました。</p>

<!--more-->


<h2>gem の選択</h2>

<p>まず
<a href="http://rubygems.org/search?utf8=%E2%9C%93&amp;query=isbn">rubygems.org の右上で isbn と検索</a>
するところから始めました。</p>

<p>インストール数の多い順に見ていくと、</p>

<ul>
<li><a href="http://rubygems.org/gems/isbn10">isbn10</a>

<ul>
<li>インストール数は一番多い</li>
<li>10桁のみ</li>
<li>古い</li>
</ul>
</li>
<li><a href="https://github.com/ragalie/isbn-tools">isbn-tools</a>

<ul>
<li>古い</li>
<li>Not Maintained</li>
<li>lisbn が後継</li>
</ul>
</li>
<li><a href="https://github.com/entangledstate/isbn">isbn</a>

<ul>
<li>画像対応とかいろいろ高機能っぽいけど今回は不要</li>
<li><code>with_dashes</code> というメソッドは桁数決めうちで不適切</li>
</ul>
</li>
<li><a href="https://github.com/zapnap/isbn_validation">isbn_validation</a>

<ul>
<li>ActiveRecord の validates</li>
<li>ISBN ではない <a href="http://www.amazon.co.jp/gp/help/customer/display.html?nodeId=747416">ASIN</a> も扱いたかったので今回は不適当</li>
</ul>
</li>
<li><a href="https://github.com/ragalie/lisbn">lisbn</a>

<ul>
<li>比較的新しい</li>
<li>10桁と13桁の両対応</li>
<li>ハイフンを入れるために必要な分解処理がある (後は <code>join('-')</code> すれば良いだけ)</li>
<li>data/RangeMessage.xml というファイルを持っていて適切にわけてくれる</li>
</ul>
</li>
</ul>


<p>という感じでした。</p>

<h2>lisbn の使用例</h2>

<p>データベースに保存するのに統一されていると
<code>validates :isbn, uniqueness: true</code>
が使えるので、
以下のように ISBN13 に統一する処理を入れました。</p>

<p>それ以外の場合は ASIN と見なしてそのまま返しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">isbn_unify</span><span class="p">(</span><span class="n">isbn</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># Convert JISX0208 alphabet to ASCII.</span>
</span><span class='line'>    <span class="n">isbn</span> <span class="o">=</span> <span class="no">NKF</span><span class="o">.</span><span class="n">nkf</span><span class="p">(</span><span class="s1">&#39;-Ww -Z0&#39;</span><span class="p">,</span> <span class="n">isbn</span><span class="p">)</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s2">&quot;^A-Za-z0-9&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Convert to isbn13</span>
</span><span class='line'>    <span class="n">lisbn</span> <span class="o">=</span> <span class="no">Lisbn</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">isbn</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">lisbn</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'>      <span class="n">lisbn</span><span class="o">.</span><span class="n">isbn13</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">isbn</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>出力する側では
<code>parts</code>
は常に ISBN13 のものだけのようなので、
ISBN10
に出来るときは
頭の &lsquo;978&rsquo; を外して
チェックディジットを付け直すようにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">-</span> <span class="n">lisbn</span> <span class="o">=</span> <span class="no">Lisbn</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">isbn_or_asin</span><span class="p">)</span>
</span><span class='line'><span class="p">-</span> <span class="k">if</span> <span class="n">lisbn</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'>  <span class="p">-</span> <span class="n">parts</span> <span class="o">=</span> <span class="n">lisbn</span><span class="o">.</span><span class="n">parts</span>
</span><span class='line'>  <span class="p">-</span> <span class="k">if</span> <span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;978&#39;</span>
</span><span class='line'>    <span class="nt">%p</span><span class="nc">.isbn10</span> ISBN10: <span class="si">#{</span><span class="n">parts</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">2</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">)</span><span class="si">}</span>-<span class="si">#{</span><span class="n">lisbn</span><span class="o">.</span><span class="n">isbn10</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span>
</span><span class='line'>  <span class="nt">%p</span><span class="nc">.isbn13</span> ISBN13: <span class="si">#{</span><span class="n">lisbn</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">)</span><span class="si">}</span>
</span><span class='line'><span class="p">-</span> <span class="k">else</span>
</span><span class='line'>  <span class="nt">%p</span><span class="nc">.asin</span> ASIN: <span class="si">#{</span><span class="n">isbn_or_asin</span><span class="si">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spring rails console で PAGER=lv だと /dev/tty: Device not configured]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-10-spring-and-lv.html"/>
    <updated>2013-10-10T21:28:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/spring-and-lv</id>
    <content type="html"><![CDATA[<p><code>spring rails console</code>
で
<code>pry</code>
を使っていて
pager
を起動するような出力をしたときに
<code>/dev/tty: Device not configured</code>
になることがあったので原因を調べてみました。
結論としてはタイトルに書いてありますが、
<code>spring</code>
と
<code>lv</code>
の組み合わせが原因でした。</p>

<!--more-->


<h2>確認バージョン</h2>

<p>関係する gem のバージョンは以下の通りです。</p>

<ul>
<li>rails 3.2.14, 4.0.0</li>
<li>spring 0.0.10, 0.0.11</li>
</ul>


<p>関係するプログラムのバージョンは以下の通りです。</p>

<ul>
<li>ruby 2.0.0-p247</li>
<li>lv 4.51</li>
</ul>


<p>確認した環境は Mac OS X です。</p>

<h2>原因の切り分け</h2>

<p>まず
<code>rails console</code>
だと問題は発生しないので、
<code>spring</code>
が原因のひとつなのは確実だったので、
当面の回避策として、
<code>spring rails console</code>
の代わりに
<code>rails console</code>
を使っていました。</p>

<p>次にふと他の pager を使ってみるとどうだろうと思って、
<code>spring rails console</code>
の中で
<code>ENV['PAGER']="less"</code>
として <code>lv</code> から <code>less</code> に変えて試してみたところ、
問題なく使えました。
これがきっかけで <code>lv</code> も原因のひとつだということに気づきました。</p>

<h2>原因調査</h2>

<p>ここまでわかれば原因は調べやすくなったので、
まずエラーメッセージを出しているところを探しました。
これはすぐに見つかって、
<code>lv</code> の <code>src/stream.c</code> の <code>perror( "/dev/tty" )</code> でした。</p>

<figure class='code'><figcaption><span>lv451/src/stream.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="n">close</span><span class="p">(</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">IsAtty</span><span class="p">(</span> <span class="mi">1</span> <span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="mi">0</span> <span class="o">!=</span> <span class="n">open</span><span class="p">(</span> <span class="s">&quot;/dev/tty&quot;</span><span class="p">,</span> <span class="n">O_RDONLY</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span> <span class="s">&quot;/dev/tty&quot;</span> <span class="p">),</span> <span class="n">exit</span><span class="p">(</span> <span class="o">-</span><span class="mi">1</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>STDIN を開き直している処理があって、
ここで <code>"/dev/tty"</code> を開けないのが原因でした。</p>

<p>元々の STDIN は
<code>spring</code>
の中で
<code>UNIXSocket#send_io</code>
と
<code>UNIXSocket#recv_io</code>
で受け渡していました。
この STDIN をそのまま使ってくれれば問題は起きないのに、
わざわざ <code>close( 0 )</code> で閉じてしまって、
開き直そうとしているのが問題だとわかりました。</p>

<p><code>spring rails console</code>
の中で直接
<code>open("/dev/tty","r")</code>
を試しても同様に
<code>Errno::ENXIO: Device not configured - /dev/tty</code>
になってしまうので、
<code>lv</code> の方を変えない限りどうしようもなさそうです。</p>

<p>というわけで、
これはもう <code>lv</code> の処理が <code>spring</code> と相性が悪いということで、
<code>spring</code> の中では <code>lv</code> を避けるしかなさそうです。</p>

<h2>結論</h2>

<p><code>~/.spring.rb</code>
で
<code>ENV["PAGER"]</code>
を書き換えることにしました。</p>

<figure class='code'><figcaption><span>~/.spring.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;PAGER&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;less&quot;</span> <span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;PAGER&quot;</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;lv&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>余談</h2>

<p>原因を調べているときに
<code>spring</code>
の標準入出力の処理周りをみていたのですが、
<code>UNIXSocket#send_io</code>
と
<code>UNIXSocket#recv_io</code>
で受け渡していました。</p>

<p><code>recv_io</code> で mode を指定していないので、
<code>spring rails console</code> では
<code>STDIN.write</code> が使えたり <code>STDOUT.gets</code> が使えたりしてしまうようです。</p>

<p>これは <code>recv_io(IO, "r")</code> などに直せば良さそうに見えますが、
特に実害もなさそうなので、このままでもあまり問題はなさそうです。</p>

<p>パッチとしては以下のように直せば良さそうです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/lib/spring/application.rb b/lib/spring/application.rb</span>
</span><span class='line'><span class="gh">index b7df9bb..4e34f6c 100644</span>
</span><span class='line'><span class="gd">--- a/lib/spring/application.rb</span>
</span><span class='line'><span class="gi">+++ b/lib/spring/application.rb</span>
</span><span class='line'><span class="gu">@@ -93,7 +93,7 @@ module Spring</span>
</span><span class='line'>       log &quot;got client&quot;
</span><span class='line'>       manager.puts
</span><span class='line'>
</span><span class='line'><span class="gd">-      streams = 3.times.map { client.recv_io }</span>
</span><span class='line'><span class="gi">+      streams = %w[w w r].map { |mode| client.recv_io(IO, mode) }</span>
</span><span class='line'>       [STDOUT, STDERR].zip(streams).each { |a, b| a.reopen(b) }
</span><span class='line'>
</span><span class='line'>       preload unless preloaded?
</span></code></pre></td></tr></table></div></figure>


<p>テストも以下のように書いてみたのですが、
Mac OS X の環境だとそもそも既存のテストも通らないものがあったり、
Linux だと上の変更をしなくてもテストが通ってしまったりしたので
pull request を出すのは諦めました。
これらのパッチの著作権は主張しないので、
代わりに pull request を出してもらうのは歓迎します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/test/acceptance/app_test.rb b/test/acceptance/app_test.rb</span>
</span><span class='line'><span class="gh">index a21b556..ee04e5a 100644</span>
</span><span class='line'><span class="gd">--- a/test/acceptance/app_test.rb</span>
</span><span class='line'><span class="gi">+++ b/test/acceptance/app_test.rb</span>
</span><span class='line'><span class="gu">@@ -440,4 +440,16 @@ class AppTest &lt; ActiveSupport::TestCase</span>
</span><span class='line'>       assert_success &quot;bundle check&quot;
</span><span class='line'>     end
</span><span class='line'>   end
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+  test &quot;STDIN mode&quot; do</span>
</span><span class='line'><span class="gi">+    assert_success &quot;#{spring} rails runner &#39;STDIN.write(%(test)) rescue $!.display&#39;&quot;, stdout: &quot;not opened for writing&quot;</span>
</span><span class='line'><span class="gi">+  end</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+  test &quot;STDOUT mode&quot; do</span>
</span><span class='line'><span class="gi">+    assert_success &quot;#{spring} rails runner &#39;STDOUT.gets rescue $!.display&#39;&quot;, stdout: &quot;not opened for reading&quot;</span>
</span><span class='line'><span class="gi">+  end</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+  test &quot;STDERR mode&quot; do</span>
</span><span class='line'><span class="gi">+    assert_success &quot;#{spring} rails runner &#39;STDERR.gets rescue $!.display&#39;&quot;, stdout: &quot;not opened for reading&quot;</span>
</span><span class='line'><span class="gi">+  end</span>
</span><span class='line'> end
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress をアップデートした (.ruby-version が conflict した) 話]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-09-update-octopress-and-conflict-ruby-version.html"/>
    <updated>2013-10-09T21:21:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/update-octopress-and-conflict-ruby-version</id>
    <content type="html"><![CDATA[<p>octopress で使う ruby を 1.9.3-p448 から 2.0.0-p247 にあげようと思って、
そのついでに octopress 自体も master の最新のものに更新したので、
その手順のメモです。</p>

<p>その時に <code>.ruby-version</code> が conflict したので、
その話がメインです。</p>

<!--more-->


<h2><code>.ruby-version</code> とは?</h2>

<p>rbenv が <code>.rbenv-version</code> から <code>.ruby-version</code> に変わった時には
知らなかったのですが、
<a href="https://gist.github.com/fnichol/1912050">A Common .ruby-version File For Ruby Projects</a>
というものがあって、
rbenv や rvm のような切り替えツール共通で
<code>.ruby-version</code>
というファイルを使おうということのようです。</p>

<h2>octopress の .ruby-version</h2>

<p>その発想は良いのですが、
rbenv + ruby-build だと 1.9.3-p448 や 2.0.0-p247 のように
パッチレベルまで <code>.rbenv-version</code> に入るのが普通なのに
rvm が作る <code>.ruby-version</code> だと <code>1.9.3</code> のように
パッチレベルが入らないようで、
octopress の <code>.ruby-version</code> で問題が起きました。</p>

<p>元々使い始めた時の octopress の master には
<code>.ruby-version</code>
ファイルが入っていて、
<code>1.9.3</code>
という内容でした。</p>

<p>手元での回避策としては、
<code>ln -snf 1.9.3-p448 ~/.rbenv/versions/1.9.3</code>
のようにシンボリックリンクで回避するとか、
<code>configure</code> で <code>--prefix=$HOME/.rbenv/versions/1.9.3</code> で
別途インストールするとかも考えたのですが、
他に影響が出るのが嫌だったので、
結局
<code>.ruby-version</code>
を書き換えて使うことにしました。</p>

<p>rbenv を使っていて、
リリースされているバージョンの ruby のインストールには
ruby-build を使っていて
<code>1.9.3-p448</code>
にする必要があったので、
<code>rbenv local 1.9.3-p448</code>
で置き換えました。</p>

<h2>バージョンアップ手順</h2>

<p>まず remote を確認します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> git remote -v
</span><span class='line'>octopress       git://github.com/imathis/octopress.git (fetch)
</span><span class='line'>octopress       git://github.com/imathis/octopress.git (push)
</span><span class='line'>origin  git@github.com:znz/znz.github.io (fetch)
</span><span class='line'>origin  git@github.com:znz/znz.github.io (push)</span></code></pre></td></tr></table></div></figure>


<p>octopress という名前にしていることが確認出来たので、
fetch します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% git fetch octopress
</span><span class='line'>remote: Counting objects: 85, done.
</span><span class='line'>remote: Compressing objects: 100% (34/34), done.
</span><span class='line'>remote: Total 46 (delta 30), reused 26 (delta 10)
</span><span class='line'>Unpacking objects: 100% (46/46), done.
</span><span class='line'>From git://github.com/imathis/octopress
</span><span class='line'>   9699df7..5a6b8e4  2.5        -&gt; octopress/2.5
</span><span class='line'>   f75547f..ff71657  master     -&gt; octopress/master
</span><span class='line'>   8d7ef9a..98bd6c9  site-2.1   -&gt; octopress/site-2.1</span></code></pre></td></tr></table></div></figure>


<p>merge する前に
<code>git diff source...octopress/master</code>
で変更点を確認してから merge します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% git diff source...octopress/master
</span><span class='line'>% git merge octopress/master
</span><span class='line'>Auto-merging Rakefile
</span><span class='line'>CONFLICT (modify/delete): .ruby-version deleted in octopress/master and modified in HEAD. Version HEAD of .ruby-version left in tree.
</span><span class='line'>Automatic merge failed; fix conflicts and then commit the result.
</span><span class='line'>zsh: exit 1     git merge octopress/master</span></code></pre></td></tr></table></div></figure>


<p>conflict しました。
<code>.ruby-version</code>
は消してしまって
<code>rbenv global 2.0.0-p247</code>
で設定している <code>2.0.0-p247</code> を使う予定なので、
消してしまいます。
その変更を commit すると merge 完了でした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% git rm .ruby-version
</span><span class='line'>.ruby-version: needs merge
</span><span class='line'>rm '.ruby-version'
</span><span class='line'>% git commit -av
</span><span class='line'>[source 136b37f] Merge remote-tracking branch 'octopress/master' into source</span></code></pre></td></tr></table></div></figure>


<p>うまくいったので、バックアップをかねて github に push しておきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% git push
</span><span class='line'>Counting objects: 55, done.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% (39/39), done.
</span><span class='line'>Writing objects: 100% (41/41), 4.90 KiB | 0 bytes/s, done.
</span><span class='line'>Total 41 (delta 28), reused 0 (delta 0)
</span><span class='line'>To git@github.com:znz/znz.github.io
</span><span class='line'>   5dabdd2..136b37f  source -&gt; source</span></code></pre></td></tr></table></div></figure>


<p>rake のバージョンの関係で
<code>rake preview</code>
などではなく
<code>bundle exec rake preview</code>
のように実行することが必須になってしまいました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rake preview
</span><span class='line'>rake aborted!
</span><span class='line'>You have already activated rake 10.1.0, but your Gemfile requires rake 0.9.2.2. Using bundle exec may solve this.</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>事前に予測できた範囲の conflict しかなくて、
簡単に解決できました。</p>

<p><code>.ruby-version</code>
は
<code>.gitignore</code>
には入っていないので、
余計な conflict を避けるために
<code>.gitignore</code>
を変更せずに使いたいのなら、
親ディレクトリに
<code>.ruby-version</code>
を用意してバージョンを指定するのが良いと思います。
<code>.git</code>
などと同じように
<code>.ruby-version</code>
もディレクトリを上がっていって最初に見つかったものが使われるので、
そういう運用が可能です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails 4 対応の認可の gem]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-08-rails4-authorization.html"/>
    <updated>2013-10-08T23:04:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rails4-authorization</id>
    <content type="html"><![CDATA[<p>rails 4 に対応している認可のライブラリとして
<code>cancan</code>
からの移行先候補を選ぶために
<code>the_role</code>
と
<code>pundit</code>
という gem を試してみました。</p>

<!--more-->


<h2>cancan からの移行</h2>

<p>認証は rails 4 でも
<code>devise</code>
を使い続ければ良さそうな感じなのですが、
認可の方は
<code>cancan</code>
の rails 4 対応がいまいちで
<a href="http://ready4rails4.net/gems/cancan">Ready for Rails 4?</a>
でも <em>not ready</em> のままで
<a href="https://github.com/ryanb/cancan/issues">issues</a>
も溜まっていることもあり、
rails 4 では他の gem への移行を検討していました。</p>

<h2>移行先候補</h2>

<p>移行先候補として、まず最初に試したのは
<a href="https://github.com/the-teacher/the_role">the_role</a>
という gem でした。
後述しますが、これは最初から組み込むなら良さそうなのですが、
今回はちょっと目的にあわなかったので諦めました。</p>

<p>次に試したのは
<a href="https://github.com/elabs/pundit">pundit</a>
という gem で、
これは
<a href="http://www.elabs.se/blog/52-simple-authorization-in-ruby-on-rails-apps">Simple authorization in Ruby on Rails apps — Elabs</a>
という blog の説明で実装のほぼすべてが理解できるぐらいシンプルな gem でした。
rails 自体の変化にも強そうだと思って、
今回はこれを採用しました。</p>

<p>その後、
検索用キーワードとして使えそうな名前が増えたことで
<a href="http://www.plugingeek.com/categories/user-authorization-ruby">User Authorization (Ruby) on pluginGeek</a>
という一覧を見つけました。</p>

<p>後で知ったので今回は試していないのですが、
<a href="https://github.com/nathanl/authority">Authority</a>
は高機能そうなので、高機能なものがほしい場合や
<code>cancan</code>
で複雑なことをしていた場合の移行先としては良さそうです。</p>

<h2><code>the_role</code></h2>

<p>最初に試した
<a href="https://github.com/the-teacher/the_role">the_role</a> 2.1.1
は
「TheRole &ndash; Authorization Gem for Ruby on Rails with administrative interface」
と書いてある通り、設定画面も付いているのが特徴です。</p>

<p>認可の設定画面は
<code>localhost:3000/admin/roles</code>
で出てくるのですが、
layout に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">=</span> <span class="k">yield</span> <span class="ss">:role_sidebar</span>
</span><span class='line'><span class="p">=</span> <span class="k">yield</span> <span class="ss">:role_main</span>
</span></code></pre></td></tr></table></div></figure>


<p>を入れていないと真っ白なページで何も内容が出てこないので注意が必要です。
<code>assets</code>
もちゃんと設定していないと
<code>Enable</code>, <code>Disable</code> のところが動かないなど、
使い始めにはまりどころがいくつかありました。</p>

<p>他にも</p>

<ul>
<li>管理画面が <code>admin/roles</code> 決めうち (gem の中の <code>config/routes.rb</code>)</li>
<li><code>User</code> というモデル名も決めうち (<code>Admin::User</code> などは使えない)</li>
<li>1 ユーザーは 1 ロールのみ (例えば、あるユーザーにカレンダーの管理者とお知らせの管理者のロールをつけるということは出来ないので複合権限のロールを別途作る必要がある)</li>
</ul>


<p>という点など柔軟性はなさそうな感じでした。
このうち、管理画面のパスが決めうちという点が
<code>rails_admin</code>
との組み合わせで問題になったので、
今回は採用を見送りました。
<code>rails_admin</code>
の方を <code>admin</code> 以外のパスに変更して良いのなら
一緒に使えると思います。</p>

<p>使うのに必要な設定は
<code>rake rails:template LOCATION=/path/to/file.rb</code>
のように使うことを想定して作っているアプリケーションテンプレートの
<a href="https://github.com/znz/rails-app-template/blob/master/the_role.rb">https://github.com/znz/rails-app-template/blob/master/the_role.rb</a>
も参考になると思います。</p>

<h2>pundit</h2>

<p>こちらも初期設定などの一部は
<a href="https://github.com/znz/rails-app-template/blob/master/pundit.rb">https://github.com/znz/rails-app-template/blob/master/pundit.rb</a>
で出来るようにアプリケーションテンプレートを作成中です。</p>

<p>認可の仕組みとしては簡単に言うと
<code>Post</code> の <code>update</code> の認可なら
<code>PostPolicy.new(current_user, @post).update?</code>
で判断出来るような <code>Policy</code> クラスを用意しましょう、というだけです。</p>

<p><code>index</code> などのようなアクション用として
<code>@posts = PostPolicy::Scope.new(current_user, Post.scoped).resolve</code>
のような <code>Scope</code> も用意する、ということになっています。</p>

<p>そういうものを用意した上で便利に使えるようにいくつかのヘルパーメソッドなどを
用意したものが <code>pundit</code> gem になっています。</p>

<p>つまり仕組み自体は <code>pundit</code> gem なしでも使えるので、
細かく制御したい部分では <code>pundit</code> gem に関係なく
<code>Policy</code> や <code>Scope</code> を直接扱うこともできます。</p>

<h2>pundit と rails_admin</h2>

<p>というわけで直接扱ったり、
モデルとは関連ない <code>Policy</code> を用意したりして、
<code>rails_admin</code>
との連携を作成している途中のものを
<a href="https://github.com/znz/rails-app-template/blob/master/pundit-with-rails_admin.rb">https://github.com/znz/rails-app-template/blob/master/pundit-with-rails_admin.rb</a>
に公開しています。</p>

<h2>pundit と scaffold</h2>

<p><code>cancan</code>
の
<code>load_and_authorize_resource</code>
のようなものは
<code>pundit</code>
自体には用意されていないので、
scaffold
で生成したコントローラーに埋め込む処理を
<a href="https://github.com/znz/rails-app-template/blob/master/pundit-with-scaffold.rb">https://github.com/znz/rails-app-template/blob/master/pundit-with-scaffold.rb</a>
で公開しています。</p>

<h2>まとめ</h2>

<p>今回は初期設定をアプリケーションテンプレートにまとめつつ、
認可用の gem を試しました。</p>

<p>アプリケーションテンプレートはどれもひな形としての利用を想定しているので、
この後さらに変更していくことになると思います。</p>

<p>アプリケーションテンプレート自体も使っていった上で必要に応じて変更していく予定なので、
リンク先はこの記事を書いた時点の内容とは合わなくなっている可能性もあります。</p>

<p>認可用のライブラリとしては権限管理画面付きのものを簡単に組み込みたければ
<code>the_role</code>、
シンプルな部品を組み合わせるのが良ければ <code>pundit</code>、
高機能なものが欲しければ <code>authority</code> を試すのが
良さそうだと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[doorkeeper gem の API のクライアント]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-08-doorkeeper-api-client.html"/>
    <updated>2013-10-08T21:06:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/doorkeeper-api-client</id>
    <content type="html"><![CDATA[<p><a href="http://rubygems.org/gems/doorkeeper">doorkeeper gem</a>
で API を作る方は
<a href="https://github.com/applicake/doorkeeper-provider-app">doorkeeper-provider-app</a>
というサンプルの
<code>app/controllers/api/</code>
以下などをみればすぐにわかったのですが、
API を呼び出す方は
<a href="https://github.com/applicake/doorkeeper/wiki/Create-a-OmniAuth-strategy-for-your-provider">OmniAuth の中でユーザーの情報を取り出す</a>
だけならすぐに出来たのですが、
コントローラーの中など呼び出す方法は
<a href="https://github.com/applicake/doorkeeper-devise-client">doorkeeper-devise-client</a>
を見てもよくわからなかったので、まとめてみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>provider 側

<ul>
<li>rails 3.2.14</li>
<li>doorkeeper 0.7.3</li>
</ul>
</li>
<li>client 側

<ul>
<li>rails 4.0.0</li>
<li>devise 3.1.1</li>
<li>omniauth 1.1.4</li>
<li>omniauth-oauth2 1.1.1</li>
<li>oauth2 0.8.1</li>
</ul>
</li>
</ul>


<h2>準備</h2>

<p>まず
<a href="https://github.com/applicake/doorkeeper/wiki/Create-a-OmniAuth-strategy-for-your-provider">Create a OmniAuth strategy for your provider</a>
を参考にして、
OmniAuth の中で
<code>access_token.get('/api/v1/me.json').parsed</code>
は出来るところまでは準備しておきます。</p>

<p>目的としては、
この
<code>access_token</code>
が認証より後で呼ばれる他のコントローラーの中で取得できれば良いということになります。</p>

<p>余談ですが、
doorkeeper の wiki は
<a href="https://github.com/applicake/doorkeeper/wiki/Supported-Ruby-&amp;-Rails-versions">Supported Ruby &amp; Rails versions</a>
のように情報が古いまま放置されているページもあるようなので、
<a href="https://github.com/applicake/doorkeeper">README</a>
などのソースコード側のドキュメントも参照した方が良さそうです。</p>

<h2>必要なもの</h2>

<p><code>access_token</code>
は
<code>OAuth2::AccessToken</code>
クラスのオブジェクトです。</p>

<p>生成するには</p>

<ul>
<li><code>OAuth2::Client</code> のオブジェクト</li>
<li>認証で取得した <code>token</code></li>
</ul>


<p>が必要になります。</p>

<p><code>OAuth2::Client</code>
の生成には</p>

<ul>
<li><code>client_id</code></li>
<li><code>client_secret</code></li>
<li>URL</li>
</ul>


<p>が必要になります。</p>

<h2>token の保存</h2>

<p>まず
<code>OAuth2</code>
の認証で取得した
<code>token</code>
を保存しておく必要があります。</p>

<p><code>Users::OmniauthCallbacksController#doorkeeper</code>
で
<code>session[:doorkeeper_token] = request.env["omniauth.auth"]["credentials"]["token"]</code>
のようにしてセッションなどの後で使える場所に保存しておきます。</p>

<p>後で調べてわかったのですが、
<a href="https://github.com/applicake/doorkeeper-devise-client/blob/master/app/controllers/users/omniauth_callbacks_controller.rb">doorkeeper-devise-client の Users::OmniauthCallbacksController</a>
では
<code>request.env["omniauth.auth"].credentials.token</code>
を
<code>user.doorkeeper_access_token</code>
でデータベースに保存していました。</p>

<h2>OAuth2::Client の作成</h2>

<p><a href="https://github.com/applicake/doorkeeper-devise-client/blob/master/app/controllers/application_controller.rb">doorkeeper-devise-client の ApplicationController</a>
では必要な情報は定数経由で受け取るようになっていました。</p>

<p>今回は
<code>devise</code>
と
<code>omniauth-oauth2</code>
を使っているので、
その情報を使って生成するようにしました。
要点だけまとめると以下のコードになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span> <span class="o">=</span> <span class="no">Devise</span><span class="o">.</span><span class="n">omniauth_configs</span><span class="o">[</span><span class="ss">:doorkeeper</span><span class="o">]</span>
</span><span class='line'><span class="n">strategy</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">strategy_class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">*</span><span class="n">config</span><span class="o">.</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">strategy</span><span class="o">.</span><span class="n">client</span>
</span></code></pre></td></tr></table></div></figure>


<h2>OAuth2::AccessToken の生成</h2>

<p>ここまで準備ができれば後は
<code>OAuth2::AccessToken.new</code>
するだけです。</p>

<p>まとめると以下のコードになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">access_token</span>
</span><span class='line'>    <span class="k">return</span> <span class="vi">@access_token</span> <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="vi">@access_token</span><span class="p">)</span>
</span><span class='line'>    <span class="n">config</span> <span class="o">=</span> <span class="no">Devise</span><span class="o">.</span><span class="n">omniauth_configs</span><span class="o">[</span><span class="ss">:doorkeeper</span><span class="o">]</span>
</span><span class='line'>    <span class="n">strategy</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">strategy_class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">*</span><span class="n">config</span><span class="o">.</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">token</span> <span class="o">=</span> <span class="n">session</span><span class="o">[</span><span class="ss">:doorkeeper_token</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@access_token</span> <span class="o">=</span> <span class="ss">OAuth2</span><span class="p">:</span><span class="ss">:AccessToken</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">strategy</span><span class="o">.</span><span class="n">client</span><span class="p">,</span> <span class="n">token</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>API 呼び出し</h2>

<p><code>access_token</code>
が出来たら後は呼び出しに使うだけです。</p>

<p>単純な情報取得は
<code>get</code>
して
JSON
なら
<code>parsed</code>
を呼び出すだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">access_token</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;/api/v1/me.json&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">parsed</span>
</span><span class='line'>  <span class="n">access_token</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;/api/v1/posts.json&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">parsed</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回は連携して書き込みたいというのが目的だったため、
<code>post</code>
も使いました。</p>

<p>モデルの例としては
<code>rails g scaffold post title body:text</code>
で API の提供側では以下の実装とします。</p>

<figure class='code'><figcaption><span>app/controllers/api/v1/posts_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Api::V1</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApiController</span>
</span><span class='line'>    <span class="n">doorkeeper_for</span> <span class="ss">:index</span>
</span><span class='line'>    <span class="n">doorkeeper_for</span> <span class="ss">:create</span>
</span><span class='line'>    <span class="n">respond_to</span>     <span class="ss">:json</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>      <span class="n">respond_with</span> <span class="no">Post</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>      <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">post</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="n">current_resource_owner</span>
</span><span class='line'>      <span class="n">post</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>      <span class="n">respond_with</span> <span class="n">post</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>呼び出し側は以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">access_token</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;/api/v1/posts&quot;</span><span class="p">,</span> <span class="ss">params</span><span class="p">:</span> <span class="p">{</span> <span class="ss">post</span><span class="p">:</span> <span class="p">{</span> <span class="ss">title</span><span class="p">:</span> <span class="n">title</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="n">body</span> <span class="p">}</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>params</code>
による指定は
<a href="https://github.com/intridea/oauth2/blob/master/lib/oauth2/access_token.rb">OAuth2::AccessToken</a>
のソースをみて推測しました。</p>

<h2>scope 付き API 提供</h2>

<p>書き込みも許可すると
<code>scope</code>
を分けたくなります。</p>

<p>doorkeeper 側では
<a href="https://github.com/applicake/doorkeeper/wiki/Using-Scopes">Using Scopes</a>
を参考にして</p>

<ul>
<li>initializers に scopes 追加</li>
<li>翻訳追加</li>
<li>API に scopes 追加</li>
</ul>


<p>をしておきます。</p>

<figure class='code'><figcaption><span>config/initializers/doorkeeper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">default_scopes</span>  <span class="ss">:public</span>
</span><span class='line'>  <span class="n">optional_scopes</span> <span class="ss">:admin</span><span class="p">,</span> <span class="ss">:write</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/controllers/api/v1/posts_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">doorkeeper_for</span> <span class="ss">:index</span><span class="p">,</span>  <span class="ss">:show</span><span class="p">,</span>   <span class="ss">scopes</span><span class="p">:</span> <span class="o">[</span><span class="ss">:public</span><span class="o">]</span>
</span><span class='line'><span class="n">doorkeeper_for</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">scopes</span><span class="p">:</span> <span class="o">[</span><span class="ss">:admin</span><span class="p">,</span> <span class="ss">:write</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考のため、この API の rspec も載せておきます。
複数の <code>scopes</code> を設定する時に <code>,</code> 区切りだとうまくいかないところがあったので、
スペース区切りにしています。</p>

<figure class='code'><figcaption><span>spec/controllers/api/v1/posts_controller_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="ss">Api</span><span class="p">:</span><span class="ss">:V1</span><span class="o">::</span><span class="no">PostsController</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;GET &#39;index&#39;&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let!</span><span class="p">(</span><span class="ss">:application</span><span class="p">)</span> <span class="p">{</span> <span class="ss">Doorkeeper</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;MyApp&quot;</span><span class="p">,</span> <span class="n">redirect_uri</span><span class="p">:</span> <span class="s2">&quot;http://app.com&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">let!</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:normal_user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">let!</span><span class="p">(</span><span class="ss">:token</span><span class="p">)</span> <span class="p">{</span> <span class="ss">Doorkeeper</span><span class="p">:</span><span class="ss">:AccessToken</span><span class="o">.</span><span class="n">create!</span> <span class="n">application_id</span><span class="p">:</span> <span class="n">application</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">resource_owner_id</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">scopes</span><span class="p">:</span> <span class="s2">&quot;public&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">subject</span> <span class="p">{</span> <span class="n">response</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;valid token&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">get</span> <span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="ss">:json</span><span class="p">,</span> <span class="n">access_token</span><span class="p">:</span> <span class="n">token</span><span class="o">.</span><span class="n">token</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_success</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">its</span><span class="p">(</span><span class="ss">:status</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">its</span><span class="p">(</span><span class="ss">:body</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="o">==</span> <span class="no">Post</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">to_json</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;invalid token&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">get</span> <span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="ss">:json</span><span class="p">,</span> <span class="n">access_token</span><span class="p">:</span> <span class="n">token</span><span class="o">.</span><span class="n">token</span><span class="o">.</span><span class="n">succ</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">be_success</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">its</span><span class="p">(</span><span class="ss">:status</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="mi">401</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;GET &#39;index&#39; without scopes&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let!</span><span class="p">(</span><span class="ss">:application</span><span class="p">)</span> <span class="p">{</span> <span class="ss">Doorkeeper</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;MyApp&quot;</span><span class="p">,</span> <span class="n">redirect_uri</span><span class="p">:</span> <span class="s2">&quot;http://app.com&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">let!</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:normal_user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">let!</span><span class="p">(</span><span class="ss">:token</span><span class="p">)</span> <span class="p">{</span> <span class="ss">Doorkeeper</span><span class="p">:</span><span class="ss">:AccessToken</span><span class="o">.</span><span class="n">create!</span> <span class="n">application_id</span><span class="p">:</span> <span class="n">application</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">resource_owner_id</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">scopes</span><span class="p">:</span> <span class="s2">&quot;write&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">subject</span> <span class="p">{</span> <span class="n">response</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;valid token&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">get</span> <span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="ss">:json</span><span class="p">,</span> <span class="n">access_token</span><span class="p">:</span> <span class="n">token</span><span class="o">.</span><span class="n">token</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">be_success</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">its</span><span class="p">(</span><span class="ss">:status</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="mi">401</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">its</span><span class="p">(</span><span class="ss">:body</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="o">==</span> <span class="s2">&quot; &quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;POST &#39;create&#39;&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let!</span><span class="p">(</span><span class="ss">:application</span><span class="p">)</span> <span class="p">{</span> <span class="ss">Doorkeeper</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;MyApp&quot;</span><span class="p">,</span> <span class="n">redirect_uri</span><span class="p">:</span> <span class="s2">&quot;http://app.com&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">let!</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:normal_user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">let!</span><span class="p">(</span><span class="ss">:token</span><span class="p">)</span> <span class="p">{</span> <span class="ss">Doorkeeper</span><span class="p">:</span><span class="ss">:AccessToken</span><span class="o">.</span><span class="n">create!</span> <span class="n">application_id</span><span class="p">:</span> <span class="n">application</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">resource_owner_id</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">scopes</span><span class="p">:</span> <span class="s2">&quot;public write&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">subject</span> <span class="p">{</span> <span class="n">response</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;valid token&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">post</span> <span class="s1">&#39;create&#39;</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="ss">:json</span><span class="p">,</span> <span class="n">access_token</span><span class="p">:</span> <span class="n">token</span><span class="o">.</span><span class="n">token</span><span class="p">,</span> <span class="ss">post</span><span class="p">:</span> <span class="p">{</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;title&quot;</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="s2">&quot;some content&quot;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_success</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">its</span><span class="p">(</span><span class="ss">:status</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="mi">201</span><span class="p">)</span> <span class="p">}</span> <span class="c1"># 201 Created</span>
</span><span class='line'>      <span class="n">its</span><span class="p">(</span><span class="ss">:body</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="o">==</span> <span class="no">Post</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">to_json</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;invalid token&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">post</span> <span class="s1">&#39;create&#39;</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="ss">:json</span><span class="p">,</span> <span class="n">access_token</span><span class="p">:</span> <span class="n">token</span><span class="o">.</span><span class="n">token</span><span class="o">.</span><span class="n">succ</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">be_success</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">its</span><span class="p">(</span><span class="ss">:status</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="mi">401</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>scope 付き呼び出し</h2>

<p><code>devise</code>
の設定で
<code>omniauth</code>
の設定に
<code>scope</code>
を追加するだけです。</p>

<figure class='code'><figcaption><span>config/initializers/devise.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">omniauth</span> <span class="ss">:doorkeeper</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;DOORKEEPER_APP_ID&#39;</span><span class="o">]</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;DOORKEEPER_APP_SECRET&#39;</span><span class="o">]</span><span class="p">,</span> <span class="p">{</span> <span class="ss">scope</span><span class="p">:</span> <span class="s1">&#39;public write&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>rspec のところでもちょっと書きましたが、
区切りが <code>,</code> だとうまくいかないことがあったので、
スペース区切りにしています。</p>

<p>原因は
<a href="https://github.com/applicake/doorkeeper/blob/master/lib/doorkeeper/oauth/scopes.rb">lib/doorkeeper/oauth/scopes.rb</a>
で
<code>string.split</code>
のように無引数の
<code>String#split</code>
を使っているからではないかと推測していますが、確認はしていません。</p>

<h2>まとめ</h2>

<p><code>client_id</code> と <code>client_secret</code> と provider の URL はあらかじめ用意しておいて、
client 側の rails アプリに設定しておきます。</p>

<p><code>token</code>
は OAuth2 で取得したものを
<code>session</code>
やデータベースなどに保存しておいて使います。</p>

<p>必要なら
<code>scopes</code>
も設定できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails で assets を gem に入れる時の配置]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-03-rails-assets-in-gem.html"/>
    <updated>2013-10-03T10:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rails-assets-in-gem</id>
    <content type="html"><![CDATA[<p>昨日の記事で
<a href="https://rubygems.org/gems/jquery_mobile_rails">jquery_mobile_rails</a> 1.3.2
で画像ファイルが
<code>rake assets:precompile</code>
で処理されないという話を書きましたが、
<a href="http://rubygems.org/gems/jquery-ui-rails">jquery-ui-rails</a>
gem
などは Gemfile に足すだけで特に require などをしなくても
画像が処理されていたので違いを調べてみました。</p>

<!--more-->


<p>結論を先に書くと、
<code>jquery-ui-rails</code>
は
<code>app/assets/images/</code>
に画像ファイルを置いていたから処理されていて、
<code>jquery_mobile_rails</code>
は
<code>vendor/assets/images/</code>
に画像ファイルを置いていたから、
というのが原因でした。</p>

<p>自作の gem で
<code>app/assets/images/</code>
と
<code>vendor/assets/images/</code>
に画像を置いて rails 4.0.0 の
<code>rake assets:precompile</code>
で違いがあることを確認しています。</p>

<p><code>jquery_mobile_rails</code> の issues を確認すると
<a href="https://github.com/tscolari/jquery-mobile-rails/issues/16">In production, path to images is wrong</a>
という同じ問題に困っている話があったので、
コメントを付けておきました。</p>

<p>ちなみに
いくつか存在する jQuery Mobile の assets の中から
<code>jquery_mobile_rails</code>
を選んだ理由は新しいバージョンへの対応が一番早そうにみえたからです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jquery_mobile_rails と production 環境と画像ファイル]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-02-jquery-mobile-rails.html"/>
    <updated>2013-10-02T15:58:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/jquery-mobile-rails</id>
    <content type="html"><![CDATA[<p>rails 4.0.0
と
<a href="https://rubygems.org/gems/jquery_mobile_rails">jquery_mobile_rails</a> 1.3.2
で production 環境だと画像が表示されないという現象が起きていました。</p>

<p>2013-10-03 追記:
<code>jquery_mobile_rails</code> gem のファイル配置の問題もあるのかもしれません。
詳細は次の記事を参照してください。</p>

<!--more-->


<p><code>RAILS_ENV=production rake assets:precompile</code>
で調べてみると <code>public/assets/</code> 以下には
<code>jquery_mobile_rails</code> の画像は入っていませんでした。</p>

<p>いろいろ調べた結果、
<code>config.assets.precompile</code>
に
<code>*.gif</code>
と
<code>*.png</code>
を足せば良いとわかったので、
<code>jquery_mobile_rails</code>
用に
<code>application.css</code>
や
<code>application.js</code>
とは別に作成した
<code>mobile.css</code>
や
<code>mobile.js</code>
と合わせて、以下のように追加して解決しました。
<code>jquery_mobile_rails</code> 1.3.2
には
<code>*.jpg</code>
は入っていないのですが、
念のため追加しておきました。</p>

<figure class='code'><figcaption><span>config/environments/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="sx">%w( mobile.js mobile.css *.gif *.png *.jpg )</span>
</span></code></pre></td></tr></table></div></figure>


<p>この状態で再度
<code>RAILS_ENV=production rake assets:precompile</code>
で調べてみると <code>public/assets/</code>
は以下のようになっていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> ls public/assets/jquery-mobile
</span><span class='line'><span class="go">ajax-loader-5c6592c3263e7de88985668db733b08f.gif</span>
</span><span class='line'><span class="go">icons-18-black-dbc49700bc8bd5a9d3e0120cb111ea62.png</span>
</span><span class='line'><span class="go">icons-18-white-f8f5999f3ea0d9ebea6a4ec193442c1f.png</span>
</span><span class='line'><span class="go">icons-36-black-76b4944fda10128b365344f06377dad5.png</span>
</span><span class='line'><span class="go">icons-36-white-178cc38be265514b341e111ed7d38712.png</span>
</span></code></pre></td></tr></table></div></figure>


<p>rails 4 になって、ハッシュなしの
<code>ajax-loader.gif</code>
のようなファイルは作成されなくなっているので、
ちゃんと view の中では
<code>image_path</code>
を使ったり、
スタイルシートの中では
<code>image-url</code>
を使ったりしていないと
production
環境だけ問題がおきることがあるようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Mobile 1.3.2 の日本語化]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-01-jquery-mobile-l10n.html"/>
    <updated>2013-10-01T15:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/jquery-mobile-l10n</id>
    <content type="html"><![CDATA[<p>jQuery Mobile の l10n についてちゃんと調べたのでまとめておきます。
今回は日本語化だけですが、
翻訳対象は網羅できていると思います。</p>

<p>ちゃんと他の言語にも対応させるためには
<code>mobileinit</code>
の中で設定する文字列を別途 i18n 用の仕組みを用意して
翻訳し分けることになると思います。</p>

<!--more-->


<h2>mobileinit</h2>

<p>まず最初に注意すべき点として
<a href="http://api.jquerymobile.com/global-config/">Configuring Defaults | jQuery Mobile API Documentation</a>
にも書いてありますが、
 <code>mobileinit</code>
のイベントハンドラは
<code>jquery.mobile.js</code>
の読み込み前に設定しておく必要があります。
(<code>$</code> や <code>on</code> を使うので <code>jquery.js</code> よりは後にします。)</p>

<p>これを知らないと設定が反映されなくて悩むことになります。</p>

<p>rails 3.1 以降との組み合わせなら、例えば
<code>app/assets/javascripts/mobile.js</code>
に以下のように書いておいて、
<code>app/assets/javascripts/mobile/jqm_ja.js</code>
などにローカライズ用の
<code>mobileinit</code>
を書くということになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//= require jquery
</span><span class='line'>//= require jquery_ujs
</span><span class='line'>//= require_tree ./mobile
</span><span class='line'>//= require jquery.mobile</span></code></pre></td></tr></table></div></figure>


<p>例えば以下のような感じになります。</p>

<figure class='code'><figcaption><span>app/assets/javascripts/mobile/jqm_ja.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span> <span class="s">&quot;mobileinit&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="c1">#$.mobile.loadingMessageTextVisible = true</span>
</span><span class='line'>  <span class="c1">#$.mobile.loadingMessage = &quot;読み込み中...&quot;</span>
</span><span class='line'>  <span class="nv">$.mobile.loader.prototype.options.text = </span><span class="s">&quot;読み込み中です...&quot;</span>
</span><span class='line'>  <span class="nv">$.mobile.loader.prototype.options.textVisible = </span><span class="kc">false</span>
</span><span class='line'>  <span class="nv">$.mobile.pageLoadErrorMessage = </span><span class="s">&quot;読み込みに失敗しました。&quot;</span>
</span><span class='line'>  <span class="nv">$.mobile.page.prototype.options.backBtnText = </span><span class="s">&quot;戻る&quot;</span>
</span><span class='line'>  <span class="nv">$.mobile.listview.prototype.options.filterPlaceholder = </span><span class="s">&quot;検索...&quot;</span>
</span><span class='line'>  <span class="nv">$.mobile.table.prototype.options.columnBtnText = </span><span class="s">&quot;列の増減...&quot;</span>
</span><span class='line'>  <span class="nv">$.mobile.dialog.prototype.options.closeBtnText =</span>
</span><span class='line'>    <span class="nv">$.mobile.selectmenu.prototype.options.closeText = </span><span class="s">&quot;閉じる&quot;</span>
</span><span class='line'>  <span class="nv">$.mobile.collapsible.prototype.options.expandCueText = </span><span class="s">&quot;クリックで開く&quot;</span>
</span><span class='line'>  <span class="nv">$.mobile.collapsible.prototype.options.collapseCueText = </span><span class="s">&quot;クリックで閉じる&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Error Loading Page</h2>

<p>読み込みエラーの時のメッセージは
<code>$.mobile.pageLoadErrorMessage</code>
で設定できます。</p>

<p>いろいろな理由で表示されることが多いので、
真っ先に変更したくなるメッセージだと思います。</p>

<p>見た目は
<code>$.mobile.pageLoadErrorMessageTheme</code>
で変更できます。</p>

<h2>loading</h2>

<p>1.3.2 でしか確認していませんが、
jQuery Mobile 1.2 からは
<a href="http://api.jquerymobile.com/loader/">Loader Widget</a>
に変わっていて、
<code>$.mobile.loader.prototype.options.text</code>
で設定するようになっています。
ドキュメントによると、
メッセージの変更やテーマの変更以外にも
独自の HTML を表示するなど
いろいろとカスタマイズ出来るようです。</p>

<p><code>$.mobile.loader.prototype.options.textVisible</code>
で有効にした時だけ表示されるようなので、
不要なら無視しても良いかもしれません。</p>

<p>deprecated になっていますが、互換性のため、
<code>$.mobile.loadingMessage</code>
や
<code>$.mobile.loadingMessageTextVisible</code>
もまだ使えるようです。
(
<code>$.mobile.loader.prototype.options.text</code>
や
<code>$.mobile.loader.prototype.options.textVisible</code>
より優先されるようです。)</p>

<h2>pageloadfailed</h2>

<p>ローカライズとはちょっと離れて、
読み込みエラーのときに別処理をする方法を書いておきます。</p>

<p>devise の timeoutable を使っていると
普通の画面遷移をしようとしたときに
401 Unauthorized になることがあります。
そのときに読み込みエラーメッセージだけ出されても困るので、
<a href="http://api.jquerymobile.com/pageloadfailed/">pageloadfailed</a>
で認証画面に飛ぶためのリダイレクト処理を入れてみました。</p>

<p><code>event.preventDefault()</code>
を呼んでいないので、
<code>data.deferred</code>
の
<code>resolve()</code>
か
<code>reject()</code>
も呼ばず、
リダイレクト前のページの処理はデフォルトのままにしています。</p>

<figure class='code'><figcaption><span>app/assets/javascripts/mobile/pageloadfailed.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span> <span class="s">&quot;pageloadfailed&quot;</span><span class="p">,</span> <span class="nf">(event, data) -&gt;</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">data</span><span class="p">.</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">401</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nv">location.href = </span><span class="nx">data</span><span class="p">.</span><span class="nx">absUrl</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Back</h2>

<p><code>data-role="page"</code>
の要素に
<code>data-add-back-btn="true"</code>
を追加したときに
<a href="http://api.jquerymobile.com/header/">Header Widget</a>
に出てくる戻るボタンのテキストです。</p>

<p><code>$.mobile.page.prototype.options.backBtnText</code>
で設定できます。</p>

<h2>Filter items&hellip;</h2>

<p>ここからはページ全体ではなく
Widget ごとの翻訳の話になります。</p>

<p>まず
<a href="http://api.jquerymobile.com/listview/">Listview Widget</a>
で
<code>data-filter="true"</code>
の時に出てくる検索入力欄の placeholder のテキストです。</p>

<p>まとめてデフォルトを変更するには
今までのものと同様に
<code>mobileinit</code>
で
<code>$.mobile.listview.prototype.options.filterPlaceholder</code>
に設定します。</p>

<p>個別に変更するには
listview
に
<code>data-filter-placeholder</code>
属性を設定します。</p>

<p>この後のものも同様に全体のデフォルト設定を
<code>mobileinit</code>
で設定したり、
属性で個別に設定したりできます。</p>

<h2>Columns&hellip;</h2>

<p><a href="http://api.jquerymobile.com/table-columntoggle/">Column-Toggle Table Widget</a>
の列を増減させるポップアップを表示させるボタンのテキストです。</p>

<p><code>mobileinit</code>
で
<code>$.mobile.table.prototype.options.columnBtnText</code>
を設定するか、
<code>data-column-btn-text</code>
属性で設定します。</p>

<h2>Close</h2>

<p><a href="http://api.jquerymobile.com/dialog/">Dialog Widget</a>
の閉じるボタンのテキストは
<code>mobileinit</code>
で
<code>$.mobile.dialog.prototype.options.closeBtnText</code>
を設定するか、
<code>data-close-btn-text</code>
属性で設定します。</p>

<p>ダイアログの閉じるボタンはデフォルトではアイコンのみでテキストは表示されないのですが、
スクリーンリーダーで読み上げられるので、
アクセシビリティ的には重要と jQuery Mobile のドキュメントには書いてありました。</p>

<p>ドキュメントには書いてありませんが、
jQuery Mobile 1.3.2 のソースをみると
<a href="http://api.jquerymobile.com/selectmenu/">Selectmenu Widget</a>
の
Multiple selects
の閉じるボタンのテキストとして
<code>$.mobile.selectmenu.prototype.options.closeText</code>
も設定しておくと良さそうです。</p>

<h2>clear text</h2>

<p>検索入力はデフォルトで、
その他のテキスト入力では
<code>data-clear-btn=true</code>
の時に、
何かテキストを入力すると右に出てくるクリアボタンのオプションとして、
<code>data-clear-btn-text</code> があります。</p>

<p>これもデフォルトでは表示されず、スクリーンリーダーなどのアクセシビリティ用です。</p>

<p><code>$.mobile.textinput.prototype.options.clearBtnText</code>
でまとめて設定すれば良いと思います。</p>

<p><code>$.mobile.textinput.prototype.options.clearSearchButtonText</code>
という設定も残っていますが、
<code>deprecating for 1.3...</code>
とコメントに書いてあるので、
1.3 以降なら
<code>clearBtnText</code>
だけ設定しておけば良いと思います。</p>

<h2>click to expand contents, click to collapse contents</h2>

<p>最後に
<a href="http://api.jquerymobile.com/collapsible/">Collapsible Widget</a>
の翻訳です。</p>

<p>これもデフォルトでは表示されず、スクリーンリーダーなどのアクセシビリティ用です。</p>

<p>デフォルトが
<code>" click to expand contents"</code>
の方が
<code>$.mobile.collapsible.prototype.options.expandCueText</code>
や
<code>data-expand-cue-text</code>
で変更できて、
デフォルトが
<code>" click to collapse contents"</code>
の方が
<code>$.mobile.collapsible.prototype.options.collapseCueText</code>
や
<code>data-collapse-cue-text</code>
で変更できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[www.ruby-lang.org への pull request の出し方]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-30-how-to-pull-request.html"/>
    <updated>2013-09-30T22:43:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/how-to-pull-request</id>
    <content type="html"><![CDATA[<p><a href="https://www.ruby-lang.org/en/news/2013/09/23/ruby-2-1-0-preview1-is-released/">Ruby 2.1.0-preview1 is released</a>
というアナウンスが一週間経ってもまだ日本語訳が出来ていなかったので、
ちょっとの暇を見つけて pull request を出してみたので、
その手順をまとめておきます。</p>

<!--more-->


<p>まず github のアカウントは持っているというのは前提として話を進めます。</p>

<p>初回は
<a href="https://github.com/ruby/www.ruby-lang.org">https://github.com/ruby/www.ruby-lang.org</a>
の右上から自分のアカウントに Fork します。</p>

<p>すでに Fork していて二回目以降は upstream の変更を merge する必要があります。
<a href="https://help.github.com/articles/syncing-a-fork">Syncing a fork</a>
を参考にして merge します。</p>

<p>実行したコマンドだけまとめておきます。
詳細は github のヘルプを参照してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> git clone git@github.com:znz/www.ruby-lang.org.git
</span><span class='line'><span class="gp">%</span> <span class="nb">cd </span>www.ruby-lang.org
</span><span class='line'><span class="gp">%</span> git remote add upstream https://github.com/ruby/www.ruby-lang.org.git
</span><span class='line'><span class="gp">%</span> git remote -v
</span><span class='line'><span class="gp">%</span> git fetch upstream
</span><span class='line'><span class="gp">%</span> git branch -va
</span><span class='line'><span class="gp">%</span> git checkout master
</span><span class='line'><span class="gp">%</span> git merge upstream/master
</span><span class='line'><span class="gp">%</span> git push
</span></code></pre></td></tr></table></div></figure>


<p>英語版を元にして日本語版を作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> cp <span class="o">{</span>en,ja<span class="o">}</span>/news/_posts/2013-09-23-ruby-2-1-0-preview1-is-released.md
</span><span class='line'><span class="gp">%</span> git add ja/news/_posts/2013-09-23-ruby-2-1-0-preview1-is-released.md
</span><span class='line'><span class="gp">%</span> vi ja/news/_posts/2013-09-23-ruby-2-1-0-preview1-is-released.md
</span></code></pre></td></tr></table></div></figure>


<p>プレビュー用に <code>bundle install</code> します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> bundle install
</span><span class='line'><span class="gp">%</span> rake -T
</span><span class='line'><span class="gp">%</span> rake preview
</span></code></pre></td></tr></table></div></figure>


<p><code>rake preview</code>
でサーバーが起動しているので、
ブラウザで
<code>http://localhost:4000/</code>
を開いて表示を確認します。</p>

<p>github に push して、
ブラウザから pull request を出します。</p>

<p>ブランチを切り忘れていたので、
ここで作りました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> git checkout -b ruby210preview1
</span><span class='line'><span class="gp">%</span> git commit -av
</span><span class='line'><span class="gp">%</span> git push --set-upstream origin ruby210preview1
</span></code></pre></td></tr></table></div></figure>


<p>最後に
<code>git checkout master</code>
で master ブランチに戻るなり、
消してしまって、
また作業する時に clone し直すなりします。</p>
]]></content>
  </entry>
  
</feed>
