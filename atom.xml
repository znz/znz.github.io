<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ZnZ Blog]]></title>
  <link href="http://blog.n-z.jp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-09-12T23:16:50+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[td2planet を rubyforge から github に移行してリリース]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-12-td2planet.html"/>
    <updated>2013-09-12T22:43:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/td2planet</id>
    <content type="html"><![CDATA[<p>tDiary の日付ごとのまとまりを意識したフィードアグリゲータの td2planet を rubyforge から github に移行して、 ruby 2.0.0 対応を確認して、 0.3.0 としてリリースしました。</p>

<!--more-->


<h2>rubyforge から github への移行</h2>

<p>rubyforge は
<a href="http://rubyforge.org/scm/?group_id=3122">RubyForge: TD2Planet: SCM Repository</a>
に書いてあるように http か svn か svn+ssh でアクセス出来ますが、
今回は svn から取得したものを github に移行しました。</p>

<p>小さいレポジトリだったこともあり、手順としては以下のように単純に移行出来ました。</p>

<ol>
<li><code>git svn clone -s svn://rubyforge.org/var/svn/td2planet</code></li>
<li>github 上でレポジトリ作成</li>
<li><code>git remote add origin git@github.com:znz/td2planet.git</code></li>
<li><code>git push -u origin master</code></li>
</ol>


<h2>ruby 2.0.0 対応確認</h2>

<p>単純に README に書いてある <code>ruby -I lib bin/td2planet.rb config.yaml</code> で問題なく動きました。</p>

<p><a href="https://gist.github.com/unak/3038095">The History of Ruby</a>
によると作り始めた 2007 年はまだ 1.9.0 の開発中だったので、
その頃でも magic comment をちゃんと書いたり、
内部エンコーディングは UTF-8 に統一したりなどを
気をつけていれば、
ruby 自体の互換性は高いと言うことがわかります。</p>

<p>他には以下のような変更をしました。</p>

<ul>
<li><code>setup.rb</code> と関連する LGPL 削除など</li>
<li>README と README.ja に拡張子の <code>.rdoc</code> を追加</li>
<li>gemspec 更新

<ul>
<li>homepage を rubyforge から github に変更</li>
<li>README のファイル名変更対応</li>
<li>license 追加</li>
</ul>
</li>
<li>バージョン変更</li>
<li><code>-Ku</code> から ruby が 1.9 未満のときだけ <code>$KCODE</code> を設定に変更</li>
</ul>


<p><code>setup.rb</code> は ruby 1.9 以降に対応しているのかわからなかったのと、
ライセンスを MIT に統一するために削除しました。</p>

<h2>リリース</h2>

<p>別のリリース作業をした時に <code>~/.gem/credentials</code> は作成済みだったので、
リリースは以下の手順だけで出来ました。
<code>~/.gem/credentials</code> がまだないときは <code>gem push</code> の時に <code>rubygems.org</code> のアカウントか <code>rubyforge.org</code> のアカウントが必要になります。</p>

<ul>
<li><code>gem build *.gemspec</code></li>
<li><code>gem push *.gem</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% gem build *.gemspec
</span><span class='line'>  Successfully built RubyGem
</span><span class='line'>  Name: td2planet
</span><span class='line'>  Version: 0.3.0
</span><span class='line'>  File: td2planet-0.3.0.gem
</span><span class='line'>% gem push td2planet-0.3.0.gem
</span><span class='line'>Pushing gem to https://rubygems.org...
</span><span class='line'>Successfully registered gem: td2planet (0.3.0)</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[タグクラウドプラグインを入れた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-11-tagcloud.html"/>
    <updated>2013-09-11T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/tagcloud</id>
    <content type="html"><![CDATA[<p>探してみて見つけた中で今もちゃんとメンテナンスされてそうだった
<a href="https://github.com/tokkonopapa/octopress-tagcloud">Tag cloud plugin for Octopress</a>
を入れてタグクラウドが出るようにしてみました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[先月のイベントでの発表の記事を追加]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-10-add-old-posts.html"/>
    <updated>2013-09-10T21:39:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/add-old-posts</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2013-08-24-llmatsuri.html">LLまつり</a> と <a href="http://blog.n-z.jp/blog/2013-08-31-kansairubykaigi05.html">関西Ruby会議05</a> の記事を追加しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac で rabbit が動かなくなったので brew reinstall したら直った]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-09-rabbit-on-mac.html"/>
    <updated>2013-09-09T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rabbit-on-mac</id>
    <content type="html"><![CDATA[<p>いつの間にか動かなくなっていた rabbit (2.1.1) が <code>brew reinstall</code> で動くようになったという話です。</p>

<!--more-->


<p>現象としては rabbit のウィンドウが出てくるのに無反応で、スライドの内容も表示されないし、クリックにも反応せず、 <code>Ctrl+C</code> での停止もきかないので <code>kill -KILL</code> で強制終了するしかないという状態でした。</p>

<p>現象から考えて、リンクしているライブラリとの不整合が原因だろうと予想してインストール手順をやり直すことにしました。</p>

<p><a href="http://rabbit-shocker.org/ja/install/homebrew.html">Mac OS XでHomebrewを使ったインストール方法</a> の「brew install と brew link の実行」の手順を以下のようにちょっと変更してやり直したら動くようになりました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew reinstall cairo
</span><span class='line'>brew unlink cairo
</span><span class='line'>brew link cairo
</span><span class='line'>brew unlink pixman
</span><span class='line'>brew link --overwrite pixman
</span><span class='line'>brew reinstall pango
</span><span class='line'>brew reinstall gtk+
</span><span class='line'>brew reinstall poppler --with-glib</span></code></pre></td></tr></table></div></figure>


<p>これでも動かなければ gem も uninstall して install し直す予定でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress 始めました]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-08-octopress.html"/>
    <updated>2013-09-08T22:58:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/octopress</id>
    <content type="html"><![CDATA[<p>octopress で github pages を作ってみました。
インストール記事などは複数あるので気になった点を列挙するだけにします。</p>

<!--more-->


<ul>
<li>ruby のバージョン

<ul>
<li>2.0.0 ではなく 1.9.3 になっていたが、 github-pages という gem でわかるように github pages で使われているのが 1.9.3 のようなので、 1.9.3 を使うことにした。</li>
<li>後でわかったんですが、 octopress の場合はローカルで生成するようなので、 2.0.0 でも問題なく使えそうでした。</li>
<li><code>.ruby-version</code> に <code>1.9.3</code> とだけあって、 rbenv のパッチレベル付きのバージョンにマッチしなかったので、最初は <code>rbenv shell 1.9.3-p448</code> で作業していました。 (後で <code>rbenv local 1.9.3-p448</code> にしました。)</li>
</ul>
</li>
<li>使い始め

<ul>
<li><code>git clone git://github.com/imathis/octopress.git octopress</code></li>
<li><code>cd octopress</code></li>
<li><code>rake setup_github_pages</code>

<ul>
<li><code>Repository url: git@github.com:znz/znz.github.io</code></li>
</ul>
</li>
<li><code>_config.yml</code> を設定</li>
<li><code>rake install</code></li>
<li><code>_config.yml</code> を設定</li>
<li><code>rake deploy</code></li>
<li><code>rake new_post</code>

<ul>
<li><code>Enter a title for your post:</code> ときいてくるので <code>rake new_post[title]</code> よりも楽</li>
</ul>
</li>
<li><code>rake preview</code> で確認しながら書く</li>
<li><code>rake gen_deploy</code>

<ul>
<li><code>rake generate</code> 相当がないと変更が反映されない (<code>_config.yml</code> を変更したときなど)</li>
</ul>
</li>
</ul>
</li>
<li><code>CNAME</code>

<ul>
<li>octopress 側では <code>source/CNAME</code> に置く必要がありました。</li>
</ul>
</li>
<li>Excerpts

<ul>
<li><a href="http://octopress.org/docs/blogging/plugins/">http://octopress.org/docs/blogging/plugins/</a> にあるように <code>&lt;!--more--&gt;</code> と書いておくとトップに表示される内容を最初の方だけに出来ました。</li>
</ul>
</li>
<li>ブランチ

<ul>
<li>手元では source ブランチで作業するようになっていて、 github pages へ deploy される master ブランチは <code>_deploy</code> ディレクトリにある別レポジトリにありました。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac で rabbiter が動いた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-08-rabbiter-on-mac.html"/>
    <updated>2013-09-08T21:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rabbiter-on-mac</id>
    <content type="html"><![CDATA[<p>homebrew を使った Mac OS X 10.8.4 環境で rabbiter (2.0.1) が動くようになりました。</p>

<!--more-->


<p>rabbiter の issues に報告していた
<a href="https://github.com/rabbit-shocker/rabbiter/issues/1">show_uri の問題</a>
と
<a href="https://github.com/rabbit-shocker/rabbiter/issues/2">glib-networking のルート証明書の問題</a>
が解決したので、 <code>glib-networking</code> を <code>brew reinstall glib-networking --with-curl-ca-bundle</code> でインストールすれば使えるようになりました。
ちなみに、初回のインストールでも <code>brew install</code> ではなく <code>brew reinstall</code> で大丈夫のようです。</p>

<p>以下のように <code>configure</code> に <code>--with-ca-certificates</code> が付いていれば使えます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% brew reinstall glib-networking --with-curl-ca-bundle
</span><span class='line'>==&gt; Reinstalling glib-networking --with-curl-ca-bundle
</span><span class='line'>==&gt; Downloading http://ftp.gnome.org/pub/GNOME/sources/glib-networking/2.36/glib-networkin
</span><span class='line'>Already downloaded: /Library/Caches/Homebrew/glib-networking-2.36.2.tar.xz
</span><span class='line'>==&gt; ./configure --with-ca-certificates=/usr/local/opt/curl-ca-bundle/share/ca-bundle.crt -
</span><span class='line'>==&gt; make install
</span><span class='line'>🍺  /usr/local/Cellar/glib-networking/2.36.2: 68 files, 352K, built in 18 seconds</span></code></pre></td></tr></table></div></figure>


<p>以下のように <code>configure</code> に <code>--without-ca-certificates</code> と付いているときは rabbiter が使えません。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% brew reinstall glib-networking
</span><span class='line'>==&gt; Reinstalling glib-networking
</span><span class='line'>==&gt; Downloading http://ftp.gnome.org/pub/GNOME/sources/glib-networking/2.36/glib-networkin
</span><span class='line'>Already downloaded: /Library/Caches/Homebrew/glib-networking-2.36.2.tar.xz
</span><span class='line'>==&gt; ./configure --without-ca-certificates --prefix=/usr/local/Cellar/glib-networking/2.36.
</span><span class='line'>==&gt; make install
</span><span class='line'>🍺  /usr/local/Cellar/glib-networking/2.36.2: 68 files, 352K, built in 21 seconds</span></code></pre></td></tr></table></div></figure>


<p>一度 <code>--with-curl-ca-bundle</code> 付きでインストールした後だと、以下のようにオプションなしの reinstall でもオプションが付くようです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% brew reinstall glib-networking
</span><span class='line'>==&gt; Reinstalling glib-networking --with-curl-ca-bundle
</span><span class='line'>==&gt; Downloading http://ftp.gnome.org/pub/GNOME/sources/glib-networking/2.36/glib-networkin
</span><span class='line'>Already downloaded: /Library/Caches/Homebrew/glib-networking-2.36.2.tar.xz
</span><span class='line'>==&gt; ./configure --with-ca-certificates=/usr/local/opt/curl-ca-bundle/share/ca-bundle.crt -
</span><span class='line'>==&gt; make install
</span><span class='line'>🍺  /usr/local/Cellar/glib-networking/2.36.2: 68 files, 352K, built in 18 seconds</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[関西Ruby会議05で migrate to magazine.rubyist.net という発表をしました]]></title>
    <link href="http://blog.n-z.jp/blog/2013-08-31-kansairubykaigi05.html"/>
    <updated>2013-08-31T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansairubykaigi05</id>
    <content type="html"><![CDATA[<p><a href="http://regional.rubykaigi.org/kansai05">関西Ruby会議05</a> というイベントで
「migrate to magazine.rubyist.net」というタイトルで、
<a href="http://jp.rubyist.net/magazine/">http://jp.rubyist.net/magazine/</a> から <a href="http://magazine.rubyist.net/">http://magazine.rubyist.net/</a> への移行で何をしたのか、そして何がまだ出来ていないのか、ということについて話しました。</p>

<!--more-->


<p>スライドは <a href="http://slide.rabbit-shocker.org/authors/znz/migrate-rubima-2013/">http://slide.rabbit-shocker.org/authors/znz/migrate-rubima-2013/</a> や slideshare で公開しています。
スライドのソースも <a href="https://github.com/znz/migrate-rubima-2013">https://github.com/znz/migrate-rubima-2013</a> で公開しています。</p>

<p>朝は JR の遅延の影響で開始が遅れていました。
自分の発表も20分の枠の予定だったのに、後で確認してみると25分ぐらいになってしまっていたようでした。</p>

<p>自分の発表の後は座っていたのが前の方だったり、ゆっくり聞けたりしたので、非常に楽しめました。
「じこはおこるさ」の上映があったり、スイーツタイムというおやつの時間があったのが独特な感じでした。</p>

<p>内容では、発表するのは「売名行為」で懇親会とかでのぼっちの可能性を減らすためとか「睡眠重要。寸暇を惜しんで寝る。」とかが特に印象深かったです。</p>

<h2>slideshare</h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/25754630" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/znzjp/migrate-rubima-2013" title="migrate to magazine.rubyist.net" target="_blank">migrate to magazine.rubyist.net</a> </strong> from <strong><a href="http://www.slideshare.net/znzjp" target="_blank">Kazuhiro Nishiyama</a></strong> </div></p>

<h2>Rabbit SlideShow</h2>

<iframe src="http://slide.rabbit-shocker.org/authors/znz/migrate-rubima-2013/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="http://slide.rabbit-shocker.org/authors/znz/migrate-rubima-2013/" title="migrate to magazine.rubyist.net">migrate to magazine.rubyist.net</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LLまつりでLTしました]]></title>
    <link href="http://blog.n-z.jp/blog/2013-08-24-llmatsuri.html"/>
    <updated>2013-08-24T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/llmatsuri</id>
    <content type="html"><![CDATA[<p><a href="http://ll.jus.or.jp/2013/">LLまつり</a> で「シェルスクリプトで簡易ping監視」というタイトルでライトニングトークをしてきました。</p>

<!--more-->


<p>スライドは <a href="http://slide.rabbit-shocker.org/authors/znz/simple-ping-summary/">http://slide.rabbit-shocker.org/authors/znz/simple-ping-summary/</a> や slideshare で公開しています。
スライドのソースも <a href="https://github.com/znz/simple-ping-summary-slide">https://github.com/znz/simple-ping-summary-slide</a> で公開しています。</p>

<p>監視プログラム自体は <a href="https://github.com/znz/simple-ping-summary">https://github.com/znz/simple-ping-summary</a> で公開しています。</p>

<h2>バージョンソート</h2>

<p><a href="http://linuxjm.sourceforge.jp/html/GNU_coreutils/man1/sort.1.html">GNU coreutils の sort</a>
や
<a href="http://linuxjm.sourceforge.jp/html/GNU_coreutils/man1/ls.1.html">ls</a>
にバージョンソートという機能があるのですが、
それが IPv4 アドレスのソートにも使えるということが
一番言いたかったことでした。</p>

<h2>画像生成</h2>

<p>画像を作成する時はテキストエディタで作成出来る XBM や XPM を使うことが多いのですが、
後で twitter の反応を確認してみると SVG という案もあったようなので、
機会があれば使ってみたいと思いました。</p>

<h2>会場での実行結果</h2>

<p>最後にデモとしてちょっと見せようとして、説明は間に合わなかったLLまつりの会場でのデータは <a href="https://github.com/znz/simple-ping-summary/tree/llmatsuri">llmatsuri ブランチ</a> にあるので <code>git clone https://github.com/znz/simple-ping-summary</code> して <code>git checkout llmatsuri</code> で <code>llmatsuri</code> ブランチに切り替えて <code>_img/summary.html</code> を開くと見えます。
発表後のデータもあるので、ちらっと見せたものよりちょっと増えています。</p>

<p>会場では一般の PC などが対象なので、監視対象になることが前提で PING 応答が許可されているルーターとは違って、 DHCP で IP アドレスが割り当てられていても応答がないことが多いので、結構歯抜けになっています。</p>

<p>DHCP の割り当て範囲がどうなっていたのかわからなかったので、対象は適当な範囲だったのですが、 <a href="https://github.com/znz/simple-ping-summary/blob/llmatsuri/_img/192.168.4/20130824.png">192.168.4.1から254の範囲の結果</a> をみると、徐々にこの範囲の割り当てが増えていっていると推測出来そうです。</p>

<h2>slideshare</h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/25545146" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/znzjp/simple-ping-summary" title="シェルスクリプトで簡易ping監視" target="_blank">シェルスクリプトで簡易ping監視</a> </strong> from <strong><a href="http://www.slideshare.net/znzjp" target="_blank">Kazuhiro Nishiyama</a></strong> </div></p>

<h2>Rabbit SlideShow</h2>

<iframe src="http://slide.rabbit-shocker.org/authors/znz/simple-ping-summary/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="http://slide.rabbit-shocker.org/authors/znz/simple-ping-summary/" title="シェルスクリプトで簡易ping監視">シェルスクリプトで簡易ping監視</a>
</div>



]]></content>
  </entry>
  
</feed>
