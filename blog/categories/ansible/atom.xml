<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ansible | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ansible/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2018-02-01T23:45:50+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ansibleでjsonファイルの設定を更新した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-16-ansible-json.html"/>
    <updated>2017-06-16T21:26:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-json</id>
    <content type="html"><![CDATA[<p>ansible で json ファイル (今回は <code>/etc/docker/daemon.json</code>) を更新したかったのですが、 <code>lineinfile</code> や <code>replace</code> や <code>ini_file</code> のように単独のモジュールで簡単にできるものではなかったので、少し工夫をして実現しました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>ansible 2.3.1.0</li>
</ul>


<p>combine フィルター (後述) が New in version 2.0 なので、 1.x では動かないと思います。</p>

<h2>実例</h2>

<p><a href="https://github.com/znz/ansible-role-docker">https://github.com/znz/ansible-role-docker</a> や <a href="https://github.com/znz/ansible-playbook-gitlab-dokku/tree/master/provision/roles/docker-dns">https://github.com/znz/ansible-playbook-gitlab-dokku/tree/master/provision/roles/docker-dns</a> にあります。</p>

<h2>json ファイル読み込み</h2>

<p>まずは <code>command</code> モジュールで読み込んで、 <code>set_fact</code> で変数に設定しておきます。</p>

<pre><code>- name: "Read daemon.json"
  command: cat /etc/docker/daemon.json
  register: result
  changed_when: no
</code></pre>

<p>記事を書いていて気づいたのですが、リモートからファイルを読み込むには <code>slurp</code> モジュールというのがあるようですが、作った時点では知らなかったので、使っていません。</p>

<p>base64 でエンコードされていて b64decode を通す必要があるようなので、何度も参照するなら、次の <code>set_fact</code> を組み合わせた方が良さそうなのは変わらなさそうです。</p>

<h2>json から dict に変換</h2>

<p>json の文字列から <a href="http://docs.ansible.com/ansible/playbooks_filters.html#filters-for-formatting-data"><code>from_json</code>フィルター</a>で変換します。</p>

<p></p>

<pre><code>- set_fact: docker_daemon_json="{{ result.stdout | from_json }}"
</code></pre>

<p></p>

<h2>combine フィルターでマージ</h2>

<p><a href="http://docs.ansible.com/ansible/playbooks_filters.html#combining-hashes-dictionaries"><code>combine</code>フィルター</a>で設定をマージして、 <code>to_json</code> フィルターで json 文字列に変換してファイルに書き出します。</p>

<p>今回の用途では、ネストしたデータは考慮する必要がなく、トップレベルのキーが一致するもので置き換えられればよかったので、 <code>recursive=True</code> は指定していません。</p>

<p><code>when</code> でのチェックもしておかないと、設定内容としては変わっていないのに、 json 文字列になった時にキーの順番が変わっているのか、 changed になってしまうことがあったので、 <code>when</code> で設定内容に変更がある時だけ書き込むようにしています。</p>

<pre><code>- name: "Update daemon.json"
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0400
  when: "docker_daemon_json != docker_daemon_json|combine({'dns':dns})"
  notify:
  - restart docker
</code></pre>

<p>templates/daemon.json.j2:</p>

<p></p>

<pre><code>{{ docker_daemon_json | combine({"dns": dns}) | to_json }}
</code></pre>

<p></p>

<h2>動作確認</h2>

<p>全体ができた後に、</p>

<ul>
<li>ファイルがない時の動作</li>
<li>設定が変わらない時の動作</li>
<li>設定が変わる時の動作</li>
</ul>


<p>も確認しておきます。</p>

<h2>docker のデーモン設定ファイル</h2>

<p>docker の<a href="http://docs.docker.jp/engine/reference/commandline/dockerd.html#daemon-configuration-file">デーモン設定ファイル</a>は <code>insecure-registries</code> (<code>--insecure-registry=[]</code>) や <code>dns</code> や <code>bip</code> など dockerd のオプションで指定できるものはなんでも指定できます。</p>

<p><a href="http://docs.docker.jp/engine/admin/systemd.html#custom-docker-daemon-options">docker デーモンのオプション変更</a>は systemd の docker.service の設定を変更する方法もあるようですが、ローカルの変更をローカルの独立ファイルに隔離できて、バージョンアップの影響も少なそうなので、 daemon.json を使うことにしました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible で role を新規作成して ansible galaxy で公開して更新した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-03-ansible-galaxy-new-role.html"/>
    <updated>2017-06-03T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-galaxy-new-role</id>
    <content type="html"><![CDATA[<p>ansible で role を新規作成して ansible galaxy で公開して更新するときにやっているいつもの手順を紹介します。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ansible 2.3.0.0</li>
</ul>


<h2>ansible-galaxy init</h2>

<p><code>ansible-galaxy init</code> でファイルを作成します。</p>

<pre><code>% ansible-galaxy init ansible-role-unattended-upgrades
- ansible-role-unattended-upgrades was created successfully
% cd ansible-role-unattended-upgrades
% find . -type f | sort
./README.md
./defaults/main.yml
./handlers/main.yml
./meta/main.yml
./tasks/main.yml
./tests/inventory
./tests/test.yml
./vars/main.yml
</code></pre>

<p><code>tests</code> は使い方がよくわからないのですが、そのままにしています。</p>

<h2>LICENSE 作成</h2>

<p>すでに作成済みの role から The MIT License (MIT) のファイルをコピーしてきました。
新規の場合は github に push した後にブラウザーから作成するのが簡単だと思います。</p>

<h2>README 更新</h2>

<p>ここで自分の他の role を参考に書き換えました。</p>

<h2>vars 削除</h2>

<p>上書きしやすいように、 <code>defaults/main.yml</code> しか使っていないので <code>vars/main.yml</code> は削除しました。</p>

<pre><code>% rm -r vars
</code></pre>

<h2>中身作成</h2>

<p><code>tasks</code>, <code>defaults</code>, <code>handlers</code>, <code>files</code>, <code>templates</code> などのディレクトリを使って作成します。</p>

<h2>meta/main.yml 更新</h2>

<p><code>meta/main.yml</code> を更新します。
<code>galaxy_tags</code> は <a href="https://galaxy.ansible.com/">https://galaxy.ansible.com/</a> の browse roles を参考にして適当に選んでいます。</p>

<h2>examples</h2>

<p>テスト用に vagrant で serverspec を動かせるように <code>examples</code> を入れています。
どうするのが良いのかわかっていないのですが、とりあえず全くテストしないよりはましなので、こういう方法をとっています。</p>

<p><code>debian/wheezy64</code> の box は synced folder が rsync なのでシンボリックリンクのループでエラーになってしまうので、 <code>vagrant up wheezy64</code>, <code>vagrant provision wheezy64</code>, <code>rake spec:wheezy64</code> のように provision を別途実行しないといけないのが不便なのですが、 <a href="https://atlas.hashicorp.com/debian/">https://atlas.hashicorp.com/debian/</a> には VirtualBox Guest Addition が入った box が <code>debian/contrib-jessie64</code> しかないので、今のところ wheezy と stretch ではどうしようもなさそうです。</p>

<p>テストに使った VM はディスクの無駄なので、こまめに vagrant destroy しています。</p>

<h2>git push</h2>

<p><code>basename $(pwd) | pbcopy</code> した名前で github に repository を作成します。
タグもうっておきます。</p>

<pre><code>git remote add origin git@github.com:znz/ansible-role-unattended-upgrades.git
git push -u origin master
git tag v1.0.0
git push --tags
</code></pre>

<h2>ansible galaxy に反映</h2>

<p>github 連携でログインして、 my roles を開きます。</p>

<p>Search Roles の入力欄の右にあるボタンをクリックして refresh して github の新しい repository を表示させます。
(たぶん <code>meta/main.yml</code> をチェックして一覧に出すかどうか決めているのだと思います。)</p>

<p>追加した role を有効にします。
Role Settings を開くとわかるのですが、なぜか Role Name は自動的に <code>ansible-role-</code> がとれて <code>unattended-upgrades</code> になっています。</p>

<h2>role の更新</h2>

<p>role を更新したら <a href="http://semver.org/lang/ja/">セマンティック バージョニング</a> にそってバージョン番号をあげて、タグをうって push しておきます。</p>

<p>my roles のページで該当する role の行の一番右にある Import Role をクリックすると新しいタグが反映されます。
(role 個別ページには該当する操作はなさそうです。)</p>

<h2>まとめ</h2>

<p>ansible で新規 role を作成して、 github と ansible galaxy で公開して更新しているときにやっている手順を紹介しました。</p>

<p>昔は ansible-galaxy で role を取ってくるのに ansible galaxy への登録が必須だったので登録していたのですが、最近は他の人が role を作るときに参考になるかもと思って登録しています。
あまり汎用性のない自分用の role の場合は github だけに登録して YAML ファイルで</p>

<pre><code>- src: https://github.com/znz/ansible-role-nadoka
  version: master
  name: znz.nadoka
</code></pre>

<p>のように指定して使っていたり (この場合でも meta/main.yml は必要)、 playbook 用の repository の role 以下にそのまま入れていたり (この場合は meta/main.yml は不要) します。</p>

<p>複数 role を登録していて、こういうフローで作業をしている人もいるということで、参考になれば幸いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible-galaxy用のroleにversionを付ける]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-19-ansible-galaxy-version.html"/>
    <updated>2014-07-19T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-galaxy-version</id>
    <content type="html"><![CDATA[<p><a href="https://galaxy.ansible.com/" title="Ansible Galaxy">Ansible Galaxy</a>
に登録されている role を使う時にバージョンを指定する方法は書いてあるのに、
自分で登録した role にバージョンを付ける方法がわからなかったので、
既にバージョンが付いているものを参考にして調べてみました。</p>

<!--more-->


<h2>結論</h2>

<p><a href="https://galaxy.ansible.com/intro">Ansible Galaxy の intro</a>
の最後の方に
「If you have applied any tags in your repo, Ansible Galaxy will automatically make a “version” object for each tag. This means users will be able to choose which version (tag) to download.」
と書いてあるように github で tag (release) を作るだけでした。</p>

<h2>バージョンの命名規則</h2>

<p>同じページのバージョン指定の例が</p>

<pre><code>user1.role1,v1.0.0
user2.role2,v0.5
...
</code></pre>

<p>となっているので、頭に <code>v</code> を付けて <code>v0.1.2</code> のようなバージョンの付け方にするのが良さそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible使いのためのYAML入門]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-21-ansible-yaml.html"/>
    <updated>2014-06-21T20:39:38+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-yaml</id>
    <content type="html"><![CDATA[<p>ansible の設定ファイルは YAML なのですが、
ansible の説明では YAML 由来のいろんな書き方についてはあまり説明がないので、
ansible の設定ファイルを書く時に知っておくと便利な YAML の知識についてまとめてみました。</p>

<!--more-->


<h2>YAML のバージョン</h2>

<p><a href="http://yaml.org/" title="The Official YAML Web Site">The Official YAML Web Site</a>
によると YAML の仕様としては
YAML 1.2 (3rd Edition)
まで存在するようですが、
ansible は PyYaml を使っていて、
libyaml binding なので
対応している YAML のバージョンは
<a href="http://yaml.org/spec/1.1/">YAML 1.1 (2nd Edition)</a>
になります。</p>

<h2>コレクション</h2>

<p>参考: <a href="http://yaml.org/spec/1.1/#id857181" title="2.1. Collections">2.1. Collections</a></p>

<h3>配列</h3>

<p><code>-</code> で列挙すると配列になります。
YAML は空白に敏感なので、
<code>-foo</code> のように書くとエラーになります。</p>

<pre><code class="yaml">    - foo
    - bar
</code></pre>

<h3>マッピング</h3>

<p>プログラミング言語によってはハッシュとか連想配列とか言われているデータ構造です。
キーと値を <code>:</code> (コロンとスペース) で区切ります。</p>

<p>読みやすくするために <code>:</code> の前後の空白を増やしても良いようです。</p>

<pre><code class="yaml">    foo:  bar
    hoge: fuga
    bar : baz
</code></pre>

<h3>マッピングと配列</h3>

<p>マッピングの値に配列を入れるとき</p>

<pre><code class="yaml">    roles:
      - foo
      - bar
</code></pre>

<p>のようにインデントするのが普通のようですが、</p>

<pre><code class="yaml">    roles:
    - foo
    - bar
</code></pre>

<p>のようにインデントせずに配列を書いても大丈夫です。</p>

<p>インデントを浅くできるので、個人的にはこの書き方を多用しています。</p>

<h3>フロースタイル</h3>

<p>フロースタイルというコンパクトな書き方も出来ます。
ansible の設定ファイルでは見覚えがないのですが、
知っておくと見た時に悩まなくて済むと思います。</p>

<p><a href="http://yaml.org/spec/1.1/#id857181" title="2.1. Collections">2.1. Collections</a>
の <code>Example 2.5. Sequence of Sequences</code> や <code>Example 2.6. Mapping of Mappings</code> を参考にしてみてください。</p>

<h2>構造</h2>

<p>参考: <a href="http://yaml.org/spec/1.1/#id857577" title="2.2. Structures">2.2. Structures</a></p>

<h3>ファイル冒頭の <code>---</code></h3>

<p>YAML ファイルの頭に <code>---</code> が入っていることがありますが、
これは複数 YAML ドキュメントを YAML ストリームとしてまとめるときに
YAML ドキュメントの開始部分を示すのに使うようです。</p>

<p>ansible などの用途では YAML ストリームは使わないので、
あってもなくても良いと思います。</p>

<p>迷うなら付けておけば YAML ファイルということがちょっとわかりやすくなると思います。</p>

<pre><code class="console">    % cat example.yml
    ---
    foo: bar
    ---
    hoge: fuga
    % ruby -r yaml -r pp -e 'pp YAML.load(ARGF)' example.yml
    {"foo"=&gt;"bar"}
    % ruby -r yaml -r pp -e 'pp YAML.load_stream(ARGF)' example.yml
    [{"foo"=&gt;"bar"}, {"hoge"=&gt;"fuga"}]
</code></pre>

<h3>コメント</h3>

<p><code>#</code> から行末までがコメントです。
行頭以外からでもコメントになります。</p>

<pre><code class="yaml">    foo: # ここはコメント
      - bar
    hoge:
      # ここもコメント
      - fuga
</code></pre>

<h2>スカラー値</h2>

<p>参考: <a href="http://yaml.org/spec/1.1/#id858081" title="2.3. Scalars">2.3. Scalars</a></p>

<h3>リテラル形式と折り返し形式</h3>

<p><code>|</code> を使うと literal style で改行をそのまま使った文字列を指定できます。
ansible の設定では shell と組み合わせに便利です。</p>

<p><a href="https://github.com/znz/ansible-role-rbenv/blob/7fceb7b4f5155ba385d88cdcaf436ecd84238aca/tasks/rbenv.yml">https://github.com/znz/ansible-role-rbenv/blob/7fceb7b4f5155ba385d88cdcaf436ecd84238aca/tasks/rbenv.yml</a>
では以下のように <code>creates=</code> によるガード条件を最初の行に書いて、
次の行からシェルスクリプトの内容を書いています。</p>

<pre><code class="yaml">    - name: rbenv install 
      shell: |
       creates=/versions/
       set -e
       . /etc/profile.d/rbenv.sh
       export CONFIGURE_OPTS="--disable-install-doc"
       rbenv install 
       rbenv global 
</code></pre>

<p><code>&gt;</code> を使うと folded style になります。
literal style と違って改行も普通の空白に置き換えられるので、
ansible の設定ファイルでは使ったことがありません。</p>

<p>上の例からわかるように YAML としては <code>creates=</code> も文字列の一部で、
その文字列の一部をガード条件として解釈しているのは ansible の方になります。</p>

<h2>真偽値</h2>

<p>ansible の playbook ファイルで
<code>sudo: yes</code> だったり
<code>sudo: True</code> だったり
いくつかの書き方がありますが、
すべて YAML の解釈の時点で真偽値になっています。</p>

<p>以下の例では大文字小文字の差が多いので、フロースタイルでまとめています。</p>

<pre><code class="console">    % cat example.yml
    ---
    - [true, True, TRUE]
    - [false, False, FALSE]
    - [yes, Yes, YES]
    - [no, No, NO]
    - [on, On, ON]
    - [off, Off, OFF]
    % ruby -r yaml -r pp -e 'pp YAML.load(ARGF)' example.yml
    [[[true, true, true],
      [false, false, false],
      [true, true, true],
      [false, false, false],
      [true, true, true],
      [false, false, false]]]
</code></pre>

<h2>文字列として解釈させる</h2>

<p>以上のように元に文字列以外として解釈される可能性があると文字列として指定したい時に困るので、
そういうときは <code>""</code> などでくくっておくか、
<code>!!str</code> で明示的に文字列型ということを指定します。</p>

<pre><code class="console">    % cat /tmp/example.yml
    ---
    - "true"
    - 'false'
    - !!str yes
    % ruby -r yaml -r pp -e 'pp YAML.load(ARGF)' /tmp/example.yml
    ["true", "false", "yes"]
</code></pre>

<h2>まとめ</h2>

<p>ansible の設定ファイルを書く時に、自分が困ったり悩んだことを中心にまとめてみました。
同じようなことで悩んだり、どうすればいいのか困った時に参考にしてみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible-galaxy を使ってみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-02-ansible-galaxy.html"/>
    <updated>2014-06-02T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-galaxy</id>
    <content type="html"><![CDATA[<p>ansible の複数の playbook で role を共有するのに
<a href="https://galaxy.ansible.com/">Ansible Galaxy</a>
はどうだろうと思って登録してみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>ansible 1.6.2</li>
</ul>


<h2>アカウント登録</h2>

<p>後で github から role を import するということもあって、
github 連携でアカウントを登録しました。</p>

<p>アカウントは4文字以上必須ということで <code>znzj</code> にしました。
(<a href="https://index.docker.io/">docker index</a> とか
<a href="https://vagrantcloud.com/">Vagrant Cloud</a> とか
最近は4文字以上必須が多いのでしょうか?)</p>

<h2>role を github に公開</h2>

<p><code>ansible-galaxy init ansible-role-ja_jp</code> でひな形を作成して、
<code>provisioning/roles/ja_jp</code> というディレクトリの中身だったものを移行して
<a href="https://github.com/znz/ansible-role-ja_jp">https://github.com/znz/ansible-role-ja_jp</a> として公開しました。</p>

<p>apt のミラーサイトとして日本のミラーを使ったり、日本語 locale にしたり、タイムゾーンを JST にしたりする role です。</p>

<h2>Ansbile Galaxy に role を追加</h2>

<p>ログインした状態だと右上の方に出てくる <code>Add a Role</code> というリンクから登録します。</p>

<ul>
<li>Github Username/Account : znz</li>
<li>Github Repository : ansible-role-ja_jp</li>
<li>Alternate Name : ja_jp</li>
</ul>


<p>という内容で登録したところ、
<a href="https://galaxy.ansible.com/list#/roles/967">https://galaxy.ansible.com/list#/roles/967</a>
で見えるようになりました。</p>

<p>URL をみるとわかるように JavaScript オフだと個別の role は見えません。
ちょっと試した感じだと代用の URL も見つけられませんでした。</p>

<h2>動作確認</h2>

<p><code>ansible-galaxy install znzj.ja_jp</code> だと <code>/usr/local/etc/ansible/roles/znzj.ja_jp</code> にインストールされてしまった (Homebrew でインストールした ansible を使っている場合) ので、
<code>ansible-galaxy install --roles-path ./roles znzj.ja_jp</code>
でカレントディレクトリの中にインストールし直しました。</p>

<h2>感想</h2>

<p>これだけだと git submodule に比べて利点が見えてこないのですが、
依存関係やバージョン指定をちゃんと使えれば便利そうに思いました。</p>

<p>自分が登録した role にバージョンを指定する方法がわからず、
今のところバージョンなしのままなので、どうにかしたいです。</p>

<h2>参考サイト</h2>

<ul>
<li><a href="http://qiita.com/kiri/items/f329a35543022d6e45d0">AnsibleWorks Galaxyにroleを登録してみる - Qiita</a>

<ul>
<li>スクリーンショットをみると AnsibleWorks Galaxy になっているところが今は Ansible Galaxy なので、いつの間にか名前が変わっているようです。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
