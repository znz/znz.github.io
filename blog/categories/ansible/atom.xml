<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ansible | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ansible/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-08-11T19:55:50+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ansible-galaxy用のroleにversionを付ける]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-19-ansible-galaxy-version.html"/>
    <updated>2014-07-19T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-galaxy-version</id>
    <content type="html"><![CDATA[<p><a href="https://galaxy.ansible.com/" title="Ansible Galaxy">Ansible Galaxy</a>
に登録されている role を使う時にバージョンを指定する方法は書いてあるのに、
自分で登録した role にバージョンを付ける方法がわからなかったので、
既にバージョンが付いているものを参考にして調べてみました。</p>

<!--more-->


<h2>結論</h2>

<p><a href="https://galaxy.ansible.com/intro">Ansible Galaxy の intro</a>
の最後の方に
「If you have applied any tags in your repo, Ansible Galaxy will automatically make a “version” object for each tag. This means users will be able to choose which version (tag) to download.」
と書いてあるように github で tag (release) を作るだけでした。</p>

<h2>バージョンの命名規則</h2>

<p>同じページのバージョン指定の例が</p>

<pre><code>user1.role1,v1.0.0
user2.role2,v0.5
...
</code></pre>

<p>となっているので、頭に <code>v</code> を付けて <code>v0.1.2</code> のようなバージョンの付け方にするのが良さそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible使いのためのYAML入門]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-21-ansible-yaml.html"/>
    <updated>2014-06-21T20:39:38+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-yaml</id>
    <content type="html"><![CDATA[<p>ansible の設定ファイルは YAML なのですが、
ansible の説明では YAML 由来のいろんな書き方についてはあまり説明がないので、
ansible の設定ファイルを書く時に知っておくと便利な YAML の知識についてまとめてみました。</p>

<!--more-->


<h2>YAML のバージョン</h2>

<p><a href="http://yaml.org/" title="The Official YAML Web Site">The Official YAML Web Site</a>
によると YAML の仕様としては
YAML 1.2 (3rd Edition)
まで存在するようですが、
ansible は PyYaml を使っていて、
libyaml binding なので
対応している YAML のバージョンは
<a href="http://yaml.org/spec/1.1/">YAML 1.1 (2nd Edition)</a>
になります。</p>

<h2>コレクション</h2>

<p>参考: <a href="http://yaml.org/spec/1.1/#id857181" title="2.1. Collections">2.1. Collections</a></p>

<h3>配列</h3>

<p><code>-</code> で列挙すると配列になります。
YAML は空白に敏感なので、
<code>-foo</code> のように書くとエラーになります。</p>

<pre><code class="yaml">    - foo
    - bar
</code></pre>

<h3>マッピング</h3>

<p>プログラミング言語によってはハッシュとか連想配列とか言われているデータ構造です。
キーと値を <code>:</code> (コロンとスペース) で区切ります。</p>

<p>読みやすくするために <code>:</code> の前後の空白を増やしても良いようです。</p>

<pre><code class="yaml">    foo:  bar
    hoge: fuga
    bar : baz
</code></pre>

<h3>マッピングと配列</h3>

<p>マッピングの値に配列を入れるとき</p>

<pre><code class="yaml">    roles:
      - foo
      - bar
</code></pre>

<p>のようにインデントするのが普通のようですが、</p>

<pre><code class="yaml">    roles:
    - foo
    - bar
</code></pre>

<p>のようにインデントせずに配列を書いても大丈夫です。</p>

<p>インデントを浅くできるので、個人的にはこの書き方を多用しています。</p>

<h3>フロースタイル</h3>

<p>フロースタイルというコンパクトな書き方も出来ます。
ansible の設定ファイルでは見覚えがないのですが、
知っておくと見た時に悩まなくて済むと思います。</p>

<p><a href="http://yaml.org/spec/1.1/#id857181" title="2.1. Collections">2.1. Collections</a>
の <code>Example 2.5. Sequence of Sequences</code> や <code>Example 2.6. Mapping of Mappings</code> を参考にしてみてください。</p>

<h2>構造</h2>

<p>参考: <a href="http://yaml.org/spec/1.1/#id857577" title="2.2. Structures">2.2. Structures</a></p>

<h3>ファイル冒頭の <code>---</code></h3>

<p>YAML ファイルの頭に <code>---</code> が入っていることがありますが、
これは複数 YAML ドキュメントを YAML ストリームとしてまとめるときに
YAML ドキュメントの開始部分を示すのに使うようです。</p>

<p>ansible などの用途では YAML ストリームは使わないので、
あってもなくても良いと思います。</p>

<p>迷うなら付けておけば YAML ファイルということがちょっとわかりやすくなると思います。</p>

<pre><code class="console">    % cat example.yml
    ---
    foo: bar
    ---
    hoge: fuga
    % ruby -r yaml -r pp -e 'pp YAML.load(ARGF)' example.yml
    {"foo"=&gt;"bar"}
    % ruby -r yaml -r pp -e 'pp YAML.load_stream(ARGF)' example.yml
    [{"foo"=&gt;"bar"}, {"hoge"=&gt;"fuga"}]
</code></pre>

<h3>コメント</h3>

<p><code>#</code> から行末までがコメントです。
行頭以外からでもコメントになります。</p>

<pre><code class="yaml">    foo: # ここはコメント
      - bar
    hoge:
      # ここもコメント
      - fuga
</code></pre>

<h2>スカラー値</h2>

<p>参考: <a href="http://yaml.org/spec/1.1/#id858081" title="2.3. Scalars">2.3. Scalars</a></p>

<h3>リテラル形式と折り返し形式</h3>

<p><code>|</code> を使うと literal style で改行をそのまま使った文字列を指定できます。
ansible の設定では shell と組み合わせに便利です。</p>

<p><a href="https://github.com/znz/ansible-role-rbenv/blob/7fceb7b4f5155ba385d88cdcaf436ecd84238aca/tasks/rbenv.yml">https://github.com/znz/ansible-role-rbenv/blob/7fceb7b4f5155ba385d88cdcaf436ecd84238aca/tasks/rbenv.yml</a>
では以下のように <code>creates=</code> によるガード条件を最初の行に書いて、
次の行からシェルスクリプトの内容を書いています。</p>

<pre><code class="yaml">    - name: rbenv install 
      shell: |
       creates=/versions/
       set -e
       . /etc/profile.d/rbenv.sh
       export CONFIGURE_OPTS="--disable-install-doc"
       rbenv install 
       rbenv global 
</code></pre>

<p><code>&gt;</code> を使うと folded style になります。
literal style と違って改行も普通の空白に置き換えられるので、
ansible の設定ファイルでは使ったことがありません。</p>

<p>上の例からわかるように YAML としては <code>creates=</code> も文字列の一部で、
その文字列の一部をガード条件として解釈しているのは ansible の方になります。</p>

<h2>真偽値</h2>

<p>ansible の playbook ファイルで
<code>sudo: yes</code> だったり
<code>sudo: True</code> だったり
いくつかの書き方がありますが、
すべて YAML の解釈の時点で真偽値になっています。</p>

<p>以下の例では大文字小文字の差が多いので、フロースタイルでまとめています。</p>

<pre><code class="console">    % cat example.yml
    ---
    - [true, True, TRUE]
    - [false, False, FALSE]
    - [yes, Yes, YES]
    - [no, No, NO]
    - [on, On, ON]
    - [off, Off, OFF]
    % ruby -r yaml -r pp -e 'pp YAML.load(ARGF)' example.yml
    [[[true, true, true],
      [false, false, false],
      [true, true, true],
      [false, false, false],
      [true, true, true],
      [false, false, false]]]
</code></pre>

<h2>文字列として解釈させる</h2>

<p>以上のように元に文字列以外として解釈される可能性があると文字列として指定したい時に困るので、
そういうときは <code>""</code> などでくくっておくか、
<code>!!str</code> で明示的に文字列型ということを指定します。</p>

<pre><code class="console">    % cat /tmp/example.yml
    ---
    - "true"
    - 'false'
    - !!str yes
    % ruby -r yaml -r pp -e 'pp YAML.load(ARGF)' /tmp/example.yml
    ["true", "false", "yes"]
</code></pre>

<h2>まとめ</h2>

<p>ansible の設定ファイルを書く時に、自分が困ったり悩んだことを中心にまとめてみました。
同じようなことで悩んだり、どうすればいいのか困った時に参考にしてみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible-galaxy を使ってみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-02-ansible-galaxy.html"/>
    <updated>2014-06-02T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-galaxy</id>
    <content type="html"><![CDATA[<p>ansible の複数の playbook で role を共有するのに
<a href="https://galaxy.ansible.com/">Ansible Galaxy</a>
はどうだろうと思って登録してみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>ansible 1.6.2</li>
</ul>


<h2>アカウント登録</h2>

<p>後で github から role を import するということもあって、
github 連携でアカウントを登録しました。</p>

<p>アカウントは4文字以上必須ということで <code>znzj</code> にしました。
(<a href="https://index.docker.io/">docker index</a> とか
<a href="https://vagrantcloud.com/">Vagrant Cloud</a> とか
最近は4文字以上必須が多いのでしょうか?)</p>

<h2>role を github に公開</h2>

<p><code>ansible-galaxy init ansible-role-ja_jp</code> でひな形を作成して、
<code>provisioning/roles/ja_jp</code> というディレクトリの中身だったものを移行して
<a href="https://github.com/znz/ansible-role-ja_jp">https://github.com/znz/ansible-role-ja_jp</a> として公開しました。</p>

<p>apt のミラーサイトとして日本のミラーを使ったり、日本語 locale にしたり、タイムゾーンを JST にしたりする role です。</p>

<h2>Ansbile Galaxy に role を追加</h2>

<p>ログインした状態だと右上の方に出てくる <code>Add a Role</code> というリンクから登録します。</p>

<ul>
<li>Github Username/Account : znz</li>
<li>Github Repository : ansible-role-ja_jp</li>
<li>Alternate Name : ja_jp</li>
</ul>


<p>という内容で登録したところ、
<a href="https://galaxy.ansible.com/list#/roles/967">https://galaxy.ansible.com/list#/roles/967</a>
で見えるようになりました。</p>

<p>URL をみるとわかるように JavaScript オフだと個別の role は見えません。
ちょっと試した感じだと代用の URL も見つけられませんでした。</p>

<h2>動作確認</h2>

<p><code>ansible-galaxy install znzj.ja_jp</code> だと <code>/usr/local/etc/ansible/roles/znzj.ja_jp</code> にインストールされてしまった (Homebrew でインストールした ansible を使っている場合) ので、
<code>ansible-galaxy install --roles-path ./roles znzj.ja_jp</code>
でカレントディレクトリの中にインストールし直しました。</p>

<h2>感想</h2>

<p>これだけだと git submodule に比べて利点が見えてこないのですが、
依存関係やバージョン指定をちゃんと使えれば便利そうに思いました。</p>

<p>自分が登録した role にバージョンを指定する方法がわからず、
今のところバージョンなしのままなので、どうにかしたいです。</p>

<h2>参考サイト</h2>

<ul>
<li><a href="http://qiita.com/kiri/items/f329a35543022d6e45d0">AnsibleWorks Galaxyにroleを登録してみる - Qiita</a>

<ul>
<li>スクリーンショットをみると AnsibleWorks Galaxy になっているところが今は Ansible Galaxy なので、いつの間にか名前が変わっているようです。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress で ansible の記事を書く時のエスケープ]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-20-octopress-ansible.html"/>
    <updated>2014-05-20T23:25:18+09:00</updated>
    <id>http://blog.n-z.jp/blog/octopress-ansible</id>
    <content type="html"><![CDATA[<p>octopress で ansible の記事を書く時に連続する <code>{</code> のエスケープに困ったので、
対処方法を調べました。</p>

<!--more-->


<h2>コードブロックのエスケープ</h2>

<p><a href="http://stackoverflow.com/questions/15786144/how-to-escape-in-markdown-on-octopress">How to escape  in markdown on Octopress? - Stack Overflow</a>
にあるように</p>

<pre><code>```種類 ファイル名
コードブロック
```
</code></pre>

<p>の外側を
<code>{% raw %}</code> と <code>{% endraw %}</code>
でくくればうまくいきました。</p>

<h2>文中の  のエスケープ</h2>

<p>先ほどのリンクのアンカーやこの節の見出しのような文の途中は</p>

<p>
    {{ &ldquo;{{&rdquo; }}
</p>

<p>のように書けばエスケープできました。</p>

<p>幅なしスペース (<code>&amp;#x200B;</code>) のような幅のない文字を挟んでごまかすという手もあるかもしれません。</p>

<h2>文中の <code>{%</code> のエスケープ</h2>

<p><code>{% raw %}</code> と <code>{% endraw %}</code> 自体をエスケープするのに</p>

<p>
    {{ &ldquo;{%&rdquo; }}
</p>

<p>を使って</p>

<p>
    <code>{{ "{%" }} raw %}</code> と <code>{{ "{%" }} endraw %}</code>
</p>

<p>のように書きました。</p>

<p><code>%}</code> まで <code>""</code> の中に入れようとして</p>

<p>
    <code>{{ "{% raw %}" }}</code>
</p>

<p>と書くと</p>

<p>
    Liquid Exception: Variable &lsquo;{{ &ldquo;{% raw %}&rsquo; was not properly terminated with regexp: /}}/
</p>

<p>というエラーになってうまくいきませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible で sources.list を変更したときに update する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-20-ansible-apt-update.html"/>
    <updated>2014-05-20T22:58:09+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-apt-update</id>
    <content type="html"><![CDATA[<p>ansible で sources.list を変更したときには
<code>apt-get update</code> して欲しいのですが、
毎回 update するのは無駄なので、
<code>cache_valid_time</code> も使いたいと思ったので対処しました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>クライアント側 ansible 1.6.1</li>
<li>サーバー側 Ubuntu 12.04</li>
</ul>


<h2>やり方</h2>

<p><code>register</code> で <code>template</code> モジュールの実行結果を受けて、
<code>changed</code> の場合は必ず update して、
<code>skipped</code> の場合は <code>cache_valid_time</code> で情報が古い場合だけ update するようにしました。</p>

<p></p>

<pre><code class="yaml tasks/apt.yaml">---
- template: src=sources.list.{{ ansible_distribution }}.j2 dest=/etc/apt/sources.list owner=root group=root mode=0644
  register: apt_sources_list
- apt: update_cache=yes
  when: apt_sources_list|changed
- apt: update_cache=yes cache_valid_time=3600
  when: apt_sources_list|skipped
</code></pre>

<p></p>

<h2>テンプレートの内容</h2>

<p>gathering facts で設定された <code>ansible_distribution_release</code> と
<code>vars</code> で別途設定した <code>apt_ubuntu_uri</code> と <code>apt_ubuntu_components</code> を
組み合わせて apt-line を作るようにしました。</p>

<p>Ubuntu をインストールした直後の sources.list では
components が別の行になっているものもあったのですが、
1 行にまとめました。</p>

<p>
&#8220;`text templates/sources.list.Ubuntu.j2
deb {{ apt_ubuntu_uri }} {{ ansible_distribution_release }} {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb-src {{ apt_ubuntu_uri }} {{ ansible_distribution_release }} {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-updates {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb-src {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-updates {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}</p>

<h1>deb {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-backports {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}</h1>

<h1>deb-src {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-backports {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}</h1>

<p>deb <a href="http://security.ubuntu.com/ubuntu">http://security.ubuntu.com/ubuntu</a> {{ ansible_distribution_release }}-security {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb-src <a href="http://security.ubuntu.com/ubuntu">http://security.ubuntu.com/ubuntu</a> {{ ansible_distribution_release }}-security {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
&#8220;`
</p>

<p><code>backports</code> は使っていなかったのでコメントアウトしていますが、
<code>deb-src</code> も使わないのならコメントアウトしておいても良さそうです。</p>

<h2><code>vars</code> の内容</h2>

<p>例として jaist ミラーを使うようにしました。</p>

<pre><code class="yaml vars/main.yml">---
apt_ubuntu_uri: "http://ftp.jaist.ac.jp/pub/Linux/ubuntu/"
apt_ubuntu_components:
- main
- restricted
- universe
- multiverse
</code></pre>
]]></content>
  </entry>
  
</feed>
