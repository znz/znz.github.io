<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bash | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-06-24T23:13:17+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[bash で PATH を配列に分解の続き]]></title>
    <link href="http://blog.n-z.jp/blog/2016-10-07-bash-path-to-array-again.html"/>
    <updated>2016-10-07T21:39:31+09:00</updated>
    <id>http://blog.n-z.jp/blog/bash-path-to-array-again</id>
    <content type="html"><![CDATA[<p>zsh だと <code>PATH</code> と同期している配列変数として <code>path</code> があるのですが、
bash にはそういうものがなくて困ったので、分解する方法を考えてみた話の続きです。
末尾の空文字列や改行に対応しました。</p>

<!--more-->


<h2>昨日の方法の問題点</h2>

<p><a href="/blog/2016-10-06-bash-path-to-array.html">昨日の記事</a> に書きましたが、末尾の空文字列の処理に問題がありました。
また、書いていませんでしたが、改行に対応できていませんでした。</p>

<h2>末尾対応</h2>

<p><code>PATH= bash -c 'ls'</code> を <code>/bin</code> やそれ以外で実行してみたら
空の <code>PATH</code> はカレントディレクトリのみと同じ意味のようなので、
「<a href="https://twitter.com/fixedpoint_jp/status/784229832930369536">末尾の空文字列に対応するために、PATHにの最後に:を追加した文字列をreadすればいい?</a>」
という指摘のように末尾に <code>:</code> を追加する方法で良さそうでした。</p>

<p>つまり、以下のようになります。</p>

<pre><code class="console">% bash -c 'PATH=/bin:; IFS=: read -r -a path &lt;&lt;&lt;"$PATH:"; declare -p path'
declare -a path='([0]="/bin" [1]="")'
% bash -c 'PATH=/bin; IFS=: read -r -a path &lt;&lt;&lt;"$PATH:"; declare -p path'
declare -a path='([0]="/bin")'
% bash -c 'PATH=; IFS=: read -r -a path &lt;&lt;&lt;"$PATH:"; declare -p path'
declare -a path='([0]="")'
</code></pre>

<p>「PATH自体が空だった場合は振舞いが変わるけど。」という話もありましたが、
<code>PATH</code> 探索を再現できれば良いということを考えると空の場合も問題なさそうでした。</p>

<pre><code class="console">% bash -c 'PATH=; ls'
bash: ls: No such file or directory
% cd /bin
% bash -c 'PATH=; ls /bin/bash'
/bin/bash
</code></pre>

<h2>改行対応</h2>

<p>いろいろ試していると改行を含む <code>PATH</code> を扱えないことに気づいたのですが、
<code>-d $'\0'</code> (以下の例ではコマンドラインのエスケープでひどいことになっていますが) を
指定して区切り文字を変えると here string の末尾に付く改行も入力の一部として
扱われてしまうのでうまくいかないようでしたが、末尾の要素を <code>unset</code> で削除することで
良い感じになりました。</p>

<p><code>$'\0'</code> は NUL 文字で C 言語での終端文字なので、普通は <code>PATH</code> の途中に入らないことが期待できるので、ありえない文字として指定しています。</p>

<pre><code class="console">% bash -c 'PATH=/bin; IFS=: read -d $'"'"'\0'"'"' -r -a path &lt;&lt;&lt;"$PATH:"; declare -p path'
declare -a path='([0]="/bin" [1]="
")'
% bash -c 'PATH=/bin; IFS=: read -d $'"'"'\0'"'"' -r -a path &lt;&lt;&lt;"$PATH:"; unset path[-1]; declare -p path'
declare -a path='([0]="/bin")'
% bash -c 'PATH=/foo$'"'"'\n'"'"'bar:/bin; IFS=: read -d $'"'"'\0'"'"' -r -a path &lt;&lt;&lt;"$PATH:"; unset path[-1]; declare -p path'
declare -a path='([0]="/foo
bar" [1]="/bin")'
</code></pre>

<p>わかりやすいようにファイルにして実行すると以下のような感じです。</p>

<pre><code class="console">% cat /tmp/p.bash
PATH=/foo$'\n'bar:/bin
IFS=: read -d $'\0' -r -a path &lt;&lt;&lt;"$PATH:"
unset path[-1]
declare -p path
PATH=/foo$'\n'bar:/bin:
IFS=: read -d $'\0' -r -a path &lt;&lt;&lt;"$PATH:"
unset path[-1]
declare -p path
% bash /tmp/p.bash
declare -a path='([0]="/foo
bar" [1]="/bin")'
declare -a path='([0]="/foo
bar" [1]="/bin" [2]="")'
</code></pre>

<h2>他の処理例</h2>

<p><code>/etc/group</code> くらいのデータになると awk などを使った方が良いと思いますが、
<code>/etc/group</code> (末尾に空文字列が入ることがある) のパースも良い感じにできるようです。</p>

<p>設定されていない状態でも構わなかったり、
末尾に空文字列が入らないことがわかっている <code>/etc/passwd</code> などの場合は
bash の組み込みコマンドだけでいけそうです。</p>

<pre><code class="console">% cat /tmp/t.bash
#!/bin/bash
sed 's/$/:/' /etc/group | while IFS=: read -r -a group; do
  declare -p group
done
% bash /tmp/t.bash
declare -a group='([0]="root" [1]="x" [2]="0" [3]="")'
declare -a group='([0]="daemon" [1]="x" [2]="1" [3]="")'
declare -a group='([0]="bin" [1]="x" [2]="2" [3]="")'
declare -a group='([0]="sys" [1]="x" [2]="3" [3]="")'
declare -a group='([0]="adm" [1]="x" [2]="4" [3]="syslog,vagrant")'
(略)
declare -a group='([0]="lpadmin" [1]="x" [2]="114" [3]="vagrant")'
declare -a group='([0]="sambashare" [1]="x" [2]="115" [3]="vagrant")'
declare -a group='([0]="vboxsf" [1]="x" [2]="999" [3]="")'
declare -a group='([0]="scanner" [1]="x" [2]="116" [3]="")'
declare -a group='([0]="colord" [1]="x" [2]="117" [3]="")'
</code></pre>

<h2>まとめ</h2>

<p>最終的には</p>

<pre><code class="bash">IFS=: read -d $'\0' -r -a path &lt;&lt;&lt;"$PATH:"
unset path[-1]
</code></pre>

<p>で <code>PATH</code> を配列に変換できることがわかりました。</p>

<p>入力データに改行がないとわかっているなら <code>-d $'\0'</code> などは省略できるので、
入力データの性質に応じて適度に手を抜きつつ処理をするのが良いのではないでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bash で PATH を配列に分解]]></title>
    <link href="http://blog.n-z.jp/blog/2016-10-06-bash-path-to-array.html"/>
    <updated>2016-10-06T23:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/bash-path-to-array</id>
    <content type="html"><![CDATA[<p>zsh だと <code>PATH</code> と同期している配列変数として <code>path</code> があるのですが、
bash にはそういうものがなくて困ったので、分解する方法を考えてみました。</p>

<!--more-->


<h2>結論</h2>

<p>先に結論を書いておくと、最終的には <code>IFS=: read -r -a path &lt;&lt;&lt;"$PATH"</code> という方法で分解できました。</p>

<p>2016-10-07 追記: 詳細は<a href="/blog/2016-10-07-bash-path-to-array-again.html">続き</a> に書きましたが、改行などに対応できていませんでした。</p>

<pre><code class="console">% bash -c 'IFS=: read -r -a path &lt;&lt;&lt;"$PATH"; declare -p path'
</code></pre>

<p>のように動作確認できます。</p>

<p>declare で表示というのは <a href="http://yonchu.hatenablog.com/entry/2013/07/09/230656" title="シェルスクリプトのデバッグは typeset または declare を使うと良いかも - よんちゅBlog">シェルスクリプトのデバッグは typeset または declare を使うと良いかも - よんちゅBlog</a> を参考にしました。</p>

<h2><code>-r</code> オプション</h2>

<p><code>-r</code> オプションは <code>read</code> コマンドを使うときの定石ですが、具体的には <code>\:</code> のような並びがあるときに影響がありました。</p>

<pre><code class="console">% PATH="/bin:/tmp/foo\:/tmp/bar" bash -c 'IFS=: read -r -a path &lt;&lt;&lt;"$PATH"; declare -p path'
declare -a path='([0]="/bin" [1]="/tmp/foo\\" [2]="/tmp/bar")'
% PATH="/bin:/tmp/foo\:/tmp/bar" bash -c 'IFS=: read -a path &lt;&lt;&lt;"$PATH"; declare -p path'
declare -a path='([0]="/bin" [1]="/tmp/foo:/tmp/bar")'
</code></pre>

<p>実際のパスの挙動は <code>-r</code> がある場合と同じようでした。</p>

<pre><code class="console">% mkdir /tmp/foo\\
% echo echo hoge &gt; /tmp/foo\\/hoge
% chmod +x /tmp/foo\\/hoge
% PATH="/bin:/tmp/foo\:/tmp/bar" bash -c 'IFS=: read -a path &lt;&lt;&lt;"$PATH"; for p in "${path[@]}"; do test -x "$p/hoge" &amp;&amp; "$p/hoge"; done'
PATH="/bin:/tmp/foo\:/tmp/bar" bash -c 'IFS=: read -r -a path &lt;&lt;&lt;"$PATH"; for p in "${path[@]}"; do test -x "$p/hoge" &amp;&amp; "$p/hoge"; done'
hoge
% PATH="/bin:/tmp/foo\:/tmp/bar" hoge
hoge
</code></pre>

<h2><code>-d</code> オプション</h2>

<p><code>-d</code> オプションというのもあったので試してみたのですが、そこで完全に読み込み終了になってしまって、期待した動作にはなりませんでした。</p>

<pre><code class="console">% PATH="/bin:/tmp/foo\:/tmp/bar" bash -c 'read -d : -r -a path &lt;&lt;&lt;"$PATH"; declare -p path'
declare -a path='([0]="/bin")'
</code></pre>

<h2><code>-a</code> オプション</h2>

<p><code>-a</code> オプションはこのように複数の変数を指定する代わりにひとつの変数を指定して配列を代入してくれるオプションでした。</p>

<p><code>-a</code> オプションがないと指定した変数のうち、最後に残り全て入ってしまうようです。</p>

<pre><code class="console">PATH="/bin:/tmp/foo\:/tmp/bar:/tmp/baz" bash -c 'IFS=: read -r path1 path2 path3 &lt;&lt;&lt;"$PATH"; declare -p path1 path2 path3'
declare -- path1="/bin"
declare -- path2="/tmp/foo\\"
declare -- path3="/tmp/bar:/tmp/baz"
</code></pre>

<h2>here string</h2>

<p><code>&lt;&lt;&lt;word</code> は <code>echo word |</code> のようなもので、標準入力に <code>word</code> を渡してくれる機能です。</p>

<h2>IFS</h2>

<p><code>read</code> などの単語区切りです。
デフォルトは空白、タブ、改行です。</p>

<p>ずっと変えてしまうと影響が大きすぎるので、 <code>read</code> の行だけ変更するようにしています。</p>

<p>また、このやり方を使うことで空白の入ったディレクトリを含むパスもうまく扱えます。</p>

<h2>カレントディレクトリを表す空のパスの扱い</h2>

<p>頭や途中に入った空文字列 (カレントディレクトリを表す) は扱えたのですが、末尾にある場合はうまくいきませんでした。</p>

<p>セキュリティ上の問題もあるので、普通は設定しないと思うので、対応しなくても問題はないと思いますが、完全に変換したい場合は特別扱いを追加する必要がありそうでした。</p>

<pre><code class="console">%  bash -c 'PATH=:/bin; IFS=: read -r -a path &lt;&lt;&lt;"$PATH"; declare -p path'
declare -a path='([0]="" [1]="/bin")'
%  bash -c 'PATH=/bin::/bin; IFS=: read -r -a path &lt;&lt;&lt;"$PATH"; declare -p path'
declare -a path='([0]="/bin" [1]="" [2]="/bin")'
%  bash -c 'PATH=/bin:; IFS=: read -r -a path &lt;&lt;&lt;"$PATH"; declare -p path'
declare -a path='([0]="/bin")'
</code></pre>

<h2>まとめ</h2>

<p>zsh には元から <code>path</code> があるし、 <code>/bin/sh</code> には配列がないので bash 限定ではありますが、
<code>IFS=: read -r -a path &lt;&lt;&lt;"$PATH"</code> で実用上問題なく変換できるということがわかったので、必要な時には使うと良いのではないでしょうか。</p>

<p>2016-10-07 追記: 末尾の空文字列や改行に対応した<a href="/blog/2016-10-07-bash-path-to-array-again.html">続き</a>を書きました。</p>
]]></content>
  </entry>
  
</feed>
