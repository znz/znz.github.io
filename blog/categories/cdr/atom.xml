<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cdr | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/cdr/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2016-04-04T23:35:08+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[zshの機能のみで既に存在しないディレクトリをcdrのリストから削除する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-25-compact-chpwd-recent-dirs.html"/>
    <updated>2014-07-25T21:54:57+09:00</updated>
    <id>http://blog.n-z.jp/blog/compact-chpwd-recent-dirs</id>
    <content type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/syohex/20140425/1398394421" title="既に存在しないディレクトリを cdrのリストから削除する - Life is very short">既に存在しないディレクトリを cdrのリストから削除する - Life is very short</a>
をみて perl を使っていて、
ファイル名の変更にも対応していなくてポータブルではないと思ったので、
zsh の機能のみで実装してみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>zsh 5.0.2</li>
</ul>


<h2>実装</h2>

<p>cdr の実装の中の
<code>chpwd_recent_add</code>
<code>chpwd_recent_dirs</code>
<code>chpwd_recent_filehandler</code>
の中を良くみてみると
引数なしで <code>chpwd_recent_filehandler</code> を呼び出すと
<code>$reply</code> に配列でディレクトリ一覧を返してくれて、
引数を渡すとファイルに保存してくれるとわかりました。</p>

<p>そこで、その間で <code>(N)</code> を使って存在しないディレクトリを除外すれば良いということで
以下の実装になりました。
<code>emulate -L zsh</code> などは参考にした部分にあったので、そのまま使っています。</p>

<pre><code class="sh">my-compact-chpwd-recent-dirs () {
    emulate -L zsh
    setopt extendedglob
    local -aU reply
    integer history_size
    autoload -Uz chpwd_recent_filehandler
    chpwd_recent_filehandler
    history_size=$#reply
    reply=(${^reply}(N))
    (( $history_size == $#reply )) || chpwd_recent_filehandler $reply
}
</code></pre>

<p>使い方としては</p>

<ul>
<li>必要に応じて手で <code>my-compact-chpwd-recent-dirs</code> を呼び出す</li>
<li><code>.zshrc</code> から起動時に <code>my-compact-chpwd-recent-dirs</code> を実行</li>
<li><code>add-zsh-hook chpwd my-compact-chpwd-recent-dirs</code> で毎回実行</li>
</ul>


<p>などが考えられます。</p>

<p><a href="http://blog.n-z.jp/blog/2014-07-17-peco-cdr.html" title="pecoとcdrなどを組み合わせてみた">pecoとcdrなどを組み合わせてみた</a>ときに、
<code>peco</code> に渡す前のところで <code>(N-/)</code> でフィルタリングしていたので、
個人的には必要に応じて手で呼び出す使い方にしようと思っています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pecoとcdrなどを組み合わせてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-17-peco-cdr.html"/>
    <updated>2014-07-17T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/peco-cdr</id>
    <content type="html"><![CDATA[<p>自作の cd 履歴管理が <code>~/VirtualBox VMs</code> という空白入りのディレクトリ名の扱いに対応していなかったので、
せっかくなので独自で頑張るのは止めて、
cdr の履歴を使うことにしました。</p>

<p>さらに選択部分は peco と組み合わせて <code>ghq</code> や <code>cdpath</code> にも対応してみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>peco 0.2.0</li>
<li>zsh 5.0.2</li>
</ul>


<h2>peco のインストール</h2>

<p>Homebrew でインストールするなら <code>brew install peco/peco/peco</code> か</p>

<pre><code>brew tap peco/peco
brew install peco
</code></pre>

<p>です。</p>

<p>アンインストールは</p>

<pre><code>brew uninstall peco
brew untap peco/peco
</code></pre>

<p>です。</p>

<p><code>go get</code> でインストールするなら <code>GOPATH</code> を設定して
<code>go get github.com/peco/peco/cmd/peco</code>
です。
アンインストールは <code>GOPATH</code> にあるインストールされたファイルを消すしかなさそうです。</p>

<h2>peco の設定</h2>

<p><a href="http://shibayu36.hatenablog.com/entry/2014/06/27/223538" title="pecoを使い始めた - $shibayu36-&gt;blog;">pecoを使い始めた - $shibayu36-&gt;blog;</a>
はいろいろキーバインドを設定していますが、
デフォルトのまま使っています。</p>

<h2>zsh の設定</h2>

<p><a href="https://github.com/znz/dot-shell/blob/4ee27990e8de4b3c089442c0d997ad3fc836b96a/profile.d/50peco.zsh" title="50peco.zsh">50peco.zsh</a>
の <code>peco-go-to-dir</code> のように設定して <code>M-g</code> で使えるようにしました。</p>

<p>以下に該当部分を抜き出しておきます。</p>

<pre><code class="sh 50peco.zsh">if (( ${+commands[peco]} )); then
  peco-go-to-dir () {
    local line
    local selected="$(
      {
        (
          autoload -Uz chpwd_recent_filehandler
          chpwd_recent_filehandler &amp;&amp; for line in $reply; do
            if [[ -d "$line" ]]; then
              echo "$line"
            fi
          done
        )
        ghq list --full-path
        for line in *(-/) ${^cdpath}/*(N-/); do echo "$line"; done | sort -u
      } | peco --query "$LBUFFER"
    )"
    if [ -n "$selected" ]; then
      BUFFER="cd ${(q)selected}"
      zle accept-line
    fi
    zle clear-screen
  }
  zle -N peco-go-to-dir
  bindkey '^[g' peco-go-to-dir
fi
</code></pre>

<p>まず <code>(( ${+commands[peco]} ))</code> で <code>peco</code> コマンドの存在チェックをしています。
zsh スクリプトの中では <code>type peco &gt;/dev/null 2&gt;&amp;1</code> のようなチェック方法の代わりに使えます。</p>

<p>次にカレントディレクトリと <code>$cdpath</code> の処理に使っている <code>line</code> をローカル変数にしています。</p>

<p>次がメイン部分で</p>

<ol>
<li><code>cdr</code> のディレクトリ一覧</li>
<li><code>ghq</code> のディレクトリ一覧</li>
<li>カレントディレクトリと <code>$cdpath</code> の中のディレクトリ一覧</li>
</ol>


<p>を <code>peco</code> に渡して選択しています。
順番や何を選択肢に入れるかなどは好みで調節してください。</p>

<p>最後に参考にした記事と同じように、選択されていたら <code>cd</code> コマンドを実行しています。</p>

<h2>空白ディレクトリ対応</h2>

<p><code>selected=$()</code> を <code>selected="$()"</code> に変更するなど適切にクオートした上で、
さらに最後の <code>cd</code> コマンドに渡す部分では <code>q</code> という Parameter Expansion Flag (<code>${(q)var}</code> の部分) を使って
適切にエスケープしています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zshでcdの履歴管理に標準添付のcdrを使う]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-12-zsh-cdr.html"/>
    <updated>2013-11-12T01:16:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/zsh-cdr</id>
    <content type="html"><![CDATA[<p>zsh は <code>cd -[TAB]</code> で補完できる directory stack が
<code>setopt autopushd</code> と組み合わせていると非常に便利なので、
<a href="https://github.com/znz/dot-shell/blob/c197f9e3232e8dca910be4ea4ae555cc60468692/profile.d/50dirstack.zsh">directory stack を自前で保存する仕組みを作った</a>り、
GNU screen の他の WINDOW のディレクトリに移動するための
<a href="https://github.com/znz/dot-shell/blob/523e3adaf9b776f05185acfb24bc19ef5f22c418/profile.d/70cds.zsh">cdsというコマンド</a>
を作ったりして、
現状でもあまり困っていませんでした。</p>

<p>しかし、 <code>zshcontrib(1)</code> に入っているものも試してみるのが
良さそうと思って試してみました。</p>

<!--more-->


<h2>ドキュメント</h2>

<p>ドキュメントは
<code>man zshcontrib</code> か、
<code>pager $^fpath/cdr(N)</code> で読めます。</p>

<h2>cdr コマンドの使い方</h2>

<p><code>cdr [TAB]</code> で補完して使ったり、
<code>cdr -l</code> で一覧を出したり、
<code>cdr -e</code> で一覧を編集したりできます。</p>

<p><code>cdr -e</code> の編集は <code>zle</code> なので、
<code>bindkey -e</code> なら、
普通のカーソル移動などの他に
ただの <code>Enter</code> だと編集終了になってしまうので、
<code>^[^M</code> (<code>ESC</code> に続けて <code>Enter</code>) で改行を入力して行を増やしたり分割したり
出来ることを知っておけば充分だと思います。</p>

<h2>設定全体</h2>

<p>全体としては以下のように設定してみました。</p>

<p>以降は設定内容を個別に解説していきます。</p>

<pre><code class="sh">if [[ -n $(echo ${^fpath}/chpwd_recent_dirs(N)) &amp;&amp; -n $(echo ${^fpath}/cdr(N)) ]]; then
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
  add-zsh-hook chpwd chpwd_recent_dirs
  zstyle ':completion:*:*:cdr:*:*' menu selection
  zstyle ':completion:*' recent-dirs-insert both
  zstyle ':chpwd:*' recent-dirs-max 500
  zstyle ':chpwd:*' recent-dirs-default true
  zstyle ':chpwd:*' recent-dirs-file "${XDG_CACHE_HOME:-$HOME/.cache}/shell/chpwd-recent-dirs"
  zstyle ':chpwd:*' recent-dirs-pushd true
fi
</code></pre>

<h2>使えるかどうかのガード条件</h2>

<p>昔、
zsh の設定を環境ごとに分岐させようとした時、
<code>is-at-least</code> は古い zsh で使えなかったのと、
バックポートで使える可能性があったり、
自前の <code>fpath</code> にファイルを追加した場合などを考慮して、
機能自体の存在をチェックするようにしています。</p>

<p>ruby で推奨されているやり方として、
<code>RUBY_VERSION</code> をチェックするのではなく、
機能の存在をチェックするべき、
という話があったことも影響しています。</p>

<pre><code class="sh">  if [[ -n $(echo ${^fpath}/chpwd_recent_dirs(N)) &amp;&amp; -n $(echo ${^fpath}/cdr(N)) ]]; then
</code></pre>

<p>Glob Qualifiers の <code>(N)</code> (<code>NULL_GLOB</code>) を使っている関係で、
一度 <code>echo</code> してから <code>-n</code> でチェックしています。
もっと簡潔に書ける方法があれば教えてください。</p>

<h2>autoload</h2>

<p><code>autoload -U</code>
と書いてある設定例もありますが、
ドキュメントにあったように
<code>autoload -Uz</code>
を使っています。</p>

<p><code>-z</code>
を付けないと
<code>KSH_AUTOLOAD</code>
の設定の影響を受けるそうなので、
基本的には <code>-z</code> を明示的に付けるのがおすすめのようです。</p>

<h2>add-zsh-hook</h2>

<p><code>chpwd_functions</code> への追加は</p>

<pre><code class="sh">typeset -ga chpwd_functions
chpwd_functions+=chpwd_recent_dirs
</code></pre>

<p>としても良かったのですが、
念のため <code>typeset</code> するのが最近の zsh しか使わないのなら無駄に感じたのと、
<code>cdr</code> のドキュメントに書いてあったこともあり、
<code>add-zsh-hook</code>
を使ってみました。</p>

<h2>menu selection</h2>

<p>Web で設定例を見ると
<code>zstyle ':completion:*' menu select</code>
になっていることが多いのですが、
基本的に menu select は使っていなかったので、
<code>zshcontrib(1)</code> や
<code>${^fpath}/cdr(N)</code> に書いてあった通りに
<code>':completion:*'</code>
ではなく
<code>':completion:*:*:cdr:*:*'</code>
で、
値も
<code>select</code>
ではなく
<code>selection</code>
で設定しています。</p>

<pre><code class="sh">  zstyle ':completion:*:*:cdr:*:*' menu selection
</code></pre>

<h2>recent-dirs-insert</h2>

<p>これは
<code>cdr [TAB]</code>
の挙動の設定で、
好みが分かれると思うので、
<code>always</code>, <code>fallback</code>, <code>both</code>
を一通り試してみるのをおすすめします。</p>

<p><code>both</code> だと通常の <code>cd</code> の補完にメニューから選ぶ補完候補に履歴が入っているという感じに見えました。
あまりうまく使えていないので、そのうち他の設定に変えて試してみようと思っています。</p>

<h2>recent-dirs-max</h2>

<p>設定を保存する最大数です。
デフォルト値は 20 です。</p>

<h2>recent-dirs-file</h2>

<p><a href="http://standards.freedesktop.org/basedir-spec/latest/index.html">XDG Base Directory Specification</a>
に合わせて <code>~/.cache</code> を使うようにしています。</p>

<p>他の部分で既に <code>mkdir -p</code> しているので、ここでは省略しています。</p>

<pre><code class="sh">  #mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}/shell"
  zstyle ':chpwd:*' recent-dirs-file "${XDG_CACHE_HOME:-$HOME/.cache}/shell/chpwd-recent-dirs"
</code></pre>

<p>ドキュメントにあるように、
以下のような設定にして TTY ごとのファイルと
グローバルのファイルにわけるのも良いかもしれません。</p>

<pre><code class="sh">  zstyle recent-dirs-file ':chpwd:*' ~/.chpwd-recent-dirs-${TTY##*/} +
</code></pre>

<h2>recent-dirs-pushd</h2>

<p>他の設定が影響していたのか、
何が原因だったのかは追求していないのですが、
<code>recent-dirs-pushd</code> を <code>true</code> にしないと
最初はうまく動かなかったのですが、
履歴がたまったからなのか、
なぜか今はこの設定に関係なくちゃんと動いているようです。</p>

<h2>recent-dirs-prune</h2>

<p>recent の一覧に追加しないディレクトリのパターンなどを設定できるようですが、
必要性を感じていないので、
まだ何も設定していません。</p>
]]></content>
  </entry>
  
</feed>
