<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debian | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/debian/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-07-21T16:51:25+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vagrant Cloudでboxを公開してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-21-vagrantcloud-box.html"/>
    <updated>2014-07-21T15:52:35+09:00</updated>
    <id>http://blog.n-z.jp/blog/vagrantcloud-box</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2014-07-18-wheezy-from-vagrant-cloud.html" title="Vagrant CloudからWheezyを入れてみた">Vagrant CloudからWheezyを入れてみた</a>で公開されているものを使ってみたので、
今回は
<a href="https://vagrantcloud.com/">Vagrant Cloud</a>
で日本語で日本向けの Box の公開も試してみました。</p>

<!--more-->


<h2>手順概要</h2>

<ol>
<li><a href="https://vagrantcloud.com/">https://vagrantcloud.com/</a> にログイン</li>
<li><a href="https://vagrantcloud.com/boxes/new">Create Box</a> で作成</li>
<li>Create new version でバージョンを作成</li>
<li>Create new provider でバージョンに対応する provider を作成</li>
<li>無料アカウントだと Upload は使えないようなので URL を指定</li>
<li>バージョンの編集で Release すると公開</li>
</ol>


<h2>登録される情報</h2>

<p>ユーザーアカウントに複数の Box が対応していて、
Box に複数のバージョンが対応していて、
バージョンに複数の provider (VirtualBox とか VMware とか) が対応している、
という構造になっているようです。</p>

<p>バージョンは Release するまでは公開されないようです。</p>

<p>古いバージョンは Revoke で破棄できるようなので、
box を置く URL を使い回すなら Revoke してから
ファイルを置き換えて新しいバージョンを登録するのが
良さそうに思いました。</p>

<h2>作成した box の packer テンプレート</h2>

<p><a href="https://github.com/znz/packer-templates">packer-templates</a>
で公開しています。</p>

<p>使い方は</p>

<pre><code>git clone https://github.com/znz/packer-templates
cd debian-7.6.0-amd64-ja_jp
packer build debian-7.6.0-amd64-ja_jp.json
</code></pre>

<p>で <code>debian-7.6.0-amd64-ja_jp_virtualbox.box</code> が作成できます。
試した環境では1時間ぐらいかかりました。</p>

<h2>使用方法</h2>

<p><code>vagrant init znzj/debian-7.6.0-amd64-ja_jp</code>
のように <code>vagrant init</code> の引数に <code>ユーザー名/BOX名</code> を指定して
<code>Vagrantfile</code> を作成すると
<code>config.vm.box = "znzj/debian-7.6.0-amd64-ja_jp"</code>
と指定されていて <code>vagrant up</code> で自動ダウンロードされて使えます。</p>

<h2>登録した URL の扱い</h2>

<p>box は URL で登録したので、
<code>https://vagrantcloud.com/znzj/debian-7.6.0-amd64-ja_jp/version/1/provider/virtualbox.box</code>
のように <code>vagrantcloud.com</code> の URL に見えるところからダウンロードしようとした時、
リダイレクトされて登録した URL からのダウンロードになるようです。</p>

<p><code>vagrantcloud</code> 側でキャッシュなどをしてくれるわけではないようなので、
置き場所には注意する必要がありそうです。</p>

<p>今回は需要も多くなさそうで、
日本向けということで
さくらのVPS
に置いてみました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant CloudからWheezyを入れてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-18-wheezy-from-vagrant-cloud.html"/>
    <updated>2014-07-18T21:30:25+09:00</updated>
    <id>http://blog.n-z.jp/blog/wheezy-from-vagrant-cloud</id>
    <content type="html"><![CDATA[<p>Debian 7.6 がリリースされたので、新しい box がないか探してみたところ、
<a href="http://www.vagrantbox.es/" title="A list of base boxes for Vagrant - Vagrantbox.es">A list of base boxes for Vagrant &ndash; Vagrantbox.es</a>
から探すのではなく
<a href="https://vagrantcloud.com/">Vagrant Cloud</a>
を使えば良いということがわかりました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>VirtualBox 4.3.12</li>
<li>Vagrant 1.6.3</li>
<li><a href="https://vagrantcloud.com/ffuenf/debian-7.6.0-amd64" title="Debian Wheezy 7.6.0 x86_64">Debian Wheezy 7.6.0 x86_64</a> 0.0.27</li>
</ul>


<h2>書き換え</h2>

<p>古い box は</p>

<p><code>
  config.vm.box = ENV["VM_BOX"] || "opscode_debian-7.4_chef-provisionerless"
  config.vm.box_url = ENV["VM_BOX_URL"] || "http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_debian-7.4_chef-provisionerless.box"
</code></p>

<p>と指定していたのを
<a href="https://github.com/ffuenf/vagrant-boxes" title="ffuenf/vagrant-boxes">ffuenf/vagrant-boxes</a>
からリンクされている
<a href="https://vagrantcloud.com/ffuenf/debian-7.6.0-amd64" title="ffuenf/debian-7.6.0-amd64">ffuenf/debian-7.6.0-amd64</a>
の説明通り <code>vagrant init ffuenf/debian-7.6.0-amd64</code> で作成された
<code>Vagrantfile</code> を参考にして、</p>

<p><code>
  config.vm.box = "ffuenf/debian-7.6.0-amd64"
</code></p>

<p>に書き換えました。</p>

<p>以前の box を使っている 古い VM を <code>vagrant destroy</code> ですべて破棄した後、
<code>vagrant box remove opscode_debian-7.4_chef-provisionerless</code>
で box も削除しました。</p>

<h2>余談</h2>

<p><code>vagrant box outdated</code> や <code>vagrant box update</code> の使い方がわからなかったのですが、
<code>box_url</code> でダウンロードしてきた box で使うものではなく Vagrant Cloud から
ダウンロードしてきた box で使うものだったようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apt-cacher-ngでliveイメージ作成を繰り返す時の無駄なダウンロードを減らす]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-14-apt-cacher-ng.html"/>
    <updated>2014-07-14T23:53:14+09:00</updated>
    <id>http://blog.n-z.jp/blog/apt-cacher-ng</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/znz/rubylive-builder" title="rubylive-builder">rubylive-builder</a>
で
<a href="https://github.com/znz/rubylive" title="RubyLive">RubyLive</a>
という Debian wheezy ベースの Live イメージを作成するときに
<code>apt-get update</code> などで何度も無駄にダウンロードしてしまうので、
<code>apt-cacher-ng</code> で Live イメージ作成を繰り返す時の無駄なダウンロードを減らすことにしました。</p>

<!--more-->


<h2>Vagrant の provision でインストール</h2>

<p>Vagrantfile では</p>

<p>```ruby Vagrantfile
  config.vm.provision :shell do |shell|</p>

<pre><code>shell.path = "provision.sh"
</code></pre>

<p>  end
```</p>

<p>のようにシェルスクリプトでプロビジョニングしているだけだったので、
その中で以下のようにインストールして設定するようにしました。</p>

<p><code>bash provision.sh
apt-get install -y apt-cacher-ng
echo 'Acquire::http::Proxy "http://localhost:3142/";' &gt;/etc/apt/apt.conf.d/02proxy
</code></p>

<p>Vagrantfile で以下のようにポートフォワーディングを設定していれば
<a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0315" title="第315回　apt-cacher-ngを使ってAPT用キャッシュプロキシの構築：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社">第315回　apt-cacher-ngを使ってAPT用キャッシュプロキシの構築：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社</a>
の2ページ目に説明があるようにヒット率などを確認できます。</p>

<p><code>ruby Vagrantfile
  # apt-cacher-ng
  config.vm.network "forwarded_port", guest: 3142, host: 3142
</code></p>

<h2>rake コマンドで環境変数を渡す</h2>

<p><code>APT_HTTP_PROXY=http://localhost:3142 rake</code> でも良かったのですが、
rake コマンドは引数の <code>FOO=bar</code> を <code>ENV</code> に設定してくれるので、
<code>rake APT_HTTP_PROXY=http://localhost:3142</code> で渡して、
Rakefile の中では以下のように受け取って <code>lb config</code> に渡しました。</p>

<p>```ruby Rakefile
desc &ldquo;config RubyLive&rdquo;
task :config => [:clean] do
  sh &lsquo;lb config&rsquo;
  if ENV[&lsquo;APT_HTTP_PROXY&rsquo;]</p>

<pre><code>sh "lb config --apt-http-proxy #{ENV['APT_HTTP_PROXY']}"
</code></pre>

<p>  end
end
```</p>

<h2>live-build で apt-cacher-ng を使う</h2>

<p>既に出てきたように
<code>lb config</code> の <code>--apt-http-proxy</code> オプションや <code>--apt-ftp-proxy</code> オプションで指定すると
Live イメージ作成の時に proxy を使ってくれるようになります。
今回は apt-line に <code>http</code> しか使っていないので
<code>--apt-http-proxy</code> だけ指定しています。</p>

<p>もちろん、作成後の Live イメージには proxy 設定は残りません。</p>

<h2>感想</h2>

<p>live-build は cache ディレクトリにも、かなりキャッシュしてくれるのですが、
<code>apt-get update</code> などの proxy じゃないとキャッシュしにくいものもあるので、
どんな場合でもダウンロード量削減に役に立ちそうだと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyLiveを仮想環境で作成]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-13-build-rubylive-on-vm.html"/>
    <updated>2014-07-13T09:35:02+09:00</updated>
    <id>http://blog.n-z.jp/blog/build-rubylive-on-vm</id>
    <content type="html"><![CDATA[<p>最近流行りの仮想環境を使ってクリーンな wheezy 環境で RubyLive を作成できるようにしました。</p>

<p>VirtualBox + Vagrant は特殊な制限のない仮想環境なので Live イメージが作成できたのですが、
docker は後述の制限のために作成できませんでした。</p>

<!--more-->


<h2>RubyLive を Vagrant で作成</h2>

<p>Vagrant を使ってクリーンな wheezy 環境で RubyLive の ISO を作成できるようにしました。
こちらは問題なく作成できました。</p>

<h3>動作確認バージョン</h3>

<ul>
<li>VirtualBox 4.3.12</li>
<li>Vagrant 1.6.3</li>
</ul>


<h3>使い方</h3>

<ul>
<li>VirtualBox と Vagrant をインストールしておきます。</li>
<li><code>git clone https://github.com/znz/rubylive-builder</code> で取得します。</li>
<li><code>cd rubylive-builder</code> で中に入ります。</li>
<li><code>VM_MEMORY=512 vagrant up</code> のように適当なメモリ容量を指定して起動します。 (指定なしなら 1024)

<ul>
<li>他の項目も環境変数である程度変更できるようにしています。</li>
<li>初回起動時は box をダウンロードするので非常に時間がかかります。</li>
<li>provision で live-build などの必要なパッケージをインストールしています。</li>
</ul>
</li>
<li><code>vagrant ssh</code> でゲストにログインします。</li>
<li><code>/vagrant/rubylive.sh</code> を実行すると <code>/home/vagrant/rubylive</code> で RubyLive のイメージを作成します。

<ul>
<li>実行するたびにタイムスタンプの入ったファイル名の ISO ファイルが作成されます。</li>
<li>ネットワークの速度やマシンスペックに影響を受けると思いますが、試した環境では約1時間かかりました。</li>
</ul>
</li>
<li>作成できた <code>/home/vagrant/rubylive/*.iso</code> を <code>/vagrant</code> にコピーまたは移動して、ホスト OS 側に取り出します。</li>
<li>取り出した ISO ファイルを使用します。</li>
</ul>


<p>なぜか</p>

<pre><code>chroot: failed to run command `/usr/bin/env': No such file or directory
</code></pre>

<p>で失敗することがありましたが、再度 <code>/vagrant/rubylive.sh</code> を実行すれば問題なく作成できました。</p>

<h3>片付け方</h3>

<ul>
<li><code>vagrant destroy</code> で VM を破棄します。</li>
<li><code>git clone</code> した作業ディレクトリを削除します。</li>
<li>wheezy の box が不要なら <code>vagrant box remove opscode_debian-7.4_chef-provisionerless</code> で削除します。</li>
<li>Vagrant や VirtualBox も不要ならアンインストールします。</li>
</ul>


<h2>RubyLive を Docker で作成 (失敗)</h2>

<p>docker 環境の中では <code>chroot /rubylive/chroot mount -t proc proc /proc</code> が <code>EPERM</code> で失敗するため、作成できませんでした。</p>

<h3>動作確認バージョン</h3>

<ul>
<li>docker 1.1.1</li>
</ul>


<h3>試し方</h3>

<ul>
<li>docker をインストールしておきます。</li>
<li><code>git clone https://github.com/znz/rubylive-builder</code> で取得します。</li>
<li><code>docker build rubylive-builder</code> で作成に挑戦します。

<ul>
<li>または <code>cd rubylive-builder</code> で中に入って <code>docker build .</code> です。</li>
</ul>
</li>
<li><code>docker ps -a</code> で最近の CREATED の IMAGE を確認します。

<ul>
<li>もしくは <code>docker images</code> で確認します。</li>
<li>最後の失敗した後の状態は残っていないようでした。</li>
</ul>
</li>
<li><code>docker run -i -t --rm 4b8bc4523794 /bin/bash</code> のように中に入ります。

<ul>
<li>4b8bc4523794 のところは確認した IMAGE の ID にしてください。</li>
</ul>
</li>
<li><code>cd rubylive</code> で rubylive ディレクトリに入って <code>rake</code> で作成に再挑戦します。</li>
<li><code>less /rubylive/chroot/debootstrap/debootstrap.log</code> でログを確認したり、
<code>chroot /rubylive/chroot mount -t proc proc /proc</code> や
<code>mount -t proc proc /rubylive/chroot/proc</code> を直接実行してみたりして
原因を確認します。</li>
</ul>


<h3>失敗部分のメッセージ</h3>

<pre><code>W: Failure trying to run: chroot /rubylive/chroot mount -t proc proc /proc
W: See /rubylive/chroot/debootstrap/debootstrap.log for details
P: Begin unmounting filesystems...
P: Saving caches...
/usr/bin/env: apt-get: No such file or directory
rake aborted!
Command failed with status (1): [sudo lb build...]
</code></pre>

<p><code>/rubylive/chroot/debootstrap/debootstrap.log</code> をみると <code>mount: permission denied</code> と出ていました。</p>

<h3>Dockerfile 直接指定 (失敗)</h3>

<p><code>docker build https://raw.githubusercontent.com/znz/rubylive-builder/master/Dockerfile</code>
のように直接 URL を指定する方法は
<code>sources.list</code> を国内ミラーに差し替える部分が失敗して使えませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian 7 (wheezy) の RubyLive をカスタマイズ中]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-12-debian-ruby-live.html"/>
    <updated>2014-07-12T10:08:26+09:00</updated>
    <id>http://blog.n-z.jp/blog/debian-ruby-live</id>
    <content type="html"><![CDATA[<p>今年の
<a href="https://k-of.jp/2014/" title="KOF 2014：関西オープンフォーラム2014">KOF 2014：関西オープンフォーラム2014</a>
に向けて
<a href="https://github.com/znz/rubylive" title="RubyLive">RubyLive</a>
を作成しています。
fork 元の <a href="https://github.com/no6v/rubylive">no6v 版</a> との違いをまとめていきます。</p>

<!--more-->


<h2>カスタマイズの基本</h2>

<p>README から今回に関係する部分を引用しておくと以下のようになっています。</p>

<ul>
<li>config/hooks/

<ul>
<li>インストールの最後の方で実行するフックスクリプトを置くディレクトリ。</li>
<li>拡張子を .chroot にして実行権限を付けておく。</li>
</ul>
</li>
<li>config/includes.chroot/

<ul>
<li>このディレクトリを root に見立てて LiveCD 環境にコピーしたいファイルを置くディレクトリ。</li>
</ul>
</li>
<li>config/package-lists/

<ul>
<li>特別にインストールしたいパッケージのリストを置くディレクトリ。</li>
<li>拡張子を .list.chroot にしてパッケージ名を列挙する。</li>
</ul>
</li>
</ul>


<h2>壁紙などの変更</h2>

<p><code>resources.yml</code> で設定されたファイルは <code>url</code> から自動ダウンロードして <code>path</code> に置くようになっています。</p>

<p><code>size</code> と <code>sha256sum</code> をチェックするだけで違っていても削除はしないようなので、
ダウンロードに失敗した時は<code>path</code> のファイルは手動で削除する必要がありました。</p>

<p><code>path</code> を変更した時も古いファイルが残ってしまうので、削除する必要がありました。</p>

<h2>dconf の設定</h2>

<p><code>config/includes.chroot/etc/skel/.config/dconf/user</code>
に設定変更後のバイナリが置かれていて、
これはひどいと思ったので、
<code>config/includes.chroot/etc/skel/.gnomerc</code>
で <code>gsettings set</code> を使って設定するようにしました。</p>

<h3>壁紙の変更</h3>

<p>起動後の <code>dconf-editor</code> で選択肢を確認しつつ、
<code>gsettings set org.gnome.desktop.background picture-options centered</code>
にしたり、
<code>gsettings set org.gnome.desktop.background picture-uri 'file:///usr/share/images/desktop-base/RubyKaigi2014-commonLogo.svg</code>
にしたりしました。</p>

<p>2014-07-13 追記:
生成後のイメージに CC-BY 3.0 の説明がないのは良くないと思って、
<code>config/includes.chroot/etc/skel/README.txt</code>
に説明を追加することにしました。</p>

<h3>デスクトップのアイコン</h3>

<p>以前は <code>gnome-panel</code> (上のバーのところ) に起動用のアイコンを追加していたようですが、
<code>gsettings set</code> で設定しようとすると
<code>org.gnome.gnome-panel.layout object-id-list</code> の他に
<code>org.gnome.gnome-panel.layout.objects.object-0</code> や
<code>org.gnome.gnome-panel.layout.objects.object-0.instance-config</code> などの
複数設定が必要で管理の手間もかかりそうだったので、
<code>gsettings set org.gnome.desktop.background show-desktop-icons true</code>
でデスクトップのアイコンが見えるように変更しました。</p>

<h3>スクリーンセーバーの停止</h3>

<p><code>gsettings set org.gnome.desktop.screensaver idle-activation-enabled false</code>
で止めました。</p>

<h2>chm の変更</h2>

<p><a href="http://ruby.morphball.net/refm-remix.html" title="Rubyリファレンスマニュアル chm版リミックス">Rubyリファレンスマニュアル chm版リミックス</a>
の標準テーマのRuby 2.1.0向け chm に差し替えました。
zip ファイルなので、先ほどの <code>.gnomerc</code> でデスクトップに展開するようにしました。</p>

<p>xCHM v. 1.20 で背景画像や色とかがつかないようなので、サイズが小さい標準を選びました。</p>

<h2>パッケージ変更</h2>

<p><code>jfbterm</code> の代わりに <code>fbterm</code> にしたり、
<code>ruby-build</code> でビルドに必要なパッケージを追加したり、
<code>config/includes.chroot/etc/iceweasel/profile/prefs.js</code> の代わりに <code>iceweasel-l10n-ja</code> を追加したり、
<code>bash-completion</code> などを追加したりしました。</p>

<h2>ruby-build で ruby 2.1.2 のインストール</h2>

<p><a href="http://qiita.com/takahashim/items/406421d515ef1d4f1189" title="[ReVIEW Tips] DockerでRe:VIEW - Qiita">[ReVIEW Tips] DockerでRe:VIEW &ndash; Qiita</a>
を参考にして rbenv は使わずに ruby-build だけ使って <code>/usr/local</code> に ruby 2.1.2 をインストールしました。</p>

<h2>localepurge</h2>

<p>locale の設定は live-config で起動時にやっていて hook の中で
<code>DEBIAN_FRONTEND=noninteractive dpkg-reconfigure localepurge</code>
としても起動後と違って ja locale の設定がなかったので、
起動後や設定した後に <code>debconf-show localepurge</code> で確認した値を使って、
<code>localepurge/nopurge</code> が <code>NEEDSCONFIGFIRST</code> のままなら
<code>echo localepurge localepurge/nopurge string "ja, ja_JP.UTF-8" | debconf-set-selections</code>
で設定することにしました。</p>

<p>これで約 200MB ぐらい小さくなりました。</p>
]]></content>
  </entry>
  
</feed>
