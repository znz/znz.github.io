<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debian | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/debian/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-11-30T15:56:19+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[debianでpostfixと連携するvirtual hostではないmailmanの設定をした]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-24-debian-postfix-mailman.html"/>
    <updated>2013-11-24T19:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/debian-postfix-mailman</id>
    <content type="html"><![CDATA[<p>Debian で postfix と mailman を組み合わせて使う時に
<code>lists.example.net</code> のように ML 専用のサブドメインを使う場合は
<code>/etc/mailman/postfix-to-mailman.py</code> のコメントなどを参考にして
設定すれば良いのですが、
ドメインを分けずに他のローカル配送などと同じドメインで
ML を運用する設定の情報があまりなかったので、
どう設定したのかをまとめてみました。</p>

<p>要点としては <code>alias_maps</code> に追加するだけでした。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Debian GNU/Linux 7.2 (wheezy)</li>
<li>postfix 2.9.6-2</li>
<li>mailman 1:2.1.15-1</li>
</ul>


<h2>mailman のインストール</h2>

<p><a href="http://posokosi.seesaa.net/article/378457038.html">nginx + mailman でメーリングリスト: ぽそこし的日乗</a>
に書いてあるように、
なぜかインストール時の debconf の質問で設定した内容が反映されないので、
<code>dpkg-reconfigure mailman</code> で再設定する必要がありました。</p>

<p><code>Default language for Mailman</code> の設定だけなら
<code>/etc/mailman/mm_cfg.py</code> を直接変更でも良いのですが、
<code>Languages to support</code> で <code>ja (Japanese)</code> にチェックしたときに
生成されるファイルもあるので、
<code>dpkg-reconfigure mailman</code> で再設定するのが無難です。</p>

<h2>文字コードについて</h2>

<p>mailman の日本語の文字コードは未だに euc-jp なので、
文字コードを設定できる端末を使うか、
<a href="https://github.com/vmi/cocot">cocot</a>
で
<code>cocot -t utf-8 -p euc-jp ssh mlserver</code>
のように変換をするようにしておかないと文字化けして非常につらいです。</p>

<p><code>LANG=C</code> で mailman 関係のコマンドを実行しても
英語メッセージにはならないので、
注意が必要です。</p>

<h2>postfix の設定</h2>

<p>すでに <code>myhostname</code> とか <code>mydestination</code> に設定しているドメインに同居させるには
<code>alias_maps</code> に <code>hash:/var/lib/mailman/data/aliases</code> を追加するだけです。</p>

<p>具体的には
<code>alias_maps = hash:/etc/aliases</code>
という設定だったのなら、</p>

<p><code>
alias_maps = hash:/etc/aliases
 hash:/var/lib/mailman/data/aliases
</code></p>

<p>のように追加するだけです。
差分をとりやすいように別の行にするのが好みですが、
同じ行の末尾に追加でもかまいません。</p>

<h2>mm_cfg.py の設定</h2>

<h3>MTA</h3>

<p><code>newlist</code> で ML を作成する前に
<code>sudoedit /etc/mailman/mm_cfg.py</code> で
<code>MTA='Postfix'</code> を有効にしておきます。</p>

<p><code>newlist</code> の最後に
<code>/var/lib/mailman/bin/genaliases</code>
相当の処理が実行されるようなのですが、
<code>MTA='Postfix'</code> の設定をしておくと
<code>/var/lib/mailman/data/aliases*</code>
が自動で作成されるようになります。</p>

<p><code>MTA</code> の設定が無いと <code>aliases</code> に設定すべき内容を含むメッセージが表示されるだけでした。</p>

<h3>ML のデフォルト値</h3>

<p>以下のような感じで ML の設定のデフォルト値を設定しておくと
後から Web で設定変更する手間を省けます。</p>

<p><code>
DEFAULT_SUBJECT_PREFIX = "[%(real_name)s:%%d] "
DEFAULT_MSG_FOOTER = ""
DEFAULT_REPLY_GOES_TO_LIST = 1
DEFAULT_MAX_MESSAGE_SIZE = 0
DEFAULT_LIST_ADVERTISED = No
DEFAULT_PRIVATE_ROSTER = 2
</code></p>

<p>どんな設定項目があるのかは
<code>/usr/lib/mailman/Mailman/Defaults.py</code>
を参考にすれば良さそうです。</p>

<p><code>sudo -u list /var/lib/mailman/bin/config_list -o - mailman | iconv -f euc-jp -t utf-8 | pager</code>
のように既存の ML の設定を (Web で変更しつつ) 参考にするのも良さそうです。</p>

<h2>パーミッション修正</h2>

<p><code>sudo /var/lib/mailman/bin/check_perms -f</code>
でパーミッションの修正をします。
<code>/var/lib/mailman/messages/</code> の中身のパーミッションの修正があるので、
ほぼ必須だと思います。</p>

<p>最終的には 10 個残りましたが、
シンボリックリンクでリンク先のグループは問題ないようなので、
無視することにしました。</p>

<p><code>
$ sudo /var/lib/mailman/bin/check_perms -f
/var/lib/mailman/bin bad group (has: root, expected list) (fixing)
/var/lib/mailman/logs bad group (has: root, expected list) (fixing)
/var/lib/mailman/cron bad group (has: root, expected list) (fixing)
/var/lib/mailman/icons bad group (has: root, expected list) (fixing)
/var/lib/mailman/Mailman bad group (has: root, expected list) (fixing)
/var/lib/mailman/templates bad group (has: root, expected list) (fixing)
/var/lib/mailman/mail bad group (has: root, expected list) (fixing)
/var/lib/mailman/scripts bad group (has: root, expected list) (fixing)
/var/lib/mailman/cgi-bin bad group (has: root, expected list) (fixing)
/var/lib/mailman/locks bad group (has: root, expected list) (fixing)
Problems found: 10
Re-run as list (or root) with -f flag to fix
</code></p>

<h2>ML 作成</h2>

<p>mailman の依存で自動インストールされる <code>pwgen</code> を使って、
<code>pwgen -sB 20 1</code>
などでパスワードを生成して、
<code>sudo -u list $mlname mladmin@example.net $listpass</code>
のような感じで作成できます。</p>

<h2>その他の設定</h2>

<p>後は fml からのメールの移行とか Web 経由での設定をしていきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[postfixとmilter-managerの設定をした]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-23-postfix-and-milter-manager.html"/>
    <updated>2013-11-23T21:25:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/postfix-and-milter-manager</id>
    <content type="html"><![CDATA[<p>Debian 7.2 (amd64) のサーバーにメールサーバーの設定をしたところ、
<a href="http://milter-manager.sourceforge.net/">milter-manager</a>
関連と gmail への IPv6 経由でのメール送信関連でちょっとひっかかりましたが、
すぐに解決できました。</p>

<!--more-->


<h2>milter-manager の話</h2>

<p>まず <code>milter-manager</code> は
<a href="http://milter-manager.sourceforge.net/reference/ja/install-to-debian.html">Debianへインストール &ndash; milter manager</a>
の手順通りに設定してみたのですが、確認のところで、</p>

<p><code>
 $ sudo -u postfix milter-test-server -s unix:/var/spool/postfix/milter-manager/milter-manager.sock
 status: temporary-failure
 elapsed-time: 0.007781 seconds
</code></p>

<p>のように <code>temporary-failure</code> になりました。
そこで依存しているデーモンを調べてみたところ、
<code>clamd</code> が起動していなかったので、</p>

<pre><code>sudo service clamav-daemon start
</code></pre>

<p>で起動した後、</p>

<pre><code>sudo service clamav-milter restart
</code></pre>

<p>で clamav-milter も再起動したら</p>

<pre><code>status: accept
</code></pre>

<p>になりました。</p>

<p>後で気付いたので、最初のインストール時のメッセージを
ちゃんと確認できていないのですが、
<code>/etc/init.d/clamav-daemon</code> の <code>start</code>
の処理に cvd ファイルなどの存在をチェックして起動を止める処理があるので、
<code>freshclam</code> の処理を待ってから起動しないとダメだったようです。</p>

<h2>gmail と IPv6 の話</h2>

<p><a href="http://ya.maya.st/d/201308c.html#s20130822_1">gmail の逆引き制限</a>
の人と同じように IPv6 で逆引き必須にするのは否定的なのですが、
それはおいといて、現実問題として送信できないのは困るので、
<code>smtp_address_preference = ipv4</code> の設定を追加しました。</p>

<p>その設定をする前にテストメールを送ったら、
以下のようなエラーメールが返ってきて、
エラーメッセージの中の URL が
<a href="http://www.postfix-jp.info/ML/arc-2.5/msg00237.html">以前ひっかかったとき</a>
とは変わっているということに気付きました。</p>

<p>```
&lt;自分のアドレス@gmail.com> (expanded from &lt;自分@あるサーバー>): host</p>

<pre><code>gmail-smtp-in.l.google.com[2607:f8b0:4002:c01::1a] said: 550-5.7.1
[2401:xxxx:xxx:xxxx:xxx:xxx:xxx:xxx      16] Our system has detected
550-5.7.1 that this message does not meet IPv6 sending guidelines regarding
PTR 550-5.7.1 records and authentication. Please review 550-5.7.1
https://support.google.com/mail/?p=ipv6_authentication_error for more 550
5.7.1 information. e2si14078426yhm.125 - gsmtp (in reply to end of DATA
command)
</code></pre>

<p>```</p>

<h2>余談</h2>

<p>以前はメールサーバーの spam 対策の設定は秘伝のたれ状態で
だんだんメンテナンスが難しくなってしまっていましたが、
spam 対策は milter-manager だったり、
firewall は <a href="packages.debian.org/ufw">ufw</a> だったり、
いろいろと共通で使えるものが増えてきて楽になってきたように思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[/dev/snd/hwC0D0でPermission deniedになる問題を調べた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-04-dev-snd-hwc0d0-permission-denied.html"/>
    <updated>2013-11-04T14:22:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dev-snd-hwc0d0-permission-denied</id>
    <content type="html"><![CDATA[<p><code>/dev/snd/hwC0D0</code> を <code>O_RDWR</code> で <code>open(2)</code> するところで
<code>Permission denied</code> になるという話
(
<a href="https://twitter.com/takaswie/status/397014733494026240">ツイート</a>、
<a href="https://forums.ubuntulinux.jp/viewtopic.php?pid=100488#p100488">Ubuntu日本語フォーラム</a>
)
が気になったので、調べてみました。</p>

<!--more-->


<h2>結論</h2>

<p>最終的にどうすれば良いか知りたい人向けの情報としては、
<code>setcap cap_sys_rawio=ep filename</code>
でケーパビリティ (capability) を設定する、ということになります。</p>

<p>以下は、その結論にたどり着くまでに調べたことのメモです。</p>

<h2>パーミッションと ACL</h2>

<p><a href="http://blog.n-z.jp/blog/2013-10-27-kansai-debian-meeting.html">第 77 回 関西 Debian 勉強会に参加した</a>
で書いたように、
audio グループに属しているか、コンソールから直接ログインしていれば
パーミッションの問題はないはずです。</p>

<h2>余談: デバイスの sticky bit</h2>

<p><code>crw-rw---T</code> になっていて、
もしかして末尾の sticky bit が影響しているのかと思って調べてみたところ、
<a href="http://lists.debian.org/debian-user/2012/02/msg01273.html">Re: Sticky bit on device files?</a>
によると udev の管理用のフラグとして使われているようでした。
今回の件とは関係なさそうだったので、これ以上深追いはしていません。</p>

<h2>AppArmor</h2>

<p><code>/etc/apparmor.d/abstractions/audio</code> に
<code>/dev/snd/*      rw,</code> とあるので、
念のため
<code>sudo service apparmor stop</code>
で <code>AppArmor</code> を止めて試してみましたが、
変化が無かったので、
<code>sudo service apparmor start</code>
で戻しました。</p>

<h2>カーネルのソースコード探索</h2>

<p><code>strace</code> などで確認しても、
ユーザーランドでは <code>EACCES</code> が返ってくるとしかわからないので、
こうなったらカーネルのソースコードから <code>EACCES</code> を返しているところを
探すしかないということで、
<code>apt-get source linux-image-$(uname -r)</code>
でソースコードをダウンロードして探してみました。</p>

<p><code>grep -r EACCES sound</code> で探してみると
<code>sound/pci/hda/hda_hwdep.c</code> で以下のように
<code>CAP_SYS_RAWIO</code> をみていることがわかりました。</p>

<p>```c sound/pci/hda/hda_hwdep.c
 static int hda_hwdep_open(struct snd_hwdep <em>hw, struct file </em>file)
 {
 #ifndef CONFIG_SND_DEBUG_VERBOSE</p>

<pre><code>if (!capable(CAP_SYS_RAWIO))
    return -EACCES;
</code></pre>

<p> #endif</p>

<pre><code>return 0;
</code></pre>

<p> }
```</p>

<h2>Linux のケーパビリティ (capability)</h2>

<p><a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man7/capabilities.7.html">Man page of CAPABILITIES</a>
が関係しているということがわかったところで、
設定方法も調べてみると、
<code>setcap</code> で設定できるとわかったので、
以下のような簡単なテストプログラムを用意して、
<code>sudo setcap cap_sys_rawio=ep ./a.out</code>
でケーパビリティを設定すると
<code>open(2)</code>
に成功するのを確認できました。
<code>cap_sys_rawio=ep</code> は危険そうなので、
テストプログラムとはいえ、
任意のパスを受け取れるようにするのは止めた方が良さそうに思いました。</p>

<p>```c open-hwC0D0.c
 #include &lt;sys/types.h>
 #include &lt;sys/stat.h>
 #include &lt;fcntl.h>
 #include &lt;stdio.h></p>

<p> int main() {</p>

<pre><code>open("/dev/snd/hwC0D0", O_RDWR);
perror("open");
return 0;
</code></pre>

<p> }
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LC_COLLATEの問題でuniqで丸数字が同一視されてしまう]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-31-lc-collate-uniq.html"/>
    <updated>2013-10-31T23:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lc-collate-uniq</id>
    <content type="html"><![CDATA[<p><code>uniq -c</code> で重複がないのを確認しようとしたら、
丸数字のところだけ違う行が同一視されてしまって、
2以上になることがあって困ったので、
原因を調べてみました。</p>

<!--more-->


<h2>現象</h2>

<p>以下のように丸数字などが同一視されています。</p>

<p><code>
$ cat n.txt
①
②
$ uniq n.txt
①
$ sort n.txt
①
②
$ tac n.txt | sort
②
①
$
</code></p>

<p>```
$ cat n.txt
①
②
$ LANG=ja_JP.utf8 uniq -c n.txt</p>

<pre><code>  2 ①
</code></pre>

<p>$ LANG=C uniq -c n.txt</p>

<pre><code>  1 ①
  1 ②
</code></pre>

<p>$ uniq &mdash;version
uniq (GNU coreutils) 8.20
Copyright &copy; 2012 Free Software Foundation, Inc.
ライセンス GPLv3+: GNU GPL version 3 or later <a href="http://gnu.org/licenses/gpl.html">http://gnu.org/licenses/gpl.html</a>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.</p>

<p>作者 Richard M. Stallman および David MacKenzie。
$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 13.04
Release:        13.04
Codename:       raring
$
```</p>

<h2>調査</h2>

<p><code>apt-get source locales</code>
でソースをとってきて調べてみると
<code>locales/ja_JP</code> の <code>LC_COLLATE</code> から <code>END LC_COLLATE</code>
の間に書いていないコードポイントは同一視されているように見えました。</p>

<p>これは glibc の問題だと思って、既に報告されているかどうか調べてみると
<a href="https://sourceware.org/bugzilla/show_bug.cgi?id=13063">Bug 13063 – &lsquo;sort -u&rsquo; will erase some Chinese characters</a>
に同じような話がありました。</p>

<h2>ML で聞いてみた</h2>

<p><a href="http://listserv.linux.or.jp/pipermail/linux-users/2013-October/000527.html">linux-users: 108951</a>
で質問してみたところ、
<a href="http://listserv.linux.or.jp/pipermail/linux-users/2013-October/000528.html">linux-users: 108952</a>
で返信があり、
<code>LC_COLLATE</code>
をちゃんと定義して解決するか、
単純にバイト順でソートしたいだけなら
<code>LC_COLLATE=C</code> で良いという話でした。</p>

<h2>結論</h2>

<p>結局今回の目的はソートではなく重複検査だったので、
<code>LC_COLLATE=C</code> で解決ということになりました。</p>

<p>誰か興味のある人は真面目に
<code>LC_COLLATE</code>
の定義に挑戦してみると良いのではないでしょうか。</p>

<p>それとは別に定義されていない文字を同一視せずにバイト順でも何でもいいので、
適当に別の文字として扱ってくれるようになればいいのに、
とは思いました。
誰かそういう方向での対応も挑戦してみると
他の言語も含めて幸せになれるのではないかと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 77 回 関西 Debian 勉強会に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-27-kansai-debian-meeting.html"/>
    <updated>2013-10-27T13:46:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20131027">第 77 回 関西 Debian 勉強会</a>
に参加してきました。</p>

<p>前回の「Linuxとサウンドシステム」
の続きの
「ALSAのユーザーランド解説」
と
「git-buildpackage 入門 again」
という話でした。</p>

<!--more-->


<h2>Intro</h2>

<p><code>jessie</code> に向けての話で、
デフォルトの <code>init</code> が <code>systemd</code> に変わるかも、
というのが気になりました。
他に UTF-8 といえば UTF-8 に対応していない namazu のようなものが
どうなるのかというのもちょっと気になりました。</p>

<p>事前課題では、
前回の時に発表者の坂本さんに
VirtualBox の中の wheezy で音が出ない原因を調べてもらって、
<code>alsamixer</code> でボリュームが 0 になっていたから、
というのを直してもらっていたので、
すんなり音を出すことができました。</p>

<p>佐々木さんは警告のフラグ (<code>-Wall -Wextra</code>) を増やしてビルドしていて、
その警告メッセージを事前課題のところに書いていました。</p>

<p>警告の一部は <code>if</code> 文の処理内容が <code>;</code> だけで <code>{}</code> でくくった方が良いという警告だったのですが、
何もしないままよりも、
後ろにコメントで書いてあるメッセージを <code>puts</code> などで出力するようにした方が良いのではないかと思いました。</p>

<h2>ALSA のユーザーランド解説</h2>

<p>事前課題の添付ファイルの <code>pcm_minimal.c</code> の <code>device</code> のところにある
PCM ノードの指定は <code>default</code> 以外にも
<code>aplay -L</code> (または <code>arecord -L</code>) で表示されるものが指定できるという話がありました。</p>

<p><code>c
/* playback PCM node */
static char *device = "default";
</code></p>

<p><code>dmix</code>, <code>dsnoop</code>, <code>hw</code>, <code>plughw</code> はデフォルトでは隠されていて、
<code>~/.asoundrc</code> で以下のように設定をオーバーライドすれば <code>aplay -L</code> などで
出てくるようになるという話がありました。
(ALSA の上流や Debian では出ないのがデフォルトで、
Ubuntu ではパッチが当たっていて、
標準で出てくるようになっているという話もありました。)</p>

<p><code>text ~/.asoundrc
defaults.namehint.extended on
</code></p>

<p>その前に asound の設定ファイルは独自形式で、
書式の説明は <code>libasound2-doc</code> パッケージの
<code>/usr/share/doc/libasound2-doc/html/</code>
以下にあるという話もありました。
独自形式のため、ライブラリとして設定ファイルを読み込む部分も持っているそうです。</p>

<p>PulseAudio 関係のパッケージを入れた時に
default が dmix/dsnoop から pulse に変わって、
PulseAudio のデーモンはログイン時に起動するという話もありました。</p>

<p>Android ではユーザーランドは asound ではなく tinyalsa で
カーネルランドは ASoC という話もありました。</p>

<h2>git-buildpackage 入門 again</h2>

<p>実際に <code>git-buildpackage</code> を使ってみるという内容でした。
最初にモバイルルーターなどを使ってみんなネットにつながるようにしてから始まりました。</p>

<p>事前課題で候補にあがったものを実際に <code>git-buildpackage</code> でビルドしてみるという話が続きました。
最後は時間切れで次回予告などは片付けをしながらになってしまいました。</p>

<p>最新の <code>git-buildpackage</code> だと <code>git</code> と同じように <code>gbp</code> コマンドとそのサブコマンドになっていて、
<code>wheezy</code> だと <code>gbp-clone</code> などの <code>-</code> 付きのコマンドを実行する必要がありました。</p>

<p><code>git-dch</code> という <code>git</code> のコミットログから <code>debian/changelog</code> を生成するツールではコミットログの1行目だけとってくるのがデフォルトの動作で、
<code>--full</code> というオプションでコミットログ全体を使えるとか、
man page の <code>META TAGS</code> にあるような情報を入れられるとか、
そういう話もしていました。</p>

<p><code>gbp clone</code> と <code>git clone</code> の違いは、
gbp 用の設定 (<code>debian/gbp.conf</code> とか) を見るとか、
upstream ブランチとかの設定をしてくれるということでした。</p>

<p><code>pbuilder</code> を使っていても前処理の <code>fakeroot debian/rules clean</code> が <code>pbuilder</code> の外で動いて、
そこで依存パッケージが必要なことがあるので <code>git-buildpackage</code> の前に
<code>build-dep</code> でビルドに必要なパッケージを入れる必要があるという話がありました。</p>

<h2>/dev/snd の ACL</h2>

<p>Debian 勉強会ということでホスト OS は Mac OS X なのですが、
サウンド関連や git-buildpackage は
VirtualBox の中の wheezy で試していました。</p>

<p>そのときに <code>ls -al /dev/snd</code> でサウンド関連のデバイスファイルに
<code>+</code> がついていて ACL がついているということに気がついて、
どこで設定されているのか気になったので帰ってから調べてみました。</p>

<p>```
$ ls -al /dev/snd
合計 0
drwxr-xr-x   3 root root      180 10月 27 22:44 .
drwxr-xr-x  13 root root     3180 10月 27 22:44 ..
drwxr-xr-x   2 root root       60 10月 27 22:44 by-path
crw-rw&mdash;-T+  1 root audio 116,  5 10月 27 22:44 controlC0
crw-rw&mdash;-T+  1 root audio 116,  4 10月 27 22:44 pcmC0D0c
crw-rw&mdash;-T+  1 root audio 116,  3 10月 27 22:44 pcmC0D0p
crw-rw&mdash;-T+  1 root audio 116,  2 10月 27 22:44 pcmC0D1c
crw-rw&mdash;-T+  1 root audio 116,  1 10月 27 22:44 seq
crw-rw&mdash;-T+  1 root audio 116, 33 10月 27 22:44 timer
$ getfacl /dev/snd/seq
getfacl: Removing leading &lsquo;/&rsquo; from absolute path names</p>

<h1>file: dev/snd/seq</h1>

<h1>owner: root</h1>

<h1>group: audio</h1>

<h1>flags: &mdash;t</h1>

<p>user::rw-
user:admin0:rw-
group::rw-
mask::rw-
other::&mdash;&ndash;
```</p>

<p>まず、 <code>grep -r snd /lib/udev/rules.d</code> でデバイスを作成している場所を
探してみましたが、 <code>audio</code> グループに設定している箇所しか見つかりませんでした。</p>

<p>```text /lib/udev/rules.d/91-permissions.rules</p>

<h1>sound devices</h1>

<p>SUBSYSTEM==&ldquo;sound&rdquo;,                             GROUP=&ldquo;audio&rdquo;,</p>

<pre><code>    OPTIONS+="static_node=snd/seq", OPTIONS+="static_node=snd/timer"
</code></pre>

<p>```</p>

<p>次に、ログインしているユーザーの ACL が追加されているということで、
PAM が関係しているだろうという見当をつけて、
<code>/etc/pam.d</code> を確認してみたところ、
<code>common-session</code> の <code>pam_ck_connector</code> が関係してそうだと気付きました。</p>

<p><code>text /etc/pam.d/common-session
session optional            pam_ck_connector.so nox11
</code></p>

<p>そこで <code>dpkg -L consolekit</code> などで <code>ConsoleKit</code> 関連のファイルをみていくと
<code>/usr/lib/ConsoleKit/run-seat.d/udev-acl.ck -&gt; /lib/udev/udev-acl</code>
が関係してそうだと気がついたので、
もう一度 udev のルールを確認してみると <code>70-udev-acl.rules</code> で
<code>udev-acl</code> というタグを設定していました。</p>

<p>```text /lib/udev/rules.d/70-udev-acl.rules</p>

<h1>sound devices</h1>

<p>SUBSYSTEM==&ldquo;sound&rdquo;, TAG+=&ldquo;udev-acl&rdquo;
```</p>

<p><code>70-udev-acl.rules</code> をみたり <code>udev-acl</code> のソースをみると <code>ACL</code> を設定しているのは
<code>udev-acl</code> で間違いなさそうでした。
ただし、 <code>70-udev-acl.rules</code> で
<code># systemd replaces udev-acl entirely, skip if active</code>
と書いてあったので、 <code>systemd</code> を使っている環境だと
<code>udev-acl</code> は何もしないようです。</p>
]]></content>
  </entry>
  
</feed>
