<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debian | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/debian/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2016-05-01T00:16:02+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[wheezy から jessie にあげたら mailman でエラーが起きていた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-30-mailman-error.html"/>
    <updated>2016-04-30T23:52:04+09:00</updated>
    <id>http://blog.n-z.jp/blog/mailman-error</id>
    <content type="html"><![CDATA[<p>wheezy から jessie にあげた VPS の環境のうちの 1 個で mailman を使っていたのですが、ちゃんと確認していなかったらエラーが起きてちゃんとメールが配送されていなかったので、修正しました。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>Debian GNU/Linux amd64 の wheezy から jessie にあげた環境</li>
<li><a href="http://packages.debian.org/mailman">mailman</a> 1:2.1.15-1+deb7u1 から 1:2.1.18-2</li>
</ul>


<h2>エラーの内容</h2>

<p><code>/var/log/mailman/error</code> を見ると以下のようなエラーが出てメールの配送がされていませんでした。</p>

<pre><code>Apr 30 17:02:36 2016 (17947) Uncaught runner exception: 'utf8' codec can't decode byte 0xcb in position 5: invalid conti
nuation byte
Apr 30 17:02:36 2016 (17947) Traceback (most recent call last):
  File "/var/lib/mailman/Mailman/Queue/Runner.py", line 119, in _oneloop
    self._onefile(msg, msgdata)
  File "/var/lib/mailman/Mailman/Queue/Runner.py", line 190, in _onefile
    keepqueued = self._dispose(mlist, msg, msgdata)
  File "/var/lib/mailman/Mailman/Queue/IncomingRunner.py", line 130, in _dispose
    more = self._dopipeline(mlist, msg, msgdata, pipeline)
  File "/var/lib/mailman/Mailman/Queue/IncomingRunner.py", line 153, in _dopipeline
    sys.modules[modname].process(mlist, msg, msgdata)
  File "/var/lib/mailman/Mailman/Handlers/CookHeaders.py", line 179, in process
    i18ndesc = uheader(mlist, mlist.description, 'Reply-To')
  File "/var/lib/mailman/Mailman/Handlers/CookHeaders.py", line 65, in uheader
    return Header(s, charset, maxlinelen, header_name, continuation_ws)
  File "/usr/lib/python2.7/email/header.py", line 183, in __init__
    self.append(s, charset, errors)
  File "/usr/lib/python2.7/email/header.py", line 267, in append
    ustr = unicode(s, incodec, errors)
UnicodeDecodeError: 'utf8' codec can't decode byte 0xcb in position 5: invalid continuation byte

Apr 30 17:02:36 2016 (17947) SHUNTING: 1462003356.244866+ea73a2d0f0636f691f515c4b199b5e8c21436142
</code></pre>

<h2>調査</h2>

<p>エラーメッセージで適当に切り出していろいろ検索してみたところ、
<a href="https://bugs.launchpad.net/mailman/+bug/1462755">qrunner crashes on invalid unicode sequence</a>
と同じ現象だとわかりました。</p>

<p>コメントにあるように調査してみたところ、確かに description に問題がありそうでした。
Web の設定画面で見てみると info も化けていたので、元の設定を調査するために <code>withlist</code> の環境で表示しておきました。</p>

<pre><code># withlist lilo
lilo のリストを読み込中 (ロック解除)
変数 `m' が lilo の MailList インスタンスです
&gt;&gt;&gt; m.preferred_language
'ja'
&gt;&gt;&gt; m.description
'LILO \xcb\xdc\xc2\xceML'
&gt;&gt;&gt; m.info
'LILO ( \xa4\xea\xa4\xed : Linux Install Learning Osaka ) \xa4\xcf\xb4\xd8\xc0\xbe\xa4\xce Linux \xa5\xe6\xa1\xbc\xa5\xb6\xb2\xf1\xa4\xc7\xa4\xb9\xa1\xa3 \xbc\xe7\xa4\xcb\xb4\xd8\xc0\xbe\xa4\xce Linux \xa5\xe6\xa1\xbc\xa5\xb6\xa4\xce\xb8\xf2\xce\xae\xa1\xa2\xbe\xf0\xca\xf3\xb8\xf2\xb4\xb9\xa4\xce\xbe\xec\xa4\xf2\xc4\xf3\xb6\xa1\xa4\xb9\xa4\xeb\xa4\xbf\xa4\xe1\xa4\xcb\xb3\xe8\xc6\xb0\xa4\xb7\xa4\xc6\xa4\xa4\xa4\xde\xa4\xb9\xa1\xa3'
&gt;&gt;&gt;
最終処理中
#
</code></pre>

<h2>変換</h2>

<p>何でも良かったのですが、使い慣れているという理由で ruby の nkf で変換しました。
変換した結果を Web の設定画面から設定し直しました。</p>

<pre><code>% rbenv exec irb -r irb/completion --simple-prompt
&gt;&gt; require 'nkf'
=&gt; true
&gt;&gt; NKF.nkf('-w',"LILO \xcb\xdc\xc2\xceML")
=&gt; "LILO 本体ML"
&gt;&gt; NKF.nkf('-w',"'LILO ( \xa4\xea\xa4\xed : Linux Install Learning Osaka ) \xa4\xcf\xb4\xd8\xc0\xbe\xa4\xce Linux \xa5\xe6\xa1\xbc\xa5\xb6\xb2\xf1\xa4\xc7\xa4\xb9\xa1\xa3 \xbc\xe7\xa4\xcb\xb4\xd8\xc0\xbe\xa4\xce Linux \xa5\xe6\xa1\xbc\xa5\xb6\xa4\xce\xb8\xf2\xce\xae\xa1\xa2\xbe\xf0\xca\xf3\xb8\xf2\xb4\xb9\xa4\xce\xbe\xec\xa4\xf2\xc4\xf3\xb6\xa1\xa4\xb9\xa4\xeb\xa4\xbf\xa4\xe1\xa4\xcb\xb3\xe8\xc6\xb0\xa4\xb7\xa4\xc6\xa4\xa4\xa4\xde\xa4\xb9\xa1\xa3'")
=&gt; "'LILO ( りろ : Linux Install Learning Osaka ) は関西の Linux ユーザ会です。 主に関西の Linux ユーザの交流、情報交換 の場を提供するために活動しています。'"
&gt;&gt;
</code></pre>

<h2>失敗したメールの再配送</h2>

<p>設定し直した後、しばらく待ってみても再配送はされなかったので、メールキューの強制再実行が必要かと思って、 <code>/var/lib/mailman</code> 以下を調べてみたところ、 <code>/var/lib/mailman/qfiles/shunt/</code> の中にファイルが溜まっていることがわかりました。</p>

<p>さらに調べていて見つけた
<a href="http://docs.python.jp/contrib/mailman/siteadmin.html#unshunt">http://docs.python.jp/contrib/mailman/siteadmin.html#unshunt</a>
によると qrunner が処理中にエラーを発生させて処理できなかったメールは <code>&lt;prefix&gt;/qfiles/shunt</code> に保存されていて、<code>unshunt</code> コマンドで処理できるらしいということなので、試してみたところ、ちゃんと溜まっていたメールが配送されました。</p>

<h2>NEWS.Debian 確認</h2>

<p>復旧を優先して、ちゃんと見るのを忘れていたのですが、 <code>/usr/share/doc/mailman/NEWS.Debian.gz</code> によると <code>mailman (1:2.1.16-1exp1)</code> で UTF-8 化したから description を webinterface などから設定しなおせと書いてありました。</p>

<pre><code>mailman (1:2.1.16-1exp1) experimental; urgency=low

  This version has changed the encoding of most strings, templates
  and pages to UTF-8 to meet the Debian release goal of full UTF-8
  support in all packages. It also no longer automatically converts
  mails to ISO-8859-1.

  If you have been using any nōn-ASCII strings in places such as
  the mailing list description, these were be stored wrongly in the
  list configuration file (config.pck), so you will need to change
  those (e.g. via the webinterface) again in order to have them be
  displayed correctly.

 -- Thorsten Glaser &lt;tg@mirbsd.de&gt;  Sun, 29 Dec 2013 14:35:50 +0000
</code></pre>

<h2>まとめ</h2>

<p>mailman が UTF-8 対応で description や info などに日本語などの ASCII 以外の文字を使っているとエラーが起きるという話でした。</p>

<p>実行例で気付いた人もいると思いますが、 lilo.linux.or.jp のサーバーでの話で、他にも管理用の ML などがあるのですが、それらは description や info が空だったので問題が起きていなかったようです。</p>

<p>教訓としては、急いでいても apt-listchanges で最低限 NEWS だけはちゃんと読むようにした方が良いということでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[公開鍵認証 + libpam-google-authenticator による二要素認証を特定のユーザーだけ対象に導入する]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-18-libpam-google-authenticator.html"/>
    <updated>2016-04-18T21:26:42+09:00</updated>
    <id>http://blog.n-z.jp/blog/libpam-google-authenticator</id>
    <content type="html"><![CDATA[<p>普通に <code>libpam-google-authenticator</code> を PAM の設定に追加するだけだと公開鍵認証の時に使われなくて二要素認証として嬉しくなかったのと、
<code>libpam-google-authenticator</code> による二要素認証をいきなり全ユーザーに導入してしまうと <code>google-authenticator</code> コマンドによるトークン作成をしていないユーザーが入れなくなってしまったり、リモートバックアップ処理の自動実行などで入れなくなったりして困るので、
一部のユーザーだけ二要素認証が必須になる設定を考えてみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Debian GNU/Linux 8.4 (jessie)</li>
<li>openssh-server 1:6.7p1-5+deb8u1</li>
<li>libpam-google-authenticator 20130529-2</li>
</ul>


<h2>設定時の注意</h2>

<p>PAM の設定変更は失敗するとログインできなくなって危険なので、設定を戻したりできるシェルを最低一個は残した状態で設定を変更することをおすすめします。</p>

<h2>PAM の設定</h2>

<p>PAM の設定では <code>@include common-auth</code> の代わりに <code>pam_unix.so</code> を <code>pam_google_authenticator.so</code> に置き換えた設定を <code>/etc/pam.d/sshd</code> に追加しました。</p>

<p>これで <code>keyboard-interactive</code> 認証では unix password による認証は使えなくなって <code>libpam-google-authenticator</code> による認証だけになります。</p>

<p>ワンタイムパスワードなので、入力している値を見られても困らないし、実際 GitHub などでの入力画面では隠されていないので、 <code>/usr/share/doc/libpam-google-authenticator/README.gz</code> にも書いてある <code>echo_verification_code</code> の設定も追加してエコーバックされるようにしてみました。</p>

<pre><code class="plain /etc/pam.d/sshd">+auth [success=1 default=ignore] pam_google_authenticator.so echo_verification_code
+auth requisite pam_deny.so
+auth required pam_permit.so
 # Standard Un*x authentication.
-@include common-auth
+#@include common-auth
</code></pre>

<h2>sshd の設定</h2>

<p>他の <code>pam_google_authenticator.so</code> 導入記事にも書いてあるように
<code>ChallengeResponseAuthentication</code> を <code>yes</code> に変更します。
この設定を変更しないと <code>Verification code:</code> の入力プロンプトが出てこなくて、
認証コードの入力ができません。</p>

<pre><code class="plain /etc/ssh/sshd_config">ChallengeResponseAuthentication yes
</code></pre>

<p>最後に適当なグループ (今回は <code>/var/log/</code> のログファイルのグループなどに利用されている <code>adm</code> グループを利用しましたが <code>sudo</code> グループなどでも良いかもしれません) を <code>Match</code> で指定して、そのグループに属するユーザーの時だけ <code>AuthenticationMethods</code> で公開鍵認証と <code>keyboard-interactive</code> 認証の両方を必須にしました。</p>

<pre><code class="plain /etc/ssh/sshd_config">Match Group adm
AuthenticationMethods publickey,keyboard-interactive
</code></pre>

<h2>トークンを生成しているユーザーだけ有効にする設定</h2>

<p><code>google-authenticator</code> コマンドで <code>~/.google-authenticator</code> を生成しているユーザーだけ有効にすることができたので、その方法もメモしておきます。</p>

<p>方法としては <code>pam_exec</code> を使ってファイルの存在チェックをすれば可能でした。
<code>pam_exec.so</code> の引数部分では直接環境変数展開ができなかったので、別途外部に実行ファイルを用意する方法がデバッグもしやすくておすすめです。</p>

<p>存在チェックが成功すればそのまま次の行に進んで、存在しなければ後続の 2 行を飛ばして <code>pam_permit.so</code> で許可するようにしました。</p>

<p>PAM の設定の詳細については<a href="http://tokyodebian.alioth.debian.org/pdf/debianmeetingresume2012-natsu.pdf">大統一Debian勉強会 特大号 東京エリア/関西Debian勉強会のPDF</a> か、<a href="http://gum.debian.or.jp/2012/">大統一Debian勉強会</a> の「Linux-PAMの設定について」の発表資料を参考にしてください。</p>

<p><code>pam_exec.so</code> に <code>quiet</code> をつけないと <code>~/.google-authenticator</code> がない場合に毎回 <code>/usr/local/bin/check_google_authenticator.sh failed: exit code 1</code> が出るので、 <code>quiet</code> をつけて抑制するようにしました。
<code>Authenticated with partial success.</code> というメッセージは <code>ssh</code> が出しているので消せませんでした。</p>

<pre><code class="plain /etc/pam.d/sshd">auth [success=ignore default=2] pam_exec.so quiet /usr/local/bin/check_google_authenticator.sh
auth [success=1 default=ignore] pam_google_authenticator.so echo_verification_code
auth requisite pam_deny.so
auth required pam_permit.so
</code></pre>

<p>存在のチェック用スクリプトは <code>pam_exec</code> 経由で実行された時には <code>HOME</code> 環境変数が設定されていなくて、代わりに <code>PAM_USER</code> などが設定されているのを利用して <code>HOME</code> を設定されていなければ設定するようにしました。</p>

<pre><code class="bash /usr/local/bin/check_google_authenticator.sh">#!/bin/sh
: ${HOME:=$(getent passwd "$PAM_USER" | awk -F: '{print $6}')}
test -f "$HOME/.google_authenticator"
</code></pre>

<h2>/etc/pam.d/sshd にまとめる書き方</h2>

<p>発表資料の PDF を確認して気付いたのですが、 <code>[ ]</code> でくくれば空白の入った引数も渡せるので、シェルを経由するようにすれば変数展開付きのコマンドを含められました。</p>

<pre><code class="plain /etc/pam.d/sshd">auth [success=ignore default=2] pam_exec.so quiet /bin/sh -c [: ${HOME:=$(getent passwd "$PAM_USER" | awk -F: '{print $6}')}; test -f "$HOME/.google_authenticator"]
auth [success=1 default=ignore] pam_google_authenticator.so echo_verification_code
auth requisite pam_deny.so
auth required pam_permit.so
</code></pre>

<h2>google-authenticator コマンドによるトークンの作成</h2>

<p>二要素認証を使うユーザーで <code>google-authenticator</code> コマンドを実行してトークンを作成して、 iOS なら Google Authenticator のアプリに、 Android なら Google 認証システムアプリに QR コードを読み込ませておきます。
<code>google-authenticator</code> コマンドの質問は全部 <code>y</code> で良いと思います。</p>

<p>設定は <code>~/.google_authenticator</code> に保存されています。</p>

<p>テスト環境では QR コードは読み込ませずに <code>emergency scratch codes</code> を使っていたのですが、
<code>emergency scratch codes</code> は使っていくと <code>~/.google_authenticator</code> からどんどん減っていくので、適当なタイミングで <code>google-authenticator</code> コマンドを使って再生成させないと入れなくなりそうでした。</p>

<h2>失敗した設定例</h2>

<p><code>Match</code> で <code>ChallengeResponseAuthentication</code> を設定しようとしましたが、 <code>Directive 'ChallengeResponseAuthentication' is not allowed within a Match block</code> というエラーで設定できませんでした。</p>

<p>公開鍵ごとに二要素認証の設定ができないか、検討してみましたが、使えそうな設定項目が見つかりませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jessie で dovecot-imapd と postfix の設定をして Thunderbird 用の autoconfig ファイルを用意した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-17-jessie-dovecot.html"/>
    <updated>2016-04-17T21:14:05+09:00</updated>
    <id>http://blog.n-z.jp/blog/jessie-dovecot</id>
    <content type="html"><![CDATA[<p><a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0387?page=4">Ubuntu Weekly Recipe 第387回　UbuntuでSSLを利用したサービスを構築する</a> を参考にして、 Debian jessie で dovecot-imapd で IMAP サーバーの設定をしました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Debian GNU/Linux 8.4 (jessie)</li>
<li>postfix 2.11.3-1</li>
<li>dovecot-imapd 1:2.2.13-12~deb8u1</li>
<li>Thunderbird 38.6.0</li>
</ul>


<h2>インストール</h2>

<p><code>sudo aptitude install dovecot-imapd</code> でインストールしました。</p>

<h2>認証設定</h2>

<p>クライアントによっては plain 認証は使えず login 認証が必要なので <code>sudoedit /etc/dovecot/conf.d/10-auth.conf</code> で <code>auth_mechanisms = plain login</code> に設定を変更しました。</p>

<h2>ssl 設定</h2>

<p><code>sudoedit /etc/dovecot/conf.d/10-ssl.conf</code> で以下の設定を変更しました。</p>

<ul>
<li><code>ssl = no</code> を <code>ssl = required</code> に</li>
<li><code>ssl_cert</code>, <code>ssl_key</code> を設定</li>
<li><code>#ssl_protocols = !SSLv2</code> を <code>ssl_protocols = !SSLv2 !SSLv3</code> に</li>
</ul>


<p><a href="http://wiki.dovecot.org/SSL/DovecotConfiguration">http://wiki.dovecot.org/SSL/DovecotConfiguration</a> によると <code>ssl</code> の設定については <code>ssl=no</code>, <code>ssl=yes and disable_plaintext_auth=yes</code>, <code>ssl=yes and disable_plaintext_auth=yes</code>, <code>ssl=required</code> という設定の組み合わせがあるようです。</p>

<h2>Maildir 設定</h2>

<p>postfix の設定で <code>Maildir</code> への配送を使っているので、 <code>sudoedit /etc/dovecot/conf.d/10-mail.conf</code> で <code>mail_location = mbox:~/mail:INBOX=/var/mail/%u</code> を <code>mail_location = maildir:~/Maildir</code> に設定を変更しました。</p>

<h2>postfix との認証連携</h2>

<p>まず <code>sudo ls -al /var/spool/postfix/private</code> で <code>auth</code> がないのを確認しました。</p>

<p><code>sudoedit /etc/dovecot/conf.d/10-master.conf</code> で</p>

<pre><code class="plain /etc/dovecot/conf.d/10-master.conf">  #unix_listener /var/spool/postfix/private/auth {
  #  mode = 0666
  #}
</code></pre>

<p>を</p>

<pre><code class="plain /etc/dovecot/conf.d/10-master.conf">  unix_listener /var/spool/postfix/private/auth {
    mode = 0660
    user = postfix
    group = postfix
  }
</code></pre>

<p>に変更しました。</p>

<p>設定反映後に <code>sudo ls -al /var/spool/postfix/private</code> で <code>auth</code> が owner も group も postfix でパーミッションが <code>srw-rw----</code> になっているのを確認します。</p>

<h2>設定反映</h2>

<p><code>sudo service dovecot restart</code> で設定を反映しました。</p>

<p><code>journalctl -u dovecot.service</code> や <code>sudo ss -lntp | grep dovecot</code> で問題なく起動していることを確認しました。</p>

<h2>ufw でポート開放</h2>

<p><code>ufw allow 993/tcp</code> と <code>ufw limit 993/tcp</code> でポートを開放して連続接続数制限をしました。</p>

<h2>postfix 設定</h2>

<h3>SSL 設定</h3>

<p><code>smtpd_tls_cert_file</code> と <code>smtpd_tls_key_file</code> を設定します。
<code>smtpd_tls_cert_file</code> は中間証明書も結合したファイルを指定します。</p>

<p>その他の設定は以下のように設定しました。</p>

<pre><code class="plain /etc/postfix/main.cf">smtpd_tls_mandatory_protocols = !SSLv2, !SSLv3
smtpd_tls_protocols = !SSLv2, !SSLv3
smtp_tls_mandatory_protocols = !SSLv2, !SSLv3
smtp_tls_protocols = !SSLv2, !SSLv3
</code></pre>

<p><code>smtpd_tls_security_level = may</code> は設定すると外部からのメール送信で問題が起きたことがあったので、メールの送信テストをしつつ、様子を見ながら設定するかどうか決めます。</p>

<h3>SASL 設定</h3>

<p><a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0387?page=4">Ubuntu Weekly Recipe</a> では <code>smtpd_sasl_auth_enable</code> は <code>/etc/postfix/main.cf</code> でも <code>yes</code> にしていますが、 <code>/etc/postfix/master.cf</code> で <code>smtps</code> と <code>submission</code> で個別に <code>yes</code> に設定されているので、 <code>/etc/postfix/main.cf</code> では <code>no</code> のままにしておきます。</p>

<p>そうしておかないと 25 番ポートでも SMTP-Auth が有効になって、しかも <code>smtpd_tls_security_level = may</code> だとパスワードが平文で流れても良いということになるので、危険なことが起きる可能性があります。
最近は OBP25B という対策が普及しているので、一般のクライアントが間違って平文で送信してしまう可能性は低いと思いますが、余計な危険は避けておくのが良いと思います。</p>

<p>CRAM-MD5 が有効なら <code>smtpd_sasl_security_options = noanonymous,noplaintext</code> にして <code>master.cf</code> で <code>noanonymous</code> だけにしても良いかと思ったのですが、 plain 認証と login 認証しかない状態で <code>noplaintext</code> もつけてしまうと 25 番ポートで listen しているのに接続しても最初の <code>220 mail.example.org ESMTP Postfix (Debian/GNU)</code> が出てこなくてログに <code>fatal: no SASL authentication mechanisms</code> と記録されるという状態になってしまいました。
<code>/etc/passwd</code> (<code>/etc/shadow</code>) による認証だとパスワードをハッシュ化された状態でしか保存していないため、 CRAM-MD5 は使えないので、これ以上の検証はできませんでした。</p>

<p>以上を踏まえて以下のように設定しました。</p>

<pre><code class="plain /etc/postfix/main.cf">smtpd_sasl_auth_enable = no
smtpd_sasl_local_domain = $myhostname
smtpd_sasl_security_options = noanonymous
smtpd_sasl_type = dovecot
smtpd_sasl_path = private/auth
broken_sasl_auth_clients = yes
</code></pre>

<p><code>smtpd_sasl_local_domain</code> や <code>broken_sasl_auth_clients</code> は不要かもしれません。</p>

<h2>Thunderbird 用自動設定ファイル設置</h2>

<p><a href="https://developer.mozilla.org/ja/docs/Mozilla/Thunderbird/Autoconfiguration">Thunderbird のアカウント情報自動設定機能</a>のために <code>mail/config-v1.1.xml</code> を設置します。</p>

<p><code>@example.com</code> のメールアドレスに対して <code>http://autoconfig.example.com/mail/config-v1.1.xml</code> か <code>http://example.com/.well-known/autoconfig/mail/config-v1.1.xml</code> を用意します。</p>

<p>内容は以下のような感じになります。
<code>mozilla.org</code> の例との主な違いは <code>authentication</code> を <code>password-encrypted</code> ではなく <code>password-cleartext</code> にしているところと、 <code>username</code> を <code>%EMAILADDRESS%</code> ではなく <code>%EMAILLOCALPART%</code> にしているところです。</p>

<pre><code class="xml mail/config-v1.1.xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;clientConfig version="1.1"&gt;
  &lt;emailProvider id="example.com"&gt;
    &lt;domain&gt;example.com&lt;/domain&gt;
    &lt;displayName&gt;Example.com Mail&lt;/displayName&gt;
    &lt;displayShortName&gt;example.com&lt;/displayShortName&gt;
    &lt;incomingServer type="imap"&gt;
      &lt;hostname&gt;mail.example.com&lt;/hostname&gt;
      &lt;port&gt;993&lt;/port&gt;
      &lt;socketType&gt;SSL&lt;/socketType&gt;
      &lt;authentication&gt;password-cleartext&lt;/authentication&gt;
      &lt;username&gt;%EMAILLOCALPART%&lt;/username&gt;
    &lt;/incomingServer&gt;
    &lt;outgoingServer type="smtp"&gt;
      &lt;hostname&gt;mail.example.com&lt;/hostname&gt;
      &lt;port&gt;587&lt;/port&gt;
      &lt;socketType&gt;STARTTLS&lt;/socketType&gt;
      &lt;authentication&gt;password-cleartext&lt;/authentication&gt;
      &lt;username&gt;%EMAILLOCALPART%&lt;/username&gt;
    &lt;/outgoingServer&gt;
  &lt;/emailProvider&gt;
&lt;/clientConfig&gt;
</code></pre>

<h2>まとめ</h2>

<p><a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0387?page=4">Ubuntu Weekly Recipe</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ngircd から inspircd に移行した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-13-ircd.html"/>
    <updated>2016-04-13T22:42:32+09:00</updated>
    <id>http://blog.n-z.jp/blog/ircd</id>
    <content type="html"><![CDATA[<p><a href="/blog/2016-03-29-inspircd.html">jessie で inspircd を設定した</a>話に書いたように、 inspircd を設定したのですが、移行元の ngircd との機能比較を使っている範囲内でしてみたいと思います。</p>

<!--more-->


<h2>確認バージョン</h2>

<ul>
<li>ngircd 18-2 (on Ubuntu 12.04.5 LTS)</li>
<li>inspircd 2.0.17-1+deb8u1 (on Debian GNU/Linux 8.4 (jessie))</li>
</ul>


<h2>SSL/TLS 設定</h2>

<p>ngircd では <code>[SSL]</code> セクションで設定するだけでしたが、 inspircd では推奨されている <code>m_ssl_gnutls</code> を使うか <code>m_ssl_openssl</code> を使うか選ぶ必要がありました。
推奨があるので、特に迷うことはありませんでした。</p>

<h2>nick の長さ制限</h2>

<p>ngircd では <code>MaxNickLength</code> を 9 から 18 に変えていたのですが、 inspircd ではデフォルトで <code>NICKLEN=32</code> になっていて、設定は少し探した範囲では見つけられませんでした。</p>

<h2>チャンネルの作成制限</h2>

<p>ngircd では <code>PredefChannelsOnly = yes</code> にしていました。 inspircd では <a href="https://wiki.inspircd.org/Modules/2.0/restrictchans">m_restrictchans</a> で制限することができました。</p>

<h2>チャンネル自動作成</h2>

<p>ngircd では <code>[Channel]</code> でチャンネルをサーバー起動時に作成していました。 inspircd では <a href="https://wiki.inspircd.org/Modules/2.0/permchannels">m_permchannels</a> で作成しておくことができました。</p>

<h2>チャンネル自動参加</h2>

<p>ngircd では接続時に自動参加させることはできなかったのですが、 inspircd では <a href="https://wiki.inspircd.org/Modules/2.0/conn_join">m_conn_join</a> で接続時に強制的にチャンネルに参加させる設定ができました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jessie に backports から letsencrypt を入れてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-08-jessie-letsencrypt.html"/>
    <updated>2016-04-08T14:30:02+09:00</updated>
    <id>http://blog.n-z.jp/blog/jessie-letsencrypt</id>
    <content type="html"><![CDATA[<p>現在リリースされている Ubuntu と違って Debian jessie には backports に letsencrypt パッケージがあるので、ちょっと古いですがパッケージ版の letsencrypt を使ってみることにしました。</p>

<p>Ubuntu も今月リリースされる 16.04 (xenial) には universe ですが letsencrypt パッケージが含まれるので、それが使えると思います。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Debian GNU/Linux 8.4 (jessie) (amd64)</li>
<li>letsencrypt 0.4.1-1~bpo8+1</li>
<li>apache2 2.4.10-10+deb8u4</li>
</ul>


<h2>インストール</h2>

<p><code>/etc/apt/sources.list</code> で <code>deb http://ftp.jp.debian.org/debian jessie-backports main contrib non-free</code> のように backports を有効にしておきます。</p>

<p>依存パッケージも backports のものが必要なので <code>-t jessie-backports</code> 付きでインストールする必要がありました。</p>

<p><code>webroot</code> を使う予定だったので、 <code>python-letsencrypt-apache</code> はインストールしませんでした。</p>

<p>stable にあるパッケージのうち、いくつかのパッケージも backports のものに上がってしまうので、そのリスクが許容できない場合は <code>letsencrypt-auto</code> など、他のインストール方法を検討した方が良さそうです。</p>

<pre><code>%  sudo apt install letsencrypt
パッケージリストを読み込んでいます... 完了
依存関係ツリーを作成しています
状態情報を読み取っています... 完了
インストールすることができないパッケージがありました。おそらく、あり得
ない状況を要求したか、(不安定版ディストリビューションを使用しているの
であれば) 必要なパッケージがまだ作成されていなかったり Incoming から移
動されていないことが考えられます。
以下の情報がこの問題を解決するために役立つかもしれません:

以下のパッケージには満たせない依存関係があります:
 letsencrypt : 依存: python-letsencrypt (= 0.4.1-1~bpo8+1) しかし、インストールされようとしていませ ん
E: 問題を解決することができません。壊れた変更禁止パッケージがあります。
zsh: exit 100   sudo apt install letsencrypt
%  sudo apt install -t jessie-backports letsencrypt
パッケージリストを読み込んでいます... 完了
依存関係ツリーを作成しています
状態情報を読み取っています... 完了
以下のパッケージが自動でインストールされましたが、もう必要とされていません:
  python-cffi python-ply python-pycparser
これを削除するには 'apt-get autoremove' を利用してください。
以下の追加パッケージがインストールされます:
  dialog python-acme python-cffi python-cffi-backend python-configargparse python-configobj
  python-cryptography python-dialog python-enum34 python-funcsigs python-idna python-ipaddress
  python-letsencrypt python-mock python-ndg-httpsclient python-openssl python-parsedatetime
  python-pbr python-psutil python-pyasn1 python-pyicu python-requests python-rfc3339 python-six
  python-urllib3 python-zope.component python-zope.event python-zope.interface
提案パッケージ:
  python-letsencrypt-apache python-letsencrypt-doc python-configobj-doc python-cryptography-doc
  python-cryptography-vectors python-enum34-doc python-funcsigs-doc python-mock-doc
  python-openssl-doc python-openssl-dbg doc-base python-ntlm
以下のパッケージが新たにインストールされます:
  dialog letsencrypt python-acme python-cffi-backend python-configargparse python-configobj
  python-dialog python-enum34 python-funcsigs python-idna python-ipaddress python-letsencrypt
  python-mock python-ndg-httpsclient python-parsedatetime python-pbr python-psutil python-pyasn1
  python-pyicu python-requests python-rfc3339 python-urllib3 python-zope.component
  python-zope.event python-zope.interface
以下のパッケージはアップグレードされます:
  python-cffi python-cryptography python-openssl python-six
アップグレード: 4 個、新規インストール: 25 個、削除: 0 個、保留: 24 個。
1,906 kB のアーカイブを取得する必要があります。
この操作後に追加で 8,772 kB のディスク容量が消費されます。
続行しますか? [Y/n]
</code></pre>

<h2>letsencrypt コマンド実行</h2>

<p>一般ユーザー権限で実行するとエラーになり、カレントディレクトリに <code>letsencrypt.log</code> が作成されていました。
<code>--help</code> 付きでの実行は特にエラーもなく、 <code>letsencrypt.log</code> も作成されることなくヘルプが表示されました。</p>

<pre><code>%  letsencrypt
An unexpected error occurred:
OSError: [Errno 13] Permission denied: '/etc/letsencrypt'
Please see the logfile 'letsencrypt.log' for more details.
%  rm letsencrypt.log
%  letsencrypt --help

  letsencrypt [SUBCOMMAND] [options] [-d domain] [-d domain] ...

The Let's Encrypt agent can obtain and install HTTPS/TLS/SSL certificates.  By
default, it will attempt to use a webserver both for obtaining and installing
the cert. Major SUBCOMMANDS are:

  (default) run        Obtain &amp; install a cert in your current webserver
  certonly             Obtain cert, but do not install it (aka "auth")
  install              Install a previously obtained cert in a server
  renew                Renew previously obtained certs that are near expiry
  revoke               Revoke a previously obtained certificate
  rollback             Rollback server configuration changes made during install
  config_changes       Show changes made to server config during installation
  plugins              Display information about installed plugins

Choice of server plugins for obtaining and installing cert:

  (the apache plugin is not installed)
  --standalone      Run a standalone webserver for authentication
  (nginx support is experimental, buggy, and not installed by default)
  --webroot         Place files in a server's webroot folder for authentication

OR use different plugins to obtain (authenticate) the cert and then install it:

  --authenticator standalone --installer apache

More detailed help:

  -h, --help [topic]    print this message, or detailed help on a topic;
                        the available topics are:

   all, automation, paths, security, testing, or any of the subcommands or
   plugins (certonly, install, nginx, apache, standalone, webroot, etc)
</code></pre>

<h2>本番実行</h2>

<p><code>letsencrypt certonly</code> で証明書発行します。</p>

<pre><code>%  sudo letsencrypt certonly --webroot -w /srv/www/www.example.org/htdocs -d www.example.org
</code></pre>

<p>まず、アカウントの作成があるので、アカウントの作成はメールアドレス入力しました。
アカウントのリカバリや緊急時の連絡などに使われるだけのようで、今の所ここで入力したメールアドレスに letsencrypt からメールが来たことはありません。</p>

<pre><code>         ┌──────────────────────────────────────────────────────────────────────┐
         │ Enter email address (used for urgent notices and lost key recovery)  │
         │ ┌──────────────────────────────────────────────────────────────────┐ │
         │ │                                                                  │ │
         │ └──────────────────────────────────────────────────────────────────┘ │
         ├──────────────────────────────────────────────────────────────────────┤
         │                     &lt; 了解 &gt;           &lt; 取消 &gt;                      │
         └──────────────────────────────────────────────────────────────────────┘
</code></pre>

<p>Terms of Service は前回みた時から変わっていないので、今度も Agree しました。</p>

<pre><code>         ┌──────────────────────────────────────────────────────────────────────┐
         │ Please read the Terms of Service at                                  │
         │ https://letsencrypt.org/documents/LE-SA-v1.0.1-July-27-2015.pdf. You │
         │ must agree in order to register with the ACME server at              │
         │ https://acme-v01.api.letsencrypt.org/directory                       │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         │                                                                      │
         ├──────────────────────────────────────────────────────────────────────┤
         │                     &lt;Agree &gt;           &lt;Cancel&gt;                      │
         └──────────────────────────────────────────────────────────────────────┘
</code></pre>

<p>以下のような作成完了のメッセージが出ました。</p>

<pre><code>IMPORTANT NOTES:
 - If you lose your account credentials, you can recover through
   e-mails sent to z@n-z.jp.
 - Congratulations! Your certificate and chain have been saved at
   /etc/letsencrypt/live/www.example.org/fullchain.pem. Your cert will
   expire on 2016-07-07. To obtain a new version of the certificate in
   the future, simply run Let's Encrypt again.
 - Your account credentials have been saved in your Let's Encrypt
   configuration directory at /etc/letsencrypt. You should make a
   secure backup of this folder now. This configuration directory will
   also contain certificates and private keys obtained by Let's
   Encrypt so making regular backups of this folder is ideal.
 - If you like Let's Encrypt, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le
</code></pre>

<p>問題があれば <code>/var/log/letsencrypt/letsencrypt.log</code> でログを確認します。</p>

<h2>apache2 の設定変更</h2>

<p>apache2 の設定を変更して、 <code>sudo service apache2 reload</code> で反映します。
ブラウザーで Let&rsquo;s Encrypt Authority X3 の証明書になっていることが確認できたら設定完了です。</p>

<pre><code>SSLCertificateKeyFile /etc/letsencrypt/live/www.example.org/privkey.pem
SSLCertificateFile /etc/letsencrypt/live/www.example.org/fullchain.pem
</code></pre>

<h2>自動更新設定</h2>

<p>パッケージの <code>letsencrypt</code> でインストールされたものではないということを明示するために <code>local</code> をつけて <code>/etc/cron.daily/local-letsencrypt</code> に自動更新の設定をしました。</p>

<p>試しに実行してみてちゃんと動いていれば設定完了です。</p>

<pre><code>% sudoedit /etc/cron.daily/local-letsencrypt
% sudo chmod +x /etc/cron.daily/local-letsencrypt
% sudo /etc/cron.daily/local-letsencrypt
% sudo cat /var/log/letsencrypt/renew.log
Processing /etc/letsencrypt/renewal/www.example.org.conf

The following certs are not due for renewal yet:
  /etc/letsencrypt/live/www.example.org/fullchain.pem (skipped)
No renewals were attempted.
</code></pre>

<p><a href="http://blog.n-z.jp/blog/2016-04-07-letsencrypt.html">前回の記事</a> のように <a href="http://packages.debian.org/debianutils">debianutils</a> の <code>savelog</code> でログをローテートして、証明書の有効期限の 90 日分残すようにしています。</p>

<pre><code class="bash /etc/cron.daily/local-letsencrypt">#!/bin/sh
LOGFILE=/var/log/letsencrypt/renew.log
if [ -f "$LOGFILE" ]; then
    savelog -c 90 -q "$LOGFILE"
fi
if ! letsencrypt renew &gt; "$LOGFILE" 2&gt;&amp;1 ; then
    echo Automated renewal failed:
    cat "$LOGFILE"
    exit 1
fi
apachectl graceful
</code></pre>
]]></content>
  </entry>
  
</feed>
