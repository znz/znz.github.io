<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debian | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/debian/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2018-02-01T23:45:50+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[webhook でサイトの git pull をする設定をした]]></title>
    <link href="http://blog.n-z.jp/blog/2018-01-03-webhook-git-pull.html"/>
    <updated>2018-01-03T18:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/webhook-git-pull</id>
    <content type="html"><![CDATA[<p>GitLab.com に git push した時に webhook で通知を受け取って git pull という設定をしました。</p>

<p>方針としては Web サーバーの実行ユーザー権限の cgi で通知用のファイルを更新して、 systemd の <code>*.path</code> で監視して、別途ディレクトリの所有者権限でアップデートのシェルスクリプトを実行して、アップデートのログは journald に任せるという感じにしました。</p>

<!--more-->


<h2>GitLab.com の設定</h2>

<p>Webhook が使えるシステムなら GitHub などでも同様に設定可能だと思います。</p>

<ul>
<li>Settings - Integrations で Webhooks 設定</li>
<li>URL: <code>https://lilo.linux.or.jp/trigger/update.cgi</code> のような感じ</li>
<li>Secret Token あり</li>
<li>Trigger : Push events のみ</li>
<li>Enable SSL verification はチェックありのまま</li>
</ul>


<h2>trigger cgi</h2>

<p>URL がわかっていても Secret Token がちゃんと設定されていないリクエストはエラーを返すようにしました。</p>

<p>内容はチェックせずに通知用のファイルにリクエスト内容をそのまま書き込んでデバッグ用に使えるようにしました。</p>

<p><code>/home/www</code> は CGI の権限で書き込めるディレクトリです。</p>

<pre><code class="sh">#!/bin/sh
set -e
if [ x"$HTTP_X_GITLAB_TOKEN" = x"XXXXXXXXXXXXXXXXXXXX" ]; then
  cat &gt; /home/www/trigger_update_web
  echo "Content-Type: text/plain; charset=utf-8"
  echo
  echo OK
else
  echo "Status: 403"
  echo "Content-Type: text/plain; charset=utf-8"
  echo
  echo NG
fi
</code></pre>

<h2>systemd の設定追加</h2>

<p>後述のファイルを以下のように追加して設定しました。</p>

<pre><code>  sudo cp lilo_web_update.path /etc/systemd/system
  sudo cp lilo_web_update.service /etc/systemd/system
  sudo systemctl daemon-reload
  sudo systemctl start lilo_web_update.path
</code></pre>

<p>2018-01-28 追記: 以下のように enable もしておかないと再起動後に止まってしまっていました。</p>

<pre><code>  sudo systemctl enable lilo_web_update.path
</code></pre>

<h2><code>lilo_web_update.path</code></h2>

<p><code>trigger_update_web</code> ファイルを <code>PathModified</code> で監視して変化があれば <code>lilo_web_update.service</code> を実行するようにしました。</p>

<pre><code>[Unit]
Description=Trigger update web

[Path]
PathModified=/home/www/trigger_update_web

[Install]
WantedBy=multi-user.target
</code></pre>

<p>2018-01-28 追記: WantedBy の target 名が間違っていたのを修正しました。</p>

<h2><code>lilo_web_update.service</code></h2>

<p>Web コンテンツに書き込めるユーザーでシェルスクリプトを実行します。</p>

<pre><code>[Unit]
Description=Update web

[Service]
Type=oneshot
ExecStart=/path/to/lilo_web_update.sh
User=someuser
Group=someuser
</code></pre>

<h2><code>lilo_web_update.sh</code></h2>

<p>flock コマンドで同時実行を抑制 (同時実行は後の方が失敗終了) した上で、何か変更されていたらそれを捨てて、 <code>git pull</code> でリモートのコンテンツで上書きするようにしています。</p>

<p>とりあえず自分が知っているコマンドの中でクリーンにできるものとして <code>git checkout .</code> と <code>git clean -dfx</code> を使っているだけなので、もっと良い方法があるかもしれません。</p>

<pre><code class="bash">#!/bin/bash
set -euxo pipefail
exec {lock_fd}&lt;"$0"
flock --nonblock "${lock_fd}"
cd "$(dirname "$0")/.."
git checkout .
git clean -dfx
git pull
</code></pre>

<h2>apache2 設定</h2>

<p>trigger ディレクトリに cgi-bin の設定を参考にして ExecCGI と AddHandler の設定をしました。</p>

<pre><code>&lt;Directory /path/to/trigger/&gt;
        AllowOverride None
        Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
        Require all granted
        AddHandler cgi-script .cgi
&lt;/Directory&gt;
</code></pre>

<p><code>/etc/apache2/conf-enabled/security.conf</code> の <code>.svn*</code> へのアクセスを禁止する設定を参考にして、 <code>.git*</code> へのアクセスを禁止しました。</p>

<pre><code>&lt;DirectoryMatch "/\.git"&gt;
   Require all denied
&lt;/DirectoryMatch&gt;
</code></pre>

<h2>動作確認</h2>

<ul>
<li><code>sudo -u someuser /path/to/lilo_web_update.sh</code> で git pull の動作確認</li>
<li><code>touch /home/www/trigger_update_web</code> と <code>sudo systemctl status lilo_web_update.service</code> で PathModified 経由での実行確認</li>
<li><code>curl -H 'X-Gitlab-Token: XXXXXXXXXXXXXXXXXXXX' https://lilo.linux.or.jp/trigger/update.cgi</code> で webhook 経由での動作確認</li>
</ul>


<h2>まとめ</h2>

<p>git push で webhook 経由でコンテンツを更新して、 journald でログを確認できるシステムを構築しました。
Unix 的にそれぞれは大した設定はしていないのですが、組み合わせるとそれなりの設定量になりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 129 回関西 Debian 勉強会 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-11-26-kansai-debian-meeting.html"/>
    <updated>2017-11-26T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20171126">第 129 回関西 Debian 勉強会</a> に参加しました。
一般ユーザー権限で LXC を使ってみるという内容でした。</p>

<!--more-->


<h2>会場</h2>

<p>いつもの福島区民センターでした。</p>

<h2>事前課題</h2>

<pre><code> lxc libvirt0 libpam-cgroup libpan-cgroup libpam-cgfs bridge-utils
</code></pre>

<p>とあったうち libpan-cgroup というのは間違いだったようです。</p>

<p><a href="https://wiki.debian.org/LXC">https://wiki.debian.org/LXC</a> 参照。</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Eucalyptus_%28software%29">Eucalyptus (software)</a> は開発が止まっている?</li>
<li><a href="https://ja.wikipedia.org/wiki/Xen_%28%E4%BB%AE%E6%83%B3%E5%8C%96%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%29#Hyper-V.E3.81.A8.E3.81.AE.E9.96.A2.E4.BF.82">Hyper-Vとの関係</a> によると Microsoft と XenSource は共同でやっているかも。</li>
</ul>


<h2>仮想化について</h2>

<p><a href="http://www.kernelvm.org/ima-made-no-matome/kaneru-vm-mian-qiang-hui-guan-xi-qino-can">カーネル/VM勉強会@関西 其の参 - カーネル／VM探検隊</a> から「BHyVeってなんや」を参考にしながら概要を解説</p>

<h2>Debian Stretch で LXC を使う</h2>

<ul>
<li>vagrant で <a href="https://app.vagrantup.com/bento/boxes/debian-9.2">bento/debian-9.2</a> の box を使って試しました</li>
<li>lxc-net を有効にするために <code>/etc/default/lxc</code> で <code>USE_LXC_BRIDGE="true"</code> に変更 (Debian Wiki は記述が古い (testing の時のパッケージが変更途中の内容?) のか <code>/etc/default/lxc-net</code> と書いてあるがそんなファイルはなかった)</li>
<li>lxc-net の変更を反映するために再起動した (<code>sudo systemctl start lxc-net</code> とかでも反映できるかもしれないが未確認)</li>
<li><code>lxc-checkconfig</code> でチェック (今の安定版は全部緑の enabled になるはず (昔はカーネルが対応していなくてダメなものがあったはず) )</li>
<li><code>sudo sh -c 'echo "kernel.unprivileged_userns_clone=1" &gt; /etc/sysctl.d/80-lxc-userns.conf'</code></li>
<li><code>sudo sysctl --system</code></li>
<li><p><code>kernel.unprivileged_userns_clone</code> の設定は Debian 固有のパッチの設定らしい? (1の方がバニラカーネルのデフォルト動作っぽい?)</p></li>
<li><p><code>sudo usermod --add-subuids 1258512-1324047 $USER</code> と <code>sudo usermod --add-subgids 1258512-1324047 $USER</code> はしなくても <code>/etc/subuid</code> と <code>/etc/subgid</code> に入っていた (<code>usermod</code> の引数は端の値の指定で <code>/etc/sub[ug]id</code> ファイルに書かれているのは開始 id と個数で別の意味なので注意)</p></li>
</ul>


<pre><code>vagrant@debian-9:~$ cat /etc/subuid
vagrant:100000:65536
vagrant@debian-9:~$ cat /etc/subgid
vagrant:100000:65536
</code></pre>

<ul>
<li><code>echo "$USER veth lxcbr0 10"| sudo tee -i /etc/lxc/lxc-usernet</code> で一般ユーザー権限で作成できるブリッジの数を制限するらしい (<code>lxcbr0</code> の部分はブリッジ名依存)</li>
<li><code>mkdir -p .config/lxc</code></li>
<li><code>.config/lxc/default.conf</code> を作成</li>
<li><code>id_map</code> の部分は subuid と subgid と同じ値にする必要あり</li>
<li><code>lxcbr0</code> の部分も <code>ip</code> コマンドなどで確認して合わせる必要あり</li>
</ul>


<pre><code>vagrant@debian-9:~$ cat .config/lxc/default.conf
lxc.include = /etc/lxc/default.conf
# Subuids and subgids mapping
lxc.id_map = u 0 100000 65536
lxc.id_map = g 0 100000 65536
# "Secure" mounting
lxc.mount.auto = proc:mixed sys:ro cgroup:mixed

# Network configuration
lxc.network.type = veth
lxc.network.link = lxcbr0
lxc.network.flags = up
#lxc.network.hwaddr = 00:16:3e:xx:xx:xx
</code></pre>

<ul>
<li>hwaddr は <a href="https://ja.wikipedia.org/wiki/MAC%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9">MACアドレス</a> 参照</li>
<li>コメントアウトしてみると自動設定になった</li>
</ul>


<h2>lxc-create</h2>

<p>特権だと <code>/var/lib/lxc</code> を使われるが、一般ユーザー権限だと普通は書き込めないのでディレクトリ指定をする必要あり (絶対パスじゃないとダメらしい)</p>

<pre><code>vagrant@debian-9:~$ lxc-create -n stretch -t download -P ~/work/lxc
Setting up the GPG keyring
Downloading the image index

---
DIST    RELEASE ARCH    VARIANT BUILD
---
(略)
debian  stretch amd64   default 20171124_22:42
(略)
---
Distribution: debian
Release: stretch
Architecture: amd64

Downloading the image index
Downloading the rootfs
Downloading the metadata
The image cache is now ready
Unpacking the rootfs

---
You just created a Debian container (release=stretch, arch=amd64, variant=default)

To enable sshd, run: apt-get install openssh-server

For security reason, container images ship without user accounts
and without a root password.

Use lxc-attach or chroot directly into the rootfs to set a root password
or create user accounts.
vagrant@debian-9:~$
</code></pre>

<h2>起動</h2>

<pre><code>vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
NAME    STATE   AUTOSTART GROUPS IPV4 IPV6
stretch STOPPED 0         -      -    -
vagrant@debian-9:~$ lxc-start -d -n stretch -P ~/work/lxc
vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
NAME    STATE   AUTOSTART GROUPS IPV4 IPV6
stretch RUNNING 0         -      -    -
vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
NAME    STATE   AUTOSTART GROUPS IPV4       IPV6
stretch RUNNING 0         -      10.0.3.146 -
</code></pre>

<h2>接続して動作確認</h2>

<pre><code>vagrant@debian-9:~$ lxc-attach -n stretch
You lack access to /home/vagrant/.local/share/lxc
vagrant@debian-9:~$ lxc-attach -n stretch -P ~/work/lxc
root@stretch:/# apt update
...
1 package can be upgraded. Run 'apt list --upgradable' to see it.
root@stretch:/# ls -al /var/lib/apt/lists/
total 65872
drwxr-xr-x 3 root root     4096 Nov 26 06:32 .
drwxr-xr-x 5 root root     4096 Nov 24 22:47 ..
-rw-r--r-- 1 root root 38923281 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_binary-amd64_Packages
-rw-r--r-- 1 root root 26443489 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_i18n_Translation-en
-rw-r--r-- 1 root root   117945 Oct  7 09:46 deb.debian.org_debian_dists_stretch_Release
-rw-r--r-- 1 root root     2479 Oct  7 09:52 deb.debian.org_debian_dists_stretch_Release.gpg
-rw-r----- 1 root root        0 Nov 26 06:32 lock
drwx------ 2 _apt root     4096 Nov 26 06:32 partial
-rw-r--r-- 1 root root    62959 Nov 25 10:01 security.debian.org_dists_stretch_updates_InRelease
-rw-r--r-- 1 root root  1257072 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_binary-amd64_Packages
-rw-r--r-- 1 root root   624275 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_i18n_Translation-en
root@stretch:/# exit
vagrant@debian-9:~$ ls -al ~/work/lxc/stretch/rootfs/var/lib/apt/lists/
total 65872
drwxr-xr-x 3 100000 100000     4096 Nov 26 06:32 .
drwxr-xr-x 5 100000 100000     4096 Nov 24 22:47 ..
-rw-r--r-- 1 100000 100000 38923281 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_binary-amd64_Packages
-rw-r--r-- 1 100000 100000 26443489 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_i18n_Translation-en
-rw-r--r-- 1 100000 100000   117945 Oct  7 09:46 deb.debian.org_debian_dists_stretch_Release
-rw-r--r-- 1 100000 100000     2479 Oct  7 09:52 deb.debian.org_debian_dists_stretch_Release.gpg
-rw-r----- 1 100000 100000        0 Nov 26 06:32 lock
drwx------ 2 100104 100000     4096 Nov 26 06:32 partial
-rw-r--r-- 1 100000 100000    62959 Nov 25 10:01 security.debian.org_dists_stretch_updates_InRelease
-rw-r--r-- 1 100000 100000  1257072 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_binary-amd64_Packages
-rw-r--r-- 1 100000 100000   624275 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_i18n_Translation-en
</code></pre>

<h2>NAT</h2>

<p><a href="https://wiki.debian.org/LXC/SimpleBridge">https://wiki.debian.org/LXC/SimpleBridge</a> の</p>

<pre><code>up iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
</code></pre>

<p>は</p>

<pre><code>down iptables -t nat -D POSTROUTING -o wlan0 -j MASQUERADE
</code></pre>

<p>もないと up down を繰り返すと増えそう。</p>

<p>lxc-net で試した環境は自動で NAT 設定が入っていた。</p>

<pre><code>vagrant@debian-9:~$ sudo iptables -nL -t nat
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination

Chain INPUT (policy ACCEPT)
target     prot opt source               destination

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination

Chain POSTROUTING (policy ACCEPT)
target     prot opt source               destination
MASQUERADE  all  --  10.0.3.0/24         !10.0.3.0/24
</code></pre>

<h2>停止</h2>

<p>資料にはなかったけど、個人的に停止と削除も試しました。</p>

<pre><code>vagrant@debian-9:~$ lxc-stop -n stretch -P ~/work/lxc
vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
NAME    STATE   AUTOSTART GROUPS IPV4 IPV6
stretch STOPPED 0         -      -    -
</code></pre>

<h2>削除</h2>

<pre><code>vagrant@debian-9:~$ lxc-destroy -n stretch -P ~/work/lxc
Destroyed container stretch
vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
vagrant@debian-9:~$ ls work/lxc/
lxc-monitord.log
</code></pre>

<h2>休憩中の話</h2>

<ul>
<li><a href="https://www.ubuntu.com/server/maas">https://www.ubuntu.com/server/maas</a></li>
</ul>


<h2>ネットワーク図</h2>

<ul>
<li>ネットワーク図を書いて議論</li>
<li><a href="https://twitter.com/YukiharuYABUKI/status/934688472845058054">https://twitter.com/YukiharuYABUKI/status/934688472845058054</a></li>
</ul>


<h2>次回</h2>

<ul>
<li>2017/12/24(日)</li>
</ul>


<h2>まとめ</h2>

<p>発表者の佐々木さんが病欠で、時間に余裕があったので、資料や Wiki の記述や不足点などをツッコミを入れたりするような感じになっていました。
その後は、ネットワーク図を書いて色々と議論をして、少し早めに終わりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hyper-V のゲスト環境で systemd timer がうまく動いていなかった]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-07-hyperv-systemd-timer.html"/>
    <updated>2017-07-07T00:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/hyperv-systemd-timer</id>
    <content type="html"><![CDATA[<p>Hyper-V のゲストとしてインストールした Linux 環境で systemd timer の <code>RandomizedDelaySec</code> がおかしくて timer が実行されないことがあったのですが、Hyper-V の時刻の同期との相性が悪いのが原因でした。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>ホスト: Windows Server 2012</li>
<li>ゲスト: Ubuntu 16.04.2 LTS (xenial) と Debian GNU/Linux 9.0 (stretch)</li>
</ul>


<h2>現象</h2>

<p>journalctl で過去のログを確認してみると</p>

<pre><code> 6月 28 12:07:56 hostname systemd[9928]: Time has been changed
 6月 28 12:07:59 hostname systemd[9928]: Time has been changed
 6月 28 12:08:04 hostname systemd[9928]: Time has been changed
 6月 28 12:08:09 hostname systemd[9928]: Time has been changed
 6月 28 12:08:14 hostname systemd[9928]: Time has been changed
 6月 28 12:08:19 hostname systemd[9928]: Time has been changed
</code></pre>

<p>のように Time has been changed が頻繁に記録されていました。</p>

<p>再起動した後からは RandomizedDelaySec が設定されている timer のランダムな時間挿入が Time has been changed の直後におきていました。</p>

<pre><code> 6月 28 15:07:51 hostname systemd[1]: Time has been changed
 6月 28 15:07:51 hostname systemd[1]: apt-daily-upgrade.timer: Adding 46min 16.478521s random time.
 6月 28 15:07:51 hostname systemd[1]: apt-daily.timer: Adding 3h 45min 54.621700s random time.
 6月 28 15:07:56 hostname systemd[1]: Time has been changed
 6月 28 15:07:56 hostname systemd[1]: apt-daily-upgrade.timer: Adding 25min 59.320458s random time.
 6月 28 15:07:56 hostname systemd[1]: apt-daily.timer: Adding 11h 34min 9.012513s random time.
 6月 28 15:08:01 hostname systemd[1]: Time has been changed
 6月 28 15:08:01 hostname systemd[1]: apt-daily-upgrade.timer: Adding 42min 37.932995s random time.
 6月 28 15:08:01 hostname systemd[1]: apt-daily.timer: Adding 4h 48min 31.255279s random time.
 6月 28 15:08:06 hostname systemd[1]: Time has been changed
 6月 28 15:08:06 hostname systemd[1]: apt-daily-upgrade.timer: Adding 13min 44.192537s random time.
 6月 28 15:08:06 hostname systemd[1]: apt-daily.timer: Adding 38min 56.349412s random time.
</code></pre>

<p>自作した timer が実行されなくて <code>journalctl -u local-backup.timer</code> のように調べた時に「Adding &hellip; random time.」のログで埋まっていて、他の動いている timer との違いも特になくて悩んでいましたが、ふと <code>journalctl</code> (引数なし) を実行してみたら「Time has been changed」とセットでおきていることに気づきました。</p>

<h2>解決策</h2>

<p>「Time has been changed」で検索して最初に出てきた <a href="https://askubuntu.com/questions/888493/var-log-syslog-systemd1-time-has-been-changed-message-every-5-seconds">16.04 - /var/log/syslog &lsquo;systemd[1]: Time has been changed&rsquo; message every 5 seconds - Ask Ubuntu</a> に</p>

<blockquote><p>I encountered this issue of &ldquo;systemd[&hellip;]Time has been changed&rdquo; messages logged every five seconds in /var/log/syslog on a 16.04 server running under Windows 8.1 Hyper-V. To fix it, I disabled time synchronization on the Hyper-V side. In Hyper-V Manager, I highlighted the VM, selected &ldquo;Settings&hellip;&rdquo;, then &ldquo;Integration Services&rdquo;, unchecked &ldquo;Time synchronization&rdquo;, and clicked Apply. The messages stopped instantly - no VM restart was required.</p></blockquote>

<p>と書いてあったので、「設定&hellip;」から「統合サービス」の「時刻の同期」のチェックを外して (再起動なしで) 解決しました。</p>

<h2>解決確認</h2>

<p>「Time has been changed」も出なくなって「Adding &hellip; random time.」も出なくなって、翌日まで待ってみるとちゃんと実行されていたので、解決したようです。</p>

<h2>まとめ</h2>

<p>ntp サーバー機能も必要で、 ntp パッケージを入れている環境で発生したので、時刻の同期の仕方によっては発生しないのかもしれませんが、「Time has been changed」で検索して出てきた他の方法はログを無視するだけとか、根本的な解決になっていないものが多そうだったので、Hyper-V との組み合わせなら systemd-timesyncd でも発生するのかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian/Ubuntuで暗号化 LVM を使いつつ自動起動する]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-01-cryptsetup.html"/>
    <updated>2017-07-01T14:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/cryptsetup</id>
    <content type="html"><![CDATA[<p>さくらの VPS 環境でも ssh などの秘密鍵を置くなら、ディスクの暗号化は使いたいので、リリースされたばかりの Debian 9 の ISO をアップロードしてインストールして、暗号化されていない <code>/boot</code> に鍵ファイルを置いて自動起動を設定しました。</p>

<p>自動起動を設定するということはセキュリティ的には弱くなりますが、そこはホストを信用するということにしています。</p>

<p>自動起動設定時に <code>/etc/crypttab</code> の設定ミスで起動しなくなるということがあったので、そういう時の直し方も含めてまとめてみました。</p>

<!--more-->


<h2>確認環境</h2>

<ul>
<li>Debian GNU/Linux 9.0 (stretch)</li>
</ul>


<p>Ubuntu でも debian-installer ベースのインストーラーを使った場合は同じだと思います。
(Live 環境が起動するデスクトップ版のインストーラーの場合は暗号化 LVM でのインストールができるかどうか確認していないのでわかりません。)</p>

<p>他のバージョンの Debian でも luks 対応の cryptsetup があれば同じだと思います。</p>

<h2>インストール</h2>

<p>普通に netinst の iso でインストールします。</p>

<p>ただし途中の「ディスクのパーティショニング」で「ガイド - ディスク全体を使い、暗号化 LVM をセットアップする」を選んだ場合が対象です。
パーティションは <code>/</code> (と <code>/boot</code>) だけを想定しています。
暗号化のパスフレーズは鍵ファイル設定前の起動時と、鍵ファイルの追加時などしか使わないので、長くて強いものにしておくと良いと思います。</p>

<p>VirtualBox などの仮想環境で試す時は、暗号化前のランダムなデータで上書きでデータ用のパーティション全体に書き込みが発生するので、可変サイズのディスクではなく固定サイズのディスクにしておくと良いかもしれません。</p>

<h2>鍵ファイル作成</h2>

<p>まず、鍵ファイルを作成します。
内容作成前に root しか読み書きできないようにするために、touch して chmod しておきます。
次に urandom から読んだランダムデータを鍵ファイルに書き込みます。
前回設定したときは count=1 で 1024 バイトにしていましたが、今回は 4096 バイトにしてみました。
最後に root はパーミッションだと書き込み禁止できないので、誤操作防止 (削除やヒストリーから dd を再実行してしまうなど) のために chattr で ext2 の immutable 属性をつけておきます。(確認は <code>sudo lsattr /boot/keyfile</code>)</p>

<pre><code>sudo touch /boot/keyfile
sudo chmod 400 /boot/keyfile
sudo dd if=/dev/urandom of=/boot/keyfile bs=1024 count=4
sudo chattr +i /boot/keyfile
</code></pre>

<h2>情報確認</h2>

<ul>
<li><code>/etc/fstab</code>: <code>/dev/mapper/HOSTNAME--vg-root</code> が <code>/</code> に、 <code>/dev/mapper/HOSTNAME--vg_swap_1</code> がスワップパーティションに設定されています (<code>HOSTNAME</code> はインストーラーで設定したホスト名)</li>
<li><code>/etc/crypttab</code>: <code>vda5_crypt UUID=... none luks</code> で UUID で指定された <code>/dev/vda5</code> の暗号化が解除された状態が <code>/dev/mapper/vda5_crypt</code> として見えるということがわかります</li>
<li><code>lsblk</code>: ツリー上にみえます (<code>lsblk -f</code> だと UUID も表示されました)</li>
<li><code>ls -l /dev/disk/by-uuid</code>: uuid とデバイスの対応を確認できます (これで確認できる vda1 のパスをあとで使います)</li>
<li><code>sudo cryptsetup luksDump /dev/vda5</code>: luks の情報が表示できます (最初は Key Slot 0 だけ ENABLED で 1 から 7 は DISABLED になっています)</li>
</ul>


<h2>鍵追加</h2>

<p><code>cryptsetup luksAddKey</code> で鍵を追加します。
ここで最初に設定したパスフレーズが必要です。
なぜか <code>Key slot 0 unlocked.</code> が2回でましたが、特に問題はなさそうです。</p>

<pre><code>$ sudo cryptsetup -v luksAddKey /dev/vda5 /boot/keyfile
Enter any passphrase:
Key slot 0 unlocked.
Key slot 0 unlocked.
Command successful.
</code></pre>

<h2>鍵削除</h2>

<p>違うファイルを登録してしまったり、同じ鍵を複数回追加してしまったりしたときには <code>cryptsetup luksRemoveKey</code> で削除できます。
この場合はその鍵自身で unlock されるようなので、パスフレーズは不要でした。</p>

<pre><code>$ sudo cryptsetup -v luksRemoveKey /dev/vda5 /boot/keyfile
Key slot 1 unlocked.
Key slot 1 selected for deletion.
Command successful.
</code></pre>

<p>特定の Key Slot を DISABLED に戻したいときは <code>cryptsetup luksKillSlot</code> が使えます。
この場合はパスフレーズが必要でした。</p>

<pre><code>$ sudo cryptsetup -v luksKillSlot /dev/vda5 2
Key slot 2 selected for deletion.
Enter any remaining passphrase:
Key slot 0 unlocked.
Command successful.
</code></pre>

<h2>自動起動設定</h2>

<p>この段階ではまだ暗号化解除に使える鍵が増えただけで、再起動してもパスフレーズを要求されるままです。</p>

<p><code>/etc/crypttab</code> を以下のように書き換えます。</p>

<pre><code>vda5_crypt UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx /dev/disk/by-uuid/yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy:/keyfile luks,keyscript=/lib/cryptsetup/scripts/passdev
</code></pre>

<p>xxx&hellip; の方の UUID は <code>/dev/vda5</code> の UUID なので、そのまま書き換えません。
第3項目の <code>none</code> を <code>/boot</code> パーティションのデバイスを UUID を使って指定したパス + <code>:</code> + <code>/boot</code> パーティション内での <code>keyfile</code> へのパスに書き換えます。
第4項目の <code>luks</code> は <code>luks,keyscript=/lib/cryptsetup/scripts/passdev</code> に書き換えます。
<code>passdev</code> は <code>cryptsetup</code> パッケージで用意されているファイルなので、そのまま書きます。</p>

<h2>initramfs 更新</h2>

<p>書き換えてもまだブートプロセスに反映されていないので、再起動してもパスフレーズを要求されるままなので、
最後に initramfs を更新します。</p>

<pre><code>sudo update-initramfs -u
</code></pre>

<p>これで再起動すると自動起動するようになります。</p>

<p>keyscript のパスが間違っていると以下のように WARNING が出るので、再起動する前に気づくことができますが、
keyfile の指定は間違っていても何も出ないので注意する必要があります。</p>

<pre><code>$ sudo update-initramfs -u
update-initramfs: Generating /boot/initrd.img-4.9.0-3-amd64
cryptsetup: WARNING: target vda5_crypt has an invalid keyscript, skipped
cryptsetup: WARNING: target vda5_crypt has an invalid keyscript, skipped
</code></pre>

<h2>起動失敗した場合</h2>

<p><code>/etc/crypttab</code> の設定をミスして起動しなくなった場合、 netinst の ISO からレスキューモードで起動すればパスフレーズでマウントできます。
そしてルートファイルシステムとして <code>/dev/HOSTNAME-vg/root</code> (<code>HOSTNAME</code> はインストーラーで設定したホスト名) を選び、 <code>/boot</code> パーティションもマウントしてシェルを起動します。</p>

<p>シェルは <code>/bin/sh -i</code> なので使いにくければ <code>bash</code> を起動して、<code>/etc/crypttab</code> を修正して <code>update-initramfs -u</code> で反映させます。
そして exit で抜けて再起動します。</p>

<p>レスキュー環境での修正が難しそうなら、 <code>none</code> と <code>luks</code> だけに戻して、パスフレーズを使う通常起動にしてから直すという方法もあります。</p>

<h2>最後に</h2>

<p>知らないところで暗号化が解除できてしまうのは、コンソール接続が毎回必要になることとのトレードオフですが、鍵ファイルでも解約時に <code>chattr -i /boot/keyfile; shred --remove /boot/keyfile</code> でディスク全体の削除に似た効果を期待できます。ただし <a href="https://linuxjm.osdn.jp/html/GNU_coreutils/man1/shred.1.html">Man page of SHRED</a>の警告に書いてあるように上書きを期待しているので、 ext2 になっている <code>/boot</code> はファイルシステム的には大丈夫だとしても、その下のブロックデバイスで上書きされていない可能性は残りそうです。</p>

<h2>まとめ</h2>

<p>暗号化 LVM を使うことで macOS の FileVault や Windows BitLocker のように簡単にディスクほぼ全体 (<code>/boot</code> を除く) を暗号化できました。
そして、再起動したい時に常にコンソールに接続できるとは限らない環境向けに鍵ファイルで自動起動の設定もできました。</p>

<p>トレードオフもちゃんと考えた上で設定すれば、安全な環境が簡単に作れると思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian 9 "Stretch" リリースパーティ in 関西に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-18-kansai-debian-meeting.html"/>
    <updated>2017-06-18T13:24:10+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://debianjp.connpass.com/event/59443/">Debian 9 &ldquo;Stretch&rdquo; リリースパーティ in 関西</a>に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<h2>オープニング</h2>

<ul>
<li>リリースされたらしい。</li>
<li>リリースノートからのパッケージのバージョンいろいろ</li>
<li>変更点いろいろ</li>
<li>MariaDB → MySQL</li>
<li>GnuPG</li>
<li>デバッグシンボル向けの新しいアーカイブ: stretch-debug</li>
<li>Xorg サーバーは root 権限が不要になった</li>
<li>sysvinit だと X で問題がおきるらしい?</li>
<li>upstart はなくなったらしい</li>
<li>Perl 関連で問題が起きる可能性がある?</li>
</ul>


<h2>さくらインターネット様からお知らせ</h2>

<p>さくらの VPS やさくらのクラウドでは ISO イメージアップロードで使えますという話</p>

<h2>オープニング続き</h2>

<ul>
<li><a href="https://www.debian.org/News/2017/20170617">https://www.debian.org/News/2017/20170617</a></li>
<li>リリースが確認できたので乾杯に移行</li>
</ul>


<h2>デスクトップ環境の話</h2>

<ul>
<li>インストーラーの途中でデスクトップ環境が選べるようになった</li>
<li>リリースノートとインストールガイドは流し読みで良いのでみておくと良い</li>
<li>UEFI は対応しているが、セキュアブート対応は見送られた</li>
<li>プロプライエタリなファームウェアが必要なハードウェアの場合はフェームウェア入り非公式イメージを使うのが楽</li>
<li>カーネルにおけるフリーと Debian のフリーが違うので、そういうもの (非公式イメージ) が存在する</li>
<li>non-free が Debian 公式ではないのと同様の意味で非公式</li>
<li>root パスワードを設定しなければ root を無効にして sudo を使うようにできる (以前からそうだった)</li>
<li>netinst の iso でデスクトップ環境のみチェックして個別のデスクトップ環境を選ばなかった場合は GNOME になる</li>
<li>複数入れた場合にどうなるのかは未調査</li>
<li>というわけで GNOME デスクトップの話</li>
<li>GNOME 3 は初見だと使い方がわからない</li>
<li>今回は gnome-initial-setup パッケージが追加されたので案内が出るかと思ったら出ない?</li>
<li>gnome-initial-setup パッケージを手動で入れてログアウトしてログインし直すと出る</li>
<li>初期設定の後、ヘルプが開く</li>
<li>gnome-initial-setup で設定されていないと、キーボード設定が英語キーボードになっている</li>
<li>フォントを入れる</li>
<li>フォントを削除する</li>
<li>fonts-droid-fallback が Android でのいわゆる中華フォントなので、完全削除すると良い</li>
<li>Noto Serif CJK は backports に入るらしい</li>
<li>ターミナルとか向けには migmix とか ricty とか</li>
<li>丸いフォントが好みでない人は fonts-vlgothic を消して IPA フォントを使うと良い</li>
<li>ツッコミで fontconfig が難しい話</li>
<li>右上から開ける設定の他に Tweak Tool</li>
<li>GNOME 拡張機能は JavaScript と CSS でできている</li>
<li>主要なものはパッケージで入れるのが良いのでは</li>
<li>オススメ: gnome-shell-extension-dashtodock, gnome-shell-extension-top-icons-plus</li>
<li>会場から: Alt+F2 r Enter で gnome-shell が再起動する</li>
<li>uim-toolbar-gtk3-systray が出てこない?</li>
<li>起動順序の問題で uim-toolbar-gtk3-systray の後に gnome-shell が起動するので認識されていない</li>
<li>回避策1: gnome-shell を再起動</li>
<li>回避策2: alternative で /bin/true にしておいて uim-toolbar-gtk3-systray は autostart でユーザーが起動する</li>
<li>回避策3: uim を諦める</li>
<li>お好みで: gnome-shell-extension-move-dock, gnome-shell-extension-remove-dropdown-arrows, gnome-shell-extension-impatience, gnome-shell-extension-suspend-button</li>
<li>パッケージ以外の拡張機能は GNOME Shell Extensions というサイトから</li>
<li>ブラウザー拡張の chrome-gnome-shell でアップデートがブラウザー経由でできる</li>
<li>Dash to Panel と Arc Menu で Windows 風にできる</li>
<li>デスクトップにアイコンを表示して Nautilus のアイコンサイズを変更するとデスクトップのも一緒に変わる</li>
<li>隠し設定で切り離すこともできるらしい</li>
<li>プロプライエタリなビデオドライバを使うなら contrib と non-free は必須</li>
<li>backports の話</li>
<li>software-properties-gtk で (synaptic から) 追加すると /etc/apt/trusted.gpg が壊れるのに昨日気づいた</li>
<li>Firefox ESR の Accept-Language が en のまま</li>
<li>削除して登録し直すとなおる</li>
</ul>


<p>追加で Debian T シャツの話</p>

<h2>Ryzen の話</h2>

<ul>
<li>lurdan さん</li>
<li>Ryzen の話</li>
<li><a href="https://www.sakura.ad.jp/koukaryoku/">機械学習、データ解析なら 高火力コンピューティング | さくらインターネット</a></li>
<li><a href="http://itpro.nikkeibp.co.jp/atcl/column/14/346926/022700857/">ニュース解説 - グーグルもGPUクラウドに参入、4社のコスパ比較：ITpro</a></li>
<li>テラフロップスあたりの月額料金が安い</li>
<li>時間貸しなどの時は初期費用はいらないらしい</li>
<li>Ubuntu インストールしたての状態なので、使うパッケージなどのインストール作業が必要</li>
<li><a href="https://www.sakura.ad.jp/education/">さくらの文教向けソリューション｜さくらインターネット</a></li>
<li>Ryzen の話に戻り</li>
<li>linux kernel 4.10 から対応コードが入っている</li>
<li>その他の対応も考えると 4.11 以降が望ましい</li>
<li>Proxmox は Debian のユーザーランドに Ubuntu zesty のカーネルなので、こういう用途の自宅サーバーには Proxmox VE が良いのではないか</li>
<li><a href="https://twitter.com/search?q=%23Ryzen_SEGV_Battle">#Ryzen_SEGV_Battle - Twitter検索</a></li>
</ul>


<h2>Stretch リリース</h2>

<ul>
<li>uwabami さん</li>
<li>アップグレードの人柱の話</li>
<li>何台もあげたが特にはまらなかった</li>
<li>リリースノート読み</li>
<li><a href="https://www.debian.org/releases/stretch/amd64/release-notes/ch-whats-new.ja.html">第2章 Debian 9 の最新情報</a></li>
<li><a href="https://www.debian.org/releases/stretch/amd64/release-notes/ch-information.ja.html">第5章 stretch で注意すべき点</a></li>
<li>pass がおすすめ</li>
<li>net-tools パッケージ (ifconfig など) が非推奨</li>
<li>sl 的なものを設定するのが良いかも</li>
<li>PIE: カーネルを更新しておかないとセグメンテーションフォルトになる可能性があるので jessie でもちゃんと 8.8 (以降) に更新してから stretch にあげ始める必要がある</li>
<li>一番のハマりどころになりそう</li>
<li>セキュリティサポートの制限</li>
<li>midori, konqueror などは完全なセキュリティサポートがないので Firefox や Chromium を使いましょう</li>
<li>node.js はリソース不足で一切対応されない</li>
<li>php とかコンパイラー対応がなくなった Chromium とか WordPress とか、セキュリティサポートがなくなった例は過去にもある</li>
<li><a href="https://security-tracker.debian.org/tracker/">Security Bug Tracker</a></li>
<li>「旧式の暗号と SSH1 プロトコルは OpenSSH では標準で無効にされています」</li>
<li>evdev から libinput</li>
<li>「Perl での変更がサードパーティ製ソフトウェアを壊す可能性があります」</li>
<li>カレントディレクトリが <code>@INC</code> からなくなる話</li>
<li>ライブアップグレード</li>
<li>jessie のまま最新に更新を確認</li>
<li>apt line 書き換え</li>
<li>apt-get update</li>
<li>apt-get upgrade</li>
<li>apt-get dist-upgrade</li>
<li><a href="https://wiki.debian.org/UnattendedUpgrades">UnattendedUpgrades - Debian Wiki</a></li>
<li>設定ファイルは選択に応じて <code>*.dpkg-old</code> とか <code>*.dpkg-dist</code> ができる</li>
<li>apt autoremove</li>
<li>reboot</li>
<li>sysvinit にしていたので systemd に移行</li>
<li>sysvinit がなくなったので sudo reboot は進むがコンソールに帰ってこなくなるので、処理が進んだ段階でブチっと切れて進む</li>
<li>atig は bundle し直しで動いた</li>
<li>znc も何か直したら動いた</li>
<li>bitlbee は動いていなかった</li>
<li>さくらインターネットさんで借りている VPS の stretch への upgrade の Live 実演終了</li>
</ul>


<h2>LT</h2>

<p>ここから LT タイム。</p>

<h2>最新ハードウェアへのインストール</h2>

<ul>
<li>初めて Jessie をインストールしたときに起きたエラーについて</li>
<li>「ブートローダーのインストールに失敗しました。」</li>
<li>原因: GRUB が NVMe に対応していない</li>
<li>解決策1: NVMe 規格の SSD を買わない (おすすめは SATA)</li>
<li>解決策2: NVMe に対応しているブートローダーを使う</li>
<li>NVMe に対応しているブートローダー: rEFInd</li>
</ul>


<p>「ブートローダーのインストールに失敗しました。」というメッセージは見覚えがあったので、インストーラーで出たメッセージだとすぐにわかったけど、わからなかった人もいたようで、どんな状況で見たのか思い出そうとしたけど、思い出せなかったので、仮想環境か何かで特殊なことをしていて出ただけで困らなかったのかもしれない、と思った。</p>

<h2>yabuki さんの話</h2>

<p>自分の準備中で聞けず。</p>

<h2>Debian での OpenSSH の TCP wrappers サポート</h2>

<p>なぜか HDMI を接続しても反応しなかったので、PDF にして、さとうさんの PC を借りて発表しました。</p>

<p>発表資料はいつも通り<a href="https://github.com/znz/openssh-on-debian9">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/openssh-on-debian9/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/stretchopensshtcp-wrappers">slideshare</a>, <a href="https://speakerdeck.com/znz/stretchdefalseopensshfalsetcp-wrapperssapoto">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-openssh-on-debian9">RubyGems</a> にあげています。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/openssh-on-debian9/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/openssh-on-debian9/" title="stretchでのOpenSSHのTCP wrappersサポート">stretchでのOpenSSHのTCP wrappersサポート</a>
</div>


<h2>T シャツの話</h2>

<p>欲しい人は OSC 京都や勉強会で、または @nogajun さんに直接連絡</p>

<h2>告知</h2>

<ul>
<li>次回は 7月はなしで、代わりに<a href="https://www.ospn.jp/osc2017-kyoto/">オープンソースカンファレンス2017 Kyoto</a>の8月5日で。</li>
<li><a href="https://k-of.jp/">KOF</a> (今年のサイトはまだない)</li>
<li><a href="https://histudy.connpass.com/">姫路IT系勉強会</a>の8月が今回と同じさくらインターネットさんが会場</li>
</ul>


<h2>感想</h2>

<p>リリースは twitter などではリリースされたっぽい感じでしたが、たぶん最後のアナウンスっぽい<a href="https://lists.debian.org/debian-announce/2017/msg00003.html">リリースアナウンスのメール</a>が「Sat, 17 Jun 2017 20:22:36 -1000」つまり日本時間だと「2017-06-18 15:22:36 +0900」で、少なくともリリースパーティー中にはリリースされていたようです。</p>

<p>すでにあげた人の話では、特に大きなトラブルもなさそうなので、安心してあげられそうです。</p>
]]></content>
  </entry>
  
</feed>
