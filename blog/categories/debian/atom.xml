<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debian | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/debian/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2015-10-25T20:18:12+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu 14.04 LTS に Zabbix 2.4 を PostgreSQL を使う設定で入れた]]></title>
    <link href="http://blog.n-z.jp/blog/2015-03-13-zabbix-24-pgsql.html"/>
    <updated>2015-03-13T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/zabbix-24-pgsql</id>
    <content type="html"><![CDATA[<p><a href="https://www.zabbix.com/documentation/2.4/manual/installation/install_from_packages" title="3 Installation from packages [Zabbix Documentation 2.4]">3 Installation from packages [Zabbix Documentation 2.4]</a>
だと MySQL の例しかなく、
PostgreSQL で入れるとちょっとひっかかったところがあったので、
そのメモです。</p>

<p>Debian や Ubuntu の公式パッケージの zabbix との違いも気づいた範囲で書いておきました。</p>

<!--more-->


<h2>zabbix-release のインストール</h2>

<p><code>zabbix-release</code> をインストールして apt-line を設定して
<code>apt-get update</code> するところまでは公式マニュアルと同じです。</p>

<pre><code>wget http://repo.zabbix.com/zabbix/2.4/ubuntu/pool/main/z/zabbix-release/zabbix-release_2.4-1+trusty_all.deb
sudo dpkg -i zabbix-release_2.4-1+trusty_all.deb
sudo apt-get update
</code></pre>

<h2>zabbix-server のインストール</h2>

<p><code>zabbix-server-mysql</code> の代わりに <code>zabbix-server-pgsql</code> をインストールします。
途中で入力するパスワードは後で必要になるのでメモするか覚えておきます。
(Debian や Ubuntu の公式パッケージの zabbix と違って <code>dbconfig-common</code> を使うようになっています。)</p>

<pre><code>sudo apt-get install zabbix-server-pgsql
</code></pre>

<p>ただし、先に postgresql を入れておかないとデータベースの作成のところでエラーになるようです。</p>

<h2>zabbix-frontend-php のインストール</h2>

<p><code>/usr/share/doc/zabbix-frontend-php/README.Debian</code> に書いてあるのですが、
<code>php5-pgsql</code> を入れておくと初期設定の時のデータベースの選択肢に PostgreSQL が出てきます。</p>

<pre><code>sudo apt-get install zabbix-frontend-php php5-pgsql
</code></pre>

<h2>PHP のタイムゾーンの設定</h2>

<pre><code>sudoedit /etc/zabbix/apache.conf
</code></pre>

<p>で</p>

<pre><code># php_value date.timezone Europe/Riga
</code></pre>

<p>を</p>

<pre><code>php_value date.timezone Asia/Tokyo
</code></pre>

<p>に変更して</p>

<pre><code>sudo service apache2 reload
</code></pre>

<p>で反映します。
(Debian や Ubuntu の公式パッケージの zabbix と違って <code>apache2</code> のみ対応です。
<code>php5-fpm</code>+<code>nginx</code> には対応していないので <code>nginx</code> で使うなら完全に独自設定が必要です。)</p>

<h2>初期設定</h2>

<p><code>http://localhost/zabbix/</code> を開いて初期設定を開始します。
<code>Next</code> ボタンで進んでいってデータベースの設定のところは</p>

<ul>
<li>Database Type : PostgreSQL</li>
<li>Database host : localhost のまま</li>
<li>Database port : 0 のまま</li>
<li>Database name : zabbix のまま</li>
<li>User : root から zabbix に変更</li>
<li>Password : <code>zabbix-server-pgsql</code> をインストールしたときに設定したパスワード</li>
</ul>


<p>と設定します。</p>

<p>そして <code>Next</code> で進んでいって <code>Finish</code> まで行くと初期設定終了です。
(Debian や Ubuntu の公式パッケージの zabbix と違って
<code>/etc/zabbix/web/</code> が <code>www-data</code> から書き込み可能になっていて
ダウンロードして自分で設置しなくても設定完了するようになっています。)</p>

<h2>ログイン</h2>

<ul>
<li>Username : Admin</li>
<li>Password : zabbix</li>
</ul>


<p>でログインします。</p>

<p>右上の Profile から Language を Japanese (ja_JP) に変更して Update すると
日本語で使えるようになります。
パスワードもここで変更できます。</p>

<p>ログイン前の画面は guest ユーザーの言語が反映されているので、
「管理」-「ユーザー」からメンバーの「guest」を開いて言語を変更して更新します。</p>

<h2>zabbix-agent のインストール</h2>

<pre><code>sudo apt-get install zabbix-agent
</code></pre>

<p>でインストールできます。</p>

<h2>Zabbix server の監視</h2>

<p><code>zabbix-agent</code> をインストールした後、
「設定」-「ホスト」でステータスを「無効」から「有効」に切り替えます。</p>

<p>しばらくするとエージェントの状態の「Z」が緑色になって監視できていることがわかります。</p>

<h2>グラフの日本語の文字化け対策</h2>

<p>グラフなどの図の中の日本語が文字化けするときは
適当な日本語フォントを入れて
<code>zabbix-frontend-php</code> の設定をし直せば直ります。</p>

<pre><code>sudo apt-get install fonts-vlgothic
sudo dpkg-reconfigure zabbix-frontend-php
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[owncloud-client が conflict した話]]></title>
    <link href="http://blog.n-z.jp/blog/2015-01-29-owncloud-client.html"/>
    <updated>2015-01-29T09:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/owncloud-client</id>
    <content type="html"><![CDATA[<p>Debian 7 に <a href="https://owncloud.org/install/#desktop">ownCloud 公式の Desktop Client</a> を入れていたら、
なぜか <code>owncloud-client</code> の 1.7.1 から 1.7.1 への更新が発生して <code>libqtkeychain0</code> と conflict していたので、
<code>libqtkeychain0</code> をダウングレードして解決しました。</p>

<!--more-->


<h2>現象</h2>

<p>このように競合が検出されました。</p>

<pre><code>$ sudo aptitude full-upgrade -DV
以下のパッケージが更新されます:
  owncloud-client{b} [1.7.1 -&gt; 1.7.1] (競: libqtkeychain0)
更新: 1 個、新規インストール: 0 個、削除: 0 個、保留: 0 個。
700 k バイトのアーカイブを取得する必要があります。展開後に 0  バイトのディスク領域が新たに消費されます。
以下のパッケージには満たされていない依存関係があります:
 owncloud-client : 競合: libqtkeychain0 (= 0.20140128) [0.20140128 が既にインストール済みです]
以下のアクションでこれらの依存関係の問題は解決されます:

     以下のパッケージを削除する:
1)     libowncloudsync0
2)     libqtkeychain0
3)     owncloud-client
4)     owncloud-client-l10n



この解決方法を受け入れますか? [Y/n/q/?]q
</code></pre>

<h2>状況</h2>

<p><code>apt-cache show</code> でみてみると <code>Conflicts: libqtkeychain0 (= 0.20140128)</code> と明示されていました。</p>

<pre><code>$ apt-cache show owncloud-client
Package: owncloud-client
Version: 1.7.1
Architecture: amd64
Maintainer: Markus Rex &lt;msrex@owncloud.com&gt;
Installed-Size: 1521
Depends: libc6 (&gt;= 2.4), libgcc1 (&gt;= 1:4.1.1), libneon27, libowncloudsync0 (= 1.7.1), libqt4-dbus (&gt;= 4:4.5.3), libqt4-network (&gt;= 4:4.5.3), libqt4-sql (&gt;= 4:4.5.3), libqt4-xml (&gt;= 4:4.5.3), libqt4-xmlpatterns (&gt;= 4:4.5.3), libqtcore4 (&gt;= 4:4.8.0), libqtgui4 (&gt;= 4:4.7.0~beta1), libqtkeychain0, libqtwebkit4 (&gt;= 2.2.0), libsqlite3-0 (&gt;= 3.5.9), libstdc++6 (&gt;= 4.4.0), owncloud-client-l10n, libqt4-sql-sqlite
Conflicts: libqtkeychain0 (= 0.20140128)
Filename: ./amd64/owncloud-client_1.7.1_amd64.deb
Size: 699596
MD5sum: 23e2bfa2467b45fd9b70f3b946203b4b
SHA1: 422242ad170ad1aa8d75587fe18a0469cc23ad72
SHA256: 319e7253309835d028ec527ee9b3abea014c2db8b7edc5d3d57270ede9dbb5af
Section: devel
Priority: optional
Multi-Arch: same
Description: The ownCloud client is based on Mirall - github.com/owncloud/mirall
 .
 ownCloud client enables you to connect to your private
 ownCloud Server. With it you can create folders in your home
 directory, and keep the contents of those folders synced with your
 ownCloud server. Simply copy a file into the directory and the
 ownCloud client does the rest.
 .
 ownCloud gives your employees anytime, anywhere access to the files
 they need to get the job done, whether through this desktop application,
 our mobile apps, the web interface, or other WebDAV clients. With it,
 your employees can easily view and share documents and information
 critical to the business, in a secure, flexible and controlled
 architecture. You can easily extend ownCloud with plug-ins from the
 community, or that you build yourself to meet the requirements of
 your infrastructure and business.
 .
 ownCloud - Your Cloud, Your Data, Your Way!  www.owncloud.com
 .
 Authors
 =======
 Duncan Mac-Vicar P. &lt;duncan@kde.org&gt;
 Klaas Freitag &lt;freitag@owncloud.com&gt;
 Daniel Molkentin &lt;danimo@owncloud.com&gt;

Package: owncloud-client
Status: install ok installed
Priority: optional
Section: devel
Installed-Size: 1521
Maintainer: Markus Rex &lt;msrex@owncloud.com&gt;
Architecture: amd64
Multi-Arch: same
Version: 1.7.1
Depends: libc6 (&gt;= 2.4), libgcc1 (&gt;= 1:4.1.1), libneon27, libowncloudsync0 (= 1.7.1), libqt4-dbus (&gt;= 4:4.5.3), libqt4-network (&gt;= 4:4.5.3), libqt4-sql (&gt;= 4:4.5.3), libqt4-xml (&gt;= 4:4.5.3), libqt4-xmlpatterns (&gt;= 4:4.5.3), libqtcore4 (&gt;= 4:4.8.0), libqtgui4 (&gt;= 4:4.7.0~beta1), libqtkeychain0, libqtwebkit4 (&gt;= 2.2.0), libsqlite3-0 (&gt;= 3.5.9), libstdc++6 (&gt;= 4.4.0), owncloud-client-l10n, libqt4-sql-sqlite
Description: The ownCloud client is based on Mirall - github.com/owncloud/mirall
 .
 ownCloud client enables you to connect to your private
 ownCloud Server. With it you can create folders in your home
 directory, and keep the contents of those folders synced with your
 ownCloud server. Simply copy a file into the directory and the
 ownCloud client does the rest.
 .
 ownCloud gives your employees anytime, anywhere access to the files
 they need to get the job done, whether through this desktop application,
 our mobile apps, the web interface, or other WebDAV clients. With it,
 your employees can easily view and share documents and information
 critical to the business, in a secure, flexible and controlled
 architecture. You can easily extend ownCloud with plug-ins from the
 community, or that you build yourself to meet the requirements of
 your infrastructure and business.
 .
 ownCloud - Your Cloud, Your Data, Your Way!  www.owncloud.com
 .
 Authors
 =======
 Duncan Mac-Vicar P. &lt;duncan@kde.org&gt;
 Klaas Freitag &lt;freitag@owncloud.com&gt;
 Daniel Molkentin &lt;danimo@owncloud.com&gt;

Package: owncloud-client
Version: 1.5.0+dfsg-4~bpo70+1
Installed-Size: 1076
Maintainer: ownCloud for Debian maintainers &lt;pkg-owncloud-maintainers@lists.alioth.debian.org&gt;
Architecture: amd64
Depends: libowncloudsync0 (= 1.5.0+dfsg-4~bpo70+1), libqt4-sql-sqlite, owncloud-client-l10n, libc6 (&gt;= 2.2.5), libgcc1 (&gt;= 1:4.1.1), libneon27-gnutls, libocsync0 (&gt;= 0.60.3), libqt4-dbus (&gt;= 4:4.5.3), libqt4-network (&gt;= 4:4.6.1), libqt4-sql (&gt;= 4:4.5.3), libqt4-xml (&gt;= 4:4.5.3), libqt4-xmlpatterns (&gt;= 4:4.5.3), libqtcore4 (&gt;= 4:4.8.0), libqtgui4 (&gt;= 4:4.7.0~beta1), libqtkeychain0 (&gt;= 0.1.0), libqtwebkit4 (&gt;= 2.1.0~2011week13), libstdc++6 (&gt;= 4.1.1)
Description-en: folder synchronization with an ownCloud server - GUI
 The ownCloudSync system lets you always have your latest files wherever
 you are. Just specify one or more folders on the local machine to and a server
 to synchronize to. You can configure more computers to synchronize to the same
 server and any change to the files on one computer will silently and reliably
 flow across to every other.
 .
 owncloud-client provides the graphical client specialising in
 synchronizing with cloud storage provided by ownCloud.
Homepage: http://owncloud.org/sync-clients/
Description-md5: a754a2b9b06d1c7c880afd05aa24e101
Section: net
Priority: optional
Filename: pool/main/o/owncloud-client/owncloud-client_1.5.0+dfsg-4~bpo70+1_amd64.deb
Size: 417650
MD5sum: 42a3f6355f9d5f5af0fb42141bee9ecf
SHA1: 52102eacc1d81438cb88e639c09269484279dde1
SHA256: d38e11879d6439dad97ff9f59449077193dbc89331bae8d2866b335ce8b41856
</code></pre>

<p>さらに <code>apt-cache policy</code> でどこからきたパッケージなのかみてみるとどちらも ownCloud 公式のパッケージだったように見えました。
bpo (backports) のパッケージならバージョンが下がることはないはずなので、そう判断しました。</p>

<pre><code>$ apt-cache policy owncloud-client
owncloud-client:
  インストールされているバージョン: 1.7.1
  候補:               1.7.1
  バージョンテーブル:
     1.7.1 0
        500 http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/Debian_7.0/  Packages
 *** 1.7.1 0
        100 /var/lib/dpkg/status
     1.5.0+dfsg-4~bpo70+1 0
        100 http://ftp.jp.debian.org/debian/ wheezy-backports/main amd64 Packages
$ apt-cache policy libqtkeychain0
libqtkeychain0:
  インストールされているバージョン: 0.20140128
  候補:               0.20140128
  バージョンテーブル:
 *** 0.20140128 0
        100 /var/lib/dpkg/status
     0.4 0
        500 http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/Debian_7.0/  Packages
     0.1.0-2~bpo70+1 0
        100 http://ftp.jp.debian.org/debian/ wheezy-backports/main amd64 Packages
</code></pre>

<h2>対処</h2>

<p><code>libqtkeychain0</code> を ownCloud 公式の 0.4.0 にダウングレードすることで解決しました。</p>

<pre><code>$ sudo aptitude full-upgrade -DV
以下のパッケージが更新されます:
  owncloud-client{b} [1.7.1 -&gt; 1.7.1] (競: libqtkeychain0)
更新: 1 個、新規インストール: 0 個、削除: 0 個、保留: 0 個。
700 k バイトのアーカイブを取得する必要があります。展開後に 0  バイトのディスク領域が新たに消費されます。
以下のパッケージには満たされていない依存関係があります:
 owncloud-client : 競合: libqtkeychain0 (= 0.20140128) [0.20140128 が既にインストール済みです]
以下のアクションでこれらの依存関係の問題は解決されます:

     以下のパッケージを削除する:
1)     libowncloudsync0
2)     libqtkeychain0
3)     owncloud-client
4)     owncloud-client-l10n



この解決方法を受け入れますか? [Y/n/q/?]n
以下のアクションでこれらの依存関係の問題は解決されます:

     以下のパッケージを削除する:
1)     owncloud-client
2)     owncloud-client-l10n



この解決方法を受け入れますか? [Y/n/q/?]n
以下のアクションでこれらの依存関係の問題は解決されます:

     以下のパッケージを現在のバージョンに一時固定する:
1)     owncloud-client [1.7.1 (now)]



この解決方法を受け入れますか? [Y/n/q/?]n
以下のアクションでこれらの依存関係の問題は解決されます:

     以下のパッケージをダウングレードする:
1)     libqtkeychain0 [0.20140128 (now) -&gt; 0.4 (&lt;NULL&gt;)]



この解決方法を受け入れますか? [Y/n/q/?]y
以下のパッケージがダウングレードされます:
  libqtkeychain0 [0.20140128 -&gt; 0.4]
以下のパッケージが更新されます:
  owncloud-client [1.7.1 -&gt; 1.7.1]
更新: 1 個、新規インストール: 0 個、ダウングレード: 1 個、削除: 0 個、保留: 0 個。
753 k バイトのアーカイブを取得する必要があります。展開後に 0  バイトのディスク領域が新たに消費されます。
先に進みますか? [Y/n/?]
取得: 1 http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/Debian_7.0/  libqtkeychain0 0.4 [53.4 kB]
取得: 2 http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/Debian_7.0/  owncloud-client 1.7.1 [700 kB]
Fetched 753 kB in 4秒 (156 kB/s)
changelog を読んでいます... 完了
dpkg: 警告: libqtkeychain0 を 0.20140128 から 0.4 にダウングレードしています
(データベースを読み込んでいます ... 現在 124701 個のファイルとディレクトリがインストールされています。)
libqtkeychain0 0.20140128 を (.../libqtkeychain0_0.4_amd64.deb で) 置換するための準備をしています ...
libqtkeychain0 を展開し、置換しています...
owncloud-client:amd64 1.7.1 を (.../owncloud-client_1.7.1_amd64.deb で) 置換するための準備をしています ...
owncloud-client:amd64 を展開し、置換しています...
man-db のトリガを処理しています ...
libqtkeychain0 (0.4) を設定しています ...
owncloud-client:amd64 (1.7.1) を設定しています ...

現在の状態: 更新が 0 個 [-1]。
</code></pre>

<h2>対処後の状況</h2>

<p><code>owncloud-client</code> パッケージも <code>libqtkeychain0</code> パッケージもどちらも ownCloud 公式のバージョンになって解決しました。</p>

<pre><code>$ apt-cache policy owncloud-client
owncloud-client:
  インストールされているバージョン: 1.7.1
  候補:               1.7.1
  バージョンテーブル:
 *** 1.7.1 0
        500 http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/Debian_7.0/  Packages
        100 /var/lib/dpkg/status
     1.5.0+dfsg-4~bpo70+1 0
        100 http://ftp.jp.debian.org/debian/ wheezy-backports/main amd64 Packages
$ apt-cache policy libqtkeychain0
libqtkeychain0:
  インストールされているバージョン: 0.4
  候補:               0.4
  バージョンテーブル:
 *** 0.4 0
        500 http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/Debian_7.0/  Packages
        100 /var/lib/dpkg/status
     0.1.0-2~bpo70+1 0
        100 http://ftp.jp.debian.org/debian/ wheezy-backports/main amd64 Packages
</code></pre>

<h2>考察</h2>

<p>Debian 公式パッケージならこういうときは
<a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Version">Version</a> に
epoch をつけて解決しますが、
ownCloud 公式は Debian からみると非公式パッケージになるので、
将来の Debian のアップグレードの邪魔にならないように epoch を使わなかったため、
こういう問題が起きたのでないかと推測しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant Cloudでboxを公開してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-21-vagrantcloud-box.html"/>
    <updated>2014-07-21T15:52:35+09:00</updated>
    <id>http://blog.n-z.jp/blog/vagrantcloud-box</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2014-07-18-wheezy-from-vagrant-cloud.html" title="Vagrant CloudからWheezyを入れてみた">Vagrant CloudからWheezyを入れてみた</a>で公開されているものを使ってみたので、
今回は
<a href="https://vagrantcloud.com/">Vagrant Cloud</a>
で日本語で日本向けの Box の公開も試してみました。</p>

<!--more-->


<h2>手順概要</h2>

<ol>
<li><a href="https://vagrantcloud.com/">https://vagrantcloud.com/</a> にログイン</li>
<li><a href="https://vagrantcloud.com/boxes/new">Create Box</a> で作成</li>
<li>Create new version でバージョンを作成</li>
<li>Create new provider でバージョンに対応する provider を作成</li>
<li>無料アカウントだと Upload は使えないようなので URL を指定</li>
<li>バージョンの編集で Release すると公開</li>
</ol>


<h2>登録される情報</h2>

<p>ユーザーアカウントに複数の Box が対応していて、
Box に複数のバージョンが対応していて、
バージョンに複数の provider (VirtualBox とか VMware とか) が対応している、
という構造になっているようです。</p>

<p>バージョンは Release するまでは公開されないようです。</p>

<p>古いバージョンは Revoke で破棄できるようなので、
box を置く URL を使い回すなら Revoke してから
ファイルを置き換えて新しいバージョンを登録するのが
良さそうに思いました。</p>

<h2>作成した box の packer テンプレート</h2>

<p><a href="https://github.com/znz/packer-templates">packer-templates</a>
で公開しています。</p>

<p>使い方は</p>

<pre><code>git clone https://github.com/znz/packer-templates
cd debian-7.6.0-amd64-ja_jp
packer build debian-7.6.0-amd64-ja_jp.json
</code></pre>

<p>で <code>debian-7.6.0-amd64-ja_jp_virtualbox.box</code> が作成できます。
試した環境では1時間ぐらいかかりました。</p>

<h2>使用方法</h2>

<p><code>vagrant init znzj/debian-7.6.0-amd64-ja_jp</code>
のように <code>vagrant init</code> の引数に <code>ユーザー名/BOX名</code> を指定して
<code>Vagrantfile</code> を作成すると
<code>config.vm.box = "znzj/debian-7.6.0-amd64-ja_jp"</code>
と指定されていて <code>vagrant up</code> で自動ダウンロードされて使えます。</p>

<h2>登録した URL の扱い</h2>

<p>box は URL で登録したので、
<code>https://vagrantcloud.com/znzj/debian-7.6.0-amd64-ja_jp/version/1/provider/virtualbox.box</code>
のように <code>vagrantcloud.com</code> の URL に見えるところからダウンロードしようとした時、
リダイレクトされて登録した URL からのダウンロードになるようです。</p>

<p><code>vagrantcloud</code> 側でキャッシュなどをしてくれるわけではないようなので、
置き場所には注意する必要がありそうです。</p>

<p>今回は需要も多くなさそうで、
日本向けということで
さくらのVPS
に置いてみました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant CloudからWheezyを入れてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-18-wheezy-from-vagrant-cloud.html"/>
    <updated>2014-07-18T21:30:25+09:00</updated>
    <id>http://blog.n-z.jp/blog/wheezy-from-vagrant-cloud</id>
    <content type="html"><![CDATA[<p>Debian 7.6 がリリースされたので、新しい box がないか探してみたところ、
<a href="http://www.vagrantbox.es/" title="A list of base boxes for Vagrant - Vagrantbox.es">A list of base boxes for Vagrant - Vagrantbox.es</a>
から探すのではなく
<a href="https://vagrantcloud.com/">Vagrant Cloud</a>
を使えば良いということがわかりました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>VirtualBox 4.3.12</li>
<li>Vagrant 1.6.3</li>
<li><a href="https://vagrantcloud.com/ffuenf/debian-7.6.0-amd64" title="Debian Wheezy 7.6.0 x86_64">Debian Wheezy 7.6.0 x86_64</a> 0.0.27</li>
</ul>


<h2>書き換え</h2>

<p>古い box は</p>

<pre><code>  config.vm.box = ENV["VM_BOX"] || "opscode_debian-7.4_chef-provisionerless"
  config.vm.box_url = ENV["VM_BOX_URL"] || "http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_debian-7.4_chef-provisionerless.box"
</code></pre>

<p>と指定していたのを
<a href="https://github.com/ffuenf/vagrant-boxes" title="ffuenf/vagrant-boxes">ffuenf/vagrant-boxes</a>
からリンクされている
<a href="https://vagrantcloud.com/ffuenf/debian-7.6.0-amd64" title="ffuenf/debian-7.6.0-amd64">ffuenf/debian-7.6.0-amd64</a>
の説明通り <code>vagrant init ffuenf/debian-7.6.0-amd64</code> で作成された
<code>Vagrantfile</code> を参考にして、</p>

<pre><code>  config.vm.box = "ffuenf/debian-7.6.0-amd64"
</code></pre>

<p>に書き換えました。</p>

<p>以前の box を使っている 古い VM を <code>vagrant destroy</code> ですべて破棄した後、
<code>vagrant box remove opscode_debian-7.4_chef-provisionerless</code>
で box も削除しました。</p>

<h2>余談</h2>

<p><code>vagrant box outdated</code> や <code>vagrant box update</code> の使い方がわからなかったのですが、
<code>box_url</code> でダウンロードしてきた box で使うものではなく Vagrant Cloud から
ダウンロードしてきた box で使うものだったようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apt-cacher-ngでliveイメージ作成を繰り返す時の無駄なダウンロードを減らす]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-14-apt-cacher-ng.html"/>
    <updated>2014-07-14T23:53:14+09:00</updated>
    <id>http://blog.n-z.jp/blog/apt-cacher-ng</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/znz/rubylive-builder" title="rubylive-builder">rubylive-builder</a>
で
<a href="https://github.com/znz/rubylive" title="RubyLive">RubyLive</a>
という Debian wheezy ベースの Live イメージを作成するときに
<code>apt-get update</code> などで何度も無駄にダウンロードしてしまうので、
<code>apt-cacher-ng</code> で Live イメージ作成を繰り返す時の無駄なダウンロードを減らすことにしました。</p>

<!--more-->


<h2>Vagrant の provision でインストール</h2>

<p>Vagrantfile では</p>

<pre><code class="ruby Vagrantfile">  config.vm.provision :shell do |shell|
    shell.path = "provision.sh"
  end
</code></pre>

<p>のようにシェルスクリプトでプロビジョニングしているだけだったので、
その中で以下のようにインストールして設定するようにしました。</p>

<pre><code class="bash provision.sh">apt-get install -y apt-cacher-ng
echo 'Acquire::http::Proxy "http://localhost:3142/";' &gt;/etc/apt/apt.conf.d/02proxy
</code></pre>

<p>Vagrantfile で以下のようにポートフォワーディングを設定していれば
<a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0315" title="第315回　apt-cacher-ngを使ってAPT用キャッシュプロキシの構築：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社">第315回　apt-cacher-ngを使ってAPT用キャッシュプロキシの構築：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社</a>
の2ページ目に説明があるようにヒット率などを確認できます。</p>

<pre><code class="ruby Vagrantfile">  # apt-cacher-ng
  config.vm.network "forwarded_port", guest: 3142, host: 3142
</code></pre>

<h2>rake コマンドで環境変数を渡す</h2>

<p><code>APT_HTTP_PROXY=http://localhost:3142 rake</code> でも良かったのですが、
rake コマンドは引数の <code>FOO=bar</code> を <code>ENV</code> に設定してくれるので、
<code>rake APT_HTTP_PROXY=http://localhost:3142</code> で渡して、
Rakefile の中では以下のように受け取って <code>lb config</code> に渡しました。</p>

<pre><code class="ruby Rakefile">desc "config RubyLive"
task :config =&gt; [:clean] do
  sh 'lb config'
  if ENV['APT_HTTP_PROXY']
    sh "lb config --apt-http-proxy #{ENV['APT_HTTP_PROXY']}"
  end
end
</code></pre>

<h2>live-build で apt-cacher-ng を使う</h2>

<p>既に出てきたように
<code>lb config</code> の <code>--apt-http-proxy</code> オプションや <code>--apt-ftp-proxy</code> オプションで指定すると
Live イメージ作成の時に proxy を使ってくれるようになります。
今回は apt-line に <code>http</code> しか使っていないので
<code>--apt-http-proxy</code> だけ指定しています。</p>

<p>もちろん、作成後の Live イメージには proxy 設定は残りません。</p>

<h2>感想</h2>

<p>live-build は cache ディレクトリにも、かなりキャッシュしてくれるのですが、
<code>apt-get update</code> などの proxy じゃないとキャッシュしにくいものもあるので、
どんな場合でもダウンロード量削減に役に立ちそうだと思いました。</p>
]]></content>
  </entry>
  
</feed>
