<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debian | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/debian/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-07-12T11:25:31+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debian 7 (wheezy) の RubyLive をカスタマイズ中]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-12-debian-ruby-live.html"/>
    <updated>2014-07-12T10:08:26+09:00</updated>
    <id>http://blog.n-z.jp/blog/debian-ruby-live</id>
    <content type="html"><![CDATA[<p>今年の
<a href="https://k-of.jp/2014/" title="KOF 2014：関西オープンフォーラム2014">KOF 2014：関西オープンフォーラム2014</a>
に向けて
<a href="https://github.com/znz/rubylive" title="RubyLive">RubyLive</a>
を作成しています。
fork 元の <a href="https://github.com/no6v/rubylive">no6v 版</a> との違いをまとめていきます。</p>

<!--more-->


<h2>カスタマイズの基本</h2>

<p>README から今回に関係する部分を引用しておくと以下のようになっています。</p>

<ul>
<li>config/hooks/

<ul>
<li>インストールの最後の方で実行するフックスクリプトを置くディレクトリ。</li>
<li>拡張子を .chroot にして実行権限を付けておく。</li>
</ul>
</li>
<li>config/includes.chroot/

<ul>
<li>このディレクトリを root に見立てて LiveCD 環境にコピーしたいファイルを置くディレクトリ。</li>
</ul>
</li>
<li>config/package-lists/

<ul>
<li>特別にインストールしたいパッケージのリストを置くディレクトリ。</li>
<li>拡張子を .list.chroot にしてパッケージ名を列挙する。</li>
</ul>
</li>
</ul>


<h2>壁紙などの変更</h2>

<p><code>resources.yml</code> で設定されたファイルは <code>url</code> から自動ダウンロードして <code>path</code> に置くようになっています。</p>

<p><code>size</code> と <code>sha256sum</code> をチェックするだけで違っていても削除はしないようなので、
ダウンロードに失敗した時は<code>path</code> のファイルは手動で削除する必要がありました。</p>

<p><code>path</code> を変更した時も古いファイルが残ってしまうので、削除する必要がありました。</p>

<h2>dconf の設定</h2>

<p><code>config/includes.chroot/etc/skel/.config/dconf/user</code>
に設定変更後のバイナリが置かれていて、
これはひどいと思ったので、
<code>config/includes.chroot/etc/skel/.gnomerc</code>
で <code>gsettings set</code> を使って設定するようにしました。</p>

<h3>壁紙の変更</h3>

<p>起動後の <code>dconf-editor</code> で選択肢を確認しつつ、
<code>gsettings set org.gnome.desktop.background picture-options centered</code>
にしたり、
<code>gsettings set org.gnome.desktop.background picture-uri 'file:///usr/share/images/desktop-base/RubyKaigi2014-commonLogo.svg</code>
にしたりしました。</p>

<h3>デスクトップのアイコン</h3>

<p>以前は <code>gnome-panel</code> (上のバーのところ) に起動用のアイコンを追加していたようですが、
<code>gsettings set</code> で設定しようとすると
<code>org.gnome.gnome-panel.layout object-id-list</code> の他に
<code>org.gnome.gnome-panel.layout.objects.object-0</code> や
<code>org.gnome.gnome-panel.layout.objects.object-0.instance-config</code> などの
複数設定が必要で管理の手間もかかりそうだったので、
<code>gsettings set org.gnome.desktop.background show-desktop-icons true</code>
でデスクトップのアイコンが見えるように変更しました。</p>

<h3>スクリーンセーバーの停止</h3>

<p><code>gsettings set org.gnome.desktop.screensaver idle-activation-enabled false</code>
で止めました。</p>

<h2>chm の変更</h2>

<p><a href="http://ruby.morphball.net/refm-remix.html" title="Rubyリファレンスマニュアル chm版リミックス">Rubyリファレンスマニュアル chm版リミックス</a>
の標準テーマのRuby 2.1.0向け chm に差し替えました。
zip ファイルなので、先ほどの <code>.gnomerc</code> でデスクトップに展開するようにしました。</p>

<p>xCHM v. 1.20 で背景画像や色とかがつかないようなので、サイズが小さい標準を選びました。</p>

<h2>パッケージ変更</h2>

<p><code>jfbterm</code> の代わりに <code>fbterm</code> にしたり、
<code>ruby-build</code> でビルドに必要なパッケージを追加したり、
<code>config/includes.chroot/etc/iceweasel/profile/prefs.js</code> の代わりに <code>iceweasel-l10n-ja</code> を追加したり、
<code>bash-completion</code> などを追加したりしました。</p>

<h2>ruby-build で ruby 2.1.2 のインストール</h2>

<p><a href="http://qiita.com/takahashim/items/406421d515ef1d4f1189" title="[ReVIEW Tips] DockerでRe:VIEW - Qiita">[ReVIEW Tips] DockerでRe:VIEW &ndash; Qiita</a>
を参考にして rbenv は使わずに ruby-build だけ使って <code>/usr/local</code> に ruby 2.1.2 をインストールしました。</p>

<h2>localepurge</h2>

<p>locale の設定は live-config で起動時にやっていて hook の中で
<code>DEBIAN_FRONTEND=noninteractive dpkg-reconfigure localepurge</code>
としても起動後と違って ja locale の設定がなかったので、
起動後や設定した後に <code>debconf-show localepurge</code> で確認した値を使って、
<code>localepurge/nopurge</code> が <code>NEEDSCONFIGFIRST</code> のままなら
<code>echo localepurge localepurge/nopurge string "ja, ja_JP.UTF-8" | debconf-set-selections</code>
で設定することにしました。</p>

<p>これで約 200MB ぐらい小さくなりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[caffでキーサインした]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-22-key-sign-caff.html"/>
    <updated>2014-06-22T19:07:19+09:00</updated>
    <id>http://blog.n-z.jp/blog/key-sign-caff</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20140622" title="第 85 回 関西 Debian 勉強会">第 85 回 関西 Debian 勉強会</a>
で
<a href="https://launchpad.net/~mocchi">坂本さん</a>とキーサインをしたので、そのメモです。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 12.04.4 LTS</li>
<li>gnupg 1.4.11-3ubuntu2.5</li>
<li>signing-party 1.1.4-1</li>
</ul>


<h2>事前準備</h2>

<p>事前にキーサインをするとわかっていれば <code>gpg-key2ps</code> コマンドで fingerprint の紙を用意しておくと良いと思います。
今回は少人数だったので、
fingerprint は画面上で見せて確認してもらいました。</p>

<h2>本人確認</h2>

<p>対面で運転免許証などの写真付きの身分証明書で名前を確認して、
それと署名対象の鍵の uid に入っている名前が一致するのを確認しておきます。
また、後で署名するために fingerprint の情報も入手しておきます。</p>

<h2>caff の設定</h2>

<p>基本的には
<a href="http://tokyodebian.alioth.debian.org/pdf/debianmeetingresume200910-presentation.pdf">Why GPG Key sign? 東京エリア Debian 勉強会 in OSC 2009 Tokyo/Fall</a>
の PDF の内容のままです。</p>

<h3>.caffrc</h3>

<p>自分の鍵 ID を <code>gpg --list-secret-keys</code> で確認すると、
<code>4096R/B4222F7A</code> とわかるので、
<code>gpg --fingerprint B4222F7A</code>
で fingerprint 全体を確認しておきます。
(fingerprint の末尾が鍵 ID です。)</p>

<p>spam よけのために email のところはちょっと改変していますが、
<code>~/.caffrc</code> は以下のように設定しています。
<code>keyid</code> は fingerprint の末尾のうち、
設定例と同じ長さだけ普通の鍵 ID よりちょっと長めに取り出して設定しています。
<code>owner</code> と <code>email</code> はメール送信の時に使われます。</p>

<p>```perl ~/.caffrc</p>

<pre><code># .caffrc -- vim:ft=perl:
# This file is in perl(1) format - see caff(1) for details.

$CONFIG{'owner'} = 'Kazuhiro NISHIYAMA';
$CONFIG{'email'} = 'zn mbf.nifty.com';
#$CONFIG{'reply-to'} = 'foo@bla.org';

# You can get your long keyid from
#   gpg --with-colons --list-key &lt;yourkeyid|name|emailaddress..&gt;
#
# If you have a v4 key, it will simply be the last 16 digits of
# your fingerprint.
#
# Example:
#   $CONFIG{'keyid'} = [ qw{FEDCBA9876543210} ];
#  or, if you have more than one key:
#   $CONFIG{'keyid'} = [ qw{0123456789ABCDEF 89ABCDEF76543210} ];
$CONFIG{'keyid'} = [ qw{262ED8DBB4222F7A} ];

# Select this/these keys to sign with
#$CONFIG{'local-user'} = [ qw{EE739B28C657086C 9B585538ED7E1B73 262ED8DBB4222F7A C9429DABCB28285B} ];

# Additionally encrypt messages for these keyids
#$CONFIG{'also-encrypt-to'} = [ qw{EE739B28C657086C 9B585538ED7E1B73 262ED8DBB4222F7A C9429DABCB28285B} ];

# Mail template to use for the encrypted part
#$CONFIG{'mail-template'} = &lt;&lt; 'EOM';
#Hi,
#
#please find attached the user id{(scalar @uids &gt;= 2 ? 's' : '')}
#{foreach $uid (@uids) {
#    $OUT .= "\t".$uid."\n";
#};}of your key {$key} signed by me.
#
#If you have multiple user ids, I sent the signature for each user id
#separately to that user id's associated email address. You can import
#the signatures by running each through `gpg --import`.
#
#Note that I did not upload your key to any keyservers. If you want this
#new signature to be available to others, please upload it yourself.
#With GnuPG this can be done using
#       gpg --keyserver pool.sks-keyservers.net --send-key {$key}
#
#If you have any questions, don't hesitate to ask.
#
#Regards,
#{$owner}
#EOM
</code></pre>

<p>```</p>

<h3>~/.caff/gnupghome/gpg.conf の設定</h3>

<p>以前参考にした設定のまま</p>

<p><code>text ~/.caff/gnupghome/gpg.conf
keyserver pgp.mit.edu
cert-digest-algo SHA256
personal-digest-preferences SHA256
</code></p>

<p>となっていました。
PDF では SHA512 になっていたので、
SHA256 から SHA512 に変更しました。
今日の caff での署名した時点では SHA256 のままだったので、
次回から変わる予定です。</p>

<p><code>text ~/.caff/gnupghome/gpg.conf
keyserver pgp.mit.edu
cert-digest-algo SHA512
personal-digest-preferences SHA512
</code></p>

<h2>caff -u で署名</h2>

<p>spam よけのためメールアドレスの所は改変した状態のログは以下の通りです。
「本当に署名しますか? (y/N)」のところで身分証明書と一緒に確認した fingerprint と合っているか確認します。</p>

<p>最後にメールを送信して終了です。
相手の鍵で暗号化されたメールが localhost の SMTP サーバー送信されます。</p>

<p>```console</p>

<pre><code>% caff -u B4222F7A D66FD341
[INFO] Importing key 262ED8DBB4222F7A from your normal GnuPGHome.
[INFO] fetching keys, this will take a while...
[INFO] Sign the following keys according to your policy, then exit gpg with 'save' after signing each key
gpg --local-user B4222F7A --homedir=/home/kazu/.caff/gnupghome --secret-keyring /home/kazu/.gnupg/secring.gpg --no-auto-check-trustdb --trust-model=always --edit 25DA5B9699F132DB74BD2270B5A586C7D66FD341 sign
gpg (GnuPG) 1.4.11; Copyright (C) 2010 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.


pub  4096R/D66FD341  作成: 2014-06-22  満了: 無期限       利用法: SC
sub  4096R/5D3BA622  作成: 2014-06-22  満了: 無期限       利用法: E
[ unknown] (1). Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt;


pub  4096R/D66FD341  作成: 2014-06-22  満了: 無期限       利用法: SC
 主鍵の指紋: 25DA 5B96 99F1 32DB 74BD  2270 B5A5 86C7 D66F D341

     Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt;

本当にこの鍵にあなたの鍵“Kazuhiro NISHIYAMA &lt;zn mbf.nifty.com&gt;”で署名してよいですか
(B4222F7A)

本当に署名しますか? (y/N) y

次のユーザーの秘密鍵のロックを解除するには
パスフレーズがいります:“Kazuhiro NISHIYAMA &lt;zn mbf.nifty.com&gt;”
4096ビットRSA鍵, ID B4222F7A作成日付は2010-06-27


gpg&gt; save
[INFO] B5A586C7D66FD341 1 Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt; done.
[INFO] key 25DA5B9699F132DB74BD2270B5A586C7D66FD341 done.
Mail signature for Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt; to 'o-takashi sakamocchi.jp'? [Y/n]
%
</code></pre>

<p>```</p>

<h2>caff からのメールを受け取った相手のすべきこと</h2>

<p>暗号化されたメールが届くので、
対応する秘密鍵を使って復号してメールを確認します。
さらにその中にある署名を自分の鍵束にインポートしてキーサーバーに送信します。</p>

<p>caff のやり方はここでメールアドレスの到達性もチェックしているようなので、
署名した側はキーサーバーに送信する必要はなさそうです。
むしろそういうことをしないようにするために
<code>~/.caff/gnupghome</code> に独自の鍵束を用意しているように思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 85 回 関西 Debian 勉強会に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-22-kansai-debian-meeting.html"/>
    <updated>2014-06-22T13:43:06+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20140622" title="第 85 回 関西 Debian 勉強会">第 85 回 関西 Debian 勉強会</a>
に参加してきました。</p>

<p>そのときのメモです。
詳細は勉強会のページからリンクされている資料を参照してください。</p>

<!--more-->


<h2>Intro</h2>

<ul>
<li>MATE 1.8 が Debian に入ったという話

<ul>
<li><a href="https://www.debian.org/News/weekly/2014/10/" title="Debian Project News - June 9th, 2014">Debian Project News &ndash; June 9th, 2014</a></li>
</ul>
</li>
<li>Debian 6 の LTS (long term support) の話

<ul>
<li>全パッケージが対象というわけではない</li>
<li>たとえば rails とか chromium とかは対象外</li>
</ul>
</li>
<li>Berkeley DB を post jessie で外す予定

<ul>
<li>AGPL に変わったから</li>
</ul>
</li>
<li>事前課題発表と自己紹介

<ul>
<li>おすすめの IM</li>
<li>webwml-git の運用</li>
<li>web-mode.el (melpa にはある)</li>
</ul>
</li>
</ul>


<h2>「Linuxのドライバメンテナになった体験記」(担当：坂本)</h2>

<ul>
<li>質問から派生して残った疑問点

<ul>
<li>character device とは何か (block device との違いは何か)</li>
</ul>
</li>
</ul>


<h2>「Debian での systemd とのつきあい方」(担当：佐々木)</h2>

<p>状況確認コマンドいろいろのメモです。
一部のコマンドは自動で <code>$PAGER</code> を通してくれるようですが、
<code>PAGER=lv</code> の場合は <code>LV=-c</code> がないとエスケープシーケンスが解釈されなくて読みにくくなります。</p>

<ul>
<li><code>systemd-analyze</code></li>
<li><code>systemd-analyze blame</code></li>
<li><code>systemd-analyze plot &gt; systemd-analyze_plot.svg</code></li>
<li><code>systemctl list-dependencies</code></li>
<li><code>systemctl status</code></li>
<li><code>systemctl list-unit-files</code></li>
<li><code>systemctl list-units</code></li>
<li><code>sudo LV=-c journalctl</code></li>
<li><code>systemd-cgls</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian squeeze (6.0) LTS の使い方]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-06-squeeze-lts.html"/>
    <updated>2014-06-06T14:07:35+09:00</updated>
    <id>http://blog.n-z.jp/blog/squeeze-lts</id>
    <content type="html"><![CDATA[<p>OpenSSL の脆弱性
(<a href="http://ccsinjection.lepidum.co.jp/ja.html">CCS Injection</a>,<a href="https://security-tracker.debian.org/tracker/CVE-2014-0224">CVE-2014-0224</a>)
の修正が
<a href="https://lists.debian.org/debian-lts-announce/2014/06/msg00002.html">squeeze の LTS に入ったというアナウンス</a>
があったのに、
今まで通り使っている squeeze には修正が入らないと思って調べてみたところ、
<a href="https://wiki.debian.org/LTS/Using#Add_squeeze-lts_to_your_sources.list">apt-line の追加</a>
が必要でした。</p>

<!--more-->


<h2>追加する apt-line</h2>

<p>既存の <code>/etc/apt/sources.list</code> に</p>

<pre><code>deb http://ftp.jp.debian.org/debian squeeze main non-free contrib
deb-src http://ftp.jp.debian.org/debian squeeze main non-free contrib

deb http://security.debian.org/ squeeze/updates main contrib non-free
deb-src http://security.debian.org/ squeeze/updates main contrib non-free

# squeeze-updates, previously known as 'volatile'
deb http://ftp.jp.debian.org/debian squeeze-updates main contrib non-free
deb-src http://ftp.jp.debian.org/debian squeeze-updates main contrib non-free
</code></pre>

<p>という apt-line を設定したとすると、</p>

<pre><code>deb http://ftp.jp.debian.org/debian squeeze-lts main non-free contrib
deb-src http://ftp.jp.debian.org/debian squeeze-lts main non-free contrib
</code></pre>

<p>を <strong>追加</strong> します。</p>

<p>ネタ元の Debian Wiki に書いてあるように適切に使うには squeeze と squeeze security の apt-line も残した上で squeeze lts の apt-line を <strong>追加</strong> する必要があります。</p>

<h2>apt pinning を使っている時の注意点</h2>

<p><code>/etc/apt/apt.conf</code> で</p>

<pre><code>APT::Default-Release "squeeze";
</code></pre>

<p>のように設定している場合はコメントアウトするか</p>

<pre><code>APT::Default-Release "squeeze-lts";
</code></pre>

<p>に書き換える必要があります。</p>

<h2>更新の反映</h2>

<p>いつも通り <code>apt-get update</code> と <code>apt-get upgrade</code> で更新できます。</p>

<h2>サポート対象外のパッケージを調べる</h2>

<p><code>squeeze-lts</code> の apt-line を追加すると <code>debian-security-support</code> というパッケージがインストールできるようになります。</p>

<p><code>debian-security-support</code> パッケージをインストール中にサポート対象外のパッケージについての情報が表示されます。
インストール後は <code>check-support-status</code> で同じ内容が表示できます。</p>

<p>Ubuntu には <code>ubuntu-support-status</code> というコマンドがあるので、似たようなものが Debian にもできたということでしょうか。
<code>debian-security-support</code> パッケージは今のところ <code>sid</code> と <code>squeeze-lts</code> にだけあるようです。</p>

<h2>aptitude 検索パターンで LTS に収録されているパッケージ一覧</h2>

<p><code>aptitude search '~A squeeze-lts'</code> で <code>squeeze-lts</code> に収録されているパッケージ一覧が調べられます。</p>

<p>今のところ、</p>

<ul>
<li><code>chkrootkit</code></li>
<li><code>debian-security-support</code></li>
<li><code>gnutls</code> 関係</li>
<li><code>hello</code></li>
<li><code>openssl</code> 関係</li>
</ul>


<p>がありました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible で sources.list を変更したときに update する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-20-ansible-apt-update.html"/>
    <updated>2014-05-20T22:58:09+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-apt-update</id>
    <content type="html"><![CDATA[<p>ansible で sources.list を変更したときには
<code>apt-get update</code> して欲しいのですが、
毎回 update するのは無駄なので、
<code>cache_valid_time</code> も使いたいと思ったので対処しました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>クライアント側 ansible 1.6.1</li>
<li>サーバー側 Ubuntu 12.04</li>
</ul>


<h2>やり方</h2>

<p><code>register</code> で <code>template</code> モジュールの実行結果を受けて、
<code>changed</code> の場合は必ず update して、
<code>skipped</code> の場合は <code>cache_valid_time</code> で情報が古い場合だけ update するようにしました。</p>

<p></p>

<h2>```yaml tasks/apt.yaml</h2>

<ul>
<li>template: src=sources.list.{{ ansible_distribution }}.j2 dest=/etc/apt/sources.list owner=root group=root mode=0644
register: apt_sources_list</li>
<li>apt: update_cache=yes
when: apt_sources_list|changed</li>
<li>apt: update_cache=yes cache_valid_time=3600
when: apt_sources_list|skipped
```
</li>
</ul>


<h2>テンプレートの内容</h2>

<p>gathering facts で設定された <code>ansible_distribution_release</code> と
<code>vars</code> で別途設定した <code>apt_ubuntu_uri</code> と <code>apt_ubuntu_components</code> を
組み合わせて apt-line を作るようにしました。</p>

<p>Ubuntu をインストールした直後の sources.list では
components が別の行になっているものもあったのですが、
1 行にまとめました。</p>

<p>
```text templates/sources.list.Ubuntu.j2
deb {{ apt_ubuntu_uri }} {{ ansible_distribution_release }} {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb-src {{ apt_ubuntu_uri }} {{ ansible_distribution_release }} {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-updates {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb-src {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-updates {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}</p>

<h1>deb {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-backports {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}</h1>

<h1>deb-src {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-backports {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}</h1>

<p>deb <a href="http://security.ubuntu.com/ubuntu">http://security.ubuntu.com/ubuntu</a> {{ ansible_distribution_release }}-security {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb-src <a href="http://security.ubuntu.com/ubuntu">http://security.ubuntu.com/ubuntu</a> {{ ansible_distribution_release }}-security {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
```
</p>

<p><code>backports</code> は使っていなかったのでコメントアウトしていますが、
<code>deb-src</code> も使わないのならコメントアウトしておいても良さそうです。</p>

<h2><code>vars</code> の内容</h2>

<p>例として jaist ミラーを使うようにしました。</p>

<h2>```yaml vars/main.yml</h2>

<p>apt_ubuntu_uri: &ldquo;<a href="http://ftp.jaist.ac.jp/pub/Linux/ubuntu/">http://ftp.jaist.ac.jp/pub/Linux/ubuntu/</a>&rdquo;
apt_ubuntu_components:
&ndash; main
&ndash; restricted
&ndash; universe
&ndash; multiverse
```</p>
]]></content>
  </entry>
  
</feed>
