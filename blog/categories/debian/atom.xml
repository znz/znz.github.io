<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debian | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/debian/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-02-22T23:04:56+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第 80 回 関西 Debian 勉強会に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-01-26-kansai-debian-meeting.html"/>
    <updated>2014-01-26T14:05:18+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20140126">第 80 回 関西 Debian 勉強会</a>
に参加してきました。</p>

<p>今回は事前課題の発表で話が盛り上がって、その後の佐々木さんの話も盛り上がって長かったので、もくもくの会は少しだけでした。</p>

<p>事前課題で募集があったので、 LT もしました。</p>

<!--more-->


<h2>メモ</h2>

<p>以下 URL などのメモです。</p>

<ul>
<li>Debian で redmine を使う方法

<ul>
<li>stable を使う</li>
<li>gem2deb</li>
<li>deb パッケージの ruby は使わない</li>
</ul>
</li>
<li>UEFI のマシンでのインストールが大変という話</li>
<li><a href="http://www.docker.io/">docker</a> が <a href="http://packages.qa.debian.org/d/docker.io.html">docker.io</a> という名前で Debian に入っている

<ul>
<li>upstream 側の Ubuntu 用のパッケージ名は <a href="http://docs.docker.io/en/latest/installation/ubuntulinux/">lxc-docker</a></li>
</ul>
</li>
<li><a href="http://jenkins-ci.org/">Jenkins</a></li>
<li><a href="http://jenkins-debian-glue.org/">jenkins-debian-glue</a></li>
<li><a href="https://github.com/rcrowley/freight">freight</a> : A modern take on the Debian archive.</li>
</ul>


<h2>LT しました</h2>

<p>さくらの VPS の Debian wheezy で IPv6 設定をした話の LT 用スライドです。</p>

<ul>
<li><a href="https://github.com/znz/sakura-vps-debian-ipv6">https://github.com/znz/sakura-vps-debian-ipv6</a></li>
<li><a href="http://slide.rabbit-shocker.org/authors/znz/sakura-vps-debian-ipv6/">http://slide.rabbit-shocker.org/authors/znz/sakura-vps-debian-ipv6/</a></li>
<li><a href="https://speakerdeck.com/znz/sakurafalsevpsdeipv6she-ding">https://speakerdeck.com/znz/sakurafalsevpsdeipv6she-ding</a></li>
<li>(<code>slideshare.net</code> は 30分以上たっても Conversion in progress のままなので後で)</li>
</ul>


<p>LT ということで 5 分に収まるような軽い話をしました。
内容としては <a href="http://mla.n-z.jp/?debian-users:56921">debian-users:56921</a> に投稿した内容にちょっと説明を足しました。</p>

<h2>もくもくの会</h2>

<p>13時からと勘違いしていたので、早めに到着して、出発前から作成していた <code>rd2markdown</code> の Web アプリ作成の続きをしていました。
もくもくの時間でも引き続き作業していました。
これは後日公開します。</p>

<h2>まとめ</h2>

<p>今回の <a href="https://wiki.debian.org/KansaiDebianMeeting">関西Debian勉強会</a> は今までの発表をきくのがメインだったのを、変えていっている途中でもくもくの会など、今後どういう内容にしていくのが良いのか、試行錯誤中という感じでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dockerのカスタムベースイメージを作成する]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-13-docker-custom-base-image.html"/>
    <updated>2013-12-13T18:49:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/docker-custom-base-image</id>
    <content type="html"><![CDATA[<p>例などにある ubuntu の base image は
apt-line が archive.ubuntu.com になっていて、
apt-get install などが遅いです。</p>

<p>日本で使うのなら日本のミラーを使った方が良いので、
そういう base image を作ります。</p>

<p>base image はあまりカスタマイズせずに、
派生するイメージにDockerfile などを使って
カスタマイズをした方が望ましいのですが、
ほぼ必須のものを毎回インストールするのは無駄なので、
ついでに日本語 locale を入れるというカスタマイズもしておきます。</p>

<!--more-->


<h2>docker 向けのポイント</h2>

<p>最初に docker 向けのポイントをまとめておきます。</p>

<ul>
<li>最小限にするなら <code>--variant=minbase</code></li>
<li><code>--include=iproute</code> などで <code>iproute</code> パッケージを入れておかないとネットワークにつながらない</li>
<li><code>policy-rc.d</code> とか <code>initctl</code> を対処しておかないとパッケージのインストール時に変なことになるかも</li>
<li><code>dpkg</code> に <code>force-unsafe-io</code> を設定すると <code>apt</code> を高速化できる</li>
<li><a href="https://github.com/dotcloud/docker/blob/master/contrib/mkimage-debootstrap.sh">mkimage-debootstrap.sh</a> をそのまま使う場合も日本のミラーを指定する方が良い</li>
</ul>


<h2>base image の作り方</h2>

<p>公式ドキュメントの
<a href="http://docs.docker.io/en/latest/use/baseimages/">Base Image Creation</a>
を参考にして、基本は
<a href="https://github.com/dotcloud/docker/blob/master/contrib/mkimage-debootstrap.sh">mkimage-debootstrap.sh</a>
の手順を使います。</p>

<p>カスタマイズのため、手順を追いかけるだけで直接は使いません。</p>

<h2>debootstrap の実行</h2>

<p>最初は以下のように <code>/tmp/wheezy64</code> などの適当な場所に
<code>debootstrap</code> で <code>chroot</code> 環境を作成します。
proxy 環境なら <code>sudo http_proxy=$http_proxy debootstrap ...</code>
のように指定すれば良いようです。</p>

<p>Debian での例:
<code>
 sudo debootstrap --verbose --variant=minbase --include=iproute --arch=amd64 wheezy /tmp/wheezy64 http://cdn.debian.or.jp/debian
</code></p>

<p>Ubuntu での例:
<code>
 sudo debootstrap --verbose --variant=minbase --arch=amd64 precise /tmp/precise64 http://ftp.jaist.ac.jp/pub/Linux/ubuntu/
</code></p>

<h3>variant</h3>

<p><code>variant</code> で <code>minbase</code> を指定するとインストールされるパッケージが減って、
本当に最小限の環境になります。
具体的には <code>Essential: yes</code> のパッケージ
( <code>aptitude search '~E'</code> または <code>aptitude search '?essential'</code> で一覧)
と <code>apt</code> がインストールされます。</p>

<p><code>buildd</code> という <code>variant</code> もあって <code>minbase</code> に加えて
<code>build-essential</code> が追加でインストールされるようなので、
CI 環境用などの base image なら <code>--variant=buildd</code> の方が
良いかもしれません。</p>

<p>デフォルトだと <code>Priority</code> が <code>imporant</code> のパッケージ
( <code>aptitude search '~pimportant</code> または <code>aptitude search '?priority(important)' で一覧)
がインストールされるようです。
インストールされるパッケージの差分は
</code>aptitude search &lsquo;~pimportant!~E`
で調べられます。</p>

<h3>include</h3>

<p>元の <code>mkimage-debootstrap.sh</code> では <code>iproute,iputils-ping</code> と指定してますが、
<code>iputils-ping</code> は必須ではないのでここでは省略しています。</p>

<p><code>iproute</code> は docker 環境では必須です。
このパッケージに含まれる <code>ip</code> コマンドが入っていないとネットワークにつながりません。</p>

<p><code>iproute</code> パッケージは <code>Priority</code> が <code>optional</code> なので
普通に <code>debootstrap</code> を実行しても入らないので、
注意が必要です。</p>

<h3>その他の引数</h3>

<p>arch の指定とか suite の指定とか生成先ディレクトリの指定とか、
ミラーの指定とかは見てわかる通りです。</p>

<h2>docker 向けのカスタマイズ</h2>

<p>次に生成されたディレクトリの中で
<code>mkimage-debootstrap.sh</code>
にデフォルト (<code>-d</code> オプションが指定されなかったとき) の処理をしていきます。</p>

<h3>policy-rc.d</h3>

<p>ファイルの作成方法は何でも良いのですが、
exit status で 101 を返す <code>usr/sbin/policy-rc.d</code> を作成して、
パッケージのインストールやアップデートなどで init スクリプトが
実行されないようにします。</p>

<p>ちなみに
<code>$'...'</code> は bash に <code>\n</code> を解釈させるための書き方なので、
<code>'...'</code> や <code>"..."</code> の間違いではありません。</p>

<p><code>
 echo $'#!/bin/sh\nexit 101' | sudo tee usr/sbin/policy-rc.d &gt; /dev/null
 sudo chmod +x usr/sbin/policy-rc.d
</code></p>

<p><code>policy-rc.d</code> については <code>invoke-rc.d</code> の man を参照してください。</p>

<h3>sbin/initctl</h3>

<p>initctl を実行してしまう upstart スクリプトがあるらしく、
その対処もします。</p>

<p>policy-rc.d は存在しなかったので、作成するだけでしたが、
<code>sbin/initctl</code> はパッケージ管理のファイルとして存在するので
<code>dpkg-divert</code> でパッケージの更新などで上書きされないようにしています。</p>

<p><code>
 sudo chroot . dpkg-divert --local --rename --add /sbin/initctl
 sudo ln -sf /bin/true sbin/initctl
</code></p>

<h3>パッケージのキャッシュの削除</h3>

<p><code>
 sudo chroot . apt-get clean
</code></p>

<p>を実行して不要な deb ファイルなどを削除して、
イメージのサイズを削減しています。</p>

<p>後で独自カスタマイズのところでパッケージをインストールして、
その後でまた実行するので、その場合はここでは実行しなくてもかまいません。</p>

<h3>apt の高速化など</h3>

<p><code>mkimage-debootstrap.sh</code> のコメントには
<code>dpkg</code> がパッケージの展開後に <code>sync()</code> を呼んでいるのが
原因で無駄に遅くなっているので、
強制的に <code>sync()</code> を呼ばなくさせると書いています。</p>

<p><code>
 echo 'force-unsafe-io' | sudo tee etc/dpkg/dpkg.cfg.d/02apt-speedup &gt; /dev/null
</code></p>

<p>それから、 deb ファイルを残さないようにして image ファイルが大きくならないようにしています。</p>

<p><code>
 echo 'DPkg::Post-Invoke {"/bin/rm -f /var/cache/apt/archives/*.deb || true";};' | sudo tee etc/apt/apt.conf.d/no-cache &gt; /dev/null
</code></p>

<h3>元に戻す方法</h3>

<p><code>mkimage-debootstrap.sh</code> のコメントに
元に戻す方法も書いてありました。
<code>dpkg-divert</code> 以外はファイルを消すだけです。</p>

<p><code>
 rm /usr/sbin/policy-rc.d
 rm /sbin/initctl; dpkg-divert --rename --remove /sbin/initctl
 rm /etc/dpkg/dpkg.cfg.d/02apt-speedup
 rm /etc/apt/apt.conf.d/no-cache
</code></p>

<h3>apt-line の変更</h3>

<p><code>etc/apt/sources.list</code> をみると</p>

<p><code>
 deb http://cdn.debian.or.jp/debian wheezy main
</code></p>

<p>だけになっているので、 <code>updates</code> と <code>security</code> を追加します。</p>

<p><code>mkimage-debootstrap.sh</code> もデフォルト
(<code>-d</code> も <code>-s</code> も指定されていないとき)
の動作では追加します。</p>

<p>この例では以下のようにしました。</p>

<p>debian での例:
<code>
 deb http://cdn.debian.or.jp/debian wheezy main
 deb http://cdn.debian.or.jp/debian wheezy-updates main
 deb http://security.debian.org/ wheezy/updates main
</code></p>

<p>ubuntu での例:
<code>
 deb http://ftp.jaist.ac.jp/pub/Linux/ubuntu precise main universe
 deb http://ftp.jaist.ac.jp/pub/Linux/ubuntu precise-updates main universe
 deb http://ftp.jaist.ac.jp/pub/Linux/ubuntu precise-security main universe
</code></p>

<p>main 以外を追加したい場合はここで追加しておくと良さそうです。
<code>mkimage-debootstrap.sh</code> でも ubuntu の場合は <code>universe</code> が追加されていました。</p>

<h2>独自カスタマイズ</h2>

<p>ここから独自カスタマイズになります。</p>

<h3>アップデート実行</h3>

<p>base image にセキュリティアップデートも入れておきたいなら、
更新しておきます。</p>

<p><code>
 sudo chroot . apt-get update
 sudo chroot . apt-get dist-upgrade
</code></p>

<h3>日本語 locale 追加</h3>

<p>debian の場合は
別環境で <code>debconf-get-selections</code> で調べておいた設定を使って、
<code>debconf-set-selections</code> で設定を入れておいて
<code>DEBIAN_FRONTEND=noninteractive</code> でインストールします。</p>

<p><code>
 echo locales locales/locales_to_be_generated multiselect ja_JP.EUC-JP EUC-JP, ja_JP.UTF-8 UTF-8 | sudo chroot . debconf-set-selections
 echo locales locales/default_environment_locale select ja_JP.UTF-8 | sudo chroot . debconf-set-selections
 sudo chroot . env DEBIAN_FRONTEND=noninteractive apt-get install locales
</code></p>

<p>ubuntu の場合は
<code>language-pack-ja</code> パッケージを入れても良いのですが、
不要なパッケージを入れるのが嫌なら <code>locale-gen</code> コマンドで
生成しても良いです。</p>

<p><code>
 sudo chroot . locale-gen ja_JP.UTF-8
 sudo chroot . locale-gen ja_JP.EUC-JP
</code></p>

<h3>パッケージのキャッシュの削除</h3>

<p>カスタマイズが終わったら clean を実行しておきます。
<code>etc/apt/apt.conf.d/no-cache</code> を作成していれば不要かもしれません。</p>

<p><code>
 sudo chroot . apt-get clean
</code></p>

<h2>イメージ作成と取り込み</h2>

<h3>tarball 作成</h3>

<p><code>mkimage-debootstrap.sh</code> は <code>-t</code> オプションが指定されたときに
docker のイメージではなく tarball を作成します。
直接取り込むならこの手順は不要です。</p>

<p>作成方法としては
最初に <code>touch</code> で一般ユーザー権限のファイルになるようにしておいて、
中身は <code>root</code> 権限で入れるようにしています。</p>

<p><code>
 touch /tmp/wheezy64.tar.xz
 sudo tar --numeric-owner -caf /tmp/wheezy64.tar.xz .
</code></p>

<h3>イメージ取り込み</h3>

<p><code>sudo docker</code> は root 権限が不要な設定にいていれば <code>docker</code> だけでかまいません。</p>

<p><code>mkimage-debootstrap.sh</code> は安定版や LTS に <code>latest</code> タグを設定したり、
<code>etc/debian_version</code> や <code>etc/lsb-release</code> をみて
タグを設定しているので、必要に応じて設定しておきます。</p>

<p>イメージ名としては「ユーザー名/レポジトリ名」という形式が推奨されていますが、
ここでは例として「ユーザー名」の部分は「local」にしておきます。
そして「レポジトリ名」としては日本語 locale を入れたということで
<code>-ja</code> を付けました。
日本のミラーを使っているということで <code>-ja-jp</code> にしても良かったのですが、
長かったので、 <code>-ja</code> だけにしました。</p>

<p>Debian での例:
<code>
 sudo tar --numeric-owner -c . | sudo docker import - local/debian-ja:wheezy
 sudo docker tag local/debian-ja:wheezy local/debian-ja:latest
 sudo docker tag local/debian-ja:wheezy local/debian-ja:7.2
</code></p>

<p>Ubuntu での例:
<code>
 sudo tar --numeric-owner -c . | sudo docker import - local/ubuntu-ja:precise
 sudo docker tag local/ubuntu-ja:precise local/ubuntu-ja:latest
 sudo docker tag local/ubuntu-ja:precise local/ubuntu-ja:12.04
</code></p>

<h2>まとめ</h2>

<p><a href="https://github.com/dotcloud/docker/blob/master/contrib/mkimage-debootstrap.sh">mkimage-debootstrap.sh</a>
で何をやっているのか、
同じことを手動でやるのはどうするのかということを説明しました。</p>

<p>最初のポイントにも書きましたが
<code>mkimage-debootstrap.sh</code>
を直接使うのも良いですが、
最低限ミラーを指定するのがおすすめです。</p>

<p>目的によっては <code>variant</code> を変更したり、
<code>include</code> でインストールするパッケージを増やしておくだけでも
便利になると思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mailmanでDKIM-Signatureヘッダを削除する]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-11-mailman-strip-dkim-signature.html"/>
    <updated>2013-12-11T12:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/mailman-strip-dkim-signature</id>
    <content type="html"><![CDATA[<p>fml から移行した mailman で Subject の書き換える設定をしていると、
元の <code>DKIM-Signature</code> が残っていると受け取った側で
メールを改ざんしているのと区別がつかないので、
<code>DKIM</code> の検証に失敗してしまいます。</p>

<p>そこで mailman で <code>DKIM-Signature</code> を削除するように設定しました。</p>

<!--more-->


<h2>mailman の設定</h2>

<p><code>REMOVE_DKIM_HEADERS</code> という設定があったので、
<code>/etc/mailman/mm_cfg.py</code> の末尾に</p>

<p><code>
REMOVE_DKIM_HEADERS = Yes
</code></p>

<p>という設定を追加して、
<code>sudo service mailman restart</code>
しました。</p>

<p><code>mm_cfg.py</code> での設定なので、
ML 個別の設定ではなく
mailman 全体の設定になるようです。</p>

<h2>参考</h2>

<p><a href="https://bugs.launchpad.net/mailman/+bug/557493">Bug #557493 “Mailman must not strip DKIM-Signature headers” : Bugs : GNU Mailman</a>
という話があって、設定が追加されたようです。</p>

<p><code>mm_cfg.py</code> で設定できる項目の一覧は
<code>/usr/lib/mailman/Mailman/Defaults.py</code>
にあります。
このファイルを良く見ていれば、もっと早くこの設定項目に気付けたのかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[debian-goodiesのcheckrestartで再起動が必要なプロセスを調べる]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-06-checkrestart.html"/>
    <updated>2013-12-06T14:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/checkrestart</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/advent-calendar/2013/distro-pm">ディストリビューション/パッケージマネージャー Advent Calendar 2013</a> の 12/6 のところが空いていたので、後から書いています。</p>

<p>この投稿は
<a href="http://qiita.com/advent-calendar/2013/distro-pm">ディストリビューション/パッケージマネージャー Advent Calendar 2013</a>
の6日目の記事です。</p>

<!--more-->


<h2>debian-goodies パッケージ</h2>

<p><a href="http://packages.qa.debian.org/d/debian-goodies.html">debian-goodies パッケージ</a>
には <code>/usr/bin/</code> に複数のコマンドと <code>/usr/sbin/checkrestart</code> が入っています。</p>

<p><code>/usr/bin/</code> のコマンドについては
<a href="http://uwabami.junkhub.org/log/20131204.html#p01">uwabami さんの記事</a>
を参照してください。</p>

<p>ここでは <code>checkrestart</code> を紹介します。</p>

<h2>checkrestart</h2>

<p>ライブラリのパッケージが更新されたときに、
特にセキュリティアップデートだと
そのライブラリを使っているデーモンなども再起動したいと
思うことが多いと思います。</p>

<p>そういうときに <code>checkrestart</code> コマンドを使うと
どのプロセスが置き換えられたライブラリを使っているか
調べることが出来ます。</p>

<h2>使用例 1</h2>

<p>例えば init スクリプトから起動している <code>whoopsie</code>
の再起動が必要なときは以下のようなメッセージが出てくるので、
<code>sudo /etc/init.d/whoopsie restart</code> とか
<code>sudo service whoopsie restart</code> とかで再起動すれば良いと思います。</p>

<p>```
$ sudo checkrestart
Found 1 processes using old versions of upgraded files
(1 distinct program)
(1 distinct packages)</p>

<p>Of these, 1 seem to contain init scripts which can be used to restart them:
The following packages seem to have init scripts that could be used
to restart them:
whoopsie:</p>

<pre><code>    953     /usr/bin/whoopsie
</code></pre>

<p>These are the init scripts:
/etc/init.d/whoopsie restart
```</p>

<h2>使用例 2</h2>

<p>デーモン以外などで起動しているプロセスが使っているファイルが置き換えられた場合、以下のように対応する init script がわからないというメッセージが出てきます。</p>

<p>```
$ sudo checkrestart
Found 1 processes using old versions of upgraded files
(1 distinct program)
(1 distinct packages)
These processes do not seem to have an associated init script to restart them:
ruby1.8:</p>

<pre><code>    906     /usr/bin/ruby1.8
</code></pre>

<p>```</p>

<p>こういうときは
<code>sudo ls -l /proc/906</code> や
<code>sudo cat -v /proc/906/cmdline</code>
などで対応するプログラムを調べて再起動します。</p>

<h2>使用例 3</h2>

<p>再起動が必要なものがみつからなかった場合は以下のようなメッセージが出てきます。</p>

<p><code>
$ sudo checkrestart
Found 0 processes using old versions of upgraded files
</code></p>

<h2>まとめ</h2>

<p>今回は <code>debian-goodies</code> の中から <code>checkrestart</code> を紹介しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[aptitude検索パターンの紹介]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-04-aptitude-search-pattern.html"/>
    <updated>2013-12-04T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/aptitude-search-pattern</id>
    <content type="html"><![CDATA[<p>Debian や Ubuntu のパッケージのインストールなどで
コマンドライン操作では <code>apt-get</code> や <code>aptitude</code>
を使いますが、
ここでは
<code>apt-get</code> では出来ない <code>aptitude</code>
の便利な使い方を紹介します。</p>

<p>この投稿は
<a href="http://qiita.com/advent-calendar/2013/distro-pm">ディストリビューション/パッケージマネージャー Advent Calendar 2013</a>
の4日目の記事です。</p>

<!--more-->


<h2>残ってしまった設定ファイルの削除</h2>

<p>deb パッケージのアンインストールは <code>remove</code> と <code>purge</code> の二種類があって、
<code>purge</code> すれば設定ファイルまで消えるのですが、
<code>remove</code> だと設定ファイルは残ってしまいます。</p>

<p>普段は
<code>apt-get purge hoge</code>
や
<code>aptitude purge hoge</code>
で削除していたとしても、
依存関係で自動インストールされたものが
自動削除される時は <code>remove</code> になってしまって
設定ファイルが残ってしまいます。</p>

<p>そういうときに <code>aptitude</code> だと</p>

<p><code>
aptitude purge '~c'
</code></p>

<p>で設定ファイルだけ残ったパッケージを一気に <code>purge</code> できます。</p>

<p>この <code>~c</code> というのが <code>aptitude</code> の search term の一種で、
削除されていて <code>purge</code> (完全削除) されていない、
つまり設定ファイルがシステム上に残っているパッケージという意味になります。</p>

<h2>クオートの必要性</h2>

<p><code>''</code> でクオートしているのはシェルの展開を抑制するためで、
必須ではないのですが、
環境によって意図しない指定になることを避けるために、
常に <code>''</code> でくくっておくことをお勧めします。
ちなみに、この例だと <code>c</code> というユーザーが存在した場合に
そのホームディレクトリに展開されてしまいます。</p>

<h2>長い形式と短い形式</h2>

<p>ほとんどの search term は短い形式 (short form) と
長い形式 (long form) があり、
<code>~c</code> が短い形式で対応する長い形式は <code>?config-files</code>
になります。
つまり</p>

<p><code>
aptitude purge '?config-files'
</code></p>

<p>でも同じ意味になります。</p>

<h2>検索パターンの確認</h2>

<p><code>aptitude search</code> でも <code>aptitude purge</code> でも <code>aptitude install</code> でも
同じように使えるので、
<code>aptitude search</code> で確認してから <code>aptitude purge</code> するとか、
<code>aptitude install</code> するという使い方も出来ます。</p>

<h2>Search Term reference</h2>

<p>search term の一覧は <code>aptitude-doc-ja</code> パッケージを入れて参照するか、
<a href="http://aptitude.alioth.debian.org/doc/ja/ch02s04s05.html">Search term reference</a>
などを参照してください。</p>

<h2>他によく使っている search term</h2>

<p>他によく使っているものとしては、</p>

<p><code>
aptitude search '~U'
</code></p>

<p>でアップデート対象のパッケージ一覧を見たり、</p>

<p><code>
aptitude purge '~i~n 3.2.0-2[1-3]'
</code></p>

<p>のような指定で古いカーネル関連のパッケージを削除したりするのをよく使います。
<code>~i</code> がインストール済みのものという意味で、
<code>~n</code> はパッケージ名の検索で引数は正規表現なのですが、
ここでは他に間違ってマッチしそうなものはないため、
<code>.</code> のエスケープは省略してしまうことが多いです。
<code>linux-.*</code> の部分も指定しなくても充分絞り込めるので
省略してしまっています。</p>

<p><code>~i</code> は引数をとらなくて、デフォルトはパッケージ名の検索なので、
<code>~i 3.2.0-2[1-3]</code> と省略することも出来ます。</p>

<h2>応用例</h2>

<h3>別 apt-line で入れたパッケージの検索など</h3>

<p>たとえば Ubuntu なら</p>

<p><code>
aptitude search '~i!~Oubuntu'
</code></p>

<p>のように Origin が Ubuntu 以外のパッケージという検索で
Ubuntu の apt-line 以外から入れたパッケージが検索できます。</p>

<p>昔から使い続けている Debian なら</p>

<p><code>
aptitude search '~i!~Odebian'
</code></p>

<p>で他の apt-line からインストールしたものに加えて、
昔の Debian にパッケージが存在して、
今の Debian にはもう収録されていないパッケージが残っているものも
探すことも出来ます。</p>

<h3>exim から postfix への入れ替え</h3>

<p><code>aptitude install</code> や <code>aptitude purge</code> で
パッケージを指定する時に末尾に <code>_</code> を付けると <code>purge</code> できたり、
<code>+</code> を付けるとインストールできたりします。</p>

<p>これらを組み合わせると <code>postfix+</code> でインストールしつつ、
名前に <code>exim</code> を含むパッケージを <code>purge</code> することで
<code>default-mta</code> や <code>mail-transport-agent</code> に依存しているパッケージの
依存関係が満たせないと言われずにパッケージの入れ替えができます。</p>

<p><code>
sudo aptitude purge '~i~nexim' postfix+
</code></p>

<h3>バグがあったパッケージのインストールを止めたい</h3>

<p>Debian の unstable や testing を使っていて
<code>apt-listbugs</code> を入れていると
インストール前にこのパッケージの
このバージョンは入れない方が
良さそうということがありますが、
同じソースパッケージで複数のパッケージに分かれていると
指定が面倒なことがあります。</p>

<p>たとえば <code>sysv-rc</code> でバグがあった時に
<code>apt-get source sysv-rc</code> でソースパッケージ名を調べて、
対象パッケージを確認した上で
以下のように
<code>aptitude forbid-version</code>
でそのバージョンはインストールしない、
ということが出来ます。</p>

<p><code>
aptitude search '?installed ?source-package(sysvinit)'
sudo aptitude forbid-version '?installed ?source-package(sysvinit)'
</code></p>

<h3>その他いろいろ</h3>

<p>最後にその他のいろいろな例を列挙しておきます。
詳しい説明は <code>aptitude</code> のリファレンスなどを参照してください。</p>

<ul>
<li><code>aptitude search '?maintainer(uwabami)</code> : メンテナで探す</li>
<li><code>aptitude search '~t minimal'</code> : タスクでインストールされるパッケージ</li>
<li><code>aptitude search '~n^lsb'</code> : 名前が lsb で始まるパッケージ</li>
<li><code>aptitude search '?section(metapackages)'</code> : メタパッケージ</li>
<li><code>aptitude search '?priority(important)'</code> : 優先度が重要のパッケージ</li>
<li><code>aptitude search '?provides(mail-transport-agent)'</code> : <code>mail-transport-agent</code> を提供しているパッケージ</li>
</ul>


<h2>まとめ</h2>

<p>今回は <code>aptitude</code> の検索パターンの便利な使い方を紹介しました。</p>

<p>今まで <code>apt-get</code> や <code>apt-cache</code> しか使っていなかったとか、
<code>aptitude</code> を使っていても単純にパッケージ名を指定しかしたことがなかったとか
いう人は <code>aptitude purge '~c'</code> だけでも試してみると良いのではないでしょうか。</p>
]]></content>
  </entry>
  
</feed>
