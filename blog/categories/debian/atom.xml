<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debian | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/debian/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2016-03-22T14:16:14+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[さくらの VPS の Debian wheezy を jessie にあげた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-03-22-wheezy-to-jessie.html"/>
    <updated>2016-03-22T12:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/wheezy-to-jessie</id>
    <content type="html"><![CDATA[<p>Debian 6 &ldquo;Squeeze&rdquo; の <a href="https://wiki.debian.org/LTS/Using">LTS</a> が終わって Debian 7 &ldquo;Wheezy&rdquo; もそろそろ Debian 8 &ldquo;Jessie&rdquo; にあげた方が良さそうな気がしてきたので、
<a href="http://vps.sakura.ad.jp/">さくらの VPS</a> で使っている Debian 環境を Debian 7.9 から Debian 8.3 にあげてみました。</p>

<!--more-->


<h2>事前準備</h2>

<p><a href="https://www.debian.org/releases/jessie/amd64/release-notes/ch-upgrading.ja.html" title="第4章 Debian 7 (wheezy) からのアップグレード">第4章 Debian 7 (wheezy) からのアップグレード</a> などを読んで事前に注意点を確認しておきました。</p>

<h3>古いパッケージの削除</h3>

<p>Squeeze から残っているパッケージを確認するため</p>

<pre><code>aptitude search '~i!~Odebian'
</code></pre>

<p>で現在インストールできないパッケージを調べました。</p>

<p><code>pg_upgradecluster</code> コマンドで移行したのに残したままだった postgresql-8.4 と postgresql-client-8.4 を purge しました。</p>

<h3>scponly</h3>

<p>scponly を設定しているユーザーがいたのですが、 wheezy で既にパッケージがなくなっていたことに気づいたので、
「scponly wheezy」で検索して出てきた
<a href="http://chxor.chxo.com/post/74647790171/how-to-restrict-linux-users-to-only-sftp-without">http://chxor.chxo.com/post/74647790171/how-to-restrict-linux-users-to-only-sftp-without</a>
を参考にして設定を移行しました。</p>

<p>まず <code>/home/hoge/</code> 以下の bin dev etc usr を削除しました。</p>

<p>次に <code>sftponly</code> グループを追加して、そのグループに該当ユーザーを追加しました。</p>

<pre><code>% sudo usermod -a -G sftponly hoge
usermod: グループ 'sftponly' は存在しません
zsh: exit 6     sudo usermod -a -G sftponly hoge
% sudo addgroup sftponly
グループ `sftponly' (グループ ID 1001) を追加しています...
完了。
% sudo usermod -a -G sftponly hoge
</code></pre>

<p><code>/etc/ssh/sshd_config</code> の設定を変更しました。
関連するところだけ抜き出すと以下のような変更をしました。</p>

<pre><code>-Subsystem sftp /usr/lib/openssh/sftp-server
+#Subsystem sftp /usr/lib/openssh/sftp-server
+Subsystem sftp internal-sftp

+# sftponly users, chrooted
+Match group sftponly
+ChrootDirectory /home/%u
+AllowTcpForwarding no
+X11Forwarding no
+ForceCommand internal-sftp
</code></pre>

<p><code>sudo service sshd restart</code> で設定を反映して、 sftp コマンドで接続して put や rm ができるのを確認しました。</p>

<h3>その他古いパッケージの削除</h3>

<p><code>sudo aptitude purge '~i!~Odebian'</code> で古いパッケージを削除しました。</p>

<pre><code>%  sudo aptitude purge '~i!~Odebian'
以下のパッケージが削除されます:
  doc-linux-text{p} libbind9-60{p} libboost-iostreams1.42.0{p} libdb4.6{p} libdb4.7{p}
  libdb4.8{p} libdns69{p} libevent-1.4-2{p} libisc62{p} libisccc60{p} libisccfg62{p}
  libkadm5clnt-mit7{p} libkadm5srv-mit7{p} libkdb5-4{p} liblwres60{p} liblzma2{p}
  libssl0.9.8{p} libtokyocabinet8{p}
更新: 0 個、新規インストール: 0 個、削除: 18 個、保留: 0 個。
0  バイトのアーカイブを取得する必要があります。展開後に 20.4 M バイトのディスク領域が解放されます。
先に進みますか? [Y/n/?]
</code></pre>

<p><code>/etc/init.d</code> に余計なファイルが残っていると問題がおきるかもしれないので <code>sudo aptitude purge '~c'</code> で設定だけ残っているパッケージも purge しておきました。</p>

<pre><code>%  sudo aptitude purge '~c'
[sudo] password for adminuser:
以下のパッケージが削除されます:
  defoma{p} libept1{p} libexiv2-9{p} libgmp3c2{p} libgs8{p} libgsf-1-114{p} libgtk2.0-0{p}
  libgtk2.0-common{p} libmagickcore3{p} libmagickwand3{p} libmysqlclient16{p} libnl1{p}
  libopenipmi0{p} libpango1.0-common{p} libprotobuf6{p} libserf-0-0{p} libxcb-render-util0{p}
  libxcomposite1{p} libxcursor1{p} libxdamage1{p} libxfixes3{p} libxi6{p} libxinerama1{p}
  libxrandr2{p} mysql-server-5.1{p} odbcinst{p} odbcinst1debian2{p} php5-suhosin{p}
  update-inetd{p} x-ttcidfont-conf{p}
更新: 0 個、新規インストール: 0 個、削除: 30 個、保留: 0 個。
0  バイトのアーカイブを取得する必要があります。展開後に 0  バイトのディスク領域が新たに消費されます
。
先に進みますか? [Y/n/?]
</code></pre>

<h3>sudo find /etc -name &lsquo;<em>.dpkg-</em>&rsquo;</h3>

<p>移行時の設定マージ作業が途中で残っていたファイルがあったので、 <code>sudo find /etc -name '*.dpkg-*'</code> で探して必要に応じて設定をマージして <code>*.dpkg-old</code> や <code>*.dpkg-dist</code> は削除しておきました。</p>

<h3>プロセス一覧の確認</h3>

<p>pstree などでプロセス一覧をみて、アップグレード時に問題が起きそうなコマンドに目星をつけておきました。
一番の大物は apache 2.2 系から apache 2.4 系だと思いました。
slapd は 2.4.31-2+deb7u1 から 2.4.40+dfsg-1+deb8u2 でバージョン番号の変更も少なく互換性も高そうなので、問題はおきなさそうだと思いました。(実際大丈夫でした。)</p>

<h2>apt-line の変更</h2>

<p>コメントアウトされていない部分の wheezy を jessie に置き換えました。</p>

<pre><code>--- a/apt/sources.list
+++ b/apt/sources.list
@@ -4,18 +4,18 @@

 #deb cdrom:[Debian GNU/Linux 6.0.1a _Squeeze_ - Official amd64 NETINST Binary-1 20110320-15:00]/ wheezy main

-deb http://ftp.jp.debian.org/debian wheezy main non-free contrib
-deb-src http://ftp.jp.debian.org/debian wheezy main non-free contrib
+deb http://ftp.jp.debian.org/debian jessie main non-free contrib
+deb-src http://ftp.jp.debian.org/debian jessie main non-free contrib

-deb http://security.debian.org/ wheezy/updates main contrib non-free
-deb-src http://security.debian.org/ wheezy/updates main contrib non-free
+deb http://security.debian.org/ jessie/updates main contrib non-free
+deb-src http://security.debian.org/ jessie/updates main contrib non-free

 # wheezy-updates, previously known as 'volatile'
-deb http://ftp.jp.debian.org/debian wheezy-updates main contrib non-free
-deb-src http://ftp.jp.debian.org/debian wheezy-updates main contrib non-free
+deb http://ftp.jp.debian.org/debian jessie-updates main contrib non-free
+deb-src http://ftp.jp.debian.org/debian jessie-updates main contrib non-free

-deb http://ftp.jp.debian.org/debian wheezy-backports main contrib non-free
-deb-src http://ftp.jp.debian.org/debian wheezy-backports main contrib non-free
+deb http://ftp.jp.debian.org/debian jessie-backports main contrib non-free
+deb-src http://ftp.jp.debian.org/debian jessie-backports main contrib non-free

 #deb http://ftp.jp.debian.org/debian wheezy-lts main non-free contrib
 #deb-src http://ftp.jp.debian.org/debian wheezy-lts main non-free contrib
</code></pre>

<h2>upgrade, dist-upgrade</h2>

<p><a href="https://www.debian.org/releases/jessie/amd64/release-notes/ch-upgrading.ja.html#upgradingpackages" title="4.4. パッケージのアップグレード">4.4. パッケージのアップグレード</a> に以前は <code>aptitude</code> が推奨されていたこともあったが、今は <code>apt-get</code> がおすすめというようなことが書いてあったので、 <code>apt-get</code> で upgrade しました。</p>

<p>postgresql はまた /usr/share/doc/postgresql-common/README.Debian.gz をみて <code>pg_upgradecluster</code> が必要だと思いました。</p>

<p><code>Configuring libc6:amd64</code> のときに apache2 の restart に失敗しましたが、認証周りなどの設定の書き方が変わった影響だろうと思って、後で直せばいいということで気にせず進みました。</p>

<p>その他は特に問題なく dist-upgrade 自体は終わりました。</p>

<h2>apache2 の設定調整</h2>

<p><code>/etc/apache2/sites-available/*</code>, <code>/etc/apache2/sites-enabled/*</code> の <code>.conf</code> 化などは upgrade 前に作業しておけば停止時間が短くて済ませられたのに、と後から気付きました。</p>

<h3>認証・認可設定の変更</h3>

<p><code>/</code> はアクセス不可で <code>DocumentRoot</code> を個別にアクセス許可していたので、</p>

<pre><code>Order allow,deny
Allow from all
</code></pre>

<p>を</p>

<pre><code>Require all granted
</code></pre>

<p>に変更して回りました。</p>

<h3>mod_python</h3>

<p>apache の error.log を見ると</p>

<pre><code>The mod_python module can not be used on conjunction with mod_wsgi 4.0+. Remove the mod_python module from the Apache configuration.
</code></pre>

<p>というエラーが出ていたので、 <code>libapache2-mod-python</code> を purge したら apache2 が起動しました。
しかし後で <code>trac</code> で使っていたのに気付いたので、入れ直して代わりに <code>libapache2-mod-wsgi</code> の方を purge しました。</p>

<h3>.conf 化</h3>

<p>設定ファイルに <code>.conf</code> が必須化されていたので、 <code>site-available</code> のファイルを <code>hoge.example.com</code> から <code>hoge.example.com.conf</code> のようにに改名して <code>a2ensite</code> しなおしました。</p>

<p><code>conf.d</code> も available と enabled に仕組みが変わっていたので、
<code>/etc/apache2/conf.d/passenger.conf</code> も <code>conf-available</code> に移動して <code>a2enconf</code> しました。</p>

<h3>passenger-install-apache2-module</h3>

<p><code>sudo apache2ctl configtest</code> で起動しない原因を調べてみると、エラーメッセージを記録し忘れたのですが、<code>passenger</code> がリンクエラーで起動しないということになっていたので、 <code>passenger-install-apache2-module</code> を実行し直しました。</p>

<p>初回は開発用パッケージが足りないということで出てきたメッセージに従い <code>sudo apt-get install apache2-threaded-dev</code> でインストールして再実行して解決しました。 <code>apache2-dev</code> パッケージが入りました。</p>

<p>wheezy のときは <code>apache2-prefork-dev</code> パッケージを入れていたのですが、自動移行はされなかったようです。</p>

<h3>SSL 関連</h3>

<p><code>SSLCertificateChainFile</code> を指定していたところがあったので、 <code>SSLCertificateFile</code> に結合した証明書を指定するように移行しました。</p>

<h3>NameVirtualHost</h3>

<p><code>NameVirtualHost</code> を指定していたところを削除しました。</p>

<h2>trac</h2>

<p>trac のプロジェクトごとのページを開くと</p>

<pre><code>Error

TracError: The Trac Environment needs to be upgraded.

Run "trac-admin /srv/trac/fprog.org/testproject upgrade"
</code></pre>

<p>というメッセージが出ていたので、その通りに実行しました。</p>

<pre><code>% sudo trac-admin /srv/trac/fprog.org/testproject upgrade
Warning: Detected setuptools version 5.5.1. The environment variable 'PKG_RESOURCES_CACHE_ZIP_MANIFE
STS' must be set to avoid significant performance degradation.
アップグレードが終了しました。

次のコマンドを実行すると Trac のドキュメントをアップグレードできます:

  trac-admin /srv/trac/fprog.org/testproject wiki upgrade
</code></pre>

<p>wiki upgrade も促されたので、実行しました。</p>

<p>すると <a href="http://www.fprog.org/projects/testproject">http://www.fprog.org/projects/testproject</a> が</p>

<pre><code>設定エラー
None という名前の IRequestFilter インターフェイスの実装を見つけられません。コンポーネントが有効になっているかチェックするか、trac.ini の [trac] request_filters オプションを更新してください。
</code></pre>

<p>に変わったので、 <code>/srv/trac/fprog.org/testproject/conf/trac.ini</code> の</p>

<pre><code>request_filters = None
</code></pre>

<p>を</p>

<pre><code>request_filters =
</code></pre>

<p>に変更しました。
キーワードが一般的すぎて検索しきれなかったので、バグ報告などはしていません。</p>

<p><a href="http://www.fprog.org/projects">http://www.fprog.org/projects</a> の Available Projects を見て、他のプロジェクトも同様に upgrade と <code>request_filters</code> の修正をしました。</p>

<h2>nadoka さん</h2>

<p>iconv を使っていたところを kconv を使うように<a href="https://github.com/nadoka/nadoka/commit/328e01a5a2ae731ddc09f435dc4089eead3ba4ed">変更</a>しました。</p>

<h2>w3ml</h2>

<p>apache のエラーログに</p>

<pre><code>AH01215: ./w3ml:8:in `load'
AH01215: : /home/w3ml/etc/w3ml.conf:10: invalid multibyte char (UTF-8) (SyntaxError)
AH01215: /home/w3ml/etc/w3ml.conf:10: invalid multibyte char (UTF-8)
AH01215: \tfrom ./w3ml:8:in `&lt;main&gt;'
End of script output before headers: w3ml.cgi
</code></pre>

<p>と出ていたので、 <code>/home/w3ml/etc/w3ml.conf</code> の先頭に</p>

<pre><code># -*- coding: euc-jp -*-
</code></pre>

<p>を追加しました。
これで表示は問題なく見えるようになりましたが、メールの取り込みなどがちゃんと動くかどうかはまだ様子見です。</p>

<h2>tdiary</h2>

<p>ホスティングしている tdiary を確認してみると</p>

<pre><code>no such file to load -- redcarpet.so (LoadError)
/usr/lib/ruby/vendor_ruby/redcarpet.rb:1:in `require'
</code></pre>

<p>とうエラーが出ていて、 <code>dpkg -L ruby-redcarpet</code> を確認してみると <code>redcarpet.so</code> は 2.1 用しかなかったので、
wheezy にあげたときに <code>public_html/diary/index.rb</code> を <code>#!/usr/bin/ruby1.8</code> に変更していたのを
<code>#!/usr/bin/ruby</code> に変更しました。</p>

<p>すると次は <code>500 Internal Server Error</code> とだけ出るようになったので、 apache のエラーログを確認してみると</p>

<pre><code>AH01215: /usr/lib/ruby/2.1.0/cgi/util.rb:37:in `gsub': invalid byte sequence in UTF-8 (ArgumentError)
AH01215: \tfrom /usr/lib/ruby/2.1.0/cgi/util.rb:37:in `escapeHTML'
AH01215: \tfrom /usr/share/tdiary/index.rb:50:in `rescue in &lt;top (required)&gt;'
AH01215: \tfrom /usr/share/tdiary/index.rb:16:in `&lt;top (required)&gt;'
AH01215: \tfrom /usr/lib/ruby/2.1.0/rubygems/core_ext/kernel_require.rb:55:in `require'
AH01215: \tfrom /usr/lib/ruby/2.1.0/rubygems/core_ext/kernel_require.rb:55:in `require'
AH01215: \tfrom index.rb:2:in `&lt;main&gt;'
</code></pre>

<p>というエラーが出ていました。
そこで <code>/usr/share/tdiary/index.rb</code> を <code>coding: utf-8</code> から <code>coding: ascii-8bit</code> に変更したところ、
<code>public_html/diary/filter/antirefspam.rb:240: invalid multibyte char (UTF-8)</code> というエラーが確認できたので、
コメントが euc-jp で書かれていたのが確認できたので <code>antirefspam.rb</code> に <code>coding: euc-jp</code> を追加しました。
<code>public_html/diary/filter/default.rb</code> でも同様のエラーが出たので <code>coding: ascii-8bit</code> を追加したところ、
正常に表示できるようになりました。</p>

<p>最初の <code>500 Internal Server Error</code> については <a href="https://github.com/tdiary/tdiary-core/issues/555">tdiary-core に報告</a>したところ、<a href="https://github.com/tdiary/tdiary-core/commit/59557302e2dfd0cfa86b04b5d05e74dfe917900e">直った</a> ようです。</p>

<p>修正コミットでは update.rb も同様の修正がされていたので、 <code>/usr/share/tdiary/update.rb</code> も同様に <code>coding: ascii-8bit</code> にしておきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyLive ISO イメージを更新した]]></title>
    <link href="http://blog.n-z.jp/blog/2015-10-26-rubylive-builder.html"/>
    <updated>2015-10-26T21:44:33+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubylive-builder</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2014-07-13-build-rubylive-on-vm.html" title="RubyLiveを仮想環境で作成">RubyLiveを仮想環境で作成</a>したものを更新しました。</p>

<!--more-->


<h2>動作確認環境</h2>

<ul>
<li>VirtualBox 5.0.6</li>
<li>Vagrant 1.7.4</li>
</ul>


<h2>ビルド環境の更新</h2>

<p><code>git clone https://github.com/znz/rubylive-builder</code> で取得していた <code>rubylive-builder</code> 環境の <code>Vagrantfile</code> の <code>config.vm.box</code> を <code>"ffuenf/debian-7.6.0-amd64"</code> から <code>"ffuenf/debian-8.2.0-amd64"</code> に<a href="https://github.com/znz/rubylive-builder/commit/289f2079dad86bde424aa810f0e6b28302607ccb">更新しました</a>。</p>

<h2>ビルド内容の更新</h2>

<h3>ruby のバージョンの更新</h3>

<p><code>config/hooks/10-ruby-rails.chroot</code> でインストールしている ruby を 2.1.4 から 2.2.3 に<a href="https://github.com/znz/rubylive/commit/475e077f9bdb066628415ad602fefdde2608c57e">更新しました</a>。</p>

<h3>壁紙の変更</h3>

<p>壁紙を RubyKaigi 2014 のロゴから関西 Ruby 会議 06 のロゴに<a href="https://github.com/znz/rubylive/commit/f7f4136a39fd1ac4da8121204b941b12eac3e65e">変更しました</a>。</p>

<p>変更しても <code>config/includes.chroot/usr/share/images/desktop-base/rubykaigi2014-mark.svg</code> にダウンロードしたファイルは残ったままで、そのまま ISO イメージを作成しなおすと古い画像も ISO イメージの中に入ってしまうので、手動で削除しておく必要があります。
(<code>rake distclean</code> でも消えません。)</p>

<p>試行錯誤した後には特に <code>config/includes.chroot</code> 以下に不要なファイルが残っていないか注意する必要があります。</p>

<h3>jessie への更新 (失敗)</h3>

<p>ビルド環境を jessie にあげても作成される ISO は wheezy のままだったので、以下の変更で jessie にしようとしたのですが、失敗したので結局 wheezy のままにしました。</p>

<p>変更点は以下の通りです。</p>

<pre><code>diff --git a/auto/config b/auto/config
index d44fc2d..3dc3665 100755
--- a/auto/config
+++ b/auto/config
@@ -2,6 +2,7 @@

 lb config noauto \
        --architectures "amd64" \
+       --distribution "jessie" \
        --bootloader "grub2" \
        --templates "templates" \
        --bootappend-live "quiet locales=ja_JP.UTF-8 timezone=Asia/Tokyo utc=no keyboard-layouts=jp
diff --git a/config/package-lists/30-japanese.list.chroot b/config/package-lists/30-japanese.list.ch
index 602270e..304d5f7 100644
--- a/config/package-lists/30-japanese.list.chroot
+++ b/config/package-lists/30-japanese.list.chroot
@@ -3,8 +3,8 @@ fbterm
 lv
 manpages-ja
 nkf
-ttf-mona
-ttf-monapo
+fonts-mona
+fonts-monapo
 fonts-ipafont-gothic
 fonts-ipafont-mincho
 fonts-vlgothic
diff --git a/config/package-lists/50-editors.list.chroot b/config/package-lists/50-editors.list.chro
index 8468dec..cb2197a 100644
--- a/config/package-lists/50-editors.list.chroot
+++ b/config/package-lists/50-editors.list.chroot
@@ -1,4 +1,4 @@
-emacs23
+emacs24
 vim
 vim-gtk
 gedit
</code></pre>

<p>失敗した部分は以下の通りです。</p>

<pre><code>[2015-10-26 13:27:55] lb chroot_live-packages
dpkg: dependency problems prevent removal of systemd:
 libpam-systemd:amd64 depends on systemd (= 215-17+deb8u2).

dpkg: error processing package systemd (--purge):
 dependency problems - not removing
dpkg: dependency problems prevent removal of systemd-sysv:
 init depends on systemd-sysv | sysvinit-core | upstart; however:
  Package systemd-sysv is to be removed.
  Package sysvinit-core is not installed.
  Package upstart is not installed.
 libpam-systemd:amd64 depends on systemd-shim (&gt;= 8-2) | systemd-sysv; however:
  Package systemd-shim is not installed.
  Package systemd-sysv is to be removed.

dpkg: error processing package systemd-sysv (--purge):
 dependency problems - not removing
Errors were encountered while processing:
 systemd
 systemd-sysv
P: Begin unmounting filesystems...
P: Saving caches...
Reading package lists...
Building dependency tree...
Reading state information...
rake aborted!
Command failed with status (1): [sudo lb build...]
</code></pre>

<h2>ISO のビルド</h2>

<p><code>vagrant up</code> して <code>vagrant ssh</code> で入った後、<code>/vagrant/rubylive.sh</code> で作成できます。
2 回目以降は <code>~/rubylive</code> で <code>time rake APT_HTTP_PROXY=http://localhost:3142</code> を直接実行しても良いと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 14.04 LTS に Zabbix 2.4 を PostgreSQL を使う設定で入れた]]></title>
    <link href="http://blog.n-z.jp/blog/2015-03-13-zabbix-24-pgsql.html"/>
    <updated>2015-03-13T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/zabbix-24-pgsql</id>
    <content type="html"><![CDATA[<p><a href="https://www.zabbix.com/documentation/2.4/manual/installation/install_from_packages" title="3 Installation from packages [Zabbix Documentation 2.4]">3 Installation from packages [Zabbix Documentation 2.4]</a>
だと MySQL の例しかなく、
PostgreSQL で入れるとちょっとひっかかったところがあったので、
そのメモです。</p>

<p>Debian や Ubuntu の公式パッケージの zabbix との違いも気づいた範囲で書いておきました。</p>

<!--more-->


<h2>zabbix-release のインストール</h2>

<p><code>zabbix-release</code> をインストールして apt-line を設定して
<code>apt-get update</code> するところまでは公式マニュアルと同じです。</p>

<pre><code>wget http://repo.zabbix.com/zabbix/2.4/ubuntu/pool/main/z/zabbix-release/zabbix-release_2.4-1+trusty_all.deb
sudo dpkg -i zabbix-release_2.4-1+trusty_all.deb
sudo apt-get update
</code></pre>

<h2>zabbix-server のインストール</h2>

<p><code>zabbix-server-mysql</code> の代わりに <code>zabbix-server-pgsql</code> をインストールします。
途中で入力するパスワードは後で必要になるのでメモするか覚えておきます。
(Debian や Ubuntu の公式パッケージの zabbix と違って <code>dbconfig-common</code> を使うようになっています。)</p>

<pre><code>sudo apt-get install zabbix-server-pgsql
</code></pre>

<p>ただし、先に postgresql を入れておかないとデータベースの作成のところでエラーになるようです。</p>

<h2>zabbix-frontend-php のインストール</h2>

<p><code>/usr/share/doc/zabbix-frontend-php/README.Debian</code> に書いてあるのですが、
<code>php5-pgsql</code> を入れておくと初期設定の時のデータベースの選択肢に PostgreSQL が出てきます。</p>

<pre><code>sudo apt-get install zabbix-frontend-php php5-pgsql
</code></pre>

<h2>PHP のタイムゾーンの設定</h2>

<pre><code>sudoedit /etc/zabbix/apache.conf
</code></pre>

<p>で</p>

<pre><code># php_value date.timezone Europe/Riga
</code></pre>

<p>を</p>

<pre><code>php_value date.timezone Asia/Tokyo
</code></pre>

<p>に変更して</p>

<pre><code>sudo service apache2 reload
</code></pre>

<p>で反映します。
(Debian や Ubuntu の公式パッケージの zabbix と違って <code>apache2</code> のみ対応です。
<code>php5-fpm</code>+<code>nginx</code> には対応していないので <code>nginx</code> で使うなら完全に独自設定が必要です。)</p>

<h2>初期設定</h2>

<p><code>http://localhost/zabbix/</code> を開いて初期設定を開始します。
<code>Next</code> ボタンで進んでいってデータベースの設定のところは</p>

<ul>
<li>Database Type : PostgreSQL</li>
<li>Database host : localhost のまま</li>
<li>Database port : 0 のまま</li>
<li>Database name : zabbix のまま</li>
<li>User : root から zabbix に変更</li>
<li>Password : <code>zabbix-server-pgsql</code> をインストールしたときに設定したパスワード</li>
</ul>


<p>と設定します。</p>

<p>そして <code>Next</code> で進んでいって <code>Finish</code> まで行くと初期設定終了です。
(Debian や Ubuntu の公式パッケージの zabbix と違って
<code>/etc/zabbix/web/</code> が <code>www-data</code> から書き込み可能になっていて
ダウンロードして自分で設置しなくても設定完了するようになっています。)</p>

<h2>ログイン</h2>

<ul>
<li>Username : Admin</li>
<li>Password : zabbix</li>
</ul>


<p>でログインします。</p>

<p>右上の Profile から Language を Japanese (ja_JP) に変更して Update すると
日本語で使えるようになります。
パスワードもここで変更できます。</p>

<p>ログイン前の画面は guest ユーザーの言語が反映されているので、
「管理」-「ユーザー」からメンバーの「guest」を開いて言語を変更して更新します。</p>

<h2>zabbix-agent のインストール</h2>

<pre><code>sudo apt-get install zabbix-agent
</code></pre>

<p>でインストールできます。</p>

<h2>Zabbix server の監視</h2>

<p><code>zabbix-agent</code> をインストールした後、
「設定」-「ホスト」でステータスを「無効」から「有効」に切り替えます。</p>

<p>しばらくするとエージェントの状態の「Z」が緑色になって監視できていることがわかります。</p>

<h2>グラフの日本語の文字化け対策</h2>

<p>グラフなどの図の中の日本語が文字化けするときは
適当な日本語フォントを入れて
<code>zabbix-frontend-php</code> の設定をし直せば直ります。</p>

<pre><code>sudo apt-get install fonts-vlgothic
sudo dpkg-reconfigure zabbix-frontend-php
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[owncloud-client が conflict した話]]></title>
    <link href="http://blog.n-z.jp/blog/2015-01-29-owncloud-client.html"/>
    <updated>2015-01-29T09:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/owncloud-client</id>
    <content type="html"><![CDATA[<p>Debian 7 に <a href="https://owncloud.org/install/#desktop">ownCloud 公式の Desktop Client</a> を入れていたら、
なぜか <code>owncloud-client</code> の 1.7.1 から 1.7.1 への更新が発生して <code>libqtkeychain0</code> と conflict していたので、
<code>libqtkeychain0</code> をダウングレードして解決しました。</p>

<!--more-->


<h2>現象</h2>

<p>このように競合が検出されました。</p>

<pre><code>$ sudo aptitude full-upgrade -DV
以下のパッケージが更新されます:
  owncloud-client{b} [1.7.1 -&gt; 1.7.1] (競: libqtkeychain0)
更新: 1 個、新規インストール: 0 個、削除: 0 個、保留: 0 個。
700 k バイトのアーカイブを取得する必要があります。展開後に 0  バイトのディスク領域が新たに消費されます。
以下のパッケージには満たされていない依存関係があります:
 owncloud-client : 競合: libqtkeychain0 (= 0.20140128) [0.20140128 が既にインストール済みです]
以下のアクションでこれらの依存関係の問題は解決されます:

     以下のパッケージを削除する:
1)     libowncloudsync0
2)     libqtkeychain0
3)     owncloud-client
4)     owncloud-client-l10n



この解決方法を受け入れますか? [Y/n/q/?]q
</code></pre>

<h2>状況</h2>

<p><code>apt-cache show</code> でみてみると <code>Conflicts: libqtkeychain0 (= 0.20140128)</code> と明示されていました。</p>

<pre><code>$ apt-cache show owncloud-client
Package: owncloud-client
Version: 1.7.1
Architecture: amd64
Maintainer: Markus Rex &lt;msrex@owncloud.com&gt;
Installed-Size: 1521
Depends: libc6 (&gt;= 2.4), libgcc1 (&gt;= 1:4.1.1), libneon27, libowncloudsync0 (= 1.7.1), libqt4-dbus (&gt;= 4:4.5.3), libqt4-network (&gt;= 4:4.5.3), libqt4-sql (&gt;= 4:4.5.3), libqt4-xml (&gt;= 4:4.5.3), libqt4-xmlpatterns (&gt;= 4:4.5.3), libqtcore4 (&gt;= 4:4.8.0), libqtgui4 (&gt;= 4:4.7.0~beta1), libqtkeychain0, libqtwebkit4 (&gt;= 2.2.0), libsqlite3-0 (&gt;= 3.5.9), libstdc++6 (&gt;= 4.4.0), owncloud-client-l10n, libqt4-sql-sqlite
Conflicts: libqtkeychain0 (= 0.20140128)
Filename: ./amd64/owncloud-client_1.7.1_amd64.deb
Size: 699596
MD5sum: 23e2bfa2467b45fd9b70f3b946203b4b
SHA1: 422242ad170ad1aa8d75587fe18a0469cc23ad72
SHA256: 319e7253309835d028ec527ee9b3abea014c2db8b7edc5d3d57270ede9dbb5af
Section: devel
Priority: optional
Multi-Arch: same
Description: The ownCloud client is based on Mirall - github.com/owncloud/mirall
 .
 ownCloud client enables you to connect to your private
 ownCloud Server. With it you can create folders in your home
 directory, and keep the contents of those folders synced with your
 ownCloud server. Simply copy a file into the directory and the
 ownCloud client does the rest.
 .
 ownCloud gives your employees anytime, anywhere access to the files
 they need to get the job done, whether through this desktop application,
 our mobile apps, the web interface, or other WebDAV clients. With it,
 your employees can easily view and share documents and information
 critical to the business, in a secure, flexible and controlled
 architecture. You can easily extend ownCloud with plug-ins from the
 community, or that you build yourself to meet the requirements of
 your infrastructure and business.
 .
 ownCloud - Your Cloud, Your Data, Your Way!  www.owncloud.com
 .
 Authors
 =======
 Duncan Mac-Vicar P. &lt;duncan@kde.org&gt;
 Klaas Freitag &lt;freitag@owncloud.com&gt;
 Daniel Molkentin &lt;danimo@owncloud.com&gt;

Package: owncloud-client
Status: install ok installed
Priority: optional
Section: devel
Installed-Size: 1521
Maintainer: Markus Rex &lt;msrex@owncloud.com&gt;
Architecture: amd64
Multi-Arch: same
Version: 1.7.1
Depends: libc6 (&gt;= 2.4), libgcc1 (&gt;= 1:4.1.1), libneon27, libowncloudsync0 (= 1.7.1), libqt4-dbus (&gt;= 4:4.5.3), libqt4-network (&gt;= 4:4.5.3), libqt4-sql (&gt;= 4:4.5.3), libqt4-xml (&gt;= 4:4.5.3), libqt4-xmlpatterns (&gt;= 4:4.5.3), libqtcore4 (&gt;= 4:4.8.0), libqtgui4 (&gt;= 4:4.7.0~beta1), libqtkeychain0, libqtwebkit4 (&gt;= 2.2.0), libsqlite3-0 (&gt;= 3.5.9), libstdc++6 (&gt;= 4.4.0), owncloud-client-l10n, libqt4-sql-sqlite
Description: The ownCloud client is based on Mirall - github.com/owncloud/mirall
 .
 ownCloud client enables you to connect to your private
 ownCloud Server. With it you can create folders in your home
 directory, and keep the contents of those folders synced with your
 ownCloud server. Simply copy a file into the directory and the
 ownCloud client does the rest.
 .
 ownCloud gives your employees anytime, anywhere access to the files
 they need to get the job done, whether through this desktop application,
 our mobile apps, the web interface, or other WebDAV clients. With it,
 your employees can easily view and share documents and information
 critical to the business, in a secure, flexible and controlled
 architecture. You can easily extend ownCloud with plug-ins from the
 community, or that you build yourself to meet the requirements of
 your infrastructure and business.
 .
 ownCloud - Your Cloud, Your Data, Your Way!  www.owncloud.com
 .
 Authors
 =======
 Duncan Mac-Vicar P. &lt;duncan@kde.org&gt;
 Klaas Freitag &lt;freitag@owncloud.com&gt;
 Daniel Molkentin &lt;danimo@owncloud.com&gt;

Package: owncloud-client
Version: 1.5.0+dfsg-4~bpo70+1
Installed-Size: 1076
Maintainer: ownCloud for Debian maintainers &lt;pkg-owncloud-maintainers@lists.alioth.debian.org&gt;
Architecture: amd64
Depends: libowncloudsync0 (= 1.5.0+dfsg-4~bpo70+1), libqt4-sql-sqlite, owncloud-client-l10n, libc6 (&gt;= 2.2.5), libgcc1 (&gt;= 1:4.1.1), libneon27-gnutls, libocsync0 (&gt;= 0.60.3), libqt4-dbus (&gt;= 4:4.5.3), libqt4-network (&gt;= 4:4.6.1), libqt4-sql (&gt;= 4:4.5.3), libqt4-xml (&gt;= 4:4.5.3), libqt4-xmlpatterns (&gt;= 4:4.5.3), libqtcore4 (&gt;= 4:4.8.0), libqtgui4 (&gt;= 4:4.7.0~beta1), libqtkeychain0 (&gt;= 0.1.0), libqtwebkit4 (&gt;= 2.1.0~2011week13), libstdc++6 (&gt;= 4.1.1)
Description-en: folder synchronization with an ownCloud server - GUI
 The ownCloudSync system lets you always have your latest files wherever
 you are. Just specify one or more folders on the local machine to and a server
 to synchronize to. You can configure more computers to synchronize to the same
 server and any change to the files on one computer will silently and reliably
 flow across to every other.
 .
 owncloud-client provides the graphical client specialising in
 synchronizing with cloud storage provided by ownCloud.
Homepage: http://owncloud.org/sync-clients/
Description-md5: a754a2b9b06d1c7c880afd05aa24e101
Section: net
Priority: optional
Filename: pool/main/o/owncloud-client/owncloud-client_1.5.0+dfsg-4~bpo70+1_amd64.deb
Size: 417650
MD5sum: 42a3f6355f9d5f5af0fb42141bee9ecf
SHA1: 52102eacc1d81438cb88e639c09269484279dde1
SHA256: d38e11879d6439dad97ff9f59449077193dbc89331bae8d2866b335ce8b41856
</code></pre>

<p>さらに <code>apt-cache policy</code> でどこからきたパッケージなのかみてみるとどちらも ownCloud 公式のパッケージだったように見えました。
bpo (backports) のパッケージならバージョンが下がることはないはずなので、そう判断しました。</p>

<pre><code>$ apt-cache policy owncloud-client
owncloud-client:
  インストールされているバージョン: 1.7.1
  候補:               1.7.1
  バージョンテーブル:
     1.7.1 0
        500 http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/Debian_7.0/  Packages
 *** 1.7.1 0
        100 /var/lib/dpkg/status
     1.5.0+dfsg-4~bpo70+1 0
        100 http://ftp.jp.debian.org/debian/ wheezy-backports/main amd64 Packages
$ apt-cache policy libqtkeychain0
libqtkeychain0:
  インストールされているバージョン: 0.20140128
  候補:               0.20140128
  バージョンテーブル:
 *** 0.20140128 0
        100 /var/lib/dpkg/status
     0.4 0
        500 http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/Debian_7.0/  Packages
     0.1.0-2~bpo70+1 0
        100 http://ftp.jp.debian.org/debian/ wheezy-backports/main amd64 Packages
</code></pre>

<h2>対処</h2>

<p><code>libqtkeychain0</code> を ownCloud 公式の 0.4.0 にダウングレードすることで解決しました。</p>

<pre><code>$ sudo aptitude full-upgrade -DV
以下のパッケージが更新されます:
  owncloud-client{b} [1.7.1 -&gt; 1.7.1] (競: libqtkeychain0)
更新: 1 個、新規インストール: 0 個、削除: 0 個、保留: 0 個。
700 k バイトのアーカイブを取得する必要があります。展開後に 0  バイトのディスク領域が新たに消費されます。
以下のパッケージには満たされていない依存関係があります:
 owncloud-client : 競合: libqtkeychain0 (= 0.20140128) [0.20140128 が既にインストール済みです]
以下のアクションでこれらの依存関係の問題は解決されます:

     以下のパッケージを削除する:
1)     libowncloudsync0
2)     libqtkeychain0
3)     owncloud-client
4)     owncloud-client-l10n



この解決方法を受け入れますか? [Y/n/q/?]n
以下のアクションでこれらの依存関係の問題は解決されます:

     以下のパッケージを削除する:
1)     owncloud-client
2)     owncloud-client-l10n



この解決方法を受け入れますか? [Y/n/q/?]n
以下のアクションでこれらの依存関係の問題は解決されます:

     以下のパッケージを現在のバージョンに一時固定する:
1)     owncloud-client [1.7.1 (now)]



この解決方法を受け入れますか? [Y/n/q/?]n
以下のアクションでこれらの依存関係の問題は解決されます:

     以下のパッケージをダウングレードする:
1)     libqtkeychain0 [0.20140128 (now) -&gt; 0.4 (&lt;NULL&gt;)]



この解決方法を受け入れますか? [Y/n/q/?]y
以下のパッケージがダウングレードされます:
  libqtkeychain0 [0.20140128 -&gt; 0.4]
以下のパッケージが更新されます:
  owncloud-client [1.7.1 -&gt; 1.7.1]
更新: 1 個、新規インストール: 0 個、ダウングレード: 1 個、削除: 0 個、保留: 0 個。
753 k バイトのアーカイブを取得する必要があります。展開後に 0  バイトのディスク領域が新たに消費されます。
先に進みますか? [Y/n/?]
取得: 1 http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/Debian_7.0/  libqtkeychain0 0.4 [53.4 kB]
取得: 2 http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/Debian_7.0/  owncloud-client 1.7.1 [700 kB]
Fetched 753 kB in 4秒 (156 kB/s)
changelog を読んでいます... 完了
dpkg: 警告: libqtkeychain0 を 0.20140128 から 0.4 にダウングレードしています
(データベースを読み込んでいます ... 現在 124701 個のファイルとディレクトリがインストールされています。)
libqtkeychain0 0.20140128 を (.../libqtkeychain0_0.4_amd64.deb で) 置換するための準備をしています ...
libqtkeychain0 を展開し、置換しています...
owncloud-client:amd64 1.7.1 を (.../owncloud-client_1.7.1_amd64.deb で) 置換するための準備をしています ...
owncloud-client:amd64 を展開し、置換しています...
man-db のトリガを処理しています ...
libqtkeychain0 (0.4) を設定しています ...
owncloud-client:amd64 (1.7.1) を設定しています ...

現在の状態: 更新が 0 個 [-1]。
</code></pre>

<h2>対処後の状況</h2>

<p><code>owncloud-client</code> パッケージも <code>libqtkeychain0</code> パッケージもどちらも ownCloud 公式のバージョンになって解決しました。</p>

<pre><code>$ apt-cache policy owncloud-client
owncloud-client:
  インストールされているバージョン: 1.7.1
  候補:               1.7.1
  バージョンテーブル:
 *** 1.7.1 0
        500 http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/Debian_7.0/  Packages
        100 /var/lib/dpkg/status
     1.5.0+dfsg-4~bpo70+1 0
        100 http://ftp.jp.debian.org/debian/ wheezy-backports/main amd64 Packages
$ apt-cache policy libqtkeychain0
libqtkeychain0:
  インストールされているバージョン: 0.4
  候補:               0.4
  バージョンテーブル:
 *** 0.4 0
        500 http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/Debian_7.0/  Packages
        100 /var/lib/dpkg/status
     0.1.0-2~bpo70+1 0
        100 http://ftp.jp.debian.org/debian/ wheezy-backports/main amd64 Packages
</code></pre>

<h2>考察</h2>

<p>Debian 公式パッケージならこういうときは
<a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Version">Version</a> に
epoch をつけて解決しますが、
ownCloud 公式は Debian からみると非公式パッケージになるので、
将来の Debian のアップグレードの邪魔にならないように epoch を使わなかったため、
こういう問題が起きたのでないかと推測しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant Cloudでboxを公開してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-21-vagrantcloud-box.html"/>
    <updated>2014-07-21T15:52:35+09:00</updated>
    <id>http://blog.n-z.jp/blog/vagrantcloud-box</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2014-07-18-wheezy-from-vagrant-cloud.html" title="Vagrant CloudからWheezyを入れてみた">Vagrant CloudからWheezyを入れてみた</a>で公開されているものを使ってみたので、
今回は
<a href="https://vagrantcloud.com/">Vagrant Cloud</a>
で日本語で日本向けの Box の公開も試してみました。</p>

<!--more-->


<h2>手順概要</h2>

<ol>
<li><a href="https://vagrantcloud.com/">https://vagrantcloud.com/</a> にログイン</li>
<li><a href="https://vagrantcloud.com/boxes/new">Create Box</a> で作成</li>
<li>Create new version でバージョンを作成</li>
<li>Create new provider でバージョンに対応する provider を作成</li>
<li>無料アカウントだと Upload は使えないようなので URL を指定</li>
<li>バージョンの編集で Release すると公開</li>
</ol>


<h2>登録される情報</h2>

<p>ユーザーアカウントに複数の Box が対応していて、
Box に複数のバージョンが対応していて、
バージョンに複数の provider (VirtualBox とか VMware とか) が対応している、
という構造になっているようです。</p>

<p>バージョンは Release するまでは公開されないようです。</p>

<p>古いバージョンは Revoke で破棄できるようなので、
box を置く URL を使い回すなら Revoke してから
ファイルを置き換えて新しいバージョンを登録するのが
良さそうに思いました。</p>

<h2>作成した box の packer テンプレート</h2>

<p><a href="https://github.com/znz/packer-templates">packer-templates</a>
で公開しています。</p>

<p>使い方は</p>

<pre><code>git clone https://github.com/znz/packer-templates
cd debian-7.6.0-amd64-ja_jp
packer build debian-7.6.0-amd64-ja_jp.json
</code></pre>

<p>で <code>debian-7.6.0-amd64-ja_jp_virtualbox.box</code> が作成できます。
試した環境では1時間ぐらいかかりました。</p>

<h2>使用方法</h2>

<p><code>vagrant init znzj/debian-7.6.0-amd64-ja_jp</code>
のように <code>vagrant init</code> の引数に <code>ユーザー名/BOX名</code> を指定して
<code>Vagrantfile</code> を作成すると
<code>config.vm.box = "znzj/debian-7.6.0-amd64-ja_jp"</code>
と指定されていて <code>vagrant up</code> で自動ダウンロードされて使えます。</p>

<h2>登録した URL の扱い</h2>

<p>box は URL で登録したので、
<code>https://vagrantcloud.com/znzj/debian-7.6.0-amd64-ja_jp/version/1/provider/virtualbox.box</code>
のように <code>vagrantcloud.com</code> の URL に見えるところからダウンロードしようとした時、
リダイレクトされて登録した URL からのダウンロードになるようです。</p>

<p><code>vagrantcloud</code> 側でキャッシュなどをしてくれるわけではないようなので、
置き場所には注意する必要がありそうです。</p>

<p>今回は需要も多くなさそうで、
日本向けということで
さくらのVPS
に置いてみました。</p>
]]></content>
  </entry>
  
</feed>
