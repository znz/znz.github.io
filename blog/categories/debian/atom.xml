<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debian | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/debian/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-06-03T23:55:57+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ansible で role を新規作成して ansible galaxy で公開して更新した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-03-ansible-galaxy-new-role.html"/>
    <updated>2017-06-03T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-galaxy-new-role</id>
    <content type="html"><![CDATA[<p>ansible で role を新規作成して ansible galaxy で公開して更新するときにやっているいつもの手順を紹介します。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ansible 2.3.0.0</li>
</ul>


<h2>ansible-galaxy init</h2>

<p><code>ansible-galaxy init</code> でファイルを作成します。</p>

<pre><code>% ansible-galaxy init ansible-role-unattended-upgrades
- ansible-role-unattended-upgrades was created successfully
% cd ansible-role-unattended-upgrades
% find . -type f | sort
./README.md
./defaults/main.yml
./handlers/main.yml
./meta/main.yml
./tasks/main.yml
./tests/inventory
./tests/test.yml
./vars/main.yml
</code></pre>

<p><code>tests</code> は使い方がよくわからないのですが、そのままにしています。</p>

<h2>LICENSE 作成</h2>

<p>すでに作成済みの role から The MIT License (MIT) のファイルをコピーしてきました。
新規の場合は github に push した後にブラウザーから作成するのが簡単だと思います。</p>

<h2>README 更新</h2>

<p>ここで自分の他の role を参考に書き換えました。</p>

<h2>vars 削除</h2>

<p>上書きしやすいように、 <code>defaults/main.yml</code> しか使っていないので <code>vars/main.yml</code> は削除しました。</p>

<pre><code>% rm -r vars
</code></pre>

<h2>中身作成</h2>

<p><code>tasks</code>, <code>defaults</code>, <code>handlers</code>, <code>files</code>, <code>templates</code> などのディレクトリを使って作成します。</p>

<h2>meta/main.yml 更新</h2>

<p><code>meta/main.yml</code> を更新します。
<code>galaxy_tags</code> は <a href="https://galaxy.ansible.com/">https://galaxy.ansible.com/</a> の browse roles を参考にして適当に選んでいます。</p>

<h2>examples</h2>

<p>テスト用に vagrant で serverspec を動かせるように <code>examples</code> を入れています。
どうするのが良いのかわかっていないのですが、とりあえず全くテストしないよりはましなので、こういう方法をとっています。</p>

<p><code>debian/wheezy64</code> の box は synced folder が rsync なのでシンボリックリンクのループでエラーになってしまうので、 <code>vagrant up wheezy64</code>, <code>vagrant provision wheezy64</code>, <code>rake spec:wheezy64</code> のように provision を別途実行しないといけないのが不便なのですが、 <a href="https://atlas.hashicorp.com/debian/">https://atlas.hashicorp.com/debian/</a> には VirtualBox Guest Addition が入った box が <code>debian/contrib-jessie64</code> しかないので、今のところ wheezy と stretch ではどうしようもなさそうです。</p>

<p>テストに使った VM はディスクの無駄なので、こまめに vagrant destroy しています。</p>

<h2>git push</h2>

<p><code>basename $(pwd) | pbcopy</code> した名前で github に repository を作成します。
タグもうっておきます。</p>

<pre><code>git remote add origin git@github.com:znz/ansible-role-unattended-upgrades.git
git push -u origin master
git tag v1.0.0
git push --tags
</code></pre>

<h2>ansible galaxy に反映</h2>

<p>github 連携でログインして、 my roles を開きます。</p>

<p>Search Roles の入力欄の右にあるボタンをクリックして refresh して github の新しい repository を表示させます。
(たぶん <code>meta/main.yml</code> をチェックして一覧に出すかどうか決めているのだと思います。)</p>

<p>追加した role を有効にします。
Role Settings を開くとわかるのですが、なぜか Role Name は自動的に <code>ansible-role-</code> がとれて <code>unattended-upgrades</code> になっています。</p>

<h2>role の更新</h2>

<p>role を更新したら <a href="http://semver.org/lang/ja/">セマンティック バージョニング</a> にそってバージョン番号をあげて、タグをうって push しておきます。</p>

<p>my roles のページで該当する role の行の一番右にある Import Role をクリックすると新しいタグが反映されます。
(role 個別ページには該当する操作はなさそうです。)</p>

<h2>まとめ</h2>

<p>ansible で新規 role を作成して、 github と ansible galaxy で公開して更新しているときにやっている手順を紹介しました。</p>

<p>昔は ansible-galaxy で role を取ってくるのに ansible galaxy への登録が必須だったので登録していたのですが、最近は他の人が role を作るときに参考になるかもと思って登録しています。
あまり汎用性のない自分用の role の場合は github だけに登録して YAML ファイルで</p>

<pre><code>- src: https://github.com/znz/ansible-role-nadoka
  version: master
  name: znz.nadoka
</code></pre>

<p>のように指定して使っていたり (この場合でも meta/main.yml は必要)、 playbook 用の repository の role 以下にそのまま入れていたり (この場合は meta/main.yml は不要) します。</p>

<p>複数 role を登録していて、こういうフローで作業をしている人もいるということで、参考になれば幸いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 123 回関西 Debian 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-28-kansai-debian-meeting.html"/>
    <updated>2017-05-28T13:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://debianjp.connpass.com/event/57323/" title="第 123 回関西 Debian 勉強会">第 123 回関西 Debian 勉強会</a>に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<p>Apache Arrow の勉強会の後、一緒にランチに行くのに参加していたら、ちょっと遅くなってしまって、 13:40 すぎに到着しました。</p>

<h2>オープニング</h2>

<ul>
<li>事前課題は必須項目になっていなかったため、 connpass での参加登録時に出ていなかったので、その場で発表して資料が更新されていた。</li>
<li>初参加の人がいた</li>
<li>初めて作った人とか長い間使っていない人とか</li>
<li>easypg は表示は復号されているがメモリダンプをしても平文はないらしい</li>
<li>期限切れと revoke の違い: 期限切れはのばせるが、 revoke は取り消せない</li>
</ul>


<p>ruby の svn のコミットに必要という話は <a href="https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowto">https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowto</a> <a href="https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowtoJa">https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowtoJa</a> あたりに書いてあるのですが、今見ると <code>ssh-keygen -b 2048 -f ruby_key</code> になってて古い感じ。英語の方は <code>~/.ssh/id_rsa or ~/.ssh/id_dsa</code> と書いてあるのでもっと古い感じが。</p>

<h3>途中で矢吹さんの話</h3>

<ul>
<li>カジュアルに使うのも良いけど、暗号関連は色々気にしている人もいるので気をつけましょう (色々なポリシーがあるのを尊重しましょう) という話とか</li>
<li>cypherpunk : 暗号の民主化</li>
<li>FST-01 を入手した (まだ秘密鍵は入れていない) ので回覧</li>
</ul>


<h2>GnuPG にまつわるアレコレ - GnuPG2 とか Keybase とか Yubikey とか</h2>

<ul>
<li>key id は昔は 8 文字だったけど conflict が作れるという話になって、今は 16 文字 (以上?) が普通らしい</li>
<li>(勉強会中に聞きそびれてしまったけど、GPG の key id が fingerprint の末尾っていうのは、みんなどうやって知るんだろう?)</li>
<li>(自分は昔の key sign party で fingerprint しか書いてないけど、どうやって fetch するの? と聞いたときに教えてもらったけど。)</li>
<li>GnuPG とは?</li>
<li>OpenPGP: RFC になっている</li>
<li>暗号化によって盗聴を防ぐ (機密性)</li>
<li>署名によって改ざんを検知可能にする (完全性)</li>
<li>例: secure-apt, DKIM</li>
<li>信頼の輪 (Web of trust) によって本人を同定</li>
<li>過去の資料の参照情報紹介</li>
<li><a href="https://wiki.debian.org/KansaiDebianMeeting/20150823" title="第 101 回 関西 Debian 勉強会">第 101 回 関西 Debian 勉強会</a>の「wiki:Subkeys」が気になった</li>
<li>Windows の GUI の GPG クライアントで良いものがない</li>
<li>mac は GPG Tools というので標準の Mail.app で GPG 対応できるらしい</li>
<li>Web メールで困る話</li>
<li>Thunderbird は Enigmail</li>
<li>鍵の選び方の話</li>
<li>ED25519 は gnupg 1.4 系 (今は oldstable ブランチ) で復号できない</li>
<li>今の所は互換性のための RSA4096 と速い ED25519 を併用するのが良いかもしれない</li>
<li>GnuPG 2 - Stretch での変更点</li>
<li>gnupg (1.4 → 2.1), gnupg1 (なし → 1.4), gnupg2 (2.0 → drop)</li>
<li>gnupg 2.1 は初回実行時に自動的に移行が実行されて、2.1 用のファイル (<code>pubring.kbx</code> とか <code>private-keys-v1.d/</code> とか) が作成される</li>
<li>古いバージョン用のファイル (<code>pubring.gpg</code> とか <code>secring.gpg</code> とか) はそのまま残るので古いバージョンの共存も可能 (だがそれぞれのバージョンのファイルしか更新されないので、併用すると情報がずれていくはず)</li>
<li>2.0 がどっちのファイルを使うのかは検証してないので不明</li>
<li>プログラムの分離具合が整理された (<a href="http://miniconf.debian.or.jp/">Mini Debian Conference Japan 2016</a> の<a href="http://miniconf.debian.or.jp/assets/files/gnupg-now.html">g新部さんのスライド</a> の図が非常にわかりやすい (GnuPG programs (2) の図))</li>
<li>proxy 設定が gpg.conf から dirmngr.conf に変わった</li>
<li>use-gpg-agent が obsolete (常に有効で単純に無視される)</li>
<li>大量の ssh 接続に使うと scdaemon がエントロピーが足りないという話</li>
<li>haveged (はべーじでぃー(と言っていた)) とか rng-tools とか</li>
<li>disable-scdaemon をつけておくと無駄に scdaemon が起動しなくなる (gpg-agent から scdaemon が起動して scdaemon 対応のデバイスがなければ、すぐに gpg-agent に返ってくるらしいが、起動するだけ無駄という話)</li>
<li>gpg-agent を ssh-agent として使うのは簡単</li>
<li>GNOME で gnome keyring daemon は止めやすい</li>
<li>mate や xfce では ssh-agent を止めにくい</li>
<li>ssh-agent を入れないときは <code>.xsessionrc</code> で <code>SSH_AUTH_SOCK</code> を自分で設定する必要がある</li>
<li>mate や xfce では <code>.xsessionrc</code> で設定しても、さらに上書きされるらしい</li>
<li>YubiKey <a href="https://yubikey.yubion.com/">https://yubikey.yubion.com/</a> <a href="https://www.cloudgate.jp/yubikey.html">https://www.cloudgate.jp/yubikey.html</a></li>
<li>ED25519 には対応していない</li>
<li>RSA 4096 で復号で 0.5 秒ぐらい</li>
<li>(後でし</li>
<li>Qt5 での GUI ツールとコマンドラインツールがある</li>
<li>keybase.io というサービスがあるらしいが秘密鍵もアップロードできるらしく?</li>
<li>アカウントを作ってみた <a href="https://keybase.io/uwabami">https://keybase.io/uwabami</a> が消すかも。</li>
<li><a href="https://github.com/keybase/client">https://github.com/keybase/client</a> には大量の Issues が。</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>今後の予定</li>
<li>来月は17日に stretch がリリース予定なので、25日から18日に予定を変更してリリースパーティの可能性が高そう</li>
</ul>


<h2>よくわからないままだった点</h2>

<ul>
<li>懇親会への移動中などにある程度話しましたが</li>
<li><code>gpg --version</code> で出てくる「公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA」の「EDDSA」(ECDSA ではなく)と「ED25519」は同じ?</li>
<li>Curve25519 と ED25519 の関係</li>
<li><a href="https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%89%E3%83%AF%E3%83%BC%E3%82%BA%E6%9B%B2%E7%B7%9A%E3%83%87%E3%82%B8%E3%82%BF%E3%83%AB%E7%BD%B2%E5%90%8D%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0" title="エドワーズ曲線デジタル署名アルゴリズム">エドワーズ曲線デジタル署名アルゴリズム</a> に多少説明がある</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 122 回関西 Debian 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-23-kansai-debian-meeting.html"/>
    <updated>2017-04-23T13:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://debianjp.connpass.com/event/54424/" title="第 122 回関西 Debian 勉強会">第 122 回関西 Debian 勉強会</a>に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<p>早めに出発したら時間があったので、駅前ビルの金券屋で切符を買って、少し安く移動できました。</p>

<p>しばらく前に阪急三番街の KIDDY LAND で stretch のぬいぐるみが 2,3 個あったのを見かけて、次にみたときには最後の 1 個になったいたので、買っておいたのを持って行きました。</p>

<h2>オープニング</h2>

<ul>
<li>前回の話から会場候補地の話とか</li>
<li><a href="https://wiki.debian.org/KansaiDebianMeeting/DraftMemo">https://wiki.debian.org/KansaiDebianMeeting/DraftMemo</a> に古いメモがある</li>
<li><a href="http://events.linuxfoundation.jp/events/open-source-summit-japan" title="Open Source Summit Japan 2017">Open Source Summit Japan 2017</a> というのがあるらしい</li>
<li><a href="https://lists.debian.org/debian-devel-announce/2017/04/msg00008.html" title="Status on the stretch release">Status on the stretch release</a></li>
<li><a href="https://www.debian.org/News/2017/20170417" title="Statement concerning the arrest of Dmitry Bogatov">Statement concerning the arrest of Dmitry Bogatov</a></li>
<li><a href="https://blog.torproject.org/blog/statement-regarding-dmitry-bogatov" title="Statement regarding Dmitry Bogatov | The Tor Blog">Statement regarding Dmitry Bogatov | The Tor Blog</a></li>
<li>事前課題</li>
<li>maven とか make とか</li>
</ul>


<h2>休憩</h2>

<h2>CMake でビルド</h2>

<ul>
<li>Windows 版と Linux 版の両対応が動機</li>
<li>Visual Studio や Eclipse のプロジェクト出力も可能</li>
<li><a href="https://github.com/yosukesan/kansai_debian">https://github.com/yosukesan/kansai_debian</a> に今回のサンプルを用意</li>
<li><code>distclean</code> 相当がないので build ディレクトリを作る方が良い</li>
<li><code>cd 000.hello; mkdir build; cmake ../ -DCMAKE_INSTALL_PREFIX=.; make; make install</code></li>
<li><code>CMakeCache.txt</code> が <code>configure.log</code> 相当</li>
<li><code>CMakeCache.txt</code> を編集することも可能</li>
<li><code>cmake ..</code> ではなく <code>cmake ../CMakeLists.txt</code> としてしまうと build ディレクトリではなくソースディレクトリにファイルが作られてしまうので注意</li>
<li>ライブラリをリンクする例: 失敗する例が <code>001_NG.link_library</code> で成功する例が <code>001_OK.link_library</code></li>
<li>自作ライブラリのビルドとリンク</li>
<li><code>CMakeCache.txt</code> に入る変数と入らない変数がある</li>
<li>設定するのに <code>FORCE</code> オプションが必要なものとなくても良いものがあってハマった</li>
<li>echo しても空なのに、内部的には変数がある</li>
<li>変数の上書きに癖があってハマった</li>
<li>Windows でマルチスレッドかどうか、デバッグかリリースかなどでリンクするライブラリが違うのが自動でできなかった</li>
<li>Visual Studio でもリンクするライブラリの組み合わせ問題ははまることがあるらしい</li>
<li>Dependency Walker</li>
<li>デバッグビルドの DLL が混ざっていてバグっていた話</li>
<li><a href="https://ninja-build.org/manual.html">https://ninja-build.org/manual.html</a></li>
</ul>


<h2>その後</h2>

<p>時間が余ったので、次回の予定などの話をしていました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 121 回関西 Debian 勉強会 (10 周年記念会) に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-03-19-kansai-debian-meeting.html"/>
    <updated>2017-03-19T13:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20170319" title="第 121 回 関西 Debian 勉強会 (10 周年記念会)">第 121 回 関西 Debian 勉強会 (10 周年記念会)</a>
に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<p>初めての場所だったので、迷うかと思いましたが、迷ったのは建物の入り口ぐらいで、
駅にも案内があったので、ほとんど迷わずにたどり着けました。</p>

<p>参加者は 13 名で、参加費は 150 円でした。</p>

<h2>オープニングなど</h2>

<ul>
<li><a href="https://twitter.com/search?q=%23kansaidebian&amp;src=typd">ハッシュタグは #kansaidebian</a></li>
<li>祝10周年</li>
<li>事前課題発表</li>
</ul>


<p>見つかったメモ的に、第 2 回からということにしておいたけど、詳しいことは覚えていないだけで、最初から参加していた気もするし、もっと詳しく調べてみないと本当のところは不明。</p>

<h2>休憩</h2>

<h2>Debian Developer になるのに何をしたかと勉強会の Design</h2>

<ul>
<li>やぶきさん</li>
<li>自己紹介</li>
<li>どうして関西 Debian 勉強会を立ち上げたのか</li>
<li>Debian Developer になりたかった理由</li>
<li>他人の批判を受けることも大事</li>
<li>巨人の肩に乗る</li>
<li><a href="http://amzn.to/2n9ZMtB">情熱プログラマー</a>という本</li>
<li>「いちばんのへたくそになろう」</li>
<li>どうしたら英語でコミュニケーションできる</li>
<li>海外の conf に参加してモチベーションを保っていた</li>
<li>自分のやる気を保つポイントは探らないとわからない</li>
<li>分割統治法</li>
<li>勉強会の Design として考慮したこと</li>
<li><a href="http://amzn.to/2mInFoM">コンサルタントの秘密</a> という本を参考にした</li>
<li>「プレスコットのピックルス原理」「漬け水がキュウリに漬かるよりは、キュウリが漬け水に漬かる方が早い」</li>
<li>3の法則</li>
<li>「自分の計画を駄目にする原因が3つ考えられないようなら、思考過程の方に問題がある」</li>
<li>規模のジレンマ</li>
<li>人が集まる質とサイズによって、非線形的に集まりの様相は異なる。</li>
<li>「ラズベリー・ジャムの法則」（広げようとすれば、するほど薄くなる）</li>
<li><a href="http://amzn.to/2mIf1qo">Becoming a Technical Leader</a> (原著)</li>
<li>日本語題: <a href="http://amzn.to/2n9TLNn">スーパーエンジニアへの道―技術リーダーシップの人間学</a></li>
<li>ある意味、コミュニティを作っていく指針でもある。</li>
<li>動機づけ、アイディア、組織化</li>
<li>技術コミュニティ活動だが、技術の話をするのは当然でも、社会学的アプローチ、組織論的アプローチして、勉強会を回して見たかった。</li>
<li>自分の立ち位置は、見晴らしがいい場所か?</li>
<li>質疑応答</li>
<li>本の紹介</li>
<li><a href="http://amzn.to/2mInFoM">コンサルタントの秘密</a></li>
<li><a href="http://amzn.to/2mWH32j">Fearless Change アジャイルに効く アイデアを組織に広めるための48のパターン</a></li>
</ul>


<h2>10年間の振り返り</h2>

<ul>
<li>たかやさん</li>
<li>自己紹介</li>
<li>担当者の悩み</li>
<li>場所の確保</li>
<li>定期的な場所の確保の難しさ</li>
<li>交通の便</li>
<li>電源やプロジェクタなどの費用</li>
<li>Google Map で場所の一覧を作っていた</li>
<li>講師の先生の確保 ネタが難しい</li>
<li>自分のスキルの向上</li>
<li>Debian って充実している</li>
<li>仕方がないので emacs 関係のパッケージを</li>
<li>(navi2ch, jd などは proxy を使わないと見えなくなっているらしい)</li>
<li>今後の関わり方</li>
<li>パッケージ初心者ネタ大歓迎です</li>
</ul>


<h2>休憩</h2>

<h2>宴会</h2>

<p>過去の開催の記録 (参加者数や発表タイトルなどの表) を見ながらの話をしながら軽食(
<a href="https://twitter.com/murase_syuka/status/843350811375632384">https://twitter.com/murase_syuka/status/843350811375632384</a>
<a href="https://twitter.com/rarewin/status/843355875276394497">https://twitter.com/rarewin/status/843355875276394497</a>
)。</p>

<p>もくもくしすぎな年があって、一度止まってしまうと再開するのが大変なので、とりあえず定期開催していたのは大事だったのではないかという話が印象的でした。</p>

<h2>懇親会</h2>

<p>主に懇親会前後の移動中に関西 Debian 勉強会で相談したかった話ができたので良かった。</p>

<p>懇親会に使った店では烏龍茶はおかわり自由だったらしく、別のテーブルの人たちはそれで烏龍茶を頼みまくっていて、軽食を食べていたので全体としてもあまり食べなかったからか、安かったらしい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mini Debian Conference Japan 2016に参加して発表してきた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-12-10-mini-debian-conference-japan-2016.html"/>
    <updated>2016-12-10T10:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/mini-debian-conference-japan-2016</id>
    <content type="html"><![CDATA[<p><a href="http://miniconf.debian.or.jp/" title="Mini Debian Conference Japan 2016">Mini Debian Conference Japan 2016</a>
に参加して、発表してきました。</p>

<!--more-->


<h2>会場</h2>

<p>前日に東京に移動していたので、余裕がありましたが、
東京駅から近いので、当日移動でも頑張れば間に合いそうな場所でした。</p>

<p>ネットワークはゲスト用の無線があって、接続すると Web 画面が出てきてそこでユーザーとパスワードを入れて認証するという方式でした。</p>

<h2>セッション</h2>

<p>2トラックなので、どちらを聞きに行くのか悩む必要がありました。
さらに午後からは LibreOffice Kaigi 2016.12 も併催なので、さらに悩みました。</p>

<h2>オープニング</h2>

<ul>
<li>DebConf を日本でやりたいので、カンファレンス開催のノウハウをためたい</li>
<li>諸注意で Windows の画面が出てきてブーイング</li>
<li>結局映らなかったので口頭で</li>
<li>自動販売機は使用禁止とか</li>
<li>休憩中の予定説明とか</li>
<li>さっき出てきた DebConf の<a href="https://twitter.com/yasulab/status/807399231107584001">写真</a>のような集合写真撮影があるよとか</li>
<li>機材の関係で最初のセッションは部屋を入れ替え</li>
</ul>


<h2>Open Build Service in Debian</h2>

<ul>
<li>Open Build Service のアーキテクチャの説明</li>
<li>フロントエンドは Rails</li>
<li><a href="https://goo.gl/OSBNqv">https://goo.gl/OSBNqv</a></li>
<li><a href="https://goo.gl/2rNPMx">https://goo.gl/2rNPMx</a></li>
<li>デモはディスクフルで終了</li>
</ul>


<h2>昼食及びPGP/GPGキーサインパーティ</h2>

<p>パスポートを机の上に準備していたのに持ってくるのを忘れてしまっていて、
ID が運転免許証しかなかったので、日本人とだけにしておきました。</p>

<h2>OSS license 101</h2>

<ul>
<li>ライセンスは一部の権利を許諾するもの</li>
<li>著作権の他に特許、商標、契約も関係する</li>
<li>商標の例: &ldquo;Firefox&rdquo; と Iceweasel</li>
<li>契約の例: Red Hat エンタープライズ契約書</li>
<li>「5.2 検査。」という項目がある</li>
<li>ライセンスを選ぶ</li>
<li>目的に合わせて</li>
<li>万能のライセンスはない</li>
<li>ライセンスを独自に作るのはよくない</li>
<li>OSS ライセンスは well-tested library</li>
<li>独自ライセンスは使うときに吟味が必要になるし、互換性も問題になる</li>
<li>コードを書きたい人は既存のライセンスを使ってコードを書いていた方が生産性が高い</li>
<li>Proprietary license vs OSS license</li>
<li>Default deny vs Default allow</li>
<li>Whitelist vs Blacklist</li>
<li>The Open Source Definition (Annotated) <a href="https://opensource.org/osd-annotated/">https://opensource.org/osd-annotated/</a></li>
<li>DFSG-free (OSS), OSI-Certified and fake-OSS</li>
<li>Well-known OSS license</li>
<li>どのライセンスが良いか?</li>
<li>目的と利用方法によって変わる</li>
<li>Copyleft vs Permissive <a href="https://www.gnu.org/licenses/copyleft.ja.html">https://www.gnu.org/licenses/copyleft.ja.html</a></li>
<li>patent-free or not</li>
<li>Domain-specific</li>
<li>OFL,CC,GFDL, etc.</li>
<li>残りの時間はライセンスがらみの雑談</li>
<li>Zstd <a href="https://github.com/facebook/zstd">https://github.com/facebook/zstd</a></li>
<li>BSD-3-clause license However, its &ldquo;PATENTS&rdquo; file says</li>
<li>Zfs (GPL vs CDDL) by Canonical, Ltd.</li>
<li>GPL: Linux &ldquo;T-800&rdquo; issue</li>
<li>第三者はソースコードを請求できない</li>
<li>「Linux で稼働しているターミネーターを掴まえたとしても、そのバイナリの所有権を得たわけではないので、ソースコードは請求できない。」 <a href="https://twitter.com/elim/status/807442658830336001">https://twitter.com/elim/status/807442658830336001</a></li>
</ul>


<h2>Go言語で書かれたソフトウェアをDebianパッケージにする方法</h2>

<ul>
<li><a href="https://twitter.com/tSU_RooT">https://twitter.com/tSU_RooT</a></li>
<li>GPG ID: 63A6 000E</li>
<li>peco の Debian パッケージを入れた人</li>
<li>dh-make-golang</li>
<li>佐々木さんは自分用パッケージを作ったが、メンテナンスするプログラミング言語を増やしたくなかったので公式にはあげなかったらしい</li>
<li>公式に入れるとメリットが多い</li>
<li>公式に入ったっときのデメリットはパッケージメンテナがアップデートに追随してくれないことがある</li>
<li>パッケージに限らない問題</li>
<li>下準備</li>
<li>sid の環境を用意</li>
<li>リポジトリの確認</li>
<li>ソースコードからビルドできるか</li>
<li>ライセンスが付属しているか</li>
<li>go get するだけでビルドできるか</li>
<li>依存ライブラリがすでにパッケージになっているか</li>
<li>依存ライブラリも同じチェック</li>
<li>ライセンスがない場合: issue でお願いする</li>
<li>複雑なビルド手順が必要な場合: debian/rules で頑張る必要がある、今回は対象外</li>
<li>依存ライブラリが多い場合</li>
<li>ライセンス確認</li>
<li>例えば、サンプルに Gopher くんの画像がついていたら debian/copyright に明記する必要あり</li>
<li>pkg-go.alioth.debian.org</li>
<li>パッケージの命名規則がある</li>
<li>fork したリポジトリも別パッケージで問題ない</li>
<li>Go 1.6 で正式導入された vendor ディレクトリの扱いはまだ完全には決まってないっぽい</li>
<li>peco (v0.4.2) での実例</li>
<li>依存パッケージの話</li>
<li><code>apt showsrc golang-go-flags-dev 2&gt;/dev/null | grep Homepage</code> で upstream を確認</li>
<li>古いパッケージで依存なしで消えていたものを復活させた</li>
<li>lintian の警告を消す</li>
<li>debian/copyright を書く</li>
<li>debian/changelog を直す (ITP の番号を埋める、UNRELEASED を unstable に)</li>
<li>debian/control の README から自動で生成された説明文を直す</li>
<li>ライブラリパッケージすべてに行う</li>
<li>バイナリパッケージは man ページも用意する</li>
<li>今回話せなかったこと</li>
<li>参考資料</li>
<li>質疑応答</li>
<li>pristine-tar と git-buildpackage の話</li>
</ul>


<h2>Certbotで無料TLSサーバー</h2>

<p>Certbotで無料TLSサーバーというタイトルで発表しました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/debian-certbot/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/debian-certbot/" title="Certbotで無料TLSサーバー">Certbotで無料TLSサーバー</a>
</div>


<p><a href="https://github.com/sorah/acmesmith">https://github.com/sorah/acmesmith</a> というクライアントもあるらしい。</p>

<p><a href="https://github.com/dokku/dokku-letsencrypt">https://github.com/dokku/dokku-letsencrypt</a> で使っている <code>simp_le</code> は 開発が止まっている ( <a href="https://github.com/kuba/simp_le/issues/114">https://github.com/kuba/simp_le/issues/114</a> )。</p>

<h2>休憩及び集合写真撮影</h2>

<p>集合写真を撮影して、おやつ休憩がありました。</p>

<h2>FOSS バーチャルシンガー 徴音梅林 と LINNE プラットホーム</h2>

<ul>
<li>英語なので頑張って聞いていました。</li>
<li><a href="http://projectmeilin.github.io/ja/">http://projectmeilin.github.io/ja/</a></li>
</ul>


<h2>最近のGnuPG</h2>

<ul>
<li>二ヶ国語でプレゼン</li>
<li>メモリ不足でプレゼンツールがうまく動かないので佐々木さんのマシンに切り替え</li>
<li>Jessie は gnupg パッケージは 1.4 (新しいバージョンは gnupg2 パッケージ)</li>
<li>Stretch は gnupg パッケージは 2.1 (古いバージョンは gnupg1 パッケージ)</li>
<li>GnuPG 2.1?</li>
<li>公開鍵のフォーマットが KBX に変わった。(昔の形式もサポート)</li>
<li>プライベート鍵は gpg-agent が管理するようになった。</li>
<li>gpg, gpg-agent, pinentry, scdaemon, dirmngr, (gpgsm, ssh)</li>
<li>おすすめの使い方</li>
<li>gpg-agent を ssh-agent として使う</li>
<li>Token を使う</li>
<li>Curve25519 を使う (Ed25519/X25519 is more secure, key is small, fast)</li>
<li>キーサインパーティー</li>
<li>WKD: Web key directory</li>
<li>ToFU: Trust On First Use</li>
<li>g13 + dm-crypt</li>
<li>質疑応答</li>
<li>RSA 鍵からの移行</li>
<li>サブキーの追加よりも新規に作るのがおすすめ</li>
<li>gnuk の話</li>
<li>curve25519 サポートしている</li>
<li>楕円曲線暗号は輸出入の規制にひっかかることがある</li>
</ul>


<h2>休憩</h2>

<p>2つの部屋をくっつけて広くなった。</p>

<h2>DebConf 2018 台湾 参加表明準備とステータスの更新</h2>

<ul>
<li>英語なので twitter の <code>#debianjp</code> を参考にして頑張って聞いていました。</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>アンケート: <a href="https://goo.gl/BsPrgA">https://goo.gl/BsPrgA</a></li>
</ul>


<h2>懇親会</h2>

<ul>
<li>LT 大会をやっていました。</li>
<li>全体的にマイクの通りが悪いのか、英語に限らず話が聞き取りにくかったです。</li>
<li>Unicode の <a href="https://ja.wikipedia.org/wiki/%E6%BC%A2%E5%AD%97%E8%A8%98%E8%BF%B0%E8%A8%80%E8%AA%9E#.E6.BC.A2.E5.AD.97.E6.A7.8B.E6.88.90.E8.A8.98.E8.BF.B0.E6.96.87.E5.AD.97.E5.88.97_.28IDS.29" title="漢字構成記述文字列 (Ideographic Description Sequence; IDS)">漢字構成記述文字列 (Ideographic Description Sequence; IDS)</a> ですごい漢字を出しているのとか自作 OS の話とかが印象に残りました。</li>
<li>2回あった自動販売機の話もなかなか面白かったです。 <a href="https://twitter.com/OrientalHistory/status/807530627293593600">https://twitter.com/OrientalHistory/status/807530627293593600</a> <a href="https://twitter.com/OrientalHistory/status/807535513779322880">https://twitter.com/OrientalHistory/status/807535513779322880</a></li>
<li>セッション中は結局 LibreOffice Kaigi 2016.12 の方はいけなかったが、 LibreOffice 側にいた人とも話ができてよかった。</li>
<li>昔の RubyKaigi でセッションがのびたのに別の部屋の次のセッションは始まってしまって、両方見たかった人が最初の方を見逃すということがあって、その後、別の部屋とも同期をとるようになったということがあったのを思い出したのですが、別イベントなので、そこまで同期を取る必要はないにしても、せめてセッションの開始終了予定時刻が同じくらいの時間になっていれば、相互に行き来が発生しやすかったのではないかと思いました。</li>
<li>この話は LibreOffice 側の人にしたのですが、もともとイベントの企画は別々に始まっていて、たまたま会場と日付が一緒だったから合同にしたという流れだったようで、そこまで考えていなかったということのようでした。</li>
</ul>


<h2>まとめ</h2>

<p>k-of.jp で発表者募集を見て応募するまで参加する予定は全くなかったので、
前回会ったのがいつだったか忘れるぐらい久しぶりに会った人もいて、
全体としては楽しかったので、
参加して良かったと思いました。</p>
]]></content>
  </entry>
  
</feed>
