<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debian | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/debian/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-07-05T10:55:39+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[caffでキーサインした]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-22-key-sign-caff.html"/>
    <updated>2014-06-22T19:07:19+09:00</updated>
    <id>http://blog.n-z.jp/blog/key-sign-caff</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20140622" title="第 85 回 関西 Debian 勉強会">第 85 回 関西 Debian 勉強会</a>
で
<a href="https://launchpad.net/~mocchi">坂本さん</a>とキーサインをしたので、そのメモです。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 12.04.4 LTS</li>
<li>gnupg 1.4.11-3ubuntu2.5</li>
<li>signing-party 1.1.4-1</li>
</ul>


<h2>事前準備</h2>

<p>事前にキーサインをするとわかっていれば <code>gpg-key2ps</code> コマンドで fingerprint の紙を用意しておくと良いと思います。
今回は少人数だったので、
fingerprint は画面上で見せて確認してもらいました。</p>

<h2>本人確認</h2>

<p>対面で運転免許証などの写真付きの身分証明書で名前を確認して、
それと署名対象の鍵の uid に入っている名前が一致するのを確認しておきます。
また、後で署名するために fingerprint の情報も入手しておきます。</p>

<h2>caff の設定</h2>

<p>基本的には
<a href="http://tokyodebian.alioth.debian.org/pdf/debianmeetingresume200910-presentation.pdf">Why GPG Key sign? 東京エリア Debian 勉強会 in OSC 2009 Tokyo/Fall</a>
の PDF の内容のままです。</p>

<h3>.caffrc</h3>

<p>自分の鍵 ID を <code>gpg --list-secret-keys</code> で確認すると、
<code>4096R/B4222F7A</code> とわかるので、
<code>gpg --fingerprint B4222F7A</code>
で fingerprint 全体を確認しておきます。
(fingerprint の末尾が鍵 ID です。)</p>

<p>spam よけのために email のところはちょっと改変していますが、
<code>~/.caffrc</code> は以下のように設定しています。
<code>keyid</code> は fingerprint の末尾のうち、
設定例と同じ長さだけ普通の鍵 ID よりちょっと長めに取り出して設定しています。
<code>owner</code> と <code>email</code> はメール送信の時に使われます。</p>

<p>```perl ~/.caffrc</p>

<pre><code># .caffrc -- vim:ft=perl:
# This file is in perl(1) format - see caff(1) for details.

$CONFIG{'owner'} = 'Kazuhiro NISHIYAMA';
$CONFIG{'email'} = 'zn mbf.nifty.com';
#$CONFIG{'reply-to'} = 'foo@bla.org';

# You can get your long keyid from
#   gpg --with-colons --list-key &lt;yourkeyid|name|emailaddress..&gt;
#
# If you have a v4 key, it will simply be the last 16 digits of
# your fingerprint.
#
# Example:
#   $CONFIG{'keyid'} = [ qw{FEDCBA9876543210} ];
#  or, if you have more than one key:
#   $CONFIG{'keyid'} = [ qw{0123456789ABCDEF 89ABCDEF76543210} ];
$CONFIG{'keyid'} = [ qw{262ED8DBB4222F7A} ];

# Select this/these keys to sign with
#$CONFIG{'local-user'} = [ qw{EE739B28C657086C 9B585538ED7E1B73 262ED8DBB4222F7A C9429DABCB28285B} ];

# Additionally encrypt messages for these keyids
#$CONFIG{'also-encrypt-to'} = [ qw{EE739B28C657086C 9B585538ED7E1B73 262ED8DBB4222F7A C9429DABCB28285B} ];

# Mail template to use for the encrypted part
#$CONFIG{'mail-template'} = &lt;&lt; 'EOM';
#Hi,
#
#please find attached the user id{(scalar @uids &gt;= 2 ? 's' : '')}
#{foreach $uid (@uids) {
#    $OUT .= "\t".$uid."\n";
#};}of your key {$key} signed by me.
#
#If you have multiple user ids, I sent the signature for each user id
#separately to that user id's associated email address. You can import
#the signatures by running each through `gpg --import`.
#
#Note that I did not upload your key to any keyservers. If you want this
#new signature to be available to others, please upload it yourself.
#With GnuPG this can be done using
#       gpg --keyserver pool.sks-keyservers.net --send-key {$key}
#
#If you have any questions, don't hesitate to ask.
#
#Regards,
#{$owner}
#EOM
</code></pre>

<p>```</p>

<h3>~/.caff/gnupghome/gpg.conf の設定</h3>

<p>以前参考にした設定のまま</p>

<p><code>text ~/.caff/gnupghome/gpg.conf
keyserver pgp.mit.edu
cert-digest-algo SHA256
personal-digest-preferences SHA256
</code></p>

<p>となっていました。
PDF では SHA512 になっていたので、
SHA256 から SHA512 に変更しました。
今日の caff での署名した時点では SHA256 のままだったので、
次回から変わる予定です。</p>

<p><code>text ~/.caff/gnupghome/gpg.conf
keyserver pgp.mit.edu
cert-digest-algo SHA512
personal-digest-preferences SHA512
</code></p>

<h2>caff -u で署名</h2>

<p>spam よけのためメールアドレスの所は改変した状態のログは以下の通りです。
「本当に署名しますか? (y/N)」のところで身分証明書と一緒に確認した fingerprint と合っているか確認します。</p>

<p>最後にメールを送信して終了です。
相手の鍵で暗号化されたメールが localhost の SMTP サーバー送信されます。</p>

<p>```console</p>

<pre><code>% caff -u B4222F7A D66FD341
[INFO] Importing key 262ED8DBB4222F7A from your normal GnuPGHome.
[INFO] fetching keys, this will take a while...
[INFO] Sign the following keys according to your policy, then exit gpg with 'save' after signing each key
gpg --local-user B4222F7A --homedir=/home/kazu/.caff/gnupghome --secret-keyring /home/kazu/.gnupg/secring.gpg --no-auto-check-trustdb --trust-model=always --edit 25DA5B9699F132DB74BD2270B5A586C7D66FD341 sign
gpg (GnuPG) 1.4.11; Copyright (C) 2010 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.


pub  4096R/D66FD341  作成: 2014-06-22  満了: 無期限       利用法: SC
sub  4096R/5D3BA622  作成: 2014-06-22  満了: 無期限       利用法: E
[ unknown] (1). Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt;


pub  4096R/D66FD341  作成: 2014-06-22  満了: 無期限       利用法: SC
 主鍵の指紋: 25DA 5B96 99F1 32DB 74BD  2270 B5A5 86C7 D66F D341

     Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt;

本当にこの鍵にあなたの鍵“Kazuhiro NISHIYAMA &lt;zn mbf.nifty.com&gt;”で署名してよいですか
(B4222F7A)

本当に署名しますか? (y/N) y

次のユーザーの秘密鍵のロックを解除するには
パスフレーズがいります:“Kazuhiro NISHIYAMA &lt;zn mbf.nifty.com&gt;”
4096ビットRSA鍵, ID B4222F7A作成日付は2010-06-27


gpg&gt; save
[INFO] B5A586C7D66FD341 1 Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt; done.
[INFO] key 25DA5B9699F132DB74BD2270B5A586C7D66FD341 done.
Mail signature for Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt; to 'o-takashi sakamocchi.jp'? [Y/n]
%
</code></pre>

<p>```</p>

<h2>caff からのメールを受け取った相手のすべきこと</h2>

<p>暗号化されたメールが届くので、
対応する秘密鍵を使って復号してメールを確認します。
さらにその中にある署名を自分の鍵束にインポートしてキーサーバーに送信します。</p>

<p>caff のやり方はここでメールアドレスの到達性もチェックしているようなので、
署名した側はキーサーバーに送信する必要はなさそうです。
むしろそういうことをしないようにするために
<code>~/.caff/gnupghome</code> に独自の鍵束を用意しているように思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 85 回 関西 Debian 勉強会に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-22-kansai-debian-meeting.html"/>
    <updated>2014-06-22T13:43:06+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20140622" title="第 85 回 関西 Debian 勉強会">第 85 回 関西 Debian 勉強会</a>
に参加してきました。</p>

<p>そのときのメモです。
詳細は勉強会のページからリンクされている資料を参照してください。</p>

<!--more-->


<h2>Intro</h2>

<ul>
<li>MATE 1.8 が Debian に入ったという話

<ul>
<li><a href="https://www.debian.org/News/weekly/2014/10/" title="Debian Project News - June 9th, 2014">Debian Project News &ndash; June 9th, 2014</a></li>
</ul>
</li>
<li>Debian 6 の LTS (long term support) の話

<ul>
<li>全パッケージが対象というわけではない</li>
<li>たとえば rails とか chromium とかは対象外</li>
</ul>
</li>
<li>Berkeley DB を post jessie で外す予定

<ul>
<li>AGPL に変わったから</li>
</ul>
</li>
<li>事前課題発表と自己紹介

<ul>
<li>おすすめの IM</li>
<li>webwml-git の運用</li>
<li>web-mode.el (melpa にはある)</li>
</ul>
</li>
</ul>


<h2>「Linuxのドライバメンテナになった体験記」(担当：坂本)</h2>

<ul>
<li>質問から派生して残った疑問点

<ul>
<li>character device とは何か (block device との違いは何か)</li>
</ul>
</li>
</ul>


<h2>「Debian での systemd とのつきあい方」(担当：佐々木)</h2>

<p>状況確認コマンドいろいろのメモです。
一部のコマンドは自動で <code>$PAGER</code> を通してくれるようですが、
<code>PAGER=lv</code> の場合は <code>LV=-c</code> がないとエスケープシーケンスが解釈されなくて読みにくくなります。</p>

<ul>
<li><code>systemd-analyze</code></li>
<li><code>systemd-analyze blame</code></li>
<li><code>systemd-analyze plot &gt; systemd-analyze_plot.svg</code></li>
<li><code>systemctl list-dependencies</code></li>
<li><code>systemctl status</code></li>
<li><code>systemctl list-unit-files</code></li>
<li><code>systemctl list-units</code></li>
<li><code>sudo LV=-c journalctl</code></li>
<li><code>systemd-cgls</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian squeeze (6.0) LTS の使い方]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-06-squeeze-lts.html"/>
    <updated>2014-06-06T14:07:35+09:00</updated>
    <id>http://blog.n-z.jp/blog/squeeze-lts</id>
    <content type="html"><![CDATA[<p>OpenSSL の脆弱性
(<a href="http://ccsinjection.lepidum.co.jp/ja.html">CCS Injection</a>,<a href="https://security-tracker.debian.org/tracker/CVE-2014-0224">CVE-2014-0224</a>)
の修正が
<a href="https://lists.debian.org/debian-lts-announce/2014/06/msg00002.html">squeeze の LTS に入ったというアナウンス</a>
があったのに、
今まで通り使っている squeeze には修正が入らないと思って調べてみたところ、
<a href="https://wiki.debian.org/LTS/Using#Add_squeeze-lts_to_your_sources.list">apt-line の追加</a>
が必要でした。</p>

<!--more-->


<h2>追加する apt-line</h2>

<p>既存の <code>/etc/apt/sources.list</code> に</p>

<pre><code>deb http://ftp.jp.debian.org/debian squeeze main non-free contrib
deb-src http://ftp.jp.debian.org/debian squeeze main non-free contrib

deb http://security.debian.org/ squeeze/updates main contrib non-free
deb-src http://security.debian.org/ squeeze/updates main contrib non-free

# squeeze-updates, previously known as 'volatile'
deb http://ftp.jp.debian.org/debian squeeze-updates main contrib non-free
deb-src http://ftp.jp.debian.org/debian squeeze-updates main contrib non-free
</code></pre>

<p>という apt-line を設定したとすると、</p>

<pre><code>deb http://ftp.jp.debian.org/debian squeeze-lts main non-free contrib
deb-src http://ftp.jp.debian.org/debian squeeze-lts main non-free contrib
</code></pre>

<p>を <strong>追加</strong> します。</p>

<p>ネタ元の Debian Wiki に書いてあるように適切に使うには squeeze と squeeze security の apt-line も残した上で squeeze lts の apt-line を <strong>追加</strong> する必要があります。</p>

<h2>apt pinning を使っている時の注意点</h2>

<p><code>/etc/apt/apt.conf</code> で</p>

<pre><code>APT::Default-Release "squeeze";
</code></pre>

<p>のように設定している場合はコメントアウトするか</p>

<pre><code>APT::Default-Release "squeeze-lts";
</code></pre>

<p>に書き換える必要があります。</p>

<h2>更新の反映</h2>

<p>いつも通り <code>apt-get update</code> と <code>apt-get upgrade</code> で更新できます。</p>

<h2>サポート対象外のパッケージを調べる</h2>

<p><code>squeeze-lts</code> の apt-line を追加すると <code>debian-security-support</code> というパッケージがインストールできるようになります。</p>

<p><code>debian-security-support</code> パッケージをインストール中にサポート対象外のパッケージについての情報が表示されます。
インストール後は <code>check-support-status</code> で同じ内容が表示できます。</p>

<p>Ubuntu には <code>ubuntu-support-status</code> というコマンドがあるので、似たようなものが Debian にもできたということでしょうか。
<code>debian-security-support</code> パッケージは今のところ <code>sid</code> と <code>squeeze-lts</code> にだけあるようです。</p>

<h2>aptitude 検索パターンで LTS に収録されているパッケージ一覧</h2>

<p><code>aptitude search '~A squeeze-lts'</code> で <code>squeeze-lts</code> に収録されているパッケージ一覧が調べられます。</p>

<p>今のところ、</p>

<ul>
<li><code>chkrootkit</code></li>
<li><code>debian-security-support</code></li>
<li><code>gnutls</code> 関係</li>
<li><code>hello</code></li>
<li><code>openssl</code> 関係</li>
</ul>


<p>がありました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible で sources.list を変更したときに update する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-20-ansible-apt-update.html"/>
    <updated>2014-05-20T22:58:09+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-apt-update</id>
    <content type="html"><![CDATA[<p>ansible で sources.list を変更したときには
<code>apt-get update</code> して欲しいのですが、
毎回 update するのは無駄なので、
<code>cache_valid_time</code> も使いたいと思ったので対処しました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>クライアント側 ansible 1.6.1</li>
<li>サーバー側 Ubuntu 12.04</li>
</ul>


<h2>やり方</h2>

<p><code>register</code> で <code>template</code> モジュールの実行結果を受けて、
<code>changed</code> の場合は必ず update して、
<code>skipped</code> の場合は <code>cache_valid_time</code> で情報が古い場合だけ update するようにしました。</p>

<p></p>

<h2>```yaml tasks/apt.yaml</h2>

<ul>
<li>template: src=sources.list.{{ ansible_distribution }}.j2 dest=/etc/apt/sources.list owner=root group=root mode=0644
register: apt_sources_list</li>
<li>apt: update_cache=yes
when: apt_sources_list|changed</li>
<li>apt: update_cache=yes cache_valid_time=3600
when: apt_sources_list|skipped
```
</li>
</ul>


<h2>テンプレートの内容</h2>

<p>gathering facts で設定された <code>ansible_distribution_release</code> と
<code>vars</code> で別途設定した <code>apt_ubuntu_uri</code> と <code>apt_ubuntu_components</code> を
組み合わせて apt-line を作るようにしました。</p>

<p>Ubuntu をインストールした直後の sources.list では
components が別の行になっているものもあったのですが、
1 行にまとめました。</p>

<p>
```text templates/sources.list.Ubuntu.j2
deb {{ apt_ubuntu_uri }} {{ ansible_distribution_release }} {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb-src {{ apt_ubuntu_uri }} {{ ansible_distribution_release }} {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-updates {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb-src {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-updates {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}</p>

<h1>deb {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-backports {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}</h1>

<h1>deb-src {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-backports {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}</h1>

<p>deb <a href="http://security.ubuntu.com/ubuntu">http://security.ubuntu.com/ubuntu</a> {{ ansible_distribution_release }}-security {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb-src <a href="http://security.ubuntu.com/ubuntu">http://security.ubuntu.com/ubuntu</a> {{ ansible_distribution_release }}-security {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
```
</p>

<p><code>backports</code> は使っていなかったのでコメントアウトしていますが、
<code>deb-src</code> も使わないのならコメントアウトしておいても良さそうです。</p>

<h2><code>vars</code> の内容</h2>

<p>例として jaist ミラーを使うようにしました。</p>

<h2>```yaml vars/main.yml</h2>

<p>apt_ubuntu_uri: &ldquo;<a href="http://ftp.jaist.ac.jp/pub/Linux/ubuntu/">http://ftp.jaist.ac.jp/pub/Linux/ubuntu/</a>&rdquo;
apt_ubuntu_components:
&ndash; main
&ndash; restricted
&ndash; universe
&ndash; multiverse
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenSSL/GnuTLS での CSR の作り方]]></title>
    <link href="http://blog.n-z.jp/blog/2014-04-16-new-csr.html"/>
    <updated>2014-04-16T10:09:24+09:00</updated>
    <id>http://blog.n-z.jp/blog/new-csr</id>
    <content type="html"><![CDATA[<p>サーバー証明書を発行してもらう時などに毎回調べつつ CSR を作成しているので、
GnuTLS と OpenSSL を使った方法をまとめてみました。</p>

<!--more-->


<h2>パッケージインストール</h2>

<p>OpenSSL の方は入っていることが多いと思いますが、入っていなければ <code>openssl</code> パッケージをいれておきます。</p>

<p>GnuTLS の方は Debian や Ubuntu の場合は <code>gnutls-bin</code> パッケージに <code>gnutls-cli</code> コマンドなどが入っています。
RHEL などでは <code>gnutls-utils</code> というパッケージに入っているらしいです。</p>

<h2>certtool コマンド</h2>

<p><code>certtool</code> コマンドは Mac OS X にもありますが、 GnuTLS のものとは別物です。
ここで説明しているのは GnuTLS の <code>certtool</code> コマンドです。</p>

<h2>秘密鍵作成</h2>

<p>秘密鍵の生成はランダムな情報を元に生成するので、ビット数やエントロピーの量に応じて時間がかかります。
デスクトップマシンなどではマウスを動かすなどの方法でエントロピーを増やすことが出来るかもしれません。</p>

<p>作成されるファイルのパーミッションなどを考えると暗号化しないなら GnuTLS の
<code>certtool --generate-privkey --bits 4096 --outfile example.key</code>
の方法がオススメです。</p>

<h3>GnuTLS</h3>

<p>GnuTLS の <code>certtool</code> コマンドでは <code>--generate-privkey</code> で秘密鍵を作成できます。
<code>--bits</code> で鍵のビット数を指定しないと squeeze だと 2048 ビット、 precise や wheezy だと 2432 ビットになりました。
ファイルのパーミッションも <code>-rw-------</code> (600) で作成されるので、そのまま使えます。</p>

<p><code>console gnutls
$ certtool --generate-privkey --outfile example-tls.key
Generating a 2432 bit RSA private key...
</code></p>

<p><code>console gnutls
$ certtool --generate-privkey --bits 4096 --outfile example-tls.key
Generating a 4096 bit RSA private key...
</code></p>

<h3>OpenSSL</h3>

<p>OpenSSL では <code>genrsa</code> サブコマンドで生成します。
OpenSSL 1.0.0 では <code>genpkey</code> サブコマンドになっているようですが、
<code>genrsa</code> もまだ使えるので、以下は <code>genrsa</code> だけ書いています。</p>

<p>ビット数を指定しないと squeeze だと 1024 ビット、 precise や wheezy だと 512 ビットになりました。
また、そのままだとパーミッションが <code>-rw-rw-r--</code> (664) で生成されるので、あらかじめパーミッションを設定したファイルを用意しておいて上書きさせるか、すぐに <code>chmod</code> で変更しておいた方が良さそうです。</p>

<p><code>console openssl
$ touch example-ssl.key
$ chmod 600 example-ssl.key
$ openssl genrsa -out example-ssl.key
Generating RSA private key, 512 bit long modulus
....++++++++++++
.........................++++++++++++
e is 65537 (0x10001)
</code></p>

<p><code>console openssl
$ touch example-ssl.key
$ chmod 600 example-ssl.key
$ openssl genrsa -out example-ssl.key 4096
Generating RSA private key, 4096 bit long modulus
......................................................++
...........++
e is 65537 (0x10001)
</code></p>

<p>ネット上見つかる情報では <code>-des3</code> などで生成したファイルを一度暗号化して、
サーバーの起動時に不要になるようにすぐに外すような例もあるようですが、
そんなことをするぐらいなら最初から暗号化せずに生成すれば良いと思います。</p>

<p>暗号化した状態のファイルを別途バックアップするなどの目的があるのなら、
意味があると思いますが、
暗号化した状態のファイルを残さないのなら単なる無駄だと思います。</p>

<h2>秘密鍵の内容確認</h2>

<p>秘密鍵の内容を確認することはあまりないと思いますが、
<code>openssl rsa -in example.key -text -noout</code>
の方法がオススメです。</p>

<h3>OpenSSL</h3>

<p>OpenSSL で秘密鍵の内容を確認するには <code>rsa</code> サブコマンドを使います。
<code>-text</code> で内容全体の表示で <code>-noout</code> は <code>-----BEGIN RSA PRIVATE KEY-----</code> から <code>-----END RSA PRIVATE KEY-----</code> を表示しないという意味です。
秘密鍵本体の前にテキストの説明がついたものも元の秘密鍵と同様に扱えるようなので、
デフォルトでは元の内容も出力するようになっているのだと思います。</p>

<p>```console openssl
$ openssl rsa -in example-ssl.key -text -noout
Private-Key: (4096 bit)
modulus:</p>

<pre><code>00:cb:35:ec:f6:00:5a:75:d7:55:14:f8:55:91:1a:
(略)
</code></pre>

<p>publicExponent: 65537 (0x10001)
privateExponent:</p>

<pre><code>4d:86:de:47:a0:2c:e2:e6:6b:2c:5b:ed:f1:35:10:
(略)
</code></pre>

<p>prime1:</p>

<pre><code>00:ef:49:b3:f8:4c:1e:a9:13:a9:fb:86:7e:80:7a:
(略)
</code></pre>

<p>prime2:</p>

<pre><code>00:d9:67:2f:e1:4c:13:78:fa:dd:2b:7a:3e:f5:68:
(略)
</code></pre>

<p>exponent1:</p>

<pre><code>00:ba:18:ee:ff:a7:6b:9d:01:2f:0c:f0:0f:88:29:
(略)
</code></pre>

<p>exponent2:</p>

<pre><code>52:93:94:27:32:5b:4f:1f:92:74:9a:39:61:c3:ae:
(略)
</code></pre>

<p>coefficient:</p>

<pre><code>44:e9:a2:de:87:e7:2d:f0:57:58:d6:fc:85:20:df:
(略)
</code></pre>

<p>```</p>

<h3>GnuTLS</h3>

<p>GnuTLS の <code>certtool</code> で秘密鍵の内容を確認するには <code>-k</code> (<code>--key-info</code>) を使います。
<code>openssl</code> の <code>-noout</code> 相当のオプションは見つけられませんでした。</p>

<p>```console gnutls
$ certtool -k &mdash;infile example-tls.key
Public Key Info:</p>

<pre><code>    Public Key Algorithm: RSA
    Key Security Level: High
</code></pre>

<p>modulus:</p>

<pre><code>    00:da:45:da:ca:13:ac:59:43:55:87:68:04:16:1a:
    (略)
</code></pre>

<p>public exponent:</p>

<pre><code>    01:00:01:
</code></pre>

<p>private exponent:</p>

<pre><code>    3c:5b:18:96:cc:3d:da:28:fe:5b:84:ed:ac:56:e2:
    (略)
</code></pre>

<p>prime1:</p>

<pre><code>    00:dc:f3:92:13:d5:c7:cf:bc:9f:76:b3:f6:a2:60:
    (略)
</code></pre>

<p>prime2:</p>

<pre><code>    00:fc:e5:83:0e:2e:d4:a1:be:37:bf:05:6e:c3:d3:
    (略)
</code></pre>

<p>coefficient:</p>

<pre><code>    63:74:e3:95:9e:d6:6c:7d:d9:2d:ad:45:f8:0b:1a:
    (略)
</code></pre>

<p>exp1:</p>

<pre><code>    00:a1:1d:a7:9e:79:1c:2b:da:42:79:bf:7f:10:26:
    (略)
</code></pre>

<p>exp2:</p>

<pre><code>    00:b3:be:9c:ab:53:f5:a5:10:01:a7:2f:41:4e:c5:
    (略)
    c4:31:
</code></pre>

<p>Public Key ID: 45:44:BC:C4:BB:95:24:97:5D:C2:95:BF:27:95:02:2C:50:09:9E:35</p>

<p>&mdash;&mdash;-BEGIN RSA PRIVATE KEY&mdash;&mdash;&ndash;
(略)
&mdash;&mdash;-END RSA PRIVATE KEY&mdash;&mdash;&ndash;</p>

<p>```</p>

<h2>CSR 作成と内容確認</h2>

<p>OpenSSL は <code>openssl req</code> で作成も内容の確認も出来ます。
GnuTLS の <code>certtool</code> は <code>-q</code> (<code>--generate-request</code>) で作成して
<code>--crq-info</code> で内容を確認できます。</p>

<p>以下の例ではそれぞれで作成して、両方で内容を確認しています。</p>

<h3>OpenSSL</h3>

<p>OpenSSL では <code>C</code> と <code>ST</code> と <code>O</code> にデフォルト値が入っていて、
対話的に作成しつつ空欄にしたい時は
別途 <code>openssl.cnf</code> を用意する必要がありそうです。</p>

<p>```console openssl
$ openssl req -new -key example-ssl.key -out example-ssl.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,</p>

<h2>If you enter &lsquo;.&rsquo;, the field will be left blank.</h2>

<p>Country Name (2 letter code) [AU]:JP
State or Province Name (full name) [Some-State]:Osaka
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:ssl.example.jp
Email Address []:</p>

<p>Please enter the following &lsquo;extra&rsquo; attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
$ openssl req -in example-ssl.csr -text -noout
Certificate Request:</p>

<pre><code>Data:
    Version: 0 (0x0)
    Subject: C=JP, ST=Osaka, O=Internet Widgits Pty Ltd, CN=ssl.example.jp
    Subject Public Key Info:
        Public Key Algorithm: rsaEncryption
            Public-Key: (4096 bit)
            Modulus:
                00:cb:35:ec:f6:00:5a:75:d7:55:14:f8:55:91:1a:
                (略)
            Exponent: 65537 (0x10001)
    Attributes:
        a0:00
Signature Algorithm: sha1WithRSAEncryption
     4f:1a:a7:57:9f:88:f3:17:23:aa:51:12:11:ff:c0:24:31:4c:
     (略)
</code></pre>

<p>$ certtool &mdash;crq-info &mdash;infile example-ssl.csr
PKCS #10 Certificate Request Information:</p>

<pre><code>    Version: 1
    Subject: C=JP,ST=Osaka,O=Internet Widgits Pty Ltd,CN=ssl.example.jp
    Subject Public Key Algorithm: RSA
            Modulus (bits 4096):
                    cb:35:ec:f6:00:5a:75:d7:55:14:f8:55:91:1a:9b:83
                    (略)
            Exponent:
                    01:00:01
</code></pre>

<p>Other Information:</p>

<pre><code>    Public Key Id:
            c14459bdb79e6b71e6303e4ffd9c7ab43dc9b9df
</code></pre>

<p>&mdash;&mdash;-BEGIN NEW CERTIFICATE REQUEST&mdash;&mdash;&ndash;
(略)
&mdash;&mdash;-END NEW CERTIFICATE REQUEST&mdash;&mdash;&ndash;
```</p>

<h3>GnuTLS</h3>

<p>GnuTLS ではテンプレートファイルを作成しておいて <code>--template</code> で指定する方法が多いようですが、
対話的にも作成できました。
<code>Subject</code> を <code>CN</code> だけにするのは OpenSSL より簡単に出来たのですが、
<code>Requested Extensions</code> が設定されるようなので、
不要な場合には困りそうです。</p>

<p>```console gnutls
$ certtool -q &mdash;load-privkey example-tls.key &mdash;outfile example-tls.csr
Generating a PKCS #10 certificate request&hellip;
Country name (2 chars):
Organization name:
Organizational unit name:
Locality name:
State or province name:
Common name: tls.example.jp
UID:
Enter a dnsName of the subject of the certificate:
Enter the IP address of the subject of the certificate:
Enter the e-mail of the subject of the certificate:
Enter a challenge password:
Does the certificate belong to an authority? (y/N):
Will the certificate be used for signing (DHE and RSA-EXPORT ciphersuites)? (y/N):
Will the certificate be used for encryption (RSA ciphersuites)? (y/N):
Is this a TLS web client certificate? (y/N):
Is this also a TLS web server certificate? (y/N):
$ openssl req -in example-tls.csr -text -noout
Certificate Request:</p>

<pre><code>Data:
    Version: 0 (0x0)
    Subject: CN=tls.example.jp
    Subject Public Key Info:
        Public Key Algorithm: rsaEncryption
            Public-Key: (4096 bit)
            Modulus:
                00:da:45:da:ca:13:ac:59:43:55:87:68:04:16:1a:
                (略)
            Exponent: 65537 (0x10001)
    Attributes:
    Requested Extensions:
        X509v3 Basic Constraints: critical
            CA:FALSE
        X509v3 Key Usage: critical
            Digital Signature
Signature Algorithm: sha1WithRSAEncryption
     cb:71:d2:c9:a2:97:14:74:f0:63:69:6b:36:31:ff:ce:f2:a0:
     (略)
</code></pre>

<p>$ certtool &mdash;crq-info &mdash;infile example-tls.csr
PKCS #10 Certificate Request Information:</p>

<pre><code>    Version: 1
    Subject: CN=tls.example.jp
    Subject Public Key Algorithm: RSA
            Modulus (bits 4096):
                    da:45:da:ca:13:ac:59:43:55:87:68:04:16:1a:09:41
                    (略)
            Exponent:
                    01:00:01
    Attributes:
            Extensions:
                    Basic Constraints (critical):
                            Certificate Authority (CA): FALSE
                    Key Usage (critical):
                            Digital signature.
</code></pre>

<p>Other Information:</p>

<pre><code>    Public Key Id:
            4544bcc4bb9524975dc295bf2795022c50099e35
</code></pre>

<p>&mdash;&mdash;-BEGIN NEW CERTIFICATE REQUEST&mdash;&mdash;&ndash;
(略)
&mdash;&mdash;-END NEW CERTIFICATE REQUEST&mdash;&mdash;&ndash;
```</p>

<h2>まとめて作成</h2>

<p>CSR の生成の時に秘密鍵を指定しないと、
CSR と一緒に秘密鍵を生成できるようです。</p>

<h3>OpenSSL</h3>

<p><code>openssl req -new</code> で <code>-key</code> の代わりに <code>-newkey</code> などを指定すると CSR と一緒に秘密鍵も生成できます。
この場合もそのままだとパーミッションが <code>-rw-rw-r--</code> (664) になるようなので、注意が必要です。
<code>-nodes</code> を付けないと暗号化するためのパスフレーズを要求されます。</p>

<p>```console openssl
$ openssl req -new -newkey rsa:4096 -nodes -keyout server.key -out server.csr
Generating a 4096 bit RSA private key
&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;++
&hellip;&hellip;++</p>

<h2>writing new private key to &lsquo;server.key&rsquo;</h2>

<p>You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,</p>

<h2>If you enter &lsquo;.&rsquo;, the field will be left blank.</h2>

<p>Country Name (2 letter code) [AU]:JP
State or Province Name (full name) [Some-State]:Osaka
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:ssl.example.jp
Email Address []:</p>

<p>Please enter the following &lsquo;extra&rsquo; attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
```</p>

<h3>GnuTLS</h3>

<p><code>certtool -q</code> で <code>--load-privkey</code> を指定しないと秘密鍵も一緒に生成するようです。
出力は <code>--outfile</code> で指定したファイルにまとめて入ってしまって、
使い勝手は良くないので、個別に生成した方が良さそうです。</p>

<p>```console gnutls
$ certtool -q &mdash;outfile out.txt
Generating a PKCS #10 certificate request&hellip;
Generating a 2432 bit RSA private key&hellip;
Country name (2 chars):
Organization name:
Organizational unit name:
Locality name:
State or province name:
Common name: tls.example.jp
UID:
Enter a dnsName of the subject of the certificate:
Enter the IP address of the subject of the certificate:
Enter the e-mail of the subject of the certificate:
Enter a challenge password:
Does the certificate belong to an authority? (y/N):
Will the certificate be used for signing (DHE and RSA-EXPORT ciphersuites)? (y/N):
Will the certificate be used for encryption (RSA ciphersuites)? (y/N):
Is this a TLS web client certificate? (y/N):
Is this also a TLS web server certificate? (y/N):
$ cat out.txt
&mdash;&mdash;-BEGIN RSA PRIVATE KEY&mdash;&mdash;&ndash;
(略)
&mdash;&mdash;-END RSA PRIVATE KEY&mdash;&mdash;&ndash;
PKCS #10 Certificate Request Information:</p>

<pre><code>    Version: 1
    Subject: CN=tls.example.jp
    Subject Public Key Algorithm: RSA
            Modulus (bits 2432):
                    f4:ff:66:e8:c6:19:ab:7b:39:e3:72:ff:ee:13:fa:cf
                    (略)
            Exponent:
                    01:00:01
    Attributes:
            Extensions:
                    Basic Constraints (critical):
                            Certificate Authority (CA): FALSE
                    Key Usage (critical):
                            Digital signature.
</code></pre>

<p>Other Information:</p>

<pre><code>    Public Key Id:
            61c9cef12d691e3373f71ad3a82d1ac4c4b71793
</code></pre>

<p>&mdash;&mdash;-BEGIN NEW CERTIFICATE REQUEST&mdash;&mdash;&ndash;
(略)
&mdash;&mdash;-END NEW CERTIFICATE REQUEST&mdash;&mdash;&ndash;
```</p>
]]></content>
  </entry>
  
</feed>
