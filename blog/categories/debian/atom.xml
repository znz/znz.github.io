<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debian | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/debian/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-12-09T23:55:31+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[debian-goodiesのcheckrestartで再起動が必要なプロセスを調べる]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-06-checkrestart.html"/>
    <updated>2013-12-06T14:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/checkrestart</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/advent-calendar/2013/distro-pm">ディストリビューション/パッケージマネージャー Advent Calendar 2013</a> の 12/6 のところが空いていたので、後から書いています。</p>

<p>この投稿は
<a href="http://qiita.com/advent-calendar/2013/distro-pm">ディストリビューション/パッケージマネージャー Advent Calendar 2013</a>
の6日目の記事です。</p>

<!--more-->


<h2>debian-goodies パッケージ</h2>

<p><a href="http://packages.qa.debian.org/d/debian-goodies.html">debian-goodies パッケージ</a>
には <code>/usr/bin/</code> に複数のコマンドと <code>/usr/sbin/checkrestart</code> が入っています。</p>

<p><code>/usr/bin/</code> のコマンドについては
<a href="http://uwabami.junkhub.org/log/20131204.html#p01">uwabami さんの記事</a>
を参照してください。</p>

<p>ここでは <code>checkrestart</code> を紹介します。</p>

<h2>checkrestart</h2>

<p>ライブラリのパッケージが更新されたときに、
特にセキュリティアップデートだと
そのライブラリを使っているデーモンなども再起動したいと
思うことが多いと思います。</p>

<p>そういうときに <code>checkrestart</code> コマンドを使うと
どのプロセスが置き換えられたライブラリを使っているか
調べることが出来ます。</p>

<h2>使用例 1</h2>

<p>例えば init スクリプトから起動している <code>whoopsie</code>
の再起動が必要なときは以下のようなメッセージが出てくるので、
<code>sudo /etc/init.d/whoopsie restart</code> とか
<code>sudo service whoopsie restart</code> とかで再起動すれば良いと思います。</p>

<p>```
$ sudo checkrestart
Found 1 processes using old versions of upgraded files
(1 distinct program)
(1 distinct packages)</p>

<p>Of these, 1 seem to contain init scripts which can be used to restart them:
The following packages seem to have init scripts that could be used
to restart them:
whoopsie:</p>

<pre><code>    953     /usr/bin/whoopsie
</code></pre>

<p>These are the init scripts:
/etc/init.d/whoopsie restart
```</p>

<h2>使用例 2</h2>

<p>デーモン以外などで起動しているプロセスが使っているファイルが置き換えられた場合、以下のように対応する init script がわからないというメッセージが出てきます。</p>

<p>```
$ sudo checkrestart
Found 1 processes using old versions of upgraded files
(1 distinct program)
(1 distinct packages)
These processes do not seem to have an associated init script to restart them:
ruby1.8:</p>

<pre><code>    906     /usr/bin/ruby1.8
</code></pre>

<p>```</p>

<p>こういうときは
<code>sudo ls -l /proc/906</code> や
<code>sudo cat -v /proc/906/cmdline</code>
などで対応するプログラムを調べて再起動します。</p>

<h2>使用例 3</h2>

<p>再起動が必要なものがみつからなかった場合は以下のようなメッセージが出てきます。</p>

<p><code>
$ sudo checkrestart
Found 0 processes using old versions of upgraded files
</code></p>

<h2>まとめ</h2>

<p>今回は <code>debian-goodies</code> の中から <code>checkrestart</code> を紹介しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[aptitude検索パターンの紹介]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-04-aptitude-search-pattern.html"/>
    <updated>2013-12-04T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/aptitude-search-pattern</id>
    <content type="html"><![CDATA[<p>Debian や Ubuntu のパッケージのインストールなどで
コマンドライン操作では <code>apt-get</code> や <code>aptitude</code>
を使いますが、
ここでは
<code>apt-get</code> では出来ない <code>aptitude</code>
の便利な使い方を紹介します。</p>

<p>この投稿は
<a href="http://qiita.com/advent-calendar/2013/distro-pm">ディストリビューション/パッケージマネージャー Advent Calendar 2013</a>
の4日目の記事です。</p>

<!--more-->


<h2>残ってしまった設定ファイルの削除</h2>

<p>deb パッケージのアンインストールは <code>remove</code> と <code>purge</code> の二種類があって、
<code>purge</code> すれば設定ファイルまで消えるのですが、
<code>remove</code> だと設定ファイルは残ってしまいます。</p>

<p>普段は
<code>apt-get purge hoge</code>
や
<code>aptitude purge hoge</code>
で削除していたとしても、
依存関係で自動インストールされたものが
自動削除される時は <code>remove</code> になってしまって
設定ファイルが残ってしまいます。</p>

<p>そういうときに <code>aptitude</code> だと</p>

<p><code>
aptitude purge '~c'
</code></p>

<p>で設定ファイルだけ残ったパッケージを一気に <code>purge</code> できます。</p>

<p>この <code>~c</code> というのが <code>aptitude</code> の search term の一種で、
削除されていて <code>purge</code> (完全削除) されていない、
つまり設定ファイルがシステム上に残っているパッケージという意味になります。</p>

<h2>クオートの必要性</h2>

<p><code>''</code> でクオートしているのはシェルの展開を抑制するためで、
必須ではないのですが、
環境によって意図しない指定になることを避けるために、
常に <code>''</code> でくくっておくことをお勧めします。
ちなみに、この例だと <code>c</code> というユーザーが存在した場合に
そのホームディレクトリに展開されてしまいます。</p>

<h2>長い形式と短い形式</h2>

<p>ほとんどの search term は短い形式 (short form) と
長い形式 (long form) があり、
<code>~c</code> が短い形式で対応する長い形式は <code>?config-files</code>
になります。
つまり</p>

<p><code>
aptitude purge '?config-files'
</code></p>

<p>でも同じ意味になります。</p>

<h2>検索パターンの確認</h2>

<p><code>aptitude search</code> でも <code>aptitude purge</code> でも <code>aptitude install</code> でも
同じように使えるので、
<code>aptitude search</code> で確認してから <code>aptitude purge</code> するとか、
<code>aptitude install</code> するという使い方も出来ます。</p>

<h2>Search Term reference</h2>

<p>search term の一覧は <code>aptitude-doc-ja</code> パッケージを入れて参照するか、
<a href="http://aptitude.alioth.debian.org/doc/ja/ch02s04s05.html">Search term reference</a>
などを参照してください。</p>

<h2>他によく使っている search term</h2>

<p>他によく使っているものとしては、</p>

<p><code>
aptitude search '~U'
</code></p>

<p>でアップデート対象のパッケージ一覧を見たり、</p>

<p><code>
aptitude purge '~i~n 3.2.0-2[1-3]'
</code></p>

<p>のような指定で古いカーネル関連のパッケージを削除したりするのをよく使います。
<code>~i</code> がインストール済みのものという意味で、
<code>~n</code> はパッケージ名の検索で引数は正規表現なのですが、
ここでは他に間違ってマッチしそうなものはないため、
<code>.</code> のエスケープは省略してしまうことが多いです。
<code>linux-.*</code> の部分も指定しなくても充分絞り込めるので
省略してしまっています。</p>

<p><code>~i</code> は引数をとらなくて、デフォルトはパッケージ名の検索なので、
<code>~i 3.2.0-2[1-3]</code> と省略することも出来ます。</p>

<h2>応用例</h2>

<h3>別 apt-line で入れたパッケージの検索など</h3>

<p>たとえば Ubuntu なら</p>

<p><code>
aptitude search '~i!~Oubuntu'
</code></p>

<p>のように Origin が Ubuntu 以外のパッケージという検索で
Ubuntu の apt-line 以外から入れたパッケージが検索できます。</p>

<p>昔から使い続けている Debian なら</p>

<p><code>
aptitude search '~i!~Odebian'
</code></p>

<p>で他の apt-line からインストールしたものに加えて、
昔の Debian にパッケージが存在して、
今の Debian にはもう収録されていないパッケージが残っているものも
探すことも出来ます。</p>

<h3>exim から postfix への入れ替え</h3>

<p><code>aptitude install</code> や <code>aptitude purge</code> で
パッケージを指定する時に末尾に <code>_</code> を付けると <code>purge</code> できたり、
<code>+</code> を付けるとインストールできたりします。</p>

<p>これらを組み合わせると <code>postfix+</code> でインストールしつつ、
名前に <code>exim</code> を含むパッケージを <code>purge</code> することで
<code>default-mta</code> や <code>mail-transport-agent</code> に依存しているパッケージの
依存関係が満たせないと言われずにパッケージの入れ替えができます。</p>

<p><code>
sudo aptitude purge '~i~nexim' postfix+
</code></p>

<h3>バグがあったパッケージのインストールを止めたい</h3>

<p>Debian の unstable や testing を使っていて
<code>apt-listbugs</code> を入れていると
インストール前にこのパッケージの
このバージョンは入れない方が
良さそうということがありますが、
同じソースパッケージで複数のパッケージに分かれていると
指定が面倒なことがあります。</p>

<p>たとえば <code>sysv-rc</code> でバグがあった時に
<code>apt-get source sysv-rc</code> でソースパッケージ名を調べて、
対象パッケージを確認した上で
以下のように
<code>aptitude forbid-version</code>
でそのバージョンはインストールしない、
ということが出来ます。</p>

<p><code>
aptitude search '?installed ?source-package(sysvinit)'
sudo aptitude forbid-version '?installed ?source-package(sysvinit)'
</code></p>

<h3>その他いろいろ</h3>

<p>最後にその他のいろいろな例を列挙しておきます。
詳しい説明は <code>aptitude</code> のリファレンスなどを参照してください。</p>

<ul>
<li><code>aptitude search '?maintainer(uwabami)</code> : メンテナで探す</li>
<li><code>aptitude search '~t minimal'</code> : タスクでインストールされるパッケージ</li>
<li><code>aptitude search '~n^lsb'</code> : 名前が lsb で始まるパッケージ</li>
<li><code>aptitude search '?section(metapackages)'</code> : メタパッケージ</li>
<li><code>aptitude search '?priority(important)'</code> : 優先度が重要のパッケージ</li>
<li><code>aptitude search '?provides(mail-transport-agent)'</code> : <code>mail-transport-agent</code> を提供しているパッケージ</li>
</ul>


<h2>まとめ</h2>

<p>今回は <code>aptitude</code> の検索パターンの便利な使い方を紹介しました。</p>

<p>今まで <code>apt-get</code> や <code>apt-cache</code> しか使っていなかったとか、
<code>aptitude</code> を使っていても単純にパッケージ名を指定しかしたことがなかったとか
いう人は <code>aptitude purge '~c'</code> だけでも試してみると良いのではないでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[debianでpostfixと連携するvirtual hostではないmailmanの設定をした]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-24-debian-postfix-mailman.html"/>
    <updated>2013-11-24T19:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/debian-postfix-mailman</id>
    <content type="html"><![CDATA[<p>Debian で postfix と mailman を組み合わせて使う時に
<code>lists.example.net</code> のように ML 専用のサブドメインを使う場合は
<code>/etc/mailman/postfix-to-mailman.py</code> のコメントなどを参考にして
設定すれば良いのですが、
ドメインを分けずに他のローカル配送などと同じドメインで
ML を運用する設定の情報があまりなかったので、
どう設定したのかをまとめてみました。</p>

<p>要点としては <code>alias_maps</code> に追加するだけでした。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Debian GNU/Linux 7.2 (wheezy)</li>
<li>postfix 2.9.6-2</li>
<li>mailman 1:2.1.15-1</li>
</ul>


<h2>mailman のインストール</h2>

<p><a href="http://posokosi.seesaa.net/article/378457038.html">nginx + mailman でメーリングリスト: ぽそこし的日乗</a>
に書いてあるように、
なぜかインストール時の debconf の質問で設定した内容が反映されないので、
<code>dpkg-reconfigure mailman</code> で再設定する必要がありました。</p>

<p><code>Default language for Mailman</code> の設定だけなら
<code>/etc/mailman/mm_cfg.py</code> を直接変更でも良いのですが、
<code>Languages to support</code> で <code>ja (Japanese)</code> にチェックしたときに
生成されるファイルもあるので、
<code>dpkg-reconfigure mailman</code> で再設定するのが無難です。</p>

<h2>文字コードについて</h2>

<p>mailman の日本語の文字コードは未だに euc-jp なので、
文字コードを設定できる端末を使うか、
<a href="https://github.com/vmi/cocot">cocot</a>
で
<code>cocot -t utf-8 -p euc-jp ssh mlserver</code>
のように変換をするようにしておかないと文字化けして非常につらいです。</p>

<p><code>LANG=C</code> で mailman 関係のコマンドを実行しても
英語メッセージにはならないので、
注意が必要です。</p>

<h2>postfix の設定</h2>

<p>すでに <code>myhostname</code> とか <code>mydestination</code> に設定しているドメインに同居させるには
<code>alias_maps</code> に <code>hash:/var/lib/mailman/data/aliases</code> を追加するだけです。</p>

<p>具体的には
<code>alias_maps = hash:/etc/aliases</code>
という設定だったのなら、</p>

<p><code>
alias_maps = hash:/etc/aliases
 hash:/var/lib/mailman/data/aliases
</code></p>

<p>のように追加するだけです。
差分をとりやすいように別の行にするのが好みですが、
同じ行の末尾に追加でもかまいません。</p>

<h2>mm_cfg.py の設定</h2>

<h3>MTA</h3>

<p><code>newlist</code> で ML を作成する前に
<code>sudoedit /etc/mailman/mm_cfg.py</code> で
<code>MTA='Postfix'</code> を有効にしておきます。</p>

<p><code>newlist</code> の最後に
<code>/var/lib/mailman/bin/genaliases</code>
相当の処理が実行されるようなのですが、
<code>MTA='Postfix'</code> の設定をしておくと
<code>/var/lib/mailman/data/aliases*</code>
が自動で作成されるようになります。</p>

<p><code>MTA</code> の設定が無いと <code>aliases</code> に設定すべき内容を含むメッセージが表示されるだけでした。</p>

<h3>ML のデフォルト値</h3>

<p>以下のような感じで ML の設定のデフォルト値を設定しておくと
後から Web で設定変更する手間を省けます。</p>

<p><code>
DEFAULT_SUBJECT_PREFIX = "[%(real_name)s:%%d] "
DEFAULT_MSG_FOOTER = ""
DEFAULT_REPLY_GOES_TO_LIST = 1
DEFAULT_MAX_MESSAGE_SIZE = 0
DEFAULT_LIST_ADVERTISED = No
DEFAULT_PRIVATE_ROSTER = 2
</code></p>

<p>どんな設定項目があるのかは
<code>/usr/lib/mailman/Mailman/Defaults.py</code>
を参考にすれば良さそうです。</p>

<p><code>sudo -u list /var/lib/mailman/bin/config_list -o - mailman | iconv -f euc-jp -t utf-8 | pager</code>
のように既存の ML の設定を (Web で変更しつつ) 参考にするのも良さそうです。</p>

<h2>パーミッション修正</h2>

<p><code>sudo /var/lib/mailman/bin/check_perms -f</code>
でパーミッションの修正をします。
<code>/var/lib/mailman/messages/</code> の中身のパーミッションの修正があるので、
ほぼ必須だと思います。</p>

<p>最終的には 10 個残りましたが、
シンボリックリンクでリンク先のグループは問題ないようなので、
無視することにしました。</p>

<p><code>
$ sudo /var/lib/mailman/bin/check_perms -f
/var/lib/mailman/bin bad group (has: root, expected list) (fixing)
/var/lib/mailman/logs bad group (has: root, expected list) (fixing)
/var/lib/mailman/cron bad group (has: root, expected list) (fixing)
/var/lib/mailman/icons bad group (has: root, expected list) (fixing)
/var/lib/mailman/Mailman bad group (has: root, expected list) (fixing)
/var/lib/mailman/templates bad group (has: root, expected list) (fixing)
/var/lib/mailman/mail bad group (has: root, expected list) (fixing)
/var/lib/mailman/scripts bad group (has: root, expected list) (fixing)
/var/lib/mailman/cgi-bin bad group (has: root, expected list) (fixing)
/var/lib/mailman/locks bad group (has: root, expected list) (fixing)
Problems found: 10
Re-run as list (or root) with -f flag to fix
</code></p>

<h2>ML 作成</h2>

<p>mailman の依存で自動インストールされる <code>pwgen</code> を使って、
<code>pwgen -sB 20 1</code>
などでパスワードを生成して、
<code>sudo -u list $mlname mladmin@example.net $listpass</code>
のような感じで作成できます。</p>

<h2>その他の設定</h2>

<p>後は fml からのメールの移行とか Web 経由での設定をしていきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[postfixとmilter-managerの設定をした]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-23-postfix-and-milter-manager.html"/>
    <updated>2013-11-23T21:25:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/postfix-and-milter-manager</id>
    <content type="html"><![CDATA[<p>Debian 7.2 (amd64) のサーバーにメールサーバーの設定をしたところ、
<a href="http://milter-manager.sourceforge.net/">milter-manager</a>
関連と gmail への IPv6 経由でのメール送信関連でちょっとひっかかりましたが、
すぐに解決できました。</p>

<!--more-->


<h2>milter-manager の話</h2>

<p>まず <code>milter-manager</code> は
<a href="http://milter-manager.sourceforge.net/reference/ja/install-to-debian.html">Debianへインストール &ndash; milter manager</a>
の手順通りに設定してみたのですが、確認のところで、</p>

<p><code>
 $ sudo -u postfix milter-test-server -s unix:/var/spool/postfix/milter-manager/milter-manager.sock
 status: temporary-failure
 elapsed-time: 0.007781 seconds
</code></p>

<p>のように <code>temporary-failure</code> になりました。
そこで依存しているデーモンを調べてみたところ、
<code>clamd</code> が起動していなかったので、</p>

<pre><code>sudo service clamav-daemon start
</code></pre>

<p>で起動した後、</p>

<pre><code>sudo service clamav-milter restart
</code></pre>

<p>で clamav-milter も再起動したら</p>

<pre><code>status: accept
</code></pre>

<p>になりました。</p>

<p>後で気付いたので、最初のインストール時のメッセージを
ちゃんと確認できていないのですが、
<code>/etc/init.d/clamav-daemon</code> の <code>start</code>
の処理に cvd ファイルなどの存在をチェックして起動を止める処理があるので、
<code>freshclam</code> の処理を待ってから起動しないとダメだったようです。</p>

<h2>gmail と IPv6 の話</h2>

<p><a href="http://ya.maya.st/d/201308c.html#s20130822_1">gmail の逆引き制限</a>
の人と同じように IPv6 で逆引き必須にするのは否定的なのですが、
それはおいといて、現実問題として送信できないのは困るので、
<code>smtp_address_preference = ipv4</code> の設定を追加しました。</p>

<p>その設定をする前にテストメールを送ったら、
以下のようなエラーメールが返ってきて、
エラーメッセージの中の URL が
<a href="http://www.postfix-jp.info/ML/arc-2.5/msg00237.html">以前ひっかかったとき</a>
とは変わっているということに気付きました。</p>

<p>```
&lt;自分のアドレス@gmail.com> (expanded from &lt;自分@あるサーバー>): host</p>

<pre><code>gmail-smtp-in.l.google.com[2607:f8b0:4002:c01::1a] said: 550-5.7.1
[2401:xxxx:xxx:xxxx:xxx:xxx:xxx:xxx      16] Our system has detected
550-5.7.1 that this message does not meet IPv6 sending guidelines regarding
PTR 550-5.7.1 records and authentication. Please review 550-5.7.1
https://support.google.com/mail/?p=ipv6_authentication_error for more 550
5.7.1 information. e2si14078426yhm.125 - gsmtp (in reply to end of DATA
command)
</code></pre>

<p>```</p>

<h2>余談</h2>

<p>以前はメールサーバーの spam 対策の設定は秘伝のたれ状態で
だんだんメンテナンスが難しくなってしまっていましたが、
spam 対策は milter-manager だったり、
firewall は <a href="packages.debian.org/ufw">ufw</a> だったり、
いろいろと共通で使えるものが増えてきて楽になってきたように思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[/dev/snd/hwC0D0でPermission deniedになる問題を調べた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-04-dev-snd-hwc0d0-permission-denied.html"/>
    <updated>2013-11-04T14:22:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dev-snd-hwc0d0-permission-denied</id>
    <content type="html"><![CDATA[<p><code>/dev/snd/hwC0D0</code> を <code>O_RDWR</code> で <code>open(2)</code> するところで
<code>Permission denied</code> になるという話
(
<a href="https://twitter.com/takaswie/status/397014733494026240">ツイート</a>、
<a href="https://forums.ubuntulinux.jp/viewtopic.php?pid=100488#p100488">Ubuntu日本語フォーラム</a>
)
が気になったので、調べてみました。</p>

<!--more-->


<h2>結論</h2>

<p>最終的にどうすれば良いか知りたい人向けの情報としては、
<code>setcap cap_sys_rawio=ep filename</code>
でケーパビリティ (capability) を設定する、ということになります。</p>

<p>以下は、その結論にたどり着くまでに調べたことのメモです。</p>

<h2>パーミッションと ACL</h2>

<p><a href="http://blog.n-z.jp/blog/2013-10-27-kansai-debian-meeting.html">第 77 回 関西 Debian 勉強会に参加した</a>
で書いたように、
audio グループに属しているか、コンソールから直接ログインしていれば
パーミッションの問題はないはずです。</p>

<h2>余談: デバイスの sticky bit</h2>

<p><code>crw-rw---T</code> になっていて、
もしかして末尾の sticky bit が影響しているのかと思って調べてみたところ、
<a href="http://lists.debian.org/debian-user/2012/02/msg01273.html">Re: Sticky bit on device files?</a>
によると udev の管理用のフラグとして使われているようでした。
今回の件とは関係なさそうだったので、これ以上深追いはしていません。</p>

<h2>AppArmor</h2>

<p><code>/etc/apparmor.d/abstractions/audio</code> に
<code>/dev/snd/*      rw,</code> とあるので、
念のため
<code>sudo service apparmor stop</code>
で <code>AppArmor</code> を止めて試してみましたが、
変化が無かったので、
<code>sudo service apparmor start</code>
で戻しました。</p>

<h2>カーネルのソースコード探索</h2>

<p><code>strace</code> などで確認しても、
ユーザーランドでは <code>EACCES</code> が返ってくるとしかわからないので、
こうなったらカーネルのソースコードから <code>EACCES</code> を返しているところを
探すしかないということで、
<code>apt-get source linux-image-$(uname -r)</code>
でソースコードをダウンロードして探してみました。</p>

<p><code>grep -r EACCES sound</code> で探してみると
<code>sound/pci/hda/hda_hwdep.c</code> で以下のように
<code>CAP_SYS_RAWIO</code> をみていることがわかりました。</p>

<p>```c sound/pci/hda/hda_hwdep.c
 static int hda_hwdep_open(struct snd_hwdep <em>hw, struct file </em>file)
 {
 #ifndef CONFIG_SND_DEBUG_VERBOSE</p>

<pre><code>if (!capable(CAP_SYS_RAWIO))
    return -EACCES;
</code></pre>

<p> #endif</p>

<pre><code>return 0;
</code></pre>

<p> }
```</p>

<h2>Linux のケーパビリティ (capability)</h2>

<p><a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man7/capabilities.7.html">Man page of CAPABILITIES</a>
が関係しているということがわかったところで、
設定方法も調べてみると、
<code>setcap</code> で設定できるとわかったので、
以下のような簡単なテストプログラムを用意して、
<code>sudo setcap cap_sys_rawio=ep ./a.out</code>
でケーパビリティを設定すると
<code>open(2)</code>
に成功するのを確認できました。
<code>cap_sys_rawio=ep</code> は危険そうなので、
テストプログラムとはいえ、
任意のパスを受け取れるようにするのは止めた方が良さそうに思いました。</p>

<p>```c open-hwC0D0.c
 #include &lt;sys/types.h>
 #include &lt;sys/stat.h>
 #include &lt;fcntl.h>
 #include &lt;stdio.h></p>

<p> int main() {</p>

<pre><code>open("/dev/snd/hwC0D0", O_RDWR);
perror("open");
return 0;
</code></pre>

<p> }
```</p>
]]></content>
  </entry>
  
</feed>
