<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: docker | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2015-04-18T21:07:22+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[dokku 0.3.17 に Ruby on Rails アプリをデプロイしてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2015-04-18-dokku.html"/>
    <updated>2015-04-18T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dokku</id>
    <content type="html"><![CDATA[<p>dokku がいつの間にか deis がスポンサーになって開発が活発になって 0.3 系がリリースされていたので、
0.3.17 に Ruby on Rails アプリをデプロイしてみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>dokku 0.3.17</li>
<li>docker 1.5.0, 1.6.0</li>
</ul>


<h2>前準備</h2>

<p>何度か繰り返す予定ならあらかじめ、
次の初回起動の手順の <code>vagrant up</code> の前に、
Makefile の <code>PREBUILT_STACK_URL</code> を
Vagrantfile の <code>PREBUILT_STACK_URL</code> で
チェックしている場所にダウンロードしておくと
ダウンロード時間を短縮できます。</p>

<pre><code>curl -L -o stack.tgz https://github.com/progrium/buildstep/releases/download/2014-12-16/2014-12-16_42bd9f4aab.tar.gz
</code></pre>

<h2>初回起動</h2>

<p>Vagrant 環境で試しました。</p>

<pre><code>git clone https://github.com/progrium/dokku
cd dokku
vagrant up
</code></pre>

<p>vagrant の中では <code>/vagrant</code> の他に <code>/root/dokku</code> に <code>dokku</code> ディレクトリがマウントされています。</p>

<h2>初期設定</h2>

<p>Vagrant でポートフォワーディングされている <code>http://localhost:8080/</code> か
ホストオンリーアダプタで接続されている <code>http://10.0.0.2/</code> を開きます。
Dokku Setup が表示されるので、そこで初期設定をします。</p>

<p><code>Public Key</code> に自分の <code>~/.ssh/id_rsa.pub</code> が入っているのを確認します。
必要なら他の公開鍵に変更します。</p>

<p>Hostname Configuration の方は Hostname に自分がインターネットに接続しているグローバル IP アドレスが表示されているので、
<code>dokku.me</code> に変更して、
<code>Use virtualhost naming for apps</code> にチェックを入れます。
<code>dokku.me</code> は dokku の作者が運用していると思われる、すべてのサブドメインで 127.0.0.1 を返してくれるサービスです。</p>

<p><code>Finish Setup</code> を押すと初期設定は終了して
<code>http://progrium.viewdocs.io/dokku/application-deployment</code>
に飛ばされます。</p>

<p>ちなみに、初期設定用のサーバーの実体は
<code>contrib/dokku-installer.rb</code>
にあるようです。</p>

<h2>ssh の設定</h2>

<p><code>ssh dokku</code> や <code>ssh dokku.me</code> で接続できるように
<code>~/.ssh/config</code> に以下のような設定を追加しました。
<code>User</code>, <code>Hostname</code>, <code>Port</code>, <code>RequestTTY</code> 以外の設定はお好みで良いと思います。</p>

<pre><code>Host dokku dokku.me
    User dokku
    HostName 10.0.0.2
    Port 22
    UserKnownHostsFile /dev/null
    StrictHostKeyChecking no
    PasswordAuthentication no
    IdentityFile ~/.ssh/id_rsa
    IdentitiesOnly yes
    LogLevel FATAL
    RequestTTY yes
    Ciphers arcfour128,arcfour256
</code></pre>

<h2>サンプルアプリをデプロイ</h2>

<p><a href="http://progrium.viewdocs.io/dokku/application-deployment">http://progrium.viewdocs.io/dokku/application-deployment</a> に書いてある node.js のサンプルアプリをデプロイします。</p>

<pre><code>git clone https://github.com/heroku/node-js-sample
cd node-js-sample
git remote add dokku dokku@dokku.me:node-js-app
git push dokku master
</code></pre>

<p><code>http://node-js-app.dokku.me:8080/</code> を開いて「Hello World!」が見えれば成功です。</p>

<h2>PostgreSQL プラグインをインストール</h2>

<p>今回は
<a href="http://progrium.viewdocs.io/dokku/plugins" title="Plugins">Plugins</a>
で「Compatible with 0.3.16」と書いてある
<a href="https://github.com/Flink/dokku-psql-single-container" title="PostgreSQL (single container)">PostgreSQL (single container)</a>
を使いました。</p>

<p><code>vagrant ssh</code> で入って以下を実行しました。</p>

<pre><code>sudo git clone https://github.com/Flink/dokku-psql-single-container /var/lib/dokku/plugins/psql-sc
sudo dokku plugins-install
</code></pre>

<p><code>postgres:9.3</code> のイメージをダウンロードするので、しばらく時間がかかりました。</p>

<h2>Rails のサンプルをデプロイ</h2>

<p>試行錯誤の結果、シンプルな手順は以下のようになりました。</p>

<pre><code>ssh dokku apps:create ruby-rails-app
ssh dokku psql:create ruby-rails-app
git clone https://github.com/heroku/ruby-rails-sample
cd ruby-rails-sample
git remote add dokku dokku@dokku.me:ruby-rails-app
git push dokku master
</code></pre>

<p><code>http://ruby-rails-app.dokku.me:8080/</code> を開いて <code>Hello World</code> と現在時刻が表示されれば成功です。</p>

<p>今回利用したプラグインでは <code>psql:create</code> だけで、別途 <code>link</code> という手順は不要でした。</p>

<h2>データベースの migration の実行</h2>

<p>このサンプルアプリではデータベースに接続するだけで使っていないので、
必須ではないのですが <code>rake db:migrate</code> も実行しました。</p>

<pre><code>ssh dokku run ruby-rails-app rake db:migrate
</code></pre>

<h2>タイムゾーン設定</h2>

<p>現在時刻が UTC で表示されていたので、
JST に変更しました。</p>

<pre><code>ssh dokku config:set ruby-rails-app TZ=Asia/Tokyo
</code></pre>

<p>設定変更後に自動で再起動されるので、
<code>http://ruby-rails-app.dokku.me:8080/</code> を開いて、
現在時刻が日本時間で表示されれば成功です。</p>

<h2>CHECKS 作成</h2>

<p>デフォルトだと
<a href="http://progrium.viewdocs.io/dokku/application-deployment#user-content-zero-downtime-deploy" title="Zero downtime deploy">Zero downtime deploy</a>
の簡易チェックで 35 秒待つようになっているので、
<code>CHECKS</code> ファイルを作成して待ち時間を短くして、
正常なときだけデプロイできるようにしてみました。</p>

<pre><code>vi CHECKS
git add CHECKS
git commit
git push dokku master
</code></pre>

<p>CHECKS ファイルの内容は以下の通りです。</p>

<pre><code>/   RubyRailsSample
</code></pre>

<p>左側がチェックする URL で右側がその URL を表示したときに含まれる文字列です。
ここではタイトルの文字列を指定してみました。</p>

<h2>アプリケーションの削除</h2>

<p><code>apps:destroy</code> で削除できます。
確認のため、もう一度アプリ名を入力する必要があります。</p>

<pre><code>% ssh dokku apps:destroy node-js-app
 !    WARNING: Potentially Destructive Action
 !    This command will destroy node-js-app (including all add-ons).
 !    To proceed, type "node-js-app"

&gt; node-js-app
Destroying node-js-app (including all add-ons)
No database configured for node-js-app
Connection to 10.0.0.2 closed.
</code></pre>

<p><code>ruby-rails-app</code> の削除も試してみたところ、
データベースも一緒に削除されるので、
別途 <code>psql:delete</code> を実行する必要はありませんでした。</p>

<h2>デプロイ時に ruby のダウンロードでタイムアウトする場合</h2>

<p><a href="http://www.slideshare.net/snumano/20150101-dokku-alt" title="20150101勉強会 dokku alt">20150101勉強会 dokku alt</a>
の16ページの手順5を参考にしてタイムアウトをのばすと良いようです。</p>

<pre><code>ssh dokku config:set ruby-rails-app CURL_TIMEOUT=120
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第5回 コンテナ型仮想化の情報交換会＠大阪に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2014-11-14-ct-study-osaka-5.html"/>
    <updated>2014-11-14T19:00:32+09:00</updated>
    <id>http://blog.n-z.jp/blog/ct-study-osaka-5</id>
    <content type="html"><![CDATA[<p><a href="http://ct-study.connpass.com/event/9068/" title="第5回 コンテナ型仮想化の情報交換会＠大阪">第5回 コンテナ型仮想化の情報交換会＠大阪</a>
に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>いまさら聞けない Docker</h2>

<ul>
<li>前半はさくらインターネットの話でした。</li>
<li>仮想環境を動かす基盤として専用サーバがまた増えているらしいというのが興味深いと思いました。</li>
<li>後半は docker の基本についての話でした。</li>
<li><a href="http://www.slideshare.net/kunihirotanaka1/immutable-infrastructuredockercontainerstudyosaka20141114">http://www.slideshare.net/kunihirotanaka1/immutable-infrastructuredockercontainerstudyosaka20141114</a></li>
</ul>


<h2>Docker Registry入門</h2>

<ul>
<li><a href="https://github.com/docker/docker-registry">https://github.com/docker/docker-registry</a> の話</li>
<li>起動は簡単</li>
<li>pip でインストールも可能 (公式の <a href="https://github.com/docker/docker-registry/blob/master/Dockerfile">Dockerfile</a> 参照)</li>
<li>設定は <a href="https://github.com/docker/docker-registry/blob/master/config/config_sample.yml">config_sample.yml</a> などを参照</li>
<li>docker-registry-ui, docker-registry-web で検索すると非公式の Web UI が出てくる</li>
<li>ミラーリングに使える

<ul>
<li>docker コマンドで <code>--registry-mirror</code> オプション</li>
<li>private registry では <code>MIRROR_SOURCE</code> を指定</li>
</ul>
</li>
</ul>


<h2>Linuxコンテナの基本と最新情報</h2>

<ul>
<li>namespace と cgroup</li>
<li>sane_behavior オプション</li>
<li>CRIU のデモ</li>
</ul>


<h2>LT</h2>

<p>LT では boot2docker について話しました。
他の発表者も含めて、特に 5 分という制限はなく、緩い感じで発表していました。</p>

<iframe src="http://slide.rabbit-shocker.org/authors/znz/boot2docker-upgrade/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="http://slide.rabbit-shocker.org/authors/znz/boot2docker-upgrade/" title="boot2docker upgrade">boot2docker upgrade</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[boot2dockerでdockerのvolumeの保存状況を調べてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-14-boot2docker-volume.html"/>
    <updated>2014-08-14T20:36:13+09:00</updated>
    <id>http://blog.n-z.jp/blog/boot2docker-volume</id>
    <content type="html"><![CDATA[<p><a href="https://docs.docker.com/userguide/dockervolumes/" title="Managing data in containers - Docker Documentation">Managing data in containers - Docker Documentation</a>
に
「Volumes persist until no containers use them」
(ボリュームは使っているコンテナがなくなるまで存続する)
と書いてあり、実際のところどうなのかを boot2docker で確認してみました。</p>

<p>確認した範囲ではコンテナを消した後でも残っていました。
確認の仕方が悪いなど気づいた点があればコメントなり twitter で指摘などをよろしくお願いします。</p>

<!--more-->


<h2>確認バージョン</h2>

<ul>
<li>Mac OS X 10.9.4</li>
<li>VirtualBox 4.3.14</li>
<li>docker 1.1.2</li>
<li>boot2docker v1.1.2</li>
</ul>


<h2>クリーンな環境で起動する</h2>

<p>まず一度 boot2docker の環境を消してから、作成し直しました。</p>

<pre><code class="console">%  boot2docker delete
%  boot2docker init
2014/08/14 20:35:43 Creating VM boot2docker-vm...
2014/08/14 20:35:43 Apply interim patch to VM boot2docker-vm (https://www.virtualbox.org/ticket/12748)
2014/08/14 20:35:43 Setting NIC #1 to use NAT network...
2014/08/14 20:35:43 Port forwarding [ssh] tcp://127.0.0.1:2022 --&gt; :22
2014/08/14 20:35:43 Port forwarding [docker] tcp://127.0.0.1:2375 --&gt; :2375
2014/08/14 20:35:43 Setting NIC #2 to use host-only network "vboxnet0"...
2014/08/14 20:35:43 Setting VM storage...
2014/08/14 20:35:50 Done. Type `boot2docker up` to start the VM.
% export DOCKER_HOST=tcp://192.168.59.103:2375
% boot2docker up
2014/08/14 20:38:02 Waiting for VM to be started...
...........
2014/08/14 20:38:35 Started.
2014/08/14 20:38:35 Your DOCKER_HOST env variable is already set correctly.
</code></pre>

<h2>volume 作成</h2>

<p><a href="https://github.com/boot2docker/boot2docker#folder-sharing" title="Folder sharing">Folder sharing</a>
の方法で volume を使ったコンテナを作成しました。</p>

<pre><code class="console">% docker run -v /data --name my-data busybox true
Unable to find image 'busybox' locally
Pulling repository busybox
a9eb17255234: Download complete
511136ea3c5a: Download complete
42eed7f1bf2a: Download complete
120e218dd395: Download complete
</code></pre>

<h2>実体確認</h2>

<p><code>/</code> が入ると <code>docker inspect -f '{{ index .Volumes./data }}' my-data</code> のようには確認できないので、
<a href="https://github.com/docker/docker/issues/6966">https://github.com/docker/docker/issues/6966</a> を参考にしてボリュームの実体ディレクトリを確認しました。</p>

<p>一覧で見るだけなら <code>docker inspect -f '{{ .Volumes }}' my-data</code> で確認できます。</p>

<pre><code class="console">% docker inspect -f '{{ index .Volumes "/data" }}' my-data
/mnt/sda1/var/lib/docker/vfs/dir/7625e8091bafdaa0cf1342bc33f29b2708e59b1388505fdd860960b09adf1846
% docker inspect -f '{{ .Volumes }}' my-data
map[/data:/mnt/sda1/var/lib/docker/vfs/dir/7625e8091bafdaa0cf1342bc33f29b2708e59b1388505fdd860960b09adf1846]
</code></pre>

<h2>適当なファイル作成</h2>

<p>目的のボリュームを確認しやすくするために適当なファイルを作成しました。</p>

<pre><code class="console">% docker run -it --rm --volumes-from my-data ubuntu
Unable to find image 'ubuntu' locally
Pulling repository ubuntu
c4ff7513909d: Download complete
511136ea3c5a: Download complete
1c9383292a8f: Download complete
9942dd43ff21: Download complete
d92c3c92fa73: Download complete
0ea0d582fd90: Download complete
cc58e55aa5a5: Download complete
root@bf9a312400fa:/# echo foo &gt; /data/foo.txt
root@bf9a312400fa:/# exit
exit
</code></pre>

<h2>コンテナ削除</h2>

<p>連携しているコンテナを削除します。</p>

<pre><code class="console">% docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES
ddd48c305f62        busybox:latest      true                6 minutes ago       Exited (0) 6 minutes ago                       my-data
%  docker ps -a -q | xargs docker rm
ddd48c305f62
</code></pre>

<h2>実体確認</h2>

<p><code>boot2docker ssh</code> で入って確認したところ、残っていました。</p>

<pre><code class="console">% boot2docker ssh
                        ##        .
                  ## ## ##       ==
               ## ## ## ##      ===
           /""""""""""""""""\___/ ===
      ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~
           \______ o          __/
             \    \        __/
              \____\______/
 _                 _   ____     _            _
| |__   ___   ___ | |_|___ \ __| | ___   ___| | _____ _ __
| '_ \ / _ \ / _ \| __| __) / _` |/ _ \ / __| |/ / _ \ '__|
| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__|   &lt;  __/ |
|_.__/ \___/ \___/ \__|_____\__,_|\___/ \___|_|\_\___|_|
boot2docker: 1.1.2
             master : 740106c - Thu Jul 24 03:24:10 UTC 2014
docker@boot2docker:~$ ls -al /mnt/sda1/var/lib/docker/vfs/dir/7625e8091bafdaa0cf1342bc33f29b2708e59b
1388505fdd860960b09adf1846
ls: /mnt/sda1/var/lib/docker/vfs/dir/7625e8091bafdaa0cf1342bc33f29b2708e59b1388505fdd860960b09adf1846: Permission denied
docker@boot2docker:~$ sudo ls -al /mnt/sda1/var/lib/docker/vfs/dir/7625e8091bafdaa0cf1342bc33f29b270
8e59b1388505fdd860960b09adf1846
total 12
drwxr-xr-x    2 root     root          4096 Aug 14 11:52 .
drwx------    4 root     root          4096 Aug 14 11:49 ..
-rw-r--r--    1 root     root             4 Aug 14 11:52 foo.txt
docker@boot2docker:~$
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[boot2docker で VM のファイルをコンテナやホストと共有する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-06-docker-volume.html"/>
    <updated>2014-08-06T23:17:27+09:00</updated>
    <id>http://blog.n-z.jp/blog/docker-volume</id>
    <content type="html"><![CDATA[<p>Mac OS X 上の <code>boot2docker</code> でホストとコンテナでファイルを共有する方法を試してみました。
さらに <code>boot2docker ssh</code> で入ったときにも見えるような設定でも試してみました。</p>

<!--more-->


<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/numa08/items/e52bd18611ac159af1ac" title="boot2dockerでコンテナからホストのファイルを参照する - Qiita">boot2dockerでコンテナからホストのファイルを参照する - Qiita</a></li>
<li><a href="https://github.com/boot2docker/boot2docker#folder-sharing" title="Folder sharing">Folder sharing</a></li>
<li><a href="https://docs.docker.com/userguide/dockervolumes/" title="Managing data in containers - Docker Documentation">Managing data in containers - Docker Documentation</a></li>
</ul>


<h2>対象バージョン</h2>

<ul>
<li>Mac OS X 10.9.4</li>
<li>VirtualBox 4.3.14</li>
<li>docker 1.1.2</li>
<li>boot2docker 1.1.2</li>
</ul>


<h2>実行コマンド</h2>

<ul>
<li><code>docker run -v /mnt/sda1/data:/data --name my-data busybox true</code> で共有ボリューム用コンテナ作成</li>
<li><code>docker run --rm -v /usr/local/bin/docker:/docker -v /var/run/docker.sock:/docker.sock svendowideit/samba my-data</code> で samba 起動</li>
<li><code>docker run -it --rm --volumes-from my-data ubuntu /bin/bash</code> で確認</li>
</ul>


<h3>共有ボリューム用コンテナ作成</h3>

<p><a href="http://blog.n-z.jp/blog/2013-12-24-docker-rm.html" title="Dockerで不要になったコンテナやイメージを削除する">Dockerで不要になったコンテナやイメージを削除する</a>
のように <code>docker ps -a -q | xargs docker rm</code> などで停止しているコンテナを削除してしまうと
<code>my-data</code> という名前を付けたデータ保存用のコンテナも消えてしまうので、
<code>boot2docker</code> では永続化されているパーティションの <code>/mnt/sda1</code> に <code>data</code> をおくことにしました。</p>

<p>run の時点で <code>/mnt/sda1/data</code> は自動作成されるので、
あらかじめ作っておく必要はありません。</p>

<p>間違えてコンテナを削除してしまった場合は
<code>docker run -v /mnt/sda1/data:/data --name my-data busybox true</code>
で作成し直せばデータは残ったまま <code>my-data</code> コンテナを再作成できます。</p>

<p>このやり方は docker を動かすホストに依存してしまうので、
一般には標準のボリュームコンテナを作成する方法の方がおすすめのようです。</p>

<h3>共有ボリューム用コンテナ再作成 (標準の方法の場合)</h3>

<p><code>--volumes-from</code> で指定した共有は使っているコンテナがなくなってしまっても内容が残っていますが、
名前で指定して取り出す方法がなくなってしまうように見えます。</p>

<p><code>my-data</code> コンテナを削除してしまった場合、
<code>--volumes-from my-data</code> は使えなくなるので、
<code>docker run --volumes-from samba-server --name my-data busybox true</code>
のように残っているコンテナを <code>--volumes-from</code> で指定して再作成すれば、
また <code>docker run -it --rm --volumes-from my-data ubuntu /bin/bash</code> のように
<code>--volumes-from</code> に <code>my-data</code> を指定できるようになります。</p>

<h3>samba 起動</h3>

<p><code>docker run --rm -v /usr/local/bin/docker:/docker -v /var/run/docker.sock:/docker.sock svendowideit/samba my-data</code>
で samba を起動します。</p>

<p><code>docker.sock</code> も渡しているので、多重起動しないように既存の <code>samba-server</code> は止めてくれるようです。</p>

<p>起動時に以下のようにホスト側からの接続方法の説明が出ます。</p>

<pre><code>% docker run --rm -v /usr/local/bin/docker:/docker -v /var/run/docker.sock:/docker.sock svendowideit/samba my-data
stopping and removing existing server
starting samba server container sharing my-data:/data

# run 'docker logs samba-server' to view the samba logs

================================================

Your data volume (/data) should now be accessible at \\&lt;docker ip&gt;\ as 'guest' user (no password)

For example, on OSX, using a typical boot2docker vm:
    goto Go|Connect to Server in Finder
    enter 'cifs://192.168.59.103
    hit the 'Connect' button
    select the volumes you want to mount
    choose the 'Guest' radiobox and connect

Or on Linux:
    mount -t cifs //192.168.59.103/data /mnt/data -o username=guest

Or on Windows:
    Enter '\\192.168.59.103\data' into Explorer
    Log in as Guest - no password
</code></pre>

<h3>samba に接続</h3>

<p><code>boot2docker ip</code> で IP アドレスを確認して、
<code>192.168.59.103</code> なら、
<code>Finder</code> の <code>サーバへ接続</code> (メニューの <code>移動</code> の <code>サーバーへ接続...</code>) を開いて、
サーバアドレスとして <code>cifs://192.168.59.103/data</code> を入力して <code>接続</code> します。
<code>ユーザの種類</code> は <code>ゲスト</code> を選んで <code>接続</code> します。
すると <code>/Volumes/data</code> で見えるようになります。</p>

<p>Linux なら <code>mount -t cifs //192.168.59.103/data /mnt/data -o username=guest</code> のようにマウントするそうです。</p>

<p>Windows ならエクスプローラーで <code>\\192.168.59.103\data</code> にパスワードなしのゲスト接続すれば見えるそうです。</p>

<h3>別コンテナで確認</h3>

<p><code>docker run -it --rm --volumes-from my-data ubuntu /bin/bash</code> などで別コンテナを起動すると、
<code>/data</code> にマウントされているので、
<code>ls -l /data</code> で中身を確認したり、
<code>/data</code> の中にファイルを作成して他で見えることを確認しました。</p>

<h2>まとめ</h2>

<p><a href="https://github.com/boot2docker/boot2docker#folder-sharing">README に書いてある Folder sharing</a>
だと間違えて消してしまうことがあったので、ちょっと工夫した方法を紹介しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[boot2docker のバージョンアップ]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-06-boot2docker-upgrade.html"/>
    <updated>2014-08-06T23:10:26+09:00</updated>
    <id>http://blog.n-z.jp/blog/boot2docker-upgrade</id>
    <content type="html"><![CDATA[<p>boot2docker の ISO の更新は専用コマンドで簡単にできるとわかったので、
わざと古いバージョンに戻したりして動作確認してみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Mac OS X 10.9.4</li>
<li>VirtualBox 4.3.14</li>
<li>docker 1.1.2</li>
<li>boot2docker 1.1.2</li>
</ul>


<h2>更新準備</h2>

<p><code>boot2docker delete</code> して消してから ISO を更新して
<code>boot2docker init</code> で作り直すという説明もありますが、
再起動しても残る部分は ISO とは別の仮想ディスクの <code>/dev/sda1</code> に保存されていて、
そのまま使い回せることがほとんどなので、
作り直さなくても更新できます。</p>

<p>大きくバージョンをあげるとか、クリーンな環境でやり直したいと言うときは消して作り直せば良いと思います。</p>

<p>参考: <a href="http://qiita.com/tukiyo3/items/07f1eb77b5ffd9031e30" title="boot2dockerのデータ永続化まとめ - Qiita">boot2dockerのデータ永続化まとめ - Qiita</a></p>

<h2>更新方法</h2>

<h3>VM を停止して更新</h3>

<p><code>boot2docker upgrade</code> で VM が起動していれば停止して更新して起動し直してくれます。</p>

<h3>ISO だけ更新</h3>

<p><code>boot2docker download</code> で ISO だけ無条件にダウンロードしてくれます。</p>

<h3>boot2docker help</h3>

<p>以上の説明は <code>boot2docker help</code> にちゃんと書いてある通りです。</p>

<pre><code>% boot2docker help
Usage: boot2docker [&lt;options&gt;] &lt;command&gt; [&lt;args&gt;]

boot2docker management utility.

Commands:
    init                    Create a new boot2docker VM.
    up|start|boot           Start VM from any states.
    ssh [ssh-command]       Login to VM via SSH.
    save|suspend            Suspend VM and save state to disk.
    down|stop|halt          Gracefully shutdown the VM.
    restart                 Gracefully reboot the VM.
    poweroff                Forcefully power off the VM (might corrupt disk image).
    reset                   Forcefully power cycle the VM (might corrupt disk image).
    delete|destroy          Delete boot2docker VM and its disk image.
    config|cfg              Show selected profile file settings.
    info                    Display detailed information of VM.
    ip                      Display the IP address of the VM's Host-only network.
    status                  Display current state of VM.
    download                Download boot2docker ISO image.
    upgrade                 Upgrade the boot2docker ISO image (if vm is running it will be stopped and started).
    version                 Display version information.

Options:
      --basevmdk="": Path to VMDK to use as base for persistent partition
      --dhcp=true: enable VirtualBox host-only network DHCP.
      --dhcpip=192.168.59.99: VirtualBox host-only network DHCP server address.
  -s, --disksize=20000: boot2docker disk image size (in MB).
      --dockerport=2375: host Docker port (forward to port 2375 in VM).
      --hostip=192.168.59.3: VirtualBox host-only network IP address.
      --iso="/Users/knishiyama/.boot2docker/boot2docker.iso": path to boot2docker ISO image.
      --lowerip=192.168.59.103: VirtualBox host-only network DHCP lower bound.
  -m, --memory=2048: virtual machine memory size (in MB).
      --netmask=ffffff00: VirtualBox host-only network mask.
      --serial=false: try serial console to get IP address (experimental)
      --serialfile="": path to the serial socket/pipe.
      --ssh="ssh": path to SSH client utility.
      --ssh-keygen="ssh-keygen": path to ssh-keygen utility.
      --sshkey="/Users/knishiyama/.ssh/id_boot2docker": path to SSH key to use.
      --sshport=2022: host SSH port (forward to port 22 in VM).
      --upperip=192.168.59.254: VirtualBox host-only network DHCP upper bound.
      --vbm="VBoxManage": path to VirtualBox management utility.
  -v, --verbose=false: display verbose command invocations.
      --vm="boot2docker-vm": virtual machine name.
</code></pre>
]]></content>
  </entry>
  
</feed>
