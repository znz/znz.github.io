<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: docker | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-02-07T17:15:07+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dockerで不要になったコンテナやイメージを削除する]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-24-docker-rm.html"/>
    <updated>2013-12-24T11:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/docker-rm</id>
    <content type="html"><![CDATA[<p>Docker を使い続けてコンテナやイメージを放置していると差分だけとはいえ、
ディスクの消費が増えていって、
<code>書き込みエラー: デバイスに空き領域がありません</code>
(<code>ENOSPC</code>, <code>write error: No space left on device</code>)
というエラーになってしまいます。</p>

<!--more-->


<h2>コンテナの削除</h2>

<p><a href="http://docs.docker.io/en/latest/commandline/cli/#rm">docker rm</a>
の Eamples にあるように</p>

<p><code>console
 docker rm `docker ps -a -q`
</code></p>

<p>で停止しているコンテナを削除できます。</p>

<p>実行中のコンテナがあると削除できないというエラーが出ますが、
意図的にやっていることなので気にする必要はありません。</p>

<p>公式のドキュメントにも書いてある方法なので、
コンテナの削除方法はこのやり方で問題ないと思います。</p>

<h2>イメージの削除</h2>

<p><a href="https://github.com/dotcloud/docker/blob/e960152a1e9064d8c2ae57b9ab2a33d9b27276b9/CHANGELOG.md#072-2013-12-16">0.7.2 (2013-12-16) の変更点</a>
に
「実行中以外であってもコンテナが依存しているイメージは削除できなくした」
(Prevent deletion of image if ANY container is depending on it even if the container is not running)
と書いてあって、
今まではコンテナが停止していれば
<code>docker rmi</code> でイメージが削除できていたのですが、
0.7.2 からはできなくなったので、
上記の手順でコンテナを先に削除しておく必要があります。</p>

<p>不要なイメージの削除は
<code>docker images</code> で <code>REPOSITORY</code> が
<code>&lt;none&gt;</code> になっているものを削除すれば良いので、</p>

<p><code>console
 docker rmi $(docker images | awk '/^&lt;none&gt;/ { print $3 }')
</code></p>

<p>のようにすれば可能です。</p>

<p><code>Error: No such image: xxxxxxxxxxxx</code>
のようにエラーが出ることがありますが、
他のイメージを削除したときに一緒に削除されてしまっているだけで、
特に問題はないようです。</p>

<p><a href="https://github.com/dotcloud/docker/blob/a665517151911866285e5a72164c5f2d2f31ba65/FIXME">FIXME</a>
に書いてある方法なので、
現状はこの方法が無難だと思います。</p>

<p>FIXME に書いてあるということで、
将来的にはコンテナの削除の方も含めて、
もっと簡単なコマンドが用意される予定のようです。</p>

<h2>その他のイメージの削除</h2>

<p><code>docker rmi local/debian-ja:7.2</code> で特定の <code>TAG</code> のイメージを削除したり、
<code>docker rmi shipyard/shipyard</code> で特定の <code>REPOSITORY</code> のすべてのイメージを削除したりできます。</p>

<h2>まとめ</h2>

<p>docker を使い続けていると起きることのある問題の対処方法を紹介しました。</p>

<p>本題ではないので上には書いていませんが、
イメージがたまっている状態で削除する前に
<a href="http://docs.docker.io/en/latest/commandline/cli/#displaying-images-visually">docker images -viz</a>
を見てみるのも面白いかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DOCKER indexのTrusted Buildsで複数バージョンのrubyを試せるimageを作ってみた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-19-docker-trusted-builds.html"/>
    <updated>2013-12-19T23:02:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/docker-trusted-builds</id>
    <content type="html"><![CDATA[<p><a href="https://index.docker.io/">DOCKER index</a>
には
<a href="http://blog.docker.io/2013/11/introducing-trusted-builds/">Trusted Builds</a>
という機能があり、
Docker index の方で
image の作成をしてくれます。</p>

<p>image の作成方法は GitHub に Dockerfile を公開して、
それを指定します。</p>

<p>今回はそれを使って複数バージョンの ruby を試せる image を作ってみました。</p>

<!--more-->


<h2>Dockerfile の動作確認</h2>

<p><code>docker build</code> への Dockerfile の指定方法は</p>

<pre><code>docker build DockerfileのあるディレクトリへのパスやURL
</code></pre>

<p>という方法と</p>

<pre><code>docker build - &lt; Dockerfile
</code></pre>

<p>のように <code>-</code> を指定して標準入力から渡す方法があります。</p>

<p>違いとしては
パスや URL の指定だとファイル名が Dockerfile 固定という制限があり、
<code>-</code> の方だと <code>ADD</code> が使えない (基準となるディレクトリがわからないため)
という制限があるようです。
(詳しく調べていないだけなので他にもあると思います。)</p>

<p>そこで、</p>

<pre><code>docker build -t local/rubys .
</code></pre>

<p>または</p>

<pre><code>docker build -t local/rubys - &lt; Dockerfile
</code></pre>

<p>のようにして動作確認します。</p>

<h2>DOCKER index のアカウント登録</h2>

<p>英小文字か数字で4文字から30文字という制限があったので、
<code>znzj</code> というアカウントにしました。</p>

<p>メールアドレスとパスワードを設定して、
メールの確認が済んだらアカウントの作成は完了です。</p>

<p>最近はサービスごとにメールアドレスを分けていて、
アイコンが gravatar のデフォルトになってしまっていたので、
User Settings から Gravatar email も設定しました。</p>

<p>ここはメールアドレスの確認がなかったので、
他人のアイコンでも使えてしまうように見えたのですが、
良いのでしょうか。
ちょっと考えてみましたが、
画像をコピーして使えば同じようなものなので、
気にするほどのことではなさそうに思いました。</p>

<h2>GitHub のアカウントとの連携</h2>

<p>hook の登録のため、ということで多少の書き込み権限も要求されるので、
許可したくない場合は Trusted builds は使えません。</p>

<h2>Trusted Builds の追加</h2>

<p>ログイン中に
<a href="https://index.docker.io/builds/">Trusted Builds</a>
のページの <code>+Add New</code> から、
GitHub レポジトリを選択します。
ここでは <a href="https://github.com/znz/docker-rubys">https://github.com/znz/docker-rubys</a> を選択しました。</p>

<ol>
<li>Default Branch は <code>master</code> のまま</li>
<li>Repo name も <code>znzj/docker-rubys</code> のまま (<code>/</code> の右の部分は英小文字か数字か <code>-</code> か <code>.</code> で 3 文字から 30 文字)</li>
<li>Docker Tag Name も <code>latest</code> のまま</li>
<li>Dockerfile Location は <code>/</code> から <code>rubys/</code> に変更</li>
<li>Active にはチェックをいれたまま</li>
</ol>


<p>という状態で作成しました。</p>

<p><code>Dockerfile</code> の push とどっちが先が良いのかわからなかったので、
<code>Dockerfile</code> なしで追加してしまったら、
初回は <code>Dockerfile</code> が見つからないという理由で失敗してしまったので、
先に <code>Dockerfile</code> を push してから追加するもののようです。</p>

<h2>イメージの使用</h2>

<p>しばらくまつと Trusted Builds のページで
Status が Pending から Building に変わって、
最終的に Done になってビルドできて使えるようになるので、</p>

<pre><code>docker pull znzj/docker-rubys
</code></pre>

<p>でダウンロードします。</p>

<p>ダウンロードが完了したら、</p>

<pre><code>docker run -i -t znzj/docker-rubys
</code></pre>

<p>で <code>/bin/bash -l</code> を起動します。
(<code>CMD</code> で指定されています。)</p>

<p>bash で</p>

<pre><code>rbenv versions
</code></pre>

<p>で入っている ruby のバージョンを確認したり、</p>

<pre><code>rbenv each ruby -v
</code></pre>

<p>や</p>

<pre><code>rbenv each -v gem list
</code></pre>

<p>などのように
<a href="https://github.com/chriseppstein/rbenv-each">rbenv each</a>
を使って、
それぞれのバージョンの ruby の環境でコマンドを実行できるようにしています。</p>

<p>ホスト側とのファイルのやり取りはどうするのが良いのか
まだ調べていないので、
とりあえず vim でファイルを作成するか、
wget でダウンロードすることを想定しています。</p>

<h2>abuse?</h2>

<p><code>GitHub: Add Trusted Build</code>
のところに
<code>Anyone who abuses the build system, will have their accounts disabled. If you are unsure what might be considered abuse, please ask before you build.</code>
という注意書きがあって、
ビルドするぐらいなら大丈夫かと思っていたのですが、
他の Trusted Builds をみるとインストールしたり
ファイルを追加したりしているだけのものが
多いので心配になってしまいました。
さらに探してみると
<a href="https://index.docker.io/u/sameersbn/gitlab/">https://index.docker.io/u/sameersbn/gitlab/</a>
で ruby を make しているものもあったので、
ビルドはダメということもなさそうでした。</p>

<p>しかし、頻繁にビルドして負荷をかけるのもよくなさそうなので、
trunk の nightly build などをしようと思ったら、
ローカルで作成して <code>docker push</code> する方がよさそうに感じました。</p>

<h2>aufs の制限</h2>

<p><a href="https://github.com/dotcloud/docker/issues/332">https://github.com/dotcloud/docker/issues/332</a>
によると aufs は重ねられる数に限界 (40ぐらい?) があるようなので、
<code>RUN</code> コマンドは出来るだけまとめて減らした方が良いのかもしれません。</p>

<p><a href="https://index.docker.io/u/truongsinh/nodejs/">https://index.docker.io/u/truongsinh/nodejs/</a>
のように <code>&amp;&amp;</code> でつなげて 1 個の <code>RUN</code> にまとめている例もありました。</p>

<p>aufs 以外が主流になるかもしれないので、
この辺りは Dockerfile の読みやすさや
<code>docker history</code> でわかれていた方が良いのかなど、
利点や欠点を考えつつ、
ベストプラクティスが決まっていくまで
試行錯誤するのが良さそうです。</p>

<h2>まとめ</h2>

<p>DOCKER index には Trusted Builds という向こう側で
<code>docker build</code> してくれる仕組みがあるので、
<code>docker push</code> とうまく使い分けて
公開可能なイメージはどんどん公開すると良いのではないでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dockerのWeb UI 3種類を比較してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-15-compare-docker-web-ui.html"/>
    <updated>2013-12-15T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/compare-docker-web-ui</id>
    <content type="html"><![CDATA[<p><a href="http://www.docker.io/">docker</a> の Web UI を比較してみました。</p>

<p>対象は以下の3種類の Web UI です。
検索すると <code>DockerUI</code> 以外が見つけにくいようなので、
まとめて紹介します。</p>

<ul>
<li><a href="https://github.com/shipyard/shipyard">Shipyard</a></li>
<li><a href="https://github.com/dynport/dockland">Dockland</a></li>
<li><a href="https://github.com/crosbymichael/dockerui">DockerUI</a></li>
</ul>


<!--more-->


<h2>対象バージョン</h2>

<p>先月末頃にも試したのですが、
その時にはこんなに <code>docker</code> が流行るとは思っていなかったので、
ちゃんとまとめていませんでした。</p>

<p>そこで改めて新しいバージョンを試しつつ比較したいと思います。</p>

<ul>
<li>amd64 の Ubuntu 13.04 (raring)</li>
<li>docker 0.7.1</li>
<li>Shipyard version 0dc558</li>
<li>Dockland 5a02db9d20</li>
<li>DockerUI v0.3 (5094acc024)</li>
</ul>


<h2>Shipyard</h2>

<h3>インストール</h3>

<p><a href="https://github.com/shipyard/shipyard/wiki/QuickStart">QuickStart</a>
の説明を参考にして <code>/etc/default/docker</code> を作成して <code>DOCKER_OPTS</code> を設定します。
<code>-d</code> は <code>/etc/init/docker.conf</code> の方に書いてあるので不要です。</p>

<p>VirtualBox の中で試したので、
IP アドレスは <code>10.0.2.15</code> にしています。</p>

<p><code>sh /etc/default/docker
DOCKER_OPTS="-H tcp://10.0.2.15:4243 -H unix:///var/run/docker.sock"
</code></p>

<p>公開されている latest Shipyard image を使って起動します。</p>

<p><code>console
docker pull shipyard/shipyard
docker run -i -t -d -p 80:80 -p 8000:8000 shipyard/shipyard
</code></p>

<p>バージョンアップの時も同様に <code>docker pull</code> でとってくると
古いイメージがたまっていくので、
<code>docker images</code> で一覧を確認して
<code>REPOSITORY</code> や <code>TAG</code> が <code>&lt;none&gt;</code> になっているイメージを
適当に <code>docker rmi</code> で削除すると良いと思います。</p>

<h3>初期設定</h3>

<p><code>http://127.0.0.1:8000/</code>
を開いて</p>

<ul>
<li>username: <code>admin</code></li>
<li>password: <code>shipyard</code></li>
</ul>


<p>でログインします。</p>

<p>左の <code>Hosts</code> を開いて <code>Add</code> で <code>docker</code> のホストを追加します。
例えば以下のような設定になります。</p>

<ul>
<li>Name: raring64</li>
<li>Hostname: 10.0.2.15</li>
<li>Public hostname: (空欄のまま)</li>
<li>Port: 4243</li>
</ul>


<h3>設定変更など</h3>

<p>以前は右上の <code>admin</code> から <code>administration</code> を選んで、
Django administration から追加する必要があったと思うのですが、
今は shipyard の方で設定できるようになっているようです。
追加や有効・無効の切り替えや削除は出来ても、
編集はまだ出来ないようなので、
<code>Name</code> などを変更したい時は
Django administration
の方を開く必要があるようです。</p>

<p>ログインパスワードの変更などのユーザー管理も
Django administration
の方を開く必要があるようです。</p>

<h3>使用感</h3>

<p>左の <code>Containers</code> や <code>Images</code> を開いてみて見ると何となく使い方がわかると思います。
バージョンアップで機能が増えていきそうなので、細かくは書きませんが、
ログが見えたりするのは便利です。</p>

<p><code>Applications</code> は
<a href="https://github.com/dotcloud/hipache">hipache</a>
に関連しているようです。</p>

<h2>Dockland</h2>

<h3>バージョン</h3>

<p>作りはじめで放置されているようで、
6 commits しかなくて、
latest commit も 2013 年 6 月になっています。
そのためバージョンは前回と変わっていません。</p>

<h3>依存関係</h3>

<p>sinatra ベースで作られていて、
graphviz も必要なので、
クリーンな環境に入れるのは大変です。</p>

<p>前回は docker のホスト側に入れたら大変だったので、
今回は <code>Dockerfile</code> を使ってインストールしました。</p>

<h3>インストール</h3>

<p>README にあった <code>dockland.dockerfile</code>
は古い docker のバージョンが対象のようなので、
最近の docker にあわせて
<code>EXPOSE</code> をコメントアウトするなどの
変更をして使います。
<code>APP_REVISION</code> のあたりは特定のリビジョンに固定して使いたい時のものだと思ったので、コメントアウトしています。</p>

<p>```plain dockland.dockerfile</p>

<h1>/tmp/dockland.dockerfile</h1>

<p>FROM ubuntu:12.04</p>

<p>RUN sed &rsquo;s/main$/main universe/&lsquo; -i /etc/apt/sources.list &amp;&amp; apt-get update &amp;&amp; apt-get upgrade -y
RUN apt-get install ruby1.9.1 ruby1.9.1-dev build-essential git-core graphviz libssl-dev -y</p>

<p>RUN git clone <a href="https://github.com/dynport/dockland.git">https://github.com/dynport/dockland.git</a> /app</p>

<h1>this is to speed up updates</h1>

<p>RUN cd /app &amp;&amp; gem install bundler &mdash;no-ri &mdash;no-rdoc &amp;&amp; bundle</p>

<h1>change the revision to update your image</h1>

<h1>ENV APP_REVISION 51f5445abeeb080568edeca248d68b29a66f1387</h1>

<h1>RUN cd /app &amp;&amp; git fetch -q origin  &amp;&amp; git reset -q &mdash;hard $APP_REVISION &amp;&amp; git clean -q -d -x -f &amp;&amp; bundle</h1>

<h1>EXPOSE 80</h1>

<p>CMD cd /app &amp;&amp; bundle exec ./bin/dockland -h ${DOCKER_HOST-<a href="http://10.0.2.15:4243">http://10.0.2.15:4243</a>} -p 80
```</p>

<p>公開するポートの指定は
docker 0.6.5 から
<code>Dockerfile</code> の
<code>EXPOSE</code> では出来なくなっていて、
<code>docker run</code> の引数の <code>-p</code> で指定する必要があります。
( <a href="http://blog.docker.io/2013/11/docker-0-7-docker-now-runs-on-any-linux-distribution/">Docker 0.7 runs on all Linux distributions – and 6 other major features | Docker Blog</a> の Feature 4: Advanced port redirects 参照)
<code>EXPOSE 80</code> のような指定はまだ使えるように書いてあるのですが、
ちゃんと使えたとしても外側のポートが可変なのは使いにくいので、
起動する時に指定するようにしました。</p>

<p><code>console
docker build -t dockland:dockland - &lt; /tmp/dockland.dockerfile
id=$(docker run -d -p 8080:80 dockland:dockland)
curl -I http://127.0.0.1:8080
</code></p>

<p>docker 側の API の公開設定は shipyard の方で設定したのと同じです。</p>

<h3>使用感</h3>

<p><code>graphviz</code> が必須ということからわかるかもしれませんが、
<code>docker images -viz</code> から生成できるイメージの有向グラフを使っています。
上の例だと <code>http://127.0.0.1:8080/</code> を開くと
矢印で繋がったイメージの ID 一覧が出てきて、
楕円の中の ID をクリックするとイメージの詳細情報が表示できます。</p>

<p>詳細ページには <code>DELETE</code> というボタンがあったり、
History から祖先のイメージをたどれたりするだけで
機能はほとんどありません。</p>

<p><code>docker images -viz</code> の図を良い感じに見たい、
という用途には良さそうです。</p>

<h2>DockerUI</h2>

<p>最後は DockerUI です。</p>

<h3>インストール</h3>

<p><code>console
docker pull crosbymichael/dockerui
docker run -d -p 9000:9000 crosbymichael/dockerui -e="http://10.0.2.15:4243"
</code></p>

<h3><code>-api-enable-cors</code> は必要?</h3>

<p>DockerUI は docker 側の引数に <code>-api-enable-cors</code> が必要と書いていますが、
ちょっと表示を試した感じでは付けていなくても動いていました。
本当に必要なのでしょうか?</p>

<h3>使用感</h3>

<p>最初の画面で円グラフが表示されているなど、
見た目は良く、
前回試した時に比べて機能も増えているように感じました。</p>

<p>認証がなかったり、 <code>-api-enable-cors</code> が必要と書いていたりして
セキュリティ的に気になる点がありました。</p>

<p>VM の中で動かすだけなので、セキュリティ的なことは気にしないとか、
firewall などで別途セキュリティは確保できるという状態なら
良いのではないでしょうか。</p>

<h3>dokku 環境にインストール</h3>

<p>もうちょっと調べていたところ、
<a href="https://github.com/crosbymichael/dockerui/pull/14">Makes dockerui compatible with dokku</a>
という変更が入っているようなので、
<code>dokku</code> 環境では <code>docker pull</code> の代わりに
<code>dokku</code> への <code>git push</code> で簡単に最新版を使えるようになるようです。</p>

<p><code>dokku</code> への <code>git push</code> は Installing のところで少し時間がかかります。</p>

<p>deploy 出来れば他の <code>dokku</code> に deploy したアプリと同じように
<code>http://dockerui.deploy.127.0.0.1.xip.io</code>
のような <code>dokku</code> で設定した URL で見えるようになります。</p>

<p>参考のため、実際に試したログを載せておきます。
<code>~/.ssh/config</code> で <code>raring64</code> という名前で <code>ssh</code> 接続できるようにしていて、
<code>dokku</code> ユーザーに接続する必要があるので、
<code>dokku@raring64</code> になっています。</p>

<p>```console
% git clone <a href="https://github.com/crosbymichael/dockerui">https://github.com/crosbymichael/dockerui</a>
Cloning into &lsquo;dockerui&rsquo;&hellip;
remote: Counting objects: 709, done.
remote: Compressing objects: 100% (385/385), done.
remote: Total 709 (delta 315), reused 705 (delta 314)
Receiving objects: 100% (709/709), 2.50 MiB | 585.00 KiB/s, done.
Resolving deltas: 100% (315/315), done.
Checking connectivity&hellip; done.
% cd dockerui
% git remote add raring64 dokku@raring64:dockerui
% git push raring64 master
Counting objects: 705, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (389/389), done.
Writing objects: 100% (705/705), 2.50 MiB | 0 bytes/s, done.
Total 705 (delta 313), reused 698 (delta 306)
&mdash;&mdash;&ndash;> Cleaning up &hellip;
&mdash;&mdash;&ndash;> Building dockerui &hellip;</p>

<pre><code>   Go app detected
</code></pre>

<p>&mdash;&mdash;&ndash;> Installing Go 1.1.2&hellip; done</p>

<pre><code>   Installing Virtualenv... done
   Installing Mercurial... done
   Installing Bazaar... done
</code></pre>

<p>&mdash;&mdash;&ndash;> Running: go get -tags heroku ./&hellip;
&mdash;&mdash;&ndash;> Discovering process types</p>

<pre><code>   Procfile declares types -&gt; web
</code></pre>

<p>&mdash;&mdash;&ndash;> Releasing dockerui &hellip;
&mdash;&mdash;&ndash;> Deploying dockerui &hellip;
=====> Application deployed:</p>

<pre><code>   http://dockerui.deploy.127.0.0.1.xip.io
</code></pre>

<p>To dokku@raring64:dockerui
 * [new branch]      master &ndash;> master
Killed by signal 1.
% ssh dokku@raring64 config:set dockerui DOCKER_ENDPOINT=<a href="http://10.0.2.15:4243">http://10.0.2.15:4243</a>
&mdash;&mdash;&ndash;> Setting config vars and restarting dockerui
DOCKER_ENDPOINT: <a href="http://10.0.2.15:4243">http://10.0.2.15:4243</a>
&mdash;&mdash;&ndash;> Releasing dockerui &hellip;
&mdash;&mdash;&ndash;> Release complete!
&mdash;&mdash;&ndash;> Deploying dockerui &hellip;
&mdash;&mdash;&ndash;> Deploy complete!
Killed by signal 1.
```</p>

<p>最初は pull request の説明にあった <code>config:add</code> で試していて、
<code>ssh dokku@raring64 logs dockerui</code> で確認してみても
<code>http: proxy error: unsupported protocol scheme ""</code>
とログに出ているだけでうまく情報がとれていないと思ったら、
<code>config:set</code> が正しい、というのが原因でした。</p>

<h2>まとめ</h2>

<p>以前に試した時は <code>Shipyard</code>
が一番高機能で開発も活発に見えて良さそうに感じましたが、
今は <code>DockerUI</code> も機能が増えていて、
今後、どちらも主流になる可能性があるように感じました。</p>

<p><code>DockerUI</code> の方は認証がなかったり、
docker の設定に <code>-api-enable-cors</code> が必要と書いていたりするので、
セキュリティを気にするのなら、
<code>Shipyard</code> の方がお勧めできると思いました。</p>

<p><code>Dockland</code> は <code>docker images -viz</code> を使っているというアイデアは
良さそうに感じたので、ぜひ他の Web UI でも採用されると便利そうだと
思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dockerのカスタムベースイメージを作成する]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-13-docker-custom-base-image.html"/>
    <updated>2013-12-13T18:49:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/docker-custom-base-image</id>
    <content type="html"><![CDATA[<p>例などにある ubuntu の base image は
apt-line が archive.ubuntu.com になっていて、
apt-get install などが遅いです。</p>

<p>日本で使うのなら日本のミラーを使った方が良いので、
そういう base image を作ります。</p>

<p>base image はあまりカスタマイズせずに、
派生するイメージにDockerfile などを使って
カスタマイズをした方が望ましいのですが、
ほぼ必須のものを毎回インストールするのは無駄なので、
ついでに日本語 locale を入れるというカスタマイズもしておきます。</p>

<!--more-->


<h2>docker 向けのポイント</h2>

<p>最初に docker 向けのポイントをまとめておきます。</p>

<ul>
<li>最小限にするなら <code>--variant=minbase</code></li>
<li><code>--include=iproute</code> などで <code>iproute</code> パッケージを入れておかないとネットワークにつながらない</li>
<li><code>policy-rc.d</code> とか <code>initctl</code> を対処しておかないとパッケージのインストール時に変なことになるかも</li>
<li><code>dpkg</code> に <code>force-unsafe-io</code> を設定すると <code>apt</code> を高速化できる</li>
<li><a href="https://github.com/dotcloud/docker/blob/master/contrib/mkimage-debootstrap.sh">mkimage-debootstrap.sh</a> をそのまま使う場合も日本のミラーを指定する方が良い</li>
</ul>


<h2>base image の作り方</h2>

<p>公式ドキュメントの
<a href="http://docs.docker.io/en/latest/use/baseimages/">Base Image Creation</a>
を参考にして、基本は
<a href="https://github.com/dotcloud/docker/blob/master/contrib/mkimage-debootstrap.sh">mkimage-debootstrap.sh</a>
の手順を使います。</p>

<p>カスタマイズのため、手順を追いかけるだけで直接は使いません。</p>

<h2>debootstrap の実行</h2>

<p>最初は以下のように <code>/tmp/wheezy64</code> などの適当な場所に
<code>debootstrap</code> で <code>chroot</code> 環境を作成します。
proxy 環境なら <code>sudo http_proxy=$http_proxy debootstrap ...</code>
のように指定すれば良いようです。</p>

<p>Debian での例:
<code>
 sudo debootstrap --verbose --variant=minbase --include=iproute --arch=amd64 wheezy /tmp/wheezy64 http://cdn.debian.or.jp/debian
</code></p>

<p>Ubuntu での例:
<code>
 sudo debootstrap --verbose --variant=minbase --arch=amd64 precise /tmp/precise64 http://ftp.jaist.ac.jp/pub/Linux/ubuntu/
</code></p>

<h3>variant</h3>

<p><code>variant</code> で <code>minbase</code> を指定するとインストールされるパッケージが減って、
本当に最小限の環境になります。
具体的には <code>Essential: yes</code> のパッケージ
( <code>aptitude search '~E'</code> または <code>aptitude search '?essential'</code> で一覧)
と <code>apt</code> がインストールされます。</p>

<p><code>buildd</code> という <code>variant</code> もあって <code>minbase</code> に加えて
<code>build-essential</code> が追加でインストールされるようなので、
CI 環境用などの base image なら <code>--variant=buildd</code> の方が
良いかもしれません。</p>

<p>デフォルトだと <code>Priority</code> が <code>imporant</code> のパッケージ
( <code>aptitude search '~pimportant</code> または <code>aptitude search '?priority(important)' で一覧)
がインストールされるようです。
インストールされるパッケージの差分は
</code>aptitude search &lsquo;~pimportant!~E`
で調べられます。</p>

<h3>include</h3>

<p>元の <code>mkimage-debootstrap.sh</code> では <code>iproute,iputils-ping</code> と指定してますが、
<code>iputils-ping</code> は必須ではないのでここでは省略しています。</p>

<p><code>iproute</code> は docker 環境では必須です。
このパッケージに含まれる <code>ip</code> コマンドが入っていないとネットワークにつながりません。</p>

<p><code>iproute</code> パッケージは <code>Priority</code> が <code>optional</code> なので
普通に <code>debootstrap</code> を実行しても入らないので、
注意が必要です。</p>

<h3>その他の引数</h3>

<p>arch の指定とか suite の指定とか生成先ディレクトリの指定とか、
ミラーの指定とかは見てわかる通りです。</p>

<h2>docker 向けのカスタマイズ</h2>

<p>次に生成されたディレクトリの中で
<code>mkimage-debootstrap.sh</code>
にデフォルト (<code>-d</code> オプションが指定されなかったとき) の処理をしていきます。</p>

<h3>policy-rc.d</h3>

<p>ファイルの作成方法は何でも良いのですが、
exit status で 101 を返す <code>usr/sbin/policy-rc.d</code> を作成して、
パッケージのインストールやアップデートなどで init スクリプトが
実行されないようにします。</p>

<p>ちなみに
<code>$'...'</code> は bash に <code>\n</code> を解釈させるための書き方なので、
<code>'...'</code> や <code>"..."</code> の間違いではありません。</p>

<p><code>
 echo $'#!/bin/sh\nexit 101' | sudo tee usr/sbin/policy-rc.d &gt; /dev/null
 sudo chmod +x usr/sbin/policy-rc.d
</code></p>

<p><code>policy-rc.d</code> については <code>invoke-rc.d</code> の man を参照してください。</p>

<h3>sbin/initctl</h3>

<p>initctl を実行してしまう upstart スクリプトがあるらしく、
その対処もします。</p>

<p>policy-rc.d は存在しなかったので、作成するだけでしたが、
<code>sbin/initctl</code> はパッケージ管理のファイルとして存在するので
<code>dpkg-divert</code> でパッケージの更新などで上書きされないようにしています。</p>

<p><code>
 sudo chroot . dpkg-divert --local --rename --add /sbin/initctl
 sudo ln -sf /bin/true sbin/initctl
</code></p>

<h3>パッケージのキャッシュの削除</h3>

<p><code>
 sudo chroot . apt-get clean
</code></p>

<p>を実行して不要な deb ファイルなどを削除して、
イメージのサイズを削減しています。</p>

<p>後で独自カスタマイズのところでパッケージをインストールして、
その後でまた実行するので、その場合はここでは実行しなくてもかまいません。</p>

<h3>apt の高速化など</h3>

<p><code>mkimage-debootstrap.sh</code> のコメントには
<code>dpkg</code> がパッケージの展開後に <code>sync()</code> を呼んでいるのが
原因で無駄に遅くなっているので、
強制的に <code>sync()</code> を呼ばなくさせると書いています。</p>

<p><code>
 echo 'force-unsafe-io' | sudo tee etc/dpkg/dpkg.cfg.d/02apt-speedup &gt; /dev/null
</code></p>

<p>それから、 deb ファイルを残さないようにして image ファイルが大きくならないようにしています。</p>

<p><code>
 echo 'DPkg::Post-Invoke {"/bin/rm -f /var/cache/apt/archives/*.deb || true";};' | sudo tee etc/apt/apt.conf.d/no-cache &gt; /dev/null
</code></p>

<h3>元に戻す方法</h3>

<p><code>mkimage-debootstrap.sh</code> のコメントに
元に戻す方法も書いてありました。
<code>dpkg-divert</code> 以外はファイルを消すだけです。</p>

<p><code>
 rm /usr/sbin/policy-rc.d
 rm /sbin/initctl; dpkg-divert --rename --remove /sbin/initctl
 rm /etc/dpkg/dpkg.cfg.d/02apt-speedup
 rm /etc/apt/apt.conf.d/no-cache
</code></p>

<h3>apt-line の変更</h3>

<p><code>etc/apt/sources.list</code> をみると</p>

<p><code>
 deb http://cdn.debian.or.jp/debian wheezy main
</code></p>

<p>だけになっているので、 <code>updates</code> と <code>security</code> を追加します。</p>

<p><code>mkimage-debootstrap.sh</code> もデフォルト
(<code>-d</code> も <code>-s</code> も指定されていないとき)
の動作では追加します。</p>

<p>この例では以下のようにしました。</p>

<p>debian での例:
<code>
 deb http://cdn.debian.or.jp/debian wheezy main
 deb http://cdn.debian.or.jp/debian wheezy-updates main
 deb http://security.debian.org/ wheezy/updates main
</code></p>

<p>ubuntu での例:
<code>
 deb http://ftp.jaist.ac.jp/pub/Linux/ubuntu precise main universe
 deb http://ftp.jaist.ac.jp/pub/Linux/ubuntu precise-updates main universe
 deb http://ftp.jaist.ac.jp/pub/Linux/ubuntu precise-security main universe
</code></p>

<p>main 以外を追加したい場合はここで追加しておくと良さそうです。
<code>mkimage-debootstrap.sh</code> でも ubuntu の場合は <code>universe</code> が追加されていました。</p>

<h2>独自カスタマイズ</h2>

<p>ここから独自カスタマイズになります。</p>

<h3>アップデート実行</h3>

<p>base image にセキュリティアップデートも入れておきたいなら、
更新しておきます。</p>

<p><code>
 sudo chroot . apt-get update
 sudo chroot . apt-get dist-upgrade
</code></p>

<h3>日本語 locale 追加</h3>

<p>debian の場合は
別環境で <code>debconf-get-selections</code> で調べておいた設定を使って、
<code>debconf-set-selections</code> で設定を入れておいて
<code>DEBIAN_FRONTEND=noninteractive</code> でインストールします。</p>

<p><code>
 echo locales locales/locales_to_be_generated multiselect ja_JP.EUC-JP EUC-JP, ja_JP.UTF-8 UTF-8 | sudo chroot . debconf-set-selections
 echo locales locales/default_environment_locale select ja_JP.UTF-8 | sudo chroot . debconf-set-selections
 sudo chroot . env DEBIAN_FRONTEND=noninteractive apt-get install locales
</code></p>

<p>ubuntu の場合は
<code>language-pack-ja</code> パッケージを入れても良いのですが、
不要なパッケージを入れるのが嫌なら <code>locale-gen</code> コマンドで
生成しても良いです。</p>

<p><code>
 sudo chroot . locale-gen ja_JP.UTF-8
 sudo chroot . locale-gen ja_JP.EUC-JP
</code></p>

<h3>パッケージのキャッシュの削除</h3>

<p>カスタマイズが終わったら clean を実行しておきます。
<code>etc/apt/apt.conf.d/no-cache</code> を作成していれば不要かもしれません。</p>

<p><code>
 sudo chroot . apt-get clean
</code></p>

<h2>イメージ作成と取り込み</h2>

<h3>tarball 作成</h3>

<p><code>mkimage-debootstrap.sh</code> は <code>-t</code> オプションが指定されたときに
docker のイメージではなく tarball を作成します。
直接取り込むならこの手順は不要です。</p>

<p>作成方法としては
最初に <code>touch</code> で一般ユーザー権限のファイルになるようにしておいて、
中身は <code>root</code> 権限で入れるようにしています。</p>

<p><code>
 touch /tmp/wheezy64.tar.xz
 sudo tar --numeric-owner -caf /tmp/wheezy64.tar.xz .
</code></p>

<h3>イメージ取り込み</h3>

<p><code>sudo docker</code> は root 権限が不要な設定にいていれば <code>docker</code> だけでかまいません。</p>

<p><code>mkimage-debootstrap.sh</code> は安定版や LTS に <code>latest</code> タグを設定したり、
<code>etc/debian_version</code> や <code>etc/lsb-release</code> をみて
タグを設定しているので、必要に応じて設定しておきます。</p>

<p>イメージ名としては「ユーザー名/レポジトリ名」という形式が推奨されていますが、
ここでは例として「ユーザー名」の部分は「local」にしておきます。
そして「レポジトリ名」としては日本語 locale を入れたということで
<code>-ja</code> を付けました。
日本のミラーを使っているということで <code>-ja-jp</code> にしても良かったのですが、
長かったので、 <code>-ja</code> だけにしました。</p>

<p>Debian での例:
<code>
 sudo tar --numeric-owner -c . | sudo docker import - local/debian-ja:wheezy
 sudo docker tag local/debian-ja:wheezy local/debian-ja:latest
 sudo docker tag local/debian-ja:wheezy local/debian-ja:7.2
</code></p>

<p>Ubuntu での例:
<code>
 sudo tar --numeric-owner -c . | sudo docker import - local/ubuntu-ja:precise
 sudo docker tag local/ubuntu-ja:precise local/ubuntu-ja:latest
 sudo docker tag local/ubuntu-ja:precise local/ubuntu-ja:12.04
</code></p>

<h2>まとめ</h2>

<p><a href="https://github.com/dotcloud/docker/blob/master/contrib/mkimage-debootstrap.sh">mkimage-debootstrap.sh</a>
で何をやっているのか、
同じことを手動でやるのはどうするのかということを説明しました。</p>

<p>最初のポイントにも書きましたが
<code>mkimage-debootstrap.sh</code>
を直接使うのも良いですが、
最低限ミラーを指定するのがおすすめです。</p>

<p>目的によっては <code>variant</code> を変更したり、
<code>include</code> でインストールするパッケージを増やしておくだけでも
便利になると思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBoxでdokkuを試した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-15-dokku.html"/>
    <updated>2013-11-15T15:35:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dokku</id>
    <content type="html"><![CDATA[<p>VirtualBox の中に Ubuntu 13.04 を入れて
<a href="https://github.com/progrium/dokku">dokku</a>
を試してみました。</p>

<p><a href="http://blog.coiney.com/2013/08/10/create-my-own-heroku/">dokku + VirtualBoxで自分のHerokuを作る</a>
を参考にしたのですが、
情報が古いのか、
README
に書いてあるのとコマンドが違うところ
(<code>gitreceive</code> が <code>sshcommand</code> になっているなど)
があるので、
README
の手順を基準にするのが良さそうです。</p>

<!--more-->


<h2>対象バージョン</h2>

<p>dokku の README に Ubuntu 13.10 と docker の組み合わせは
まだ問題があり、
13.04 が推奨と書いてあったので、
13.04 を使いました。</p>

<ul>
<li>ホストOS : OS X 10.9</li>
<li>VirtualBox 4.3.2</li>
<li>ゲストOS : Ubuntu 13.04 (amd64)</li>
<li>lxc-docker : 0.6.6</li>
<li>dokku : 今の master ブランチ (59ef6510bc)</li>
</ul>


<h2>Ubuntu 13.04 (amd64) のインストール</h2>

<p>OS のインストールは自分がこうしたというだけの話なので、
興味が無ければ dokku のインストールまで飛ばしてください。</p>

<p>いつものように
<a href="http://ftp.jaist.ac.jp/pub/Linux/ubuntu-releases/">Ubuntu Releases の jaist ミラー</a>
から
<code>ubuntu-13.04-server-amd64.iso</code>
をダウンロードしてインストールしました。</p>

<p>最初のユーザーは <code>adminuser</code> で、
<code>ssh</code> は後で入れるので、
パッケージのチェックは入れずにインストールしました。
ディスクは多めに 20GB に設定した以外はほぼデフォルトでインストールしました。</p>

<h3>etckeeper の設定</h3>

<ul>
<li><code>sudo aptitude install etckeeper git</code> で <code>git</code> と一緒にインストールして <code>bzr</code> をインストールしないようにします。
<code>bzr</code> がないので自動での <code>etckeeper init</code> は失敗するので、手動で実行します。</li>
<li><code>EDITOR=vi sudoedit /etc/etckeeper/etckeeper.conf</code> で <code>VCS="git"</code> と <code>GIT_COMMIT_OPTIONS="-v"</code> に変更します。</li>
<li><code>sudo etckeeper init</code> で初期化します。</li>
<li><code>sudo etckeeper commit "Initial commit"</code> で今の状態をコミットしておきます。</li>
<li><code>(cd /etc/ &amp;&amp; sudo git gc)</code> で <code>git gc</code> しておきます。</li>
</ul>


<h3>ufw の設定</h3>

<ul>
<li><code>/etc/default/ufw</code> の <code>DEFAULT_FORWARD_POLICY</code> を <code>DROP</code> から <code>ACCEPT</code> に変更しておきます。
<code>DROP</code> のままだと後で <code>docker</code> の中から DNS の解決ができないのが原因で <code>! [remote rejected] master -&gt; master (pre-receive hook declined)</code> になります。</li>
<li><code>sudo ufw enable</code> で有効にします。</li>
<li><code>sudo ufw allow 22/tcp</code> で <code>ssh</code> を許可します。</li>
<li><code>sudo ufw allow 80/tcp</code> で <code>http</code> を許可します。</li>
<li><code>sudo etckeeper commit "enable ufw"</code> などで変更を保存します。</li>
</ul>


<h3>ssh の設定</h3>

<ul>
<li><code>sudo aptitude install ssh</code> でインストールします。</li>
<li><code>/etc/hosts.deny</code> に <code>ALL: ALL</code> を追加してデフォルト拒否にします。</li>
<li><code>/etc/hosts.allow</code> に <code>sshd: 127.0.0.1 [::1]</code>
を追加してローカルホストからの接続を許可します。</li>
<li><code>/etc/hosts.allow</code> に <code>sshd: 10.0.0.0/8</code> も追加して
VirtualBox のポートフォワーディング経由の接続を許可します。</li>
<li><code>/etc/ssh/sshd_config</code> (<code>ssh_config</code> ではない) に
<code>AllowUsers adminuser</code> と <code>AllowUsers dokku</code> を追加して、
特定のユーザーにだけ <code>ssh</code> で接続できるようにします。</li>
</ul>


<p>ホストOS側では Vagrant も使っていたので、
ssh 用の鍵としては
<a href="https://github.com/mitchellh/vagrant/tree/master/keys">Vagrant の Insecure Keypair</a>
を使いました。</p>

<p>そして
ホストOS側の
<code>~/.ssh/config</code>
の設定としては、
グローバルの設定も含めると以下のようにしました。</p>

<p><code>
ExitOnForwardFailure yes
Ciphers aes256-ctr,aes192-ctr,aes128-ctr
HashKnownHosts no
NoHostAuthenticationForLocalhost yes
ServerAliveInterval 30
Host raring64
  Ciphers arcfour256,arcfour128
  HostName 127.0.0.1
  User adminuser
  Port 21304
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile ~/.vagrant.d/insecure_private_key
  IdentitiesOnly yes
</code></p>

<p><code>Ciphers</code> はデフォルトはセキュアなものを使い、
VM 用には速いものを使うようにしています。</p>

<h2>VirtualBox のポートフォワーディング設定</h2>

<p>設定のネットワークのポートフォワーディングのところで、</p>

<ul>
<li>名前:SSH, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:21304, ゲストIP:空欄, ゲストポート:22</li>
<li>名前:Web, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:1384, ゲストIP:空欄, ゲストポート:80</li>
</ul>


<p>のような感じで設定しました。</p>

<p>13.10 にしたら</p>

<ul>
<li>名前:SSH, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:21310, ゲストIP:空欄, ゲストポート:22</li>
<li>名前:Web, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:1380, ゲストIP:空欄, ゲストポート:80</li>
</ul>


<p>とすれば良いかなと思っています。</p>

<h2>dokku のインストール</h2>

<p><a href="https://github.com/progrium/dokku/blob/1d3ae29ba6bed8e1c98991c15db45724508fae30/README.md">README</a>
に書いてあるように
<code>wget -qO- https://raw.github.com/progrium/dokku/master/bootstrap.sh | sudo bash</code>
などでインストールできます。</p>

<p>実際には、
内容を確認したかったので、
<code>wget</code> でダウンロードした後、
<code>sudo bash &lt; bootstrap.sh</code>
で実行しました。</p>

<p>時間は5分程度かかると書いてありますが、
実際には
<code>docker</code>
用のイメージのダウンロードに時間がかかるので、
ネットワークの速度の影響が大きいようです。</p>

<h2>dokku の設定</h2>

<h3>VHOST の設定</h3>

<p>参考にしたサイトと同じように <code>xip.io</code> を使いました。
ポートフォワーディング経由にしているので、
<code>127.0.0.1</code>
にしています。</p>

<p><code>
echo deploy.127.0.0.1.xip.io | sudo tee /home/dokku/VHOST
</code></p>

<h3>ssh 公開鍵の追加</h3>

<p><code>ssh</code>
の接続は Vagrant と共通の鍵を使うことにしたので、
<code>/home/adminuser/.ssh/authorized_keys</code>
には <code>vagrant.pub</code> と同じ内容が入っています。</p>

<p>この鍵をそのまま <code>dokku</code> の方に登録しました。</p>

<p>ここもゲストOS側での作業になります。
README の手順では <code>ssh</code> 経由で <code>sudo</code> を実行しています。</p>

<p><code>
cat ~/.ssh/authorized_keys | sudo sshcommand acl-add dokku vagrant
</code></p>

<p>この手順で追加した公開鍵は</p>

<p><code>
sudo sshcommand acl-remove dokku vagrant
</code></p>

<p>で削除できます。</p>

<p>他の公開鍵を追加する時は <code>vagrant</code> の部分を変更しておかないと
<code>acl-remove</code> でまとめて削除されてしまいます。</p>

<h2>アプリケーションの deploy</h2>

<p>問題なく設定できていれば以下で deploy できます。</p>

<p>```</p>

<pre><code>git clone https://github.com/heroku/node-js-sample
cd node-js-sample
git remote add raring64 dokku@raring64:node-js-app
git push raring64 master
</code></pre>

<p>```</p>

<p>エラーになったときはログをみたり、
<code>dmesg</code>
を見たりして原因を調べてください。</p>

<p>正常に deploy できていれば
<code>http://node-js-app.deploy.127.0.0.1.xip.io:1384</code>
で <code>Hello World!</code> と表示されます。</p>

<h2>リモートからの dokku コマンド</h2>

<p>README には <code>$ dokku run node-js-app ls -alh</code> と書いてあり、
ホストOS側には <code>dokku</code> コマンドはないので、
どうすればいいのか悩んだのですが、</p>

<p><code>
 ssh dokku@raring64 run node-js-app ls -alh
</code></p>

<p>のように <code>git push</code> に使う <code>ssh</code> 経由で
<code>dokku</code> コマンドが実行されているのを使えました。</p>

<p>入力待ちになってしまうようで、
<code>control+D</code> で <code>EOF</code> を入力するなどしないと
ホストOS側のプロンプトに戻ってこないので、
想定された使い方ではなさそうな感じです。</p>

<p>他にも</p>

<p><code>
 ssh dokku@raring64 delete node-js-app
</code></p>

<p>でアプリケーションの削除もできました。
heroku と違って確認なしにいきなり削除されてしまうので注意が必要です。</p>

<p>どんなコマンドが実行できるのかは <code>dokku help</code> 相当の</p>

<p><code>
 ssh dokku@raring64 help
</code></p>

<p>で一覧が出てきます。</p>

<p>普段使いそうなのは <code>config</code> 関連と <code>logs</code> だと思いました。</p>
]]></content>
  </entry>
  
</feed>
