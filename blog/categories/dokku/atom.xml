<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dokku | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/dokku/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-11-06T00:04:43+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu 14.04 で dokku を使う]]></title>
    <link href="http://blog.n-z.jp/blog/2014-04-18-ubuntu-1404-dokku.html"/>
    <updated>2014-04-18T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ubuntu-1404-dokku</id>
    <content type="html"><![CDATA[<p>Ubuntu 14.04 がリリースされたので、
<a href="https://github.com/progrium/dokku">dokku</a>
を Ubuntu 14.04 で試してみました。</p>

<!--more-->


<h2>dokku の Vagrantfile を確認する</h2>

<p>まず dokku を clone して中の Vagrantfile をみて、
環境変数で設定できる項目があるのを確認しておきます。</p>

<pre><code class="console">% git clone https://github.com/progrium/dokku
% cd dokku
% vi Vagrantfile
</code></pre>

<h2>Vagantfile を変更する</h2>

<p>デフォルトの apt-line のままだとダウンロードが遅いので、
<a href="http://mirrors.ubuntu.com/mirrors.txt">http://mirrors.ubuntu.com/mirrors.txt</a>
からミラーサーバーを選んで (今回は jaist を選択)、
shell provision のところで書き換えておきます。
(関係ないところにマッチして問題が起きる可能性はほぼないので、置換元の URL の <code>.</code> はエスケープしていません。)</p>

<pre><code class="diff">diff --git a/Vagrantfile b/Vagrantfile
index a310f6b..7c1a133 100644
--- a/Vagrantfile
+++ b/Vagrantfile
@@ -29,5 +29,10 @@ Vagrant::configure("2") do |config|
     vb.customize ["modifyvm", :id, "--memory", BOX_MEMORY]
   end

-  config.vm.provision :shell, :inline =&gt; "apt-get -y install git &amp;&amp; cd /root/dokku &amp;&amp; #{make_cmd}"
+  config.vm.provision :shell, :inline =&gt; &lt;&lt;-SHELL
+    sed -i~ -e 's;http://archive.ubuntu.com/ubuntu;http://ftp.jaist.ac.jp/pub/Linux/ubuntu;' /etc/apt/sources.list &amp;&amp;
+    apt-get update &amp;&amp;
+    apt-get -y install git &amp;&amp;
+    cd /root/dokku &amp;&amp; #{make_cmd}
+  SHELL
 end
</code></pre>

<h2>初回起動</h2>

<p><code>BOX_NAME</code>, <code>BOX_URI</code> に trusty を指定して、
<code>BOX_MEMORY</code> も 512 から 2048 に増やした値を指定して起動します。</p>

<p><code>node-js-sample</code> だと 512 メガでも問題ないのですが、
Rails アプリを動かそうとするとメモリ不足で <code>bundle install</code> の途中で失敗して
deploy できなかったので増やしています。</p>

<pre><code class="console">% BOX_NAME=trusty-amd64-20140418 BOX_URI=https://cloud-images.ubuntu.com/vagrant/trusty/20140418/trusty-server-cloudimg-amd64-vagrant-disk1.box BOX_MEMORY=2048 vagrant up
</code></pre>

<p>box のダウンロードとインストール、
VM の作成などには時間がかかるので、
他のことをしながらゆっくり待ちます。</p>

<h2>二度目以降の起動</h2>

<p>VM の作成ができている状態なら、
box の設定は参照されないので省略できます。
<code>vagrant destroy</code> した後に <code>vagrant up</code> し直したときは参照されるので、
毎回設定していてもかまいません。</p>

<p><code>BOX_MEMORY</code> は毎回設定されるので、指定を忘れると 512 に戻ってしまいます。</p>

<pre><code class="console">% BOX_MEMORY=2048 vagrant up
</code></pre>

<h2>dokku の初期設定</h2>

<p>ssh の鍵を追加します。</p>

<pre><code class="console">% vagrant ssh
vagrant@dokku:~$ egrep '^ssh' ~/.ssh/authorized_keys | sudo sshcommand acl-add dokku vagrant
dd:3b:b8:2e:85:04:06:e9:ab:ff:a8:0a:c0:04:6e:d6
vagrant@dokku:~$ cat ~/.ssh/authorized_keys
# CLOUD_IMG: This file was created/modified by the Cloud Image build process
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key
vagrant@dokku:~$ cat /home/dokku/.ssh/authorized_keys
command="FINGERPRINT=dd:3b:b8:2e:85:04:06:e9:ab:ff:a8:0a:c0:04:6e:d6 NAME=vagrant `cat /home/dokku/.sshcommand` $SSH_ORIGINAL_COMMAND",no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key
</code></pre>

<h2>dokku の鍵追加失敗例</h2>

<p><code>cat ~/.ssh/authorized_keys | sudo sshcommand acl-add dokku vagrant</code>
で追加してしまうと以下のように変になってしまいます。</p>

<pre><code class="text">vagrant@dokku:~$ cat /home/dokku/.ssh/authorized_keys
command="FINGERPRINT=is NAME=vagrant `cat /home/dokku/.sshcommand` $SSH_ORIGINAL_COMMAND",no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding # CLOUD_IMG: This file was created/modified by the Cloud Image build process
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key
</code></pre>

<pre><code class="bash">    KEY=$(cat)
    FINGERPRINT=$(ssh-keygen -lf /dev/stdin &lt;&lt;&lt; $(echo $KEY) | awk '{print $2}')
    KEY_PREFIX="command=\"FINGERPRINT=$FINGERPRINT NAME=$NAME \`cat $USERHOME/.sshcommand\` \$SSH_ORIGINAL_COMMAND\",no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding"
    echo "$KEY_PREFIX $KEY" &gt;&gt; "$USERHOME/.ssh/authorized_keys"
    echo $FINGERPRINT
</code></pre>

<p>の部分を以下のように <code>while read</code> ループに変えた方が良いのかもしれません。</p>

<pre><code class="bash">    while read KEY; do
      FINGERPRINT=$(ssh-keygen -lf /dev/stdin &lt;&lt;&lt; $(echo $KEY) | awk '{print $2}')
      KEY_PREFIX="command=\"FINGERPRINT=$FINGERPRINT NAME=$NAME \`cat $USERHOME/.sshcommand\` \$SSH_ORIGINAL_COMMAND\",no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding"
      echo "$KEY_PREFIX $KEY" &gt;&gt; "$USERHOME/.ssh/authorized_keys"
      echo $FINGERPRINT
    done
</code></pre>

<h2>node-js-sample の deploy</h2>

<p><code>node-js-sample</code> を <code>deploy</code> して動作確認します。
以下の例では <code>ssh dokku</code> で VM に接続できるように <code>~/.ssh/config</code> に設定済みです。</p>

<pre><code class="console">% git clone https://github.com/heroku/node-js-sample
Cloning into 'node-js-sample'...
remote: Reusing existing pack: 319, done.
remote: Total 319 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (319/319), 201.92 KiB | 210.00 KiB/s, done.
Resolving deltas: 100% (17/17), done.
Checking connectivity... done.
% cd node-js-sample
% git remote add dokku dokku:node-js-app
%  git push --set-upstream dokku master
Counting objects: 319, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (274/274), done.
Writing objects: 100% (319/319), 201.92 KiB | 0 bytes/s, done.
Total 319 (delta 17), reused 319 (delta 17)
-----&gt; Cleaning up ...
remote: Cloning into '/tmp/tmp.ChNvZEb5S9'...
-----&gt; Building node-js-app ...
remote: warning: You appear to have cloned an empty repository.
remote: done.
remote: HEAD is now at 2e52ce7... Update documentation links
       Node.js app detected
-----&gt; Requested node range:  0.10.x
-----&gt; Resolved node version: 0.10.26
-----&gt; Downloading and installing node
(省略)
-----&gt; Discovering process types
       Procfile declares types -&gt; web
-----&gt; Releasing node-js-app ...
-----&gt; Deploying node-js-app ...
=====&gt; Application deployed:
       http://node-js-app.dokku.me

To dokku:node-js-app
 * [new branch]      master -&gt; master
Branch master set up to track remote branch master from dokku.
</code></pre>

<p>Vagrantfile で guest の 80 番ポートを host の 8080 番ポートで見えるように設定されているので
<code>http://node-js-app.dokku.me:8080/</code>
で開くと <code>Hello World!</code> と表示されます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBoxでdokkuを試した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-15-dokku.html"/>
    <updated>2013-11-15T15:35:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dokku</id>
    <content type="html"><![CDATA[<p>VirtualBox の中に Ubuntu 13.04 を入れて
<a href="https://github.com/progrium/dokku">dokku</a>
を試してみました。</p>

<p><a href="http://blog.coiney.com/2013/08/10/create-my-own-heroku/">dokku + VirtualBoxで自分のHerokuを作る</a>
を参考にしたのですが、
情報が古いのか、
README
に書いてあるのとコマンドが違うところ
(<code>gitreceive</code> が <code>sshcommand</code> になっているなど)
があるので、
README
の手順を基準にするのが良さそうです。</p>

<!--more-->


<h2>対象バージョン</h2>

<p>dokku の README に Ubuntu 13.10 と docker の組み合わせは
まだ問題があり、
13.04 が推奨と書いてあったので、
13.04 を使いました。</p>

<ul>
<li>ホストOS : OS X 10.9</li>
<li>VirtualBox 4.3.2</li>
<li>ゲストOS : Ubuntu 13.04 (amd64)</li>
<li>lxc-docker : 0.6.6</li>
<li>dokku : 今の master ブランチ (59ef6510bc)</li>
</ul>


<h2>Ubuntu 13.04 (amd64) のインストール</h2>

<p>OS のインストールは自分がこうしたというだけの話なので、
興味が無ければ dokku のインストールまで飛ばしてください。</p>

<p>いつものように
<a href="http://ftp.jaist.ac.jp/pub/Linux/ubuntu-releases/">Ubuntu Releases の jaist ミラー</a>
から
<code>ubuntu-13.04-server-amd64.iso</code>
をダウンロードしてインストールしました。</p>

<p>最初のユーザーは <code>adminuser</code> で、
<code>ssh</code> は後で入れるので、
パッケージのチェックは入れずにインストールしました。
ディスクは多めに 20GB に設定した以外はほぼデフォルトでインストールしました。</p>

<h3>etckeeper の設定</h3>

<ul>
<li><code>sudo aptitude install etckeeper git</code> で <code>git</code> と一緒にインストールして <code>bzr</code> をインストールしないようにします。
<code>bzr</code> がないので自動での <code>etckeeper init</code> は失敗するので、手動で実行します。</li>
<li><code>EDITOR=vi sudoedit /etc/etckeeper/etckeeper.conf</code> で <code>VCS="git"</code> と <code>GIT_COMMIT_OPTIONS="-v"</code> に変更します。</li>
<li><code>sudo etckeeper init</code> で初期化します。</li>
<li><code>sudo etckeeper commit "Initial commit"</code> で今の状態をコミットしておきます。</li>
<li><code>(cd /etc/ &amp;&amp; sudo git gc)</code> で <code>git gc</code> しておきます。</li>
</ul>


<h3>ufw の設定</h3>

<ul>
<li><code>/etc/default/ufw</code> の <code>DEFAULT_FORWARD_POLICY</code> を <code>DROP</code> から <code>ACCEPT</code> に変更しておきます。
<code>DROP</code> のままだと後で <code>docker</code> の中から DNS の解決ができないのが原因で <code>! [remote rejected] master -&gt; master (pre-receive hook declined)</code> になります。</li>
<li><code>sudo ufw enable</code> で有効にします。</li>
<li><code>sudo ufw allow 22/tcp</code> で <code>ssh</code> を許可します。</li>
<li><code>sudo ufw allow 80/tcp</code> で <code>http</code> を許可します。</li>
<li><code>sudo etckeeper commit "enable ufw"</code> などで変更を保存します。</li>
</ul>


<h3>ssh の設定</h3>

<ul>
<li><code>sudo aptitude install ssh</code> でインストールします。</li>
<li><code>/etc/hosts.deny</code> に <code>ALL: ALL</code> を追加してデフォルト拒否にします。</li>
<li><code>/etc/hosts.allow</code> に <code>sshd: 127.0.0.1 [::1]</code>
を追加してローカルホストからの接続を許可します。</li>
<li><code>/etc/hosts.allow</code> に <code>sshd: 10.0.0.0/8</code> も追加して
VirtualBox のポートフォワーディング経由の接続を許可します。</li>
<li><code>/etc/ssh/sshd_config</code> (<code>ssh_config</code> ではない) に
<code>AllowUsers adminuser</code> と <code>AllowUsers dokku</code> を追加して、
特定のユーザーにだけ <code>ssh</code> で接続できるようにします。</li>
</ul>


<p>ホストOS側では Vagrant も使っていたので、
ssh 用の鍵としては
<a href="https://github.com/mitchellh/vagrant/tree/master/keys">Vagrant の Insecure Keypair</a>
を使いました。</p>

<p>そして
ホストOS側の
<code>~/.ssh/config</code>
の設定としては、
グローバルの設定も含めると以下のようにしました。</p>

<pre><code>ExitOnForwardFailure yes
Ciphers aes256-ctr,aes192-ctr,aes128-ctr
HashKnownHosts no
NoHostAuthenticationForLocalhost yes
ServerAliveInterval 30
Host raring64
  Ciphers arcfour256,arcfour128
  HostName 127.0.0.1
  User adminuser
  Port 21304
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile ~/.vagrant.d/insecure_private_key
  IdentitiesOnly yes
</code></pre>

<p><s><code>Ciphers</code> はデフォルトはセキュアなものを使い、
VM 用には速いものを使うようにしています。</s></p>

<p>2014-08-11 追記:
これは意図通りではありませんでした。
<a href="/blog/2014-08-11-openssh-arcfour256.html" title="vagrantなどのローカルへのssh接続のみarcfour256で高速化する">vagrantなどのローカルへのssh接続のみarcfour256で高速化する</a>
で訂正記事を書いています。</p>

<h2>VirtualBox のポートフォワーディング設定</h2>

<p>設定のネットワークのポートフォワーディングのところで、</p>

<ul>
<li>名前:SSH, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:21304, ゲストIP:空欄, ゲストポート:22</li>
<li>名前:Web, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:1384, ゲストIP:空欄, ゲストポート:80</li>
</ul>


<p>のような感じで設定しました。</p>

<p>13.10 にしたら</p>

<ul>
<li>名前:SSH, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:21310, ゲストIP:空欄, ゲストポート:22</li>
<li>名前:Web, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:1380, ゲストIP:空欄, ゲストポート:80</li>
</ul>


<p>とすれば良いかなと思っています。</p>

<h2>dokku のインストール</h2>

<p><a href="https://github.com/progrium/dokku/blob/1d3ae29ba6bed8e1c98991c15db45724508fae30/README.md">README</a>
に書いてあるように
<code>wget -qO- https://raw.github.com/progrium/dokku/master/bootstrap.sh | sudo bash</code>
などでインストールできます。</p>

<p>実際には、
内容を確認したかったので、
<code>wget</code> でダウンロードした後、
<code>sudo bash &lt; bootstrap.sh</code>
で実行しました。</p>

<p>時間は5分程度かかると書いてありますが、
実際には
<code>docker</code>
用のイメージのダウンロードに時間がかかるので、
ネットワークの速度の影響が大きいようです。</p>

<h2>dokku の設定</h2>

<h3>VHOST の設定</h3>

<p>参考にしたサイトと同じように <code>xip.io</code> を使いました。
ポートフォワーディング経由にしているので、
<code>127.0.0.1</code>
にしています。</p>

<pre><code>echo deploy.127.0.0.1.xip.io | sudo tee /home/dokku/VHOST
</code></pre>

<h3>ssh 公開鍵の追加</h3>

<p><code>ssh</code>
の接続は Vagrant と共通の鍵を使うことにしたので、
<code>/home/adminuser/.ssh/authorized_keys</code>
には <code>vagrant.pub</code> と同じ内容が入っています。</p>

<p>この鍵をそのまま <code>dokku</code> の方に登録しました。</p>

<p>ここもゲストOS側での作業になります。
README の手順では <code>ssh</code> 経由で <code>sudo</code> を実行しています。</p>

<pre><code>cat ~/.ssh/authorized_keys | sudo sshcommand acl-add dokku vagrant
</code></pre>

<p>この手順で追加した公開鍵は</p>

<pre><code>sudo sshcommand acl-remove dokku vagrant
</code></pre>

<p>で削除できます。</p>

<p>他の公開鍵を追加する時は <code>vagrant</code> の部分を変更しておかないと
<code>acl-remove</code> でまとめて削除されてしまいます。</p>

<h2>アプリケーションの deploy</h2>

<p>問題なく設定できていれば以下で deploy できます。</p>

<pre><code>    git clone https://github.com/heroku/node-js-sample
    cd node-js-sample
    git remote add raring64 dokku@raring64:node-js-app
    git push raring64 master
</code></pre>

<p>エラーになったときはログをみたり、
<code>dmesg</code>
を見たりして原因を調べてください。</p>

<p>正常に deploy できていれば
<code>http://node-js-app.deploy.127.0.0.1.xip.io:1384</code>
で <code>Hello World!</code> と表示されます。</p>

<h2>リモートからの dokku コマンド</h2>

<p>README には <code>$ dokku run node-js-app ls -alh</code> と書いてあり、
ホストOS側には <code>dokku</code> コマンドはないので、
どうすればいいのか悩んだのですが、</p>

<pre><code> ssh dokku@raring64 run node-js-app ls -alh
</code></pre>

<p>のように <code>git push</code> に使う <code>ssh</code> 経由で
<code>dokku</code> コマンドが実行されているのを使えました。</p>

<p>入力待ちになってしまうようで、
<code>control+D</code> で <code>EOF</code> を入力するなどしないと
ホストOS側のプロンプトに戻ってこないので、
想定された使い方ではなさそうな感じです。</p>

<p>他にも</p>

<pre><code> ssh dokku@raring64 delete node-js-app
</code></pre>

<p>でアプリケーションの削除もできました。
heroku と違って確認なしにいきなり削除されてしまうので注意が必要です。</p>

<p>どんなコマンドが実行できるのかは <code>dokku help</code> 相当の</p>

<pre><code> ssh dokku@raring64 help
</code></pre>

<p>で一覧が出てきます。</p>

<p>普段使いそうなのは <code>config</code> 関連と <code>logs</code> だと思いました。</p>
]]></content>
  </entry>
  
</feed>
