<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dokku | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/dokku/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2016-03-30T22:32:15+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[dokku 0.5.3 を vagrant 環境で試してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-03-30-dokku-053.html"/>
    <updated>2016-03-30T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dokku-053</id>
    <content type="html"><![CDATA[<p>社内向けアプリで本番環境でも使っている dokku のバージョン 0.5.3 をいろいろ試しやすくするために vagrant 環境で試してみました。</p>

<!--more-->


<h2>確認バージョン</h2>

<ul>
<li>VirtualBox 5.0.16</li>
<li>Vagrant 1.8.1</li>
<li>dokku 0.5.3</li>
</ul>


<h2>dokku v0.5.0 での主な変更点</h2>

<p><a href="https://github.com/dokku/dokku/releases/tag/v0.5.0">v0.5.0</a> での主な変更点は以下の通りです。</p>

<ul>
<li>docker 1.10/1.11 のサポートと、 docker 1.9.1 以上の必須化</li>
<li>ドキュメント改善</li>
<li><a href="http://dokku.viewdocs.io/dokku/deployment/deployment-tasks/" title="Deployment Tasks">Deployment Tasks</a> (<code>app.json</code> での <code>scripts.dokku.predeploy</code> と <code>scripts.dokku.postdeploy</code> のサポート)</li>
<li><a href="http://dokku.viewdocs.io/dokku/deployment/dockerfiles/" title="Dockerfile Deployment">Dockerfile Deployment</a> で <code>Procfile</code> サポート、<code>EXPOSE</code> の扱いの変更</li>
<li><a href="http://dokku.viewdocs.io/dokku/dokku-storage/">persistent storage plugin</a> のオフィシャル化</li>
</ul>


<h2>初期設定</h2>

<p><code>git clone https://github.com/dokku/dokku</code> で clone してきたディレクトリの中に入って <code>vagrant up</code> します。
最初は box のダウンロードもあるので時間がかかります。</p>

<p><a href="http://xip.io/">xip.io</a> を使ってサブドメインを使ったデプロイを試します。</p>

<p><code>http://10.0.0.2.xip.io/</code> を開き、 <code>Hostname</code> を <code>10.0.0.2.xip.io</code> にして <code>Use virtualhost naming for apps</code> にチェックを入れて、 <code>Finish Setup</code> を押します。</p>

<p><a href="http://dokku.viewdocs.io/dokku/application-deployment/">http://dokku.viewdocs.io/dokku/application-deployment/</a> にリダイレクトされるので、そのチュートリアルを試します。</p>

<h2>チュートリアル前の準備</h2>

<p><code>vagrant ssh</code> で入って操作します。</p>

<p><code>docker</code> コマンドや <code>dokku</code> コマンドで <code>sudo</code> を不要にするためにグループに追加します。</p>

<ul>
<li><code>sudo usermod -aG docker vagrant</code></li>
<li><code>sudo usermod -aG dokku vagrant</code></li>
</ul>


<p>ビルド中のダウンロードでタイムアウトしにくくするためにタイムアウト時間をのばします。</p>

<ul>
<li><code>dokku config:set --global CURL_TIMEOUT=120</code></li>
</ul>


<p><code>dokku run</code> などで実行して終了したコンテナが溜まっていかないようにするために、デフォルトで <code>--rm</code> をつけるようにします。(この設定をしなくても <code>git push</code> したときに自動で実行される <code>dokku cleanup</code> で削除されます。)</p>

<ul>
<li><code>dokku config:set --global DOKKU_RM_CONTAINER=1</code></li>
</ul>


<h2>チュートリアル</h2>

<p>チュートリアルも <code>vagrant ssh</code> で入った環境で試します。
<code>sudo dokku plugin:install</code> 以外はホスト側からでも実行できます。</p>

<ul>
<li><code>git clone git@github.com:heroku/ruby-rails-sample.git</code> で rails のサンプルを clone しておきます。</li>
<li><code>dokku apps:create ruby-rails-sample</code> でアプリケーションを作成します。データベースとのリンクに必要なので、事前に作成していますが、 <a href="https://github.com/heroku/node-js-sample">https://github.com/heroku/node-js-sample</a> のように単独で動くアプリケーションでは事前に <code>apps:create</code> しなくても構いません。</li>
<li><code>sudo dokku plugin:install https://github.com/dokku/dokku-postgres.git</code> で postgres プラグインをインストールします。インストールの後処理で <code>postgres:9.5.0</code>, <code>svendowideit/ambassador:latest</code>, <code>dokkupaas/wait:latest</code> が docker pull されるので、ダウンロードに少し時間がかかります。</li>
<li><code>docker images</code> で確認するとわかるのですが、なぜか <code>gliderlabs/herokuish</code> が 0 バイトのイメージになってしまっているので <code>docker pull gliderlabs/herokuish</code> でダウンロードしておきます。ここもダウンロードに時間がかかります。この手順は普通にインストールした場合は不要なはずです。</li>
<li><code>dokku postgres:create rails-database</code> でデータベースのコンテナを作成して <code>dokku postgres:link rails-database ruby-rails-sample</code> でリンクします。</li>
<li><code>git remote add dokku dokku@10.0.0.2:ruby-rails-sample</code> で remote に dokku を登録して <code>git push dokku master</code> でデプロイします。</li>
<li><code>curl</code> コマンドでエラーになった場合、 <code>CURL_TIMEOUT</code> をのばして、再度 <code>git push dokku master</code> します。</li>
<li><code>http://ruby-rails-sample.10.0.0.2.xip.io/</code> を開いて <code>Hello World</code> と現在時刻が UTC (+0000) で表示されていたら成功です。</li>
</ul>


<h2>チュートリアル後の変更例</h2>

<p>現在時刻が UTC で表示されていたので JST に変更してみます。</p>

<ul>
<li><code>dokku config:set ruby-rails-sample TZ=Asia/Tokyo</code></li>
</ul>


<p><code>http://ruby-rails-sample.10.0.0.2.xip.io/</code> を開いて <code>Hello World</code> と現在時刻が JST (+0900) で表示されていたら成功です。</p>

<h2><code>rake db:migrate</code> を実行する</h2>

<p><code>dokku run ruby-rails-sample bundle exec rake db:migrate</code> で実行できます。</p>

<h2><code>scripts.dokku.predeploy</code> で <code>rake db:migrate</code> を自動実行する</h2>

<p><a href="http://dokku.viewdocs.io/dokku~v0.5.3/deployment/deployment-tasks/">Deployment Tasks</a> に書いてあるように v0.5.0 から <code>app.json</code> に <code>scripts.dokku.predeploy</code> を設定できるようになっているので、そこで <code>rake db:migrate</code> を自動実行するように設定してみます。</p>

<p>heroku が対応している <code>scripts.postdeploy</code> は初回の deploy 時にしか実行されないのに対して、 <code>scripts.dokku.predeploy</code> と <code>scripts.dokku.postdeploy</code> は毎回実行されるという違いがあります。</p>

<pre><code class="diff">diff --git a/app.json b/app.json
index 452cef1..4c828fa 100644
--- a/app.json
+++ b/app.json
@@ -5,6 +5,9 @@
   "repository": "https://github.com/heroku/ruby-rails-sample",
   "logo": "https://upload.wikimedia.org/wikipedia/commons/c/c3/Ruby_on_Rails_logo.svg",
   "scripts": {
+    "dokku": {
+      "predeploy": "bundle exec rake db:migrate"
+    },
     "postdeploy": "bundle exec rake db:migrate"
   },
   "env": {
</code></pre>

<p>という変更を commit して push して動作確認します。</p>

<p>さらに <code>rails g model</code> などで migration ファイルを作成してさらに動作確認できます。</p>

<h2>pre-flight checks</h2>

<p><a href="http://dokku.viewdocs.io/dokku~v0.5.3/checks-examples/">Zero Downtime Deploys</a> に書いてあるようにゼロダウンタイムデプロイを実現するために <code>CHECKS</code> ファイルを作成します。
(デプロイ後のメッセージに <code>Shutting down old containers in 60 seconds</code> とあるように、デプロイして新しいコンテナに切り替わった直後の 1 分間は古いコンテナも動いています。)</p>

<p>以下の内容の <code>CHECKS</code> ファイルを作成して、デプロイ時の起動確認をデフォルトの 10 秒待つだけの動作から、 http で特定の URL にアクセスして指定した内容が含まれるかどうかのチェックに変更します。</p>

<pre><code>/ Hello World
</code></pre>

<p>デフォルトでは 5 秒ごとに 5 回までのチェックですが、以下の内容にすると 10 秒ごとに 20 回までのチェックになります。
起動に時間がかかるアプリケーションの場合に、回数を増やしたり時間をのばしたりすると良いと思います。</p>

<pre><code>WAIT=10
ATTEMPTS=20
/ Hello World
</code></pre>

<h2>アプリケーションを削除する</h2>

<p><code>dokku apps:destroy ruby-rails-sample</code> で削除できます。
heroku での削除と同じように、確認のため、アプリケーション名を再度入力しないと消えないようになっています。</p>

<p>データベースも作成していたので、同様に <code>dokku postgres:destroy rails-database</code> で削除します。</p>

<h2>node-js-sample を試す</h2>

<p>Dokku の昔のバージョンのチュートリアルは node-js-sample を使っていたので、 node-js-sample も試してみます。</p>

<ul>
<li><code>git clone git@github.com:heroku/node-js-sample.git</code></li>
<li><code>cd node-js-sample</code></li>
<li><code>git remote add dokku dokku@10.0.0.2:node-js-sample</code></li>
<li><code>git push dokku master</code></li>
</ul>


<p><code>http://node-js-sample.10.0.0.2.xip.io/</code> を開いて <code>Hello World!</code> が表示されたら成功です。</p>

<h2>動作確認用シェルスクリプト</h2>

<p><code>rails g model</code> 用に <a href="https://github.com/riywo/anyenv">anyenv</a> と <a href="https://github.com/rbenv/rbenv">rbenv</a> を使って ruby と rails のインストールまでしています。</p>

<p>実行途中で <code>http://10.0.0.2.xip.io/</code> を開いて設定をしないと途中で失敗して止まります。</p>

<pre><code class="bash">#!/bin/bash
set -euo pipefail
set -x
cd /home/vagrant
sudo usermod -aG docker vagrant
sudo usermod -aG dokku vagrant
dokku config:set --global CURL_TIMEOUT=120
dokku config:set --global DOKKU_RM_CONTAINER=1
if [[ ! -d ruby-rails-sample ]]; then
  git clone git@github.com:heroku/ruby-rails-sample.git
fi
if [[ ! -d /home/dokku/ruby-rails-sample ]]; then
  dokku apps:create ruby-rails-sample
fi
if [[ ! -d /var/lib/dokku/plugins/available/postgres ]]; then
  sudo dokku plugin:install https://github.com/dokku/dokku-postgres.git || :
  sudo docker pull gliderlabs/herokuish
fi
if [[ ! -f /home/dokku/ruby-rails-sample/DOCKER_OPTIONS_RUN ]]; then
  dokku postgres:create rails-database || :
  dokku postgres:link rails-database ruby-rails-sample
fi
pushd ~/ruby-rails-sample
if ! git remote | grep -q dokku; then
  git remote add dokku dokku@10.0.0.2:ruby-rails-sample
fi
git push dokku master
if ! dokku config ruby-rails-sample | grep -q '^TZ'; then
  dokku config:set ruby-rails-sample TZ=Asia/Tokyo
fi
popd
if [[ ! -d node-js-sample ]]; then
  git clone git@github.com:heroku/node-js-sample.git
fi
pushd ~/node-js-sample
if ! git remote | grep -q dokku; then
  git remote add dokku dokku@10.0.0.2:node-js-sample
fi
git push dokku master
popd
if dpkg -l | grep -q nodejs; then
  sudo sed -i~ -e 's/us\.archive/jp.archive/' /etc/apt/sources.list
  sudo apt-get update
  sudo apt-get install autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm3 libgdbm-dev
  sudo apt-get install libpq-dev
  sudo apt-get install nodejs
fi
if [[ ! -d ~/.anyenv ]]; then
  git clone https://github.com/riywo/anyenv ~/.anyenv
  echo 'export PATH="$HOME/.anyenv/bin:$PATH"' &gt;&gt; ~/.bashrc
  echo 'eval "$(anyenv init -)"' &gt;&gt; ~/.bashrc
fi
if [[ -z "$(command -v anyenv)" ]]; then
  export PATH="$HOME/.anyenv/bin:$PATH"
  set +x
  eval "$(anyenv init - --no-rehash)"
  set -x
fi
if [[ ! -d ~/.anyenv/envs/rbenv ]]; then
  anyenv install rbenv
fi
if [[ -z "$(command -v rbenv)" ]]; then
  set +x
  eval "$(anyenv init - --no-rehash)"
  set -x
fi
ruby_version=$(awk '/^ruby/{print $2}' ~/ruby-rails-sample/Gemfile | tr -d "'")
if ! rbenv versions | grep -q "$ruby_version"; then
  rbenv install "$ruby_version"
fi
if [[ ! -f ~/.gemrc ]]; then
  cat &lt;&lt;EOF &gt;~/.gemrc
install: --no-rdoc --no-ri --format-executable
update: --no-rdoc --no-ri --format-executable
EOF
fi
export RBENV_VERSION="$ruby_version"
if ! gem list | grep -q bundler; then
  gem install bundler
fi
pushd ~/ruby-rails-sample
bundle
popd
</code></pre>

<h2>まとめ</h2>

<p>vagrant を使って dokku をいろいろ試す環境を簡単に作ることができました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dokku 0.4.1 の新規インストールを試してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2015-10-08-dokku-041.html"/>
    <updated>2015-10-08T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dokku-041</id>
    <content type="html"><![CDATA[<p>仮想環境で dokku 0.4.1 の新規インストールを試しました。</p>

<!--more-->


<h2>検証環境</h2>

<ul>
<li>Ubuntu 14.04.3 LTS (trusty) amd64</li>
<li><code>docker</code> 1.8.2</li>
<li><code>dokku</code> 0.4.1</li>
<li><a href="https://github.com/Flink/dokku-psql-single-container" title="dokku-psql-single-container">dokku-psql-single-container</a> プラグイン 0.4.0</li>
</ul>


<h2>dokku のインストール</h2>

<p><a href="https://github.com/progrium/dokku#installing" title="Installing">Installing</a> の手順通りにインストールしました。</p>

<pre><code>wget https://raw.githubusercontent.com/progrium/dokku/v0.4.1/bootstrap.sh
sudo DOKKU_TAG=v0.4.1 bash bootstrap.sh
</code></pre>

<p><code>herokuish</code> の <code>postinst</code> で時間がかかります。</p>

<h2>Web UI で初期設定</h2>

<p>debconf での設定は出てこなかったので Web ブラウザで <code>http://localhost</code> を開いて初期設定します。</p>

<p><code>Public Key</code> には <code>~/.ssh/id_rsa.pub</code> の内容をコピペしました。
まだ鍵がなければ <code>ssh-keygen</code> で作成します。</p>

<p><code>Hostname</code> はインターネットに接続しているグローバル IP アドレスが入っていたので、 <code>dokku.me</code> に変更して、 <code>Use virtualhost naming for apps</code> にチェックを入れました。</p>

<p>最後に <code>Finish Setup</code> を押して初期設定完了です。</p>

<p>この設定で <code>http://アプリ名.dokku.me</code> のような URL で各アプリにアクセスできるようになります。(<code>dokku.me</code> は <code>dokku</code> のドキュメントに書いてあるドメインで、すべてのサブドメインでも <code>127.0.0.1</code> を返してくれるドメインのようです。)</p>

<p>初期設定終了後はアプリをデプロイするまで <code>http://localhost</code> には繋がらなくなります。</p>

<h2>node のサンプルアプリのデプロイ</h2>

<p><a href="http://progrium.viewdocs.io/dokku/application-deployment/" title="Deploy an App">Deploy an App</a> に書いてあるように node のサンプルアプリをデプロイしてみます。</p>

<p>ssh server が入っていなければ <code>sudo apt-get install openssh-server</code> でインストールしておきます。</p>

<pre><code>git clone https://github.com/heroku/node-js-sample
cd node-js-sample
git remote add dokku dokku@dokku.me:node-js-app
git push dokku master
</code></pre>

<p>push が成功したら <code>http://node-js-app.dokku.me</code> をブラウザで開きます。
「<code>Hello World!</code>」と表示されれば成功です。</p>

<p><code>dokku</code> の内部の実体としては <code>/home/dokku/node-js-app</code> に入っています。</p>

<p>デプロイ前の状態に戻すには</p>

<pre><code>dokku apps:destroy node-js-app
</code></pre>

<p>で削除します。</p>

<h2>dokku コマンドについて</h2>

<p>実行例はサーバー上でのものを示していますが、 <code>sudo dokku</code> で実行しているもの以外はサーバー上で <code>dokku サブコマンド</code> で実行しても、リモートから <code>ssh dokku@dokku.me サブコマンド</code> で実行しても、基本的には同じ意味になります。</p>

<h2>グローバル設定の変更</h2>

<p>初期設定だと <code>curl</code> のタイムアウトが短すぎて、後の <code>ruby</code> のダウンロードのところでエラーになってしまうため、 <code>dokku config:set --global CURL_TIMEOUT=120</code> でタイムアウト時間を延ばします。</p>

<pre><code>$ dokku config --global
====&gt; --global config vars
CURL_CONNECT_TIMEOUT: 5
CURL_TIMEOUT:         30
$ dokku config:set --global CURL_TIMEOUT=120
-----&gt; Setting config vars
       CURL_TIMEOUT: 120
$ dokku config --global
====&gt; --global config vars
CURL_CONNECT_TIMEOUT: 5
CURL_TIMEOUT:         120
</code></pre>

<h2>dokku-psql-single-container プラグインのインストール</h2>

<pre><code>sudo dokku plugin:install https://github.com/Flink/dokku-psql-single-container
</code></pre>

<p>でプラグインをインストールします。
postgres の docker イメージをダウンロードするため、ある程度時間がかかります。</p>

<p>アンインストールは</p>

<pre><code>sudo dokku plugin:uninstall psql-single-container
</code></pre>

<p>です。(<code>dokku-</code> はつかない。)</p>

<h3>sshcommand の変更</h3>

<p><code>sshcommand create</code> で <code>dokku-psql-single-container</code> プラグインが使っている <code>/home/dokku/.psql-sc/data</code> の <a href="https://github.com/Flink/dokku-psql-single-container/issues/5">owner が変わってしまう問題がある</a>ため、</p>

<pre><code>sudoedit /usr/local/bin/sshcommand
</code></pre>

<p>で</p>

<pre><code>    chown -R $USER $USERHOME
</code></pre>

<p>を</p>

<pre><code>    chown $USER $USERHOME
    chown -R $USER $USERHOME/.ssh*
</code></pre>

<p>に変更しました。</p>

<p><a href="https://github.com/dokku/dokku-postgres">公式の postgres plugin</a> だとこの変更は必要ありません。</p>

<h2>Rails のサンプルアプリのデプロイの準備</h2>

<p>プラグインを使うため、 <code>git push</code> 前に準備しておきます。
(今回試したアプリの場合は <code>git push</code> 後に <code>psql:create</code> しても大丈夫でした。)</p>

<pre><code>dokku apps:create ruby-rails-app
dokku psql:create ruby-rails-app
</code></pre>

<p>まず <code>apps:create</code> で <code>/home/dokku/ruby-rails-app</code> を作成してから、そのアプリと連携するデータベースを <code>psql:create</code> で作成します。</p>

<h2>Rails のサンプルアプリのデプロイ</h2>

<p>Rails のサンプルアプリをデプロイします。</p>

<pre><code>git clone https://github.com/heroku/ruby-rails-sample
cd ruby-rails-sample
git remote add dokku dokku@dokku.me:ruby-rails-app
git push dokku master
dokku run ruby-rails-app rake db:migrate
</code></pre>

<p>push が成功したら <code>http://ruby-rails-app.dokku.me</code> を開きます。
<code>Hello World</code> と現在時刻が表示されていたら成功です。</p>

<p>後から <code>psql:create</code> した場合は 500 エラーになるので、 <code>dokku ps:restart ruby-rails-app</code> で再起動すると環境変数の追加が反映されてなおります。</p>

<h2>デプロイ前に戻す方法</h2>

<p><code>dokku apps:destroy ruby-rails-app</code> で戻せるはずですが、データベースに接続中でデータベースの削除に失敗することがあります。</p>

<p>失敗した場合は <code>dokku psql:admin_console</code> で接続して <code>\l</code> で削除できていないのを確認して、 <code>DROP DATABASE db_ruby_rails_app;</code> で削除できました。</p>

<h2>タイムゾーン変更</h2>

<p>タイムゾーンが UTC になっているので日本時間に変更しました。</p>

<pre><code>dokku config:set ruby-rails-app TZ=Asia/Tokyo
</code></pre>

<h2>初期設定した以外の Virtualhost を使う方法</h2>

<p><code>node-js-sample</code> を再利用して、別ドメインでも見えるようにしてみました。</p>

<pre><code>cd node-js-sample
git remote add xip dokku@dokku.me:node-js-app.127.0.0.1.xip.io
git push xip master
</code></pre>

<p><code>http://node-js-app.127.0.0.1.xip.io</code> でも「<code>Hello World!</code>」が見えれば成功ですが、デフォルトホストとして見えているだけかもしれないので、 <code>index.js</code> の <code>'Hello World!'</code> 部分を変更して区別できるようにすると良いかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dokku 0.3 系から 0.4 系へのアップグレード]]></title>
    <link href="http://blog.n-z.jp/blog/2015-10-08-dokku-03-to-04.html"/>
    <updated>2015-10-08T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dokku-03-to-04</id>
    <content type="html"><![CDATA[<p>dokku 0.3.26 から dokku 0.4.1 へのアップグレードをしました。</p>

<!--more-->


<h2>検証環境</h2>

<ul>
<li>Ubuntu 14.04.3 LTS (trusty) amd64</li>
<li><code>docker</code> 1.6.2 から 1.8.2</li>
<li><code>dokku</code> 0.3.26 から 0.4.1</li>
<li><a href="https://github.com/Flink/dokku-psql-single-container" title="dokku-psql-single-container">dokku-psql-single-container</a> プラグイン 0.4.0</li>
</ul>


<h2>docker の apt レポジトリの変更</h2>

<p><a href="https://blog.docker.com/2015/07/new-apt-and-yum-repos/" title="New Apt and Yum Repos">New Apt and Yum Repos</a> に書いてあるように <code>docker</code> 1.8 からは新しいレポジトリにしか存在しなくなったので、 <code>/etc/apt/sources.list.d/docker.list</code> を書き換える必要がありました。</p>

<p>以下の手順で変更しました。</p>

<pre><code>sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
sudoedit /etc/apt/sources.list.d/docker.list
sudo apt-get update
</code></pre>

<p><code>docker.list</code> は以下の内容に変更しました。</p>

<pre><code>deb https://apt.dockerproject.org/repo ubuntu-trusty main
</code></pre>

<p>パッケージ名も <code>lxc-docker</code> で始まるものから <code>docker-engine</code> に変わっています。</p>

<p><code>dokku</code> 0.3.26 ではプラグインの互換性への配慮から <code>lxc-docker-1.6.2</code> にバージョンが固定されていましたが、制限が解除されています。</p>

<p>具体的には <code>herokuish</code> 0.0.1 が <code>lxc-docker-1.6.2</code> に <code>Pre-Depends</code> していたのが、 <code>herokuish</code> 0.3.3 に上がって <code>docker-engine</code> への <code>Pre-Depends</code> に変わっています。</p>

<h2>アップグレード</h2>

<h3>sshcommand の変更</h3>

<p><code>sshcommand create</code> で <code>dokku-psql-single-container</code> プラグインが使っている <code>/home/dokku/.psql-sc/data</code> の <a href="https://github.com/Flink/dokku-psql-single-container/issues/5">owner が変わってしまう問題がある</a>ため、</p>

<pre><code>sudoedit /usr/local/bin/sshcommand
</code></pre>

<p>で</p>

<pre><code>    chown -R $USER $USERHOME
</code></pre>

<p>を</p>

<pre><code>    chown $USER $USERHOME
    chown -R $USER $USERHOME/.ssh*
</code></pre>

<p>に変更しています。</p>

<p><code>sshcommand</code> パッケージが 0.0.1 から 0.1.0 に上がって変更が戻ってしまうので、 <code>sshcommand</code> だけ先にアップグレードして、再度変更しました。</p>

<h3>パッケージのアップグレード</h3>

<pre><code>sudo apt-get dist-upgrade
</code></pre>

<p>でアップグレードしました。</p>

<p><code>dokku</code> や <code>herokuish</code> のアップグレードの他に、 <code>lxc-docker-1.6.2</code> が削除されて <code>docker-engine</code> と <code>plugn</code> が新しくインストールされます。</p>

<p>初回インストールと同様に <code>herokuish</code> の postinst で時間がかかります。</p>

<h3>不要なパッケージの削除</h3>

<p><code>lxc-docker-1.6.2</code> の完全削除と (<code>plugn</code> パッケージに置き換えられた) <code>pluginhook</code> パッケージの削除をしました。</p>

<pre><code>sudo apt-get purge lxc-docker*
sudo apt-get autoremove
</code></pre>

<h3>プラグインの再インストール</h3>

<p><code>psql-sc</code> は移行措置で <code>/var/lib/dokku/plugins/available/psql-sc</code> に移動されているのですが、有効になっていない (<code>/var/lib/dokku/plugins/enabled</code> からのシンボリックリンクがない) ので、パスが違うこともあり、再度インストールして、古い方は消すことにしました。</p>

<pre><code>sudo dokku plugin:install https://github.com/Flink/dokku-psql-single-container
sudo dokku plugin:uninstall psql-sc
</code></pre>

<p>プラグインのインストールやアンインストールは root 権限が必要なため、サーバー上で <code>sudo dokku</code> で実行する必要がありました。</p>

<p>PostgreSQL のプラグインとしては <a href="https://github.com/dokku/dokku-postgres" title="dokku postgres (beta)">dokku postgres (beta)</a> もありますが、まだ beta なのとデータ移行の問題があるため、当面は同じプラグインを使い続けることにしました。</p>

<h2>再起動して反映</h2>

<pre><code>sudo reboot
</code></pre>

<p>で再起動して、問題なく動くことを確認しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[さくらのVPSにdokkuをdebで入れてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2015-04-20-sakura-vps-dokku.html"/>
    <updated>2015-04-20T21:54:51+09:00</updated>
    <id>http://blog.n-z.jp/blog/sakura-vps-dokku</id>
    <content type="html"><![CDATA[<p>さくらの VPS を新しく借りて初期設定をして、
dokku 0.3.17 を Debian パッケージで入れてみたので、そのメモです。</p>

<!--more-->


<h2>Ubuntu 14.04 インストール</h2>

<p><a href="https://help.sakura.ad.jp/app/answers/detail/a_id/2403" title="カスタムOSインストールガイド - Ubuntu 12.04/14.04">カスタムOSインストールガイド - Ubuntu 12.04/14.04</a>
を参考にしてインストールしました。</p>

<h2>etckeeper インストール</h2>

<p>etckeeper だけをインストールすると bzr が一緒に入って使われてしまうので、
git と一緒にインストールすることで bzr が入らないようにします。</p>

<pre><code>sudo aptitude install git etckeeper
</code></pre>

<p>次に etckeeper.conf を編集して <code>VCS="bzr"</code> の代わりに <code>VCS="git"</code> を有効にします。
ついでにコミットするときに差分をみたいので <code>GIT_COMMIT_OPTIONS="-v"</code> を設定しました。</p>

<pre><code>EDITOR=vi sudoedit /etc/etckeeper/etckeeper.conf
</code></pre>

<p>パッケージをインストールしたときに自動で初期コミットされていないので、
手動で初期コミットをしておきます。</p>

<pre><code>sudo etckeeper init
sudo etckeeper commit "Initial commit"
</code></pre>

<p>git なので <code>git gc</code> もしておきます。
<code>etckeeper vcs コマンド</code> で <code>/etc</code> ディレクトリで <code>git コマンド</code> を実行するのと同じ意味になります。</p>

<pre><code>sudo etckeeper vcs gc
</code></pre>

<h2>ufw を有効にする</h2>

<p>firewall 設定のために ufw を有効にします。</p>

<pre><code>sudo ufw enable
sudo etckeeper commit "Enable ufw"
</code></pre>

<h2>ssh を許可</h2>

<p>初期設定のために 22 番ポートを許可します。</p>

<pre><code>sudo ufw allow 22/tcp
</code></pre>

<p>リモートから ssh で入って <code>~/.ssh/authorized_keys</code> の設置などをします。</p>

<p>次にポート番号の変更や
<code>PasswordAuthentication no</code> への設定変更、
<code>PermitRootLogin</code> が <code>yes</code> 以外になっていることの確認、
<code>ChallengeResponseAuthentication no</code> の確認、
<code>AllowUsers</code> の追加をしました。</p>

<pre><code>sudo ufw delete allow 22/tcp
EDITOR=vi sudoedit /etc/ssh/sshd_config
sudo service ssh restart
sudo etckeeper commit "Setup sshd"
</code></pre>

<h2><code>~/.ssh/config</code> 設定</h2>

<p>クライアント側の <code>~/.ssh/config</code> に以下のような設定をして、
ポート番号などの指定を省略できるようにします。</p>

<p>ついでに後で使う dokku 用の設定も追加しました。</p>

<pre><code>Host サーバーのホスト名
    Hostname サーバーのIPアドレス
    User 初期ユーザー名
    Port 変更したポート番号
    IdentityFile ~/.ssh/id_rsa
    IdentitiesOnly yes
Host dokku-vps
    Hostname サーバーのIPアドレス
    User dokku
    Port 変更したポート番号
    IdentityFile ~/.ssh/id_rsa
    IdentitiesOnly yes
    RequestTTY yes
</code></pre>

<h2>nano を purge</h2>

<p>vi に慣れていて、
nano は使いにくいと感じているので、
purge しました。</p>

<pre><code>sudo aptitude purge nano
</code></pre>

<h2>IPv6 設定</h2>

<p>interfaces ファイルに以下の inet6 の設定を追加します。</p>

<pre><code>iface eth0 inet6 static
    address コントロールパネルで確認できるIPv6アドレス
    netmask 64
    gateway fe80::1
    accept_ra 0
    autoconf 0
    privext 0
    dns-nameservers コントロールパネルで確認できるDNS
</code></pre>

<p>編集して設定を反映して疎通確認をしました。</p>

<pre><code>sudoedit /etc/network/interfaces
sudo ifdown eth0 &amp;&amp; sudo ifup eth0
ping6 -c 3 www.kame.net
</code></pre>

<p><code>ifup</code> のときに <code>Waiting for DAD... Done</code> と出ましたが、
IPv6 の Duplicate Address Detection が動いているだけのようなので
問題はなさそうでした。</p>

<h2>dokku の Debian パッケージインストール</h2>

<p>dokku 0.3.18 からは Debian パッケージでのインストールがデフォルトになると
<a href="http://progrium.viewdocs.io/dokku/getting-started/install/debian" title="Debian Package Installation Notes">Debian Package Installation Notes</a>
に書いてあったので、この手順を参考にしてインストールしました。</p>

<pre><code>wget https://get.docker.io/gpg
sudo apt-key add gpg
rm gpg
wget https://packagecloud.io/gpg.key
sudo apt-key add gpg.key
rm gpg.key
echo "deb http://get.docker.io/ubuntu docker main" | sudo tee /etc/apt/sources.list.d/docker.list
echo "deb https://packagecloud.io/dokku/dokku/ubuntu/ trusty main" | sudo tee /etc/apt/sources.list.d/dokku.list
sudo apt-get update
sudo apt-get install dokku
</code></pre>

<p>なぜか
<code>Importing buildstep into docker (around 5 minutes)</code>
で 5 分どころではなく 1 時間ぐらいかかったので、
他のことをしながらのんびり待つ必要がありました。</p>

<h2>初期設定用ポート開放</h2>

<p>いきなり開放してしまうと Dokku Setup を勝手に実行されてしまう可能性があるので、
まず <code>SSH_CLIENT</code> 環境変数でサーバーに接続している自分のグローバル IP アドレスを確認して、
その IP アドレスのみから HTTP を許可しました。</p>

<pre><code>env | grep SSH
sudo ufw allow proto tcp from 接続元IPアドレス to any port 80
</code></pre>

<p>そして <code>http://サーバーのホスト名/</code> を開いて Dokku Setup を表示しました。</p>

<p>空欄になっていた <code>Public Key</code> には自分の <code>~/.ssh/id_rsa.pub</code> を貼付けました。
<code>Hostname</code> には IPv6 アドレスが表示されていたので、
<code>xip.io</code> (IP アドレスのサブドメインで IP アドレスを返してくれるサービス) を使って
<code>サーバーのIPv4アドレス.xip.io</code> (例えば <code>192.0.2.1.xip.io</code> のような感じ) を設定しました。
<code>Use virtualhost naming for apps</code> にチェックを入れて
<code>Finish Setup</code> を押しました。
ブラウザーは <code>http://progrium.viewdocs.io/dokku/application-deployment</code> にリダイレクトされました。</p>

<p>サーバー側では
<code>/home/dokku</code> 以下に設定が保存される他に、
<code>/etc/init/dokku-installer.conf</code> と <code>/etc/nginx/conf.d/dokku-installer.conf</code> が削除されるので、
<code>etckeeper commit</code> しました。</p>

<pre><code>sudo etckeeper commit "Finish Dokku Setup"
</code></pre>

<h2>HTTP ポート開放</h2>

<p>初期設定が終了したので、初期設定用のルールを削除して、
一般に開放するように変更しました。</p>

<pre><code>sudo ufw delete allow proto tcp from 接続元IPアドレス to any port 80
sudo ufw allow 80/tcp
</code></pre>

<h2>dokku の ssh を許可</h2>

<p><code>sshd_config</code> に <code>AllowUsers dokku</code> を追加しました。</p>

<pre><code>sudoedit /etc/ssh/sshd_config
sudo service ssh restart
sudo etckeeper commit "Allow ssh to dokku"
</code></pre>

<h2>ssh の接続確認</h2>

<pre><code>ssh dokku-vps
</code></pre>

<p>で dokku のヘルプが表示されるのを確認しておきます。</p>

<h2>サンプルアプリのデプロイ</h2>

<p>最小限のサンプルとして node-js-sample をデプロイします。</p>

<pre><code>git clone https://github.com/heroku/node-js-sample
cd node-js-sample
git remote add dokku-vps dokku-vps:node-js-app
git push dokku-vps master
</code></pre>

<p><code>http://node-js-app.サーバーのIPアドレス.xip.io/</code> を開いて
<code>Hello World!</code> と表示されたら成功です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dokku 0.3.17 に Ruby on Rails アプリをデプロイしてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2015-04-18-dokku.html"/>
    <updated>2015-04-18T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dokku</id>
    <content type="html"><![CDATA[<p>dokku がいつの間にか deis がスポンサーになって開発が活発になって 0.3 系がリリースされていたので、
0.3.17 に Ruby on Rails アプリをデプロイしてみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>dokku 0.3.17</li>
<li>docker 1.5.0, 1.6.0</li>
</ul>


<h2>前準備</h2>

<p>何度か繰り返す予定ならあらかじめ、
次の初回起動の手順の <code>vagrant up</code> の前に、
Makefile の <code>PREBUILT_STACK_URL</code> を
Vagrantfile の <code>PREBUILT_STACK_URL</code> で
チェックしている場所にダウンロードしておくと
ダウンロード時間を短縮できます。</p>

<pre><code>curl -L -o stack.tgz https://github.com/progrium/buildstep/releases/download/2014-12-16/2014-12-16_42bd9f4aab.tar.gz
</code></pre>

<h2>初回起動</h2>

<p>Vagrant 環境で試しました。</p>

<pre><code>git clone https://github.com/progrium/dokku
cd dokku
vagrant up
</code></pre>

<p>vagrant の中では <code>/vagrant</code> の他に <code>/root/dokku</code> に <code>dokku</code> ディレクトリがマウントされています。</p>

<h2>初期設定</h2>

<p>Vagrant でポートフォワーディングされている <code>http://localhost:8080/</code> か
ホストオンリーアダプタで接続されている <code>http://10.0.0.2/</code> を開きます。
Dokku Setup が表示されるので、そこで初期設定をします。</p>

<p><code>Public Key</code> に自分の <code>~/.ssh/id_rsa.pub</code> が入っているのを確認します。
必要なら他の公開鍵に変更します。</p>

<p>Hostname Configuration の方は Hostname に自分がインターネットに接続しているグローバル IP アドレスが表示されているので、
<code>dokku.me</code> に変更して、
<code>Use virtualhost naming for apps</code> にチェックを入れます。
<code>dokku.me</code> は dokku の作者が運用していると思われる、すべてのサブドメインで 127.0.0.1 を返してくれるサービスです。</p>

<p><code>Finish Setup</code> を押すと初期設定は終了して
<code>http://progrium.viewdocs.io/dokku/application-deployment</code>
に飛ばされます。</p>

<p>ちなみに、初期設定用のサーバーの実体は
<code>contrib/dokku-installer.rb</code>
にあるようです。</p>

<h2>ssh の設定</h2>

<p><code>ssh dokku</code> や <code>ssh dokku.me</code> で接続できるように
<code>~/.ssh/config</code> に以下のような設定を追加しました。
<code>User</code>, <code>Hostname</code>, <code>Port</code>, <code>RequestTTY</code> 以外の設定はお好みで良いと思います。</p>

<pre><code>Host dokku dokku.me
    User dokku
    HostName 10.0.0.2
    Port 22
    UserKnownHostsFile /dev/null
    StrictHostKeyChecking no
    PasswordAuthentication no
    IdentityFile ~/.ssh/id_rsa
    IdentitiesOnly yes
    LogLevel FATAL
    RequestTTY yes
    Ciphers arcfour128,arcfour256
</code></pre>

<h2>サンプルアプリをデプロイ</h2>

<p><a href="http://progrium.viewdocs.io/dokku/application-deployment">http://progrium.viewdocs.io/dokku/application-deployment</a> に書いてある node.js のサンプルアプリをデプロイします。</p>

<pre><code>git clone https://github.com/heroku/node-js-sample
cd node-js-sample
git remote add dokku dokku@dokku.me:node-js-app
git push dokku master
</code></pre>

<p><code>http://node-js-app.dokku.me:8080/</code> を開いて「Hello World!」が見えれば成功です。</p>

<h2>PostgreSQL プラグインをインストール</h2>

<p>今回は
<a href="http://progrium.viewdocs.io/dokku/plugins" title="Plugins">Plugins</a>
で「Compatible with 0.3.16」と書いてある
<a href="https://github.com/Flink/dokku-psql-single-container" title="PostgreSQL (single container)">PostgreSQL (single container)</a>
を使いました。</p>

<p><code>vagrant ssh</code> で入って以下を実行しました。</p>

<pre><code>sudo git clone https://github.com/Flink/dokku-psql-single-container /var/lib/dokku/plugins/psql-sc
sudo dokku plugins-install
</code></pre>

<p><code>postgres:9.3</code> のイメージをダウンロードするので、しばらく時間がかかりました。</p>

<h2>Rails のサンプルをデプロイ</h2>

<p>試行錯誤の結果、シンプルな手順は以下のようになりました。</p>

<pre><code>ssh dokku apps:create ruby-rails-app
ssh dokku psql:create ruby-rails-app
git clone https://github.com/heroku/ruby-rails-sample
cd ruby-rails-sample
git remote add dokku dokku@dokku.me:ruby-rails-app
git push dokku master
</code></pre>

<p><code>http://ruby-rails-app.dokku.me:8080/</code> を開いて <code>Hello World</code> と現在時刻が表示されれば成功です。</p>

<p>今回利用したプラグインでは <code>psql:create</code> だけで、別途 <code>link</code> という手順は不要でした。</p>

<h2>データベースの migration の実行</h2>

<p>このサンプルアプリではデータベースに接続するだけで使っていないので、
必須ではないのですが <code>rake db:migrate</code> も実行しました。</p>

<pre><code>ssh dokku run ruby-rails-app rake db:migrate
</code></pre>

<h2>タイムゾーン設定</h2>

<p>現在時刻が UTC で表示されていたので、
JST に変更しました。</p>

<pre><code>ssh dokku config:set ruby-rails-app TZ=Asia/Tokyo
</code></pre>

<p>設定変更後に自動で再起動されるので、
<code>http://ruby-rails-app.dokku.me:8080/</code> を開いて、
現在時刻が日本時間で表示されれば成功です。</p>

<h2>CHECKS 作成</h2>

<p>デフォルトだと
<a href="http://progrium.viewdocs.io/dokku/application-deployment#user-content-zero-downtime-deploy" title="Zero downtime deploy">Zero downtime deploy</a>
の簡易チェックで 35 秒待つようになっているので、
<code>CHECKS</code> ファイルを作成して待ち時間を短くして、
正常なときだけデプロイできるようにしてみました。</p>

<pre><code>vi CHECKS
git add CHECKS
git commit
git push dokku master
</code></pre>

<p>CHECKS ファイルの内容は以下の通りです。</p>

<pre><code>/   RubyRailsSample
</code></pre>

<p>左側がチェックする URL で右側がその URL を表示したときに含まれる文字列です。
ここではタイトルの文字列を指定してみました。</p>

<h2>アプリケーションの削除</h2>

<p><code>apps:destroy</code> で削除できます。
確認のため、もう一度アプリ名を入力する必要があります。</p>

<pre><code>% ssh dokku apps:destroy node-js-app
 !    WARNING: Potentially Destructive Action
 !    This command will destroy node-js-app (including all add-ons).
 !    To proceed, type "node-js-app"

&gt; node-js-app
Destroying node-js-app (including all add-ons)
No database configured for node-js-app
Connection to 10.0.0.2 closed.
</code></pre>

<p><code>ruby-rails-app</code> の削除も試してみたところ、
データベースも一緒に削除されるので、
別途 <code>psql:delete</code> を実行する必要はありませんでした。</p>

<h2>デプロイ時に ruby のダウンロードでタイムアウトする場合</h2>

<p><a href="http://www.slideshare.net/snumano/20150101-dokku-alt" title="20150101勉強会 dokku alt">20150101勉強会 dokku alt</a>
の16ページの手順5を参考にしてタイムアウトをのばすと良いようです。</p>

<pre><code>ssh dokku config:set ruby-rails-app CURL_TIMEOUT=120
</code></pre>
]]></content>
  </entry>
  
</feed>
