<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: doorkeeper | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/doorkeeper/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-07-15T00:49:52+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 4.1 で Doorkeeper を使った OAuth2 Provider のサンプルを実装した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-11-doorkeeper-provider-example-app.html"/>
    <updated>2014-07-11T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/doorkeeper-provider-example-app</id>
    <content type="html"><![CDATA[<p>ソースは github の
<a href="https://github.com/znz/doorkeeper-provider-app" title="znz/doorkeeper-provider-app">znz/doorkeeper-provider-app</a>
で公開しています。</p>

<p>基本的にはソースをみて参考にしてもらうと良いと思いますが、
説明が必要な部分を続きに書いてみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ruby 2.1.2</li>
<li>rails 4.1.4</li>
<li>bootstrap 3.2.0</li>
<li>devise 3.2.4</li>
<li>devise-i18n-views 0.2.8</li>
<li>doorkeeper 1.3.1</li>
<li>cancancan 1.8.4</li>
<li>rolify 3.4.0</li>
<li>rspec-rails 3.0.1</li>
</ul>


<h2>試し方</h2>

<p>README に書いたようにローカルで動かすか heroku に deploy して
<a href="https://github.com/doorkeeper-gem/doorkeeper/wiki/Example-Applications" title="Example Applications">Example Applications</a>
にある Client examples の Sinatra and OAuth2 gem の
<a href="https://github.com/doorkeeper-gem/doorkeeper-sinatra-client" title="Doorkeeper Sinatra Client">Doorkeeper Sinatra Client</a>
を使って試しました。</p>

<h2>初期設定</h2>

<p>devise, doorkeeper, cancancan, rolify, rspec の個別の初期設定は普通に <code>rails generate</code> を使いました。</p>

<h2>ユーザー情報追加</h2>

<p>とれる情報を増やすために <code>User</code> に <code>name</code> を追加しました。
<code>devise-i18n-views</code> を使っている関係で view のカスタマイズはしていないので、
<code>rake db:seed</code> で設定したユーザーだけ <code>name</code> が設定されています。</p>

<p>必要に応じて view もカスタマイズしてください。</p>

<p>また <code>devise-i18n</code> の ja.yml を devise.ja.yml として入れています。
これは flash のメッセージやメールのメッセージなど、
<code>app/views</code> 以外の翻訳になるようです。</p>

<p><code>devise-i18n-views</code> は <code>app/views</code> を翻訳可能な view にするプロジェクトです。
なぜ <code>devise</code> とは別プロジェクトでやっているのかはよくわかりません。</p>

<h2><code>I18n.available_locales</code></h2>

<p><code>devise-i18n-views</code> を入れてしまうと <code>I18n.available_locales</code> が増えてしまうので、
困るのなら、カスタマイズ用の view を generate して、必要な言語だけ取り込んで
<code>Gemfile</code> から外してしまうのが良いと思います。</p>

<p>今回はそのまま残して右上の <code>Locale</code> で選択できるようにしています。
選択肢の翻訳は Wikipedia の左や www.debian.org の下などを参考にしたのですが <code>es-AR</code> はわからなかったので、
<code>es</code> と同じになってしまっています。</p>

<h2><code>/oauth/applications</code> のアクセス制限</h2>

<p><code>cancancan</code> と <code>rolify</code> を使って admin role があるユーザーだけに制限しています。
secret も見えてしまうので、 read 権限までしっかり制限する必要があるようです。</p>

<p><code>load_and_authorize_resource</code> でのロードと親クラス (<code>Doorkeeper::ApplicationsController</code>) の中でのロードでモデルの読み込みが二重になってしまうのですが、変更を少なくするためにそこは許容しました。</p>

<h2><code>GET /api/v1/me.json</code></h2>

<p>Doorkeeper gem の Wiki の例にあるようにユーザー情報をとれるようにしています。
制限していないと以下のような情報がとれました。</p>

<p><code>json
{ "id": 1,
  "email": "admin@example.com",
  "created_at": "2014-07-11T06:32:22.077Z",
  "updated_at": "2014-07-11T09:33:42.143Z",
  "name": "admin" }
</code></p>

<p>制限したり関連するモデルの情報を増やしたりするなら
<a href="http://sugamasao.hatenablog.com/entry/20100914/1284415669" title="Rails のモデル関係と to_json(to_xml) - すがブロ">Rails のモデル関係と to_json(to_xml) &ndash; すがブロ</a>
に書いてあるように <code>respond_with</code> に <code>:only</code> をつけたり <code>:include</code> をつけたりすると出来るようです。</p>

<p>入ったり入らなかったりする条件がよくわからなかったのですが、
<code>devise</code> 関連では <code>authentication_token</code> が入っていることがあったので、
User モデルにいろんな情報を入れているなら、
きちんと制限した方が良さそうに思いました。</p>

<h2>microposts</h2>

<p><a href="http://railstutorial.jp/" title="Ruby on Rails チュートリアル：実例を使って Rails を学ぼう">Ruby on Rails チュートリアル：実例を使って Rails を学ぼう</a>
のように <code>Micropost</code> モデルを作成して、 API からも投稿できるようにしました。</p>

<p>投稿は scope で制限していて、デフォルトの <code>public</code> のみでは書き込めずに <code>write</code> も必要にしています。</p>

<p>API としては</p>

<ul>
<li><code>GET /api/v1/microposts</code> で投稿一覧</li>
<li><code>POST /api/v1/microposts</code> で新規投稿</li>
</ul>


<p>を用意しています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[doorkeeper gem の API のクライアント]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-08-doorkeeper-api-client.html"/>
    <updated>2013-10-08T21:06:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/doorkeeper-api-client</id>
    <content type="html"><![CDATA[<p><a href="http://rubygems.org/gems/doorkeeper">doorkeeper gem</a>
で API を作る方は
<a href="https://github.com/applicake/doorkeeper-provider-app">doorkeeper-provider-app</a>
というサンプルの
<code>app/controllers/api/</code>
以下などをみればすぐにわかったのですが、
API を呼び出す方は
<a href="https://github.com/applicake/doorkeeper/wiki/Create-a-OmniAuth-strategy-for-your-provider">OmniAuth の中でユーザーの情報を取り出す</a>
だけならすぐに出来たのですが、
コントローラーの中など呼び出す方法は
<a href="https://github.com/applicake/doorkeeper-devise-client">doorkeeper-devise-client</a>
を見てもよくわからなかったので、まとめてみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>provider 側

<ul>
<li>rails 3.2.14</li>
<li>doorkeeper 0.7.3</li>
</ul>
</li>
<li>client 側

<ul>
<li>rails 4.0.0</li>
<li>devise 3.1.1</li>
<li>omniauth 1.1.4</li>
<li>omniauth-oauth2 1.1.1</li>
<li>oauth2 0.8.1</li>
</ul>
</li>
</ul>


<h2>準備</h2>

<p>まず
<a href="https://github.com/applicake/doorkeeper/wiki/Create-a-OmniAuth-strategy-for-your-provider">Create a OmniAuth strategy for your provider</a>
を参考にして、
OmniAuth の中で
<code>access_token.get('/api/v1/me.json').parsed</code>
は出来るところまでは準備しておきます。</p>

<p>目的としては、
この
<code>access_token</code>
が認証より後で呼ばれる他のコントローラーの中で取得できれば良いということになります。</p>

<p>余談ですが、
doorkeeper の wiki は
<a href="https://github.com/applicake/doorkeeper/wiki/Supported-Ruby-&amp;-Rails-versions">Supported Ruby &amp; Rails versions</a>
のように情報が古いまま放置されているページもあるようなので、
<a href="https://github.com/applicake/doorkeeper">README</a>
などのソースコード側のドキュメントも参照した方が良さそうです。</p>

<h2>必要なもの</h2>

<p><code>access_token</code>
は
<code>OAuth2::AccessToken</code>
クラスのオブジェクトです。</p>

<p>生成するには</p>

<ul>
<li><code>OAuth2::Client</code> のオブジェクト</li>
<li>認証で取得した <code>token</code></li>
</ul>


<p>が必要になります。</p>

<p><code>OAuth2::Client</code>
の生成には</p>

<ul>
<li><code>client_id</code></li>
<li><code>client_secret</code></li>
<li>URL</li>
</ul>


<p>が必要になります。</p>

<h2>token の保存</h2>

<p>まず
<code>OAuth2</code>
の認証で取得した
<code>token</code>
を保存しておく必要があります。</p>

<p><code>Users::OmniauthCallbacksController#doorkeeper</code>
で
<code>session[:doorkeeper_token] = request.env["omniauth.auth"]["credentials"]["token"]</code>
のようにしてセッションなどの後で使える場所に保存しておきます。</p>

<p>後で調べてわかったのですが、
<a href="https://github.com/applicake/doorkeeper-devise-client/blob/master/app/controllers/users/omniauth_callbacks_controller.rb">doorkeeper-devise-client の Users::OmniauthCallbacksController</a>
では
<code>request.env["omniauth.auth"].credentials.token</code>
を
<code>user.doorkeeper_access_token</code>
でデータベースに保存していました。</p>

<h2>OAuth2::Client の作成</h2>

<p><a href="https://github.com/applicake/doorkeeper-devise-client/blob/master/app/controllers/application_controller.rb">doorkeeper-devise-client の ApplicationController</a>
では必要な情報は定数経由で受け取るようになっていました。</p>

<p>今回は
<code>devise</code>
と
<code>omniauth-oauth2</code>
を使っているので、
その情報を使って生成するようにしました。
要点だけまとめると以下のコードになります。</p>

<p>```ruby</p>

<pre><code>config = Devise.omniauth_configs[:doorkeeper]
strategy = config.strategy_class.new(*config.args)
client = strategy.client
</code></pre>

<p>```</p>

<h2>OAuth2::AccessToken の生成</h2>

<p>ここまで準備ができれば後は
<code>OAuth2::AccessToken.new</code>
するだけです。</p>

<p>まとめると以下のコードになります。</p>

<p>```ruby
  def access_token</p>

<pre><code>return @access_token if defined?(@access_token)
config = Devise.omniauth_configs[:doorkeeper]
strategy = config.strategy_class.new(*config.args)
token = session[:doorkeeper_token]
@access_token = OAuth2::AccessToken.new(strategy.client, token)
</code></pre>

<p>  end
```</p>

<h2>API 呼び出し</h2>

<p><code>access_token</code>
が出来たら後は呼び出しに使うだけです。</p>

<p>単純な情報取得は
<code>get</code>
して
JSON
なら
<code>parsed</code>
を呼び出すだけです。</p>

<p><code>ruby
  access_token.get("/api/v1/me.json").parsed
  access_token.get("/api/v1/posts.json").parsed
</code></p>

<p>今回は連携して書き込みたいというのが目的だったため、
<code>post</code>
も使いました。</p>

<p>モデルの例としては
<code>rails g scaffold post title body:text</code>
で API の提供側では以下の実装とします。</p>

<p>```ruby app/controllers/api/v1/posts_controller.rb
module Api::V1
  class PostsController &lt; ApiController</p>

<pre><code>doorkeeper_for :index
doorkeeper_for :create
respond_to     :json

def index
  respond_with Post.all
end

def create
  post = Post.new(params[:post])
  post.user = current_resource_owner
  post.save!
  respond_with post
end
</code></pre>

<p>```</p>

<p>呼び出し側は以下のようになります。</p>

<p><code>ruby
access_token.post("/api/v1/posts", params: { post: { title: title, body: body } })
</code></p>

<p><code>params</code>
による指定は
<a href="https://github.com/intridea/oauth2/blob/master/lib/oauth2/access_token.rb">OAuth2::AccessToken</a>
のソースをみて推測しました。</p>

<h2>scope 付き API 提供</h2>

<p>書き込みも許可すると
<code>scope</code>
を分けたくなります。</p>

<p>doorkeeper 側では
<a href="https://github.com/applicake/doorkeeper/wiki/Using-Scopes">Using Scopes</a>
を参考にして</p>

<ul>
<li>initializers に scopes 追加</li>
<li>翻訳追加</li>
<li>API に scopes 追加</li>
</ul>


<p>をしておきます。</p>

<p><code>ruby config/initializers/doorkeeper.rb
  default_scopes  :public
  optional_scopes :admin, :write
</code></p>

<p>2013-12-20 追記:
doorkeeper gem を 0.7.3 から 0.7.4 に上げたところ、
シンボルだとうまく動かなくなってしまったので、
文字列に変更しました。</p>

<p>(doorkeeer gem 0.7.3 以前)
```ruby app/controllers/api/v1/posts_controller.rb</p>

<pre><code>doorkeeper_for :index,  :show,   scopes: [:public]
doorkeeper_for :create, :update, scopes: [:admin, :write]
</code></pre>

<p>```</p>

<p>(doorkeeer gem 0.7.4 以降)
```ruby app/controllers/api/v1/posts_controller.rb</p>

<pre><code>doorkeeper_for :index,  :show,   scopes: %w"public"
doorkeeper_for :create, :update, scopes: %w"admin write"
</code></pre>

<p>```</p>

<p>参考のため、この API の rspec も載せておきます。
複数の <code>scopes</code> を設定する時に <code>,</code> 区切りだとうまくいかないところがあったので、
スペース区切りにしています。</p>

<p>```ruby spec/controllers/api/v1/posts_controller_spec.rb
require &lsquo;spec_helper&rsquo;</p>

<p>describe Api::V1::PostsController do
  describe &ldquo;GET &lsquo;index&rsquo;&rdquo; do</p>

<pre><code>let!(:application) { Doorkeeper::Application.create!(name: "MyApp", redirect_uri: "http://app.com") }
let!(:user) { FactoryGirl.create(:normal_user) }
let!(:token) { Doorkeeper::AccessToken.create! application_id: application.id, resource_owner_id: user.id, scopes: "public" }
subject { response }

context "valid token" do
  before do
    get 'index', format: :json, access_token: token.token
  end
  it { should be_success }
  its(:status) { should eq(200) }
  its(:body) { should == Post.all.to_a.to_json }
end

context "invalid token" do
  before do
    get 'index', format: :json, access_token: token.token.succ
  end
  it { should_not be_success }
  its(:status) { should eq(401) }
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;GET &lsquo;index&rsquo; without scopes&rdquo; do</p>

<pre><code>let!(:application) { Doorkeeper::Application.create!(name: "MyApp", redirect_uri: "http://app.com") }
let!(:user) { FactoryGirl.create(:normal_user) }
let!(:token) { Doorkeeper::AccessToken.create! application_id: application.id, resource_owner_id: user.id, scopes: "write" }
subject { response }

context "valid token" do
  before do
    get 'index', format: :json, access_token: token.token
  end
  it { should_not be_success }
  its(:status) { should eq(401) }
  its(:body) { should == " " }
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;POST &lsquo;create&rsquo;&rdquo; do</p>

<pre><code>let!(:application) { Doorkeeper::Application.create!(name: "MyApp", redirect_uri: "http://app.com") }
let!(:user) { FactoryGirl.create(:normal_user) }
let!(:token) { Doorkeeper::AccessToken.create! application_id: application.id, resource_owner_id: user.id, scopes: "public write" }
subject { response }

context "valid token" do
  before do
    post 'create', format: :json, access_token: token.token, post: { title: "title", body: "some content" }
  end
  it { should be_success }
  its(:status) { should eq(201) } # 201 Created
  its(:body) { should == Post.last.to_json }
end

context "invalid token" do
  before do
    post 'create', format: :json, access_token: token.token.succ
  end
  it { should_not be_success }
  its(:status) { should eq(401) }
end
</code></pre>

<p>  end
end
```</p>

<h2>scope 付き呼び出し</h2>

<p><code>devise</code>
の設定で
<code>omniauth</code>
の設定に
<code>scope</code>
を追加するだけです。</p>

<p><code>ruby config/initializers/devise.rb
  config.omniauth :doorkeeper, ENV['DOORKEEPER_APP_ID'], ENV['DOORKEEPER_APP_SECRET'], { scope: 'public write' }
</code></p>

<p>rspec のところでもちょっと書きましたが、
区切りが <code>,</code> だとうまくいかないことがあったので、
スペース区切りにしています。</p>

<p>原因は
<a href="https://github.com/applicake/doorkeeper/blob/master/lib/doorkeeper/oauth/scopes.rb">lib/doorkeeper/oauth/scopes.rb</a>
で
<code>string.split</code>
のように無引数の
<code>String#split</code>
を使っているからではないかと推測していますが、確認はしていません。</p>

<h2>まとめ</h2>

<p><code>client_id</code> と <code>client_secret</code> と provider の URL はあらかじめ用意しておいて、
client 側の rails アプリに設定しておきます。</p>

<p><code>token</code>
は OAuth2 で取得したものを
<code>session</code>
やデータベースなどに保存しておいて使います。</p>

<p>必要なら
<code>scopes</code>
も設定できます。</p>
]]></content>
  </entry>
  
</feed>
