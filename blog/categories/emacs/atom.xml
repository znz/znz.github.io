<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emacs | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-03-23T21:39:39+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[pinentry-emacsを使ってみた]]></title>
    <link href="http://blog.n-z.jp/blog/2017-03-23-pinentry-emacs.html"/>
    <updated>2017-03-23T20:30:13+09:00</updated>
    <id>http://blog.n-z.jp/blog/pinentry-emacs</id>
    <content type="html"><![CDATA[<p><code>gpg-agent</code> で <code>--allow-emacs-pinentry</code> が使えない gnupg2 の環境で、
<a href="https://github.com/ecraven/pinentry-emacs">https://github.com/ecraven/pinentry-emacs</a> を使ってみました。</p>

<!--more-->


<h2>動作確認環境</h2>

<ul>
<li>macOS Sierra 10.12.3</li>
<li>GNU Emacs 25.1.1</li>
<li>gnupg2 2.0.30_3 (Homebrew で入れたもの)</li>
</ul>


<h2>注意事項</h2>

<p><a href="https://github.com/ecraven/pinentry-emacs/blob/7c384a65eaaa37d38dbbb4e4ca89a094b498d811/README.org#emacs">README.org の末尾</a>にも
「This is probably totally insecure, and your passphrase may be leaked! Use at your own risk!」と書いてありますが、
<code>read-passwd</code> した文字列をそのまま <code>emacsclient</code> に返して、シェルスクリプトでそのまま扱っているので、
全く安全ではありません。</p>

<p>他の <code>pinentry</code> が使える時は避けることをオススメします。</p>

<h2>別の方法</h2>

<p><code>gnupg</code> が 2.1.5 以降なら <code>--allow-emacs-pinentry</code> というオプションがあるので、
<a href="https://elpa.gnu.org/packages/pinentry.html">https://elpa.gnu.org/packages/pinentry.html</a> と組み合わせて使うことをオススメします。
(<code>elpa</code> の説明によると <code>pinentry</code> も 0.9.5 以上が必要のようです。)
この方法は別途試してまた記事を書く予定です。</p>

<p>今回の環境では、
<a href="https://github.com/Homebrew/homebrew-core/blob/328a89b492b600686be41b6b69b93d7c88fb8b89/Formula/gnupg2.rb">Homebrew の gnupg2</a>
が 2.0.30 で 2.1.5 未満なので使えませんでした。</p>

<p>macOS 上なら Emacs 上で入力するよりも
<a href="/blog/2016-08-20-mac-easypg-gpg2.html">OS X の Emacs で EasyPG が gpg2 で Opening input file: Decryption failed, になったので対処した</a>記事に書いた
<code>pinentry-mac</code> を使うのがオススメです。</p>

<h2>設定</h2>

<h3>gpg-agent の設定</h3>

<p><code>~/.gnupg/gpg-agent.conf</code> がなければ作成して、以下の設定を入れておきます。</p>

<pre><code>pinentry-program /path/to/github.com/ecraven/pinentry-emacs/pinentry-emacs
</code></pre>

<h3>emacs の設定</h3>

<p>README.org に書いてあるように <code>~/.emacs.d/init.el</code> に</p>

<pre><code>(defun pinentry-emacs (desc prompt ok error)
  (let ((str (read-passwd (concat (replace-regexp-in-string "%22" "\"" (replace-regexp-in-string "%0A" "\n" desc)) prompt ": "))))
    str))
</code></pre>

<p>を追加しておきます。</p>

<p><code>emacsclient</code> コマンドで <code>pinentry-emacs</code> 関数を呼んでいるので、
<code>(server-start)</code> も (README.org には書いていませんが) 必要です。</p>

<h2>動作確認</h2>

<p>Emacs の中で <code>*.gpg</code> ファイルを開いてみたり、
端末上でパスフレーズの必要な <code>gpg</code> コマンドを実行してみたりして、
<code>(server-start)</code> した Emacs の mini buffer でパスフレーズがきかれるのを確認します。</p>

<h2>fallback 動作</h2>

<p><code>emacsclient</code> の呼び出しが <code>sed</code> に <a href="https://github.com/ecraven/pinentry-emacs/blob/7c384a65eaaa37d38dbbb4e4ca89a094b498d811/pinentry-emacs#L24">pipe されている</a> ので、
<a href="https://github.com/ecraven/pinentry-emacs/pull/5">Fix fallback when emacsclient failed</a>
のパッチをあてないと fallback してくれないようです。
(取り込まれたらブロク記事を書こうと思っていたのですが、取り込まれないようなのでもう書くことにしました。)</p>

<p>さらに別途 <code>pinentry-emacs</code> ディレクトリにパスを通しておくか、
<code>pinentry-emacs</code> ファイルの先頭で <code>PATH=$PATH:$(dirname "$0")</code> などとしてパスを通さないと
<code>lukspinentry</code> の実行に失敗して fallback してくれません。</p>

<p>さらに、端末上で <code>gpg</code> コマンドを実行したとしても、
<code>pinentry</code> プログラムは <code>gpg-agent</code> から起動される
(プログラム間の関係は <a href="http://miniconf.debian.or.jp/assets/files/gnupg-now.html">http://miniconf.debian.or.jp/assets/files/gnupg-now.html</a> の GnuPG programs (2) 参照)
ので、
<code>tty</code> が「<code>not a tty</code>」を返すらしく、
<code>pinentry-curses --ttyname not a tty</code>
が実行されていて fallback もうまくいきません。</p>

<p>なので、
fallback 動作は期待せず、
パッチもあてず、
<code>pinentry-emacs</code> を使うなら
必ず Emacs は起動しておく、
という運用が良さそうです。</p>

<h2>まとめ</h2>

<p><code>pinentry-emacs</code> を試してみましたが、
制限事項も多く、
修正も期待できないため、
別のもっと良い <code>pinentry</code> が使える場合は、
他のものを使うことをオススメします。</p>

<p>他の手段がない時の最終手段としては、知っておいても良いのではないかと思いました。</p>

<p>ちなみに自分の環境では、
<code>pinentry-mac</code> に戻してしまっていて、
<code>pinentry-emacs</code> は使っていません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X の Emacs で EasyPG が gpg2 で Opening input file: Decryption failed, になったので対処した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-08-20-mac-easypg-gpg2.html"/>
    <updated>2016-08-20T13:23:22+09:00</updated>
    <id>http://blog.n-z.jp/blog/mac-easypg-gpg2</id>
    <content type="html"><![CDATA[<p>OS X の Homebrew で入れている gnupg が更新されて gpg コマンドではなく gpg1 コマンドしか入らなくなって、 gpg コマンドは gnupg2 で入れるようになった影響で、 Emacs 上の EasyPG で <code>*.gpg</code> ファイルを開くときに <code>Opening input file: Decryption failed,</code> で開けなくなったので、その対処をしました。</p>

<!--more-->


<h2>対象バージョン</h2>

<p>OS 自体以外は Homebrew で入れたバージョンです。</p>

<ul>
<li>OS X : Yosemite (10.10.5)</li>
<li>Emacs.app : 24.5.1</li>
<li>gnupg : 1.4.21</li>
<li>gnupg2 : 2.0.30_2</li>
<li>gpg-agent : 2.0.30_1</li>
<li>pinentry-mac : 0.9.4</li>
</ul>


<h2>現象</h2>

<p><code>*.gpg</code> ファイルを開くと今までは minibuffer でパスフレーズをきいてきていたのに、 gpg コマンドが gnupg 1 系から gnupg 2 系に変わったら、 <code>Opening input file: Decryption failed,</code> というエラー (<code>*Messages*</code> バッファには <code>epa-file--find-file-not-found-function: Opening input file: Decryption failed,</code> と出ていた) で開けなくなりました。</p>

<h2>対処方法案</h2>

<p><code>(setq epg-gpg-program "gpg1")</code> で古い gnupg を使い続けるという案も考えましたが、今後のことを考えると新しいバージョンを使った方が良いだろうと思ってやめました。</p>

<p><a href="http://www.bookshelf.jp/cgi-bin/goto.cgi?file=auth-ja&amp;node=GnuPG+and+EasyPG+Assistant+Configuration">A. GnuPG および EasyPG アシスタントの設定</a> によると gpg2 は gpg-agent との組み合わせが必須のようだったので、 gpg-agent を使うことにしました。</p>

<h2>対処方法</h2>

<p>端末上で <code>gpg -c hoge.txt</code> や <code>gpg -c hoge.txt.gpg</code> を試してみると <code>pinentry-curses</code> が使われているとわかったので、 <code>brew install pinentry-mac</code> で pinentry-mac をインストールして、 <code>Caveats</code> に出てきたように <code>~/.gnupg/gpg-agent.conf</code> を作成して <code>pinentry-program /usr/local/bin/pinentry-mac</code> という設定を入れたところ、 Emacs 上でも <code>*.gpg</code> ファイルを開くときに pinentry-mac でパスフレーズをきかれるようになって、開けるようになりました。</p>

<p>パスフレーズを入力できるようにするだけなら pinentry の設定だけで gpg-agent の起動は必要ありませんでした。
パスフレーズを毎回入力する必要があるというのは今までと同じ使い勝手なので、 gpg-agent の起動までは追求しませんでした。</p>

<pre><code>==&gt; Caveats
You can now set this as your pinentry program like

~/.gnupg/gpg-agent.conf
    pinentry-program /usr/local/bin/pinentry-mac

.app bundles were installed.
Run `brew linkapps pinentry-mac` to symlink these to /Applications.
</code></pre>

<h2>将来の対処方法案</h2>

<p>gpg-agent は 2.1.5 から <code>--allow-emacs-pinentry</code> というオプションが追加されていて、 <a href="http://unix.stackexchange.com/questions/55638/can-emacs-use-gpg-agent-in-a-terminal-at-all">http://unix.stackexchange.com/questions/55638/can-emacs-use-gpg-agent-in-a-terminal-at-all</a> に書かれているように <a href="https://elpa.gnu.org/packages/pinentry.html">https://elpa.gnu.org/packages/pinentry.html</a> を使って、 Emacs 上でパスフレーズを入力できるようになるようなので、またそのように設定を変更するかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emacsやdistnotedを安定させるパッチをhomebrewで適用した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-01-29-emacs-distnoted-patch.html"/>
    <updated>2014-01-29T15:59:28+09:00</updated>
    <id>http://blog.n-z.jp/blog/emacs-distnoted-patch</id>
    <content type="html"><![CDATA[<p>Emacs で distnoted が大変なことになる件で、
さらにコメントで追加の情報があったので、
homebrew でのインストール時に
追加のパッチをあてるようにしました。</p>

<!--more-->


<h2>パッチ適用</h2>

<p>適用法としては
<code>brew edit emacs</code>
で以下のように変更して、
<code>brew reinstall emacs</code>
で再インストールしました。
その後の <code>brew update</code> で引っかかる原因になるので、
reinstall したら <code>brew edit emacs</code> で戻しました。</p>

<p>適用されればどこでも良いのですが、最後に追加するようにしてみました。</p>

<pre><code class="diff">diff --git a/Library/Formula/emacs.rb b/Library/Formula/emacs.rb
index db7c46c..26ec334 100644
--- a/Library/Formula/emacs.rb
+++ b/Library/Formula/emacs.rb
@@ -49,6 +49,7 @@ class Emacs &lt; Formula
     if build.include? "cocoa" and build.include? "japanese"
       p[:p0].push("http://sourceforge.jp/projects/macemacsjp/svn/view/inline_patch/trunk/emacs-inline.patch?view=co&amp;revision=583&amp;root=macemacsjp&amp;pathrev=583")
     end
+    p[:p1].push "https://gist.github.com/anonymous/8553178/raw/c0ddb67b6e92da35a815d3465c633e036df1a105/emacs.memory.leak.aka.distnoted.patch.diff"
     p
   end unless build.head?
</code></pre>

<h2>しばらく使ってみて</h2>

<p>inline patch をあてたり外したりして試していた時は時々突然 Emacs 自体が落ちていたのですが、このパッチにしてからは起きていないようです。</p>

<h2>japanese パッチ問題</h2>

<p>別の話として、ことえりの日本語入力の確定直後になぜか「英字」入力状態になってしまうことがあって、カーソルを動かさないと直らないという現象が以前から起きています。
これは inline patch と mavericks の組み合わせで発生しているようなのですが、原因は調べられていません。</p>

<p>文章を入力しにくくなるので、今は</p>

<pre><code>brew uninstall emacs
brew install emacs --cocoa --srgb --with-gnutls
brew linkapps
</code></pre>

<p>という感じで <code>--japanese</code> は外した状態でインストールしています。</p>

<p>homebrew でオプションの追加は <code>brew reinstall emacs --japanese</code> のように <code>reinstall</code> でも出来るのに、
外す方は <code>reinstall</code> だと出来ないようなので、
<code>uninstall</code> してから <code>install</code> し直しています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[distnotedの暴走が止まるというCocoa Emacsのinline patch修正版を使ってみた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-27-emacs-inline-patch.html"/>
    <updated>2013-12-27T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/emacs-inline-patch</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013-11-13-killall-distnoted-periodically.html">launchdでdistnotedを定期的に終了させる</a>
話のコメントで
<a href="https://gist.github.com/anonymous/8142555">Emacs.appでインラインパッチを当てた時にdistnotedが暴走しなくなる</a>
修正を教えてもらったので、
試してみました。</p>

<p>2014-01-29追記:
コメントにあるようにまだ問題があったので、続きとして
<a href="/blog/2014-01-29-emacs-distnoted-patch.html">emacsやdistnotedを安定させるパッチをhomebrewで適用した</a>
話を書きました。</p>

<!--more-->


<h2>homebrew で適用するパッチの変更</h2>

<p>適用法としては
<code>brew edit emacs</code>
で以下のように変更して、
<code>brew reinstall emacs</code>
で再インストールしました。</p>

<pre><code class="diff">diff --git a/Library/Formula/emacs.rb b/Library/Formula/emacs.rb
index 712c3d1..5ce4ce2 100644
--- a/Library/Formula/emacs.rb
+++ b/Library/Formula/emacs.rb
@@ -47,7 +47,7 @@ class Emacs &lt; Formula
     # "--japanese" option:
     # to apply a patch from MacEmacsJP for Japanese input methods
     if build.include? "cocoa" and build.include? "japanese"
-      p[:p0].push("http://sourceforge.jp/projects/macemacsjp/svn/view/inline_patch/trunk/emacs-inline.patch?view=co&amp;revision=583&amp;root=macemacsjp&amp;pathrev=583")
+      p[:p0].push("https://gist.github.com/anonymous/8142555/raw/d67ad1dc814579d125afbd18de3a62ba69895601/emacs-inline.patch")
     end
     p
   end unless build.head?
</code></pre>

<h2>元のパッチからの変更点</h2>

<p>元の sourceforge.jp のパッチとの差分をとってみると、
以下のメソッド呼び出しが変わっているだけでした。</p>

<pre><code class="diff">diff --git a/emacs-inline.patch.sfjp b/emacs-inline.patch.gist
index 52f2052..d67ad1d 100644
--- a/emacs-inline.patch.sfjp
+++ b/emacs-inline.patch.gist
@@ -1015,7 +1015,7 @@ diff -r -N -p ../emacs-24.3.org/src/nsterm.m src/nsterm.m
                                                name: nil object: nil]; */
 +   [[NSDistributedNotificationCenter defaultCenter] addObserver: NSApp
 +                  selector: @selector (changeInputMethod:)
-+                         name: @"AppleSelectedInputSourcesChangedNotification" object: nil];
++                         name: @"AppleSelectedInputSourcesChangedNotification" object: nil suspensionBehavior:NSNotificationSuspensionBehaviorDeliverImmediately];

     dpyinfo = xzalloc (sizeof *dpyinfo);
</code></pre>

<h2>まとめ</h2>

<p>使ってみて問題がなければ sourceforge.jp の方に取り込んでもらうのが良さそうです。</p>

<p>しばらく使ってみた感じだと distnoted のメモリ使用量が増えていっても、
一度 Emacs.app を終了すると distnoted のメモリ使用量が一気に減るようになりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emacsのmode-lineのminor-modeなどに色をつける]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-11-emacs-color-mode-line.html"/>
    <updated>2013-12-11T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/emacs-color-mode-line</id>
    <content type="html"><![CDATA[<p>emacs の mode-line の minor mode の表示が長いので短くしているのですが、
単純に短くするとわかりにくいので、色もつけています。</p>

<p>ところが、変数で設定できるようになっているものだと単純に
<code>propertize</code> して <code>setq</code> するだけでは色がつかなかったので、
その対処も含めてまとめてみました。</p>

<p>この投稿は
<a href="http://qiita.com/advent-calendar/2013/dot-emacs">.emacs Advent Calendar 2013</a>
の11日目の記事です。</p>

<!--more-->


<h2>単純に短くする</h2>

<p>単純に短くするには <code>minor-mode-alist</code> の文字列を直接変更してしまうだけです。</p>

<pre><code class="common-lisp">(when (consp (assq 'abbrev-mode minor-mode-alist))
  (setcar (cdr (assq 'abbrev-mode minor-mode-alist)) " ab"))
(when (consp (assq 'auto-fill-function minor-mode-alist))
  (setcar (cdr (assq 'auto-fill-function minor-mode-alist)) " Fil"))
</code></pre>

<h2>色も付ける</h2>

<p><code>propertize</code> で <code>face</code> を付けた文字列を設定すると色が付きます。</p>

<p><code>face</code> プロパティの設定としては、
最低限 <code>:foreground</code> と <code>:background</code> を知っておけば良いと思います。
指定できる色は <code>list-colors-display</code> で一覧できます。</p>

<pre><code class="common-lisp">(when (consp (assq 'abbrev-mode minor-mode-alist))
  (setcar (cdr (assq 'abbrev-mode minor-mode-alist))
      (propertize "省" 'face '(:foreground "green"))))
(when (consp (assq 'auto-fill-function minor-mode-alist))
  (setcar (cdr (assq 'auto-fill-function minor-mode-alist))
      (propertize "詰" 'face '(:foreground "yellow"))))
</code></pre>

<h2>設定対象の探し方</h2>

<p>ここでは例として <code>abbrev-mode</code> と <code>auto-fill-mode</code> をあげていますが、
<code>auto-fill-mode</code> が <code>auto-fill-function</code> になっているなど、
単純に決まっているものだけではなさそうなので、
他の設定をどうするのかは、
<code>describe-variable</code> で <code>minor-mode-alist</code> をみて探すのが良さそうでした。</p>

<h2>設定用関数</h2>

<p>毎回長々と書くのは面倒なので、以下の関数を定義して使っています。</p>

<pre><code class="common-lisp">(defun my-shorten-minor-mode-name (mode-sym short-name &amp;optional face)
  "minor-modeの名前を短くする。"
  (let ((cell (assq mode-sym minor-mode-alist)))
    (when (consp cell)
      (if face
          (setq short-name (propertize short-name 'face face))
        (setq short-name (concat " " short-name)))
      (setcar (cdr cell) short-name))
    ))
</code></pre>

<h2>起動時に読み込まれていない minor-mode の設定</h2>

<p><code>view-mode</code> のように起動時に読み込まれていない <code>minor-mode</code> は
<code>.emacs</code> のタイミングで書き換えようとしても
<code>minor-mode-alist</code> に登録されていないのでうまくいきません。
こういう場合は <code>eval-after-load</code> で設定しています。</p>

<pre><code class="common-lisp">(eval-after-load "view"
  '(my-shorten-minor-mode-name
    'view-mode "見" '(:foreground "white" :background "DeepPink1")))
</code></pre>

<h2>変数で設定できる場合</h2>

<p><code>eldoc-minor-mode</code> のように変数で設定できるようになっているものがあります。
こういう場合は単純に <code>propertize</code> した文字列を <code>setq</code> しても
プロパティが無視されて色がつきません。</p>

<p>理由は <code>mode-line-format</code> のドキュメントの
<a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Properties-in-Mode.html#Properties-in-Mode">23.4.6 Properties in the Mode Line</a>
に書いてあって、
<code>risky-local-variable</code> が non-nil じゃないとテキストプロパティが
無視されるということでした。</p>

<p>そこで <code>risky-local-variable</code> に <code>t</code> を設定すれば色がつくようになりました。</p>

<pre><code class="common-lisp">(put 'eldoc-minor-mode-string 'risky-local-variable t)
(setq eldoc-minor-mode-string
      (propertize "d" 'face '(:foreground "purple" :background "yellow")))
</code></pre>

<h2>anzu.el での例</h2>

<p>他の例も挙げておくと
<a href="http://qiita.com/syohex/items/56cf3b7f7d9943f7a7ba">anzu.el</a>
なら以下のように設定しています。</p>

<pre><code class="common-lisp">  (when (require 'anzu nil t)
    (put 'anzu-mode-lighter 'risky-local-variable t)
    (setq anzu-mode-lighter (propertize "杏" 'face 'anzu-mode-line))
    (global-anzu-mode +1)
    )
</code></pre>

<h2>まとめ</h2>

<p>ここでは <code>minor-mode</code> を中心に <code>mode-line</code> を短くして、
色をつける方法に付いて紹介しました。
<code>major-mode</code> も含めて実際に使っている設定は
<a href="https://github.com/znz/dot-emacs/blob/8434c73ba833791eedc1411360e10441e52b370e/init.el.d/50mode-line.el">50mode-line.el</a>
に公開しているので、参考にしてください。</p>
]]></content>
  </entry>
  
</feed>
