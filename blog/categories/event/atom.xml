<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: event | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/event/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2018-02-25T12:03:37+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第80回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2018-01-13-rubykansai80.html"/>
    <updated>2018-01-13T22:13:59+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai80</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/69011">第80回 Ruby関西 勉強会</a> に参加しました。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場</h2>

<p>railsdm できたことのある Aiming さんが会場でした。</p>

<h2>オープニング</h2>

<p>会場案内など。</p>

<h2>mruby搭載ボードGR-CITRUSの新しい開発環境の紹介 @momoonga</h2>

<ul>
<li>GR-CITRUS : Ruby プログラム</li>
<li>WA-MIKAN : Wi-Fi 通信</li>
<li>SAMBOU-KAN : モーター制御 が増えた</li>
<li>GR-CITRUS 開発環境 : Visual Studio Code 拡張の Rubic というのが増えた</li>
<li>mrbgem の組み合わせのバリエーションが選べる</li>
<li>Rubic のデモ</li>
<li>WA-MIKAN のデモ</li>
<li>SAMBOU-KAN のデモ</li>
<li>「RubyRobo 192.168.4.1」という SSID で接続先 IP アドレスがわかるようになっていた</li>
<li>WiFi 接続して操作はうまくいかなかった</li>
<li>リリース</li>
<li><a href="https://github.com/wakayamarb/wrbb-v2lib-firm/blob/master/rubic-repository.json">https://github.com/wakayamarb/wrbb-v2lib-firm/blob/master/rubic-repository.json</a></li>
<li>Release に data.zip</li>
<li><p>Rubic の方にリポジトリを追加してもらうと、後は Release を自由に増やしていける</p></li>
<li><p>質疑応答</p></li>
<li>Q: どこで買える?</li>
<li>A: 秋月, 独自のネットショップ, 大阪だと共立電子</li>
<li>SAMBOU-KAN は扱ってもらえてないので、個人のみ</li>
</ul>


<h2>self を考える @yalab</h2>

<ul>
<li>発表資料: <a href="https://www.slideshare.net/yalab/self-86099114">https://www.slideshare.net/yalab/self-86099114</a></li>
<li><a href="https://twitter.com/yalab/status/948112876027256832">https://twitter.com/yalab/status/948112876027256832</a> rubyでプログラミングされてる方に質問です。selfというものを</li>
<li>正式には、レシーバーを指定しないではなく、レシーバーを省略した</li>
<li>いろんな場所での self</li>
<li>private メソッドは <code>self.</code> をつけて呼ぶことができない (<code>self.puts "hoge"</code> とか)</li>
<li>irb の中で <code>irb "a"</code> でサブ irb に入って self に色々きいてみる</li>
<li><code>self.class</code> とか</li>
<li><code>self.methods.grep /plu/</code> (String にしなくても grep できる)</li>
<li><code>self.method(:pluralize).source_location</code> (Active Support の場所がでてくる)</li>
<li>質疑応答</li>
<li>Q: self の由来は?</li>
<li>A: たぶん Smalltalk 由来</li>
<li>Q: あえて self をつけたい場合は?</li>
<li>A: <code>self.hoge=</code> を呼びたいときとか</li>
<li><code>self.hoge=</code> は private でも呼べる (<code>self.</code> を省略するとローカル変数への代入になるため)</li>
</ul>


<p>protected でも同じ:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% irb &ndash;simple-prompt -r irb/completion&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;class A; protected def hoge=(hoge);end;end
</span><span class='line'>=&gt; A
</span><span class='line'>irb A.new
</span><span class='line'>self.hoge=:hoge
</span><span class='line'>=&gt; :hoge
</span><span class='line'>^D
</span><span class='line'>=&gt; #&lt;IRB::Irb: @context=#&lt;IRB::Context:0x00007fcec08c4ad8&gt;, @signal_status=:IN_EVAL, @scanner=#&lt;RubyLex:0x00007fcec08cce68&gt;&gt;
</span><span class='line'>A.new.hoge = :hoge
</span><span class='line'>NoMethodError: protected method `hoge=&lsquo; called for #&lt;A:0x00007fcec08a5318&gt;</span></code></pre></td></tr></table></div></figure></p></blockquote></blockquote>

<ul>
<li>Q: <code>class &lt;&lt; self</code> とは?</li>
<li><p>A: <code>class &lt;&lt; obj</code> で obj の特異メソッドが定義できる話</p></li>
<li><p>twitter からの参考情報:</p></li>
<li><a href="https://qiita.com/jnchito/items/451018811842c2631e1e">privateメソッドをレシーバ付きで呼び出せるケース - Qiita</a></li>
<li><a href="https://gist.github.com/sunaot/8682795"><code>class &lt;&lt; self</code> によるクラスメソッドの定義のイディオムの説明とその背景にある特異クラスのかんたんな解説</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li>追加情報:</li>
<li><a href="http://koseki.hatenablog.com/entry/20080125/rubysetter">Rubyのsetterメソッドは特別扱いされる。 - こせきの技術日記</a></li>
<li>Thu Feb 20 04:07:06 2003 からなので <a href="https://gist.github.com/unak/3038095">The History of Ruby</a> と見比べると 2003-08-04 1.8.0 から。</li>
</ul>


<h2>プロを目指す人のための例外処理（再）入門 @jnchito</h2>

<ul>
<li>発表資料: <a href="https://speakerdeck.com/jnchito/number-rubykansai-2018-01-13">https://speakerdeck.com/jnchito/number-rubykansai-2018-01-13</a></li>
<li>西脇から高速バスで2時間</li>
<li>例外と例外処理についておさらい</li>
<li>「ハンマーを持つ人にはすべてが釘に見える」</li>
<li>本当にあった怖い話</li>
<li>例外を握りつぶしていた例</li>
<li>例外処理は使い方を間違えると、害の方が大きくなる</li>
<li>できることと、やっていいことは異なる</li>
<li>原則は rescue しない</li>
<li>例外処理のバッドプラクティス</li>
<li>例外の握りつぶし</li>
<li>Exception を rescue (普通は StandardError で良い)</li>
<li>begin と rescue の範囲が広い</li>
<li>例外クラスを指定しないと NameError や NoMethodError まで捕捉されてしまう</li>
<li>例外処理をテストしない</li>
<li>ネットの記事には要注意 (Exception を rescue しているものとか多いらしい)</li>
<li>例外処理のベストプラクティス</li>
<li>原則として rescue しない</li>
<li>ログに残したり通知したりする</li>
<li>対象を絞り込む (<code>begin; Date.new(year, month, day); rescue ArgumentError; nil; end</code>)</li>
<li>この例なら <code>Date.valid_date?</code> があるので例外処理を使わない書き方ができる</li>
<li>例外処理もテストする</li>
<li>高度なトピック</li>
<li>業務エラーとシステムエラーの区別をすべき</li>
<li>業務エラーには原則として例外を使わない (rails の <code>if @model.save</code> とか)</li>
<li>例外処理をなくしても業務エラーに対処できるか?</li>
<li>使わない実装例: <code>all_success &amp;=</code> (ロールバックも考慮すべき)</li>
<li>システムエラーは原則としてフレームワークなどの共通処理に任せる</li>
<li>例外処理とロールバックの関係</li>
<li>「アトミック操作は何か」を常に意識する</li>
<li>Rails で複数のレコードを同時に更新する場合: <code>transaction do ... end</code> と業務エラー時に <code>raise ActiveRecord::Rollback</code> で明示的にロールバック</li>
<li>攻めの例外</li>
<li>予期せぬ条件分岐で例外を発生させる</li>
<li><code>else</code> で矛盾する可能性のある値を返すのもバグの元</li>
<li>ありえないエラーには強気で (<code>transaction</code> の中で普通はエラーにならない <code>update!</code> を使ってダメならシステムエラー)</li>
<li>Q: <code>&amp;=</code> は <code>&amp;&amp;=</code> の方が良いのでは?</li>
<li>A: 良さそう</li>
<li>Q: 素人は rescue すんな!! は他のフレームワークにもあてはまる?</li>
<li>A: rails 以外 ruby 以外でもフレームワークに共通処理があるはずなので、あてはまるはず</li>
</ul>


<h2>Ruby 2.5.0 の主な変更点 @znz</h2>

<p>発表資料としては特に用意せずに <a href="https://docs.ruby-lang.org/ja/latest/doc/news=2f2_5_0.html">https://docs.ruby-lang.org/ja/latest/doc/news=2f2_5_0.html</a> をみながら気になった点を話しました。</p>

<p>最初に <a href="https://slide.rabbit-shocker.org/">Rabbit Slide Show</a> の過去の発表資料から適当に自己紹介のページだけ開いておいて、自己紹介をした後は、
<a href="https://www.ruby-lang.org/ja/news/2017/12/25/ruby-2-5-0-released/">Ruby 2.5.0 リリース</a> をみながら色々話をして、
時間があるだけ<a href="https://docs.ruby-lang.org/ja/2.5.0/doc/news=2f2_5_0.html">NEWS for Ruby 2.5.0</a>をみながら色々話をしていました。</p>

<h2>GitLab にコントリビュート @ogomr</h2>

<ul>
<li>発表資料: <a href="https://speakerdeck.com/ogom/contributing-to-gitlab-with-oss-gate">https://speakerdeck.com/ogom/contributing-to-gitlab-with-oss-gate</a></li>
<li>Contributing to GitLab with OSS Gate</li>
<li>(ギットラブと呼んでいる)</li>
<li>chef cookbook → docker</li>
<li>mac だと遅い</li>
<li>GDK = GitLab Development Kit</li>
<li>OSS 開発に参加するには?</li>
<li>フィードバック</li>
<li>ユーザーとして OSS を使う</li>
<li>気づいたことを開発元にフィードバック</li>
<li><a href="https://about.gitlab.com/installation/">https://about.gitlab.com/installation/</a></li>
<li>SSL も Let&rsquo;s Encrypt でいける</li>
<li><a href="https://qiita.com/ogomr/items/238d8649b36bcc8c14ba">3Stepで Let’s Encrypt の保護された GitLab を構築する</a></li>
<li>GitLab 開発環境構築も GitLab Development Kit で簡単にできる</li>
<li><p><a href="https://qiita.com/ogomr/items/cc404bf9373408663b11">GitLab Development Kit で OSS開発 に参加する for MAC 2017</a></p></li>
<li><p>CONTRIBUTING を参考にして開発元にわかりやすいように書く</p></li>
<li>適切な場所に報告する: GitLab は gitlab.com の issues</li>
<li>一緒に体験しましょう</li>
<li><p><a href="https://oss-gate.doorkeeper.jp/events/69160">OSS Gate大阪ワークショップ2018-03-10</a></p></li>
<li><p>GitLab ってどんな技術で動いているの?</p></li>
<li><a href="https://docs.gitlab.com/ce/development/architecture.html">GitLab Architecture Overview</a></li>
<li><a href="https://docs.gitlab.com/ce/development/fe_guide/index.html">Frontend Development Guidelines</a></li>
<li>Vue.js を使っている</li>
<li>gdk run</li>
<li>Gitlab Workhorse : Smart reverse proxy, language Go</li>
<li>Gitaly : Git RPC (Remote procedure call) service, language: Ruby, Go</li>
<li>GitLab Shell</li>
<li>GitLab Rails Web (unicorn)</li>
<li>GitLab Rails Background Jobs (sidekiq)</li>
<li>GitLab Frontend Web (webpack)</li>
<li>GitLab Community Edition の依存パッケージ: Gmefile.lock 226, yarn.lock 1098</li>
<li>翻訳のイシューはマージされやすい <a href="https://github.com/mperham/sidekiq/pull/3720">https://github.com/mperham/sidekiq/pull/3720</a></li>
<li>過去の翻訳がいまいちだったと感じたので変更した例</li>
</ul>


<h2>休憩</h2>

<p>ちょっと用事があったので、外出。</p>

<h2>Ruby初級者向けレッスン 64回 - クラス @higaki</h2>

<p>グループワークをしている途中で戻ってきました。</p>

<h2>クロージング</h2>

<p>告知など</p>

<ul>
<li>2/10(土)に大阪(日本橋)で GR-CITRUS などのミニハッカソン</li>
<li><a href="https://dddrb.doorkeeper.jp/">https://dddrb.doorkeeper.jp/</a> でプロを目指す人のためのRuby入門 言語仕様からテスト駆動開発・デバッグ技法まで 読書会の第2回を2月に予定</li>
<li><a href="https://oss-gate.doorkeeper.jp/events/69170">OSS Gate大阪ミートアップ for React</a></li>
<li>7月中頃か8月中頃にRubyビジネス推進協議会のイベントが予定されていて、その翌日にRuby関西でもちょっと大きめの勉強会 (関西 RubyKaigi になるか第n回 Ruby関西 勉強会になるかどうかは未定) をする予定なので、スタッフ募集 (興味がある方は <a href="https://rubykansai.doorkeeper.jp/">Ruby関西のdoorkeeper</a> の問い合わせからどうぞ)</li>
<li>今回の会場の <a href="https://www.doorkeeper.jp/%E4%BC%9A%E5%A0%B4/aiming-osaka">IT勉強会の会場 » Aiming 大阪スタジオ</a> の紹介</li>
</ul>


<h2>懇親会</h2>

<p>懇親会は特に事前の募集とかはなく、会場に残ってもらって一緒に移動という感じでした。
実際にいってみると cuzic さんが予想で予約した人数でぴったりだったようでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO 20周年記念ミートアップに参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-12-17-lilo-event.html"/>
    <updated>2017-12-17T23:06:45+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-event</id>
    <content type="html"><![CDATA[<p><a href="https://lilo.connpass.com/event/73932/">LILO 20周年記念ミートアップ</a>に参加しました。
いくつか事前に発表されていたものもありましたが、他はいつも通りアンカンファレンス形式でした。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場</h2>

<p>いつもより遅い14時からでした。</p>

<h2>オープニング</h2>

<ul>
<li>自己紹介案: 名前, いつから Linux を使っているのか?, 初めて使った Linux ディストリビューション, 最近の Linux の使い方</li>
<li>会場費とか会計の話とか (結局プールされているお金があるので、今回は参加費は無料だった)</li>
<li>ハッシュタグは <code>#lilo_jp</code></li>
</ul>


<h2>自己紹介など</h2>

<ul>
<li>名前, いつから Linux を使っているのか?, 初めて使った Linux ディストリビューション, 最近の Linux の使い方</li>
<li>好きなディストリビューション: Debian: 7, Gentoo: 1, Vine: 1, Rasbian: 2, Plamo: 2, Ubuntu: 1, CentOS: 1</li>
<li>UNIX: Minix: 1, OS9: 1</li>
<li>好きな言語: AWK: 4, Python: 2, JavaScript: 1, bash: 3, 日本語: 1, C: 3, BASIC09: 1, Perl: 2, Ruby: 1, PHP: 1</li>
<li>libc5 のバージョンアップではまったという話が数人</li>
<li>初めて使ったのは Slackware という人が多かった感じがする</li>
</ul>


<h2>Linuxコミュニティ20年の振返りと学んだ事(もうちょと付け足し版)</h2>

<ul>
<li>GPD Pocket で HDMI がうまく出なかったので Windows で発表</li>
<li>id にこだわりがあるので、取れなかったサービスはあまり利用しない</li>
<li>1997-06-22 から (ML に投稿があって名前が決定した日)</li>
<li>運営者は特にいなくて、その時々でやっている人が違う</li>
<li>linux.or.jp ドメイン管理者の JLA との窓口やさくらインターネットとの窓口はやっている</li>
<li>LinuxMaMa というパッチを集めたサイトがあった</li>
<li>IP マスカレードは最初はここにあって、本体に取り込まれた</li>
<li>Linux JF, Linux JM</li>
<li>linux-users ML の方が LinuxMaMa より後から知った</li>
<li>UNIX が十万円以上する頃に Linux は CD-ROM 代だけで売っていた</li>
<li>営業さんはすごいと感じた話</li>
<li><p>コミュニティはいろんな人がいる</p></li>
<li><p>k-of.jp/2017 の時からの付け足しはお世話になったサイトとお店</p></li>
<li>最近は野良パッチというのはあまり見かけない</li>
<li><p>今は github があるが、昔は SCM が無料というのはなかった</p></li>
<li><p>Google 翻訳などで翻訳のモチベーションが減っているかも</p></li>
<li>英語ができる人しか生き残っていない?</li>
<li>仕様書がない?</li>
<li>ウォーターフォールではない, リーンに近い</li>
<li>開発プロセスも勉強になる</li>
<li><p>コアはきれいだが周辺のデバイスドライバのソースはまちまち</p></li>
<li><p>Windows が嫌いというより (シャットダウン時に時間がかかる) Windows Update が嫌い</p></li>
</ul>


<h2>LILO(7)</h2>

<ul>
<li>LILO の説明を man page にした</li>
<li>LILO(8) だとブートローダーとかぶってしまう</li>
<li>LILO のサイトの複数のページから日付が付いているものを集めた</li>
<li>LibreOffice Calc にまとめて、重複などは TSV を AWK で処理</li>
<li>イベント開催回数は 100 回以上 (141回ぐらい?)</li>
</ul>


<h2>lilo.linux.or.jp の話</h2>

<ul>
<li>いつもの更新情報</li>
<li>GitHub のプライベートリポジトリを使わせてもらっていたのを GitLab.com に変更した</li>
<li>Web コンテンツが非公開なのは内容のライセンスというよりもコミットログが適当なので公開したくないということの方が大きいようでした</li>
<li>発表資料などの置き場所として resources を作った</li>
<li>デフォルトのライセンスも決めた</li>
</ul>


<p>スライドはいつも通り、
- <a href="https://slide.rabbit-shocker.org/authors/znz/lilo-20171217/">Rabbit Slide Show</a>
- <a href="https://slideshare.net/znzjp/lilolinuxorjp-201712">SlideShare</a>
- <a href="https://speakerdeck.com/u/znz/p/lilo-dot-linux-dot-or-dot-jp-falsehua-2017nian-12yue">Speaker Deck</a>
- <a href="https://rubygems.org/gems/rabbit-slide-znz-lilo-20171217">RubyGems.org</a>
- <a href="https://github.com/znz/lilo-20171217">GitHub.com</a>
で公開しています。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/lilo-20171217/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/lilo-20171217/" title="lilo.linux.or.jp の話 (2017年12月)">lilo.linux.or.jp の話 (2017年12月)</a>
</div>


<h2>ライセンス変更の話</h2>

<ul>
<li>Ruby のリファレンスマニュアルは RWiki の頃に仮の適当なライセンス + 変更手順を決めていたので、今は CC にできた</li>
<li>Ruby は 1.9.3 で GPL とのデュアルライセンスから 2条項 BSDL に切り替えた</li>
<li>tdiary は GPL2 から GPL2+ に変わった

<ul>
<li>highlight の著作権者に入っているが、特に個別連絡はなかったので詳細はよくわからない</li>
<li>日本の著作権法では異議申し立てがなければ問題はないはずという意見があった</li>
</ul>
</li>
</ul>


<p>スライドはいつも通り、
- <a href="https://slide.rabbit-shocker.org/authors/znz/change-license/">Rabbit Slide Show</a>
- <a href="https://www.slideshare.net/znzjp/ss-84299220">SlideShare</a>
- <a href="https://speakerdeck.com/znz/raisensubian-geng-falsehua">Speaker Deck</a>
- <a href="https://rubygems.org/gems/rabbit-slide-znz-change-license">RubyGems.org</a>
- <a href="https://github.com/znz/change-license">GitHub.com</a>
で公開しています。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/change-license/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/change-license/" title="ライセンス変更の話">ライセンス変更の話</a>
</div>


<h2>LibreOffice や各地の IT コミュニティ運営について</h2>

<ul>
<li>LILO や KOF などのイベント関連とか</li>
<li>OpenOffice.org や LibreOffice などのソフトウェア関係とか</li>
<li>ノウハウの文書は少ない, <a href="https://www.oreilly.co.jp/books/9784873114958/">アート・オブ・コミュニティ</a> とか</li>
<li>コミュニティの目的によっていろいろ違う</li>
<li>LILO は ML で反論があると意思決定が難しい</li>
<li>connpass に移行して楽になった</li>
<li>やり方は様々</li>
<li>ミッション大事、最初のメンバーで文化が決まる</li>
<li>人のトラブルとか悩ましい</li>
<li>CoC の話</li>
<li>DroidKaigi は毎年スタッフが半分入れ替わるらしい</li>
<li>若い人がいない問題: 諦める or 取りに行く</li>
<li>既存のところに入るより新しく立ち上げた方が活躍しやすい問題</li>
<li>最初の慣なれるための場として活用してもらう?</li>
<li>OSC 広島だとトップを学生にしてみたことがある</li>
<li>LibreOffice コミュニティの話は省略</li>
</ul>


<h2>実数ってナンだ?</h2>

<ul>
<li>人工知能や機械学習をきっかけにして数学を勉強し直した</li>
<li>自然数はここでは1以上 (0 を含む場合もある)</li>
<li>ペアノの公理</li>
<li>自然数→整数→有理数</li>
<li>有理数, 無理数は有比数, 無比数の方がわかりやすかったのに</li>
<li>デデキントの有理数の切断</li>
<li>有理数→無理数</li>
<li>無限の和で近似する話</li>
<li>無限の話</li>
</ul>


<h2>Processing でなんとなく</h2>

<ul>
<li>Processing : アート向けのプログラミング環境</li>
<li>setup と draw</li>
<li>デモ</li>
<li>ランダムに贈りあうシミュレーション</li>
<li><a href="https://gigazine.net/news/20170711-random-people-give-money-to-random-other-people/">https://gigazine.net/news/20170711-random-people-give-money-to-random-other-people/</a></li>
</ul>


<h2>qemu-debootstrap で別アーキテクチャ環境が手軽に使えて便利</h2>

<ul>
<li>arm64 (aarch64) のノート PC Pinebook を買った</li>
<li>chroot と qemu-user-static で別アーキテクチャが使える</li>
<li>Korea Community Day 2018 の紹介 (OSC のようなものらしい)</li>
</ul>


<h2>おっさんの集中力について</h2>

<ul>
<li>適度に運動する</li>
<li>寝ることが重要</li>
<li>食事のデザインも大事</li>
<li>マインドフルネスも大事</li>
<li>スピリチュアル系はやめた方が良い</li>
<li>注意力は限りがある</li>
<li>Task warrior, Time warrior</li>
<li>anki</li>
</ul>


<h2>今後の予定</h2>

<ul>
<li><a href="https://www.ospn.jp/osc2018-osaka/">OSC 2018 Osaka</a> の翌日の 2018-01-28(日) にまた関西Debian勉強会と合同で勉強会をやるらしい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Developers Meetup 2017 大阪会場に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-12-09-railsdm.html"/>
    <updated>2017-12-09T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/railsdm</id>
    <content type="html"><![CDATA[<p><a href="https://techplay.jp/event/636560">Rails Developers Meetup 2017 大阪会場</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>前にきたことがある場所より広い部屋でした。</p>

<h2>レールの伸ばし方</h2>

<ul>
<li><a href="https://speakerdeck.com/willnet/rerufalseshen-basifang">発表資料</a></li>
<li><a href="https://willnet.gitbooks.io/rspec-style-guide/content/">RSpec スタイルガイド</a></li>
<li>プロジェクトに途中から参加するとつらい</li>
<li>適切な抽象化</li>
<li>MVC が正しく使えているか</li>
<li>Fat Controller</li>
<li>ロジックを Model に</li>
<li>Fat Model</li>
<li>PORO (Plain Old Ruby Object) に切り出す</li>
<li><a href="http://tech.medpeer.co.jp/entry/2017/11/08/120000">Railsの太ったモデルをダイエットさせる方法について</a></li>
<li>大量の <code>before_filter</code> 問題の対処方法</li>
<li>クエリメソッドにして各 action で呼び出してインスタンス変数に代入</li>
<li>ビューに渡す変数を抽象化</li>
<li>View Model (View Object)</li>
<li>Validation (callback) の場合分けが複雑になる問題</li>
<li>場合分けせずにフォームごとに Form Object を作る</li>
<li>ひとつのアクションでやることがたくさんある</li>
<li>Service Object という言葉は人によってさすものがいろいろある</li>
<li>この3つでだいたいいける</li>
<li>現場に導入するには?</li>
<li>具体例やわかりやすいドキュメントが必要</li>
<li>誘導できるツールがあるといいのでは? → 作った <a href="https://github.com/willnet/yuba">https://github.com/willnet/yuba</a></li>
<li>Yuba の詳細は時間がないので省略</li>
<li>質疑応答</li>
<li>聞き取りにくかったのでメモ取れず</li>
<li><a href="http://blog.willnet.in/entry/2017/12/09/135338">Rails Developers Meetup 2017でレールの伸ばし方について話した - おもしろwebサービス開発日記</a></li>
</ul>


<h2>Professional Rails on ECS</h2>

<ul>
<li><a href="http://joker1007.hatenablog.com/entry/2017/12/09/155456">http://joker1007.hatenablog.com/entry/2017/12/09/155456</a></li>
<li>1年分の知見のまとめ</li>
<li>発表時間がたりないので後日ブログにまとめる予定</li>
<li>k8s が覇権をとった感じでつらい</li>
<li>Fargate とか EKS とか</li>
<li>Docker イメージは production と staging は同じで development はわける</li>
<li>少しの間、中継が切れてた</li>
<li>assets:precompile が鬼門のひとつ</li>
<li>prehook</li>
<li>秘匿値の扱い</li>
<li>設定ファイル自体を暗号化してつっこんでいる</li>
<li><code>yaml_vault</code></li>
<li>KMS を利用すると権限を IAM で管理できる</li>
<li>開発環境は docker-compose と volumes で</li>
<li>mac はボリュームマウントが遅い</li>
<li>Gentoo がおすすめ</li>
<li>開発環境は Docker 環境の中に zsh なども入れて便利にしている</li>
<li>ECS の説明: TaskDefinition とか Service とか</li>
<li><a href="https://github.com/reproio/ecs_deploy">https://github.com/reproio/ecs_deploy</a></li>
<li>Capistrano を使っている理由: 既存資産があるなど</li>
<li>個人別ステージング環境へのデプロイ</li>
<li>苦労話なので略</li>
<li>auto scale</li>
<li>コマンド実行 <a href="https://github.com/reproio/wrapbox">https://github.com/reproio/wrapbox</a></li>
<li>ログは papertrail 経由</li>
<li>db:migrate → ridgepole</li>
<li>diff があれば手動で DDL 発行</li>
<li>テストと CI は別発表資料参照</li>
<li>質疑応答はなし</li>
</ul>


<h2>ざっくり学ぶ言語のしくみ</h2>

<ul>
<li><a href="https://speakerdeck.com/itkrt2y/zatukurixue-buyan-yu-falsesikumi">https://speakerdeck.com/itkrt2y/zatukurixue-buyan-yu-falsesikumi</a></li>
<li>一般的な仕組みの概説</li>
<li><a href="https://interpreterbook.com/">https://interpreterbook.com/</a></li>
<li>Ruby の場合の話</li>
<li>途中終了</li>
</ul>


<h2>RSpec しぐさ</h2>

<ul>
<li><a href="https://www.slideshare.net/takafumionaka/rspec-83693226">https://www.slideshare.net/takafumionaka/rspec-83693226</a></li>
<li>テスト駆動開発の付録C</li>
<li>BDD はテストではなく設計技法なので語彙を変えた</li>
<li>assertion → expectation など</li>
<li>Given, When, Then</li>
<li>should から expect に変わった</li>
<li>最後の方がちょっと切れた</li>
</ul>


<h2>Enter the OSS world [RuboCop] II. lost boundary</h2>

<ul>
<li><a href="https://speakerdeck.com/koic/enter-the-oss-world-rubocop-ii-lost-boundary">https://speakerdeck.com/koic/enter-the-oss-world-rubocop-ii-lost-boundary</a></li>
<li>Part I は福岡で発表した</li>
<li>Part II が今回</li>
<li>bug ラベルのものをみる</li>
<li>最初に再現テストを書く</li>
<li>実際に出した PR の例</li>
<li>OSS Gate の紹介もあった</li>
</ul>


<h2>Randomly Failing Specs</h2>

<ul>
<li><a href="https://www.slideshare.net/sinsoku/randomly-failing-specs">https://www.slideshare.net/sinsoku/randomly-failing-specs</a></li>
<li>稀に落ちるテスト → 稀に通るテストになる</li>
<li>ランダム値を使うテスト</li>
<li>Faker の値は意外とかぶる</li>
<li>Faker の unique メソッド</li>
<li>FactoryBot の sequence で良いことも多い</li>
<li>グローバルなものをいじるもの</li>
<li><code>stub_const</code> のわな</li>
<li>Capybara + JavaScript</li>
<li>途中終了</li>
</ul>


<h2>休憩</h2>

<p>飛び込み LT</p>

<h3>Vim and Ruby</h3>

<ul>
<li>Ruby で Vim プラグインを作る話</li>
<li><a href="https://github.com/pocke/yaml-path.vim">https://github.com/pocke/yaml-path.vim</a></li>
</ul>


<h2>GMOペパボの Rails &amp; Vue.js プロダクト開発の現場</h2>

<ul>
<li><a href="https://speakerdeck.com/kymmtchan/rails-developers-meetup-2017">https://speakerdeck.com/kymmtchan/rails-developers-meetup-2017</a></li>
<li>カラーミーリピート</li>
<li>Rails + Vue.js を Heroku で</li>
<li>インセプションデッキ</li>
<li>ドラッカー風エクササイズ</li>
<li>類似サービスのモデリング</li>
<li>松江合宿</li>
<li>日々の開発</li>
<li>1週間スプリントのスクラム(っぽい)開発</li>
<li>ユーザテスト</li>
<li>(夏の)自由研究</li>
<li>一部ページで SSR</li>
<li><a href="https://www.slideshare.net/TsuchiKazu/vuejs-x-spa-x-ssr-79213417">新規プロジェクトへの Vue.js x SPA x SSR の導入</a></li>
<li>Rails 5.1 API モード</li>
<li>sidekiq, sidekiq-scheduler</li>
<li>API 定義を活用した開発: スキーマファースト開発</li>
<li>OpenAPI : API 仕様記述フォーマット</li>
<li>他には API Blueprint や RAML など</li>
<li>Swagger 2.0 == OpenAPI 2.0</li>
<li>API 定義の具体的な話</li>
<li>チームレビュー</li>
<li>開発</li>
<li>スタブサーバー</li>
<li>自動で整合性チェックする gem</li>
<li><code>assert_schema_conform</code> の呼び出しを prepend で差し込んだ</li>
<li>API 定義と結合</li>
<li>質疑応答</li>
</ul>


<p>Vue.js の話はなかった。</p>

<h2>作らない技術</h2>

<ul>
<li><a href="https://esa-pages.io/p/sharing/3/posts/1117/1901213944ee86efdaea-slides.html#/">https://esa-pages.io/p/sharing/3/posts/1117/1901213944ee86efdaea-slides.html#/</a></li>
<li>作る is 負債</li>
<li>作ったとしても捨てる勇気</li>
<li>pplog</li>
<li>esa</li>
<li>コンセプト駆動開発</li>
<li><a href="https://stackshare.io/esa/pplog">https://stackshare.io/esa/pplog</a></li>
<li>pplog iOS</li>
<li>取り込んでも世界観に合わないと思ったら revert する</li>
<li><a href="http://ppworks.hatenablog.jp/entry/2014/11/02/024105">Webサービスはヨシヨシしないとスネる - pblog</a></li>
<li>あえてのつかいにくさ</li>
<li>テンプレート機能は CoC 的な感じでカテゴリを流用</li>
<li>labs とか spike ブランチとか</li>
<li>作らないときは本当に作らない</li>
<li>機能を流用して見せ方を変える</li>
<li>作っても捨てる勇気を持つ</li>
<li>作らないで、既存の Web サービスに乗る</li>
<li>コードを読む習慣化</li>
<li>影響を受けた本</li>
<li>最後に自己紹介</li>
<li>質疑応答はなし</li>
</ul>


<h2>「Railsでまだ消耗しているの？」 ─僕らがRailsで戦い続ける理由─</h2>

<ul>
<li><a href="https://speakerdeck.com/toshimaru/why-we-use-ruby-on-rails">https://speakerdeck.com/toshimaru/why-we-use-ruby-on-rails</a></li>
<li>Why Ruby?</li>
<li>Why Rails?</li>
<li>DRY : 普遍的</li>
<li>CoC : Ruby on Rails の本質</li>
<li>「〇〇の方が速いよ」</li>
<li>「開発の速さ」にも同じことが言えるか?</li>
<li>dev.to は Rails</li>
</ul>


<h2>Rails on Dockerとの戦い</h2>

<ul>
<li><a href="https://www.slideshare.net/ssuser21f9f1/rails-on-docker">https://www.slideshare.net/ssuser21f9f1/rails-on-docker</a></li>
<li>モチベーションはアプリケーション規格の統一化</li>
<li>何が easy かは人による</li>
<li>シェルスクリプトでラップした</li>
<li>docker for mac つらい</li>
<li>楽をしたいのが目的なので docker であることにはこだわらない</li>
<li>だいじなことは「できる」こと</li>
<li>CI 環境もデプロイ環境もクラウドがおすすめ</li>
<li>レビューしやすい : git worktree → docker-compose build, up</li>
</ul>


<h2>Railsを学び、現場に入るまで</h2>

<ul>
<li><a href="https://speakerdeck.com/mikaji/railswoxue-bi-xian-chang-niru-rumade-rails-developers-meetup-2017-lt">https://speakerdeck.com/mikaji/railswoxue-bi-xian-chang-niru-rumade-rails-developers-meetup-2017-lt</a></li>
<li>Rails 歴 = エンジニア歴</li>
<li>ぶつかった壁</li>
<li>コードレビューが通らない</li>
<li>ActiveRecord をうまく使えていない</li>
<li>どこに実装するかで悩む</li>
<li>ActiveRecord を継承しないモデルを作っても良い</li>
<li>サービスのレイヤーを増やすかどうかの話</li>
</ul>


<h2>Rancherで作るお手軽バッチ処理環境</h2>

<ul>
<li><a href="https://speakerdeck.com/morizyun/ranchertezuo-ruoshou-qing-hatutichu-li-huan-jing">https://speakerdeck.com/morizyun/ranchertezuo-ruoshou-qing-hatutichu-li-huan-jing</a></li>
<li>Rancher が便利という話</li>
<li>メリット1: コンテナ/ホスト監視</li>
<li>メリット2: CLI ツールがあってデプロイ楽</li>
<li>メリット3: アドオン的なものが便利</li>
<li>バッチ処理もできる</li>
<li>海外の格安 VPS が使える (Scaleway)</li>
</ul>


<h2>休憩</h2>

<h3>Rails で人狼を作ってみた</h3>

<ul>
<li>Action Cable, Vue.js</li>
<li><a href="https://github.com/fshin1988/jinro_rails">https://github.com/fshin1988/jinro_rails</a></li>
<li>デモ</li>
<li>他の実装の紹介</li>
<li>人狼BBS</li>
<li>月下人狼</li>
</ul>


<h2>Rails  SQL</h2>

<ul>
<li><a href="https://speakerdeck.com/jnchito/rails-sql-number-railsdm">https://speakerdeck.com/jnchito/rails-sql-number-railsdm</a></li>
<li><a href="https://qiita.com/jnchito/items/625bef4187e360d7f4bc">Rails❤️SQLのサンプルコード #railsdm - Qiita</a></li>
<li>ActiveRecord や Ransack で9割以上は対応できる</li>
<li>ちょっと凝った検索条件、複雑な集計処理、大量データの一括更新</li>
<li>例: キーワードの入力欄と検索対象のチェックボックス</li>
<li>Form モデル</li>
<li>SQL を組み立て (この程度の SQL なら AREL で組み立てた方が他の scope とかと組み合わせやすくて便利そうに感じた)</li>
<li>例: 請求履歴と入金履歴</li>
<li>SQL を ERB で書く</li>
<li>応用 (SQL を DRY にしたい問題) : 半額フラグ</li>
<li>実装方針 : 変数に入れて再利用する</li>
<li>例: 大量データの一括更新</li>
<li>最後に自己紹介</li>
</ul>


<h2>Rails  React</h2>

<ul>
<li>風呂グラマー, IT芸人</li>
<li>What&rsquo;s React</li>
<li>サーバーサイド脳に向いている</li>
<li>サーバーサイド生成</li>
<li>React は同じ流れがクライアント側になったものと考えれば良い</li>
<li>webpacker + react (Rails 5.1 から), react-rails (React 純正), react_on_rails</li>
<li>webpacker (webpack) は大変</li>
<li>browserify : 一つのファイルだけビルドするなら webpack より楽</li>
<li><a href="https://qiita.com/bitrinjani/items/b08876e0a2618745f54a">webpack時代の終わりとparcel時代のはじまり</a></li>
<li>環境を"混ぜるな危険"</li>
<li>node の環境は別に作ろう : Docker で分離</li>
<li>トレタの React</li>
<li>View からの呼び方</li>
<li>meta タグに controller と action を埋め込んでおいて自前でルーターのようなものを書いている</li>
<li>Form だけ React というのもありなのでは</li>
<li>react-jsonschema-form <a href="https://github.com/mozilla-services/react-jsonschema-form">https://github.com/mozilla-services/react-jsonschema-form</a></li>
<li>質疑応答</li>
</ul>


<h2>とある企業のモバイル対応</h2>

<ul>
<li><a href="https://speakerdeck.com/yasaichi/rails-developers-meetup-2017">https://speakerdeck.com/yasaichi/rails-developers-meetup-2017</a></li>
<li>pixta.jp</li>
<li>導入の背景 : Mobile First Indexing</li>
<li>同一 URL でモバイル対応を行う方法: A. レスポンシブデザイン, B. UA で表示内容振り分け</li>
<li>レスポンシブは特に何もする必要がないが、UA によって分ける場合は ActionPack Variants を使う</li>
<li>複数言語対応分の View がすでにあるのでレスポンシブを選択</li>
<li>方針: 段階的リリース</li>
<li>実装: ActionPack Variants で viewport を設定</li>
</ul>


<h2>2018年から始めるRubyによる深層学習入門</h2>

<ul>
<li>機械学習・深層学習</li>
<li>Python, C++, Lua が多い</li>
<li>Ruby ではどうか</li>
<li>いくつがあるが Red Chainer の話</li>
<li><a href="https://johnresig.com/blog/write-code-every-day/">https://johnresig.com/blog/write-code-every-day/</a></li>
</ul>


<h2>外傷的Elixir</h2>

<ul>
<li>Elixir の紹介</li>
</ul>


<h2>OSS雑メンテ</h2>

<ul>
<li><a href="https://speakerdeck.com/sue445/oss-zatsu-maintenance-number-railsdm">https://speakerdeck.com/sue445/oss-zatsu-maintenance-number-railsdm</a></li>
<li>CI がないと PR がたくさんくるようになったらつらい</li>
<li>定期ビルドや bundle update も依存 gem の更新の影響をみるためにした方が良い</li>
<li>CI のバッジをまとめて表示するサイトを作った</li>
<li>「全自動化」と「情報の集約」</li>
</ul>


<h2>休憩</h2>

<h3>社長が書いたクソコードたち</h3>

<ul>
<li><a href="https://speakerdeck.com/takeyuweb/she-chang-gashu-itakusokodotati">https://speakerdeck.com/takeyuweb/she-chang-gashu-itakusokodotati</a></li>
</ul>


<h3>サービスクラスの議論を蒸し返す</h3>

<ul>
<li><a href="https://microservices-meetup.connpass.com/">https://microservices-meetup.connpass.com/</a></li>
<li><a href="https://speakerdeck.com/joker1007/number-ginzarb">https://speakerdeck.com/joker1007/number-ginzarb</a></li>
<li><a href="https://techracho.bpsinc.jp/hachi8833/2017_10_16/46482">https://techracho.bpsinc.jp/hachi8833/2017_10_16/46482</a></li>
</ul>


<h3>Railsdm 2017 っぽいものを作ってみました</h3>

<ul>
<li>quine</li>
</ul>


<h2>マルチテナント・ウェブアプリケーションの実践</h2>

<ul>
<li>GraphQL はいいぞ</li>
<li>GraphiQL (グラフィクル) - The IDE</li>
<li>keyword: onk graphql</li>
<li>Kibela について</li>
<li>マルチテナント・ウェブアプリ (MTWA)</li>
<li>SaaS において1つのシステムで複数の組織のチームを同居させるウェブアプリケーション</li>
<li>BtoB の Web サービス ≒ MTWA</li>
<li>マルチテナンシーの共有レベル</li>
<li>Kibela は (3) DB の共有</li>
<li>PostgreSQL の schema でわけている</li>
<li>MTWA のアカウントモデル</li>
<li>サービス全体でアカウントを共有: GitHub, npmjs.org</li>
<li>テナントごとにアカウントを作成: Slack, G Suite, Kibela</li>
<li>GitHub 型は「人」にフォーカスしたアカウントモデル</li>
<li>「誰だかわからない問題」がある</li>
<li>Slack 型: こちらが標準的</li>
<li>複数のアカウント管理問題は SSO である程度解決できる</li>
<li>URL の名前空間: domain vs path</li>
<li>subdomain で分離</li>
<li>ストレージの名前空間</li>
<li>PostgreSQL は database - schema - table という階層構造</li>
<li>PostgreSQL の schema の設定: apartment gem を利用</li>
<li>schema が増えてきて migration に時間がかかるようになってきた → まだ放置</li>
<li>KVS, S3, 全文検索エンジン, etc. の名前空間切り替え問題</li>
<li>memcached for Rails Cache : Proc で渡す必要がある</li>
<li>Redis by redis-namespace : スレッドセーフじゃなかったので、モンキーパッチで対応</li>
<li>Elasticsearch</li>
<li>namespacing v1</li>
<li>当初 index を team ごとに作っていた</li>
<li>index の再構築 (≒ migration) に数時間かかるように…</li>
<li>namespacing v2</li>
<li>Rails の model ごとにただ1つの index を作成</li>
<li>filtered alias で参照</li>
<li>index 再構築は速くなったが、リクエストは重くなったので調査中</li>
<li>その他S3など</li>
<li>当初は subdomain (team name) で名前空間を作っていたが rename に対応するために team id に変えた</li>
<li>Analytics : schema が大量にある DB に分析クエリうてない問題</li>
<li>Testing</li>
<li>before/after でテナントの setup/teardown したら重かったので before(:suite)/afer(:suite) に</li>
<li>namespacing のテストは難しい</li>
<li>マルチスレッド×マルチテナントのテスト</li>
</ul>


<h2>JITコンパイラはいかにRailsを速くするか</h2>

<ul>
<li>自己紹介</li>
<li>YARV-MJIT</li>
<li>Rails が安定して動かなかったので直していた</li>
<li>CRuby 向けの JIT たち: RuJIT, Eclipse OMR, LLRB, MJIT, YARV-MJIT</li>
<li>MJIT と YARV-MJIT の話</li>
<li>で、Rails で動くんですか?</li>
<li>そもそも Ruby 本体のテストが全部は通らない</li>
<li>YARV-MJIT + Rails は JIT 無効だと動く</li>
<li>optcarrot でのベンチマーク結果</li>
<li>rails_ruby_bench : このベンチマークの実行が難しい</li>
<li>Ruby Grant 2017 をやっている</li>
<li>YARV-MJIT の最適化の仕組み</li>
<li>JIT コードの最適化戦略</li>
<li>戦略ごとの説明と Rails にきくかどうか</li>
<li>Rails での YARV-MJIT の使い方</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>2018/3/24,3/25 Rails Developers Meetup 2018</li>
<li>募集開始は 2018/2/5(月) 10:00-</li>
</ul>


<h2>感想</h2>

<p>Rails とは直接関係ない話もいくつかあった気がしますが、いろいろあって面白かったです。</p>

<p>YARV-MJIT の話は RubyKaigi 2017 では LT でちゃんと話せていなかったのが、今回聞けてよかったです。(わかったとは言ってない。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第12回 HosCon - GMO Hosting Conference - @大阪 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-12-05-hoscon.html"/>
    <updated>2017-12-05T22:47:20+09:00</updated>
    <id>http://blog.n-z.jp/blog/hoscon</id>
    <content type="html"><![CDATA[<p><a href="https://gmohoscon.connpass.com/event/71755/">第12回 HosCon - GMO Hosting Conference - @大阪</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>前にもきたことがあるグランフロント大阪タワーBでした。
後ろでこのはグッズの物販をしていました。</p>

<h2>マネージドクラウドUI/UXデザインの裏側にあるもの</h2>

<ul>
<li>発表資料は公開予定らしい</li>
<li><a href="https://mc.lolipop.jp/">https://mc.lolipop.jp/</a></li>
<li>minne とホスティング事業は提供している価値が違うのでユーザーの反応も違う</li>
<li>狩野モデル</li>
<li>UX ピラミッド</li>
<li>ユーザーがまだいない状態でのデザインで迷走</li>
<li>クローズドアルファ版で UI/UX デザインもテストできる</li>
<li>新しい体験について</li>
<li>未実装機能の UI も残すとフィードバックを受けやすい</li>
</ul>


<h2>GMOインターネットグループ総合コンタクトセンターへの道のり</h2>

<ul>
<li>下関市にコールセンター</li>
<li>従業員からもお客様からも不満が多かった</li>
<li>負のスパイラルになっていた</li>
<li>改善していって正のスパイラルになった</li>
<li>総合コンタクトセンターへ</li>
</ul>


<h2>小さな会社だから出来る、独自のユーザー視点！</h2>

<ul>
<li>独自のユーザー視点 = お客様に寄り添うこと</li>
<li>「こっそり」要望に応える</li>
<li>ドメイン名をミスしたお客様のドメインを弊社管理にして返金した→将来数千ドメインを管理してくれるようになった</li>
<li>良い情報発信をしていて xrea で容量が足りなくなったお客様の容量を増やした→将来上位プランを使ってもらえるようになった</li>
<li>お得意様に「大還元」</li>
<li>バリュードメインの15周年</li>
<li>アンバサダーマーケティング</li>
</ul>


<h2>プロダクトブランディングから考えるUX改善</h2>

<ul>
<li>価格競争対策から始まった</li>
<li>インナーブランディングが重要</li>
<li>サービスの UX 改善について</li>
<li>ALTUS での事例</li>
<li>NPS アンケート</li>
<li>良い点は残して悪い点は改善</li>
</ul>


<h2>キャラクターたちと共に歩むサービスづくり(仮)</h2>

<ul>
<li>今日のテーマ「ユーザーに愛されるサービスづくり」</li>
<li>中の人たちの「サービス愛」</li>
<li>Web サイトや管理画面やモバイルアプリには「このはモード」がある</li>
<li>twitter などでのコミュニケーションを重視している</li>
<li>障害時にはつらいが応援もされるようになった</li>
<li>CD が出るらしい</li>
</ul>


<h2>感想</h2>

<p>内容自体は面白かったのですが、今回はいつもとターゲット層が違う感じの内容だったので、今のところ直接は関係ないかなあという感じでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 129 回関西 Debian 勉強会 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-11-26-kansai-debian-meeting.html"/>
    <updated>2017-11-26T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20171126">第 129 回関西 Debian 勉強会</a> に参加しました。
一般ユーザー権限で LXC を使ってみるという内容でした。</p>

<!--more-->


<h2>会場</h2>

<p>いつもの福島区民センターでした。</p>

<h2>事前課題</h2>

<pre><code> lxc libvirt0 libpam-cgroup libpan-cgroup libpam-cgfs bridge-utils
</code></pre>

<p>とあったうち libpan-cgroup というのは間違いだったようです。</p>

<p><a href="https://wiki.debian.org/LXC">https://wiki.debian.org/LXC</a> 参照。</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Eucalyptus_%28software%29">Eucalyptus (software)</a> は開発が止まっている?</li>
<li><a href="https://ja.wikipedia.org/wiki/Xen_%28%E4%BB%AE%E6%83%B3%E5%8C%96%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%29#Hyper-V.E3.81.A8.E3.81.AE.E9.96.A2.E4.BF.82">Hyper-Vとの関係</a> によると Microsoft と XenSource は共同でやっているかも。</li>
</ul>


<h2>仮想化について</h2>

<p><a href="http://www.kernelvm.org/ima-made-no-matome/kaneru-vm-mian-qiang-hui-guan-xi-qino-can">カーネル/VM勉強会@関西 其の参 - カーネル／VM探検隊</a> から「BHyVeってなんや」を参考にしながら概要を解説</p>

<h2>Debian Stretch で LXC を使う</h2>

<ul>
<li>vagrant で <a href="https://app.vagrantup.com/bento/boxes/debian-9.2">bento/debian-9.2</a> の box を使って試しました</li>
<li>lxc-net を有効にするために <code>/etc/default/lxc</code> で <code>USE_LXC_BRIDGE="true"</code> に変更 (Debian Wiki は記述が古い (testing の時のパッケージが変更途中の内容?) のか <code>/etc/default/lxc-net</code> と書いてあるがそんなファイルはなかった)</li>
<li>lxc-net の変更を反映するために再起動した (<code>sudo systemctl start lxc-net</code> とかでも反映できるかもしれないが未確認)</li>
<li><code>lxc-checkconfig</code> でチェック (今の安定版は全部緑の enabled になるはず (昔はカーネルが対応していなくてダメなものがあったはず) )</li>
<li><code>sudo sh -c 'echo "kernel.unprivileged_userns_clone=1" &gt; /etc/sysctl.d/80-lxc-userns.conf'</code></li>
<li><code>sudo sysctl --system</code></li>
<li><p><code>kernel.unprivileged_userns_clone</code> の設定は Debian 固有のパッチの設定らしい? (1の方がバニラカーネルのデフォルト動作っぽい?)</p></li>
<li><p><code>sudo usermod --add-subuids 1258512-1324047 $USER</code> と <code>sudo usermod --add-subgids 1258512-1324047 $USER</code> はしなくても <code>/etc/subuid</code> と <code>/etc/subgid</code> に入っていた (<code>usermod</code> の引数は端の値の指定で <code>/etc/sub[ug]id</code> ファイルに書かれているのは開始 id と個数で別の意味なので注意)</p></li>
</ul>


<pre><code>vagrant@debian-9:~$ cat /etc/subuid
vagrant:100000:65536
vagrant@debian-9:~$ cat /etc/subgid
vagrant:100000:65536
</code></pre>

<ul>
<li><code>echo "$USER veth lxcbr0 10"| sudo tee -i /etc/lxc/lxc-usernet</code> で一般ユーザー権限で作成できるブリッジの数を制限するらしい (<code>lxcbr0</code> の部分はブリッジ名依存)</li>
<li><code>mkdir -p .config/lxc</code></li>
<li><code>.config/lxc/default.conf</code> を作成</li>
<li><code>id_map</code> の部分は subuid と subgid と同じ値にする必要あり</li>
<li><code>lxcbr0</code> の部分も <code>ip</code> コマンドなどで確認して合わせる必要あり</li>
</ul>


<pre><code>vagrant@debian-9:~$ cat .config/lxc/default.conf
lxc.include = /etc/lxc/default.conf
# Subuids and subgids mapping
lxc.id_map = u 0 100000 65536
lxc.id_map = g 0 100000 65536
# "Secure" mounting
lxc.mount.auto = proc:mixed sys:ro cgroup:mixed

# Network configuration
lxc.network.type = veth
lxc.network.link = lxcbr0
lxc.network.flags = up
#lxc.network.hwaddr = 00:16:3e:xx:xx:xx
</code></pre>

<ul>
<li>hwaddr は <a href="https://ja.wikipedia.org/wiki/MAC%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9">MACアドレス</a> 参照</li>
<li>コメントアウトしてみると自動設定になった</li>
</ul>


<h2>lxc-create</h2>

<p>特権だと <code>/var/lib/lxc</code> を使われるが、一般ユーザー権限だと普通は書き込めないのでディレクトリ指定をする必要あり (絶対パスじゃないとダメらしい)</p>

<pre><code>vagrant@debian-9:~$ lxc-create -n stretch -t download -P ~/work/lxc
Setting up the GPG keyring
Downloading the image index

---
DIST    RELEASE ARCH    VARIANT BUILD
---
(略)
debian  stretch amd64   default 20171124_22:42
(略)
---
Distribution: debian
Release: stretch
Architecture: amd64

Downloading the image index
Downloading the rootfs
Downloading the metadata
The image cache is now ready
Unpacking the rootfs

---
You just created a Debian container (release=stretch, arch=amd64, variant=default)

To enable sshd, run: apt-get install openssh-server

For security reason, container images ship without user accounts
and without a root password.

Use lxc-attach or chroot directly into the rootfs to set a root password
or create user accounts.
vagrant@debian-9:~$
</code></pre>

<h2>起動</h2>

<pre><code>vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
NAME    STATE   AUTOSTART GROUPS IPV4 IPV6
stretch STOPPED 0         -      -    -
vagrant@debian-9:~$ lxc-start -d -n stretch -P ~/work/lxc
vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
NAME    STATE   AUTOSTART GROUPS IPV4 IPV6
stretch RUNNING 0         -      -    -
vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
NAME    STATE   AUTOSTART GROUPS IPV4       IPV6
stretch RUNNING 0         -      10.0.3.146 -
</code></pre>

<h2>接続して動作確認</h2>

<pre><code>vagrant@debian-9:~$ lxc-attach -n stretch
You lack access to /home/vagrant/.local/share/lxc
vagrant@debian-9:~$ lxc-attach -n stretch -P ~/work/lxc
root@stretch:/# apt update
...
1 package can be upgraded. Run 'apt list --upgradable' to see it.
root@stretch:/# ls -al /var/lib/apt/lists/
total 65872
drwxr-xr-x 3 root root     4096 Nov 26 06:32 .
drwxr-xr-x 5 root root     4096 Nov 24 22:47 ..
-rw-r--r-- 1 root root 38923281 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_binary-amd64_Packages
-rw-r--r-- 1 root root 26443489 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_i18n_Translation-en
-rw-r--r-- 1 root root   117945 Oct  7 09:46 deb.debian.org_debian_dists_stretch_Release
-rw-r--r-- 1 root root     2479 Oct  7 09:52 deb.debian.org_debian_dists_stretch_Release.gpg
-rw-r----- 1 root root        0 Nov 26 06:32 lock
drwx------ 2 _apt root     4096 Nov 26 06:32 partial
-rw-r--r-- 1 root root    62959 Nov 25 10:01 security.debian.org_dists_stretch_updates_InRelease
-rw-r--r-- 1 root root  1257072 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_binary-amd64_Packages
-rw-r--r-- 1 root root   624275 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_i18n_Translation-en
root@stretch:/# exit
vagrant@debian-9:~$ ls -al ~/work/lxc/stretch/rootfs/var/lib/apt/lists/
total 65872
drwxr-xr-x 3 100000 100000     4096 Nov 26 06:32 .
drwxr-xr-x 5 100000 100000     4096 Nov 24 22:47 ..
-rw-r--r-- 1 100000 100000 38923281 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_binary-amd64_Packages
-rw-r--r-- 1 100000 100000 26443489 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_i18n_Translation-en
-rw-r--r-- 1 100000 100000   117945 Oct  7 09:46 deb.debian.org_debian_dists_stretch_Release
-rw-r--r-- 1 100000 100000     2479 Oct  7 09:52 deb.debian.org_debian_dists_stretch_Release.gpg
-rw-r----- 1 100000 100000        0 Nov 26 06:32 lock
drwx------ 2 100104 100000     4096 Nov 26 06:32 partial
-rw-r--r-- 1 100000 100000    62959 Nov 25 10:01 security.debian.org_dists_stretch_updates_InRelease
-rw-r--r-- 1 100000 100000  1257072 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_binary-amd64_Packages
-rw-r--r-- 1 100000 100000   624275 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_i18n_Translation-en
</code></pre>

<h2>NAT</h2>

<p><a href="https://wiki.debian.org/LXC/SimpleBridge">https://wiki.debian.org/LXC/SimpleBridge</a> の</p>

<pre><code>up iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
</code></pre>

<p>は</p>

<pre><code>down iptables -t nat -D POSTROUTING -o wlan0 -j MASQUERADE
</code></pre>

<p>もないと up down を繰り返すと増えそう。</p>

<p>lxc-net で試した環境は自動で NAT 設定が入っていた。</p>

<pre><code>vagrant@debian-9:~$ sudo iptables -nL -t nat
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination

Chain INPUT (policy ACCEPT)
target     prot opt source               destination

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination

Chain POSTROUTING (policy ACCEPT)
target     prot opt source               destination
MASQUERADE  all  --  10.0.3.0/24         !10.0.3.0/24
</code></pre>

<h2>停止</h2>

<p>資料にはなかったけど、個人的に停止と削除も試しました。</p>

<pre><code>vagrant@debian-9:~$ lxc-stop -n stretch -P ~/work/lxc
vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
NAME    STATE   AUTOSTART GROUPS IPV4 IPV6
stretch STOPPED 0         -      -    -
</code></pre>

<h2>削除</h2>

<pre><code>vagrant@debian-9:~$ lxc-destroy -n stretch -P ~/work/lxc
Destroyed container stretch
vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
vagrant@debian-9:~$ ls work/lxc/
lxc-monitord.log
</code></pre>

<h2>休憩中の話</h2>

<ul>
<li><a href="https://www.ubuntu.com/server/maas">https://www.ubuntu.com/server/maas</a></li>
</ul>


<h2>ネットワーク図</h2>

<ul>
<li>ネットワーク図を書いて議論</li>
<li><a href="https://twitter.com/YukiharuYABUKI/status/934688472845058054">https://twitter.com/YukiharuYABUKI/status/934688472845058054</a></li>
</ul>


<h2>次回</h2>

<ul>
<li>2017/12/24(日)</li>
</ul>


<h2>まとめ</h2>

<p>発表者の佐々木さんが病欠で、時間に余裕があったので、資料や Wiki の記述や不足点などをツッコミを入れたりするような感じになっていました。
その後は、ネットワーク図を書いて色々と議論をして、少し早めに終わりました。</p>
]]></content>
  </entry>
  
</feed>
