<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: event | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/event/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-12-05T23:25:49+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第12回 HosCon - GMO Hosting Conference - @大阪 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-12-05-hoscon.html"/>
    <updated>2017-12-05T22:47:20+09:00</updated>
    <id>http://blog.n-z.jp/blog/hoscon</id>
    <content type="html"><![CDATA[<p><a href="https://gmohoscon.connpass.com/event/71755/">第12回 HosCon - GMO Hosting Conference - @大阪</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>前にもきたことがあるグランフロント大阪タワーBでした。
後ろでこのはグッズの物販をしていました。</p>

<h2>マネージドクラウドUI/UXデザインの裏側にあるもの</h2>

<ul>
<li>発表資料は公開予定らしい</li>
<li><a href="https://mc.lolipop.jp/">https://mc.lolipop.jp/</a></li>
<li>minne とホスティング事業は提供している価値が違うのでユーザーの反応も違う</li>
<li>狩野モデル</li>
<li>UX ピラミッド</li>
<li>ユーザーがまだいない状態でのデザインで迷走</li>
<li>クローズドアルファ版で UI/UX デザインもテストできる</li>
<li>新しい体験について</li>
<li>未実装機能の UI も残すとフィードバックを受けやすい</li>
</ul>


<h2>GMOインターネットグループ総合コンタクトセンターへの道のり</h2>

<ul>
<li>下関市にコールセンター</li>
<li>従業員からもお客様からも不満が多かった</li>
<li>負のスパイラルになっていた</li>
<li>改善していって正のスパイラルになった</li>
<li>総合コンタクトセンターへ</li>
</ul>


<h2>小さな会社だから出来る、独自のユーザー視点！</h2>

<ul>
<li>独自のユーザー視点 = お客様に寄り添うこと</li>
<li>「こっそり」要望に応える</li>
<li>ドメイン名をミスしたお客様のドメインを弊社管理にして返金した→将来数千ドメインを管理してくれるようになった</li>
<li>良い情報発信をしていて xrea で容量が足りなくなったお客様の容量を増やした→将来上位プランを使ってもらえるようになった</li>
<li>お得意様に「大還元」</li>
<li>バリュードメインの15周年</li>
<li>アンバサダーマーケティング</li>
</ul>


<h2>プロダクトブランディングから考えるUX改善</h2>

<ul>
<li>価格競争対策から始まった</li>
<li>インナーブランディングが重要</li>
<li>サービスの UX 改善について</li>
<li>ALTUS での事例</li>
<li>NPS アンケート</li>
<li>良い点は残して悪い点は改善</li>
</ul>


<h2>キャラクターたちと共に歩むサービスづくり(仮)</h2>

<ul>
<li>今日のテーマ「ユーザーに愛されるサービスづくり」</li>
<li>中の人たちの「サービス愛」</li>
<li>Web サイトや管理画面やモバイルアプリには「このはモード」がある</li>
<li>twitter などでのコミュニケーションを重視している</li>
<li>障害時にはつらいが応援もされるようになった</li>
<li>CD が出るらしい</li>
</ul>


<h2>感想</h2>

<p>内容自体は面白かったのですが、今回はいつもとターゲット層が違う感じの内容だったので、今のところ直接は関係ないかなあという感じでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 129 回関西 Debian 勉強会 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-11-26-kansai-debian-meeting.html"/>
    <updated>2017-11-26T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20171126">第 129 回関西 Debian 勉強会</a> に参加しました。
一般ユーザー権限で LXC を使ってみるという内容でした。</p>

<!--more-->


<h2>会場</h2>

<p>いつもの福島区民センターでした。</p>

<h2>事前課題</h2>

<pre><code> lxc libvirt0 libpam-cgroup libpan-cgroup libpam-cgfs bridge-utils
</code></pre>

<p>とあったうち libpan-cgroup というのは間違いだったようです。</p>

<p><a href="https://wiki.debian.org/LXC">https://wiki.debian.org/LXC</a> 参照。</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Eucalyptus_%28software%29">Eucalyptus (software)</a> は開発が止まっている?</li>
<li><a href="https://ja.wikipedia.org/wiki/Xen_%28%E4%BB%AE%E6%83%B3%E5%8C%96%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%29#Hyper-V.E3.81.A8.E3.81.AE.E9.96.A2.E4.BF.82">Hyper-Vとの関係</a> によると Microsoft と XenSource は共同でやっているかも。</li>
</ul>


<h2>仮想化について</h2>

<p><a href="http://www.kernelvm.org/ima-made-no-matome/kaneru-vm-mian-qiang-hui-guan-xi-qino-can">カーネル/VM勉強会@関西 其の参 - カーネル／VM探検隊</a> から「BHyVeってなんや」を参考にしながら概要を解説</p>

<h2>Debian Stretch で LXC を使う</h2>

<ul>
<li>vagrant で <a href="https://app.vagrantup.com/bento/boxes/debian-9.2">bento/debian-9.2</a> の box を使って試しました</li>
<li>lxc-net を有効にするために <code>/etc/default/lxc</code> で <code>USE_LXC_BRIDGE="true"</code> に変更 (Debian Wiki は記述が古い (testing の時のパッケージが変更途中の内容?) のか <code>/etc/default/lxc-net</code> と書いてあるがそんなファイルはなかった)</li>
<li>lxc-net の変更を反映するために再起動した (<code>sudo systemctl start lxc-net</code> とかでも反映できるかもしれないが未確認)</li>
<li><code>lxc-checkconfig</code> でチェック (今の安定版は全部緑の enabled になるはず (昔はカーネルが対応していなくてダメなものがあったはず) )</li>
<li><code>sudo sh -c 'echo "kernel.unprivileged_userns_clone=1" &gt; /etc/sysctl.d/80-lxc-userns.conf'</code></li>
<li><code>sudo sysctl --system</code></li>
<li><p><code>kernel.unprivileged_userns_clone</code> の設定は Debian 固有のパッチの設定らしい? (1の方がバニラカーネルのデフォルト動作っぽい?)</p></li>
<li><p><code>sudo usermod --add-subuids 1258512-1324047 $USER</code> と <code>sudo usermod --add-subgids 1258512-1324047 $USER</code> はしなくても <code>/etc/subuid</code> と <code>/etc/subgid</code> に入っていた (<code>usermod</code> の引数は端の値の指定で <code>/etc/sub[ug]id</code> ファイルに書かれているのは開始 id と個数で別の意味なので注意)</p></li>
</ul>


<pre><code>vagrant@debian-9:~$ cat /etc/subuid
vagrant:100000:65536
vagrant@debian-9:~$ cat /etc/subgid
vagrant:100000:65536
</code></pre>

<ul>
<li><code>echo "$USER veth lxcbr0 10"| sudo tee -i /etc/lxc/lxc-usernet</code> で一般ユーザー権限で作成できるブリッジの数を制限するらしい (<code>lxcbr0</code> の部分はブリッジ名依存)</li>
<li><code>mkdir -p .config/lxc</code></li>
<li><code>.config/lxc/default.conf</code> を作成</li>
<li><code>id_map</code> の部分は subuid と subgid と同じ値にする必要あり</li>
<li><code>lxcbr0</code> の部分も <code>ip</code> コマンドなどで確認して合わせる必要あり</li>
</ul>


<pre><code>vagrant@debian-9:~$ cat .config/lxc/default.conf
lxc.include = /etc/lxc/default.conf
# Subuids and subgids mapping
lxc.id_map = u 0 100000 65536
lxc.id_map = g 0 100000 65536
# "Secure" mounting
lxc.mount.auto = proc:mixed sys:ro cgroup:mixed

# Network configuration
lxc.network.type = veth
lxc.network.link = lxcbr0
lxc.network.flags = up
#lxc.network.hwaddr = 00:16:3e:xx:xx:xx
</code></pre>

<ul>
<li>hwaddr は <a href="https://ja.wikipedia.org/wiki/MAC%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9">MACアドレス</a> 参照</li>
<li>コメントアウトしてみると自動設定になった</li>
</ul>


<h2>lxc-create</h2>

<p>特権だと <code>/var/lib/lxc</code> を使われるが、一般ユーザー権限だと普通は書き込めないのでディレクトリ指定をする必要あり (絶対パスじゃないとダメらしい)</p>

<pre><code>vagrant@debian-9:~$ lxc-create -n stretch -t download -P ~/work/lxc
Setting up the GPG keyring
Downloading the image index

---
DIST    RELEASE ARCH    VARIANT BUILD
---
(略)
debian  stretch amd64   default 20171124_22:42
(略)
---
Distribution: debian
Release: stretch
Architecture: amd64

Downloading the image index
Downloading the rootfs
Downloading the metadata
The image cache is now ready
Unpacking the rootfs

---
You just created a Debian container (release=stretch, arch=amd64, variant=default)

To enable sshd, run: apt-get install openssh-server

For security reason, container images ship without user accounts
and without a root password.

Use lxc-attach or chroot directly into the rootfs to set a root password
or create user accounts.
vagrant@debian-9:~$
</code></pre>

<h2>起動</h2>

<pre><code>vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
NAME    STATE   AUTOSTART GROUPS IPV4 IPV6
stretch STOPPED 0         -      -    -
vagrant@debian-9:~$ lxc-start -d -n stretch -P ~/work/lxc
vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
NAME    STATE   AUTOSTART GROUPS IPV4 IPV6
stretch RUNNING 0         -      -    -
vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
NAME    STATE   AUTOSTART GROUPS IPV4       IPV6
stretch RUNNING 0         -      10.0.3.146 -
</code></pre>

<h2>接続して動作確認</h2>

<pre><code>vagrant@debian-9:~$ lxc-attach -n stretch
You lack access to /home/vagrant/.local/share/lxc
vagrant@debian-9:~$ lxc-attach -n stretch -P ~/work/lxc
root@stretch:/# apt update
...
1 package can be upgraded. Run 'apt list --upgradable' to see it.
root@stretch:/# ls -al /var/lib/apt/lists/
total 65872
drwxr-xr-x 3 root root     4096 Nov 26 06:32 .
drwxr-xr-x 5 root root     4096 Nov 24 22:47 ..
-rw-r--r-- 1 root root 38923281 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_binary-amd64_Packages
-rw-r--r-- 1 root root 26443489 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_i18n_Translation-en
-rw-r--r-- 1 root root   117945 Oct  7 09:46 deb.debian.org_debian_dists_stretch_Release
-rw-r--r-- 1 root root     2479 Oct  7 09:52 deb.debian.org_debian_dists_stretch_Release.gpg
-rw-r----- 1 root root        0 Nov 26 06:32 lock
drwx------ 2 _apt root     4096 Nov 26 06:32 partial
-rw-r--r-- 1 root root    62959 Nov 25 10:01 security.debian.org_dists_stretch_updates_InRelease
-rw-r--r-- 1 root root  1257072 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_binary-amd64_Packages
-rw-r--r-- 1 root root   624275 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_i18n_Translation-en
root@stretch:/# exit
vagrant@debian-9:~$ ls -al ~/work/lxc/stretch/rootfs/var/lib/apt/lists/
total 65872
drwxr-xr-x 3 100000 100000     4096 Nov 26 06:32 .
drwxr-xr-x 5 100000 100000     4096 Nov 24 22:47 ..
-rw-r--r-- 1 100000 100000 38923281 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_binary-amd64_Packages
-rw-r--r-- 1 100000 100000 26443489 Oct  7 09:04 deb.debian.org_debian_dists_stretch_main_i18n_Translation-en
-rw-r--r-- 1 100000 100000   117945 Oct  7 09:46 deb.debian.org_debian_dists_stretch_Release
-rw-r--r-- 1 100000 100000     2479 Oct  7 09:52 deb.debian.org_debian_dists_stretch_Release.gpg
-rw-r----- 1 100000 100000        0 Nov 26 06:32 lock
drwx------ 2 100104 100000     4096 Nov 26 06:32 partial
-rw-r--r-- 1 100000 100000    62959 Nov 25 10:01 security.debian.org_dists_stretch_updates_InRelease
-rw-r--r-- 1 100000 100000  1257072 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_binary-amd64_Packages
-rw-r--r-- 1 100000 100000   624275 Nov 21 22:08 security.debian.org_dists_stretch_updates_main_i18n_Translation-en
</code></pre>

<h2>NAT</h2>

<p><a href="https://wiki.debian.org/LXC/SimpleBridge">https://wiki.debian.org/LXC/SimpleBridge</a> の</p>

<pre><code>up iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
</code></pre>

<p>は</p>

<pre><code>down iptables -t nat -D POSTROUTING -o wlan0 -j MASQUERADE
</code></pre>

<p>もないと up down を繰り返すと増えそう。</p>

<p>lxc-net で試した環境は自動で NAT 設定が入っていた。</p>

<pre><code>vagrant@debian-9:~$ sudo iptables -nL -t nat
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination

Chain INPUT (policy ACCEPT)
target     prot opt source               destination

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination

Chain POSTROUTING (policy ACCEPT)
target     prot opt source               destination
MASQUERADE  all  --  10.0.3.0/24         !10.0.3.0/24
</code></pre>

<h2>停止</h2>

<p>資料にはなかったけど、個人的に停止と削除も試しました。</p>

<pre><code>vagrant@debian-9:~$ lxc-stop -n stretch -P ~/work/lxc
vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
NAME    STATE   AUTOSTART GROUPS IPV4 IPV6
stretch STOPPED 0         -      -    -
</code></pre>

<h2>削除</h2>

<pre><code>vagrant@debian-9:~$ lxc-destroy -n stretch -P ~/work/lxc
Destroyed container stretch
vagrant@debian-9:~$ lxc-ls --fancy -P ~/work/lxc
vagrant@debian-9:~$ ls work/lxc/
lxc-monitord.log
</code></pre>

<h2>休憩中の話</h2>

<ul>
<li><a href="https://www.ubuntu.com/server/maas">https://www.ubuntu.com/server/maas</a></li>
</ul>


<h2>ネットワーク図</h2>

<ul>
<li>ネットワーク図を書いて議論</li>
<li><a href="https://twitter.com/YukiharuYABUKI/status/934688472845058054">https://twitter.com/YukiharuYABUKI/status/934688472845058054</a></li>
</ul>


<h2>次回</h2>

<ul>
<li>2017/12/24(日)</li>
</ul>


<h2>まとめ</h2>

<p>発表者の佐々木さんが病欠で、時間に余裕があったので、資料や Wiki の記述や不足点などをツッコミを入れたりするような感じになっていました。
その後は、ネットワーク図を書いて色々と議論をして、少し早めに終わりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ カーネル/VM探検隊@関西 8回目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-11-18-kernelvm.html"/>
    <updated>2017-11-18T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kernelvm</id>
    <content type="html"><![CDATA[<p><a href="https://connpass.com/event/68374/">カーネル/VM探検隊@関西 8回目</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>久しぶりに京都大学にきました。
大統一Debian勉強会で来たのは覚えているのですが、それ以降来たことがあったかどうか思い出せませんでした。</p>

<h2>uwabami さんによる会場説明</h2>

<h2>rui314 さんによる場つなぎ</h2>

<p>配信の準備ができるまで rui314 さんの自己紹介などの話がありました。</p>

<ul>
<li>Accidentally Turing-Complete</li>
<li>elvm の話</li>
<li>constexpr で云々</li>
<li>Life Game 上で C コンパイラとかやってる人はまだいなさそう</li>
<li>Go 言語の話</li>
<li>Go opinionated な言語</li>
<li>template が欲しいという人向けの回答のテンプレートがある</li>
<li>language spec がある</li>
<li>ライブラリを読んでいくと勉強になる</li>
<li>(C++ の std のアルゴリズムとか読んでいくと勉強になる)</li>
<li>たまにバグを見つけてパッチを投げるとコミット権がもらえる</li>
<li>tar の生成とかを読んだりとか</li>
<li>ディレクトリ区切りは内部では <code>/</code> で扱って Windows では入出力の時に置き換えでも問題ない</li>
<li><p>文字列も内部は utf-8 というのも良い</p></li>
<li><p>質問受け付け</p></li>
<li>Google に入ったきっかけは?</li>
<li>メールが来て渋谷のセルリアンタワーにいった</li>
<li>東京も Chrome などのプロジェクトをやっている</li>
<li><p>Tensorflow とか東京にプロジェクトがないものはできないなどの理由で本社へ</p></li>
<li><p>最近スタンフォードの大学院にいっている</p></li>
<li>オンラインでフルタイムではなくできる</li>
<li>SCPD</li>
<li>ドラゴンブック: 龍がコンパイラの複雑さを表している</li>
<li><!-- 1個の授業が70万円ぐらいだが Google が補助してくれるらしい -->毎週の宿題が難しい (授業を聴いていても難しい)</li>
</ul>


<p>13:44 で準備が完了したということで突然終了。</p>

<h2>CODE BLUE CTF 2017で出した問題の話</h2>

<ul>
<li>CODE BLUE : 世界トップクラスのセキュリティ専門家による日本発の情報セキュリティ国際会議</li>
<li><p>CODE BLUE CTF 2017 : CODE BLUE で開かれたコンテストのひとつ</p></li>
<li><p>Simple Memo Pad (pwn)</p></li>
<li>CTF における pwn (pwnable) とは : 脆弱性でメモリ書き換えをして不正な動作をさせる</li>
<li>realworld での pwn の応用例 : EthernalBlue (WannaCry で使われた), BlueBorne, Jailbreak</li>
<li>どこを書き換えるとプログラムを乗っ取れる? : 関数ポインタ関連</li>
<li><code>puts@plt</code> という仕組みの解説</li>
<li>GOT overwrite</li>
<li>データ領域に置いたコードに向ける</li>
<li>system に向ける</li>
<li>これを阻むセキュリティ機構の数々</li>
<li>NX bit (No eXecute)</li>
<li>RELRO (RELocation Read-Only) : No RELRO, Partial RELRO, Full RELRO</li>
<li>ASLR, PIE</li>
<li><p>ここからさらに掘り下げる</p></li>
<li><p>Simple Memo Pad (pwn)</p></li>
<li>脆弱性: 1回だけ Buffer overflow でリンクリストを壊せる</li>
<li>脆弱性を使ってできること: 任意の場所にメモのアドレスを1回だけ書き込める, メモの内容は攻撃者がコントロール可能</li>
<li>セキュリティ機構の有無 (ツールを使って確認できる): No RELRO, NX Enabled, ASLR Enabled, No PIE</li>
<li>GOT overwrite : NX Enabled なのでメモに置いた機械語が実行できない → NG</li>
<li>glibc 内部にある関数ポインタの配列へのポインタを上書き: ASLR で無理 → NG</li>
<li>Partial RELRO, Full RELRO の問題が多いのに No RELRO なのが不自然</li>
<li>No RELRO と Partial RELRO の違いのうち <code>.dynamic</code> セクションに注目</li>
<li>偽の文字列テーブル strtab (.dynstr) を参照するように <code>.dynamic</code> セクションを書き換え</li>
<li><p><code>strcmp(user_input, "y")</code> の代わりに <code>system(user_input)</code> が呼ばれるようにできた</p></li>
<li><p>fs hell (rev)</p></li>
<li><code>printf("%d", 0);</code></li>
<li><code>printf("%3$d", 2, 1, 0);</code></li>
<li><code>printf("%3$5d", 2, 1, 0);</code></li>
<li><code>printf("%3$*$4d", 2, 1, 0, 5);</code></li>
<li><code>printf("%3$*$4d%5$n", 2, 1, 0, 5, &amp;a);</code></li>
<li><code>printf("%4$.*1$d%4$.*2$d%3$n", 2, 3, &amp;a, 0);</code></li>
<li>format string で足し算ができる!</li>
<li><code>./fs_hell program.txt input.txt</code> の <code>fs_hell</code> と <code>program.txt</code> を解析して指定した出力が出る <code>input.txt</code> を作る問題</li>
<li><code>program.txt</code> は format string が並んだファイル</li>
<li><code>fs_hell</code> は snprintf で処理していく</li>
<li><p><code>fs_hell</code> でできること: 足し算, 引き算, 左シフト, 右シフト, ジャンプ, 条件分岐</p></li>
<li><p>質疑応答</p></li>
<li>他の問題についての質問</li>
<li>作問のアイデアを思いつくタイミング</li>
</ul>


<h2>Linux + 9p = process migration</h2>

<ul>
<li>この発表ではネットワーク越しにプロセスを移動させる話</li>
<li>計算資源の共有</li>
<li>Plan 9</li>
<li>9P : ファイルシステム共有のためのネットワークプロトコル</li>
<li><a href="https://github.com/pfpacket/rust-9p">https://github.com/pfpacket/rust-9p</a></li>
<li>9P = FUSE + network transparency</li>
<li>CRIU : プロセスをダンプして保存して復帰するもの</li>
<li>問題点: open file, network stack (state), socket, 周辺機器の状態, 通信先のプロセスなど</li>
<li>同じファイルパスがあればシーク位置なども含めて復帰できる</li>
<li>すべてファイルで表現すれば解決</li>
<li>デモ動画は準備する時間がなかったのでなし</li>
<li>質疑応答も質問なしで終了</li>
</ul>


<h2>ニューラルFM音源</h2>

<ul>
<li><p>発表資料: <a href="https://speakerdeck.com/fadis/niyurarufmyin-yuan">ニューラルFM音源</a></p></li>
<li><p>FM 音源の説明</p></li>
<li>含まれている倍音が変わると別の楽器の音に聞こえる</li>
<li>周波数変調 (FM)</li>
<li>(式の説明とかゆっくりみないと理解できなさそうだった)</li>
<li>音からパラメーターを決めるのが難しい</li>
<li>前に発表したネタ 遺伝的FM音源 は時間がかる</li>
<li>いろいろ反響があった中の深層学習を使えば良いのでは?というのに注目</li>
<li>ニューラルネットワークの説明</li>
<li>音のサンプル: 最初の例は違うと言われて聞くと違うっぽいとわかるぐらいの差、次の例は明らかに違う感じ</li>
<li>位相の差はほぼ知覚できないので無視する</li>
<li>ほとんどの部分はノイズでちゃんとした音がでる範囲は限られる</li>
<li>ノイズソムリエを作ってもしょうがないので試す範囲を絞り込む</li>
<li>深層学習</li>
<li>シグモイド関数 → ReLU</li>
<li>ResNet</li>
<li>1台のマシンにのる限りのせても長すぎることはないんじゃないかなと予想</li>
<li>ResNet-36 の理由は GPU の VRAM の容量が 8 GB で ResNet-50 にはメモリ不足だったから</li>
<li>遺伝的アルゴリズムに比べて結果はよくなかったが、学習済みなので、入力からパラメーターが出てくるのは高速</li>
</ul>


<h2>xHCI（USB3.0 HC）デバドラを自作してみよう</h2>

<ul>
<li>USB のデバイスドライバーの話は新規性はない?</li>
<li>会場アンケート: 書いたことがある人は少なかった</li>
<li>Host Controller の話</li>
<li>USB 2.0 の頃は Companion Host Controller で USB 1.1 と互換性があった</li>
<li>xHCI は USB 1.1 や 2.0 の HC のデバドラがあっても無駄</li>
<li><a href="https://github.com/liva/xhci_uio">https://github.com/liva/xhci_uio</a></li>
<li>なぜ作り始めたか</li>
<li>自作 OS でネットワークと USB のサポートが必要</li>
<li>1,2週間でできると思っていたら3ヶ月かかった</li>
<li>ユーザー空間でデバドラ開発</li>
<li>メリット: やらかしても SEGV するだけですぐに開発に戻れる, いちいち再起動せずにビルド即テスト可能, libc 使い放題</li>
<li>EHCI と xHCI は仕組みが大幅に変わっていた</li>
<li>UHCI はデバドラがパケット転送をスケジューリング</li>
<li>xHCI は全ての通信が Ring というリングバッファ的な何かで行われる</li>
<li>USB デバイスごとに slot を確保</li>
<li>Ring 自体はリングバッファではなく Link TRB を使ってリンクドリストを作る (最後の要素が別のリストへのリンクという特殊なものになっている)</li>
<li>HHKB (一部機種) はハブだったので、ハブのデバドラも必要になった</li>
<li>いろいろあったけど、動いた <a href="https://github.com/liva/xhci_uio">https://github.com/liva/xhci_uio</a></li>
<li>マイクがミュートされていた</li>
</ul>


<p>発表資料: <a href="https://drive.google.com/file/d/1TyEIFXcXl6kHvjXVVct-6BtYPykUdege/view">https://drive.google.com/file/d/1TyEIFXcXl6kHvjXVVct-6BtYPykUdege/view</a></p>

<h2>Portable Driver Architecture (PDA) でユーザ空間PCIデバイスドライバ</h2>

<ul>
<li>uio, DPDK, SPDK : ユーザー空間が流行り?</li>
<li>Portable Driver Architecture (PDA) : ユーザー空間で PCI デバイスのドライバを書くための仕組み</li>
<li>ユーザー空間デバイスドライバ: カーネル最小化, 安全性, 移植性, 高性能</li>
<li>PDA の主な目標は 移植性, 高性能</li>
<li>必要な機能: 割り込みハンドリング, デバイスの管理, デバイスの入出力</li>
<li>PDA ができた経緯</li>
<li>PDA の利用例</li>
<li>PDA の性能</li>
<li>PDA vs DPDK</li>
<li>DPDK は NIC のパケット処理向けなので、そういう用途向け便利機能がある (Linux (<code>uio_pci_generic</code>), FreeBSD)</li>
<li>PDA は汎用で Linux 向け (<code>uio_pci_dma</code>)</li>
<li><code>uio_pci_generic</code> : 126 行 (コメント含む)</li>
<li><code>uio_pci_dma</code> : 1328 行 (コメント含む)</li>
<li>なぜ長いのか : sysfs に独自の I/F を提供, メモリ管理がらみ</li>
<li>DMA のためのメモリ管理 : スワップアウトして欲しくない, なるべく連続した十分な大きさの物理アドレス空間を確保したい, NUMA 環境下ではソケットの境界を超えてほしくない</li>
<li>単に malloc しただけではうまくいかない</li>
<li>PDA のメモリ管理戦略 : カーネルモジュールが DMA バッファを用意するなど</li>
<li>wrap-mapping : カーネルで確保したリングバッファを2度繰り返してメモリ空間にマップ</li>
<li>upstream のものは最近のカーネルでは動かなかった <a href="https://github.com/kdiff3/pda">https://github.com/kdiff3/pda</a></li>
<li><p>CERN ALICE (動いた) <a href="https://github.com/AliceO2Group/pda">https://github.com/AliceO2Group/pda</a> や FAIR CBM <a href="https://github.com/cbm-fles/pda">https://github.com/cbm-fles/pda</a> のは最近でもメンテナンスされている</p></li>
<li><p>質疑応答</p></li>
<li><code>uio_pci_dma</code> をメインラインに入れようという動きはない</li>
<li>fork も徐々にコードが離れていってしまっているかも</li>
</ul>


<h2>VMM食べ比べ / KVM vs AHF vs HAXM</h2>

<ul>
<li>未踏2016 で Noah という Mac で ELF を動かすものを作った時に VMM を使った</li>
<li>Virtual Machine Monitor</li>
<li>Libisolation : Noah を応用したサンドボックス</li>
<li>Noah on Windows</li>
<li>OS が全部違う</li>
<li>qemu-kvm ではなくカーネルモジュール部分の話</li>
<li>参加者から2名ほど選んで需要を調査</li>
<li>そもそもの最近の VM の仕組み</li>
<li>KVM</li>
<li>Apple Hypervisor Framework (AHF)</li>
<li>Intel HAXM : Android エミューレーターの高速化モジュールとして有名</li>
<li>4スライドでわかる VMM の作り方</li>
<li>詳細は <a href="http://syuu1228.github.io/howto_implement_hypervisor/">ハイパーバイザの作り方</a> 参照</li>
<li>AHF, KVM, HAXM の順でだいたい柔軟性が高く使いやすい</li>
<li>ドキュメントはほぼない</li>
<li>VM はデバッグがつらい</li>
<li>EPT の活用 : ゲストとホストのメモリアドレスのマッピング</li>
<li>例外ハンドリング</li>
<li>AHF が一番柔軟性が高く OS を自由に選べるならおすすめ</li>
<li>普通の VM を作るのなら KVM, HAXM でも十分</li>
<li><p>HAXM はドキュメントがないので初めての VMM としてはやめておけ</p></li>
<li><p>HAXM の機能についてはどうやって調べたのか?</p></li>
<li>API の構造体などをみて AHF や KVM の経験と勘から</li>
<li>偽陰性の可能性はある</li>
</ul>


<h2>Blend XMODEM 〜UEFI de XMODEM〜</h2>

<ul>
<li>発表資料: <a href="https://speakerdeck.com/tnishinaga/kernelvmkansai8">Blend XMODEM -UEFI de XMODEM-/KernelvmKansai8</a></li>
<li>(ハシビロコウのマスクを被って発表かと思いきや、息苦しいということですぐに脱いだ)</li>
<li>AARCH64 ボードの話</li>
<li>UEFI から起動する OS もどきを作ってみたい</li>
<li>リモートからプログラムを送りたい</li>
<li>送る方法: シリアル転送, ネットワークブート</li>
<li>XMODEM を選択</li>
<li>XMODEM のプロトコルの説明</li>
<li>UEFI の文字コードは UTF-16 で 1 byte read/write はどうする? → SERIAL IO PROTOCOL を使う</li>
<li>一定時間ごとに受信待ちループを解除して NAK 送信? (UEFI は割り込み処理が大変) → <code>SERIAL_IO_PROTOCOL</code> の SetAttributes でタイムアウト設定</li>
<li>デバッグ? シリアルはすでに使っていて、どこで printf debug? → シリアルを2本生やす</li>
<li>qemu の AARCH64 だとシリアルが2本生えない → <code>x86_64</code> の QEMU に生やす</li>
<li>minicom vs tmux : pts を奪い合う</li>
<li>データが受け取れずに NAK を送り続ける → タイムアウト数回繰り返してからにした</li>
<li>実機で動かない</li>
<li>デバッグしたいがシリアル1本しかない → ファイルに書き出せば良い</li>
<li>書き込んだ文字が文字化け → ファームウェアをアップデート</li>
<li>ダウンロードするファイルがわかりづらい</li>
<li>grub が勝手に起動して UEFI shell に落ちない</li>
<li>ログが取れるようになったところで時間切れ</li>
</ul>


<h2>インサイドNintendo Switch</h2>

<ul>
<li>Hardware spec とか Software spec とか</li>
<li>FreeBSD は使われていない</li>
<li>NSO バイナリフォーマット</li>
<li>NRO バイナリフォーマット (NRR に正規の署名があるものしかロードできない)</li>
<li>MOD バイナリフォーマット : NRO や NSO 内に埋め込まれている動的リンクに必要な情報を管理する専用領域</li>
<li>Homebrew ソフトウェア</li>
<li>ReSwitched Team <a href="https://github.com/reswitched">https://github.com/reswitched</a></li>
<li>解析ツール : ELF に変換するツールはあったが直接ディスアセンブルするツールはなかった</li>
<li>今は radare2 が対応</li>
<li>セキュリティ事情</li>
<li>(WebKit は無限に脆弱性が)</li>
<li>エミュレータ NSEMU を開発中</li>
<li>今後の課題</li>
<li>発表資料: <a href="https://speakerdeck.com/rkx1209/insaidonintendo-switch">インサイドNintendo Switch</a></li>
</ul>


<h2>Unikernels report</h2>

<ul>
<li>発表資料: <a href="https://speakerdeck.com/orumin/unikernel-report">Unikernel report</a></li>
<li>Unikernel とは?</li>
<li>会場では知っている人はほとんどいなかった</li>
<li>OSv とか</li>
<li>最近の Unikernel</li>
<li>RumpRun</li>
<li>IncludeOS</li>
<li>EbbRT</li>
<li>LightVM</li>
<li>(&ldquo;My VM is Lighter (and Safer) than your Container&rdquo; という煽り文句から your がなくなっていた)</li>
<li>試そうとしたらカーネルコンフィグが悪かったのかうまくいかなかった</li>
<li><p>まとめ</p></li>
<li><p>質疑応答</p></li>
<li>ミラージュ OS はスコープ外? → Unikernel の元になったものなのでスコープ外というか前提</li>
</ul>


<h2>RISC-V ユーザランド ISA</h2>

<ul>
<li>RISC-V はフツー</li>
<li>命令の個別の簡単な説明</li>
<li>hart : ハードウェア・スレッド</li>
</ul>


<h2>lld: 速くてシンプルなリンカ</h2>

<ul>
<li><a href="https://github.com/rui314/8cc">https://github.com/rui314/8cc</a></li>
<li>goo.gl/kTwXem</li>
<li>lld の実装状況</li>
<li>ELF (Unix), COFF (Windows), Mach-O (macOS) をサポート</li>
<li>lld/ELF はプロダクションクオリティ</li>
<li>FreeBSD は GPL 3 のものをメインに入れない都合でリンカーが古かったところに lld が出て来たので使われるように</li>
<li>Chrome が移行中, Firefox, Rust なども移行中っぽい</li>
<li>RISC-V と WebAssembly のような珍しいものもある</li>
<li>WebAssembly のリンカーは今までなかった</li>
<li>lld/COFF は PDB デバッグ情報を含めプロダクションクオリティ</li>
<li>lld/Mach-O は未完成</li>
<li>デザインゴール : シンプル, 速い, 使うのが簡単</li>
<li>/usr/bin/ld を置き換える (勇気が必要)</li>
<li>clang で &ldquo;-fuse-ld=lld&rdquo; オプション</li>
<li>質問: リンカースクリプトも同じものが使える? → ほぼ使える (が、そもそも GNU のリンカーも2個あって互換性が完全ではない)</li>
<li>GNU binutils には bfd と gold という2つのリンカーが入っている</li>
<li>bfd は ELF より前からあり抽象化レイヤーがある</li>
<li>gold は bfd より速いリンカーとして登場</li>
<li>lld も速いリンカーとして開発された</li>
<li>比較グラフ</li>
<li>コードを最適化したくはない、自然に速く動くコードを書きたい</li>
<li>問題の規模 : Chrome (デバッグ情報付き) は 2 GiB ほど</li>
<li>シンボル処理で1マイクロ秒増えると6秒増える</li>
<li>シンボルテーブルのルックアップが重いので減らす</li>
<li>並行処理</li>
<li>シングルスレッドでも速い方が良い</li>
<li>再現可能なリンクのために出力は決定論的な方が良い</li>
<li>マルチスレッド化</li>
<li>入力から出力にコピーとリロケーションはマルチスレッドにできる</li>
<li>文字列マージの並行処理はトリッキー。単に正しい出力を作るのは簡単だが、毎回同じ出力にするのは難しい。</li>
<li>ハッシュ値の計算は終わった状態で、下位ビットでシャーディング</li>
<li>コードの行数は gold より少ない</li>
<li>gold はアーキテクチャ依存部分が大きい、作りも凝ったことをしているので複雑</li>
<li>エラーメッセージ: clang が C++ のエラーメッセージクオリティを引き上げたのと同じようなことがしたかった</li>
<li>セマンティックスの違い</li>
<li>伝統的な Unix リンカーでは順番が重要だったが、順番を気にしなくてもよくした</li>
<li>FreeBSD 全体でも少ししか失敗しなかったので、大きな問題はなかった</li>
<li>リンク時最適化</li>
<li>clang で <code>C{,XX}FLAGS=-flto</code> と <code>LDFLAGS=-fuse=lld</code> をコンパイラフラグに追加するだけ</li>
<li>クロスリンク</li>
<li>すべてのターゲットが常にサポート</li>
<li>クロスビルドツールチェインで lld を使うのが簡単になるはず</li>
<li><p>ホスト環境に出力が依存しない</p></li>
<li><p>OpenBSD では起動ごとに ASLR よりももっとランダムにしたいという話があるらしい。</p></li>
<li>質疑応答</li>
<li>GPL 3 なのが理由で macOS では bash が古いままだが、同じ理由で lld に需要がある? → そもそも ld64 が GNU のものではないので関係ない</li>
<li>そもそも情報源は? → まず Microsoft が出している仕様をみて、何もしない Windows プログラムを作って、 Hello world ぐらいを作って、と順番にやっていった。 ELF もドキュメントがある。 Linkers &amp; Loaders は良い本なので、古い部分もあるが参考になる。既存のリンカーのソースコードも参考になる。 MIPS がひどい。</li>
</ul>


<h2>まとめ</h2>

<p>京都 (大学) は遠いですが、面白かったので行ってよかったと思いました。</p>

<p>リンカーはデフォルトがどっちなのか確認して、 bfd だったら gold を使うように変更してみようかなと思いました。
lld は Debian に入っているのが buster (今の testing) からで、 stretch (今の stable) には入っていないようなので、使うのはまだ先かなと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[関西オープンフォーラム2017 2日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-11-11-kof2017.html"/>
    <updated>2017-11-11T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kof2017</id>
    <content type="html"><![CDATA[<p><a href="https://k-of.jp/2017/">K-OF 2017</a> の2日目に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>いつもの ATC でした。</p>

<p>12時ごろに到着しました。</p>

<h2>mrubyマイコンボードをさわってみよう!</h2>

<p>間に合ったので、スタッフとしてお手伝いをしました。</p>

<p>Windows で Visual Studio Code + Rubic が開発環境でした。</p>

<p>うまく動かない PC があるという感じで大変な点もありましたが、概ね好評な感じだったようです。</p>

<p>うまく転送できなくなることがあるのは、ドキュメントフォルダー以下だとダメだとか、USB をさしなおしたり、 Visual Studio Code の再起動をするとなおることもあるらしいとかいう感じで謎でした。</p>

<h2>Debian Updates</h2>

<ul>
<li>いつものように Debian とは? から。</li>
<li>企業がメインだとどういうことがある?</li>
<li>注力するソフトウェアの選定が企業で決まる。</li>
<li>btrfs を Redhat がやめて、 SUSE が引き継ぐということがあった。</li>
<li>コードネームは 10 の Buster がトイストーリーのおもちゃではなく犬になっているので、まだ大丈夫そう?</li>
<li>Debian 9 について</li>
<li>mysql のデフォルトは stretch では mariadb に置き換わったが、 mysql のパッケージは sid で復活しているらしい</li>
<li>クロスコンパイルは mingw も対応している</li>
<li>Xorg サーバーがユーザー権限が動くようになったので Xvfb や Xnest が動かしやすくなった</li>
<li>mingw のクロスコンパイルが便利そうな例の話: groonga とか?</li>
<li>Firefox の話</li>
<li>セキュリティ更新は ESR</li>
<li>商標などの問題と ESR は別の話</li>
<li>firefox パッケージは sid のみで firefox-esr のみが stable に入っている</li>
<li>新規インストール時のネットワークインターフェース名が変わる</li>
<li>ハマりどころは? → eth0, eth1 の順番が入れ替わることがあった頃の方がトラブっていた。</li>
<li>Hurd はファームウェアがフリーなディスクがなくて、ディスク I/O が遅いが KVM の virtio 経由ならましらしい</li>
<li><a href="https://debianjp.connpass.com/">https://debianjp.connpass.com/</a></li>
<li><a href="https://debianjp.connpass.com/event/71914/">第 129 回関西 Debian 勉強会</a></li>
<li>日本語入力は問題があれば ibus に変更すれば良さそう?</li>
</ul>


<h2>日本のインターネットが揺れた日</h2>

<ul>
<li>この件で話をするのは5件目らしい</li>
<li>元々エンジニアで入社したが途中から記者になった</li>
<li>色々昔話とか</li>
<li>大規模障害の話</li>
<li>経路情報の話</li>
<li>今は68万ぐらい</li>
<li>10万ぐらい一気に増えたらしい</li>
<li>情報を聞き出すのが大変だった</li>
<li>AS 番号から調べたら Google だった</li>
<li>「なんでグーグルが関係があるの?」</li>
<li>by 社内</li>
<li>by Google 日本法人</li>
<li>Google 日本法人「事実関係を確認中」になったので2本の記事を配信 (25日夜)</li>
<li>26日昼に Google から</li>
<li>Sorry のニュアンスがわからなかったので再確認</li>
<li>Google 日本法人から返答 (26日午後3時)</li>
<li>グーグルが謝罪の記事</li>
<li>結局 何が起きていた?</li>
<li>困った時の piyokango → まだ情報が不十分だった</li>
<li>結局誰も全体像を説明できない</li>
<li>ツイートの impression 291 million</li>
<li>KloutScore : アカウントの影響力をスコアリング</li>
<li>属性によりつぶやく内容もさまざま</li>
<li>影響範囲が大きいのでさらなる記事が必要</li>
<li>「インターネットが壊れたっぽい」</li>
<li>「日本の背骨がやられた」</li>
<li>「グーグルに吸い込まれた」</li>
<li>「太平洋往復ルート」(10月15日朝刊)</li>
<li>反響は様々</li>
<li>YouTube - 32.78% : Downstream in Asia-Pacific</li>
<li>社会は変わる 技術者は? 利用者は? 「インターネットは何も変わっていません 変わったのは社会の方です」</li>
<li>議論をしてより良い世界をつくろう</li>
<li>「電気」「ガス」「水道」「インターネット」</li>
<li>スマホを手にした瞬間、世界とつながる現実</li>
<li>「冗長性」って知ってますか?</li>
<li><p>「つながる」という意味を考えよう</p></li>
<li><p>質疑応答</p></li>
<li>ヒューマンエラー? → トラフィックエンジニアリングのミステイクだと聞いたのでヒューマンエラーだと思う</li>
<li>チェックの機構はあってもそれを超えてしまうことはあるのでは。 100% ということはないので。</li>
<li>学生から arp とかもなぜ信じるのかという質問が出たことがある</li>
<li>バランスが大事</li>
<li>今回はミスだったが、意図的にされたら? → サイバー攻撃はすでに実際に起きている、攻撃者は先を見ている</li>
<li>BGP が脆弱なのが表出したのは良い機会だったかもしれない</li>
<li>犯罪者にとっても止める方向にメリットはあまりないので、そういうことはあまり起きていない</li>
<li>国がネットをシャットダウンすることもあった</li>
<li>国がネットを管理すべきか問題</li>
<li>境がないことの価値</li>
<li>OCN と KDDI 以外での影響は? → BGP の経路情報的には他にも影響があったはずだが、他では騒ぎになっていなかった</li>
<li>インターネット依存度合いの問題? → リテラシーとかの問題かも</li>
</ul>


<h2>終了後</h2>

<p>お楽しみ抽選会には参加せずに 関西 Debian の人たちについていって会場を出ました。</p>

<h2>感想</h2>

<p>いつもの Debian Updates の他に、事前のセッション一覧で気になっていた「日本のインターネットが揺れた日」も聞けて、 mruby のハンズオンも間に合う時間に行けたら手伝おうと思っていたのが手伝えて、 mruby での組み込みの開発がどんな感じかわかってよかったです。</p>

<p>「日本のインターネットが揺れた日」のセッションで、頻繁に録画しているという話をしていて、後日 YouTube に公開されるらしいので、気になる方は見てみると面白いのではないかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebRTC Meetup Osaka #2 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-10-27-webrtc.html"/>
    <updated>2017-10-27T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/webrtc</id>
    <content type="html"><![CDATA[<p><a href="https://atnd.org/events/91437">WebRTC Meetup Osaka #2</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>久しぶりにさくらインターネットさんの会場にきました。
ゲスト Wi-Fi は SSID が同じで、パスワードが変わっていて、 iPod touch は一度覚えているのを削除して、設定し直さないと繋がりませんでした。</p>

<h2>会場説明等</h2>

<p>懇親会をするので参加希望者は休憩の時に。</p>

<h2>Meetupの説明</h2>

<ul>
<li>開催実績の紹介など</li>
<li>ハッシュタグは <code>#webrtcjp</code></li>
<li>WebRTC-JP Slack</li>
<li>YouTube に過去の動画も公開している <a href="https://goo.gl/BjEhku">https://goo.gl/BjEhku</a></li>
<li>参加者はほぼエンジニア</li>
<li>初参加の人が多い</li>
<li>WebRTC で何か開発したことがあるのは半数ぐらい</li>
</ul>


<h2>ワンボタンでできる！WebRTCゲーム配信！</h2>

<ul>
<li>PLiCy という自作フリーゲームの公開・共有を目的とした SNS</li>
<li>別途ツールを準備しなくてもブラウザだけで完結するブラウザゲームの簡易配信機能</li>
<li>少なくとも Android 4.0 で動いたので対応環境も十分ある</li>
<li>遊んでいる人全員に配信してもらうのが目標</li>
<li>ゲーム画面の抽出は captureStream で取得するだけ</li>
<li>ゲーム音楽の抽出は GainNode の prototype を書き換えて connect に割り込み</li>
<li>マイクを使った実況対応は getUserMedia API で HTTPS 必須</li>
<li>WebRTC の通信は PeerJS を利用</li>
<li>TURN サーバーが必要だった</li>
<li>CentOS 5 だと TURN サーバーが動かなかったので、CentOS 7 を入れ直した</li>
<li>映像・音声とは別に RTCDataChannel API でデータ通信が使える</li>
<li>Web Speech API でチャットコメントを音声読み上げする</li>
<li>Safari に対応するのに PeerJS を修正する必要があった</li>
<li>Edge はまだダメ</li>
<li>運用状況と課題</li>
<li>画質の設定はないが captureStream API でフレームレートは設定できる</li>
<li><p>iframe を使うと Firefox や Safari で問題があった</p></li>
<li><p>質疑応答</p></li>
<li>CentOS 5 は実験用のサーバーなので古かった</li>
<li>TURN サーバーは何を使っている? coturn ではない? → パッケージ名が「turnserver」という名前のものを使っている</li>
<li>回線が細いと途切れるという話があったが、接続が多いと切れる? → P2P なので TURN サーバーを経由しているかどうかでも変わって来る。10人を超えると不安定になってくる。スマホでキャリア回線でみると重いとかはある。</li>
</ul>


<h2>実践 WebRTC 〜最新事例と開発ノウハウの紹介〜</h2>

<ul>
<li>発表資料は SlideShare で公開している: <a href="https://goo.gl/daTG2m">https://goo.gl/daTG2m</a></li>
<li>WebRTC = Web Real Time Communication</li>
<li>リアルタイムコミュニケーションの民主化</li>
<li>最初のリアルタイムコミュニケーションは電話</li>
<li>2011 年に WebRTC の草案が発表</li>
<li>WebRTC の特徴: カメラやマイクを利用可、ブラウザ間の P2P 通信、ストリーミングデータを扱える</li>
<li>WebRTC を構成する技術要素</li>
<li>中身は4つ: 1から3は IETF で標準化、4は は W3C で標準化</li>
<li>1: 暗号化などのプロトコル、2: P2P通信する手順、3: コーデック、4: JavaScript などから利用する API</li>
<li>リアルタイムのために基本的に UDP 上</li>
<li>コーデック: VP8, VP9, H.264 (Safari はこれのみ)、音声は opus</li>
<li>Can I use? でブラウザの対応状況を確認 <a href="http://caniuse.com/#feat=rtcpeerconnection">http://caniuse.com/#feat=rtcpeerconnection</a></li>
<li>IE はあきらめましょう</li>
<li>Safari は 11 で対応</li>
<li><p>iOS でネイティブアプリを作らなくても使えるようになる</p></li>
<li><p>WebRTC の事例紹介</p></li>
<li><p>Co-Streaming (共同ストリーミング) 複数人が同時に動画配信し多人数が視聴する</p></li>
<li>mixer: MS が買収したゲーム動画配信サービスで Win 10 からは直接配信も可能</li>
<li><p>Pixiv Sketch LIVE</p></li>
<li><p>Serverless CDN: Peer5</p></li>
<li><p>Serverless CDN x Streaming: Streamroot</p></li>
<li><p>オンライン英会話: Skype から移行しているところが多い</p></li>
<li>カスタマサポート: videodesk</li>
<li>遠隔診療: CLINICS 先生側(PC)と患者側(スマホアプリ)</li>
<li>IoT: petoco</li>
<li><p>マッチングアプリ: KoeTomo</p></li>
<li><p>WebRTC の活用しどころ: 既存サービスの置き換えでコスト削減よりも付加価値向上がおすすめ</p></li>
<li><p>ここからエンジニア向けの話</p></li>
<li><p>Safari の開発メニューには「レガシー WebRTC API を有効にする」という設定がある</p></li>
<li>API も結構変わってきている</li>
<li>ブラウザは ORTC の考え方を一部取り入れた WebRTC 1.0 API へ対応しつつある</li>
<li>WebRTC 1.0 では SDP を利用する</li>
<li>レガシー API だと SDP に全てのレイヤーについてネゴシエーションするのに必要な情報が全て記載されているので、例えば、音声ミュートで参加していたメンバーが途中からミュートを解除すると、音声トラックだけ操作したいのに、全てのレイヤーで再ネゴシエーションが発生する。</li>
<li>ORTC は各レイヤーに相当する API が公開されているので、必要なところだけ操作できる</li>
<li>API の進化に対応するのは <a href="https://github.com/webrtc/adapter">adapter.js (shim)</a> を使えばだいたいうまくやってくれる</li>
<li>ブラウザー間の互換性の問題</li>
<li>Chrome, Firefox, Safari はベースになっているコアライブラリが同じなので相性が良いが、Edge は独自なので相性が悪い</li>
<li>動画コーデック: Chrome Firefox は VP8/VP9/H264, Edge は VP8/H264UC, Safari は H264 のみ</li>
<li>H264UC は Skype 用</li>
<li>Safari はモバイルのハードウェアの対応を考慮してそう</li>
<li>API も差がある</li>
<li><p>ScreenShare は Edge にはないなどの機能差は adapter.js では対応できないのでアプリでどうにかする必要あり</p></li>
<li><p>マイクカメラの扱いにはハマりどころが多い</p></li>
<li>カメラの機種, OS, ブラウザの差がある</li>
<li>getUserMedia の Constraints に指定してもその通りになるとは限らない</li>
<li><p><a href="https://goo.gl/9DWMGZ">俺たちは雰囲気でgetUserMedia()をやっている</a></p></li>
<li><p>フルメッシュ, MCU, SFU</p></li>
<li>SFU が主流</li>
<li><p>ユースケースに合わせて選択しましょう</p></li>
<li><p>つながらない問題</p></li>
<li>WebRTC にはシグナリングとメディア、2つの通信がある</li>
<li>1: シグナリングサーバーとの接続 (だいたいWSS) ができない</li>
<li>2: メディアの通信 (P2P) が疎通できない</li>
<li>1 はネットワークが対応しないとどうしようもない</li>
<li><p>2 はネットワークのポリシー変更や TURN サーバー</p></li>
<li><p>ICE, STUN, TURN</p></li>
<li>STUN: UDP ホールパンチングできる NAT の種類には制限がある</li>
<li><p>TURN は UDP が通らない時に TCP でラップしてくれる機能もある</p></li>
<li><p>デバッグ方法</p></li>
<li><p>chrome://webrtc-internals</p></li>
<li><p>プラットフォームサービスは積極的に活用しよう</p></li>
<li>WebRTC は総合格闘技</li>
<li>プラットフォームサービス: OpenTok, CafeX, SkyWay, Twillio, FacePeer</li>
<li>ミドルウェア: WebRTC SFU Sora</li>
<li><p>プラットフォームサービスを使っても、つながらない問題が全て解決するわけではない</p></li>
<li><p>質疑応答</p></li>
<li>Safari の ScreenShare 対応? → プラグインを入れてもらう必要がある</li>
<li>コーデック? → Firefox だと VP8 が優先, SDK で設定できるものもある, 相手を Safari にすると H264 になる</li>
<li>H264UC と H264 との互換性は? → 別物で互換性はない</li>
<li>Data Connection を使わずに Edge とやり取りするには? → WebSocket を使う。 Skype で必要なさそう (WebSocket でなんとかなる) なので Data Connection の実装はあまり期待できない</li>
</ul>


<h2>休憩</h2>

<p>早めに進んでいたので順番を入れ替えて休憩は後になりました。</p>

<h2>WebRTCのデバッグに関するTips&amp;Tricks</h2>

<ul>
<li>WebRTC の同人誌</li>
<li>booth.pm で「WebRTC」で検索</li>
<li><p><a href="https://mzsm.booth.pm/items/628127">https://mzsm.booth.pm/items/628127</a></p></li>
<li><p>Safari の開発メニューには「模擬キャプチャデバイス」というものがある</p></li>
<li>Chrome は <code>--use-fake-device-for-media-stream</code> 付きで起動</li>
<li><p>Firefox は getUserMedia で fake: true を指定</p></li>
<li><p>getUserMedia の制限</p></li>
<li>Chrome は localhost は https でなくても OK</li>
<li>他の人につないでもらいたい時は ngrok が使える</li>
<li>Homebrew か公式サイトからダウンロードしてインストール</li>
<li>日本だと <code>--region ap</code> を指定するのが良い</li>
<li><p>デモ</p></li>
<li><p>質疑応答</p></li>
<li><code>/etc/hosts</code> で localhost の IP アドレスを別のものにしたら通る? → 不明</li>
<li>会社ネットワークとかで外にでるのに制限がある環境では https のサーバーをたてた方が楽なのでは? → そこは適宜</li>
</ul>


<h2>iOS11は本当にWebRTCに対応したのか</h2>

<ul>
<li>Safari 11 でビデオチャットは可能</li>
<li><p>他アプリでは無理</p></li>
<li><p>WKWebView, SFSafariViewController, UIWebView (deprecated)</p></li>
<li>getUserMedia が全部非対応</li>
<li>RTCPeerConnection はあるので、データ通信はできた</li>
</ul>


<h2>次回告知等</h2>

<ul>
<li><a href="https://techplay.jp/event/637372">WebRTC Meetup Tokyo #17 Special Edition</a></li>
<li>Youtube Live による配信あり</li>
<li>WebRTC Meetup Osaka #3 は12月か1月にやりたい、発表者募集中</li>
</ul>

]]></content>
  </entry>
  
</feed>
