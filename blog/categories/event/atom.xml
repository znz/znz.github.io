<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: event | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/event/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2016-02-07T20:58:51+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2月7日 「型システム入門」読書会第3回(兵庫県)に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-02-07-amagasakirb.html"/>
    <updated>2016-02-07T13:17:06+09:00</updated>
    <id>http://blog.n-z.jp/blog/amagasakirb</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/event/index/372662/" title="2月7日 「型システム入門」読書会第3回(兵庫県)">2月7日 「型システム入門」読書会第3回(兵庫県)</a>
に参加しました。
今回は第 15 章から第 19 章でした。</p>

<!--more-->




<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4274069117" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>以下、今回のメモです。</p>

<ul>
<li>いつもの部屋は予約が取れなかったということで、いつもと違う部屋だった。</li>
<li>昨日は<a href="https://konamifl.doorkeeper.jp/" title="小波秀雄教授最終講義">小波秀雄教授最終講義</a>だった。</li>
<li>サンプルコードは誰も試していないという話</li>
<li><a href="http://www.cis.upenn.edu/~bcpierce/tapl">http://www.cis.upenn.edu/~bcpierce/tapl</a></li>
<li>個人的には 11 章の途中だったので、その続きから読んだ。</li>
<li>前回の話にもあったように 12 章は飛ばした。</li>
<li>Mac の AC アダプタが大きいという話</li>
<li>第15章 部分型付け の概要の話</li>
<li>英語での 15 章のタイトルは Subtyping</li>
<li>P.152 の E-TYPETEST2 がよくわからないという話</li>
<li>Ruby の Fixnum とかの話</li>
<li>NArray の話</li>
<li>Python の話</li>
<li>Perl 6 は去年 12 月にリリースされた話 <a href="http://perl6.org/">http://perl6.org/</a></li>
<li>Haskell とか Swift とかの話</li>
<li>Ruby の oneliner だけの時の特殊な挙動の話</li>
<li>Smalltalk の話</li>
<li>Bacon.js の話</li>
<li>F# の話</li>
<li>Visual Haskell というのも昔はあったという話</li>
<li>インデントの話</li>
<li>IDE の話</li>
<li>Visual Studio の話</li>
<li>Dll Hell の話</li>
<li>Go 言語の話</li>
<li>Terraform の話 <a href="https://www.terraform.io/">https://www.terraform.io/</a></li>
<li>fix コンビネータの話</li>
<li>C# にも async,await が入っているという話</li>
<li>HTTP2 の話</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO&東海道らぐオフラインミーティング 2016/01/16 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-01-16-lilo-tokaidolug.html"/>
    <updated>2016-01-16T13:00:34+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-tokaidolug</id>
    <content type="html"><![CDATA[<p><a href="https://lilo.doorkeeper.jp/events/36903" title="LILO&amp;東海道らぐオフラインミーティング 2016/01/16 - LILO | Doorkeeper">LILO&amp;東海道らぐオフラインミーティング 2016/01/16 - LILO | Doorkeeper</a>
に参加しました。</p>

<p>今回もアンカンファレンス形式でした。</p>

<!--more-->


<h2>メモ</h2>

<p>今回のメモです。</p>

<ul>
<li>ハッシュタグ: <code>#lilo_jp</code> <code>#東海道らぐ</code></li>
<li>登録参加者数 10名</li>
<li>自己紹介から</li>
<li>Chromecast を持ってきている人がいてプロジェクターにさしていた。</li>
<li>Kapper さん : ARM Linux、Android、RaspberryPi で Windows とアプリをX86エミュで動かそう</li>
<li>ARM は x86 に比べて浮動小数点演算が遅い</li>
<li>ExaGear Desktop という商用のエミュレータもあるらしい</li>
<li>qemu より速い</li>
<li>DOSBox, Bochs は遅いが移植性が高い</li>
<li>qemu-user-static と schroot で Wine などを動かしている話</li>
<li>Debian は mutlilib をサポートしているが multi-binary はサポートしていないので <code>apt-get *:i386</code> で i386 のバイナリで上書きされてしまわないように schroot で環境を分けているという話</li>
<li>プレゼンに使った環境は Ubuntu を追加で入れた Chromebook</li>
<li><code>uname</code> は <code>armv7l</code></li>
<li>Crouton</li>
<li>派生して Windows 上で仮想環境の話</li>
<li>Virtual PC, Hyper-V, VirtualBox, VMware Player</li>
<li>山内さん : Raspberry Pi で遊んだ後は Piface を買ってホームエレクトロニクスとホームセキュリティで実用しよう</li>
<li>Tocos 無線DIO</li>
<li>TWE-Lite DIP (トワイライト・ディップ)</li>
<li><a href="https://osdn.jp/projects/pepolinux/wiki/epicon">epicon</a> でシリアル通信</li>
<li>休憩</li>
<li>榎さん : LibreOffice の最近の動向と Debian での LibreOffice パッケージについて</li>
<li>LibreOffice Online (LOOL)</li>
<li>ownCloud の編集画面で LOOL を使うデモがある</li>
<li>VirtualBox のイメージが用意されているので簡単に試せる</li>
<li>LibreOffice Viewer for Android</li>
<li>Advisory Board</li>
<li>ヨーロッパでは行政中心に導入が進行中</li>
<li>日本での活動</li>
<li>UI の翻訳率は高い</li>
<li>Help などは追いついていない</li>
<li>イベント</li>
<li>HackFest</li>
<li>LibreOffice Conference 2015 への日本からの参加者は 3 名</li>
<li>各言語のコミュニティ : LibreItalia (非営利団体), ベトナムコミュニティ</li>
<li><a href="http://itpro.nikkeibp.co.jp/atcl/column/15/102800252/102800003/" title="ヨーロッパでのLibreOffice活用は移行期から安定期に、アジアも活発な動き">ヨーロッパでのLibreOffice活用は移行期から安定期に、アジアも活発な動き</a></li>
<li>LibreOffice mini Conference 2016 in Japan</li>
<li>現時点での参加者が 13 名に増えている話</li>
<li>Debian での LibreOffice パッケージ</li>
<li>遅れてきた人の自己紹介</li>
<li>Shimada Hirofumi さん : opencocon</li>
<li>新ビルドサーバ</li>
<li>Allwinner タブレットの OS を作ってみる (途中)</li>
<li>linux-sunxi コミュニティ</li>
<li><a href="http://linux-sunxi.org/Identification_guide">http://linux-sunxi.org/Identification_guide</a></li>
<li><a href="http://linux-sunxi.org/GPL_Violations">http://linux-sunxi.org/GPL_Violations</a></li>
<li>Android 上だと型番などの情報がわからないので、バラしてプロセッサなどを確認</li>
<li><a href="http://linux-sunxi.org/Format_Q8">http://linux-sunxi.org/Format_Q8</a></li>
<li>OpenEmbedded + meta-sunxi</li>
<li><a href="https://github.com/linux-sunxi/meta-sunxi">https://github.com/linux-sunxi/meta-sunxi</a></li>
<li>Device Tree, FEX</li>
<li>sunxi-tools</li>
<li>microUSB で転送</li>
<li>現状はカーネルが起動するところまで</li>
<li>デモ</li>
<li>まとめ</li>
<li>上周りはどうするのかが問題</li>
<li>選択肢のひとつ : <a href="http://plasma-mobile.org/technology/">http://plasma-mobile.org/technology/</a></li>
<li>休憩</li>
<li>矢吹さん : Sphinx + VOoM</li>
<li><a href="http://www.vim.org/scripts/script.php?script_id=2657" title="VOoM : Vim two-pane outliner">VOoM : Vim two-pane outliner</a></li>
<li><a href="http://vim-voom.github.io/" title="VOoM: two-pane text outliner">VOoM: two-pane text outliner</a></li>
<li><a href="http://sphinx-users.jp/" title="Sphinx-Users.jp — Python製ドキュメンテーションビルダー、Sphinxの日本ユーザ会">Sphinx-Users.jp — Python製ドキュメンテーションビルダー、Sphinxの日本ユーザ会</a></li>
<li><a rel="nofollow" href="http://www.amazon.co.jp/gp/product/4478490279/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4478490279&amp;linkCode=as2&amp;tag=znz-22">考える技術・書く技術―問題解決力を伸ばすピラミッド原則</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4478490279" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="https://packages.debian.org/sid/vim-voom">https://packages.debian.org/sid/vim-voom</a></li>
<li>すがさん : <a href="http://www.geocities.jp/sugachan1973/doc/funtouki.html" title="システム奮闘記">システム奮闘記</a> 進捗</li>
<li>LAN の減衰、表皮効果</li>
<li>さとうさん : Raspberry Pi と魚眼レンズのカメラなどの実演</li>
<li>丸市 展之さん : OSM 3D マップの話</li>
<li>榎さん : 最後にちょっとだけ ownCloud + LibreOffice Online のデモ</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第70回 Ruby関西 勉強会で発表しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-01-09-rubykansai70.html"/>
    <updated>2016-01-09T14:01:12+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai70</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/36351" title="第70回 Ruby関西 勉強会">第70回 Ruby関西 勉強会</a>
で発表してきました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>Ruby 2.3.0 の新機能について</h2>

<p>この内容で発表しました。</p>

<iframe src="http://slide.rabbit-shocker.org/authors/znz/rubykansai70-ruby230/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="http://slide.rabbit-shocker.org/authors/znz/rubykansai70-ruby230/" title="Ruby 2.3.0 の新機能について">Ruby 2.3.0 の新機能について</a>
</div>


<h2>10 分休憩</h2>

<h2>gems on Rails</h2>

<ul>
<li>What is a gem?</li>
<li>gem を探す</li>
<li><a href="https://rubygems.org/">https://rubygems.org/</a></li>
<li><a href="https://www.ruby-toolbox.com/">https://www.ruby-toolbox.com/</a></li>
<li>gem を選ぶ</li>
<li>ダウンロード数とか</li>
<li>コードの相性</li>
<li>作者やロゴも基準にしている</li>
<li>gem を使う</li>
<li>Github の README, Wiki を読む、から始まる</li>
<li>個人的に良く使う gems on Rails</li>
<li>認証・権限周辺 : devise, cancancan, pundit</li>
<li>入出力ドキュメント : prawn, pdfkit, rubyzip, axlsx, docx_templater</li>
<li>(docx_templater は知らなかった)</li>
<li>その他 : kaminari, carrierwave, rails-assets, whenever, simplecov</li>
<li>みなさんのお気に入りの gems</li>
<li>有名な rails 製アプリ (GitLab とか) の Gemfile を参考にする</li>
<li><a href="https://github.com/gitlabhq/gitlabhq/blob/master/Gemfile">https://github.com/gitlabhq/gitlabhq/blob/master/Gemfile</a></li>
<li><a href="http://awesome-ruby.com/">http://awesome-ruby.com/</a></li>
<li><a href="http://www.thinreports.org/">http://www.thinreports.org/</a></li>
</ul>


<h2>10 分休憩</h2>

<h2>Rails Engine のすすめ</h2>

<ul>
<li>Engine の例 : turbolinks, devise</li>
<li>サービス指向: Rails</li>
<li>コンポーネント指向 : Rails Engine, React and Redux</li>
<li>オブジェクト指向 : Ruby</li>
<li>デモ</li>
<li><code>mount なんとか::Engine =&gt; "/api"</code> みたいにして使う</li>
<li>Engine のメリット・デメリット</li>
<li>たとえば <code>/api</code> を <code>/v1/api</code> にするのも <code>mount</code> のところを変えるだけ</li>
<li>Rails 5.0 ではデフォルトでは <code>jbuilder</code> は使わなくなって <code>render json: @products</code> で <code>to_json</code> を呼び出すだけになっている。</li>
<li>React Redux のクライアントは Electron でネイティブにも対応できる</li>
<li>サンプルアプリは <a href="https://github.com/dddrb/bouquet">https://github.com/dddrb/bouquet</a></li>
</ul>


<h2>5 分ぐらい休憩</h2>

<h2>Ruby 初級者向けレッスン (ブロック)</h2>

<ul>
<li><a href="https://github.com/higaki/learn_ruby_kansai_70">https://github.com/higaki/learn_ruby_kansai_70</a></li>
</ul>


<h2>クロージング</h2>

<ul>
<li><a href="https://rubyassociation.doorkeeper.jp/events/35687" title="[大阪] Rubyビジネスセミナー loTのエコシステムとワークライフバランス">大阪 Rubyビジネスセミナー loTのエコシステムとワークライフバランス</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[12月27日 型システム入門読書会　第2回(兵庫県)に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2015-12-27-amagasakirb.html"/>
    <updated>2015-12-27T13:06:28+09:00</updated>
    <id>http://blog.n-z.jp/blog/amagasakirb</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/event/index/362134/" title="12月27日 型システム入門読書会　第2回(兵庫県)">12月27日 型システム入門読書会　第2回(兵庫県)</a>
に参加しました。
今回は第 8 章から第 14 章でした。</p>

<!--more-->




<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4274069117" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>以下、今回のメモです。</p>

<ul>
<li>(前回参加していない) 初参加の人の方が多かった</li>
<li>8.3 安全性よりも健全性という方がよく使うという話</li>
<li>p.83 の下の方から p.84 にかけてがわかりにくい話</li>
<li>λ の右下に → という表記が珍しいという話</li>
<li><a href="https://ja.wikipedia.org/wiki/2018%E5%B9%B4%E5%95%8F%E9%A1%8C" title="2018年問題">2018年問題</a>の話</li>
<li>OCaml の let rec と F# の話</li>
<li>p.92 脱糖衣 という用語が珍しいという話</li>
<li>p.93 (例えば Java では、設計により、すべての型が短縮名で表される。第 19 章参照)</li>
<li>p.113 正しく型付けされたプログラムの評価は有限ステップで停止することが保証されている</li>
<li>関数の型の話らしい</li>
<li>13?15?章を読んでから12章を読んだ方が良いかもしれないという話</li>
<li>ノート PC で Linux を使った時の消費電力の話</li>
<li><a href="http://science.srad.jp/story/15/12/08/0552206/">バナナの病気</a>の話</li>
<li>代入の返り値が unit の利点欠点の話</li>
<li>swift は unit らしい</li>
<li>機械学習の話</li>
<li>swift は型推論に時間がかかるとコンパイルエラーになるという話</li>
<li>swift は言語としては良い言語という話 (クラスライブラリが負の遺産という話)</li>
<li>swift の Optional の話</li>
<li>教育に使う言語の話</li>
<li><a href="https://ja.wikipedia.org/wiki/LabVIEW" title="LabVIEW">LabVIEW</a> の話</li>
<li>レゴ マインドストーム の話</li>
<li>演習問題の答えが付いている話</li>
<li>訳語集など付録が充実している話</li>
<li>次回は 2/7(日) 予定</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2015 の 3 日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2015-12-13-rubykaigi-2015.html"/>
    <updated>2015-12-13T10:22:18+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi-2015</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2015" title="RubyKaigi 2015">RubyKaigi 2015</a> の 3 日目に参加したので、そのメモです。</p>

<!--more-->


<h2>Ruby Committers vs the World</h2>

<ul>
<li>matz が本日は来ていないので、司会が個人的に matz に質問していた話</li>
<li>Soft Typing の進捗どうですか</li>
<li>近年 <code>RUBY_VERSION</code> の bump しかコミットがないですがどうですか</li>
<li>The commits of the Year (注目のコミット)</li>
<li>check incompatible libruby (r50412)[<a href="http://svn.ruby-lang.org/cgi-bin/viewvc.cgi?view=revision&amp;revision=50412">http://svn.ruby-lang.org/cgi-bin/viewvc.cgi?view=revision&amp;revision=50412</a>]</li>
<li>rvm がインストール済みの gem を引き連れて ruby のバージョンをあげる機能 (migrate) があるが、それが問題を引き起こすので shared library の gem を入れ直さないといけない</li>
<li>rdoc/rubygems backports (hsbt)</li>
<li>コミットログにダメ出し</li>
<li><code>explicit_bzero(3)</code> (kosaki)</li>
<li>何かあった時に情報を盗みにくくするためのゼロクリアが最適化で消されることがある</li>
<li>最適化で消されないゼロクリア</li>
<li>code size diet (normal)</li>
<li>自分で普通という人は普通じゃない</li>
<li>optimization of <code>newobj_of()</code> (Kazuho Oku さん) <a href="http://svn.ruby-lang.org/cgi-bin/viewvc.cgi?view=revision&amp;revision=52072">r52072</a></li>
<li>frozen string literal の件で炎上した影響</li>
<li><a href="http://blog.kazuhooku.com/2015/10/ruby.html" title="雑なツイートをしてしまったばかりにrubyを高速化するはめになった俺たちは！ ">雑なツイートをしてしまったばかりにrubyを高速化するはめになった俺たちは！ </a></li>
<li><a href="https://twitter.com/kazuho/status/675858887803727872">https://twitter.com/kazuho/status/675858887803727872</a></li>
<li>The new committers</li>
<li>odaira さん</li>
<li>AIX, z/Linux など IBM 関連</li>
<li>sho-h さん</li>
<li>rdoc とるりまの質を高めたい</li>
<li>gogotanaka さん</li>
<li>cmath.rb のメンテナ</li>
<li>yuki24 さん</li>
<li><code>did_you_mean</code> gem</li>
<li>sonots さん</li>
<li>logger のメンテナを nahi さんから引き継いだ</li>
<li>yui-knk さん</li>
<li>Rails のテストで壊れた時に trunk での変更が原因だったら、足りないテストを足したり直したり</li>
<li>AMA (Ask Me Anything)</li>
<li><a href="https://twitter.com/Re_Shia/status/675837047525871616">rubyにコントリビュートしたいと思う人に勉強しておくといいよ、と思うものを一つだけあげるとしたら何でしょうか！</a></li>
<li>hsbt さんの発表資料を見る</li>
<li>akr さんの本を参考にする <iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4774178020" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></li>
<li><a href="https://twitter.com/frsyuki/status/675845609492889600">Python使えって言われるんですがどうしたらいいですか？</a></li>
<li><a href="https://twitter.com/yancya/status/675845804599324675">今後、数値計算分野で Python を食える日が来るでしょうか</a></li>
<li>Python を使って欲しいものを Ruby に持ってくる活動を続けていく</li>
<li><a href="https://twitter.com/tagomoris/status/675848535019917314">Matz以外のコミッタが並行・並列性の提供にどう考えているか聞きたいです!</a></li>
<li><a href="http://togetter.com/li/912075" title="怒り駆動開発に炎上駆動開発！コミッターが語るRubyの1年と未来。Ruby Committers vs the World #rubykaigi #rubykaigiA - Togetterまとめ">怒り駆動開発に炎上駆動開発！コミッターが語るRubyの1年と未来。Ruby Committers vs the World #rubykaigi #rubykaigiA - Togetterまとめ</a></li>
</ul>


<h2>Writing web application in Ruby</h2>

<ul>
<li>Ubiregi</li>
<li>React.js</li>
<li>gohra <a href="https://github.com/youchan/gohra">https://github.com/youchan/gohra</a></li>
<li>Hyalite <a href="https://github.com/youchan/hyalite">https://github.com/youchan/hyalite</a></li>
<li>Opal</li>
<li>Symbol がなくて String と同じ扱い</li>
<li><code>Kernel#proc</code> の引数なしが使えないので、引数リストに <code>&amp;block</code> をつけて受け取る必要がある</li>
<li>それ以外は Ruby として問題なくかけた</li>
<li>React.js と Virtual DOM</li>
<li>opal-browser</li>
<li>JSX
-<code>Hyalite::Component::ShortHand</code></li>
<li>Example: TodoMVC</li>
<li>このスライド自体も Hyalite のサンプル (twitter ではここまで rabbit だと思っていた人が多数)</li>
<li>TodoMVC の例の説明</li>
<li>Ruby-ish implementation</li>
<li>isomorphic</li>
<li>スライド: <a href="http://rubykaigi.youchan.org/">http://rubykaigi.youchan.org/</a></li>
<li><a href="http://togetter.com/li/912112" title="RubyでWebアプリ!? ReactjsぽいことができるHyaliteを使えばMatzが追いかけてくるスライドもすぐ作れるよ #rubykaigi #rubykaigiB - Togetterまとめ">RubyでWebアプリ!? ReactjsぽいことができるHyaliteを使えばMatzが追いかけてくるスライドもすぐ作れるよ #rubykaigi #rubykaigiB - Togetterまとめ</a></li>
</ul>


<h2>Lunch on your own</h2>

<p>今日も築地の方に行っていました。</p>

<h2>Refinements - the Worst Feature You Ever Loved</h2>

<ul>
<li>monkey patch の例</li>
<li>refinements の例</li>
<li>module の中で</li>
<li>top level で</li>
<li>eval の中で</li>
<li>security risks</li>
<li>performance issues</li>
<li>confusing corner case</li>
<li>dynamically scoped refinements の利点と欠点</li>
<li>refinements today</li>
<li>現状は lexical scope</li>
<li>the three use cases again</li>
<li>refinements today の欠点と利点</li>
<li>a deep problem</li>
<li><a href="http://togetter.com/li/912136" title="Ruby2.0で導入されたRefinementsという機能のメリットとリスクについて #rubykaigi #rubykaigiB - Togetterまとめ">Ruby2.0で導入されたRefinementsという機能のメリットとリスクについて #rubykaigi #rubykaigiB - Togetterまとめ</a></li>
</ul>


<h2>Discussion on Thread between version 1.8.6 and 2.2.3</h2>

<ul>
<li><a href="https://asakusarb.doorkeeper.jp/events/36106" title="Asakusa.rb meetup after RubyKaigi 2015">Asakusa.rb meetup after RubyKaigi 2015</a></li>
<li><a href="https://jishin.net/">https://jishin.net/</a></li>
<li>100スレッド*100プロセス</li>
<li><code>Thread#status</code></li>
<li>Cases of threads got stuck</li>
<li>Case 1</li>
<li>2.2.3 の方が CPU usage は増えていた</li>
<li>実行回数は変わっていなかった</li>
<li>Case 2</li>
<li>例外のメモリ使用量は 2.2.3 で減っていた</li>
<li>timeout で例外処理があると Case 1 よりメモリ使用量が多い</li>
<li>conclusion: (thread is) too complicated to understand</li>
<li>質疑応答</li>
<li>マルチスレッドは IO 多重化などを想定していて、処理が回っているものを多重化しているものはあまり想定していなかったという話など</li>
<li><a href="http://togetter.com/li/912153" title="スレッドをいっぱい立ててみた時のお話。10000スレッドでRubyはどうなるか？ #rubykaigi #rubykaigiB - Togetterまとめ">スレッドをいっぱい立ててみた時のお話。10000スレッドでRubyはどうなるか？ #rubykaigi #rubykaigiB - Togetterまとめ</a></li>
</ul>


<h2>Plugin-based software design with Ruby and RubyGems</h2>

<ul>
<li>plugin の例として Firefox Add-on など</li>
<li>How did I design plugin architecture?</li>
<li>Plugin Architecture Design Patterns</li>
<li>traditional</li>
<li>Dependency Injection</li>
<li>Dependency Injection + Plugin loader</li>
<li>Plugin Architecture of Fluentd</li>
<li>Plugin Architecture of Embulk</li>
<li>embulk の demo</li>
<li>embulk-filter-kuromoji</li>
<li>jar ファイルの頭にシェルスクリプトと bat ファイルを埋め込む話</li>
<li>Pitfalls &amp; Challenges</li>
<li><a href="http://togetter.com/li/912157" title="プラグインベースのソフトウェアとは？開発とテストを容易にするデザインパターン #rubykaigi #rubykaigiA - Togetterまとめ">プラグインベースのソフトウェアとは？開発とテストを容易にするデザインパターン #rubykaigi #rubykaigiA - Togetterまとめ</a></li>
</ul>


<h2>Afternoon Break</h2>

<p>スピーカーやコミッターのサインを集めているボードに書いてきました。
Keynote が A ホールのみなので、この後はずっと A ホールにいることにしました。</p>

<h2>Request and Response</h2>

<ul>
<li>HTTP2</li>
<li>利点</li>
<li>バイナリ</li>
<li>多重化</li>
<li>ヘッダーを圧縮</li>
<li>SSL 使用</li>
<li>サーバープッシュ</li>
<li>Google Chrome だと chrome://net-internals/#spdy で確認できる</li>
<li>Firefox は x-firefox-spdy ヘッダが付いている</li>
<li>Rack</li>
<li>Adapter pattern で依存の爆発を解決した</li>
<li>Rack Middleware</li>
<li>Rails アプリでの例</li>
<li>Web Server parses the Request</li>
<li><code>Rails::Application</code> を継承した YourApp</li>
<li><code>Rack::SendFile</code>, <code>ActionDispatch::Static</code>, &hellip;, <code>Router</code></li>
<li>Rack 山</li>
<li>長すぎるし複雑</li>
<li>Rack API の問題</li>
<li>ストリーム</li>
<li>HTTP2 のサーバーの例</li>
<li>質疑応答</li>
<li><a href="https://github.com/tenderlove/ds9">https://github.com/tenderlove/ds9</a> はなぜ ds9 という名前なのか</li>
<li>スタートレック</li>
<li>nghttp2 の ng は next generation</li>
<li>(スタートレックをよく知らないのでよくわからず)</li>
<li>どのくらい発表練習した?</li>
<li>翻訳 2 週間、練習 5 時間</li>
<li>サーバープッシュの設定はどこに?</li>
<li>view helper で自動</li>
<li>ソースコードを読んだら IPv6 に対応していないように見えたが IPv6 対応の方針は? <a href="https://twitter.com/takano32/status/675942535211171841">https://twitter.com/takano32/status/675942535211171841</a></li>
<li>わからない</li>
<li>パッチを送ってください</li>
<li>Rack 3 はたぶん API が変わる</li>
</ul>


<h2>Actor, Thread and me</h2>

<ul>
<li>アーロンの後はやりにくい <a href="https://twitter.com/m_seki/status/675938103735902209">https://twitter.com/m_seki/status/675938103735902209</a></li>
<li>dRuby 本 10 周年</li>
<li>agenda の Really? が重要</li>
<li>アクターモデル</li>
<li>Ether (エーテル) : メッセージを伝搬する何か</li>
<li>Send と Receive だけで考える</li>
<li><code>oso_matz_RPC</code></li>
<li><code>choro_matz</code></li>
<li>後でやる作戦は誰も止まっていないのにシステムが止まってしまうことがある</li>
<li><code>jushi_matz</code></li>
<li>おすすめ</li>
<li>システム全体はアクターモデルで考える</li>
<li>アクターはマルチスレッドで動く</li>
<li>Fiber を使ってみるために bartender というのを作った <a href="https://github.com/seki/bartender">https://github.com/seki/bartender</a></li>
<li>全員が Queue を持っているというのを書いてみた</li>
<li>使い道がなかった</li>
<li>中央集権型 <code>Rinda::TupleSpace</code> を使う</li>
<li><code>todo_matz</code></li>
<li>アクターはより良いスレッドではない感が共有できたはず</li>
<li>スポンサーが大事</li>
<li>質疑応答</li>
<li>スレッドの今後について</li>
<li>現状で満足している</li>
<li>1.8 の方が良かった</li>
<li>上司に 3 倍速くしろといわれてるんですが</li>
<li>IO 待ちばっかりなら今のスレッドで良いのではないか</li>
<li>unicorn (プロセス) から puma (マルチスレッド) に変更したが、リソース的にも速度的にも改善しなかった</li>
<li>Fiber の使った例のところでもっと良い書き方があるという話</li>
</ul>


<h2>スポンサーセッション (Speee)</h2>

<ul>
<li>意外と知っている人が多い</li>
<li>いろんなことをやっているので紹介するのは難しい</li>
<li>IT 企業対抗 Splatoon 大会</li>
<li>Speee ラウンジ</li>
</ul>


<h2>Ruby: 2020 - how do we get to Ruby3x3 (Keynote)</h2>

<ul>
<li>CRuby には JIT が必要</li>
<li>Part 1: Performance</li>
<li>Parallelism</li>
<li>Part 2. Survey of the past</li>
<li>2a. SELF <a href="https://ja.wikipedia.org/wiki/Self">https://ja.wikipedia.org/wiki/Self</a></li>
<li>2b. Strongtalk <a href="https://en.wikipedia.org/wiki/Strongtalk">https://en.wikipedia.org/wiki/Strongtalk</a></li>
<li>2c. V8</li>
<li>JIT Compiler Types</li>
<li>Tracing JITs</li>
<li>Method JITs</li>
<li>Partial Evaluation</li>
<li>Part 4: Comparison</li>
<li>Part 5: A Proposal</li>
<li><code>[1,2].min</code> を最適化する話</li>
<li>MIPASWAP = Matz is Pragmatic And So We Are Pragmatic ((スライドでは And が抜けていたらしい)[<a href="https://twitter.com/s_osa_/status/675967202814779392">https://twitter.com/s_osa_/status/675967202814779392</a>])</li>
<li>質疑応答</li>
</ul>


<h2>Closing</h2>

<ul>
<li>819 Rubyists! <a href="https://twitter.com/nhance/status/675971298816823296">https://twitter.com/nhance/status/675971298816823296</a></li>
<li>すし詰め <a href="https://twitter.com/yoshiaki_0614/status/675974594025648128">https://twitter.com/yoshiaki_0614/status/675974594025648128</a></li>
<li>RubyKaigi 2016</li>
<li>Sep. 8th .. 10th</li>
<li>京都国際会館</li>
<li>価格は未定だが今年よりは安くしたい</li>
</ul>


<h2>全体の感想</h2>

<ul>
<li>英語がさっぱりだった。</li>
<li>1 日目の寿司チケットを使い損ねた。</li>
<li>本を買うかどうか迷っていたら、買いたかった本はすでに売り切れていて、買わずに済んだ。(荷物が重くならずに済んだ。)</li>
<li>2 日目の会場 Wi-Fi の調子が悪かった。</li>
<li>3 日目も調子が悪いタイミングがあったが、何度かつなぎ直していたら治った。</li>
<li><a href="http://blog.rubykaigi.org/">http://blog.rubykaigi.org/</a> が更新されていなかった。</li>
<li>天気が微妙だった。</li>
<li>久しぶりの人にいろいろ会えた。</li>
<li>みられなかった発表は <a href="http://togetter.com/id/tg__dev">http://togetter.com/id/tg__dev</a> の togetter を参考にスライドを読むと良さそう。</li>
<li>宿が歩いて移動できる範囲で良かった。(会場まで徒歩 20 分ぐらいの場所だった。)</li>
<li>ちょっと遅れ気味の日もあったけど、セッションの開始には遅刻せずに毎日朝から参加できた。</li>
</ul>

]]></content>
  </entry>
  
</feed>
