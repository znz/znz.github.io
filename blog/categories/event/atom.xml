<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: event | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/event/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-07-08T16:40:31+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shinosaka.rb #27 (GraphQL) に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-24-shinosaka-rb-graphql.html"/>
    <updated>2017-06-24T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/shinosaka-rb-graphql</id>
    <content type="html"><![CDATA[<p><a href="https://shinosakarb.doorkeeper.jp/events/61090">Shinosaka.rb #27</a> に参加しました。
Shinosaka.rb 自体は初参加でした。</p>

<p>今回は GraphQL の解説と node と rails でのハンズオンでした。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>メモ</h2>

<ul>
<li><a href="http://www.kokuchpro.com/event/tddbcosaka4/">TDDBC大阪4.0 2017年7月1日（大阪府） - こくちーずプロ（告知'sプロ）</a></li>
<li><a href="https://management30.doorkeeper.jp/events/61787">［認定証発行］アジャイル・リーダーシップとチェンジ・マネジメント・ワークショップ（Management 3.0） - Management 3.0（アジャイル・リーダーシップ、チェンジ･マネジメント、イノベーション・マネジメント） | Doorkeeper</a></li>
<li>自己紹介</li>
<li>QraphQL とは?</li>
<li>単一のエンドポイント</li>
<li>ライブラリーもいろんな言語や環境に対応している</li>
<li>REST API がツライから</li>
<li>GraphQL の微妙な点: pagination, 認証も考慮されていない</li>
<li>React との相性が良い: データ駆動</li>
<li>GitHub が GraphQL を採用: <a href="https://developer.github.com/v4/explorer/">https://developer.github.com/v4/explorer/</a></li>
<li><a href="http://graphql.org/">http://graphql.org/</a></li>
</ul>


<h2>動作確認環境</h2>

<ul>
<li>macOS Sierra 10.12.5</li>
<li>node v8.1.2</li>
<li>npm 5.0.3</li>
<li>graphql などのバージョン: <a href="https://github.com/znz/getting_started_graphql">https://github.com/znz/getting_started_graphql</a> を参照</li>
<li>ruby ruby 2.3.3p222 (2016-11-21 revision 56859) [x86_64-darwin15]</li>
<li>Bundler version 1.15.1</li>
<li>Rails 5.1.1</li>
<li>graphql 1.6.4, graphiql-rails 1.4.2</li>
<li>その他: <a href="https://github.com/znz/getting_started_graphql_ruby">https://github.com/znz/getting_started_graphql_ruby</a> を参照</li>
</ul>


<h2>ソースコード</h2>

<ul>
<li>node 版は <a href="https://github.com/znz/getting_started_graphql">https://github.com/znz/getting_started_graphql</a> を参照</li>
<li>Rails 版は <a href="https://github.com/znz/getting_started_graphql_ruby">https://github.com/znz/getting_started_graphql_ruby</a> を参照</li>
</ul>


<p>途中での graphiql での確認方法は下の作業メモの方に書いてあるので、あわせて参照してください。</p>

<h2>感想</h2>

<p>作業メモが長く続くので、先に感想を書いておきます。</p>

<p>node の方はエラーも json で帰ってきてブラウザーで見えて開発環境として使いやすそうな感じでしたが、
graphiql-rails の方はエラーの時に <code>SyntaxError: Unexpected token &lt; in JSON at position 0</code> とだけ出て、
詳細はサーバー側のログをみないといけないので、node に比べるとちょっと使いづらいかもしれない、と思いました。</p>

<p>GraphQL 自体は色々と利点も多そうだと思いましたが、サーバー側は結局 REST とは別に作り込まないといけなさそうで、
アクセス権限などを考えると、既存のアプリケーションで簡単に置き換えられるものでもなさそうかな、と思いました。</p>

<h2>実際に使ってみる</h2>

<ul>
<li><a href="http://graphql.org/code/">http://graphql.org/code/</a></li>
<li>npm init -y</li>
<li>npm install graphql</li>
</ul>


<h2>step 1</h2>

<p>index.js として以下の内容を作成:</p>

<pre><code>'use strict'

const { graphql, buildSchema } = require('graphql')

const schema = buildSchema(`
type Query {
  foo: String
}

type Schema {
  query: Query
}
`)

const resolvers = {
  foo: () =&gt; 'bar',
}

const query = `
query myQuery {
  foo
}
`

graphql(schema, query, resolvers)
  .then(result =&gt; console.log(result))
  .catch(err =&gt; console.log(err))
</code></pre>

<p>実行結果:</p>

<pre><code>% node.index.js
{ data: { foo: 'bar' } }
</code></pre>

<h2>step 2</h2>

<pre><code>const schema = buildSchema(`
type Query {
  id: ID,
  title: String,
  watched: Boolean,
}

type Schema {
  query: Query
}
`)
</code></pre>

<pre><code>const resolvers = {
  id: () =&gt; 1,
  title: () =&gt; 'bar',
  watched: () =&gt; true,
}
</code></pre>

<pre><code>const query = `
query myQuery {
  id,
  title,
  watched,
}
`
</code></pre>

<pre><code>% node index.js
{ data: { id: '1', title: 'bar', watched: true } }
</code></pre>

<p>query から watched を削ると <code>{ data: { id: '1', title: 'bar' } }</code> になる。</p>

<h2>step 3</h2>

<pre><code>const schema = buildSchema(`
type Video {
  id: ID,
  title: String,
  watched: Boolean,
}

type Query {
  video: Video
}

type Schema {
  query: Query
}
`)
</code></pre>

<pre><code>const resolvers = {
  video: () =&gt;({
    id: 1,
    title: 'bar',
    watched: true
  }),
}
</code></pre>

<pre><code>const query = `
query myQuery {
  video {
    id,
    title,
    watched,
  }
}
`
</code></pre>

<h2>step 4</h2>

<p>videos 対応</p>

<pre><code>const schema = buildSchema(`
type Video {
  id: ID,
  title: String,
  watched: Boolean,
}

type Query {
  video: Video,
  videos: [Video],
}

type Schema {
  query: Query
}
`)
</code></pre>

<pre><code>const videoA = {
  id: 1,
  title: 'title1',
  watched: true
}
const videoB = {
  id: 2,
  title: 'title2',
  watched: false
}
const videos = [videoA, videoB]
</code></pre>

<pre><code>const resolvers = {
  video: () =&gt; ({
    id: 1,
    title: 'bar',
    watched: true,
  }),
  videos: () =&gt; videos,
}
</code></pre>

<pre><code>const query = `
query myQuery {
  videos {
    id,
    title,
    watched,
  }
}
`
</code></pre>

<pre><code>% node index.js
{ data: { videos: [ [Object], [Object] ] } }
</code></pre>

<h2>step 5</h2>

<p><code>yarn add express express-graphql</code> or <code>npm install express express-graphql</code></p>

<p><code>require('graphql')</code> の行の上に追加:</p>

<pre><code>const express = require('express')
const graphqlHTTP = require('express-graphql')
</code></pre>

<p>追加:</p>

<pre><code>const PORT = process.env.PORT || 3000
const server = express()
</code></pre>

<p>末尾の <code>graphql</code> の呼び出しを置き換え:</p>

<pre><code>server.use('/graphql', graphqlHTTP({
  schema,
  graphiql: true,
  rootValue: resolvers,
}))

server.listen(PORT, () =&gt; {
  console.log(`Listening on http://localhost:${PORT}`)
})
</code></pre>

<p><code>http://localhost:3000/graphql</code> を開いて</p>

<pre><code>{
  videos {
    id,
    title,
    watched,
  }
}
</code></pre>

<p>などを試す。</p>

<p>右上の Docs でスキーマも見える。</p>

<h2>step 6</h2>

<p>graphql の require のところを書き換え:</p>

<pre><code>const {
  GraphQLSchema,
  GraphQLObjectType,
  GraphQLID,
  GraphQLString,
  GraphQLBoolean,
} = require('graphql')
</code></pre>

<p>buildSchema を書き換え:</p>

<pre><code>const videoType = new GraphQLObjectType({
  name: 'Video',
  description: 'video',
  fields: {
    id: {
      type: GraphQLID,
      description: 'id of video',
    },
    title: {
      type: GraphQLString,
      description: 'title of video'
    },
    watched: {
      type: GraphQLBoolean,
      description: 'has watched'
    }
  }
})
</code></pre>

<pre><code>const queryType = new GraphQLObjectType({
  name: 'QueryType',
  description: 'root query',
  fields: {
    video: {
      type: videoType,
      resolve: () =&gt; new Promise(resolve =&gt; {
        resolve({
          id: 1,
          title: 'title1',
          watched: true,
        })
      })
    }
  }
})
</code></pre>

<pre><code>const schema = new GraphQLSchema({
  query: queryType,
})
</code></pre>

<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<pre><code>{
  video {
    id
    title
    watched
  }
}
</code></pre>

<p>などを試す。</p>

<h2>休憩</h2>

<h2>id: 1 だけ欲しいときなど</h2>

<p>videos を移動して data.js を作成:</p>

<pre><code>'use strict'

const videoA = {
  id: 1,
  title: 'title1',
  watched: true
}
const videoB = {
  id: 2,
  title: 'title2',
  watched: false
}
const videos = [videoA, videoB]

const getVideoById = (id) =&gt; new Promise(resolve =&gt; {
  const [video] = videos.filter(v =&gt; (v.id + '') === id)
  resolve(video)
})

exports.getVideoById = getVideoById
</code></pre>

<pre><code>const { getVideoById } = require('./data')
</code></pre>

<pre><code>const queryType = new GraphQLObjectType({
  name: 'QueryType',
  description: 'root query',
  fields: {
    video: {
      type: videoType,
      args: {
        id: {
          type: GraphQLID,
          description: 'id of video',
        },
      },
      resolve: (_, args) =&gt; getVideoById(args.id)
    }
  }
})
</code></pre>

<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<pre><code>{
  video(id: 2) {
    id
    title
    watched
  }
}
</code></pre>

<p>などを試す。</p>

<h2>id を必須にしたい</h2>

<p><code>require('graphql')</code> のところに <code>GraphQLNonNull,</code> を追加。</p>

<p><code>type: new GraphQLNonNull(GraphQLID),</code> にする。</p>

<pre><code>{
  "errors": [
    {
      "message": "Unknown operation named \"null\"."
    }
  ]
}
</code></pre>

<p>になってしまったが、 getVideos の追加の後、もう一度試したら動いたので謎。
謎のエラーが発生した時は Prettify を押すとエラーが起きなくなるみたい。</p>

<pre><code>{
  video {
    id
    title
    watched
  }
}
</code></pre>

<p>などを試すと以下のように意図通りのエラーになる。</p>

<pre><code>{
  "errors": [
    {
      "message": "Field \"video\" argument \"id\" of type \"ID!\" is required but not provided.",
      "locations": [
        {
          "line": 2,
          "column": 3
        }
      ]
    }
  ]
}
</code></pre>

<h2>配列</h2>

<p><code>GraphQLList</code> を追加</p>

<p>data.js に追加:</p>

<pre><code>const getVideos = () =&gt; new Promise(resolve =&gt; resolve(videos))
</code></pre>

<pre><code>exports.getVideos = getVideos
</code></pre>

<p>index.js:</p>

<pre><code>const { getVideoById, getVideos } = require('./data')
</code></pre>

<pre><code>    videos: {
      type: new GraphQLList(videoType),
      resolve: getVideos,
    },
</code></pre>

<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<pre><code>{
  videos {
    id
    title
    watched
  }
}
</code></pre>

<p>などを試す。</p>

<h2>mutation</h2>

<p>schema に mutation を追加:</p>

<pre><code>const schema = new GraphQLSchema({
  query: queryType,
  mutation: mutationType,
})
</code></pre>

<p>schema の上に追加:</p>

<pre><code>const mutationType = new GraphQLObjectType({
  name: 'Mutation',
  description: 'Mutation type',
  fields: {
    createVideo: {
      type: videoType,
      args: {
        title: {
          type: new GraphQLNonNull(GraphQLString),
          description: 'title of video',
        },
      },
      resolve: (_, args) =&gt; {
        return createVideo(args)
      }
    },
  },
})
</code></pre>

<p>data.js:</p>

<pre><code>const createVideo = ({ title }) =&gt; {
  const maxId = Math.max.apply(null, videos.map(v =&gt; v.id))
  const watched = false
  const video = {
    id: maxId + 1,
    title,
    watched,
  }
  return video
}
</code></pre>

<p>(videos への push が抜けていた。)</p>

<pre><code>exports.createVideo = createVideo
</code></pre>

<p>index.js:</p>

<pre><code>const { getVideoById, getVideos, createVideo } = require('./data')
</code></pre>

<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<pre><code>mutation M {
  createVideo(title: "hoge") {
    id
    title
    watched
  }
}
</code></pre>

<p>を試す。</p>

<p>この時点の index.js:</p>

<pre><code>'use strict'

const express = require('express')
const graphqlHTTP = require('express-graphql')
const {
  GraphQLSchema,
  GraphQLObjectType,
  GraphQLID,
  GraphQLString,
  GraphQLBoolean,
  GraphQLNonNull,
  GraphQLList,
} = require('graphql')
const { getVideoById, getVideos, createVideo } = require('./data')

const PORT = process.env.PORT || 3000
const server = express()

/*
video
  id
  title
  watched
*/

const videoType = new GraphQLObjectType({
  name: 'Video',
  description: 'video',
  fields: {
    id: {
      type: GraphQLID,
      description: 'id of video',
    },
    title: {
      type: GraphQLString,
      description: 'title of video'
    },
    watched: {
      type: GraphQLBoolean,
      description: 'has watched'
    }
  }
})

const queryType = new GraphQLObjectType({
  name: 'QueryType',
  description: 'root query',
  fields: {
    videos: {
      type: new GraphQLList(videoType),
      resolve: getVideos,
    },
    video: {
      type: videoType,
      args: {
        id: {
          type: new GraphQLNonNull(GraphQLID),
          description: 'id of video',
        }
      },
      resolve: (_, args) =&gt; getVideoById(args.id)
    }
  }
})

const mutationType = new GraphQLObjectType({
  name: 'Mutation',
  description: 'Mutation type',
  fields: {
    createVideo: {
      type: videoType,
      args: {
        title: {
          type: new GraphQLNonNull(GraphQLString),
          description: 'title of video',
        },
      },
      resolve: (_, args) =&gt; {
        return createVideo(args)
      }
    },
  },
})

const schema = new GraphQLSchema({
  query: queryType,
  mutation: mutationType,
})

server.use('/graphql', graphqlHTTP({
  schema,
  graphiql: true,
}))

server.listen(PORT, () =&gt; {
  console.log(`Listening on http://localhost:${PORT}`)
})
</code></pre>

<p>data.js:</p>

<pre><code>'use strict'

const videoA = {
  id: 1,
  title: 'title1',
  watched: true
}
const videoB = {
  id: 2,
  title: 'title2',
  watched: false
}
const videos = [videoA, videoB]

const getVideos = () =&gt; new Promise(resolve =&gt; resolve(videos))

const createVideo = ({ title }) =&gt; {
  const maxId = Math.max.apply(null, videos.map(v =&gt; v.id))
  const watched = false
  const video = {
    id: maxId + 1,
    title,
    watched,
  }
  videos.push(video)
  return video
}

const getVideoById = (id) =&gt; new Promise(resolve =&gt; {
  const [video] = videos.filter(v =&gt; (v.id + '') === id)
  resolve(video)
})

exports.getVideoById = getVideoById
exports.getVideos = getVideos
exports.createVideo = createVideo
</code></pre>

<h2>createVideo の args を分離したい</h2>

<p>require のところに <code>GraphQLInputObjectType,</code> を追加。</p>

<pre><code>const videoInputType = new GraphQLInputObjectType({
  name: 'VideoInputType',
  description: 'video input type',
  fields: {
    title: {
      type: new GraphQLNonNull(GraphQLString),
      description: 'title of video',
    },
  }
})

const mutationType = new GraphQLObjectType({
  name: 'Mutation',
  description: 'Mutation type',
  fields: {
    createVideo: {
      type: videoType,
      args: {
        video: {
          type: new GraphQLNonNull(videoInputType)
        },
      },
      resolve: (_, args) =&gt; {
        return createVideo(args.video)
      }
    },
  },
})
</code></pre>

<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<pre><code>mutation M {
  createVideo(video: {title: "hoge"}) {
    id
    title
    watched
  }
}
</code></pre>

<p>を試す (<code>video:</code> で一段増えているので注意)</p>

<pre><code>{
  videos {
    id
    title
  }
}
</code></pre>

<p>などを試す。</p>

<h2>休憩</h2>

<h3>createVideo も Promise にするとどうか</h3>

<p>createVideo の末尾を <code>return Promise.resolve(video)</code> にしても問題なく動いた。</p>

<h2>ruby でどうか</h2>

<ul>
<li><code>rails new getting_started_graphql_ruby</code></li>
<li><a href="http://graphql-ruby.org/getting_started">http://graphql-ruby.org/getting_started</a></li>
<li>Gemfile に <code>gem 'graphql'</code> を追加</li>
<li><code>bundle install</code></li>
<li><code>rails g graphql:install</code></li>
<li>Gemfile に <code>graphiql-rails</code> が追加されているので <code>bundle install</code></li>
</ul>


<h2>video 追加</h2>

<ul>
<li><code>rails g graphql:object Video id:Int title:String watched:Boolean</code></li>
<li>id は Int ではなく ID が正しいので <code>rails d graphql:object Video id:Int title:String watched:Boolean</code> で消してやり直し</li>
<li><code>rails g graphql:object Video id:ID title:String watched:Boolean</code></li>
<li><code>app/graphql/types/query_type.rb</code> を変更</li>
</ul>


<pre><code>  field :video do
    type Types::VideoType
    argument :id, !types.ID
    description 'Find video by ID'
    resolve -&gt;(obj, args, ctx) { Video.find(args["id"]) }
  end
</code></pre>

<p><code>rails s</code> を起動して <code>http://localhost:3000/graphiql</code> (express-graphql での例と違って <code>/graphql</code> ではなく <code>i</code> が入る) で</p>

<pre><code>{
  video(id: 1) {
    id
    title
  }
}
</code></pre>

<p>を試すと server 側で <code>NameError (uninitialized constant Video):</code> になるのを確認。</p>

<ul>
<li><code>rails g model video title watched:boolean</code></li>
<li><code>rake db:migrate</code></li>
<li><code>rails c</code> で <code>Video.create(title: "Hoge", watched: false)</code> などでレコードを作成しておく</li>
<li>graphiql で試す</li>
</ul>


<pre><code>{
  video(id: 1) {
    id
    title
    watched
  }
}
</code></pre>

<h2>mutation</h2>

<ul>
<li><code>app/graphql/mutations/create_video.rb</code></li>
</ul>


<pre><code># 動かない
Mutations::CreateVideo = GraphQL::Relay::Mutation.define do
  name "CreateVideo"

  return_field :video, Types::VideoType

  input_field :title, !types.String

  resolve -&gt;(obj, args, ctx) {
    return Video.create(title: args["title"])
  }
end
</code></pre>

<ul>
<li><code>app/graphql/getting_started_graphql_ruby_schema.rb</code> に <code>mutation(Mutations::CreateVideo)</code> を追加</li>
<li><code>GraphQL::Schema::InvalidTypeError (CreateVideo has an invalid type: must be an instance of GraphQL::BaseType, not GraphQL::Relay::Mutation</code> になってうまくいかない</li>
<li><code>rails g graphql:mutation</code> は relay mutation 用で違うらしい</li>
</ul>


<h2>クライアント</h2>

<ul>
<li><a href="http://dev.apollodata.com/react/">http://dev.apollodata.com/react/</a> が redux っぽくてしっくりきたらしい。</li>
<li>rack-cors の設定が必要?</li>
<li><a href="https://github.com/facebook/relay">https://github.com/facebook/relay</a></li>
</ul>


<h2>mutation の動くコード例</h2>

<p>rito さんに動く例をみせてもらって修正。</p>

<p><code>app/graphql/mutations/video.rb</code>:</p>

<pre><code>Mutations::Video = GraphQL::ObjectType.define do
  name "mutation"

  field :video, Types::VideoType do
    description "Create a video"
    argument :title, !types.String

    resolve -&gt;(obj, args, ctx) {
      Video.create(title: args["title"], watched: false)
    }
  end
end
</code></pre>

<p>(<code>name "Video"</code> にすると <code>Duplicate type definition found for name 'Video'</code> で動かなかった。)</p>

<p><code>app/graphql/getting_started_graphql_ruby_schema.rb</code>:</p>

<pre><code>GettingStartedGraphqlRubySchema = GraphQL::Schema.define do
  query(Types::QueryType)
  mutation(Mutations::Video)
end
</code></pre>

<p><code>http://localhost:3000/graphiql</code> で以下を試す。</p>

<pre><code>mutation M {
  video(title: "foo") {
    id
    title
    watched
  }
}
</code></pre>

<pre><code>{
  video(id: 2) {
    id
    title
    watched
  }
}
</code></pre>

<p>追加されたのがみえたら OK</p>

<p>時間切れで試せなかったけど、 mutation を複数追加する場合はどうなるのかがわからなかった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian 9 "Stretch" リリースパーティ in 関西に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-18-kansai-debian-meeting.html"/>
    <updated>2017-06-18T13:24:10+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://debianjp.connpass.com/event/59443/">Debian 9 &ldquo;Stretch&rdquo; リリースパーティ in 関西</a>に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<h2>オープニング</h2>

<ul>
<li>リリースされたらしい。</li>
<li>リリースノートからのパッケージのバージョンいろいろ</li>
<li>変更点いろいろ</li>
<li>MariaDB → MySQL</li>
<li>GnuPG</li>
<li>デバッグシンボル向けの新しいアーカイブ: stretch-debug</li>
<li>Xorg サーバーは root 権限が不要になった</li>
<li>sysvinit だと X で問題がおきるらしい?</li>
<li>upstart はなくなったらしい</li>
<li>Perl 関連で問題が起きる可能性がある?</li>
</ul>


<h2>さくらインターネット様からお知らせ</h2>

<p>さくらの VPS やさくらのクラウドでは ISO イメージアップロードで使えますという話</p>

<h2>オープニング続き</h2>

<ul>
<li><a href="https://www.debian.org/News/2017/20170617">https://www.debian.org/News/2017/20170617</a></li>
<li>リリースが確認できたので乾杯に移行</li>
</ul>


<h2>デスクトップ環境の話</h2>

<ul>
<li>インストーラーの途中でデスクトップ環境が選べるようになった</li>
<li>リリースノートとインストールガイドは流し読みで良いのでみておくと良い</li>
<li>UEFI は対応しているが、セキュアブート対応は見送られた</li>
<li>プロプライエタリなファームウェアが必要なハードウェアの場合はフェームウェア入り非公式イメージを使うのが楽</li>
<li>カーネルにおけるフリーと Debian のフリーが違うので、そういうもの (非公式イメージ) が存在する</li>
<li>non-free が Debian 公式ではないのと同様の意味で非公式</li>
<li>root パスワードを設定しなければ root を無効にして sudo を使うようにできる (以前からそうだった)</li>
<li>netinst の iso でデスクトップ環境のみチェックして個別のデスクトップ環境を選ばなかった場合は GNOME になる</li>
<li>複数入れた場合にどうなるのかは未調査</li>
<li>というわけで GNOME デスクトップの話</li>
<li>GNOME 3 は初見だと使い方がわからない</li>
<li>今回は gnome-initial-setup パッケージが追加されたので案内が出るかと思ったら出ない?</li>
<li>gnome-initial-setup パッケージを手動で入れてログアウトしてログインし直すと出る</li>
<li>初期設定の後、ヘルプが開く</li>
<li>gnome-initial-setup で設定されていないと、キーボード設定が英語キーボードになっている</li>
<li>フォントを入れる</li>
<li>フォントを削除する</li>
<li>fonts-droid-fallback が Android でのいわゆる中華フォントなので、完全削除すると良い</li>
<li>Noto Serif CJK は backports に入るらしい</li>
<li>ターミナルとか向けには migmix とか ricty とか</li>
<li>丸いフォントが好みでない人は fonts-vlgothic を消して IPA フォントを使うと良い</li>
<li>ツッコミで fontconfig が難しい話</li>
<li>右上から開ける設定の他に Tweak Tool</li>
<li>GNOME 拡張機能は JavaScript と CSS でできている</li>
<li>主要なものはパッケージで入れるのが良いのでは</li>
<li>オススメ: gnome-shell-extension-dashtodock, gnome-shell-extension-top-icons-plus</li>
<li>会場から: Alt+F2 r Enter で gnome-shell が再起動する</li>
<li>uim-toolbar-gtk3-systray が出てこない?</li>
<li>起動順序の問題で uim-toolbar-gtk3-systray の後に gnome-shell が起動するので認識されていない</li>
<li>回避策1: gnome-shell を再起動</li>
<li>回避策2: alternative で /bin/true にしておいて uim-toolbar-gtk3-systray は autostart でユーザーが起動する</li>
<li>回避策3: uim を諦める</li>
<li>お好みで: gnome-shell-extension-move-dock, gnome-shell-extension-remove-dropdown-arrows, gnome-shell-extension-impatience, gnome-shell-extension-suspend-button</li>
<li>パッケージ以外の拡張機能は GNOME Shell Extensions というサイトから</li>
<li>ブラウザー拡張の chrome-gnome-shell でアップデートがブラウザー経由でできる</li>
<li>Dash to Panel と Arc Menu で Windows 風にできる</li>
<li>デスクトップにアイコンを表示して Nautilus のアイコンサイズを変更するとデスクトップのも一緒に変わる</li>
<li>隠し設定で切り離すこともできるらしい</li>
<li>プロプライエタリなビデオドライバを使うなら contrib と non-free は必須</li>
<li>backports の話</li>
<li>software-properties-gtk で (synaptic から) 追加すると /etc/apt/trusted.gpg が壊れるのに昨日気づいた</li>
<li>Firefox ESR の Accept-Language が en のまま</li>
<li>削除して登録し直すとなおる</li>
</ul>


<p>追加で Debian T シャツの話</p>

<h2>Ryzen の話</h2>

<ul>
<li>lurdan さん</li>
<li>Ryzen の話</li>
<li><a href="https://www.sakura.ad.jp/koukaryoku/">機械学習、データ解析なら 高火力コンピューティング | さくらインターネット</a></li>
<li><a href="http://itpro.nikkeibp.co.jp/atcl/column/14/346926/022700857/">ニュース解説 - グーグルもGPUクラウドに参入、4社のコスパ比較：ITpro</a></li>
<li>テラフロップスあたりの月額料金が安い</li>
<li>時間貸しなどの時は初期費用はいらないらしい</li>
<li>Ubuntu インストールしたての状態なので、使うパッケージなどのインストール作業が必要</li>
<li><a href="https://www.sakura.ad.jp/education/">さくらの文教向けソリューション｜さくらインターネット</a></li>
<li>Ryzen の話に戻り</li>
<li>linux kernel 4.10 から対応コードが入っている</li>
<li>その他の対応も考えると 4.11 以降が望ましい</li>
<li>Proxmox は Debian のユーザーランドに Ubuntu zesty のカーネルなので、こういう用途の自宅サーバーには Proxmox VE が良いのではないか</li>
<li><a href="https://twitter.com/search?q=%23Ryzen_SEGV_Battle">#Ryzen_SEGV_Battle - Twitter検索</a></li>
</ul>


<h2>Stretch リリース</h2>

<ul>
<li>uwabami さん</li>
<li>アップグレードの人柱の話</li>
<li>何台もあげたが特にはまらなかった</li>
<li>リリースノート読み</li>
<li><a href="https://www.debian.org/releases/stretch/amd64/release-notes/ch-whats-new.ja.html">第2章 Debian 9 の最新情報</a></li>
<li><a href="https://www.debian.org/releases/stretch/amd64/release-notes/ch-information.ja.html">第5章 stretch で注意すべき点</a></li>
<li>pass がおすすめ</li>
<li>net-tools パッケージ (ifconfig など) が非推奨</li>
<li>sl 的なものを設定するのが良いかも</li>
<li>PIE: カーネルを更新しておかないとセグメンテーションフォルトになる可能性があるので jessie でもちゃんと 8.8 (以降) に更新してから stretch にあげ始める必要がある</li>
<li>一番のハマりどころになりそう</li>
<li>セキュリティサポートの制限</li>
<li>midori, konqueror などは完全なセキュリティサポートがないので Firefox や Chromium を使いましょう</li>
<li>node.js はリソース不足で一切対応されない</li>
<li>php とかコンパイラー対応がなくなった Chromium とか WordPress とか、セキュリティサポートがなくなった例は過去にもある</li>
<li><a href="https://security-tracker.debian.org/tracker/">Security Bug Tracker</a></li>
<li>「旧式の暗号と SSH1 プロトコルは OpenSSH では標準で無効にされています」</li>
<li>evdev から libinput</li>
<li>「Perl での変更がサードパーティ製ソフトウェアを壊す可能性があります」</li>
<li>カレントディレクトリが <code>@INC</code> からなくなる話</li>
<li>ライブアップグレード</li>
<li>jessie のまま最新に更新を確認</li>
<li>apt line 書き換え</li>
<li>apt-get update</li>
<li>apt-get upgrade</li>
<li>apt-get dist-upgrade</li>
<li><a href="https://wiki.debian.org/UnattendedUpgrades">UnattendedUpgrades - Debian Wiki</a></li>
<li>設定ファイルは選択に応じて <code>*.dpkg-old</code> とか <code>*.dpkg-dist</code> ができる</li>
<li>apt autoremove</li>
<li>reboot</li>
<li>sysvinit にしていたので systemd に移行</li>
<li>sysvinit がなくなったので sudo reboot は進むがコンソールに帰ってこなくなるので、処理が進んだ段階でブチっと切れて進む</li>
<li>atig は bundle し直しで動いた</li>
<li>znc も何か直したら動いた</li>
<li>bitlbee は動いていなかった</li>
<li>さくらインターネットさんで借りている VPS の stretch への upgrade の Live 実演終了</li>
</ul>


<h2>LT</h2>

<p>ここから LT タイム。</p>

<h2>最新ハードウェアへのインストール</h2>

<ul>
<li>初めて Jessie をインストールしたときに起きたエラーについて</li>
<li>「ブートローダーのインストールに失敗しました。」</li>
<li>原因: GRUB が NVMe に対応していない</li>
<li>解決策1: NVMe 規格の SSD を買わない (おすすめは SATA)</li>
<li>解決策2: NVMe に対応しているブートローダーを使う</li>
<li>NVMe に対応しているブートローダー: rEFInd</li>
</ul>


<p>「ブートローダーのインストールに失敗しました。」というメッセージは見覚えがあったので、インストーラーで出たメッセージだとすぐにわかったけど、わからなかった人もいたようで、どんな状況で見たのか思い出そうとしたけど、思い出せなかったので、仮想環境か何かで特殊なことをしていて出ただけで困らなかったのかもしれない、と思った。</p>

<h2>yabuki さんの話</h2>

<p>自分の準備中で聞けず。</p>

<h2>Debian での OpenSSH の TCP wrappers サポート</h2>

<p>なぜか HDMI を接続しても反応しなかったので、PDF にして、さとうさんの PC を借りて発表しました。</p>

<p>発表資料はいつも通り<a href="https://github.com/znz/openssh-on-debian9">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/openssh-on-debian9/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/stretchopensshtcp-wrappers">slideshare</a>, <a href="https://speakerdeck.com/znz/stretchdefalseopensshfalsetcp-wrapperssapoto">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-openssh-on-debian9">RubyGems</a> にあげています。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/openssh-on-debian9/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/openssh-on-debian9/" title="stretchでのOpenSSHのTCP wrappersサポート">stretchでのOpenSSHのTCP wrappersサポート</a>
</div>


<h2>T シャツの話</h2>

<p>欲しい人は OSC 京都や勉強会で、または @nogajun さんに直接連絡</p>

<h2>告知</h2>

<ul>
<li>次回は 7月はなしで、代わりに<a href="https://www.ospn.jp/osc2017-kyoto/">オープンソースカンファレンス2017 Kyoto</a>の8月5日で。</li>
<li><a href="https://k-of.jp/">KOF</a> (今年のサイトはまだない)</li>
<li><a href="https://histudy.connpass.com/">姫路IT系勉強会</a>の8月が今回と同じさくらインターネットさんが会場</li>
</ul>


<h2>感想</h2>

<p>リリースは twitter などではリリースされたっぽい感じでしたが、たぶん最後のアナウンスっぽい<a href="https://lists.debian.org/debian-announce/2017/msg00003.html">リリースアナウンスのメール</a>が「Sat, 17 Jun 2017 20:22:36 -1000」つまり日本時間だと「2017-06-18 15:22:36 +0900」で、少なくともリリースパーティー中にはリリースされていたようです。</p>

<p>すでにあげた人の話では、特に大きなトラブルもなさそうなので、安心してあげられそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 123 回関西 Debian 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-28-kansai-debian-meeting.html"/>
    <updated>2017-05-28T13:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://debianjp.connpass.com/event/57323/" title="第 123 回関西 Debian 勉強会">第 123 回関西 Debian 勉強会</a>に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<p>Apache Arrow の勉強会の後、一緒にランチに行くのに参加していたら、ちょっと遅くなってしまって、 13:40 すぎに到着しました。</p>

<h2>オープニング</h2>

<ul>
<li>事前課題は必須項目になっていなかったため、 connpass での参加登録時に出ていなかったので、その場で発表して資料が更新されていた。</li>
<li>初参加の人がいた</li>
<li>初めて作った人とか長い間使っていない人とか</li>
<li>easypg は表示は復号されているがメモリダンプをしても平文はないらしい</li>
<li>期限切れと revoke の違い: 期限切れはのばせるが、 revoke は取り消せない</li>
</ul>


<p>ruby の svn のコミットに必要という話は <a href="https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowto">https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowto</a> <a href="https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowtoJa">https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowtoJa</a> あたりに書いてあるのですが、今見ると <code>ssh-keygen -b 2048 -f ruby_key</code> になってて古い感じ。英語の方は <code>~/.ssh/id_rsa or ~/.ssh/id_dsa</code> と書いてあるのでもっと古い感じが。</p>

<h3>途中で矢吹さんの話</h3>

<ul>
<li>カジュアルに使うのも良いけど、暗号関連は色々気にしている人もいるので気をつけましょう (色々なポリシーがあるのを尊重しましょう) という話とか</li>
<li>cypherpunk : 暗号の民主化</li>
<li>FST-01 を入手した (まだ秘密鍵は入れていない) ので回覧</li>
</ul>


<h2>GnuPG にまつわるアレコレ - GnuPG2 とか Keybase とか Yubikey とか</h2>

<ul>
<li>key id は昔は 8 文字だったけど conflict が作れるという話になって、今は 16 文字 (以上?) が普通らしい</li>
<li>(勉強会中に聞きそびれてしまったけど、GPG の key id が fingerprint の末尾っていうのは、みんなどうやって知るんだろう?)</li>
<li>(自分は昔の key sign party で fingerprint しか書いてないけど、どうやって fetch するの? と聞いたときに教えてもらったけど。)</li>
<li>GnuPG とは?</li>
<li>OpenPGP: RFC になっている</li>
<li>暗号化によって盗聴を防ぐ (機密性)</li>
<li>署名によって改ざんを検知可能にする (完全性)</li>
<li>例: secure-apt, DKIM</li>
<li>信頼の輪 (Web of trust) によって本人を同定</li>
<li>過去の資料の参照情報紹介</li>
<li><a href="https://wiki.debian.org/KansaiDebianMeeting/20150823" title="第 101 回 関西 Debian 勉強会">第 101 回 関西 Debian 勉強会</a>の「wiki:Subkeys」が気になった</li>
<li>Windows の GUI の GPG クライアントで良いものがない</li>
<li>mac は GPG Tools というので標準の Mail.app で GPG 対応できるらしい</li>
<li>Web メールで困る話</li>
<li>Thunderbird は Enigmail</li>
<li>鍵の選び方の話</li>
<li>ED25519 は gnupg 1.4 系 (今は oldstable ブランチ) で復号できない</li>
<li>今の所は互換性のための RSA4096 と速い ED25519 を併用するのが良いかもしれない</li>
<li>GnuPG 2 - Stretch での変更点</li>
<li>gnupg (1.4 → 2.1), gnupg1 (なし → 1.4), gnupg2 (2.0 → drop)</li>
<li>gnupg 2.1 は初回実行時に自動的に移行が実行されて、2.1 用のファイル (<code>pubring.kbx</code> とか <code>private-keys-v1.d/</code> とか) が作成される</li>
<li>古いバージョン用のファイル (<code>pubring.gpg</code> とか <code>secring.gpg</code> とか) はそのまま残るので古いバージョンの共存も可能 (だがそれぞれのバージョンのファイルしか更新されないので、併用すると情報がずれていくはず)</li>
<li>2.0 がどっちのファイルを使うのかは検証してないので不明</li>
<li>プログラムの分離具合が整理された (<a href="http://miniconf.debian.or.jp/">Mini Debian Conference Japan 2016</a> の<a href="http://miniconf.debian.or.jp/assets/files/gnupg-now.html">g新部さんのスライド</a> の図が非常にわかりやすい (GnuPG programs (2) の図))</li>
<li>proxy 設定が gpg.conf から dirmngr.conf に変わった</li>
<li>use-gpg-agent が obsolete (常に有効で単純に無視される)</li>
<li>大量の ssh 接続に使うと scdaemon がエントロピーが足りないという話</li>
<li>haveged (はべーじでぃー(と言っていた)) とか rng-tools とか</li>
<li>disable-scdaemon をつけておくと無駄に scdaemon が起動しなくなる (gpg-agent から scdaemon が起動して scdaemon 対応のデバイスがなければ、すぐに gpg-agent に返ってくるらしいが、起動するだけ無駄という話)</li>
<li>gpg-agent を ssh-agent として使うのは簡単</li>
<li>GNOME で gnome keyring daemon は止めやすい</li>
<li>mate や xfce では ssh-agent を止めにくい</li>
<li>ssh-agent を入れないときは <code>.xsessionrc</code> で <code>SSH_AUTH_SOCK</code> を自分で設定する必要がある</li>
<li>mate や xfce では <code>.xsessionrc</code> で設定しても、さらに上書きされるらしい</li>
<li>YubiKey <a href="https://yubikey.yubion.com/">https://yubikey.yubion.com/</a> <a href="https://www.cloudgate.jp/yubikey.html">https://www.cloudgate.jp/yubikey.html</a></li>
<li>ED25519 には対応していない</li>
<li>RSA 4096 で復号で 0.5 秒ぐらい</li>
<li>(後でし</li>
<li>Qt5 での GUI ツールとコマンドラインツールがある</li>
<li>keybase.io というサービスがあるらしいが秘密鍵もアップロードできるらしく?</li>
<li>アカウントを作ってみた <a href="https://keybase.io/uwabami">https://keybase.io/uwabami</a> が消すかも。</li>
<li><a href="https://github.com/keybase/client">https://github.com/keybase/client</a> には大量の Issues が。</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>今後の予定</li>
<li>来月は17日に stretch がリリース予定なので、25日から18日に予定を変更してリリースパーティの可能性が高そう</li>
</ul>


<h2>よくわからないままだった点</h2>

<ul>
<li>懇親会への移動中などにある程度話しましたが</li>
<li><code>gpg --version</code> で出てくる「公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA」の「EDDSA」(ECDSA ではなく)と「ED25519」は同じ?</li>
<li>Curve25519 と ED25519 の関係</li>
<li><a href="https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%89%E3%83%AF%E3%83%BC%E3%82%BA%E6%9B%B2%E7%B7%9A%E3%83%87%E3%82%B8%E3%82%BF%E3%83%AB%E7%BD%B2%E5%90%8D%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0" title="エドワーズ曲線デジタル署名アルゴリズム">エドワーズ曲線デジタル署名アルゴリズム</a> に多少説明がある</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【5/28大阪】データ分析用次世代データフォーマットApache Arrow勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-28-apache-arrow.html"/>
    <updated>2017-05-28T10:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/apache-arrow</id>
    <content type="html"><![CDATA[<p><a href="https://classmethod.connpass.com/event/56478/" title="【5/28大阪】データ分析用次世代データフォーマットApache Arrow勉強会">【5/28大阪】データ分析用次世代データフォーマットApache Arrow勉強会</a>に参加しました。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場</h2>

<p>早めに到着していたのですが、1階の入り口があいていなくて、案内してもらうまではいれませんでした。</p>

<h2>ハッシュタグ</h2>

<p><code>#osaka_arrow</code></p>

<h2>会場アンケート</h2>

<ul>
<li>普段使ってる言語</li>
<li>データ分析をしているか</li>
<li>使っているならツールは?</li>
</ul>


<p>使ってる言語としては Python や Ruby や C# が多い?
データ分析をしていない人も多かったけど、している人はデータ分析には Python や R が多い?</p>

<h2>スライドなど</h2>

<ul>
<li>今回のメインのスライドは (まだ?) 公開されていないっぽい? (<a href="https://slide.rabbit-shocker.org/">https://slide.rabbit-shocker.org/</a> にはなかった)</li>
<li>Arrow については <a href="https://slide.rabbit-shocker.org/authors/kou/data-science-rb/">RubyもApache Arrowでデータ処理言語の仲間入り</a> を使って説明 (Apache Arrow とは何なのかがわかるので、一読をオススメします。)</li>
<li>今回は Apache Arrow がメインなので Ruby 関連のところは飛ばしていた。</li>
<li>以下の関連資料の URL は <code>#osaka_arrow</code> でツイートしてから飛ばしつつ説明していました。</li>
<li><a href="https://www.slideshare.net/wesm/nextgeneration-python-big-data-tools-powered-by-apache-arrow">Next-generation Python Big Data Tools, powered by Apache Arrow</a></li>
<li><a href="https://www.slideshare.net/wesm/memory-interoperability-in-analytics-and-machine-learning">Memory Interoperability in Analytics and Machine Learning</a></li>
<li><code>#osaka_arrow</code> でWesさん(Arrow のメイン開発者?)のblogの翻訳をしている方が以下の翻訳の URL をツイートしていました。</li>
<li><a href="http://qiita.com/tamagawa-ryuji/items/deb3f63ed4c7c8065e81">（翻訳）2017年の展望: pandas, Arrow, Feather, Parquet, Spark, Ibis</a></li>
<li><a href="http://qiita.com/tamagawa-ryuji/items/9ba22061fc78907a5826">（翻訳）毎秒10GBでArrowからpandasへ</a></li>
</ul>


<h2>メモ</h2>

<ul>
<li>Feather は R と Python の間だけ用の Arrow のようなもの</li>
<li>作っている人が同じで Feather での知見が Arrow に生かされている</li>
<li>Parquet は保存用でデータサイズを小さくすることを重視</li>
<li>Parquet は無圧縮もできて、それだとサイズが大きくなることがある</li>
<li>Arrow や Parquet は特定の列だけ読むとかもできるので、サイズが同じでも処理効率がよくなることがある</li>
<li><p>多次元配列 (テンソル) は中身が同じ型で、そういう用途向けに最適化されている</p></li>
<li><p>Wes McKinney さん: pandas を作った人でその知見が Arrow にも生かされている</p></li>
<li><p>Hadoop のディストリビューター</p></li>
<li><p>SlideShare で apache arrow で検索すると色々資料がみつかる</p></li>
<li><p>zero-copy が大事</p></li>
<li>in memory が前提としてある</li>
<li>メモリレイアウトや record batch とかもその関連</li>
<li>メモリに収まるような record batch のサイズ指定は API で手動設定</li>
<li>Arrow は基本的に read only</li>
<li>元データはアプリケーション次第</li>
<li><p>IPC: 同じマシンなら mmap とか</p></li>
<li><p>PySpark だと JVM と Python とのやりとりが重い</p></li>
<li>個別にチューニングするのは無駄なので Arrow でみんなで共通のチューニングをする</li>
<li><p>Ruby のオブジェクトにすると変換すると負けなので、高速に処理したい場合は Arrow の世界で演算も済ませる必要がある</p></li>
<li><p>streaming もある</p></li>
<li><p>開発に参加しようという話</p></li>
<li><a href="https://issues.apache.org/jira/browse/ARROW/">https://issues.apache.org/jira/browse/ARROW/</a></li>
<li><p><a href="https://red-data-tools.github.io/">https://red-data-tools.github.io/</a></p></li>
<li><p>質問タイム</p></li>
<li>fluentd で message pack をパースしてルーティングの情報だけ読んでまた message pack にシリアライズして、だと読んでない部分のパースとシリアライズが無駄なので、そこを arrow で置き換えると改善できないかなあという話</li>
<li>Red Data Tools の名前の由来: Ruby に限定したくなかったので redmine などで使われている red と PyData などの Data を組み合わせて、 red data だけだと絶滅危惧種などの意味とぶつかるので、何が良いか悩んで最終的に tools をつけた。</li>
<li>データベースとの絡み</li>
</ul>


<h2>まとめ</h2>

<p>基本的には開発者としての参加をしやすくするための勉強会でした。
Apache Arrow 自体でデータ分析ができるようになるわけではなく、ツールを作るための共通基盤という感じでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[関西Ruby会議2017に参加しました #kanrk2017]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-27-kansairubykaigi2017.html"/>
    <updated>2017-05-27T21:09:15+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansairubykaigi2017</id>
    <content type="html"><![CDATA[<p><a href="http://regional.rubykaigi.org/kansai2017/" title="関西Ruby会議2017">関西Ruby会議2017</a>に参加しました。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>オープニング</h2>

<ul>
<li>スポンサーの紹介</li>
<li>会場のトイレの場所などの説明</li>
</ul>


<p>オープニングでは何も言っていませんでしたが、ハッシュタグは <code>#kanrk2017</code> のようでした。(doorkeeper のイベントページからツイートしようとするとつく)</p>

<h2>スポンサーセッション</h2>

<p>最初はアジャイルウェアさんのスポンサーセッションでした。</p>

<h2>基調講演: 株式会社クリアコード</h2>

<ul>
<li>「株式会社クリアコード」というタイトルの発表</li>
<li>テーマ: コミュニティーとビジネス</li>
<li>twitter 連携が下に出ていた。たぶん <a href="https://rabbit-shocker.org/ja/rabbiter/" title="Rabbiter">Rabbiter</a> (Rabbitter ではない) です。</li>
<li>大事にしていること: フリーソフトウェアの推進と稼ぐことの両立</li>
<li>学んだこと1: 問題は upstream で直す</li>
<li>フリーソフトウェアが大事にしていることの1つは「直せること」！</li>
<li><a href="http://www.clear-code.com/blog/2011/12/6.html" title="デバッグ力: よく知らないプログラムの直し方 - ククログ(2011-12-06)">デバッグ力: よく知らないプログラムの直し方 - ククログ(2011-12-06)</a></li>
<li>学んだこと2: 開発を続けられるコードを書く</li>
<li>継続的に開発とビジネス</li>
<li>長期間一緒にやれる仕事を優先</li>
<li>フリーソフトウェア開発の世界</li>
<li>ユースケースを確認する</li>
<li>学んだこと3: 相手が想像しなくてもわかるように説明する</li>
<li>学んだこと4: 楽しく開発する</li>
<li>学んだこと5: 非難するよりも手を動かす</li>
<li>学んだこと6: 回避策よりも根本解決</li>
<li>受託開発の優先度</li>
<li>a: フリーソフトウェアを直接的に推進できる仕事</li>
<li>b: フリーソフトウェアを間接的に推進できる仕事</li>
<li>c: いずれ推進につながりそうな仕事</li>
<li>FLOSSサポート: 導入支援と障害調査</li>
<li>事例：Firefox/Thunderbirdの企業導入</li>
<li>公開することで宣伝にもなるので次の仕事に繋がることがある</li>
<li>OSS開発支援</li>
<li>どうして仕事になるか</li>
<li>OSSのエコシステムに参加</li>
<li>自分たちのソフトウェアとOSSを同じように扱う</li>
<li>問題があれば直す</li>
<li>気になるところがあれば共有</li>
<li>仕事の作り方: お客さんに見つけてもらう</li>
<li>お客さん探しを頑張らない</li>
<li>諦めることは大事</li>
<li>決断</li>
<li>決断する基準があると楽しめる (自分の中で基準がはっきりしていないうちは大変だった)</li>
<li>クリアコードの基準: フリーソフトウェアの推進と稼ぐことの両立</li>
<li>お客さん探しと稼ぐこと</li>
<li>推進と稼ぐことの両取り</li>
<li>推進→見つけてもらった例: milter manager</li>
<li>最近の推進兼営業活動: Apache Arrow</li>
<li><a href="https://classmethod.connpass.com/event/56478/" title="【5/28大阪】データ分析用次世代データフォーマットApache Arrow勉強会 - connpass">【5/28大阪】データ分析用次世代データフォーマットApache Arrow勉強会 - connpass</a></li>
<li>採用</li>
<li>マッチする人は少なそう</li>
<li>業務内容ではなくポリシーでマッチ</li>
<li>フリーソフトウェアの推進 → 見つけてもらう</li>
<li>RubyKaigiにスポンサー: Rubyを応援したいので始めた, 採用は期待していなかった</li>
<li><a href="https://slide.rabbit-shocker.org/authors/kou/kansai-rubykaigi-2017/" title="株式会社クリアコード - Kouhei Sutou - Rabbit Slide Show">株式会社クリアコード - Kouhei Sutou - Rabbit Slide Show</a></li>
<li>質疑応答</li>
<li>かくたにさんを指名</li>
<li>とてもいい会社説明会でした</li>
<li>joker1007 さん: upstream に取り込まれなかった場合は?</li>
<li>一言で言うとケースバイケース</li>
<li>ユースケースに合わせた形で再検討</li>
<li>?: フリーソフトウェアと OSS という言葉の使い分け</li>
<li>本質が大事だと思うときはフリーソフトウェア</li>
<li>お客さん視点のときは OSS</li>
<li>クリアコード視点だとフリーソフトウェア</li>
<li>外からは OSS</li>
<li>あとで個別に説明します</li>
<li>むりょういさん: 使っているソフトウェアについて(?) (ちゃんと聞き取れなかった)</li>
<li>Firefox / Thunderbird: すでにノウハウがあった(?) (ちゃんと聞き取れなかった)</li>
<li>Apache Arrow: いけると思って推進している</li>
<li><a href="https://slide.rabbit-shocker.org/authors/kou/kansai-rubykaigi-2017">https://slide.rabbit-shocker.org/authors/kou/kansai-rubykaigi-2017</a></li>
</ul>


<h2>休憩</h2>

<p>スポンサーブースとどら焼きの案内があった。</p>

<h2>Rubyでデータサイエンスを行うための取り組み</h2>

<ul>
<li>ko1 さんと mrkn さんが始めた活動</li>
<li>データサイエンスは技術的にどうおもしろいか</li>
<li>データサイエンスとは</li>
<li>データソース (Excel, RDB, &hellip;) - 前処理 (文字列整形, 欠損値処理, &hellip;) - 分析 (機械学習, 統計) - 可視化 (散布図, 棒, 箱ひげ, &hellip;) - 多次元データの理解, モデルに基づいた予測</li>
<li>データサイエンスは、9割を前処理に費す</li>
<li>具体例</li>
<li>近年の状況</li>
<li>データが増えている</li>
<li>データ分析環境が進歩している</li>
<li>データサイエンスの民主化が進んでいる</li>
<li>Ruby のデータサイエンスの現状</li>
<li>ウェブブラウザからのRubyの実行</li>
<li>データサイエンスに関わるRubyのgem群</li>
<li>docker で試す</li>
<li><a href="https://hub.docker.com/r/sciruby/">https://hub.docker.com/r/sciruby/</a> <a href="https://hub.docker.com/r/rubynumo/">https://hub.docker.com/r/rubynumo/</a> のあたり?</li>
<li>PyCall について</li>
<li>Arrow を介した Ruby 外言語との連携</li>
<li>Python と R が二大言語</li>
<li>Python でできるけど R だと簡単にできないとか R だとできるけど Python だと簡単にできないとかいうときにも Arrow で簡単に連携できるようになったらしい</li>
<li>コミュニティの重要性</li>
<li>(red-)arrow の出現に伴う変化?</li>
<li>複数言語の連携が容易になる</li>
<li>他言語にはない優位性を持つ gem や独自機能を持つ gem が求められる?</li>
<li><a href="http://sciruby-slack.herokuapp.com/">http://sciruby-slack.herokuapp.com/</a></li>
<li><a href="https://gitter.im/red-data-tools/">https://gitter.im/red-data-tools/</a></li>
<li>質疑応答</li>
<li>発表者: データサイエンスに興味がある人が少ない?</li>
<li>joker1007 さん: Ruby でやれると嬉しいが、目の前の問題を解決するには他の手段を使ってしまう。 Ruby は分散処理のコンポーネントが少ない? Ruby は好きなので長期的には Ruby でできると嬉しい。</li>
<li>arrow があっても独自性がないと厳しい?</li>
<li>すぐには難しい</li>
<li>可視化あたり?</li>
<li><a href="https://github.com/sciruby-jp/ruby-datascience-examples/blob/master/Ruby%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9%E3%82%92%E8%A1%8C%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF.pdf">https://github.com/sciruby-jp/ruby-datascience-examples/blob/master/Ruby%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9%E3%82%92%E8%A1%8C%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF.pdf</a></li>
</ul>


<h2>昼休憩</h2>

<p>11:56 から 12:50 まで。</p>

<h2>エンタープライズRubyOnRails エンプラでぶち当たった2つの壁と突破法</h2>

<ul>
<li>自己紹介</li>
<li>会社紹介</li>
<li>エンタープライズに Ruby on Rails は不向きと言われている</li>
<li>1: 高すぎる柔軟性</li>
<li>2: Rails による規約の縛り</li>
<li>本日お伝えしたいこと: 具体的な壁と突破方法</li>
<li>プロジェクト概要: 写真は <a href="https://twitter.com/ujm/status/868315623561977856">https://twitter.com/ujm/status/868315623561977856</a></li>
<li>ソース管理: GitLab (ギットラボとよんでいた)</li>
<li>経験者が少ない (10人に1人)</li>
<li>2つの壁にあたった</li>
<li>コードのメンテナンス性低下</li>
<li>経験者が不足するとどうなるか</li>
<li>一貫性のないコードが量産される</li>
<li>レビュアーが困る</li>
<li>コンフリクトの多発</li>
<li>merge request でモデルのコンフリクトが多発</li>
<li>レビュアーの負担が激増</li>
<li>壁は想像以上に高かった</li>
<li>突破法を考えてみた</li>
<li>コードメンテナンス性の壁 → 強力な IDE レベルの仕組み → 開発統制</li>
<li>コンフリクトの壁 → 人が編集するファイルの極少化 → 自動生成</li>
<li>RuboCop SubimeText3 独自チェッカー Drone</li>
<li>rb ファイルと erb ファイルをチェック</li>
<li>RuboCop でチェック</li>
<li>erb は注釈宣言を警告して erb のコメントアウトを使うように</li>
<li>CI がパスしなかったら merge request をマージできない</li>
<li>Excel の設計書から自動生成</li>
<li>権限やルーティングを自動生成</li>
<li>routing ファイルを分割</li>
<li>一部は手動変更可能 (gem 関連とか)</li>
<li>ER 図からも自動生成</li>
<li>マイグレーション、RSpec、Model を生成</li>
<li>モデルファイルをモジュールに分割して自動生成</li>
<li>画面設計から view も自動生成</li>
<li>ロジックが必要ない部分は基本的に自動生成にした</li>
<li>結果</li>
<li>レビュアーの負担が減少</li>
<li>64.9% (約31000行) が自動生成</li>
<li>コンフリクト発生率 25% → 5%</li>
<li>質疑応答</li>
<li>?: コンフリクト解決の責任はレビュアー?</li>
<li>そうです。</li>
<li>?: ? (メモ取れず)</li>
<li>決めるにあたって色々葛藤があったが詳細は懇親会で</li>
<li><a href="https://www.slideshare.net/kakko1003/ruby-on-rails-2">https://www.slideshare.net/kakko1003/ruby-on-rails-2</a></li>
</ul>


<h2>Rubygem開発の流儀</h2>

<ul>
<li>プロジェクター接続トラブル</li>
<li>awesome なのでサイズ調整ができない</li>
<li>表示がおかしい (上の一部が下に出ている)</li>
<li>自己紹介</li>
<li>会社紹介</li>
<li>本題の Rubygem 開発について</li>
<li>Rubygem についておさらい</li>
<li>bundler 便利</li>
<li>パーフェクト Ruby 第二版</li>
<li>著者献本を持ってきたのでブログに書いてくれる人にプレゼントしたい</li>
<li>作り始めが簡単でも gem を作ってリリースするには別のハードルがある</li>
<li>gem をざっくり分類</li>
<li>開発支援系: ほとんどの gem</li>
<li>クライアント系</li>
<li>フレームワーク/ミドルウェア系</li>
<li>プラグイン系</li>
<li>既存 gem 改造系</li>
<li>業務特化系</li>
<li>便利ツール系</li>
<li>パフォーマンス向上系</li>
<li>既存gem の改造やプラグイン系が作りやすいし、ゴールがわかりやすい</li>
<li>色々な gem を参考にネタを探す</li>
<li>とにかく日々のイライラや不満を言語化し、色々な gem のパターンと突き合わせる。</li>
<li>gem を作り始める前にやること</li>
<li>gem 開発のコストとは</li>
<li>activerecord-cause の場合</li>
<li>gem を作るときに考えておくこと</li>
<li>行儀の良さとは</li>
<li>gem の外の世界を壊さないなど</li>
<li>rspec-storage の場合</li>
<li>よくない例</li>
<li>非公開な API 使いまくり</li>
<li>汎用化の暗部</li>
<li>たとえば <code>devise</code> や <code>rails_admin</code> のコードが簡単に読めますか?</li>
<li>作った後の OSS 活動</li>
<li>昨日追加要求について</li>
<li>基本的に「Welcome your PR」で良いと思っている。</li>
<li>Welcome PR なんだけど&hellip;</li>
<li>機能追加系の対応にはポリシーが必要</li>
<li>実装せずに済ます強い心の例</li>
<li>まとめ</li>
<li>kozo2 さん: embulk の gem には jar が同梱されていると言う話があったがファイルサイズの上限はあるのか?</li>
<li>あった気がするが引っかかったことがないのでわからない。</li>
<li>kozo2 さん: データを大量に入れたい。</li>
<li>日本の祝日の gem のようにデータのみの gem の例はある。</li>
<li>パーフェクト Ruby 第二版のプレゼントのじゃんけん大会</li>
<li><a href="https://twitter.com/9gmotonari/status/868332186025443328">https://twitter.com/9gmotonari/status/868332186025443328</a></li>
<li><a href="https://speakerdeck.com/joker1007/rubygemkai-fa-falseliu-yi" title="Rubygem開発の流儀 // Speaker Deck">Rubygem開発の流儀 // Speaker Deck</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li><a href="https://rubykaigi.doorkeeper.jp/events/61062" title="RubyKaigi 2017">RubyKaigi 2017</a> の受付が始まっている</li>
</ul>


<h2>コミュニティ文化の取り込みとその機会で得た知見</h2>

<ul>
<li>会社のスポンサー表示</li>
<li>Contents</li>
<li>Community?</li>
<li>社内のコミュニティ感</li>
<li>個人的成果の紹介</li>
<li>webpacker を使っている人: 1桁ぐらいしかいない</li>
<li>自己紹介</li>
<li><a href="https://github.com/muryoimpl/buoys">https://github.com/muryoimpl/buoys</a></li>
<li>Community とは?</li>
<li>この場もコミュニティ</li>
<li>一緒に仕事をする人たちもコミュニティと言える</li>
<li>コミュニティとの接点</li>
<li>(同じタイトルで違うスライドがしばらく続いていたのでメモを取り損ねたので、諦めて聞いていた)</li>
<li><a href="https://github.com/muryoimpl/slippr">https://github.com/muryoimpl/slippr</a></li>
<li><a href="https://github.com/muryoimpl/talker-signupper">https://github.com/muryoimpl/talker-signupper</a></li>
<li>時間がおしているので質疑応答はなし</li>
<li><a href="https://speakerdeck.com/muryoimpl/kansai-ruby-kaigi-2017">https://speakerdeck.com/muryoimpl/kansai-ruby-kaigi-2017</a></li>
</ul>


<h2>Rubyistと技術記事 ～なぜ書くの？どう書くの？何が起きるの？～</h2>

<ul>
<li>自己紹介</li>
<li>Rubyist と技術記事</li>
<li>技術記事を書く = 知見のオープンソース化</li>
<li>一般論から個人の話へ</li>
<li>これまでの活動内容</li>
<li>知っている人挙手 → 写真とらせて</li>
<li>なぜ書くの?</li>
<li>困る、ググる、助かった！のギブアンドテイク</li>
<li>助かった、ありがとうの声が1つでもあると嬉しい</li>
<li>何を書くの?</li>
<li>困る、ググる、助かった！の流れをイメージする</li>
<li>いつ、どう書くの?</li>
<li>朝型なので、起床してから仕事を始めるまでの時間で書く</li>
<li>公開前に何度も読み直して校正する</li>
<li>公開後でも校正する</li>
<li>わかりやすい記事を書くためには</li>
<li>読者ファースト: 困っている人を想定して書く</li>
<li>その技術のおいしさを引き出せる、実践的な例を出す</li>
<li>文章とコードをバランスよく配分する</li>
<li>タイトルは超重要！</li>
<li>Qiita とブログの使い分け</li>
<li>Qiita は技術が主役</li>
<li>ブログは自分が主役</li>
<li>Twitter と YouTube の使い分け</li>
<li>参考: 初期のブログ</li>
<li>何が起きるの?</li>
<li>お金の話</li>
<li>技術記事とお金の話</li>
<li>お金より、信頼やレピュテーション</li>
<li>技術記事Q&amp;A</li>
<li>Q3: 執筆時間を短くするコツは?</li>
<li>A: 時間を気にしたことがない。それよりもわかりやすさ重視</li>
<li>描き続ければ基本的な速さは身につく</li>
<li>Q4: 反響がなくてよくヘコみます。これを克服するには?</li>
<li>A: 狙ってもどうせ当たらない。1件でも反響があれば成功と考える</li>
<li>Q5: 描きたいけどかけない。時間もない。どうすれば?</li>
<li>A: タスク管理をしっかり。</li>
<li>まとめ</li>
<li>まとめ (ふたたび一般論)</li>
<li>最後に追加アナウンス: 「プロを目指す人のためのRuby入門」という本が2017年11月発売予定</li>
<li><a href="https://speakerdeck.com/jnchito/number-kanrk2017" title="Rubyistと技術記事 // #kanrk2017 // Speaker Deck">Rubyistと技術記事 // #kanrk2017 // Speaker Deck</a></li>
</ul>


<h2>子どものためのプログラミング道場「CoderDojo」を支えるRails CMSの活用事例</h2>

<ul>
<li>上の5階でやっていた様子を取材してきた</li>
<li>子供同士も含めたコミュニティ</li>
<li>全国各地でやっている (85 以上、今年中に 100 を超えそう)</li>
<li>世界中でやっている (1200 以上)</li>
<li>本日の話</li>
<li>CoderDojo とは (済)</li>
<li>なぜ Rails + CMS?</li>
<li>Scrivito の活用事例</li>
<li>なぜ Rails?</li>
<li>初期は GitHub Pages で生成</li>
<li>デザイン改善 + Parse 利用</li>
<li>Parse 終了のお知らせ</li>
<li>要望や状況を整理するよい機会だった</li>
<li>コミットしているのが2人 (実際は1人) だけだった</li>
<li>状況の変化に対応しやすい Rails</li>
<li>ドキュメントも多い</li>
<li>Rails Tutorial, Rails ガイド</li>
<li>翻訳をやっているのは弊社</li>
<li>ただ Rails の学習コストは高い (と思う)</li>
<li>CMS?</li>
<li>様々なコントリビュータ</li>
<li>「エンジニア」じゃなくても貢献できる</li>
<li>Scrivito: Cloud-Based Rails CMS</li>
<li>Rails に Scrivito gem を足す</li>
<li>ブラウザーで編集できる機能を追加できる</li>
<li>コントリビューターが以前2人が今は15人</li>
<li>Scrivito の活用事例</li>
<li>CoderDojo Japan 公式本</li>
<li>大枠を Rails 側の view で作って、各章の担当者が該当する部分の文言を直接編集</li>
<li><a href="https://coderdojo.jp/kata">https://coderdojo.jp/kata</a> の「2017年1月には全国で70ヶ所以上」を「2017年5月には全国で84ヶ所以上」に更新するデモ</li>
<li><a href="https://github.com/coderdojo-japan/coderdojo.jp">https://github.com/coderdojo-japan/coderdojo.jp</a></li>
<li><a href="https://speakerdeck.com/yasulab/coderdojo-wozhi-eru-rails-cms-falsehuo-yong-shi-li">https://speakerdeck.com/yasulab/coderdojo-wozhi-eru-rails-cms-falsehuo-yong-shi-li</a></li>
</ul>


<h2>スポンサーセッション</h2>

<p>Ruby開発さんのスポンサーセッションでした。</p>

<h2>基調講演: 18年でRubyから学んだこと</h2>

<ul>
<li>自己紹介</li>
<li>風呂グラマー</li>
<li>IT芸人</li>
<li>Ruby歴 18年ぐらい</li>
<li>一番好きなメソッド: <code>method_missing</code></li>
<li>次は <code>define_method</code>, その次は <code>eval</code></li>
<li>局所的に綺麗にかけるものが好き</li>
<li>dRuby</li>
<li>ずーっとユーザ</li>
<li>gem も 1 個だけ <code>pr_geohash</code></li>
<li>mruby</li>
<li>1999年: i-mode など</li>
<li>Ruby本が立て続けに出た時期があった</li>
<li>オブジェクト指向</li>
<li>Ruby に教わったこと</li>
<li>2000年代前半: PHPでPukiWiki作ってた など</li>
<li>伽藍(がらん)とバザールだけでも良いので読むのをおすすめ</li>
<li>元の作者から引き継いでコミュニティを作って、年末には別のコミッターに渡した</li>
<li>Windows でも頑張ってた</li>
<li>wxWindows とか QT 使って GUI アプリ作り</li>
<li>exerb 使ってパッケージング</li>
<li>ActiveScript Ruby</li>
<li>Ruby on Rails</li>
<li>2004/07 - DHH が公開</li>
<li>2005年頭ぐらいに発見</li>
<li>すごい! Ruby で Web アプリがキレイに作れる</li>
<li>2005年から Ruby 漬け: Rails を試して, ブログ書いて, 雑誌に記事を書く</li>
<li>OSC Hokkaido 2005</li>
<li>たぶん初めて Matz を見たのはこのとき</li>
<li>英語で質疑応答していた</li>
<li>10分で作る Rails アプリ for Windows</li>
<li>編集ソフトがなかったので無編集</li>
<li>本当に10分でできるというのを示す意味もあった</li>
<li>typo とかで何度もとりなおした</li>
<li>pingking.jp</li>
<li>@nifty の about me</li>
<li>RailsConf 2006</li>
<li>初めての海外</li>
<li>英語力ゼロ</li>
<li>リアル Ruby 友達もほぼゼロ</li>
<li>初の海外カンファレンス</li>
<li>スライドのキーワードでなんとなくわかる</li>
<li>内容はRails勉強会@東京の方がすごいのでは?</li>
<li>Ruby歴なら絶対自分の方が長い</li>
<li>なら渡米しよう</li>
<li>色々あって2008年渡米</li>
<li>結局英語は喋れるようにはならなかった</li>
<li>Seattle.rb</li>
<li>英語わからないけどなんとなく参加して覚えた</li>
<li>英語はブロークンな20代の若者の英語が身についた</li>
<li>Appcelerator へ転職</li>
<li>知り合いのいないコミュニティーで活動したい</li>
<li>Node.js と Titanium Mobile</li>
<li>Titanium Mobile にパッチ送ったりチャットで話ししたりしているうちに中の人に</li>
<li>GitHub のスターが多かったからだとあとで聞いた</li>
<li>影響を受けた人: matz さん, hyuki さん (スライドではアイコンだけ)</li>
<li>どちらもキリスト教の人</li>
<li>テクノロジーに愛を謳う</li>
<li>ロジカルじゃない</li>
<li>MINSWAN = Matz Is Nice So We Are Nice</li>
<li>心理的安全性</li>
<li>Matz はストーリーを語るのが上手い</li>
<li>DHHも</li>
<li>こういうのがうまい人は抽象化がうまい</li>
<li>初めてのRuby本体への貢献</li>
<li>mruby</li>
<li>RubyConf 2010 で聞いた</li>
<li>そっから進捗を全然聞かない</li>
<li>2012年のリリース前時点の private repo のアクセス権をもらった</li>
<li>やること多数</li>
<li>GitHub 以後の開発コミュニティ</li>
<li>MobiRuby</li>
<li>MobiRuby のもくろみ</li>
<li>Matz にはなれない</li>
<li>あきやすいので無理だった</li>
<li>手離れよく作ることを考えるようになった</li>
<li>Ruby から得たもの</li>
<li>一番大きいのは「軸」</li>
<li><a href="https://speakerdeck.com/masuidrive/18nian-derubykaraxue-ndakoto-guan-xi-rubyhui-yi-2017">https://speakerdeck.com/masuidrive/18nian-derubykaraxue-ndakoto-guan-xi-rubyhui-yi-2017</a></li>
</ul>


<h2>クロージング</h2>

<p>時間がなかったので、Ruby 関西の宣伝などはなく、前に集まって写真撮影のみでした。</p>

<h2>懇親会</h2>

<p>事前に予告されていた通り LT がありました。
本編でスポンサーセッションがなかったスポンサーの LT もありました。</p>

<p>前にどこかで聞いたことあるような内容もありましたが、いろいろな話があって楽しめました。</p>

<p>特に何も準備していなかったのと MacBook Pro の電池が残り少なかったこともあり、特に LT はしませんでした。</p>

<h2>全体的な感想</h2>

<p>RubyKaigi 2015 の T シャツを着て行ったのですが、上にもう一枚着ていたので、知らない人にはただの寿司の T シャツにしか見えないような気がしていました。
一部の人には背中の Committer と書かれている部分を見せたりできたので、着て行った意味はあったと思いました。</p>

<p>会場は9時にならないと鍵が借りられなかったり、撤収完了の時間が決まっていたり (ロビーに残っているのは OK だったらしい)、プロジェクターでトラブルがあったり (ミラーリングかどうかが影響したらしい?)、電源が不十分だったり (これは各自できるだけタップを持ってきてくださいとアナウンスがあればよかったのかも)、などの問題点はありましたが、迷わずたどり着けたり (途中でひがきさんにあったので入り口を自分で探さなくてよかったのも幸いした)、マイクなどの設備も整っていたり、撤収時に椅子やテーブルは特に気にしなくてよかったりしたのはよかったと思いました。</p>

<p>全体の進行は時間がおしてしまって、それを取り戻すために減らす休憩時間の余裕もなくて、最後まで時間が足りないままでした。</p>

<p>発表の内容はどれも面白く、twitter でもハッシュタグがトレンド入りしていたらしいというぐらい盛り上がっていたようです。</p>

<p>@nifty の about me は使っていたので懐かしいと思いました。
@nifty で Rails を使っていると前面に打ち出していたのは、他に @nifty TimeLine があったのも思い出しました。</p>
]]></content>
  </entry>
  
</feed>
