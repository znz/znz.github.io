<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: event | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/event/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-07-30T21:06:20+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ELFとDWARF勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-30-elf-dwarf.html"/>
    <updated>2017-07-30T13:19:55+09:00</updated>
    <id>http://blog.n-z.jp/blog/elf-dwarf</id>
    <content type="html"><![CDATA[<p><a href="https://techplay.jp/event/626491">ELFとDWARF勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、今回のメモです。</p>

<p>資料は後日公開されるようなので、公開されたらリンクする予定です。</p>

<h2>会場</h2>

<p>昨日と同じ場所なので、迷わずたどり着けましたが、なぜか1階からはタワーAに入れなくて2階から入る必要がありました。</p>

<h2>参加者自己紹介</h2>

<p>一言ずつぐらい参加者の自己紹介がありました。
大阪以外からきている人も多く、遠くからきている人もいて驚きました。
組み込み系などで普段から関連するようなことをしていそうな人が多そうな感じでした。</p>

<p>遠くから参加といえば Binary 2.0 カンファレンス2005 の時はイベントのためだけにわざわざ東京に行ったような覚えがあるので、レアなイベントだと遠くからの参加もよくあることなのかもしれません。</p>

<h2>ドキュメントを読まずに知るELF入門</h2>

<ul>
<li><a href="http://kozos.jp/">http://kozos.jp/</a></li>
<li>本日の内容は<a href="http://amzn.to/2waRSkD">リンカ・ローダ実践開発テクニック</a> という本にかいてある内容のさわり</li>
<li><a href="http://amzn.to/2uNvsqs">Linkers and Loaders</a> は概要だけで実装するには他の資料に当たる必要がある</li>
<li>リンカ・ローダについて詳しくかいてある本は他にはないのではないか</li>
<li>発表者が主に使っているのが FreeBSD なので FreeBSD の話が中心</li>
<li>Executable and Linking Format なので本来は ELF フォーマットというのはおかしい (が、RPG などのエルフと紛らわしいので ELF フォーマットといってしまうことも多い)</li>
<li>実行ファイルやオブジェクトファイル、共有ライブラリだけではなくコアダンプも表現可能</li>
<li>「リンク」のための領域情報と「ロード」のための領域情報を別々に持つというのは珍しい</li>
<li>リンクとロードの説明</li>
<li>バイナリエディタを入れるのがおすすめ</li>
<li>hexedit というのを使っている</li>
<li>最初の方は 00 が多い部分、次に ASCII データっぽい部分、配列データっぽい部分、機械語コードっぽい部分のように領域ごとに特徴が分かれている</li>
<li>xpm に変換して眺める</li>
<li>英語のドキュメントを探すのではなく <code>/usr/include/**/*elf*</code> などを探すことが多い</li>
<li><code>/usr/include/elf.h</code> → <code>/usr/include/sys/elf32.h</code> をみてみる</li>
<li>hdr は header など、略語などを知っているとソースコードを読むのがはやくなる</li>
<li>ELF ヘッダ - ファイルの先頭に1個</li>
<li>プログラムヘッダ - ロード用 - セグメントをさしている</li>
<li>セクションヘッダ - リンク用 - セクションをさしている</li>
<li>セグメントとセクションは独立した領域だが、セグメントの中に複数セクションがあったりする</li>
<li><code>Elf32_Half</code> は 2 バイト</li>
<li><code>Elf32_Word</code> は 4 バイト</li>
<li><code>Elf32_Addr</code> は 4 バイト (32ビット環境をみているので)</li>
<li>readelf -a 実行ファイル で情報表示できる</li>
<li><code>elf_common.h</code> に <code>EM_386</code> として 3 が定義されている</li>
<li><code>e_machine</code> のところを書き換えて readelf -a で変わったのを確認して、実行してみて実行できないのを確認 (間違ったアーキテクチャです と出てきた)</li>
<li>2,3 種類以上の情報を見比べて確認すると良い</li>
<li>ロードしてエラーにしている部分を探す</li>
<li>FreeBSD は <code>/usr/src/sys</code> にカーネルソースがある</li>
<li>重要なものはそんなに深いところにはないので <code>find . -name "*elf*"</code> ではなく <code>ls */*elf*</code> ぐらいで探せば良い</li>
<li>ちょっと見つからなかったのでパス</li>
<li>セグメントをロードしている部分をみてみる</li>
<li>実際のロード処理は <code>load_section</code> という名前になっているっぽい (<code>load_segment</code> の方が良いのではないかという指摘)</li>
<li>セクションという単語は割と適当に使う人もいるらしいので注意が必要</li>
<li>プログラムヘッダの情報をみていくのは簡単に作れる (<code>e_phoff</code> から <code>e_phentsize</code> バイト を <code>e_phnum</code> 個みていけば良い)</li>
<li>実際にライブコーディングで作ってみる</li>
<li>OS を作っているとフラグをちょっと変えたいとかいうことがある</li>
<li>objcopy などでできることもあるが、対応できない場合に自作のコードがあると応用できるので、 <code>readelf</code> でできるようなことでも自作できると良いことがある</li>
<li>Debian などでは bintuils にある (ビンユーティリティと読んでいた)</li>
<li>kozos のブートローダをみる (本質的にはプログラムヘッダをループでコピーしているだけ)</li>
<li>リンクはセグメントではなくセクションを見ていく</li>
<li>readelf -a 実行ファイルの <code>.text</code> セクションのオフセット部分を実際にバイナリエディタで見てみると確かに機械語っぽい</li>
<li>オブジェクトファイルの <code>.text</code> をみてみる</li>
<li>デフォルトのリンカスクリプトは <code>ld -verbose</code> でみえる</li>
<li>リンカスクリプトの自作例 (<code>-Wl,Tld.scr</code> で指定)</li>
<li><code>objdump -d hello.o</code> と <code>objdump -d hello</code> をみてみる</li>
<li>関数呼び出しのアドレスがオブジェクトファイルだと 0 (空欄) になっているのが実行ファイルだと埋められている</li>
<li><code>.rela.text</code> セクションに埋める必要のある位置が書かれている</li>
<li>リンカがやっているのはセクションを寄せ集めるのと再配置情報を埋めること</li>
<li>書籍では簡易リンカを作るサンプルコードがある</li>
<li>コアダンプをみてみる</li>
<li>prstatus というキーワードでカーネルのソースコードをみてみる</li>
<li>質疑応答</li>
<li>各セクションが何なのかの説明はまとまったものはなさそう</li>
<li>調べるときは FreeBSD と Linux 両方のソースコードをみることが多い</li>
<li>リンカスクリプトで <code>.text</code> セクションのアドレスを指定しなかったらアボートしていたが指定したアドレスの意味は?</li>
<li>他で使っていたアドレスをそのまま使っているだけで詳細は不明</li>
<li>CPU などで決まっているアーキテクチャの場合はそのアドレスを使う</li>
<li>リンカスクリプトの文法は info ld の Scripts が一番詳しい (だいたいは書籍にもかいてある)</li>
</ul>


<h2>休憩</h2>

<h2>DWARFとデバッガのからくり</h2>

<ul>
<li>自己紹介</li>
<li><a href="https://github.com/takubo">https://github.com/takubo</a></li>
<li>UNIX 文化 (ハッカー文化) と、組み込み文化を結びつけたい</li>
<li>関西でも、勉強する勉強する勉強会をしたい</li>
<li>「〜の使い方」じゃなくて50年戦える「技術」と「知識」を</li>
<li>AWK, sed</li>
<li>今回は AWK ではなく DWARF の話</li>
<li>基礎情報</li>
<li>デバッグ情報フォーマット (の規格)</li>
<li>Debug With Attributed Record Format の略</li>
<li>デバッガでできること、わかること (ユーザ視点): 実行制御 (ブレークポイント、ステップ実行、〜まで実行)、スタックトレース、変数の値を表示</li>
<li>デバッガに課せられた任務: 実際は機械語が実行されているが、ソースコードがそのまま実行されているかのような錯覚を与える</li>
<li>デバッガが知るべきこと: ソースの各行に対応する機械語、関数の先頭・末尾に対応する機械語、変数のありか、変数のビット幅・表現形式(文字列、整数、浮動小数)、文字列や配列の境界、コールスタックを巻き戻す方法</li>
<li>コールスタックの例: スタックに return アドレスを持つ、レジスタウィンドウ、リンクリスト</li>
<li>ブレークポイントの仕組みの例: デバッグレジスタにアドレスを設定、メモリアクセスを監視、MMU などでメモリ番地の rwx を落として例外を発生させる、命令を書き換えて例外を発生させる</li>
<li>どの方法でもブレークポイントを設定するアドレスを知る必要がある</li>
<li>デバッグ情報とは: 「デバッガが知るべきこと」が保存されている情報が「デバッグ情報」</li>
<li>デバッグ情報を生成するのはコンパイラやリンカの役目</li>
<li>ソースの情報を直接知れるのはコンパイラのみ</li>
<li>リンカは再配置に伴う処理や重複情報の削除</li>
<li>デバッグ情報の課題、あるいは、デバッガにとっての難問</li>
<li>最適化:</li>
<li>ソースの原型をとどめない機械語: 対応がめちゃくちゃ、ソースと機械語の対応は1対1ではない、インライン展開</li>
<li>不要な変数は消される</li>
<li>消されなかった変数もどこへ行った</li>
<li>メモリ上になかったりレジスタも関数呼び出しを挟んで同じ変数が別のレジスタになっているかもしれない</li>
<li>RISC の台頭: デバッグ中でも最適化を切れない</li>
<li>アセンブラさえも命令の並べ替えを行うことがある (例: 遅延スロット)</li>
<li>デバッガがソースを再現するための全ての情報は、通常は非常に巨大になる: ディスクを圧迫する、メモリにはとても乗らない</li>
<li>これをなんとかして小さくしないといけない</li>
<li>DWARF の特徴: オープンかつフリー、デバッグフォーマットとして優秀、実際に広く使われている</li>
<li><a href="http://www.dwarfstd.org/">http://www.dwarfstd.org/</a></li>
<li>GFDL</li>
<li>DWARF の歴史</li>
<li>1992 に Version 1</li>
<li>現在は 2017.2 リリースの Version 5</li>
<li>他のデバッグ形式: STABS, *COFF, PDB, IEEE695</li>
<li>DWARF の精神: 何にも依存しない、暗黙ではなく明示、ゆるい標準、ベンダー拡張対応、より小さなデータ表現、効率的に処理できる</li>
<li>DWARF の目標</li>
<li>DWARF はなぜ難しいのか?: 日本語の情報も英語の情報も少ない、より小さなデータ表現</li>
<li>圧縮について確認</li>
<li>DWARF フォーマット解説</li>
<li>重要な用語</li>
<li>LEB128 (Little Endian Base 128)</li>
<li>uLEB128 (unsigned LEB128、符号なし)</li>
<li>sLEB128 (signed LEB128、符号付き)</li>
<li>CU (Compilation Unit)</li>
<li>翻訳単位</li>
</ul>


<h2>休憩</h2>

<p>時間がおしているので短めに</p>

<h2>バイナリかるた体験</h2>

<ul>
<li><a href="http://kozos.jp/binary-karuta/">http://kozos.jp/binary-karuta/</a></li>
<li><a href="http://amzn.to/2eYaTnn">0と1のコンピュータ世界 バイナリで遊ぼう!</a> という本に解説あり</li>
<li>説明があった後、「バイナリかるたのサンプル」の「スライド」をみながら実際に何のファイルなのかという話をしていました。</li>
<li>最後までいかなくても、問題の区切りで終了できるので、最後のセッションに最適だそうで、時間があまりなかったこともあって、スライドの途中で終了しました。</li>
</ul>


<h2>クロージング、後片付け</h2>

<ul>
<li>振り返り</li>
<li>振り返りの中の意見であったライブコーディング (とは言ってなかったけど) がよかったというのは同感でした。</li>
<li>資料は ELF の方も DWARF の方も後日公開してもらえるということでした。バイナリかるたはサイトをみながらだったので、特に別途用意された資料はありませんでした。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第78回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-29-rubykansai78.html"/>
    <updated>2017-07-29T13:04:59+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai78</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/62491">第78回 Ruby関西 勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<p>グランフロントでわかりにくい場所でしたが、きたことがあったので、すんなり来れました。
会場無線 LAN も前回の設定のまま使えました。</p>

<h2>rails にコントリビュートしてきました</h2>

<ul>
<li>integration test は get などを使う</li>
<li>system test は visit などを使う</li>
<li>system test のクラスは integration test のクラスを継承しているので get が使えて何も起こらなくてはまった</li>
<li>メソッドを消す pull request を送った</li>
<li>迷ったらとりあえず送ってみてリジェクトされても気にしない</li>
<li>英語もだいたいなんとかなる</li>
</ul>


<h2>GitLab + Dokku で作る CI/CD 環境</h2>

<p>発表資料はいつも通り<a href="">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/rubykansai78-gitlab-dokku/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/gitlab-dokku-cicd">slideshare</a>, <a href="https://speakerdeck.com/znz/cd-huan-jing">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-rubykansai78-gitlab-dokku">RubyGems</a> にあげています。</p>

<p><a href="/blog/categories/gitlab/">gitlab カテゴリー</a>の一覧へのリンクを発表直前に追加したので、GitHub のソース以外には7月30日になってから反映しました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykansai78-gitlab-dokku/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykansai78-gitlab-dokku/" title="GitLab + Dokku で作る CI/CD 環境">GitLab + Dokku で作る CI/CD 環境</a>
</div>


<h2>AM/PMって知ってます？</h2>

<ul>
<li>acquisition (獲得) metaphor</li>
<li>participation (参加) metaphor</li>
</ul>


<h2>rubocopとの付き合い方　〜守・破・離〜</h2>

<ul>
<li>コードレビュー</li>
<li>新人教育, 品質向上, 相互学習</li>
<li><a href="http://d.hatena.ne.jp/naoya/20140313/1394664578">些末なコードレビュー - naoyaのはてなダイアリー</a> の &ldquo;やらなければいけないのは、「その設計は拡張に対して開いていないから開くべき」とか「これではエッジケースが想定されていないからこういう不具合につながるのでは」とか「そのテストでは後日見返したときに第三者が要求仕様を解釈しづらい」とかそういう指摘である。&rdquo;</li>
<li>&ldquo;lint ツールか何かで機械的にチェックすればよい&rdquo;</li>
<li><a href="https://github.com/bbatsov/ruby-style-guide">https://github.com/bbatsov/ruby-style-guide</a></li>
<li>Cop: StyleCop, LayoutCop, LintCop, MetricsCop, PerformanceCop, SecurityCop, RailsCop, BundlerCop</li>
<li>auto-correct</li>
<li>Todo リスト: <code>rubocop --auto-gen-config</code></li>
<li>守・破・離</li>
<li>houndci, sideci など</li>
<li>エディタ連携, guard-rubocop</li>
<li>syntastic だと非同期処理してくれなくて保存の度に固まるので deoplete (+neovim) を使っている</li>
<li>rails developer meetup, 次回: 8/24(木)19:30から, connpass での募集は8/1から, ハッシュタグ <code>#railsdm</code></li>
</ul>


<h2>Ruby と C# をつなぐ</h2>

<ul>
<li><a href="https://github.com/masoo/ruby-csharp_script">https://github.com/masoo/ruby-csharp_script</a></li>
<li>Ruby から C# を使う話だった</li>
<li>色々大変そうだった</li>
</ul>


<h2>RubyはPythonにしてやられてはいない</h2>

<ul>
<li>Ruby ビジネスフォーラムに参加した</li>
<li>午後のパネルディスカッションの内容の紹介</li>
<li>午前の基調講演の内容の紹介</li>
<li>その他イベント紹介</li>
</ul>


<h2>Ruby 初級者向けレッスン 61回 - 文字列</h2>

<p>安定したいつものような内容でした。</p>

<h2>クロージング</h2>

<ul>
<li>イベント告知など</li>
<li>明日同じ場所で<a href="https://techplay.jp/event/626491">ELFとDWARF勉強会</a></li>
<li><a href="https://dddrb.doorkeeper.jp/events/63433">DDD.rb #14 Redux で気軽に始める テスト駆動開発 - DDD.rb | Doorkeeper</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shinosaka.rb #27 (GraphQL) に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-24-shinosaka-rb-graphql.html"/>
    <updated>2017-06-24T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/shinosaka-rb-graphql</id>
    <content type="html"><![CDATA[<p><a href="https://shinosakarb.doorkeeper.jp/events/61090">Shinosaka.rb #27</a> に参加しました。
Shinosaka.rb 自体は初参加でした。</p>

<p>今回は GraphQL の解説と node と rails でのハンズオンでした。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>メモ</h2>

<ul>
<li><a href="http://www.kokuchpro.com/event/tddbcosaka4/">TDDBC大阪4.0 2017年7月1日（大阪府） - こくちーずプロ（告知'sプロ）</a></li>
<li><a href="https://management30.doorkeeper.jp/events/61787">［認定証発行］アジャイル・リーダーシップとチェンジ・マネジメント・ワークショップ（Management 3.0） - Management 3.0（アジャイル・リーダーシップ、チェンジ･マネジメント、イノベーション・マネジメント） | Doorkeeper</a></li>
<li>自己紹介</li>
<li>QraphQL とは?</li>
<li>単一のエンドポイント</li>
<li>ライブラリーもいろんな言語や環境に対応している</li>
<li>REST API がツライから</li>
<li>GraphQL の微妙な点: pagination, 認証も考慮されていない</li>
<li>React との相性が良い: データ駆動</li>
<li>GitHub が GraphQL を採用: <a href="https://developer.github.com/v4/explorer/">https://developer.github.com/v4/explorer/</a></li>
<li><a href="http://graphql.org/">http://graphql.org/</a></li>
</ul>


<h2>動作確認環境</h2>

<ul>
<li>macOS Sierra 10.12.5</li>
<li>node v8.1.2</li>
<li>npm 5.0.3</li>
<li>graphql などのバージョン: <a href="https://github.com/znz/getting_started_graphql">https://github.com/znz/getting_started_graphql</a> を参照</li>
<li>ruby ruby 2.3.3p222 (2016-11-21 revision 56859) [x86_64-darwin15]</li>
<li>Bundler version 1.15.1</li>
<li>Rails 5.1.1</li>
<li>graphql 1.6.4, graphiql-rails 1.4.2</li>
<li>その他: <a href="https://github.com/znz/getting_started_graphql_ruby">https://github.com/znz/getting_started_graphql_ruby</a> を参照</li>
</ul>


<h2>ソースコード</h2>

<ul>
<li>node 版は <a href="https://github.com/znz/getting_started_graphql">https://github.com/znz/getting_started_graphql</a> を参照</li>
<li>Rails 版は <a href="https://github.com/znz/getting_started_graphql_ruby">https://github.com/znz/getting_started_graphql_ruby</a> を参照</li>
</ul>


<p>途中での graphiql での確認方法は下の作業メモの方に書いてあるので、あわせて参照してください。</p>

<h2>感想</h2>

<p>作業メモが長く続くので、先に感想を書いておきます。</p>

<p>node の方はエラーも json で帰ってきてブラウザーで見えて開発環境として使いやすそうな感じでしたが、
graphiql-rails の方はエラーの時に <code>SyntaxError: Unexpected token &lt; in JSON at position 0</code> とだけ出て、
詳細はサーバー側のログをみないといけないので、node に比べるとちょっと使いづらいかもしれない、と思いました。</p>

<p>GraphQL 自体は色々と利点も多そうだと思いましたが、サーバー側は結局 REST とは別に作り込まないといけなさそうで、
アクセス権限などを考えると、既存のアプリケーションで簡単に置き換えられるものでもなさそうかな、と思いました。</p>

<h2>実際に使ってみる</h2>

<ul>
<li><a href="http://graphql.org/code/">http://graphql.org/code/</a></li>
<li>npm init -y</li>
<li>npm install graphql</li>
</ul>


<h2>step 1</h2>

<p>index.js として以下の内容を作成:</p>

<pre><code>'use strict'

const { graphql, buildSchema } = require('graphql')

const schema = buildSchema(`
type Query {
  foo: String
}

type Schema {
  query: Query
}
`)

const resolvers = {
  foo: () =&gt; 'bar',
}

const query = `
query myQuery {
  foo
}
`

graphql(schema, query, resolvers)
  .then(result =&gt; console.log(result))
  .catch(err =&gt; console.log(err))
</code></pre>

<p>実行結果:</p>

<pre><code>% node.index.js
{ data: { foo: 'bar' } }
</code></pre>

<h2>step 2</h2>

<pre><code>const schema = buildSchema(`
type Query {
  id: ID,
  title: String,
  watched: Boolean,
}

type Schema {
  query: Query
}
`)
</code></pre>

<pre><code>const resolvers = {
  id: () =&gt; 1,
  title: () =&gt; 'bar',
  watched: () =&gt; true,
}
</code></pre>

<pre><code>const query = `
query myQuery {
  id,
  title,
  watched,
}
`
</code></pre>

<pre><code>% node index.js
{ data: { id: '1', title: 'bar', watched: true } }
</code></pre>

<p>query から watched を削ると <code>{ data: { id: '1', title: 'bar' } }</code> になる。</p>

<h2>step 3</h2>

<pre><code>const schema = buildSchema(`
type Video {
  id: ID,
  title: String,
  watched: Boolean,
}

type Query {
  video: Video
}

type Schema {
  query: Query
}
`)
</code></pre>

<pre><code>const resolvers = {
  video: () =&gt;({
    id: 1,
    title: 'bar',
    watched: true
  }),
}
</code></pre>

<pre><code>const query = `
query myQuery {
  video {
    id,
    title,
    watched,
  }
}
`
</code></pre>

<h2>step 4</h2>

<p>videos 対応</p>

<pre><code>const schema = buildSchema(`
type Video {
  id: ID,
  title: String,
  watched: Boolean,
}

type Query {
  video: Video,
  videos: [Video],
}

type Schema {
  query: Query
}
`)
</code></pre>

<pre><code>const videoA = {
  id: 1,
  title: 'title1',
  watched: true
}
const videoB = {
  id: 2,
  title: 'title2',
  watched: false
}
const videos = [videoA, videoB]
</code></pre>

<pre><code>const resolvers = {
  video: () =&gt; ({
    id: 1,
    title: 'bar',
    watched: true,
  }),
  videos: () =&gt; videos,
}
</code></pre>

<pre><code>const query = `
query myQuery {
  videos {
    id,
    title,
    watched,
  }
}
`
</code></pre>

<pre><code>% node index.js
{ data: { videos: [ [Object], [Object] ] } }
</code></pre>

<h2>step 5</h2>

<p><code>yarn add express express-graphql</code> or <code>npm install express express-graphql</code></p>

<p><code>require('graphql')</code> の行の上に追加:</p>

<pre><code>const express = require('express')
const graphqlHTTP = require('express-graphql')
</code></pre>

<p>追加:</p>

<pre><code>const PORT = process.env.PORT || 3000
const server = express()
</code></pre>

<p>末尾の <code>graphql</code> の呼び出しを置き換え:</p>

<pre><code>server.use('/graphql', graphqlHTTP({
  schema,
  graphiql: true,
  rootValue: resolvers,
}))

server.listen(PORT, () =&gt; {
  console.log(`Listening on http://localhost:${PORT}`)
})
</code></pre>

<p><code>http://localhost:3000/graphql</code> を開いて</p>

<pre><code>{
  videos {
    id,
    title,
    watched,
  }
}
</code></pre>

<p>などを試す。</p>

<p>右上の Docs でスキーマも見える。</p>

<h2>step 6</h2>

<p>graphql の require のところを書き換え:</p>

<pre><code>const {
  GraphQLSchema,
  GraphQLObjectType,
  GraphQLID,
  GraphQLString,
  GraphQLBoolean,
} = require('graphql')
</code></pre>

<p>buildSchema を書き換え:</p>

<pre><code>const videoType = new GraphQLObjectType({
  name: 'Video',
  description: 'video',
  fields: {
    id: {
      type: GraphQLID,
      description: 'id of video',
    },
    title: {
      type: GraphQLString,
      description: 'title of video'
    },
    watched: {
      type: GraphQLBoolean,
      description: 'has watched'
    }
  }
})
</code></pre>

<pre><code>const queryType = new GraphQLObjectType({
  name: 'QueryType',
  description: 'root query',
  fields: {
    video: {
      type: videoType,
      resolve: () =&gt; new Promise(resolve =&gt; {
        resolve({
          id: 1,
          title: 'title1',
          watched: true,
        })
      })
    }
  }
})
</code></pre>

<pre><code>const schema = new GraphQLSchema({
  query: queryType,
})
</code></pre>

<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<pre><code>{
  video {
    id
    title
    watched
  }
}
</code></pre>

<p>などを試す。</p>

<h2>休憩</h2>

<h2>id: 1 だけ欲しいときなど</h2>

<p>videos を移動して data.js を作成:</p>

<pre><code>'use strict'

const videoA = {
  id: 1,
  title: 'title1',
  watched: true
}
const videoB = {
  id: 2,
  title: 'title2',
  watched: false
}
const videos = [videoA, videoB]

const getVideoById = (id) =&gt; new Promise(resolve =&gt; {
  const [video] = videos.filter(v =&gt; (v.id + '') === id)
  resolve(video)
})

exports.getVideoById = getVideoById
</code></pre>

<pre><code>const { getVideoById } = require('./data')
</code></pre>

<pre><code>const queryType = new GraphQLObjectType({
  name: 'QueryType',
  description: 'root query',
  fields: {
    video: {
      type: videoType,
      args: {
        id: {
          type: GraphQLID,
          description: 'id of video',
        },
      },
      resolve: (_, args) =&gt; getVideoById(args.id)
    }
  }
})
</code></pre>

<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<pre><code>{
  video(id: 2) {
    id
    title
    watched
  }
}
</code></pre>

<p>などを試す。</p>

<h2>id を必須にしたい</h2>

<p><code>require('graphql')</code> のところに <code>GraphQLNonNull,</code> を追加。</p>

<p><code>type: new GraphQLNonNull(GraphQLID),</code> にする。</p>

<pre><code>{
  "errors": [
    {
      "message": "Unknown operation named \"null\"."
    }
  ]
}
</code></pre>

<p>になってしまったが、 getVideos の追加の後、もう一度試したら動いたので謎。
謎のエラーが発生した時は Prettify を押すとエラーが起きなくなるみたい。</p>

<pre><code>{
  video {
    id
    title
    watched
  }
}
</code></pre>

<p>などを試すと以下のように意図通りのエラーになる。</p>

<pre><code>{
  "errors": [
    {
      "message": "Field \"video\" argument \"id\" of type \"ID!\" is required but not provided.",
      "locations": [
        {
          "line": 2,
          "column": 3
        }
      ]
    }
  ]
}
</code></pre>

<h2>配列</h2>

<p><code>GraphQLList</code> を追加</p>

<p>data.js に追加:</p>

<pre><code>const getVideos = () =&gt; new Promise(resolve =&gt; resolve(videos))
</code></pre>

<pre><code>exports.getVideos = getVideos
</code></pre>

<p>index.js:</p>

<pre><code>const { getVideoById, getVideos } = require('./data')
</code></pre>

<pre><code>    videos: {
      type: new GraphQLList(videoType),
      resolve: getVideos,
    },
</code></pre>

<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<pre><code>{
  videos {
    id
    title
    watched
  }
}
</code></pre>

<p>などを試す。</p>

<h2>mutation</h2>

<p>schema に mutation を追加:</p>

<pre><code>const schema = new GraphQLSchema({
  query: queryType,
  mutation: mutationType,
})
</code></pre>

<p>schema の上に追加:</p>

<pre><code>const mutationType = new GraphQLObjectType({
  name: 'Mutation',
  description: 'Mutation type',
  fields: {
    createVideo: {
      type: videoType,
      args: {
        title: {
          type: new GraphQLNonNull(GraphQLString),
          description: 'title of video',
        },
      },
      resolve: (_, args) =&gt; {
        return createVideo(args)
      }
    },
  },
})
</code></pre>

<p>data.js:</p>

<pre><code>const createVideo = ({ title }) =&gt; {
  const maxId = Math.max.apply(null, videos.map(v =&gt; v.id))
  const watched = false
  const video = {
    id: maxId + 1,
    title,
    watched,
  }
  return video
}
</code></pre>

<p>(videos への push が抜けていた。)</p>

<pre><code>exports.createVideo = createVideo
</code></pre>

<p>index.js:</p>

<pre><code>const { getVideoById, getVideos, createVideo } = require('./data')
</code></pre>

<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<pre><code>mutation M {
  createVideo(title: "hoge") {
    id
    title
    watched
  }
}
</code></pre>

<p>を試す。</p>

<p>この時点の index.js:</p>

<pre><code>'use strict'

const express = require('express')
const graphqlHTTP = require('express-graphql')
const {
  GraphQLSchema,
  GraphQLObjectType,
  GraphQLID,
  GraphQLString,
  GraphQLBoolean,
  GraphQLNonNull,
  GraphQLList,
} = require('graphql')
const { getVideoById, getVideos, createVideo } = require('./data')

const PORT = process.env.PORT || 3000
const server = express()

/*
video
  id
  title
  watched
*/

const videoType = new GraphQLObjectType({
  name: 'Video',
  description: 'video',
  fields: {
    id: {
      type: GraphQLID,
      description: 'id of video',
    },
    title: {
      type: GraphQLString,
      description: 'title of video'
    },
    watched: {
      type: GraphQLBoolean,
      description: 'has watched'
    }
  }
})

const queryType = new GraphQLObjectType({
  name: 'QueryType',
  description: 'root query',
  fields: {
    videos: {
      type: new GraphQLList(videoType),
      resolve: getVideos,
    },
    video: {
      type: videoType,
      args: {
        id: {
          type: new GraphQLNonNull(GraphQLID),
          description: 'id of video',
        }
      },
      resolve: (_, args) =&gt; getVideoById(args.id)
    }
  }
})

const mutationType = new GraphQLObjectType({
  name: 'Mutation',
  description: 'Mutation type',
  fields: {
    createVideo: {
      type: videoType,
      args: {
        title: {
          type: new GraphQLNonNull(GraphQLString),
          description: 'title of video',
        },
      },
      resolve: (_, args) =&gt; {
        return createVideo(args)
      }
    },
  },
})

const schema = new GraphQLSchema({
  query: queryType,
  mutation: mutationType,
})

server.use('/graphql', graphqlHTTP({
  schema,
  graphiql: true,
}))

server.listen(PORT, () =&gt; {
  console.log(`Listening on http://localhost:${PORT}`)
})
</code></pre>

<p>data.js:</p>

<pre><code>'use strict'

const videoA = {
  id: 1,
  title: 'title1',
  watched: true
}
const videoB = {
  id: 2,
  title: 'title2',
  watched: false
}
const videos = [videoA, videoB]

const getVideos = () =&gt; new Promise(resolve =&gt; resolve(videos))

const createVideo = ({ title }) =&gt; {
  const maxId = Math.max.apply(null, videos.map(v =&gt; v.id))
  const watched = false
  const video = {
    id: maxId + 1,
    title,
    watched,
  }
  videos.push(video)
  return video
}

const getVideoById = (id) =&gt; new Promise(resolve =&gt; {
  const [video] = videos.filter(v =&gt; (v.id + '') === id)
  resolve(video)
})

exports.getVideoById = getVideoById
exports.getVideos = getVideos
exports.createVideo = createVideo
</code></pre>

<h2>createVideo の args を分離したい</h2>

<p>require のところに <code>GraphQLInputObjectType,</code> を追加。</p>

<pre><code>const videoInputType = new GraphQLInputObjectType({
  name: 'VideoInputType',
  description: 'video input type',
  fields: {
    title: {
      type: new GraphQLNonNull(GraphQLString),
      description: 'title of video',
    },
  }
})

const mutationType = new GraphQLObjectType({
  name: 'Mutation',
  description: 'Mutation type',
  fields: {
    createVideo: {
      type: videoType,
      args: {
        video: {
          type: new GraphQLNonNull(videoInputType)
        },
      },
      resolve: (_, args) =&gt; {
        return createVideo(args.video)
      }
    },
  },
})
</code></pre>

<p><code>node index.js</code> を再起動して <code>http://localhost:3000/graphql</code> で</p>

<pre><code>mutation M {
  createVideo(video: {title: "hoge"}) {
    id
    title
    watched
  }
}
</code></pre>

<p>を試す (<code>video:</code> で一段増えているので注意)</p>

<pre><code>{
  videos {
    id
    title
  }
}
</code></pre>

<p>などを試す。</p>

<h2>休憩</h2>

<h3>createVideo も Promise にするとどうか</h3>

<p>createVideo の末尾を <code>return Promise.resolve(video)</code> にしても問題なく動いた。</p>

<h2>ruby でどうか</h2>

<ul>
<li><code>rails new getting_started_graphql_ruby</code></li>
<li><a href="http://graphql-ruby.org/getting_started">http://graphql-ruby.org/getting_started</a></li>
<li>Gemfile に <code>gem 'graphql'</code> を追加</li>
<li><code>bundle install</code></li>
<li><code>rails g graphql:install</code></li>
<li>Gemfile に <code>graphiql-rails</code> が追加されているので <code>bundle install</code></li>
</ul>


<h2>video 追加</h2>

<ul>
<li><code>rails g graphql:object Video id:Int title:String watched:Boolean</code></li>
<li>id は Int ではなく ID が正しいので <code>rails d graphql:object Video id:Int title:String watched:Boolean</code> で消してやり直し</li>
<li><code>rails g graphql:object Video id:ID title:String watched:Boolean</code></li>
<li><code>app/graphql/types/query_type.rb</code> を変更</li>
</ul>


<pre><code>  field :video do
    type Types::VideoType
    argument :id, !types.ID
    description 'Find video by ID'
    resolve -&gt;(obj, args, ctx) { Video.find(args["id"]) }
  end
</code></pre>

<p><code>rails s</code> を起動して <code>http://localhost:3000/graphiql</code> (express-graphql での例と違って <code>/graphql</code> ではなく <code>i</code> が入る) で</p>

<pre><code>{
  video(id: 1) {
    id
    title
  }
}
</code></pre>

<p>を試すと server 側で <code>NameError (uninitialized constant Video):</code> になるのを確認。</p>

<ul>
<li><code>rails g model video title watched:boolean</code></li>
<li><code>rake db:migrate</code></li>
<li><code>rails c</code> で <code>Video.create(title: "Hoge", watched: false)</code> などでレコードを作成しておく</li>
<li>graphiql で試す</li>
</ul>


<pre><code>{
  video(id: 1) {
    id
    title
    watched
  }
}
</code></pre>

<h2>mutation</h2>

<ul>
<li><code>app/graphql/mutations/create_video.rb</code></li>
</ul>


<pre><code># 動かない
Mutations::CreateVideo = GraphQL::Relay::Mutation.define do
  name "CreateVideo"

  return_field :video, Types::VideoType

  input_field :title, !types.String

  resolve -&gt;(obj, args, ctx) {
    return Video.create(title: args["title"])
  }
end
</code></pre>

<ul>
<li><code>app/graphql/getting_started_graphql_ruby_schema.rb</code> に <code>mutation(Mutations::CreateVideo)</code> を追加</li>
<li><code>GraphQL::Schema::InvalidTypeError (CreateVideo has an invalid type: must be an instance of GraphQL::BaseType, not GraphQL::Relay::Mutation</code> になってうまくいかない</li>
<li><code>rails g graphql:mutation</code> は relay mutation 用で違うらしい</li>
</ul>


<h2>クライアント</h2>

<ul>
<li><a href="http://dev.apollodata.com/react/">http://dev.apollodata.com/react/</a> が redux っぽくてしっくりきたらしい。</li>
<li>rack-cors の設定が必要?</li>
<li><a href="https://github.com/facebook/relay">https://github.com/facebook/relay</a></li>
</ul>


<h2>mutation の動くコード例</h2>

<p>rito さんに動く例をみせてもらって修正。</p>

<p><code>app/graphql/mutations/video.rb</code>:</p>

<pre><code>Mutations::Video = GraphQL::ObjectType.define do
  name "mutation"

  field :video, Types::VideoType do
    description "Create a video"
    argument :title, !types.String

    resolve -&gt;(obj, args, ctx) {
      Video.create(title: args["title"], watched: false)
    }
  end
end
</code></pre>

<p>(<code>name "Video"</code> にすると <code>Duplicate type definition found for name 'Video'</code> で動かなかった。)</p>

<p><code>app/graphql/getting_started_graphql_ruby_schema.rb</code>:</p>

<pre><code>GettingStartedGraphqlRubySchema = GraphQL::Schema.define do
  query(Types::QueryType)
  mutation(Mutations::Video)
end
</code></pre>

<p><code>http://localhost:3000/graphiql</code> で以下を試す。</p>

<pre><code>mutation M {
  video(title: "foo") {
    id
    title
    watched
  }
}
</code></pre>

<pre><code>{
  video(id: 2) {
    id
    title
    watched
  }
}
</code></pre>

<p>追加されたのがみえたら OK</p>

<p>時間切れで試せなかったけど、 mutation を複数追加する場合はどうなるのかがわからなかった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian 9 "Stretch" リリースパーティ in 関西に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-18-kansai-debian-meeting.html"/>
    <updated>2017-06-18T13:24:10+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://debianjp.connpass.com/event/59443/">Debian 9 &ldquo;Stretch&rdquo; リリースパーティ in 関西</a>に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<h2>オープニング</h2>

<ul>
<li>リリースされたらしい。</li>
<li>リリースノートからのパッケージのバージョンいろいろ</li>
<li>変更点いろいろ</li>
<li>MariaDB → MySQL</li>
<li>GnuPG</li>
<li>デバッグシンボル向けの新しいアーカイブ: stretch-debug</li>
<li>Xorg サーバーは root 権限が不要になった</li>
<li>sysvinit だと X で問題がおきるらしい?</li>
<li>upstart はなくなったらしい</li>
<li>Perl 関連で問題が起きる可能性がある?</li>
</ul>


<h2>さくらインターネット様からお知らせ</h2>

<p>さくらの VPS やさくらのクラウドでは ISO イメージアップロードで使えますという話</p>

<h2>オープニング続き</h2>

<ul>
<li><a href="https://www.debian.org/News/2017/20170617">https://www.debian.org/News/2017/20170617</a></li>
<li>リリースが確認できたので乾杯に移行</li>
</ul>


<h2>デスクトップ環境の話</h2>

<ul>
<li>インストーラーの途中でデスクトップ環境が選べるようになった</li>
<li>リリースノートとインストールガイドは流し読みで良いのでみておくと良い</li>
<li>UEFI は対応しているが、セキュアブート対応は見送られた</li>
<li>プロプライエタリなファームウェアが必要なハードウェアの場合はフェームウェア入り非公式イメージを使うのが楽</li>
<li>カーネルにおけるフリーと Debian のフリーが違うので、そういうもの (非公式イメージ) が存在する</li>
<li>non-free が Debian 公式ではないのと同様の意味で非公式</li>
<li>root パスワードを設定しなければ root を無効にして sudo を使うようにできる (以前からそうだった)</li>
<li>netinst の iso でデスクトップ環境のみチェックして個別のデスクトップ環境を選ばなかった場合は GNOME になる</li>
<li>複数入れた場合にどうなるのかは未調査</li>
<li>というわけで GNOME デスクトップの話</li>
<li>GNOME 3 は初見だと使い方がわからない</li>
<li>今回は gnome-initial-setup パッケージが追加されたので案内が出るかと思ったら出ない?</li>
<li>gnome-initial-setup パッケージを手動で入れてログアウトしてログインし直すと出る</li>
<li>初期設定の後、ヘルプが開く</li>
<li>gnome-initial-setup で設定されていないと、キーボード設定が英語キーボードになっている</li>
<li>フォントを入れる</li>
<li>フォントを削除する</li>
<li>fonts-droid-fallback が Android でのいわゆる中華フォントなので、完全削除すると良い</li>
<li>Noto Serif CJK は backports に入るらしい</li>
<li>ターミナルとか向けには migmix とか ricty とか</li>
<li>丸いフォントが好みでない人は fonts-vlgothic を消して IPA フォントを使うと良い</li>
<li>ツッコミで fontconfig が難しい話</li>
<li>右上から開ける設定の他に Tweak Tool</li>
<li>GNOME 拡張機能は JavaScript と CSS でできている</li>
<li>主要なものはパッケージで入れるのが良いのでは</li>
<li>オススメ: gnome-shell-extension-dashtodock, gnome-shell-extension-top-icons-plus</li>
<li>会場から: Alt+F2 r Enter で gnome-shell が再起動する</li>
<li>uim-toolbar-gtk3-systray が出てこない?</li>
<li>起動順序の問題で uim-toolbar-gtk3-systray の後に gnome-shell が起動するので認識されていない</li>
<li>回避策1: gnome-shell を再起動</li>
<li>回避策2: alternative で /bin/true にしておいて uim-toolbar-gtk3-systray は autostart でユーザーが起動する</li>
<li>回避策3: uim を諦める</li>
<li>お好みで: gnome-shell-extension-move-dock, gnome-shell-extension-remove-dropdown-arrows, gnome-shell-extension-impatience, gnome-shell-extension-suspend-button</li>
<li>パッケージ以外の拡張機能は GNOME Shell Extensions というサイトから</li>
<li>ブラウザー拡張の chrome-gnome-shell でアップデートがブラウザー経由でできる</li>
<li>Dash to Panel と Arc Menu で Windows 風にできる</li>
<li>デスクトップにアイコンを表示して Nautilus のアイコンサイズを変更するとデスクトップのも一緒に変わる</li>
<li>隠し設定で切り離すこともできるらしい</li>
<li>プロプライエタリなビデオドライバを使うなら contrib と non-free は必須</li>
<li>backports の話</li>
<li>software-properties-gtk で (synaptic から) 追加すると /etc/apt/trusted.gpg が壊れるのに昨日気づいた</li>
<li>Firefox ESR の Accept-Language が en のまま</li>
<li>削除して登録し直すとなおる</li>
</ul>


<p>追加で Debian T シャツの話</p>

<h2>Ryzen の話</h2>

<ul>
<li>lurdan さん</li>
<li>Ryzen の話</li>
<li><a href="https://www.sakura.ad.jp/koukaryoku/">機械学習、データ解析なら 高火力コンピューティング | さくらインターネット</a></li>
<li><a href="http://itpro.nikkeibp.co.jp/atcl/column/14/346926/022700857/">ニュース解説 - グーグルもGPUクラウドに参入、4社のコスパ比較：ITpro</a></li>
<li>テラフロップスあたりの月額料金が安い</li>
<li>時間貸しなどの時は初期費用はいらないらしい</li>
<li>Ubuntu インストールしたての状態なので、使うパッケージなどのインストール作業が必要</li>
<li><a href="https://www.sakura.ad.jp/education/">さくらの文教向けソリューション｜さくらインターネット</a></li>
<li>Ryzen の話に戻り</li>
<li>linux kernel 4.10 から対応コードが入っている</li>
<li>その他の対応も考えると 4.11 以降が望ましい</li>
<li>Proxmox は Debian のユーザーランドに Ubuntu zesty のカーネルなので、こういう用途の自宅サーバーには Proxmox VE が良いのではないか</li>
<li><a href="https://twitter.com/search?q=%23Ryzen_SEGV_Battle">#Ryzen_SEGV_Battle - Twitter検索</a></li>
</ul>


<h2>Stretch リリース</h2>

<ul>
<li>uwabami さん</li>
<li>アップグレードの人柱の話</li>
<li>何台もあげたが特にはまらなかった</li>
<li>リリースノート読み</li>
<li><a href="https://www.debian.org/releases/stretch/amd64/release-notes/ch-whats-new.ja.html">第2章 Debian 9 の最新情報</a></li>
<li><a href="https://www.debian.org/releases/stretch/amd64/release-notes/ch-information.ja.html">第5章 stretch で注意すべき点</a></li>
<li>pass がおすすめ</li>
<li>net-tools パッケージ (ifconfig など) が非推奨</li>
<li>sl 的なものを設定するのが良いかも</li>
<li>PIE: カーネルを更新しておかないとセグメンテーションフォルトになる可能性があるので jessie でもちゃんと 8.8 (以降) に更新してから stretch にあげ始める必要がある</li>
<li>一番のハマりどころになりそう</li>
<li>セキュリティサポートの制限</li>
<li>midori, konqueror などは完全なセキュリティサポートがないので Firefox や Chromium を使いましょう</li>
<li>node.js はリソース不足で一切対応されない</li>
<li>php とかコンパイラー対応がなくなった Chromium とか WordPress とか、セキュリティサポートがなくなった例は過去にもある</li>
<li><a href="https://security-tracker.debian.org/tracker/">Security Bug Tracker</a></li>
<li>「旧式の暗号と SSH1 プロトコルは OpenSSH では標準で無効にされています」</li>
<li>evdev から libinput</li>
<li>「Perl での変更がサードパーティ製ソフトウェアを壊す可能性があります」</li>
<li>カレントディレクトリが <code>@INC</code> からなくなる話</li>
<li>ライブアップグレード</li>
<li>jessie のまま最新に更新を確認</li>
<li>apt line 書き換え</li>
<li>apt-get update</li>
<li>apt-get upgrade</li>
<li>apt-get dist-upgrade</li>
<li><a href="https://wiki.debian.org/UnattendedUpgrades">UnattendedUpgrades - Debian Wiki</a></li>
<li>設定ファイルは選択に応じて <code>*.dpkg-old</code> とか <code>*.dpkg-dist</code> ができる</li>
<li>apt autoremove</li>
<li>reboot</li>
<li>sysvinit にしていたので systemd に移行</li>
<li>sysvinit がなくなったので sudo reboot は進むがコンソールに帰ってこなくなるので、処理が進んだ段階でブチっと切れて進む</li>
<li>atig は bundle し直しで動いた</li>
<li>znc も何か直したら動いた</li>
<li>bitlbee は動いていなかった</li>
<li>さくらインターネットさんで借りている VPS の stretch への upgrade の Live 実演終了</li>
</ul>


<h2>LT</h2>

<p>ここから LT タイム。</p>

<h2>最新ハードウェアへのインストール</h2>

<ul>
<li>初めて Jessie をインストールしたときに起きたエラーについて</li>
<li>「ブートローダーのインストールに失敗しました。」</li>
<li>原因: GRUB が NVMe に対応していない</li>
<li>解決策1: NVMe 規格の SSD を買わない (おすすめは SATA)</li>
<li>解決策2: NVMe に対応しているブートローダーを使う</li>
<li>NVMe に対応しているブートローダー: rEFInd</li>
</ul>


<p>「ブートローダーのインストールに失敗しました。」というメッセージは見覚えがあったので、インストーラーで出たメッセージだとすぐにわかったけど、わからなかった人もいたようで、どんな状況で見たのか思い出そうとしたけど、思い出せなかったので、仮想環境か何かで特殊なことをしていて出ただけで困らなかったのかもしれない、と思った。</p>

<h2>yabuki さんの話</h2>

<p>自分の準備中で聞けず。</p>

<h2>Debian での OpenSSH の TCP wrappers サポート</h2>

<p>なぜか HDMI を接続しても反応しなかったので、PDF にして、さとうさんの PC を借りて発表しました。</p>

<p>発表資料はいつも通り<a href="https://github.com/znz/openssh-on-debian9">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/openssh-on-debian9/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/stretchopensshtcp-wrappers">slideshare</a>, <a href="https://speakerdeck.com/znz/stretchdefalseopensshfalsetcp-wrapperssapoto">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-openssh-on-debian9">RubyGems</a> にあげています。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/openssh-on-debian9/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/openssh-on-debian9/" title="stretchでのOpenSSHのTCP wrappersサポート">stretchでのOpenSSHのTCP wrappersサポート</a>
</div>


<h2>T シャツの話</h2>

<p>欲しい人は OSC 京都や勉強会で、または @nogajun さんに直接連絡</p>

<h2>告知</h2>

<ul>
<li>次回は 7月はなしで、代わりに<a href="https://www.ospn.jp/osc2017-kyoto/">オープンソースカンファレンス2017 Kyoto</a>の8月5日で。</li>
<li><a href="https://k-of.jp/">KOF</a> (今年のサイトはまだない)</li>
<li><a href="https://histudy.connpass.com/">姫路IT系勉強会</a>の8月が今回と同じさくらインターネットさんが会場</li>
</ul>


<h2>感想</h2>

<p>リリースは twitter などではリリースされたっぽい感じでしたが、たぶん最後のアナウンスっぽい<a href="https://lists.debian.org/debian-announce/2017/msg00003.html">リリースアナウンスのメール</a>が「Sat, 17 Jun 2017 20:22:36 -1000」つまり日本時間だと「2017-06-18 15:22:36 +0900」で、少なくともリリースパーティー中にはリリースされていたようです。</p>

<p>すでにあげた人の話では、特に大きなトラブルもなさそうなので、安心してあげられそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 123 回関西 Debian 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-28-kansai-debian-meeting.html"/>
    <updated>2017-05-28T13:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://debianjp.connpass.com/event/57323/" title="第 123 回関西 Debian 勉強会">第 123 回関西 Debian 勉強会</a>に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<p>Apache Arrow の勉強会の後、一緒にランチに行くのに参加していたら、ちょっと遅くなってしまって、 13:40 すぎに到着しました。</p>

<h2>オープニング</h2>

<ul>
<li>事前課題は必須項目になっていなかったため、 connpass での参加登録時に出ていなかったので、その場で発表して資料が更新されていた。</li>
<li>初参加の人がいた</li>
<li>初めて作った人とか長い間使っていない人とか</li>
<li>easypg は表示は復号されているがメモリダンプをしても平文はないらしい</li>
<li>期限切れと revoke の違い: 期限切れはのばせるが、 revoke は取り消せない</li>
</ul>


<p>ruby の svn のコミットに必要という話は <a href="https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowto">https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowto</a> <a href="https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowtoJa">https://bugs.ruby-lang.org/projects/ruby/wiki/CommitterHowtoJa</a> あたりに書いてあるのですが、今見ると <code>ssh-keygen -b 2048 -f ruby_key</code> になってて古い感じ。英語の方は <code>~/.ssh/id_rsa or ~/.ssh/id_dsa</code> と書いてあるのでもっと古い感じが。</p>

<h3>途中で矢吹さんの話</h3>

<ul>
<li>カジュアルに使うのも良いけど、暗号関連は色々気にしている人もいるので気をつけましょう (色々なポリシーがあるのを尊重しましょう) という話とか</li>
<li>cypherpunk : 暗号の民主化</li>
<li>FST-01 を入手した (まだ秘密鍵は入れていない) ので回覧</li>
</ul>


<h2>GnuPG にまつわるアレコレ - GnuPG2 とか Keybase とか Yubikey とか</h2>

<ul>
<li>key id は昔は 8 文字だったけど conflict が作れるという話になって、今は 16 文字 (以上?) が普通らしい</li>
<li>(勉強会中に聞きそびれてしまったけど、GPG の key id が fingerprint の末尾っていうのは、みんなどうやって知るんだろう?)</li>
<li>(自分は昔の key sign party で fingerprint しか書いてないけど、どうやって fetch するの? と聞いたときに教えてもらったけど。)</li>
<li>GnuPG とは?</li>
<li>OpenPGP: RFC になっている</li>
<li>暗号化によって盗聴を防ぐ (機密性)</li>
<li>署名によって改ざんを検知可能にする (完全性)</li>
<li>例: secure-apt, DKIM</li>
<li>信頼の輪 (Web of trust) によって本人を同定</li>
<li>過去の資料の参照情報紹介</li>
<li><a href="https://wiki.debian.org/KansaiDebianMeeting/20150823" title="第 101 回 関西 Debian 勉強会">第 101 回 関西 Debian 勉強会</a>の「wiki:Subkeys」が気になった</li>
<li>Windows の GUI の GPG クライアントで良いものがない</li>
<li>mac は GPG Tools というので標準の Mail.app で GPG 対応できるらしい</li>
<li>Web メールで困る話</li>
<li>Thunderbird は Enigmail</li>
<li>鍵の選び方の話</li>
<li>ED25519 は gnupg 1.4 系 (今は oldstable ブランチ) で復号できない</li>
<li>今の所は互換性のための RSA4096 と速い ED25519 を併用するのが良いかもしれない</li>
<li>GnuPG 2 - Stretch での変更点</li>
<li>gnupg (1.4 → 2.1), gnupg1 (なし → 1.4), gnupg2 (2.0 → drop)</li>
<li>gnupg 2.1 は初回実行時に自動的に移行が実行されて、2.1 用のファイル (<code>pubring.kbx</code> とか <code>private-keys-v1.d/</code> とか) が作成される</li>
<li>古いバージョン用のファイル (<code>pubring.gpg</code> とか <code>secring.gpg</code> とか) はそのまま残るので古いバージョンの共存も可能 (だがそれぞれのバージョンのファイルしか更新されないので、併用すると情報がずれていくはず)</li>
<li>2.0 がどっちのファイルを使うのかは検証してないので不明</li>
<li>プログラムの分離具合が整理された (<a href="http://miniconf.debian.or.jp/">Mini Debian Conference Japan 2016</a> の<a href="http://miniconf.debian.or.jp/assets/files/gnupg-now.html">g新部さんのスライド</a> の図が非常にわかりやすい (GnuPG programs (2) の図))</li>
<li>proxy 設定が gpg.conf から dirmngr.conf に変わった</li>
<li>use-gpg-agent が obsolete (常に有効で単純に無視される)</li>
<li>大量の ssh 接続に使うと scdaemon がエントロピーが足りないという話</li>
<li>haveged (はべーじでぃー(と言っていた)) とか rng-tools とか</li>
<li>disable-scdaemon をつけておくと無駄に scdaemon が起動しなくなる (gpg-agent から scdaemon が起動して scdaemon 対応のデバイスがなければ、すぐに gpg-agent に返ってくるらしいが、起動するだけ無駄という話)</li>
<li>gpg-agent を ssh-agent として使うのは簡単</li>
<li>GNOME で gnome keyring daemon は止めやすい</li>
<li>mate や xfce では ssh-agent を止めにくい</li>
<li>ssh-agent を入れないときは <code>.xsessionrc</code> で <code>SSH_AUTH_SOCK</code> を自分で設定する必要がある</li>
<li>mate や xfce では <code>.xsessionrc</code> で設定しても、さらに上書きされるらしい</li>
<li>YubiKey <a href="https://yubikey.yubion.com/">https://yubikey.yubion.com/</a> <a href="https://www.cloudgate.jp/yubikey.html">https://www.cloudgate.jp/yubikey.html</a></li>
<li>ED25519 には対応していない</li>
<li>RSA 4096 で復号で 0.5 秒ぐらい</li>
<li>(後でし</li>
<li>Qt5 での GUI ツールとコマンドラインツールがある</li>
<li>keybase.io というサービスがあるらしいが秘密鍵もアップロードできるらしく?</li>
<li>アカウントを作ってみた <a href="https://keybase.io/uwabami">https://keybase.io/uwabami</a> が消すかも。</li>
<li><a href="https://github.com/keybase/client">https://github.com/keybase/client</a> には大量の Issues が。</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>今後の予定</li>
<li>来月は17日に stretch がリリース予定なので、25日から18日に予定を変更してリリースパーティの可能性が高そう</li>
</ul>


<h2>よくわからないままだった点</h2>

<ul>
<li>懇親会への移動中などにある程度話しましたが</li>
<li><code>gpg --version</code> で出てくる「公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA」の「EDDSA」(ECDSA ではなく)と「ED25519」は同じ?</li>
<li>Curve25519 と ED25519 の関係</li>
<li><a href="https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%89%E3%83%AF%E3%83%BC%E3%82%BA%E6%9B%B2%E7%B7%9A%E3%83%87%E3%82%B8%E3%82%BF%E3%83%AB%E7%BD%B2%E5%90%8D%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0" title="エドワーズ曲線デジタル署名アルゴリズム">エドワーズ曲線デジタル署名アルゴリズム</a> に多少説明がある</li>
</ul>

]]></content>
  </entry>
  
</feed>
