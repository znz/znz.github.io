<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: event | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/event/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-09-14T23:19:02+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第11回 HosCon - GMO Hosting Conference - @大阪 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-14-hoscon.html"/>
    <updated>2017-09-14T22:46:24+09:00</updated>
    <id>http://blog.n-z.jp/blog/hoscon</id>
    <content type="html"><![CDATA[<p><a href="https://gmohoscon.connpass.com/event/63440/">第11回 HosCon - GMO Hosting Conference - @大阪</a> に参加したので、そのメモです。</p>

<!--more-->


<h2>会場</h2>

<p>グランフロントタワー B の 梅田・GMO Yours での開催でした。
前に何かの勉強会で一度来たことがあるような気がするのですが、何だったか思い出せませんでした。</p>

<p>タワー B 自体は最近 Rails Developers Meetup #4 大阪会場 で来ていました。</p>

<h2>その他</h2>

<p>ハッシュタグは <code>#hoscon</code> でしたが、ツイートはあまりありませんでした。</p>

<p><a href="https://twitter.com/rzl5/status/908276901914882049">https://twitter.com/rzl5/status/908276901914882049</a> に写真がありますが、 ConoHa カードをもらったので、使ってみたいと思いました。</p>

<h2>コンテナ基盤であるLXC/LXDを本番環境で運用する話</h2>

<ul>
<li>2011年に物理からKVMによる完全仮想化へ</li>
<li>完全仮想化はリソースに無駄があるということで準仮想化、コンテナ化へ</li>
<li>なぜLXDか?</li>
<li>他に検討した選択肢は Docker, KVM, OpenVZ, (VMware は高いので選択肢に入らず)</li>
<li>質問: Linux だけで Windows や BSD はなかった? カーネルモジュールなども問題なかった? → Linux で、カスタマイズはしていたが共通の kernel だったので問題なく集約できた。</li>
<li>質問: OpenVZ が遅かった? → 一般的には遅くないかもしれないが、試した環境ではコンテナより遅かった。</li>
<li>LXDは2017年2月から運用開始</li>
<li>ホストOSは Ubuntu 16.04 LTS</li>
<li>ゲストOSは使い慣れたCentOS</li>
<li>なぜZFSか?　→ 公式がオススメしているのとベンチマークの結果がよかった</li>
<li>今も苦労している部分はある</li>
<li>fio で計測</li>
<li>ZFS を採用した理由: 機能性、柔軟性, 比較対象: lvm, dir</li>
<li>ホストシステム構築時のトラブル</li>
<li>オープンファイル数の上限など色々な上限に引っかかった</li>
<li>ネットワーク編</li>
<li>NIC の MAC アドレスがかぶっていた</li>
<li>LXD 運用編</li>
<li>Apache RLimitNPROC にひっかかった</li>
<li>ホストのロードアベレージが急激に上昇 → ZFS がボトルネックだったのでチューニングを実施 (ZFS ARC?)</li>
<li>2ラック (KVM) → 1ラック (LXD)</li>
<li>質問タイム</li>
<li>LXD で新しくサービスできるようになったことはある? → 新たなサービスはないが、快適なディスクIOを提供できている</li>
<li>まだリリースできていないが、準専有の基盤ができた</li>
<li>ZFS はメモリをたくさん使って残りがユーザーの領域? → ご想像にお任せします</li>
<li>どのようなところで運用負荷の軽減? 運用でカバーしているところ? → 物理が減ったので楽になった。リソースの制限の自動化を目標に手動でやっている。物理より柔軟にできるのが良い。</li>
<li>ライブマイグレーションをしているかどうか? → やっていない。今後対応していく。</li>
<li>内製でコントロールパネルのようなものを作っている? → ない。全部コマンドで。</li>
<li>CentOS? → 既存のノウハウをいかすために選んだ。</li>
<li>OS のアップデートはどうしている? → カーネル以外は通常のアップデート</li>
<li>ホスト側のリソース監視はしていると思うが、コンテナ側はどうしている? → 緩めの limit を設定してる</li>
<li>PHP などのバージョン違い? → 問い合わせで個別に対応することもある</li>
<li>サポートが終了したものはなるべく引き継がない</li>
<li>CentOS 6? 7? → 7</li>
</ul>


<h2>休憩</h2>

<p><!-- 20:12 から? -->20:16 まで</p>

<h2>ロリポップ！マネージドクラウド FastContainerの裏側</h2>

<ul>
<li>ロリポップ！マネージドクラウドは FastContainer アーキテクチャを採用していて、コンテナエンジンに haconiwa</li>
<li>質問: 価格? → 価格についてはまだ未定</li>
<li>オートスケール</li>
<li>質問: 何をもってマネージド? → コンテナの起動の仕方が特殊 (FastContainer) で、完全に root 権限があるわけではないなど</li>
<li>質問: データベース? → データベースはコンテナで動いていないので、オートスケールではない</li>
<li>質問: オートスケールは php だけ? → apache + php</li>
<li>質問: データベースがオートスケールではないのなら、ユーザーごとのリソース制御? → まだ未確定</li>
<li>質問: 具体的にアクセスが増えると、とは? → 実際は CPU のスロットルタイムをみているので、CPU の負荷が高くなれば。</li>
<li>逆に負荷が下がればコンテナを減らす。</li>
<li>質問: ユーザーごとのリソースの分割? 他のユーザーの影響は受けるのか? → 基本的には影響は受けない。リソースは分離している。ホスト自体が重くなっても負荷分散できるアーキテクチャになっている。</li>
<li>FastContainer とは?</li>
<li>FastCGI のコンテナ版といったイメージ</li>
<li>リクエスト契機で Web アプリのコンテナが起動</li>
<li><p>一度起動したコンテナはその後しばらく使い回して、一定時間が経過したら終了</p></li>
<li><p>利点</p></li>
<li>オートスケール</li>
<li>リクエストがないと停止するのでリソースの節約</li>
<li>いろんなコンテナで色々なアプリを提供</li>
<li>常に最新</li>
<li><p>他のマシンへの載せ替えも楽</p></li>
<li><p>マネージドクラウドの構成</p></li>
<li>CMDB というところでコンテナの情報を管理</li>
<li>質問: 構成が速度に影響があるか? → ある。今は動くものを優先。 nfs が重いというのは多方面から突っ込まれている</li>
<li>質問: 起動していない時と起動している時のパフォーマンスの差? → 確かにたちがっていない状態のアクセスは時間がかかる。調整中</li>
<li>質問: どこが大きくなっていく? compute? → 今のところ compute と datapool が増えるのを想定している。</li>
<li>パフォーマンスは調整していく段階なので、今後機会があれば。</li>
<li>ngx_mruby</li>
<li>haconiwa</li>
<li>コンテナ</li>
<li>基本は1コンテナに1プロセス</li>
<li>ssh も sshd コンテナ経由</li>
<li>FastContainer リクエスト制御フロー</li>
<li>質問 → 今はチューニングがすんでいないので初回は 2,3 秒ぐらいかかる</li>
<li>質問 → ユーザーが予約枠を設定していて、そこまでしか上がらないようにしている</li>
<li><p>予約枠は金額で設定できるようにしたい</p></li>
<li><p>コンテナの死</p></li>
<li>コンテナの寿命: lifetime が設定されていて一定時間経過で自動停止</li>
<li>なぜ寿命?</li>
<li>リソースの節約</li>
<li>新しくなるタイミングでライブラリなども更新されてセキュア</li>
<li>別ホストに移行したい時も CMDB をいじるだけ</li>
<li>compute のメンテも簡単</li>
<li><p>質問: リクエストが有る限り死なない? → lifetime で死ぬ</p></li>
<li><p>オートスケール</p></li>
<li>haconiwa が cgroup から各コンテナの CPU, I/O 負荷を計測・監視</li>
<li>ユーザーはコンテナの予約枠を設定可能</li>
<li>スケールインは CMDB の変更だけで停止は自動停止任せ</li>
<li><p>予約枠を取るだけでオートスケール</p></li>
<li><p>コンテナの種類も増やしていきたい</p></li>
<li><p>質問タイム</p></li>
<li>予約枠? パケット量をみる? → 設計中。基本的には使ったぶんだけ課金する予定?</li>
<li>コンテナのサーバー自体が高負荷になったり物理的な障害が起きても自動でフェイルオーバー? → 自動ではできていない。手動でのせかえることはできる。自動化は可能ではある。</li>
<li>SSL 証明書? Symantec のような台数分の場合とか → あとで</li>
<li>オートスケールをする監視をしている間隔? → 暫定で1秒</li>
<li>オートスケールの課金の指標は? ニュースで取り上げられる予定だから、とか。 → 設計中</li>
<li>聞き逃し</li>
<li>WAN の IP は共有? → 共有</li>
<li>コンテナはドメインでみている</li>
<li>IP アドレス単位で他のユーザーの影響は受ける可能性がある</li>
<li>現状 CMDB はデータベースのフェイルオーバー任せなので、そこが止まると止まる可能性はある</li>
<li>のせるアプリの開発環境? → 将来的には用意したい</li>
<li>聞き逃し → コンテナ単位でどのくらいパフォーマンスが出ているかだそうとか色々話はある</li>
</ul>


<h2>懇親会</h2>

<p>5分休憩の後で懇親会でした。</p>

<h2>感想</h2>

<p>LXD を採用したという話自体は以前に別の勉強会で聞いたことがあったので、それと重複した話もありましたが、もっと技術的につっこんだ話も聞けておもしろかったです。</p>

<p>LXD は他では使っているという話を聞いたことがないので、使っている人はもっと情報を出してくれればいいのに、という気がしています。
個人的には、情報がなくて探しても何もわからないよりは、Docker のように情報がたくさんあって玉石混交で、自分で見極めないといけない、という状態の方が望ましいです。</p>

<p>マネージドクラウドの話は haconiwa って作ってみたというようなものじゃなくて、ちゃんと実用的に使うためのものだったのかというのが驚きました。
FastContainer は用途があえば良さそうな感じなので、機会があれば使ってみたいと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO&東海道らぐオフラインミーティング 2017/08/27 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-27-lilo-tokaidolug.html"/>
    <updated>2017-08-27T13:33:33+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-tokaidolug</id>
    <content type="html"><![CDATA[<p><a href="https://lilo.connpass.com/event/64381/">LILO&amp;東海道らぐオフラインミーティング 2017/08/27</a> に参加しました。</p>

<p>今回もアンカンファレンス形式でした。</p>

<!--more-->


<h2>メモ</h2>

<ul>
<li>会場はいつもの 4 階でした。</li>
<li>ハッシュタグ: <code>#lilo_jp</code> <code>#東海道らぐ</code></li>
<li>登録参加者数 12名</li>
<li>自己紹介から</li>
<li>最初の発表は発表者の希望により非公開</li>
<li>途中からきた人は発表の合間に随時自己紹介</li>
</ul>


<h2>自分の発表</h2>

<ul>
<li>自分の lilo.linux.or.jp の話</li>
<li>発表資料に入れていなかった部分については以下の通り</li>
<li>OGP を入れたきっかけは <a href="https://togetter.com/li/1107707">LILO&amp;東海道らぐオフラインミーティング 2017/05/06の記録 - Togetterまとめ</a> で connpass だけ概要と画像が出ていたため</li>
<li><a href="https://developers.facebook.com/tools/debug/">Open Graph Debugger - Developers Facebook</a> (Facebook アカウントがないと使えない?) は OGP がなくても自動検出した内容で埋められるため、本当に反映されるかどうかの確認には使えなかった覚えがあります</li>
<li><a href="https://ja.osdn.net/projects/clamav-jp/lists/archive/users/2017-August/000280.html">[clamav-jp 281] ウィルスDB更新の異常について（解決済）</a></li>
<li><a href="http://qiita.com/ttdoda/items/f16422d709e264cbb8a1">Postfix 2.12 の compatibility_level</a></li>
<li>dokuwiki は <a href="https://bugs.debian.org/854592">#854592 dokuwiki: Unable to login, missing usr/share/php/Crypt/AES.php</a> で消えていた</li>
</ul>


<h2>休憩</h2>

<h2>GPD-Pocket に Ubuntu 17.04 をインストールした話</h2>

<ul>
<li>東海道らぐ四日市 11/25</li>
<li>GPD-Pocket でも Ubuntu 17.04 が動いた</li>
<li>Kernel 4.13RC + Intel Graphics Driver OSS + 蓋開閉</li>
<li>色々な条件で試してNGだったが、偶然蓋を開けたら画面がうつった</li>
<li>ATOM はバニラカーネルの時点でバグがあるらしい</li>
</ul>


<h2>Fireduck OS</h2>

<ul>
<li>東海道LUG有志によるLinuxディストリビューションプロジェクト</li>
<li>○○焼き → Fire duck (あひる焼き)</li>
<li>タブレット向け</li>
<li><a href="https://github.com/TokaidoLUG/fireduckos">https://github.com/TokaidoLUG/fireduckos</a></li>
<li>アーキテクチャ説明</li>
<li>悩み事</li>
<li>journald が起動したプロセスの出力をファイルに書き込むので重い</li>
<li>OSM のアプリ?</li>
<li>UEFI32 向けに 64 bit 環境で 32 bit 向けのビルドが必要なので multilib を使った</li>
<li><a href="https://github.com/TokaidoLUG/meta-intel-mobile">https://github.com/TokaidoLUG/meta-intel-mobile</a></li>
<li><a href="https://github.com/TokaidoLUG">Tokaido Linux User Group</a></li>
<li>欲しいアプリの話</li>
<li>資料は <a href="https://www.slideshare.net/wata2ki">https://www.slideshare.net/wata2ki</a> に公開予定</li>
</ul>


<h2>休憩</h2>

<ul>
<li>懇親会参加者の確認</li>
</ul>


<h2>つなぎの発表</h2>

<ul>
<li>オープンソースカンファレンス広島の紹介</li>
<li>Allwinner タブレットの実演</li>
<li>firefox を動かして、ネットワークが繋がっていないので about:mozilla とか about:robots とか</li>
</ul>


<h2>State of the Map 2017 に行ってきたよ</h2>

<ul>
<li>Open Street Map の国際会議</li>
<li>日本で国際会議をやるのは珍しい</li>
<li>会津若松市は LibreOffice を使っているので、ついでに話を聞きに行った</li>
<li>写真を見ながら色々な話</li>
<li>Maps With Me というアプリが便利らしい</li>
</ul>


<h2>最後の話</h2>

<p>プロジェクターに映らなかったので、集まって話をきいていました。</p>

<h2>クロージング</h2>

<ul>
<li>今後の予定など</li>
<li>会場費は学生以外が 100 円でした。</li>
</ul>


<h2>発表した内容</h2>

<p>スライドはいつも通り <a href="http://slide.rabbit-shocker.org/authors/znz/lilo-20170827/">Rabbit Slide Show</a> (<a href="https://rubygems.org/gems/rabbit-slide-znz-lilo-20170827">RubyGems</a>), <a href="https://slideshare.net/znzjp/lilolinuxorjp-20178">SlideShare</a>, <a href="https://speakerdeck.com/u/znz/p/lilo-dot-linux-dot-or-dot-jp-falsehua-2017nian-8yue">Speaker Deck</a> にあげています。(ソースは <a href="https://github.com/znz/lilo-20170827">github</a> にあげています。)</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/lilo-20170827/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/lilo-20170827/" title="lilo.linux.or.jp の話 (2017年8月)">lilo.linux.or.jp の話 (2017年8月)</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第30回シェル芸勉強会　大阪サテライト＠さくらインターネット大阪本社に午後から参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-26-usptomo-osaka.html"/>
    <updated>2017-08-26T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/usptomo-osaka</id>
    <content type="html"><![CDATA[<p><a href="https://atnd.org/events/90102">第30回シェル芸勉強会　大阪サテライト＠さくらインターネット大阪本社</a>に午後から参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>最近よくいっているグランフロントタワーAのさくらインターネットさんでしたが、今回は初めて部屋の中の方に参加しました。</p>

<h2>第30回シェル芸勉強会</h2>

<p>問題は <a href="https://blog.ueda.tech/?p=10188">【問題のみ】jus共催 第30回危念シェル芸勉強会</a> にあります。</p>

<p>主に macOS の環境で確認しました。</p>

<h3>Q1</h3>

<ul>
<li><code>awk '/^Keywords:/{print FILENAME ":" $0;nextfile}' posts/*/*.md</code> としてみた。</li>
<li>nextfile などを調べていたら時間がかかってしまってあまりちゃんとできず。</li>
<li>ファイル名部分のパスなどの掃除が必要と気づいてなかったのでできていなかった。</li>
<li>解答例では <code>grep -m 1</code> を使っていたけど、 macOS の grep (BSD grep) 2.5.1-FreeBSD だと動作が違うようで、最初のファイルで止まってしまって、うまく動かなかった。</li>
</ul>


<p>macOS Sierra 10.12.6 の例:</p>

<pre><code>% grep --version
grep (BSD grep) 2.5.1-FreeBSD
% grep -m 1 : /etc/passwd /etc/group
/etc/passwd:nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false
</code></pre>

<p>Debian GNU/Linux 9.1 (stretch) の例:</p>

<pre><code>$ grep --version
grep (GNU grep) 2.27
Copyright (C) 2016 Free Software Foundation, Inc.
ライセンス GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

作者 Mike Haertel および その他の方々は &lt;http://git.sv.gnu.org/cgit/grep.git/tree/AUTHORS&gt; を参照してください。
$ grep -m 1 : /etc/passwd /etc/group
/etc/passwd:root:x:0:0:root:/root:/bin/bash
/etc/group:root:x:0:
</code></pre>

<h3>Q2</h3>

<ul>
<li><code>perl -pe 's,(href|src)="(?!http|/)(\./)?,$1="/files/,g' url.html</code></li>
<li><code>(?!)</code> を使いたかったので Perl で。</li>
<li>最初に試しに書いたのはゆるすぎていらないところにつきまくっていた。</li>
<li>正規表現が緩いと charset の属性まで変換してしまうという罠があった。</li>
<li>気にせず置き換えてあとで <code>/files/http://</code> などになった場合に戻すという方針の人が多かった。</li>
</ul>


<h3>Q3</h3>

<ul>
<li><code>&lt; list | awk 'BEGIN{print "...";print "..."};/^\* /{print "&lt;li&gt;" $2 "&lt;/li&gt;"};END{print "...";print "..."}'</code></li>
<li>前後の部分の内容を省略するとこんな感じになった。</li>
<li><code>cat list | pandoc -t html5 -s</code> して削るという手もありらしい</li>
<li>Web サーバーにするには list.html の内容だけではなく <code>HTTP/1.1 200 OK</code> の行も追加する必要があった</li>
</ul>


<h3>Q4</h3>

<ul>
<li>hub コマンドを使ってよかったらしい</li>
<li>がんばって API をたたくのもありっぽい</li>
</ul>


<h3>Q5</h3>

<ul>
<li><code>sed -e 's/[ *]//g' -e '1s/^/p /' -e '$!s/$/*/' complex | ruby</code> はかっこ不足だった。(複素数リテラルが優先されると思ってしまっていた。)</li>
<li><code>sed -e 's/[ *]//g' -e '1s/^/p (/' -e '$!s/$/)*(/' -e '$s/$/)/' complex | ruby</code> でうまくいった。</li>
<li>別解として1行ごとに解釈して inject してみた : <code>ruby -e 'p ARGF.each_line.map{|s|eval(s.gsub(/(?&lt;!\d)i/,"1i"))}.inject(:*)' complex</code></li>
</ul>


<h3>Q6</h3>

<ul>
<li>真面目に計算すると <code>ruby -e 'a=[1,1];f=-&gt;(n){a[n]||=f[n-1]+f[n-2]};1.step{|n|if f[n]==6765;p f[n-4];exit;end}'</code> になった。</li>
<li>自分で計算せずに出そうとすると <code>curl https://en.wikipedia.org/wiki/Fibonacci_number | grep -B4 6765 | head -n 1 | grep -Eo '[[:digit:]]+'</code> になった。英語版 Wikipedia を使っているのは URL が短くてわかりやすいからで、日本語版 Wikipedia の URL でも可能でした。</li>
<li>最初、curl のダウンロード状況出力の右に隠れてしまって1行見落としていて <code>grep -B5</code> にしてしまっていましたが、 <code>grep -B4</code> でした。</li>
</ul>


<h3>Q7</h3>

<ul>
<li>zsh の組み込みのみで <code>for n in {00..99}; [[ -z ${(FM)"$(&lt; nums)":#*$n*} ]] &amp;&amp; echo $n</code></li>
<li>解説は <a href="/blog/2014-12-11-zsh-grep.html">zshでgrepのようなことをする</a> を参照</li>
<li>シーケンスは <code>seq -w 0 99</code> とか <code>{0..9}{0..9}</code> とか</li>
<li><code>{00..99}</code> は bash 3 だとダメそうだった。 (0 1 &hellip; になった)</li>
<li><code>grep -o ..</code> は <code>echo 1234 | grep -o ..</code> で 23 が出てこないのでダメ</li>
<li><code>echo 1234 | sed p | sed '1s/.//' | grep -o ..</code> のようにする</li>
<li>解答例: <code>cat nums | sed p | sed '1s/.//' | grep -o .. | cat - &lt;(seq -w 0 99) | sort | uniq -u</code></li>
<li>fold -w 2 とかこういう時に使ってみると良さそうなコマンドは色々あるっぽい</li>
</ul>


<h3>Q8</h3>

<ul>
<li>問題 差し替え <a href="https://twitter.com/ryuichiueda/status/901330659527897088">https://twitter.com/ryuichiueda/status/901330659527897088</a></li>
<li><code>ruby -e 'ARGF.each_line.map{|s|[(s[2].ord-s[0].ord).abs,s]}.max[1].display' alphabet</code></li>
<li><code>z-v</code> という逆順のところも考慮して abs を入れたけどいらなかったかもしれない。</li>
<li>別解で36進数を使ってみた: <code>ruby -e 'ARGF.each_line.map{|s|[eval(s.gsub(/\w+/){$&amp;.to_i(36)}).abs,s]}.max[1].display' alphabet</code></li>
<li>abs の代わりにソートして引くという方法もあるらしい</li>
<li><code>map</code> + <code>max[1]</code> でシュワルツ変換的なことをしなくても <code>max_by</code> でよかったらしい</li>
<li>解答例は bash のブレース展開を使っていた</li>
<li>xxd で変換して計算する解答例も紹介されていた</li>
</ul>


<h2>午後の部終了</h2>

<p>午後の部まで参加の人はここで帰っていました。</p>

<h2>LT 大会</h2>

<p>LT は中継はどうなるんだろうと思っていたら、大阪は大阪で LT をしていました。</p>

<h3>シェル芸思考</h3>

<ul>
<li><a href="https://www.slideshare.net/kunst1080/30lt">第30回シェル芸勉強会LT シェル芸思考</a></li>
<li>問題を解く時にどう考えているのか</li>
<li>1: コマンド一撃でオプションを知っていればすぐにできるようなものかどうか考える</li>
<li>終わりそうにない場合続きを考える</li>
<li>2: 中間データの形式を設計する</li>
<li>3: コマンドを組み合わせて解いていく</li>
<li>メインは 2</li>
<li>設計の考え方</li>
<li>形について考える</li>
<li>例: <a href="https://togetter.com/li/1041621">【ファン迷惑】「響け！ユーフォニアム」という文字列だけで遊ぶシェル芸人達</a></li>
<li>中間データ1: 11回繰り返す</li>
<li>中間データ2: 11文字で折り返す</li>
<li>中間データ3: 10文字で切り出す</li>
</ul>


<h3>FORK 爆弾爆発中のロードアベレージを見る</h3>

<ul>
<li><a href="https://speakerdeck.com/msr_i386/cgroup">https://speakerdeck.com/msr_i386/cgroup</a></li>
<li>前回 SysRq でクラッシュさせてカーネルダンプで見た</li>
<li>今回 実行中にみたい</li>
<li>uptime コマンド, w コマンド, top コマンド, カーネルダンプの解析</li>
<li>カーネルダンプは1回のみでリアルタイムは無理</li>
<li>uptime, w は起動できない</li>
<li>top は反応が止まるので無理</li>
<li>cgroup で制御: cpuset を 0-2 と memory を 1GB に制限</li>
<li>root:bash に制限</li>
<li>forkbomb というグループを用意する</li>
<li>仮想4コア, メモリ16GB の VM でデモ</li>
<li>bash はランダムに kill されるのでデフォルトシェルを zsh にしておいて zsh から bash を起動</li>
<li>キーボード配列がおかしかったのでメモ帳で入力して貼り付けしたら zsh で実行してしまう事故発生</li>
<li>VM 再起動待ち</li>
<li>今度はちゃんと bash で実行</li>
<li>メモリ 1GB だと 11700 個ぐらい bash が起動している</li>
<li>ロードアベレージは 10000 を超えていた</li>
<li>cgconfig.conf は CentOS 7 では非推奨で systemd 経由で使うようになっている</li>
</ul>


<h3>破壊的難読化シェル芸</h3>

<ul>
<li>難読化シェル芸</li>
<li>置換による難読化はあまりにも弱い</li>
<li>難読化シェル芸には新たな武器が必要</li>
<li>武器っぽいコマンド gunzip (ガンジップ)</li>
<li>gun(銃)が弱いわけがない</li>
<li>gzip -cf</li>
<li>入力できない</li>
<li>xxd を通す</li>
<li>xxd -r -p | gunzip</li>
<li>別のアプローチ</li>
<li>gunzip の代わりに cut と組み合わせる</li>
<li>いろいろ探してみつけた例を実行</li>
</ul>


<h3>AWS API リクエストへの署名</h3>

<ul>
<li>REST API</li>
<li>リクエストに access key と secret access key で署名する必要がある</li>
<li>署名バージョン4: AWS4-HMAC-SHA256</li>
<li>署名のテストスイートも公開されている</li>
<li>署名のプロセスをシェル芸で追いかける</li>
<li>CLI / SDK に存在しない API がある: Amazon RDS / DownloadCompleteDBLogFile</li>
<li>CLI / SDK にあるのは download-db-log-file-portion のみで分割ダウンロードされる</li>
<li>例に使うのは AWS IAM / ListUsers</li>
<li>例に使う時刻も固定しておく</li>
<li>署名作成手順の説明</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Developers Meetup #4 大阪会場に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-24-railsdm.html"/>
    <updated>2017-08-24T22:52:52+09:00</updated>
    <id>http://blog.n-z.jp/blog/railsdm</id>
    <content type="html"><![CDATA[<p><a href="https://rails-developers-meetup.connpass.com/event/63373/">Rails Developers Meetup #4 大阪会場</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>最近よくいっているタワーAではなく、タワーBだったので、グランフロント内の案内をみながらたどり着きました。</p>

<h2>オープニング</h2>

<ul>
<li>会場の説明</li>
<li>ハッシュタグは <code>#railsdm</code></li>
<li>プログラムの紹介</li>
</ul>


<h2>Keynote 01: Dive into Rubygems</h2>

<ul>
<li><a href="http://qiita.com/pocke/items/1db63a3aecade1245f42">Dive into Rubygems</a></li>
<li>rails は new しただけでも依存している gem が結構多い</li>
<li>Gem のコードを読んだ実例</li>
<li>Gem の読み方</li>
<li>gem-src が便利</li>
<li>Gem のディレクトリ構成</li>
<li>lib: 基本的にlib/直下にはGEMNAME.rbとGEMNAME/しか置かれていない (rubocop とか)</li>
<li>spec, test: テストコードは動くexample</li>
<li>exe, bin: 実行ファイル (最近は exe)</li>
<li>Gem の依存関係</li>
<li><code>add_development_dependency</code> を使わずに <code>Gemfile</code> に書いてしまっている場合もある</li>
<li>Gem をインストールする</li>
<li>tmpgem の紹介</li>
<li>Gem を作る</li>
<li>exe ディレクトリは自分で作る</li>
<li><p>git に stage しないと gem に追加されない (gemspec で <code>git ls-files -z</code> を使っているため)</p></li>
<li><p><a href="https://twitter.com/p_ck_/status/803420202008313856">https://twitter.com/p_ck_/status/803420202008313856</a> <code>alias taketemp='cd "$(mktemp -d)"'</code></p></li>
<li>zsh の <code>REPORTTIME</code> と <code>TIMEFMT</code></li>
</ul>


<h2>Keynote 02: プロを目指すRailsエンジニアのための公開コードレビュー</h2>

<ul>
<li>自己紹介</li>
<li><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails</a></li>
<li><a href="http://blog.jnito.com/entry/2017/05/30/120148">「プロを目指す人のためのRuby入門」という本が出る予定</a></li>
<li>公開コードレビュー・その1: <a href="https://github.com/JunichiIto/train-ticket-rails/pull/27/files">https://github.com/JunichiIto/train-ticket-rails/pull/27/files</a></li>
<li>公開コードレビュー・その2: <a href="https://github.com/JunichiIto/train-ticket-rails/pull/15/files">https://github.com/JunichiIto/train-ticket-rails/pull/15/files</a></li>
<li><code>calculate</code> が 0 を返すのが 0 円ではなく、特別扱いするという意味なのが将来バグの元になりそう</li>
<li>出題者の解答例: <a href="https://github.com/JunichiIto/train-ticket-rails/compare/answer">https://github.com/JunichiIto/train-ticket-rails/compare/answer</a></li>
<li>気になったポイント</li>
<li>使用済みの切符: 1. nil でなければ真, 2. present? で明治, 3. インスタンスメソッドを使って抽象化</li>
<li>3が読み手にやさしい</li>
<li><code>?</code> で終わるメソッドの責務を考える</li>
<li>例: <a href="https://github.com/JunichiIto/train-ticket-rails/pull/10/files">https://github.com/JunichiIto/train-ticket-rails/pull/10/files</a></li>
<li>チェックして <code>redirect_to</code>, チェックして <code>errors.add</code></li>
<li>いいの?</li>
<li><code>?</code> で終わるメソッドは真偽値を返すだけにするのが良いのではないか</li>
<li>例外: ActiveRecord の valid? メソッド</li>
<li>redirect_to + return の return っている?</li>
<li>複数回呼ぶと DoubleRenderError になるので、場合によっては必要</li>
<li>まとめ</li>
<li>メソッドの責務を考えよう</li>
<li>いい感じに抽象化しよう: 「意図がわかるロジック」よりも「意図がわかる名前」を</li>
<li>不要なコンテキストをなくそう</li>
<li>Rails の機能を使いこなそう</li>
<li><p>この発表までの間に pull request してくれたものは全て動画でコメントする予定</p></li>
<li><p><a href="https://github.com/JunichiIto/train-ticket-rails/compare/answer#diff-c5c8cfc10273d831451b7acc93c3809dR7">https://github.com/JunichiIto/train-ticket-rails/compare/answer#diff-c5c8cfc10273d831451b7acc93c3809dR7</a> で <code>exited?</code> を使っていないのは、降りきってないのに validate するのは英語として不自然に感じたから</p></li>
<li><p>後置 if を使うかどうかは読んだ時に不自然に感じないかどうか</p></li>
<li><p><a href="https://speakerdeck.com/jnchito/number-railsdm">https://speakerdeck.com/jnchito/number-railsdm</a></p></li>
</ul>


<h2>休憩</h2>

<h2>LT 01: Bye, tachikoma gem</h2>

<ul>
<li><a href="https://www.slideshare.net/sanemat/byetachikomagem">Bye, tachikoma gem</a></li>
<li>tachikoma gem が deprecated</li>
<li>2015-12-10 に Tachikoma next というスライドを作っていた</li>
<li>tachikoma gem の思い出</li>
<li><p><a href="http://tachikoma.io/">http://tachikoma.io/</a> は続く</p></li>
<li><p>Saddler gem → Reviewdog</p></li>
<li><a href="https://github.com/packsaddle">https://github.com/packsaddle</a></li>
<li><p>reviewdog は reviewdog design docs がある</p></li>
<li><p>Heroku の CLI は Go 実装から Pure Node.js に変更したらしい <a href="https://blog.heroku.com/evolution-of-heroku-cli-2008-2017">https://blog.heroku.com/evolution-of-heroku-cli-2008-2017</a></p></li>
</ul>


<h2>LT 02: Rubyistだった僕がRailsを使ってみて（仮）</h2>

<ul>
<li>1: Ruby で感動したこと</li>
<li>ブロックと従属節: 従属節も2つとる自然言語はない</li>
<li>2: Ruby をやらずに Rails から入った人にありがちなこと</li>
<li>(面白かったけど速くてメモ取れず)</li>
<li>基本が大事</li>
<li>3: マネーフォワード API</li>
<li>認証: OpenID Connect</li>
<li>認可: OAuth 2.0</li>
<li>doorkeeper gem を使っている</li>
</ul>


<h2>LT 03: Railsで新規サービスを開発する際にやったこと</h2>

<ul>
<li><a href="https://www.slideshare.net/JyunichiKuriyama/rails-79120665">https://www.slideshare.net/JyunichiKuriyama/rails-79120665</a></li>
<li><a href="https://ydkr.jp/">https://ydkr.jp/</a></li>
<li>プロジェクトの目的、目標とは別に自分の目的を決めた: 「技術を正しくつかう」</li>
<li>docker による開発環境などを準備</li>
<li>テストは必ず書くと決めた</li>
<li>モチベーションの維持のため、まえにすすむことを意識</li>
<li>どんなによいコードでもサービスが当たらなければ意味ない</li>
<li>どう書いてほしいのかどういう考えで作ってるのかを考えながらやるのはよかった</li>
<li>最後に自己紹介</li>
<li>質疑応答</li>
<li>最低限 controller の spec</li>
</ul>


<h2>LT 04: Webpacker is installed</h2>

<ul>
<li>webpacker gem</li>
<li>Misoca に導入した時の話</li>
<li>Before: sprockets, browserify-rails, npm 依存とそうでないものが混在, フルビルドに時間がかかる</li>
<li><p>After: js は webpacker に完全移行, CSS は引き続き sprockets, フルビルドが20〜30秒</p></li>
<li><p>よかったところ</p></li>
<li>環境に応じた切り替え, fingerprint 付きファイルの生成 などを一気にやってくれる</li>
<li>webpack 自体を活用できる</li>
<li>例: CommonsChunkPlugin</li>
<li><p>webpacker 自体の恩恵ではなく、 webpacker はきっかけ</p></li>
<li><p>つらかったところ</p></li>
<li>Rails と webpack の境界が曖昧</li>
<li>開発中の問題: webpack の起動がめんどくさい</li>
<li>foreman で一緒に起動はできるが、なんか止まることがある?</li>
<li>feature spec でビルドされないことがある</li>
<li><p><code>javascript_pack_tag</code> が更新の時にビルドされない</p></li>
<li><p>感想</p></li>
<li>総合してふりかえると webpacker はよかった</li>
<li>Rails Way に乗れることは大きい</li>
<li><p>カスタマイズ時には知識が必要</p></li>
<li><p>質疑応答</p></li>
<li><p>webpacker のデフォルトのディレクトリ構成に移行した</p></li>
<li><p><a href="https://speakerdeck.com/mugi_uno/webpacker-is-installed">https://speakerdeck.com/mugi_uno/webpacker-is-installed</a></p></li>
</ul>


<h2>LT 05: Automation test in RoR project</h2>

<ul>
<li>後の工程でバグが見つかると高いコストがかかる</li>
<li>UI テスト: 手動テスト vs 自動テスト</li>
<li>自動テストツール cucumber</li>
<li>Gherkin language: Cucumber nomenclator</li>
<li>Capybara</li>
<li>Gherkin to Capybara</li>
<li>results</li>
<li>Cucumber: tagging</li>
<li><p>Distributed testing with Docker</p></li>
<li><p>質疑応答</p></li>
<li>Q: エンジニア以外がかけるという話があるが、結局エンジニアが書くことになってつらい?</li>
<li>A: 結局エンジニアが書いてるっぽい(?)</li>
<li>Q: UI テストに cucumber 以外を使うなら何を使う?</li>
<li>A: Selenium IDE を使っている</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>次回予告</li>
<li>次回から TECH PLAY で募集</li>
<li>12月に Rails Meetup 2017 というのをやる</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Languages 2017 in ODC に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-20-ll-in-odc.html"/>
    <updated>2017-08-20T22:55:49+09:00</updated>
    <id>http://blog.n-z.jp/blog/ll-in-odc</id>
    <content type="html"><![CDATA[<p><a href="https://ll.jus.or.jp/2017/">LLイベント2017 – Learn Languages</a> に参加しました。
今回は名前が Lightweight Language から Learn Languages に変わって (単数形から複数形に変わってる)、
<a href="https://www.ospn.jp/odc2017/">オープンデベロッパーズカンファレンス2017 Tokyo</a> というイベントの一部としての開催でした。
今年は本編の方は無料イベントになっていました。</p>

<!--more-->


<h2>会場</h2>

<p>たまには飛行機に乗りたいと思ったので、行きは飛行機で移動しました。</p>

<p>京急蒲田駅から(路線検索によると15分ぐらい)歩く必要がありました。</p>

<p>帰りは新幹線でしたが、金券ショップで買える指定席の回数券が使えない時期の最終日だったので、自由席で帰りました。
ギリギリだと座れないと辛そうというのと翌日がつらいかもということもあって、懇親会には参加せずに帰りました。</p>

<p>0泊で東京のイベントに参加したのは、思い出せる限りでは Binary 2.0カンファレンス 2005 以来のような気がします。</p>

<h2>オープニング</h2>

<ul>
<li>いろいろあって名前が変わった</li>
<li>会場無線LANはなし</li>
<li>LT の枠が余っているのでまだ募集中</li>
</ul>


<h2>基調講演「ハッカーになるためには何の言語を勉強したらいいですか？」</h2>

<ul>
<li>SECCON</li>
<li>CTF (Capture The Flag)</li>
<li>ハッカー育成</li>
<li>ハッカー vs. クラッカー</li>
<li>世界で有名な日本人ハッカー</li>
<li>ハッカーの誕生場所</li>
<li>初期のハッカーはハードウェア対象だったのでわかりやすかった</li>
<li>ソフトウェアだとわかりにくいので、可視化が重要</li>
<li>ENIAC : 配線でプログラミング</li>
<li>紙でプログラミング</li>
<li>FORTRAN : パンチカード</li>
<li>紙テープ</li>
<li>若者の「01」離れ</li>
<li>TK-80</li>
<li>回路図もついていた</li>
<li>大人の科学 vol.24 (4bitマイコン)</li>
<li>Harvard Mark I Computer (1944)</li>
<li>世界初の汎用計算機 (完全自動計算機)</li>
<li>プログラムとデータが別々</li>
<li>グレース・ホッパーの作業日誌 (1945年)</li>
<li>史上初のコンピュータ・バグ</li>
<li>原因となった「蛾」</li>
<li>COBOL</li>
<li>COBOL は英語の文法をベースにしている</li>
<li>文末が「.」で終わるのは古い言語</li>
<li>「.」が抜けるとわかりにくいなどデバッグしにくい</li>
<li>ハーバード・アーキテクチャの復権?</li>
<li>現代のコンピュータセキュリティの根本問題: データとコードの分離がされていないこと</li>
<li>XSS脆弱性、SQLインジェクション、x86任意コード実行(マルウェア感染)</li>
<li>01を実践的に学べる場所が必要</li>
<li>ローマは1日にしてならず</li>
<li>せめて2日はほしい</li>
<li>ハッカーになるためには 何の言語を勉強したらいいですか?</li>
<li>ペルシャ語</li>
<li>Stuxnet (スタックスネット)</li>
<li>イランの核施設の遠心分離機をターゲットにした。SiemensのSTEP7 (ビジュアルプログラミング言語、JIS 3503でも標準化されてる) (メモできていなかったので <a href="https://twitter.com/tadsan/status/899118034182316032">https://twitter.com/tadsan/status/899118034182316032</a> より)</li>
<li>アドレッシング表記 127.7 (小数点 .0-7 はビット目)</li>
<li>マルウェアFlameではLua言語が使われていた? SQLiteも?</li>
<li>ベルシャ語 (外国語)、機械語 (CPU, VM)、ビジュアル言語 (ラダープログラミング)、ドメイン言語 (EUCの発展)</li>
<li>一番いいたかったのは外国語を勉強しましょう</li>
<li>初めての PC から大学時代の話</li>
<li>制約のある環境だと、ハッカーが育ちやすい</li>
<li>Perl でマインスイーパーの自動クリアのデモ</li>
<li>Win32::GuiTest のデモ</li>
<li>ケータイやスマホの機械操作</li>
<li>会社で PRML 読書会</li>
<li>関連情報を書籍化</li>
<li>機械学習のプログラミング (最近)</li>
<li>scikit-learn</li>
<li>機械学習では最近 Python, R がよく使われる</li>
<li>画像解析はデバッグが大変</li>
<li>暴走問題</li>
<li>自動操作中なのでタスクマネージャーも操作できない</li>
<li>コンソールもひらけないので taskkill も使えない</li>
<li>USB メモリーの autorun.inf で <code>[Autorun] open=taskkill /F /IM perl.exe</code></li>
<li>悪用されたので autorun は Vista 以降だとデフォルトで無効</li>
<li>USB にさすと cmd.exe がどんどん開くデバイス (キーボードとして振る舞う)</li>
<li>MikuMikuDance</li>
<li>MMM と kinect で機械学習を使ったモーションキャプチャ</li>
<li>akinator</li>
<li>集団学習アルゴリズム</li>
<li>Randomized Forests in Vision</li>
<li><a href="https://twitter.com/kinyuka/status/892577093166419968">https://twitter.com/kinyuka/status/892577093166419968</a> (「AI人材を募集します」で始まるツイート) の紹介</li>
<li>質疑応答</li>
<li>アセンブラかるた</li>
<li>アセンブラ・クロスワードパズル</li>
<li>study と learn の違い</li>
<li>高校 (児童・生徒) までは教えてもらう、大学 (学生) は自分で勉強する</li>
<li>study は学習していること、learn は習得した</li>
<li>小学生とかに教えるときにビジュアルプログラミングとかだけではなく高度なことを教えるのは?</li>
<li>ぺたスクリプト というのがある</li>
<li>国語が重要</li>
<li>同年代以外のいろんな人と話をするのも大事</li>
</ul>


<h2>休憩</h2>

<p>LT の募集案内があった。</p>

<h2>関数型言語のすすめ</h2>

<ul>
<li>関数プログラミング用言語としての Haskell</li>
<li><a href="http://www.sampou.org/">http://www.sampou.org/</a></li>
<li>関数プログラミングとは</li>
<li>副作用を使わない?</li>
<li>関数?</li>
<li>なぜ関数プログラミング : 抽象的にわかりやすく考えたい, 簡潔で読みやすいプログラム</li>
<li>Haskell : 汎用の純粋関数プログラミング言語</li>
<li>ポイントは、ほしい値の仕様は型で構成する, ほしい値は式で構成する</li>
<li>書く前に読めるようになってほしい</li>
<li>コードの読み方のポイントは関数の型シグネチャ</li>
<li>型シグネチャの中の <code>-&gt;</code> は型構成演算子で右結合</li>
<li><code>g :: a -&gt; b -&gt; c</code> は <code>g :: a -&gt; (b -&gt; c)</code></li>
<li>関数適用は左結合なので <code>g x y</code> は <code>(g x) y</code></li>
<li>無名関数はあるが実際にはほとんど使わない</li>
<li><p>例: 最初は型を書いて実装は undefined にしておいてあとで書く</p></li>
<li><p>Scala 言語紹介</p></li>
<li>2003年に開発された</li>
<li>Scalable Language</li>
<li>オブジェクト指向と関数型の融合</li>
<li>全ての値はオブジェクト</li>
<li>var と val</li>
<li>統一的な型階層: 全ての型は Any のサブタイプ、 Nothing は全ての型のスーパータイプ</li>
<li>case classes</li>
<li>代数的データ型とパターンマッチ</li>
<li>不変コレクションとパターンマッチ</li>
<li>ローカル型推論</li>
<li><p>第一級関数と高階関数</p></li>
<li><p>Elixir 言語紹介</p></li>
<li>アクターモデル</li>
<li>動的型付け</li>
<li>ネットワークサーバー構築に特化した</li>
<li>関数の引数のパターンマッチ</li>
<li>ドキュメント</li>
<li>ドキュメントテスト</li>
<li>mix test でドキュメント中の example が動く</li>
<li>型システムは(まだ)ない</li>
<li>Elixir プログラミング = 関数型プログラミング + アクターモデル</li>
<li>Elixir の計算モデル</li>
<li>Elixir のアーキテクチャ</li>
<li><p>なぜ Elixir を使うのか?</p></li>
<li><p>関数型プログラミングとは入力から出力への写像</p></li>
<li><p>今回のお題</p></li>
<li>関数型プログラミングのメリットを示す、比較的簡潔なコードになる、意味のある問題</li>
<li>構文解析を行うライブラリを作成せよ (パーザコンビネータ)、様々な用途に対応できる、簡潔にかける</li>
<li><p>サンプルの入力: 四則演算の数式: カッコを含む, 空白は含まない, 整数のみ</p></li>
<li><p>Haskell 版</p></li>
<li>パーサ「言語」を構成する要件</li>
<li>型から考える</li>
<li><p>(感想: 抽象的で難しかった)</p></li>
<li><p>Scala 版</p></li>
<li>計算しない場合は10行程度</li>
<li>foldLeft を使って計算</li>
<li>ここまではライブラリを使った例、ここからはライブラリの方の説明</li>
<li>作る側は60行程度</li>
<li>第一級関数やパターンマッチの恩恵</li>
<li><p>パーザを関数とみなすことの恩恵</p></li>
<li><p>Elixir 版</p></li>
<li>パーサー I/F: 入力と出力を決める</li>
<li>BaseModule と CalcModule を作る</li>
<li>ドキュメントにテストを書きながら実装</li>
<li>Elixir ではパイプ演算子 (<code>|&gt;</code>) を多用する</li>
<li><a href="https://github.com/ohr486/LearnLanguage2017inODC">https://github.com/ohr486/LearnLanguage2017inODC</a></li>
<li><p><a href="https://twitter.com/ohrdev/status/899156490832945152">https://twitter.com/ohrdev/status/899156490832945152</a></p></li>
<li><p>質疑応答</p></li>
<li>バージョンアップするときに無停止でできるという話があったが Erlang の VM のバージョンアップのときは無停止ではできないであっているか → あっている</li>
<li>プロセスのメモリ消費: トランポリン実装? プロセス実装のドキュメントを見るのが良いのでは。</li>
<li>Haskell にはそもそも副作用という概念がない</li>
<li>Scala は中庸的で、できるだけ状態が変化するオブジェクトを返すが、必要なら var を使うし、IO も制限していない</li>
<li>「Scalaでもvarを使うことはあまり推奨されず、オブジェクトの性質を利用して副作用を使える」 <a href="https://twitter.com/golden_lucky/status/899153339564269570">https://twitter.com/golden_lucky/status/899153339564269570</a></li>
<li>テスティングフレームワーク、データベースアクセス、アプリケーションサーバー</li>
<li>Haskell: Web フレームワークは3種類ぐらい, データベースはいろいろ, QuickCheck</li>
<li>Scala: Web フレームワークは Play 2, データベースは Slick, quill というのもある, テストは Scala Test</li>
<li>Elixir: Web フレームワーク Phoenix, データベース ?(覚えきれず), テスト ?(覚えきれず)</li>
</ul>


<h2>第2プログラミング言語鑑定団</h2>

<ul>
<li>初心者が複数言語を知っていた方が良いと言われて次の言語に悩む</li>
<li>Teratail や Yahoo 知恵袋を参考にした</li>
</ul>


<!-- https://www.lambdanote.com/ -->


<ul>
<li>質問1: 文系の大学4年生の時に独学で C と Java の初歩, 会社で HTML, CSS, JavaScript <a href="https://twitter.com/hourin/status/899159271807397888">https://twitter.com/hourin/status/899159271807397888</a></li>
<li>OCaml: 独学ができるようなので Web と対極にあるもの, プログラミング OCaml (<a href="http://amzn.to/2vUrRap">これ?</a>) がよかった</li>
<li>Ruby とか Go とか: サーバーサイドやインフラ系, 周りが使っているものなら Ruby じゃなくても Python とかでもとインフラ系として Go</li>
<li>◎本命 C#, ○対抗 DevOps, ×大穴 PhotoShop: C や Java に似ているもので Web だけでは心配とあったので C#, 将来が不安なら上から下まで自分でできた方が安心できそうなので DevOps, あとは将来が不安ならとりあえず PhotoShop</li>
<li><p>Xamarin + C#: 微妙な感じなので、微妙なところ</p></li>
<li><p>質問2: 文系大学, ゲーム好き, ゲームクリエイターになりたい, プログラミングはまだできない, 特筆したスキルもない, ゲーム開発者になるためにはどの言語から学ぶのがよいでしょうか? <a href="https://twitter.com/hourin/status/899161811827646464">https://twitter.com/hourin/status/899161811827646464</a></p></li>
<li>◎NScripter, ○Unity, ▲スポーツジム: (NScripter についてはメモとれず), Flash みたいな感じで Unity を使う, 最終的には C# に辿りつけばいいな, ゲーム開発者は体が資本</li>
<li>◎Unity, ○Unreal Engine: <a href="http://amzn.to/2vUoy2S">「Unreal Engine 4 で極めるゲーム開発」(ボーンデジタル)</a></li>
<li>HyperCard, LiveCode: 文系なら英語も大丈夫, ボードゲーム?</li>
<li><p>何でもいいからさっさと作る: 作りたいものがあるはずなので頑張ってほしい</p></li>
<li><p>質問3: サーバーサイドエンジニア, Ruby on Rails, AI や機械学習が気になっている <a href="https://twitter.com/hourin/status/899162996777164800">https://twitter.com/hourin/status/899162996777164800</a></p></li>
<li>Python: <a href="http://amzn.to/2x32a7M">「ゼロから作るディープラーニング」(オライリー)</a></li>
<li>(Python), (PyCall), 数学: まず数学</li>
<li>◎Python, ○R, ▲C/C++: 文系しばりがなくなった。Ruby を使っているのなら Python ぐらい知っているだろう。なんとか偏差とかも簡単にできる R。最適な、とあるので C/C++</li>
<li>Prolog: 使いこなす、とあるので。Watson や Pepper の裏側で使われている。</li>
<li><p>処理系はいっぱいある。入れやすいのは GNU Prolog</p></li>
<li><p>質問4: SIer 2次下請け, Struts, Java しか使ったことがない <a href="https://twitter.com/hourin/status/899164784163041280">https://twitter.com/hourin/status/899164784163041280</a></p></li>
<li>作った感じの質問</li>
<li>会場アンケート: Struts を使っている人? → いない</li>
<li>Common Lisp: <a href="http://amzn.to/2vUncoY">「実践 Common Lisp」(オーム社)</a>, 身につけると長く役に立つ</li>
<li>Haskell: <a href="http://amzn.to/2fWfHtK">「すごいHaskell」(オーム社)</a>, 最近和書がたくさん出ているので恐れずにやってみると良い</li>
<li>Lisp: 圧倒的に長く役に立つ, 転職は探せばある?, すべての言語が Lisp, Lisp を学ぶと悟り体験が得られるらしい</li>
<li>Ruby, C, アセンブラ: だんだん掘っていけば長く使えるはず</li>
<li><p>◎PHP, ○C/C++, ▲COBOL: 相変わらず2次下請けで良い?ならPHP, 組み込みなど他の分野に変わるなら C/C++, COBOL をやっていたら転職もできるし長く使える, アセンブラはアーキテクチャが変わると長く使えるという条件に当てはまらなそうなので COBOL にした</p></li>
<li><p>質問5: Web サイト作成のために PHP 学習中, 効率的なプログラミング学習法, 面白いプログラミング言語とその理由 <a href="https://twitter.com/hourin/status/899166828559122433">https://twitter.com/hourin/status/899166828559122433</a></p></li>
<li>これも作った感じの質問</li>
<li><a href="http://amzn.to/2fWHdYg">「あなたの知らない超絶技巧プログラミングの世界」(Ruby)</a>: esolang は他の人が出すだろうと思って、これにした。</li>
<li>◎Ruby, ○JavaScript, ▲<a href="https://ja.wikipedia.org/wiki/Curl_%28%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E%29">Curl</a>: Ruby: <a href="http://amzn.to/2xfKtkx">たのしいRuby</a> という本がある, JavaScript: Web サイト制作のために、とあるので, Web サイトはインフラを用意するのが大変, ちょっとした変更ならローカルでできる, Curl: 面白いという点だけなら Curl という言語, サーバー側もクライアント側も Curl</li>
<li><code>Brainf*ck</code>: <a href="http://amzn.to/2vUnOLi">「Ruby で作る奇妙なプログラミング言語」(マイコミ)</a>, <code>Brainf*ck</code> の実装をどんな言語でもいいのでやってみるのが面白い, 実装が簡単なのが <code>Brainf*ck</code></li>
<li><p>おっぱい言語, なでしこ/ひまわり/プロデル: <code>Brainf*ck</code> 系の言語におっぱい言語というのがある, 日本語プログラミング言語</p></li>
<li><p>質問6: インフラ運用エンジニア, 使える言語はシェル, 仕事で使っている OSS の言語は多様, 自動化をやっていくために、どのような言語を学ぶのがよい? <a href="https://twitter.com/hourin/status/899169062915235840">https://twitter.com/hourin/status/899169062915235840</a></p></li>
<li>Go: <a href="http://amzn.to/2fWM5wg">「プログラミング言語Go」(丸善)</a>, <a href="https://www.lambdanote.com/">「Go ならわかるシステムプログラミング」(ラムダノート)</a> (まだ出てない), 列挙されていた言語になかったもの, Google が推している, 下回りを C とかアセンブラで学ぶのは古い</li>
<li>YAML とそれを使える言語: 設定ファイルが YAML のことが多い, ツールの実装言語を学べば良い</li>
<li>◎Python, ○Ruby, ▲Go: Python: インストーラーとかマネージメント系がシェルから Python になっているので, libpcap を直接扱えるライブラリとかでスキルセットを広げていける, 自動化は ansible が YAML を使っていて Python で書かれている, Ruby: chef が Ruby で書かれている, 自分でプラグインとか書ける, Go: 上のレイヤーからみて Docker を使っているのではないかということで Docker の実装に使われている Go</li>
<li><p>怒りに身をまかせろ: 怒りさえあれば勉強しなくて良い, 必要があれば読むので自然に覚えていく, インフラエンジニアはプログラマと仲良くすると色々教えてもらえる, 怒ってもいいけど怒られないように</p></li>
<li><p>会場から質問: 小学3年生の子供に教えるのに適した言語は? Scratch の番組とかは見て興味をもってやっている</p></li>
<li>Scratch はそんなにやっていなくて、結局ゲームをやっている</li>
<li>Scheme 「SICP」(翔泳社)</li>
<li>(日本語), Smalruby</li>
<li>◎English, ○Smalltalk, △N-88 BASIC</li>
<li>ボードゲーム, アセンブラカルタ</li>
</ul>


<h2>ライトニングトーク</h2>

<h3>従来言語で理解する次世代言語の概念 高野光弘 @takano32</h3>

<ul>
<li>次世代の発想は既存の発想の発展が多い</li>
<li>空飛ぶ車 = 車 + 飛行機</li>
<li>プログラミングにも同様のことが多い</li>
<li>Perl = sh + sed + awk</li>
<li>C++ = C + オブジェクト指向</li>
<li>Java = オブジェクト指向 + 仮装計算機</li>
<li>サンプルはアンケート項目</li>
<li>Ruby = Perl + オブジェクト指向</li>
<li>&hellip; (はやすぎるのでメモを取るのを諦めました)</li>
</ul>


<h3>同じ処理を複数の言語で書いてみよう 増井 敏克 (ますい としかつ) @masuipeo</h3>

<ul>
<li>いろんな本を書いている</li>
<li>プログラミング言語図鑑</li>
<li>本を書いた経緯</li>
<li>CodeIQ で出題者をしている</li>
<li>提出された回答をみていたら、いろんな言語が読み書きできるようになった</li>
<li>言語の人気は変わる</li>
<li>言語を勉強するときのコツは?</li>
<li>とにかく手を動かす</li>
<li>「読む量は学力の上限を規定し、閣僚は学力の下限を規定する」</li>
<li>言語を学ぶときの姿勢</li>
</ul>


<h3>おいら的テスティングフレームワーク比較 Java C# PHP JavaScript sengoku</h3>

<ul>
<li>Java: モックの作成が簡単</li>
<li>JavaScript: ファイル監視が楽チンすぎる</li>
<li>describe と it に日本語をかけてわかりやすい</li>
<li>expect の書き心地が英語っぽくて良い</li>
<li>C#: マウス操作するのがつらい (キーボードショートカットがうまく動かなかった), モック化を阻むフレームワーク (.Net Framework) 内のクラス</li>
<li>PHP: とくに可もなく不可もなく</li>
<li>SQlite はテストが5000万行で本体7万行</li>
<li>テストを書きやすい環境を選ぶ方が良いのでは</li>
</ul>


<h3>PHPにおけるメタプログラミングの温床 うさみけんた @tadsan</h3>

<ul>
<li>オープンクラスなどではなく静的解析しやすい</li>
<li>その和を乱す動的な機能がある</li>
<li>初級編</li>
<li>callable <code>$f($arg)</code></li>
<li><code>compact</code></li>
<li><code>extract</code></li>
<li><code>$$var</code> 可変変数</li>
<li><code>debug_backtrace</code></li>
<li>中級編</li>
<li>マジックメソッド</li>
<li><code>__get()</code>, <code>__set()</code></li>
<li><code>__call()</code></li>
<li>上級編</li>
<li><code>spl_autoload_register</code></li>
</ul>


<h3>関係記述型言語 ラダーのすすめ 土井 康正</h3>

<ul>
<li>PLC 上で実行</li>
<li>抽象化、オブジェクト化、構造化しなくても良い</li>
<li>値は全てグローバル変数で良い</li>
<li><p>静的な世界</p></li>
<li><p><a href="https://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%80%E3%83%BC%E3%83%BB%E3%83%AD%E3%82%B8%E3%83%83%E3%82%AF">ラダー・ロジックまたはラダー言語（ラダーげんご）</a></p></li>
</ul>


<h3>now going with go @nasa9084</h3>

<ul>
<li>emacs!</li>
<li>会場アンケート: 昨日も来ていた人は少なかった</li>
<li>go言語</li>
<li>go special syntax</li>
<li>iota</li>
<li>Initializer Statement</li>
<li>defer Statement</li>
<li>testing package</li>
<li><code>go test</code> や <code>go test -bench</code></li>
<li>testing.T</li>
<li>testing.B</li>
<li>Example Tests</li>
<li>go generate</li>
<li><code>// go:generate stringer</code></li>
<li>便利な標準ライブラリ</li>
<li>gofmt</li>
<li>go vet</li>
<li>godoc</li>
</ul>


<h3>Klassic言語の宣伝 水島宏太</h3>

<ul>
<li><a href="http://kmizu.github.io/klassic_ll2017/">http://kmizu.github.io/klassic_ll2017/</a></li>
<li>静的型</li>
<li>式ベース</li>
<li>型推論</li>
<li>スペースセンシティブリテラル</li>
<li>Java FFI</li>
<li>Row Polymorphism</li>
</ul>


<h3>RubyKaigi 2017 のご紹介+α @takatayoshitake</h3>

<ul>
<li><a href="http://rubykaigi.org/2017/schedule">http://rubykaigi.org/2017/schedule</a></li>
<li>昨日の RejectKaigi でやった内容らしい</li>
</ul>


<h2>クロージング</h2>

<p>恒例の抽選での書籍プレゼントは、全員分あるということだったので、どうするのかと思ったら、今までのボール投げとは違ってくじ引きでした。
書籍は2冊もらえた人もいたようです。</p>
]]></content>
  </entry>
  
</feed>
