<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: event | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/event/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-08-24T22:59:28+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Developers Meetup #4 大阪会場に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-24-railsdm.html"/>
    <updated>2017-08-24T22:52:52+09:00</updated>
    <id>http://blog.n-z.jp/blog/railsdm</id>
    <content type="html"><![CDATA[<p><a href="https://rails-developers-meetup.connpass.com/event/63373/">Rails Developers Meetup #4 大阪会場</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>最近よくいっているタワーAではなく、タワーBだったので、グランフロント内の案内をみながらたどり着きました。</p>

<h2>オープニング</h2>

<ul>
<li>会場の説明</li>
<li>ハッシュタグは <code>#railsdm</code></li>
<li>プログラムの紹介</li>
</ul>


<h2>Keynote 01: Dive into Rubygems</h2>

<ul>
<li><a href="http://qiita.com/pocke/items/1db63a3aecade1245f42">Dive into Rubygems</a></li>
<li>rails は new しただけでも依存している gem が結構多い</li>
<li>Gem のコードを読んだ実例</li>
<li>Gem の読み方</li>
<li>gem-src が便利</li>
<li>Gem のディレクトリ構成</li>
<li>lib: 基本的にlib/直下にはGEMNAME.rbとGEMNAME/しか置かれていない (rubocop とか)</li>
<li>spec, test: テストコードは動くexample</li>
<li>exe, bin: 実行ファイル (最近は exe)</li>
<li>Gem の依存関係</li>
<li><code>add_development_dependency</code> を使わずに <code>Gemfile</code> に書いてしまっている場合もある</li>
<li>Gem をインストールする</li>
<li>tmpgem の紹介</li>
<li>Gem を作る</li>
<li>exe ディレクトリは自分で作る</li>
<li><p>git に stage しないと gem に追加されない (gemspec で <code>git ls-files -z</code> を使っているため)</p></li>
<li><p><a href="https://twitter.com/p_ck_/status/803420202008313856">https://twitter.com/p_ck_/status/803420202008313856</a> <code>alias taketemp='cd "$(mktemp -d)"'</code></p></li>
<li>zsh の <code>REPORTTIME</code> と <code>TIMEFMT</code></li>
</ul>


<h2>Keynote 02: プロを目指すRailsエンジニアのための公開コードレビュー</h2>

<ul>
<li>自己紹介</li>
<li><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails</a></li>
<li><a href="http://blog.jnito.com/entry/2017/05/30/120148">「プロを目指す人のためのRuby入門」という本が出る予定</a></li>
<li>公開コードレビュー・その1: <a href="https://github.com/JunichiIto/train-ticket-rails/pull/27/files">https://github.com/JunichiIto/train-ticket-rails/pull/27/files</a></li>
<li>公開コードレビュー・その2: <a href="https://github.com/JunichiIto/train-ticket-rails/pull/15/files">https://github.com/JunichiIto/train-ticket-rails/pull/15/files</a></li>
<li><code>calculate</code> が 0 を返すのが 0 円ではなく、特別扱いするという意味なのが将来バグの元になりそう</li>
<li>出題者の解答例: <a href="https://github.com/JunichiIto/train-ticket-rails/compare/answer">https://github.com/JunichiIto/train-ticket-rails/compare/answer</a></li>
<li>気になったポイント</li>
<li>使用済みの切符: 1. nil でなければ真, 2. present? で明治, 3. インスタンスメソッドを使って抽象化</li>
<li>3が読み手にやさしい</li>
<li><code>?</code> で終わるメソッドの責務を考える</li>
<li>例: <a href="https://github.com/JunichiIto/train-ticket-rails/pull/10/files">https://github.com/JunichiIto/train-ticket-rails/pull/10/files</a></li>
<li>チェックして <code>redirect_to</code>, チェックして <code>errors.add</code></li>
<li>いいの?</li>
<li><code>?</code> で終わるメソッドは真偽値を返すだけにするのが良いのではないか</li>
<li>例外: ActiveRecord の valid? メソッド</li>
<li>redirect_to + return の return っている?</li>
<li>複数回呼ぶと DoubleRenderError になるので、場合によっては必要</li>
<li>まとめ</li>
<li>メソッドの責務を考えよう</li>
<li>いい感じに抽象化しよう: 「意図がわかるロジック」よりも「意図がわかる名前」を</li>
<li>不要なコンテキストをなくそう</li>
<li>Rails の機能を使いこなそう</li>
<li><p>この発表までの間に pull request してくれたものは全て動画でコメントする予定</p></li>
<li><p><a href="https://github.com/JunichiIto/train-ticket-rails/compare/answer#diff-c5c8cfc10273d831451b7acc93c3809dR7">https://github.com/JunichiIto/train-ticket-rails/compare/answer#diff-c5c8cfc10273d831451b7acc93c3809dR7</a> で <code>exited?</code> を使っていないのは、降りきってないのに validate するのは英語として不自然に感じたから</p></li>
<li><p>後置 if を使うかどうかは読んだ時に不自然に感じないかどうか</p></li>
<li><p><a href="https://speakerdeck.com/jnchito/number-railsdm">https://speakerdeck.com/jnchito/number-railsdm</a></p></li>
</ul>


<h2>休憩</h2>

<h2>LT 01: Bye, tachikoma gem</h2>

<ul>
<li><a href="https://www.slideshare.net/sanemat/byetachikomagem">Bye, tachikoma gem</a></li>
<li>tachikoma gem が deprecated</li>
<li>2015-12-10 に Tachikoma next というスライドを作っていた</li>
<li>tachikoma gem の思い出</li>
<li><p><a href="http://tachikoma.io/">http://tachikoma.io/</a> は続く</p></li>
<li><p>Saddler gem → Reviewdog</p></li>
<li><a href="https://github.com/packsaddle">https://github.com/packsaddle</a></li>
<li><p>reviewdog は reviewdog design docs がある</p></li>
<li><p>Heroku の CLI は Go 実装から Pure Node.js に変更したらしい <a href="https://blog.heroku.com/evolution-of-heroku-cli-2008-2017">https://blog.heroku.com/evolution-of-heroku-cli-2008-2017</a></p></li>
</ul>


<h2>LT 02: Rubyistだった僕がRailsを使ってみて（仮）</h2>

<ul>
<li>1: Ruby で感動したこと</li>
<li>ブロックと従属節: 従属節も2つとる自然言語はない</li>
<li>2: Ruby をやらずに Rails から入った人にありがちなこと</li>
<li>(面白かったけど速くてメモ取れず)</li>
<li>基本が大事</li>
<li>3: マネーフォワード API</li>
<li>認証: OpenID Connect</li>
<li>認可: OAuth 2.0</li>
<li>doorkeeper gem を使っている</li>
</ul>


<h2>LT 03: Railsで新規サービスを開発する際にやったこと</h2>

<ul>
<li><a href="https://www.slideshare.net/JyunichiKuriyama/rails-79120665">https://www.slideshare.net/JyunichiKuriyama/rails-79120665</a></li>
<li><a href="https://ydkr.jp/">https://ydkr.jp/</a></li>
<li>プロジェクトの目的、目標とは別に自分の目的を決めた: 「技術を正しくつかう」</li>
<li>docker による開発環境などを準備</li>
<li>テストは必ず書くと決めた</li>
<li>モチベーションの維持のため、まえにすすむことを意識</li>
<li>どんなによいコードでもサービスが当たらなければ意味ない</li>
<li>どう書いてほしいのかどういう考えで作ってるのかを考えながらやるのはよかった</li>
<li>最後に自己紹介</li>
<li>質疑応答</li>
<li>最低限 controller の spec</li>
</ul>


<h2>LT 04: Webpacker is installed</h2>

<ul>
<li>webpacker gem</li>
<li>Misoca に導入した時の話</li>
<li>Before: sprockets, browserify-rails, npm 依存とそうでないものが混在, フルビルドに時間がかかる</li>
<li><p>After: js は webpacker に完全移行, CSS は引き続き sprockets, フルビルドが20〜30秒</p></li>
<li><p>よかったところ</p></li>
<li>環境に応じた切り替え, fingerprint 付きファイルの生成 などを一気にやってくれる</li>
<li>webpack 自体を活用できる</li>
<li>例: CommonsChunkPlugin</li>
<li><p>webpacker 自体の恩恵ではなく、 webpacker はきっかけ</p></li>
<li><p>つらかったところ</p></li>
<li>Rails と webpack の境界が曖昧</li>
<li>開発中の問題: webpack の起動がめんどくさい</li>
<li>foreman で一緒に起動はできるが、なんか止まることがある?</li>
<li>feature spec でビルドされないことがある</li>
<li><p><code>javascript_pack_tag</code> が更新の時にビルドされない</p></li>
<li><p>感想</p></li>
<li>総合してふりかえると webpacker はよかった</li>
<li>Rails Way に乗れることは大きい</li>
<li><p>カスタマイズ時には知識が必要</p></li>
<li><p>質疑応答</p></li>
<li><p>webpacker のデフォルトのディレクトリ構成に移行した</p></li>
<li><p><a href="https://speakerdeck.com/mugi_uno/webpacker-is-installed">https://speakerdeck.com/mugi_uno/webpacker-is-installed</a></p></li>
</ul>


<h2>LT 05: Automation test in RoR project</h2>

<ul>
<li>後の工程でバグが見つかると高いコストがかかる</li>
<li>UI テスト: 手動テスト vs 自動テスト</li>
<li>自動テストツール cucumber</li>
<li>Gherkin language: Cucumber nomenclator</li>
<li>Capybara</li>
<li>Gherkin to Capybara</li>
<li>results</li>
<li>Cucumber: tagging</li>
<li><p>Distributed testing with Docker</p></li>
<li><p>質疑応答</p></li>
<li>Q: エンジニア以外がかけるという話があるが、結局エンジニアが書くことになってつらい?</li>
<li>A: 結局エンジニアが書いてるっぽい(?)</li>
<li>Q: UI テストに cucumber 以外を使うなら何を使う?</li>
<li>A: Selenium IDE を使っている</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>次回予告</li>
<li>次回から TECH PLAY で募集</li>
<li>12月に Rails Meetup 2017 というのをやる</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Languages 2017 in ODC に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-20-ll-in-odc.html"/>
    <updated>2017-08-20T22:55:49+09:00</updated>
    <id>http://blog.n-z.jp/blog/ll-in-odc</id>
    <content type="html"><![CDATA[<p><a href="https://ll.jus.or.jp/2017/">LLイベント2017 – Learn Languages</a> に参加しました。
今回は名前が Lightweight Language から Learn Languages に変わって (単数形から複数形に変わってる)、
<a href="https://www.ospn.jp/odc2017/">オープンデベロッパーズカンファレンス2017 Tokyo</a> というイベントの一部としての開催でした。
今年は本編の方は無料イベントになっていました。</p>

<!--more-->


<h2>会場</h2>

<p>たまには飛行機に乗りたいと思ったので、行きは飛行機で移動しました。</p>

<p>京急蒲田駅から(路線検索によると15分ぐらい)歩く必要がありました。</p>

<p>帰りは新幹線でしたが、金券ショップで買える指定席の回数券が使えない時期の最終日だったので、自由席で帰りました。
ギリギリだと座れないと辛そうというのと翌日がつらいかもということもあって、懇親会には参加せずに帰りました。</p>

<p>0泊で東京のイベントに参加したのは、思い出せる限りでは Binary 2.0カンファレンス 2005 以来のような気がします。</p>

<h2>オープニング</h2>

<ul>
<li>いろいろあって名前が変わった</li>
<li>会場無線LANはなし</li>
<li>LT の枠が余っているのでまだ募集中</li>
</ul>


<h2>基調講演「ハッカーになるためには何の言語を勉強したらいいですか？」</h2>

<ul>
<li>SECCON</li>
<li>CTF (Capture The Flag)</li>
<li>ハッカー育成</li>
<li>ハッカー vs. クラッカー</li>
<li>世界で有名な日本人ハッカー</li>
<li>ハッカーの誕生場所</li>
<li>初期のハッカーはハードウェア対象だったのでわかりやすかった</li>
<li>ソフトウェアだとわかりにくいので、可視化が重要</li>
<li>ENIAC : 配線でプログラミング</li>
<li>紙でプログラミング</li>
<li>FORTRAN : パンチカード</li>
<li>紙テープ</li>
<li>若者の「01」離れ</li>
<li>TK-80</li>
<li>回路図もついていた</li>
<li>大人の科学 vol.24 (4bitマイコン)</li>
<li>Harvard Mark I Computer (1944)</li>
<li>世界初の汎用計算機 (完全自動計算機)</li>
<li>プログラムとデータが別々</li>
<li>グレース・ホッパーの作業日誌 (1945年)</li>
<li>史上初のコンピュータ・バグ</li>
<li>原因となった「蛾」</li>
<li>COBOL</li>
<li>COBOL は英語の文法をベースにしている</li>
<li>文末が「.」で終わるのは古い言語</li>
<li>「.」が抜けるとわかりにくいなどデバッグしにくい</li>
<li>ハーバード・アーキテクチャの復権?</li>
<li>現代のコンピュータセキュリティの根本問題: データとコードの分離がされていないこと</li>
<li>XSS脆弱性、SQLインジェクション、x86任意コード実行(マルウェア感染)</li>
<li>01を実践的に学べる場所が必要</li>
<li>ローマは1日にしてならず</li>
<li>せめて2日はほしい</li>
<li>ハッカーになるためには 何の言語を勉強したらいいですか?</li>
<li>ペルシャ語</li>
<li>Stuxnet (スタックスネット)</li>
<li>イランの核施設の遠心分離機をターゲットにした。SiemensのSTEP7 (ビジュアルプログラミング言語、JIS 3503でも標準化されてる) (メモできていなかったので <a href="https://twitter.com/tadsan/status/899118034182316032">https://twitter.com/tadsan/status/899118034182316032</a> より)</li>
<li>アドレッシング表記 127.7 (小数点 .0-7 はビット目)</li>
<li>マルウェアFlameではLua言語が使われていた? SQLiteも?</li>
<li>ベルシャ語 (外国語)、機械語 (CPU, VM)、ビジュアル言語 (ラダープログラミング)、ドメイン言語 (EUCの発展)</li>
<li>一番いいたかったのは外国語を勉強しましょう</li>
<li>初めての PC から大学時代の話</li>
<li>制約のある環境だと、ハッカーが育ちやすい</li>
<li>Perl でマインスイーパーの自動クリアのデモ</li>
<li>Win32::GuiTest のデモ</li>
<li>ケータイやスマホの機械操作</li>
<li>会社で PRML 読書会</li>
<li>関連情報を書籍化</li>
<li>機械学習のプログラミング (最近)</li>
<li>scikit-learn</li>
<li>機械学習では最近 Python, R がよく使われる</li>
<li>画像解析はデバッグが大変</li>
<li>暴走問題</li>
<li>自動操作中なのでタスクマネージャーも操作できない</li>
<li>コンソールもひらけないので taskkill も使えない</li>
<li>USB メモリーの autorun.inf で <code>[Autorun] open=taskkill /F /IM perl.exe</code></li>
<li>悪用されたので autorun は Vista 以降だとデフォルトで無効</li>
<li>USB にさすと cmd.exe がどんどん開くデバイス (キーボードとして振る舞う)</li>
<li>MikuMikuDance</li>
<li>MMM と kinect で機械学習を使ったモーションキャプチャ</li>
<li>akinator</li>
<li>集団学習アルゴリズム</li>
<li>Randomized Forests in Vision</li>
<li><a href="https://twitter.com/kinyuka/status/892577093166419968">https://twitter.com/kinyuka/status/892577093166419968</a> (「AI人材を募集します」で始まるツイート) の紹介</li>
<li>質疑応答</li>
<li>アセンブラかるた</li>
<li>アセンブラ・クロスワードパズル</li>
<li>study と learn の違い</li>
<li>高校 (児童・生徒) までは教えてもらう、大学 (学生) は自分で勉強する</li>
<li>study は学習していること、learn は習得した</li>
<li>小学生とかに教えるときにビジュアルプログラミングとかだけではなく高度なことを教えるのは?</li>
<li>ぺたスクリプト というのがある</li>
<li>国語が重要</li>
<li>同年代以外のいろんな人と話をするのも大事</li>
</ul>


<h2>休憩</h2>

<p>LT の募集案内があった。</p>

<h2>関数型言語のすすめ</h2>

<ul>
<li>関数プログラミング用言語としての Haskell</li>
<li><a href="http://www.sampou.org/">http://www.sampou.org/</a></li>
<li>関数プログラミングとは</li>
<li>副作用を使わない?</li>
<li>関数?</li>
<li>なぜ関数プログラミング : 抽象的にわかりやすく考えたい, 簡潔で読みやすいプログラム</li>
<li>Haskell : 汎用の純粋関数プログラミング言語</li>
<li>ポイントは、ほしい値の仕様は型で構成する, ほしい値は式で構成する</li>
<li>書く前に読めるようになってほしい</li>
<li>コードの読み方のポイントは関数の型シグネチャ</li>
<li>型シグネチャの中の <code>-&gt;</code> は型構成演算子で右結合</li>
<li><code>g :: a -&gt; b -&gt; c</code> は <code>g :: a -&gt; (b -&gt; c)</code></li>
<li>関数適用は左結合なので <code>g x y</code> は <code>(g x) y</code></li>
<li>無名関数はあるが実際にはほとんど使わない</li>
<li><p>例: 最初は型を書いて実装は undefined にしておいてあとで書く</p></li>
<li><p>Scala 言語紹介</p></li>
<li>2003年に開発された</li>
<li>Scalable Language</li>
<li>オブジェクト指向と関数型の融合</li>
<li>全ての値はオブジェクト</li>
<li>var と val</li>
<li>統一的な型階層: 全ての型は Any のサブタイプ、 Nothing は全ての型のスーパータイプ</li>
<li>case classes</li>
<li>代数的データ型とパターンマッチ</li>
<li>不変コレクションとパターンマッチ</li>
<li>ローカル型推論</li>
<li><p>第一級関数と高階関数</p></li>
<li><p>Elixir 言語紹介</p></li>
<li>アクターモデル</li>
<li>動的型付け</li>
<li>ネットワークサーバー構築に特化した</li>
<li>関数の引数のパターンマッチ</li>
<li>ドキュメント</li>
<li>ドキュメントテスト</li>
<li>mix test でドキュメント中の example が動く</li>
<li>型システムは(まだ)ない</li>
<li>Elixir プログラミング = 関数型プログラミング + アクターモデル</li>
<li>Elixir の計算モデル</li>
<li>Elixir のアーキテクチャ</li>
<li><p>なぜ Elixir を使うのか?</p></li>
<li><p>関数型プログラミングとは入力から出力への写像</p></li>
<li><p>今回のお題</p></li>
<li>関数型プログラミングのメリットを示す、比較的簡潔なコードになる、意味のある問題</li>
<li>構文解析を行うライブラリを作成せよ (パーザコンビネータ)、様々な用途に対応できる、簡潔にかける</li>
<li><p>サンプルの入力: 四則演算の数式: カッコを含む, 空白は含まない, 整数のみ</p></li>
<li><p>Haskell 版</p></li>
<li>パーサ「言語」を構成する要件</li>
<li>型から考える</li>
<li><p>(感想: 抽象的で難しかった)</p></li>
<li><p>Scala 版</p></li>
<li>計算しない場合は10行程度</li>
<li>foldLeft を使って計算</li>
<li>ここまではライブラリを使った例、ここからはライブラリの方の説明</li>
<li>作る側は60行程度</li>
<li>第一級関数やパターンマッチの恩恵</li>
<li><p>パーザを関数とみなすことの恩恵</p></li>
<li><p>Elixir 版</p></li>
<li>パーサー I/F: 入力と出力を決める</li>
<li>BaseModule と CalcModule を作る</li>
<li>ドキュメントにテストを書きながら実装</li>
<li>Elixir ではパイプ演算子 (<code>|&gt;</code>) を多用する</li>
<li><a href="https://github.com/ohr486/LearnLanguage2017inODC">https://github.com/ohr486/LearnLanguage2017inODC</a></li>
<li><p><a href="https://twitter.com/ohrdev/status/899156490832945152">https://twitter.com/ohrdev/status/899156490832945152</a></p></li>
<li><p>質疑応答</p></li>
<li>バージョンアップするときに無停止でできるという話があったが Erlang の VM のバージョンアップのときは無停止ではできないであっているか → あっている</li>
<li>プロセスのメモリ消費: トランポリン実装? プロセス実装のドキュメントを見るのが良いのでは。</li>
<li>Haskell にはそもそも副作用という概念がない</li>
<li>Scala は中庸的で、できるだけ状態が変化するオブジェクトを返すが、必要なら var を使うし、IO も制限していない</li>
<li>「Scalaでもvarを使うことはあまり推奨されず、オブジェクトの性質を利用して副作用を使える」 <a href="https://twitter.com/golden_lucky/status/899153339564269570">https://twitter.com/golden_lucky/status/899153339564269570</a></li>
<li>テスティングフレームワーク、データベースアクセス、アプリケーションサーバー</li>
<li>Haskell: Web フレームワークは3種類ぐらい, データベースはいろいろ, QuickCheck</li>
<li>Scala: Web フレームワークは Play 2, データベースは Slick, quill というのもある, テストは Scala Test</li>
<li>Elixir: Web フレームワーク Phoenix, データベース ?(覚えきれず), テスト ?(覚えきれず)</li>
</ul>


<h2>第2プログラミング言語鑑定団</h2>

<ul>
<li>初心者が複数言語を知っていた方が良いと言われて次の言語に悩む</li>
<li>Teratail や Yahoo 知恵袋を参考にした</li>
</ul>


<!-- https://www.lambdanote.com/ -->


<ul>
<li>質問1: 文系の大学4年生の時に独学で C と Java の初歩, 会社で HTML, CSS, JavaScript <a href="https://twitter.com/hourin/status/899159271807397888">https://twitter.com/hourin/status/899159271807397888</a></li>
<li>OCaml: 独学ができるようなので Web と対極にあるもの, プログラミング OCaml (<a href="http://amzn.to/2vUrRap">これ?</a>) がよかった</li>
<li>Ruby とか Go とか: サーバーサイドやインフラ系, 周りが使っているものなら Ruby じゃなくても Python とかでもとインフラ系として Go</li>
<li>◎本命 C#, ○対抗 DevOps, ×大穴 PhotoShop: C や Java に似ているもので Web だけでは心配とあったので C#, 将来が不安なら上から下まで自分でできた方が安心できそうなので DevOps, あとは将来が不安ならとりあえず PhotoShop</li>
<li><p>Xamarin + C#: 微妙な感じなので、微妙なところ</p></li>
<li><p>質問2: 文系大学, ゲーム好き, ゲームクリエイターになりたい, プログラミングはまだできない, 特筆したスキルもない, ゲーム開発者になるためにはどの言語から学ぶのがよいでしょうか? <a href="https://twitter.com/hourin/status/899161811827646464">https://twitter.com/hourin/status/899161811827646464</a></p></li>
<li>◎NScripter, ○Unity, ▲スポーツジム: (NScripter についてはメモとれず), Flash みたいな感じで Unity を使う, 最終的には C# に辿りつけばいいな, ゲーム開発者は体が資本</li>
<li>◎Unity, ○Unreal Engine: <a href="http://amzn.to/2vUoy2S">「Unreal Engine 4 で極めるゲーム開発」(ボーンデジタル)</a></li>
<li>HyperCard, LiveCode: 文系なら英語も大丈夫, ボードゲーム?</li>
<li><p>何でもいいからさっさと作る: 作りたいものがあるはずなので頑張ってほしい</p></li>
<li><p>質問3: サーバーサイドエンジニア, Ruby on Rails, AI や機械学習が気になっている <a href="https://twitter.com/hourin/status/899162996777164800">https://twitter.com/hourin/status/899162996777164800</a></p></li>
<li>Python: <a href="http://amzn.to/2x32a7M">「ゼロから作るディープラーニング」(オライリー)</a></li>
<li>(Python), (PyCall), 数学: まず数学</li>
<li>◎Python, ○R, ▲C/C++: 文系しばりがなくなった。Ruby を使っているのなら Python ぐらい知っているだろう。なんとか偏差とかも簡単にできる R。最適な、とあるので C/C++</li>
<li>Prolog: 使いこなす、とあるので。Watson や Pepper の裏側で使われている。</li>
<li><p>処理系はいっぱいある。入れやすいのは GNU Prolog</p></li>
<li><p>質問4: SIer 2次下請け, Struts, Java しか使ったことがない <a href="https://twitter.com/hourin/status/899164784163041280">https://twitter.com/hourin/status/899164784163041280</a></p></li>
<li>作った感じの質問</li>
<li>会場アンケート: Struts を使っている人? → いない</li>
<li>Common Lisp: <a href="http://amzn.to/2vUncoY">「実践 Common Lisp」(オーム社)</a>, 身につけると長く役に立つ</li>
<li>Haskell: <a href="http://amzn.to/2fWfHtK">「すごいHaskell」(オーム社)</a>, 最近和書がたくさん出ているので恐れずにやってみると良い</li>
<li>Lisp: 圧倒的に長く役に立つ, 転職は探せばある?, すべての言語が Lisp, Lisp を学ぶと悟り体験が得られるらしい</li>
<li>Ruby, C, アセンブラ: だんだん掘っていけば長く使えるはず</li>
<li><p>◎PHP, ○C/C++, ▲COBOL: 相変わらず2次下請けで良い?ならPHP, 組み込みなど他の分野に変わるなら C/C++, COBOL をやっていたら転職もできるし長く使える, アセンブラはアーキテクチャが変わると長く使えるという条件に当てはまらなそうなので COBOL にした</p></li>
<li><p>質問5: Web サイト作成のために PHP 学習中, 効率的なプログラミング学習法, 面白いプログラミング言語とその理由 <a href="https://twitter.com/hourin/status/899166828559122433">https://twitter.com/hourin/status/899166828559122433</a></p></li>
<li>これも作った感じの質問</li>
<li><a href="http://amzn.to/2fWHdYg">「あなたの知らない超絶技巧プログラミングの世界」(Ruby)</a>: esolang は他の人が出すだろうと思って、これにした。</li>
<li>◎Ruby, ○JavaScript, ▲<a href="https://ja.wikipedia.org/wiki/Curl_%28%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E%29">Curl</a>: Ruby: <a href="http://amzn.to/2xfKtkx">たのしいRuby</a> という本がある, JavaScript: Web サイト制作のために、とあるので, Web サイトはインフラを用意するのが大変, ちょっとした変更ならローカルでできる, Curl: 面白いという点だけなら Curl という言語, サーバー側もクライアント側も Curl</li>
<li><code>Brainf*ck</code>: <a href="http://amzn.to/2vUnOLi">「Ruby で作る奇妙なプログラミング言語」(マイコミ)</a>, <code>Brainf*ck</code> の実装をどんな言語でもいいのでやってみるのが面白い, 実装が簡単なのが <code>Brainf*ck</code></li>
<li><p>おっぱい言語, なでしこ/ひまわり/プロデル: <code>Brainf*ck</code> 系の言語におっぱい言語というのがある, 日本語プログラミング言語</p></li>
<li><p>質問6: インフラ運用エンジニア, 使える言語はシェル, 仕事で使っている OSS の言語は多様, 自動化をやっていくために、どのような言語を学ぶのがよい? <a href="https://twitter.com/hourin/status/899169062915235840">https://twitter.com/hourin/status/899169062915235840</a></p></li>
<li>Go: <a href="http://amzn.to/2fWM5wg">「プログラミング言語Go」(丸善)</a>, <a href="https://www.lambdanote.com/">「Go ならわかるシステムプログラミング」(ラムダノート)</a> (まだ出てない), 列挙されていた言語になかったもの, Google が推している, 下回りを C とかアセンブラで学ぶのは古い</li>
<li>YAML とそれを使える言語: 設定ファイルが YAML のことが多い, ツールの実装言語を学べば良い</li>
<li>◎Python, ○Ruby, ▲Go: Python: インストーラーとかマネージメント系がシェルから Python になっているので, libpcap を直接扱えるライブラリとかでスキルセットを広げていける, 自動化は ansible が YAML を使っていて Python で書かれている, Ruby: chef が Ruby で書かれている, 自分でプラグインとか書ける, Go: 上のレイヤーからみて Docker を使っているのではないかということで Docker の実装に使われている Go</li>
<li><p>怒りに身をまかせろ: 怒りさえあれば勉強しなくて良い, 必要があれば読むので自然に覚えていく, インフラエンジニアはプログラマと仲良くすると色々教えてもらえる, 怒ってもいいけど怒られないように</p></li>
<li><p>会場から質問: 小学3年生の子供に教えるのに適した言語は? Scratch の番組とかは見て興味をもってやっている</p></li>
<li>Scratch はそんなにやっていなくて、結局ゲームをやっている</li>
<li>Scheme 「SICP」(翔泳社)</li>
<li>(日本語), Smalruby</li>
<li>◎English, ○Smalltalk, △N-88 BASIC</li>
<li>ボードゲーム, アセンブラカルタ</li>
</ul>


<h2>ライトニングトーク</h2>

<h3>従来言語で理解する次世代言語の概念 高野光弘 @takano32</h3>

<ul>
<li>次世代の発想は既存の発想の発展が多い</li>
<li>空飛ぶ車 = 車 + 飛行機</li>
<li>プログラミングにも同様のことが多い</li>
<li>Perl = sh + sed + awk</li>
<li>C++ = C + オブジェクト指向</li>
<li>Java = オブジェクト指向 + 仮装計算機</li>
<li>サンプルはアンケート項目</li>
<li>Ruby = Perl + オブジェクト指向</li>
<li>&hellip; (はやすぎるのでメモを取るのを諦めました)</li>
</ul>


<h3>同じ処理を複数の言語で書いてみよう 増井 敏克 (ますい としかつ) @masuipeo</h3>

<ul>
<li>いろんな本を書いている</li>
<li>プログラミング言語図鑑</li>
<li>本を書いた経緯</li>
<li>CodeIQ で出題者をしている</li>
<li>提出された回答をみていたら、いろんな言語が読み書きできるようになった</li>
<li>言語の人気は変わる</li>
<li>言語を勉強するときのコツは?</li>
<li>とにかく手を動かす</li>
<li>「読む量は学力の上限を規定し、閣僚は学力の下限を規定する」</li>
<li>言語を学ぶときの姿勢</li>
</ul>


<h3>おいら的テスティングフレームワーク比較 Java C# PHP JavaScript sengoku</h3>

<ul>
<li>Java: モックの作成が簡単</li>
<li>JavaScript: ファイル監視が楽チンすぎる</li>
<li>describe と it に日本語をかけてわかりやすい</li>
<li>expect の書き心地が英語っぽくて良い</li>
<li>C#: マウス操作するのがつらい (キーボードショートカットがうまく動かなかった), モック化を阻むフレームワーク (.Net Framework) 内のクラス</li>
<li>PHP: とくに可もなく不可もなく</li>
<li>SQlite はテストが5000万行で本体7万行</li>
<li>テストを書きやすい環境を選ぶ方が良いのでは</li>
</ul>


<h3>PHPにおけるメタプログラミングの温床 うさみけんた @tadsan</h3>

<ul>
<li>オープンクラスなどではなく静的解析しやすい</li>
<li>その和を乱す動的な機能がある</li>
<li>初級編</li>
<li>callable <code>$f($arg)</code></li>
<li><code>compact</code></li>
<li><code>extract</code></li>
<li><code>$$var</code> 可変変数</li>
<li><code>debug_backtrace</code></li>
<li>中級編</li>
<li>マジックメソッド</li>
<li><code>__get()</code>, <code>__set()</code></li>
<li><code>__call()</code></li>
<li>上級編</li>
<li><code>spl_autoload_register</code></li>
</ul>


<h3>関係記述型言語 ラダーのすすめ 土井 康正</h3>

<ul>
<li>PLC 上で実行</li>
<li>抽象化、オブジェクト化、構造化しなくても良い</li>
<li>値は全てグローバル変数で良い</li>
<li><p>静的な世界</p></li>
<li><p><a href="https://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%80%E3%83%BC%E3%83%BB%E3%83%AD%E3%82%B8%E3%83%83%E3%82%AF">ラダー・ロジックまたはラダー言語（ラダーげんご）</a></p></li>
</ul>


<h3>now going with go @nasa9084</h3>

<ul>
<li>emacs!</li>
<li>会場アンケート: 昨日も来ていた人は少なかった</li>
<li>go言語</li>
<li>go special syntax</li>
<li>iota</li>
<li>Initializer Statement</li>
<li>defer Statement</li>
<li>testing package</li>
<li><code>go test</code> や <code>go test -bench</code></li>
<li>testing.T</li>
<li>testing.B</li>
<li>Example Tests</li>
<li>go generate</li>
<li><code>// go:generate stringer</code></li>
<li>便利な標準ライブラリ</li>
<li>gofmt</li>
<li>go vet</li>
<li>godoc</li>
</ul>


<h3>Klassic言語の宣伝 水島宏太</h3>

<ul>
<li><a href="http://kmizu.github.io/klassic_ll2017/">http://kmizu.github.io/klassic_ll2017/</a></li>
<li>静的型</li>
<li>式ベース</li>
<li>型推論</li>
<li>スペースセンシティブリテラル</li>
<li>Java FFI</li>
<li>Row Polymorphism</li>
</ul>


<h3>RubyKaigi 2017 のご紹介+α @takatayoshitake</h3>

<ul>
<li><a href="http://rubykaigi.org/2017/schedule">http://rubykaigi.org/2017/schedule</a></li>
<li>昨日の RejectKaigi でやった内容らしい</li>
</ul>


<h2>クロージング</h2>

<p>恒例の抽選での書籍プレゼントは、全員分あるということだったので、どうするのかと思ったら、今までのボール投げとは違ってくじ引きでした。
書籍は2冊もらえた人もいたようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[姫路IT系勉強会 2017.08 出張版に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-19-histudy.html"/>
    <updated>2017-08-19T13:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/histudy</id>
    <content type="html"><![CDATA[<p><a href="https://histudy.connpass.com/event/57870/">姫路IT系勉強会 2017.08 出張版</a>に参加しました。
公式の記録は勉強会のページからリンクされている HackMD のページ<!-- https://hackmd.io/s/rJ7lA-r_- -->に残っています。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場</h2>

<p>最近よく行っているさくらインターネット様のイベントスペースでした。</p>

<p>阪急梅田駅の茶屋町口から出て、ヨドバシの北側を通って行ったら、外は少し暑かったので、南側の地下を通った方がよかったと思いました。</p>

<h2>紹介</h2>

<ul>
<li>5年たっている</li>
<li>毎月第3土曜日</li>
<li>細分化していると人が集まらないのでなんでもあり</li>
<li>今は座談会形式</li>
<li>HackMD にみんなで記録する</li>
</ul>


<h2>自己紹介</h2>

<ul>
<li>人数が多かった</li>
</ul>


<h2>始まったきっかけ</h2>

<ul>
<li>ハックカフェで姫路から神戸や大阪は遠いという話があった</li>
<li>講師をたてるのが大変だったので福岡の勉強会を参考にして座談会形式に</li>
<li>兵庫県は長続きしている勉強会がなかった</li>
<li>言語系が途中から増えた</li>
<li>明石高専の人とか</li>
<li>巣立っていた人が活躍しているのをみるのも楽しい</li>
<li>プログラミングを知らない状態から勉強会で教えてもらってシステムを作った人も</li>
</ul>


<h2>休憩</h2>

<h2>GIT の脆弱性</h2>

<ul>
<li><a href="https://github.com/greymd/CVE-2017-1000117">https://github.com/greymd/CVE-2017-1000117</a></li>
<li><a href="https://www.debian.org/security/2017/">https://www.debian.org/security/2017/</a> で git に続いて subversion や cvs も同様っぽいセキュリティアップデートが出ている</li>
<li>twitter によると <a href="https://community.atlassian.com/t5/Agile-articles/Git-Mercurial-SVN-%E3%81%AE%E8%84%86%E5%BC%B1%E6%80%A7%E3%81%AE%E5%BD%B1%E9%9F%BF%E3%82%92%E5%8F%97%E3%81%91%E3%82%8B%E8%A3%BD%E5%93%81%E3%81%A8%E5%AF%BE%E5%BF%9C%E6%96%B9%E6%B3%95%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/ba-p/625280">https://community.atlassian.com/t5/Agile-articles/Git-Mercurial-SVN-%E3%81%AE%E8%84%86%E5%BC%B1%E6%80%A7%E3%81%AE%E5%BD%B1%E9%9F%BF%E3%82%92%E5%8F%97%E3%81%91%E3%82%8B%E8%A3%BD%E5%93%81%E3%81%A8%E5%AF%BE%E5%BF%9C%E6%96%B9%E6%B3%95%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/ba-p/625280</a> という情報もあるらしい</li>
</ul>


<h2>電源断耐性のあるファイルシステムを知りたい</h2>

<ul>
<li>UPS を使えばいいのでは</li>
<li>RasPi などの話っぽい?</li>
<li>UPS につないだ NAS でネットワークブートすれば良いのでは</li>
<li>設定は外だししてデータは unionfs とか使う?</li>
<li>データは外に置くのが良さそう?</li>
</ul>


<h2>自宅NW更改してみた</h2>

<ul>
<li>自宅(ラックマウント)サーバーはじめました</li>
<li>エアフローと火事には気をつけましょう</li>
</ul>


<h2>自宅サーバーを稼働し続ける上で安全性を保つために必要なことは?</h2>

<ul>
<li>クラウドがオススメ</li>
<li>自宅サーバーのメリットはストレージの安さ</li>
<li>ロマンがある</li>
<li>NAPT とか</li>
<li>さくらのクラウドのようないきなり外に晒されている環境で勉強するとか、VPC に隔離されている AWS とか</li>
<li><a href="https://www.vultr.com/">https://www.vultr.com/</a> が東京リージョンもあって Hourly Pricing もあって安いので、このあたりで試してみるのも良い</li>
</ul>


<h2>情報系の勉強をするにあたって、何かアドバイスをください</h2>

<ul>
<li>何か作りたいものを作ってみる</li>
</ul>


<h2>ファイルの共有をしたい話</h2>

<ul>
<li>さくらのサーバーで WordPress を使っている</li>
<li>WordPress にこだわらず他の方法を考えた方が良い</li>
</ul>


<h2>Chocolatey やろうぜ</h2>

<ul>
<li>Chocolatey (ちょこれってぃー)</li>
<li>PowerShell の実行ポリシーの変更が必要</li>
<li>config ファイルでインストールを自動化できる</li>
<li>例: <a href="https://github.com/223n/Chocolatey/blob/master/packages.config">https://github.com/223n/Chocolatey/blob/master/packages.config</a></li>
<li>パッケージがなければ作れば良い</li>
</ul>


<h2>Boxstarter</h2>

<ul>
<li><a href="https://chocolatey.org/packages/boxstarter">https://chocolatey.org/packages/boxstarter</a></li>
<li>Windows Update のインストールや再起動などもできるらしい</li>
<li>別パッケージで Hyper-V にも対応しているらしい</li>
</ul>


<h2>DNSSEC について</h2>

<ul>
<li><a href="https://www.sakura.ad.jp/news/sakurainfo/newsentry.php?id=1683">ルートゾーンKSKロールオーバーによる影響について | さくらインターネット</a> の話かと思ったらそうでもなかった?</li>
<li>主にキャッシュサーバーに影響する話のはずなのに、権威サーバーの話しかなかった</li>
</ul>


<h2>なぜヤツラは働き方改革といえば IT となるのか?</h2>

<ul>
<li>いろいろ議論していた</li>
</ul>


<h2>休憩</h2>

<h2>AWK &amp; sed プログラミング</h2>

<ul>
<li>DWARF の話をしたという話からちょっと DWARF の紹介</li>
<li>awk についてのアンケート</li>
<li><a href="https://github.com/takubo/awkGL">https://github.com/takubo/awkGL</a></li>
<li>awkGL のデモ</li>
<li><a href="https://github.com/takubo/gsed-dbg">https://github.com/takubo/gsed-dbg</a></li>
<li>sed のデバッガーのデモ</li>
</ul>


<h2>Infrastructure as code は実際どのくらい進んでる?</h2>

<ul>
<li><a href="http://amzn.to/2wjc9IU">Infrastructure as Code ―クラウドにおけるサーバ管理の原則とプラクティス</a> という日本語の本もある</li>
<li>シェルスクリプトならまだまし</li>
<li>手順書の場合もある</li>
<li>それさえもない場合もある</li>
<li>ansible とか chef とか puppet とか</li>
<li>ネットワークなどのホストごとの設定は terraform がある</li>
<li>ネットワーク事業者などは半年に1回ぐらい壊れるものがでてくるので普通に使っている</li>
<li>ansible は最近は RedHat が関わっているので説得しやすい?</li>
<li>複数台構成は ansible だけだと辛くなるので terraform も使う</li>
<li>さくらのクラウドはサンドボックスリージョンがあるので terraform の試行錯誤もしやすい</li>
<li>terraform はさくらのクラウドプラグインもある</li>
<li>terraform まで必要ない場合は usacloud というのもある</li>
<li>会場アンケート: 業務で自動化ツールを使っている人は少ない、個人で使っている人は割といる</li>
</ul>


<h2>おうちのネット環境 速い? 遅い?</h2>

<ul>
<li>パズドラが繋がらない</li>
<li>IPoE で IPv6 経由で解決</li>
</ul>


<h2>技術系書籍執筆環境はどうしてますか?</h2>

<ul>
<li>textlint? gitbook?</li>
<li>Re:VIEW?</li>
<li>執筆途中を見せたい</li>
<li>技術書典</li>
<li>投稿サイトからや同人誌からというのもある</li>
</ul>


<h2>Mac OS サーバー (Xserve) の使い方</h2>

<ul>
<li>OS は El Capitan まで</li>
<li>CI サーバーにするのが良さそう</li>
</ul>


<h2>VR の世界教えて</h2>

<ul>
<li>360 度カメラで撮影した内容を VR でみたい (動画でも写真でも良い)</li>
<li>THETA</li>
<li><a href="http://www.pano-vr.com/service/panocreator/">PanoCreator – パノラマVR専用CMS - | パノラマ工房</a></li>
<li>ハコスコ</li>
<li><a href="http://www.asahi.com/multimedia/vr360/">http://www.asahi.com/multimedia/vr360/</a></li>
<li>360度だと自分がうつりこまないようにするのに頭の上にのせるとかしないといけないので、撮影が難しい</li>
<li>最近は180度というのもあるらしい</li>
<li>THETA の画質はそれなり (特に上下)</li>
</ul>


<h2>クーベルネイテスでコンテナ管理</h2>

<ul>
<li>kubernetes</li>
<li>よくわかっていないので知りたいという話</li>
<li>lxd などを含めたコンテナ全般の理解を深めないと厳しいのでは</li>
</ul>


<h2>vagrant のプロビジョナー ansible_local の使い方</h2>

<ul>
<li>hosts ファイルが送り込まれないので、実行対象を絞れない</li>
<li>ホスト側が Windows でも使えるので便利</li>
<li><a href="https://github.com/wate/lde">https://github.com/wate/lde</a></li>
</ul>


<h2>ip-link(8)で何が面白いの</h2>

<p>特に使っている人はいなかった。</p>

<h2>初代 OpenBlockS</h2>

<ul>
<li><a href="http://www.plathome.co.jp/support/labo/obs/">http://www.plathome.co.jp/support/labo/obs/</a></li>
<li>NetBSD なら動く?</li>
</ul>


<h2>vagrant proxmox が動かない</h2>

<ul>
<li>自己解決していた</li>
</ul>


<h2>ライセンス管理について</h2>

<!-- http://d.hatena.ne.jp/fu7mu4/ -->


<ul>
<li>和をもって貴しとなす</li>
<li><a href="https://www.openchainproject.org/">https://www.openchainproject.org/</a></li>
<li>Xmppframework for IOS。自身はBSDライセンスだけどスタティックリンクのlibidn(LGPLv2.1+)が必要 <a href="https://github.com/robbiehanson/XMPPFramework/issues/217">https://github.com/robbiehanson/XMPPFramework/issues/217</a></li>
<li>Electron App で npm で入るライブラリーのライセンス問題</li>
<li>Xampp for Windows のMercury MTSは商用不可。そしてXAMPP Control panel のソースが見当たらない(GPL?) <a href="https://twitter.com/sato_makoto/status/898849752757919744">https://twitter.com/sato_makoto/status/898849752757919744</a></li>
<li><a href="https://github.com/fzaninotto/Faker/issues/881">https://github.com/fzaninotto/Faker/issues/881</a></li>
<li><a href="http://techlife.cookpad.com/entry/oss-policy">オープンソースソフトウェアポリシーをつくろう - クックパッド開発者ブログ</a></li>
<li>OSS ライセンスを見つける</li>
<li>重量級: 例 protex, Palamida, Protecode</li>
<li>中級: 例 Fossology</li>
<li>軽量級: 例 oslc</li>
<li>Fossology オススメ <a href="https://www.fossology.org/">https://www.fossology.org/</a></li>
<li>ライセンス読もう <a href="https://tldrlegal.com/">https://tldrlegal.com/</a></li>
</ul>


<h2>自宅NW更改してみた の続き</h2>

<!-- twitter.com/sperkbird -->


<p>BGP とかは名前や概要は知っていても実際に使ったことはなかったので、よくわからない部分もありました。</p>

<h2>MySQL to PostgreSQL + Redmine 移行</h2>

<ul>
<li>変換元は AWS 上の Ubuntu</li>
<li>手元の Debian で変換</li>
<li>yaml_db は redmine が必要だったので不採用</li>
<li>PGLoader のパッケージだとエラーでうまくいかなかったので自分でコンパイルしたバイナリで変換完了</li>
<li>移行先は Ubuntu or Debian ではなく Amazon Linux だった</li>
</ul>


<h2>Terraform で始める「Infrastructure as Code」入門</h2>

<ul>
<li><a href="https://github.com/sacloud">https://github.com/sacloud</a></li>
</ul>


<h2>さくらのクラウド</h2>

<ul>
<li><a href="http://cloud.sakura.ad.jp/">http://cloud.sakura.ad.jp/</a></li>
<li>会場アンケート: 個人で使ったことがある人は割といるが、仕事で使っている人はほとんどいない</li>
</ul>


<h2>感想</h2>

<p>アンカンファレンス形式ということで、LILO＆東海道らぐのようなものを想定していたら、それよりも緩いというか、
全員に付箋が配られて、話のネタ (自分で話をする必要はない) を記入するという方式だったので、驚きました。</p>

<p>タイムテーブルに書かれているのはあくまでも目安で、基本的にお題は集まった付箋からその場で決まっているようでした。</p>

<p>懇親会は、引き続き同じ場所で17時以降にやって、本編よりも深いネタもやるという感じでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSS Gate大阪ワークショップ2017-08-12 with さくらクラブに参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-12-oss-gate-osaka.html"/>
    <updated>2017-08-12T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/oss-gate-osaka</id>
    <content type="html"><![CDATA[<p><a href="https://oss-gate.doorkeeper.jp/events/63163">OSS Gate大阪ワークショップ2017-08-12 with さくらクラブ</a>に参加しました。</p>

<!--more-->


<p>以下、今回感じたことを適当にメモしておきます。</p>

<h2>会場</h2>

<p>最近よく行っている気がするグランフロント大阪タワーA 35Fのさくらインターネットさんでした。
やはり1階からは入れなくて、2階から入る必要がありました。
9階で乗り換えが必要なのも最初はわかりにくそうです。</p>

<p>プロジェクター3台に同じ画面を出すには分配器を用意してもらう必要があったようで、今回は途中で用意してもらいましたが、必要なら開始前に用意しておいてもらうのが良さそうでした。</p>

<h2>座席</h2>

<p>4人がけできるテーブルがメインだったので、1人のサポーターの左右に2人のビギナーという体制でした。
余ったサポーターはサポートメンターということになったので、一応サポートメンターでした。</p>

<h2>改善できそうだと思ったところ</h2>

<p>Doorkeeper で参加申し込みするところに壁があるという話があったので、 <a href="https://oss-gate.github.io/">https://oss-gate.github.io/</a> では良い感じに目立っている動画を doorkeeper の方でも気付きやすいところで紹介すると良いのではないかという話がありました。</p>

<h2>未経験者の理由</h2>

<p>スライドに書いてある理由の予想とはだいたい違う回答が出てくるのですが、今回は英語だからという感じの理由でした。</p>

<h2>BOM 問題</h2>

<p>アンケートの集計で BOM 付きの YAML ファイルになっていた人がいて、結構はまったので、YAML は意外と難しいなと思いました。</p>

<p>今は BOM 対応が入ったので次回以降は大丈夫だと思います。</p>

<h2>事前準備</h2>

<p>初めてのサポーターの人には動画を見てもらっておくと、だいたいどんな感じのことをするのか、わかってもらえて良いのではないかと思いました。</p>

<h2>ふりかえり</h2>

<p>サポーター1人にビギナー2人だとふりかえりの時間にフィードバックをしっかりしていると時間が足りないと感じました。</p>

<h2>ドキュメント</h2>

<p>モデレーター(進行役)やサポートメンター用のドキュメントが不足しているようなので、もっとまとめられると良さそうに思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オープンソースカンファレンス2017 Kyotoに参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-05-osc2017-kyoto.html"/>
    <updated>2017-08-05T20:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/osc2017-kyoto</id>
    <content type="html"><![CDATA[<p><a href="https://www.ospn.jp/osc2017-kyoto/">オープンソースカンファレンス2017 Kyoto</a>
に参加しました。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場</h2>

<p>KRP は遠いですが、行きは西院駅から歩きました。
帰りは天気が悪かったので、丹波口駅から帰りました。</p>

<p>朝からは行けなかったので、13時すぎに到着しました。</p>

<h2>「DLL読み込みの問題」を読み解く</h2>

<p>よく見かける DLL 読み込みの脆弱性がどういうことなのか気になっていたので、途中からになってしまいましたが、聴きに行きました。</p>

<ul>
<li><p>DLL の検索パス <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682586(v=vs.85%29.aspx">Dynamic-Link Library Search Order (Windows)</a></p>

<ul>
<li>KnownDLLs に登録されているかどうか</li>
<li>実行ファイルがあるディレクトリ (アプリケーションディレクトリ)</li>
<li>Windows システムディレクトリ</li>
<li>Windows ディレクトリ</li>
<li>カレントディレクトリ</li>
<li>環境変数 PATH</li>
</ul>
</li>
<li><p>sysinternals の Process Monitor (procmon)</p></li>
<li>Dependency Walker</li>
<li><p>procmon の使い方の例</p></li>
<li><p>2010年ごろの状況</p></li>
<li>DLL 読み込みの脆弱性に対する攻撃手法が公開され、注目を集める</li>
<li><a href="https://www.jpcert.or.jp/sc-magazine/codezine02-8.html">第8回　WindowsのDLLだけが危ないのか？DLL hijacking vulnerability概説（前編）</a></li>
<li>ドキュメントと一緒に細工した DLL を置いてアプリを起動するとカレントディレクトリの DLL を読み込む</li>
<li><p>この対策としてカレントディレクトリの優先順位が下がった</p></li>
<li><p>2016年ごろから「インストーラ」「自己解凍書庫」に対するDLL読み込み脆弱性の届出が増える</p></li>
<li><p>インストーラーと一緒に細工した DLL を置いてインストーラーを起動すると同一ディレクトリにある DLL を使ってしまう</p></li>
<li><p>Windows や Program Files といったシステム領域はアプリ側ではなくシステム側が保護</p></li>
<li>ユーザディレクトリは管理はユーザーの責任だが</li>
<li>システム領域外で動作するアプリには、よりセキュアな実装を求めたい</li>
<li><p>インストーラ、自己解凍書庫、ポータブルアプリなど</p></li>
<li><p>ユーザーが行うべき対策</p></li>
<li>あやしいファイルを放置しない</li>
<li>インストーラーや自己解凍書庫を安全な形で実行する</li>
<li><p>安全な形で実行: インストーラーをダウンロード、新規にディレクトリを作成、作成したディレクトリにインストーラーを移動、インストーラーを起動</p></li>
<li><p>開発者が行うべき対策</p></li>
<li>DLL の読み込み方法に注意する</li>
<li>アプリ/インストーラーの挙動についてユーザーに説明し、注意を促す</li>
<li>SetDefaultDllDirectories() や SetDllDirectory() でアプリケーションディレクトリやカレントディレクトリを排除</li>
<li>DLL 読み込みは可能な限り絶対パスで</li>
<li><p>インストーラー作成ツールによるインストーラー作成やアーカイバーによる自己解凍書庫作成時にはツールの対応状況を確認</p></li>
<li><p>開発者が対処しきれないケース</p></li>
<li>アプリのスタートアップ部分で勝手にロード</li>
<li>Windows 標準 DLL が独自に他 DLL をロード</li>
<li>Windows 標準機能 (DLL forwarding, OS 互換機能の発動など)</li>
<li>動作監視ソフトの影響など</li>
<li><p>(参考: <a href="http://micco.mars.jp/vul/2017/mhsvi20170515_01.htm">UNLHA32.DLLで作成された自己解凍書庫における任意のDLL読み込みに関する脆弱性</a>など)</p></li>
<li><p>DLL 読み込みと合わせてコマンド呼び出しについても注意</p></li>
<li><p>関連情報</p></li>
<li><a href="https://www.slideshare.net/jpcert_securecoding/dll-78581339">DLL読み込みの問題を読み解く</a></li>
</ul>


<p>ユーザーの対策として、ダウンロードしたファイルを実行する際に別途ディレクトリを作って、という話があったので、ブラウザーにダウンロード時にディレクトリを作る機能を要望したりはしていないのでしょうか? という質問をしてみました。
今の所、そういう話はしていないが、話をしてみるのは良いかもというかランダムなディレクトリを作るのは利便性が問題なのではとか、ブラウザーのアップデーターはランダムなディレクトリを作って実行しているから大丈夫という感じの回答だったと思います。</p>

<h2>Ubuntuはどこへ向かうのか～方針転換の解説～</h2>

<p>どういう系統の話か全然わかってなくて聴きにいったら、 Unity の話でした。
狭い部屋がほぼいっぱいで人気でした。</p>

<ul>
<li>R.I.P. Unity 2010-2017</li>
<li>2007年頃(?) に Netbook の登場</li>
<li>ディスプレイが狭いので専用のチューニングが求められた</li>
<li>Dell Inspiron Mini 9 : 日本で発売された Ubuntu プリインストールの Netbook</li>
<li>1024×600</li>
<li>Ubuntu Netbook Remix の登場 : Ubuntu 9.04 ベース</li>
<li>Remix はアンオフィシャル</li>
<li>Ubuntu Netbook Edition : Ubuntu 10.04 ベースと 10.10 ベースのみ</li>
<li>Edition はオフィシャルリリース</li>
<li>10.04 は LTS だが Netbook Edition は LTS ではなかった</li>
<li>Unity 初登場は Ubuntu Netbook Edition 10.10</li>
<li>Mutter ベース</li>
<li>Ubuntu 11.04 : Unity がデフォルトになった最初の Ubuntu</li>
<li>Desktop Edition と Netbook Edition を統合</li>
<li>Compiz ベースの Unity と Metacity ベースの Unity 2D</li>
<li>Ubuntu 11.10 の Unity</li>
<li>Ubuntu 12.04 LTS : Unity がデフォルトになって初めての LTS</li>
<li>じゃんけんタイム: 日経 Linux 6 月号</li>
<li>Ubuntu 12.10 : Unity 2D はなくなった</li>
<li>Ubuntu 13.04 : Unity 7 になった</li>
<li><p>逆に言えばここから 4 年間 Unity 7 が続いた</p></li>
<li><p>Unity 8</p></li>
<li>デスクトップ用とスマートデバイス用 Ubuntu を統合する UI が必要となった</li>
<li>スクラッチから開発</li>
<li>UI だけでなく、ディスプレイマネージャ (Mir) から開発</li>
<li>X.Org ではスマートデバイスは辛い</li>
<li>2012年8月: 当初 qml-phone-shell という名前</li>
<li>2013年6月から Unity 8 に</li>
<li><p>Ubuntu 17.10 で概ね実用的に (日本語を打たなければという条件付きで)</p></li>
<li><p>じゃんけんタイム: 日経 Linux 7 月号</p></li>
<li><p>2017.04.05 <a href="https://insights.ubuntu.com/?p=65030">https://insights.ubuntu.com/?p=65030</a></p></li>
<li>スマートデバイスやコンバージェンスよりもクラウドや IoT に重点的に投資するという内容</li>
<li>Unity 8 への投資も中止し、 GNOME に戻る</li>
<li><p>Ubuntu デスクトップはユーザーも多く今尚重要である</p></li>
<li><p>現時点での確定事項</p></li>
<li>GNOME Shell と GDM をデフォルトに</li>
<li>Ubuntu GNOME はリリースせず</li>
<li><p>Unity 7 から GNOME Shell への移行サポート</p></li>
<li><p>現時点での未確定事項</p></li>
<li>デフォルトのアプリケーション</li>
<li>インプットメソッド: Fcitx の現行バージョンは Wayland 非対応</li>
<li><p>ディスプレイマネージャ: Wayland がデフォルトになりそう</p></li>
<li><p>Unity 7 を使用したいなら Ubuntu 16.04 LTS にするのがおすすめ</p></li>
<li><p>Unity 8 は yunit というフォークとして生き残る見込み <a href="https://yunit.io/">https://yunit.io/</a></p></li>
<li><p>Ubuntu のセカンドチョイスは Ubuntu GNOME だった</p></li>
<li><p>今後その役目は Ubuntu MATE か?</p></li>
<li><p>Ubuntu Weekly Topics 2017年4月7日号</p></li>
<li>Ubuntu Weekly Recipe 第 467 回 GNOME 初心者向け</li>
<li>Software Design</li>
<li>日経 Linux</li>
</ul>


<h2>Debian updates</h2>

<p>とりあえず OSC に行こうかと思ったきっかけになった Debian の話も聴きました。
時間がなくなったので後半は急いで終わりました。</p>

<ul>
<li>Debian とは?</li>
<li>Debian は連携する個人の集団</li>
<li>Debian は開発元企業はなく、ボランティアのみ</li>
<li>世界中に開発者がいる</li>
<li>Debian Free Software Guideline</li>
<li><a href="https://www.debian.org/social_contract#guidelines">https://www.debian.org/social_contract#guidelines</a></li>
<li><a href="http://www.opensource.jp/osd/osd-japanese.html">http://www.opensource.jp/osd/osd-japanese.html</a></li>
<li><a href="https://www.debian.org/social_contract">https://www.debian.org/social_contract</a></li>
<li>Debian Policy</li>
<li>Debian Derivatives</li>
<li><a href="https://en.wikipedia.org/wiki/List_of_Linux_distributions">https://en.wikipedia.org/wiki/List_of_Linux_distributions</a> の図</li>
<li>stable, testing, unstable</li>
<li>Debian JP Project とは?</li>
<li>次回の関西勉強会は 8/27(日) に IM の話</li>
<li>Debian 9 Stretch</li>
<li>2017-06-17: Debian 9.0</li>
<li>2017-07-22: Debian 9.1</li>
<li>主な変更点</li>
<li>サポートアーキテクチャ</li>
<li>mips64el</li>
<li>i386 が i686 以降に変更</li>
<li>サポートから外れたアーキテクチャ: powerpc</li>
<li>kFreeBSD はテクノロジープレビューから porter (?) になった</li>
<li>ポメラで Debian (armhf) が動く</li>
<li>theme: softwaves</li>
<li>主な Software のバージョン</li>
<li>クロスコンパイルがデフォルトでサポート</li>
<li>変更点, 注意点</li>
<li>実行ファイルは PIE が有効になっている</li>
<li>iproute2 が推奨、 net-tools は非推奨 (net-tools: ifconfig, arp, netstat, route, &hellip;)</li>
<li>iceweasel → firefox 、 icedove → thunderbird</li>
<li>mysql から mariadb : jessie からのアップグレードの際には自動的に mariadb へ</li>
<li>Xorg がユーザー権限でも動作可能に</li>
<li>セキュリティ関連</li>
<li>Firefox, Chromium のセキュリティ更新の提供</li>
<li>Firefox ESR, Thunderbird ESR</li>
<li>libv8, nodejs, node-* のセキュリティ更新は提供されない</li>
<li>OpenSSL: 3DES, RC4 の TLS/SSL 利用は提供されない</li>
<li>Ruby チームは Redmine と他2個ぐらいのパッケージが必要とする gem を中心にメンテしている</li>
<li>Adobe Flash が Stretch に入らない</li>
<li>互換性</li>
<li>PIE</li>
<li>NIC : predictable name (jessie からの更新の際には据え置き)</li>
<li>OpenSSH : 旧式暗号と SSH v2 が無効</li>
<li>Xorg: evdev から libinput</li>
<li>Upstart は削除</li>
<li>デフォルトは systemd</li>
<li>sysvinit, OpenRC も利用可能</li>
<li>installer</li>
<li>GUI インストールがデフォルト</li>
<li>UEFI のセキュアブートは未対応</li>
<li>screen 対応</li>
<li>CD イメージを廃止</li>
<li>アップグレード</li>
<li>リリースノートを読むことを推奨</li>
<li>apt-line が <code>ftp://</code> の場合は <code>http://</code> に変更が必須</li>
<li>Debian 8.8 以降にあげてから一度再起動してからあげないと PIE 関連ではまる</li>
</ul>


<h2>ライトニングトーク＆閉会式</h2>

<ul>
<li><a href="https://github.com/verifast/verifast">https://github.com/verifast/verifast</a></li>
<li>コメントで注釈を入れるとC言語のプログラムを検証してくれる</li>
<li><p><a href="https://metasepi.connpass.com/event/55350/">#静的コード解析の会 第4回@大阪 - connpass</a></p></li>
<li><p>近くの海外カンファレンスに行こう！</p></li>
<li><p>openSUSE.Asia Summit 2017 Tokyo</p></li>
<li><p><a href="https://opensuseja.connpass.com/event/62902/">openSUSE Leap 42.3 Release Party Kyoto &amp; もくもく会 - connpass</a></p></li>
<li><p>KRP 周辺グルメガイド</p></li>
<li><p>順番に紹介していってドラがなったところで終了だった</p></li>
<li><p>鉄道とオープンデータ</p></li>
<li><p>時刻表データは自由なものが少ないので架空の路線を作っていろいろやっている話だった</p></li>
<li><p>どうしてもあれが欲しくなった</p></li>
<li>500兆円ほしいジェネレーターを fork してクリッピングするようにした</li>
<li>iOS も対応した</li>
<li><p><a href="http://tmx3.net/5000choyen/">http://tmx3.net/5000choyen/</a></p></li>
<li><p>大学で無理やり Splatoon2 をやった話</p></li>
<li>VPN + mac のインターネット共有</li>
<li><p>共有する接続経路で VPN を選ぶ必要があった</p></li>
<li><p>便利？な機能を使って開発していく</p></li>
<li><p><a href="https://github.com/shiotomo/cPractice">https://github.com/shiotomo/cPractice</a></p></li>
<li><p>最近の学生コミュニティーについて</p></li>
<li>ICT トラブルシューティングコンテスト</li>
<li>ネットワーク講座</li>
<li>OITLT</li>
<li>東京に負けない魅力的なコミュニティーとイベントを作りたい</li>
<li>関西を盛り上げたい</li>
<li><p>「とある工大生の死活日記」で検索</p></li>
<li><p>山形で OSC 開催したい！</p></li>
<li><p>OSC サミットと  11/26(日) OSC 広島のご紹介</p></li>
<li><p>IT 企業の裏側を知りたい！ アンケート調査</p></li>
<li>会場でアンケートをとっていたらしく、その結果発表でした。</li>
</ul>

]]></content>
  </entry>
  
</feed>
