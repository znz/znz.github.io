<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: event | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/event/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-09-28T23:00:31+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Developers Meetup #5 大阪会場に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-28-railsdm.html"/>
    <updated>2017-09-28T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/railsdm</id>
    <content type="html"><![CDATA[<p><a href="https://techplay.jp/event/631423">Rails Developers Meetup #5 大阪会場</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>前回と同じ場所なので、スムーズに到着することができました。</p>

<p>今回は、ストリーミングの問題なのか、聞き取りにくいことが多かったので、特に質疑応答はメモが取れていません。</p>

<h2>オープニング</h2>

<ul>
<li>会場の説明</li>
<li>ハッシュタグは <code>#railsdm</code></li>
<li>プログラムの紹介</li>
</ul>


<h2>Railsで日報共有アプリケーションをOSSとして開発している話</h2>

<ul>
<li><p><a href="https://speakerdeck.com/kami/railsderi-bao-gong-you-apurikesiyonwoosstositekai-fa-siteiruhua">https://speakerdeck.com/kami/railsderi-bao-gong-you-apurikesiyonwoosstositekai-fa-siteiruhua</a></p></li>
<li><p>Rails で SPA の事例</p></li>
<li>Repost という日報共有アプリケーション <a href="https://github.com/kami-zh/repost">https://github.com/kami-zh/repost</a></li>
<li>Slack 連携部分を例に説明</li>
<li>View → Action → API → Reducer → View</li>
<li><p>Mastodon の app/javascript や package.json も参考になる</p></li>
<li><p>Rails 5.1 での機能をどう使ったか</p></li>
<li>webpacker</li>
<li>rails new するときに &ndash;webpack=react をつける</li>
<li>必要に応じて yarn add</li>
<li>開発時は bin/webpack-dev-server</li>
<li>webpacker 3 系は多くの設定がライブラリ側に吸収されてアプリケーション側はシンプルにできる</li>
<li><code>javascript_pack_tag</code></li>
<li>Rails 5.1 から yarn をサポート</li>
<li>yarn は install / add / remove ぐらいを知っておけば良い</li>
<li><code>ActionDispatch::SystemTestCase</code></li>
<li>トランザクション管理をしてくれる</li>
<li><p>参考: <code>Minitest::Retry</code> がちょっと不安定なテストに便利 <a href="https://github.com/y-yagi/minitest-retry">https://github.com/y-yagi/minitest-retry</a></p></li>
<li><p>工夫したこと</p></li>
<li>ユニットテストと E2E テストをしっかり書いた</li>
<li>Sprockets は削除した</li>
<li>セットアップを楽にする: bin/setup, bin/update をメンテナンスする</li>
<li>モーダルは慎重に導入する</li>
<li><a href="https://github.com/rails/rails/pull/30614">Install JavaScript dependencies on bin/update</a></li>
<li><p>Rails の資産を活用する: Turbolinks や FormHelper など</p></li>
<li><p>余談</p></li>
<li><p>知識欲求駆動開発</p></li>
<li><p>質疑応答</p></li>
<li>webpack-dev-server との同時起動に foreman は使っていない</li>
<li>react は使ってよかった感じ</li>
<li>react, vue, angular などから react を選んだ理由は? → 使ってみたかったから</li>
</ul>


<h2>パフォーマンス計測CIサービスを作って得た知見</h2>

<ul>
<li><p><a href="https://www.slideshare.net/zaruhiroyukisakuraba/ci-80250430">https://www.slideshare.net/zaruhiroyukisakuraba/ci-80250430</a></p></li>
<li><p>個人で開発しているパフォーマンス計測をする CI サービス</p></li>
<li><p>現在は Rails のみサポート、プライベートベータ</p></li>
<li><p>OAuth Apps と GitHub Apps の違い</p></li>
<li>OAuth Apps (従来のもの) ユーザーに対してインストール</li>
<li>GitHub Apps はリポジトリに対してインストール、マーケットプレイスに出せる</li>
<li>コメントもユーザーとしてか、独自権限にできるかの違いがある</li>
<li><p>マーケットプレイスに出す条件はちょっと厳しい (250人以上にインストールされていることとか)</p></li>
<li><p>GitHub Apps を作るのは簡単</p></li>
<li>アクセストークンと API</li>
<li>JWT の expire に注意: 10分や8分だとうまくいかないことがあったので5分にした</li>
<li>取得できるユーザー情報は限定的</li>
<li>GitHub Apps の API は少しずつ解放されている</li>
<li><p>GitHub Enterprise ではまだ使えないかも</p></li>
<li><p>GitHub Apps で気をつけるところ</p></li>
<li>Webhook を取りこぼすとデータロスト</li>
<li>パーミッションの変更はなるべくしない: ユーザーに承認してもらう必要があるがわかりにくい</li>
<li>GitHub Apps のインストールの導線: インストール後がわかりにくいらしい</li>
<li><p>ローカルで webhook を受け取る方法: ngrok は無料だと起動のたびにホスト名が変わるので面倒、ポートフォワーディングをしている</p></li>
<li><p>Docker in Docker</p></li>
<li>privileged オプションが必要</li>
<li>良い点: 階層構造なので管理しやすい</li>
<li>悪い点: パフォーマンス, privileged オプションで怖い, ボリュームが残ってしまう</li>
<li><p>そもそも製作者自身があまり推奨していない</p></li>
<li><p><code>/var/lib/docker.sock</code> を共有</p></li>
<li>良い点: シンプル, ビルドキャッシュも簡単</li>
<li>悪い点: 他のコンテナが丸見え</li>
<li><p>内部利用限定なら良いかも</p></li>
<li><p>オーケストレーション</p></li>
<li>GKE + k8s</li>
<li><p>小規模/シンプルなら Heroku おすすめ</p></li>
<li><p>CI, 計測の仕方</p></li>
<li>CI サービスを作るのに使った小技</li>
<li>resources をちゃんと指定しないとパフォーマンスがぶれる</li>
<li><p>Container Builder のローカル開発環境がある <a href="https://github.com/GoogleCloudPlatform/container-builder-local">https://github.com/GoogleCloudPlatform/container-builder-local</a></p></li>
<li><p>個人開発プロジェクトについて</p></li>
<li>毎日やるのが大事</li>
<li>コードを捨てるのを躊躇しない</li>
<li>何のためにやるのか</li>
<li>途中経過も公開する</li>
<li><p>やらないことを決める</p></li>
<li><p>質疑応答</p></li>
<li>個人開発でも k8s を使っている? → 使っている</li>
<li>heroku ではなく k8s を使う理由 → docker のため</li>
<li>(メモ取れず)</li>
</ul>


<h2>休憩</h2>

<h2>マイクロサービスにおける非同期アーキテクチャ</h2>

<ul>
<li><p><a href="https://www.slideshare.net/ota42y/ss-80254350">https://www.slideshare.net/ota42y/ss-80254350</a></p></li>
<li><p>microservice</p></li>
<li>外から見たときは一つのアプリ</li>
<li>内部的にはドメインごとに別々のサーバー</li>
<li>API で連携</li>
<li>非同期もある</li>
<li><p>巨大かつ複雑になりやすい → 知見</p></li>
<li><p>非同期処理</p></li>
<li>今回は特に Job Queue の話</li>
<li><p>ActiveJob は Rails 標準なので一般的な構成のはず</p></li>
<li><p>歴史</p></li>
<li>牧歌的時代: なんでも delayed_job に突っ込む</li>
<li>RDB に保存する</li>
<li>delay メソッドを挟むだけ</li>
<li>障害発生: job がどんどん溜まっていった</li>
<li>delayed_job では job の同時実行を防ぐ機構がある</li>
<li>index がきかない where 句の絞り込み＆ソート → テーブルロック</li>
<li>処理速度 ＜ 増加速度 になって打つ手がなくなる</li>
<li>大移行時代</li>
<li>非同期処理の整理</li>
<li>巨大な処理はクリティカルかどうかで場合分け</li>
<li>重要度に応じて処理分け</li>
<li>クリティカルではないものは別バックエンドへ移動して delayed_job の job 数を減らした</li>
<li>移行先として sidekiq, resque から sidekiq を選んだ</li>
<li><p>クリティカルではないものは delayed_job から ActiveJob(+sidekiq) に書き換え</p></li>
<li><p>複数サービスへの連携</p></li>
<li>結合度が高かった</li>
<li>イベント駆動アーキテクチャ</li>
<li>Event の送受信に変更</li>
<li>具体的には AWS の SNS (Simple Notification Service) と SQS (Simple Queue Service) を利用</li>
<li>送信側が SNS で受信側のサービスごとに SQS</li>
<li>癖があるので注意: 複数回や並列実行を考慮して、べき等である必要がある、など</li>
<li>統一フォーマットが必要</li>
<li>移行するなら、送信側・受信側両方移行する必要がある</li>
<li><p>楽にするための gem を作った <a href="https://github.com/ota42y/rising_dragon">https://github.com/ota42y/rising_dragon</a></p></li>
<li><p>質疑応答</p></li>
<li>Queue をどうわけているか? → ほとんどわけていない</li>
</ul>


<h2>5000兆人欲しい！ 優秀なRailsエンジニアを採用するための3つ(仮)の方法</h2>

<ul>
<li>日本の Rails エンジニアの数は推定10万人ぐらい?</li>
<li>世界中の人の数 74億人</li>
<li><code>'74億人' &gt; '5000兆人' #=&gt; true</code></li>
<li>制限を外す</li>
<li>Rails 経験者にこだわらない</li>
<li>日本人にこだわらない</li>
<li>エンジニアにこだわらない</li>
</ul>


<h2>Railsを6年間やってきたぼくが最近Railsでハマったこと</h2>

<ul>
<li><a href="https://speakerdeck.com/kazumax1218/railswo6nian-jian-yatutekitabokugazui-jin-railsdehamatutakoto">https://speakerdeck.com/kazumax1218/railswo6nian-jian-yatutekitabokugazui-jin-railsdehamatutakoto</a></li>
<li>1: カラム追加時に index がはられない</li>
<li><code>add_column</code> には index オプションがなかった</li>
<li>対策: <code>add_index</code> を使う</li>
<li>2: try</li>
<li>メソッドがない場合 (typo など) も例外を出さずに nil を返す</li>
<li>対策: <code>try!</code> を使うか ruby 2.3 以降ならぼっち演算子 <code>&amp;.</code> を使う</li>
<li>3: fragment cache</li>
<li>共通のパーシャルを変更してもキャッシュがクリアされない</li>
<li>template が見つからないのでダイジェストが計算できていなかった</li>
<li>対策: パスを省略しない</li>
<li>パーシャルのパスが動的な場合も注意</li>
<li>プチ情報</li>
<li>Rails 5 からは <code>rails dev:cache</code> で簡単にキャッシュの ON/OFF を切り替えられるようになった</li>
<li>fragment cache のログを出す設定がある</li>
<li>4: 新規作成画面に戻ったら作成したはずのレコードが消えた</li>
<li>原因: <code>has_one</code> に <code>dependent: :destroy</code> がついていると <code>build_xxx</code> 時にレコードが削除される</li>
<li>対策: new アクションで <code>build_xxx</code> を使わない</li>
</ul>


<h2>次回予告</h2>

<ul>
<li>次回 10/19</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developers.IO 2017 WORLD in 大阪 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-23-cmdevio2017.html"/>
    <updated>2017-09-23T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/cmdevio2017</id>
    <content type="html"><![CDATA[<p><a href="http://dev.classmethod.jp/news/developers-io-2017-world-osaka/">Developers.IO 2017 WORLD in 大阪</a> に参加したので、そのメモです。
主に OAuth の話が気になったので行ってみたのですが、他の話もおもしろかったです。</p>

<p>ハッシュタグは <code>#cmdevio2017</code> でした。</p>

<!--more-->


<h2>会場</h2>

<p>スカイビルのタワーウエストは初めて入った気がします。(イーストの方は映画館があるので、そこまでは行ったことがありました。)</p>

<h2>ごあいさつと会場の説明</h2>

<p>スカイビルの場所がわかりにくくて迷った話とか、 Developers.IO の東京で複数トラックでやっていたもののうち、アンケートで評判が良かったものを各地を回ってやっている話とかがありました。</p>

<h2>クラメソの請求を支える技術（サーバーレス編）</h2>

<ul>
<li>会場アンケート: 20代, 30代, 40代で3分の1ずつぐらい?</li>
<li>自己紹介<!-- @czkuk --></li>
<li>刷新の経緯</li>
<li>請求書が毎月300枚になってつらい</li>
<li>請求システムを刷新した話</li>
<li>新システムのポイント</li>
<li>データの一元管理</li>
<li>API, OAuth 2.0</li>
<li>Python simple_salesforce</li>
<li>MFクラウド請求で CSV フォーマットが変更されるということがあったので、ベータが提供されていた API に乗り換えた</li>
<li>OAuth 2.0 のクライアントとしての利用は簡単</li>
<li>Problem: Salesforce 24時間API呼び出し上限</li>
<li>更新がわからないので、全部のデータに対して API を呼び出したら、あっという間に上限に</li>
<li>Solved: S3 ETag</li>
<li>登録できた JSON ファイルは S3 にキャッシュ</li>
<li>変更のみを登録できるようになって解決</li>
<li>とある運用担当者の訴え: 「絶対にサーバーは管理したくないでござる」</li>
<li>Problem: 処理に時間がかる</li>
<li>Lambda は5分で強制タイムアウトがある</li>
<li>Solved: SQS worker Queue</li>
<li>Lambda ログ監視</li>
<li>CloudWatch Logs の Lambda によるログ監視</li>
<li>ログレベルごとに通知先を変えられる log2sns2.yml がオススメ</li>
<li>成功したら請求担当のみ、失敗したら開発者にもとか</li>
<li>AWS 月額利用費 $17</li>
<li>Salesforce について</li>
<li>請求締め部分は外製</li>
<li>visualforce, apex で画面を内製</li>
<li>カバレッジが高くないとリリースできないとか、よくできている</li>
<li>Trailhead で自習</li>
<li>外製? 内製?</li>
<li>仕様が固めやすい部分は外製</li>
<li>画面などトライアンドエラー部分は内製</li>
<li>過度なカスタマイズはしない</li>
<li>業務をパッケージにあわせる</li>
<li>刷新後</li>
<li>半月かかってた請求業務が数時間に</li>
<li>営業への契約確認 → ほぼゼロ</li>
<li>「しがないOL」がJavaプログラマーに</li>
<li>請求システムの話終了</li>
<li>昔話</li>
<li>糊付けエンジニア</li>
<li>「なんでもできる人なんていない」</li>
<li>同じシステムに長く関わっている人は少ない</li>
<li>1年ぐらいが多くて、5年以上は少ない</li>
<li>40歳の生存戦略</li>
<li>半径5メートルの人を幸せにするのが良い</li>
</ul>


<h2>基礎からのOAuth2.0</h2>

<ul>
<li><a href="http://bit.ly/cmdevio2017-oauth2">http://bit.ly/cmdevio2017-oauth2</a></li>
<li>自己紹介<!-- @daisuke_m --></li>
<li>OAuth の動機: 認証、属性取得、委譲</li>
<li>OAuth は認証の委譲プロトコルではなく、認可の委譲プロトコル</li>
<li>認証と認可の基礎知識</li>
<li>認証 (Authentication) : 通信相手が誰か、確認すること。</li>
<li>認可 (Authorization) : リクエストが許可されるかどうかを決めること。(ポリシー定義段階)</li>
<li>厳密には「ポリシー施行段階」は別だが、あまり区別しなくても良い</li>
<li>認証と認可は、本来、相互に独立した概念。</li>
<li>401 Unauthorized : 認証の失敗 『お前誰だよ』</li>
<li>RFC さえ混同しているが、本来は Unauthenticated が正しいのでは。</li>
<li>403 Forbidden : 認可の不足 『理解した。だが断る』</li>
<li>鍵 (key) と錠 (lock)</li>
<li>ユーザーには「鍵 (key)」を与えて、リソースには「錠 (lock)」をかける</li>
<li>認証の委譲 (OpenID Connect)</li>
<li>登場人物: End-User, Relying Party (RP), ID Provider (IdP)</li>
<li>RP=アプリ, ID Provider=TwitterとかFacebookとか</li>
<li>図解</li>
<li>ID Token</li>
<li>JWT (JSON Web Token) (じょっとと読むらしい)</li>
<li>ヘッダ、ペイロード、電子署名 (ID Provider の秘密鍵で署名)</li>
<li>Relying Party が ID Provider の公開鍵で検証</li>
<li>神は誰か? 問題</li>
<li>よくある Web+DBシステム: アプリケーション</li>
<li>API データソースになっても同様</li>
<li>OAuth においては神様はユーザー</li>
<li>だから OAuth は認可の委譲プロトコル</li>
<li>みなさんが OAuth を使いたくないであろう理由</li>
<li>ここから OAuth の話</li>
<li>OAuth 2.0 の登場人物 : Resource owner (RO), Client, Authorization server (AS), Resource server (RS)</li>
<li>例: RO=ユーザー, Client=togetter, ASとRS=twitter</li>
<li>図解</li>
<li>アクセストークン (AT) とは、リソースにかかった「錠」を開ける「鍵」</li>
<li>つまり、鍵に「誰?」を求めてはいけない。</li>
<li>では「OAuth認証」とは一体…?</li>
<li>認証したいだけなのに、渡す権限が大きすぎて怖い。</li>
<li>これを認証の根拠としてよい、という裏付けが弱い。</li>
<li>OAuth 2.0 が成し遂げたいこと (一部)</li>
<li>(リストはメモが取れなかったので公開されている資料参照)</li>
<li>Client が AT を得るフロー 4種</li>
<li>1: Client credentials grant</li>
<li>client id/secret を AT に引き換えるだけ</li>
<li>リソースオーナー不在</li>
<li>ユースケース: 古いスキームに適合。 Twitter の public timeline など。</li>
<li>2: Resource owner password grant</li>
<li>RO のユーザー名とパスワードを AT に引き換えるだけ</li>
<li>ユースケース: 公式クライアント向け</li>
<li>3: Implicit grant</li>
<li>AT がユーザーやブラウザーに見えてしまう</li>
<li>ユースケース: モバイルや JS アプリケーションなど、エンドユーザーの支配下にあるクライアント向け</li>
<li>4: Authorization code grant</li>
<li>フロントチャネル・バックチャネル</li>
<li>3 の場合は AT がフロントチャネルを通るので User Agent に漏れる</li>
<li>4 の場合は AT をフロントチャネルに流さない</li>
<li>最悪 AC は漏れても、単独であればリスクは低い</li>
<li>AC のライフタイムは短い</li>
<li>AC → AT の引き換えには client id/secret が必要</li>
<li>ユースケース: サーバーサイド Web アプリケーション向け</li>
<li>OAuth 2.0 が規定しないこと</li>
<li>1: Resource owner とのインタラクション様式</li>
<li>2: Resource owner の権限及びその確認</li>
<li>よく考えて設計しないと、 User が持っていない権限を Client に与えてしまう</li>
<li>OAuth における「スコープ」とは</li>
<li>User が委譲に同意した権限の種類</li>
<li>Client が行使できる権限の種類ではない</li>
<li>Client が AT を使って行使できる権限 = User が持っている権限と Client が持つ AT のスコープの共通部分</li>
<li>3: アクセストークンに関する諸々</li>
<li>3a: AuthZ server における AT の生成方法</li>
<li>現実的にはランダムか JWT の二択</li>
<li>3b: Client における RS への AT の送り方</li>
<li>3c: Resource server における AT の確認方法</li>
<li>ランダムなら AuthZ server にきくしかない</li>
<li>Sprint Security OAuth 2 独自実装</li>
<li>JWT トークンは revoke しづらい</li>
<li>まとめ</li>
<li>認証と認可の概念</li>
<li>アクセストークンの意味</li>
<li>認可コードの意味</li>
<li>スコープの意味</li>
</ul>


<h2>クラメソのWebサイトを支える技術</h2>

<ul>
<li>自己紹介<!-- @suzryo --></li>
<li>コーポレートサイト 2016年12月にリニューアル</li>
<li>静的ウェブサイトホスティング</li>
<li>AWS</li>
<li>S3: ファイル置き場</li>
<li>Amazon CloudFront: CDN</li>
<li>ACM: SSL の証明書管理</li>
<li>Amazon Route53 (ルートフィフティスリー): クラウドDNS</li>
<li>Amazon Route53 (ALIAS): A レコードと応答、ホスト名の省略 (ZoneApex) 設定可能</li>
<li>Amazon Route53 (ヘルスチェック)</li>
<li>Amazon Route53 (ヘルスチェック+DNSファイルオーバー利用例)</li>
<li>重み付けラウンドロビン (スポットインスタンス活用)</li>
<li>Amazon Route53 (GeoDNS利用例)</li>
<li>Route53ヘルスチェックとDatadog連携</li>
<li>AWSWAF</li>
<li>ステージングの表示制限にも利用</li>
<li>Amazon EC2 (CMS)</li>
<li>WordPress + staticpress</li>
<li>S3 に転送して公開</li>
<li>コーポレートサイト (動的ページ) は SaaS 利用</li>
<li>問い合わせフォーム : kintone + salesforce</li>
<li>サイト内検索: Google カスタム検索エンジン</li>
<li>ブログサイト <a href="http://dev.classmethod.jp/">http://dev.classmethod.jp/</a> 2011年7月1日公開</li>
<li>掲載記事数: 年間約3000件ペース (1日平均8.2件)</li>
<li>初期は EC2 スタンドアローン</li>
<li>Offload S3 導入: 画像データをS3、CloudFront で配信</li>
<li>RDS 導入: MySQL を RDS 化、DB 運用の省力化</li>
<li>ELB, Elasticbeanstalk 導入: ELB 配下で負荷分散、EB で管理改善</li>
<li>nginx 導入: ページキャッシュを追加</li>
<li>ApacheBench</li>
<li>Amazon Aurora 導入</li>
<li>拡張方針: キャッシュを多段化、クラウドの柔軟性を活用</li>
<li>アクセスログの解析</li>
<li>nginx → ltsv → fluentd → Amazon Kinesis Firehose → DB (アイコンでは何かわからず)</li>
<li>Athena</li>
<li>AWS WAF 連携 <a href="http://dev.classmethod.jp/cloud/aws/ids-with-kinesis-waf/">http://dev.classmethod.jp/cloud/aws/ids-with-kinesis-waf/</a></li>
<li>改善計画</li>
<li>評価システム: 執筆者評価, 記事のSNSシェア数</li>
<li>既存評価システム: ページ表示の度にSNS情報取得、再集計</li>
<li>新評価システム: 非同期に取得、S3 の集計済みデータを参照</li>
<li>AWS のマネージドサービス弄り倒してます</li>
<li>個々の詳細はブログにて</li>
<li>SaaS の紹介</li>
<li>Datadog</li>
<li>エラー率とか通知とか</li>
</ul>


<h2>Alexaで変わる開発、変わらない開発</h2>

<ul>
<li>Alexa の概要</li>
<li>Amazon Echo: スマートスピーカー, Alexa の機能を呼び出せる, 米英独など国外で展開中</li>
<li>Amazon Alexa: Amazon が提供する音声アシスタント, Echo という端末が呼び出しているサービス, 標準機能の他に、拡張機能を開発して呼び出せる</li>
<li>Alexa Custom Skill: アプリのように、独自開発のスキルを呼び出せる, 自作エンドポイントを登録して審査に通ればOK</li>
<li>Alexa Voice Service: Alexa のフロント側の規格, アプリにも組み込める</li>
<li>アプリ例: Friendly Voice Assistant</li>
<li>Alexa スキルの開発</li>
<li>サンプル: <a href="https://github.com/alexa/skill-sample-nodejs-highlowgame">https://github.com/alexa/skill-sample-nodejs-highlowgame</a></li>
<li>amazon.com でログイン → Alexa → Alexa Skill Kit で作成</li>
<li>デモ</li>
<li>使うサンプルを <a href="https://github.com/alexa/skill-sample-nodejs-fact">https://github.com/alexa/skill-sample-nodejs-fact</a> に変更</li>
<li>開発者コンソールで文字列でのテスト</li>
<li>APP ID の指定が <code>""</code> で括られていないように見えたけど、一瞬だったので見落としかなと思っていたら、エラーになったので、指摘してみたらやっぱりそこだったようでした。</li>
<li>echosim.io で音声でのテスト</li>
<li>デモ終了</li>
<li>スキルの構成要素: wake word, launch, invocation name, utterance, slot value</li>
<li>画像は <a href="https://developer.amazon.com/designing-for-voice/what-users-say/">https://developer.amazon.com/designing-for-voice/what-users-say/</a> 参照</li>
<li>Utterance をユーザが言うと Intent がプログラムに渡ってくる</li>
<li><a href="https://github.com/alexa/alexa-skills-kit-sdk-for-nodejs">https://github.com/alexa/alexa-skills-kit-sdk-for-nodejs</a></li>
<li>普通の Lambda の開発では webpack は使わないが、Alexa では使った方が良さそう</li>
<li>初回起動時間: 約5秒 → 約2秒</li>
<li>5秒は不安になる</li>
<li>ルーティング機能がプラットフォーム側</li>
<li>Lambda はステートレスだが、Skill が State を提供していて、会話を実現している</li>
<li>視覚表現はある?</li>
<li>Echo Show にはカードというのがある</li>
<li>HTML っぽいのは何?</li>
<li>SSML</li>
</ul>


<h2>感想</h2>

<p>知り合いが一人もいない勉強会に参加したのは久しぶりのような気がしました。</p>

<p>鍵と錠のたとえとか、 OAuth 2.0 が成し遂げたいことを元に複数フローで何ができていて、何ができていないのかなど、非常にわかりやすくて良かったです。</p>

<p>Salesforce も連携する何かを作るかもしれないので、 Trailhead というものの存在を知れたのは良かったです。</p>

<p>自社サイトを例にして Amazon のサービスの運用例を知れたのもおもしろかったです。</p>

<p>Alexa はそういうものもあるのか、とか、会話にするのは技術的な難しさよりもただ大変そう、という感じでおもしろかったです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2017 の3日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-20-rubykaigi2017.html"/>
    <updated>2017-09-20T09:59:32+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi2017</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2017">RubyKaigi 2017</a> の3日目に参加したので、そのメモです。</p>

<!--more-->


<h2>朝</h2>

<p>時間があれば広島平和記念資料館に行こうかと思っていましたが、宿を出るのが遅くなってしまって時間がなかったので行けませんでした。</p>

<h2>Compacting GC in MRI</h2>

<ul>
<li>自己紹介</li>
<li>草生える の英語解説で有名になった</li>
<li>Copy on Write Optimization</li>
<li><code>require 'objspace'</code> と <code>ObjectSpace.memsize_of(obj)</code> で CoW の確認</li>
<li>fork と CoW</li>
<li>CoW Page Fault</li>
<li>Unicorn での話</li>
<li>Page Fault を減らす方法</li>
<li>共有メモリの変更が原因</li>
<li>Garbage Collector の影響</li>
<li>Object Allocation</li>
<li>空きがあるとオブジェクトのサイズは OS のページより小さいので、1オブジェクトの生成でもページ全体のコピーが発生するのでコンパクションする</li>
<li>Two Finger Compaction (2本指コンパクション) というアルゴリズムを選んだ</li>
<li>欠点: 遅い、オブジェクトがランダムな場所に移動する</li>
<li>利点: 簡単!</li>
<li>アルゴリズム: オブジェクトの移動をして、参照の更新</li>
<li>Free Pointer と Scan Pointer で左右からみていってオブジェクトを左に空きを右に固まるように交換していく</li>
<li>オブジェクトを順番に見ていって参照を更新</li>
<li>移動先番号にしていたところを空きに変更</li>
<li>unicorn の fork 前に rails の読み込みと GC.start をするようにした</li>
<li>gc.c への変更の詳細解説</li>
<li>C 実装されている中にオブジェクトへのポインターを持っていると更新できないので、移動するとクラッシュする</li>
<li>そのため、そういうオブジェクトは移動しないようにピン留めしておく</li>
<li><code>hash_key(オブジェクト)</code> がメモリアドレスなので、移動できない</li>
<li>Dual References</li>
<li>C と Ruby の両方から参照されている場合も移動するとクラッシュする</li>
<li>グローバル変数もヒューリスティックスにピン留めする</li>
<li>文字列リテラル</li>
<li>リテラルを移動すると bytecode を変更する必要があるが、難しいのでまだ対応していない</li>
<li>結局何も移動できない?</li>
<li>ほとんどの問題は解決できる</li>
<li>現在使用中の Rails のコードでも 46% のオブジェクトは移動可能</li>
<li>コンパクション前後のグラフ</li>
<li>メモリ検査ツール</li>
<li><code>ObjectSpace.dump_all</code> : JSON でファイルに書き出せる</li>
<li>ヒープの断片化のグラフ</li>
<li><code>/proc/${PID}/smaps</code> はスキップ</li>
<li>まとめ</li>
<li>小さいプログラムにはあまり節約にならないのでプロダクションでテスト中</li>
<li>コンパクションは不可能だと思っていたが、その質問に答えることができなかったので、もっと早く試せばよかったと思った</li>
<li>不可能と思っても可能かもしれない</li>
</ul>


<h2>Irb 20th anniversary memorial session: Reish and Irb2</h2>

<ul>
<li>勝手に20周年記念講演</li>
<li>ちょっと irb の話と Reish の話をする</li>
<li>Ruby 考古学の復習と追加の話</li>
<li>irb の昔の名前の rbc の由来は bc コマンド</li>
<li>他に perl -de 0 や sample/eval.rb が開発のきっかけ</li>
<li>REPL (Read-Eval-Print-Loop)</li>
<li>Lisp の <code>(loop (print (eval (read))))</code></li>
<li>Ruby 的には <code>loop{p eval gets}</code></li>
<li>複雑な構文の言語では初ではないか</li>
<li>REPL の用途</li>
<li>Ruby の振る舞いを確かめる</li>
<li>ライブラリなどのデバッグ用コンソール</li>
<li>情報科学入門 Rubyを使って学ぶ という本では irb を使っているらしい</li>
<li>しかし irb 上で生活している人はいなさそう</li>
<li>そこで Reish</li>
<li>shell の上でも ruby 的な生活を満喫するため</li>
<li>Enumerable, Iterator (たぶん今ではブロックと呼ばれるもの全般をさしてそう), OO, ほか</li>
<li>何がシェルっぽいか: comma なし <code>""</code> とかなくても良い文字列ベース</li>
<li>Reish のコードは Ruby に変換して実行</li>
<li>パイプラインは lazy enumerator で繋がっている</li>
<li>ブロックも使えるが do を予約語にはしにくかったので <code>ls -l --do</code> という感じになっている (<code>{}</code> は普通)</li>
<li>デモ</li>
<li><a href="https://github.com/keiju/reish">https://github.com/keiju/reish</a></li>
<li>job コントロールもある</li>
<li>job ごとに Thread を起動している</li>
<li>補完</li>
<li>irb 再考</li>
<li>長い間開発は停止していたが Reish の開発で irb の方も構想が見えてきた</li>
<li>irb の lexer は使っている gem があるので、大幅に変更は難しそう</li>
<li>Reish は完全なパーサーを持っていて、高機能なことができている</li>
<li>irb2 = reirb ?</li>
<li>zsh の <code>ls --a[TAB]</code> で出てくるヘルプのようなことができるとうれしそう</li>
<li>zsh は 複数行の編集機能 (zle) があったり</li>
<li>Reish 用のマルチラインエディタ Reidline を開発中</li>
<li>Q(次の時間の発表者のaycabtaさん) メモ取れず</li>
</ul>


<h2>昼休み</h2>

<p>途中の時間でセッションを諦めて見にいくのは難しいかなと思って、コンビニで軽く食事をして、広島平和記念資料館に行ってきました。(Twitter で RubyKaigi 2017 の名札を見せると無料で入れるという情報があったため)</p>

<p>本館はリニューアル工事中で、東館だけが開いているということのようでした。</p>

<p>小学校の修学旅行できた覚えがあるのですが、最初の上の階をぐるっと見て回る常設展示は最近の情報もあって、昔来た時には絶対なかったものだなあと思いつつ見ていました。</p>

<p>最後に階段を降りた後にあった企画展示室のところは、昔トラウマになった白黒写真などが少しありました。もらったパンフレットには、閉館中の本館で展示していた資料などを展示していると書いてあるので、本館が復活すれば、昔見たようなものがたくさんあるのではないかと思いました。</p>

<h2>Ruby Parser In IRB 20th Anniversary&hellip;Now Let Time Resume</h2>

<ul>
<li><a href="https://bugs.ruby-lang.org/issues/11389">https://bugs.ruby-lang.org/issues/11389</a></li>
<li>asakusa.rb とか</li>
<li>IRB: 1997, RDoc: 2003</li>
<li>RDoc は IRB の lexical analyser を使っていた</li>
<li>legacy になってしまってメンテナンスコストが増大していた</li>
<li>private def foo のような書き方の対応とか</li>
<li>IRB: 1997, RDoc: 2003, Ripper: 2004</li>
<li>parse.y, IRB, RDoc の3個の Ruby パーサーが重複して含まれている</li>
<li>2016年12月から作業開始</li>
<li>RDoc がクラッシュしたので直した</li>
<li>古い実装と書き直した実装で出力を比べて見たら、 RDoc がバグっていたので古い lexer で新しいものに対応した</li>
<li>最終的にマージされた</li>
<li>後置 if と普通の if の区別などに <code>lex_state</code> が重要</li>
<li><a href="https://github.com/ruby/rdoc/pull/512">https://github.com/ruby/rdoc/pull/512</a></li>
<li>RDoc 6 beta</li>
<li>質疑応答 (翻訳は zzak)</li>
<li>Q(ujm): <code>lex_state</code> を古い ripper では pure ruby で実装したのはどうやったみたいな質問っぽい → メモ取れず</li>
<li>Q(かねこさん): ripper は使っているバージョンの ruby で動くので、古い ruby バージョンのドキュメントを処理すると問題が起きることもあるのでは? → 壊れることもあるかもしれないが、大丈夫なのではないかという感じ(?)</li>
<li>Q(tenderlove): ripper はコード内のコメントを保存していますか? → AST の段階ではコメントは含まれないが、tokenize しかしていないので、開始、中身の謎の文字列、終端のようになって、中が何を意味するかには踏み込まないので、情報が消えたりはしない。</li>
<li>Q(ujm): RDoc は既存のものと互換性があるように ripper に置き換えたが次は何に挑戦する予定? → Ruby コードの情報をとるライブラリ、 irb の TAB キーでの補完でドキュメント (RDoc) も出るようにしたい</li>
<li>Q: irb のパーサーをどうにかする予定は? → nobu が ripper に置き換えようとしたが諦めた。多分できそうだが、大変そう。メソッドドキュメントの表示をしたい。</li>
<li>nobu の irb は syntax highlight がついていた。</li>
<li>syntax highlight もやりたい。</li>
<li>Q: Cのファイルのドキュメントは? → 今回の変更とは無関係。</li>
<li>C extension のドキュメントの方も必要に応じてみた方が良いのかもしれないが、まだ見ていない。</li>
<li>Q(ujm): 6ページあった修正点の中からピックアップするなら? → legacy な lexer で、新しい ruby syntax のサポートが大変だった</li>
<li>テストが壊れた</li>
<li>Q: 聞き取れず → 答えられない</li>
<li>Q: 1日どれくらいやっている? → 1ヶ月ぐらい、1日16時間?</li>
</ul>


<h2>一回休み</h2>

<p>セッションは諦めて休憩していました。</p>

<h2>Writing Lint for Ruby</h2>

<ul>
<li>SideCI</li>
<li>Lint ツール: RuboCop, Reek, Brakeman, Querly, &hellip;</li>
<li>Rules of Lint, Lint tools をかけるようになることがこのプレゼンの目標</li>
<li>lint tool があればより安全にプログラムが作れるようになる</li>
<li>Lint とは何か?</li>
<li>もともと C 言語用のツールの名前だったが、今ではいろんな言語にある</li>
<li>RuboCop の例を紹介</li>
<li><code>if 10 &lt; x &lt; 20</code> は実行するとエラー</li>
<li><code>foo bar { body }</code> や <code>x *y</code> は曖昧</li>
<li>そういうコードをチェックする</li>
<li>どう動くか?</li>
<li>AST (Abstract Syntax Tree) で扱う</li>
<li>parser gem を使って AST に変換している</li>
<li>parser gem の AST の node は type と children を持つ</li>
<li>行、桁、ソースなどのメタデータも持っている</li>
<li>他のパーサー</li>
<li>Ripper は標準で含まれているが、パースで想定するバージョンと実行する ruby のバージョンが同じになってしまう</li>
<li>ruby 2.4 で ruby 2.0.0 の lint ができない</li>
<li>ruby_parser は使ったことがないが parser gem と似たような感じらしい</li>
<li>Traverser: Depth-first search をして node ごとに <code>on_send</code> などの <code>on_#{node.type}</code> を呼び出す</li>
<li>if の条件に Integer リテラルのみを直接書いた場合に警告を出す例</li>
<li>Lint の限界 (Ruby の場合)</li>
<li>ローカル変数はただの変数</li>
<li><code>num = 1; if num; something; end</code> のようなコードは対象外</li>
<li>不可能ではないが複雑になる: たとえば Brakeman では追跡している</li>
<li>メソッドの定義やクラスや定数が正確にはわからない</li>
<li><code>sprintf('%s, %s', str)</code> は警告されるが <code>sprintf</code> が再定義されていると意味がない可能性があるが、そんなことはしないだろうと想定して動いている</li>
<li>動的なものは Lint より Test の方が向いている</li>
<li>Lint は AST がわかる</li>
<li>Lint は実行せずに解析できる</li>
<li>トレードオフがある</li>
<li>RuboCop に cop (ルール) を追加する</li>
<li>汎用的なものはヘルパーメソッドがあるので書きやすい: <code>if 1 ; end</code>, <code>ruby -cw</code> のようなもの</li>
<li>デモ: <code>rake new_cop[Lint/LitInCond]</code></li>
<li>特定のフレームワークに対して追加したい場合</li>
<li>RuboCop Plugin としてかける</li>
<li>例: backus/rubocop-rspec</li>
<li>1から作る場合</li>
<li>たとえば Lint + Git Diff, Ruby + YAML 用など</li>
<li>新しく作った方が作りやすい</li>
<li>質疑応答</li>
<li>Q: sprintf の再定義のような <code>Kernel</code> に再定義しているのを検出する cop は? → ない。ある程度は作れそう。本体には入りそうにない。</li>
<li>Q: デフォルト false では? → デフォルト false のものはメンテされないという現実があるので入れたくない。</li>
<li>Q(mame): RuboCop のゴールは? <code>10 &lt; x &lt; 20</code> のような初心者が陥りがちなものだけではなく、コーディングスタイルを押し付けられる感じがある? → 二面性がある。スタイルチェッカーと Lint としての側面がある。どっちも増えそう。</li>
<li>アップデートが辛い問題はツールを作っている。Style 系をオフにするとか。</li>
<li>Q: 汎用的なもののようにみえるが、プロジェクト固有のものはどうすれば? → 自社用のプラグインを作る or soutaro さんが作っている YAML でかくものがあるのでそれを使う のが良いのではないか</li>
<li>Q: カスタムコップを作りたい場合のドキュメントがなさそうな理由は? → 現状カスタムコップ、プラグインを作る仕組みが整備されていない。issue が止まったままなので頑張りたい。</li>
<li>Q: <code>new_cop</code> タスクは stable? → 本体に入っているので大丈夫だが、将来的に変更される可能性はあるかも。</li>
<li>Q: Rails は本体に config が入っているが? → 現状では特にロードマップはない。個人的には rails 関連は外に切り出したい。</li>
<li>Q: 一部は <code>ruby -cw</code> にあった方が良いのでは? → 本体に持っていく動きは今のところない。<code>ruby -cw</code> とかぶっているものもある。パフォーマンス的にできるのかというものもある。</li>
<li>Q: メモ取れず → ローカル変数をトレースするのはやりたいが、良い方法を思いついていないので、手がついていない。</li>
<li>Q: 速度が遅いのが気になっている。 parser gem が遅いのではないか。バージョンをわけたいという希望はないので ripper で高速化できないか? → ライブラリの CI で困りそう。インターフェースが違うので簡単に移行できない。</li>
<li>Q(znz): feature request の issue を書いたことがあるが、request だけだと難しい? → できるだけ実装するか、無理なら無理と返信したいが、たまっていてなかなか手が回っていない。</li>
</ul>


<h2>How to write synchronization mechanisms for Fiber</h2>

<ul>
<li>dRuby 本まだ買えます</li>
<li>Web 版もあります</li>
<li>Process - Thread - Fiber</li>
<li>80s はプロセスへの憧れがあった</li>
<li>90s のノンプリエンティブな協調型マルチタスクって Fiber じゃん?</li>
<li>実際のシステムは、プロセスだけ隔離しても結局はダメだった</li>
<li>ほかのプロセスとどうにかして共有が必要だった</li>
<li>IPC はめんどくさい</li>
<li>説明や使うのがめんどくさい</li>
<li>Thread: 多くの人にはプロセスの方がいいと思う</li>
<li>ほかのスレッドのメモリを触らないようにものすごく気をつける必要がある</li>
<li>Thread を使うには OS よりうまく扱えるという傲慢さが必要</li>
<li>Fiber: ほとんどの人には Thread の方がいいと思う</li>
<li>Fiber を使うには Ruby よりコンテキストスイッチをうまく扱えるという傲慢さが必要</li>
<li>Fiber → 自動的にスイッチしてよ → Thread → メモリを自動的に保護してよ → Process</li>
<li>Fiber を使ったフレームワークがすごいらしい</li>
<li>Fiber を使うプログラムを自分でも作って見たいと思った</li>
<li>Thread よりも難しいと思ったら、その通りだったので共有したい</li>
<li>Fibonacci の例</li>
<li>ループで書くと簡単</li>
<li>Fiber で書く例 (初日であったような感じ)</li>
<li><code>Fiber.new</code>, <code>Fiber#resume</code>, <code>Fiber.yield</code></li>
<li>new しただけでは実行されない</li>
<li>resume で Fiber にコンテキストを移す</li>
<li>一度目は先頭へ</li>
<li>二度目以降は <code>Fiber.yield</code> したところへ</li>
<li>これは何度目の resume かな…</li>
<li>resume と yield の概念がとっつきにくい</li>
<li>Enumerator で書き直す</li>
<li>おすすめ</li>
<li>次のテーマは同期 (待ち合わせ)</li>
<li>Thread での Queue を介した協調の Fiber 版を書きたい</li>
<li>rendez-vous (Rdv) の実装</li>
<li>イディオム: とりあえず resume、行き詰まったら yield</li>
<li>Fiber.new してすぐに resume すると Thread.new のように使える</li>
<li>やれることがなくなったら yield して Fiber.current を覚えてもらう</li>
<li>実装例: push, pop</li>
<li>Fiber だと条件検査の排他制御が不要</li>
<li>Thread だと危険</li>
<li>動きの例</li>
<li>同期の条件検査に排他制御が入らないので、Fiber のつもりが Thread だったというのは危険なので、Auto Fiber のようなものより、Thread のつもりが Fiber だったの方が安全ではないか</li>
<li>Multiplexer: socket のある例</li>
<li><code>read_nonblock</code> を使う</li>
<li>ブロックしそうな時 (<code>IO::WaitReadable</code>) に yield してメインループに戻る</li>
<li>block-ish nonblock I/O</li>
<li>ライブラリを作った: <a href="https://github.com/seki/bartender">https://github.com/seki/bartender</a></li>
<li>実際のアプリケーション例</li>
<li>tiny_drb の抜粋</li>
<li>昔よく見たバグの話</li>
<li>デモは作って見たが、見てもよくわからなかったので、説明</li>
<li>Multiplexer のまとめ</li>
<li>Fiber 入門のまとめ: 難しいよね</li>
<li>Fiber は難しいところが面白い</li>
<li>全体が暗記できるぐらいのサイズだったので罠を避けられた</li>
<li>すみずみまでわかっていないとハマることがある</li>
<li>ハマる可能性があると覚えておけば大丈夫</li>
<li>例: twitter クライアントの gem が全部読んで String にしてから JSON.parse するのでハマったので、ストリーム対応の JSON.parse はあるのかな?</li>
<li>ハマりそう: RDBMS のドライバ</li>
<li>質疑応答</li>
<li>Q: 読み書きしようとして安直にするとブロックするが、読めるだけ読むのがあるが書く方は? → 書く方もかけるだけ書くというのがある</li>
<li>Q: gets とか使えなくて不便? → 聞き取れず</li>
<li>Q(cuzic): Fiber の方が良いユースケースは? → Enumerator が良い例</li>
<li>Q(cuzic): 外部イテレーターではなく agent のようなパフォーマンスがよくなるという例は? → ゲームのキャラクターを動かすような誰かがビートを刻むような例は良さそう。 I/O は向いてなさそう。 Auto Fiber や co-routine の例をみると良い例があるのかも。</li>
<li>Q(joker): Thread で書いた場合は GIL で1コアでしか動かないが、(聞き取れず)だと別実装だと複数コア使えるとかあるが、Auto Fiber とかだと使えるようになる? → Fiber は Thread の中で動くので無理ではないか</li>
<li>Q(joker): 外部イテレーターにするとか見せ方の変更はできるが、マルチコアでパフォーマンスの改善という用途ではない? → そう理解している</li>
<li>Q: Thread と Fiber は違うのになぜ Fiber という名前なのかという感じの質問っぽい → Windows でそういう名前だから</li>
</ul>


<h2>MEDLEY のスポンサーセッション</h2>

<ul>
<li>会場アンケート</li>
<li>知っている人? → 少ない</li>
<li>昨日呑んだくれて疲れている人? → それなり?</li>
<li>遠隔診療が実質解禁されたので CLINICS というアプリを作った</li>
<li>医療 x IT への挑戦</li>
</ul>


<h2>Towards Ruby 3x3 performance</h2>

<ul>
<li>Ruby 3 performance goal</li>
<li>RTL (register transfer language) insns</li>
<li>RTL insns と stack insns の比較</li>
<li>RTL insns の精製方法</li>
<li>RTL insns のオペランド</li>
<li>RTL complications</li>
<li>RTL insn combing and specialization</li>
<li>Speculative insn generation</li>
<li>RTL insn status and future work</li>
<li>Possible JIT approaches</li>
<li>Option 1: Writing own JIT from scratch</li>
<li>メンテナンスするのが大変</li>
<li>Option 2: Using widely used optimizing compilers</li>
<li>コンパイルが遅い</li>
<li>Option 3: Using existing JITs</li>
<li>License issues and patent minefield</li>
<li>Own or existing JITs vs GCC/LLVM based JITs</li>
<li>How to use GCC/LLVM for implementing JITs</li>
<li>MJIT: <strong>M</strong>RI JIT, <strong>M</strong>ethod JIT</li>
<li>Example</li>
<li>MJIT performance results</li>
<li>どれが何かわからないグラフ</li>
<li>途中からちゃんと下まで出てきた</li>
<li>Recommendations to use GCC/LLVM for a JIT</li>
<li>MJIT status and future directions</li>
<li>RTL と MJIT が MRI の一部になるかはわからないがこの方向性で頑張る</li>
<li>質疑応答</li>
<li>Q(tenderlove): (メモ取れず)</li>
<li>Q: inline 化の話っぽい</li>
<li>Q: メモリ使用量の話っぽい</li>
<li>Q(ujm): make check が通らない理由は? → 並列実行とか callcc とか GC が関わるものとか(?)</li>
<li>Q: モチベーションは? → (よくわからず)</li>
<li>Q(ko1): GCC でループが最適化が測地になる例があったが、再定義対応は? → (よくわからず)</li>
<li>matz のコメント</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>MINASWAN 乙</li>
<li>936枚チケットが売れた</li>
<li>Next: Sendai May 31 (Thu) - June 2 (Sat)</li>
</ul>


<h2>全体の感想</h2>

<p>とりとめもなく色々と。</p>

<p>Twitter で @takatayoshitake さんとかの情報提供が色々と便利でした。(特に最終日のロッカー情報)</p>

<p>Twitter のハッシュタグ <code>#rubykaigi</code> は流れが速いと全然追いきれないので、あとで togetter でみれるかなと思っていたら、今年は特になさそうで残念な思いをしました。
RubyKaigi 全体のハッシュタグも、部屋ごとのハッシュタグも入り口に書いてあっただけで、特にアナウンスはなかった気がするので、部屋ごとのハッシュタグはつけずに <code>#rubykaigi</code> だけのツイートを、その人がどの部屋に参加していたか識別してまとめに振り分ける、という判断をしつつ、まとめを作ってくれる人が必要そうな気がします。</p>

<p>台風が移動に影響したり、カープ優勝でセールがあったりなど、外部要因でもいろんなことがあったのが印象深かったです。</p>

<p>3トラックあったので、興味があったのに見に行けなかったものも多いので、あとでチェックしたいと思いました。</p>

<p>昼の弁当スポンサーがなかった代わりに、夜の懇親会が大量にあったのがよかったです。</p>

<p>LT の発表は通訳の人との打ち合わせがない分、気軽だった代わりに、ちゃんと時間で切られる LT が久しぶりだったので、非常に緊張しました。
そして、実際には練習より早口だったのか、予定よりたくさん喋っても時間が余ってしまうという感じになってしまいました。
ネタが多い分には、後でRuby関西で使うなりブログに書くなり、他の発表場所はあるので、今後機会があれば多めに用意して調整できるようにしてみたい、と思いました。
日本語での発表でも、発表資料は頑張って英語で書いておいたからか、<a href="https://twitter.com/drbrain/status/910069298789588998">英語での反応があった</a>のが嬉しかったです。
基本的に何か反応があると嬉しいものなので(承認欲求)、発表とかしないという人でも、積極的にいいねをしたり、スターをつけたりすると良いと思います。</p>

<p>開催の頭が連休だと、休みの部分を観光に、と思っても、期間中に出て来たオススメ情報を活用できないので、来年のように、後に休みが続く方が嬉しいと思いました。
今回の場合は、台風で日曜に観光は無理だったということがありましたが、広島平和記念資料館に無料で入れるという特典が、前日に知らずに行っていたら無駄になる、ということがおきたのではないかと思いました。</p>

<p>基本的に人を覚えるのが苦手なので、今回会った人で、次回忘れていたらすみません。</p>

<p>Workshop は気になったのと、普通の発表は後で録画をみることもできる、というので、できれば参加したかったのですが、 <a href="https://github.com/rubydata/rubykaigi2017">https://github.com/rubydata/rubykaigi2017</a> の事前準備をしようとしたら、前日に止まっていたホテルだと帯域制限らしき状態になってしまって、 <code>rake docker:pull</code> できなかったということもあって諦めました。
Afternoon Break の時間に重なっていた方も、 LT の前の接続確認をする必要があったので、諦めました。</p>

<p>LT の接続確認は、なぜか最大化したときの表示がリサイズ前の範囲しか表示されない、という現象がなおらず (以前は次のページに移動したり、一覧ページに移動したりすればなおっていた)、発表準備期間中に n0kada さんが rabbit の方に終了時に落ちる (正常終了ではなく SEGV 的な終わり方をする) のを報告していたので、同じ macOS っぽいとわかっていたので、どうしていたのかきいてみたら、 <code>rabbit -S 1920,1080 hoge.md</code> のように <code>-S</code> で画面サイズを指定して起動すれば良いと教えてもらって解決しました。ありがとうございました。</p>

<h2>まとめ</h2>

<p>色々と大変なこともありましたが、大きな問題もなく、無事終わって良い RubyKaigi でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2017 の2日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-19-rubykaigi2017.html"/>
    <updated>2017-09-19T09:42:14+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi2017</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2017">RubyKaigi 2017</a> の2日目に参加したので、そのメモです。</p>

<!--more-->


<h2>ドリコムさんのスポンサーセッション</h2>

<h2>The Many Faces of Module</h2>

<ul>
<li>島根との時差ボケで眠い</li>
<li>RubyKaigi は世界最大の Ruby カンファレンス</li>
<li>The best and brightest</li>
<li>matz が母国語で話をする (翻訳付き) のはここ (と RubyWorld Conference (技術よりではない) だけ)</li>
<li>Recent topics</li>
<li>amatsuda さんが発表内容のハードルを上げてくる</li>
<li>どこのカンファレンスでもコミュニティの主要な日本人をみかける</li>
<li>Performance, Concurrency, Static Types は他のセッションにお任せ</li>
<li>天才プログラマーではなく、才能ある言語デザイナーだと思っている</li>
<li>あまり評判のよくない言語も含めて例外なくすべてのプログラミング言語を愛している</li>
<li>&ldquo;matz に他言語に攻撃的であるので嫌い"と言われることがある</li>
<li>理由を聞いたことがある</li>
<li>いいところはいい、悪いところは悪いと言った時に Ruby の宣伝のように取られることがあるらしい</li>
<li>Python の ML に、という過去のあやまちのようなこともあることはある</li>
<li>Simula (1968) : 最初のオブジェクト指向言語と言われている</li>
<li>Lisp や Smalltalk 経由でオブジェクト指向を取り込んでいる</li>
<li>Dr. Kristen Nygaard : すべてのオブジェクト指向言語はわしの孫のようなもの、と言われたという話</li>
<li>継承の概念が重要</li>
<li>単一継承と多重継承</li>
<li>多重継承は調べられた限りでは Lisp (Flavors) が最初</li>
<li>多重継承はダイヤモンド継承とかのネットワーク構造になりうる</li>
<li>言語設計者は最悪のケースを考えなければいけない、なぜならするやつがいるから</li>
<li><a href="https://en.wikipedia.org/wiki/C3_linearization">C3 linearization algorithm</a></li>
<li>Mixin : Lisp では Flavors と呼ばれていた</li>
<li>MIT 近くにあった Steve&rsquo;s ice cream shop が発想の元</li>
<li>バニラアイスクリームにチョコチップを、という感じ</li>
<li>Flavors は抽象クラスでインスタンスは作れない</li>
<li>Flavors 同士を混ぜる (継承する) ことはできるが、元のクラスの方は混ぜることができない</li>
<li>Ruby の module の話</li>
<li>1: Module は mixin の単位として作られたのが最初の用途</li>
<li>他の機能としても使われるようになってきた</li>
<li>2: ネームスペース、たとえば <code>class Net::HTTP</code></li>
<li>3: シングルトン、たとえば <code>module FileUtils</code></li>
<li>4: 機能の集まり、たとえば <code>module Math</code></li>
<li><code>module_function</code></li>
<li>5: メソッド結合の単位として</li>
<li>AMC (alias method chain) の呪い</li>
<li>複数回使うと壊れやすい</li>
<li><code>Module#prepend</code> : 同じ名前で複数の提案があったので、誰が元祖かわからない</li>
<li>欠点はダイナミックさが足りない: 一度入れたものを外せない</li>
<li>include や prepend が外せないのは意図的にそうしている</li>
<li>しばらく聞き流していたが CLOS (Common Lisp Object System) の method combination を思い出した</li>
<li>アスペクト指向プログラミングにも繋がる</li>
<li>似ているのは同じ人 (Gregor Kiczales) が考えた機能だった</li>
<li>6: refinement の単位</li>
<li>オープンクラスの機能を利用してモンキーパッチングができる</li>
<li>昔は ゴリラパッチング</li>
<li>さらに昔は ゲリラパッチング</li>
<li>有名な利用例は Active Support</li>
<li>全体に影響があるので、一箇所にまとめておくのが良い</li>
<li>できるからやればよいというものではない</li>
<li>できれば特定の範囲に影響範囲をせばめたい</li>
<li>変数がグローバル変数だけだったのがローカル変数ができたように</li>
<li>似た発想: ClassBox (Java/Smalltalk), Selector Namespace (Smallscript / (ECMAScript4))</li>
<li>local rebinding : 置き換えたものがメソッドを呼び出した先でも置き換えられるかどうかに違いがある</li>
<li>GUI で Windows 風のボタンにするか Mac 風のボタンにするかを切り替えられたり</li>
<li>Selector namespace = lexical</li>
<li>ClassBox は先まで置き換えるので強力</li>
<li>Refinement</li>
<li>使用例: 既存のクラスにメソッドを追加したい</li>
<li>C# extension のようなもの</li>
<li>想定している使用例 RSpec</li>
<li>using をあちこち書かないといけないのでまだ使われていない</li>
<li>refinement が最適な解決策とは思っていない</li>
<li>local rebinding がないから</li>
<li>知らないところで挙動が変わるということがないということとのトレードオフ</li>
<li>7: Structural signature</li>
<li><p>Structural type check に使われるかも</p></li>
<li><p>Performance</p></li>
<li>Benchmark Suite, MJIT, Rubex</li>
<li>Concurrency</li>
<li>Fiber, (Guild), Auto Fiber</li>
<li>normalperson さん: 会ったことある人がほとんどいない, 飛行機に乗らない,  プロプラなサービスは使わない, unicorn の人</li>
<li>Static analyses or インタラクティブプログラミング</li>
<li><p>これもいくつか発表がある</p></li>
<li><p>Ruby は my language ではなく our language</p></li>
<li>コミュニティの努力</li>
<li><p>みんなで Ruby をもっと良くしていこう、世界を良くしていこう</p></li>
<li><p>Sponsors</p></li>
<li><p>質疑応答</p></li>
<li>Q(ujm?): 遠い将来に複数のライブラリの複数バージョンを同時に使用できる構想はあるか? → そういう触れ込みの言語はあるがうまくいっている例がまだなさそう。Ruby のネームスペースはシンプル。誰でも使えるようなパッケージシステムはまだできてない。発明されれば取り込みたい。</li>
</ul>


<h2>An introduction and future of Ruby coverage library</h2>

<ul>
<li>Esoteric Recipe</li>
<li>Ruby に対する主な貢献</li>
<li>今日の話はそのうちテストカバレッジの話</li>
<li>会場アンケート</li>
<li>Ruby or Rails を production で使っている人? → 多い</li>
<li>テストをしている? → 多い</li>
<li>カバレッジを測定している? → それなり</li>
<li>カバレッジとは?</li>
<li>実行 (テスト) されていないコードを見つけるなど</li>
<li>関数カバレッジ</li>
<li>行カバレッジが良く使われている</li>
<li>コメントや else や end の行は無視される (対応する iseq がない行)</li>
<li>後置 if で行全体は実行されたと判断されるなどが弱点</li>
<li>ブランチカバレッジ</li>
<li>ビジュアライズが難しい</li>
<li>今までは行カバレッジしかサポートしていなかった</li>
<li>他のカバレッジの紹介</li>
<li>C0/C1/C2 カバレッジ</li>
<li>C0 = 行カバレッジ</li>
<li>C1 = branch or path?</li>
<li>C2 = condition or path?</li>
<li>Ruby にとってカバレッジは重要</li>
<li>あまり使われていない理由は?</li>
<li>あまり知られていない? 使われ方が知られていない? 機能が不十分?</li>
<li>カバレッジはコードについての網羅だけで仕様をカバーしているかどうかは計測できない</li>
<li>カバレッジは指標であって、ゴールではない</li>
<li>カバレッジをゴールにすると、あまりよくないテストをつくりがち</li>
<li>テストデザインをちゃんと考えながら追加するのが大事</li>
<li>目安</li>
<li>人が傷ついたりするような重要なモジュールは 100% にした方が良いが他はそうでもない</li>
<li>環境によって実行されないコードもあったりするのでほどほどに</li>
<li>SimpleCov</li>
<li>使い方は test/test_helper.rb の頭で <code>require "simplecov"; SimpleCov.start</code></li>
<li><code>coverage.so</code> は後でロードされたライブラリは測定対象にならないので、測定対象より前に、というのが重要</li>
<li>テスト結果は nil になっている行は無視される行</li>
<li><code>def</code> の行はメソッド定義自体の実行回数で、メソッドの内容が実行された回数ではない</li>
<li>Ruby 本体用に作ったので experimental feature と書いてあるが、使われるようになったので気軽に変更しにくくなった</li>
<li>Concov</li>
<li>他の言語</li>
<li>C/++: GCOV/LCOV</li>
<li>Java: いろいろ</li>
<li>JavaScript: Istanbul</li>
<li>Ruby 2.5 に向けての計画</li>
<li>関数カバレッジとブランチカバレッジをサポートしたい</li>
<li>API を後悔しないものにしたいので、意見があれば <a href="https://bugs.ruby-lang.org/issues/13901">Add branch coverage</a> にコメントを</li>
<li>API はキーワード引数を受け取れるようにした</li>
<li>結果の同じ行に</li>
<li>カバレッジのオーバーヘッド</li>
<li>LCOV の可視化例</li>
<li>securerandom の環境依存のところが実行されていない例</li>
<li>今後の予定</li>
<li>callsite coverage: <code>obj.foo.bar</code> の foo で例外が実行された場合とか</li>
<li>Block coverage: <code>ary.map { ... }</code> で空配列だけだとブロックの中が実行されない可能性</li>
<li>質疑応答</li>
<li>Q(すとうさん) 実行されなくても大丈夫なところはメモしておけると、あとで見直すときにわかるので、何かないか? → <code>coverage.so</code> ではなく、ラッパー側で。</li>
<li>Q(hsbt) SimpleCov は coverage.so だけで取れるようにならない? 依存ライブラリを減らしたい。 → 改良がどんどん進む余地がある部分は、将来の拡張の余地がなくなるので、あまりやる気がない。</li>
<li>amatsuda: SimpleCov のメンテナもやっているので、ブランチカバレッジ対応とか必要があればやる気はある</li>
<li>Q(amatsuda) 手伝って欲しいところとか? → Java とかだと IDE との連携が便利らしい。そのへんのエコシステムを一緒に作ってくれる人が増えるとありがたい</li>
</ul>


<h2>What visually impaired programmers are thinking about Ruby?</h2>

<ul>
<li>自己紹介</li>
<li>Non Visual Desktop Access (NVDA)</li>
<li>Mac には Insert キーがないので、Escape キーを代わりに使える拡張</li>
<li>Excel の罫線の読み上げなど他の国の人がやらないようなところをやっている</li>
<li>島根県 CMS はアクセシビリティがしっかりしている</li>
<li><a href="https://github.com/edhowland/viper">https://github.com/edhowland/viper</a></li>
<li>Mac のターミナルの読み上げ機能を利用して文字を出力して読み上げさせるエディタ</li>
<li>Braille Memo BM46</li>
<li>Console (Terminal) applications</li>
<li>Terminal + screen reader だけ使っている人はエンジニアもいる</li>
<li>デモ</li>
<li>展示ディスプレイとの組み合わせでリモートの Linux マシンの Emacs を操作して ruby プログラムを編集するようなデモ</li>
<li>インデントはビープ音で表現していた</li>
<li>Screen reader, Tactile</li>
<li>アクセシビリティ対応のモダンなテキストエディタ: Visual Studio Code, Eclipse</li>
<li>Eclipse のデモ</li>
<li>Ruby の利点</li>
<li>日本語ドキュメント</li>
<li>読みやすい、描きやすい、コード量が少ない</li>
<li>サーバーエンジニア用のツール</li>
<li>テスト駆動</li>
<li>Ruby の欠点</li>
<li>Windows アプリの作り方に良い方法がない</li>
<li>GUI がなかなか良いものがない (visual ではない方法で)</li>
<li>Tk はアクセシブルではない</li>
<li>そういうときは、お手上げか文字認識で頑張るしかない</li>
<li>GUI フレームワークとアクセシビリティ</li>
<li>アプリケーションは OS から問い合わせが来た時に適切な情報を返せる必要がある</li>
<li>wxRuby は良いが、開発が止まっていて残念</li>
<li>ドキュメンテーションツール: rdoc, yard</li>
<li>ハッピーだったり辛かったりするデモ: Windows 10 + NVDA + Firefox</li>
<li>メインのランドマークに移動するショートカットキーがある</li>
<li>見出しでジャンプできたりできなかったり</li>
<li>rdoc はマウスホバーするとソース表示のトグルが出てくるのが気づきにくい</li>
<li>yard もソースを展開して読むことができる</li>
<li>メソッドが見出しになっていると探しやすくて良いのに、という話がある</li>
<li>なぜ重要か?</li>
<li>標準に準拠</li>
<li>機械処理などにも強い</li>
<li>誰もがハンディキャップを持つ可能性がある</li>
<li>デジタルになることがそもそも可能性を広げている</li>
<li>Ruby のアクセシビリティは良いがまだ良くできる</li>
<li>知り合いの視覚障害者が来てくれるかと思ったが、ハードルが高かったようなので、そういう人たちも来れるようになると嬉しい</li>
<li>質疑応答</li>
<li>Q: 健常者が普通に作っているだけでは気づきにくい点があるので、実際にチェックしてもらうのが重要 → NPA とかでアクセシビリティ診断とかやっている</li>
<li>Q: ドキュメントのアクセシビリティ。他の言語 sphinx とか? → 確認できてない。興味はある人はいる。悪い評判は聞いたことがない。また調べて Python のコミュニティで発表したい。</li>
</ul>


<h2>Regular Expressions Inside Out</h2>

<ul>
<li>会場アンケート</li>
<li>正規表現を使ったことある人? → ほとんど</li>
<li>正規表現でてこずったことある人? → ほとんど</li>
<li>中身を見たことある人? → 1,2人</li>
<li>Onigmo, Onigumo</li>
<li>鬼雲? 鬼蜘蛛?</li>
<li>最小の例: <code>//</code></li>
<li>何もマッチしない? → wrong</li>
<li>どんな文字にもマッチしない</li>
<li>空文字列にマッチ</li>
<li>文字の先頭・間・末尾にマッチ</li>
<li><code>'abcde'.gsub //, 'x'</code></li>
<li>空の正規表現が隠れていることがある: <code>"xyz" =~ /a+|b*/</code></li>
<li>有効な使い方</li>
<li><code>=~</code> (<code>match</code>), <code>sub</code> の他に <code>slice</code>, <code>split</code>, <code>scan</code>, <code>gsub</code></li>
<li>Pure Ruby で効率的な Unocode の正規化</li>
<li><code>unicode_normalize</code></li>
<li>Unicode Standard Annex #15</li>
<li>German to NFC</li>
<li><code>gsub /[AaOoUu]\u0308/, {...hash...}</code></li>
<li>Unicode にはもっとたくさんの組み合わせがある</li>
<li><code>/[BaseCharacters][CombinationCharacters]*/</code></li>
<li>実際のものは <code>lib/unicode_normalize/tables.rb</code> にある</li>
<li>文字にしたいが nobu に反対されている(?)ので <code>\uXXXX</code> のまま</li>
<li>ハッシュも工夫している</li>
<li>Ruby が速くなれば速くなる</li>
<li>gsub にハッシュを渡せるのは Ruby だけなので他の言語だとできない</li>
<li>gsub にハッシュが使えるようになった developer meeting が初参加だった</li>
<li>Improving Unicode Property Support</li>
<li><code>\p{Digit}</code>, <code>\p{Hiragana}</code></li>
<li>Unicode はコードポイントは ISO 10646 互換</li>
<li>Properties などは Unicode での追加</li>
<li>プロパティは Boolean properties (二値プロパティ), Enumerable properties (多値プロパティ) がある</li>
<li>データ量が多い</li>
<li>enc/unicode/10.0.0/nam2ctype.h</li>
<li><a href="https://bugs.ruby-lang.org/issues/13240">Change Unicode property implementation in Onigmo from inversion lists to direct lookup</a></li>
<li>二値プロパティは反転リストで持っている</li>
<li>多値プロパティはプロパティの値ごとに反転リストを持つ必要がある</li>
<li>値は Unicode 10.0.0 で 138 個ある</li>
<li>チェックは二分探索</li>
<li>svn.ruby-lang.org でダウンロードしようとすると拒否されるぐらい大きい (checkout はできる)</li>
<li>新しい表現方法</li>
<li>プロパティが一緒のものは同値類にする</li>
<li>定数時間で探索できる</li>
<li>まだサイズが大きかったので、二段階の同値類にした</li>
<li>パフォーマンス: 二分探索で対数時間かかっていたのが、定数時間になった</li>
<li><a href="https://bugs.ruby-lang.org/issues/13241">Method(s) to access Unicode properties for characters/strings</a></li>
<li>問題点もまだある</li>
<li>まとめ</li>
<li>質疑応答</li>
<li>Q: 実装は Ruby 本体に入っている? Onigmo に入っている? → Ruby 本体の Onigmo 部分に入る、最終的には同期を取るので調整が必要</li>
</ul>


<h2>Type Checking Ruby Programs with Annotations</h2>

<ul>
<li>4個の Ruby のタイプチェッカーを実装した</li>
<li>2005, Type inference, structural subtyping</li>
<li>2007, Type inference, polymorphic record types</li>
<li>2009, Control flow analysis</li>
<li>2017, Local type inference, structural subtyping</li>
<li>なぜ型チェッカーが必要か?</li>
<li>バグ発見</li>
<li>ドキュメントが検証可能</li>
<li>自動補完</li>
<li>リファクタリングしやすい</li>
<li>高度なプログラム解析に使える、セキュリティチェッカーとか</li>
<li>Ruby の型チェック</li>
<li>少なくとも12年いろんな人が試して来た</li>
<li>Ruby は変数に型がないので、型推論しようとした</li>
<li>Static Type inference for Ruby</li>
<li>Diamondback Ruby</li>
<li>structural subtyping ベースなので、 polymorphic types は推論できない</li>
<li>Type inference for Ruby Programs Based on Polymorphic Record Types</li>
<li>RubyKaigi 2008</li>
<li>ML の型推論と polymorphic record types ベースで polymorphic types が推論できる</li>
<li>いくつかの組み込みで型を提供できない</li>
<li>polymorphic recursion (Array cannot be polymorphic)</li>
<li>Non regular types (<code>Array#map</code>)</li>
<li>Type Checking for Ruby</li>
<li>ここまでのまとめ</li>
<li>Ruby プログラムから型推論は構築できない</li>
<li>subtyping を選んでも polymorphic type inference を選んでも限界があるから</li>
<li>Requirements</li>
<li>Correctness: 型チェッカーが通れば実行時に型エラーが起きない</li>
<li>Static: 実行せずに</li>
<li>No annotation: 型推論</li>
<li>Relaxing Requirements</li>
<li>Forget Correctness</li>
<li>Incorrect type checking でもプログラマーの助けになる</li>
<li>TypeScript accepts unsound co-varieant subtyping on function parameters</li>
<li>Lint tools: アドホックな悪いプログラムのパターン集だが役たっている</li>
<li>Type Checking at Runtime</li>
<li>メソッドボディの実行前にチェック</li>
<li>Annotate Ruby Programs</li>
<li><a href="https://github.com/soutaro/steep">https://github.com/soutaro/steep</a></li>
<li>Key Ideas</li>
<li>Gradual Typing : アノテーションがなければチェックしない</li>
<li>Programmers annotate their Ruby programs</li>
<li>Another language to define types</li>
<li>例</li>
<li>Annotating Constants?</li>
<li>Type Definition</li>
<li>What is Signature?</li>
<li>Signature Code Separation</li>
<li>Steep まとめ</li>
<li>Q(jokerさん): DSL は Ruby で? → racc などを使って ruby で実装しているが、ruby のコンテキストで動くわけではない。</li>
<li>Q: 聞き取れず (たくさんサポートするのは大変とかいう話?)</li>
<li>Q(ko1) rails? → TypeScript はコミュニティでたくさん揃っているので、そういう感じになって欲しい</li>
<li>Q(yugui) Active Support? How can we (community) help you? → 聞き取れず</li>
<li>Q(mame) Ruby core に入れたい? add-on? → パフォーマンスがなんとかまでしか聞き取れず</li>
</ul>


<h2>Ruby Language Server</h2>

<ul>
<li>自己紹介</li>
<li>手書き麻雀フォント</li>
<li>qwik2md</li>
<li>asakusarb.esa.io</li>
<li>麻雀, Ruby, Docker 好き</li>
<li>Language Server とは?</li>
<li>エディターやツールに便利な情報を提供してくれるツール</li>
<li>Language Server Protocol (LSP) (JSON-RPC ベース) でやりとり</li>
<li>syntax error のチェックとか整形とか</li>
<li>Editor → LSP Client (Plugin) → Language Server</li>
<li>LSP Client はエディターごとのものと汎用的なものがある</li>
<li>汎用的なものの場合は Boot setting for Ruby などが必要</li>
<li>利点欠点まとめ</li>
<li>まず VS Code 向けを作り始め</li>
<li>Language Server に必要なもの</li>
<li>JSON-RPC</li>
<li>トランスポートは socket でも stdio でも http でも使える</li>
<li>サンプルは node ipc</li>
<li>既存の json-rpc の gem は http のみ対応っぽいので、実装する必要あり</li>
<li>Language Server は STDIO が多数派らしいということで、STDIO を選択</li>
<li>Language Server Protocol</li>
<li>initialize で capabilities を返すので徐々に実装していける</li>
<li>TypeScript から Ruby のコードを生成して language_server gem を作れた</li>
<li>まだ alpha 段階</li>
<li>pure Ruby</li>
<li>syntax check</li>
<li>自動補完や定義へのジャンプは実装中</li>
<li>使い方</li>
<li>dokcer か gem で使う</li>
<li>具体的な実装</li>
<li>syntax check は <code>ruby -wc</code> を使っている</li>
<li>自動補完は rcodetools を使っている</li>
<li><a href="https://github.com/rcodetools/rcodetools">https://github.com/rcodetools/rcodetools</a></li>
<li>そのまま組み込めなかったので wrapper 層がある</li>
<li>実際に実行するので副作用がある</li>
<li>Ripper を使っている</li>
<li>定義ジャンプ</li>
<li>Future prospects</li>
<li>Conclusion</li>
<li>language server が一般的になっている</li>
<li>一実装として language_server gem を作った</li>
<li>気に入らなければ language_serer-protocol gem を使って別実装を</li>
<li><a href="http://langserver.org/">http://langserver.org/</a> の一覧に追加された</li>
<li>Q(ko1) このために ruby をこうしてほしいという意見があれば → warning を正規表現で頑張るのではなく、機械可読可能に</li>
<li>逆質問: <code>ruby -wc</code> を実行するのではなく、今実行している ruby 上でやりたい → ko1: ISeq を使えば良い</li>
<li>逆質問: ripper が苦しいので parser gem にしようかと検討している。理由は始点と終点が欲しい。 → mame さんが検討している</li>
<li>Q(mame) ripper は遅くないですか? → parser gem より速かった。</li>
<li>Q(mame) 編集段階の壊れたものも ripper に渡す? → その通り</li>
<li>Q(shugo) protocol の仕様としてインデントの計算をして返すものはあるのか? → format が近そう</li>
<li>カラースキーマーや syntax highlight がまだ PR 段階など、 LSP 自体が発展途中</li>
</ul>


<h2>Write once, run on every boards: portable mruby</h2>

<ul>
<li>自己紹介</li>
<li>ローカルな話</li>
<li>Sessalet</li>
<li>別ボードへの移植</li>
<li>ハードウェアを操作する部分はC言語で書いて mrbgems を作成する必要がある</li>
<li>デモ</li>
<li>GR-PEACH</li>
<li>Nucleo F411RE</li>
<li>Architecture 表</li>
<li>Writing Ruby Code</li>
<li>Sensors</li>
<li>Motor はモーターごとに挙動が違うので別クラス</li>
<li>ハードウェア依存部分</li>
<li>CMSIS : デバッグ用の共通仕様</li>
<li>HAL (Hardware Abstraction Layer)</li>
<li>mbed library, C++</li>
<li>Arduino &amp; mbed</li>
<li>Arduino : library, IDE</li>
<li>利点: サンプルがたくさん、たくさんのボードをサポートしている</li>
<li>Arduino 互換機</li>
<li>mruby の普及に必要なものを Arduino から mbed から学んだ</li>
<li>まとめ</li>
<li>ボード非依存なコードを</li>
<li>ボード依存部分はまとめる</li>
<li>たくさんサンプルがあると良い</li>
<li>Q: 3秒スリープをどうやってるかみたいな質問 → ハードウェアのライブラリにそれ用の機能がある</li>
</ul>


<h2>Lightning Talks</h2>

<p>自分も発表していたので、疲れてメモは取れず。</p>

<p>発表資料はいつも通り<a href="https://github.com/znz/rubykaigi2017-frozen_string_literal">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-how-to-specify-frozenstringliteral-true/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/how-to-specify-frozenstringliteral-true">slideshare</a>, <a href="https://speakerdeck.com/znz/how-to-specify-frozen-string-literal-true">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-rubykaigi2017-frozen_string_literal">RubyGems</a> にあげています。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-frozen_string_literal/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-frozen_string_literal/" title="How to specify `frozen_string_literal: true`">How to specify `frozen_string_literal: true`</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2017 の1日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-18-rubykaigi2017.html"/>
    <updated>2017-09-18T10:34:48+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi2017</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2017">RubyKaigi 2017</a> の1日目に参加したので、そのメモです。</p>

<!--more-->


<p>最初の方は個人的なメモなので、興味がなければ飛ばして、オープニング以降からどうぞ。</p>

<h2>移動と前夜祭</h2>

<p>土曜日に姫路に寄ってから、岡山県の実家に泊まっていて、日曜に台風の影響で11時ごろから岡山の在来線が止まるということで、その前に移動していたので、広島には問題なく到着していました。広島では10時ごろから在来線が止まっていたようでした。
午後は新幹線も広島より西で停電があった影響で遅れたり、博多と広島の間は止まったりしていたようです。</p>

<p>飛行機はだいたい止まっていたようで、東京からの人はさっさと新幹線に切り替えた人は問題なくたどり着けて、遅く新幹線に乗った人は遅れていて、前夜祭に間に合わなかったりしたようです。</p>

<p>前夜祭は、ホテルから移動している時に傘が壊れる (1本骨が曲がる) ということはありましたが、問題なくたどり着いて参加できました。
終わった後はほとんど雨は降っていませんでした。
Twitter のハッシュタグ <code>#rubykaigi</code> をみていると、会場準備をしていたスタッフの人で終わった後にきて、残っていたものを食べたりお土産をもらったりしていた人もいるようでした。</p>

<h2>朝の移動</h2>

<p>近くのホテルに泊まっていたので、開場前に会場につけるかと思っていたら、ちょっと準備に手間取ってしまって、結局9:40頃に到着しました。</p>

<h2>オープニング</h2>

<p>オープニングというか最初のキーセッションの前のつなぎとして、松田さんが会場アンケートしたりしていました。
初参加の人が意外と多かったようです。</p>

<h2>Ruby Forward</h2>

<ul>
<li>Money Forward によるスポンサーセッション</li>
<li>BtoC の新サービスを明日リリース予定</li>
<li>Ruby逆引きハンドブックの改訂版を出版(予定)</li>
<li>福岡の開発拠点を新設</li>
</ul>


<h2>Making Ruby? ゆるふわRuby生活</h2>

<ul>
<li>Heroku の matz team</li>
<li>日々の話</li>
<li>Repository は svn.ruby-lang.org がメインで github.com にはミラーがある</li>
<li>pull request は裏口</li>
<li>Why not Git?</li>
<li>ruby は Git より昔からあるから</li>
<li>作業する人がいない</li>
<li>個人的に hash がリビジョン番号の方が良い</li>
<li>コミッターにとっての利点不足</li>
<li>issue は redmine</li>
<li>開発者会議</li>
<li>tarball からのビルドの仕方: configure + make</li>
<li>Out-of-place build</li>
<li>configure に色々オプションがあったりいろんな環境をサポートしていたり</li>
<li>一度にビルドできる Makefile <a href="https://github.com/nobu/build-files/blob/master/Ruby.mk">https://github.com/nobu/build-files/blob/master/Ruby.mk</a></li>
<li>repo からのビルド</li>
<li>subversion or git / autoconf / bison / gperf / ruby</li>
<li>BASERUBY, MINIRUBY</li>
<li>トラブルによりすとうさんのサポート</li>
<li>MINIRUBY の機能や制限</li>
<li>2.4 までは miniruby と拡張ライブラリのビルドは parallel だったが、extconf.rb の実行が逐次実行だった</li>
<li>親にしか依存していないので 2.5 では exts.mk ファイルを分割生成して parallel に実行できるようになって速くなった</li>
<li>拡張ライブラリ作成時の問題点</li>
<li>C ヘッダーの場所とかが問題</li>
<li>Solution: <code>trace_var</code></li>
<li><code>$extmk</code>, <code>$ruby</code></li>
<li>? (突然の質疑応答タイム) → 特になし</li>
<li>Bug Report</li>
<li><a href="http://mla.n-z.jp/?ruby-list=50578">ruby-list:50578</a></li>
<li><code>p = 2; p (-1.3).abs</code> の話</li>
<li>スペースの有無によって意味ががらっと変わることがある</li>
<li>良くいって罠</li>
<li>少なくとも 1.1 からの仕様 (それより古いものはコンパイルが通らないので調べていない)</li>
<li>悪魔城 parse.y</li>
<li>難しくない?</li>
<li>ruby -w で警告が出るのでそのソースコード解説</li>
<li><code>EXPR_LABEL</code> はキーワード引数の名前が置けるところ</li>
<li><code>lvar_defined</code></li>
<li>matz issue</li>
<li>? 再び</li>
<li>literal symbol by intern</li>
<li><code>:"#{foo}"</code> が intern を再定義していると Symbol 以外になることがある</li>
<li>昨晩前夜祭の前に<a href="https://github.com/ruby/ruby/blob/d1e63172c6ecf2606ff9a947d917117eb6923436/parse.y#L7894-L7900">直した</a></li>
<li><a href="https://bugs.ruby-lang.org/issues/13812">Refinements で定義した to_s を String interpolation が呼んでくれない</a></li>
<li>.x86_64-darwin などをビルドディレクトリに使っている</li>
<li><code>.gitignore</code> に <code>.*-*</code> が入っている</li>
<li><code>make -C .x86_64-darwin exam commit</code></li>
<li>違い: 変換が明示的に見えるようにするのと見えないようにする</li>
<li>2.5 には目玉機能がない?</li>
<li>NEWS をみると色々</li>
<li>Reject された feature</li>
<li>議論中</li>
<li><code>Kernel#method</code> に対応する演算子?</li>
<li><p>Rightward assignment: <code>-&gt;</code> とか <code>=&gt;</code> とか使っているので良いものがない</p></li>
<li><p>質疑応答</p></li>
<li>extmk の分割の話で親子関係しか依存がないのを確認した? → digest が openssl に依存していた (チェックするためのメソッドを共有していた) のを切り分けた。 Windows で何かあったのを親子関係にした。実行時の依存ではなくビルド時の依存関係なのでもともと多くはなかった。</li>
<li>Rightward assignment の記号の提案 (:= が書籍では ← と書かれる言語があるので =: は?) → トークンの追加は衝突がなければ難しくない、<code>a=:b</code> がシンボルと衝突する。 <code>a ~&gt; b</code>, <code>a |&gt; b</code> ?</li>
<li><code>String#intern</code> を再定義する? → する人もいるらしいので、先手を打って直した</li>
<li>yield_self が目玉機能になる? → 機能としては長い間要望されていたものが、名前問題でなかなか入らなかった。とりあえず説明的な名前で入れて、良い名前があれば alias 追加すればいいという感じで入った。</li>
</ul>


<h2>Fiber in the 10th year</h2>

<ul>
<li>ささださんすごいとツイートしてほしい話</li>
<li>所属が変わっても基本的に ruby のコアの開発をしている</li>
<li>Fiber の紹介</li>
<li><p>Proc との違いは restart できる</p></li>
<li><p>Fiber の利用例</p></li>
<li>内部イテレーターを外部イテレータ〜にする例</li>
<li>Enumerator が内部で Fiber を使っている</li>
<li>Agent simulation : ゲームのキャラクター表現など</li>
<li><p>Non-blocking IO scheduler</p></li>
<li><p>Thread との違い</p></li>
<li>timer で自動で切り替わるかどうか</li>
<li>I/O ブロックで勝手に切り替わるかどうか</li>
<li>同期処理が必要かどうか</li>
<li>次のコンテキストを指定する必要があるかどうか</li>
<li><p>パフォーマンス</p></li>
<li><p>以上が Fiber の歴史</p></li>
<li><p>背景: Ruby 1.9 における Callcc と Fiber</p></li>
<li>2007/05 作り始め</li>
<li>Fiber の名前は Windows API から</li>
<li>今では他の言語でも Fiber という名前が使われているものがある</li>
<li><p>最初は <code>Fiber#pass</code> しかなかった</p></li>
<li><p>Coroutine or Semi-coroutine</p></li>
<li>Coroutine は難しいがパワフル</li>
<li>Semi-coroutine (Fiber) and Coroutine (Fiber::Core)</li>
<li>大クラス主義 (big class principle) を理由に Fiber::Core を削除してマージ</li>
<li><p>Semi-coroutine: resume, Coroutine: transfer</p></li>
<li><p>Fiber の実装</p></li>
<li>2007年: Copy machine stack</li>
<li>2010年: Use Native support</li>
<li>2017年: More light weight switching</li>
<li>速度: 5% 改善, メモリ: 30% 削減</li>
<li>VM stack や Machine stack があるので構造体のメモリ削減の影響は小さい?</li>
<li><p>Guild に繋げるための整理になった</p></li>
<li><p>Auto Fiber proposal</p></li>
<li>Automatic schedule on I/O blocking</li>
<li>次のターゲットを指定する必要がなくなる</li>
<li>同期が必要になる</li>
<li>利点: 既存のプログラムを変更する必要がない、Fiber 同様に軽い、Thread より安全</li>
<li><p>欠点: Thread と同様にバグりやすい</p></li>
<li><p>質疑応答</p></li>
<li>想定より多かった使い方は? → IO のスケジュールに使ってくれるのが想定より多かった。Enumerator が隠蔽するので直接使う人は少ないと思っていた。</li>
<li>アーキテクチャ依存やパフォーマンスで苦労したと思ったが、一番苦労した点は? → アーキテクチャ依存部分の最初は 1.8 を参考にしたので、ほとんど苦労しなかった。NetBSD の setcontext が動かなかったとかの話。</li>
</ul>


<h2>Handling mails on a text editor</h2>

<ul>
<li>通訳の方が Emacs を知らなかったので直前まで打ち合わせをしていた</li>
<li>自己紹介</li>
<li>Ruby で書いたテキストエディタ</li>
<li><a href="https://github.com/shugo/textbringer">Textbringer</a></li>
<li>Emacs 風</li>
<li>ターミナル上のみ</li>
<li>Pure Ruby</li>
<li>かっこいい名前</li>
<li>Law, Chaos, and Cosmic Balance</li>
<li>エディターだと <a href="https://twitter.com/ujm/status/909642340863688704">https://twitter.com/ujm/status/909642340863688704</a></li>
<li>コードの修正もたとえば rubocop を盲信するのではなくバランスが大事</li>
<li>キーバインディングは Emacs 風で help は少ないのでリンクからソースをみる</li>
<li>実装詳細</li>
<li>Linked Line ではなく Buffer Gap を採用</li>
<li>Internal encoding: UTF-8</li>
<li>indexing が問題になったので、基本的に ASCII-8BIT で持っておいて必要に応じて <code>force_encoding('UTF-8')</code></li>
<li>配列を使うのは文字列に変換するのが <code>force_encoding</code> だけより重そうだったので採用せず</li>
<li>部分再描画は curses 任せ</li>
<li>curses を使っているなら pure Ruby じゃないというツッコミがあった</li>
<li>動的な部分で ruby の特徴を活かせる</li>
<li><code>eval_expression</code></li>
<li><code>eval_buffer</code></li>
<li><code>eval_region</code></li>
<li>Suppress warnings : <code>$VERBOSE = nil</code></li>
<li><code>def</code> を使っていない理由</li>
<li>Plugin</li>
<li>Mournmail</li>
<li>MUAs for Emacs の話</li>
<li>Demo</li>
<li>メールの同期にバックグラウンド処理が必要になる</li>
<li>UI スレッドを用意した</li>
<li>UI スレッド以外では Textbringer のメソッドをよんではいけない</li>
<li>必要に応じて <code>next_tick</code> を使う</li>
<li>メールを扱うライブラリ: mail.gem, Net::IAMP</li>
<li>refine でローカルなモンキーパッチ</li>
<li>質疑応答</li>
<li>Auto Fiber? → 通訳さんとの打ち合わせで聞けていなかった。切り替わりのタイミングが想定できなくなるのは向いていないかも。</li>
<li>Emacs なのにS式がない? → Ruby で実装していて Emacs ではない</li>
<li>Emacs だと M-x だと <code>-</code> つながり? → Textbringer はタブを押すと <code>-</code> を <code>_</code> に変換する</li>
<li>名前空間の衝突は大丈夫? → 適切に prefix をつければいい</li>
</ul>


<h2>Gemification for Ruby 2.5/3.0</h2>

<ul>
<li>self.introduce</li>
<li>歴史: RAA, RubyForge, gems.github.com, gemcutter.org, rubygems.org, bundler</li>
<li>組み込みライブラリ: require しなくても使えるもの</li>
<li>標準添付ライブラリ: 別途インストールしなくても require できるもの</li>
<li>Standard Libraries, Default Gems, Bundled Gems</li>
<li>Pure Ruby, C extensions</li>
<li>Standard Libraries: upstream が svn.ruby-lang.org</li>
<li>Default Gems: Upstream が GitHub の Ruby team</li>
<li>Bundled Gems: メンテナが別</li>
<li>Default gem</li>
<li><code>*.gemspec</code> があると特別扱いされる</li>
<li>具体例: ruby/openssl</li>
<li>メインの upstream は <a href="https://github.com/ruby/openssl">https://github.com/ruby/openssl</a></li>
<li>利点: gem update openssl で新しい openssl gem を使える</li>
<li>セキュリティアップデートも、例えば最近の例なら json gem だけあげて ruby 本体をあげなくてもできる</li>
<li>psych : libyaml に依存、upstream に JRuby integration がある</li>
<li>rdoc: rdoc/rdoc から ruby/rdoc に移動</li>
<li>ripper 対応してくれた人が現れた</li>
<li>Bundled gems</li>
<li><code>gems/bundled_gems</code> にある gem を普通にインストールする</li>
<li>アンインストールも普通にできる</li>
<li>test framework の問題</li>
<li>test-unit, minitest が upstream と非互換になった</li>
<li>標準添付から外して本体のテスト専用に</li>
<li>test library がなくなるのは問題ということで bundled gem という方法が生み出された</li>
<li>rake は標準添付ライブラリでなくて良いのでは、ということで bundled gem になった例</li>
<li>bundled gem の問題</li>
<li>コンパイルがちゃんとできるかサポートできないので、拡張ライブラリを含むものはサポートしていない</li>
<li>bundled gem のテストが必要</li>
<li><a href="https://bugs.ruby-lang.org/issues/5481">Gemifying Ruby standard library</a></li>
<li>bundled gem や default gem の仕組みができたことで段階的に外していくことができるようになった</li>
<li>Gemification は利用者に利点は多いがメンテナは大変</li>
<li>たとえば rubygems はまだ Ruby 1.8 対応しているので大変</li>
<li>rubygems</li>
<li>rubygems/rubygems.org は rails で書かれているサイトそのもの</li>
<li>rubygems/rubygems はコマンドラインツール</li>
<li>メンテナなどは完全に別</li>
<li>Reserved words on rubygems.org</li>
<li>fileutils, fiddle, gdbm</li>
<li>Future</li>
<li>Ruby 2.5 では bundler が default gem に</li>
<li>RubyGems に Bundler 統合予定</li>
<li>全部 default gem, bundled gem にしたい</li>
<li>rubygems-2.7.0 がテストで bundler を使うようになる</li>
<li>bundler-2.0 のリリース後に rubygems-3.0 は本体でも bundler を使うように開発していく予定</li>
<li><a href="https://bugs.ruby-lang.org/issues/13847">Gem activated problem for default gems</a></li>
<li><a href="https://bugs.ruby-lang.org/issues/10320">require into module</a></li>
<li>shared library 問題, LOADED_FEATURES 問題</li>
</ul>


<h2>How to optimize Ruby internal</h2>

<ul>
<li>私用により途中から聞いていました。</li>
<li>細かい改善の話でした。</li>
<li>質疑応答</li>
<li>Hash の最適化で st_table を再利用するという案はなかったのか? → とりあえず想定していなかった? よく聞き取れず</li>
<li>聞き取れず → Ruby のメソッド一つ一つを計測してどうなったのかだけ</li>
<li>ベンチマークツール? → Apple 提供の可視化ツール</li>
<li>CI に回すのがどれくらいできそうか? → 1時間半ぐらいかかるが大丈夫か? グラフ表示したい。→ RubyBench が何か持っているかも。</li>
<li>どのくらい網羅しているかとか、みんなで追加すればいいのではないかとか → 発表が終わったのでオープンにしていきたい</li>
<li>ユーザーがカスタマイズする余地が消えたもの、壊す可能性が消えたものの見極めは? → 基本はテストが通るもの</li>
</ul>


<h2>Development of Data Science Ecosystem for Ruby</h2>

<ul>
<li>BigData is important in your business</li>
<li>RubyKaigi 2016 in Kyoto で Ruby が Data Science に使えない話とどうすれば良いかという話をした</li>
<li>今は使えるようになっている</li>
<li>将来も使える状態を維持していきたい</li>
<li>self.introduce</li>
<li>私はカエルです</li>
<li>現状</li>
<li>Ruby で書かれているものに追加したい場合</li>
<li>Ruby だけでやるか Python や R を JSON 経由で併用する方法があった</li>
<li>第3の選択肢として PyCall を作った</li>
<li>PyCall の話</li>
<li>使用例</li>
<li>数列の合計</li>
<li>bugs.ruby-lang.org の7月ごろのスナップショットをもらってデモ: ソースは <a href="https://github.com/mrkn/bugs-viewer-rk2017">https://github.com/mrkn/bugs-viewer-rk2017</a></li>
<li><code>Pandas.read_from_sql</code> は第二引数に ActiveRecord の connection を渡せるように拡張してある</li>
<li>Object recognition (物体検出) by Keras</li>
<li><a href="https://github.com/mrkn/ssd_keras">https://github.com/mrkn/ssd_keras</a></li>
<li>Python is a best friend of Ruby from now on</li>
<li><a href="https://github.com/mrkn/pycall.rb">https://github.com/mrkn/pycall.rb</a></li>
<li>Python での選択肢は Python のみか Rpy2 で R と連携の2個</li>
<li>今は PyCall を使えば良いが将来的には Ruby で</li>
<li><a href="https://red-data-tools.github.io/">https://red-data-tools.github.io/</a></li>
<li>Apache Arrow <a href="https://arrow.apache.org/">https://arrow.apache.org/</a></li>
<li>一つの言語で完結することは少ないので、データ交換が必要</li>
<li>シリアライズで結構 CPU 時間を使っている</li>
<li>シリアライズも組み合わせそれぞれから、共通化しようとしている</li>
<li><a href="https://github.com/red-data-tools/red-arrow">https://github.com/red-data-tools/red-arrow</a></li>
<li>Apache Arrow のコアメンバーにすとうさんが昨日入った</li>
<li><a href="https://gitter.im/red-data-tools/ja">https://gitter.im/red-data-tools/ja</a> <a href="https://gitter.im/red-data-tools/en">https://gitter.im/red-data-tools/en</a></li>
<li>明日の 13:50-15:50 in Room Ran で RubyData Workshop in RubyKaigi 2017</li>
<li>jupyter との連携は? → いい感じに使えている</li>
<li>Python のオブジェクトのメモリ管理と PyCall のオーバーヘッド → Ruby のオブジェクトが死んだ段階でデクリメントしている、オーバーヘッドは呼び出す処理による、 sin 関数などだとオーバーヘッドが大きいが numpy の行列計算などの重たい処理の場合はオーバーヘッドはあまり考えなくて良い</li>
<li>オブジェクトを変換しているか? → numpy のオブジェクトなどは変換していない、プリミティブは変換している</li>
</ul>


<h2>cookpad のスポンサーセッション</h2>

<ul>
<li>microservice 化でモデル数は減っている</li>
<li>なぜ Ruby <em>Committer</em> Sponsor ?</li>
<li>もっと良い言語が出てきたらどうするの? → Ruby を強くすれば良い</li>
<li>Ruby 3 に本気で向き合っている</li>
<li>cookpad &lt;&lt; mame</li>
</ul>


<h2>Ruby Committers vs the World</h2>

<p>コミッターなので壇上にいました。</p>

<ul>
<li>新コミッター紹介</li>
<li>rhe さん : openssl</li>
<li>k0kubun さん : ERB</li>
<li>watson さん : ちまちま速くするパッチを投げていたらコミッターになれた</li>
<li>質問のサンプルとして、型注釈の話</li>
<li>絶対書きたくない : 6人ぐらい</li>
<li>書かなくても良いが書くと良くなる : 多め</li>
<li>コメントぐらいなら良い (いざとなれば無視できる) : 多め</li>
<li>OpenMP みたいな感じ?</li>
<li>rdoc みたいなのがうれしい</li>
<li>古い処理系で無視されるといえば、すでにマジックコメントがある</li>
<li>現状だと動くものが型で制限されると嫌</li>
<li>matz: nominal type は絶対採用しない、String と書いても structal にしたい、できれば未来のためにプログラムの中に書くのは採用したくない、最低でもコメントに留めていたい</li>
<li>型を書かせたくないと思っているコミッター? → 4人ぐらい</li>
<li>Q(ujm): 右代入の本気度? →</li>
<li>akr: yield_self は右代入の代用の部分があるのではないか、左から右に流れるように書きたいことがあるのではないか</li>
<li>matz: 完全にフリーハンドであれば入れたい、長い歴史の中で記号を使い尽くしているので良い候補がない、既存のプログラムを壊れるような変更をしてまで入れるようなものではない</li>
<li>shyouhei: 他の言語では?</li>
<li>メモ取れず</li>
<li>durest: メソッドチェーンの話があったので、記号がなければメソッドでやってみるのはありではないか</li>
<li>会場を含めたアンケート</li>
<li>概念としてありは割といる</li>
<li>ないだろうはほとんどいない</li>
<li>Q(ujm): 変数とか定数とかどのあたりまでサポートするかという質問だった →</li>
<li>matz: 今代入の左辺になれるものは右代入でもサポートしたい</li>
<li>多重代入は難しい?</li>
<li>Q: YARV の命令仕様を確定して公開すると他の言語処理系が作れる? → 変化していくために固定する予定はないという感じ</li>
<li>他の案としては LLVM とか</li>
<li>Q: 右代入は <code>setter=</code> も対象? → matz: 当然</li>
<li>一番大変なのは parser</li>
<li>右代入で多重代入</li>
<li>後置 if との組み合わせ? → akr: 今の代入は式なのでできる、右代入は文にするというのはありかもしれない</li>
<li>機能制限するバージョンがあるか? → matz: ない、補助輪みたいなものは別のツールでサポートすれば良いのではないか</li>
<li>takao: 実際に使わせている子供達は補助輪を外したがっていたり、Ruby 認定資格を取りたがっていたりする場合もある</li>
<li>CI の実機が足りない問題は解決した? 今日の別の発表で Rails アプリケーションのベンチマークが取れるものが出てきている。Ruby 3x3 のユーザーからのフィードバックは何が必要? →</li>
<li>mame: 速くするパッチが必要 (watoson さんがやっているような)</li>
<li>以前 Mac の CI が足りないとか、ベンチマークが足りないとかいっていたが解決した? → matz: その件についてはだいぶ解決した</li>
<li>hsbt: CI 用のマシンは Ruby Association (RA) 経由である程度手配できるようになったが、 Windows の環境が足りない</li>
<li>Windows Server とか Visual Studio のライセンスを良い感じにする必要がある</li>
<li>matz: benchmark CI?</li>
<li>naruse: watson さんのが欲しい</li>
<li>ko1: RA や日本 Ruby の会経由で CI 用のマシンはなんとかなっている</li>
<li>さらにその上でベンチマークをなんとかしたい</li>
<li>RubyBench というのが何かやっている</li>
<li>watson: 今は個人のマシンで動かしている、自宅にはおきたくない、安定した結果が欲しいので実機が望ましい、足りないベンチマークを増やしたい</li>
<li>ko1: rails とか optcarrot とかだけではなく、これを速くして欲しいというのを提案して欲しい</li>
<li>matz: RA か日本 Ruby の会に寄付してくれると嬉しいが控除などはないのが申し訳ない</li>
<li>shyouhei: パッチを投稿していただくのはありがたいが、敷居が高いなら、雇って書かせるという手がある</li>
<li>Ruby 会議の運営を手伝ってもらえると、手が空いて間接的に、というのもある</li>
<li>hsbt: RubyKaigi 後に回復したら、パフォーマンスベンチを進めたい</li>
<li>matz: 転職活動している人?</li>
<li>ko1: 手があげられないのでは。</li>
<li>ko1: optcarrot と Rails 以外に使っている人?</li>
<li>shugo: テキストエディタが速くなると嬉しい、String が速くなるとうれしい</li>
<li>会場: fluentd</li>
<li>会場: puppet</li>
<li>amatsuda: ハッシュが速くなったので、fluentd が速くなったという話を聞いた</li>
<li>Q(ujm): Ruby, C, Streem, Emacs Lisp 以外に好きな言語?</li>
<li>matz: Swift, Clojure</li>
<li>mame: OCaml, Haskell?</li>
<li>takano: Smalltalk</li>
<li>akr: coq</li>
<li>nobu: FORTH</li>
<li>mrkn: julia</li>
<li>ko1: Ruby は好きだけど不満があるから直したい人が壇上には多いのでは</li>
<li>Q: インスピレーションの源になっているのは何?</li>
<li>matz: Lisp からたくさん、今後もたぶん、最近 2.0 の method prepend は CLOS のメソッドコンビネーション</li>
<li>takano: Lisp のマクロが羨ましい</li>
<li>mrkn: julia 推し</li>
<li><code>transform_keys</code> は Active Support (AS) と挙動は同じ? → nobu: 同じはず、<code>Hash#slice</code> も同様</li>
<li>amatsuda: 使い勝手は変わらないが、C実装になるのでちょっと速くなる</li>
<li>AS のようなものをどんどん入れる?</li>
<li>matz: 全部入れる気はないが、use case などでちゃんと説得してもらえば入る可能性はある、AS に入っているからという理由で入ることはない</li>
<li>amatsuda: AS は Web では便利だが、汎用的に入れるものかどうかは疑問</li>
<li>ko1: 年単位で議論して入ったものもある (入らなかったものもある)</li>
<li>amatsuda: 違う仕様で入ったものもある、 <code>Array#sum</code> とか</li>
<li>mrkn: Cで書くと float の誤差が改善されるということで、そういう実装が入った</li>
</ul>


<h2>懇親会</h2>

<p>食べ物の列は待っていれば短くなるかなと思って、話をしながら待っていたらそんなことはなかったので、並んでみたらギリギリ少し残っていたのが食べられて、その後で野菜が残っているのをみつけたのでそれを食べたりしていたので、全然食べられないということはなかったので、二次会には行きませんでした。</p>

<p>明日の懇親会と違って、オフィシャルパーティーはみんな集まっているので、複数人で話したいこと(<a href="https://bugs.ruby-lang.org/issues/13904">getter for original information of Enumerator</a>の件)は、この日のうちに話しておくべきだと思ったのですが、集められなかったので無理でした。後から確認したら、頑張って英語で書いたおかげで代わりにメンテナーを説得しようとしてくれる人がいて、結果的には大丈夫そうです。いいたかったのも、直接は関係がないので mrkn さんとかに説得を頑張って欲しいと言いたかっただけぐらいなので、明日以降に個別に言っておいても良いかもしれないと思いました。</p>
]]></content>
  </entry>
  
</feed>
