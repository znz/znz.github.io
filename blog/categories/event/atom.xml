<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: event | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/event/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2016-08-30T23:34:20+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LLoTに参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-08-27-llot.html"/>
    <updated>2016-08-27T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/llot</id>
    <content type="html"><![CDATA[<p>初回から毎年参加している LL イベントの <a href="http://ll.jus.or.jp/2016/" title="LLoT – Lightweight Language of Things">LLoT – Lightweight Language of Things</a> に今年も参加しました。</p>

<p>今回は昼と夜の2部開催ということで、初の2部開催だった<a href="http://ll.jus.or.jp/2005/" title="LLDN">LLDN</a>のTシャツを着て行きました。</p>

<!--more-->


<p>以下はそのメモです。</p>

<h2>開会</h2>

<p>時間が厳しいということで手短に説明をして始まりました。</p>

<h2>Language Update</h2>

<p>これも時間が短いのか、どんどん進んでいきました。</p>

<h3>Java Update</h3>

<ul>
<li><a href="http://www.slideshare.net/torutk/llot2016-java-update">http://www.slideshare.net/torutk/llot2016-java-update</a></li>
<li>Java の紹介</li>
<li>Java の歴史</li>
<li>10 年に一度大きな変更 : 2004 ジェネリクス、2014 ラムダ式</li>
<li>Java の近況</li>
<li>Java Update - Java SE 8</li>
<li>ラムダ式</li>
<li>インタフェースへの実装</li>
<li>static メソッドの実装、default メソッドの実装</li>
<li>メリット: 既存のインタフェースにメソッドを追加しても壊れない</li>
<li>JavaFX 8</li>
<li>Java SE 9 と LL との関係は時間の関係で省略</li>
</ul>


<h3>Language Update PHP 編</h3>

<ul>
<li><a href="http://www.slideshare.net/hnw/laungage-update-php">http://www.slideshare.net/hnw/laungage-update-php</a></li>
<li>近頃の PHP 界隈</li>
<li>トピック 1: PHP 7 速いよ!</li>
<li>10年ぶりのメジャーバージョンアップ</li>
<li>他の言語ならマイナーバージョンアップ相当</li>
<li>内部実装の大変更・高速化</li>
<li>広報互換性は原則維持</li>
<li>何を高速化したのか?</li>
<li>特徴的だった取り組み</li>
<li>WordPress をベンチマーク対象として高速化を進めた</li>
<li>高速化チームに一定の裁量を渡した</li>
<li>PHP 7 の性能</li>
<li>高速化って必要だったの?</li>
<li>Facebook 製の別実装 (HHVM) が倍以上高速だった</li>
<li>データ構造を見直す良い機会だった</li>
<li>トピック 2: PHP 7.1 リリースへ</li>
<li>2016 年 12 月頃 PHP 7.1.0 リリース予定</li>
<li>目立った変更点</li>
<li>トピック 3: エコシステム定着</li>
<li>ここ数年で Composer の利用が定着</li>
<li>参加者を増やしつつ破綻しない仕組み</li>
<li>「ユーザー名/パッケージ名」で登録</li>
<li>対応する GitHub/BitBucket の URL を登録する</li>
<li>トピック 4: 開発支援環境の普及</li>
<li>IDE、特に PhpStorm 利用者が増えている印象</li>
<li>トピック 5: 他の言語の「普通」を採用</li>
<li>トピック 6: 地方コミュニティ活性化</li>
<li>PHPカンファレンスが日本各地で開催 (2016年は4箇所)</li>
</ul>


<h3>Perl Language Update</h3>

<ul>
<li>Perl 6 クリスマスバージョン</li>
<li>Rakudo Perl 6</li>
<li>Rakudo の実行環境</li>
<li>長年 Perl 6 の土台となってきた Parrot はついに完全引退</li>
<li>Rakudo Star</li>
<li>四半期に一度くらいのペースでリリースが続いている</li>
<li>Perl 5 の近況</li>
<li>地味に更新が続いている</li>
<li>Perl 5.14 で実験的に導入された auto deref が削除</li>
<li>5.20 で実験的に導入された postderef 機能が正式化</li>
<li><code>@{$arrayref}</code> -> <code>$arrayref-&gt;@*</code></li>
<li><code>%{$hashref}</code> -> <code>$hashref-&gt;%*</code></li>
<li>YAPC::Hokkaido 2016</li>
<li><a href="http://yapcjapan.org/2016hokkaido/">http://yapcjapan.org/2016hokkaido/</a></li>
</ul>


<h3>Python の今、ぶっちゃけ</h3>

<ul>
<li><a href="http://www.slideshare.net/hirokiky/llot-python-65410202">http://www.slideshare.net/hirokiky/llot-python-65410202</a></li>
<li>Type Hinting : 型ヒント</li>
<li>Python 標準で型を明記できる</li>
<li>Python 自体は制約を与えない</li>
<li>IDE などが利用する</li>
</ul>


<pre><code>def add(a: int, b: int) -&gt; int:
    return a + b
</code></pre>

<ul>
<li>typing モジュール</li>
<li>Python 3.5 で追加された</li>
<li>Python 3.2~3.4 では php install typing すれば良い</li>
<li>他 Python 3.5</li>
<li>async (async def, async for…), await 構文</li>
<li>行列計算演算子 <code>@</code></li>
<li>Python 3 を使っているか - 使っている</li>
<li>Python 2,3 議論は終わった</li>
<li>Python 3 に対応していないライブラリーはない</li>
<li>さっさと移行しろフェーズ</li>
<li>環境まわり</li>
<li>pip が標準でインストールされる</li>
<li>pyvenv も標準でインストールされる</li>
<li>どうやっているか</li>
<li>公式 Mac バイナリーしか使わない : python.org</li>
<li>パッチバージョン何でも良い</li>
<li>周辺の話</li>
<li>データ系が多い話</li>
<li>Django</li>
</ul>


<h3>Language Update JS</h3>

<ul>
<li><a href="http://www.slideshare.net/teppeis/javascript-language-update-2016-llot">http://www.slideshare.net/teppeis/javascript-language-update-2016-llot</a></li>
<li>周辺の話が多すぎるので、言語仕様の話だけ</li>
<li>ECMAScript</li>
<li>ES2015</li>
<li>5年ぶりの大きな変更</li>
<li>WEB+DB PRESS 87 参照</li>
<li>ES6 compat-table score</li>
<li>ES2016</li>
<li>2016/6/14 公開</li>
<li>新機能は2つだけ</li>
<li>Array.prototype.includes</li>
<li>Exponentiation Operator</li>
<li>新しい仕様策定プロセス</li>
<li>仕様提案を 5 段階の Stage で管理</li>
<li>最終 Stage に到達した仕様をまとめて、毎年6月にES20XXとしてリリース</li>
<li>最終 Stage に進むには2つの実装が必要</li>
<li>GitHub でオープンに議論</li>
<li>もはや言語バージョンは無意味</li>
<li>&ldquo;ES20XX&rdquo; みたいなバージョンは意味が薄い</li>
<li>個別機能の Stage や実装状況が重要</li>
<li>compat-table を見ておこう</li>
<li>ES2017</li>
<li>Async Functions</li>
<li>ES6 Modules</li>
<li>大激論中</li>
<li>ES6 ではシンタックスのみを仕様化</li>
<li>実装はまだまだこれから</li>
</ul>


<h3>最近の Ruby</h3>

<ul>
<li>Ruby 最新情報</li>
<li>RubyKaigi 2016</li>
<li>安定版 : Ruby 2.3.1</li>
<li>現在開発中の Ruby 2.4.0</li>
<li>基本的に地味</li>
<li>派手な奴は 3.0 に期待</li>
<li>Ruby 2.4 の変更点</li>
<li>Fixnum と Bignum が Integer に統合</li>
<li>内部実装の違いという見せ方に変わる</li>
<li>普通に利用している分にはあまり問題にならない</li>
<li>C拡張ライブラリが死ぬ</li>
<li>現状では即死するようになっている</li>
<li>2.4.0 リリース時には?</li>
<li>String#{downcase,upcase,capitalize} の Unicode 対応</li>
<li>今までは ASCII の範囲内では正しく動作</li>
<li>広く Unicode に対応できるように</li>
<li>後置 rescue の構文</li>
<li>a = Date.parse &ldquo;foo&rdquo; rescue nil</li>
<li>a = Date.parse(&ldquo;foo&rdquo;) rescue nil</li>
<li>Enumerable#sum, Array#sum</li>
<li>今までは各種ライブラリ側で実装</li>
<li>2.4 で標準</li>
<li>浮動小数点演算で誤差がたまらない実装を採用</li>
<li>Array#inject(:+) だと誤差がたまるので注意</li>
<li>Regexp#match? の導入</li>
<li>CGI.unescape 高速化</li>
<li>スレッド内での例外処理の向上</li>
<li>細かい高速化</li>
<li>今後の予定</li>
<li>2016/9 Preview 2</li>
<li>2016/11 Preview 3</li>
<li>2016/12 RC</li>
<li>2016/12/25 リリース</li>
<li>他実装の話</li>
<li>JRuby</li>
<li>JRuby 9000 (9.1.2.0)</li>
<li>Rubinius</li>
<li>Rubinius 3.56</li>
<li>Rubinius X</li>
<li>mruby</li>
<li>mruby 1.2.0 (2015/11/18)</li>
<li>mrbgems</li>
<li>mruby CLI</li>
<li>H2O に組み込まれた</li>
<li>Opal</li>
<li>AltJS</li>
<li>Opal v0.10.1</li>
<li>Playground / TryRuby v4</li>
</ul>


<p>後置 rescue の件は変更が入った時に、<code>p(1 if true)</code> みたいなのが通らない (引数は文ではなく <code>p((1 if true))</code> のように式にしないといけない) のと同じように (使いにくい) 仕様だと思っていたので、ちょっと驚いた覚えがあります。</p>

<p>夜の部の時に聞いたのですが、 Ruby/Tk が gem として外だしされ、開発場所が <a href="https://github.com/ruby/tk">https://github.com/ruby/tk</a> になり、 ruby 本体のレポジトリから削除されたという話が抜けていたそうです。</p>

<p>openssl も <a href="https://github.com/ruby/openssl">https://github.com/ruby/openssl</a> で開発が進んでいますが、 ruby 本体のレポジトリでの扱いはどうなるんでしょうか。
rake や Ruby/Tk みたいに削除されて gems/bundled_gems に入るのか、 rubygems や rdoc のように gem になるけど ruby 本体のレポジトリにも適宜取り込んでいくのか。
多分後者だと思っているのですが。</p>

<h2>キーボードにこだわろう</h2>

<ul>
<li>どのくらいキーボードにお金をかけているか会場にアンケート</li>
<li>0円 (ノートPC のそのままなど) から数万円までどの価格帯でもそれなり。</li>
<li>5万円以上はさすがにいなかった。</li>
<li>登壇者紹介</li>
</ul>


<blockquote><p>アメリカ西部のカウボーイたちは、馬が死ぬと馬はそこに残していくが、どんなに砂漠を歩こうとも、鞍は自分で担いで往く。馬は消耗品であり、鞍は自分の体に馴染んだインタフェースだからだ。
いまやパソコンは消耗品であり、キーボードは大切な、生涯使えるインタフェースであることを忘れてはいけない。
［東京大学 名誉教授 和田英一］</p></blockquote>

<ul>
<li>PFU 無刻印の話など</li>
<li>RealForce の歴史</li>
<li>1981 キーボード試作機完成</li>
<li>2000 リアルフォース発売</li>
<li>2012 リアルフォース10周年</li>
<li>(なぜか12年なのに10周年)</li>
<li><p>金融向けなどの専用キーボードのノウハウをリアルフォースに活用</p></li>
<li><p>とあるギークのキーボード遍歴</p></li>
<li>作業環境</li>
<li>キーボード: ErgoDox, ErgoDox EZ, ノート PC 付属 (US 配列)</li>
<li>2000年まではあまり高価でないフルサイズキーボード</li>
<li>2000年〜2004年頃 会社マシンのキーボード</li>
<li>2004年頃 Happy Hacking Keyboard Professional</li>
<li>静電容量無接点方式</li>
<li>タイピングが軽いというのを重視していて、コンパクトでキーが少ないことには興味がなかった</li>
<li>2006年頃 ストレートネック</li>
<li>2011年頃 Realforce 87UB</li>
<li>ファンクションキーが欲しい</li>
<li>KDE ではグローバルショートカットを多用</li>
<li>カーソルキーも欲しい</li>
<li>静電容量無接点方式でファンクションキーのついている、テンキーのないキーボードとして Realforce 87UB</li>
<li>2015年〜 ErgoDox + ErgoDox EZ</li>
<li>セパレートによるリラックスした姿勢</li>
<li>HHK Pro や Realforce は良いキーボードだが、長時間タイプすると肩や腕が疲れる</li>
<li>手首の角度</li>
<li>水平ではなくろくろの角度が自然</li>
<li>親指の活用</li>
<li>ErgoDox では左右 6 (8?) つずつ</li>
<li>究極のカスタマイズ性</li>
<li>すべてのキーをカスタマイズ可能</li>
<li>ErgoDox Configurator</li>
<li>全ての指に負担を分散</li>
<li>レイヤー機能</li>
<li>キー数が足りない分はレイヤーで補う</li>
<li><p>カスタマイズは永遠に続く</p></li>
<li><p><a href="http://www.topre.co.jp/products/elec/keyboards/features.html">http://www.topre.co.jp/products/elec/keyboards/features.html</a> の 入力部の構造 の説明</p></li>
<li>部品の写真で説明</li>
<li>入力部の構造 の下の 荷重特性 の話</li>
<li>キーボード配列が斜めにずれているのはタイプライターのハンマーが重ならないようにしていたのが由来</li>
<li>ErgoDox のセパレートの話</li>
<li>某大学教授は HHKB 2台で&#8221;エルゴノミック&#8221;</li>
<li>Kinesis の縦に並んでいるのは最初は違和感があったが慣れたら他のキーボードとの使い分けも問題なくなった</li>
<li>親指でシフトキーの話</li>
<li>Kinesis は凹んでいるが逆に山になっているキーボードを使ったことがある人はいるかというアンケートをしてみたら、いなさそうだった。</li>
<li><p>ErgoDox でレイヤー切り替えを親指で、数字キーのところがレイヤーが切り替わるとファンクションキーになるようにしている話</p></li>
<li><p>ハードウェアよりの話に戻す</p></li>
<li>ロールオーバーの話</li>
<li>USB の規格で制限がある</li>
<li>ロールオーバーというのはキーの同時押しのときの話</li>
<li>キートップの材質の話</li>
<li>輪島塗で 50 万円の世界一高いキーボード</li>
<li><p>フットペダルの話は時間がないので省略</p></li>
<li><p>会場から質問タイム</p></li>
<li>耐久性の話があったが、使い込めば手になじむというのはどうなのかという話</li>
<li>貴重な意見をありがとうございます</li>
<li>人間の方が訓練されているのではないかという説</li>
<li>左手のみとか右手のみとかの話</li>
<li>ErgoDox の USB チップのメーカーがなんとか (よくわからなかった)</li>
<li>Dvorak 配列は片手用がある</li>
<li>無刻印の日本語キーボードが欲しいという話</li>
<li>HHKB はキートップも別買いできるという返答</li>
<li>ErgoDox を使うとき、肘は固定しているのかという話</li>
<li>パームは固定しているが、肘は固定してない</li>
<li>アームレストにはバナナがちょうどいいらしいです。 <a href="https://twitter.com/MiUKi_None/status/733594800608305152">https://twitter.com/MiUKi_None/status/733594800608305152</a></li>
</ul>


<h2>昼休み</h2>

<div style="float:right">
<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4274219151&amp;linkId=6592721f04587dcd0524636667beb5a4"></iframe>
</div>


<ul>
<li>この時間に 3F に T シャツ引換に行きました。</li>
<li>「<a href="http://amzn.to/2bUWNxg">プログラミングElixir</a>」を買いました。消費税分割引で 2,800 円でした。</li>
<li>さくらのクラウドのクーポン (2万円分) をもらいました。今まで何度も使う前に失効させてしまっているので、今度こそちゃんと使いたいと思いました。</li>
<li>フォーチューンクッキーをもらったら、これもさくらインターネットのものでした。</li>
</ul>


<h2>Dynamic Typing 再考</h2>

<ul>
<li>登壇者紹介</li>
<li>各言語の詳しい人</li>
<li>再考 は 最高 とかけている</li>
<li>動的型付けとは何か</li>
<li><a href="http://amzn.to/2bObH9O">TAPL こと型システム入門</a></li>
</ul>


<blockquote><p>「動的型付けされる」といった言い回しは 誤っているといって差し支えなく、おそらく「動的検査される」と言い換えるべきであるが、標準的に使われる用語法である。
型システム入門 2 ページより引用</p></blockquote>

<ul>
<li>静的型付け vs 動的型付け</li>
<li>Lightweight Language</li>
<li>もともとは Dynamic Language だった</li>
<li>1980年代: 動的 (Smalltalk)</li>
<li>1990年代: 静的 (C++, Java)</li>
<li>2000年代: 動的 (LL, Objective-C)</li>
<li>2010年代: 静的 (Scala, Go, Swift, Kotlin)</li>
<li>2020年代: ????</li>
<li>どちらが良いのか?</li>
<li>結局好みの問題になる</li>
<li>現代の動的型付け言語: JavaScript, Ruby, Smalltalk</li>
<li>Dynamic Typing 再考 JavaScript 編</li>
<li>AltJS 乱世の生き残りは『型』</li>
<li>TypeScript (MS), Flowtype (Facebook), Closure Compiler (Google)</li>
<li>背景</li>
<li>他の便利機能は ES6 で満足された</li>
<li>JavaScript での大規模開発が一般的に</li>
<li>ブラウザでは JS 以外の選択肢がない</li>
<li>型の付け方</li>
<li>TypeScript: 後置型修飾</li>
<li>Closure Compiler: JSDoc</li>
<li>Flowtype: 後置型修飾 or 独自コメント</li>
<li>どれも JavaScript に変換が必要</li>
<li>Status of Static Typing in ECMAScript <a href="https://ecmascript-daily.github.io/pages/status-of-static-typing-in-ecmascript/">https://ecmascript-daily.github.io/pages/status-of-static-typing-in-ecmascript/</a></li>
<li>どれも午前中の説明で出てきた Stage 0 で終了している</li>
<li>TypeScript は言語、 Closure Compiler と Flowtype はチェックツール</li>
<li>ECMAScript 4 での失敗があるので後方互換性に問題のある変更は入りにくそう</li>
<li>もともと型定義がないので、ライブラリで困る</li>
<li>TypeScript はコミュニティベースで頑張っている</li>
<li>Flowtype などは互換性がないので TypeScript の資産は流用できない</li>
<li>TypeScript の型定義はライブラリによって品質がバラバラ、ライブラリのバージョンアップに弱い</li>
<li>Flowtype はライブラリごと再開発している</li>
<li>jQuery ぐらいメジャーだとどれでも対応しているが power assert ぐらいだと微妙</li>
<li>標準ライブラリや DOM は割と明確に型が決まっている</li>
<li>完全に動的なものだと型付けがあまり役に立たない</li>
<li>ES6 で class が入ったので型付けに優しくなっている</li>
<li>まつもとさん: JavaScript のようにみんなでやっていると意思の統一が難しそう</li>
<li>梅澤さん: JavaScript 関連については今は様子見中</li>
<li>TypeScript は一定のレベルにきた感じ</li>
<li>まつもとさん</li>
<li>80年代は Smalltalk や Lisp のような動的なものしかなかった</li>
<li>C++ や Java やリスコフの置換原則などがでてきた</li>
<li>DRY 原則</li>
<li>duck typing</li>
<li>型を書かなくてもプログラムは動く</li>
<li>動いているプログラムに型を書くのは冗長で DRY 原則に反する</li>
<li>IO クラスと書いてしまうと IO のサブクラスではない IO のふりをするオブジェクトを渡せなくなる</li>
<li>未来に対する可能性を閉じない</li>
<li>静的型と動的型の振り子は20年周期ぐらいと感じている</li>
<li>Ruby 3 は構想中</li>
<li>静的な型チェックは入れたい</li>
<li>ポリシーは絶対に型を書きたくない</li>
<li>具体的な型を書くというのは脳の負荷が高いので Lightweight (Language) ではない</li>
<li>コンパイラが矛盾を指摘してくれるようにしたい</li>
<li>ライブラリはテストを書くはずなので、その実行時の情報を蓄積すれば IDE の補助やコンパイル時の型チェックに使えるのではないか</li>
<li>1.8 から 1.9 の非互換があったがみんな移行してくれた、 3 倍ぐらい高速化していたからではないか (ベンチマークによっては 50 倍ぐらい)</li>
<li>実装はまだ</li>
<li>Erlang のダイアライザーではコメントで書くものを実行時の情報でやろうとしている</li>
<li>普通に書かせると nominal typing になるが structual typing にしたい</li>
<li>String と書くと String のメソッドすべてを実装しないと通らないとかいうのは避けたい</li>
<li>梅澤さん: Smalltalk の話に似ている部分があった (型は書きたくないという感じ)</li>
<li>Smalltalk 80 よりも Smalltalk 76 の方が Ruby に似ている</li>
<li>梅澤さん</li>
<li>Smalltalk とは</li>
<li>ミニマリズムの言語</li>
<li>すべてはオブジェクト</li>
<li>オブジェクトがメッセージ送信する</li>
<li>の2つのみで成り立つ</li>
<li>プログラミング言語の壁</li>
<li>使う人、作る人、言語を作る人</li>
<li>Smalltalk には上の区別がない</li>
<li>自由の世界の重要性</li>
<li>デモ: <a href="http://www.slideshare.net/umejava/multilines">http://www.slideshare.net/umejava/multilines</a></li>
<li><a href="http://www.slideshare.net/umejava/supersupersubsub">http://www.slideshare.net/umejava/supersupersubsub</a> は時間がないので省略</li>
<li>静的型の導入</li>
<li>Typed Smalltalk (1988)</li>
<li>StrongTalk (1993)</li>
<li>SmallInterfaces (2000)</li>
<li>Gradualtalk (2014)</li>
<li>産業界では実のところあまり困っていない</li>
<li>オブジェクトが答えてくれる</li>
<li>ALLSTOCKER.com by SORABITO</li>
<li>バックエンドは Smalltalk でフロントエンドは JavaScript を普通に書いている</li>
<li>関係ないけど SqueakJS というのもあるという紹介</li>
<li>会場から質問 (1個だけ)</li>
<li>型はプログラマの意図を伝えるもの、動的型ではユニットテストが相当するのではないか、DRY 原則との関連はどうか</li>
<li>まつもとさん: テストも本当は書きたくないが、必要悪として書いている</li>
</ul>


<h2>休憩</h2>

<ul>
<li>T シャツの引き換えやキーボードの展示などの 3F はこの時間まで</li>
</ul>


<h2>Kotlin vs Swift</h2>

<ul>
<li><p>新言語はモバイル開発をどう変えるか</p></li>
<li><p>言語仕様や特長, 開発者へのメリット</p></li>
<li>Kotlin</li>
<li>そもそも Kotlin とは? Better Java</li>
<li>Kotlin の特徴: 簡単, Interop, Android, 安全</li>
<li>簡単: クラスとプロパティ</li>
<li>簡単: データクラス</li>
<li>簡単: 拡張関数</li>
<li>安全: Null安全</li>
<li>モバイル開発者にとってのメリット: Interop, Android, 効率</li>
<li>Swift</li>
<li><a href="https://github.com/kishikawakatsumi/KeychainAccess">https://github.com/kishikawakatsumi/KeychainAccess</a></li>
<li>Swift とは?</li>
<li>2014年のWWDCで発表された</li>
<li>C, Objective-C と極めて高い互換性がある</li>
<li>2015年からオープンソース</li>
<li>Swift の言語仕様や特長</li>
<li>Statically typed</li>
<li>Strongly typed</li>
<li>動的な性質はほとんどない</li>
<li>動的な性質が使いたい場合は Objective-C ランタイムを使う</li>
<li>No Garbage Collections</li>
<li>Playground (超すごい REPL)</li>
<li>型安全</li>
<li>Statically typed</li>
<li>Strongly typed</li>
<li>Casting (<code>as?</code>)</li>
<li>Optional Type</li>
<li>モダンな言語仕様</li>
<li>Type Inference (型推論)</li>
<li>Optional Type</li>
<li>Generics</li>
<li>Pattern Matching</li>
<li>First-class functions</li>
<li>Operator Overloading</li>
<li>Protocol Extensions</li>
<li>Open Source</li>
<li>IBM Swift Sandbox</li>
<li>Serverside Swift</li>
<li>Swift Evolution</li>
<li>基本データ型</li>
<li>No GC!</li>
<li>Automatic Reference Counting (ARC)</li>
<li>循環参照が解放できない</li>
<li>オブジェクトの解放が予測可能</li>
<li><p>Playground (超すごい REPL) はあとで</p></li>
<li><p>会場アンケート</p></li>
<li>Kotlin 使っている方: いない?</li>
<li>Swift 使っている方: 少ない?</li>
<li>Objective-C 使っている方: 少ない?</li>
<li><p>モバイル開発している方: そもそも少ない?</p></li>
<li><p>注意点や落とし穴</p></li>
<li>Kotlin</li>
<li>Java用ツールやフレームワークまわり</li>
<li>Kotlin コードのコンパイル後の姿を想像するスキルが求められる</li>
<li>例えば JUnit</li>
<li>static field に <code>@DataPoints</code> をつけたい</li>
<li>companion object と <code>@JvmField</code> を使う</li>
<li>Swift</li>
<li>ソースコード・バイナリ互換性</li>
<li>Swift のバージョンアップに対応するのが大変</li>
<li>50M ぐらいのランタイムをみんな抱えている</li>
<li>コンパイラの安定性</li>
<li>Segmentation Fault: 11</li>
<li><a href="https://github.com/practicalswift/swift-compiler-crashes">https://github.com/practicalswift/swift-compiler-crashes</a></li>
<li>コンパイラが検出しない変更</li>
<li>エラーメッセージがわかりにくい</li>
<li><p>リファクタリング機能がまだない</p></li>
<li><p>今後のバージョンアップ</p></li>
<li>Kotlin</li>
<li>バージョン1.1で追加予定の機能</li>
<li>コルーチン、型エイリアス、Bound Callable Reference, etc.</li>
<li>Swift 3</li>
<li>API デザインガイドライン</li>
<li>Objective-C API との親和性 (より Swift らしく)</li>
<li>構文における一貫性の向上</li>
<li>ツールチェーンの安定化</li>
<li>パフォーマンス</li>
<li>メッセージの改善</li>
<li>Swift 3.x (Spring 2017), Swift 4 (Fall 2017)</li>
<li>Source/ABI 安定化</li>
<li>品質とパフォーマンスの向上</li>
<li>Generics の高機能化</li>
<li>Memory ownership model</li>
<li>並列プログラミングモデル</li>
<li>Reflection</li>
<li><p>C++</p></li>
<li><p>フリートーク</p></li>
<li>Swift で Objective-C を嫌がっていた Web フロントエンド開発者が iOS アプリも開発してくれるようになった。</li>
<li>Kotlin でコード量が減った。コレクション操作とかサードパーティライブラリなどが不要になった。 Null の扱いに安心感がある。</li>
<li>会場から</li>
<li>Kotlin の IDE は? Java だと Android Studio</li>
<li>Android Studio に Kotlin のプラグインがある。</li>
<li>IntelliJ IDEA</li>
<li>Swift と C/Objective-C との親和性。ダブルポインタ(?)で困った。</li>
<li>回答聞き取れず</li>
<li>Kotlin と Swift との関係性。 iOS と Android の両対応したいときとか。</li>
<li>GUI のフレームワークの思想やコンセプトが違いすぎるので、両方やるのが無難</li>
<li>どちらもサーバー側もできる。たとえば Kotlin は Servlet とかもできる。</li>
<li>Swift のサーバー側はまだ厳しい。 Objective-C のランタイムのない環境はまだまだ。</li>
<li>両対応するために JavaScript という選択肢もあるが、どちらにしろ茨の道</li>
<li>Playground の話</li>
<li>iOS 10 から iPad でも動く</li>
<li>iPad の Playground のデモ</li>
<li>補完とかもしっかり動く</li>
<li>Drag and Drop で編集とか</li>
</ul>


<h2>抽選</h2>

<ul>
<li>恒例のボール投げ</li>
<li>今年はもらえなかった</li>
</ul>


<h2>エンディング</h2>

<ul>
<li>恒例の会場の写真などが入っていて当日作成されたビデオ上映</li>
<li>アンケートのお願い <a href="http://ll.jus.or.jp/2016/enquete">http://ll.jus.or.jp/2016/enquete</a></li>
</ul>


<h1>LLoT Night</h1>

<p>会場が地下ということもあり、電波が入らなかったのと、食事中ということもありメモがとれませんでした。</p>

<h2>フロントエンドだめ自慢</h2>

<ul>
<li>React.js と Riot.js の話でした。</li>
<li><a href="https://speakerdeck.com/cognitom/llot-night-riot-dot-js">https://speakerdeck.com/cognitom/llot-night-riot-dot-js</a></li>
<li>Riot.js は Qiita の記事で見たことがあると言う程度だったので、会場に Riot.js を知っている人という問いかけがあったときに一応手をあげました。</li>
<li>Riot.js はコアコミッターが砂漠に消えたという話が印象深かったです。</li>
<li>Riot.js はコンパイラが正規表現ということで、若干の不安を感じます。</li>
<li>Riot.js の innerHTML を使っているというのは、どういう点がダメなのかわかりませんでした。</li>
<li>React の方はどういう話だったのか思い出せませんでした。(資料公開待ち)</li>
</ul>


<h2>帰ってきたデモ自慢</h2>

<h3>5分で出来るIoT</h3>

<p>デモがうまく動かず、結局あらかじめ用意していた動画を流して終了でした。</p>

<h3>プロジェクト°D ﾂﾜﾓﾉどもが夢の跡</h3>

<p>みどころに「昨年のプロジェクト℃の続編」とありましたが、冒頭ではどいういう話か思い出せませんでしたが、内容を聞けばそういう話もあったなあと思い出しました。</p>

<p>結局デモはなかった?</p>

<h3>Googleカレンダーで図書館の貸出予約状況を管理するLiblendrsv(Ruby)</h3>

<ul>
<li>本借りすぎじゃないかと法林さんからのツッコミがありましたが、その通りだと思いました。</li>
<li>デモ自体はブラウザーが勝手に動いて面白そうな感じだったが、ウインドウがプロジェクター側にちゃんと出ていなくて、移動させてくる必要があったりして、ちょっと残念な感じでした。</li>
<li><a href="https://github.com/hotuta/Liblendrsv">https://github.com/hotuta/Liblendrsv</a></li>
<li>一貫して Calendar を Calender と間違っているのが気になりました。</li>
<li>pit というパスワードを別途管理するライブラリは存在は知っていたけど、使ったことはないなあと思いました。</li>
</ul>


<h2>エンディング</h2>

<ul>
<li>19:45頃</li>
<li>昼の部と違って音楽のみ</li>
<li>再度アンケートのお願い <a href="http://ll.jus.or.jp/2016/enquete">http://ll.jus.or.jp/2016/enquete</a></li>
<li>会場が 20:00 までなのできりのいいところで帰るようにという話</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO&東海道らぐオフラインミーティング 2016/08/14]]></title>
    <link href="http://blog.n-z.jp/blog/2016-08-14-lilo-tokaidolug.html"/>
    <updated>2016-08-14T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-tokaidolug</id>
    <content type="html"><![CDATA[<p><a href="http://lilo.connpass.com/event/37410/" title="LILO&amp;東海道らぐオフラインミーティング 2016/08/14">LILO&amp;東海道らぐオフラインミーティング 2016/08/14</a> に参加しました。</p>

<p>今回もアンカンファレンス形式でした。</p>

<p><a href="https://www.doorkeeper.jp/news/2016/7/25/change-in-pricing" title="Doorkeeper料金体系の変更について">Doorkeeper料金体系の変更について</a>でアナウンスされたように Doorkeeper が有料化されることに伴い、申し込みは connpass に移行しました。</p>

<!--more-->


<h2>メモ</h2>

<p>今回のメモです。</p>

<ul>
<li>いつものように鍵担当の人が遅れていたが、代理で開けていた</li>
<li>ハッシュタグ: <code>#lilo_jp</code> <code>#東海道らぐ</code></li>
<li>登録参加者数 14名</li>
<li>自己紹介から</li>
<li>最初は自分の発表「lilo.linux.or.jp の話」</li>
<li>「OpenStreetMap で地図を作ろう!」坂ノ下さん</li>
<li>Map Compare というサイトで Google Map と OSM の平安神宮を比較すると、OSMの方が詳しい</li>
<li>JOSM というクライアントで実演</li>
<li>ノード、ウェイ、エリアででできている</li>
<li>誰でも書き込めるし消せるので、悪質なユーザーへの対処は日々行っている</li>
<li><a href="http://wiki.openstreetmap.org/wiki/JA:Map_Features">http://wiki.openstreetmap.org/wiki/JA:Map_Features</a></li>
<li>鳥居のタグの話</li>
<li>どのようにタグをつけるのかは議論しながら決まっている</li>
<li>「IoTハウス」山内さん</li>
<li><a href="http://www.pepolinux.com">http://www.pepolinux.com</a> <a href="https://twitter.com/kujiranodanna">https://twitter.com/kujiranodanna</a></li>
<li>ラズパイで IoT ハウス</li>
<li>Tocos, IRKit</li>
<li>リセッタブルヒューズ</li>
<li>休憩</li>
<li>「お前が持っているLPICってどんなものよ? LPI 304受験報告記」中野さん</li>
<li>事前に公開されていた発表資料: <a href="https://bitbucket.org/itsango/lilo20160814">https://bitbucket.org/itsango/lilo20160814</a></li>
<li>有意性の期限がある</li>
<li>メリット: Linux が使える客観的な証拠になる</li>
<li>デメリット: 高い</li>
<li>304 の参考書: <a href="https://amazon.jp/dp/4844380540">https://amazon.jp/dp/4844380540</a></li>
<li>TOEIC みたいに何か統計処理された採点方式らしい</li>
<li>「Windows 10 タブレットに Ubuntu 16.04 を色々入れてみた 2016 年度版」Kapper さん</li>
<li><a href="http://www.slideshare.net/kapper1224/windows10ubuntu16042016install-ubuntu1604-on-windows10-tablet-63862255">http://www.slideshare.net/kapper1224/windows10ubuntu16042016install-ubuntu1604-on-windows10-tablet-63862255</a></li>
<li>Wubi for Ubuntu 16.04 が公式にタブレット対応</li>
<li>「Yocto を使った Linux Distro の作り方とハマり方」山口さん</li>
<li><a href="https://github.com/watatuki">https://github.com/watatuki</a></li>
<li><a href="https://www.yoctoproject.org/">https://www.yoctoproject.org/</a></li>
<li>たとえていえば Gentoo をクロスビルドにしたようなもの</li>
<li>layer を組み合わせて構成</li>
<li>recipe はソースと 1対1 対応</li>
<li>複数の layer の組み合わせが問題でビルドが通らなくなることがある</li>
<li>Android でおなじみの repo でいい感じできた</li>
<li>例: <a href="https://github.com/watatuki/agl-jetson-tk1">https://github.com/watatuki/agl-jetson-tk1</a></li>
<li>休憩</li>
<li>「TUI作業で便利なソフト2題」島田さん</li>
<li>opencocon の紹介</li>
<li>build server</li>
<li>このごろあった悩み: ファイルツリーを駆け回るのがめんどい</li>
<li>解決法：TUI ファイラー</li>
<li>mc (Midnight Commander)</li>
<li>あんまり慣れてない</li>
<li>Ctrl キー等を多用する</li>
<li>F1-F12 を使わなければならない</li>
<li>tmux とキーバインドが干渉しやすい</li>
<li>他に選択肢がないか?</li>
<li>FDclone</li>
<li>このごろあった悩み: git コマンドをいちいち叩くのがめんどい</li>
<li>tig</li>
<li>「Docker話」左川さん</li>
<li>vagrant で docker を試した話</li>
<li>box ファイルは VirtualBox で普通にインストールして不要なものを削除して作成した。</li>
<li>会場から packer がおすすめという話</li>
<li>さくらインターネットの Arukas はまだ誰も使ったことがない</li>
<li>今回の会場費は余剰金があるので無料になった。</li>
<li>「sedの話」田川さん</li>
<li>sed はプログラミング言語</li>
<li>デバッグオプション <code>-d</code> のある sed</li>
<li>sdb というデバッガをネットワーク経由で接続</li>
<li>「せっかくのプレゼン資料なんだから Git で管理しよう Slides を公開しよう」中野さん</li>
<li>事前に公開されていた資料: <a href="https://bitbucket.org/itsango/vcsforslides">https://bitbucket.org/itsango/vcsforslides</a></li>
<li><a href="http://progit-ja.github.io/">http://progit-ja.github.io/</a></li>
<li><a href="https://ja.wikipedia.org/wiki/OSS%E3%83%9B%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E6%AF%94%E8%BC%83" title="OSSホスティングサービスの比較">OSSホスティングサービスの比較</a></li>
<li>次は冬休みの予定 (その前に k-of.jp にも参加予定)</li>
</ul>


<h2>発表した内容</h2>

<p>lilo.linux.or.jp のサーバーの前回の発表以降の話をしました。</p>

<p>内容は大きく分けると 二要素認証は進捗なし、 letsencrypt の証明書は certbot に変わっても順調に使えている話、 ufw でアタックが多いポートをログに残さないようにした話でした。</p>

<p>スライドはいつも通り <a href="http://slide.rabbit-shocker.org/authors/znz/lilo-20160814/">Rabbit Slide Show</a> (<a href="https://rubygems.org/gems/rabbit-slide-znz-lilo-20160814">RubyGems</a>), <a href="http://www.slideshare.net/znzjp/lilo-20160814">SlideShare</a>, <a href="https://speakerdeck.com/znz/lilo-dot-linux-dot-or-dot-jp-falsehua">Speaker Deck</a> にあげています。(ソースは <a href="https://github.com/znz/lilo-20160814">github</a> にあげています。)
(しかし、2016-08-14現在 slide.rabbit-shocker.org (Rabbit Slide Show) には反映されていないようなので、 SlideShare か Speaker Deck でみてください。)
(2016-08-16現在、反映されたので Rabbit Slide Show でも見えるようになりました。)</p>

<iframe src="http://slide.rabbit-shocker.org/authors/znz/lilo-20160814/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="http://slide.rabbit-shocker.org/authors/znz/lilo-20160814/" title="lilo.linux.or.jp の話">lilo.linux.or.jp の話</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[6月12日 APIデザインケーススタディ読書会 第1回に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-06-12-amagasakirb.html"/>
    <updated>2016-06-12T12:55:16+09:00</updated>
    <id>http://blog.n-z.jp/blog/amagasakirb</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/event/index/395115/" title="6月12日 APIデザインケーススタディ読書会 第1回">6月12日 APIデザインケーススタディ読書会 第1回</a>
に参加しました。
今回は第 1,2 章でした。</p>

<!--more-->




<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4774178020" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>以下、今回のメモです。</p>

<ul>
<li>今回は本町駅近くでした。</li>
<li>ソケット関連のメソッド名の末尾につく <code>_in</code> は internet の in (unix socket などではないという意味)</li>
<li><code>gets</code>, <code>read</code>, <code>readpartial</code>, <code>read_nonblock</code> などを使い分けるユーザーはあんまりいなさそう</li>
<li>ネットワーク系の話から IRC とか net send とか msg.exe とか</li>
<li>ハッピーターンズの話、ハッピーパウダーを増量しているものがある話</li>
<li>Ruby の socket が便利になっている話</li>
<li>今の時代自分で直接ソケットプログラミングすることは少なそうという話</li>
<li>HULFT</li>
<li>全銀フォーマットの話</li>
<li>Encoding::IBM037 (alias ebcdic-cp-us; dummy) が ruby 2.3.0 から入っている話</li>
<li><code>recvmsg</code> と <code>sendmsg</code> の話</li>
<li>エコーネットとか独自規格のプロトコルを使うのには役に立つかも、という話</li>
<li><a href="https://github.com/SonyCSL/OpenECHO">https://github.com/SonyCSL/OpenECHO</a></li>
<li><code>PLC</code> は廃れてしまったという話</li>
<li>もっと良いタイトルがあったのではないかという話</li>
<li>懇親会も同じ場所という話</li>
<li><a href="https://rubykansai.doorkeeper.jp/events/46880" title="【発表者向け】 第73回 Ruby関西 勉強会 発表者募集">【発表者向け】 第73回 Ruby関西 勉強会 発表者募集</a> の話</li>
<li>寿司はダメな人がいるので、ピザが定番という話</li>
<li>会場提供者から <a href="https://sou-meetup.doorkeeper.jp/" title="SOU meetup">SOU meetup</a> などの話</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第72回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-05-07-rubykansai72.html"/>
    <updated>2016-05-07T13:42:09+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai72</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/43253" title="第72回 Ruby関西 勉強会">第72回 Ruby関西 勉強会</a>
に参加しました。
アプローズタワーというビルに入るのは初めてだったので、どこから上に上がるのか、ちょっとわかりにくかったです。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>オープニング</h2>

<ul>
<li>会場説明</li>
<li>懇親会は事前に企画していなかったので 15 時ぐらいまでに受付で募集してその状況次第で決定</li>
<li>スポンサーセッション (西谷さん)</li>
</ul>


<h2>低レイヤから考えるrubyプログラミング</h2>

<ul>
<li>よしだあつしさん</li>
<li>自己紹介は時間がないので省略して後で</li>
<li>メモリ上のクラスやオブジェクト</li>
<li>RClass 構造体や RObject 構造体などの説明</li>
<li>ruby のメモリ利用の例</li>
<li>メソッド呼び出し</li>
<li>下のレイヤーを勉強すると理解が深まる</li>
<li>時間があったので自己紹介</li>
<li><a href="https://twitter.com/yalab">https://twitter.com/yalab</a></li>
<li><a href="http://shop.oke-ya.com/">http://shop.oke-ya.com/</a></li>
<li><a href="https://www.makuake.com/project/oke-ya/">https://www.makuake.com/project/oke-ya/</a></li>
<li><a href="https://github.com/yalab">https://github.com/yalab</a></li>
<li><a href="http://www.slideshare.net/yalab/ruby-61765227">低レイヤから見たrubyプログラミング</a></li>
</ul>


<h2>Wakayama.rb発のmrubyボード「GR-CITRUS」の使い方</h2>

<ul>
<li>Wakayama.rb のたろサさん</li>
<li>今は Mac や Windows 8, 10 で動かないので Windows 7 でしか動かない状態 (シリアルのドライバーの問題)</li>
<li>Wakayama.rb の活動報告</li>
<li>GR-CITRUS</li>
<li>ピンク色の基盤</li>
<li>GR = がじぇっとるねさす</li>
<li>CITRUS (シトラス) = 和歌山っぽい名前</li>
<li>秋月電子通商販売予定 (8 月)</li>
<li>GR-CITRUS の使い方</li>
<li><a href="https://github.com/wakayamarb/wrbb-v2lib-firm">https://github.com/wakayamarb/wrbb-v2lib-firm</a></li>
<li>firmware/citrus_sketch.bin を書き込む</li>
<li>開発環境 Rubic</li>
<li>chrome アプリなので簡単インストール</li>
<li>GR-CITRUS のライブラリ紹介</li>
<li>動作デモ</li>
<li><a href="http://www.slideshare.net/MinaoYamamoto/grcitrusruby">GR-CITRUS搭載のRubyファームウェアの説明</a></li>
<li>WA-MIKAN (みかんボード)</li>
<li>WiFi 通信ボード</li>
<li>Linux では動くかどうか試してないのでわからない</li>
</ul>


<h2>休憩</h2>

<ul>
<li><a href="http://railsgirls.com/osaka">Rails Girls Osaka #3</a> 2016年6月18日-19日</li>
<li><a href="http://rubykaigi.org/2016">RubyKaigi 2016</a> 2016年9月8日(木)-10日(土)</li>
</ul>


<h2>今すぐRailsアプリを多言語化してみよう</h2>

<ul>
<li><a href="https://twitter.com/youcune">https://twitter.com/youcune</a></li>
<li><a href="https://youcune.com/">https://youcune.com/</a></li>
<li><a href="http://yurie.sexy">http://yurie.sexy</a></li>
<li><a href="http://ur3.jp/yurie-blog">http://ur3.jp/yurie-blog</a></li>
<li><a href="https://speakerdeck.com/youcune/i18n-your-rails-application">いますぐRailsアプリを英語化してみよう / i18n your Rails application</a></li>
</ul>


<h2>Ruby on Rails もくもく会をほぼ毎週開催してきてわかった事</h2>

<ul>
<li>八木さん</li>
<li>もくもく会開催の経緯</li>
<li>感じたこと</li>
<li>起こったこと</li>
<li>みんなピザが好き</li>
<li>今後やっていきたいこと</li>
<li>なぜ?</li>
<li><a href="https://sou-meetup.doorkeeper.jp/">https://sou-meetup.doorkeeper.jp/</a></li>
</ul>


<h2>Github Pages で独自ドメインのサイトを作る</h2>

<ul>
<li>HDMI で接続できなかったので画面を OHP でうつして表示</li>
<li><a href="https://twitter.com/107steps">https://twitter.com/107steps</a></li>
<li><a href="https://ruby-maizuru.doorkeeper.jp/">Ruby舞鶴</a></li>
<li>Jekyll</li>
<li><a href="https://pages.github.com/">GitHub Pages</a></li>
<li>Google Analytics</li>
<li><a href="https://github.com/masoo/masoo.jp/blob/master/_config.yml#L8"><code>_config.yml</code></a> に変数を作り true の時だけ<a href="https://github.com/masoo/masoo.jp/blob/master/_includes/google_analytics.html">有効にした</a></li>
<li>Cloudflare の導入</li>
<li><a href="https://gtmetrix.com/">https://gtmetrix.com/</a> で B 判定が A 判定に</li>
<li>https 導入</li>
<li>Cloudflare で <a href="https://support.cloudflare.com/hc/en-us/articles/200170416-What-do-the-SSL-options-mean-">flexible SSL</a></li>
<li>Accelerated Mobile Page の対応 (失敗)</li>
<li><a href="https://github.com/juusaw/amp-jekyll">https://github.com/juusaw/amp-jekyll</a></li>
<li><a href="https://jekyllrb.com/docs/plugins/">https://jekyllrb.com/docs/plugins/</a></li>
<li><a href="http://gosyujin.github.io/2013/05/21/jekyll-plugin-githubpages/">GitHub PagesでJekyllプラグインを使えるようにするには…</a></li>
<li><a href="http://107steps.la.coocan.jp/">http://107steps.la.coocan.jp/</a></li>
<li>質疑応答</li>
<li>jekyll の <code>--config</code> オプションで <code>_config.yml</code> の設定を上書き設定できるのを使うのが良いのでは。</li>
<li>jekyll, middleman, Hugo などがある中で jekyll を選んだ理由は?</li>
<li>最初に見かけたのが jekyll だったから</li>
<li>発表資料: <a href="http://www.slideshare.net/107steps/github-pages-61765408">Github pagesで独自ドメインのサイトを作る</a></li>
</ul>


<h2>関西Rubyコミュニティー紹介</h2>

<ul>
<li><a href="https://twitter.com/ogomr">ogomr さん</a></li>
<li><a href="http://rubykansai.github.io/kansai-ruby-community/" title="関西 Ruby コミュニティー 紹介">関西 Ruby コミュニティー 紹介</a></li>
<li><a href="https://github.com/ruby-no-kai/official/wiki/RegionalRubyistMeetUp" title="地域Rubyの会">地域Rubyの会</a></li>
</ul>


<h2>Ruby 初級者向けレッスン - 文字列</h2>

<ul>
<li><a href="https://github.com/higaki/learn_ruby_kansai_72">https://github.com/higaki/learn_ruby_kansai_72</a></li>
</ul>


<h2>クロージング</h2>

<ul>
<li><a href="http://railsgirls.com/osaka">Rails Girls Osaka #3</a> 2016年6月18日-19日</li>
<li><a href="http://rubykaigi.org/2016">RubyKaigi 2016</a> 2016年9月8日(木)-10日(土)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO&東海道らぐオフラインミーティング 2016/05/01 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-05-01-lilo-tokaidolug.html"/>
    <updated>2016-05-01T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-tokaidolug</id>
    <content type="html"><![CDATA[<p><a href="https://lilo.doorkeeper.jp/events/42910" title="LILO&amp;東海道らぐオフラインミーティング 2016/05/01">LILO&amp;東海道らぐオフラインミーティング 2016/05/01</a>
に参加しました。</p>

<p>今回もアンカンファレンス形式でした。</p>

<!--more-->


<h2>メモ</h2>

<p>今回のメモです。</p>

<ul>
<li>いつものように鍵担当の人が遅れていた</li>
<li>ハッシュタグ: <code>#lilo_jp</code> <code>#東海道らぐ</code></li>
<li>登録参加者数 13名</li>
<li>自己紹介から</li>
<li>はしもとさん : 東海道らぐともうひとつの東海道</li>
<li>東海道らぐ 今年で 5 周年目突入</li>
<li>インプットメソッドの話</li>
<li><a href="https://github.com/tkd53">https://github.com/tkd53</a></li>
<li>Genji も方向性が違うので続けるという話</li>
<li>自分の発表</li>
<li>休憩</li>
<li>Kapperさん : シンガポールFossasia2016に初参加してみた</li>
<li>あひる焼き先進国</li>
<li>シンガポール英語とインド英語</li>
<li>マニアックな話が多かった</li>
<li>アンカンファレンス形式は海外ではメジャー</li>
<li>3月はチケット代が高い</li>
<li>京橋ひよわさん : 自宅サーバのトラブルを楽しもう</li>
<li><a href="http://hiyowa.com/">http://hiyowa.com/</a></li>
<li><code>SSLCertificateChainFile</code> がなくなっていたはまった話で nginx は単純に cat で中間証明書を結合すればいけるが apache はダメらしい <a href="http://serverfault.com/questions/588986/sslcertificatechainfile-deprecation-warning-on-apache-2-4-8">http://serverfault.com/questions/588986/sslcertificatechainfile-deprecation-warning-on-apache-2-4-8</a></li>
<li>owncloud はエラー表示が親切</li>
<li>こんどうさん : やりなおし方について</li>
<li>デュアルブートを諦めれば楽</li>
<li>fdisk /mbr とか fixmbr とか</li>
<li>EaseUS Todo Backup で D2D Backup</li>
<li>Windows 10 が勝手にアップグレードする話</li>
<li>UEFI だと ESP パーティションをマウントして Linux のブート情報を消すだけ</li>
<li>おくのさん : 格安モバイルノート PC で Linux</li>
<li>hp Stream 11-d000 の 2 代目モデル</li>
<li>hp Stream 11-r000</li>
<li>Wi-Fi がカニから Intel</li>
<li>Linux Mint 17.3 は Wi-Fi が新しすぎて対応していなかったのでアップグレードが必要だった</li>
<li>Lubuntu 16.04 だと問題なく動いた</li>
<li>DELL New Inspiron 11 3000 シリーズの方が良さそうだったというオチ</li>
<li>休憩</li>
<li>しまださん : このごろの状況</li>
<li>opencocon v9i</li>
<li>Libretto L1 の CD ブート対応</li>
<li>ビルド時間 3 時間の半分は WebKit</li>
<li>opencocon v10</li>
<li>Linux 4.4</li>
<li>uClibc から musl libc に変更</li>
<li>musl libc を採用しているディストリ</li>
<li>標準採用 : Alpine Linux</li>
<li>選択可能 : Gentoo, Buildroot, OpenEmbedded, などなど</li>
<li>ext4 に正式対応</li>
<li>grub-legacy も Arch Linux のパッチで対応</li>
<li>Dynabook AZ + Linux 3.18 〜 を公式サポートする唯一のディストリビューションになる予定</li>
<li>AZ はシンクライアント用途にしてはちょっと高速すぎる?</li>
<li>デスクトップでもいいぐらい</li>
<li>v10 から名前に thinclient が入って opencocon thinclient v10 になる</li>
<li>Allwinner タブレットの話</li>
<li>さとうさん</li>
<li><code>sleep 300; poweroff</code> を実行してから開始</li>
<li>タイムラプス</li>
<li>赤外線カメラと通常のカメラを並べてくっつけて同時に撮影</li>
<li>raspistill で撮影</li>
<li>mencoder で jpg から動画に変換</li>
<li>動画表示デモ</li>
<li>ききょうさん : openSUSE で bot を作ろう</li>
<li>鹿焼き</li>
<li>BotBuilder/Connector/Directly</li>
<li>LILO&amp;東海道らぐの次回は 8 月 (お盆) ぐらいの予定</li>
</ul>


<h2>発表した内容</h2>

<p>このオフラインミーティングのネタのためも兼ねて、 lilo.linux.or.jp のサーバーを wheezy から jessie にあげたので、その話をしました。</p>

<p>内容は大きく分けると jessie にあげた話、二要素認証を導入した話、 letsencrypt の証明書を導入した話でした。</p>

<p>スライドはいつも通り <a href="http://slide.rabbit-shocker.org/authors/znz/lilo-20160501/">Rabbit Slide Show</a> (<a href="https://rubygems.org/gems/rabbit-slide-znz-lilo-20160501">RubyGems</a>), <a href="http://www.slideshare.net/znzjp/lilo-20160501">SlideShare</a>, <a href="https://speakerdeck.com/znz/lilo-dot-linux-dot-or-dot-jp-from-wheezy-to-jessie">Speaker Deck</a> にあげています。</p>

<iframe src="http://slide.rabbit-shocker.org/authors/znz/lilo-20160501/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="http://slide.rabbit-shocker.org/authors/znz/lilo-20160501/" title="lilo.linux.or.jp を wheezy から jessie にあげた話">lilo.linux.or.jp を wheezy から jessie にあげた話</a>
</div>

]]></content>
  </entry>
  
</feed>
