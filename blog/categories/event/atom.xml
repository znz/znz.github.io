<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: event | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/event/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-10-19T23:14:17+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Developers Meetup #6 大阪会場に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-10-19-railsdm.html"/>
    <updated>2017-10-19T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/railsdm</id>
    <content type="html"><![CDATA[<p><a href="https://techplay.jp/event/631426">Rails Developers Meetup #6 大阪会場</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>前回までと同じ場所なので、スムーズに到着することができました。</p>

<h2>オープニング</h2>

<ul>
<li>プログラムの紹介</li>
<li>ハッシュタグは <code>#railsdm</code></li>
</ul>


<h2>Railsエンジニアの交換型インターンシップについて</h2>

<ul>
<li>自己紹介と会社紹介</li>
<li>インターンシップを始めた同機</li>
<li>開発者不足</li>
<li>交換型インターンシップとは何か</li>
<li>プログラミングスクール的な学習週とインターン的な作業週を交互にやる</li>
<li>学習週は 平均3ヶ月 (交互なので6ヶ月) で終わるぐらいのボリューム</li>
<li>作業週</li>
<li>pull request の練習にもなるということで好評</li>
<li>ローカル (学生が多い) とリモート (社会人が多い) がある</li>
<li>シニアインターン: バイトリーダー的な存在</li>
<li>インターンの成果: アルバイトとしての成果とスクールとしての成果 (就職先) がある</li>
<li>モチベーションがもたない</li>
<li>対策としては見てますよというメッセージを送り続ける</li>
<li>いいね！ がんばれ！ 大丈夫！</li>
<li>不安に対してはメッセージを送り続けるしかない</li>
<li>所属感がない</li>
<li>対策: ミートアップや忘年会を開催</li>
<li>ニートやひきこもりが社会復帰した</li>
<li>就職先の会社からとても喜ばれる</li>
<li>仕事が増えた</li>
<li>有名じゃない会社のインターン戦略</li>
<li>出入りしやすくして単純に人数が多いため、確率的に優秀な人も多くなる</li>
<li>来るもの拒まず、去る者追わず</li>
<li>社会人が7割</li>
<li>無料なのでいろいろなところから紹介される</li>
<li>RubyKaigi のスタッフをやったら就職できる</li>
<li>求人への応用</li>
<li>採用はしていない</li>
<li>探すんじゃなくて育てる</li>
<li>組んでくれる会社</li>
<li>質疑応答</li>
<li>id的には183名</li>
<li>7割ぐらい去っている?</li>
<li>社会人は求職中の人もいれば仕事をしながらの人もいる</li>
<li>課金サービスはない</li>
</ul>


<p><a href="http://docs.komagata.org/5463">発表資料</a></p>

<h2>Railsコントリビューション</h2>

<ul>
<li>自己紹介</li>
<li><a href="http://contributors.rubyonrails.org/">http://contributors.rubyonrails.org/</a> で24位</li>
<li><a href="http://contributors.rubyonrails.org/releases">http://contributors.rubyonrails.org/releases</a> の v5.0.0 が 9999 Commits というコネタ</li>
<li>コミットログを読むブログを続けている <a href="http://y-yagi.hatenablog.com/">http://y-yagi.hatenablog.com/</a></li>
<li>わからないことも多かったが動かして確認した</li>
<li>テストがちゃんと書かれるようになったころだったのでテストでなんとなくわかった</li>
<li>2,3ヶ月で Rails のコードに慣れて、いろいろとミスに気づくようになった</li>
<li>問題がある状態をそのままにしておくのはよくないということでコントリビュートし始めた</li>
<li>どんな時にコントリビュートするか? 期待通りに動かない時、機能追加したい時</li>
<li>期待通りに動かないというのはまあまあある</li>
<li>よく使う道具なので期待通り動いて欲しい</li>
<li>Issue をつくる or PR を作る</li>
<li>Issue をつくるのも大事なコントリビュート</li>
<li>英語が苦手なので PR を投げてしまうことの方が多い</li>
<li>機能を追加したい時</li>
<li>よく使う道具なので機能が足りてて欲しい</li>
<li><a href="https://github.com/rails/rails">https://github.com/rails/rails</a> のみを対象 (<a href="https://github.com/rails">https://github.com/rails</a> の他のレポジトリは方針などが違うことがある)</li>
<li><a href="http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html">http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html</a></li>
<li>Issue はバグ管理のみ</li>
<li>新機能提案などの issue は即 close されたりする</li>
<li>新機能についての議論は rails-core ML</li>
<li>PR 投げて、そこで議論をするのでも大丈夫 (その方が多そう)</li>
<li><a href="https://github.com/rails/rails/tree/master/guides/bug_report_templates">https://github.com/rails/rails/tree/master/guides/bug_report_templates</a> を参考にして再現手順が作れると良い</li>
<li>master ブランチでも再現するか確認</li>
<li>サポート対象外の古い Rails での Issue は無視されるか即 close</li>
<li>サポート対象: <a href="http://guides.rubyonrails.org/maintenance_policy.html">http://guides.rubyonrails.org/maintenance_policy.html</a></li>
<li>似たような PR がもうないか検索してみる (open だけではなく close されているものも)</li>
<li>close されていたら理由を確認して、それでも PR を出すなら、そのことも書く</li>
<li>やりとりが止まっている場合は確認して引き継いでしまう</li>
<li>Rails 本体にいるかどうか gem じゃだめなのか考える</li>
<li>foreigner や migration_comments のように本体に取り込まれることもある</li>
<li>フォーマットに従う <a href="https://github.com/rails/rails/blob/master/.github/pull_request_template.md">https://github.com/rails/rails/blob/master/.github/pull_request_template.md</a></li>
<li>テストは大体は bundle exec rake test で動く</li>
<li>CI の結果も確認する</li>
<li>doc やコメントのみの修正は <code>[ci skip]</code> を入れる</li>
<li>パフォーマンス改善はベンチマークスクリプトと結果もコミットログに入れる</li>
<li>PR の description に書くようなことはコミットログに入れれば良い</li>
<li>後から参照しやすい</li>
<li>使われてないはずのものを消す場合は使われなくなった場所の確認の他に gem に切り出されたものが使っている可能性も考える必要がある</li>
<li>public API の挙動を変えない</li>
<li><a href="http://api.rubyonrails.org/">http://api.rubyonrails.org/</a> にのっているものが public API</li>
<li>挙動を変えたい場合は deprecate から</li>
<li>squash</li>
<li>何から始めたらいいか</li>
<li>doc</li>
<li><a href="http://api.rubyonrails.org/">http://api.rubyonrails.org/</a> と <a href="http://guides.rubyonrails.org/">http://guides.rubyonrails.org/</a> がリリースされているものに対応</li>
<li>master ブランチは <a href="http://edgeapi.rubyonrails.org/">http://edgeapi.rubyonrails.org/</a> と <a href="http://edgeguides.rubyonrails.org/">http://edgeguides.rubyonrails.org/</a></li>
<li>新しいバージョンを触る</li>
<li>rc をまたずに beta1 が出たら試す</li>
<li>新しい機能はバグっていることが多い</li>
<li>既存の機能が壊れていることもある</li>
<li>新しい Ruby で触る</li>
<li>Issue をみる: コードをみるとっかかりになる, 意外と簡単に直せるバグもある</li>
<li>英語ができない: コミットログや PR を参考にする</li>
<li>何か怖い: 慣れるしかない, <a href="https://oss-gate.github.io/">https://oss-gate.github.io/</a> もおすすめ</li>
<li>質疑応答</li>
</ul>


<p><a href="https://docs.google.com/presentation/d/e/2PACX-1vTQx7WQDPQmvMHRyc8Pj1kP9SOqHAlmLUUGA22G7nU7qtXJsFEwYMaMPwBHWMc-dx9OZaAPl3S7pmtw/pub">発表資料</a></p>

<h2>休憩</h2>

<h2>Railsでつくる ファイルアップロード 2017</h2>

<ul>
<li>会社紹介</li>
<li><p>自己紹介</p></li>
<li><p>きっかけ</p></li>
<li>サービスを Perl の独自フレームワークから Rails に移行中に画像アップロードを作り直したことがなかったことに気づいた</li>
<li>Active Storage の登場</li>
<li><p>スマホ時代のファイルアップロード</p></li>
<li><p>画像アップロードで考えるポイント</p></li>
<li>画像アップロード自体</li>
<li>画像の参照</li>
<li><p>画像ファイルの置き場所</p></li>
<li><p>UI から考える 2017 年の画像アップロード</p></li>
<li>例: クックパッド, esa</li>
<li><p>非同期</p></li>
<li><p>form_with</p></li>
<li><p>Headless browser</p></li>
<li><p>Step 1: public に画像アップロード</p></li>
<li>ActionDispatch::<a href="Http::UploadedFile">Http::UploadedFile</a></li>
<li>validate が画像ファイル自体と画像と紐づく情報の2軸になる</li>
<li>フォームオブジェクトで処理すると良さそう</li>
<li>Step 2: S3 に画像アップロード</li>
<li>認証、アクセス制御、モック</li>
<li>問題発生? ファイルアップロードに時間がかかる気がする</li>
<li>サーバー経由ではなくダイレクトにアップロードに</li>
<li>Step 3: ダイレクトアップロード (S3)</li>
<li>Step 4: 複数ファイルのアップロード</li>
<li>multiple では非同期が必要だった</li>
<li>Step 5: ECMAScript 6 や File API など</li>
<li>新しい画像フォーマット (Live Photos?)</li>
<li>技術の積み重ねとユーザー体験</li>
<li><p>ユーザー体験を向上させようとすると rails から離れた技術も必要になってくる</p></li>
<li><p>質疑応答</p></li>
</ul>


<p><a href="https://speakerdeck.com/matsuhisa/rails-developers-meetup6-image-upload">発表資料</a></p>

<h2>How, Why, What がわからないコードの調べ方</h2>

<ul>
<li>ネタバレ: 最終的には負けた</li>
<li>ベストは、「知っている人に聞く」</li>
<li>誰もいないなら調べるしかない</li>
<li>git blame は -L で範囲を絞り込める</li>
<li><code>git blame -L "/regex",+20 file</code></li>
<li>git blame rev file</li>
<li><a href="https://github.com/akr/vcs-ann">https://github.com/akr/vcs-ann</a></li>
<li>tig blame file</li>
<li><code>","</code> でカーソル行の親コミットの blame に移動</li>
<li>歴史をみてもわからなかった</li>
<li>ログを出す</li>
<li><code>Kernel.#caller</code></li>
<li><code>logger.tagged("hoge") do ... end</code></li>
<li>歴史を見ても、動きを見ても、よくわからない</li>
<li>それは、作り直して良いというフラグでは?</li>
<li>結論: 強く生きよう</li>
</ul>


<h2>How to improve OSS Rails application</h2>

<ul>
<li>自己紹介</li>
<li>GitLab</li>
<li>時間がおしているので質疑応答はなし</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>次回予告: #7 は 2017.11.16</li>
<li>月1開催は次回で最終回</li>
<li>募集は 2017.10.30 10:00から</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第79回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-10-07-rubykansai79.html"/>
    <updated>2017-10-07T14:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai79</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/65609">第79回 Ruby関西 勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<p>今回は amagasakirb でよく来ていた尼崎市立小田公民館でした。</p>

<p>プロジェクターは 800x600 でした。</p>

<h2>How to specify <code>frozen_string_literal: true</code></h2>

<p>発表資料は RubyKaigi 2017 で使ったものと同じで、 <a href="https://github.com/znz/rubykaigi2017-frozen_string_literal">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-how-to-specify-frozenstringliteral-true/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/how-to-specify-frozenstringliteral-true">slideshare</a>, <a href="https://speakerdeck.com/znz/how-to-specify-frozen-string-literal-true">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-rubykaigi2017-frozen_string_literal">RubyGems</a> にあげているものを、 <code>allotted-time</code> を 5m から 10m に変更して使いました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-frozen_string_literal/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-frozen_string_literal/" title="How to specify `frozen_string_literal: true`">How to specify `frozen_string_literal: true`</a>
</div>


<h2>西谷さんの文書管理の話</h2>

<ul>
<li>会場アンケート: 初参加の人が多かった</li>
<li>OSS Gate で rubocop にバグ報告したら直してもらえた <a href="https://github.com/bbatsov/rubocop/issues/4644">https://github.com/bbatsov/rubocop/issues/4644</a></li>
<li><a href="https://ja.wikipedia.org/wiki/%E5%8F%8C%E6%9B%B2%E5%89%B2%E5%BC%95">双曲割引</a></li>
<li>今18万円もらうか、1年後に20万円もらうか</li>
<li>2年後に18万円もらうか、3年後に20万円もらうか</li>
<li>マシュマロテスト</li>
<li>既知感</li>
<li>記憶

<ul>
<li>記述記憶</li>
<li>非記述記憶

<ul>
<li>身体的記憶</li>
<li>経験記憶</li>
<li>場所の記憶</li>
</ul>
</li>
</ul>
</li>
<li>文書管理</li>
<li>文書管理の原則: 決める, 見える, tight binding, 利用する</li>
<li>会場に質問 → markdown や org-mode でメモしている人がいた<!-- e-文書法 関連の仕事をしているという人がいた --></li>
<li>おすすめの本は? → <a href="http://amzn.to/2hT6Qdq">野口 悠紀雄の「超」整理法</a>, あとはだいたい失敗している</li>
<li>日付で整理している人は多い</li>
</ul>


<h2>休憩</h2>

<ul>
<li>14:45 まで休憩</li>
</ul>


<h2>もう放置しない！画面遷移図の作り方</h2>

<ul>
<li>今までの発表中に急遽発表資料を作った</li>
<li>Sky Grid の山本さん</li>
<li>西谷さんのところの卒業生</li>
<li>急いでショッピングサイトを作っていて、急遽画面遷移が必要になった</li>
<li>移動中に UI Flows というのをみつけた</li>
<li>手書き or ホワイトボード ? (or Excel ?)</li>
<li>おうおうにして放置される</li>
<li>guiflow というものをみつけた</li>
<li><a href="https://qiita.com/hirokidaichi/items/ff54a968bdd7bcc50d42">もう保守されない画面遷移図は嫌なので、UI Flow図を簡単にマークダウンぽく書くエディタ作った</a></li>
<li>質疑応答</li>
<li>rails なら routes から自動生成できないか?</li>
<li>画面遷移図を先に作るのなら無理そう</li>
<li>漏れをなくすよりも主要な遷移だけにしたい?</li>
<li>feature テストからならできそう?</li>
</ul>


<h2>RubyKaigi 2017 のキーノート紹介</h2>

<ul>
<li>なかださんの発表</li>
<li>事務処理できる人がいなくなった</li>
<li>概要</li>
<li>Subversion を使っていて、なぜ Git を使わないのかという話</li>
<li>新機能/課題の管理: Redmine で管理している</li>
<li>開発者会議: 月1回</li>
<li>Ruby のビルドの仕方</li>
<li>バグフィックスの事例</li>
<li>Ruby は「簡単な文法」だと「錯覚」させている</li>
<li><a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/50578">[ruby-list:50578] [質問] 変数pが定義されている時のabsの動作について</a></li>
<li><code>String#intern</code> と refinements の話</li>
<li>Ruby 2.5 の新機能の話</li>
<li>右代入についても話題になっている</li>
<li>感想: もっと「Rubyを」いじってね、ということだと思った</li>
<li><a href="https://codeiq.jp/magazine/2017/09/53932/">Rubyのなかを覗いてみよう！「Cookpad Ruby Hack Challenge」に参加してみた</a></li>
<li><p><a href="https://github.com/ko1/rubyhackchallenge">https://github.com/ko1/rubyhackchallenge</a></p></li>
<li><p>GitPitch というのを使ってスライドを作っている</p></li>
<li><a href="https://github.com/urimaro/79th_workshop_1">https://github.com/urimaro/79th_workshop_1</a></li>
<li><a href="https://gitpitch.com/urimaro/79th_workshop_1">https://gitpitch.com/urimaro/79th_workshop_1</a></li>
<li><a href="https://github.com/urimaro/79th_workshop_2">https://github.com/urimaro/79th_workshop_2</a></li>
<li><p><a href="https://gitpitch.com/urimaro/79th_workshop_2">https://gitpitch.com/urimaro/79th_workshop_2</a></p></li>
<li><p>Matz のキーノート</p></li>
<li>概要: module について</li>
<li>RubyKaigi について</li>
<li>RubyConf より大きい</li>
<li>module の話</li>
<li>単一継承</li>
<li>多重継承 (C3アルゴリズム)</li>
<li>Mixin の話</li>
<li>module の使われ方</li>
<li>Mixin 以外の使われ方もするようになった</li>
<li>namespace とか</li>
<li>alias method chain は2回呼び出すと壊れる</li>
<li><code>Module#prepend</code> の登場</li>
<li>CLOS の method combination が実現できる</li>
<li>aspect 指向プログラミングを実現できる</li>
<li>refinements</li>
<li>Structural signature</li>
<li>質疑応答</li>
<li>prepend は外せないという話があったが include も外せない? → たぶん外せない</li>
<li>Rails の concern と helper の使い分け? → まだ helper の方がよく使われていて concern はそんなに使われていない?</li>
</ul>


<h2><a href="https://qiita.com/yuyakato">Kato Yuya</a> さん</h2>

<ul>
<li>概要: zeromq, GitHub, ハードウェア工作</li>
<li>GitHub の private repo の issues で色々管理している</li>
<li>ベッド型体重計: 9月にベッドを買い直したのをきっかけに再度挑戦開始</li>
<li>zeromq というライブラリの紹介</li>
<li>コネクションの方向と中身の通信の方向の自由度が高い (Pub-Sub のどちらからの接続開始でも良いなど)</li>
<li>zeromq は対応言語が多いので言語の勉強にもおすすめ</li>
<li>Pub-Sub とかも簡単にかける</li>
<li>ロードセル専用のアンプモジュールが安価に手に入るようになった</li>
<li>水のペットボトルで校正</li>
<li>校正は大変なので、体重計はよくできているなあと感じた</li>
<li>GitHub 上で 3D データもプレビューできる</li>
<li>UDP のデータを zeromq に流すのに久しぶりに ruby を書いた</li>
<li><p>後の処理はデータ処理の都合により python</p></li>
<li><p>質疑応答</p></li>
<li>製品化はしないんですか? → 製品化する予定はない。情報は全部公開する予定</li>
<li>pycall は使わない? → 無理に ruby にする必要はなさそう</li>
<li>ruby だとターミナルで作業することが多いが python だと jupyter で完結することが多いと感じているがどうか? → テストコードを書くような部品化できる部分は別ファイルにする、適材適所で使っている</li>
</ul>


<h2>Ruby初級者向けレッスン 63回 ─ Array と Hash</h2>

<p>今回は初心者の人も多かったようです。</p>

<h2>RubyKaigi 2017 のノベルティプレゼント</h2>

<p>トートバッグなどの RubyKaigi 2017 の入り口で配布していたノベルティの一部を、今年もRuby関西のスタッフの人があらかじめいくつかもらってきていたのをプレゼントしていました。</p>

<p>トートバッグは、広島なので瀬戸内海と四国が見えてるようなデザインなのかなと思っていたら <a href="https://twitter.com/is8r_/status/909752063323754496">https://twitter.com/is8r_/status/909752063323754496</a> ということだったらしいです。
プレゼントの時にこのヒントを紹介しようかと思っていたら、時間がなかったので、できませんでした。</p>

<h2>感想</h2>

<p>今回は、本当に開催するかどうかを RubyKaigi 2017 の会期中に相談するなど、最終的な開催の決定から開催までの時間が短かったからか、いつもと比べて参加人数は少なめでしたが、初参加の人や初心者の人が多かったので、開催して非常によかったと思いました。</p>

<p>発表内容も事前発表していたもの以外は RubyKaigi 2017 の振り返りをのんびりやって終わるのかなと思っていたら、当日発表者を募集したら3名も発表してくれる人が出てきて、時間が足りないぐらいになっていました。</p>

<p>だいたい2ヶ月ごとに開催されていますが、次回は12月に開催されるかどうかはまだ未定なので、来年になるかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Developers Meetup #5 大阪会場に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-28-railsdm.html"/>
    <updated>2017-09-28T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/railsdm</id>
    <content type="html"><![CDATA[<p><a href="https://techplay.jp/event/631423">Rails Developers Meetup #5 大阪会場</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>前回と同じ場所なので、スムーズに到着することができました。</p>

<p>今回は、ストリーミングの問題なのか、聞き取りにくいことが多かったので、特に質疑応答はメモが取れていません。</p>

<h2>オープニング</h2>

<ul>
<li>会場の説明</li>
<li>ハッシュタグは <code>#railsdm</code></li>
<li>プログラムの紹介</li>
</ul>


<h2>Railsで日報共有アプリケーションをOSSとして開発している話</h2>

<ul>
<li><p><a href="https://speakerdeck.com/kami/railsderi-bao-gong-you-apurikesiyonwoosstositekai-fa-siteiruhua">https://speakerdeck.com/kami/railsderi-bao-gong-you-apurikesiyonwoosstositekai-fa-siteiruhua</a></p></li>
<li><p>Rails で SPA の事例</p></li>
<li>Repost という日報共有アプリケーション <a href="https://github.com/kami-zh/repost">https://github.com/kami-zh/repost</a></li>
<li>Slack 連携部分を例に説明</li>
<li>View → Action → API → Reducer → View</li>
<li><p>Mastodon の app/javascript や package.json も参考になる</p></li>
<li><p>Rails 5.1 での機能をどう使ったか</p></li>
<li>webpacker</li>
<li>rails new するときに &ndash;webpack=react をつける</li>
<li>必要に応じて yarn add</li>
<li>開発時は bin/webpack-dev-server</li>
<li>webpacker 3 系は多くの設定がライブラリ側に吸収されてアプリケーション側はシンプルにできる</li>
<li><code>javascript_pack_tag</code></li>
<li>Rails 5.1 から yarn をサポート</li>
<li>yarn は install / add / remove ぐらいを知っておけば良い</li>
<li><code>ActionDispatch::SystemTestCase</code></li>
<li>トランザクション管理をしてくれる</li>
<li><p>参考: <code>Minitest::Retry</code> がちょっと不安定なテストに便利 <a href="https://github.com/y-yagi/minitest-retry">https://github.com/y-yagi/minitest-retry</a></p></li>
<li><p>工夫したこと</p></li>
<li>ユニットテストと E2E テストをしっかり書いた</li>
<li>Sprockets は削除した</li>
<li>セットアップを楽にする: bin/setup, bin/update をメンテナンスする</li>
<li>モーダルは慎重に導入する</li>
<li><a href="https://github.com/rails/rails/pull/30614">Install JavaScript dependencies on bin/update</a></li>
<li><p>Rails の資産を活用する: Turbolinks や FormHelper など</p></li>
<li><p>余談</p></li>
<li><p>知識欲求駆動開発</p></li>
<li><p>質疑応答</p></li>
<li>webpack-dev-server との同時起動に foreman は使っていない</li>
<li>react は使ってよかった感じ</li>
<li>react, vue, angular などから react を選んだ理由は? → 使ってみたかったから</li>
</ul>


<h2>パフォーマンス計測CIサービスを作って得た知見</h2>

<ul>
<li><p><a href="https://www.slideshare.net/zaruhiroyukisakuraba/ci-80250430">https://www.slideshare.net/zaruhiroyukisakuraba/ci-80250430</a></p></li>
<li><p>個人で開発しているパフォーマンス計測をする CI サービス</p></li>
<li><p>現在は Rails のみサポート、プライベートベータ</p></li>
<li><p>OAuth Apps と GitHub Apps の違い</p></li>
<li>OAuth Apps (従来のもの) ユーザーに対してインストール</li>
<li>GitHub Apps はリポジトリに対してインストール、マーケットプレイスに出せる</li>
<li>コメントもユーザーとしてか、独自権限にできるかの違いがある</li>
<li><p>マーケットプレイスに出す条件はちょっと厳しい (250人以上にインストールされていることとか)</p></li>
<li><p>GitHub Apps を作るのは簡単</p></li>
<li>アクセストークンと API</li>
<li>JWT の expire に注意: 10分や8分だとうまくいかないことがあったので5分にした</li>
<li>取得できるユーザー情報は限定的</li>
<li>GitHub Apps の API は少しずつ解放されている</li>
<li><p>GitHub Enterprise ではまだ使えないかも</p></li>
<li><p>GitHub Apps で気をつけるところ</p></li>
<li>Webhook を取りこぼすとデータロスト</li>
<li>パーミッションの変更はなるべくしない: ユーザーに承認してもらう必要があるがわかりにくい</li>
<li>GitHub Apps のインストールの導線: インストール後がわかりにくいらしい</li>
<li><p>ローカルで webhook を受け取る方法: ngrok は無料だと起動のたびにホスト名が変わるので面倒、ポートフォワーディングをしている</p></li>
<li><p>Docker in Docker</p></li>
<li>privileged オプションが必要</li>
<li>良い点: 階層構造なので管理しやすい</li>
<li>悪い点: パフォーマンス, privileged オプションで怖い, ボリュームが残ってしまう</li>
<li><p>そもそも製作者自身があまり推奨していない</p></li>
<li><p><code>/var/lib/docker.sock</code> を共有</p></li>
<li>良い点: シンプル, ビルドキャッシュも簡単</li>
<li>悪い点: 他のコンテナが丸見え</li>
<li><p>内部利用限定なら良いかも</p></li>
<li><p>オーケストレーション</p></li>
<li>GKE + k8s</li>
<li><p>小規模/シンプルなら Heroku おすすめ</p></li>
<li><p>CI, 計測の仕方</p></li>
<li>CI サービスを作るのに使った小技</li>
<li>resources をちゃんと指定しないとパフォーマンスがぶれる</li>
<li><p>Container Builder のローカル開発環境がある <a href="https://github.com/GoogleCloudPlatform/container-builder-local">https://github.com/GoogleCloudPlatform/container-builder-local</a></p></li>
<li><p>個人開発プロジェクトについて</p></li>
<li>毎日やるのが大事</li>
<li>コードを捨てるのを躊躇しない</li>
<li>何のためにやるのか</li>
<li>途中経過も公開する</li>
<li><p>やらないことを決める</p></li>
<li><p>質疑応答</p></li>
<li>個人開発でも k8s を使っている? → 使っている</li>
<li>heroku ではなく k8s を使う理由 → docker のため</li>
<li>(メモ取れず)</li>
</ul>


<h2>休憩</h2>

<h2>マイクロサービスにおける非同期アーキテクチャ</h2>

<ul>
<li><p><a href="https://www.slideshare.net/ota42y/ss-80254350">https://www.slideshare.net/ota42y/ss-80254350</a></p></li>
<li><p>microservice</p></li>
<li>外から見たときは一つのアプリ</li>
<li>内部的にはドメインごとに別々のサーバー</li>
<li>API で連携</li>
<li>非同期もある</li>
<li><p>巨大かつ複雑になりやすい → 知見</p></li>
<li><p>非同期処理</p></li>
<li>今回は特に Job Queue の話</li>
<li><p>ActiveJob は Rails 標準なので一般的な構成のはず</p></li>
<li><p>歴史</p></li>
<li>牧歌的時代: なんでも delayed_job に突っ込む</li>
<li>RDB に保存する</li>
<li>delay メソッドを挟むだけ</li>
<li>障害発生: job がどんどん溜まっていった</li>
<li>delayed_job では job の同時実行を防ぐ機構がある</li>
<li>index がきかない where 句の絞り込み＆ソート → テーブルロック</li>
<li>処理速度 ＜ 増加速度 になって打つ手がなくなる</li>
<li>大移行時代</li>
<li>非同期処理の整理</li>
<li>巨大な処理はクリティカルかどうかで場合分け</li>
<li>重要度に応じて処理分け</li>
<li>クリティカルではないものは別バックエンドへ移動して delayed_job の job 数を減らした</li>
<li>移行先として sidekiq, resque から sidekiq を選んだ</li>
<li><p>クリティカルではないものは delayed_job から ActiveJob(+sidekiq) に書き換え</p></li>
<li><p>複数サービスへの連携</p></li>
<li>結合度が高かった</li>
<li>イベント駆動アーキテクチャ</li>
<li>Event の送受信に変更</li>
<li>具体的には AWS の SNS (Simple Notification Service) と SQS (Simple Queue Service) を利用</li>
<li>送信側が SNS で受信側のサービスごとに SQS</li>
<li>癖があるので注意: 複数回や並列実行を考慮して、べき等である必要がある、など</li>
<li>統一フォーマットが必要</li>
<li>移行するなら、送信側・受信側両方移行する必要がある</li>
<li><p>楽にするための gem を作った <a href="https://github.com/ota42y/rising_dragon">https://github.com/ota42y/rising_dragon</a></p></li>
<li><p>質疑応答</p></li>
<li>Queue をどうわけているか? → ほとんどわけていない</li>
</ul>


<h2>5000兆人欲しい！ 優秀なRailsエンジニアを採用するための3つ(仮)の方法</h2>

<ul>
<li>日本の Rails エンジニアの数は推定10万人ぐらい?</li>
<li>世界中の人の数 74億人</li>
<li><code>'74億人' &gt; '5000兆人' #=&gt; true</code></li>
<li>制限を外す</li>
<li>Rails 経験者にこだわらない</li>
<li>日本人にこだわらない</li>
<li>エンジニアにこだわらない</li>
</ul>


<h2>Railsを6年間やってきたぼくが最近Railsでハマったこと</h2>

<ul>
<li><a href="https://speakerdeck.com/kazumax1218/railswo6nian-jian-yatutekitabokugazui-jin-railsdehamatutakoto">https://speakerdeck.com/kazumax1218/railswo6nian-jian-yatutekitabokugazui-jin-railsdehamatutakoto</a></li>
<li>1: カラム追加時に index がはられない</li>
<li><code>add_column</code> には index オプションがなかった</li>
<li>対策: <code>add_index</code> を使う</li>
<li>2: try</li>
<li>メソッドがない場合 (typo など) も例外を出さずに nil を返す</li>
<li>対策: <code>try!</code> を使うか ruby 2.3 以降ならぼっち演算子 <code>&amp;.</code> を使う</li>
<li>3: fragment cache</li>
<li>共通のパーシャルを変更してもキャッシュがクリアされない</li>
<li>template が見つからないのでダイジェストが計算できていなかった</li>
<li>対策: パスを省略しない</li>
<li>パーシャルのパスが動的な場合も注意</li>
<li>プチ情報</li>
<li>Rails 5 からは <code>rails dev:cache</code> で簡単にキャッシュの ON/OFF を切り替えられるようになった</li>
<li>fragment cache のログを出す設定がある</li>
<li>4: 新規作成画面に戻ったら作成したはずのレコードが消えた</li>
<li>原因: <code>has_one</code> に <code>dependent: :destroy</code> がついていると <code>build_xxx</code> 時にレコードが削除される</li>
<li>対策: new アクションで <code>build_xxx</code> を使わない</li>
</ul>


<h2>次回予告</h2>

<ul>
<li>次回 10/19: <a href="https://techplay.jp/event/631425">東京</a>, <a href="https://techplay.jp/event/631426">大阪</a>, <a href="https://techplay.jp/event/631427">リモート</a></li>
<li><a href="https://techplay.jp/event/631431">2017/12/09（土） 13:00 開催 の Rails Developers Meetup 2017</a>, <a href="https://techplay.jp/event/636560">大阪</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developers.IO 2017 WORLD in 大阪 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-23-cmdevio2017.html"/>
    <updated>2017-09-23T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/cmdevio2017</id>
    <content type="html"><![CDATA[<p><a href="http://dev.classmethod.jp/news/developers-io-2017-world-osaka/">Developers.IO 2017 WORLD in 大阪</a> に参加したので、そのメモです。
主に OAuth の話が気になったので行ってみたのですが、他の話もおもしろかったです。</p>

<p>ハッシュタグは <code>#cmdevio2017</code> でした。</p>

<!--more-->


<h2>会場</h2>

<p>スカイビルのタワーウエストは初めて入った気がします。(イーストの方は映画館があるので、そこまでは行ったことがありました。)</p>

<h2>ごあいさつと会場の説明</h2>

<p>スカイビルの場所がわかりにくくて迷った話とか、 Developers.IO の東京で複数トラックでやっていたもののうち、アンケートで評判が良かったものを各地を回ってやっている話とかがありました。</p>

<h2>クラメソの請求を支える技術（サーバーレス編）</h2>

<ul>
<li>会場アンケート: 20代, 30代, 40代で3分の1ずつぐらい?</li>
<li>自己紹介<!-- @czkuk --></li>
<li>刷新の経緯</li>
<li>請求書が毎月300枚になってつらい</li>
<li>請求システムを刷新した話</li>
<li>新システムのポイント</li>
<li>データの一元管理</li>
<li>API, OAuth 2.0</li>
<li>Python simple_salesforce</li>
<li>MFクラウド請求で CSV フォーマットが変更されるということがあったので、ベータが提供されていた API に乗り換えた</li>
<li>OAuth 2.0 のクライアントとしての利用は簡単</li>
<li>Problem: Salesforce 24時間API呼び出し上限</li>
<li>更新がわからないので、全部のデータに対して API を呼び出したら、あっという間に上限に</li>
<li>Solved: S3 ETag</li>
<li>登録できた JSON ファイルは S3 にキャッシュ</li>
<li>変更のみを登録できるようになって解決</li>
<li>とある運用担当者の訴え: 「絶対にサーバーは管理したくないでござる」</li>
<li>Problem: 処理に時間がかる</li>
<li>Lambda は5分で強制タイムアウトがある</li>
<li>Solved: SQS worker Queue</li>
<li>Lambda ログ監視</li>
<li>CloudWatch Logs の Lambda によるログ監視</li>
<li>ログレベルごとに通知先を変えられる log2sns2.yml がオススメ</li>
<li>成功したら請求担当のみ、失敗したら開発者にもとか</li>
<li>AWS 月額利用費 $17</li>
<li>Salesforce について</li>
<li>請求締め部分は外製</li>
<li>visualforce, apex で画面を内製</li>
<li>カバレッジが高くないとリリースできないとか、よくできている</li>
<li>Trailhead で自習</li>
<li>外製? 内製?</li>
<li>仕様が固めやすい部分は外製</li>
<li>画面などトライアンドエラー部分は内製</li>
<li>過度なカスタマイズはしない</li>
<li>業務をパッケージにあわせる</li>
<li>刷新後</li>
<li>半月かかってた請求業務が数時間に</li>
<li>営業への契約確認 → ほぼゼロ</li>
<li>「しがないOL」がJavaプログラマーに</li>
<li>請求システムの話終了</li>
<li>昔話</li>
<li>糊付けエンジニア</li>
<li>「なんでもできる人なんていない」</li>
<li>同じシステムに長く関わっている人は少ない</li>
<li>1年ぐらいが多くて、5年以上は少ない</li>
<li>40歳の生存戦略</li>
<li>半径5メートルの人を幸せにするのが良い</li>
</ul>


<h2>基礎からのOAuth2.0</h2>

<ul>
<li><a href="http://bit.ly/cmdevio2017-oauth2">http://bit.ly/cmdevio2017-oauth2</a></li>
<li>自己紹介<!-- @daisuke_m --></li>
<li>OAuth の動機: 認証、属性取得、委譲</li>
<li>OAuth は認証の委譲プロトコルではなく、認可の委譲プロトコル</li>
<li>認証と認可の基礎知識</li>
<li>認証 (Authentication) : 通信相手が誰か、確認すること。</li>
<li>認可 (Authorization) : リクエストが許可されるかどうかを決めること。(ポリシー定義段階)</li>
<li>厳密には「ポリシー施行段階」は別だが、あまり区別しなくても良い</li>
<li>認証と認可は、本来、相互に独立した概念。</li>
<li>401 Unauthorized : 認証の失敗 『お前誰だよ』</li>
<li>RFC さえ混同しているが、本来は Unauthenticated が正しいのでは。</li>
<li>403 Forbidden : 認可の不足 『理解した。だが断る』</li>
<li>鍵 (key) と錠 (lock)</li>
<li>ユーザーには「鍵 (key)」を与えて、リソースには「錠 (lock)」をかける</li>
<li>認証の委譲 (OpenID Connect)</li>
<li>登場人物: End-User, Relying Party (RP), ID Provider (IdP)</li>
<li>RP=アプリ, ID Provider=TwitterとかFacebookとか</li>
<li>図解</li>
<li>ID Token</li>
<li>JWT (JSON Web Token) (じょっとと読むらしい)</li>
<li>ヘッダ、ペイロード、電子署名 (ID Provider の秘密鍵で署名)</li>
<li>Relying Party が ID Provider の公開鍵で検証</li>
<li>神は誰か? 問題</li>
<li>よくある Web+DBシステム: アプリケーション</li>
<li>API データソースになっても同様</li>
<li>OAuth においては神様はユーザー</li>
<li>だから OAuth は認可の委譲プロトコル</li>
<li>みなさんが OAuth を使いたくないであろう理由</li>
<li>ここから OAuth の話</li>
<li>OAuth 2.0 の登場人物 : Resource owner (RO), Client, Authorization server (AS), Resource server (RS)</li>
<li>例: RO=ユーザー, Client=togetter, ASとRS=twitter</li>
<li>図解</li>
<li>アクセストークン (AT) とは、リソースにかかった「錠」を開ける「鍵」</li>
<li>つまり、鍵に「誰?」を求めてはいけない。</li>
<li>では「OAuth認証」とは一体…?</li>
<li>認証したいだけなのに、渡す権限が大きすぎて怖い。</li>
<li>これを認証の根拠としてよい、という裏付けが弱い。</li>
<li>OAuth 2.0 が成し遂げたいこと (一部)</li>
<li>(リストはメモが取れなかったので公開されている資料参照)</li>
<li>Client が AT を得るフロー 4種</li>
<li>1: Client credentials grant</li>
<li>client id/secret を AT に引き換えるだけ</li>
<li>リソースオーナー不在</li>
<li>ユースケース: 古いスキームに適合。 Twitter の public timeline など。</li>
<li>2: Resource owner password grant</li>
<li>RO のユーザー名とパスワードを AT に引き換えるだけ</li>
<li>ユースケース: 公式クライアント向け</li>
<li>3: Implicit grant</li>
<li>AT がユーザーやブラウザーに見えてしまう</li>
<li>ユースケース: モバイルや JS アプリケーションなど、エンドユーザーの支配下にあるクライアント向け</li>
<li>4: Authorization code grant</li>
<li>フロントチャネル・バックチャネル</li>
<li>3 の場合は AT がフロントチャネルを通るので User Agent に漏れる</li>
<li>4 の場合は AT をフロントチャネルに流さない</li>
<li>最悪 AC は漏れても、単独であればリスクは低い</li>
<li>AC のライフタイムは短い</li>
<li>AC → AT の引き換えには client id/secret が必要</li>
<li>ユースケース: サーバーサイド Web アプリケーション向け</li>
<li>OAuth 2.0 が規定しないこと</li>
<li>1: Resource owner とのインタラクション様式</li>
<li>2: Resource owner の権限及びその確認</li>
<li>よく考えて設計しないと、 User が持っていない権限を Client に与えてしまう</li>
<li>OAuth における「スコープ」とは</li>
<li>User が委譲に同意した権限の種類</li>
<li>Client が行使できる権限の種類ではない</li>
<li>Client が AT を使って行使できる権限 = User が持っている権限と Client が持つ AT のスコープの共通部分</li>
<li>3: アクセストークンに関する諸々</li>
<li>3a: AuthZ server における AT の生成方法</li>
<li>現実的にはランダムか JWT の二択</li>
<li>3b: Client における RS への AT の送り方</li>
<li>3c: Resource server における AT の確認方法</li>
<li>ランダムなら AuthZ server にきくしかない</li>
<li>Sprint Security OAuth 2 独自実装</li>
<li>JWT トークンは revoke しづらい</li>
<li>まとめ</li>
<li>認証と認可の概念</li>
<li>アクセストークンの意味</li>
<li>認可コードの意味</li>
<li>スコープの意味</li>
</ul>


<h2>クラメソのWebサイトを支える技術</h2>

<ul>
<li>自己紹介<!-- @suzryo --></li>
<li>コーポレートサイト 2016年12月にリニューアル</li>
<li>静的ウェブサイトホスティング</li>
<li>AWS</li>
<li>S3: ファイル置き場</li>
<li>Amazon CloudFront: CDN</li>
<li>ACM: SSL の証明書管理</li>
<li>Amazon Route53 (ルートフィフティスリー): クラウドDNS</li>
<li>Amazon Route53 (ALIAS): A レコードと応答、ホスト名の省略 (ZoneApex) 設定可能</li>
<li>Amazon Route53 (ヘルスチェック)</li>
<li>Amazon Route53 (ヘルスチェック+DNSファイルオーバー利用例)</li>
<li>重み付けラウンドロビン (スポットインスタンス活用)</li>
<li>Amazon Route53 (GeoDNS利用例)</li>
<li>Route53ヘルスチェックとDatadog連携</li>
<li>AWSWAF</li>
<li>ステージングの表示制限にも利用</li>
<li>Amazon EC2 (CMS)</li>
<li>WordPress + staticpress</li>
<li>S3 に転送して公開</li>
<li>コーポレートサイト (動的ページ) は SaaS 利用</li>
<li>問い合わせフォーム : kintone + salesforce</li>
<li>サイト内検索: Google カスタム検索エンジン</li>
<li>ブログサイト <a href="http://dev.classmethod.jp/">http://dev.classmethod.jp/</a> 2011年7月1日公開</li>
<li>掲載記事数: 年間約3000件ペース (1日平均8.2件)</li>
<li>初期は EC2 スタンドアローン</li>
<li>Offload S3 導入: 画像データをS3、CloudFront で配信</li>
<li>RDS 導入: MySQL を RDS 化、DB 運用の省力化</li>
<li>ELB, Elasticbeanstalk 導入: ELB 配下で負荷分散、EB で管理改善</li>
<li>nginx 導入: ページキャッシュを追加</li>
<li>ApacheBench</li>
<li>Amazon Aurora 導入</li>
<li>拡張方針: キャッシュを多段化、クラウドの柔軟性を活用</li>
<li>アクセスログの解析</li>
<li>nginx → ltsv → fluentd → Amazon Kinesis Firehose → DB (アイコンでは何かわからず)</li>
<li>Athena</li>
<li>AWS WAF 連携 <a href="http://dev.classmethod.jp/cloud/aws/ids-with-kinesis-waf/">http://dev.classmethod.jp/cloud/aws/ids-with-kinesis-waf/</a></li>
<li>改善計画</li>
<li>評価システム: 執筆者評価, 記事のSNSシェア数</li>
<li>既存評価システム: ページ表示の度にSNS情報取得、再集計</li>
<li>新評価システム: 非同期に取得、S3 の集計済みデータを参照</li>
<li>AWS のマネージドサービス弄り倒してます</li>
<li>個々の詳細はブログにて</li>
<li>SaaS の紹介</li>
<li>Datadog</li>
<li>エラー率とか通知とか</li>
</ul>


<h2>Alexaで変わる開発、変わらない開発</h2>

<ul>
<li>Alexa の概要</li>
<li>Amazon Echo: スマートスピーカー, Alexa の機能を呼び出せる, 米英独など国外で展開中</li>
<li>Amazon Alexa: Amazon が提供する音声アシスタント, Echo という端末が呼び出しているサービス, 標準機能の他に、拡張機能を開発して呼び出せる</li>
<li>Alexa Custom Skill: アプリのように、独自開発のスキルを呼び出せる, 自作エンドポイントを登録して審査に通ればOK</li>
<li>Alexa Voice Service: Alexa のフロント側の規格, アプリにも組み込める</li>
<li>アプリ例: Friendly Voice Assistant</li>
<li>Alexa スキルの開発</li>
<li>サンプル: <a href="https://github.com/alexa/skill-sample-nodejs-highlowgame">https://github.com/alexa/skill-sample-nodejs-highlowgame</a></li>
<li>amazon.com でログイン → Alexa → Alexa Skill Kit で作成</li>
<li>デモ</li>
<li>使うサンプルを <a href="https://github.com/alexa/skill-sample-nodejs-fact">https://github.com/alexa/skill-sample-nodejs-fact</a> に変更</li>
<li>開発者コンソールで文字列でのテスト</li>
<li>APP ID の指定が <code>""</code> で括られていないように見えたけど、一瞬だったので見落としかなと思っていたら、エラーになったので、指摘してみたらやっぱりそこだったようでした。</li>
<li>echosim.io で音声でのテスト</li>
<li>デモ終了</li>
<li>スキルの構成要素: wake word, launch, invocation name, utterance, slot value</li>
<li>画像は <a href="https://developer.amazon.com/designing-for-voice/what-users-say/">https://developer.amazon.com/designing-for-voice/what-users-say/</a> 参照</li>
<li>Utterance をユーザが言うと Intent がプログラムに渡ってくる</li>
<li><a href="https://github.com/alexa/alexa-skills-kit-sdk-for-nodejs">https://github.com/alexa/alexa-skills-kit-sdk-for-nodejs</a></li>
<li>普通の Lambda の開発では webpack は使わないが、Alexa では使った方が良さそう</li>
<li>初回起動時間: 約5秒 → 約2秒</li>
<li>5秒は不安になる</li>
<li>ルーティング機能がプラットフォーム側</li>
<li>Lambda はステートレスだが、Skill が State を提供していて、会話を実現している</li>
<li>視覚表現はある?</li>
<li>Echo Show にはカードというのがある</li>
<li>HTML っぽいのは何?</li>
<li>SSML</li>
</ul>


<h2>感想</h2>

<p>知り合いが一人もいない勉強会に参加したのは久しぶりのような気がしました。</p>

<p>鍵と錠のたとえとか、 OAuth 2.0 が成し遂げたいことを元に複数フローで何ができていて、何ができていないのかなど、非常にわかりやすくて良かったです。</p>

<p>Salesforce も連携する何かを作るかもしれないので、 Trailhead というものの存在を知れたのは良かったです。</p>

<p>自社サイトを例にして Amazon のサービスの運用例を知れたのもおもしろかったです。</p>

<p>Alexa はそういうものもあるのか、とか、会話にするのは技術的な難しさよりもただ大変そう、という感じでおもしろかったです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2017 の3日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-20-rubykaigi2017.html"/>
    <updated>2017-09-20T09:59:32+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi2017</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2017">RubyKaigi 2017</a> の3日目に参加したので、そのメモです。</p>

<!--more-->


<h2>朝</h2>

<p>時間があれば広島平和記念資料館に行こうかと思っていましたが、宿を出るのが遅くなってしまって時間がなかったので行けませんでした。</p>

<h2>Compacting GC in MRI</h2>

<ul>
<li>自己紹介</li>
<li>草生える の英語解説で有名になった</li>
<li>Copy on Write Optimization</li>
<li><code>require 'objspace'</code> と <code>ObjectSpace.memsize_of(obj)</code> で CoW の確認</li>
<li>fork と CoW</li>
<li>CoW Page Fault</li>
<li>Unicorn での話</li>
<li>Page Fault を減らす方法</li>
<li>共有メモリの変更が原因</li>
<li>Garbage Collector の影響</li>
<li>Object Allocation</li>
<li>空きがあるとオブジェクトのサイズは OS のページより小さいので、1オブジェクトの生成でもページ全体のコピーが発生するのでコンパクションする</li>
<li>Two Finger Compaction (2本指コンパクション) というアルゴリズムを選んだ</li>
<li>欠点: 遅い、オブジェクトがランダムな場所に移動する</li>
<li>利点: 簡単!</li>
<li>アルゴリズム: オブジェクトの移動をして、参照の更新</li>
<li>Free Pointer と Scan Pointer で左右からみていってオブジェクトを左に空きを右に固まるように交換していく</li>
<li>オブジェクトを順番に見ていって参照を更新</li>
<li>移動先番号にしていたところを空きに変更</li>
<li>unicorn の fork 前に rails の読み込みと GC.start をするようにした</li>
<li>gc.c への変更の詳細解説</li>
<li>C 実装されている中にオブジェクトへのポインターを持っていると更新できないので、移動するとクラッシュする</li>
<li>そのため、そういうオブジェクトは移動しないようにピン留めしておく</li>
<li><code>hash_key(オブジェクト)</code> がメモリアドレスなので、移動できない</li>
<li>Dual References</li>
<li>C と Ruby の両方から参照されている場合も移動するとクラッシュする</li>
<li>グローバル変数もヒューリスティックスにピン留めする</li>
<li>文字列リテラル</li>
<li>リテラルを移動すると bytecode を変更する必要があるが、難しいのでまだ対応していない</li>
<li>結局何も移動できない?</li>
<li>ほとんどの問題は解決できる</li>
<li>現在使用中の Rails のコードでも 46% のオブジェクトは移動可能</li>
<li>コンパクション前後のグラフ</li>
<li>メモリ検査ツール</li>
<li><code>ObjectSpace.dump_all</code> : JSON でファイルに書き出せる</li>
<li>ヒープの断片化のグラフ</li>
<li><code>/proc/${PID}/smaps</code> はスキップ</li>
<li>まとめ</li>
<li>小さいプログラムにはあまり節約にならないのでプロダクションでテスト中</li>
<li>コンパクションは不可能だと思っていたが、その質問に答えることができなかったので、もっと早く試せばよかったと思った</li>
<li>不可能と思っても可能かもしれない</li>
</ul>


<h2>Irb 20th anniversary memorial session: Reish and Irb2</h2>

<ul>
<li>勝手に20周年記念講演</li>
<li>ちょっと irb の話と Reish の話をする</li>
<li>Ruby 考古学の復習と追加の話</li>
<li>irb の昔の名前の rbc の由来は bc コマンド</li>
<li>他に perl -de 0 や sample/eval.rb が開発のきっかけ</li>
<li>REPL (Read-Eval-Print-Loop)</li>
<li>Lisp の <code>(loop (print (eval (read))))</code></li>
<li>Ruby 的には <code>loop{p eval gets}</code></li>
<li>複雑な構文の言語では初ではないか</li>
<li>REPL の用途</li>
<li>Ruby の振る舞いを確かめる</li>
<li>ライブラリなどのデバッグ用コンソール</li>
<li>情報科学入門 Rubyを使って学ぶ という本では irb を使っているらしい</li>
<li>しかし irb 上で生活している人はいなさそう</li>
<li>そこで Reish</li>
<li>shell の上でも ruby 的な生活を満喫するため</li>
<li>Enumerable, Iterator (たぶん今ではブロックと呼ばれるもの全般をさしてそう), OO, ほか</li>
<li>何がシェルっぽいか: comma なし <code>""</code> とかなくても良い文字列ベース</li>
<li>Reish のコードは Ruby に変換して実行</li>
<li>パイプラインは lazy enumerator で繋がっている</li>
<li>ブロックも使えるが do を予約語にはしにくかったので <code>ls -l --do</code> という感じになっている (<code>{}</code> は普通)</li>
<li>デモ</li>
<li><a href="https://github.com/keiju/reish">https://github.com/keiju/reish</a></li>
<li>job コントロールもある</li>
<li>job ごとに Thread を起動している</li>
<li>補完</li>
<li>irb 再考</li>
<li>長い間開発は停止していたが Reish の開発で irb の方も構想が見えてきた</li>
<li>irb の lexer は使っている gem があるので、大幅に変更は難しそう</li>
<li>Reish は完全なパーサーを持っていて、高機能なことができている</li>
<li>irb2 = reirb ?</li>
<li>zsh の <code>ls --a[TAB]</code> で出てくるヘルプのようなことができるとうれしそう</li>
<li>zsh は 複数行の編集機能 (zle) があったり</li>
<li>Reish 用のマルチラインエディタ Reidline を開発中</li>
<li>Q(次の時間の発表者のaycabtaさん) メモ取れず</li>
</ul>


<h2>昼休み</h2>

<p>途中の時間でセッションを諦めて見にいくのは難しいかなと思って、コンビニで軽く食事をして、広島平和記念資料館に行ってきました。(Twitter で RubyKaigi 2017 の名札を見せると無料で入れるという情報があったため)</p>

<p>本館はリニューアル工事中で、東館だけが開いているということのようでした。</p>

<p>小学校の修学旅行できた覚えがあるのですが、最初の上の階をぐるっと見て回る常設展示は最近の情報もあって、昔来た時には絶対なかったものだなあと思いつつ見ていました。</p>

<p>最後に階段を降りた後にあった企画展示室のところは、昔トラウマになった白黒写真などが少しありました。もらったパンフレットには、閉館中の本館で展示していた資料などを展示していると書いてあるので、本館が復活すれば、昔見たようなものがたくさんあるのではないかと思いました。</p>

<h2>Ruby Parser In IRB 20th Anniversary&hellip;Now Let Time Resume</h2>

<ul>
<li><a href="https://bugs.ruby-lang.org/issues/11389">https://bugs.ruby-lang.org/issues/11389</a></li>
<li>asakusa.rb とか</li>
<li>IRB: 1997, RDoc: 2003</li>
<li>RDoc は IRB の lexical analyser を使っていた</li>
<li>legacy になってしまってメンテナンスコストが増大していた</li>
<li>private def foo のような書き方の対応とか</li>
<li>IRB: 1997, RDoc: 2003, Ripper: 2004</li>
<li>parse.y, IRB, RDoc の3個の Ruby パーサーが重複して含まれている</li>
<li>2016年12月から作業開始</li>
<li>RDoc がクラッシュしたので直した</li>
<li>古い実装と書き直した実装で出力を比べて見たら、 RDoc がバグっていたので古い lexer で新しいものに対応した</li>
<li>最終的にマージされた</li>
<li>後置 if と普通の if の区別などに <code>lex_state</code> が重要</li>
<li><a href="https://github.com/ruby/rdoc/pull/512">https://github.com/ruby/rdoc/pull/512</a></li>
<li>RDoc 6 beta</li>
<li>質疑応答 (翻訳は zzak)</li>
<li>Q(ujm): <code>lex_state</code> を古い ripper では pure ruby で実装したのはどうやったみたいな質問っぽい → メモ取れず</li>
<li>Q(かねこさん): ripper は使っているバージョンの ruby で動くので、古い ruby バージョンのドキュメントを処理すると問題が起きることもあるのでは? → 壊れることもあるかもしれないが、大丈夫なのではないかという感じ(?)</li>
<li>Q(tenderlove): ripper はコード内のコメントを保存していますか? → AST の段階ではコメントは含まれないが、tokenize しかしていないので、開始、中身の謎の文字列、終端のようになって、中が何を意味するかには踏み込まないので、情報が消えたりはしない。</li>
<li>Q(ujm): RDoc は既存のものと互換性があるように ripper に置き換えたが次は何に挑戦する予定? → Ruby コードの情報をとるライブラリ、 irb の TAB キーでの補完でドキュメント (RDoc) も出るようにしたい</li>
<li>Q: irb のパーサーをどうにかする予定は? → nobu が ripper に置き換えようとしたが諦めた。多分できそうだが、大変そう。メソッドドキュメントの表示をしたい。</li>
<li>nobu の irb は syntax highlight がついていた。</li>
<li>syntax highlight もやりたい。</li>
<li>Q: Cのファイルのドキュメントは? → 今回の変更とは無関係。</li>
<li>C extension のドキュメントの方も必要に応じてみた方が良いのかもしれないが、まだ見ていない。</li>
<li>Q(ujm): 6ページあった修正点の中からピックアップするなら? → legacy な lexer で、新しい ruby syntax のサポートが大変だった</li>
<li>テストが壊れた</li>
<li>Q: 聞き取れず → 答えられない</li>
<li>Q: 1日どれくらいやっている? → 1ヶ月ぐらい、1日16時間?</li>
</ul>


<h2>一回休み</h2>

<p>セッションは諦めて休憩していました。</p>

<h2>Writing Lint for Ruby</h2>

<ul>
<li>SideCI</li>
<li>Lint ツール: RuboCop, Reek, Brakeman, Querly, &hellip;</li>
<li>Rules of Lint, Lint tools をかけるようになることがこのプレゼンの目標</li>
<li>lint tool があればより安全にプログラムが作れるようになる</li>
<li>Lint とは何か?</li>
<li>もともと C 言語用のツールの名前だったが、今ではいろんな言語にある</li>
<li>RuboCop の例を紹介</li>
<li><code>if 10 &lt; x &lt; 20</code> は実行するとエラー</li>
<li><code>foo bar { body }</code> や <code>x *y</code> は曖昧</li>
<li>そういうコードをチェックする</li>
<li>どう動くか?</li>
<li>AST (Abstract Syntax Tree) で扱う</li>
<li>parser gem を使って AST に変換している</li>
<li>parser gem の AST の node は type と children を持つ</li>
<li>行、桁、ソースなどのメタデータも持っている</li>
<li>他のパーサー</li>
<li>Ripper は標準で含まれているが、パースで想定するバージョンと実行する ruby のバージョンが同じになってしまう</li>
<li>ruby 2.4 で ruby 2.0.0 の lint ができない</li>
<li>ruby_parser は使ったことがないが parser gem と似たような感じらしい</li>
<li>Traverser: Depth-first search をして node ごとに <code>on_send</code> などの <code>on_#{node.type}</code> を呼び出す</li>
<li>if の条件に Integer リテラルのみを直接書いた場合に警告を出す例</li>
<li>Lint の限界 (Ruby の場合)</li>
<li>ローカル変数はただの変数</li>
<li><code>num = 1; if num; something; end</code> のようなコードは対象外</li>
<li>不可能ではないが複雑になる: たとえば Brakeman では追跡している</li>
<li>メソッドの定義やクラスや定数が正確にはわからない</li>
<li><code>sprintf('%s, %s', str)</code> は警告されるが <code>sprintf</code> が再定義されていると意味がない可能性があるが、そんなことはしないだろうと想定して動いている</li>
<li>動的なものは Lint より Test の方が向いている</li>
<li>Lint は AST がわかる</li>
<li>Lint は実行せずに解析できる</li>
<li>トレードオフがある</li>
<li>RuboCop に cop (ルール) を追加する</li>
<li>汎用的なものはヘルパーメソッドがあるので書きやすい: <code>if 1 ; end</code>, <code>ruby -cw</code> のようなもの</li>
<li>デモ: <code>rake new_cop[Lint/LitInCond]</code></li>
<li>特定のフレームワークに対して追加したい場合</li>
<li>RuboCop Plugin としてかける</li>
<li>例: backus/rubocop-rspec</li>
<li>1から作る場合</li>
<li>たとえば Lint + Git Diff, Ruby + YAML 用など</li>
<li>新しく作った方が作りやすい</li>
<li>質疑応答</li>
<li>Q: sprintf の再定義のような <code>Kernel</code> に再定義しているのを検出する cop は? → ない。ある程度は作れそう。本体には入りそうにない。</li>
<li>Q: デフォルト false では? → デフォルト false のものはメンテされないという現実があるので入れたくない。</li>
<li>Q(mame): RuboCop のゴールは? <code>10 &lt; x &lt; 20</code> のような初心者が陥りがちなものだけではなく、コーディングスタイルを押し付けられる感じがある? → 二面性がある。スタイルチェッカーと Lint としての側面がある。どっちも増えそう。</li>
<li>アップデートが辛い問題はツールを作っている。Style 系をオフにするとか。</li>
<li>Q: 汎用的なもののようにみえるが、プロジェクト固有のものはどうすれば? → 自社用のプラグインを作る or soutaro さんが作っている YAML でかくものがあるのでそれを使う のが良いのではないか</li>
<li>Q: カスタムコップを作りたい場合のドキュメントがなさそうな理由は? → 現状カスタムコップ、プラグインを作る仕組みが整備されていない。issue が止まったままなので頑張りたい。</li>
<li>Q: <code>new_cop</code> タスクは stable? → 本体に入っているので大丈夫だが、将来的に変更される可能性はあるかも。</li>
<li>Q: Rails は本体に config が入っているが? → 現状では特にロードマップはない。個人的には rails 関連は外に切り出したい。</li>
<li>Q: 一部は <code>ruby -cw</code> にあった方が良いのでは? → 本体に持っていく動きは今のところない。<code>ruby -cw</code> とかぶっているものもある。パフォーマンス的にできるのかというものもある。</li>
<li>Q: メモ取れず → ローカル変数をトレースするのはやりたいが、良い方法を思いついていないので、手がついていない。</li>
<li>Q: 速度が遅いのが気になっている。 parser gem が遅いのではないか。バージョンをわけたいという希望はないので ripper で高速化できないか? → ライブラリの CI で困りそう。インターフェースが違うので簡単に移行できない。</li>
<li>Q(znz): feature request の issue を書いたことがあるが、request だけだと難しい? → できるだけ実装するか、無理なら無理と返信したいが、たまっていてなかなか手が回っていない。</li>
</ul>


<h2>How to write synchronization mechanisms for Fiber</h2>

<ul>
<li>dRuby 本まだ買えます</li>
<li>Web 版もあります</li>
<li>Process - Thread - Fiber</li>
<li>80s はプロセスへの憧れがあった</li>
<li>90s のノンプリエンティブな協調型マルチタスクって Fiber じゃん?</li>
<li>実際のシステムは、プロセスだけ隔離しても結局はダメだった</li>
<li>ほかのプロセスとどうにかして共有が必要だった</li>
<li>IPC はめんどくさい</li>
<li>説明や使うのがめんどくさい</li>
<li>Thread: 多くの人にはプロセスの方がいいと思う</li>
<li>ほかのスレッドのメモリを触らないようにものすごく気をつける必要がある</li>
<li>Thread を使うには OS よりうまく扱えるという傲慢さが必要</li>
<li>Fiber: ほとんどの人には Thread の方がいいと思う</li>
<li>Fiber を使うには Ruby よりコンテキストスイッチをうまく扱えるという傲慢さが必要</li>
<li>Fiber → 自動的にスイッチしてよ → Thread → メモリを自動的に保護してよ → Process</li>
<li>Fiber を使ったフレームワークがすごいらしい</li>
<li>Fiber を使うプログラムを自分でも作って見たいと思った</li>
<li>Thread よりも難しいと思ったら、その通りだったので共有したい</li>
<li>Fibonacci の例</li>
<li>ループで書くと簡単</li>
<li>Fiber で書く例 (初日であったような感じ)</li>
<li><code>Fiber.new</code>, <code>Fiber#resume</code>, <code>Fiber.yield</code></li>
<li>new しただけでは実行されない</li>
<li>resume で Fiber にコンテキストを移す</li>
<li>一度目は先頭へ</li>
<li>二度目以降は <code>Fiber.yield</code> したところへ</li>
<li>これは何度目の resume かな…</li>
<li>resume と yield の概念がとっつきにくい</li>
<li>Enumerator で書き直す</li>
<li>おすすめ</li>
<li>次のテーマは同期 (待ち合わせ)</li>
<li>Thread での Queue を介した協調の Fiber 版を書きたい</li>
<li>rendez-vous (Rdv) の実装</li>
<li>イディオム: とりあえず resume、行き詰まったら yield</li>
<li>Fiber.new してすぐに resume すると Thread.new のように使える</li>
<li>やれることがなくなったら yield して Fiber.current を覚えてもらう</li>
<li>実装例: push, pop</li>
<li>Fiber だと条件検査の排他制御が不要</li>
<li>Thread だと危険</li>
<li>動きの例</li>
<li>同期の条件検査に排他制御が入らないので、Fiber のつもりが Thread だったというのは危険なので、Auto Fiber のようなものより、Thread のつもりが Fiber だったの方が安全ではないか</li>
<li>Multiplexer: socket のある例</li>
<li><code>read_nonblock</code> を使う</li>
<li>ブロックしそうな時 (<code>IO::WaitReadable</code>) に yield してメインループに戻る</li>
<li>block-ish nonblock I/O</li>
<li>ライブラリを作った: <a href="https://github.com/seki/bartender">https://github.com/seki/bartender</a></li>
<li>実際のアプリケーション例</li>
<li>tiny_drb の抜粋</li>
<li>昔よく見たバグの話</li>
<li>デモは作って見たが、見てもよくわからなかったので、説明</li>
<li>Multiplexer のまとめ</li>
<li>Fiber 入門のまとめ: 難しいよね</li>
<li>Fiber は難しいところが面白い</li>
<li>全体が暗記できるぐらいのサイズだったので罠を避けられた</li>
<li>すみずみまでわかっていないとハマることがある</li>
<li>ハマる可能性があると覚えておけば大丈夫</li>
<li>例: twitter クライアントの gem が全部読んで String にしてから JSON.parse するのでハマったので、ストリーム対応の JSON.parse はあるのかな?</li>
<li>ハマりそう: RDBMS のドライバ</li>
<li>質疑応答</li>
<li>Q: 読み書きしようとして安直にするとブロックするが、読めるだけ読むのがあるが書く方は? → 書く方もかけるだけ書くというのがある</li>
<li>Q: gets とか使えなくて不便? → 聞き取れず</li>
<li>Q(cuzic): Fiber の方が良いユースケースは? → Enumerator が良い例</li>
<li>Q(cuzic): 外部イテレーターではなく agent のようなパフォーマンスがよくなるという例は? → ゲームのキャラクターを動かすような誰かがビートを刻むような例は良さそう。 I/O は向いてなさそう。 Auto Fiber や co-routine の例をみると良い例があるのかも。</li>
<li>Q(joker): Thread で書いた場合は GIL で1コアでしか動かないが、(聞き取れず)だと別実装だと複数コア使えるとかあるが、Auto Fiber とかだと使えるようになる? → Fiber は Thread の中で動くので無理ではないか</li>
<li>Q(joker): 外部イテレーターにするとか見せ方の変更はできるが、マルチコアでパフォーマンスの改善という用途ではない? → そう理解している</li>
<li>Q: Thread と Fiber は違うのになぜ Fiber という名前なのかという感じの質問っぽい → Windows でそういう名前だから</li>
</ul>


<h2>MEDLEY のスポンサーセッション</h2>

<ul>
<li>会場アンケート</li>
<li>知っている人? → 少ない</li>
<li>昨日呑んだくれて疲れている人? → それなり?</li>
<li>遠隔診療が実質解禁されたので CLINICS というアプリを作った</li>
<li>医療 x IT への挑戦</li>
</ul>


<h2>Towards Ruby 3x3 performance</h2>

<ul>
<li>Ruby 3 performance goal</li>
<li>RTL (register transfer language) insns</li>
<li>RTL insns と stack insns の比較</li>
<li>RTL insns の精製方法</li>
<li>RTL insns のオペランド</li>
<li>RTL complications</li>
<li>RTL insn combing and specialization</li>
<li>Speculative insn generation</li>
<li>RTL insn status and future work</li>
<li>Possible JIT approaches</li>
<li>Option 1: Writing own JIT from scratch</li>
<li>メンテナンスするのが大変</li>
<li>Option 2: Using widely used optimizing compilers</li>
<li>コンパイルが遅い</li>
<li>Option 3: Using existing JITs</li>
<li>License issues and patent minefield</li>
<li>Own or existing JITs vs GCC/LLVM based JITs</li>
<li>How to use GCC/LLVM for implementing JITs</li>
<li>MJIT: <strong>M</strong>RI JIT, <strong>M</strong>ethod JIT</li>
<li>Example</li>
<li>MJIT performance results</li>
<li>どれが何かわからないグラフ</li>
<li>途中からちゃんと下まで出てきた</li>
<li>Recommendations to use GCC/LLVM for a JIT</li>
<li>MJIT status and future directions</li>
<li>RTL と MJIT が MRI の一部になるかはわからないがこの方向性で頑張る</li>
<li>質疑応答</li>
<li>Q(tenderlove): (メモ取れず)</li>
<li>Q: inline 化の話っぽい</li>
<li>Q: メモリ使用量の話っぽい</li>
<li>Q(ujm): make check が通らない理由は? → 並列実行とか callcc とか GC が関わるものとか(?)</li>
<li>Q: モチベーションは? → (よくわからず)</li>
<li>Q(ko1): GCC でループが最適化が測地になる例があったが、再定義対応は? → (よくわからず)</li>
<li>matz のコメント</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>MINASWAN 乙</li>
<li>936枚チケットが売れた</li>
<li>Next: Sendai May 31 (Thu) - June 2 (Sat)</li>
</ul>


<h2>全体の感想</h2>

<p>とりとめもなく色々と。</p>

<p>Twitter で @takatayoshitake さんとかの情報提供が色々と便利でした。(特に最終日のロッカー情報)</p>

<p>Twitter のハッシュタグ <code>#rubykaigi</code> は流れが速いと全然追いきれないので、あとで togetter でみれるかなと思っていたら、今年は特になさそうで残念な思いをしました。
RubyKaigi 全体のハッシュタグも、部屋ごとのハッシュタグも入り口に書いてあっただけで、特にアナウンスはなかった気がするので、部屋ごとのハッシュタグはつけずに <code>#rubykaigi</code> だけのツイートを、その人がどの部屋に参加していたか識別してまとめに振り分ける、という判断をしつつ、まとめを作ってくれる人が必要そうな気がします。</p>

<p>台風が移動に影響したり、カープ優勝でセールがあったりなど、外部要因でもいろんなことがあったのが印象深かったです。</p>

<p>3トラックあったので、興味があったのに見に行けなかったものも多いので、あとでチェックしたいと思いました。</p>

<p>昼の弁当スポンサーがなかった代わりに、夜の懇親会が大量にあったのがよかったです。</p>

<p>LT の発表は通訳の人との打ち合わせがない分、気軽だった代わりに、ちゃんと時間で切られる LT が久しぶりだったので、非常に緊張しました。
そして、実際には練習より早口だったのか、予定よりたくさん喋っても時間が余ってしまうという感じになってしまいました。
ネタが多い分には、後でRuby関西で使うなりブログに書くなり、他の発表場所はあるので、今後機会があれば多めに用意して調整できるようにしてみたい、と思いました。
日本語での発表でも、発表資料は頑張って英語で書いておいたからか、<a href="https://twitter.com/drbrain/status/910069298789588998">英語での反応があった</a>のが嬉しかったです。
基本的に何か反応があると嬉しいものなので(承認欲求)、発表とかしないという人でも、積極的にいいねをしたり、スターをつけたりすると良いと思います。</p>

<p>開催の頭が連休だと、休みの部分を観光に、と思っても、期間中に出て来たオススメ情報を活用できないので、来年のように、後に休みが続く方が嬉しいと思いました。
今回の場合は、台風で日曜に観光は無理だったということがありましたが、広島平和記念資料館に無料で入れるという特典が、前日に知らずに行っていたら無駄になる、ということがおきたのではないかと思いました。</p>

<p>基本的に人を覚えるのが苦手なので、今回会った人で、次回忘れていたらすみません。</p>

<p>Workshop は気になったのと、普通の発表は後で録画をみることもできる、というので、できれば参加したかったのですが、 <a href="https://github.com/rubydata/rubykaigi2017">https://github.com/rubydata/rubykaigi2017</a> の事前準備をしようとしたら、前日に止まっていたホテルだと帯域制限らしき状態になってしまって、 <code>rake docker:pull</code> できなかったということもあって諦めました。
Afternoon Break の時間に重なっていた方も、 LT の前の接続確認をする必要があったので、諦めました。</p>

<p>LT の接続確認は、なぜか最大化したときの表示がリサイズ前の範囲しか表示されない、という現象がなおらず (以前は次のページに移動したり、一覧ページに移動したりすればなおっていた)、発表準備期間中に n0kada さんが rabbit の方に終了時に落ちる (正常終了ではなく SEGV 的な終わり方をする) のを報告していたので、同じ macOS っぽいとわかっていたので、どうしていたのかきいてみたら、 <code>rabbit -S 1920,1080 hoge.md</code> のように <code>-S</code> で画面サイズを指定して起動すれば良いと教えてもらって解決しました。ありがとうございました。</p>

<h2>まとめ</h2>

<p>色々と大変なこともありましたが、大きな問題もなく、無事終わって良い RubyKaigi でした。</p>
]]></content>
  </entry>
  
</feed>
