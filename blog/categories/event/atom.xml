<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: event | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/event/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2015-04-30T16:40:30+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第66回 Ruby関西 勉強会に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2015-04-25-rubykansai66.html"/>
    <updated>2015-04-25T13:26:49+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai66</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/21276" title="第66回 Ruby関西 勉強会">第66回 Ruby関西 勉強会</a>
に参加したので、そのメモです。</p>

<!--more-->


<h2>勉強会自体の URL</h2>

<ul>
<li><a href="https://rubykansai.doorkeeper.jp/events/21276" title="doorkeeper">doorkeeper</a></li>
<li><a href="https://github.com/rubykansai/workshops/wiki/Kansaiworkshop066" title="github">github</a></li>
</ul>


<h2>GitLab Flow</h2>

<ul>
<li><a href="https://speakerdeck.com/ogom/gres">https://speakerdeck.com/ogom/gres</a></li>
<li>1 スクラムマスターに依頼</li>
<li>2 イシュー登録</li>
<li>3 エンジニアにアサイン</li>
<li>4 見に行く</li>
<li>5 コードに反映</li>
<li>6 ブランチにコミット</li>
<li>7 エビデンスを登録</li>
<li>8 リモートブランチにあげる</li>
<li>9 コードレビューのためのマージリクエスト (pull request)</li>
<li>10 レビュアーをアサイン</li>
<li>11 リクエストを見る</li>
<li>12 コードを見る</li>
<li>13 リファクタリング</li>
<li>14 マージリクエストを評価</li>
<li>15 スクラムマスターに知らせる</li>
<li>16 スクラムマスターがイシューのエビデンスを確認する (コードはレビュアーが見ているので見ない)</li>
<li>17 マージとリリース</li>
<li>DDD.rb</li>
<li><a href="http://kanban.leanlabs.io/">http://kanban.leanlabs.io/</a></li>
<li><a href="https://gitlab.com/ogom/gres/blob/master/README.md">https://gitlab.com/ogom/gres/blob/master/README.md</a></li>
</ul>


<h2>ノンプログラマーが6ヶ月でWebサービスを作る課程で感じた事</h2>

<ul>
<li><a href="http://email.nyusureta.com/" title="ニュースレター配信システム Easy Follow E-mail System">ニュースレター配信システム Easy Follow E-mail System</a></li>
<li><a href="http://www.slideshare.net/soheiyagi/ruby20150425" title="ノンプログラマーが6ヶ月でWebサービスを作る課程で感じた事／Ruby関西20150425">ノンプログラマーが6ヶ月でWebサービスを作る課程で感じた事／Ruby関西20150425</a></li>
</ul>


<h2>ハマるRuby</h2>

<ul>
<li>填まる／嵌まる (後者)</li>
<li><code>and</code>/<code>or</code> と <code>&amp;&amp;</code>/<code>||</code> の優先順位が違う話</li>
<li>代入演算子の返り値</li>
<li><code>super</code> で参照される引数を書き換えたときの挙動の話</li>
<li>定数のスコープの話</li>
</ul>


<h2>Ruby初級者向けレッスン</h2>

<ul>
<li>文字列</li>
<li>Emacs で rcodetools</li>
<li><a href="https://gist.github.com/higaki/8147246">https://gist.github.com/higaki/8147246</a></li>
<li><a href="https://github.com/higaki/learn_ruby_kansai_66">https://github.com/higaki/learn_ruby_kansai_66</a></li>
<li><a href="http://docs.ruby-lang.org/ja/">http://docs.ruby-lang.org/ja/</a></li>
<li><a href="http://qa.atmarkit.co.jp/q/2026" title="Rubyのsize/length/countの違いは？">Rubyのsize/length/countの違いは？</a></li>
</ul>


<h3>解答例</h3>

<p>演習問題の 1 と 3 をやってみた例です。</p>

<pre><code class="ruby">    #!/usr/bin/env ruby
    # coding: utf-8
    s = &lt;&lt;EOF
    文 字
    文字
    EOF
    puts s.count("\n")
    puts s.lines.size
    puts s.scan(/(?u)\w+/).size
    puts s.chars.size
    puts s.bytes.size

    # 試行錯誤例
    p s.each_line.size # nil ??
    p s.scan(/(?u:\w)+/).size
    p s.scan(/[[:graph:]]+/).size
    p s.each_char.size
    p s.each_byte.size
</code></pre>

<p>ランダムに入れ替え。</p>

<pre><code class="ruby">    cambridge.gsub!(/\b([^ ])([^ ]+?)([^ ])\b/) do
      [$1, *$2.chars.shuffle, $3].join
    end
</code></pre>

<p>動作確認用に reverse にしていた時。</p>

<pre><code class="ruby">    cambridge.gsub!(/\b([^ ])([^ ]+?)([^ ])\b/) do
      [$1, *$2.chars.reverse, $3].join
    end
</code></pre>

<h2>告知</h2>

<ul>
<li><a href="https://rubykansai.doorkeeper.jp/events/23266" title="第67回 Ruby関西 勉強会">第67回 Ruby関西 勉強会</a> は 6 月 13 日 (土) に京都女子大学</li>
<li><a href="http://rubykansai.github.io/kansai06/" title="関西Ruby会議06">関西Ruby会議06</a> は 7 月 11 日 (土) に新大阪 MOTEX 2 階ホール</li>
<li>などなど</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4月4日 アンダースタンディング コンピュテーション読書会 第2回 (大阪府)に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2015-04-04-amagasakirb.html"/>
    <updated>2015-04-04T12:50:16+09:00</updated>
    <id>http://blog.n-z.jp/blog/amagasakirb</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/event/index/276001/" title="4月4日 アンダースタンディング コンピュテーション読書会　第2回 (大阪府)">4月4日 アンダースタンディング コンピュテーション読書会　第2回 (大阪府)</a>
に参加しました。
今回はいつもと違う会場でした。</p>

<!--more-->


<h2>メモ</h2>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=487311697X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>以下、今回のメモです。
個人的なメモと話に出ていたことのメモが混ざっています。</p>

<ul>
<li><a href="https://github.com/cuzic/amagasakirb/wiki/2015.04.04-%E3%82%A2%E3%83%B3%E3%83%80%E3%83%BC%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3-%E8%AA%AD%E6%9B%B8%E4%BC%9A-%E7%AC%AC2%E5%9B%9E" title="2015.04.04 アンダースタンディングコンピュテーション 読書会 第2回 · cuzic/amagasakirb Wiki">2015.04.04 アンダースタンディングコンピュテーション 読書会 第2回 · cuzic/amagasakirb Wiki</a></li>
<li><a href="https://twitter.com/hashtag/amagasakirb" title="#amagasakirbに関するツイート">#amagasakirbに関するツイート</a></li>
<li><a href="https://github.com/tomstuart/computationbook">https://github.com/tomstuart/computationbook</a> にサンプルコードがある</li>
<li>p.41 「いろいろな意味で、これはスモールステップというアプローチよりも自然に感じられますが、」の自然に感じられる理由は? という話。</li>
<li>軽く自己紹介</li>
<li>p.46 「この違いは、それぞれのアプローチの目的を際立たせます。」の目的とは? という話。</li>
<li>Google マップで会場の検索をすると位置がずれているのは申請で修正できるという話。</li>
<li>p.69 <code>string.chars.each</code> は一度配列を作る <code>chars</code> よりも <code>each_char</code> の方が良いのでは。</li>
<li>p.73 <code>flat_map</code> をなぜ使っているのかという話。 <code>follow_rules_for</code> が配列を返すので、入れ子の階層を一段階減らすため。</li>
<li>有限オートマトンの有限とは? という話。
とりうる状態が有限。
状態が無限のものは無限オートマトンとか次の章で出てくるプッシュダウンオートマトンとか。</li>
<li>p.82 <code>precedence</code> とは何かという話。 p.81 の <code>bracket</code> で使われている結合の優先順位。</li>
<li>3 章のサンプルコードは <code>the_simplest_computers</code> にあって最終状態のクラスのコードが入っている。実行結果の例もついているものは <code>irb.txt</code> に書いてある。</li>
<li>p.90 脚注の「ここでは新しい状態を追加する代わりに、元の開始状態を受理状態にするだけで済ませることもできましたが、そのやり方だと複雑な場合に(たとえば、<code>(a*b*)*</code>)、空文字列以外の望まない文字列まで受理する機械ができてしまします。」で受理されてしまう例は?

<ul>
<li><code>Repeat#to_nfa_design</code> の <code>start_state = Object.new</code> を <code>start_state = pattern_nfa_design.start_state</code> に変更して <code>pattern = Repeat.new(Concatenate.new(Repeat.new(Literal.new('a')), Literal.new('b')))</code> (<code>/(a*b)*/</code>) で試してみたら <code>'a'</code> も受理された。(<code>pattern.matches?('a')</code> が true になった。)</li>
</ul>
</li>
<li>p.92 <a href="http://patshaughnessy.net/2012/4/3/exploring-rubys-regular-expression-algorithm">http://patshaughnessy.net/2012/4/3/exploring-rubys-regular-expression-algorithm</a> の URL が長い。</li>
<li>わからないところは飛ばしつつ 3,4,5 章を読んで 3 章に戻った方がわかりやすいかもしれないという話。</li>
<li>具体例が正規表現しかないのがわかりにくいかもしれないという話。</li>
<li>マクドナルドなどで注文した結果、一番安いセットが自動で選ばれるようになっているらしいという話。その実装を有限オートマトンでやっているだろうという話。</li>
<li>オートマトン研究は昔の話なので、テープなど言葉が違う (古い) のは仕方がないという話。</li>
<li>p.107, p.108 で <code>\g</code> で括弧の対応関係などの難しい話が載っているという話。</li>
<li><code>Struct.new</code> を継承する必要はあるのかと思っていたが p.116 の <code>current_configuration</code> の <code>super</code> のようなに上書きができるという利点があるとわかった。</li>
<li><code>tap</code> メソッドがよく出てくるという話。</li>
<li>ブロック引数と外側の変数の名前が重なっていたときにどうなるかが 1.9 で変わった話。</li>
<li><code>Kernel#returning</code> というのが昔の ActiveSupport にあったという話。
<code>returning {} do |hash| ... end</code> は <code>{}.tap do |hash| ... end</code> と同じ意味。</li>
<li>C++ の右辺値参照の話。
<a href="http://qiita.com/go_astrayer/items/5d85565e992487daa618" title="C++11 - シンプルな配列クラスを使って「右辺値参照」と「ムーブセマンティクス」を知る - Qiita">C++11 - シンプルな配列クラスを使って「右辺値参照」と「ムーブセマンティクス」を知る - Qiita</a></li>
<li>C++11 で記号だらけという話。</li>
<li>C++ のラムダ式 (<code>[&amp;]{...}</code> とか) の話。</li>
<li>C# も記号を使った記法が増えているらしいという話。</li>
<li><code>Object.new</code> は普通に使われているのかという話。</li>
<li>p.127 <code>LexicalAnalyzer</code> は文字列の先頭や末尾に空白があるとうまく動かなさそうと思って試してみたら、末尾は <code>lstrip</code> で消えるので大丈夫だった。
先頭は <code>NoMethodError: undefined method `post_match' for nil:NilClass</code> になった。</li>
<li>p.128 <code>/(true|false)(?![a-z])/</code> は <code>/(true|false)\b/</code> でも良さそう。</li>
<li>計算機の歴史の話。</li>
<li>オクテットの話。</li>
<li>等価性と非等価性の話。</li>
<li>DFA=NFA (正規表現), DPDA (括弧の対応), NPDA (回文), チューリングマシン (<code>aaabbbccc</code> など)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アンダースタンディング コンピュテーション読書会　第1回(兵庫県)に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2015-02-28-amagasakirb.html"/>
    <updated>2015-02-28T13:00:40+09:00</updated>
    <id>http://blog.n-z.jp/blog/amagasakirb</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/event/index/258232/" title="2月28日 アンダースタンディング コンピュテーション読書会　第1回(兵庫県)">2月28日 アンダースタンディング コンピュテーション読書会　第1回(兵庫県)</a>
に参加しました。</p>

<!--more-->


<h2>メモ</h2>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=487311697X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>以下、今回のメモです。</p>

<ul>
<li><a href="https://github.com/cuzic/amagasakirb/wiki/2015.02.28-%E3%82%A2%E3%83%B3%E3%83%80%E3%83%BC%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3-%E8%AA%AD%E6%9B%B8%E4%BC%9A-%E7%AC%AC1%E5%9B%9E" title="2015.02.28 アンダースタンディングコンピュテーション 読書会 第1回 · cuzic/amagasakirb Wiki">2015.02.28 アンダースタンディングコンピュテーション 読書会 第1回 · cuzic/amagasakirb Wiki</a></li>
<li><code>-&gt;</code> が多い</li>
<li><code>-&gt;</code> の後に括弧を書くかどうか (書く方が多数派だった)</li>
<li><code>.call()</code> の <code>call</code> の省略を使うかどうか (省略しない方が多数派だった)</li>
<li>多重代入の右辺の <code>[]</code> でくくって配列にしているのはあってもなくてもこの例だと同じ</li>
<li><code>"#{obj}"</code> は <code>#to_s</code> が呼ばれる</li>
<li><code>"abc" + obj</code> は <code>#to_str</code> が呼ばれる</li>
<li><code>String(obj)</code> も <code>#to_str</code> が呼ばれる</li>
<li>p.9 <code>*演算子</code> の演算子という表現が引っかかる</li>
<li><code>Symbol#to_proc</code> と <code>Object#tap</code> は Rails (ActiveSupport 由来)</li>
<li><code>class Point &lt; Struct.new(:x, :y)</code> の話</li>
<li>名前が決まらなくて入らないメソッドがある話</li>
<li>名前が決まって最近入った例としては <code>itself</code> (ruby 2.2 から)</li>
<li>p.19 「Ruby 1.8.7 には文書としての仕様書が存在しており、ISO標準として受理されています (ISO/IEC 30170)」とあるが更新されることはないのかという話</li>
<li>p.21 の図が難しい</li>
<li>p.23 二重山括弧</li>
<li>Option + Shift + K で入力できる Apple 記号の話</li>
<li>p.51 の <code>DoNothing</code> がほぼ <code>itself</code></li>
<li>簡約可能という言葉の意味が分かっていないとつらいのではないかという話 (簡約可能とはまだ処理することが残っていることで簡約不可能とはもう処理することが残っていない状態という話)</li>
<li>Treetop, Parslet (オススメ), ANTLR</li>
<li>Node.js, io.js, JXcore</li>
<li>p.37 <code>DoNothing.new</code> の <code>.new</code> はあってもなくても良いのではないかという話</li>
<li><a href="https://github.com/ko1/uc_ja" title="『アンダースタンディング コンピュテーション』のサポートリポジトリ">『アンダースタンディング コンピュテーション』のサポートリポジトリ</a></li>
<li>yacc やコンパイラコンパイラの話</li>
<li>ブログの引っ越し先の話</li>
<li>markdown の方言の話</li>
<li>次回は 4/4(土) に小田公民館の会議室が確保できなかったという理由で別の場所で。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第65回 Ruby関西 勉強会に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2015-02-21-rubykansai65.html"/>
    <updated>2015-02-21T13:48:06+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai65</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/18820" title="第65回 Ruby関西 勉強会">第65回 Ruby関西 勉強会</a>
に参加したので、そのメモです。</p>

<!--more-->


<h2>Rails4.2の新機能について</h2>

<ul>
<li>ActiveJob を中心に Rails 4.2 の新機能の話でした。</li>
<li>Delayed Job はあまり使われなくなっていて、今は Sidekiq と Resque がメジャー</li>
</ul>


<h2>Ruby 2.0 以降の変更をふりかえる</h2>

<p>LT なので早足での紹介でした。</p>

<ul>
<li><a href="https://speakerdeck.com/sixeight/siyututohurikaeru-ruby-2-dot-0-yi-jiang" title="シュッとふりかえる Ruby 2.0 以降 // Speaker Deck">シュッとふりかえる Ruby 2.0 以降 // Speaker Deck</a></li>
<li>Ruby 2.0</li>
<li>キーワード引数</li>
<li>Refinements (Experimental)</li>
<li><code>Module#prepend</code></li>
<li>デフォルトエンコーディングが utf-8</li>
<li><code>Enumerable#lazy</code></li>
<li>Ruby 2.1</li>
<li>RGenGC</li>
<li>必須キーワード引数</li>
<li>メソッド定義がシンボルを返すようになった</li>
<li><code>Binding#local_variable_(get|set)</code></li>
<li>Refinements</li>
<li>freeze

<ul>
<li>すべての Symbol がフリーズされるようになった</li>
<li>フリーズされた文字列リテラルが同じ <code>object_id</code> を返すようになった</li>
</ul>
</li>
<li>Ruby 2.2</li>
<li><code>{"symbol-key": "value"}</code></li>
<li>GC (インクリメンタルGC、シンボルGC)</li>
<li>Binding (<code>#local_variables</code>, <code>#receiver</code>)</li>
<li><code>Method#super_method</code></li>
<li><code>Method#curry</code></li>
<li>Enumerable

<ul>
<li><code>#slice_after</code></li>
<li><code>#max</code>, <code>#max_by</code>, <code>#min</code>, <code>#min_by</code> が引数をとれるようになった</li>
</ul>
</li>
<li><code>Object#itself</code></li>
<li><code>Comparable#==</code></li>
</ul>


<h2>休憩</h2>

<p>10分休憩</p>

<h2>BCCWJ を弄ぶ</h2>

<p>BCCWJ (= 現代日本語書き言葉均衡コーパス) を使っていろいろ遊んでみたという話でした。</p>

<h2>Wakayama.rb ボードの紹介</h2>

<ul>
<li>mruby ボード</li>
<li><a href="https://github.com/tarosay/Wakayama-mruby-board">https://github.com/tarosay/Wakayama-mruby-board</a></li>
<li>rx-elf-gcc</li>
</ul>


<h2>Ruby コミュニティｘ企業</h2>

<ul>
<li>hommachi.rb

<ul>
<li><a href="https://hommachirb.doorkeeper.jp/">https://hommachirb.doorkeeper.jp/</a></li>
<li>次回3月7日(土)</li>
</ul>
</li>
<li>Ruby ビジネスセミナー

<ul>
<li>7/9(木)</li>
<li><a href="http://www.ruby-b.com/">http://www.ruby-b.com/</a></li>
</ul>
</li>
<li>コミュニティと企業が歩み寄る話</li>
</ul>


<h2>Medaka.rb 活動概要</h2>

<ul>
<li>西宮、梅田あたり</li>
<li>他の勉強会の足がかり</li>
<li>Ruby関西などで告知があったので最初から人が集まった</li>
<li>次回は3/14(土)</li>
</ul>


<h2>休憩</h2>

<p>15分休憩</p>

<h2>Gemをコードリーディングしてみよう！</h2>

<ul>
<li><a href="http://qiita.com/taiyop/items/050c6749fb693dae8f82" title="SEO嫌いにお送りするSEO策。これでもうSEOについてしばらく考えなくて良いぜ！！ - Qiita">SEO嫌いにお送りするSEO策。これでもうSEOについてしばらく考えなくて良いぜ！！ - Qiita</a></li>
<li><a href="https://github.com/capistrano/capistrano" title="Capistrano">Capistrano</a> のようなコマンド実行型の gem は bin/cap のようなところから読み始めると良い</li>
<li>読みやすい Gem

<ul>
<li><code>paranoia</code></li>
<li><code>settingslogic</code></li>
<li><code>omniauth</code></li>
<li><code>active_support/core_ext</code></li>
</ul>
</li>
<li><a href="http://www.slideshare.net/babatakao/gem-release" title="初めてのGemの読み方">初めてのGemの読み方</a></li>
<li><a href="https://github.com/tpope/gem-ctags">https://github.com/tpope/gem-ctags</a></li>
</ul>


<h2>Railsの見える化 開発（API編）</h2>

<ul>
<li>Cassette Rack Alchemist</li>
<li><a href="http://white-panda-bef5ea6775f68651.znlc.jp/wordpress/" title="カラカルさんラボ | カラカルさんの実験室">カラカルさんラボ | カラカルさんの実験室</a></li>
<li>Railsの見える化 開発（API編）</li>
<li>RSpec で VCR (Video Cassette Recording) を利用した開発</li>
<li><a href="https://speakerdeck.com/ogom/caracal">https://speakerdeck.com/ogom/caracal</a></li>
<li><a href="https://github.com/ogom/cassette-rack">https://github.com/ogom/cassette-rack</a></li>
</ul>


<h2>休憩</h2>

<p>10分休憩</p>

<h2>Treasure Data での Ruby の利用</h2>

<ul>
<li><a href="http://www.slideshare.net/repeatedly/fluentd-rubykansai-65" title="Fluentd - RubyKansai 65">Fluentd - RubyKansai 65</a></li>
<li><a href="http://www.fluentd.org/">http://www.fluentd.org/</a></li>
<li><a href="https://github.com/fluent/fluentd">https://github.com/fluent/fluentd</a></li>
</ul>


<h2>クロージング</h2>

<ul>
<li><a href="http://goo.gl/iSPrca">第65回 Ruby勉強会 アンケート</a></li>
<li>第66回は4月25日(土)に神戸クリエイティブセンター</li>
<li>第67回は6月に京都のどこか</li>
</ul>


<h2>その他</h2>

<p>懇親会のしめの挨拶できいたのですが、今回は初級者レッスンなしにしたり、
広い会場を確保して人数制限をゆるめにしたり、
2ヶ月前から Facebook などで宣伝したりなど
いろいろ挑戦的な試みをした回だったようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 19 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2015-01-21-rubymotion-mokumoku-osaka.html"/>
    <updated>2015-01-21T19:43:02+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>RubyMotion もくもく会 in Osaka の
<a href="http://rubymotionjp.connpass.com/event/10675/" title="第 19 回 RubyMotion もくもく会 in Osaka - connpass">第 19 回 RubyMotion もくもく会 in Osaka - connpass</a>
に参加してきました。</p>

<p>次回の
<a href="http://rubymotionjp.connpass.com/event/11407/" title="第 20 回 RubyMotion もくもく会 in Osaka - connpass">第 20 回 RubyMotion もくもく会 in Osaka - connpass</a>
2015/02/25(水) になりました。</p>

<!--more-->


<h2>メモ</h2>

<p>今回は Swift のチュートリアルをやっていました。</p>

<p>以下メモです。</p>

<ul>
<li><a href="http://www.bose.co.jp/jp_jp?url=/consumer_audio/headphones/quiet_comfort/index.jsp" title="ノイズキャンセリング・ヘッドホン | ヘッドホン | Bose ボーズ">ノイズキャンセリング・ヘッドホン | ヘッドホン | Bose ボーズ</a></li>
<li><a href="https://www.bloc.io/tutorials/swiftris-build-your-first-ios-game-with-swift" title="Swiftris: Build Your First iOS Game with Swift | Bloc">Swiftris: Build Your First iOS Game with Swift | Bloc</a></li>
<li>ActiveRecord の Callback の呼ばれるタイミング <a href="http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html">http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html</a></li>
<li><a href="http://marked2app.com/" title="Marked 2 - Smarter tools for smarter writers">Marked 2 - Smarter tools for smarter writers</a></li>
<li><a href="https://github.com/jessesquires/JSQMessagesViewController">https://github.com/jessesquires/JSQMessagesViewController</a></li>
<li><a href="http://www.okono.me/" title="大阪・淡路 お好み焼 ゆき">大阪・淡路 お好み焼 ゆき</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
