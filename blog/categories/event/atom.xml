<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: event | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/event/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-11-11T23:37:39+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[関西オープンフォーラム2017 2日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-11-11-kof2017.html"/>
    <updated>2017-11-11T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kof2017</id>
    <content type="html"><![CDATA[<p><a href="https://k-of.jp/2017/">K-OF 2017</a> の2日目に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>いつもの ATC でした。</p>

<p>12時ごろに到着しました。</p>

<h2>mrubyマイコンボードをさわってみよう!</h2>

<p>間に合ったので、スタッフとしてお手伝いをしました。</p>

<p>Windows で Visual Studio Code + Rubic が開発環境でした。</p>

<p>うまく動かない PC があるという感じで大変な点もありましたが、概ね好評な感じだったようです。</p>

<p>うまく転送できなくなることがあるのは、ドキュメントフォルダー以下だとダメだとか、USB をさしなおしたり、 Visual Studio Code の再起動をするとなおることもあるらしいとかいう感じで謎でした。</p>

<h2>Debian Updates</h2>

<ul>
<li>いつものように Debian とは? から。</li>
<li>企業がメインだとどういうことがある?</li>
<li>注力するソフトウェアの選定が企業で決まる。</li>
<li>btrfs を Redhat がやめて、 SUSE が引き継ぐということがあった。</li>
<li>コードネームは 10 の Buster がトイストーリーのおもちゃではなく犬になっているので、まだ大丈夫そう?</li>
<li>Debian 9 について</li>
<li>mysql のデフォルトは stretch では mariadb に置き換わったが、 mysql のパッケージは sid で復活しているらしい</li>
<li>クロスコンパイルは mingw も対応している</li>
<li>Xorg サーバーがユーザー権限が動くようになったので Xvfb や Xnest が動かしやすくなった</li>
<li>mingw のクロスコンパイルが便利そうな例の話: groonga とか?</li>
<li>Firefox の話</li>
<li>セキュリティ更新は ESR</li>
<li>商標などの問題と ESR は別の話</li>
<li>firefox パッケージは sid のみで firefox-esr のみが stable に入っている</li>
<li>新規インストール時のネットワークインターフェース名が変わる</li>
<li>ハマりどころは? → eth0, eth1 の順番が入れ替わることがあった頃の方がトラブっていた。</li>
<li>Hurd はファームウェアがフリーなディスクがなくて、ディスク I/O が遅いが KVM の virtio 経由ならましらしい</li>
<li><a href="https://debianjp.connpass.com/">https://debianjp.connpass.com/</a></li>
<li><a href="https://debianjp.connpass.com/event/71914/">第 129 回関西 Debian 勉強会</a></li>
<li>日本語入力は問題があれば ibus に変更すれば良さそう?</li>
</ul>


<h2>日本のインターネットが揺れた日</h2>

<ul>
<li>この件で話をするのは5件目らしい</li>
<li>元々エンジニアで入社したが途中から記者になった</li>
<li>色々昔話とか</li>
<li>大規模障害の話</li>
<li>経路情報の話</li>
<li>今は68万ぐらい</li>
<li>10万ぐらい一気に増えたらしい</li>
<li>情報を聞き出すのが大変だった</li>
<li>AS 番号から調べたら Google だった</li>
<li>「なんでグーグルが関係があるの?」</li>
<li>by 社内</li>
<li>by Google 日本法人</li>
<li>Google 日本法人「事実関係を確認中」になったので2本の記事を配信 (25日夜)</li>
<li>26日昼に Google から</li>
<li>Sorry のニュアンスがわからなかったので再確認</li>
<li>Google 日本法人から返答 (26日午後3時)</li>
<li>グーグルが謝罪の記事</li>
<li>結局 何が起きていた?</li>
<li>困った時の piyokango → まだ情報が不十分だった</li>
<li>結局誰も全体像を説明できない</li>
<li>ツイートの impression 291 million</li>
<li>KloutScore : アカウントの影響力をスコアリング</li>
<li>属性によりつぶやく内容もさまざま</li>
<li>影響範囲が大きいのでさらなる記事が必要</li>
<li>「インターネットが壊れたっぽい」</li>
<li>「日本の背骨がやられた」</li>
<li>「グーグルに吸い込まれた」</li>
<li>「太平洋往復ルート」(10月15日朝刊)</li>
<li>反響は様々</li>
<li>YouTube - 32.78% : Downstream in Asia-Pacific</li>
<li>社会は変わる 技術者は? 利用者は? 「インターネットは何も変わっていません 変わったのは社会の方です」</li>
<li>議論をしてより良い世界をつくろう</li>
<li>「電気」「ガス」「水道」「インターネット」</li>
<li>スマホを手にした瞬間、世界とつながる現実</li>
<li>「冗長性」って知ってますか?</li>
<li><p>「つながる」という意味を考えよう</p></li>
<li><p>質疑応答</p></li>
<li>ヒューマンエラー? → トラフィックエンジニアリングのミステイクだと聞いたのでヒューマンエラーだと思う</li>
<li>チェックの機構はあってもそれを超えてしまうことはあるのでは。 100% ということはないので。</li>
<li>学生から arp とかもなぜ信じるのかという質問が出たことがある</li>
<li>バランスが大事</li>
<li>今回はミスだったが、意図的にされたら? → サイバー攻撃はすでに実際に起きている、攻撃者は先を見ている</li>
<li>BGP が脆弱なのが表出したのは良い機会だったかもしれない</li>
<li>犯罪者にとっても止める方向にメリットはあまりないので、そういうことはあまり起きていない</li>
<li>国がネットをシャットダウンすることもあった</li>
<li>国がネットを管理すべきか問題</li>
<li>境がないことの価値</li>
<li>OCN と KDDI 以外での影響は? → BGP の経路情報的には他にも影響があったはずだが、他では騒ぎになっていなかった</li>
<li>インターネット依存度合いの問題? → リテラシーとかの問題かも</li>
</ul>


<h2>終了後</h2>

<p>お楽しみ抽選会には参加せずに 関西 Debian の人たちについていって会場を出ました。</p>

<h2>感想</h2>

<p>いつもの Debian Updates の他に、事前のセッション一覧で気になっていた「日本のインターネットが揺れた日」も聞けて、 mruby のハンズオンも間に合う時間に行けたら手伝おうと思っていたのが手伝えて、 mruby での組み込みの開発がどんな感じかわかってよかったです。</p>

<p>「日本のインターネットが揺れた日」のセッションで、頻繁に録画しているという話をしていて、後日 YouTube に公開されるらしいので、気になる方は見てみると面白いのではないかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebRTC Meetup Osaka #2 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-10-27-webrtc.html"/>
    <updated>2017-10-27T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/webrtc</id>
    <content type="html"><![CDATA[<p><a href="https://atnd.org/events/91437">WebRTC Meetup Osaka #2</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>久しぶりにさくらインターネットさんの会場にきました。
ゲスト Wi-Fi は SSID が同じで、パスワードが変わっていて、 iPod touch は一度覚えているのを削除して、設定し直さないと繋がりませんでした。</p>

<h2>会場説明等</h2>

<p>懇親会をするので参加希望者は休憩の時に。</p>

<h2>Meetupの説明</h2>

<ul>
<li>開催実績の紹介など</li>
<li>ハッシュタグは <code>#webrtcjp</code></li>
<li>WebRTC-JP Slack</li>
<li>YouTube に過去の動画も公開している <a href="https://goo.gl/BjEhku">https://goo.gl/BjEhku</a></li>
<li>参加者はほぼエンジニア</li>
<li>初参加の人が多い</li>
<li>WebRTC で何か開発したことがあるのは半数ぐらい</li>
</ul>


<h2>ワンボタンでできる！WebRTCゲーム配信！</h2>

<ul>
<li>PLiCy という自作フリーゲームの公開・共有を目的とした SNS</li>
<li>別途ツールを準備しなくてもブラウザだけで完結するブラウザゲームの簡易配信機能</li>
<li>少なくとも Android 4.0 で動いたので対応環境も十分ある</li>
<li>遊んでいる人全員に配信してもらうのが目標</li>
<li>ゲーム画面の抽出は captureStream で取得するだけ</li>
<li>ゲーム音楽の抽出は GainNode の prototype を書き換えて connect に割り込み</li>
<li>マイクを使った実況対応は getUserMedia API で HTTPS 必須</li>
<li>WebRTC の通信は PeerJS を利用</li>
<li>TURN サーバーが必要だった</li>
<li>CentOS 5 だと TURN サーバーが動かなかったので、CentOS 7 を入れ直した</li>
<li>映像・音声とは別に RTCDataChannel API でデータ通信が使える</li>
<li>Web Speech API でチャットコメントを音声読み上げする</li>
<li>Safari に対応するのに PeerJS を修正する必要があった</li>
<li>Edge はまだダメ</li>
<li>運用状況と課題</li>
<li>画質の設定はないが captureStream API でフレームレートは設定できる</li>
<li><p>iframe を使うと Firefox や Safari で問題があった</p></li>
<li><p>質疑応答</p></li>
<li>CentOS 5 は実験用のサーバーなので古かった</li>
<li>TURN サーバーは何を使っている? coturn ではない? → パッケージ名が「turnserver」という名前のものを使っている</li>
<li>回線が細いと途切れるという話があったが、接続が多いと切れる? → P2P なので TURN サーバーを経由しているかどうかでも変わって来る。10人を超えると不安定になってくる。スマホでキャリア回線でみると重いとかはある。</li>
</ul>


<h2>実践 WebRTC 〜最新事例と開発ノウハウの紹介〜</h2>

<ul>
<li>発表資料は SlideShare で公開している: <a href="https://goo.gl/daTG2m">https://goo.gl/daTG2m</a></li>
<li>WebRTC = Web Real Time Communication</li>
<li>リアルタイムコミュニケーションの民主化</li>
<li>最初のリアルタイムコミュニケーションは電話</li>
<li>2011 年に WebRTC の草案が発表</li>
<li>WebRTC の特徴: カメラやマイクを利用可、ブラウザ間の P2P 通信、ストリーミングデータを扱える</li>
<li>WebRTC を構成する技術要素</li>
<li>中身は4つ: 1から3は IETF で標準化、4は は W3C で標準化</li>
<li>1: 暗号化などのプロトコル、2: P2P通信する手順、3: コーデック、4: JavaScript などから利用する API</li>
<li>リアルタイムのために基本的に UDP 上</li>
<li>コーデック: VP8, VP9, H.264 (Safari はこれのみ)、音声は opus</li>
<li>Can I use? でブラウザの対応状況を確認 <a href="http://caniuse.com/#feat=rtcpeerconnection">http://caniuse.com/#feat=rtcpeerconnection</a></li>
<li>IE はあきらめましょう</li>
<li>Safari は 11 で対応</li>
<li><p>iOS でネイティブアプリを作らなくても使えるようになる</p></li>
<li><p>WebRTC の事例紹介</p></li>
<li><p>Co-Streaming (共同ストリーミング) 複数人が同時に動画配信し多人数が視聴する</p></li>
<li>mixer: MS が買収したゲーム動画配信サービスで Win 10 からは直接配信も可能</li>
<li><p>Pixiv Sketch LIVE</p></li>
<li><p>Serverless CDN: Peer5</p></li>
<li><p>Serverless CDN x Streaming: Streamroot</p></li>
<li><p>オンライン英会話: Skype から移行しているところが多い</p></li>
<li>カスタマサポート: videodesk</li>
<li>遠隔診療: CLINICS 先生側(PC)と患者側(スマホアプリ)</li>
<li>IoT: petoco</li>
<li><p>マッチングアプリ: KoeTomo</p></li>
<li><p>WebRTC の活用しどころ: 既存サービスの置き換えでコスト削減よりも付加価値向上がおすすめ</p></li>
<li><p>ここからエンジニア向けの話</p></li>
<li><p>Safari の開発メニューには「レガシー WebRTC API を有効にする」という設定がある</p></li>
<li>API も結構変わってきている</li>
<li>ブラウザは ORTC の考え方を一部取り入れた WebRTC 1.0 API へ対応しつつある</li>
<li>WebRTC 1.0 では SDP を利用する</li>
<li>レガシー API だと SDP に全てのレイヤーについてネゴシエーションするのに必要な情報が全て記載されているので、例えば、音声ミュートで参加していたメンバーが途中からミュートを解除すると、音声トラックだけ操作したいのに、全てのレイヤーで再ネゴシエーションが発生する。</li>
<li>ORTC は各レイヤーに相当する API が公開されているので、必要なところだけ操作できる</li>
<li>API の進化に対応するのは <a href="https://github.com/webrtc/adapter">adapter.js (shim)</a> を使えばだいたいうまくやってくれる</li>
<li>ブラウザー間の互換性の問題</li>
<li>Chrome, Firefox, Safari はベースになっているコアライブラリが同じなので相性が良いが、Edge は独自なので相性が悪い</li>
<li>動画コーデック: Chrome Firefox は VP8/VP9/H264, Edge は VP8/H264UC, Safari は H264 のみ</li>
<li>H264UC は Skype 用</li>
<li>Safari はモバイルのハードウェアの対応を考慮してそう</li>
<li>API も差がある</li>
<li><p>ScreenShare は Edge にはないなどの機能差は adapter.js では対応できないのでアプリでどうにかする必要あり</p></li>
<li><p>マイクカメラの扱いにはハマりどころが多い</p></li>
<li>カメラの機種, OS, ブラウザの差がある</li>
<li>getUserMedia の Constraints に指定してもその通りになるとは限らない</li>
<li><p><a href="https://goo.gl/9DWMGZ">俺たちは雰囲気でgetUserMedia()をやっている</a></p></li>
<li><p>フルメッシュ, MCU, SFU</p></li>
<li>SFU が主流</li>
<li><p>ユースケースに合わせて選択しましょう</p></li>
<li><p>つながらない問題</p></li>
<li>WebRTC にはシグナリングとメディア、2つの通信がある</li>
<li>1: シグナリングサーバーとの接続 (だいたいWSS) ができない</li>
<li>2: メディアの通信 (P2P) が疎通できない</li>
<li>1 はネットワークが対応しないとどうしようもない</li>
<li><p>2 はネットワークのポリシー変更や TURN サーバー</p></li>
<li><p>ICE, STUN, TURN</p></li>
<li>STUN: UDP ホールパンチングできる NAT の種類には制限がある</li>
<li><p>TURN は UDP が通らない時に TCP でラップしてくれる機能もある</p></li>
<li><p>デバッグ方法</p></li>
<li><p>chrome://webrtc-internals</p></li>
<li><p>プラットフォームサービスは積極的に活用しよう</p></li>
<li>WebRTC は総合格闘技</li>
<li>プラットフォームサービス: OpenTok, CafeX, SkyWay, Twillio, FacePeer</li>
<li>ミドルウェア: WebRTC SFU Sora</li>
<li><p>プラットフォームサービスを使っても、つながらない問題が全て解決するわけではない</p></li>
<li><p>質疑応答</p></li>
<li>Safari の ScreenShare 対応? → プラグインを入れてもらう必要がある</li>
<li>コーデック? → Firefox だと VP8 が優先, SDK で設定できるものもある, 相手を Safari にすると H264 になる</li>
<li>H264UC と H264 との互換性は? → 別物で互換性はない</li>
<li>Data Connection を使わずに Edge とやり取りするには? → WebSocket を使う。 Skype で必要なさそう (WebSocket でなんとかなる) なので Data Connection の実装はあまり期待できない</li>
</ul>


<h2>休憩</h2>

<p>早めに進んでいたので順番を入れ替えて休憩は後になりました。</p>

<h2>WebRTCのデバッグに関するTips&amp;Tricks</h2>

<ul>
<li>WebRTC の同人誌</li>
<li>booth.pm で「WebRTC」で検索</li>
<li><p><a href="https://mzsm.booth.pm/items/628127">https://mzsm.booth.pm/items/628127</a></p></li>
<li><p>Safari の開発メニューには「模擬キャプチャデバイス」というものがある</p></li>
<li>Chrome は <code>--use-fake-device-for-media-stream</code> 付きで起動</li>
<li><p>Firefox は getUserMedia で fake: true を指定</p></li>
<li><p>getUserMedia の制限</p></li>
<li>Chrome は localhost は https でなくても OK</li>
<li>他の人につないでもらいたい時は ngrok が使える</li>
<li>Homebrew か公式サイトからダウンロードしてインストール</li>
<li>日本だと <code>--region ap</code> を指定するのが良い</li>
<li><p>デモ</p></li>
<li><p>質疑応答</p></li>
<li><code>/etc/hosts</code> で localhost の IP アドレスを別のものにしたら通る? → 不明</li>
<li>会社ネットワークとかで外にでるのに制限がある環境では https のサーバーをたてた方が楽なのでは? → そこは適宜</li>
</ul>


<h2>iOS11は本当にWebRTCに対応したのか</h2>

<ul>
<li>Safari 11 でビデオチャットは可能</li>
<li><p>他アプリでは無理</p></li>
<li><p>WKWebView, SFSafariViewController, UIWebView (deprecated)</p></li>
<li>getUserMedia が全部非対応</li>
<li>RTCPeerConnection はあるので、データ通信はできた</li>
</ul>


<h2>次回告知等</h2>

<ul>
<li><a href="https://techplay.jp/event/637372">WebRTC Meetup Tokyo #17 Special Edition</a></li>
<li>Youtube Live による配信あり</li>
<li>WebRTC Meetup Osaka #3 は12月か1月にやりたい、発表者募集中</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Developers Meetup #6 大阪会場に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-10-19-railsdm.html"/>
    <updated>2017-10-19T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/railsdm</id>
    <content type="html"><![CDATA[<p><a href="https://techplay.jp/event/631426">Rails Developers Meetup #6 大阪会場</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>前回までと同じ場所なので、スムーズに到着することができました。</p>

<h2>オープニング</h2>

<ul>
<li>プログラムの紹介</li>
<li>ハッシュタグは <code>#railsdm</code></li>
</ul>


<h2>Railsエンジニアの交換型インターンシップについて</h2>

<ul>
<li>自己紹介と会社紹介</li>
<li>インターンシップを始めた同機</li>
<li>開発者不足</li>
<li>交換型インターンシップとは何か</li>
<li>プログラミングスクール的な学習週とインターン的な作業週を交互にやる</li>
<li>学習週は 平均3ヶ月 (交互なので6ヶ月) で終わるぐらいのボリューム</li>
<li>作業週</li>
<li>pull request の練習にもなるということで好評</li>
<li>ローカル (学生が多い) とリモート (社会人が多い) がある</li>
<li>シニアインターン: バイトリーダー的な存在</li>
<li>インターンの成果: アルバイトとしての成果とスクールとしての成果 (就職先) がある</li>
<li>モチベーションがもたない</li>
<li>対策としては見てますよというメッセージを送り続ける</li>
<li>いいね！ がんばれ！ 大丈夫！</li>
<li>不安に対してはメッセージを送り続けるしかない</li>
<li>所属感がない</li>
<li>対策: ミートアップや忘年会を開催</li>
<li>ニートやひきこもりが社会復帰した</li>
<li>就職先の会社からとても喜ばれる</li>
<li>仕事が増えた</li>
<li>有名じゃない会社のインターン戦略</li>
<li>出入りしやすくして単純に人数が多いため、確率的に優秀な人も多くなる</li>
<li>来るもの拒まず、去る者追わず</li>
<li>社会人が7割</li>
<li>無料なのでいろいろなところから紹介される</li>
<li>RubyKaigi のスタッフをやったら就職できる</li>
<li>求人への応用</li>
<li>採用はしていない</li>
<li>探すんじゃなくて育てる</li>
<li>組んでくれる会社</li>
<li>質疑応答</li>
<li>id的には183名</li>
<li>7割ぐらい去っている?</li>
<li>社会人は求職中の人もいれば仕事をしながらの人もいる</li>
<li>課金サービスはない</li>
</ul>


<p><a href="http://docs.komagata.org/5463">発表資料</a></p>

<h2>Railsコントリビューション</h2>

<ul>
<li>自己紹介</li>
<li><a href="http://contributors.rubyonrails.org/">http://contributors.rubyonrails.org/</a> で24位</li>
<li><a href="http://contributors.rubyonrails.org/releases">http://contributors.rubyonrails.org/releases</a> の v5.0.0 が 9999 Commits というコネタ</li>
<li>コミットログを読むブログを続けている <a href="http://y-yagi.hatenablog.com/">http://y-yagi.hatenablog.com/</a></li>
<li>わからないことも多かったが動かして確認した</li>
<li>テストがちゃんと書かれるようになったころだったのでテストでなんとなくわかった</li>
<li>2,3ヶ月で Rails のコードに慣れて、いろいろとミスに気づくようになった</li>
<li>問題がある状態をそのままにしておくのはよくないということでコントリビュートし始めた</li>
<li>どんな時にコントリビュートするか? 期待通りに動かない時、機能追加したい時</li>
<li>期待通りに動かないというのはまあまあある</li>
<li>よく使う道具なので期待通り動いて欲しい</li>
<li>Issue をつくる or PR を作る</li>
<li>Issue をつくるのも大事なコントリビュート</li>
<li>英語が苦手なので PR を投げてしまうことの方が多い</li>
<li>機能を追加したい時</li>
<li>よく使う道具なので機能が足りてて欲しい</li>
<li><a href="https://github.com/rails/rails">https://github.com/rails/rails</a> のみを対象 (<a href="https://github.com/rails">https://github.com/rails</a> の他のレポジトリは方針などが違うことがある)</li>
<li><a href="http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html">http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html</a></li>
<li>Issue はバグ管理のみ</li>
<li>新機能提案などの issue は即 close されたりする</li>
<li>新機能についての議論は rails-core ML</li>
<li>PR 投げて、そこで議論をするのでも大丈夫 (その方が多そう)</li>
<li><a href="https://github.com/rails/rails/tree/master/guides/bug_report_templates">https://github.com/rails/rails/tree/master/guides/bug_report_templates</a> を参考にして再現手順が作れると良い</li>
<li>master ブランチでも再現するか確認</li>
<li>サポート対象外の古い Rails での Issue は無視されるか即 close</li>
<li>サポート対象: <a href="http://guides.rubyonrails.org/maintenance_policy.html">http://guides.rubyonrails.org/maintenance_policy.html</a></li>
<li>似たような PR がもうないか検索してみる (open だけではなく close されているものも)</li>
<li>close されていたら理由を確認して、それでも PR を出すなら、そのことも書く</li>
<li>やりとりが止まっている場合は確認して引き継いでしまう</li>
<li>Rails 本体にいるかどうか gem じゃだめなのか考える</li>
<li>foreigner や migration_comments のように本体に取り込まれることもある</li>
<li>フォーマットに従う <a href="https://github.com/rails/rails/blob/master/.github/pull_request_template.md">https://github.com/rails/rails/blob/master/.github/pull_request_template.md</a></li>
<li>テストは大体は bundle exec rake test で動く</li>
<li>CI の結果も確認する</li>
<li>doc やコメントのみの修正は <code>[ci skip]</code> を入れる</li>
<li>パフォーマンス改善はベンチマークスクリプトと結果もコミットログに入れる</li>
<li>PR の description に書くようなことはコミットログに入れれば良い</li>
<li>後から参照しやすい</li>
<li>使われてないはずのものを消す場合は使われなくなった場所の確認の他に gem に切り出されたものが使っている可能性も考える必要がある</li>
<li>public API の挙動を変えない</li>
<li><a href="http://api.rubyonrails.org/">http://api.rubyonrails.org/</a> にのっているものが public API</li>
<li>挙動を変えたい場合は deprecate から</li>
<li>squash</li>
<li>何から始めたらいいか</li>
<li>doc</li>
<li><a href="http://api.rubyonrails.org/">http://api.rubyonrails.org/</a> と <a href="http://guides.rubyonrails.org/">http://guides.rubyonrails.org/</a> がリリースされているものに対応</li>
<li>master ブランチは <a href="http://edgeapi.rubyonrails.org/">http://edgeapi.rubyonrails.org/</a> と <a href="http://edgeguides.rubyonrails.org/">http://edgeguides.rubyonrails.org/</a></li>
<li>新しいバージョンを触る</li>
<li>rc をまたずに beta1 が出たら試す</li>
<li>新しい機能はバグっていることが多い</li>
<li>既存の機能が壊れていることもある</li>
<li>新しい Ruby で触る</li>
<li>Issue をみる: コードをみるとっかかりになる, 意外と簡単に直せるバグもある</li>
<li>英語ができない: コミットログや PR を参考にする</li>
<li>何か怖い: 慣れるしかない, <a href="https://oss-gate.github.io/">https://oss-gate.github.io/</a> もおすすめ</li>
<li>質疑応答</li>
</ul>


<p><a href="https://docs.google.com/presentation/d/e/2PACX-1vTQx7WQDPQmvMHRyc8Pj1kP9SOqHAlmLUUGA22G7nU7qtXJsFEwYMaMPwBHWMc-dx9OZaAPl3S7pmtw/pub">発表資料</a></p>

<h2>休憩</h2>

<h2>Railsでつくる ファイルアップロード 2017</h2>

<ul>
<li>会社紹介</li>
<li><p>自己紹介</p></li>
<li><p>きっかけ</p></li>
<li>サービスを Perl の独自フレームワークから Rails に移行中に画像アップロードを作り直したことがなかったことに気づいた</li>
<li>Active Storage の登場</li>
<li><p>スマホ時代のファイルアップロード</p></li>
<li><p>画像アップロードで考えるポイント</p></li>
<li>画像アップロード自体</li>
<li>画像の参照</li>
<li><p>画像ファイルの置き場所</p></li>
<li><p>UI から考える 2017 年の画像アップロード</p></li>
<li>例: クックパッド, esa</li>
<li><p>非同期</p></li>
<li><p>form_with</p></li>
<li><p>Headless browser</p></li>
<li><p>Step 1: public に画像アップロード</p></li>
<li>ActionDispatch::<a href="Http::UploadedFile">Http::UploadedFile</a></li>
<li>validate が画像ファイル自体と画像と紐づく情報の2軸になる</li>
<li>フォームオブジェクトで処理すると良さそう</li>
<li>Step 2: S3 に画像アップロード</li>
<li>認証、アクセス制御、モック</li>
<li>問題発生? ファイルアップロードに時間がかかる気がする</li>
<li>サーバー経由ではなくダイレクトにアップロードに</li>
<li>Step 3: ダイレクトアップロード (S3)</li>
<li>Step 4: 複数ファイルのアップロード</li>
<li>multiple では非同期が必要だった</li>
<li>Step 5: ECMAScript 6 や File API など</li>
<li>新しい画像フォーマット (Live Photos?)</li>
<li>技術の積み重ねとユーザー体験</li>
<li><p>ユーザー体験を向上させようとすると rails から離れた技術も必要になってくる</p></li>
<li><p>質疑応答</p></li>
</ul>


<p><a href="https://speakerdeck.com/matsuhisa/rails-developers-meetup6-image-upload">発表資料</a></p>

<h2>How, Why, What がわからないコードの調べ方</h2>

<ul>
<li>ネタバレ: 最終的には負けた</li>
<li>ベストは、「知っている人に聞く」</li>
<li>誰もいないなら調べるしかない</li>
<li>git blame は -L で範囲を絞り込める</li>
<li><code>git blame -L "/regex",+20 file</code></li>
<li>git blame rev file</li>
<li><a href="https://github.com/akr/vcs-ann">https://github.com/akr/vcs-ann</a></li>
<li>tig blame file</li>
<li><code>","</code> でカーソル行の親コミットの blame に移動</li>
<li>歴史をみてもわからなかった</li>
<li>ログを出す</li>
<li><code>Kernel.#caller</code></li>
<li><code>logger.tagged("hoge") do ... end</code></li>
<li>歴史を見ても、動きを見ても、よくわからない</li>
<li>それは、作り直して良いというフラグでは?</li>
<li>結論: 強く生きよう</li>
</ul>


<h2>How to improve OSS Rails application</h2>

<ul>
<li>自己紹介</li>
<li>GitLab</li>
<li>時間がおしているので質疑応答はなし</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>次回予告: #7 は 2017.11.16</li>
<li>月1開催は次回で最終回</li>
<li>募集は 2017.10.30 10:00から</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第79回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-10-07-rubykansai79.html"/>
    <updated>2017-10-07T14:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai79</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/65609">第79回 Ruby関西 勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<p>今回は amagasakirb でよく来ていた尼崎市立小田公民館でした。</p>

<p>プロジェクターは 800x600 でした。</p>

<h2>How to specify <code>frozen_string_literal: true</code></h2>

<p>発表資料は RubyKaigi 2017 で使ったものと同じで、 <a href="https://github.com/znz/rubykaigi2017-frozen_string_literal">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-how-to-specify-frozenstringliteral-true/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/how-to-specify-frozenstringliteral-true">slideshare</a>, <a href="https://speakerdeck.com/znz/how-to-specify-frozen-string-literal-true">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-rubykaigi2017-frozen_string_literal">RubyGems</a> にあげているものを、 <code>allotted-time</code> を 5m から 10m に変更して使いました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-frozen_string_literal/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-frozen_string_literal/" title="How to specify `frozen_string_literal: true`">How to specify `frozen_string_literal: true`</a>
</div>


<h2>西谷さんの文書管理の話</h2>

<ul>
<li>会場アンケート: 初参加の人が多かった</li>
<li>OSS Gate で rubocop にバグ報告したら直してもらえた <a href="https://github.com/bbatsov/rubocop/issues/4644">https://github.com/bbatsov/rubocop/issues/4644</a></li>
<li><a href="https://ja.wikipedia.org/wiki/%E5%8F%8C%E6%9B%B2%E5%89%B2%E5%BC%95">双曲割引</a></li>
<li>今18万円もらうか、1年後に20万円もらうか</li>
<li>2年後に18万円もらうか、3年後に20万円もらうか</li>
<li>マシュマロテスト</li>
<li>既知感</li>
<li>記憶

<ul>
<li>記述記憶</li>
<li>非記述記憶

<ul>
<li>身体的記憶</li>
<li>経験記憶</li>
<li>場所の記憶</li>
</ul>
</li>
</ul>
</li>
<li>文書管理</li>
<li>文書管理の原則: 決める, 見える, tight binding, 利用する</li>
<li>会場に質問 → markdown や org-mode でメモしている人がいた<!-- e-文書法 関連の仕事をしているという人がいた --></li>
<li>おすすめの本は? → <a href="http://amzn.to/2hT6Qdq">野口 悠紀雄の「超」整理法</a>, あとはだいたい失敗している</li>
<li>日付で整理している人は多い</li>
</ul>


<h2>休憩</h2>

<ul>
<li>14:45 まで休憩</li>
</ul>


<h2>もう放置しない！画面遷移図の作り方</h2>

<ul>
<li>今までの発表中に急遽発表資料を作った</li>
<li>Sky Grid の山本さん</li>
<li>西谷さんのところの卒業生</li>
<li>急いでショッピングサイトを作っていて、急遽画面遷移が必要になった</li>
<li>移動中に UI Flows というのをみつけた</li>
<li>手書き or ホワイトボード ? (or Excel ?)</li>
<li>おうおうにして放置される</li>
<li>guiflow というものをみつけた</li>
<li><a href="https://qiita.com/hirokidaichi/items/ff54a968bdd7bcc50d42">もう保守されない画面遷移図は嫌なので、UI Flow図を簡単にマークダウンぽく書くエディタ作った</a></li>
<li>質疑応答</li>
<li>rails なら routes から自動生成できないか?</li>
<li>画面遷移図を先に作るのなら無理そう</li>
<li>漏れをなくすよりも主要な遷移だけにしたい?</li>
<li>feature テストからならできそう?</li>
</ul>


<h2>RubyKaigi 2017 のキーノート紹介</h2>

<ul>
<li>なかださんの発表</li>
<li>事務処理できる人がいなくなった</li>
<li>概要</li>
<li>Subversion を使っていて、なぜ Git を使わないのかという話</li>
<li>新機能/課題の管理: Redmine で管理している</li>
<li>開発者会議: 月1回</li>
<li>Ruby のビルドの仕方</li>
<li>バグフィックスの事例</li>
<li>Ruby は「簡単な文法」だと「錯覚」させている</li>
<li><a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/50578">[ruby-list:50578] [質問] 変数pが定義されている時のabsの動作について</a></li>
<li><code>String#intern</code> と refinements の話</li>
<li>Ruby 2.5 の新機能の話</li>
<li>右代入についても話題になっている</li>
<li>感想: もっと「Rubyを」いじってね、ということだと思った</li>
<li><a href="https://codeiq.jp/magazine/2017/09/53932/">Rubyのなかを覗いてみよう！「Cookpad Ruby Hack Challenge」に参加してみた</a></li>
<li><p><a href="https://github.com/ko1/rubyhackchallenge">https://github.com/ko1/rubyhackchallenge</a></p></li>
<li><p>GitPitch というのを使ってスライドを作っている</p></li>
<li><a href="https://github.com/urimaro/79th_workshop_1">https://github.com/urimaro/79th_workshop_1</a></li>
<li><a href="https://gitpitch.com/urimaro/79th_workshop_1">https://gitpitch.com/urimaro/79th_workshop_1</a></li>
<li><a href="https://github.com/urimaro/79th_workshop_2">https://github.com/urimaro/79th_workshop_2</a></li>
<li><p><a href="https://gitpitch.com/urimaro/79th_workshop_2">https://gitpitch.com/urimaro/79th_workshop_2</a></p></li>
<li><p>Matz のキーノート</p></li>
<li>概要: module について</li>
<li>RubyKaigi について</li>
<li>RubyConf より大きい</li>
<li>module の話</li>
<li>単一継承</li>
<li>多重継承 (C3アルゴリズム)</li>
<li>Mixin の話</li>
<li>module の使われ方</li>
<li>Mixin 以外の使われ方もするようになった</li>
<li>namespace とか</li>
<li>alias method chain は2回呼び出すと壊れる</li>
<li><code>Module#prepend</code> の登場</li>
<li>CLOS の method combination が実現できる</li>
<li>aspect 指向プログラミングを実現できる</li>
<li>refinements</li>
<li>Structural signature</li>
<li>質疑応答</li>
<li>prepend は外せないという話があったが include も外せない? → たぶん外せない</li>
<li>Rails の concern と helper の使い分け? → まだ helper の方がよく使われていて concern はそんなに使われていない?</li>
</ul>


<h2><a href="https://qiita.com/yuyakato">Kato Yuya</a> さん</h2>

<ul>
<li>概要: zeromq, GitHub, ハードウェア工作</li>
<li>GitHub の private repo の issues で色々管理している</li>
<li>ベッド型体重計: 9月にベッドを買い直したのをきっかけに再度挑戦開始</li>
<li>zeromq というライブラリの紹介</li>
<li>コネクションの方向と中身の通信の方向の自由度が高い (Pub-Sub のどちらからの接続開始でも良いなど)</li>
<li>zeromq は対応言語が多いので言語の勉強にもおすすめ</li>
<li>Pub-Sub とかも簡単にかける</li>
<li>ロードセル専用のアンプモジュールが安価に手に入るようになった</li>
<li>水のペットボトルで校正</li>
<li>校正は大変なので、体重計はよくできているなあと感じた</li>
<li>GitHub 上で 3D データもプレビューできる</li>
<li>UDP のデータを zeromq に流すのに久しぶりに ruby を書いた</li>
<li><p>後の処理はデータ処理の都合により python</p></li>
<li><p>質疑応答</p></li>
<li>製品化はしないんですか? → 製品化する予定はない。情報は全部公開する予定</li>
<li>pycall は使わない? → 無理に ruby にする必要はなさそう</li>
<li>ruby だとターミナルで作業することが多いが python だと jupyter で完結することが多いと感じているがどうか? → テストコードを書くような部品化できる部分は別ファイルにする、適材適所で使っている</li>
</ul>


<h2>Ruby初級者向けレッスン 63回 ─ Array と Hash</h2>

<p>今回は初心者の人も多かったようです。</p>

<h2>RubyKaigi 2017 のノベルティプレゼント</h2>

<p>トートバッグなどの RubyKaigi 2017 の入り口で配布していたノベルティの一部を、今年もRuby関西のスタッフの人があらかじめいくつかもらってきていたのをプレゼントしていました。</p>

<p>トートバッグは、広島なので瀬戸内海と四国が見えてるようなデザインなのかなと思っていたら <a href="https://twitter.com/is8r_/status/909752063323754496">https://twitter.com/is8r_/status/909752063323754496</a> ということだったらしいです。
プレゼントの時にこのヒントを紹介しようかと思っていたら、時間がなかったので、できませんでした。</p>

<h2>感想</h2>

<p>今回は、本当に開催するかどうかを RubyKaigi 2017 の会期中に相談するなど、最終的な開催の決定から開催までの時間が短かったからか、いつもと比べて参加人数は少なめでしたが、初参加の人や初心者の人が多かったので、開催して非常によかったと思いました。</p>

<p>発表内容も事前発表していたもの以外は RubyKaigi 2017 の振り返りをのんびりやって終わるのかなと思っていたら、当日発表者を募集したら3名も発表してくれる人が出てきて、時間が足りないぐらいになっていました。</p>

<p>だいたい2ヶ月ごとに開催されていますが、次回は12月に開催されるかどうかはまだ未定なので、来年になるかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Developers Meetup #5 大阪会場に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-28-railsdm.html"/>
    <updated>2017-09-28T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/railsdm</id>
    <content type="html"><![CDATA[<p><a href="https://techplay.jp/event/631423">Rails Developers Meetup #5 大阪会場</a> に参加しました。</p>

<!--more-->


<h2>会場</h2>

<p>前回と同じ場所なので、スムーズに到着することができました。</p>

<p>今回は、ストリーミングの問題なのか、聞き取りにくいことが多かったので、特に質疑応答はメモが取れていません。</p>

<h2>オープニング</h2>

<ul>
<li>会場の説明</li>
<li>ハッシュタグは <code>#railsdm</code></li>
<li>プログラムの紹介</li>
</ul>


<h2>Railsで日報共有アプリケーションをOSSとして開発している話</h2>

<ul>
<li><p><a href="https://speakerdeck.com/kami/railsderi-bao-gong-you-apurikesiyonwoosstositekai-fa-siteiruhua">https://speakerdeck.com/kami/railsderi-bao-gong-you-apurikesiyonwoosstositekai-fa-siteiruhua</a></p></li>
<li><p>Rails で SPA の事例</p></li>
<li>Repost という日報共有アプリケーション <a href="https://github.com/kami-zh/repost">https://github.com/kami-zh/repost</a></li>
<li>Slack 連携部分を例に説明</li>
<li>View → Action → API → Reducer → View</li>
<li><p>Mastodon の app/javascript や package.json も参考になる</p></li>
<li><p>Rails 5.1 での機能をどう使ったか</p></li>
<li>webpacker</li>
<li>rails new するときに &ndash;webpack=react をつける</li>
<li>必要に応じて yarn add</li>
<li>開発時は bin/webpack-dev-server</li>
<li>webpacker 3 系は多くの設定がライブラリ側に吸収されてアプリケーション側はシンプルにできる</li>
<li><code>javascript_pack_tag</code></li>
<li>Rails 5.1 から yarn をサポート</li>
<li>yarn は install / add / remove ぐらいを知っておけば良い</li>
<li><code>ActionDispatch::SystemTestCase</code></li>
<li>トランザクション管理をしてくれる</li>
<li><p>参考: <code>Minitest::Retry</code> がちょっと不安定なテストに便利 <a href="https://github.com/y-yagi/minitest-retry">https://github.com/y-yagi/minitest-retry</a></p></li>
<li><p>工夫したこと</p></li>
<li>ユニットテストと E2E テストをしっかり書いた</li>
<li>Sprockets は削除した</li>
<li>セットアップを楽にする: bin/setup, bin/update をメンテナンスする</li>
<li>モーダルは慎重に導入する</li>
<li><a href="https://github.com/rails/rails/pull/30614">Install JavaScript dependencies on bin/update</a></li>
<li><p>Rails の資産を活用する: Turbolinks や FormHelper など</p></li>
<li><p>余談</p></li>
<li><p>知識欲求駆動開発</p></li>
<li><p>質疑応答</p></li>
<li>webpack-dev-server との同時起動に foreman は使っていない</li>
<li>react は使ってよかった感じ</li>
<li>react, vue, angular などから react を選んだ理由は? → 使ってみたかったから</li>
</ul>


<h2>パフォーマンス計測CIサービスを作って得た知見</h2>

<ul>
<li><p><a href="https://www.slideshare.net/zaruhiroyukisakuraba/ci-80250430">https://www.slideshare.net/zaruhiroyukisakuraba/ci-80250430</a></p></li>
<li><p>個人で開発しているパフォーマンス計測をする CI サービス</p></li>
<li><p>現在は Rails のみサポート、プライベートベータ</p></li>
<li><p>OAuth Apps と GitHub Apps の違い</p></li>
<li>OAuth Apps (従来のもの) ユーザーに対してインストール</li>
<li>GitHub Apps はリポジトリに対してインストール、マーケットプレイスに出せる</li>
<li>コメントもユーザーとしてか、独自権限にできるかの違いがある</li>
<li><p>マーケットプレイスに出す条件はちょっと厳しい (250人以上にインストールされていることとか)</p></li>
<li><p>GitHub Apps を作るのは簡単</p></li>
<li>アクセストークンと API</li>
<li>JWT の expire に注意: 10分や8分だとうまくいかないことがあったので5分にした</li>
<li>取得できるユーザー情報は限定的</li>
<li>GitHub Apps の API は少しずつ解放されている</li>
<li><p>GitHub Enterprise ではまだ使えないかも</p></li>
<li><p>GitHub Apps で気をつけるところ</p></li>
<li>Webhook を取りこぼすとデータロスト</li>
<li>パーミッションの変更はなるべくしない: ユーザーに承認してもらう必要があるがわかりにくい</li>
<li>GitHub Apps のインストールの導線: インストール後がわかりにくいらしい</li>
<li><p>ローカルで webhook を受け取る方法: ngrok は無料だと起動のたびにホスト名が変わるので面倒、ポートフォワーディングをしている</p></li>
<li><p>Docker in Docker</p></li>
<li>privileged オプションが必要</li>
<li>良い点: 階層構造なので管理しやすい</li>
<li>悪い点: パフォーマンス, privileged オプションで怖い, ボリュームが残ってしまう</li>
<li><p>そもそも製作者自身があまり推奨していない</p></li>
<li><p><code>/var/lib/docker.sock</code> を共有</p></li>
<li>良い点: シンプル, ビルドキャッシュも簡単</li>
<li>悪い点: 他のコンテナが丸見え</li>
<li><p>内部利用限定なら良いかも</p></li>
<li><p>オーケストレーション</p></li>
<li>GKE + k8s</li>
<li><p>小規模/シンプルなら Heroku おすすめ</p></li>
<li><p>CI, 計測の仕方</p></li>
<li>CI サービスを作るのに使った小技</li>
<li>resources をちゃんと指定しないとパフォーマンスがぶれる</li>
<li><p>Container Builder のローカル開発環境がある <a href="https://github.com/GoogleCloudPlatform/container-builder-local">https://github.com/GoogleCloudPlatform/container-builder-local</a></p></li>
<li><p>個人開発プロジェクトについて</p></li>
<li>毎日やるのが大事</li>
<li>コードを捨てるのを躊躇しない</li>
<li>何のためにやるのか</li>
<li>途中経過も公開する</li>
<li><p>やらないことを決める</p></li>
<li><p>質疑応答</p></li>
<li>個人開発でも k8s を使っている? → 使っている</li>
<li>heroku ではなく k8s を使う理由 → docker のため</li>
<li>(メモ取れず)</li>
</ul>


<h2>休憩</h2>

<h2>マイクロサービスにおける非同期アーキテクチャ</h2>

<ul>
<li><p><a href="https://www.slideshare.net/ota42y/ss-80254350">https://www.slideshare.net/ota42y/ss-80254350</a></p></li>
<li><p>microservice</p></li>
<li>外から見たときは一つのアプリ</li>
<li>内部的にはドメインごとに別々のサーバー</li>
<li>API で連携</li>
<li>非同期もある</li>
<li><p>巨大かつ複雑になりやすい → 知見</p></li>
<li><p>非同期処理</p></li>
<li>今回は特に Job Queue の話</li>
<li><p>ActiveJob は Rails 標準なので一般的な構成のはず</p></li>
<li><p>歴史</p></li>
<li>牧歌的時代: なんでも delayed_job に突っ込む</li>
<li>RDB に保存する</li>
<li>delay メソッドを挟むだけ</li>
<li>障害発生: job がどんどん溜まっていった</li>
<li>delayed_job では job の同時実行を防ぐ機構がある</li>
<li>index がきかない where 句の絞り込み＆ソート → テーブルロック</li>
<li>処理速度 ＜ 増加速度 になって打つ手がなくなる</li>
<li>大移行時代</li>
<li>非同期処理の整理</li>
<li>巨大な処理はクリティカルかどうかで場合分け</li>
<li>重要度に応じて処理分け</li>
<li>クリティカルではないものは別バックエンドへ移動して delayed_job の job 数を減らした</li>
<li>移行先として sidekiq, resque から sidekiq を選んだ</li>
<li><p>クリティカルではないものは delayed_job から ActiveJob(+sidekiq) に書き換え</p></li>
<li><p>複数サービスへの連携</p></li>
<li>結合度が高かった</li>
<li>イベント駆動アーキテクチャ</li>
<li>Event の送受信に変更</li>
<li>具体的には AWS の SNS (Simple Notification Service) と SQS (Simple Queue Service) を利用</li>
<li>送信側が SNS で受信側のサービスごとに SQS</li>
<li>癖があるので注意: 複数回や並列実行を考慮して、べき等である必要がある、など</li>
<li>統一フォーマットが必要</li>
<li>移行するなら、送信側・受信側両方移行する必要がある</li>
<li><p>楽にするための gem を作った <a href="https://github.com/ota42y/rising_dragon">https://github.com/ota42y/rising_dragon</a></p></li>
<li><p>質疑応答</p></li>
<li>Queue をどうわけているか? → ほとんどわけていない</li>
</ul>


<h2>5000兆人欲しい！ 優秀なRailsエンジニアを採用するための3つ(仮)の方法</h2>

<ul>
<li>日本の Rails エンジニアの数は推定10万人ぐらい?</li>
<li>世界中の人の数 74億人</li>
<li><code>'74億人' &gt; '5000兆人' #=&gt; true</code></li>
<li>制限を外す</li>
<li>Rails 経験者にこだわらない</li>
<li>日本人にこだわらない</li>
<li>エンジニアにこだわらない</li>
</ul>


<h2>Railsを6年間やってきたぼくが最近Railsでハマったこと</h2>

<ul>
<li><a href="https://speakerdeck.com/kazumax1218/railswo6nian-jian-yatutekitabokugazui-jin-railsdehamatutakoto">https://speakerdeck.com/kazumax1218/railswo6nian-jian-yatutekitabokugazui-jin-railsdehamatutakoto</a></li>
<li>1: カラム追加時に index がはられない</li>
<li><code>add_column</code> には index オプションがなかった</li>
<li>対策: <code>add_index</code> を使う</li>
<li>2: try</li>
<li>メソッドがない場合 (typo など) も例外を出さずに nil を返す</li>
<li>対策: <code>try!</code> を使うか ruby 2.3 以降ならぼっち演算子 <code>&amp;.</code> を使う</li>
<li>3: fragment cache</li>
<li>共通のパーシャルを変更してもキャッシュがクリアされない</li>
<li>template が見つからないのでダイジェストが計算できていなかった</li>
<li>対策: パスを省略しない</li>
<li>パーシャルのパスが動的な場合も注意</li>
<li>プチ情報</li>
<li>Rails 5 からは <code>rails dev:cache</code> で簡単にキャッシュの ON/OFF を切り替えられるようになった</li>
<li>fragment cache のログを出す設定がある</li>
<li>4: 新規作成画面に戻ったら作成したはずのレコードが消えた</li>
<li>原因: <code>has_one</code> に <code>dependent: :destroy</code> がついていると <code>build_xxx</code> 時にレコードが削除される</li>
<li>対策: new アクションで <code>build_xxx</code> を使わない</li>
</ul>


<h2>次回予告</h2>

<ul>
<li>次回 10/19: <a href="https://techplay.jp/event/631425">東京</a>, <a href="https://techplay.jp/event/631426">大阪</a>, <a href="https://techplay.jp/event/631427">リモート</a></li>
<li><a href="https://techplay.jp/event/631431">2017/12/09（土） 13:00 開催 の Rails Developers Meetup 2017</a>, <a href="https://techplay.jp/event/636560">大阪</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
