<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: event | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/event/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-01-03T13:26:39+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mini Debian Conference Japan 2016に参加して発表してきた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-12-10-mini-debian-conference-japan-2016.html"/>
    <updated>2016-12-10T10:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/mini-debian-conference-japan-2016</id>
    <content type="html"><![CDATA[<p><a href="http://miniconf.debian.or.jp/" title="Mini Debian Conference Japan 2016">Mini Debian Conference Japan 2016</a>
に参加して、発表してきました。</p>

<!--more-->


<h2>会場</h2>

<p>前日に東京に移動していたので、余裕がありましたが、
東京駅から近いので、当日移動でも頑張れば間に合いそうな場所でした。</p>

<p>ネットワークはゲスト用の無線があって、接続すると Web 画面が出てきてそこでユーザーとパスワードを入れて認証するという方式でした。</p>

<h2>セッション</h2>

<p>2トラックなので、どちらを聞きに行くのか悩む必要がありました。
さらに午後からは LibreOffice Kaigi 2016.12 も併催なので、さらに悩みました。</p>

<h2>オープニング</h2>

<ul>
<li>DebConf を日本でやりたいので、カンファレンス開催のノウハウをためたい</li>
<li>諸注意で Windows の画面が出てきてブーイング</li>
<li>結局映らなかったので口頭で</li>
<li>自動販売機は使用禁止とか</li>
<li>休憩中の予定説明とか</li>
<li>さっき出てきた DebConf の<a href="https://twitter.com/yasulab/status/807399231107584001">写真</a>のような集合写真撮影があるよとか</li>
<li>機材の関係で最初のセッションは部屋を入れ替え</li>
</ul>


<h2>Open Build Service in Debian</h2>

<ul>
<li>Open Build Service のアーキテクチャの説明</li>
<li>フロントエンドは Rails</li>
<li><a href="https://goo.gl/OSBNqv">https://goo.gl/OSBNqv</a></li>
<li><a href="https://goo.gl/2rNPMx">https://goo.gl/2rNPMx</a></li>
<li>デモはディスクフルで終了</li>
</ul>


<h2>昼食及びPGP/GPGキーサインパーティ</h2>

<p>パスポートを机の上に準備していたのに持ってくるのを忘れてしまっていて、
ID が運転免許証しかなかったので、日本人とだけにしておきました。</p>

<h2>OSS license 101</h2>

<ul>
<li>ライセンスは一部の権利を許諾するもの</li>
<li>著作権の他に特許、商標、契約も関係する</li>
<li>商標の例: &ldquo;Firefox&rdquo; と Iceweasel</li>
<li>契約の例: Red Hat エンタープライズ契約書</li>
<li>「5.2 検査。」という項目がある</li>
<li>ライセンスを選ぶ</li>
<li>目的に合わせて</li>
<li>万能のライセンスはない</li>
<li>ライセンスを独自に作るのはよくない</li>
<li>OSS ライセンスは well-tested library</li>
<li>独自ライセンスは使うときに吟味が必要になるし、互換性も問題になる</li>
<li>コードを書きたい人は既存のライセンスを使ってコードを書いていた方が生産性が高い</li>
<li>Proprietary license vs OSS license</li>
<li>Default deny vs Default allow</li>
<li>Whitelist vs Blacklist</li>
<li>The Open Source Definition (Annotated) <a href="https://opensource.org/osd-annotated/">https://opensource.org/osd-annotated/</a></li>
<li>DFSG-free (OSS), OSI-Certified and fake-OSS</li>
<li>Well-known OSS license</li>
<li>どのライセンスが良いか?</li>
<li>目的と利用方法によって変わる</li>
<li>Copyleft vs Permissive <a href="https://www.gnu.org/licenses/copyleft.ja.html">https://www.gnu.org/licenses/copyleft.ja.html</a></li>
<li>patent-free or not</li>
<li>Domain-specific</li>
<li>OFL,CC,GFDL, etc.</li>
<li>残りの時間はライセンスがらみの雑談</li>
<li>Zstd <a href="https://github.com/facebook/zstd">https://github.com/facebook/zstd</a></li>
<li>BSD-3-clause license However, its &ldquo;PATENTS&rdquo; file says</li>
<li>Zfs (GPL vs CDDL) by Canonical, Ltd.</li>
<li>GPL: Linux &ldquo;T-800&rdquo; issue</li>
<li>第三者はソースコードを請求できない</li>
<li>「Linux で稼働しているターミネーターを掴まえたとしても、そのバイナリの所有権を得たわけではないので、ソースコードは請求できない。」 <a href="https://twitter.com/elim/status/807442658830336001">https://twitter.com/elim/status/807442658830336001</a></li>
</ul>


<h2>Go言語で書かれたソフトウェアをDebianパッケージにする方法</h2>

<ul>
<li><a href="https://twitter.com/tSU_RooT">https://twitter.com/tSU_RooT</a></li>
<li>GPG ID: 63A6 000E</li>
<li>peco の Debian パッケージを入れた人</li>
<li>dh-make-golang</li>
<li>佐々木さんは自分用パッケージを作ったが、メンテナンスするプログラミング言語を増やしたくなかったので公式にはあげなかったらしい</li>
<li>公式に入れるとメリットが多い</li>
<li>公式に入ったっときのデメリットはパッケージメンテナがアップデートに追随してくれないことがある</li>
<li>パッケージに限らない問題</li>
<li>下準備</li>
<li>sid の環境を用意</li>
<li>リポジトリの確認</li>
<li>ソースコードからビルドできるか</li>
<li>ライセンスが付属しているか</li>
<li>go get するだけでビルドできるか</li>
<li>依存ライブラリがすでにパッケージになっているか</li>
<li>依存ライブラリも同じチェック</li>
<li>ライセンスがない場合: issue でお願いする</li>
<li>複雑なビルド手順が必要な場合: debian/rules で頑張る必要がある、今回は対象外</li>
<li>依存ライブラリが多い場合</li>
<li>ライセンス確認</li>
<li>例えば、サンプルに Gopher くんの画像がついていたら debian/copyright に明記する必要あり</li>
<li>pkg-go.alioth.debian.org</li>
<li>パッケージの命名規則がある</li>
<li>fork したリポジトリも別パッケージで問題ない</li>
<li>Go 1.6 で正式導入された vendor ディレクトリの扱いはまだ完全には決まってないっぽい</li>
<li>peco (v0.4.2) での実例</li>
<li>依存パッケージの話</li>
<li><code>apt showsrc golang-go-flags-dev 2&gt;/dev/null | grep Homepage</code> で upstream を確認</li>
<li>古いパッケージで依存なしで消えていたものを復活させた</li>
<li>lintian の警告を消す</li>
<li>debian/copyright を書く</li>
<li>debian/changelog を直す (ITP の番号を埋める、UNRELEASED を unstable に)</li>
<li>debian/control の README から自動で生成された説明文を直す</li>
<li>ライブラリパッケージすべてに行う</li>
<li>バイナリパッケージは man ページも用意する</li>
<li>今回話せなかったこと</li>
<li>参考資料</li>
<li>質疑応答</li>
<li>pristine-tar と git-buildpackage の話</li>
</ul>


<h2>Certbotで無料TLSサーバー</h2>

<p>Certbotで無料TLSサーバーというタイトルで発表しました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/debian-certbot/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/debian-certbot/" title="Certbotで無料TLSサーバー">Certbotで無料TLSサーバー</a>
</div>


<p><a href="https://github.com/sorah/acmesmith">https://github.com/sorah/acmesmith</a> というクライアントもあるらしい。</p>

<p><a href="https://github.com/dokku/dokku-letsencrypt">https://github.com/dokku/dokku-letsencrypt</a> で使っている <code>simp_le</code> は 開発が止まっている ( <a href="https://github.com/kuba/simp_le/issues/114">https://github.com/kuba/simp_le/issues/114</a> )。</p>

<h2>休憩及び集合写真撮影</h2>

<p>集合写真を撮影して、おやつ休憩がありました。</p>

<h2>FOSS バーチャルシンガー 徴音梅林 と LINNE プラットホーム</h2>

<ul>
<li>英語なので頑張って聞いていました。</li>
<li><a href="http://projectmeilin.github.io/ja/">http://projectmeilin.github.io/ja/</a></li>
</ul>


<h2>最近のGnuPG</h2>

<ul>
<li>二ヶ国語でプレゼン</li>
<li>メモリ不足でプレゼンツールがうまく動かないので佐々木さんのマシンに切り替え</li>
<li>Jessie は gnupg パッケージは 1.4 (新しいバージョンは gnupg2 パッケージ)</li>
<li>Stretch は gnupg パッケージは 2.1 (古いバージョンは gnupg1 パッケージ)</li>
<li>GnuPG 2.1?</li>
<li>公開鍵のフォーマットが KBX に変わった。(昔の形式もサポート)</li>
<li>プライベート鍵は gpg-agent が管理するようになった。</li>
<li>gpg, gpg-agent, pinentry, scdaemon, dirmngr, (gpgsm, ssh)</li>
<li>おすすめの使い方</li>
<li>gpg-agent を ssh-agent として使う</li>
<li>Token を使う</li>
<li>Curve25519 を使う (Ed25519/X25519 is more secure, key is small, fast)</li>
<li>キーサインパーティー</li>
<li>WKD: Web key directory</li>
<li>ToFU: Trust On First Use</li>
<li>g13 + dm-crypt</li>
<li>質疑応答</li>
<li>RSA 鍵からの移行</li>
<li>サブキーの追加よりも新規に作るのがおすすめ</li>
<li>gnuk の話</li>
<li>curve25519 サポートしている</li>
<li>楕円曲線暗号は輸出入の規制にひっかかることがある</li>
</ul>


<h2>休憩</h2>

<p>2つの部屋をくっつけて広くなった。</p>

<h2>DebConf 2018 台湾 参加表明準備とステータスの更新</h2>

<ul>
<li>英語なので twitter の <code>#debianjp</code> を参考にして頑張って聞いていました。</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>アンケート: <a href="https://goo.gl/BsPrgA">https://goo.gl/BsPrgA</a></li>
</ul>


<h2>懇親会</h2>

<ul>
<li>LT 大会をやっていました。</li>
<li>全体的にマイクの通りが悪いのか、英語に限らず話が聞き取りにくかったです。</li>
<li>Unicode の <a href="https://ja.wikipedia.org/wiki/%E6%BC%A2%E5%AD%97%E8%A8%98%E8%BF%B0%E8%A8%80%E8%AA%9E#.E6.BC.A2.E5.AD.97.E6.A7.8B.E6.88.90.E8.A8.98.E8.BF.B0.E6.96.87.E5.AD.97.E5.88.97_.28IDS.29" title="漢字構成記述文字列 (Ideographic Description Sequence; IDS)">漢字構成記述文字列 (Ideographic Description Sequence; IDS)</a> ですごい漢字を出しているのとか自作 OS の話とかが印象に残りました。</li>
<li>2回あった自動販売機の話もなかなか面白かったです。 <a href="https://twitter.com/OrientalHistory/status/807530627293593600">https://twitter.com/OrientalHistory/status/807530627293593600</a> <a href="https://twitter.com/OrientalHistory/status/807535513779322880">https://twitter.com/OrientalHistory/status/807535513779322880</a></li>
<li>セッション中は結局 LibreOffice Kaigi 2016.12 の方はいけなかったが、 LibreOffice 側にいた人とも話ができてよかった。</li>
<li>昔の RubyKaigi でセッションがのびたのに別の部屋の次のセッションは始まってしまって、両方見たかった人が最初の方を見逃すということがあって、その後、別の部屋とも同期をとるようになったということがあったのを思い出したのですが、別イベントなので、そこまで同期を取る必要はないにしても、せめてセッションの開始終了予定時刻が同じくらいの時間になっていれば、相互に行き来が発生しやすかったのではないかと思いました。</li>
<li>この話は LibreOffice 側の人にしたのですが、もともとイベントの企画は別々に始まっていて、たまたま会場と日付が一緒だったから合同にしたという流れだったようで、そこまで考えていなかったということのようでした。</li>
</ul>


<h2>まとめ</h2>

<p>k-of.jp で発表者募集を見て応募するまで参加する予定は全くなかったので、
前回会ったのがいつだったか忘れるぐらい久しぶりに会った人もいて、
全体としては楽しかったので、
参加して良かったと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[関西オープンフォーラム2016にいってきた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-11-12-k-of-jp.html"/>
    <updated>2016-11-12T14:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/k-of-jp</id>
    <content type="html"><![CDATA[<p><a href="https://k-of.jp/2016/" title="KOF 2016：関西オープンフォーラム2016">KOF 2016：関西オープンフォーラム2016</a>
にいってきました。</p>

<!--more-->


<p>主に東海道らぐの LT と Debian Updates を見にいったので、そのメモです。</p>

<h2>東海道らぐ・鹿肥ゆる秋の大阪湾ライトニングトーク大会 in KOF</h2>

<ul>
<li>かな漢字変換ソフト「Genji」をつくってみた</li>
<li>ベジェ曲線を極めたい</li>
<li>自宅サーバのトラブルを楽しもう カーネル編</li>
<li>(Ubuntu 16.04 から 16.10 にあげたらカーネルパッケージのインストールに失敗して、結局原因は Sophos の無料版を入れていて 16.10 のカーネルに対応していなかったという話)</li>
<li>ビットコインとかブロックチェーン</li>
<li>Bitcoin の他には Ripple が有名</li>
<li>bitFlyer, coincheck, Zaif</li>
<li><a href="https://twitter.com/shu_kob">https://twitter.com/shu_kob</a></li>
<li>mikutter 活動報告</li>
<li>あひる焼き</li>
<li>月額利用料0円のモバイルネットワーク通信</li>
<li>Y!mobile (旧WILLCOM) の 2,3 台目の基本料金無料と WILLCOM 同士の通話料無料を使うという話だった。</li>
<li>Mini Debian Conference Japan 2016, PyConJP 2017</li>
</ul>


<h2>Debian Updates</h2>

<ul>
<li>スライドを KDE Connect で Android 端末から操作していた。(ただしマウスカーソルの移動とクリックで次のページはできていたが、それ以外の前のページへ戻るなどの操作は操作方法がわからないからか、できていないようだった。)</li>
<li>Debian とは? についていろいろ説明</li>
<li><a href="https://ja.wikipedia.org/wiki/GNU_Hurd">https://ja.wikipedia.org/wiki/GNU_Hurd</a> で使われているロゴじゃない Hurd のロゴがあるらしい <a href="https://www.gnu.org/graphics/ahurdlogo.html">https://www.gnu.org/graphics/ahurdlogo.html</a></li>
<li>Debian Updates</li>
<li>2016/02/29 Debian 6 Long Term Support (LTS) 終了 (2つ前のバージョン, 今の安定版は 8)</li>
<li>2016/04/02 Updated Debian 8.4, 7.10</li>
<li>2016 年度 Debian Project Leader 決定</li>
<li>2016/04/25 Debian 7 のセキュリティサポートが LTS チームに移行</li>
<li>2016/05/07 Debian 9 の i386 アーキテクチャのサポート CPU 変更アナウンス: i686 以降に変更 <a href="https://lists.debian.org/debian-devel-announce/2016/05/msg00001.html">https://lists.debian.org/debian-devel-announce/2016/05/msg00001.html</a></li>
<li>2016/06/04 Updated Debian 8.5, 7.11</li>
<li>2016/05/15 ZFS in Debian/contrib</li>
<li>2016/07/02-09 Debconf16</li>
<li>2016/08/16 Debian 23 歳</li>
<li>2016/09/17 Debian 8.6</li>
<li>Debug symbol 用パッケージ新規スイート提供開始</li>
<li>パッケージ名-dbgsym</li>
<li>deb.debian.org/debian-debug stretch-debug main</li>
<li>debhelper 10</li>
<li>Next Debian Release</li>
<li>2016/11/05 Transitions freeze</li>
<li>ライブラリの ABI が変わるものは認めない</li>
<li>2017/01/05 &ldquo;Soft&rdquo; freeze</li>
<li>2017/02/05 Full freeze</li>
<li>今後のイベント情報</li>
<li><a href="https://tokyodebian.alioth.debian.org/" title="東京エリアDebian勉強会">東京エリアDebian勉強会</a></li>
<li><a href="http://miniconf.debian.or.jp/" title="Mini Debian Conference Japan 2016">Mini Debian Conference Japan 2016</a></li>
<li><a href="https://wiki.debian.org/KansaiDebianMeeting" title="関西Debian勉強会">関西Debian勉強会</a></li>
</ul>


<h2>終了後</h2>

<p>Debian の人たちと懇親会に行きました。</p>

<p>最後の方は端末の話で盛り上がっていたので、次回の関西Debian勉強会は端末ネタになりそうかもしれません。</p>

<p>いろいろ話を聞きましたが、<a href="http://blog.n-z.jp/blog/2016-08-20-mac-easypg-gpg2.html" title="OS X の Emacs で EasyPG が gpg2 で Opening input file: Decryption failed, になったので対処した">OS X の Emacs で EasyPG が gpg2 で Opening input file: Decryption failed, になったので対処した</a>で書いたように gnupg のデフォルトが 2 系列になると emacs ではまるので確認してみたところ、stretch では 2 系列がデフォルトになって影響がありそうとわかりました。</p>

<p>佐々木さんは Desktop 環境で使っているので GUI の pinentry を使っていて問題なくつかえているという話でした。</p>

<p>帰ってきてから確認してみると、<a href="https://packages.debian.org/search?keywords=gnupg-agent" title="gnupg-agent パッケージ">gnupg-agent パッケージ</a>が 2.1.15 で 2.1.5 より新しいので <code>--allow-emacs-pinentry</code> が使えそうでした。
Ubuntu の <a href="http://packages.ubuntu.com/search?keywords=gnupg" title="gnupg パッケージ">gnupg パッケージ</a> で確認すると yakkety (16.10) では 2.1.15-1ubuntu6 のようで、すでに 2 系列のようなので、 Debian リリース前でも Ubuntu の方を使えば安定版で gnupg が 2 系列になったものを用意できそうなので、後で調べてみようと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第75回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-11-05-rubykansai75.html"/>
    <updated>2016-11-05T13:26:28+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai75</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/52902" title="第75回 Ruby関西 勉強会">第75回 Ruby関西 勉強会</a>
に参加して発表してきました。</p>

<p>今回は (ustream) 中継はありませんでした。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>オープニング</h2>

<ul>
<li>会場の電源とかの話とか</li>
<li>最初の発表者の紹介とか</li>
</ul>


<h2>機械学習概論</h2>

<ul>
<li>サンプルコードもないので Ruby とは全く関係のない話</li>
<li>機械学習入門書の入門 (挫折しないために)</li>
<li>「Machine Learning: A Probabilistic Perspective」は1000ページ超え</li>
<li>機械学習手法の大分類: 教師あり学習, 教師なし学習, 半教師あり学習, 強化学習</li>
<li>入門書で取り上げられる割合: 教師あり学習:9割, 教師なし学習:1割, 半教師あり学習:0割, 強化学習:0割</li>
<li>入門書で取り上げられる割合: 教師あり学習:9割のうち: パラメトリック:9割, ノンパレメトリック:1割</li>
<li>なので、この発表では教師あり学習・パラメトリックの話</li>
<li>パラメトリック推定</li>
<li><code>y=f(x)</code> となる <code>f</code> を見つけること</li>
<li>パラメータ <code>θ</code> を持つ何らかの特定の関数群(集合) <code>f(x, θ)</code> の中で <code>y=f(x, θ)</code> と最も近似できるような <code>θ</code> を探す</li>
<li>ベイズの定理</li>
<li>最尤推定</li>
<li>種々の推定</li>
<li>MAP 推定</li>
<li>点推定しない</li>
<li>共役事前分布</li>
<li>おすすめのマイルストーン</li>
<li>tinyurl.com/ruby-boshu</li>
<li>13:50 までの予定が 14:13 までになっていた。</li>
<li>質疑応答</li>
<li>14:16 までだった。</li>
</ul>


<h2>懇親会募集</h2>

<ul>
<li>8名?</li>
</ul>


<h2>Ruby 2.4.0 の主な非互換</h2>

<p>発表しました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykansai75-ruby24/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykansai75-ruby24/" title="Ruby 2.4.0 の主な非互換">Ruby 2.4.0 の主な非互換</a>
</div>


<ul>
<li>質問は特になかった。</li>
<li>14:38 までだった。</li>
</ul>


<h2>休憩</h2>

<ul>
<li>14:45頃まで</li>
<li>発表者ということで k-of.jp で配る予定のステッカーをもらった。</li>
</ul>


<h2>さよならsprockets</h2>

<ul>
<li>いかに Qiita は sprockets を捨てるに至ったか</li>
<li>前半:技術選定の話, 後半:さよならsprockets</li>
<li>技術マネジメントの話</li>
<li>(個人的な) 普遍的な要求: 学習コスパがいい, 撤退しやすい, 速い</li>
<li>作るものの特性によって変わる要求</li>
<li>SoR (System of Record), SoE (System of Engagement)</li>
<li>さよなら sprockets</li>
<li>sprockets のおさらい</li>
<li>sprockets の問題点</li>
<li>sprockets は SoE を支援する gem</li>
<li>利点: Rails との統合が進んでいる, ハッシュダイジェスト埋め込みは便利</li>
<li>良いところは残しつつ、もっと高速にトライ・アンド・エラーできるようにしたい</li>
<li>browserify-rails</li>
<li>sprockets + ES6 modules ができる</li>
<li>脱 sprockets のための経由地</li>
<li>JS が小さいうちはここで快適に暮らしてもいい</li>
<li>気合いで ES6 modules 化</li>
<li>browserify v.s. webpack</li>
<li>webpack はなんでもできすぎて撤退しづらくなりそう → browserify を採用した</li>
<li>(世の中的には webpack が主流になりつつある)</li>
<li>ビルドタスクを書く</li>
<li>全部 npm-scripts に書く (Grant gulp は使わない)</li>
<li>ワンライナーに納まらない場合は Node.js スクリプトを書く</li>
<li>Tips: npm-scripts 用シェル芸</li>
<li><code>((a &amp;&amp; (b &amp; c &amp; wait)) &amp; d &amp; wait) &amp;&amp; e</code></li>
<li>マニフェストファイル: 開発環境では admin.js で本番環境では admin-xxxxx.min.js</li>
<li>開発環境: watchify</li>
<li>非同期ビルドの問題</li>
<li>CSSのビルドが微妙にかかるので反映されていないことがある</li>
<li>コンパイル中は sleep する Rack ミドルウェアを追加して解決</li>
<li>移行の結果何が変わった?</li>
<li>デプロイ速度が4分速くなった</li>
<li>開発時の待ち時間がかなり速くなった</li>
<li>開発にすべての npm パッケージを使えるようになった</li>
<li>15:25 までだった。</li>
<li>質疑応答は特になし</li>
</ul>


<h2>社内勉強会で読んだ本とか</h2>

<ul>
<li>15:27 から</li>
<li>Rails5 リリースノート</li>
<li>The Twelve-Factor App</li>
<li>The Rails Doctrine</li>
<li>Domain Driven Design Quickly</li>
<li>メタプログラミング Ruby 第2版</li>
<li>15:37 まで</li>
<li><a href="http://www.slideshare.net/ShinsukeKuroki/ss-68228347" title="社内勉強会で読んだ本とか">社内勉強会で読んだ本とか</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li>15:50頃まで</li>
</ul>


<h2>mruby 初級者向けレッスン</h2>

<ul>
<li><a href="http://qiita.com/ogomr/items/04f2734bfef0a5ef082c" title="Ruby Miniature Book">Ruby Miniature Book</a></li>
<li><a href="http://qiita.com/ogomr/items/ca0c6cb5450bf6f86652" title="mruby on GR-CITRUS">mruby on GR-CITRUS</a></li>
<li><a href="https://github.com/ogom/crione">https://github.com/ogom/crione</a></li>
<li>16:57 まで</li>
<li>質疑応答</li>
<li>16:59 まで</li>
</ul>


<h2>告知タイム / クロージング</h2>

<ul>
<li>k-of.jp の手伝い募集</li>
<li>KansaiRubyKaigi 2017 開催決定</li>
<li>2017-05-27 に大阪産業創造館で</li>
<li>これもスタッフの募集予定</li>
<li>発表者やスポンサーも時期が来れば募集予定</li>
<li><a href="http://qiita.com/advent-calendar/2016/shinosakarb" title="Shinosaka.rb Advent Calendar 2016">Shinosaka.rb Advent Calendar 2016</a></li>
<li><a href="http://rubykansai.github.io/kansai-ruby-community/" title="関西 Ruby コミュニティー 紹介">関西 Ruby コミュニティー 紹介</a></li>
<li><a href="http://www.coderdojo.jp/">http://www.coderdojo.jp/</a></li>
<li>17:17 終了</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2016 の 3 日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-09-10-rubykaigi-2016.html"/>
    <updated>2016-09-10T09:20:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi-2016</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2016" title="RubyKaigi 2016">RubyKaigi 2016</a> の 3 日目に参加したので、そのメモです。</p>

<!--more-->


<h2>Ruby Committers vs the World 前</h2>

<ul>
<li>コミッターは 9:10 までにコミッター T シャツをきてくるようにという話だったので、ちゃんと間に合うように着きました。</li>
<li>壇上に上がらないと名指しされて逆に目立つ自体発生</li>
</ul>


<h2>Money Forward</h2>

<ul>
<li>urabe さんを雇用している</li>
<li>RubyKaigi 2015/2016 のスポンサー</li>
<li>壇上だと近すぎてスライドが見にくい状態</li>
<li>普通の Rails アプリを普通に作っている</li>
</ul>


<h2>Ruby Committers vs the World</h2>

<ul>
<li>会場から質問受付するので考えておいてください</li>
<li>謝辞</li>
<li>新規コミッター</li>
<li><a href="https://rhe.jp/">rhe さん</a> (不在, openssl)</li>
<li>tadd さん (<a href="https://bugs.ruby-lang.org/issues/12484">Feature #12484 Optimizing Rational</a>)</li>
<li>2.4 に入れたい</li>
<li>MVP (P = Patch)</li>
<li><a href="https://github.com/ruby/ruby/commit/9afc312b4fef21da91fde083f85533ffd5a9d95f">r54737 Support MSVC14 and 15</a></li>
<li>Windows は C ランタイムが開発環境についている</li>
<li>隠されてしまった構造体の中身を見ている</li>
<li><a href="https://github.com/ruby/ruby/commit/d8c3672b012ec6eb55e097162c6c638e8d932471">r55656 undef ISeq.translate</a></li>
<li>昨年 12 月に追加された translate が定義されていれば呼ぶという機能が、意図せずトップレベルに定義されてしまっていても呼んでしまっていた。</li>
<li>リリース後、半年気づかれなかった。</li>
<li>asakusa.rb の <a href="https://twitter.com/takkanm/status/752864847319007236">irb を起動する、action_view を require する、ActionView::Helpers を include する、exit って打つ、楽しい</a> で発見</li>
<li>質問受付</li>
<li>同時通訳が入っているので、同時に二人以上喋らないように注意</li>
<li>Ruby の標準ライブラリを gem に切り出す話の進捗は?</li>
<li>hsbt さん: tk, xmlrpc が gem にして standard library から外れた</li>
<li>ruby コミッター以外でもメンテナンスできるようになった</li>
<li>tarball がちょっと小さくなった</li>
<li>ビルド時間もちょっと減った</li>
<li>2.5 に向けて 2,3 個外したい</li>
<li>質問 (urabe さん): よく使われている gem の話があったが bundler は標準添付になるのか?</li>
<li>drbrain さん: 聞き取れず</li>
<li>質問 (ささださん): Ruby 3 の話はあるが、Ruby 2 で変えたいことはあるか?</li>
<li>matz: 小さい性能改善とかはどんどん入れたい</li>
<li>Integer Unification のようなものは影響範囲をみながら</li>
<li>ささださん : Ruby 3 でなら大きな変更は OK ?</li>
<li>matz: 多くのコードを書き換えないといけないような変更は入れたくない</li>
<li>naruse さん : Windows の external encoding を utf-8 にしたい</li>
<li>西島さん : frozen string literal のデフォルト化?</li>
<li>matz: 2.3 でプラグマを入れたが frozen string literal がデフォルトになると Python 3 の二の舞になりそう</li>
<li>matz: Python 3 を見習いたいところはあるので Python 3 を dis っているつもりはない</li>
<li>akr さん: 会場アンケート</li>
<li>プラグマをちゃんと書いている人 : ぱらぱらといる程度</li>
<li>みんな書いて面倒と思われたらデフォルトになるのでは</li>
<li>今の感じだとまだ無理そう</li>
<li>質問: 聞き取れず</li>
<li>naruse さん : github に移るのは難しい (理由は聞き取れず)</li>
<li>svn から git に移行する時にツールを直さないといけないが、そのリストアップがされていない</li>
<li>matz: 中央の repository が github になったとしても github issues を使う予定はない</li>
<li>すでに redmine を使っているので</li>
<li>github の社員の aaron さん : 聞き取れす</li>
<li>naruse さん : 聞き取れず</li>
<li>Yugui さん : ML 連携を書いた責任を感じているので何かしたい</li>
<li>urabe さん : 全容把握が必要</li>
<li>matz : git に移行するとしても年単位でかかりそう</li>
<li>すでに github で pull request も受け付けているし、 git svn を使っている人も多いので、中央レポジトリを移行する嬉しさがあまりない</li>
<li>会場: Ruby3 で変えていきたいとか入れたいとかあるか? こういう人がコミッターになったら嬉しいとかある?</li>
<li>ko1 さん: 並行性に対するサポートを入れたいし accept して欲しい</li>
<li>実装がめちゃくちゃ大変なので手伝ってくれる人が欲しい</li>
<li>matz: やりたいことの 3 つの柱の 1 つなので何かしらのものは入れたい</li>
<li>takano32 さん (IA64メンテナ): bundler</li>
<li>matz: Python 3 で見習わないのは大きな非互換を入れたところだけ</li>
<li>takano32 さん: rbenv?</li>
<li>nobu さん: rbenv は ruby の外側なので ruby に入っても嬉しくないのではないか</li>
<li>a_matsuda さん: その通りだと思う</li>
<li>urabe さん: Python のように C にうまく translate するものがあれば良いのではないか</li>
<li>mrkn さん: 速度向けではなく、拡張ライブラリを楽に書きたい人向けではないか</li>
<li>標準に入るかどうかはわからない</li>
<li><code>rb_define_method</code> や typed data を毎回書くのが面倒</li>
<li>nobu さん: そういうパターンで書くところはテンプレートで支援しても良いかも</li>
<li>ko1 さん: 以前に似たものを提案したことがある</li>
<li>C 言語以外に中間言語を新しく勉強するのが大変という反対意見があった</li>
<li>実際のものを評価して判断したい</li>
<li>kou さん: 拡張ライブラリをよくかく</li>
<li>普通の関数だけで書かれるのがわかりやすくて良いので変なマクロが増える方向だと反対</li>
<li>Yugui さん: 会場アンケート</li>
<li>拡張ライブラリを書いたことがある人 : それなりにいる</li>
<li>辛い人 : そんなにいない</li>
<li>会場: 拡張ライブラリを書いているが、慣れれば普通の C (CRuby 用) と Java (JRuby 用) なので便利</li>
<li>extension.rdoc がわかるようになるころには、ソースを直接読むほうがはやい</li>
<li>Yugui さん: doxygen コメントを入れる機能があるので活用してください</li>
<li>どんなコミッターが欲しいかという話に戻った</li>
<li>ko1 さん: 平均年齢が上がっていっているので、若い人が欲しい</li>
<li>気軽に聞いてください</li>
<li>hsbt さん: GSoC など、サポートをうまく活用してください</li>
<li>mrkn さん: 会場アンケート: Ruby のコミッターになっていじりたいところがある人: 数人いる</li>
<li>会場 (joker1007 さん): キーワード引数の扱いの話</li>
<li><code>**</code> だけではなく名前をつけたものも一緒になった <code>Hash</code> が欲しい</li>
<li>(twitter によると <a href="http://qiita.com/joker1007/items/708af8eb5c217bf23e09" title="[小ネタ] Rubyのキーワード引数で受け取った値をHashとしてまとめて取得するgem">[小ネタ] Rubyのキーワード引数で受け取った値をHashとしてまとめて取得するgem</a> のことではないかという話)</li>
<li>a_matsuda さん: feature request を再プッシュ</li>
<li>naruse さん: 見つからなければ重複とマークされるだけなので再作成でも良い</li>
<li>会場: 英語なのでよくわからず</li>
<li>drbrain さん: 英語なのでよくわからず</li>
<li>aaron さん: 英語なのでよくわからず</li>
<li>時間がないので後で</li>
<li>会場: 英語なのでよくわからず</li>
<li>matz: 英語なのでよくわからず (CoC の話?)</li>
<li>naruse さん: 最後に: 壇上で Ruby 2.4.0-preview2 がリリースされたことをアナウンス</li>
</ul>


<h2>Web Clients for Ruby and What they should be in the future</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/tkawa.html" title="Web Clients for Ruby and What they should be in the future - RubyKaigi 2016">Web Clients for Ruby and What they should be in the future - RubyKaigi 2016</a></li>
<li>最初のセッションが伸びたので残りの午前のセッションは 5 分遅れ (昼休みで調整するのは昨日と同じらしい)</li>
<li>自己紹介など</li>
<li><a href="http://amzn.to/2cMkz1U">RESTful Web APIs</a> → <a href="http://amzn.to/2bYPjYC">Restful Web Clients</a></li>
<li>ユーザーが操作する Web API</li>
<li>こんなクライアントは嫌だ: 密結合</li>
<li>こんなクライアントが好き: 疎結合</li>
<li>例: FizzBuzzaaS : FizzBuzz as a Service</li>
<li>パラメーターをつけた URL 直指定は密結合</li>
<li>link next で疎結合</li>
<li>Ruby の HTTP クライアント: net/http, open-uri</li>
<li>gem はたくさん: 大江戸HTTPクライアント絵巻 <a href="http://regional.rubykaigi.org/oedo01/">http://regional.rubykaigi.org/oedo01/</a></li>
<li>Web API は使うのが簡単なので普及した</li>
<li>Web API ごとの gem もたくさんある</li>
<li>RPC でいいんじゃないか?</li>
<li>なぜ個別の gem がたくさんできるのか?</li>
<li>API呼び出し (1回) と機能の呼び出しにはギャップがある</li>
<li>HTTP クライアントは状態を持たないが、アプリは状態を持つ</li>
<li>私が欲しいクライアントは状態管理ができるクライアント</li>
<li>ここでは状態管理ができるクライアントを Web クライアントと呼ぶ</li>
<li>クライアントとサーバーのレイヤーの話</li>
<li>Rack, Rack Middleware : 玉ねぎ</li>
<li>Faraday: Rack Middleware のように Faraday Middleware がある</li>
<li>gem を丸ごと作るのではなく Faraday Middleware として作る</li>
<li><a href="https://github.com/tkawa/faraday-hypermedia">https://github.com/tkawa/faraday-hypermedia</a></li>
<li>faraday-navigation</li>
<li>Link Header: RFC 5988</li>
<li>Link-Template Header: Internet Draft (expired)</li>
<li>faraday-link-extractor</li>
<li><code>navigation:</code> を拡張</li>
<li>デモ動画: 文字が小さくてよく見えないので雰囲気で見ていた</li>
</ul>


<p>Faraday は名前は見たことがあって、よく使われているのかなという印象はあり、具体的にどういうものかは知らなかったのですが、便利そうでした。</p>

<h2>High Tech Seat in mruby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/yuri_at_earth.html" title="High Tech Seat in mruby - RubyKaigi 2016">High Tech Seat in mruby - RubyKaigi 2016</a></li>
<li>Sessalet (せされっと) : SESSAME (コミュニティ名) + Washlet</li>
<li>SESSAME: 組込みソフトウェア管理者・技術者育成研究会</li>
<li>組込みソフトウェア技術者・管理者向けセミナー ～ソフトウェアに変換可能な仕様書がきちんと書けるようになろう～</li>
<li>なぜ Sessalet? : 状態が入れ子になっている、直交状態をもつ</li>
<li>翻訳の揺れ: State Machine Diagram, entry, trigger</li>
<li>遷移が正しくない図、開始状態がない図はよくない</li>
<li>Sessalet Analysis Model</li>
<li>RTOS : EV3RT</li>
<li>TOPPERS Project</li>
<li>mruby をどう使っているかという話</li>
</ul>


<p>他の作業をしながら聞いていたのであまりメモをとれませんでした。</p>

<h2>Lunch Break</h2>

<h2>Recent Advances in HTTP and Controlling them using ruby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/kazuho.html" title="Recent Advances in HTTP and Controlling them using ruby - RubyKaigi 2016">Recent Advances in HTTP and Controlling them using ruby - RubyKaigi 2016</a></li>
<li>いっぱいだったので通路に座っていました。</li>
<li>自己紹介</li>
<li>h2o は fastly でも使われている</li>
<li>(プレゼンにはなかったけど fastly は www.ruby-lang.org でも使われている)</li>
<li>Current State of HTTP</li>
<li>なぜ HTTP/2 を使うのか?</li>
<li>ボトルネックがバンド幅からレイテンシーに変わってきた</li>
<li>3割ぐらいのサーバーが HTTP/2 (RFC 7540) に対応している</li>
<li>https への移行も進んでいる</li>
<li>HPACK (ヘッダー圧縮): いい感じ</li>
<li>多重化と優先順位付け</li>
<li>Push: ネガティブなコメントもあり</li>
<li>理想的な HTTP トランザクションの流れ</li>
<li>現実はできていない</li>
<li>TCP head-of-line blocking : 優先度の低いデータが滞留しているため、優先度の高いデータが送れない問題</li>
<li>直ちに送れるデータ量 CWND のサイズが Web サーバーがわからないので、バッファいっぱいまで書いてしまう</li>
<li>最適化できる</li>
<li>最適化した結果のベンチマーク</li>
<li>HTTP/2 の優先順位付け</li>
<li>クライアントが指定した順位を参考にしてサーバーが送信</li>
<li>Firefox の場合、CSS や JS  を優先して、残りは HTML と画像 (HTML をちょっと優先)</li>
<li>Safari, Blink はすべて同じなので、数の多い画像がたくさん帯域を使ってしまう</li>
<li>頭の悪いクライアントにはサーバー側で対処する必要がある</li>
<li>解決策、ベンチマーク</li>
<li>Hidden resource</li>
<li>CSS の <code>@import</code> の前に画像があると CSS のリクエストの前に画像を取りに行ってしまう</li>
<li>コンテンツ側で対処する必要あり</li>
<li>Push</li>
<li>How to Push: <code>Link: &lt;/style.css&gt;; rel=preload</code> ヘッダが w3c で仕様策定中</li>
<li>リクエスト処理中にプッシュする方法</li>
<li>H2O の場合 <code>100 Continue</code> という中間レスポンスで <code>Link</code> ヘッダーを送って最終的に <code>200 OK</code> などを返すという方法がある</li>
<li>H2O の設定に <code>mruby</code> で記述</li>
<li>RUM = Real User Monitoring</li>
<li>Push vs. cache</li>
<li>キャッシュ済みのリソースは無駄なので送信したくない</li>
<li>Cookie を使う: すでに動く</li>
<li>cache-digest を使う: ServiceWorker Script がブラウザーに必要</li>
<li>push の悪影響を避ける話</li>
<li>CSS, JS は push すると良さそうだが、画像は push しない方が良さそう</li>
<li>まとめ</li>
<li>質疑応答</li>
<li>質問1: <code>100 Continue</code> の実績はあるのか?</li>
<li><code>unicorn</code> とかで実際に試したという話はまだなさそう</li>
<li>質問2: ロードバランサーで動かない問題</li>
<li>TCP HoL blocking は原理的に回避不可能</li>
<li>QUIC が普及すれば、原理的に (L4?) ロードバランサーが使えないので、解決するか</li>
</ul>


<p>基本的にはサーバーやブラウザーの実装が頑張ってくれて、アプリケーション作成者としては hidden resource あたりに気をつけるだけで良い感じにしてくれるようになるのかもしれない。</p>

<h2>Optimizing Ruby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/shyouhei.html" title="Optimizing Ruby - RubyKaigi 2016">Optimizing Ruby - RubyKaigi 2016</a></li>
<li>自己紹介</li>
<li>Ruby is slow と言われている</li>
<li>GC? GVL? dynamic? ではない</li>
<li>脱最適化されていないから</li>
<li>コンパイル時に <code>1 + 2</code> が <code>3</code> にできない</li>
<li><code>Integer#+</code> が再定義される可能性があるから</li>
<li>普通は再定義されない</li>
<li>常に遅いのと、再定義されていないときは速いけど再定義されると遅くなるのはどっちがいいか</li>
<li>脱最適化は <code>SELF</code> という Smalltalk の variant がオリジナルで、開発者の関係で今は JVM に入っている</li>
<li>JIT コンパイルはしない</li>
<li>VM 命令を変換するだけ</li>
<li>命令の長さは変えない (必要なら nop で埋める)</li>
<li><code>iseq_encoded</code> を <code>iseq_deoptimize</code> に <code>memcpy</code> しておく</li>
<li><code>created_at</code> も追加</li>
<li>脱最適化は <code>iseq_deoptimize</code> を <code>iseq_encoded</code> に <code>memcpy</code> して戻す</li>
<li>C 言語のみなのでポータブル</li>
<li>プログラムカウンターをいじらない</li>
<li>VM timestamp で再定義の検出</li>
<li>ほとんどオーバーヘッドがない</li>
<li>ここまでのまとめ</li>
<li>これで最適化ができるようになった</li>
<li>定数の畳み込み</li>
<li>Folding 1 + 2</li>
<li>send の最適化</li>
<li>呼び出した後、すぐに値が捨てられるものを削除</li>
<li>「pure」なメソッドというのを考える</li>
<li>pure ではないメソッドの例</li>
<li>pure なメソッドの例 (ちょっと複雑な例として、left-pad、ライプニッツの公式)</li>
<li>決まらないという第三の状態がある (<code>method_missing</code> が発生するようなものとか)</li>
<li>最初は未定にしておき、実行中に決めていくようにした</li>
<li><code>callcache</code> に保存</li>
<li>呼び出され方も影響する</li>
<li>メソッドの返り値が使われていたら最適化しない</li>
<li>引数の中に最適化できないメソッド呼び出しがあったら、そっちは残すように調整が必要</li>
<li>変数の最適化</li>
<li>厳密に判定するのは難しいので、あらかさまに不要な代入されて使われていない (write-only) 変数を最適化する</li>
<li><code>binding</code> とかブロック (<code>binding</code> が勝手につく) があると最適化できない</li>
<li>ここまでのまとめ</li>
<li>基本的な最適化しかしていない</li>
<li>例外などに影響しないようにしている</li>
<li>まだまだ他の最適化をする余地がある</li>
<li>ベンチマーク</li>
<li>速くなったものはすごく速くなったが遅くなったものはさほどでもない</li>
<li>まとめ</li>
<li>FAQs</li>
<li><a href="https://github.com/ruby/ruby/pull/1419">https://github.com/ruby/ruby/pull/1419</a></li>
<li>質疑応答</li>
<li>質問1: メモ取れず</li>
<li>質問2: メソッドが pure かどうか知るメソッドはあるか?</li>
<li>デバッグに必要だったのである</li>
<li>実行ごとに変わる可能性がある</li>
<li>質問3: メモリー使用量は?</li>
<li>評価していないが、減っているはずはないので多少増えているはず</li>
<li>質問4: メモ取れず</li>
<li>Rails アプリなどの大きなものでの評価はまだ</li>
<li>質問5: fork の CoW への影響は?</li>
<li>fork のことは頭になかったが影響があるかも</li>
<li>他の JIT でも同じなので、あたたまってから fork するとか</li>
<li>質問6: シーケンスが長くなる最適化は?</li>
<li>VM のスタックの調整が必要なのでなんとかという話</li>
<li>質問7: <code>+</code> が pure なのはどうやって判定している?</li>
<li>特別扱いしている</li>
<li>質問8: Thread ? (英語で長いのでよくわからず)</li>
<li>質問9: ローカル変数で write-only な変数はそもそもいらないので警告を出してほしい</li>
<li><code>eval</code> などで使われる可能性があるので、完全になくすのはできない</li>
<li>警告だけなら良いかも</li>
<li>ko1 さん: 警告だけならすでに <code>-w</code> オプションで出る (<code>warning: assigned but unused variable</code>)</li>
</ul>


<h2>Afternoon Break</h2>

<h2>Hijacking syscalls with (m)ruby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/franckverrot.html" title="Hijacking syscalls with (m)ruby - RubyKaigi 2016">Hijacking syscalls with (m)ruby - RubyKaigi 2016</a></li>
<li>どっちも英語なのでどちらにしようか悩みましたが、こっちにしました。</li>
<li>Afternoon Break でのんびりしていたらすでに始まっていたので、最初の方は少し見逃しました。</li>
<li>system call の説明</li>
<li>Chaos Monkey</li>
<li>Securing Ruby apps</li>
<li>Library preloading</li>
<li>(m)ruby</li>
<li>mruby を External DSL として使う</li>
<li><code>super</code> でオリジナルの system call を呼ぶ</li>
<li>あんまり聞いていなかった。</li>
<li>質疑応答は質問なしで終了</li>
</ul>


<h2>cookpad</h2>

<ul>
<li>基調講演前にスポンサーセッション</li>
</ul>


<h2>Dive into CRuby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/nalsh.html" title="Dive into CRuby - RubyKaigi 2016">Dive into CRuby - RubyKaigi 2016</a></li>
<li>自己紹介</li>
<li>貢献したいモチベーション</li>
<li>なぜ新機能を追加したいか?</li>
<li>実際どういうコードで使いたいかという例 (use case) が必要</li>
<li>顧客が本当に必要だったもの</li>
<li><a href="https://bugs.ruby-lang.org/issues/6752">Feature #6752 Replacing ill-formed subsequence</a></li>
<li>Case: Web Forms: 400 Bad Request でいいのでは。</li>
<li>Case: Files: 無理矢理読むのは間違っている。適切なエンコーディングを指定すべき。</li>
<li>Case: Web Crawler: 実際の Web ページが壊れているので無理矢理読むことしかできない。</li>
<li>例: twitter</li>
<li>RT の初期の切り詰めがバグっていて、尻切れとんぼなバイト列ができたのではないか</li>
<li>iconv を使っている人がいた</li>
<li><code>String#encode</code> (encode エンジンベース) と <code>String#scrub</code> (正規表現ベース) の両方を作った</li>
<li><code>scrub</code> という名前は zfs の修復コマンドが由来</li>
<li>CRuby のファイル一覧紹介</li>
<li>NOTE: cygwin はメンテナがいないので募集中</li>
<li><code>string.c</code> に <code>str_scrub</code> を追加</li>
<li><code>str_scrub</code> の説明</li>
<li><code>rb_str_scrub</code>, <code>rb_enc_str_scrub</code> とたどっていく</li>
<li><a href="https://bugs.ruby-lang.org/issues/7361">Feature #7361 Pathname#touch</a> reject された悪い例</li>
<li>「アクセス日時と変更日時を変更する」という機能と「空のファイルを作成する」という機能がある</li>
<li>(<code>FileUtils.touch</code> はあるのに、と思った覚えが)</li>
<li><a href="http://amzn.to/2c1vKnu">API デザインケーススタディ</a></li>
<li>LLVM の clang (llvm-gcc を含む) はほぼ gcc と同じだが違う部分があるので対応が必要だった</li>
<li>Ruby は保守的な GC なので、最適化で消されると困ることがある</li>
<li>continuation で問題が起きた (<a href="https://github.com/ruby/ruby/commit/ca227314390b75a59f718618281ab5f7dfa184c4">r34278</a>)</li>
<li>原因を調べるのが大変だった</li>
<li>Visual C++ 2015</li>
<li>Windows だとファイルとソケットの扱いが違う</li>
<li>Unix のように統一的に扱うのは C ランタイム側の機能だった</li>
<li>その中身の <code>_pioinfo</code> を直接さわっていたが、公開されなくなった</li>
<li>ヘッダーファイルに公開されなくても DLL の中にはある</li>
<li><code>_isatty</code> の機械語の <code>_pioinfo</code> を触ってるっぽい部分のアドレスをとって <code>_pioinfo</code> を探し出す</li>
<li>入れるかどうか1年ぐらい悩んだが、 VC++ 2016 でも解決しそうになかったので入れた</li>
<li>DLL の名前がデバッグ版だと違う</li>
<li>こんなダメダメなコードなのに修正のパッチを送ってくれる人がいた! OSS すごい!</li>
<li>パフォーマンス改善の話</li>
<li>NewRelic で bugs.ruby-lang.org のプロファイルが取れる</li>
<li>ボトルネックがないと最適化が難しい</li>
<li>とりあえず 0.5% の <code>String#blank?</code> を速くする</li>
<li><code>Regexp#match?</code>: <code>MatchData</code> オブジェクトを作らずにマッチするかどうかだけ判定するメソッド</li>
<li>Note: Perl も似た最適化がある</li>
<li>SSE 4.2 STTNI: 16 バイトごとに処理する</li>
<li>最後の末尾の部分で読み込めない部分を踏むと SEGV するので、末尾処理が大変</li>
<li>RubyVM を改善する話</li>
<li>Ruby の layer にボトルネックがないので C の layer で探す</li>
<li>perf-top で optcarrot や fluentd を計測</li>
<li><code>vm_exec_core</code>, <code>vm_search_method</code> が top 2</li>
<li>分岐予測</li>
<li>CPU が新しいもので比べるだけで改善</li>
<li>NOP 命令が翻訳された機械語を見ると若干無駄なことをしている</li>
<li><code>opt_plus</code></li>
<li>Fixnum + Fixnum の最適化は説明に時間がかかるので詳細は省略</li>
<li>JIT はホットスポットがないと効果がない</li>
<li>Register machine <a href="https://bugs.ruby-lang.org/issues/12589">Feature #12589</a></li>
<li>Debugging / Profiling / (メモできず)</li>
<li><a href="https://github.com/frsyuki/sigdump">frsyuki/sigdump</a> でデーモンでもシグナルでスタックダンプとか取れる</li>
<li>strace with CRuby</li>
<li>futex が並んでいるのは timer thread が切り替えようとしているだけで正常な処理なので情報がない</li>
<li>procfs での情報の取り方の説明: EIP からたどる</li>
<li>簡単にできるように <a href="https://gist.github.com/nurse/0619b6af90df140508c2">pid2line.rb</a> を作った</li>
<li>最近の Ubuntu では sudo が必要</li>
<li>SEGV: Segmentation fault</li>
<li>バグ報告するときは最初から最後まで貼り付けてください</li>
<li>C level backtrace では DWARF などのデバッグ情報を使って非公開の関数でも名前をとっている</li>
<li>core file: 情報が詰まっている</li>
<li>前提条件として Linux では Ruby の Thread が pthread の thread、さらに OS の lwp と1対1対応している話</li>
<li><code>ruby_current_vm</code> から辿れる話</li>
<li><code>.gdbinit</code> という便利スクリプトの紹介</li>
<li><code>rb_ps_thread</code></li>
<li>まとめ</li>
<li>ユースケース (現実の例) を収集しよう</li>
<li>現実のアプリケーションのボトルネックを知ろう</li>
<li>時間オーバーしているけど少しだけ質疑応答</li>
<li>質問1: パッチを送ったときに反応がない場合は?</li>
<li>matz をつつけば良い、urabe さんやなるせさんでも良い</li>
<li>開発者会議の Wiki にのせてもらえれば議論にのる</li>
<li>質問2 (ko1 さん): twitter をみているとレベルが高いので無理と思っている人がいる</li>
<li>趣味の話なのでこういう話ができないとコミッターになれないというわけではない</li>
<li>興味の分野はみんな違うので、他の人が興味がなさそうな分野が良い</li>
<li>openssl の rhe さんが良い例</li>
<li>隙間はたくさんあるのでいろいろ出すと良い</li>
<li>質問3(urabe さん): <code>.gdbinit</code> を便利に使っているが、<code>.gdbinit</code> のデバッグはどうやっている?</li>
<li>手で直している</li>
<li>akr さん: Python で書き換えるのはどうか?</li>
<li>Mac のような LLVM 環境で使えないという問題もある</li>
<li>sorah さん(?)と: GUI があって便利という話</li>
</ul>


<p>面白かったけど、みんなついていけてたんだろうかという話も。</p>

<h2>Closing</h2>

<ul>
<li>Closing の前に落し物の案内</li>
<li>(今年も参加者数のスライドとかはあったので Togetter まとめの方をみると載ってるかも)</li>
<li>来年の情報はなし</li>
</ul>


<h2>Togetter まとめ</h2>

<p>昨日のメモと同じく、<a href="http://togetter.com/li/1022255" title="資料も反響もすべてチェック！ 京都で3倍広くなった #RubyKaigi 2016 まとめまとめ - Togetterまとめ">資料も反響もすべてチェック！ 京都で3倍広くなった #RubyKaigi 2016 まとめまとめ - Togetterまとめ</a> があるので、個別のまとめへのリンクは省略しました。</p>

<h2>The RubyKaigi 2016 After Party &amp; Lightning Talks!</h2>

<p><a href="https://rubykaigi.doorkeeper.jp/events/51800" title="The RubyKaigi 2016 After Party &amp; Lightning Talks!">The RubyKaigi 2016 After Party &amp; Lightning Talks!</a> は多分スタッフの片付けの時間の都合からだと思いますが、20:15 からという遅い開始時間なので、しばらく空き時間がありました。</p>

<p>時間が足りないぐらいずっと LT をしていたので、特に懇親会的な時間はなくて、話をする人は LT を聞かずに話をしていたような感じでした。</p>

<p>トイレに行ったり飲み物のおかわりをもらいに行ったりしている間、少し聞けないものがあったぐらいで、ほぼ全て聞いていたので、話はできませんでした。</p>

<p>話の内容自体も面白いものが多くて良かったのですが、Unicode に SNOWMAN WITHOUT SNOW という文字があるとかそういう本筋と関係ないところも印象に残りました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2016 の 2 日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-09-09-rubykaigi-2016.html"/>
    <updated>2016-09-09T09:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi-2016</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2016" title="RubyKaigi 2016">RubyKaigi 2016</a> の 2 日目に参加したので、そのメモです。</p>

<!--more-->


<h2>予習</h2>

<p>途中で知ったのですが、<a href="http://qiita.com/ya_ma23/items/e45404ca066b069efe05">RubyKaigi2016の予習（Day 2）</a>というのがあるようです。</p>

<h2>Door Open</h2>

<ul>
<li>早めに着いたのでメインホールでのんびりしていた。</li>
<li>開始前の待ち時間に少しの間「Surgical Refactors」というのが出ていたのは発表者のプロジェクターのテストっぽい感じだった。</li>
</ul>


<h2>Fearlessly Refactoring Legacy Ruby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/searls.html" title="Fearlessly Refactoring Legacy Ruby - RubyKaigi 2016">Fearlessly Refactoring Legacy Ruby - RubyKaigi 2016</a></li>
<li>自己紹介</li>
<li>発音が難しいので日本語でジュースさん</li>
<li>スクリーンサイズ: 16x9, 4x3, Ruby3x3 なので 3x3</li>
<li>early success と later success</li>
<li>レガシーコードのリファクタリングの話</li>
<li>refactor と legacy code という言葉の定義の確認</li>
<li>Business Priority と Cost/Risk の2軸で New Features, Bug Fixes, Testing, Refactoring を分類</li>
<li>Refactoring is hard to sell</li>
<li>Refactors are scary</li>
<li><ol>
<li>Refactoring Patterns</li>
</ol>
</li>
<li>リファクタリング Ruby Edition</li>
<li><ol>
<li>Characterization Testing</li>
</ol>
</li>
<li><ol>
<li>A/B Testing / Experiments</li>
</ol>
</li>
<li>Development, Testing, Staging, Production 全てをいい感じにするツールがないので作った</li>
<li>Talk-Driven Development</li>
<li><a href="https://github.com/testdouble/suture">https://github.com/testdouble/suture</a></li>
<li>9 Features : Plan, Cut, Record, Validate, Refactor, Verify, Compare, Fallback, Delete</li>
<li>Bug Fix の例</li>
<li>pure function は簡単だが状態を持つものは難しい</li>
<li>データベース (sqlite3) に記録するの話</li>
<li>Guilded Rose Kata</li>
<li>データベースに保存した値と verify</li>
<li>Coverage</li>
<li>Refactoring</li>
<li>同じ挙動をする新しいメソッドを定義</li>
<li>verify</li>
<li>間違った record を削除</li>
<li>Custom Comparators</li>
<li>Random seed の話</li>
<li>configuration</li>
<li>Development と Testing は良い感じにできた。</li>
<li>Staging や Production を良い感じにするには?</li>
<li>Compare: <code>call_both</code></li>
<li>Fallback : Make change safe for users</li>
<li><code>fallback_on_error</code>: 新しい方でエラーが起きたら古い方を使う</li>
<li>Delete : Record のところで記録したデータと Suture 関連の追加したコードを削除</li>
<li>ひこにゃん</li>
<li>質疑応答の前に CM</li>
</ul>


<h2>スポンサーセッション PIXTA</h2>

<ul>
<li><a href="https://pixta.jp/">https://pixta.jp/</a></li>
</ul>


<h2>Fearlessly Refactoring Legacy Ruby の質疑応答</h2>

<ul>
<li>質問1 : 聞き取れず</li>
<li>使っている、使ってみてくださいみたいな回答</li>
<li>質問2,3 : 聞き取れず</li>
<li>CI でも動いているとかなんとか</li>
<li>質問は日本語でも OK</li>
<li>質問4 : 新機能を追加するときには使えるか?</li>
<li>挙動が変わっていないのを確認するのに使えるとかいろいろ言っていたが聞き取れず</li>
<li>質問5 : develop yourself?</li>
<li>聞き取れず</li>
<li>質問6 (Martin 先生) : 聞き取れず</li>
<li>聞き取れず</li>
<li>質問7 : 聞き取れず</li>
<li>聞き取れず</li>
<li>日本語で質問8 : リファクタリングで発生したテストコードは残すべきか?</li>
<li>聞き取れず</li>
<li>質問9 : 聞き取れず</li>
<li>グローバル変数とか副作用とかの話</li>
</ul>


<p>全体的にセッションの英語は聞き取りやすかったのですが、メモを取りながらだと難しかったです。
質疑応答になるとスライドによる補助情報もないのでさらに厳しかったです。</p>

<h2>Intermission</h2>

<ul>
<li>落し物案内</li>
</ul>


<h2>How to create bindings 2016</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/ktou.html" title="How to create bindings 2016 - RubyKaigi 2016">How to create bindings 2016 - RubyKaigi 2016</a></li>
<li><a href="https://slide.rabbit-shocker.org/authors/kou/rubykaigi-2016/">https://slide.rabbit-shocker.org/authors/kou/rubykaigi-2016/</a></li>
<li>Rabbit 2.2.0</li>
<li>Ruby をもっといろんな場面で使えるようにするため、バインディング開発者になりませんか</li>
<li>会場アンケート</li>
<li>バインディング作ったことがある 20人ぐらい</li>
<li>今もメンテナンスしている 10人ぐらい</li>
<li>バインディングを知らない 60人ぐらい</li>
<li>作ろうと思ったことがない 多い</li>
<li>最初に自動生成のデモ</li>
<li>gi: GObject-Introspection</li>
<li><code>WebKit::WebView</code> で <a href="http://rubykaigi.org/2016">http://rubykaigi.org/2016</a> を表示してスクリーンショット (<code>get_snapshot</code>) をとって別 window に表示していた。</li>
<li>拡張ライブラリの話</li>
<li>libffi の話</li>
<li>自動生成がオススメ</li>
<li>SWIG と GI の比較</li>
<li>SWIG はビルド時に自動生成</li>
<li>GI は実行時に自動生成</li>
<li>SWIG の .i は各言語でメンテナンスが必要</li>
<li>GI は共通のアノテーションをメンテナンス</li>
<li>OSS Gate などの紹介</li>
<li>質疑応答</li>
<li>質問1: オブジェクトを渡す話</li>
<li>スクリーンショットの例だと rcairo とかが良い感じに変換してくれる</li>
<li>GI のアノテーションで指定している(?)</li>
<li>質問2: Mac で動くか</li>
<li>Mac でも動く</li>
<li>質問3 (大林さん): GUI は登場人物が増えてトラブルシューティングが大変ではないか?</li>
<li>私ぐらいになれば大丈夫</li>
<li>質問4 (大林さん): SWIG は昔使ったことがあるが .i は共通ではないのか?</li>
<li>単純なケースだと共通でいけるが、結局現実的なものを作るときは各言語になる</li>
<li>質問5 (後藤さん?): 標準添付の fiddle と dl2 を使っていないのはなぜか?</li>
<li>使いにくいから</li>
<li>機能が足りない</li>
<li>質問6: GI は動的にバインディングが作られるということは大きいライブラリは読み込みに時間が掛かる?</li>
<li>実演</li>
<li>(運営から割り込み: B が遅延しているので 10 分余裕ができた)</li>
<li>パフォーマンスについて</li>
<li>質問7 (自分): <code>hello_message</code> が返す文字列のメモリ管理は?</li>
<li><code>const char*</code> を返している、つまりメモリ管理は <code>Hello</code> 側の債務</li>
<li>質問8 (ささださん): (メモを書いていたので聞いてなかった)</li>
<li>ドキュメントを書けば動くようになっている</li>
</ul>


<h2>How DSL works on Ruby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/hsbt.html" title="How DSL works on Ruby - RubyKaigi 2016">How DSL works on Ruby - RubyKaigi 2016</a></li>
<li><a href="http://www.slideshare.net/hsbt/how-dsl-works-on-ruby">http://www.slideshare.net/hsbt/how-dsl-works-on-ruby</a></li>
<li>大人気で椅子に座れなかったので通路に座って聞いていました。</li>
<li>自己紹介</li>
<li>Rake : Make in Ruby</li>
<li><code>-j</code> オプションはあるが大多数のタスクは実行時間が変わらないだろう</li>
<li><code>FileList</code> でファイルグロブや <code>exclude</code> を扱える</li>
<li><code>Rake::TestTask</code> でテスト実行用のタスクが簡単に作れる</li>
<li><code>rdoc</code> 用のタスクが昔は <code>rake</code> の方に入っていたが今は <code>rdoc</code> の方に入っている</li>
<li><code>Minitest</code>, <code>Test::Unit</code> 用の <code>Rake::TestTask</code> だけ歴史的経緯で <code>rake</code> に残っている</li>
<li><code>Rake</code> は 0.9 から 10.0 に一気に上がった</li>
<li>SemVer</li>
<li>rake は現在は <a href="https://github.com/ruby/rake">https://github.com/ruby/rake</a> が upstream</li>
<li>rails が依存している gem がよく使われている gem だがその中でも少し使われている数が多い</li>
<li>DSL の話</li>
<li>いろいろな DSL の Pattern 紹介</li>
<li>DSL の前提知識終わり、今までの知識で DSL が作れるはず</li>
<li>具体的な DSL の実装を見ていく</li>
<li><code>Rake.application.run</code></li>
<li><code>rakefile</code>, <code>Rakefile</code>, <code>Rakefile.rb</code>, <code>rakefile.rb</code> に対応している</li>
<li>bundler が 2 で <code>Gemfile</code> の代わりに <code>gemfile</code> がデフォルトになるという話があるらしい?</li>
<li><code>rake -P</code></li>
<li><code>lib/rake/dsl_definition.rb</code> の <code>Rake::DSL</code> は短いのでみてみると良い</li>
<li><code>Rake::Task</code> と <code>Rake::TaskManager</code></li>
<li><code>Capistrano::Application</code> は <code>Rake::Application</code> を継承しているので capistrano 3 以降は rake の拡張</li>
<li><code>Thor</code> を継承したクラスで DSL が使える</li>
<li><code>Bundler::CLI</code> が <code>Thor</code> を継承したクラス</li>
<li>CM: minne</li>
<li>Apple Pay 対応予定</li>
<li>関わってないけどラップ?</li>
<li>Long live the Rake</li>
<li>JRuby の互換性問題</li>
<li><code>Dir.chdir</code> すると <code>sh</code> の挙動が変わるとか</li>
<li>Rake 11</li>
<li>deprecated メッセージを出さずに <code>TaskManager#last_comment</code> を消したら問題が起きたので戻した話</li>
<li><code>hoe</code> gem から bundler のタスクを使うように書き換えた</li>
<li><code>verbose</code>, <code>deps</code> は時間がないので省略</li>
<li>Rake 12</li>
<li>コア数をとる処理に <code>sysctl</code> を使っているのをやめて <code>Etc.nprocessors</code> (Ruby 2.2 以降依存) を使うようにしたい</li>
<li>コード減らしたい</li>
<li><code>class Object</code> 汚染を減らしたい</li>
<li>質疑応答</li>
<li>質問: DSL を触っているとどのクラスなのかどのインスタンスなのか悩むとか, 何か tips はないかいう話</li>
<li>僕も知りたい</li>
<li>Ruby DSL book (と言っていたように聞こえたが <a href="http://clean-ruby.com/dsl" title="Ruby DSL Handbook">Ruby DSL Handbook</a> かも) をオススメ</li>
<li>既存の DSL を実装した gem を読む</li>
</ul>


<h2>Lunch Break</h2>

<ul>
<li>今日は <a href="http://agile.esm.co.jp">http://agile.esm.co.jp</a> がスポンサーの弁当でした。</li>
<li><a href="http://amzn.to/2bUWNxg">プログラミングElixir</a>は一応持ってきていましたが、サイン会は列が長かったので諦めました。</li>
</ul>


<h2>Learn Programming Essence from Ruby patches</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/takkanm.html" title="Learn Programming Essence from Ruby patches - RubyKaigi 2016">Learn Programming Essence from Ruby patches - RubyKaigi 2016</a></li>
<li><a href="http://bit.ly/esm-ruby-kaigi-bento">http://bit.ly/esm-ruby-kaigi-bento</a></li>
<li>プログラミングの知識とは何か?</li>
<li>大学で学んだような知識と日々の仕事で必要な知識は異なる</li>
<li>どうやって学ぶか</li>
<li>本を読むなど</li>
<li>Ruby のパッチを読んでみる</li>
<li>なぜパッチなのか?</li>
<li>短い、redmine の issue などに説明がある、description などをみて自分が理解できるパッチを選べる</li>
<li>本で書かれているような知識と結びつく</li>
<li>Asakusa.rb Meetup での経験から</li>
<li>パフォーマンス改善などのパッチは難しい</li>
<li>オススメの情報源</li>
<li><a href="http://amzn.to/2cbxeaz">Ruby Under a Microscope</a>, <a href="http://amzn.to/2cbwAK6">Rubyのしくみ</a></li>
<li>Ruby 本体の doc/extension.rdoc</li>
<li>(冒頭のファイル名が間違っているという指摘があったので、<a href="https://github.com/ruby/ruby/commit/b5f3a113f55a81ce19c36b50d1ef234ac518d510">すぐに修正された</a>。)</li>
<li>yotii23&rsquo;s slide : <a href="https://speakerdeck.com/yotii23/walking-around-the-ruby-forest-more-deeply">Walking around the ruby forest more deeply</a></li>
<li><a href="https://bugs.ruby-lang.org/issues/12142">Hash tables with open addressing</a> を読む</li>
<li><code>st_table</code> の説明</li>
<li>新しい実装の説明</li>
<li>質疑応答</li>
<li>質問1: 他のことをしていたので聞き取れず</li>
<li>質問2 (joker1007 さん): 勉強になりそうなパッチを探す方法は?</li>
<li>直感で</li>
<li>面白そうだと思える変更かなど</li>
<li>質問3: 他に見ているプロジェクトは?</li>
<li>rails, github で watch しているものなど</li>
</ul>


<h2>Ruby Reference Manual 2016 Autumn</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/okkez.html" title="Ruby Reference Manual 2016 Autumn - RubyKaigi 2016">Ruby Reference Manual 2016 Autumn - RubyKaigi 2016</a></li>
<li>自己紹介</li>
<li>るりま != るびま</li>
<li>るりま = Ruby Reference Manual</li>
<li>るびま = Rubyist Magazine</li>
<li>どちらも「日本 Ruby の会」のサポートを受けている</li>
<li>2006-08-27: プロジェクト開始 (青木さん)</li>
<li>2009-01-31: Ruby 1.9.1 リリース</li>
<li>2010-08-18: Ruby 1.9.2 リリース</li>
<li>2011-09-01: 最低限のマニュアルが揃ったのでメンテナンスフェーズ開始</li>
<li>2011-10-31: Ruby 1.9.3 リリース</li>
<li>2013-02-24: Ruby 2.0.0 リリース</li>
<li>2013-05-30: 前回の発表</li>
<li>2013-06-02: 青木さんのドメインの svn サーバーから GitHub に移動</li>
<li>2013-12-25: Ruby 2.1.0 リリース</li>
<li>2014-12-25: Ruby 2.2.0 リリース</li>
<li>2015-12-25: Ruby 2.3.0 リリース</li>
<li>最新の状態にほぼ追従</li>
<li>できてない部分はできていないままだが、更新できている部分は更新についていけているはず</li>
<li>RubyKaigi 2013 から</li>
<li>docs.ruby-lang.org でホスティング</li>
<li>IIJ 提供、管理者は @hsbt さん</li>
<li>Ruby の更新への追従は手作業</li>
<li>NEWS に載らないような変更には弱い</li>
<li>例えば rbconfig/sizeof の追加</li>
<li>RDoc との関係</li>
<li>RDoc とは、Ruby 本体のコメントに埋め込まれているドキュメント</li>
<li>相互に同期したいができていない</li>
<li>RDoc へのリンクはできている</li>
<li>最近の変更</li>
<li>Web 検索で古いドキュメントがでてくる対策として <code>link rel="canonical"</code> をつけるようになった</li>
<li>NEWS ファイルを翻訳したものが入った</li>
<li><code>open_search_description.xml</code> がおかしくなっていたのでを修正した</li>
<li>Contributors</li>
<li>rurema/bitclust GitHub のアイコンがひっぱれたのは 18 名、コミットは 20 名</li>
<li>rurema/doctree はもっと多い (具体的な数はメモし損ねた)</li>
<li>のべ 100 名以上が協力してくれている</li>
<li>Ruby 2.4.0</li>
<li>Unify Fixnum and Bignum to Integer</li>
<li>bundled gem が増えた</li>
<li>rake, rubygems などのすでにドキュメントが書かれていて日本語のまとまった情報が少ないものは残したい</li>
<li>tk が外れるとドキュメントなしが大幅に減る</li>
<li>開発ツール (bitclust) の話</li>
<li>CHM 生成が壊れている</li>
<li>Windows 自体が CHM を捨てる流れなので捨てたい</li>
<li>修正の pull request がきているのでその人に任せたい</li>
<li>単一ファイルはあった方が良いので EPUB や PDF の生成を考えている</li>
<li>自動化について</li>
<li>更新の自動通知</li>
<li>パッケージのリリースの自動化</li>
<li>CI の仕組みの改善</li>
<li>ドキュメントの生成が成功することぐらいしか確認していないので、 heroku にアップロードして見た目の確認ができるとかできるといいかも</li>
<li>RDoc との関連</li>
<li>相互同期したい</li>
<li>i18n モジュールというのが追加されたようなので何か使えるかも</li>
<li>Contribute!</li>
<li>使ってください! <a href="https://docs.ruby-lang.org/ja/">https://docs.ruby-lang.org/ja/</a></li>
<li>使っていて気づいたことがあったら issue を立ててください</li>
<li>twitter やブログで愚痴られても気づけない</li>
<li>気づいたもので直せそうであれば pull request にしてもらえると merge を押すだけで良いので助かります</li>
<li>typo の修正などからお気軽にどうぞ</li>
<li>修正のベースがあるだけでも嬉しいです</li>
<li>記法がわからなければ issue で報告してくれるだけでも良いです</li>
<li>BitClust の開発について</li>
<li>EPUB, PDF 生成については EPUB を直接生成しようとしていたのを捨てて、<a href="https://github.com/kmuto/review">Re:VIEW</a> を経由すると良いのではないかという話を昨晩の懇親会で得たのでそうする予定</li>
<li>SEO (Search Engine Optimization)</li>
<li>一緒に Ruby のドキュメントを良くしていきましょう</li>
<li>質疑応答</li>
<li>質問1 (Rails Guide のやすかわさん): Dash の docset もあると喜ばれる</li>
<li>サードパーティで作ってくれている人はいる</li>
<li>Rails Guide では EPUB, PDF, docset をバンドルしたものを<a href="http://tatsu-zine.com/books/railsguides">達人出版会</a> などで売っている (Web は無料でも売れている) (後で確認してみましたが、売っているものに docset が入っているかどうかは確認できず)</li>
<li>質問2: 以前質問された時に日本語しかドキュメントしかないものがあった。</li>
<li>まず英語にそろえたいが、具体的には何も動いていない。</li>
<li>質問3: pull request などで修正してもらって反映されるのはどのくらいたってから?</li>
<li><a href="https://docs.ruby-lang.org/ja/">https://docs.ruby-lang.org/ja/</a> に反映されるのは一日一回</li>
<li>告知: OSS 開発支援サービス, エンジニア募集中</li>
<li>2016-09-11(日) 13:00-17:00 <a href="https://rubykansai.doorkeeper.jp/events/49364">第74回 Ruby関西 勉強会</a></li>
</ul>


<h2>Afternoon Break</h2>

<ul>
<li>終わった後、しばらく okkez さんのところに話にくる人の話を一緒に聞いていた。</li>
<li><a href="https://twitter.com/labocho">Dash 版の作者</a>も現れて、 Re:VIEW が docset も生成できるという勘違いを受けていたという話があった。</li>
<li>(念のため後で <a href="https://github.com/kmuto/review">Re:VIEW</a> を確認してみたけど docset はなかった)</li>
</ul>


<h2>Pwrake: Distributed Workflow Engine based on Rake</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/masa16tanaka.html" title="Pwrake: Distributed Workflow Engine based on Rake - RubyKaigi 2016">Pwrake: Distributed Workflow Engine based on Rake - RubyKaigi 2016</a></li>
<li>立ち話が長引いて自己紹介の部分は聞けなかった</li>
<li><a href="https://github.com/ruby-numo/narray">https://github.com/ruby-numo/narray</a></li>
<li><a href="https://github.com/masa16/pwrake">https://github.com/masa16/pwrake</a></li>
<li>Background: 科学ワークフロー</li>
<li>ワークフロー定義言語</li>
<li>DAX (Pegasus ワークフローシステム)</li>
<li>Swift (Apple の言語とは別物)</li>
<li>GXP Make</li>
<li>他のことをしていたので聞いていなかった</li>
<li>Rake はワークフロー記述言語として強力</li>
<li>結局るりま関連の作業をしていてほとんど聞いていなかった。</li>
</ul>


<h2>るりま関連作業</h2>

<ul>
<li><a href="https://twitter.com/sho_hashimoto/status/774119302756651008">世の中のNEWS翻訳家のみなさまが今英語で残ってるとこやってくれないかなー。</a> というツイートをみて NEWS 関連をみたりしていた。</li>
</ul>


<h2>Modern Black Mages Fighting in the Real World</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/tagomoris.html" title="Modern Black Mages Fighting in the Real World - RubyKaigi 2016">Modern Black Mages Fighting in the Real World - RubyKaigi 2016</a></li>
<li>混んでいてまた通路に座っていた。</li>
<li><a href="https://rubygems.org/gems/msgpack-inspect">https://rubygems.org/gems/msgpack-inspect</a> という gem をリリースしたばっかり</li>
<li>Fluentd とは?</li>
<li>Fluentd v0.14</li>
<li>ロゴが変わった</li>
<li>線で構成されていて白飛びして目立たないことがあるので変わった</li>
<li>クラス階層を整理した</li>
<li><code>extend</code> は <code>singleton_class.include</code> と同じ</li>
<li>Fluentd v0.12 の <code>emit</code> とか <code>format_stream</code> とかの呼び出し関係の説明</li>
<li>Fluentd v0.12 の出力の <code>pop</code> とか <code>write</code> とかの説明</li>
<li>サードパーティのプラグインのメソッドを直接コアが呼び出していたので、ちょっと処理を挟みたいということがやりにくい</li>
<li>呼び出し方が複雑でコールスタックが複雑</li>
<li>Fluentd v0.14 <code>Fluent::Plugin::Output</code> で整理した</li>
<li>呼び出しが行ったり来たりしなくなった</li>
<li>プラグインが実装するメソッドを分離した</li>
<li>メソッドが余計なことをしないようになった</li>
<li>コールスタックがシンプルで一本線になった</li>
<li>既存の v0.12 のプラグインは?</li>
<li>可能な限り何の変更もなく動く必要がある</li>
<li>互換レイヤーが二階建てになっている理由</li>
<li>トップレベルでの名前衝突をできるだけ避けたい</li>
<li>Compat Layer: プラグインが定義しているメソッドに応じて処理を変える</li>
<li><code>format</code> を呼ぶだけが一番簡単な例</li>
<li><code>format_stream</code> が定義されているとそっちを呼ばないといけない</li>
<li><code>super</code> 対応も必要</li>
<li>初期のサンプルコードが良くない実装だった。サンプルコードには気をつけましょう</li>
<li><code>emit</code> が定義されているとさらにそれを呼ばないといけない</li>
<li>さらにこっちも <code>super</code> 対応も必要</li>
<li><code>emit</code> は値を返さないで <code>@buffer.emit</code> を呼ぶので、その対応が必要</li>
<li><code>chunk.extend</code> をするためにプラグインを <code>extend</code> する</li>
<li>似たような互換レイヤーがそれぞれの Output プラグインの親にある</li>
<li>プラグインのライフサイクル</li>
<li>v0.12 プラグインでは <code>super</code> は呼ばなくても良かったので、呼んでいないプラグインもある</li>
<li><code>super</code> を呼ばせる黒魔術として <code>Module#prepend</code></li>
<li><code>CallSuperMixin</code></li>
<li>まず <code>super</code> を呼ぶ、<code>super</code> が呼ばれていなかったら親を辿って最初に定義されているクラスのメソッドに <code>self</code> を <code>bind</code> しなおして呼び出す</li>
<li>その先は <code>super</code> がちゃんと呼ばれるのでめでたし</li>
<li>テストの問題</li>
<li>テストの中で <code>singleton_class</code> にメソッド定義していると <code>prepend</code> が負けて上書きできない</li>
<li>何よりも強い何かが必要</li>
<li><code>singleton_class</code> に <code>prepend</code> して解決</li>
<li>fluentd のプラグインが古いとこういう黒魔術が使われるので、バージョンアップ推奨</li>
<li>ユーザーに不利益を被らせないために我々は何でもやるべきだ</li>
<li>質疑応答</li>
<li>質問1: あの複雑な呼び出し関係はどうやってできたのか?</li>
<li>図はかいた</li>
<li>ブギーボードにかいた</li>
<li>質問2: 後方互換性の話</li>
<li>以前に互換性を壊してあげようという構想があったが、その後、プラグインが増えて全書き換えは無理ということになった</li>
<li>言語のコミュニティを超えてユーザーが増えた</li>
<li>特に運用監視の人たちには互換性が重要だった</li>
<li>質問3 (Yugui さん?): 逆方向の互換性は?</li>
<li>機能が増えたので不可能です</li>
<li>v0.12 向けのリリースをしてから v0.14 向けリリースをしてください</li>
<li>質問4: パフォーマンスの問題</li>
<li>読み込み時や 1 分に 1 回呼ばれるような部分でしかメタプログラミングはしていないので、継承の階層が増えるだけでパフォーマンスには影響はないはず</li>
<li>質問5: メモを取っていたので聞き取れず</li>
</ul>


<p><code>super</code> が呼ばれていなかったら、の話でやっていた黒魔術の <code>bind</code> しなおして呼び出すというのは、たぶん以下のような感じです。</p>

<pre><code>class C1
  def foo
    p :C1
  end
end

class C2 &lt; C1
  def foo
    # super が呼ばれていない
  end
end

C1.instance_method(:foo).bind(C2.new).call
</code></pre>

<p>Rails 関連で <code>class</code> が上書きされているオブジェクトで本当のクラスを知りたかった時に <code>rails console</code> で <code>Kernel.instance_method(:class).bind(obj).call</code> のようなことをしたことがあったぐらいだったので、実運用のコードでこういうことが行われることがあるというのに驚きました。</p>

<h2>SciRuby Machine Learning Current Status and Future</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/mrkn.html" title="SciRuby Machine Learning Current Status and Future - RubyKaigi 2016">SciRuby Machine Learning Current Status and Future - RubyKaigi 2016</a></li>
<li><a href="https://speakerdeck.com/mrkn/sciruby-machine-learning-current-status-and-future">https://speakerdeck.com/mrkn/sciruby-machine-learning-current-status-and-future</a></li>
<li>enumerable-statistics gem</li>
<li>機械学習とその前後のワークフロー</li>
<li>Ruby はほぼ何もできない</li>
<li>Python はできるので、みんな Python を使う</li>
<li>その状況を変えたい</li>
<li>一番重要なこと: SciRuby の開発を手伝ってください、<a href="http://sciruby-slack.herokuapp.com/">http://sciruby-slack.herokuapp.com/</a></li>
<li>なぜ機械学習を使うのか?</li>
<li>機械学習でできること</li>
<li>機械学習で扱う問題</li>
<li>教師あり学習: 分類、回帰</li>
<li>教師なし学習: グループ分け、分布推定、次元削減</li>
<li>Reinforcement learning</li>
<li>3 種類全部 Ruby でできるようになると嬉しいが、今回の話は教師あり学習について</li>
<li>liblinear-ruby gem (C++ で書かれたライブラリのラッパー)</li>
<li>rb-libsvm gem (libsvm のラッパー)</li>
<li>decisiontree gem (decision tree = 決定木)</li>
<li>名前の紹介だけ: ai4r gem, classifier-reborn gem, data_mining gem, etc.</li>
<li>既存の gem はデータの渡し方も API も異なる</li>
<li>実世界のデータ</li>
<li>Scikit-learn</li>
<li>共通の形式で訓練データを用意できる</li>
<li>interface も互換性がある</li>
<li>Scikit-learn は機械学習の理想的なフレームワークだと思う</li>
<li>機械学習の SciRuby の未来</li>
<li>scikit-learn そのものを使う : julia 言語では PyCall.jl, ScikitLearn.jl</li>
<li>同様に pycall gem, scikit-learn gem を作れば良い</li>
<li>scikit-learn のようなものを実装する : とても大変</li>
<li>数値配列 : <code>NMatrix</code>, <code>Numo::NArray</code>, <code>NumBuffer</code></li>
<li><code>NMatrix</code>: 遅い、インストールが難しい</li>
<li><code>Numo::NArray</code>: 疎行列に対応していない、新しすぎるので対応しているライブラリが少ない</li>
<li><code>NumBuffer</code>: 発表者が開発者、手伝い募集</li>
<li><code>NMatrix</code> と <code>Numo::NArray</code> の互換性問題</li>
<li>SciRuby JP</li>
<li>成果物: Tutorials, Installation, Survey, Visualization, Other Languages</li>
<li>SciRuby は英語推奨だが日本語OK</li>
<li>機械学習に限らず contribution 募集</li>
<li><a href="http://sciruby-slack.herokuapp.com/">http://sciruby-slack.herokuapp.com/</a></li>
<li>質疑応答</li>
<li>質問1: 良い点を宣伝した方が良いのではないか</li>
<li>scikit-learn がベストだと思っている</li>
<li>質問2: テストの話</li>
<li>scikit-learn でどうやっているかは知らない</li>
<li>質問3: pycall or SciRuby, 着地点は?</li>
<li>まずは pycall で 2,3 年でみんな Python から julia に乗り換えているだろうと予想しているので、そうなったら Ruby から julia を呼び出すようにするのが良いのではないか</li>
<li>質問4 (マーティンさん): Ruby の強み (メタプログラミングとか) を活かせないか?</li>
<li>考えたことがなかった</li>
<li>質問5: 今 Ruby が向いていない、ライブラリが足りないからというのがあったが、言語自体は?</li>
<li>Ruby 言語自体が向いていないということはない</li>
<li>julia は数値ベクトルなどを言語がサポートしているので、数値計算をやりやすい、LLVM に丸投げでパフォーマンスも良い</li>
</ul>


<p>よく知らない分野なので、聞いていても良くわからない話もあり、あまりメモも取れなかった。</p>

<h2>Drinkup at RubyKaigi 2016 by Misoca Inc.</h2>

<p>Drinkup は Agileware の方も申し込みは間に合っていたのですが、後からの Misoca の方が会場が近くて良さそうだと思って、Misoca の方に申し込んで、キャンセル待ちの出ていた Agileware の方はキャンセルして、Misoca の方に参加しました。</p>

<p>Misoca の Drinkup では <a href="https://twitter.com/toyoshi/status/774227373944254465">https://twitter.com/toyoshi/status/774227373944254465</a> の写真のように doorkeeper のアカウントから取得したアイコンのステッカーを用意してくれていました。
便利そうなのでシールとしては貼らずに今後もイベントに参加した時の名札に入れるのが良さそうかも、と思いました。</p>

<p>今回はいろんな人といろんな話ができました。</p>

<p><a href="https://github.com/ruby/ruby/commit/dbff56f562c9f5459deeb06263a3cc5826159062">Unbundle tk</a> が気になっていたので hsbt さんにきいたところ、もともとリリースマネージャーの naruse さんとしては Ruby/Tk は外すだけで bundled gem にする予定はなかったのに、nobu さんが <code>gems/bundled_gems</code> に追加してしまっていたのを、改めて削除したという流れだったそうです。</p>

<p><a href="https://bugs.ruby-lang.org/issues/12681">Gem化issue</a> のタイトルの方が印象が強かったので勘違いしていたのですが、もともとは <a href="https://bugs.ruby-lang.org/issues/8539">Unbundle ext/tk</a> というタイトルの issue だったので、そういう意図だったようです。</p>

<p>記録として残しておきたいと思った話としては、以上のようなことがありました。</p>

<p>他には</p>

<ul>
<li>SlideShare は LinkedIn になって SlideShare だけのアカウントの作成ができなくなっているらしい</li>
<li>SpeakerDeck は過去に問い合わせた時に API 対応の予定はないという話だったらしい</li>
<li>通訳の関係で事前に資料を渡す必要があったので slide.rabbit-shocker.org にあげて PDF をダウンロードしてもらったらしい</li>
</ul>


<p>とかいう話もしていました。</p>

<p>最後は謎のジャンプ一本締めでした。</p>

<h2>Togetter まとめ</h2>

<p><a href="http://togetter.com/li/1022255" title="資料も反響もすべてチェック！ 京都で3倍広くなった #RubyKaigi 2016 まとめまとめ - Togetterまとめ">資料も反響もすべてチェック！ 京都で3倍広くなった #RubyKaigi 2016 まとめまとめ - Togetterまとめ</a> というのができていたので個別のまとめへのリンクは省略しました。</p>

<h2>まとめ</h2>

<p>今日は AC アダプターを忘れていて貸してもらったり (ありがとうございました)、日本語のセッションにいたのに他の作業をしていてあまり聞けていなかったりしたこともありましたが、
bindings や黒魔術の話のようにある程度は知っているけど実際にはほぼ使ったことない話や、
ある程度関わっている るりま (Ruby Reference Manual) の話がしっかり聞けたのが良かったです。</p>

<p>また、作業中は話をちゃんと聞けなかったという問題はあったものの、いくつか pull request を出したり issue を書いたりできたのも良かったです。</p>
]]></content>
  </entry>
  
</feed>
