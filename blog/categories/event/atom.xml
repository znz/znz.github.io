<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: event | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/event/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-05-03T10:55:23+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第14回関西LibreOffice勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-29-libokansai.html"/>
    <updated>2017-04-29T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/libokansai</id>
    <content type="html"><![CDATA[<p><a href="https://connpass.com/event/53960/" title="第14回関西LibreOffice勉強会">第14回関西LibreOffice勉強会</a>に参加しました。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場など</h2>

<ul>
<li>地図ソフトで三国駅から歩くルートも表示されたので、早めに出発して時間もあったので、歩いてみました。(帰りは懇親会には参加しなかったので、十三駅まで歩いてちょっと梅田に出てから帰りました。)</li>
<li>セキュリティがかかって閉まっていてオフィスフロアに入れなくて、しばらく待っていました。</li>
<li>普通の土曜日なら開いているのに、祝日だから閉まっていたようです。</li>
<li>電源やネットワークはなし</li>
<li>飲食は可能</li>
</ul>


<h2>自己紹介</h2>

<p>自分はたぶん初参加でした。</p>

<p>久しぶりに参加という人も何人かいて、長く続いている勉強会という感じを受けました。</p>

<h2>書式の自由が社会を変える―LibreOfficeとPandocができること</h2>

<ul>
<li>発表資料: <a href="https://github.com/sky-y/libreoffice-kansai-14-pandoc">https://github.com/sky-y/libreoffice-kansai-14-pandoc</a></li>
<li><p>Pandoc の日本語ドキュメントは古くなってしまっているので、英語が読めるなら本家の英語を推奨</p></li>
<li><p>この発表の概要</p></li>
<li>Pandoc の概要</li>
<li>Pandoc をインストールする</li>
<li>Pandoc でドキュメントを変換する (LibreOffice Writer 文書を中心に)</li>
<li><p>「書式の自由」について</p></li>
<li><p>対応フォーマットが多い</p></li>
<li>ODT などは入力にも対応</li>
<li><p>Markdown とは</p></li>
<li><p>Pandoc でできないこと</p></li>
<li>スプレッドシートは扱えない</li>
<li>簡単な表は対応している</li>
<li>LibreOffice Impress には対応してない</li>
<li><p>LaTeX Beamer/HTML プレゼンには変換可能</p></li>
<li><p>Pandoc を使う心得</p></li>
<li>過剰な期待をし過ぎないこと</li>
<li>Pandoc は万能でないし、文書仕様の全てを満たしているわけではない</li>
<li><p>補助的に使うのがベスト</p></li>
<li><p>Pandoc の実装は Haskell</p></li>
<li><p>補足: Markdownと標準仕様</p></li>
<li>RFC で Media Typeにて「Markdownであること」と「方言の名前」を明示する方法を定めた</li>
<li><p>(RFC でうまくいかなかったというと Cookie を思い出した)</p></li>
<li><p>質疑応答</p></li>
<li><p>文字コードは UTF-8 で</p></li>
<li><p>Pandoc をインストールする</p></li>
<li>wkhtmltopdf の wk は WebKit らしい</li>
<li>動作確認</li>
<li><code>echo "http://localhost" | pandoc -f markdown_github -t html</code> のように <code>markdown_github</code> だと自動リンクがある</li>
<li><p><code>echo "**Hello**" | pandoc -f markdown -t html5 -o hello.pdf</code></p></li>
<li><p>おまけ: Pandocで作れるスライド</p></li>
<li>今回は「reveal.js」形式に変換</li>
<li><p>LaTeX Beamer など他のプレゼン形式にも変換できる</p></li>
<li><p>Pandoc でドキュメントを変換する</p></li>
<li><a href="https://github.com/sky-y/libreoffice-kansai-14-pandoc">https://github.com/sky-y/libreoffice-kansai-14-pandoc</a> の sample で変換を試す</li>
<li><p>Windows の start コマンド、GNOME の gnome-open や macOS の open に相当</p></li>
<li><p>テンプレート</p></li>
<li><code>pandoc --print-default-data-file reference.odt &gt; reference.odt</code></li>
<li>左の <code>reference.odt</code> は pandoc 内部のテンプレートディレクトリの中のファイル名を指定している</li>
<li>右は出力ファイル名なので紛らわしいが別物</li>
<li><p>スタイルで 源ノ角ゴシック (げんの かくごしっく) に変えるとか</p></li>
<li><p>画像に関するノウハウ</p></li>
<li><p>96dpi よりも 300dpi の方が良いという指摘あり <a href="https://twitter.com/nogajun/status/858193042309861377">https://twitter.com/nogajun/status/858193042309861377</a></p></li>
<li><p>「書式の自由」について</p></li>
<li><p>質疑応答</p></li>
</ul>


<h2>休憩</h2>

<p>10分間休憩</p>

<h2>Office文書を手打ちハックする ～FlatODF活用のすすめ～</h2>

<ul>
<li>JO3EMC さん</li>
<li>文書の自動生成をやりたい</li>
<li>文書を細部まで思い通りにコントロールしたい</li>
<li>アプローチ例1: LibreOffice 以外のツール・言語を利用する</li>
<li>アプローチ例2: LibreOffice 関連のツールを利用する</li>
<li>FlatODF</li>
<li>単一の圧縮されていない XML ファイル</li>
<li>弱点</li>
<li>ファイルサイズが大きくなる</li>
<li>圧縮されていないので</li>
<li>あとで ODF に変換すれば良い</li>
<li>画像やオブジェクトの埋め込みは少し面倒</li>
<li>Base64</li>
<li>fodt で保存してテキストエディタで書き換えて開き直すデモ</li>
<li>UTF-8 以外には対応していないらしい</li>
<li>LibreOffice を使って他フォーマットへ変換・印刷</li>
<li><code>soffice --headless --convert-to pdf *.fodt</code></li>
<li><code>soffice -p *.fodt</code></li>
<li>活用例</li>
<li>FlatODF の構造の概略</li>
<li>質疑応答</li>
<li>zip された中の content.xml をいじる方法も FlatODF をいじる方法もそれぞれ長所や短所があるのでいろんな方法があるのは良いんじゃないかという話</li>
</ul>


<h2>休憩</h2>

<ul>
<li>時間がおしているので5分間休憩</li>
<li>休憩前に懇親会参加者確認</li>
</ul>


<h2>LibreOffice Online環境の構築</h2>

<ul>
<li>LibreOffice Online (LOOL)</li>
<li>LOOL (ろーる)</li>
<li>CentOS 7.3.1611 で環境構築</li>
<li>LibreOffice の make に時間がかかる (一晩?)</li>
<li>依存をいろいろ入れる</li>
<li>日本語フォントも別途入れる必要あり</li>
<li>LibreOffice Online のコンパイル (5〜10分ぐらい?)</li>
<li>LOOL はファイルのインプットの GUI がない</li>
<li>Nextcloud と連携</li>
<li>サーバー側でレンダリングして画面を転送しているので、サーバー側にフォントが必要</li>
<li><a href="https://librepc.jp/">https://librepc.jp/</a></li>
</ul>


<h2>LT</h2>

<ul>
<li>矢吹さんの話</li>
<li>会場アンケート</li>
<li>スプレッドシートを使ったことがある人</li>
<li>SQL を使ったことがある人</li>
<li>領収書を集計するのが面倒だった話</li>
<li>バベルの塔</li>
<li>ピボットテーブル = GROUP BY を知るのに時間がかかった話</li>
<li>相手の文化を知る必要がある</li>
<li>用語集の必要性</li>
<li>抽象度の上げ下げ</li>
</ul>


<h2>ディスカッション</h2>

<ul>
<li>来年 LibreOffice 6 になる</li>
<li>デザインを一新するのでデザイナーを募集している</li>
<li><a href="https://design.blog.documentfoundation.org/2017/04/21/new-branding-libreoffice-6-0/">New branding for LibreOffice 6.0 - LibreOffice Design Team</a></li>
<li><p><a href="http://opensourcedesign.net/jobs/jobs/2017-04-20-branding-for-libreoffice-60">BRANDING FOR LIBREOFFICE 6.0</a></p></li>
<li><p><a href="https://design.blog.documentfoundation.org/2017/04/27/table-styles-survey/">Please participate in a survey about table styles - LibreOffice Design Team</a></p></li>
<li>表スタイルというのが追加された</li>
<li><p>デザインのアンケートを実施中</p></li>
<li><p><a href="http://www.clear-code.com/blog/2017/4/24.html" title="LibreOffice Calcのスプレッドシートの変更点をgit diffで見られるようにする - ククログ(2017-04-24)">LibreOffice Calcのスプレッドシートの変更点をgit diffで見られるようにする - ククログ(2017-04-24)</a></p></li>
<li><p>本?</p></li>
<li><p>HackFest</p></li>
<li><p>バグハンティング・セッション</p></li>
<li><p>源ノ明朝</p></li>
<li>IPA フォントはデザインなどが古い</li>
<li>源ノ角ゴシック 源ノ明朝 と Noto はパッケージの違い</li>
<li>CJK にも対応しているのが良い</li>
<li>デザインも今風</li>
<li><p>LibreOffice 5.2 だと縦書きが変? 5.3 だと太字しか出ない?</p></li>
<li><p>テストの話</p></li>
<li>普通のテスターが簡単に使える Selenium のような自動化がないのがつらい</li>
<li><p>xautomation ?</p></li>
<li><p>デザインチームなどの話</p></li>
<li><p>ドキュメントの翻訳の話</p></li>
<li>OmegaT は odt に直接対応している</li>
</ul>


<h2>ふりかえり</h2>

<ul>
<li>抽象度の話がよかった</li>
<li>LibreOffice を直接触る話はなかった</li>
<li>前処理は好き勝手にできるというのは良い</li>
<li>表現とデータをわけると嬉しいと思ってくれる人が増えると嬉しい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 122 回関西 Debian 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-23-kansai-debian-meeting.html"/>
    <updated>2017-04-23T13:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://debianjp.connpass.com/event/54424/" title="第 122 回関西 Debian 勉強会">第 122 回関西 Debian 勉強会</a>に参加しました。</p>

<!--more-->


<p>以下メモです。</p>

<h2>会場など</h2>

<p>早めに出発したら時間があったので、駅前ビルの金券屋で切符を買って、少し安く移動できました。</p>

<p>しばらく前に阪急三番街の KIDDY LAND で stretch のぬいぐるみが 2,3 個あったのを見かけて、次にみたときには最後の 1 個になったいたので、買っておいたのを持って行きました。</p>

<h2>オープニング</h2>

<ul>
<li>前回の話から会場候補地の話とか</li>
<li><a href="https://wiki.debian.org/KansaiDebianMeeting/DraftMemo">https://wiki.debian.org/KansaiDebianMeeting/DraftMemo</a> に古いメモがある</li>
<li><a href="http://events.linuxfoundation.jp/events/open-source-summit-japan" title="Open Source Summit Japan 2017">Open Source Summit Japan 2017</a> というのがあるらしい</li>
<li><a href="https://lists.debian.org/debian-devel-announce/2017/04/msg00008.html" title="Status on the stretch release">Status on the stretch release</a></li>
<li><a href="https://www.debian.org/News/2017/20170417" title="Statement concerning the arrest of Dmitry Bogatov">Statement concerning the arrest of Dmitry Bogatov</a></li>
<li><a href="https://blog.torproject.org/blog/statement-regarding-dmitry-bogatov" title="Statement regarding Dmitry Bogatov | The Tor Blog">Statement regarding Dmitry Bogatov | The Tor Blog</a></li>
<li>事前課題</li>
<li>maven とか make とか</li>
</ul>


<h2>休憩</h2>

<h2>CMake でビルド</h2>

<ul>
<li>Windows 版と Linux 版の両対応が動機</li>
<li>Visual Studio や Eclipse のプロジェクト出力も可能</li>
<li><a href="https://github.com/yosukesan/kansai_debian">https://github.com/yosukesan/kansai_debian</a> に今回のサンプルを用意</li>
<li><code>distclean</code> 相当がないので build ディレクトリを作る方が良い</li>
<li><code>cd 000.hello; mkdir build; cmake ../ -DCMAKE_INSTALL_PREFIX=.; make; make install</code></li>
<li><code>CMakeCache.txt</code> が <code>configure.log</code> 相当</li>
<li><code>CMakeCache.txt</code> を編集することも可能</li>
<li><code>cmake ..</code> ではなく <code>cmake ../CMakeLists.txt</code> としてしまうと build ディレクトリではなくソースディレクトリにファイルが作られてしまうので注意</li>
<li>ライブラリをリンクする例: 失敗する例が <code>001_NG.link_library</code> で成功する例が <code>001_OK.link_library</code></li>
<li>自作ライブラリのビルドとリンク</li>
<li><code>CMakeCache.txt</code> に入る変数と入らない変数がある</li>
<li>設定するのに <code>FORCE</code> オプションが必要なものとなくても良いものがあってハマった</li>
<li>echo しても空なのに、内部的には変数がある</li>
<li>変数の上書きに癖があってハマった</li>
<li>Windows でマルチスレッドかどうか、デバッグかリリースかなどでリンクするライブラリが違うのが自動でできなかった</li>
<li>Visual Studio でもリンクするライブラリの組み合わせ問題ははまることがあるらしい</li>
<li>Dependency Walker</li>
<li>デバッグビルドの DLL が混ざっていてバグっていた話</li>
<li><a href="https://ninja-build.org/manual.html">https://ninja-build.org/manual.html</a></li>
</ul>


<h2>その後</h2>

<p>時間が余ったので、次回の予定などの話をしていました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSS Gate大阪ワークショップ2017-04-22に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-22-oss-gate-workshop.html"/>
    <updated>2017-04-22T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/oss-gate-workshop</id>
    <content type="html"><![CDATA[<p><a href="https://oss-gate.doorkeeper.jp/events/58579" title="OSS Gate大阪ワークショップ2017-04-22 - OSS Gate | Doorkeeper">OSS Gate大阪ワークショップ2017-04-22 - OSS Gate | Doorkeeper</a>にサポーター (旧称: メンター) として参加しました。</p>

<!--more-->


<h2>全体の感想</h2>

<p>最後のアンケートにも書きましたが、前回はデモである程度メモをどの程度とるのかなどの方向性が示されていたのと、やる内容がインストールから初めて、ひっかかったところのドキュメントの改善をフィードバックする、というのが多かったのに対して、今回はデモがほぼなくて、サポーター (旧称: メンター) として応募したけど、人数の都合でビギナーになった人が多かったからか、いろんなことに挑戦していて、難しい感じでした。</p>

<p>作業メモの粒度としては、<a href="https://github.com/oss-gate/workshop/issues?q=is%3Aissue+is%3Aclosed">過去のビギナーの作業ログ</a>から特にコメント数が多いものを参考にしてみると、こういう細かい思考過程までメモすると良いのか、というのが、 oss-gate に限らず普段の作業メモのとり方としても、参考になるかと思います。</p>

<h2>メモ</h2>

<p>以下、今回の雑多なメモです。</p>

<h3>フォント</h3>

<p>途中のふりかえりのときのビギナーの人がブラウザーで変わったフォントを使っていたのできいてみたところ、「スマートフォントUI」というのを使っていると教えてもらいました。</p>

<h3>Chef DK のアンインストール</h3>

<p>参考のため、自分の環境にも Chef DK を入れてみていたのですが、 <a href="https://docs.chef.io/install_dk.html">https://docs.chef.io/install_dk.html</a> にアンインストールの手順があったので、それに従ってアンインストールしました。</p>

<p>symlink は削除前に確認してみたら、たくさんありました。</p>

<pre><code>%  sudo rm -rf /opt/chefdk
Password:
%  sudo pkgutil --forget com.getchef.pkg.chefdk
Forgot package 'com.getchef.pkg.chefdk' on '/'.
%  find /usr/local/bin -lname '/opt/chefdk/*'
/usr/local/bin/berks
/usr/local/bin/chef
/usr/local/bin/chef-apply
/usr/local/bin/chef-client
/usr/local/bin/chef-shell
/usr/local/bin/chef-solo
/usr/local/bin/chef-vault
/usr/local/bin/cookstyle
/usr/local/bin/dco
/usr/local/bin/delivery
/usr/local/bin/foodcritic
/usr/local/bin/inspec
/usr/local/bin/kitchen
/usr/local/bin/knife
/usr/local/bin/ohai
/usr/local/bin/push-apply
/usr/local/bin/pushy-client
/usr/local/bin/pushy-service-manager
/usr/local/bin/rubocop
%  sudo find /usr/local/bin -lname '/opt/chefdk/*' -delete
%  find /usr/bin -lname '/opt/chefdk/*'
</code></pre>

<h3>辞書</h3>

<p>macOS の辞書ではなく、Logophile という辞書ソフトを使っているのをみました。
COBUILD のシソーラスが便利だそうです。</p>

<p>たぶん <a href="http://dicwizard.jp/logophile/" title="Logophile">Logophile</a> で、シェアウェアのようです。</p>

<h3>fish shell</h3>

<p>検索しにくい名前ですが、<a href="http://fish.rubikitch.com/" title="全訳！fishシェル普及計画【コマンドラインは怖くない】">全訳！fishシェル普及計画【コマンドラインは怖くない】</a> に翻訳されたドキュメントがあるので、使い始めやすそうです。</p>

<p>個人的には rvm を入れたら環境を壊された (<code>zsh</code> なら <code>chpwd_function</code> を使えばいいのに使っていなかったらしく <code>cd</code> のカスタマイズが壊れた) ぐらいシェルはカスタマイズをしているので、乗り換える可能性は低いですが、ちょっと試してみたところ、 <code>echo</code> のオートサジェスチョンで <code>$BASH_VERSION</code> がでてきたので、<code>.bash_history</code> をみているようです。
ちょっと試した後は、 <code>rm -rf ~/.local/share/fish</code> でクリーンな状態に戻して、また最初から試せるようにしておきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第77回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-03-04-rubykansai77.html"/>
    <updated>2017-03-04T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai77</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/58025" title="第77回 Ruby関西 勉強会">第77回 Ruby関西 勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<ul>
<li>地図が最初はグランフロントをさしていた。(昨晩直しました。) (doorkeeper のシステムで住所を変えただけど、地図の方は変わらないらしい。)</li>
<li>会場はヒルトンプラザウエストで、ヒルトンプラザイーストとどちらなのかわかりにくい。</li>
<li>工事中が多くて場所がわかっていてもたどり着きにくかったらしい。</li>
</ul>


<h2>最適化のやり方</h2>

<ul>
<li><a href="http://oke-ya.com/devil.html">あくまのおしごと</a>の宣伝</li>
<li>KEN_ALL.CSV を読み込んで東西南北を含む行をカウントするプログラムを例に</li>
<li>最初に全部読んでメモリ上にのせて <code>each_line</code> (メモリ効率を気にするなら元の <code>open</code> 中に <code>f.gets</code> の方が良さそう)</li>
<li>配列を find せずに Hash を使う</li>
<li>配列に対象行をためていって length をとるのではなく数値でカウント</li>
<li>同じメソッド呼び出しをローカル変数に代入して減らす</li>
<li><code>sort</code> から <code>sort_by</code></li>
<li>早すぎる最適化はするべきではない</li>
<li>気をつけるポイント</li>
<li>IO はなるべく短く</li>
<li>データ構造(もたせ方)を工夫する</li>
<li>ループの中でオブジェクトをなるべく作らない</li>
<li>文字列、配列、ハッシュは数値やシンボルとくらべてメモリ消費量が多い点を心得ておく</li>
<li>質疑応答</li>
<li>データが大きい時や大きさがわからないときは一気に読まない方が良さそう</li>
<li>SQL にあるような何行かごとに処理というのは専用のメソッドはなさそう</li>
<li><code>/北|南|東|西/</code> は <code>/[北南東西]/</code> の方が良いのではないかというツッコミ</li>
<li>西東京みたいなのは西と東でカウントされるのかという話 - 片方しかカウントされない実装になっていた。</li>
<li>カウント対象は限定されているので、ループの中で <code>||=</code> で初期化するのではなく <code>{"北" =&gt; 0}'</code> のように初期値をもつのもあり。 <code>Hash.new { 0 }</code> のような方法もあり。</li>
<li>最後にもう一度、<a href="http://oke-ya.com/devil.html">あくまのおしごと</a>の宣伝</li>
<li><a href="https://www.slideshare.net/yalab/ruby-72795596">Rubyコードの最適化</a></li>
</ul>


<h2>Rails 5.1.0.beta1はどのようにモダンなJavaScript開発を実現しているのか？</h2>

<ul>
<li>webpacker gem を使ったデモ</li>
<li><code>bundle exec rails webpacker:install:react</code></li>
<li>config/webpack/shared.js でビルドする対象を指定</li>
<li>bin/webpack-dev-server は localhost:8080 で待ち受ける express のサーバー</li>
<li>bin/webpack は public 以下に出力</li>
<li><code>javascript_pack_tag</code> の実装確認</li>
<li><code>dev_server_host</code> が設定されていればそこから、なければ digest もしくは直接</li>
<li>質疑応答</li>
<li>フロントエンドを知らない人は sprockets で良いのではないか</li>
<li>sprockets と webpacker の違い</li>
<li>deploy するときは? webpacker-dev-server ではなく、 webpack で public 以下に生成する</li>
<li>情報源は? rails guide などにはまだ。 master でもまだ変化が続いている。</li>
<li>スタイルシートはコンパイルしてくれないのか? 現状デフォルトで生成される config では対象ではない。 webpack の知識があって設定すれば可能。</li>
<li><a href="https://speakerdeck.com/chimame/rails-5-dot-1-0-dot-beta1hadofalseyounimodannajavascriptkai-fa-woshi-xian-siteirufalseka">Rails 5.1.0.beta1はどのようにモダンなJavaScript開発を実現しているのか？ // Speaker Deck</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li>14:20 まで</li>
</ul>


<h2>Welcome to tebukuro</h2>

<ul>
<li>tebukuro とは</li>
<li>イベント、チケット管理サービス</li>
<li>Shinosaka.rb のプロダクト</li>
<li>なぜ tebukuro</li>
<li>既存サービスへの不満</li>
<li>使っているもの</li>
<li>rails</li>
<li>postgresql</li>
<li>node.js など</li>
<li>CI: Wercker から Jenkins に移行中</li>
<li>開発環境は docker compose</li>
<li>本番環境も docker</li>
<li>Dcoker を使う理由</li>
<li>コンテナ指向でシンプルに保てる</li>
<li>どの環境でも動作する</li>
<li>スケーラブル: コンテナ単位で可能</li>
<li>GCP</li>
<li>なぜOSSなのか</li>
<li>開発方法も他のOSSと同じ</li>
<li>OSS開発の敷居をさげるための素振りもできる</li>
<li>英語の勉強もできちゃう</li>
<li>もう一つのねらい</li>
<li>betaやalphaのライブラリを積極的に採用</li>
<li>バグを踏んでライブラリへのPRチャンスを作る</li>
<li>PRとはいかずともissue報告はできる</li>
<li>目指すコミュニティ</li>
<li><a href="https://github.com/shinosakarb/tebukuro">https://github.com/shinosakarb/tebukuro</a></li>
</ul>


<h2>Create React App ではじめる Rails の SPA</h2>

<ul>
<li>ライブコーディング</li>
<li>実装を見ると <code>.html</code> が <code>index.html</code> より優先されるっぽい</li>
<li>RFC とかは単語が一般的すぎて見つけられなかったというコネタ</li>
<li>(後で <a href="https://www.rfc-editor.org/retrieve/bulk/">https://www.rfc-editor.org/retrieve/bulk/</a> からダウンロードして txt ファイルを index.html で検索してみたけど、書いてなさそうだった。調べていた時に思い出したけど IIS は index ではなかった (確認したら default だった) ので RFC に書かれている可能性は低そう)</li>
<li>yarn は yarnpkg コマンドの方が主流になるかもしれないらしい</li>
<li>react-router-dom</li>
<li>公式サイトは v4 系のドキュメントになっている</li>
<li>webpack も公式サイトは 2 系のドキュメントになっていて 1 系はではないらしい</li>
<li>react-router-dom が beta7 になっていて、公式サイトのデモが beta6 では動かなかった。</li>
<li>時間がなかったので、 OAuth との組み合わせは完成版でデモ</li>
</ul>


<h2>Rubyのオススメの機能７選</h2>

<ul>
<li><a href="http://qiita.com/cuzic/items/a265f140fdff289d5c07">Ruby のオススメの機能７選</a></li>
<li><code>Enumerator.new</code></li>
<li><code>Object#tap</code></li>
<li><code>Float::INFINITY</code></li>
<li><code>Enumerable#each_slice</code></li>
<li><code>Array#shelljoin</code></li>
<li>(単純に実行するだけなら複数引数の <code>system</code> などを使った方が良さそうと思っていたけど、多段 ssh とかの時には確かに良さそう。)</li>
<li><code>SecureRandom.hex</code></li>
<li>Flip Flop 演算子</li>
<li>質疑応答</li>
<li>配列に <code>with_index(1)</code> は使えないので、<code>each.with_index(1)</code> にする必要がある</li>
<li><code>each_with_index</code> だと初期値を指定できないので、この場合は使えない</li>
</ul>


<h2>Ruby初級者向けレッスン &mdash; ブロック</h2>

<p>初心者の人は少なかった。
告知タイミングなどの問題で、スタッフの人が多かった。</p>

<p>追加して <code>self</code> が欲しい時は <code>Array#&lt;&lt;</code> とか <code>Hash#update</code> とか。</p>

<h2>クロージング</h2>

<ul>
<li><a href="https://rails-follow-up-osaka.doorkeeper.jp/events/58097">Rails Follow-up Osaka #7</a></li>
<li><a href="https://rubykansai.doorkeeper.jp/events/57723">関西Ruby会議2017 CFP</a>募集中</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSS Gate大阪ワークショップ2017-02-25に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-02-25-oss-gate-workshop.html"/>
    <updated>2017-02-25T23:59:59+09:00</updated>
    <id>http://blog.n-z.jp/blog/oss-gate-workshop</id>
    <content type="html"><![CDATA[<p><a href="https://oss-gate.doorkeeper.jp/events/56141" title="OSS Gate大阪ワークショップ2017-02-25">OSS Gate大阪ワークショップ2017-02-25</a>にメンターとして参加しました。</p>

<!--more-->


<h2>事前準備</h2>

<p>ざっと見て大丈夫そうだったので、細かくチェックしていなかったのですが、
<a href="https://oss-gate.doorkeeper.jp/events/56141" title="イベントページ">イベントページ</a>
に書いてある説明や、
そこからリンクされている
<a href="https://github.com/oss-gate/workshop/blob/master/tutorial/scenario.md#%E3%82%B7%E3%83%8A%E3%83%AA%E3%82%AA" title="シナリオ">シナリオ</a>
などは事前に見ておくと流れがわかって良さそうだと
後から思いました。</p>

<h2>移動</h2>

<p>最寄駅をちゃんとチェックしていなくて、
本町駅に行ってしまって、
ちょっと歩きました。
時間に余裕を持って出発していたので、
開始には間に合いました。</p>

<h2>準備</h2>

<p>ビギナーの横に少なくとも一人はメンターがいるようになるように席がある程度決まっていて、
無線LANの設定をしたりしながら開始を待っていました。</p>

<p>最初、無線LANに繋がるのにIPアドレスが割り振られないという状況になっていて、
ちゃんと繋がるまで少し時間がかかりましたが、問題なく始まりました。</p>

<h2>アイスブレイク</h2>

<p>ある程度、説明があった後、アイスブレイクとして4,5人のグループで軽く話をしました。
このグループ分けはこの時だけのものだったらしく、
後は個別にわかれていました。</p>

<h2>対象OSSの決定</h2>

<p>対象とする OSS をビギナーの人が決めるというのが最初にありました。</p>

<p>デモとして、隣にいたビギナーの人が呼ばれて、
前で決めていました。</p>

<p>席に戻ってきて、一緒に確認してみると、
前に出てひっかかることがあるといっていた OSS は環境依存の問題っぽい感じで、
結局他の OSS を選び直していました。</p>

<h2>対象OSSを動かす</h2>

<p>これは最初のデモで決まった OSS を例に進行役の人が
実際に細かくメモを取りつつ動かしてみるというデモをした後、
各自動かしてみるということをしていました。</p>

<p>その手順の中にライセンスが OSS かどうかを確認するというのが入っていました。
ライセンスの話はちゃんとするとそれだけで時間がかかってしまうので、
難しいところだと思いました。</p>

<p>担当していたビギナーの人は、
その時々の心情も含めて記録していて、
ちゃんとできていてすごいなと思って見ていました。</p>

<p>答えを先に言ってしまうのはよくないということだったはずなので、
知っていることでもほとんど口を挟まずに見ていました。
この辺りの加減は何度か参加して見ないとわからなそうな気がしました。</p>

<h2>休憩</h2>

<p>おやつ休憩が入りました。</p>

<h2>ミニふりかえり</h2>

<p>進行役の人が順番を間違えていたらしく、
休憩の後にミニふりかえりが入りました。</p>

<p>3列あったテーブルごとにほぼ同じペア数だったので、
ぐるっと回転するようにメンターが入れ替わって説明を聞く、
ということをしました。</p>

<p>担当しているビギナー以外の他のビギナーの人が何をやっているかというのは、
基本的にはふりかえりのタイミングしか聞く機会がないようなので、
興味深く聞きました。
ここがフィードバックできるポイントかも、という点も見つけられました。</p>

<h2>プロジェクトにフィードバックする</h2>

<p>時間配分のミスがあったらしく、2時間の予定が1時間になってしまっていたそうです。</p>

<p>担当していたビギナーの人は、この時間で、自分の言葉で書く、報告用にまとめ直す、
他の issues を見て英語にしなくても日本語のままの報告で良さそうという確認、
というところまでできていました。</p>

<h2>ふりかえり</h2>

<p>ミニふりかえりの時とは逆回りに入れ替わって、
またビギナーの人が何をやったのか話を聞きました。</p>

<p>ドキュメントの修正の pull request をすると良いのでは、
(明確な修正だと複雑な英語でのやりとりも発生しないので楽)
という話をしました。</p>

<h2>まとめ、アンケート記入</h2>

<p>まとめの話とアンケート記入がありました。</p>

<p>アンケート記入は <a href="https://github.com/oss-gate/workshop">https://github.com/oss-gate/workshop</a> を fork して
tutorial/retrospectives/2017-02-25-osaka の beginner.yaml や mentor.yaml をコピーして pull request を送る、
という方法でした。</p>

<p>YAML の文法エラーはマージする進行役の人が直すから細かいことは気にしないで良いということでした。</p>

<h2>ワークショップのふりかえり</h2>

<p>アンケート結果を見ながらふりかえりをしました。</p>

<p>関西も次回からは、進行役の人も関西の人でやる必要があるということで、
メンター用のアンケートの「進行役をできそうか」で
「何人かでフォローしあえばやれそう」が多かったので、
何人かで分担しながらやることになりそうな気がしました。</p>

<p>アンケート結果の表示には <code>aggregate.rb</code> というのを使っていたように見えたので、
たぶん <code>tutorial/retrospectives/aggregate.rb</code> を実行していたのだろうと思いました。</p>

<h2>最後に</h2>

<p>テーブルの移動などをして、宣伝用の集合写真を撮って終わりました。</p>

<h2>終わった後</h2>

<p>終わった後は、用事があったので、懇親会には参加せずにそのまま帰りました。</p>

<p>用事は梅田で時間が少し空いていて微妙だったので、
梅田まで歩いて帰ったところ、
ちょうど良いぐらいの時間になりました。</p>
]]></content>
  </entry>
  
</feed>
