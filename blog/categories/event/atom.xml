<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: event | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/event/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-06-25T22:13:34+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[caffでキーサインした]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-22-key-sign-caff.html"/>
    <updated>2014-06-22T19:07:19+09:00</updated>
    <id>http://blog.n-z.jp/blog/key-sign-caff</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20140622" title="第 85 回 関西 Debian 勉強会">第 85 回 関西 Debian 勉強会</a>
で
<a href="https://launchpad.net/~mocchi">坂本さん</a>とキーサインをしたので、そのメモです。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 12.04.4 LTS</li>
<li>gnupg 1.4.11-3ubuntu2.5</li>
<li>signing-party 1.1.4-1</li>
</ul>


<h2>事前準備</h2>

<p>事前にキーサインをするとわかっていれば <code>gpg-key2ps</code> コマンドで fingerprint の紙を用意しておくと良いと思います。
今回は少人数だったので、
fingerprint は画面上で見せて確認してもらいました。</p>

<h2>本人確認</h2>

<p>対面で運転免許証などの写真付きの身分証明書で名前を確認して、
それと署名対象の鍵の uid に入っている名前が一致するのを確認しておきます。
また、後で署名するために fingerprint の情報も入手しておきます。</p>

<h2>caff の設定</h2>

<p>基本的には
<a href="http://tokyodebian.alioth.debian.org/pdf/debianmeetingresume200910-presentation.pdf">Why GPG Key sign? 東京エリア Debian 勉強会 in OSC 2009 Tokyo/Fall</a>
の PDF の内容のままです。</p>

<h3>.caffrc</h3>

<p>自分の鍵 ID を <code>gpg --list-secret-keys</code> で確認すると、
<code>4096R/B4222F7A</code> とわかるので、
<code>gpg --fingerprint B4222F7A</code>
で fingerprint 全体を確認しておきます。
(fingerprint の末尾が鍵 ID です。)</p>

<p>spam よけのために email のところはちょっと改変していますが、
<code>~/.caffrc</code> は以下のように設定しています。
<code>keyid</code> は fingerprint の末尾のうち、
設定例と同じ長さだけ普通の鍵 ID よりちょっと長めに取り出して設定しています。
<code>owner</code> と <code>email</code> はメール送信の時に使われます。</p>

<p>```perl ~/.caffrc</p>

<pre><code># .caffrc -- vim:ft=perl:
# This file is in perl(1) format - see caff(1) for details.

$CONFIG{'owner'} = 'Kazuhiro NISHIYAMA';
$CONFIG{'email'} = 'zn mbf.nifty.com';
#$CONFIG{'reply-to'} = 'foo@bla.org';

# You can get your long keyid from
#   gpg --with-colons --list-key &lt;yourkeyid|name|emailaddress..&gt;
#
# If you have a v4 key, it will simply be the last 16 digits of
# your fingerprint.
#
# Example:
#   $CONFIG{'keyid'} = [ qw{FEDCBA9876543210} ];
#  or, if you have more than one key:
#   $CONFIG{'keyid'} = [ qw{0123456789ABCDEF 89ABCDEF76543210} ];
$CONFIG{'keyid'} = [ qw{262ED8DBB4222F7A} ];

# Select this/these keys to sign with
#$CONFIG{'local-user'} = [ qw{EE739B28C657086C 9B585538ED7E1B73 262ED8DBB4222F7A C9429DABCB28285B} ];

# Additionally encrypt messages for these keyids
#$CONFIG{'also-encrypt-to'} = [ qw{EE739B28C657086C 9B585538ED7E1B73 262ED8DBB4222F7A C9429DABCB28285B} ];

# Mail template to use for the encrypted part
#$CONFIG{'mail-template'} = &lt;&lt; 'EOM';
#Hi,
#
#please find attached the user id{(scalar @uids &gt;= 2 ? 's' : '')}
#{foreach $uid (@uids) {
#    $OUT .= "\t".$uid."\n";
#};}of your key {$key} signed by me.
#
#If you have multiple user ids, I sent the signature for each user id
#separately to that user id's associated email address. You can import
#the signatures by running each through `gpg --import`.
#
#Note that I did not upload your key to any keyservers. If you want this
#new signature to be available to others, please upload it yourself.
#With GnuPG this can be done using
#       gpg --keyserver pool.sks-keyservers.net --send-key {$key}
#
#If you have any questions, don't hesitate to ask.
#
#Regards,
#{$owner}
#EOM
</code></pre>

<p>```</p>

<h3>~/.caff/gnupghome/gpg.conf の設定</h3>

<p>以前参考にした設定のまま</p>

<p><code>text ~/.caff/gnupghome/gpg.conf
keyserver pgp.mit.edu
cert-digest-algo SHA256
personal-digest-preferences SHA256
</code></p>

<p>となっていました。
PDF では SHA512 になっていたので、
SHA256 から SHA512 に変更しました。
今日の caff での署名した時点では SHA256 のままだったので、
次回から変わる予定です。</p>

<p><code>text ~/.caff/gnupghome/gpg.conf
keyserver pgp.mit.edu
cert-digest-algo SHA512
personal-digest-preferences SHA512
</code></p>

<h2>caff -u で署名</h2>

<p>spam よけのためメールアドレスの所は改変した状態のログは以下の通りです。
「本当に署名しますか? (y/N)」のところで身分証明書と一緒に確認した fingerprint と合っているか確認します。</p>

<p>最後にメールを送信して終了です。
相手の鍵で暗号化されたメールが localhost の SMTP サーバー送信されます。</p>

<p>```console</p>

<pre><code>% caff -u B4222F7A D66FD341
[INFO] Importing key 262ED8DBB4222F7A from your normal GnuPGHome.
[INFO] fetching keys, this will take a while...
[INFO] Sign the following keys according to your policy, then exit gpg with 'save' after signing each key
gpg --local-user B4222F7A --homedir=/home/kazu/.caff/gnupghome --secret-keyring /home/kazu/.gnupg/secring.gpg --no-auto-check-trustdb --trust-model=always --edit 25DA5B9699F132DB74BD2270B5A586C7D66FD341 sign
gpg (GnuPG) 1.4.11; Copyright (C) 2010 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.


pub  4096R/D66FD341  作成: 2014-06-22  満了: 無期限       利用法: SC
sub  4096R/5D3BA622  作成: 2014-06-22  満了: 無期限       利用法: E
[ unknown] (1). Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt;


pub  4096R/D66FD341  作成: 2014-06-22  満了: 無期限       利用法: SC
 主鍵の指紋: 25DA 5B96 99F1 32DB 74BD  2270 B5A5 86C7 D66F D341

     Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt;

本当にこの鍵にあなたの鍵“Kazuhiro NISHIYAMA &lt;zn mbf.nifty.com&gt;”で署名してよいですか
(B4222F7A)

本当に署名しますか? (y/N) y

次のユーザーの秘密鍵のロックを解除するには
パスフレーズがいります:“Kazuhiro NISHIYAMA &lt;zn mbf.nifty.com&gt;”
4096ビットRSA鍵, ID B4222F7A作成日付は2010-06-27


gpg&gt; save
[INFO] B5A586C7D66FD341 1 Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt; done.
[INFO] key 25DA5B9699F132DB74BD2270B5A586C7D66FD341 done.
Mail signature for Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt; to 'o-takashi sakamocchi.jp'? [Y/n]
%
</code></pre>

<p>```</p>

<h2>caff からのメールを受け取った相手のすべきこと</h2>

<p>暗号化されたメールが届くので、
対応する秘密鍵を使って復号してメールを確認します。
さらにその中にある署名を自分の鍵束にインポートしてキーサーバーに送信します。</p>

<p>caff のやり方はここでメールアドレスの到達性もチェックしているようなので、
署名した側はキーサーバーに送信する必要はなさそうです。
むしろそういうことをしないようにするために
<code>~/.caff/gnupghome</code> に独自の鍵束を用意しているように思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 85 回 関西 Debian 勉強会に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-22-kansai-debian-meeting.html"/>
    <updated>2014-06-22T13:43:06+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansai-debian-meeting</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20140622" title="第 85 回 関西 Debian 勉強会">第 85 回 関西 Debian 勉強会</a>
に参加してきました。</p>

<p>そのときのメモです。
詳細は勉強会のページからリンクされている資料を参照してください。</p>

<!--more-->


<h2>Intro</h2>

<ul>
<li>MATE 1.8 が Debian に入ったという話

<ul>
<li><a href="https://www.debian.org/News/weekly/2014/10/" title="Debian Project News - June 9th, 2014">Debian Project News &ndash; June 9th, 2014</a></li>
</ul>
</li>
<li>Debian 6 の LTS (long term support) の話

<ul>
<li>全パッケージが対象というわけではない</li>
<li>たとえば rails とか chromium とかは対象外</li>
</ul>
</li>
<li>Berkeley DB を post jessie で外す予定

<ul>
<li>AGPL に変わったから</li>
</ul>
</li>
<li>事前課題発表と自己紹介

<ul>
<li>おすすめの IM</li>
<li>webwml-git の運用</li>
<li>web-mode.el (melpa にはある)</li>
</ul>
</li>
</ul>


<h2>「Linuxのドライバメンテナになった体験記」(担当：坂本)</h2>

<ul>
<li>質問から派生して残った疑問点

<ul>
<li>character device とは何か (block device との違いは何か)</li>
</ul>
</li>
</ul>


<h2>「Debian での systemd とのつきあい方」(担当：佐々木)</h2>

<p>状況確認コマンドいろいろのメモです。
一部のコマンドは自動で <code>$PAGER</code> を通してくれるようですが、
<code>PAGER=lv</code> の場合は <code>LV=-c</code> がないとエスケープシーケンスが解釈されなくて読みにくくなります。</p>

<ul>
<li><code>systemd-analyze</code></li>
<li><code>systemd-analyze blame</code></li>
<li><code>systemd-analyze plot &gt; systemd-analyze_plot.svg</code></li>
<li><code>systemctl list-dependencies</code></li>
<li><code>systemctl status</code></li>
<li><code>systemctl list-unit-files</code></li>
<li><code>systemctl list-units</code></li>
<li><code>sudo LV=-c journalctl</code></li>
<li><code>systemd-cgls</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 12 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-20-rubymotion-mokumoku-osaka.html"/>
    <updated>2014-06-20T19:27:13+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 11 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://rubymotionjp.connpass.com/event/6666/">第 12 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。</p>

<p>次回の
<a href="http://rubymotionjp.connpass.com/event/7079/">第 13 回 RubyMotion もくもく会 in Osaka</a>
は 07/16(水) になりました。</p>

<!--more-->


<h2>メモ</h2>

<ul>
<li>一周年記念</li>
<li>RubyMotion は Android にも対応予定</li>
<li>RubyMotion のライセンスが expired して更新しても <code>rake</code> のときの <code>Your maintenance plan is expired. Run 'motion account' to renew it.</code> というメッセージはキャッシュの影響で 24 時間ぐらい待たないと消えないらしいという話</li>
<li>バージョンは 2.29 が最新</li>
<li>Swift が話題</li>
<li><a href="http://tools.msng.info/">割り勘電卓</a></li>
<li><a href="https://github.com/shin1x1/vagrantx">https://github.com/shin1x1/vagrantx</a> のソース公開</li>
<li><a href="https://github.com/MacFace/MacFace/tree/v2.0">MacFace v2</a> が Swift で作り直し中</li>
</ul>


<h2>やったこと</h2>

<p>Interface Builder と <code>gem 'ib'</code> で GUI を作り直そうとしていました。</p>

<p>GUI 作成は細かいサイズを気にしなくて良い Tcl/Tk の pack 方式や
Web での bootstrap のようなやり方の方が慣れていて、
GUI ツールで作成するのは GTK+2 の glade ぐらいしかまともに使ったことがなかったので、
使い方や良い感じに配置する方法で結構悩んでいました。
悩んでいた部分は最後の成果発表の時にいろいろ教えてもらったりしました。</p>

<p>コードとの組み合わせは、検索で見つけた</p>

<pre><code>@mainWindowController = MainWindow.alloc.initWithWindowNibName('MainWindow')
@mainWindowController.window.makeKeyAndOrderFront(self)
</code></pre>

<p>という方法で window は表示できたものの、
<code>@mainWindowController.window</code> が <code>nil</code> になっていて、
<code>makeKeyAndOrderFront</code> の呼び出しは失敗していました。</p>

<p>ひとまず現状は <a href="https://github.com/znz/urltrapper/tree/ib">ib ブランチ</a> に公開しています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jus & USP友の会共催 シェルワンライナー勉強会@関西（第11回シェル芸勉強会） に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-14-jus-usp.html"/>
    <updated>2014-06-14T13:42:31+09:00</updated>
    <id>http://blog.n-z.jp/blog/jus-usp</id>
    <content type="html"><![CDATA[<p><a href="http://japanunixsociety.doorkeeper.jp/events/10184">jus &amp; USP友の会共催 シェルワンライナー勉強会@関西（第11回シェル芸勉強会）</a> に参加してきました。</p>

<p>USP の勉強会には初参加でしたが、楽しかったです。</p>

<p>今回の問題文は <a href="http://www.slideshare.net/ryuichiueda/20140614-35859423">20140614 【問題だけスライド】jus &amp; USP友の会共催 シェルワンライナー勉強会@関西（第11回シェル芸勉強会）</a> で公開されています。</p>

<!--more-->


<h2>準備</h2>

<p>持ち物のところで「open usp Tukubai の入ったUNIX/Linux環境のあるノートPC（Macでも可）」とあったので、
<a href="https://github.com/usp-engineers-community/Open-usp-Tukubai">https://github.com/usp-engineers-community/Open-usp-Tukubai</a> をインストールした Linux 環境を用意したのと、
<a href="https://uec.usp-lab.com/TUKUBAI/CGI/TUKUBAI.CGI?POMPA=TUKUBAI_ON_FREEBSD_DOWNLOAD">Tukubai on FreeBSDダウンロード</a>
から ova ファイルをダウンロードして VirtualBox にインポートして用意しておきました。</p>

<p>結局 open usp Tukubai は不要でしたが、
用意していた Linux 環境は動作確認に使いました。</p>

<h2>ソフトウェアツールとAWK・sedについて座学</h2>

<p>最初の「ソフトウェアツールとAWK・sedについて座学」の話からのメモです。</p>

<div style="float:right"><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4048660683" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></div>


<ul>
<li><a href="http://www.amazon.co.jp/gp/product/4048660683?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4048660683&amp;linkCode=shr&amp;tag=znz-22">フルスクラッチから1日でCMSを作る シェルスクリプト高速開発手法入門</a> という本が出ますという話</li>
<li>IEEE から出ている Netizens という本からの話

<ul>
<li>ed コマンド, grep コマンド</li>
<li>パイプとフィルタコマンド</li>
<li>sed, awk</li>
<li>現在の GNU coreutils に入っているようなコマンド群</li>
</ul>
</li>
<li>実際にコマンドを実行してみる話

<ul>
<li><code>echo です。ます。でした。 | sed 's/。/&amp;\n/g'</code>

<ul>
<li>OSX だと <code>echo です。ます。でした。 | sed 's/。/&amp;\本当に改行/g'</code> でOK (これは Linux でも OK)</li>
<li>bash や zsh なら <code>sed $'s/。/&amp;\\\n/g'</code> で本当の改行の代わりに <code>$'\n'</code> でも大丈夫</li>
</ul>
</li>
</ul>
</li>
<li><p>縦と横の話</p>

<ul>
<li><code>echo {1..10} | awk '{for(i=1;i&lt;=NF;i++){a+=$i};print a}'</code></li>
<li><code>echo {1..10} | tr ' ' '\n' | awk '{a+=$1}END{print a}'</code></li>
</ul>
</li>
<li><p>複雑な例 sm2 というのは tukubai のコマンドだが今回はなくても良い</p></li>
</ul>


<p><code>
$ cat input
a 1
b 3
a 4
b 2
c 1
$ cat input | awk '{x[$1]+=$2}END{for (k in x){print k,x[k]}}'
a 5
b 5
c 1
$ cat input | sort | sm2 1 1 2 2
a 5
b 5
c 1
</code></p>

<h2>チーム分け</h2>

<p>結構適当でした。</p>

<h2>前半戦</h2>

<h3>1問目</h3>

<p><code>echo -12,135,123 135,123</code> を足すという問題。</p>

<ul>
<li>最初に試した方法 <code>echo -12,135,123 135,123 | tr -d ',' | tr ' ' '+' | bc</code></li>
<li>話の流れでいくと <code>echo -12,135,123 135,123 | sed 's/,//g' | awk '{print $1+$2}'</code></li>
<li>出力にも <code>,</code> を入れるなら <code>"%'d"</code> を使って <code>echo -12,135,123 135,123 | sed 's/,//g' | awk '{printf "%'"'"'d\n", $1+$2}'</code></li>
<li><code>,</code> を消すのも awk を使うなら <code>echo -12,135,123 135,123 | awk '{gsub(",","");printf "%'"'"'d\n", $1+$2}'</code></li>
</ul>


<h3>2問目</h3>

<p>以下のデータの順番を「名前 点数」に統一するという問題。</p>

<p><code>
$ cat score
45 鎌田
浜田 72
今泉 84
54 上田
62 斉藤
</code></p>

<p>勘違いして点数の方を左にしてしまっていました。</p>

<ul>
<li><code>cat score | awk '$1~/[0-9]/{print $2,$1} $2~/[0-9]/{print $1,$2}'</code></li>
<li><code>cat score | sed 's/\([^0-9 ]*\) \([0-9]*\)/\2 \1/'</code></li>
</ul>


<p>twitter 上で出ていた解答に比べて全然ダメな感じでした。</p>

<h3>3問目</h3>

<p>m/s に変換する問題。 (1マイル=1609m)</p>

<p><code>
$ cat speed
100km/h
16mph
</code></p>

<ul>
<li><code>cat speed | sed 's,km/h,*1000/3600,;s,mph,*1609/3600,' | bc | sed 's,$,m/s,'</code></li>
<li><code>cat speed | awk '/km/{print $1*1000/3600,"m/s"}/mph/{print $1*1609/3600,"m/s"}'</code></li>
</ul>


<p><code>bc</code> だと整数になってしまうので、小数点以下の数値もほしければ <code>awk</code> を使って計算する方が良かったようです。
Google 電卓で検算できるのが便利でした。</p>

<h3>4問目</h3>

<p>さいとうさん、さわださん、ひろたさん、いとうさんの数を数えてください。</p>

<p><code>
$ cat name
齋藤 斉藤 沢田 澤田 伊藤
齋藤 齊藤 広田 廣田
</code></p>

<p>最初は総数を数えればいいのかと思って <code>egrep -o 'さいとう|さわだ|ひろた|いとう' | wc -l</code> というのを考えていたのですが、名前ごとにカウントだったようです。</p>

<p><a href="https://twitter.com/biwakonbu/status/477703196714868737">全くと言って良い程リダイレクトが無くて cat ばっかり</a>というツイートを受けて、頭に <code>&lt; input</code> を付ける方法に切り替えました。
<code>cat</code> を使っているのは入力を先頭に書きたいからのはず、ということも合わせて、
あまり使われているのを見かけませんが、頭に付けるようにしました。</p>

<p>kakasi をインストールするのは面倒そうだったので、
<code>sed</code> でがんばって
<code>&lt; name sed 's/[齋斉齊]藤/さいとう/g;s/[沢澤]田/さわだ/g;s/[広廣]田/ひろた/g;s/伊藤/いとう/g' | egrep -o 'さいとう|さわだ|ひろた|いとう' | sort | uniq -c | sort -n</code>
としました。</p>

<p>休憩時間中に Unicode の異体字データベースとかで同一視するためのデータがないか探してみたのですが、時間不足で見つけられませんでした。</p>

<h2>後半戦</h2>

<h3>csv</h3>

<p>csv の内容を全部足す問題。</p>

<p><code>
$ cat csv
1,2,"123,456",-5,"-123,444"
6,7,8,"12",9
</code></p>

<p>行ごととかいうこともなく、全部足せば良いという問題でした。</p>

<p><code>""</code> の処理はシェルに任せれば良いかと思ったら、
そういうことをするコマンドは <code>xargs</code> だったので、
<code>&lt;csv tr ',' ' ' | xargs -n1 | tr -d ' ' | awk '{a+=$1}END{print a}'</code>
という解答になりました。</p>

<p><a href="https://twitter.com/znz/status/477713093535866880">この解答</a>は<a href="https://twitter.com/ryuichiueda/status/477713692927066112">高い評価</a>をもらいました。</p>

<h3>matrix</h3>

<p>行列の転置。</p>

<p><code>
$ cat matrix
a b c
d e f
g h i
</code></p>

<p>ファイルを複数回読むのはズルかと思って、
連想配列にためるようにして
<code>&lt; matrix awk '{for(i=1;i&lt;=NF;i++){m[i]=m[i]" "$i}}END{for(k in m){print m[k]}}'|sed 's/^ //'</code>
となりました。
端の処理がうまく出来なかったので、<code>sed</code> で後処理しました。
時間優先の時は、単独でうまく書けなくても、他の方法を組み合わせてなんとかする、と方法もありだと思います。</p>

<p>解答例では
<code>cat matrix | awk '{for(i=1;i&lt;=NF;i++){print NR,i,$i}}' | sort -k2,2 | awk '{print $3} | xargs -n 3</code>
ということで一度 <code>行番号 桁番号 内容</code> という形式に変換するのがポイントと言っていました。</p>

<h3>IPv6 その1</h3>

<p>IPv6 アドレスの省略された <code>0</code> を復元する問題。</p>

<p>とりあえず時間内に解けることを優先して、
<code>echo 2001:db8:20:3:1000:100:20:3 | xargs -d: -n1 | sed 's/^/0000/;s/.*\(....\)$/\1/' | xargs | tr ' ' : | sed -e 's/:0000$//'</code>
となりました。</p>

<p>後で確認したら <code>xargs -d:</code> は Mac OS X の <code>xargs</code> だと使えませんでした。
さらに <code>xargs -d: -n1</code> だと余計な改行が付くので、最後に <code>sed</code> で削除しているのですが、
<code>tr : ' ' | xargs -n1</code> にすればそもそも余計な改行が付かなかったようです。</p>

<p>それから、他の解答例をみると、前につめるのは <code>0000</code> じゃなくて <code>000</code> で十分でした。</p>

<h3>IPv6 その2</h3>

<p>時間内に解くために思いついた方法をどんどん試して
<code>&lt;ipv6 awk -F: '{n=8-NF;for(i=0;i&lt;=n;i++){sub("::",":0::")}sub("::",":")}1' | sed 's/:/:000/g;s/:[^:]*\([^:][^:][^:][^:]\)/:\1/g'</code>
となりました。</p>

<p>内容を書き換えると <code>NF</code> が壊れてしまうので <code>i&lt;=8-NF</code> だとうまくいきませんでした。
そこで一度 <code>n</code> に保存してから <code>for</code> ループで <code>0</code> をつめていきました。
つめる場所を保存するために <code>::</code> は残しておいて、後で <code>:</code> に置き換えています。</p>

<p><code>1</code> は <a href="http://golf.shinh.org/">Anarchy Golf</a> 関連で知っていた &lsquo;{print}&rsquo; の短縮のようなものです。</p>

<p>その1の時の方法は途中で複数行に分割していて、複数行の IPv6 アドレスを同時に扱うのには使えなかったので、
<code>sed 's/:/:000/g;s/:[^:]*\([^:][^:][^:][^:]\)/:\1/g'</code>
にかわりました。
後ろ4文字を残すというのは、素直に <code>[^:]</code> を列挙しても twitter に投稿できる文字数に収まりました。</p>

<p>今回の問題だけなら良いのですが、先頭が <code>2001</code> で既に4文字になっているのを利用して、処理を省略しているので、汎用的にするなら、そこも処理する必要があります。</p>

<p>ruby なら <code>ruby -r ipaddr -nle 'puts IPAddr.new($_).to_string' ipv6</code> で出来ました。</p>

<h2>感想</h2>

<p>twitter のハッシュタグ (<code>#シェル芸</code>) での他の人の解答を参考にしたり、自分の解答を紹介したりできたり、頭リダイレクトが流行ったりして面白かったです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 11 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-28-rubymotion-mokumoku-osaka.html"/>
    <updated>2014-05-28T19:38:39+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 10 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://connpass.com/event/6116/">第 11 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。</p>

<p>次回の
<a href="http://connpass.com/event/6666/">第 12 回 RubyMotion もくもく会 in Osaka</a>
は 06/20(金) になりました。</p>

<!--more-->


<h2>メモ</h2>

<ul>
<li><code>gem 'ib'</code> と Auto Layout</li>
<li><a href="http://kojisatoapp.blogspot.jp/2014/03/admobnendiadadmob.html">アプリで飯を食う: AdMobメディエーションで広告(Nend,iAd,AdMob)を切り替える方法</a></li>
<li><code>usingSpringWithDamping</code></li>
<li><a href="http://vagrantmanager.com/">Vagrant Manager</a></li>
<li><a href="http://stackoverflow.com/questions/13216092/how-to-sort-a-hash-by-value-in-descending-order-and-output-a-hash-in-ruby">Hash のソート</a></li>
<li><a href="http://urltrapper.n-z.jp/">URLTrapper</a> v0.1</li>
<li><a href="https://itunes.apple.com/jp/app/kokowo-songru/id473519853?mt=8">ここを送る</a></li>
<li><a href="http://shin1x1.github.io/vagrantx/">VagrantX</a> v0.2.0</li>
<li><a href="http://macface.github.io/">MacFace</a></li>
</ul>


<h2>URLTrapper 公開</h2>

<p>今日は URLTrapper の公開作業をしていました。</p>

<p>最終的には
<a href="http://urltrapper.n-z.jp/">URLTrapper</a>
の<a href="https://github.com/znz/urltrapper">ソースコードを公開</a>して、
<a href="https://github.com/znz/urltrapper/releases/tag/v0.1">v0.1 をリリース</a>しました。</p>

<h2>Config 設定</h2>

<p>まず
<a href="http://rubymotion.jp/RubyMotionDocumentation/guides/project-management/index.html">RubyMotion Project Management Guide</a>
の 2. Configuration をみて identifier などを設定していきました。</p>

<h2>リリースファイル作成</h2>

<p><code>rake build</code> で <code>build/MacOSX-10.9-Release/*.app</code> が出来るので、
それを Finder で zip にして、
バージョン付きのファイル名にしました。</p>

<h2>リリース</h2>

<p>github の Release からリリースを作成して、
先ほどの zip ファイルをアップロードしてリリースしました。</p>

<p>途中、リリースノートにスクリーンショットをアップロードしました。
このスクリーンショットは後で GitHub Pages を作る時にも使いました。</p>

<h2>GitHub Pages 作成</h2>

<p>github の Settings から GitHub Pages にある Automatic page generator を使って作成しました。</p>

<p>自動作成されたものから、ダウンロードのリンクのところは VagrantX を参考にして、
ソースコードのダウンロードからバイナリの zip のダウンロードに書き換えました。</p>

<h2>ドメイン問題</h2>

<p><code>znz.github.io</code> は、この blog 用に使っていて、
<code>znz.github.io/urltrapper</code> を開くと
<code>blog.n-z.jp/urltrapper</code> に飛ばされてしまって
困ってしまったので、
<a href="https://github.com/znz/urltrapper/blob/gh-pages/CNAME">https://github.com/znz/urltrapper/blob/gh-pages/CNAME</a>
として個別のサブドメインを使うように設定したのですが、
すぐには反映されなくて、しばらく悩んでいました。</p>

<p>最後の成果発表のタイミングでは反映されていて見えるようになっていました。</p>
]]></content>
  </entry>
  
</feed>
