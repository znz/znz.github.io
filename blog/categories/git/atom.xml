<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-12-28T19:30:12+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[octopressをアップデートしてisolateを使い始めた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-21-update-octopress.html"/>
    <updated>2013-12-21T22:43:36+09:00</updated>
    <id>http://blog.n-z.jp/blog/update-octopress</id>
    <content type="html"><![CDATA[<p>気が向いたので、また octopress の更新をしてみました。
そして <code>rake isolate</code> を使い始めました。</p>

<p>記事中では <code>git fetch --prune</code> とか、
zsh の <code>(mm-1)</code> を使っているので、
カテゴリに <code>git</code> と <code>zsh</code> も付けています。</p>

<!--more-->


<h2>octopress のアップデート</h2>

<p><code>git fetch</code> します。
最近は <code>--prune</code> を付けてリモートで削除されたブランチは手元でも削除されるようにしていることが多いので、
今回も付けています。</p>

<p><code>console
% git remote -v
octopress   git://github.com/imathis/octopress.git (fetch)
octopress   git@github.com:imathis/octopress.git (push)
origin  git@github.com:znz/znz.github.io (fetch)
origin  git@github.com:znz/znz.github.io (push)
origin  ssh://git@bitbucket.org/znz/blog.n-z.jp.git (push)
% git fetch --prune octopress
remote: Counting objects: 33, done.
remote: Compressing objects: 100% (18/18), done.
remote: Total 24 (delta 16), reused 14 (delta 6)
Unpacking objects: 100% (24/24), done.
From git://github.com/imathis/octopress
 * [new branch]      jekyll-1-3 -&gt; octopress/jekyll-1-3
   64ba603..78defff  master     -&gt; octopress/master
%
</code></p>

<p>差分を確認してからマージしました。</p>

<p><code>console
% git diff source...octopress/master
% git merge octopress/master
Auto-merging Rakefile
Merge made by the 'recursive' strategy.
 .themes/classic/sass/base/_theme.scss                     |  2 +-
 .themes/classic/source/_includes/archive_post.html        |  2 +-
 .themes/classic/source/_includes/custom/category_feed.xml |  4 +-
 .themes/classic/source/_includes/disqus.html              |  2 +-
 .themes/classic/source/_includes/head.html                |  4 +-
 .themes/classic/source/atom.xml                           |  4 +-
 README.markdown                                           |  2 +-
 Rakefile                                                  |  6 +--
 plugins/category_generator.rb                             |  3 +-
 plugins/code_block.rb                                     |  2 +-
 plugins/date.rb                                           | 53 +++++++++----------------
 plugins/gist_tag.rb                                       |  8 +++-
 plugins/include_code.rb                                   |  2 +-
 plugins/jsfiddle.rb                                       |  2 +-
 14 files changed, 41 insertions(+), 55 deletions(-)
</code></p>

<p>themes も更新されているので、
<a href="http://octopress.org/docs/updating/">Updating Octopress</a>
の手順に従ってアップデートしました。</p>

<p><code>console
 % bundle install
 Using rake (0.9.2.2)
 Using RedCloth (4.2.9)
 Using chunky_png (1.2.5)
 Using fast-stemmer (1.0.1)
 Using classifier (1.3.3)
 Using fssm (0.2.9)
 Using sass (3.2.9)
 Using compass (0.12.2)
 Using directory_watcher (1.4.1)
 Using haml (3.1.7)
 Using kramdown (0.13.8)
 Using liquid (2.3.0)
 Using syntax (1.0.0)
 Using maruku (0.6.1)
 Using posix-spawn (0.3.6)
 Using yajl-ruby (1.1.0)
 Using pygments.rb (0.3.4)
 Using jekyll (0.12.0)
 Using rack (1.5.2)
 Using rack-protection (1.5.0)
 Using rb-fsevent (0.9.1)
 Using rdiscount (2.0.7.3)
 Using rubypants (0.2.0)
 Using sass-globbing (1.0.0)
 Using tilt (1.3.7)
 Using sinatra (1.4.2)
 Using stringex (1.4.0)
 Using bundler (1.3.5)
 Your bundle is complete!
 Use `bundle show [gemname]` to see where a bundled gem is installed.
 % bundle exec rake update_source
 mkdir source.old
 cp -r source/. source.old
 ## Copied source into source.old/
 cp -r --remove-destination .themes/classic/source/. source
 cp -r --remove-destination source.old/_includes/custom/. source/_includes/custom/
 cp source.old/favicon.png source
 ## Updated source ##
 % bundle exec rake update_style
 mv sass sass.old
 ## Moved styles into sass.old/
 cp -r .themes/classic/sass/ sass
 cp -r sass/custom/. sass.old/custom
 ## Updated Sass ##
 %
</code></p>

<p><code>git diff</code> で確認するとローカルでの変更が消えてしまっていたので、
<code>git checkout ファイルパス</code> で戻したり、
再適用したりしてからコミットしました。</p>

<h2>rake isolate</h2>

<p><a href="http://rcmdnk.github.io/blog/2013/10/07/blog-octopress/">Octopressでチェック用に高速にgenerate/previewする</a>
で紹介されていた
<code>rake isolate[filename]</code>
を使い始めてみました。</p>

<h3>ファイル名の指定を省略する</h3>

<p>最終更新時刻でソートして最新だけ、という絞り込みをしたかったのですが、
zsh の機能だけでうまく表現できなかったので、
<a href="http://qiita.com/mollifier/items/1c4a4930a89aa75e5ced">zsh で find を使わずに簡単にファイルを絞り込む</a>
を参考にして1分以内に変更されたファイルだけという絞り込みで妥協することにしました。</p>

<p><code>console
 bundle exec rake "isolate[$(echo source/_posts/*.markdown(mm-1))]"
 bundle exec rake preview
 bundle exec rake integrate
</code></p>

<h3>rake integrate 忘れを防ぐ</h3>

<p>isolate した状態で deploy する事故を防ぐために
<a href="https://github.com/imathis/octopress/pull/1444">check stash dir before deploy</a>
という変更を入れてから使うようにしてみました。</p>

<p>Rakefile をみてみると</p>

<p><code>ruby Rakefile
desc "Generate website and deploy"
task :gen_deploy =&gt; [:integrate, :generate, :deploy] do
end
</code></p>

<p>となっているので、
<code>bundle exec rake deploy</code> ではなく
<code>bundle exec rake gen_deploy</code> を使うようにしていれば
大丈夫そうですが、
念のためチェックした方が安全だと思いました。</p>

<p>octopress の fork で作成したこの変更は</p>

<p><code>console
git pull git@github.com:znz/octopress.git check-stash-before-deploy
</code></p>

<p>で手元の source ブランチに取り込みました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[githubでhttpsのURLを指定してもgitプロトコルやssh経由にする方法]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-28-git-insteadof.html"/>
    <updated>2013-11-28T22:22:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/git-insteadof</id>
    <content type="html"><![CDATA[<p>要約すると <code>url.&lt;base&gt;.inteadOf</code> や <code>url.&lt;base&gt;.pushInsteadOf</code>
を使えば良いという話です。
github 以外でも使えます。</p>

<!--more-->


<h2>設定例</h2>

<p>自分では今のところ、以下の設定にしています。</p>

<p>最初の
<code>[url "git@github.com:"]</code>
のセクションは URL の指定として
<code>https:</code> や <code>git:</code> を使っていても
<code>git push</code> のときには <code>ssh</code> 経由にする、
という意味になります。</p>

<p>次の
<code>[url "git://github.com/"]</code>
は、その他の <code>git fetch</code> や <code>git pull</code> の時は
<code>https:</code> の代わりに <code>git:</code> を使うという意味になります。</p>

<p>```ini ~/.gitconfig
[url &ldquo;git@github.com:&rdquo;]</p>

<pre><code>pushInsteadOf = git://github.com/
pushInsteadOf = https://github.com/
</code></pre>

<p>[url &ldquo;git://github.com/&rdquo;]</p>

<pre><code>insteadOf = https://github.com/
</code></pre>

<p>```</p>

<h2>pushInsteadOf なしの場合</h2>

<p><code>pushInsteadOf</code> を指定せずに <code>insteadOf</code> だけの場合は
<code>git push</code> の時も <code>insteadOf</code> の設定が使われます。</p>

<p>例えば設定例とは逆に、
proxy を通さないといけないとかの理由で
すべて https に統一したいのなら
以下のような設定になると思います。</p>

<p>```ini ~/.gitconfig
[url &ldquo;<a href="https://github.com/">https://github.com/</a>&rdquo;]</p>

<pre><code>insteadOf = git@github.com:
insteadOf = git://github.com/
</code></pre>

<p>```</p>

<h2>コマンドでの設定方法</h2>

<p><code>git config</code> コマンド経由で <code>pushInsteadOf</code> を設定するなら、
以下のように指定します。</p>

<p><code>~/.gitconfig</code> に <code>github.token</code> などの秘密にすべき情報が入っていて
共有しにくい時にはコマンドで設定できた方が便利です。</p>

<p><code>bash
GITHUB_URL_PREFIX="url.git@github.com:"
git config --global --remove-section "$GITHUB_URL_PREFIX" || :
git config --global       "$GITHUB_URL_PREFIX".pushInsteadOf "git://github.com/"
git config --global --add "$GITHUB_URL_PREFIX".pushInsteadOf "https://github.com/"
</code></p>

<h2>設定確認方法</h2>

<p>実際にどういう URL が使われるのかは
<code>git remote -v</code>
で確認できます。</p>

<p><code>.git/config</code> の <code>remote</code> の <code>url</code> と見比べると
ちゃんと設定が反映されていることがわかると思います。</p>

<p>```console
$ git remote -v
origin  git://github.com/znz/rbenv-plug.git (fetch)
origin  git@github.com:znz/rbenv-plug.git (push)
$ cat .git/config
[core]</p>

<pre><code>repositoryformatversion = 0
filemode = true
bare = false
logallrefupdates = true
ignorecase = true
precomposeunicode = false
</code></pre>

<p>[remote &ldquo;origin&rdquo;]</p>

<pre><code>url = https://github.com/znz/rbenv-plug.git
fetch = +refs/heads/*:refs/remotes/origin/*
</code></pre>

<p>[branch &ldquo;master&rdquo;]</p>

<pre><code>remote = origin
merge = refs/heads/master
</code></pre>

<p>```</p>

<h2>URL の選ばれ方</h2>

<p>github の URL で説明していますが、
git の機能なので他の URL でも当然使えます。</p>

<p>URL は最初の部分だけ見て、最長一致するものが使われるようです。
git 1.8.4.3 の <code>git config --help</code> に
<code>When more than one insteadOf strings match a given URL, the longest match is used.</code>
と書いてあります。</p>

<h2>まとめ</h2>

<p><code>~/.gitconfig</code> での記述例の話はよくあるのですが、
コマンドでの設定方法とか、
設定の確認方法を見かけたことがなかったので、
まとめてみました。</p>

<p>そして github 以外でも使えるという話も付け加えておきました。</p>
]]></content>
  </entry>
  
</feed>
