<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gitlab | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/gitlab/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-12-02T02:05:30+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[gitlab-ci-multi-runner パッケージから gitlab-runner パッケージへの更新]]></title>
    <link href="http://blog.n-z.jp/blog/2017-11-06-gitlab-runner.html"/>
    <updated>2017-11-06T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/gitlab-runner</id>
    <content type="html"><![CDATA[<p>GitLab Runner が 10.0.0 だとパッケージ名が gitlab-runner に変わってしまって、そのままだと 9.5.1 から更新されなくなってしまったので、対応しました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 16.04.3 LTS</li>
<li>gitlab-ci-multi-runner (9.5.1) から gitlab-runner (10.1.0)</li>
</ul>


<h2>GitLab Runner とは?</h2>

<p><a href="https://docs.gitlab.com/runner/">GitLab Runner</a> とは GitLab CI のジョブを実行する部分のことです。</p>

<p>詳細は<a href="/blog/2017-07-09-gitlab-runner.html">インストール時の記事</a>を参照してください。</p>

<h2>インストール方法</h2>

<p><a href="https://docs.gitlab.com/runner/install/linux-repository.html">Install GitLab Runner using the official GitLab repositories - GitLab Documentation</a> が gitlab-runner に改名後のインストール方法になっているので、参考にして移行しました。</p>

<h2>移行方法</h2>

<p>簡単にまとめると apt の設定を変えて <code>gitlab-runner</code> パッケージを入れ直すだけでした。</p>

<p>GitLab (GitLab CI) への登録や <code>/etc/gitlab-runner/config.toml</code> はそのままで大丈夫でした。</p>

<h2>apt-line の更新</h2>

<p><code>/etc/apt/sources.list.d/</code> 以下に入っている</p>

<pre><code>deb https://packages.gitlab.com/runner/gitlab-ci-multi-runner/ubuntu xenial main
</code></pre>

<p>の apt-line を削除して、</p>

<pre><code>deb https://packages.gitlab.com/runner/gitlab-runner/ubuntu xenial main
</code></pre>

<p>を追加しました。</p>

<h2>pinning 設定変更</h2>

<p><code>/etc/apt/preferences.d/pin-gitlab-runner.pref</code> で <code>gitlab-ci-multi-runner</code> パッケージを <code>packages.gitlab.com</code> のものを優先するように設定していたのを、 <code>gitlab-runner</code> パッケージに変更しました。</p>

<h2>パッケージのインストール</h2>

<p><code>gitlab-runner</code> パッケージをインストールすると自動的に <code>gitlab-ci-multi-runner</code> パッケージと置き換わりました。</p>

<p><code>gitlab-ci-multi-runner</code> パッケージを purge しても <code>/etc/gitlab-runner/config.toml</code> が消えたりすることもないので、特に注意するような点はなさそうでした。</p>

<h2>ansible での例</h2>

<p><a href="https://github.com/znz/ansible-role-gitlab-runner/commit/616a9da561360fbae940940aec49483a5ee1ce9b">Use gitlab-runner instead of gitlab-ci-multi-runner</a> のように変更しました。</p>

<p>移行措置として、 gitlab-ci-multi-runner の apt-line を消す処理も入れています。</p>

<h2>まとめ</h2>

<p><code>gitlab-ci-multi-runner</code> パッケージから <code>gitlab-runner</code> パッケージへの移行は GitLab (GitLab CI) への登録し直しが必要だと面倒そうと思って、 10.0.x の間は躊躇してそのままにしてしまっていましたが、 vagrant 環境で確認したところ、パッケージの更新だけで大丈夫ということがわかったので、問題なく上げることができました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.gitlab-ci.ymlでDokkuとHerokuにdeployする]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-13-gitlab-ci-heroku.html"/>
    <updated>2017-07-13T21:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/gitlab-ci-heroku</id>
    <content type="html"><![CDATA[<p>GitLab と Dokku (と一部 Heroku) を使って CI/CD (Continuous Integration / Continuous Deployment) 環境を作ってみた話の続きです。
CI 部分のメインとなる <code>.gitlab-ci.yml</code> の設定の別パターンの話です。
review 環境は Dokku を使って、 staging と production に Heroku を使います。</p>

<p><a href="/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 16.04.2 LTS</li>
<li>Omnibus GitLab 9.1.4-ce.0 (インストール時) から 9.3.5-ce.0 (記事執筆時)</li>
<li>gitlab-ci-multi-runner 9.2.0 (インストール時) から 9.3.0 (記事執筆時)</li>
<li>Dokku 0.9.4 (インストール時) から 0.10.2 (記事執筆時)</li>
</ul>


<h2>構成</h2>

<p>今回は、
git push すると CI が走り、 master 以外のブランチなら review 環境にデプロイされて、
master ブランチなら staging 環境にデプロイして、
tag が push されたら production 環境にデプロイされる、
という状態にします。</p>

<p>そして、 staging と production の deploy 先は Dokku ではなく Heroku を使います。</p>

<h2>.gitlab-ci.yml</h2>

<p>この後は <code>.gitlab-ci.yml</code> に設定する内容の説明になります。</p>

<h2>image 設定</h2>

<p>ここは前回と同じです。</p>

<p>ここでは <a href="https://hub.docker.com/r/_/ruby/">library/ruby - Docker Hub</a> の 2.3.3 を使いました。
<code>.ruby-version</code> や <code>Gemfile</code> と同じバージョンを指定します。</p>

<pre><code>image: ruby:2.3.3
</code></pre>

<p>2.3 だと 2.3.4 になるので、 2.3.3 まで指定しています。
2.3.4 はセキュリティアップデートではなかったので、まだ 2.3.3 のままですが、様子をみてあげる予定です。</p>

<h2>cache 設定</h2>

<p>ここも前回と同じです。</p>

<p><a href="https://docs.gitlab.com/ce/ci/yaml/README.html#cache-key">cache:key</a> から per-branch caching を選んで以下のように設定しました。</p>

<pre><code>cache:
  key: "$CI_COMMIT_REF_NAME"
  untracked: true
</code></pre>

<h2>環境変数設定</h2>

<p>ここも前回と同じです。</p>

<p><a href="https://hub.docker.com/r/_/postgres/">library/postgres - Docker Hub</a> で使う <code>POSTGRES_PASSWORD</code> などと、それに接続するための Rails 用の <code>DATABASE_URL</code>、
デプロイ用の省略表記のための <code>DOKKU</code> などを設定しています。</p>

<p><code>APP_NAME</code> と <code>DB_NAME</code> は <code>CI_ENVIRONMENT_SLUG</code> を使ってブランチごとに自動生成される名前を使っています。</p>

<pre><code>variables:
  # for test
  POSTGRES_DB: dbname
  POSTGRES_USER: dbuser
  POSTGRES_PASSWORD: dbpass
  DATABASE_URL: "postgres://dbuser:dbpass@postgres:5432/dbname"
  # for deploy
  DOKKU: ssh dokku@$DOKKU_HOST
  APP_NAME: $CI_ENVIRONMENT_SLUG
  DB_NAME: $CI_ENVIRONMENT_SLUG-database
</code></pre>

<h2>stages 設定</h2>

<p>ここも設定内容は前回と同じですが、 staging と production が別 Pipeline になって、それぞれで test が実行されるのが違います。</p>

<p>最初に説明したように、 test の後に review、 staging、 production となるように stages を設定します。</p>

<pre><code>stages:
  - test
  - review
  - staging
  - production
</code></pre>

<h2>before_script</h2>

<p>ここも前回と同じです。</p>

<p>テスト用の before_script を設定しています。(デプロイの方は個別に上書きしています。)</p>

<p>apt や bundler ではキャッシュ用のディレクトリである <code>/cache</code> を使うように指定しています。</p>

<p>開発環境と共通になっている都合上、 sqlite3 を入れています。
JavaScript ランタイムも必要なので、 nodejs も入れています。</p>

<pre><code>before_script:
  - 'apt-get update -qq &amp;&amp; apt-get -o dir::cache::archives="/cache/apt" install -y -qq sqlite3 libsqlite3-dev nodejs'
  - ruby -v
  - gem install bundler --no-ri --no-rdoc
  - bundle install --jobs $(nproc) --path=/cache/bundler
  - ln -nfs .test.env .env
</code></pre>

<h2>デプロイ用の before_script</h2>

<p>ここも前回と同じです。</p>

<p><a href="https://docs.gitlab.com/ce/ci/yaml/README.html#hidden-keys">Hidden keys</a>に書いてあるようにキーが <code>.</code> で始まるものは無視されるので、
YAML のアンカーを使って参照用に使えます。</p>

<p>ruby image には openssh-client は入っていたのですが、他の image に変えても動くように参考にした <a href="https://docs.gitlab.com/ce/ci/ssh_keys/README.html">Using SSH keys</a> に書いてあった通り、 openssh-client のインストール手順も入れています。</p>

<p><code>~/.ssh/config</code> で Hostname や Port や User などを指定したかったことがあったので、設定できるようにしました。</p>

<pre><code>.before_ssh: &amp;before_ssh
  # https://docs.gitlab.com/ce/ci/ssh_keys/README.html
  - 'which ssh-agent || ( apt-get update -y &amp;&amp; apt-get -o dir::cache::archives="/cache/apt" install -y openssh-client )'
  - eval $(ssh-agent -s)
  - ssh-add &lt;(echo "$SSH_PRIVATE_KEY")
  - mkdir -p ~/.ssh
  # Set `ssh-keyscan $DOKKU_HOST` to SSH_SERVER_HOSTKEYS
  - '[[ -f /.dockerenv ]] &amp;&amp; echo "$SSH_SERVER_HOSTKEYS" &gt; ~/.ssh/known_hosts'
  - '[[ -f /.dockerenv ]] &amp;&amp; echo "$SSH_CONFIG" &gt; ~/.ssh/config'
</code></pre>

<h2>GitLab の Web での環境変数設定</h2>

<p>ここも前回とほぼ同じですが、 production と staging の deploy 用の API 鍵を設定しているところが違います。</p>

<p>ここで <code>.gitlab-ci.yml</code> の話は中断して、 Secret variables の設定の話です。</p>

<p>GitLab で該当プロジェクトを開いて、 Settings の Pipelines から Secret variables で <code>SSH_PRIVATE_KEY</code> などを設定します。</p>

<p>ここでは、以下のように設定しました。</p>

<ul>
<li><code>DOKKU_HOST</code> : Dokku に ssh するときのホスト名 (<code>dokku.example.com</code> など)</li>
<li><code>DOKKU_DOMAIN</code> : Dokku の VHOST に設定したドメイン (<code>10.1.2.3.xip.io</code> など)</li>
<li><code>SSH_PRIVATE_KEY</code> : 秘密鍵 (<code>~/.ssh/id_gitlab</code> など) の内容</li>
<li><code>SSH_SERVER_HOSTKEYS</code> : <code>ssh-keyscan $DOKKU_HOST</code> の出力</li>
<li><code>SSH_CONFIG</code> : <code>~/.ssh/config</code> に設定したい内容</li>
<li><code>HEROKU_PRODUCTION_API_KEY</code> : <a href="https://dashboard.heroku.com/account">Manage Account</a> から production 用の Heroku アカウントの API key</li>
<li><code>HEROKU_STAGING_API_KEY</code> : <a href="https://dashboard.heroku.com/account">Manage Account</a> から staging 用の Heroku アカウントの API key</li>
</ul>


<p><code>SSH_PRIVATE_KEY</code> は Protected を Yes にすると review 環境への deploy に失敗するので、 No のままにする必要がありそうです。</p>

<p><code>HEROKU_PRODUCTION_API_KEY</code> や <code>HEROKU_STAGING_API_KEY</code> は Protected branch などの運用次第で Protected を Yes にできそうです。</p>

<h2>review 環境への deploy 用 script</h2>

<p>ここも前回とほぼ同じです。</p>

<p>まず Dokku でアプリとデータベースを作成して接続します。
2度目以降は同じアプリを更新するので、作成などのエラーは無視します。</p>

<p>環境変数は <code>TZ</code> と <code>RAILS_SERVE_STATIC_FILES</code> あたりがほぼ必須だと思いますが、他は staging 環境や review 環境用に独自に設定できるようにしています。
<code>RACK_DEV_MARK_ENV</code> は rack-dev-mark gem の設定です。</p>

<p><code>Procfile</code> で web だけではなく clockwork gem を使ったプロセスも動かしている関係で <code>letter_opener</code> 用のディレクトリをマウントしていますが、
<code>/usr/bin/find '/var/lib/dokku/data/storage/letter_opener' -mtime '+2' -delete</code> のような感じで古いファイルは自動削除する予定です。
(自動削除はまだしていません。)</p>

<p>デプロイ本体部分の <code>git push</code> は、単純に <code>master</code> だとうまくいかないことがあったので、 <code>HEAD:refs/heads/master</code> という指定にしています。
Heroku にデプロイするときも git でデプロイするなら同様になります。</p>

<p><code>db:seed</code> の実行は <code>ssh</code> に <code>-tt</code> をつけて強制的に tty を確保する必要がありました。</p>

<pre><code>.deploy_script: &amp;deploy_script
  - $DOKKU apps:create $APP_NAME || echo $?
  # require `sudo dokku plugin:install https://github.com/dokku/dokku-postgres`
  - $DOKKU postgres:create $DB_NAME || echo $?
  - $DOKKU postgres:link $DB_NAME $APP_NAME || echo $?
  - $DOKKU config:set --no-restart $APP_NAME
    TZ=Asia/Tokyo
    RAILS_SERVE_STATIC_FILES=1
    NO_FORCE_SSL=1
    RACK_DEV_MARK_ENV=review
  - git push dokku@$DOKKU_HOST:$APP_NAME HEAD:refs/heads/master
  - $DOKKU -tt run $APP_NAME bundle exec rake db:seed
</code></pre>

<p>前回と違って <code>RAILS_ENV</code> の変更をしていなかったり、 <code>letter_opener_web</code> や <code>seed_fu</code> は使っていないという違いがあります。</p>

<h2>test stage のジョブ</h2>

<p>ここも前回と同じです。</p>

<p>postgres を使って rake でテストを走らせます。</p>

<p>データベースの設定は <code>DATABASE_URL</code> で指定しているので、 <code>config/database.yml</code> は特に何もしていません。</p>

<pre><code>rake:
  stage: test
  services:
    - postgres:latest
  script:
    - bundle exec rake db:setup RAILS_ENV=test
    - bundle exec rake
</code></pre>

<p>rubocop なども使うなら同様に設定します。</p>

<h2>production 環境への deploy</h2>

<p>順番が前後しますが、最初に production 環境への deploy 設定です。</p>

<p>production 環境はちゃんと名前が決まっているので <code>APP_NAME</code> を上書きします。</p>

<p>Heroku への deploy には <a href="https://docs.gitlab.com/ce/ci/examples/test-and-deploy-ruby-application-to-heroku.html">Test and Deploy a ruby application</a> に書いてある dpl gem を使っています。
git push による deploy の方が好みなら git push を使っても良いと思います。</p>

<p>environment を設定することで GitLab の Web のプロジェクトの Pipelines の Environments からリンクが貼られます。</p>

<p>only で tags を指定することで tag が push されたら開始するようにしています。</p>

<p>only で master のみに制限しています。</p>

<pre><code>production:
  stage: production
  variables:
    APP_NAME: hello-app
  script:
  - gem install dpl
  - dpl --provider=heroku --app=$APP_NAME --api-key=$HEROKU_PRODUCTION_API_KEY
  environment:
    name: production
    url: https://$APP_NAME.herokuapp.com/
  only:
  - tags
</code></pre>

<h2>staging 環境への deploy</h2>

<p>production 環境と同様に staging 環境への deploy 設定をしています。</p>

<p><code>APP_NAME</code> や API key や URL などが違う以外は基本的に production と同じです。</p>

<pre><code>staging:
  stage: staging
  variables:
    APP_NAME: hello-staging-app
  script:
  - gem install dpl
  - dpl --provider=heroku --app=$APP_NAME --api-key=$HEROKU_STAGING_API_KEY
  environment:
    name: staging
    url: https://$APP_NAME.herokuapp.com/
  only:
  - master
</code></pre>

<h2>review 環境への deploy</h2>

<p>review 環境への deploy は前回と同じです。</p>

<p>deploy 本体の script は事前に定義した <code>deploy_script</code> を使います。
結局ここでしか使っていないので、直接ここに書いても良かったかもしれません。</p>

<p>environment は name に <code>review/</code> をつけることで複数の review 環境が同時に存在している時に折りたたまれるようになります。</p>

<p>review 環境は動的に作ったり消したりするので、 https ではなく http になっています。</p>

<p><code>on_stop</code> を指定することで環境の削除ジョブを指定できます。</p>

<p>only と except で master 以外のブランチの時に review 環境が作成されるようにしています。</p>

<pre><code>review:
  stage: review
  before_script: *before_ssh
  script: *deploy_script
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_ENVIRONMENT_SLUG.$DOKKU_DOMAIN
    on_stop: stop_review
  only:
    - branches
  except:
    - master
</code></pre>

<h2>review 環境の削除</h2>

<p>ここも前回と同じです。</p>

<p><code>action: stop</code> で環境を削除するジョブとして設定しています。</p>

<p><code>when: manual</code> で手動実行するように設定していますが、基本的にはマージリクエストがマージされた時に Remove source branch にチェックを入れて、自動で停止しています。</p>

<p><code>GIT_STRATEGY: none</code> で git 関連の操作はせずに速やかに停止処理のみするようにしています。</p>

<p>postgres は使用中だと停止できないので、先にアプリケーションを削除してからデータベースを削除しています。
自動実行なので <code>--force</code> で確認なしに削除するようにしています。</p>

<pre><code>stop_review:
  stage: review
  variables:
    GIT_STRATEGY: none
  before_script: *before_ssh
  script:
    - $DOKKU apps:destroy $CI_ENVIRONMENT_SLUG --force || echo $?
    - $DOKKU postgres:destroy $CI_ENVIRONMENT_SLUG-database --force || echo $?
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  only:
    - branches
  except:
    - master
</code></pre>

<h2>まとめ</h2>

<p>GitLab CI と Dokku と Heroku を組み合わせて CI/CD 環境を作る例を紹介しました。</p>

<p>今回紹介した様に、 Heroku に似ていてもある程度違いのある Dokku で自由に review 環境を作成して、 production に近い方が良い staging 環境は Heroku を使うというのが、自前の環境のリソースには余裕がある場合には良いのではないでしょうか。</p>

<p>GitLab + Dokku 関連の記事は<a href="/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.gitlab-ci.ymlでDokkuにdeployする]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-11-gitlab-ci-dokku.html"/>
    <updated>2017-07-11T22:15:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/gitlab-ci-dokku</id>
    <content type="html"><![CDATA[<p>GitLab と Dokku (と一部 Heroku) を使って CI/CD (Continuous Integration / Continuous Deployment) 環境を作ってみた話の続きです。
CI 部分のメインとなる <code>.gitlab-ci.yml</code> の設定の話です。</p>

<p><a href="/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 16.04.2 LTS</li>
<li>Omnibus GitLab 9.1.4-ce.0 (インストール時) から 9.3.5-ce.0 (記事執筆時)</li>
<li>gitlab-ci-multi-runner 9.2.0 (インストール時) から 9.3.0 (記事執筆時)</li>
<li>Dokku 0.9.4 (インストール時) から 0.10.2 (記事執筆時)</li>
</ul>


<h2>構成</h2>

<p><a href="https://docs.gitlab.com/ce/ci/README.html">GitLab Continuous Integration (GitLab CI)</a>の冒頭の画像にあるように、
git push すると CI が走り、 master 以外のブランチなら review 環境にデプロイされて、
master ブランチなら staging 環境にデプロイして、その後、手動で production 環境にデプロイできる、
という状態にします。</p>

<h2>.gitlab-ci.yml</h2>

<p>この後は <code>.gitlab-ci.yml</code> に設定する内容の説明になります。</p>

<h2>image 設定</h2>

<p>ここでは <a href="https://hub.docker.com/r/_/ruby/">library/ruby - Docker Hub</a> の 2.3.3 を使いました。
<code>.ruby-version</code> や <code>Gemfile</code> と同じバージョンを指定します。</p>

<pre><code>image: ruby:2.3.3
</code></pre>

<p>2.3 だと 2.3.4 になるので、 2.3.3 まで指定しています。
2.3.4 はセキュリティアップデートではなかったので、まだ 2.3.3 のままですが、様子をみてあげる予定です。</p>

<h2>cache 設定</h2>

<p><a href="https://docs.gitlab.com/ce/ci/yaml/README.html#cache-key">cache:key</a> から per-branch caching を選んで以下のように設定しました。</p>

<pre><code>cache:
  key: "$CI_COMMIT_REF_NAME"
  untracked: true
</code></pre>

<h2>環境変数設定</h2>

<p><a href="https://hub.docker.com/r/_/postgres/">library/postgres - Docker Hub</a> で使う <code>POSTGRES_PASSWORD</code> などと、それに接続するための Rails 用の <code>DATABASE_URL</code>、
デプロイ用の省略表記のための <code>DOKKU</code> などを設定しています。</p>

<p><code>APP_NAME</code> と <code>DB_NAME</code> は <code>CI_ENVIRONMENT_SLUG</code> を使ってブランチごとに自動生成される名前を使っています。</p>

<pre><code>variables:
  # for test
  POSTGRES_DB: dbname
  POSTGRES_USER: dbuser
  POSTGRES_PASSWORD: dbpass
  DATABASE_URL: "postgres://dbuser:dbpass@postgres:5432/dbname"
  # for deploy
  DOKKU: ssh dokku@$DOKKU_HOST
  APP_NAME: $CI_ENVIRONMENT_SLUG
  DB_NAME: $CI_ENVIRONMENT_SLUG-database
</code></pre>

<h2>stages 設定</h2>

<p>最初に説明したように、 test の後に review、 staging の後に production となるように stages を設定します。</p>

<pre><code>stages:
  - test
  - review
  - staging
  - production
</code></pre>

<h2>before_script</h2>

<p>テスト用の before_script を設定しています。(デプロイの方は個別に上書きしています。)</p>

<p>apt や bundler ではキャッシュ用のディレクトリである <code>/cache</code> を使うように指定しています。</p>

<p>開発環境と共通になっている都合上、 sqlite3 を入れています。
JavaScript ランタイムも必要なので、 nodejs も入れています。</p>

<pre><code>before_script:
  - 'apt-get update -qq &amp;&amp; apt-get -o dir::cache::archives="/cache/apt" install -y -qq sqlite3 libsqlite3-dev nodejs'
  - ruby -v
  - gem install bundler --no-ri --no-rdoc
  - bundle install --jobs $(nproc) --path=/cache/bundler
  - ln -nfs .test.env .env
</code></pre>

<h2>デプロイ用の before_script</h2>

<p><a href="https://docs.gitlab.com/ce/ci/yaml/README.html#hidden-keys">Hidden keys</a>に書いてあるようにキーが <code>.</code> で始まるものは無視されるので、
YAML のアンカーを使って参照用に使えます。</p>

<p>ruby image には openssh-client は入っていたのですが、他の image に変えても動くように参考にした <a href="https://docs.gitlab.com/ce/ci/ssh_keys/README.html">Using SSH keys</a> に書いてあった通り、 openssh-client のインストール手順も入れています。</p>

<p><code>~/.ssh/config</code> で Hostname や Port や User などを指定したかったことがあったので、設定できるようにしました。</p>

<pre><code>.before_ssh: &amp;before_ssh
  # https://docs.gitlab.com/ce/ci/ssh_keys/README.html
  - 'which ssh-agent || ( apt-get update -y &amp;&amp; apt-get -o dir::cache::archives="/cache/apt" install -y openssh-client )'
  - eval $(ssh-agent -s)
  - ssh-add &lt;(echo "$SSH_PRIVATE_KEY")
  - mkdir -p ~/.ssh
  # Set `ssh-keyscan $DOKKU_HOST` to SSH_SERVER_HOSTKEYS
  - '[[ -f /.dockerenv ]] &amp;&amp; echo "$SSH_SERVER_HOSTKEYS" &gt; ~/.ssh/known_hosts'
  - '[[ -f /.dockerenv ]] &amp;&amp; echo "$SSH_CONFIG" &gt; ~/.ssh/config'
</code></pre>

<h2>GitLab の Web での環境変数設定</h2>

<p>ここで <code>.gitlab-ci.yml</code> の話は中断して、 Secret variables の設定の話です。</p>

<p>GitLab で該当プロジェクトを開いて、 Settings の Pipelines から Secret variables で <code>SSH_PRIVATE_KEY</code> などを設定します。</p>

<p>ここでは、以下のように設定しました。</p>

<ul>
<li><code>DOKKU_HOST</code> : Dokku に ssh するときのホスト名 (<code>dokku.example.com</code> など)</li>
<li><code>DOKKU_DOMAIN</code> : Dokku の VHOST に設定したドメイン (<code>10.1.2.3.xip.io</code> など)</li>
<li><code>SSH_PRIVATE_KEY</code> : 秘密鍵 (<code>~/.ssh/id_gitlab</code> など) の内容</li>
<li><code>SSH_SERVER_HOSTKEYS</code> : <code>ssh-keyscan $DOKKU_HOST</code> の出力</li>
<li><code>PRODUCTION_DOKKU_HOST</code> : production 用の Dokku に ssh するときのホスト名</li>
<li><code>SSH_CONFIG</code> : <code>~/.ssh/config</code> に設定したい内容</li>
</ul>


<p><code>SSH_PRIVATE_KEY</code> は Protected を Yes にしたいところですが、 review 環境への deploy に失敗するので、 No のままにする必要がありました。</p>

<h2>review 環境への deploy 用 script</h2>

<p>まず Dokku でアプリとデータベースを作成して接続します。
2度目以降は同じアプリを更新するので、作成などのエラーは無視します。</p>

<p>環境変数は <code>TZ</code> と <code>RAILS_SERVE_STATIC_FILES</code> あたりがほぼ必須だと思いますが、他は staging 環境や review 環境用に独自に設定できるようにしています。
<code>RACK_DEV_MARK_ENV</code> は rack-dev-mark gem の設定です。</p>

<p><code>Procfile</code> で web だけではなく clockwork gem を使ったプロセスも動かしている関係で <code>letter_opener</code> 用のディレクトリをマウントしていますが、
<code>/usr/bin/find '/var/lib/dokku/data/storage/letter_opener' -mtime '+2' -delete</code> のような感じで古いファイルは自動削除する予定です。
(自動削除はまだしていません。)</p>

<p>デプロイ本体部分の <code>git push</code> は、単純に <code>master</code> だとうまくいかないことがあったので、 <code>HEAD:refs/heads/master</code> という指定にしています。
Heroku にデプロイするときも git でデプロイするなら同様になります。</p>

<p><code>db:seed</code> の実行は <code>ssh</code> に <code>-tt</code> をつけて強制的に tty を確保する必要がありました。</p>

<pre><code>.deploy_script: &amp;deploy_script
  - $DOKKU apps:create $APP_NAME || echo $?
  # require `sudo dokku plugin:install https://github.com/dokku/dokku-postgres`
  - $DOKKU postgres:create $DB_NAME || echo $?
  - $DOKKU postgres:link $DB_NAME $APP_NAME || echo $?
  - $DOKKU config:set --no-restart $APP_NAME
    TZ=Asia/Tokyo
    RAILS_SERVE_STATIC_FILES=1
    NO_FORCE_SSL=1
    USE_LETTER_OPENER_WEB=1
    RACK_DEV_MARK_ENV=review
    RACK_ENV=review
    RAILS_ENV=review
  - $DOKKU storage:mount $APP_NAME /var/lib/dokku/data/storage/letter_opener/$APP_NAME:/app/tmp/letter_opener || echo $?
  - git push dokku@$DOKKU_HOST:$APP_NAME HEAD:refs/heads/master
  - $DOKKU -tt run $APP_NAME bundle exec rake db:seed db:seed_fu
</code></pre>

<h2>test stage のジョブ</h2>

<p>postgres を使って rake でテストを走らせます。</p>

<p>データベースの設定は <code>DATABASE_URL</code> で指定しているので、 <code>config/database.yml</code> は特に何もしていません。</p>

<pre><code>rake:
  stage: test
  services:
    - postgres:latest
  script:
    - bundle exec rake db:setup RAILS_ENV=test
    - bundle exec rake
</code></pre>

<p>rubocop なども使うなら同様に設定します。</p>

<h2>production 環境への deploy</h2>

<p>順番が前後しますが、最初に production 環境への deploy 設定です。</p>

<p>production 環境はちゃんと名前が決まっているので <code>APP_NAME</code> を上書きします。</p>

<p><code>before_script</code> はテスト環境用のものを <code>before_ssh</code> で上書きします。
(デプロイ用のジョブの方が多いので逆にテスト用のジョブで <code>before_script</code> を上書きする方がよかったかもしれません。)</p>

<p>production 環境は環境がすでに整っているはずなので、デプロイは <code>git push</code> による更新のみです。</p>

<p>environment を設定することで GitLab の Web のプロジェクトの Pipelines の Environments からリンクが貼られます。</p>

<p><code>when: manual</code> にすることで手動で開始するようにしています。</p>

<p>only で master のみに制限しています。</p>

<pre><code>production:
  stage: production
  variables:
    APP_NAME: hello-app
  before_script: *before_ssh
  script:
    - git push dokku@$PRODUCTION_DOKKU_HOST:$APP_NAME HEAD:refs/heads/master
  environment:
    name: production
    url: https://hello-app.example.jp/
  when: manual
  only:
    - master
</code></pre>

<h2>staging 環境への deploy</h2>

<p>production 環境と同様に staging 環境への deploy 設定をしています。</p>

<p>テストが通ったら自動実行されるのと <code>APP_NAME</code> や URL などが違う以外は基本的に production と同じです。</p>

<pre><code>staging:
  stage: staging
  variables:
    APP_NAME: hello-app-staging
  before_script: *before_ssh
  script:
    - git push dokku@$PRODUCTION_DOKKU_HOST:$APP_NAME HEAD:refs/heads/master
  environment:
    name: staging
    url: https://hello-app-staging.example.jp/
  only:
    - master
</code></pre>

<h2>review 環境への deploy</h2>

<p>review 環境への deploy も似たような感じです。</p>

<p>deploy 本体の script は事前に定義した <code>deploy_script</code> を使います。
結局ここでしか使っていないので、直接ここに書いても良かったかもしれません。</p>

<p>environment は name に <code>review/</code> をつけることで複数の review 環境が同時に存在している時に折りたたまれるようになります。</p>

<p>review 環境は動的に作ったり消したりするので、 https ではなく http になっています。</p>

<p><code>on_stop</code> を指定することで環境の削除ジョブを指定できます。</p>

<p>only と except で master 以外のブランチの時に review 環境が作成されるようにしています。</p>

<pre><code>review:
  stage: review
  before_script: *before_ssh
  script: *deploy_script
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_ENVIRONMENT_SLUG.$DOKKU_DOMAIN
    on_stop: stop_review
  only:
    - branches
  except:
    - master
</code></pre>

<h2>review 環境の削除</h2>

<p><code>action: stop</code> で環境を削除するジョブとして設定しています。</p>

<p><code>when: manual</code> で手動実行するように設定していますが、基本的にはマージリクエストがマージされた時に Remove source branch にチェックを入れて、自動で停止しています。</p>

<p><code>GIT_STRATEGY: none</code> で git 関連の操作はせずに速やかに停止処理のみするようにしています。</p>

<p>postgres は使用中だと停止できないので、先にアプリケーションを削除してからデータベースを削除しています。
自動実行なので <code>--force</code> で確認なしに削除するようにしています。</p>

<pre><code>stop_review:
  stage: review
  variables:
    GIT_STRATEGY: none
  before_script: *before_ssh
  script:
    - $DOKKU apps:destroy $CI_ENVIRONMENT_SLUG --force || echo $?
    - $DOKKU postgres:destroy $CI_ENVIRONMENT_SLUG-database --force || echo $?
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  only:
    - branches
  except:
    - master
</code></pre>

<h2>まとめ</h2>

<p>GitLab CI と Dokku を組み合わせて CI/CD 環境を作る例を紹介しました。</p>

<p>ちゃんと動く review 環境にするには seed の設定だったり、メール関係の設定だったり、色々とアプリケーション側でも対応が必要ですが、一度環境ができてしまえば変更の確認を他の人にもしてもらいやすくなるので、便利になるのではないでしょうか。</p>

<p>次は staging 環境と production 環境に Heroku を使う例を紹介します。</p>

<p>GitLab + Dokku 関連の記事は<a href="/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitLabと連携するDokkuの初期設定]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-10-gitlab-dokku.html"/>
    <updated>2017-07-10T21:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/gitlab-dokku</id>
    <content type="html"><![CDATA[<p>GitLab と Dokku (と一部 Heroku) を使って CI/CD (Continuous Integration / Continuous Deployment) 環境を作ってみた話の続きです。
今回は Dokku の設定の話になります。</p>

<p><a href="/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 16.04.2 LTS</li>
<li>Omnibus GitLab 9.1.4-ce.0 (インストール時) から 9.3.5-ce.0 (記事執筆時)</li>
<li>gitlab-ci-multi-runner 9.2.0 (インストール時) から 9.3.0 (記事執筆時)</li>
<li>Dokku 0.9.4 (インストール時) から 0.10.2 (記事執筆時)</li>
</ul>


<h2>Dokku とは?</h2>

<p><a href="http://dokku.viewdocs.io/dokku/">Dokku - The smallest PaaS implementation you&rsquo;ve ever seen</a>は bash で書かれた OSS の PaaS です。</p>

<p>Heroku のように git push でデプロイするというのが基本的な使い方になります。</p>

<p>環境変数の操作などのような heroku コマンドで操作に相当することは ssh 経由と Dokku ホスト上での dokku コマンドの両方でできることが多いです。
プラグインのインストールなど、一部の操作は Dokku ホスト上で直接実行する必要があります。</p>

<p>データベースなどはプラグインで対応しています。</p>

<p>Dokku の更新が止まっていた時にできた <a href="https://github.com/dokku-alt/dokku-alt">Dokku Alternative</a> という fork もありましたが、メンテナンスが止まっているので使うべきではありません。</p>

<p>最近はコアプラグインから少しずつ Go 言語への移行を進めているようです。</p>

<h2>インストール</h2>

<p><a href="http://dokku.viewdocs.io/dokku/">Dokku</a> に書いてあるように <code>bootstrap.sh</code> を使うと自動で <code>get.docker.com</code> からの docker のインストールも含めて、 apt から dokku をインストールしてくれます。</p>

<h2>初期設定</h2>

<p>debconf であらかじめ設定しておくか、<code>web_config</code> を使って設定します。</p>

<p>デフォルトのままなどで <code>web_config</code> が有効な場合、 Dokku をインストールしたホストをブラウザーで開くと初期設定画面が出てきます。</p>

<p>そこでデプロイや ssh 経由での操作に使う ssh の公開鍵の登録とホスト名の設定をします。
ホスト名はアプリケーションごとに個別のバーチャルホストを別途設定できるので、とりあえず xip.io や nip.io を使っておくのが手軽だと思います。</p>

<h2>プラグインのインストール</h2>

<p><a href="http://dokku.viewdocs.io/dokku/community/plugins/">プラグイン一覧</a>から Compatibility を確認して必要なプラグインをインストールします。</p>

<p>Heroku と似た感じで使いたいのなら <a href="https://github.com/dokku/dokku-postgres">dokku postgres</a> を入れておくと良いと思います。</p>

<p>Dokku ホストで</p>

<pre><code>sudo dokku plugin:install https://github.com/dokku/dokku-postgres.git postgres
</code></pre>

<p>でインストールできます。</p>

<p><a href="https://github.com/dokku/dokku-maintenance">dokku-maintenance</a> のように Heroku だと標準で対応していることがプラグインになっていたり、
<a href="https://github.com/F4-Group/dokku-apt">dokku-apt</a> のように Heroku だと複数 buildpack で対応していたようなことがプラグインになっていたりすることもあります。</p>

<h2>ssh の公開鍵設定</h2>

<p>後で GitLab CI の secret variables に秘密鍵を設定するので、専用の鍵ペアを作成して、 <a href="http://dokku.viewdocs.io/dokku/deployment/user-management/">User Management</a> の方法で Dokku に公開鍵を登録しておきます。</p>

<pre><code>% ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/vagrant/.ssh/id_rsa): /home/vagrant/.ssh/id_gitlab
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/vagrant/.ssh/id_gitlab.
Your public key has been saved in /home/vagrant/.ssh/id_gitlab.pub.
The key fingerprint is:
(略)
% cat ~/.ssh/id_gitlab.pub | ssh dokku@dokku.example.jp ssh-keys:add gitlab
</code></pre>

<h2>動作確認</h2>

<p>データベースの必要な例を試すなら、<a href="http://dokku.viewdocs.io/dokku/deployment/application-deployment/">Deploy tutorial</a>を試してみると良いと思います。</p>

<p>データベースの不要な例を試すなら、<a href="https://devcenter.heroku.com/articles/rack">Deploying Rack-based Apps | Heroku Dev Center</a> の <code>heroku create</code> を <code>git remote add dokku dokku@dokku.example.test:hello</code> に変えて、 <code>git push heroku master</code> の代わりに <code>git push dokku master</code> で試してみたりすると良いと思います。</p>

<h2>まとめ</h2>

<p>Dokku のインストールから簡単な動作確認方法まで紹介しました。
次は <code>.gitlab-ci.yml</code> を作成して連携する話です。</p>

<p><a href="/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitLab Runner の設定]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-09-gitlab-runner.html"/>
    <updated>2017-07-09T14:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/gitlab-runner</id>
    <content type="html"><![CDATA[<p>GitLab と Dokku (と一部 Heroku) を使って CI/CD (Continuous Integration / Continuous Deployment) 環境を作ってみた話の続きです。
CI 部分のメインとなる GitLab Runner の設定の話です。</p>

<p><a href="/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 16.04.2 LTS</li>
<li>Omnibus GitLab 9.1.4-ce.0 (インストール時) から 9.3.5-ce.0 (記事執筆時)</li>
<li>gitlab-ci-multi-runner 9.2.0 (インストール時) から 9.3.0 (記事執筆時)</li>
<li>Dokku 0.9.4 (インストール時) から 0.10.2 (記事執筆時)</li>
</ul>


<h2>GitLab Runner とは?</h2>

<p><a href="https://docs.gitlab.com/runner/">GitLab Runner</a> とは GitLab CI のジョブを実行する部分のことです。</p>

<p>Jenkins でいうと (ジョブを実行しない設定にした) master が GitLab CI で、 slave が GitLab Runner に相当します。</p>

<h2>名前について</h2>

<p>昔は gitlab-ci-multi-runner という名前だったらしく、 repository は <a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner">https://gitlab.com/gitlab-org/gitlab-ci-multi-runner</a> になっています。</p>

<p>GitLab CI は GitLab 8.x の時に GitLab 本体に統合されたということで、古いドキュメントを参照するときは注意が必要そうです。</p>

<h2>executor 選択</h2>

<p>GitLab Runner を入れたマシン上で直接実行する Shell executor や Docker で実行する Docker executor などがありますが、一番簡単で便利そうな Docker executor を使うことにしました。
また、管理を簡単にするために全てのプロジェクトで共通の Runner を使うことにしました。</p>

<p>必要なら複数登録してタグで使い分けることもできます。
プロジェクトごとに使い分けることもできます。</p>

<h2>インストール</h2>

<p>GitLab とは別マシンが推奨のようなので、別仮想マシンを用意しました。
<a href="https://docs.gitlab.com/runner/install/linux-repository.html">Install GitLab Runner using the official GitLab repositories</a> の方法でパッケージをインストールしました。</p>

<p>「Note: Debian users should use APT pinning」とありますが、<a href="https://packages.debian.org/gitlab-ci-multi-runner">Debian の gitlab-ci-multi-runner パッケージ</a>をみてもリリースされた Stretch には入っていないようです。<a href="https://packages.ubuntu.com/gitlab-ci-multi-runner">Ubuntu の gitlab-ci-multi-runner パッケージ</a>も xenial (16.04LTS) には入っていないようなので、 APT pinning はなくても良さそうです。(今回の設定では念のため入れています。)</p>

<h2>GitLab CI に登録</h2>

<p><a href="https://docs.gitlab.com/runner/register/index.html">Registering Runners</a> に書いてあるように <code>sudo gitlab-runner register</code> で登録します。
オプションなしで実行すると対話的にいろいろきかれます。</p>

<p>gitlab-ci coordinator URL は古いドキュメントだと <code>/ci</code> が付いていることがあるようですが、今はあってもなくてもどちらでも大丈夫のようです。</p>

<p>自動設定するなら token は GitLab 側の初期設定をする時に <code>gitlab_rails['initial_shared_runners_registration_token']</code> で固定しておくと良いと思います。</p>

<p>タグを空欄にした場合はタグなしのジョブも実行されるのですが、タグを設定した場合は run untagged jobs も設定しておかないとジョブが実行されなくて悩むことになります。
(タグは GitLab の Web UI で後から空欄にできなくて、実行されない条件を絞り込むのに unregister して register し直す必要があって面倒だったのですが、当時のバージョンのバグだったのか、GitLab 9.3.5 では問題なく空欄に変更できました。)</p>

<p>Docker executor を選んだ時のデフォルトの Docker image は <code>hello-world</code> ぐらいの使いにくいものにしておいて、 <code>.gitlab-ci.yml</code> で image を常に指定する方が Runner の設定に影響されないので無難かもしれません。</p>

<h2>GitLab CI から登録解除</h2>

<p><code>gitlab-runner list</code> で token などを確認して <code>gitlab-runner unregister</code> で登録解除できます。</p>

<p>unregister せずに GitLab Runner がいなくなってしまった場合は GitLab の Admin Area の Runners から Remove できます。</p>

<h2>同時実行数指定</h2>

<p><code>/etc/gitlab-runner/config.toml</code> の <code>concurrent =</code> で同時に実行するジョブ数を指定できます。
自動で再読み込みしているらしく、試した感じだと runner の restart をしなくても設定が反映されるようでした。</p>

<h2>.gitlab-ci.yml の Lint</h2>

<p><a href="http://qiita.com/sei40kr/items/407e08cc45f218738d4c">GitLab CIの設定ファイルを手元でLintする</a>によると <code>/api/v4/ci/lint</code> で Lint できるようなので、 curl と jq をインストールしておいて、</p>

<pre><code>linter_api_url='https://gitlab.com/api/v4/ci/lint'
curl -sH 'Content-Type: application/json' "$linter_api_url" -d "$(jq -Rs '{"content":.}' &lt; .gitlab-ci.yml)" | jq
</code></pre>

<p>のようにすれば良いようです。</p>

<p><code>linter_api_url</code> を自前の GitLab の URL にしておけば外部に送信することなく Lint できます。</p>

<h2>GitLab Container Registry と連携</h2>

<p>Docker executor を使って GitLab Container Registry を扱いたい場合、 Docker executor と同じホスト側の docker を使う方法と docker in docker を使う方法があります。</p>

<p>詳細は <a href="https://docs.gitlab.com/ce/ci/docker/using_docker_build.html">Using Docker Build</a> を参考にしてください。</p>

<p>GitLab Container Registry にちゃんとした https の証明書が設定できる場合は良いのですが、テスト環境などで http しか有効にできない場合は困ることがあります。</p>

<h3>ホスト側の docker を使う方法</h3>

<p>ホスト側の docker を使うということは、ホスト側の docker の権限を GitLab CI で使えるようにしてしまうということなので、信頼できないユーザーが <code>.gitlab-ci.yml</code> を操作できる環境では使えません。</p>

<p>使い方としては GitLab Runner の register の時に <code>--docker-volumes /var/run/docker.sock:/var/run/docker.sock</code> を指定します。</p>

<p>GitLab Container Registry が http のみの場合は、ホスト側の Docker に insecure-registry の設定をすることになります。</p>

<p><code>/etc/systemd/system/docker.service.d/local.conf</code> などで <code>ExecStart</code> を上書きして設定するか、 <code>/etc/docker/daemon.json</code> に</p>

<pre><code>{"insecure-registries": ["registry.example.test"]}
</code></pre>

<p>のように設定することで http で接続できるようになります。
(daemon.json では<a href="http://docs.docker.jp/engine/reference/commandline/daemon.html#daemon-configuration-file">デーモン設定ファイル</a>に書いてあるようにコマンドラインオプションの <code>--insecure-registry</code> が複数形の <code>"insecure-registries"</code> になります。 <code>dns</code> のように複数形でも変わらないものもあるので、指定できるオプションはドキュメントを参照するのが無難です。)</p>

<h3>docker in docker を使う方法</h3>

<p><code>.gitlab-ci.yml</code> の services に <code>docker:dind</code> を指定して使う、という方法になります。
<code>docker:dind</code> サービスに insecure-registry を設定する方法がないので、試していませんが http のみで使いたい場合は派生 image を自分で作るなどの対応が必要そうです。</p>

<p>使い方としては GitLab Runner の register の時に <code>--docker-privileged</code> を指定します。
register の時に指定し忘れていた場合は、後から config.toml に <code>privileged = true</code> を追加でも良いと思います。</p>

<h3>.gitlab-ci.yml での設定</h3>

<p><a href="https://docs.gitlab.com/ce/ci/docker/using_docker_build.html">Using Docker Build</a> に書いてあるように</p>

<pre><code>- docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.example.com
</code></pre>

<p>か</p>

<pre><code>- docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
</code></pre>

<p>のようにログインした後、 build や push などができるようになります。</p>

<p><code>gitlab-ci-token</code> も固定ではなく環境変数を参照するようにできますが、固定で書いてある設定例が多いので、変わる可能性は低そうなので、固定で書いておいても良いと思います。</p>

<h2>まとめ</h2>

<p>GitLab Runner の設定と Lint の使い方、 GitLab Container Registry と連携方法を紹介しました。
次は Dokku の設定になります。</p>

<p><a href="/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>
]]></content>
  </entry>
  
</feed>
