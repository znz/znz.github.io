<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gpg | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/gpg/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-09-21T00:21:10+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[elpaのpinentry.elを試してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2017-03-25-elpa-pinentry.html"/>
    <updated>2017-03-25T12:57:57+09:00</updated>
    <id>http://blog.n-z.jp/blog/elpa-pinentry</id>
    <content type="html"><![CDATA[<p>Emacs の easypg と gnupg 2 で <code>Opening input file: Decryption failed,</code> になることの対処として、
<a href="https://elpa.gnu.org/packages/pinentry.html">ELPA の pinentry.el</a> を試してみました。</p>

<!--more-->


<h2>動作確認環境</h2>

<p>デフォルトの gpg コマンドが gnupg 2 になっている Debian 系の環境で安定版がリリースされているものということで、
yakkety を使いました。</p>

<ul>
<li>Ubuntu 16.10 (yakkety)</li>
<li>gnupg 2.1.15-1ubuntu6</li>
<li>pinentry-curses 0.9.7-5 (をリビルドしたもの)</li>
<li>emacs24 24.5+1-6ubuntu3</li>
<li>pinentry-0.1.el, 2015-Jun-12, 15.8kB</li>
</ul>


<h2>結果</h2>

<p>先に結果を書いておくと、
そのままだと動きませんでした。</p>

<p><code>pinentry</code> を <code>--disable-pinentry-emacs --disable-inside-emacs</code> なしでリビルドして試すとうまくいきました。</p>

<h2>設定反映</h2>

<p>パッケージを入れ替えたり、
<code>~/.gnupg/gpg-agent.conf</code> を書き換えた後は、
<code>gpg-connect-agent killagent /bye</code> で <code>gpg-agent</code> を終了させました。
<code>pkill gpg-agent</code> でも同じようですが、
<code>gpg-connect-agent</code> の方が正式な手順のようです。
<code>gpgconf --kill gpg-agent</code> でも終了できるようです。</p>

<h2>オリジナルパッケージでの挙動</h2>

<p><code>~/.gnupg/gpg-agent.conf</code> に <code>allow-emacs-pinentry</code> を追加すると Emacs の中どころか、
コマンドライン直接でも使えなくなりました。</p>

<pre><code>% cat ~/.gnupg/gpg-agent.conf
allow-emacs-pinentry
log-file /tmp/gpg-agent.log
</code></pre>

<p>のように <code>log-file</code> も指定してみると <code>gpg -c hoge</code> で暗号化したファイルを復号しようとしたときは</p>

<pre><code>% gpg hoge.gpg
gpg: AES暗号化済みデータ
gpg: エージェントに問題: サポートされていません
gpg: 1 個のパスフレーズで暗号化
gpg: 復号に失敗しました: 秘密鍵がありません
</code></pre>

<p>となって、ログには</p>

<pre><code>2017-03-25 13:XX:XX gpg-agent[XXXXX] gpg-agent (GnuPG) 2.1.15 started
2017-03-25 13:XX:XX gpg-agent[XXXXX] command 'GET_PASSPHRASE' failed: サポートされていません &lt;Pinentry&gt;
</code></pre>

<p>と出ていました。</p>

<p>公開鍵で暗号化したファイルを復号しようとしたときには</p>

<pre><code>% gpg fuga.gpg
gpg: 2048-ビットRSA鍵, ID XXXXXXXXXXXXXXXX, 日付2017-03-24に暗号化されました
      "test@example.com"
gpg: 公開鍵の復号に失敗しました: サポートされていません
gpg: 復号に失敗しました: 秘密鍵がありません
</code></pre>

<p>となって、ログには</p>

<pre><code>2017-03-25 13:XX:XX gpg-agent[XXXXX] gpg-agent (GnuPG) 2.1.15 started
2017-03-25 13:XX:XX gpg-agent[XXXXX] failed to unprotect the secret key: サポートされていません
2017-03-25 13:XX:XX gpg-agent[XXXXX] failed to read the secret key
2017-03-25 13:XX:XX gpg-agent[XXXXX] command 'PKDECRYPT' failed: サポートされていません &lt;Pinentry&gt;
</code></pre>

<p>と出ていました。</p>

<h2>パッケージのリビルド</h2>

<p>変更点としては <code>debian/rules</code> の <code>--disable-pinentry-emacs --disable-inside-emacs</code> を外して <code>pinentry-curses</code> を入れ替えただけですが、
全体の手順もメモしておきます。</p>

<ul>
<li><code>apt-get source pinentry-curses</code></li>
<li><code>sudo apt-get build-dep pinentry</code></li>
<li><code>sudo apt-get install devscripts</code></li>
<li><code>cd pinentry-0.9.7</code></li>
<li><code>vi debian/rules</code> で <code>SHARED_CONFIGS = --disable-rpath --without-libcap --disable-pinentry-emacs --disable-inside-emacs</code> を <code>SHARED_CONFIGS = --disable-rpath --without-libcap</code> に変更</li>
<li><code>debuild -uc -us -rfakeroot</code></li>
<li><code>cd ..</code></li>
<li><code>sudo dpkg -i pinentry-curses_0.9.7-5_amd64.deb</code></li>
</ul>


<h2>Emacs の設定</h2>

<p><code>M-x package-install RET pinentry RET</code> などで <code>pinentry.el</code> をインストールしておきます。</p>

<p><a href="https://elpa.gnu.org/packages/pinentry.html">GNU ELPA - pinentry</a> の説明にはありませんが、
<code>INSIDE_EMACS</code> 環境変数も設定しないと <code>pinentry-curses</code> に Emacs を開いている端末を乗っ取られて操作できなくなってしまいました。
(<code>pkill pinentry</code> で復帰できました。 <code>gpg-agent</code> も終了させたり <code>C-l</code> で再描画も必要かもしれません。)</p>

<p><code>INSIDE_EMACS</code> 環境変数は <code>M-x shell</code> では <code>Emacsのバージョン,comint</code> に自動で設定されるようなので、
<code>pinentry.el</code> はそういう環境での使用を前提として作られたのかもしれません。</p>

<p><code>(package-initialize)</code> は <code>(pinentry-start)</code> を呼ぶのに必要だったので追加しています。
起動後に <code>M-x pinentry-start</code> する時には <code>M-x package-initialize</code> は必要なかったので、
初期化の順番の問題なのだと思います。</p>

<pre><code>% cat ~/.emacs.d/init.el
(setenv "INSIDE_EMACS" "t")
(package-initialize)
(pinentry-start)
</code></pre>

<h2>pinentry.el の動作</h2>

<p>共通鍵で暗号化した <code>hoge.gpg</code> を開こうとするとミニバッファで</p>

<pre><code>パスフレーズを入力:
</code></pre>

<p>と聞いてきて、間違ったパスフレーズを入力すると <code>Opening input file: Decryption failed,</code> になりました。</p>

<p>正しいパスフレーズを入力すると開けました。
編集して保存は新しいパスフレーズをきいてきました。
保存した時のパスフレーズがキャッシュされているらしく、
<code>C-x C-v</code> (<code>find-alternate-file</code>) での開き直しはパスフレーズ入力なしでできました。</p>

<p>公開鍵で暗号化した <code>fuga.gpg</code> を開こうとするとミニバッファで</p>

<pre><code>OpenPGPの秘密鍵のロックを解除するためにパスフレーズを入力してください:
"test@example.com"
2048ビットRSA鍵, ID XXXXXXXXXXXXXXXX,
作成日付 2017-03-24 (主鍵ID YYYYYYYYYYYYYYYY).:
</code></pre>

<p>のようにきいてきました。</p>

<p>何も入力せずに <code>RET</code> を押すと <code>Opening input file: Decryption failed,</code> になりました。
パスフレーズを 3 回間違えても <code>Opening input file: Decryption failed,</code> になりました。</p>

<p>正しいパスフレーズを入力すると開けました。
編集して保存や <code>C-x C-v</code> (<code>find-alternate-file</code>) での開き直しもパスフレーズ入力なしでできました。</p>

<h2>パスフレーズの入力漏れに注意</h2>

<p>オリジナルの <code>pinentry-curses</code> でも発生した問題です。</p>

<p>パスフレーズを入力せずに <code>RET</code> を押してしまうと <code>Opening input file: Decryption failed,</code> になった後、
再度開こうとしてもパスフレーズをきいてこなくて、
すぐに <code>Opening input file: Decryption failed,</code> になるようになってしまいました。
間違ったパスフレーズの場合は再度きいてくるので、
普通はそのまま <code>RET</code> は避けるようにして、
やってしまったら <code>gpg-connect-agent killagent /bye</code> などで <code>gpg-agent</code> を再起動するのが良さそうです。</p>

<p><code>gpg hoge.gpg</code> で直接空欄で OK を押してしまったときも再度きいてこなくなってすぐに</p>

<pre><code>% gpg hoge.gpg
gpg: AES暗号化済みデータ
gpg: gcry_kdf_derive failed: 無効なデータです
gpg: 1 個のパスフレーズで暗号化
gpg: 復号に失敗しました: 秘密鍵がありません
</code></pre>

<p>になるようになってしまったので、
<code>pinentry.el</code> に限らず注意した方が良さそうです。</p>

<h2>Debian パッケージで disable されている理由</h2>

<p>debian/changelog には</p>

<pre><code>pinentry (0.9.5-2) unstable; urgency=medium

  * disable emacs and emacs-fallback until we get a better description of
    them in the upstream documentation
</code></pre>

<p>と書いてあって、
意図的に無効にされているようです。</p>

<p>経緯としては
<a href="https://bugs.gnupg.org/gnupg/issue2034">https://bugs.gnupg.org/gnupg/issue2034</a>
や
<a href="https://bugs.debian.org/854797">https://bugs.debian.org/854797</a>
をみるのが良さそうです。</p>

<p>upstream のドキュメント不足ということで、
ちゃんとドキュメントがあれば再度有効にしてもらえそうですが、
英語ドキュメントが書ける人じゃないと根本的な解決は難しそうです。</p>

<h2>まとめ</h2>

<p>現状の Debian や Ubuntu では <code>pinentry.el</code> をそのまま使うことは難しそうです。</p>

<p>この記事に書いたように自前でリビルドしてセキュリティアップデートなどがあれば頑張ってリビルドし直すようにするか、
<a href="/blog/2017-03-23-pinentry-emacs.html">pinentry-emacsを使ってみた</a>記事に書いたように、
セキュリティや Emacs の外での使い勝手などを犠牲にして <code>pinentry-emacs</code> を使うか、
ということになりそうです。</p>

<p>現状で一番良い方法は Emacs のミニバッファでの入力は諦めて、
GUI のダイアログが出てくる <code>pinentry</code> を使うことのようなので、
<code>ssh</code> で入った先の <code>emacs</code> で完結しないといけないなどの制限がなければ、
手元の Emacs と GUI の <code>pinentry</code> を組み合わせて、
リモートのファイルは TRAMP 経由で開く、
というのが良いのかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pinentry-emacsを使ってみた]]></title>
    <link href="http://blog.n-z.jp/blog/2017-03-23-pinentry-emacs.html"/>
    <updated>2017-03-23T20:30:13+09:00</updated>
    <id>http://blog.n-z.jp/blog/pinentry-emacs</id>
    <content type="html"><![CDATA[<p><code>gpg-agent</code> で <code>--allow-emacs-pinentry</code> が使えない gnupg2 の環境で、
<a href="https://github.com/ecraven/pinentry-emacs">https://github.com/ecraven/pinentry-emacs</a> を使ってみました。</p>

<!--more-->


<h2>動作確認環境</h2>

<ul>
<li>macOS Sierra 10.12.3</li>
<li>GNU Emacs 25.1.1</li>
<li>gnupg2 2.0.30_3 (Homebrew で入れたもの)</li>
</ul>


<h2>注意事項</h2>

<p><a href="https://github.com/ecraven/pinentry-emacs/blob/7c384a65eaaa37d38dbbb4e4ca89a094b498d811/README.org#emacs">README.org の末尾</a>にも
「This is probably totally insecure, and your passphrase may be leaked! Use at your own risk!」と書いてありますが、
<code>read-passwd</code> した文字列をそのまま <code>emacsclient</code> に返して、シェルスクリプトでそのまま扱っているので、
全く安全ではありません。</p>

<p>他の <code>pinentry</code> が使える時は避けることをオススメします。</p>

<h2>別の方法</h2>

<p><code>gnupg</code> が 2.1.5 以降なら <code>--allow-emacs-pinentry</code> というオプションがあるので、
<a href="https://elpa.gnu.org/packages/pinentry.html">https://elpa.gnu.org/packages/pinentry.html</a> と組み合わせて使うことをオススメします。
(<code>elpa</code> の説明によると <code>pinentry</code> も 0.9.5 以上が必要のようです。)
この方法は別途試してまた記事を書く予定です。
(2017-03-27 追記: <a href="/blog/2017-03-25-elpa-pinentry.html">elpaのpinentry.elを試してみた</a> という記事を書きました。)</p>

<p>今回の環境では、
<a href="https://github.com/Homebrew/homebrew-core/blob/328a89b492b600686be41b6b69b93d7c88fb8b89/Formula/gnupg2.rb">Homebrew の gnupg2</a>
が 2.0.30 で 2.1.5 未満なので使えませんでした。</p>

<p>macOS 上なら Emacs 上で入力するよりも
<a href="/blog/2016-08-20-mac-easypg-gpg2.html">OS X の Emacs で EasyPG が gpg2 で Opening input file: Decryption failed, になったので対処した</a>記事に書いた
<code>pinentry-mac</code> を使うのがオススメです。</p>

<h2>設定</h2>

<h3>gpg-agent の設定</h3>

<p><code>~/.gnupg/gpg-agent.conf</code> がなければ作成して、以下の設定を入れておきます。</p>

<pre><code>pinentry-program /path/to/github.com/ecraven/pinentry-emacs/pinentry-emacs
</code></pre>

<h3>emacs の設定</h3>

<p>README.org に書いてあるように <code>~/.emacs.d/init.el</code> に</p>

<pre><code>(defun pinentry-emacs (desc prompt ok error)
  (let ((str (read-passwd (concat (replace-regexp-in-string "%22" "\"" (replace-regexp-in-string "%0A" "\n" desc)) prompt ": "))))
    str))
</code></pre>

<p>を追加しておきます。</p>

<p><code>emacsclient</code> コマンドで <code>pinentry-emacs</code> 関数を呼んでいるので、
<code>(server-start)</code> も (README.org には書いていませんが) 必要です。</p>

<h2>動作確認</h2>

<p>Emacs の中で <code>*.gpg</code> ファイルを開いてみたり、
端末上でパスフレーズの必要な <code>gpg</code> コマンドを実行してみたりして、
<code>(server-start)</code> した Emacs の mini buffer でパスフレーズがきかれるのを確認します。</p>

<h2>fallback 動作</h2>

<p><code>emacsclient</code> の呼び出しが <code>sed</code> に <a href="https://github.com/ecraven/pinentry-emacs/blob/7c384a65eaaa37d38dbbb4e4ca89a094b498d811/pinentry-emacs#L24">pipe されている</a> ので、
<a href="https://github.com/ecraven/pinentry-emacs/pull/5">Fix fallback when emacsclient failed</a>
のパッチをあてないと fallback してくれないようです。
(取り込まれたらブロク記事を書こうと思っていたのですが、取り込まれないようなのでもう書くことにしました。)</p>

<p>さらに別途 <code>pinentry-emacs</code> ディレクトリにパスを通しておくか、
<code>pinentry-emacs</code> ファイルの先頭で <code>PATH=$PATH:$(dirname "$0")</code> などとしてパスを通さないと
<code>lukspinentry</code> の実行に失敗して fallback してくれません。</p>

<p>さらに、端末上で <code>gpg</code> コマンドを実行したとしても、
<code>pinentry</code> プログラムは <code>gpg-agent</code> から起動される
(プログラム間の関係は <a href="http://miniconf.debian.or.jp/assets/files/gnupg-now.html">http://miniconf.debian.or.jp/assets/files/gnupg-now.html</a> の GnuPG programs (2) 参照)
ので、
<code>tty</code> が「<code>not a tty</code>」を返すらしく、
<code>pinentry-curses --ttyname not a tty</code>
が実行されていて fallback もうまくいきません。</p>

<p>なので、
fallback 動作は期待せず、
パッチもあてず、
<code>pinentry-emacs</code> を使うなら
必ず Emacs は起動しておく、
という運用が良さそうです。</p>

<h2>まとめ</h2>

<p><code>pinentry-emacs</code> を試してみましたが、
制限事項も多く、
修正も期待できないため、
別のもっと良い <code>pinentry</code> が使える場合は、
他のものを使うことをオススメします。</p>

<p>他の手段がない時の最終手段としては、知っておいても良いのではないかと思いました。</p>

<p>ちなみに自分の環境では、
<code>pinentry-mac</code> に戻してしまっていて、
<code>pinentry-emacs</code> は使っていません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X の Emacs で EasyPG が gpg2 で Opening input file: Decryption failed, になったので対処した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-08-20-mac-easypg-gpg2.html"/>
    <updated>2016-08-20T13:23:22+09:00</updated>
    <id>http://blog.n-z.jp/blog/mac-easypg-gpg2</id>
    <content type="html"><![CDATA[<p>OS X の Homebrew で入れている gnupg が更新されて gpg コマンドではなく gpg1 コマンドしか入らなくなって、 gpg コマンドは gnupg2 で入れるようになった影響で、 Emacs 上の EasyPG で <code>*.gpg</code> ファイルを開くときに <code>Opening input file: Decryption failed,</code> で開けなくなったので、その対処をしました。</p>

<!--more-->


<h2>対象バージョン</h2>

<p>OS 自体以外は Homebrew で入れたバージョンです。</p>

<ul>
<li>OS X : Yosemite (10.10.5)</li>
<li>Emacs.app : 24.5.1</li>
<li>gnupg : 1.4.21</li>
<li>gnupg2 : 2.0.30_2</li>
<li>gpg-agent : 2.0.30_1</li>
<li>pinentry-mac : 0.9.4</li>
</ul>


<h2>現象</h2>

<p><code>*.gpg</code> ファイルを開くと今までは minibuffer でパスフレーズをきいてきていたのに、 gpg コマンドが gnupg 1 系から gnupg 2 系に変わったら、 <code>Opening input file: Decryption failed,</code> というエラー (<code>*Messages*</code> バッファには <code>epa-file--find-file-not-found-function: Opening input file: Decryption failed,</code> と出ていた) で開けなくなりました。</p>

<h2>対処方法案</h2>

<p><code>(setq epg-gpg-program "gpg1")</code> で古い gnupg を使い続けるという案も考えましたが、今後のことを考えると新しいバージョンを使った方が良いだろうと思ってやめました。</p>

<p><a href="http://www.bookshelf.jp/cgi-bin/goto.cgi?file=auth-ja&amp;node=GnuPG+and+EasyPG+Assistant+Configuration">A. GnuPG および EasyPG アシスタントの設定</a> によると gpg2 は gpg-agent との組み合わせが必須のようだったので、 gpg-agent を使うことにしました。</p>

<h2>対処方法</h2>

<p>端末上で <code>gpg -c hoge.txt</code> や <code>gpg -c hoge.txt.gpg</code> を試してみると <code>pinentry-curses</code> が使われているとわかったので、 <code>brew install pinentry-mac</code> で pinentry-mac をインストールして、 <code>Caveats</code> に出てきたように <code>~/.gnupg/gpg-agent.conf</code> を作成して <code>pinentry-program /usr/local/bin/pinentry-mac</code> という設定を入れたところ、 Emacs 上でも <code>*.gpg</code> ファイルを開くときに pinentry-mac でパスフレーズをきかれるようになって、開けるようになりました。</p>

<p>パスフレーズを入力できるようにするだけなら pinentry の設定だけで gpg-agent の起動は必要ありませんでした。
パスフレーズを毎回入力する必要があるというのは今までと同じ使い勝手なので、 gpg-agent の起動までは追求しませんでした。</p>

<pre><code>==&gt; Caveats
You can now set this as your pinentry program like

~/.gnupg/gpg-agent.conf
    pinentry-program /usr/local/bin/pinentry-mac

.app bundles were installed.
Run `brew linkapps pinentry-mac` to symlink these to /Applications.
</code></pre>

<h2>将来の対処方法案</h2>

<p>gpg-agent は 2.1.5 から <code>--allow-emacs-pinentry</code> というオプションが追加されていて、 <a href="http://unix.stackexchange.com/questions/55638/can-emacs-use-gpg-agent-in-a-terminal-at-all">http://unix.stackexchange.com/questions/55638/can-emacs-use-gpg-agent-in-a-terminal-at-all</a> に書かれているように <a href="https://elpa.gnu.org/packages/pinentry.html">https://elpa.gnu.org/packages/pinentry.html</a> を使って、 Emacs 上でパスフレーズを入力できるようになるようなので、またそのように設定を変更するかもしれません。
(2017-03-27 追記: <a href="/blog/2017-03-25-elpa-pinentry.html">elpaのpinentry.elを試してみた</a> という記事を書きました。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[caffでキーサインした]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-22-key-sign-caff.html"/>
    <updated>2014-06-22T19:07:19+09:00</updated>
    <id>http://blog.n-z.jp/blog/key-sign-caff</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/KansaiDebianMeeting/20140622" title="第 85 回 関西 Debian 勉強会">第 85 回 関西 Debian 勉強会</a>
で
<a href="https://launchpad.net/~mocchi">坂本さん</a>とキーサインをしたので、そのメモです。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 12.04.4 LTS</li>
<li>gnupg 1.4.11-3ubuntu2.5</li>
<li>signing-party 1.1.4-1</li>
</ul>


<h2>事前準備</h2>

<p>事前にキーサインをするとわかっていれば <code>gpg-key2ps</code> コマンドで fingerprint の紙を用意しておくと良いと思います。
今回は少人数だったので、
fingerprint は画面上で見せて確認してもらいました。</p>

<h2>本人確認</h2>

<p>対面で運転免許証などの写真付きの身分証明書で名前を確認して、
それと署名対象の鍵の uid に入っている名前が一致するのを確認しておきます。
また、後で署名するために fingerprint の情報も入手しておきます。</p>

<h2>caff の設定</h2>

<p>基本的には
<a href="http://tokyodebian.alioth.debian.org/pdf/debianmeetingresume200910-presentation.pdf">Why GPG Key sign? 東京エリア Debian 勉強会 in OSC 2009 Tokyo/Fall</a>
の PDF の内容のままです。</p>

<h3>.caffrc</h3>

<p>自分の鍵 ID を <code>gpg --list-secret-keys</code> で確認すると、
<code>4096R/B4222F7A</code> とわかるので、
<code>gpg --fingerprint B4222F7A</code>
で fingerprint 全体を確認しておきます。
(fingerprint の末尾が鍵 ID です。)</p>

<p>spam よけのために email のところはちょっと改変していますが、
<code>~/.caffrc</code> は以下のように設定しています。
<code>keyid</code> は fingerprint の末尾のうち、
設定例と同じ長さだけ普通の鍵 ID よりちょっと長めに取り出して設定しています。
<code>owner</code> と <code>email</code> はメール送信の時に使われます。</p>

<p>```perl ~/.caffrc
    # .caffrc &ndash; vim:ft=perl:
    # This file is in perl(1) format - see caff(1) for details.</p>

<pre><code>$CONFIG{'owner'} = 'Kazuhiro NISHIYAMA';
$CONFIG{'email'} = 'zn mbf.nifty.com';
#$CONFIG{'reply-to'} = 'foo@bla.org';

# You can get your long keyid from
#   gpg --with-colons --list-key &lt;yourkeyid|name|emailaddress..&gt;
#
# If you have a v4 key, it will simply be the last 16 digits of
# your fingerprint.
#
# Example:
#   $CONFIG{'keyid'} = [ qw{FEDCBA9876543210} ];
#  or, if you have more than one key:
#   $CONFIG{'keyid'} = [ qw{0123456789ABCDEF 89ABCDEF76543210} ];
$CONFIG{'keyid'} = [ qw{262ED8DBB4222F7A} ];

# Select this/these keys to sign with
#$CONFIG{'local-user'} = [ qw{EE739B28C657086C 9B585538ED7E1B73 262ED8DBB4222F7A C9429DABCB28285B} ];

# Additionally encrypt messages for these keyids
#$CONFIG{'also-encrypt-to'} = [ qw{EE739B28C657086C 9B585538ED7E1B73 262ED8DBB4222F7A C9429DABCB28285B} ];

# Mail template to use for the encrypted part
#$CONFIG{'mail-template'} = &lt;&lt; 'EOM';
#Hi,
#
#please find attached the user id{(scalar @uids &gt;= 2 ? 's' : '')}
#{foreach $uid (@uids) {
#    $OUT .= "\t".$uid."\n";
#};}of your key {$key} signed by me.
#
#If you have multiple user ids, I sent the signature for each user id
#separately to that user id's associated email address. You can import
#the signatures by running each through `gpg --import`.
#
#Note that I did not upload your key to any keyservers. If you want this
#new signature to be available to others, please upload it yourself.
#With GnuPG this can be done using
#       gpg --keyserver pool.sks-keyservers.net --send-key {$key}
#
#If you have any questions, don't hesitate to ask.
#
#Regards,
#{$owner}
#EOM
</code></pre>

<pre><code>
### ~/.caff/gnupghome/gpg.conf の設定

以前参考にした設定のまま

```text ~/.caff/gnupghome/gpg.conf
keyserver pgp.mit.edu
cert-digest-algo SHA256
personal-digest-preferences SHA256
</code></pre>

<p>となっていました。
PDF では SHA512 になっていたので、
SHA256 から SHA512 に変更しました。
今日の caff での署名した時点では SHA256 のままだったので、
次回から変わる予定です。</p>

<p><code>text ~/.caff/gnupghome/gpg.conf
keyserver pgp.mit.edu
cert-digest-algo SHA512
personal-digest-preferences SHA512
</code></p>

<h2>caff -u で署名</h2>

<p>spam よけのためメールアドレスの所は改変した状態のログは以下の通りです。
「本当に署名しますか? (y/N)」のところで身分証明書と一緒に確認した fingerprint と合っているか確認します。</p>

<p>最後にメールを送信して終了です。
相手の鍵で暗号化されたメールが localhost の SMTP サーバー送信されます。</p>

<pre><code class="console">    % caff -u B4222F7A D66FD341
    [INFO] Importing key 262ED8DBB4222F7A from your normal GnuPGHome.
    [INFO] fetching keys, this will take a while...
    [INFO] Sign the following keys according to your policy, then exit gpg with 'save' after signing each key
    gpg --local-user B4222F7A --homedir=/home/kazu/.caff/gnupghome --secret-keyring /home/kazu/.gnupg/secring.gpg --no-auto-check-trustdb --trust-model=always --edit 25DA5B9699F132DB74BD2270B5A586C7D66FD341 sign
    gpg (GnuPG) 1.4.11; Copyright (C) 2010 Free Software Foundation, Inc.
    This is free software: you are free to change and redistribute it.
    There is NO WARRANTY, to the extent permitted by law.


    pub  4096R/D66FD341  作成: 2014-06-22  満了: 無期限       利用法: SC
    sub  4096R/5D3BA622  作成: 2014-06-22  満了: 無期限       利用法: E
    [ unknown] (1). Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt;


    pub  4096R/D66FD341  作成: 2014-06-22  満了: 無期限       利用法: SC
     主鍵の指紋: 25DA 5B96 99F1 32DB 74BD  2270 B5A5 86C7 D66F D341

         Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt;

    本当にこの鍵にあなたの鍵“Kazuhiro NISHIYAMA &lt;zn mbf.nifty.com&gt;”で署名してよいですか
    (B4222F7A)

    本当に署名しますか? (y/N) y

    次のユーザーの秘密鍵のロックを解除するには
    パスフレーズがいります:“Kazuhiro NISHIYAMA &lt;zn mbf.nifty.com&gt;”
    4096ビットRSA鍵, ID B4222F7A作成日付は2010-06-27


    gpg&gt; save
    [INFO] B5A586C7D66FD341 1 Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt; done.
    [INFO] key 25DA5B9699F132DB74BD2270B5A586C7D66FD341 done.
    Mail signature for Takashi Sakamoto &lt;o-takashi sakamocchi.jp&gt; to 'o-takashi sakamocchi.jp'? [Y/n]
    %
</code></pre>

<h2>caff からのメールを受け取った相手のすべきこと</h2>

<p>暗号化されたメールが届くので、
対応する秘密鍵を使って復号してメールを確認します。
さらにその中にある署名を自分の鍵束にインポートしてキーサーバーに送信します。</p>

<p>caff のやり方はここでメールアドレスの到達性もチェックしているようなので、
署名した側はキーサーバーに送信する必要はなさそうです。
むしろそういうことをしないようにするために
<code>~/.caff/gnupghome</code> に独自の鍵束を用意しているように思いました。</p>
]]></content>
  </entry>
  
</feed>
