<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2016-09-08T23:30:07+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[heroku本を読んだ]]></title>
    <link href="http://blog.n-z.jp/blog/2015-01-03-heroku-book.html"/>
    <updated>2015-01-03T16:58:56+09:00</updated>
    <id>http://blog.n-z.jp/blog/heroku-book</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4048915134/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4048915134&amp;linkCode=as2&amp;tag=znz-22">プロフェッショナルのための 実践Heroku入門 プラットフォーム・クラウドを活用したアプリケーション開発と運用 (書籍)</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4048915134" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
を読んだので、そのメモです。</p>

<!--more-->


<p>内容としては heroku をまだ使ったことない人には特におすすめで、使ったことがある人にもどういう思想で作られているのかなど参考になるのでおすすめだと思いました。
特に最後の The Twelve Factor App の翻訳は heroku に限らず参考になると思いました。</p>

<h2>メモ</h2>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4048915134" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<ul>
<li>ceder → cedar (全般的に)</li>
<li>p.47 rubyforge はもう終了しているのでダウンロードできなさそう。</li>
<li>p.49 <code>brew --prefix readline</code> と <code>brew --prefix openssl</code> の周りに <code>$( )</code> が抜けている?</li>
<li>p.55 gem install するのは bundle よりも bundler の方が良さそう。</li>
<li>p.60 下から4行目 Frameowk → Framework</li>
<li>p.69 下から2行目 PostgresSQL → PostgreSQL</li>
<li>p.70 <code>(後述)</code> とあるが既に説明済み?</li>
<li>p.79 webtype → web type</li>
<li>p.79 <code>jobs:worK</code> → <code>jobs:work</code> ? (2カ所)</li>
<li>p.91 newrelick → newrelic</li>
<li>p.92 MG → MB ? (3カ所)</li>
<li>p.101 sandobox → sandbox ?</li>
<li>p.135 ctext 型をの → citext 型を</li>
<li>p.159 注7 の URL がパスしかない</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rsyslogでherokuのログを記録する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-18-heroku-rsyslog.html"/>
    <updated>2014-07-18T19:37:27+09:00</updated>
    <id>http://blog.n-z.jp/blog/heroku-rsyslog</id>
    <content type="html"><![CDATA[<p>heroku のログは何も設定していないと最近のログしか残らないので、
VPS で動かしている Ubuntu の rsyslog で受け取って好きなだけ
残せるように設定してみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 12.04 LTS</li>
<li>rsyslog 5.8.6-1ubuntu8.6</li>
</ul>


<h2>rsyslog の設定</h2>

<p>rsyslog でリモートからのログを受け取って <code>/var/log/remote</code> 以下に記録する設定をします。</p>

<p>ポート番号は外からの攻撃を減らすためや rsyslog の起動時に root 権限を不要にするために、
デフォルトの 514 ではなく適当なポート番号に変更しました。</p>

<p>リモートからのログはここで日付とホスト名から決まるファイル名のログに記録して、
ローカルのログと混ざらないようにしています。</p>

<p>ファイル名は日付を前にするか、送信元ホスト名を前にするかは好みで決めると良いと思います。</p>

<pre><code class="text /etc/rsyslog.d/10-local.conf"># provides UDP syslog reception
$ModLoad imudp
$UDPServerRun 51514

# provides TCP syslog reception
$ModLoad imtcp
$InputTCPServerRun 51514

$template RemoteLog,"/var/log/remote/%$year%%$month%%$day%_%hostname%.log"
:fromhost-ip,!isequal,"127.0.0.1" ?RemoteLog
&amp; ~
</code></pre>

<h2><code>/var/log/remote</code> 作成</h2>

<p>ディレクトリを自動で作成はしてくれないので、あらかじめ作成しておきます。
同じ理由でログファイルをディレクトリ分けすることは出来ませんでした。</p>

<p>syslog ユーザーが書き込めて adm グループで読めるようにしました。</p>

<pre><code>sudo install -o syslog -g adm -m 2750 -d /var/log/remote
</code></pre>

<h2>ufw 設定</h2>

<p><code>ufw allow 51514</code> で外から udp も tcp も受け付けるようにします。</p>

<h2>heroku からの送信設定</h2>

<p><code>heroku drains</code> コマンドで設定しました。</p>

<p>Heroku 側のドキュメントは
<a href="https://devcenter.heroku.com/articles/logging#syslog-drains" title="Syslog drains">Syslog drains</a>
にありますが、情報が少ないので、同様のログを蓄積するアドオンの設定を参考にするのが良いようです。</p>

<pre><code class="console">% heroku drains
No drains for this app
% heroku drains:add
 !    Usage: heroku drains:add URL
zsh: exit 1     heroku drains:add
% heroku drains:add syslog://syslog.example.jp:51514
Successfully added drain syslog://syslog.example.jp:51514
% heroku drains
syslog://syslog.example.jp:51514 (d.xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[heroku で passenger を使うようにした]]></title>
    <link href="http://blog.n-z.jp/blog/2014-01-24-passenger-ruby-heroku.html"/>
    <updated>2014-01-24T23:23:25+09:00</updated>
    <id>http://blog.n-z.jp/blog/passenger-ruby-heroku</id>
    <content type="html"><![CDATA[<p>今は heroku で動いている <a href="https://bugs.ruby-lang.org/">https://bugs.ruby-lang.org/</a> が thin から passenger に切り替えて安定したという話を IRC で知ったので、自分が heroku で動かしている Rails アプリも passenger に切り替えてみました。
(ruby-lang.org の方はいろいろ試すために今後他のものに切り替える可能性もあります。)</p>

<!--more-->


<h2>概要</h2>

<p><a href="https://github.com/phusion/passenger-ruby-heroku-demo">https://github.com/phusion/passenger-ruby-heroku-demo</a>
を参考にして Gemfile と Procfile を設定するだけです。</p>

<h2>Gemfile の書き換え</h2>

<p><code>gem "unicorn"</code> や  <code>gem "thin"</code> があればコメントアウトするなり削除するなりして、
代わりに <code>gem "passenger"</code> を追加します。</p>

<h2>Procfile の設定</h2>

<p>Procfile がなければ新規作成します。
既存の Procfile があって以下のような行があれば削除します。</p>

<pre><code>web: bundle exec ruby web.rb -p $PORT
web: bundle exec unicorn -p $PORT
web: bundle exec thin start -p $PORT
</code></pre>

<p>Procfile に以下の設定を追加します。</p>

<pre><code>web: bundle exec passenger start -p $PORT --max-pool-size 3
</code></pre>

<h2>切り替え反映</h2>

<p>以下のように切り替えを反映します。</p>

<pre><code>bundle install
git commit -a -m "Switch to Phusion Passenger"
git push heroku master
</code></pre>

<p>ここまでは
<a href="https://github.com/phusion/passenger-ruby-heroku-demo">https://github.com/phusion/passenger-ruby-heroku-demo</a>
の手順そのままです。</p>

<h2>ローカルで使う</h2>

<p><code>gem install foreman</code> で <code>foreman</code> を入れておいて <code>env PORT=3000 foreman start</code> とか、
<code>bundle exec passenger start -p 3000 --max-pool-size 3</code> とかで
3000 番ポートで passenger を使えます。</p>

<p>初回起動時は standalone 版 passenger の初期設定が走るので、
少し時間がかかります。</p>

<h2>まとめ</h2>

<p>あまりアクセスが多くない無料の範囲内で使っている Rails アプリなので、
違いはあまりわかっていませんが、簡単に切り替えられるので、
選択肢のひとつとして使われやすくなるのではないかと思います。</p>
]]></content>
  </entry>
  
</feed>
