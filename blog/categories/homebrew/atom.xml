<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: homebrew | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/homebrew/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-01-03T13:26:39+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[brew pin でバグのあるバージョンを避ける例]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-19-brew-pin.html"/>
    <updated>2014-05-19T21:35:03+09:00</updated>
    <id>http://blog.n-z.jp/blog/brew-pin</id>
    <content type="html"><![CDATA[<p><code>graphviz version 2.38.0 (20140413.2041)</code>
で
<a href="http://graphviz.org/mantisbt/view.php?id=2444">label の先頭の日本語が消える</a>
というバグにはまったので、
<code>brew pin</code>
で修正されたバージョンがリリースされるまでの間、
古いバージョンに固定することにしました。
(バグ自体はリンク先をみればわかるようにすぐに修正されたようです。)</p>

<!--more-->


<h2>対象バージョン</h2>

<p>現在の最新は</p>

<pre><code class="console">% dot -V
dot - graphviz version 2.38.0 (20140413.2041)
</code></pre>

<p>で以下のバージョンに戻しました。</p>

<pre><code class="console">% dot -V
dot - graphviz version 2.36.0 (20140111.2315)
</code></pre>

<h2>対象コミット調査</h2>

<p>以下のように 2.38.0 にあがったコミットを探してみると
<code>2f368f7be64a5b4a6b56b4ab85827997fa520953</code>
だったので、この前に戻せば良いとわかりました。</p>

<pre><code class="console">% cd $(brew --prefix)
% git log -p Library/Formula/graphviz.rb
</code></pre>

<h2><code>brew pin</code> で固定</h2>

<p>そして、以下の手順で固定しました。</p>

<ul>
<li><code>git checkout コミット^</code> でコミットの直前に戻す</li>
<li>古いバージョンに戻すので一度アンインストール</li>
<li>古いバージョンでインストールし直し</li>
<li><code>brew pin</code> で固定</li>
<li><code>git checkout master</code> で <code>/usr/local</code> (<code>brew --prefix</code>) の状態を戻す</li>
<li><code>brew upgrade</code> で固定されているのを確認</li>
</ul>


<pre><code class="console">% cd $(brew --prefix)
%  git checkout 2f368f7be64a5b4a6b56b4ab85827997fa520953\^
Note: checking out '2f368f7be64a5b4a6b56b4ab85827997fa520953^'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at b8b3a30... glib-networking 2.40.1
%  lv Library/Formula/graphviz.rb
% brew uninstall graphviz
Uninstalling /usr/local/Cellar/graphviz/2.38.0...
% brew install graphviz
==&gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/graphviz-2.36.0_1.mav
Already downloaded: /Library/Caches/Homebrew/graphviz-2.36.0_1.mavericks.bottle.tar.gz
==&gt; Pouring graphviz-2.36.0_1.mavericks.bottle.tar.gz
🍺  /usr/local/Cellar/graphviz/2.36.0_1: 470 files, 11M
% brew pin graphviz
% git checkout master
Previous HEAD position was b8b3a30... glib-networking 2.40.1
Switched to branch 'master'
% brew upgrade
==&gt; No packages to upgrade
==&gt; Not upgrading 1 pinned package:
graphviz 2.38.0
</code></pre>

<h2><code>brew unpin</code></h2>

<p>修正されたバージョンがリリースされて、
Homebrew でインストールできるようになったら
<code>brew unpin graphviz</code>
で解除すれば良さそうです。</p>

<p><code>brew pin</code> は
<a href="http://qiita.com/uasi/items/f06c6fe7c04b593ec6a3#comment-178ddb970a3033653648">qiita の Homebrew でバージョンを指定してインストールするコマンド作った のコメント</a>
に書いてあるように、
FORMULA 指定なしの <code>brew upgrade</code> での更新対象にしないという意味のようなので、
master に戻った状態で <code>unpin</code> してしまっても
その場で <code>pin</code> し直せば大丈夫のようです。</p>

<pre><code class="console">% dot -V
dot - graphviz version 2.36.0 (20140111.2315)
% brew unpin graphviz
% brew pin graphviz
% brew upgrade
==&gt; No packages to upgrade
==&gt; Not upgrading 1 pinned package:
graphviz 2.38.0
</code></pre>

<p>修正されたバージョンがリリースされた時に <code>brew unpin</code> を忘れないように実行する必要がありますが、
<code>brew upgrade</code> の時に毎回メッセージが出るので、気付きやすそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[homebrew cask で sylpheed test1 をインストールした]]></title>
    <link href="http://blog.n-z.jp/blog/2014-04-21-brew-cask-sylpheed.html"/>
    <updated>2014-04-21T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/brew-cask-sylpheed</id>
    <content type="html"><![CDATA[<p><a href="http://sylpheed.sraoss.jp/ja/news.html">Sylpheed 3.4.1-test1 for Mac OS X (テスト版)</a>
がリリースされていたので、
homebrew cask を使ってインストールしてみました。</p>

<p>dmg で配布されているアプリケーションを homebrew cask に対応させる例としても参考になると思います。</p>

<!--more-->


<h2>homebrew cask のインストール</h2>

<p><a href="http://brew.sh/">Homebre</a>
と
<a href="https://github.com/phinze/homebrew-cask">homebrew-cask</a>
をあらかじめインストールしておきます。</p>

<h2>cask 作成</h2>

<p><code>brew cask create sylpheed-test</code> で作成して、
内容を以下のように変更しました。</p>

<pre><code class="ruby">class SylpheedTest &lt; Cask
  url 'http://sylpheed.sraoss.jp/sylpheed/macosx/Sylpheed_3.4.1-test1.dmg'
  homepage 'http://sylpheed.sraoss.jp/'
  version '3.4.1-test1'
  sha256 '52505ab7913fd58fa921a9c8b574286f08073321b440b7aa23dba3896b4b2ddc'
  link 'Sylpheed.app'
end
</code></pre>

<p><code>sha256</code> は
<a href="https://github.com/phinze/homebrew-cask/blob/master/CONTRIBUTING.md#cask-stanzas">Cask Stanzas</a>
の説明にあるように別途 <code>url</code> に指定したファイルをダウンロードして <code>shasum -a 256 &lt;file&gt;</code> で調べました。
もし upstream のリリースアナウンスに書いてあれば、それをそのまま使えば良いと思います。</p>

<p>編集途中で閉じてしまった場合は
<code>brew cask edit sylpheed-test</code>
で再編集できます。</p>

<p>実体は <code>$(brew --prefix)/Library/Taps/phinze-cask/Casks/sylpheed-test.rb</code> にあります。</p>

<h2>インストール</h2>

<p><code>sylpheed-test.rb</code> が作成できたら <code>brew cask install sylpheed-test</code> でインストールできます。</p>

<pre><code class="console">% brew cask install sylpheed-test
==&gt; Downloading http://sylpheed.sraoss.jp/sylpheed/macosx/Sylpheed_3.4.1-test1.dmg
######################################################################## 100.0%
==&gt; Symlinking App 'Sylpheed.app' to '/Users/kazu/Applications/Sylpheed.app'
🍺  sylpheed-test installed to '/opt/homebrew-cask/Caskroom/sylpheed-test/3.4.1-test1' (314 files, 32M)
</code></pre>

<h2>起動</h2>

<p>Launchpad から起動したり、Spotlight で検索したりして普通に起動します。</p>

<p>初回起動で
<code>~/Library/Application Support/Sylpheed/Mailboxes/Mail</code>
を作るかきかれましたが、その時点で既に
<code>~/Library/Application Support/Sylpheed</code>
は作成されていました。</p>

<h2>まとめ</h2>

<p>テスト版なので、まだ変なところはあるようですが (Command+V がメッセージビューのトグルになってペーストできないとか)
Mac OS X 版特有の問題があるだけのようなので、今後の正式版に期待しています。</p>

<p>まだ test 版なので pull request はしていないのですが、
正式版が出たら homebrew cask に pull request を送るかもしれません。
beta 版なども対応するなら
<a href="https://github.com/caskroom/homebrew-versions">homebrew-cask-versions</a>
に pull request を送ると良さそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MavericksでEmacs.appが起動時にホームディレクトリにならない]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-01-emacs-on-mavericks.html"/>
    <updated>2013-11-01T18:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/emacs-on-mavericks</id>
    <content type="html"><![CDATA[<p>Mac OS X を Mavericks にあげたら homebrew で入れた
Emacs.app を起動した時に <code>default-directory</code>
がホームディレクトリから <code>/</code> に変わってしまっていたので、
原因を調べてみました。</p>

<p>2013-11-09 追記:
現在は emacs の開発版から抜き出したパッチの pull request が homebrew に取り込まれていて、
問題は起きなくなっています。</p>

<!--more-->


<h2>調べたきっかけ</h2>

<p>きっかけは
<a href="http://qiita.com/ksato9700/items/1ec373895b9693529f82">Mavericksにアップデートして遭遇した不具合　まとめ</a>
を見て自分の環境だけで起きている現象ではないと知ったからです。</p>

<h2>原因</h2>

<p>Emacs のソースの以下の部分で <code>-psn</code> で始まる引数の有無で
ホームディレクトリに移動するかどうかを判定しているのに、
Mavericks だと引数なしで起動されるようになったからのようです。</p>

<pre><code class="c emacs-24.3/src/emacs.c"> #ifdef HAVE_NS
   ns_pool = ns_alloc_autorelease_pool ();
   if (!noninteractive)
     {
 #ifdef NS_IMPL_COCOA
       if (skip_args &lt; argc)
         {
      /* FIXME: Do the right thing if getenv returns NULL, or if
         chdir fails.  */
           if (!strncmp (argv[skip_args], "-psn", 4))
             {
               skip_args += 1;
               chdir (getenv ("HOME"));
             }
           else if (skip_args+1 &lt; argc &amp;&amp; !strncmp (argv[skip_args+1], "-psn", 4))
             {
               skip_args += 2;
               chdir (getenv ("HOME"));
             }
         }
 #endif  /* COCOA */
     }
 #endif /* HAVE_NS */
</code></pre>

<h2>状況</h2>

<p>ちなみに Mac OS X 10.8.5 では、たとえば
<code>/usr/local/Cellar/emacs/24.3/Emacs.app/Contents/MacOS/Emacs -psn_0_29637698</code>
のように起動されていました。</p>

<p>Qiita の記事では Dock から起動した時のことを書いていますが、
<code>open -a Emacs.app</code> のように起動しても同じでした。</p>

<p>RubyMotion で最小限のカレントディレクトリを表示するだけのアプリを作って試してみたところ、
起動時にカレントディレクトリが <code>/</code> になっているのは
Cocoa アプリでは普通の動作のようでした。</p>

<h2>対応状況</h2>

<p><a href="http://osdir.com/ml/general/2013-10/msg61593.html">ML での情報</a>
によると trunk には対応がチェックインされているということで、
調べてみると
revision 114730 <!-- http://bzr.savannah.gnu.org/lh/emacs/trunk/revision/114730 -->
と
revision 114882 <!-- http://bzr.savannah.gnu.org/lh/emacs/trunk/revision/114882 -->
のパッチをあわせて以下のように対応すれば良さそうに見えました。</p>

<pre><code class="diff emacs.c.diff">--- src/emacs.c.orig    2013-02-06 13:33:36.000000000 +0900
+++ src/emacs.c 2013-11-02 22:38:45.000000000 +0900
@@ -1158,10 +1158,13 @@
   if (!noninteractive)
     {
 #ifdef NS_IMPL_COCOA
+      /* Started from GUI? */
+      /* FIXME: Do the right thing if getenv returns NULL, or if
+         chdir fails.  */
+      if (! inhibit_window_system &amp;&amp; ! isatty (0))
+        chdir (getenv ("HOME"));
       if (skip_args &lt; argc)
         {
-     /* FIXME: Do the right thing if getenv returns NULL, or if
-        chdir fails.  */
           if (!strncmp (argv[skip_args], "-psn", 4))
             {
               skip_args += 1;
</code></pre>

<p>というわけで homebrew の方に
<a href="https://github.com/mxcl/homebrew/pull/23897">fix default-directory on Cocoa and Mavericks</a>
として pull request を出してみました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X で ansible を入れてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-25-ansible.html"/>
    <updated>2013-10-25T13:45:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible</id>
    <content type="html"><![CDATA[<p>Mac OS X 10.8.5 でシステム側の python は使わずに pyenv を使って ansible を入れてみました。</p>

<p>2013-11 追記: 今は homebrew でインストールできるようになっていて <code>brew install ansible</code> だけでインストールできます。</p>

<!--more-->


<h2>参考サイト</h2>

<ul>
<li><a href="http://qiita.com/ryurock/items/c4065da9f16c1f6248b7">Ansible - OSXでpyenvインストールメモ</a></li>
<li><a href="http://qiita.com/yamasaki-masahide/items/0546b2b7770150394159">ansible pyenvを使った環境に依存しないインストール</a></li>
<li><a href="http://ansibleworks.com/docs/intro_installation.html">Installation | AnsibleWorks</a></li>
</ul>


<h2>必要なもの</h2>

<ul>
<li>homebrew</li>
</ul>


<h2>pyenv</h2>

<p>参考サイトと同じように homebrew で pyenv をインストールします。</p>

<pre><code>brew update
brew install pyenv
</code></pre>

<p><a href="http://mobileapplication.blog.fc2.com/blog-entry-21.html">(旧) 猫好きモバイルアプリケーション開発者記録 rbenv init が重い問題に対する対処法</a>
という話をみてから <code>init</code> の時には <code>rehash</code> しないようにしていたので、
<code>--no-rehash</code> というオプションを付けています。</p>

<pre><code class="bash https://github.com/znz/dot-shell/blob/master/profile.d/50pyenv.sh">if type pyenv &gt;/dev/null 2&gt;&amp;1; then
    eval "$(pyenv init - --no-rehash)"
fi
</code></pre>

<p><code>exec zsh</code> でシェルを再起動するなり、設定ファイルをドットコマンドや <code>source</code> コマンドで読み直すなり、
<code>eval "$(pyenv init -)"</code>
を直接実行するなりして設定を反映させます。</p>

<h2>pyenv でインストール</h2>

<p><a href="http://qiita.com/yamasaki-masahide/items/0546b2b7770150394159">ansible pyenvを使った環境に依存しないインストール</a>
で 2.7.5 を入れていたので、
<code>pyenv install [TAB]</code>
で補完候補をみて、
2.7 系の最新が 2.7.5 のままなのを確認してインストールしました。
この後で必要になる <code>pip</code> は <code>pyenv</code> が自動でインストールしてくれていました。</p>

<pre><code>pyenv install 2.7.5
pyenv rehash
pyenv global 2.7.5
</code></pre>

<h2>pip でライブラリをインストール (不要?)</h2>

<p>必要なライブラリをインストールしましたが、
この手順は不要そうです。
PyYAML のインストールのところで libyaml が見つからないというエラーがでていましたが、
<code>pip install</code> 自体は成功していたので、問題はなかったようです。</p>

<pre><code>pip install paramiko jinja2 PyYAML pycrypto markupsafe
</code></pre>

<h2>git clone して試す</h2>

<p>ライブラリをインストールしたので、
<a href="http://ansibleworks.com/docs/intro_installation.html#running-from-source">Running From Source</a>
の方法で試せましたが、
この方法で入れたものは後で消しました。</p>

<pre><code>git clone git://github.com/ansible/ansible.git
cd ansible
source ./hacking/env-setup
</code></pre>

<h2>pip で ansible をインストール</h2>

<p>ansible の
<a href="http://ansibleworks.com/docs/intro_installation.html#latest-releases-via-pip">Latest Releases Via Pip</a>
で ansible 自体も pip でインストールできるとわかったので、
<code>sudo</code> なしの <code>pip install ansible</code> でインストールしました。
必要なライブラリは依存関係でここで一緒にインストールされるので、
先に個別にインストールする必要はなさそうでした。</p>

<p>そのままだと
<code>error: could not create '/usr/share/ansible': Permission denied</code>
で失敗したので、
homebrew で <code>/usr/local</code> が admin グループに書き込み可能に設定されるのを参考にして、
admin グループに書き込み可能で作成してからインストールすると大丈夫でした。</p>

<p><code>install</code> コマンドでのディレクトリの作成やパーミッションの設定は、
何度実行しても同じ結果になるという点では
<code>mkdir -p</code> や <code>chmod</code> や <code>chown</code> の組み合わせと同じですが、
1コマンドで済むのでオススメです。</p>

<pre><code>sudo install -d -g admin -m 775 /usr/share/ansible
pip install ansible
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[homebrew の reinstall で使われるオプションの保存場所]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-13-homebrew-used-options.html"/>
    <updated>2013-09-13T21:58:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/homebrew-used-options</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013-09-08-rabbiter-on-mac.html">rabbiter の記事</a>
で、
「一度 <code>--with-curl-ca-bundle</code> 付きでインストールした後だと、以下のようにオプションなしの reinstall でもオプションが付くようです。」
と書きましたが、そのオプションがどこに保存されているのかを調べました。</p>

<!--more-->


<p>実際に調べるのはソースをたどったりして結構大変だったのですが、
最終的に
<code>/usr/local/Cellar/glib-networking/2.36.2/INSTALL_RECEIPT.json</code>
に <code>used_options</code> というキーで保存されているということがわかりました。</p>

<p><code>Cellar</code> はインストールしたファイルの実体が入るところなので、
あらかじめダミーの <code>INSTALL_RECEIPT.json</code> を用意しておいて
オプションなしの <code>brew reinstall</code> の時に使われるオプションを
埋め込んでおくという用途に使うのには向いていないということが
わかりました。</p>
]]></content>
  </entry>
  
</feed>
