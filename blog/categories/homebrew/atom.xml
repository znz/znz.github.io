<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: homebrew | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/homebrew/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2018-02-01T23:45:50+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XQuartzでX転送がうまくいかなかったので調べた]]></title>
    <link href="http://blog.n-z.jp/blog/2018-02-01-xquartz-xauth.html"/>
    <updated>2018-02-01T23:13:13+09:00</updated>
    <id>http://blog.n-z.jp/blog/xquartz-xauth</id>
    <content type="html"><![CDATA[<p>XQuartz で openssh の X 転送がうまくいかなかったので、調べてみました。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>macOS High Sierra 10.13.3, macOS Sierra 10.12.6</li>
<li>XQuartz 2.7.11</li>
</ul>


<h2>インストール方法</h2>

<p>XQuartz は <code>brew cask install xquartz</code> で入れました。
手動でダウンロードしてインストールした時もあまり違いはなさそうです。</p>

<h2>初回の問題</h2>

<p>初回インストール時はインストーラーの最後で再起動を促されますが、再起動した後でもダメでした。</p>

<p>そもそも、再起動していないと ssh 経由でない状態でも X が起動しないので、今回は無関係でした。</p>

<h2>X 転送の許可の問題</h2>

<p>接続先の <code>/etc/ssh/sshd_config</code> は <code>X11Forwarding yes</code> になっていて、ちゃんと許可されていました。</p>

<h2>xauth の問題</h2>

<p>色々悩んだ末、 <code>ssh -Xv</code> のように <code>-v</code> をつけてデバッグログを表示させて、よくみてみると、</p>

<pre><code>debug1: No xauth program.
Warning: untrusted X11 forwarding setup failed: xauth key data not generated
</code></pre>

<p>と出ていて xauth の問題だとわかりました。</p>

<p>なぜか <code>/opt/X11/bin</code> にパスが通っていなかったのが原因らしく、 <code>~/.ssh/config</code> に</p>

<pre><code>XAuthLocation /opt/X11/bin/xauth
</code></pre>

<p>と設定して X サーバー側 (XQuartz 側) の問題は解決しました。</p>

<p>これとは別に X クライアント側 (ssh で接続した先) でも xauth がない環境があったので、 <code>sudo apt install xauth</code> でインストールして解決しました。</p>

<h2>PATH の問題</h2>

<p>動作確認によく使っている <code>xeyes</code> などもローカル環境で起動しなかったので、普通は <code>/opt/X11/bin</code> にパスを通しておいた方が良さそうです。
普段使っている iTerm2 + zsh ではなく Terminal.app + bash だと問題なくパスが通っていたので、パスが通らないのは、自分の設定の問題の可能性もたかそうでした。</p>

<p><code>/etc/paths.d/40-XQuartz</code> に <code>/opt/X11/bin</code> と書かれていて、普通はこれでパスが通るようです。</p>

<h2>まとめ</h2>

<p>X 転送ができなかった環境で原因と対策を調べてみました。</p>

<p>結局、ログが重要ということで、原因追求にはサーバー側のログを見たり <code>ssh</code> の <code>-v</code> の数を増やしてログをしっかりみたりするしかないようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew-CaskでLibreOfficeの日本語版をインストール]]></title>
    <link href="http://blog.n-z.jp/blog/2018-01-23-homebrew-libreoffice.html"/>
    <updated>2018-01-23T21:55:18+09:00</updated>
    <id>http://blog.n-z.jp/blog/homebrew-libreoffice</id>
    <content type="html"><![CDATA[<p>Homebrew-Cask で LibreOffice が日本語訳インターフェースも含めて簡単にインストールできるようになっていました。</p>

<!--more-->


<h2>バージョン</h2>

<ul>
<li>macOS Sierra 10.12.6</li>
<li>Homebrew 1.5.1</li>
<li>Homebrew-Cask 1.5.1</li>
</ul>


<h2>インストール方法</h2>

<p>macOS を日本語環境で使っていれば <code>brew cask install libreoffice-language-pack</code> で依存関係にある <code>libreoffice</code> と一緒に入ります。</p>

<p><a href="https://github.com/caskroom/homebrew-cask/blob/master/doc/cask_language_reference/stanzas/language.md">https://github.com/caskroom/homebrew-cask/blob/master/doc/cask_language_reference/stanzas/language.md</a> に書いてあるように <code>brew cask install libreoffice-language-pack --language=ja</code> で明示的に日本語を指定することもできます。</p>

<h2>ダウンロードが遅い場合</h2>

<p>日本のミラーのひとつの <a href="http://www.ftp.ne.jp/">http://www.ftp.ne.jp/</a> が「 <strong>(2017/12/21)</strong> <em>ftp-srv2 is down currently</em>, because the network equipment for ftp-srv2 has been broken from 2017/12/19. In addition, ftp is too heavy load. Please use the other sites for archive downloads. We are trying to replace the network equipment.」と書いてあるように非常に重いので、ダウンロードが非常に遅い場合があるかもしれません。
その場合は、公式サイトから手動でミラーを選択してダウンロードした <code>LibreOffice_5.4.4_MacOS_x86-64.dmg</code> を <code>~/Library/Caches/Homebrew/Cask/libreoffice--5.4.4.dmg</code> におきます。
Cache に置く時のファイル名は、ダウンロードを中断したら <code>~/Library/Caches/Homebrew/Cask/libreoffice--5.4.4.dmg.incomplete</code> があるはずなので <code>.incomplete</code> を削ったファイル名にします。
その上で <code>brew cask install</code> を再度実行すると、ダウンロード済みのファイルが使われます。</p>

<h2>バージョンアップ方法</h2>

<p><a href="/blog/2017-04-27-homebrew-upgrade-cleanup.html">homebrewの更新はbrew upgrade &ndash;cleanupだけでよくなっている</a>に書いたように <code>brew upgrade --cleanup</code> などで Homebrew の更新をした上で、 <code>brew cask reinstall libreoffice</code> で LibreOffice 自体を更新して (英語に一時的に戻って)、 <code>brew cask reinstall libreoffice-language-pack</code> で再度日本語にします。
<code>brew cask reinstall libreoffice libreoffice-language-pack</code> でまとめて更新もできます。</p>

<h2>まとめ</h2>

<p>以前は LibreOffice 本体は cask でインストールできても、日本語で使おうとすると別途インストールする必要がありましたが、いつの間にか homebrew-cask が多言語対応していて、 Firefox や Thunderbird は自動で日本語が、LibreOffice の場合は LibreOffice 自体の配布がわかれているので、 <code>libreoffice-language-pack</code> を別途入れる必要がありますが、コマンド1,2個で簡単にインストールできるようになっていました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[homebrewの更新はbrew upgrade --cleanupだけでよくなっている]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-27-homebrew-upgrade-cleanup.html"/>
    <updated>2017-04-27T20:00:48+09:00</updated>
    <id>http://blog.n-z.jp/blog/homebrew-upgrade-cleanup</id>
    <content type="html"><![CDATA[<p>Homebrew のパッケージの更新に昔は <code>brew update</code>; <code>brew upgrade</code>; <code>brew cleanup</code> と 3 コマンドを使っていましたが、今は <code>brew upgrade --cleanup</code> だけでよくなっています。</p>

<!--more-->


<h2>確認バージョン</h2>

<ul>
<li>Homebrew 1.1.13</li>
</ul>


<h2><code>brew update</code></h2>

<p>Debian 系で使われている <code>apt</code> の <code>sudo apt-get update</code> に相当するパッケージ情報を更新するサブコマンドです。
基本的には <code>git</code> で更新しているだけなので、こけたら <code>git</code> コマンドを直接使ってなおす必要がありそうです。</p>

<p>今は他のサブコマンドを実行した時に情報が古ければ自動で更新されるので不要になっています。</p>

<h2><code>brew upgrade</code></h2>

<p>パッケージを更新するサブコマンドです。</p>

<p>古いバージョンも残るので、 <code>gem update</code> に近いような気がします。</p>

<h2><code>brew cleanup</code></h2>

<p>古いバージョンを消したり、ダウンロードしたファイルのキャッシュを消したりします。</p>

<p><code>brew upgrade --cleanup</code> のように <code>upgrade</code> サブコマンドに <code>--cleanup</code> オプションをつけると <code>upgrade</code> 中に削除してくれるようです。
(例えば 2 個更新があった時に、更新、削除、更新、削除になる。)</p>

<p>後から <code>brew cleanup</code> するのと違って <code>upgrade</code> 中に削除してくれるので、何が削除されたのかの確認はしにくくなったり、問題が起きた時に戻しにくくなったりという欠点はありますが、一時的に空き容量が減るのが緩やかになったり、消し忘れがなくなるなどの利点があると思います。</p>

<h2>まとめ</h2>

<p><code>brew update</code>; <code>brew upgrade</code>; <code>brew cleanup</code> と 3 コマンドを連続で使っている人は、 <code>brew upgrade --cleanup</code> だけに置き換えると便利です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[brew pin でバグのあるバージョンを避ける例]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-19-brew-pin.html"/>
    <updated>2014-05-19T21:35:03+09:00</updated>
    <id>http://blog.n-z.jp/blog/brew-pin</id>
    <content type="html"><![CDATA[<p><code>graphviz version 2.38.0 (20140413.2041)</code>
で
<a href="http://graphviz.org/mantisbt/view.php?id=2444">label の先頭の日本語が消える</a>
というバグにはまったので、
<code>brew pin</code>
で修正されたバージョンがリリースされるまでの間、
古いバージョンに固定することにしました。
(バグ自体はリンク先をみればわかるようにすぐに修正されたようです。)</p>

<!--more-->


<h2>対象バージョン</h2>

<p>現在の最新は</p>

<pre><code class="console">% dot -V
dot - graphviz version 2.38.0 (20140413.2041)
</code></pre>

<p>で以下のバージョンに戻しました。</p>

<pre><code class="console">% dot -V
dot - graphviz version 2.36.0 (20140111.2315)
</code></pre>

<h2>対象コミット調査</h2>

<p>以下のように 2.38.0 にあがったコミットを探してみると
<code>2f368f7be64a5b4a6b56b4ab85827997fa520953</code>
だったので、この前に戻せば良いとわかりました。</p>

<pre><code class="console">% cd $(brew --prefix)
% git log -p Library/Formula/graphviz.rb
</code></pre>

<h2><code>brew pin</code> で固定</h2>

<p>そして、以下の手順で固定しました。</p>

<ul>
<li><code>git checkout コミット^</code> でコミットの直前に戻す</li>
<li>古いバージョンに戻すので一度アンインストール</li>
<li>古いバージョンでインストールし直し</li>
<li><code>brew pin</code> で固定</li>
<li><code>git checkout master</code> で <code>/usr/local</code> (<code>brew --prefix</code>) の状態を戻す</li>
<li><code>brew upgrade</code> で固定されているのを確認</li>
</ul>


<pre><code class="console">% cd $(brew --prefix)
%  git checkout 2f368f7be64a5b4a6b56b4ab85827997fa520953\^
Note: checking out '2f368f7be64a5b4a6b56b4ab85827997fa520953^'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at b8b3a30... glib-networking 2.40.1
%  lv Library/Formula/graphviz.rb
% brew uninstall graphviz
Uninstalling /usr/local/Cellar/graphviz/2.38.0...
% brew install graphviz
==&gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/graphviz-2.36.0_1.mav
Already downloaded: /Library/Caches/Homebrew/graphviz-2.36.0_1.mavericks.bottle.tar.gz
==&gt; Pouring graphviz-2.36.0_1.mavericks.bottle.tar.gz
🍺  /usr/local/Cellar/graphviz/2.36.0_1: 470 files, 11M
% brew pin graphviz
% git checkout master
Previous HEAD position was b8b3a30... glib-networking 2.40.1
Switched to branch 'master'
% brew upgrade
==&gt; No packages to upgrade
==&gt; Not upgrading 1 pinned package:
graphviz 2.38.0
</code></pre>

<h2><code>brew unpin</code></h2>

<p>修正されたバージョンがリリースされて、
Homebrew でインストールできるようになったら
<code>brew unpin graphviz</code>
で解除すれば良さそうです。</p>

<p><code>brew pin</code> は
<a href="http://qiita.com/uasi/items/f06c6fe7c04b593ec6a3#comment-178ddb970a3033653648">qiita の Homebrew でバージョンを指定してインストールするコマンド作った のコメント</a>
に書いてあるように、
FORMULA 指定なしの <code>brew upgrade</code> での更新対象にしないという意味のようなので、
master に戻った状態で <code>unpin</code> してしまっても
その場で <code>pin</code> し直せば大丈夫のようです。</p>

<pre><code class="console">% dot -V
dot - graphviz version 2.36.0 (20140111.2315)
% brew unpin graphviz
% brew pin graphviz
% brew upgrade
==&gt; No packages to upgrade
==&gt; Not upgrading 1 pinned package:
graphviz 2.38.0
</code></pre>

<p>修正されたバージョンがリリースされた時に <code>brew unpin</code> を忘れないように実行する必要がありますが、
<code>brew upgrade</code> の時に毎回メッセージが出るので、気付きやすそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[homebrew cask で sylpheed test1 をインストールした]]></title>
    <link href="http://blog.n-z.jp/blog/2014-04-21-brew-cask-sylpheed.html"/>
    <updated>2014-04-21T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/brew-cask-sylpheed</id>
    <content type="html"><![CDATA[<p><a href="http://sylpheed.sraoss.jp/ja/news.html">Sylpheed 3.4.1-test1 for Mac OS X (テスト版)</a>
がリリースされていたので、
homebrew cask を使ってインストールしてみました。</p>

<p>dmg で配布されているアプリケーションを homebrew cask に対応させる例としても参考になると思います。</p>

<!--more-->


<h2>homebrew cask のインストール</h2>

<p><a href="http://brew.sh/">Homebre</a>
と
<a href="https://github.com/phinze/homebrew-cask">homebrew-cask</a>
をあらかじめインストールしておきます。</p>

<h2>cask 作成</h2>

<p><code>brew cask create sylpheed-test</code> で作成して、
内容を以下のように変更しました。</p>

<pre><code class="ruby">class SylpheedTest &lt; Cask
  url 'http://sylpheed.sraoss.jp/sylpheed/macosx/Sylpheed_3.4.1-test1.dmg'
  homepage 'http://sylpheed.sraoss.jp/'
  version '3.4.1-test1'
  sha256 '52505ab7913fd58fa921a9c8b574286f08073321b440b7aa23dba3896b4b2ddc'
  link 'Sylpheed.app'
end
</code></pre>

<p><code>sha256</code> は
<a href="https://github.com/phinze/homebrew-cask/blob/master/CONTRIBUTING.md#cask-stanzas">Cask Stanzas</a>
の説明にあるように別途 <code>url</code> に指定したファイルをダウンロードして <code>shasum -a 256 &lt;file&gt;</code> で調べました。
もし upstream のリリースアナウンスに書いてあれば、それをそのまま使えば良いと思います。</p>

<p>編集途中で閉じてしまった場合は
<code>brew cask edit sylpheed-test</code>
で再編集できます。</p>

<p>実体は <code>$(brew --prefix)/Library/Taps/phinze-cask/Casks/sylpheed-test.rb</code> にあります。</p>

<h2>インストール</h2>

<p><code>sylpheed-test.rb</code> が作成できたら <code>brew cask install sylpheed-test</code> でインストールできます。</p>

<pre><code class="console">% brew cask install sylpheed-test
==&gt; Downloading http://sylpheed.sraoss.jp/sylpheed/macosx/Sylpheed_3.4.1-test1.dmg
######################################################################## 100.0%
==&gt; Symlinking App 'Sylpheed.app' to '/Users/kazu/Applications/Sylpheed.app'
🍺  sylpheed-test installed to '/opt/homebrew-cask/Caskroom/sylpheed-test/3.4.1-test1' (314 files, 32M)
</code></pre>

<h2>起動</h2>

<p>Launchpad から起動したり、Spotlight で検索したりして普通に起動します。</p>

<p>初回起動で
<code>~/Library/Application Support/Sylpheed/Mailboxes/Mail</code>
を作るかきかれましたが、その時点で既に
<code>~/Library/Application Support/Sylpheed</code>
は作成されていました。</p>

<h2>まとめ</h2>

<p>テスト版なので、まだ変なところはあるようですが (Command+V がメッセージビューのトグルになってペーストできないとか)
Mac OS X 版特有の問題があるだけのようなので、今後の正式版に期待しています。</p>

<p>まだ test 版なので pull request はしていないのですが、
正式版が出たら homebrew cask に pull request を送るかもしれません。
beta 版なども対応するなら
<a href="https://github.com/caskroom/homebrew-versions">homebrew-cask-versions</a>
に pull request を送ると良さそうです。</p>
]]></content>
  </entry>
  
</feed>
