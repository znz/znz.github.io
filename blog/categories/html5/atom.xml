<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: html5 | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/html5/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2016-04-08T01:07:17+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ページの切り替わりごとに背景の自動変更]]></title>
    <link href="http://blog.n-z.jp/blog/2014-03-03-auto-change-background.html"/>
    <updated>2014-03-03T23:25:01+09:00</updated>
    <id>http://blog.n-z.jp/blog/auto-change-background</id>
    <content type="html"><![CDATA[<p>ある Rails アプリでページの切り替わりごとに背景を自動で変更するようにしていたのですが、
デザイン変更で使わなくなったので、どういうことをやっていたのか、メモとして残しておくことにします。</p>

<!--more-->


<h2>HTML</h2>

<p>まず CSS 用のクラスとして自動変更する目印の <code>background</code> と初期状態の <code>background-0</code> を <code>body</code> に設定しました。</p>

<pre><code class="haml app/views/layouts/application.html.haml">  %body.background.background-0
</code></pre>

<h2>スクリプト</h2>

<p><code>sessionStorage</code> を使ってタブごとに状態を保存するようにしました。
今回は画像として <code>app/assets/images/background-0.jpg</code> と <code>app/assets/images/background-1.jpg</code> の 2 枚だけだったので、
<code>background_num = 2</code> にしています。</p>

<p>以下のコードを書いた時には知らなかったので対処が入っていないのですが、
Safari のプライベートブラウズでは <code>sessionStorage</code> があるのに使えないという厄介なことになっているので、必要ならそのあたりのエラー処理も入れた方が良いです。</p>

<pre><code class="coffeescript app/assets/javascripts/background.js.coffee">jQuery -&gt;
  if typeof sessionStorage != 'undefined'
    background_num = 2
    change_background = -&gt;
      body = $("body")
      if !body.hasClass("background")
        return
      background = sessionStorage.getItem("background")
      if background
        background = parseInt(background)
        $("body").removeClass("background-" + background)
        background = (background + 1) % background_num
        $("body").addClass("background-" + background)
      else
        background = 0
      sessionStorage.setItem("background", background)
    $(document).on 'ajax:success.background', change_background
    change_background()
</code></pre>

<h2>スタイルシート</h2>

<p>rails 4.0.3, sass-rails 4.0.1, sprockets 2.11.0, sprockets-rails 2.0.1
で確認したところ、
<code>depend_on_asset</code> ではなく <code>depend_on</code> を使って拡張子付きのファイル名で
ファイルの先頭に <code>depend_on</code> を並べれば画像ファイルを変更したときに
<code>rake assets:precompile</code> で <code>css</code> も再生成されるように見えました。</p>

<p>つまり <code>//= depend_on "background-1.jpg"</code> を <code>.background-1</code> の直前に持っていくと反映されませんでした。</p>

<p><code>depend_on_asset</code> だと全く反映されませんでした。</p>

<p>ファイルの指定は <code>//= depend_on "../images/background-0.jpg"</code> や <code>//= depend_on "../images/background-1.jpg"</code> のように相対パスでも、ファイル名のみでも大丈夫でした。</p>

<p><code>image-url</code> で参照しているのだから、そこで自動的に依存関係に入ってほしいところですが、そういう仕組みにはなっていないようです。
ちゃんと読んでいないのですが、
<a href="https://github.com/sstephenson/sprockets/issues/488">Dependent assets might not be recompiled</a>
のあたりにすでに話が出ているので、仕様なのかもしれません。</p>

<pre><code class="css app/assets/stylesheets/background.css.scss">//= depend_on "background-0.jpg"
//= depend_on "background-1.jpg"
.background-0 {
  background-image: image-url("background-0.jpg");
}
.background-1 {
  background-image: image-url("background-1.jpg");
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブラウザのみで使えるバーコードリーダーを作った]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-20-web-barcode-reader.html"/>
    <updated>2013-10-20T19:27:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/web-barcode-reader</id>
    <content type="html"><![CDATA[<p>最近の HTML5 の getUserMedia API でカメラの画像をブラウザ上で処理できるようになったということで、
専用のバーコードリーダー機器を買ったり、
モバイル機器で専用のアプリを入れたりしなくても、
ノートPCの内蔵のカメラでも使えるバーコードリーダーを作ってみました。</p>

<!--more-->


<h2>使い方</h2>

<p><a href="http://web-barcode-reader.herokuapp.com/">Web Barcode Reader</a>
を開いて、
既にPC上に画像がある場合はその画像を選択してください。
選択するだけでバーコードの認識が始まります。
iOS や Android などではファイル選択かカメラで撮影かを選べます。</p>

<p><a href="https://github.com/EddieLa/BarcodeReader">BarcodeReader</a>
のライブラリを使って
JavaScript のみで認識していて、
バーコードの認識は初回はちょっと時間がかかるようなので、
ゆっくり待ってください。</p>

<p>Google Chrome などではファイル選択の横に
「ブラウザの中でカメラ画像を取得」
ボタンが出るので、
そのボタンを押した後、
カメラへのアクセスの許可を求められるので、
「許可」を押して許可してください。</p>

<p>そしてカメラに入るようにバーコードをうつして、
画像をクリックすると認識が始まります。
(クリックできる範囲が広い方が良いかと思って画像のクリックにしています。)</p>

<p>向きは逆さまなどでも良いようですが、
画質が悪いと認識できないことが多いようなので、
しっかりピントを合わせてカメラいっぱいにうつすと認識しやすいようです。</p>

<p>必要な数だけ繰り返した後、
不要になったら
「カメラを閉じる」
ボタンを押せば
ブラウザからカメラを使うのを止めます。</p>

<p>最後に下のテキストエリアに認識できたバーコードがたまっているので、
コピーして自由に使えます。</p>

<h2>仕組み</h2>

<p>画像ファイルから認識する方は
HTML5 の File API
を使ってローカルファイルを読み込んでいます。</p>

<p>iOS や Android で撮影が選べる機能は
<code>&lt;input type="file" accept="image/*;capture=camera"&gt;</code>
のように
<code>accept</code>
属性を付けるだけで使えます。</p>

<p>画像は
<code>img</code>
要素に読み込んで、
読み終わったら
<code>canvas</code>
要素にコピーして
<code>canvas</code>
要素から画像データを取得しています。</p>

<p>最終的にその画像データは、
Web Workers
という HTML5 の機能を使ってバックグラウンドで
<a href="https://github.com/EddieLa/BarcodeReader">BarcodeReader</a>
の
<code>DecoderWorker.js</code>
を動かして、
バーコードの認識をしています。</p>

<h3>カメラを扱う仕組み</h3>

<p>まず
<code>getUserMedia</code>
でカメラを開いて
video
要素に設定します。</p>

<p>よくある使用例では
<code>video</code>
要素には
<code>autoplay</code>
属性を付けることが多いようですが、
今回は <code>video</code> 要素の <code>play()</code> を呼ぶようにしました。</p>

<p><code>getUserMedia</code>
は一度変数に保存して、
その function を呼ぶという使い方は出来ないようだったので、
以下のように <code>call</code> で呼ぶようにしました。</p>

<pre><code class="coffeescript">  getUserMedia =
    navigator.getUserMedia ||
    navigator.webkitGetUserMedia ||
    navigator.mozGetUserMedia ||
    navigator.msGetUserMedia

  getUserMedia.call(navigator, {audio:false,video:true,toString:-&gt;"video"}, onStream, onError)
</code></pre>

<p><code>onStream</code>
の引数にわたってきた
<code>stream</code>
は保存しておいて後で使いました。</p>

<p>カメラを閉じるには
<code>video</code> 要素で再生を止めるのではなく、
<code>stream</code> の方の <code>stop()</code> を呼ぶ必要がありました。</p>

<p>一度 <code>stream</code> を <code>stop()</code> してしまうと、
再度再生するには、
また許可を求める必要があったので、
毎回閉じるのではなく、
連続読み込み用に閉じるのは別ボタンの機能にしました。</p>

<h2>ソースコード</h2>

<p>ソースコードは実験的に Gumroad で売ってみることにしました。
先週の三連休で作って、さらに今日追加で細かい調整をして4日もかかっている感じなので、
缶コーヒーでもおごる感じで買ってもらえると良いかもしれません。</p>

<ul>
<li><a href="https://gum.co/egEG">WebBarcodeReaderのCoffeeScript部分のソース</a></li>
<li><a href="https://gum.co/OSLo">WebBarcodeReaderのRailsプロジェクト全体のソース</a></li>
</ul>


<script type="text/javascript" src="https://gumroad.com/js/gumroad.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery UI Autocomplete を自動で開く]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-18-auto-open-autocomplete.html"/>
    <updated>2013-09-18T15:43:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/auto-open-autocomplete</id>
    <content type="html"><![CDATA[<p>Google カレンダーの時刻入力のように combobox 的な入力欄で、
デフォルトは選択肢から選んで、
選択肢にないときは直接入力も出来るようにしたいと思いました。</p>

<p>いくつかの方法を試した結果、
jQuery UI の Autocomplete に少しコードを足したら
希望通りの挙動に出来ました。</p>

<!--more-->


<h2>HTML5 の datalist と autocomplete</h2>

<p>最初は HTML5 の datalist 要素を試しました。
<code>simple_form</code> gem を使っているので、
以下のように書きました。</p>

<pre><code class="haml">= f.input :drink, input_html: { autocomplete: "on", list: "drink_list" }
%datalist#drink_list
  %options(value="不要")
  %options(value="水")
  %options(value="お茶")
  %options(value="コーヒー")
</code></pre>

<p>この方法の問題点としては、
IE は IE10 (以降?) しか対応していなかったり、
Mobile Safari も対応してなさそうだったりして
対応環境が微妙だったのと、
入力欄にフォーカスだけで自動で開くという挙動が出来なくて、
矢印の上下で開く必要があったので、
諦めました。</p>

<h2>Bootstrap Typeahead</h2>

<p>挙動としては
HTML5 の datalist の方法や
jQuery UI Autocomplete と似ていたのですが、
Bootstrap 3 では外されているという話があったり、
別途新しい typeahead.js が開発されているという話があったりして、
先にある程度 jQuery UI Autocomplete を試していたこともあり、
別途新しいライブラリを入れるなどの深追いはせずに
jQuery UI Autocomplete を使うことにしました。</p>

<h2>jQuery UI Autocomplete</h2>

<p><code>jquery-ui-rails</code> gem を使っていて、
必要なものだけ CSS や JS を require していたので、
まず <code>app/assets/stylesheets/application.css</code> に</p>

<pre><code class="text application.css"> *= require jquery.ui.autocomplete
</code></pre>

<p>を追加しました。</p>

<p>次に <code>app/assets/javascripts/autocomplete.js.coffee</code> として
以下のような内容で作成しました。</p>

<pre><code class="coffeescript autocomplete.js.coffee">#= require jquery.ui.autocomplete
jQuery -&gt;
  drink_list = [
    "不要"
    "水"
    "お茶"
    "コーヒー"
  ]
  $("#somemodel_drink").autocomplete
    source: drink_list
    autoFocus: true
    delay: 0
    minLength: 0
  .on "focus", -&gt;
    $("#somemodel_drink").autocomplete("search", "")
</code></pre>

<h2>余談</h2>

<p>今回の話とは直接は関係ないのですが、
ファイルを細かく分割すると管理しやすくなるのは良いのですが、
他のライブラリの中のファイル名と重ならないようにしないと
<code>bootstrap.js.coffee</code> の中で <code>#= require bootstrap</code> しても
自分自身を <code>require</code> してしまって空っぽになって悩むことに
なるので注意が必要でした。</p>
]]></content>
  </entry>
  
</feed>
