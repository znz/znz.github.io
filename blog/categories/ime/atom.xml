<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ime | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ime/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-08-03T12:32:03+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac OS XでのIME制御についての考察]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-14-macosx-ime.html"/>
    <updated>2013-11-14T02:24:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/macosx-ime</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013-11-12-cocoa-emacs-ime.html">Cocoa Emacs のインラインパッチ関連の設定</a>
の時や
<a href="/blog/2013-11-13-tty-ime.html">iTerm2 で IME 制御シーケンスがきかないのを調べた</a>
時にも気になったのですが、
Mac の IME に open/close という概念はあるのかという話です。</p>

<!--more-->


<h2>IME の開閉状態?</h2>

<p>iBus 1.5 関連の記事の
<a href="http://www.kaoriya.net/blog/2013/10/18/">iBusがクソになった理由 — KaoriYa</a>
で知ったのですが、
Mac OS X は IME のオン・オフのような状態の切り替えではなく、
「ことえりのひらがな」とか
「ことえりのカタカナ」とか
「ことえりの英字」とか
のようなIMEの種類を切り替えて入力するようになっています。</p>

<p>この考え方と開閉状態しか考慮していない二値的な制御シーケンスは相性が悪いのではないかと思いました。</p>

<h2>Cocoa Emacs のインラインパッチでは?</h2>

<p>Cocoa Emacs のインラインパッチをよく見ると
<code>mac-toggle-input-source</code>
という関数があって、
<code>(mac-toggle-input-source nil)</code>
で IME オフ相当に、
<code>(mac-toggle-input-source t)</code>
で IME オン相当にできるようなので、
対応は不可能ではないのかもしれません。</p>

<h2>端末の制御シーケンスでは?</h2>

<p><a href="http://ttssh2.sourceforge.jp/manual/ja/about/ctrlseq.html">TeraTerm Pro の対応制御シーケンス</a>
には以下の3種類の IME 関連の制御シーケンスがあります。</p>

<p>```
  CSI &lt; r    TTIMERSIME の開閉状態を復元する。
  CSI &lt; s    TTIMESVIME の開閉状態を保存する。
  CSI &lt; Ps t TTIMESTIME の開閉状態を設定する。省略時の Ps の値は 0。</p>

<pre><code>           Ps = 0      IME を閉じる。
              = 1      IME を開く。
</code></pre>

<p>```</p>

<p>この中の <code>TTIMESTIME</code> の <code>Ps</code> を拡張して、
2 以上も受け付けるようにして、
(別の状態が不可能なら 1 と同じ挙動で)
可能ならカタカナ入力などの別の IME の状態を設定できるようにするという案を思いつきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iTerm2でのIME制御がきかない]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-13-tty-ime.html"/>
    <updated>2013-11-13T00:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/tty-ime</id>
    <content type="html"><![CDATA[<p>iTerm2 Build 1.0.0.20131109 で確認しました。</p>

<p><a href="http://ttssh2.sourceforge.jp/manual/ja/about/ctrlseq.html">TeraTerm Pro の対応制御シーケンス</a>
や
<a href="http://nanno.dip.jp/softlib/man/rlogin/ctrlcode.html">RLogin の対応している制御コード一覧</a>
には IME の状態制御があります。</p>

<p>iTerm2 はオプションでその制御シーケンスを受け付けるようには出来るのですが、
現状は無視するだけのようです。</p>

<!--more-->


<h2>制御シーケンス</h2>

<p>TeraTerm Pro 由来で RLogin も対応したものらしいです。
具体的なシーケンスとしては
<a href="http://ttssh2.sourceforge.jp/manual/ja/about/ctrlseq.html">TeraTerm Pro の対応制御シーケンス</a>
から引用すると、
次の3種類になります。</p>

<p>```
  CSI &lt; r    TTIMERSIME の開閉状態を復元する。
  CSI &lt; s    TTIMESVIME の開閉状態を保存する。
  CSI &lt; Ps t TTIMESTIME の開閉状態を設定する。省略時の Ps の値は 0。</p>

<pre><code>           Ps = 0      IME を閉じる。
              = 1      IME を開く。
</code></pre>

<p>```</p>

<h2>iTerm2 の対応</h2>

<p><a href="https://github.com/gnachman/iTerm2">https://github.com/gnachman/iTerm2</a>
の
<a href="https://github.com/gnachman/iTerm2/blob/f47b1f815c54bb7d61adb3917a9a742c0e5cb703/VT100Terminal.m#L575">VT100Terminal.m</a>
を見るとわかるのですが、
制御シーケンスの存在は認識しているようです。
その処理で呼ばれているところを追いかけてみると、
現状はただ無視しているだけでした。</p>

<p>このあたりのコードは設定で
<code>Profiles</code> の <code>Terminal</code> タブの中にある
<code>Use modern parser (experimental)</code>
にチェックを入れないと使われないようで、
チェックなしの状態で
<code>ruby -e 'puts "\e[&lt;1t"</code>
とか実行しても
<code>&lt;1t</code>
と出るだけで何も起きませんでした。
チェックを入れると <code>puts</code> で自動的に入る改行だけになりましたが、
IME の状態に変化はありませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HomebrewのEmacsにIMEインラインパッチが取り込まれたので設定した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-12-cocoa-emacs-ime.html"/>
    <updated>2013-11-12T18:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/cocoa-emacs-ime</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/h12o@github/items/07f773909da5ebdb7b7c">h12o さんのインラインパッチの pull request が取り込まれた</a>
(コメント参照)
ということで、
<code>brew uninstall emacs</code> で一度アンインストールしてから
<code>brew install --cocoa --srgb --with-gnutls --japanese emacs -v</code>
でインストールして、
IME 関連の設定をしてみました。</p>

<!--more-->


<h2>IME 関連設定全体</h2>

<p>以下のように設定してみました。</p>

<p>以降は設定内容を個別に解説していきます。</p>

<p>```scheme
(global-set-key (kbd &ldquo;M-¥&rdquo;) (lambda () (interactive) (insert &ldquo;\&rdquo;)))</p>

<p>(static-when (eq window-system &lsquo;ns)
  (static-when (assoc &ldquo;MacOSX&rdquo; input-method-alist)</p>

<pre><code>;; ime inline patch
(setq default-input-method "MacOSX")
(static-when t
  (mac-translate-from-yen-to-backslash)
  (global-set-key (kbd "M-¥") (lambda () (interactive) (insert "¥")))
  )

(mapc
 (lambda (param)
   (let ((name (car param)))
     (cond
      ((string-match "Japanese\\(\\.base\\)?\\'" name) ;; ひらがなの日本語入力
       (mac-set-input-method-parameter name 'cursor-color "blue"))
      ((string-match "Japanese" name) ;; カナなどの日本語入力
       (mac-set-input-method-parameter name 'cursor-color "red"))
      ((string-match "Roman" name) ;; 英字
       (mac-set-input-method-parameter name 'cursor-color "black"))
      (t ;; その他
       (mac-set-input-method-parameter name 'cursor-color "yellow"))
      )
     ))
 mac-input-method-parameters)
(mac-set-input-method-parameter "com.apple.keylayout.US" 'cursor-color "black")
)
</code></pre>

<p>```</p>

<h2>環境のチェック</h2>

<p><code>(eq window-system 'ns)</code>
で Cocoa Emacs かどうかチェックしています。</p>

<h2>パッチのチェック</h2>

<p><code>(boundp 'mac-input-method-parameters)</code>
でチェックしている例が多かったのですが、
<code>(assoc "MacOSX" input-method-alist)</code>
で真面目に <code>default-input-method</code> に設定できる値かどうか調べています。</p>

<p><code>(boundp 'mac-input-method-parameters)</code>
の方が一般的なようなので、
今後使えなくなる可能性も低そうなので、
<code>alist</code> をたどる必要があって遅そうな <code>assoc</code> のチェックは
あまりおすすめできないです。</p>

<h2>Option+backslash</h2>

<p>普段はデフォルトのままの「ことえり」を使っていて、
Linux での OADG109A と同じように <code>¥</code> キーはちゃんと yen sign の入力になるようにしています。</p>

<p>そして、
<code>Option+¥</code>
で backslash が入力できます。
外側の
<code>(global-set-key (kbd "M-¥") (lambda () (interactive) (insert "\\")))</code>
で Emacs でも同じ挙動になるようにしています。
インラインパッチがない環境だとこの挙動になります。
とりあえず入力できれば良いと思って作った設定なので、
prefix argument などには対応していません。
(<code>C-u M-¥</code> でも4文字ではなく1文字しか入らない)</p>

<p>ところが、これだと
<code>C-¥</code>
で
<code>toggle-input-method</code>
がきかなかったので、不本意ですが
<code>(mac-translate-from-yen-to-backslash)</code>
を使いました。
そして、逆に
<code>Option+¥</code>
で yen sign が入力できるようにするために
<code>(global-set-key (kbd "M-¥") (lambda () (interactive) (insert "¥")))</code>
と設定しています。</p>

<h2>カーソルの色の設定</h2>

<p>IME 対応で一番期待していた部分がこれでした。</p>

<p>ddskk で入力状態によってカーソルの色を変えられるのが便利だったので、
TeraTerm Pro のように IME の状態によってカーソルの表示を変更できるものは
積極的に利用していたこともあって、ちょっと頑張って設定してみました。</p>

<p><code>mac-input-method-parameters</code> の初期値の一部を抜粋すると以下のように設定されていて、
ほとんどの IME は「ことえり」と同じように
<code>.Japanese</code>
で終わっているものが一般的な日本語入力状態に見えたので、
青色にすることにしました。
「Google 日本語入力」はよくわかりませんが、
たぶん <code>.Japanese.base</code> で終わっているものが、
そうだろうと思って設定しました。</p>

<p>そしてカタカナなどの他の入力状態の時は赤色にしました。</p>

<p>それから、
<code>.Roman</code>
で終わっているものが、英字入力状態のようだったので、
黒色に戻すようにしました。</p>

<p>ちゃんと戻す設定も入れないと変わりっぱなしになってしまうので、
戻す設定も重要です。</p>

<p>最後にその他の日本語以外の IME のときは黄色にしました。</p>

<p>ネットで見つかる設定例では
<code>"com.apple.keylayout.US"</code>
にも
<code>mac-set-input-method-parameter</code>
をしているのですが、
<code>mac-input-method-parameters</code>
にはなかったので、
後で設定しています。
(先に設定すると、その他の黄色で上書きしてしまう。)</p>

<p>```scheme ns-win.el.gz
(defvar mac-input-method-parameters
  &lsquo;(</p>

<pre><code>("com.apple.inputmethod.Kotoeri.Roman"
 (title . "A")
 (cursor-color)
 (cursor-type))
("com.apple.inputmethod.Kotoeri.Japanese"
 (title . "あ")
 (cursor-color)
 (cursor-type))
("com.apple.inputmethod.Kotoeri.Japanese.Katakana"
 (title . "ア")
 (cursor-color)
 (cursor-type))
("com.apple.inputmethod.Kotoeri.Japanese.FullWidthRoman"
 (title . "Ａ")
 (cursor-color)
 (cursor-type))
("com.apple.inputmethod.Kotoeri.Japanese.HalfWidthKana"
 (title . "ｱ")
 (cursor-color)
 (cursor-type))
("com.apple.inputmethod.kotoeri.Ainu"
 (title . "アイヌ")
 (cursor-color)
 (cursor-type))
...
("com.google.inputmethod.Japanese.Roman"
 (title . "G")
 (cursor-color)
 (cursor-type))
("com.google.inputmethod.Japanese.base"
 (title . "ぐ")
 (cursor-color)
 (cursor-type))
("com.google.inputmethod.Japanese.Katakana"
 (title . "グ")
 (cursor-color)
 (cursor-type))
("com.google.inputmethod.Japanese.FullWidthRoman"
 (title . "Ｇ")
 (cursor-color)
 (cursor-type))
("com.google.inputmethod.Japanese.HalfWidthKana"
 (title . "ｸﾞ")
 (cursor-color)
 (cursor-type))
("jp.monokakido.inputmethod.Kawasemi.Roman"
 (title . "K")
 (cursor-color)
 (cursor-type))
("jp.monokakido.inputmethod.Kawasemi.Japanese"
 (title . "か")
 (cursor-color)
 (cursor-type))
("jp.monokakido.inputmethod.Kawasemi.Japanese.Katakana"
 (title . "カ")
 (cursor-color)
 (cursor-type))
("jp.monokakido.inputmethod.Kawasemi.Japanese.FullWidthRoman"
 (title . "Ｋ")
 (cursor-color)
 (cursor-type))
("jp.monokakido.inputmethod.Kawasemi.Japanese.HalfWidthKana"
 (title . "ｶ")
 (cursor-color)
 (cursor-type))
("jp.monokakido.inputmethod.Kawasemi.Japanese.HalfWidthRoman"
 (title . "_K")
 (cursor-color)
 (cursor-type))
("jp.monokakido.inputmethod.Kawasemi.Japanese.Code"
 (title . "C")
 (cursor-color)
 (cursor-type))
("com.justsystems.inputmethod.atok21.Roman"
 (title . "A")
 (cursor-color)
 (cursor-type))
("com.justsystems.inputmethod.atok21.Japanese"
 (title . "あ")
 (cursor-color)
 (cursor-type))
("com.justsystems.inputmethod.atok21.Japanese.Katakana"
 (title . "ア")
 (cursor-color)
 (cursor-type))
("com.justsystems.inputmethod.atok21.Japanese.FullWidthRoman"
 (title . "英")
 (cursor-color)
 (cursor-type))
("com.justsystems.inputmethod.atok21.Japanese.HalfWidthEiji"
 (title . "半英")
 (cursor-color)
 (cursor-type))
("com.justsystems.inputmethod.atok22.Roman"
 (title . "A")
 (cursor-color)
 (cursor-type))
("com.justsystems.inputmethod.atok22.Japanese"
 (title . "あ")
 (cursor-color)
 (cursor-type))
("com.justsystems.inputmethod.atok22.Japanese.Katakana"
 (title . "ア")
 (cursor-color)
 (cursor-type))
...
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
