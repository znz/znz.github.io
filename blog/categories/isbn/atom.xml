<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: isbn | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/isbn/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2015-10-26T23:13:44+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby で ISBN をチェックしたりハイフンを入れたり]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-12-isbn.html"/>
    <updated>2013-10-12T14:38:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/isbn</id>
    <content type="html"><![CDATA[<p>本には
<a href="http://ja.wikipedia.org/wiki/ISBN">ISBN</a>
というものが付いていて、
末尾のチェックディジットは仕様を参照すれば
簡単に計算出来そうです。</p>

<p>10 桁のものと新しい 13 桁のものがあったり、
出版者の部分の桁数が違ったりして
ちゃんとハイフンを入れるのは面倒そうです。</p>

<p>チェックディジットの方も自分で実装すると
バグっていたときに面倒なので、
良さそうな gem がないか探してみました。</p>

<p>最終的にはいくつかの理由から
<a href="http://rubygems.org/gems/lisbn">lisbn</a>
という gem を使いました。</p>

<!--more-->


<h2>gem の選択</h2>

<p>まず
<a href="http://rubygems.org/search?utf8=%E2%9C%93&amp;query=isbn">rubygems.org の右上で isbn と検索</a>
するところから始めました。</p>

<p>インストール数の多い順に見ていくと、</p>

<ul>
<li><a href="http://rubygems.org/gems/isbn10">isbn10</a>

<ul>
<li>インストール数は一番多い</li>
<li>10桁のみ</li>
<li>古い</li>
</ul>
</li>
<li><a href="https://github.com/ragalie/isbn-tools">isbn-tools</a>

<ul>
<li>古い</li>
<li>Not Maintained</li>
<li>lisbn が後継</li>
</ul>
</li>
<li><a href="https://github.com/entangledstate/isbn">isbn</a>

<ul>
<li>画像対応とかいろいろ高機能っぽいけど今回は不要</li>
<li><code>with_dashes</code> というメソッドは桁数決めうちで不適切</li>
</ul>
</li>
<li><a href="https://github.com/zapnap/isbn_validation">isbn_validation</a>

<ul>
<li>ActiveRecord の validates</li>
<li>ISBN ではない <a href="http://www.amazon.co.jp/gp/help/customer/display.html?nodeId=747416">ASIN</a> も扱いたかったので今回は不適当</li>
</ul>
</li>
<li><a href="https://github.com/ragalie/lisbn">lisbn</a>

<ul>
<li>比較的新しい</li>
<li>10桁と13桁の両対応</li>
<li>ハイフンを入れるために必要な分解処理がある (後は <code>join('-')</code> すれば良いだけ)</li>
<li>data/RangeMessage.xml というファイルを持っていて適切にわけてくれる</li>
</ul>
</li>
</ul>


<p>という感じでした。</p>

<h2>lisbn の使用例</h2>

<p>データベースに保存するのに統一されていると
<code>validates :isbn, uniqueness: true</code>
が使えるので、
以下のように ISBN13 に統一する処理を入れました。</p>

<p>それ以外の場合は ASIN と見なしてそのまま返しています。</p>

<pre><code class="ruby">  def isbn_unify(isbn)
    # Convert JISX0208 alphabet to ASCII.
    isbn = NKF.nkf('-Ww -Z0', isbn).delete("^A-Za-z0-9")

    # Convert to isbn13
    lisbn = Lisbn.new(isbn)
    if lisbn.valid?
      lisbn.isbn13
    else
      isbn
    end
  end
</code></pre>

<p>出力する側では
<code>parts</code>
は常に ISBN13 のものだけのようなので、
ISBN10
に出来るときは
頭の &lsquo;978&rsquo; を外して
チェックディジットを付け直すようにしました。</p>

<pre><code class="haml">- lisbn = Lisbn.new(isbn_or_asin)
- if lisbn.valid?
  - parts = lisbn.parts
  - if parts[0] == '978'
    %p.isbn10 ISBN10: #{parts[1..-2].join('-')}-#{lisbn.isbn10[-1]}
  %p.isbn13 ISBN13: #{lisbn.parts.join('-')}
- else
  %p.asin ASIN: #{isbn_or_asin}
</code></pre>
]]></content>
  </entry>
  
</feed>
