<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jus | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/jus/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-07-30T01:27:10+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LL Diver に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-23-lldiver.html"/>
    <updated>2014-08-23T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lldiver</id>
    <content type="html"><![CDATA[<p><a href="http://ll.jus.or.jp/2014/" title="LL Diver | Dive into Lightweight Languages">LL Diver | Dive into Lightweight Languages</a>
に参加してきました。</p>

<!--more-->


<p><a href="http://ll.jus.or.jp/2005/" title="Lightweight Language Day and Night(通称:LLDN)">Lightweight Language Day and Night(通称:LLDN)</a>
と同じ二部構成ということで LLDN の T シャツを着ていきました。</p>

<p>今回は全体的に JavaScipt の話が多かったように感じました。</p>

<h2>昼の部</h2>

<p>午前中はイノベーションホールでプレゼンを聞いていました。
ペパボのエンジニア新人研修はいろいろと参考にしたいと思いました。</p>

<p>昼休みは7階の休憩スペースのところで食事を売っていたので、
そこで食べました。</p>

<p>それから会議室2に行ってみると無線LANがつながるようになったというアナウンスがあったので、
llquiz に挑戦しました。
1問目は20分ほどですぐに解けたのですが、
2問目は takesako さんのマインスイーパーの自動化の話を聞きながら解いていた影響なのか、
おけない場所をマークしていくという重い解き方にしてしまったので、
解くのにもプログラムの実行にも時間がかかってしまうというダメな結果になってしまいました。
実際にどう書いたのかは <a href="https://gist.github.com/znz/6ccdcede4d30c2c749b6">https://gist.github.com/znz/6ccdcede4d30c2c749b6</a> で公開しました。
アナウンスがなかったためか、最終的な参加者が少なかったのが残念な感じでした。</p>

<p>時間がかかったので、最後は mozaic.fm 出張版: TypeScript and Dart を聞きながら解いていました。
TypeScript と Dart のことをほとんど知らなかったので、この時間もイノベーションホールに行っていた方が良かったのかもしれないと思いましたが、そのままそこで聞いていました。</p>

<p>休憩時間の後はまたイノベーションホールに移動して、プレゼンを聞いていました。</p>

<p>IPv6 の話はサーバー側の対応が必要という説明をするときの参考になりそうでしたが、
実際にどうプログラムを変更するのかという話はほとんどありませんでした。</p>

<p>サイバー戦争の話は MIT でどういう授業を受けてきたのかの紹介でした。
日本ではあまり話題にしない攻撃側の話もあるという感じでした。</p>

<p>LL短歌の Python バイトコードの話は途中の段階のは、スタックの最後の状態が 5 7 5 7 7 になるのかな、と思ったのですが、
32 32 32 になったあたりで違うと気づきました。</p>

<p>LT では時間内に収まっていたり収まらなかったり、最初から時間内に収める気がない人がいたり、
通知をきっていなくて twitter 経由で遊ばれている人がいたりしました。</p>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=479812947X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>抽選では
<a href="http://www.amazon.co.jp/gp/product/479812947X/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=479812947X&amp;linkCode=as2&amp;tag=znz-22">実践Node.js プログラミング (Programmer&rsquo;s SELECTION)</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=479812947X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
をいただいたので、帰りの新幹線の中で読み始めました。</p>

<h2>夜の部</h2>

<p>会場を出たら忘れてくださいということだったのでほとんど忘れました (ということにしておく)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jus & USP友の会共催 シェルワンライナー勉強会@関西（第11回シェル芸勉強会） に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-14-jus-usp.html"/>
    <updated>2014-06-14T13:42:31+09:00</updated>
    <id>http://blog.n-z.jp/blog/jus-usp</id>
    <content type="html"><![CDATA[<p><a href="http://japanunixsociety.doorkeeper.jp/events/10184">jus &amp; USP友の会共催 シェルワンライナー勉強会@関西（第11回シェル芸勉強会）</a> に参加してきました。</p>

<p>USP の勉強会には初参加でしたが、楽しかったです。</p>

<p>今回の問題文は <a href="http://www.slideshare.net/ryuichiueda/20140614-35859423">20140614 【問題だけスライド】jus &amp; USP友の会共催 シェルワンライナー勉強会@関西（第11回シェル芸勉強会）</a> で公開されています。</p>

<!--more-->


<h2>準備</h2>

<p>持ち物のところで「open usp Tukubai の入ったUNIX/Linux環境のあるノートPC（Macでも可）」とあったので、
<a href="https://github.com/usp-engineers-community/Open-usp-Tukubai">https://github.com/usp-engineers-community/Open-usp-Tukubai</a> をインストールした Linux 環境を用意したのと、
<a href="https://uec.usp-lab.com/TUKUBAI/CGI/TUKUBAI.CGI?POMPA=TUKUBAI_ON_FREEBSD_DOWNLOAD">Tukubai on FreeBSDダウンロード</a>
から ova ファイルをダウンロードして VirtualBox にインポートして用意しておきました。</p>

<p>結局 open usp Tukubai は不要でしたが、
用意していた Linux 環境は動作確認に使いました。</p>

<h2>ソフトウェアツールとAWK・sedについて座学</h2>

<p>最初の「ソフトウェアツールとAWK・sedについて座学」の話からのメモです。</p>

<div style="float:right"><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4048660683" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></div>


<ul>
<li><a href="http://www.amazon.co.jp/gp/product/4048660683?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4048660683&amp;linkCode=shr&amp;tag=znz-22">フルスクラッチから1日でCMSを作る シェルスクリプト高速開発手法入門</a> という本が出ますという話</li>
<li>IEEE から出ている Netizens という本からの話

<ul>
<li>ed コマンド, grep コマンド</li>
<li>パイプとフィルタコマンド</li>
<li>sed, awk</li>
<li>現在の GNU coreutils に入っているようなコマンド群</li>
</ul>
</li>
<li>実際にコマンドを実行してみる話

<ul>
<li><code>echo です。ます。でした。 | sed 's/。/&amp;\n/g'</code>

<ul>
<li>OSX だと <code>echo です。ます。でした。 | sed 's/。/&amp;\本当に改行/g'</code> でOK (これは Linux でも OK)</li>
<li>bash や zsh なら <code>sed $'s/。/&amp;\\\n/g'</code> で本当の改行の代わりに <code>$'\n'</code> でも大丈夫</li>
</ul>
</li>
</ul>
</li>
<li><p>縦と横の話</p>

<ul>
<li><code>echo {1..10} | awk '{for(i=1;i&lt;=NF;i++){a+=$i};print a}'</code></li>
<li><code>echo {1..10} | tr ' ' '\n' | awk '{a+=$1}END{print a}'</code></li>
</ul>
</li>
<li><p>複雑な例 sm2 というのは tukubai のコマンドだが今回はなくても良い</p></li>
</ul>


<pre><code>$ cat input
a 1
b 3
a 4
b 2
c 1
$ cat input | awk '{x[$1]+=$2}END{for (k in x){print k,x[k]}}'
a 5
b 5
c 1
$ cat input | sort | sm2 1 1 2 2
a 5
b 5
c 1
</code></pre>

<h2>チーム分け</h2>

<p>結構適当でした。</p>

<h2>前半戦</h2>

<h3>1問目</h3>

<p><code>echo -12,135,123 135,123</code> を足すという問題。</p>

<ul>
<li>最初に試した方法 <code>echo -12,135,123 135,123 | tr -d ',' | tr ' ' '+' | bc</code></li>
<li>話の流れでいくと <code>echo -12,135,123 135,123 | sed 's/,//g' | awk '{print $1+$2}'</code></li>
<li>出力にも <code>,</code> を入れるなら <code>"%'d"</code> を使って <code>echo -12,135,123 135,123 | sed 's/,//g' | awk '{printf "%'"'"'d\n", $1+$2}'</code></li>
<li><code>,</code> を消すのも awk を使うなら <code>echo -12,135,123 135,123 | awk '{gsub(",","");printf "%'"'"'d\n", $1+$2}'</code></li>
</ul>


<h3>2問目</h3>

<p>以下のデータの順番を「名前 点数」に統一するという問題。</p>

<pre><code>$ cat score
45 鎌田
浜田 72
今泉 84
54 上田
62 斉藤
</code></pre>

<p>勘違いして点数の方を左にしてしまっていました。</p>

<ul>
<li><code>cat score | awk '$1~/[0-9]/{print $2,$1} $2~/[0-9]/{print $1,$2}'</code></li>
<li><code>cat score | sed 's/\([^0-9 ]*\) \([0-9]*\)/\2 \1/'</code></li>
</ul>


<p>twitter 上で出ていた解答に比べて全然ダメな感じでした。</p>

<h3>3問目</h3>

<p>m/s に変換する問題。 (1マイル=1609m)</p>

<pre><code>$ cat speed
100km/h
16mph
</code></pre>

<ul>
<li><code>cat speed | sed 's,km/h,*1000/3600,;s,mph,*1609/3600,' | bc | sed 's,$,m/s,'</code></li>
<li><code>cat speed | awk '/km/{print $1*1000/3600,"m/s"}/mph/{print $1*1609/3600,"m/s"}'</code></li>
</ul>


<p><code>bc</code> だと整数になってしまうので、小数点以下の数値もほしければ <code>awk</code> を使って計算する方が良かったようです。
Google 電卓で検算できるのが便利でした。</p>

<h3>4問目</h3>

<p>さいとうさん、さわださん、ひろたさん、いとうさんの数を数えてください。</p>

<pre><code>$ cat name
齋藤 斉藤 沢田 澤田 伊藤
齋藤 齊藤 広田 廣田
</code></pre>

<p>最初は総数を数えればいいのかと思って <code>egrep -o 'さいとう|さわだ|ひろた|いとう' | wc -l</code> というのを考えていたのですが、名前ごとにカウントだったようです。</p>

<p><a href="https://twitter.com/biwakonbu/status/477703196714868737">全くと言って良い程リダイレクトが無くて cat ばっかり</a>というツイートを受けて、頭に <code>&lt; input</code> を付ける方法に切り替えました。
<code>cat</code> を使っているのは入力を先頭に書きたいからのはず、ということも合わせて、
あまり使われているのを見かけませんが、頭に付けるようにしました。</p>

<p>kakasi をインストールするのは面倒そうだったので、
<code>sed</code> でがんばって
<code>&lt; name sed 's/[齋斉齊]藤/さいとう/g;s/[沢澤]田/さわだ/g;s/[広廣]田/ひろた/g;s/伊藤/いとう/g' | egrep -o 'さいとう|さわだ|ひろた|いとう' | sort | uniq -c | sort -n</code>
としました。</p>

<p>休憩時間中に Unicode の異体字データベースとかで同一視するためのデータがないか探してみたのですが、時間不足で見つけられませんでした。</p>

<h2>後半戦</h2>

<h3>csv</h3>

<p>csv の内容を全部足す問題。</p>

<pre><code>$ cat csv
1,2,"123,456",-5,"-123,444"
6,7,8,"12",9
</code></pre>

<p>行ごととかいうこともなく、全部足せば良いという問題でした。</p>

<p><code>""</code> の処理はシェルに任せれば良いかと思ったら、
そういうことをするコマンドは <code>xargs</code> だったので、
<code>&lt;csv tr ',' ' ' | xargs -n1 | tr -d ' ' | awk '{a+=$1}END{print a}'</code>
という解答になりました。</p>

<p><a href="https://twitter.com/znz/status/477713093535866880">この解答</a>は<a href="https://twitter.com/ryuichiueda/status/477713692927066112">高い評価</a>をもらいました。</p>

<h3>matrix</h3>

<p>行列の転置。</p>

<pre><code>$ cat matrix
a b c
d e f
g h i
</code></pre>

<p>ファイルを複数回読むのはズルかと思って、
連想配列にためるようにして
<code>&lt; matrix awk '{for(i=1;i&lt;=NF;i++){m[i]=m[i]" "$i}}END{for(k in m){print m[k]}}'|sed 's/^ //'</code>
となりました。
端の処理がうまく出来なかったので、<code>sed</code> で後処理しました。
時間優先の時は、単独でうまく書けなくても、他の方法を組み合わせてなんとかする、と方法もありだと思います。</p>

<p>解答例では
<code>cat matrix | awk '{for(i=1;i&lt;=NF;i++){print NR,i,$i}}' | sort -k2,2 | awk '{print $3} | xargs -n 3</code>
ということで一度 <code>行番号 桁番号 内容</code> という形式に変換するのがポイントと言っていました。</p>

<h3>IPv6 その1</h3>

<p>IPv6 アドレスの省略された <code>0</code> を復元する問題。</p>

<p>とりあえず時間内に解けることを優先して、
<code>echo 2001:db8:20:3:1000:100:20:3 | xargs -d: -n1 | sed 's/^/0000/;s/.*\(....\)$/\1/' | xargs | tr ' ' : | sed -e 's/:0000$//'</code>
となりました。</p>

<p>後で確認したら <code>xargs -d:</code> は Mac OS X の <code>xargs</code> だと使えませんでした。
さらに <code>xargs -d: -n1</code> だと余計な改行が付くので、最後に <code>sed</code> で削除しているのですが、
<code>tr : ' ' | xargs -n1</code> にすればそもそも余計な改行が付かなかったようです。</p>

<p>それから、他の解答例をみると、前につめるのは <code>0000</code> じゃなくて <code>000</code> で十分でした。</p>

<h3>IPv6 その2</h3>

<p>時間内に解くために思いついた方法をどんどん試して
<code>&lt;ipv6 awk -F: '{n=8-NF;for(i=0;i&lt;=n;i++){sub("::",":0::")}sub("::",":")}1' | sed 's/:/:000/g;s/:[^:]*\([^:][^:][^:][^:]\)/:\1/g'</code>
となりました。</p>

<p>内容を書き換えると <code>NF</code> が壊れてしまうので <code>i&lt;=8-NF</code> だとうまくいきませんでした。
そこで一度 <code>n</code> に保存してから <code>for</code> ループで <code>0</code> をつめていきました。
つめる場所を保存するために <code>::</code> は残しておいて、後で <code>:</code> に置き換えています。</p>

<p><code>1</code> は <a href="http://golf.shinh.org/">Anarchy Golf</a> 関連で知っていた &lsquo;{print}&rsquo; の短縮のようなものです。</p>

<p>その1の時の方法は途中で複数行に分割していて、複数行の IPv6 アドレスを同時に扱うのには使えなかったので、
<code>sed 's/:/:000/g;s/:[^:]*\([^:][^:][^:][^:]\)/:\1/g'</code>
にかわりました。
後ろ4文字を残すというのは、素直に <code>[^:]</code> を列挙しても twitter に投稿できる文字数に収まりました。</p>

<p>今回の問題だけなら良いのですが、先頭が <code>2001</code> で既に4文字になっているのを利用して、処理を省略しているので、汎用的にするなら、そこも処理する必要があります。</p>

<p>ruby なら <code>ruby -r ipaddr -nle 'puts IPAddr.new($_).to_string' ipv6</code> で出来ました。</p>

<h2>感想</h2>

<p>twitter のハッシュタグ (<code>#シェル芸</code>) での他の人の解答を参考にしたり、自分の解答を紹介したりできたり、頭リダイレクトが流行ったりして面白かったです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LLまつりでLTしました]]></title>
    <link href="http://blog.n-z.jp/blog/2013-08-24-llmatsuri.html"/>
    <updated>2013-08-24T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/llmatsuri</id>
    <content type="html"><![CDATA[<p><a href="http://ll.jus.or.jp/2013/">LLまつり</a> で「シェルスクリプトで簡易ping監視」というタイトルでライトニングトークをしてきました。</p>

<!--more-->


<p>スライドは <a href="http://slide.rabbit-shocker.org/authors/znz/simple-ping-summary/">http://slide.rabbit-shocker.org/authors/znz/simple-ping-summary/</a> や slideshare で公開しています。
スライドのソースも <a href="https://github.com/znz/simple-ping-summary-slide">https://github.com/znz/simple-ping-summary-slide</a> で公開しています。</p>

<p>監視プログラム自体は <a href="https://github.com/znz/simple-ping-summary">https://github.com/znz/simple-ping-summary</a> で公開しています。</p>

<h2>バージョンソート</h2>

<p><a href="http://linuxjm.sourceforge.jp/html/GNU_coreutils/man1/sort.1.html">GNU coreutils の sort</a>
や
<a href="http://linuxjm.sourceforge.jp/html/GNU_coreutils/man1/ls.1.html">ls</a>
にバージョンソートという機能があるのですが、
それが IPv4 アドレスのソートにも使えるということが
一番言いたかったことでした。</p>

<h2>画像生成</h2>

<p>画像を作成する時はテキストエディタで作成出来る XBM や XPM を使うことが多いのですが、
後で twitter の反応を確認してみると SVG という案もあったようなので、
機会があれば使ってみたいと思いました。</p>

<h2>会場での実行結果</h2>

<p>最後にデモとしてちょっと見せようとして、説明は間に合わなかったLLまつりの会場でのデータは <a href="https://github.com/znz/simple-ping-summary/tree/llmatsuri">llmatsuri ブランチ</a> にあるので <code>git clone https://github.com/znz/simple-ping-summary</code> して <code>git checkout llmatsuri</code> で <code>llmatsuri</code> ブランチに切り替えて <code>_img/summary.html</code> を開くと見えます。
発表後のデータもあるので、ちらっと見せたものよりちょっと増えています。</p>

<p>会場では一般の PC などが対象なので、監視対象になることが前提で PING 応答が許可されているルーターとは違って、 DHCP で IP アドレスが割り当てられていても応答がないことが多いので、結構歯抜けになっています。</p>

<p>DHCP の割り当て範囲がどうなっていたのかわからなかったので、対象は適当な範囲だったのですが、 <a href="https://github.com/znz/simple-ping-summary/blob/llmatsuri/_img/192.168.4/20130824.png">192.168.4.1から254の範囲の結果</a> をみると、徐々にこの範囲の割り当てが増えていっていると推測出来そうです。</p>

<h2>slideshare</h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/25545146" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/znzjp/simple-ping-summary" title="シェルスクリプトで簡易ping監視" target="_blank">シェルスクリプトで簡易ping監視</a> </strong> from <strong><a href="http://www.slideshare.net/znzjp" target="_blank">Kazuhiro Nishiyama</a></strong> </div></p>

<h2>Rabbit SlideShow</h2>

<iframe src="http://slide.rabbit-shocker.org/authors/znz/simple-ping-summary/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="http://slide.rabbit-shocker.org/authors/znz/simple-ping-summary/" title="シェルスクリプトで簡易ping監視">シェルスクリプトで簡易ping監視</a>
</div>



]]></content>
  </entry>
  
</feed>
