<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: land-of-lisp | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/land-of-lisp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-04-09T02:05:09+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Land of Lisp 読書会 最終回（第5回）(兵庫県)に参加してきた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-02-22-reading-land-of-lisp.html"/>
    <updated>2014-02-22T22:45:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/reading-land-of-lisp</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/event/index/144998/">2月22日 Land of Lisp 読書会 最終回（第5回）(兵庫県)</a>
に参加してきました。
今回は第16章から最後まででした。</p>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873116155" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>次回は4月5日で<a href="http://www.amazon.co.jp/gp/product/4873116155/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873116155&amp;linkCode=as2&amp;tag=znz-22">RとRubyによるデータ解析入門</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4873116155" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />の読書会に決まりました。</p>

<!--more-->


<h2>会場</h2>

<p>今回は今までと違って、普通の会議室がとれなかったということで音楽室でした。
静かだったり、外から見えるようになっていたりしたのが印象的でした。</p>

<h2>メモ</h2>

<p>以下今回のメモです。</p>

<ul>
<li><code>,</code> が気持ち悪い。</li>
<li>clojure だと <code>~</code></li>
<li><code>`</code> の話とマクロの話は別</li>
<li>Lisp のマクロの話と Ruby に似たようなものがあるかという話</li>
<li>Ruby の <code>eval</code> と <code>class_eval</code> と <code>instance_eval</code> の話</li>
<li>SVG の話</li>
<li>imagemagick とか minimagick とかでも画像生成できる話 (例: <a href="http://jarp.does.notwork.org/diary/201308a.html">http://jarp.does.notwork.org/diary/201308a.html</a> )</li>
<li>c14n (XML Canonicalization) してインデントを付けると読みやすくなる話</li>
<li>middleman : rails の asset pipe line などの技術を使って静的サイトが作れる</li>
<li>WMI : SNMP の Windows 専用版みたいなもの</li>
<li>PowerShell の話

<ul>
<li>パイプをオブジェクトが流れるのがモナドとか jQuery とかっぽい</li>
<li>他の言語の printf などと全く違う。エスケープがバッククオートとか</li>
<li>WSHは32ビットと64ビットの問題がある?</li>
</ul>
</li>
<li>単なる便利なライブラリと DSL の違いは?

<ul>
<li>外部 DSL だとわかりやすいけど、内部 DSL だと曖昧</li>
<li>その他いろいろな意見あり</li>
</ul>
</li>
<li>Ruby だと内部 DSL は括弧を省略するのが普通</li>
<li>Gemfile とか Rakefile とか</li>
<li>rspec の話</li>
<li>18章「Haskell や Clojure では、遅延評価が言語のコアでサポートされている。」</li>
<li>p.378 value が nil になることもあるから forced は必要そう</li>
<li>lazy-car や lazy-cdr は lazy を作るのではなく force で取り出すので lazy-cons や lazy-nil と意味が違ってわかりにくい</li>
<li>マンガはコマ割がわかりにくいし p.432 には矢印まであるのは矢印を付けるよりもコマ割を工夫すべきでは</li>
</ul>


<h2>次回の予定</h2>

<ul>
<li>エリック・エヴァンスのドメイン駆動設計</li>
<li>クラウドデザインパターン</li>
<li>SQLアンチパターン</li>
<li>RとRubyによるデータ解析入門</li>
</ul>


<p>などの候補が出ましたが R と Ruby の本に決定して、
amagasakirb としては久しぶりの Ruby の本ということになりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Land of Lisp 読書会 第4回(兵庫県)に参加してきた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-01-18-readling-land-of-lisp.html"/>
    <updated>2014-01-18T23:45:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/readling-land-of-lisp</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/main/tag/amagasakirb">amagasakirb</a>
の
<a href="http://kokucheese.com/event/index/129358/">1月18日 Land of Lisp 読書会 第４回(兵庫県)</a>
に参加してきました。
今回は「第IV部 LISPは科学なり」の最初の方の14章と15章でした。</p>

<p>次回は2月22日ということでした。</p>

<!--more-->




<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873115876" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>今回は15章の前半が難しくて、あまり進みませんでした。</p>

<p>以下はメモです。</p>

<ul>
<li>p.295 の <code>(when list ...)</code> から <code>(car nil)</code> と <code>(cdr nil)</code> がエラー (例外) ではなく <code>nil</code></li>
<li>データ構造がわかりにくい</li>
<li>よくわからない挿絵よりもデータ構造の図がほしい</li>
<li><code>defstruct</code> を使えば良いのに</li>
<li>C言語やC++で <code>.</code> に比べて <code>-&gt;</code> の入力コストが高い</li>
<li>なぜ hex (六角形) なのか</li>
<li>由来はボードゲームなどで距離の計算がしやすいかららしい</li>
<li>ダイヤモンドゲームは三角形だが、辺と頂点の見方を変えれば六角形</li>
<li><a href="http://ja.wikipedia.org/wiki/%E3%82%B8%E3%82%AA%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5">Geohash</a> とか <a href="http://d.hatena.ne.jp/nayutaya/20110826/1314382637">GeoDelta</a> とか</li>
<li>loop や format がわかりにくい</li>
<li><code>~a</code> とか printf の <code>%</code> と全く違う</li>
<li>「、。」と「，．」(全角)と「,.」(半角) という感じで全角半角も意見が割れた</li>
<li>yen sign (<code>¥</code>) と backslash (<code>\</code>) の話</li>
<li>p.320 選択肢にある 2 &ndash;> 3 の 2 とか 3 とかの説明がない</li>
<li>choose your move: が選択肢の前にあって入力するときは行頭なのが変</li>
<li>p.320 announce-winner関数のアイコンなどは <a href="http://practical-scheme.net/wiliki/wiliki.cgi/Shiro:LandOfLisp">正誤表</a> に載っていた</li>
<li>PDF (第3刷) では直っていた</li>
<li>Ruby の末尾最適化の話

<ul>
<li><code>RubyVM::InstructionSequence.compile_option = { :tailcall_optimization =&gt; true }</code> で変更できる</li>
<li>例: <a href="http://d.hatena.ne.jp/yarb/20121029/p1">CRubyで末尾最適化を使った再帰 &ndash; yarbの日記</a></li>
</ul>
</li>
<li>p.333 スタックトレースが問題になる</li>
</ul>


<p>懇親会での話の一部のメモです。</p>

<ul>
<li>最近は朝とか移動中にオーディオブックを聞いているという話</li>
<li><a href="http://qiita.com/cuzic/items/86f012bba8c17cc98aea">4倍速にしている</a>話</li>
<li>コンテナ物語という本の話 <div style="float:right"><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4822245640" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></div></li>
<li>ソードアート・オンラインは1巻だけでも良いのでオススメという話 <div style="float:right"><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4048677608" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></div></li>
<li>なれる!SE は1巻には1と付いていないという話 <div style="float:right"><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4048686054" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></div></li>
<li><a href="http://ascii.jp/elem/000/000/760/760389/">ASCII.jp：なれる！ＳＥ 間違いだらけの？ＩＴ用語辞典（中二版）</a></li>
<li><a href="http://qiita.com/advent-calendar/2013/ruby-on-rails">Ruby on Rails Advent Calendar 2013</a> のときから qiita に書くようになって、最近は<a href="http://qiita.com/cuzic">いろいろ書いている</a>という話</li>
<li>Ruby の id3 のライブラリが SJIS を latin-1 と解釈して UTF-8 に変換してしまって化けていたという話</li>
<li><a href="http://en.wikipedia.org/wiki/ID3#cite_ref-5">ID3タグの文字コードは latin-1 か Unicode</a> ということになっているのでライブラリとしては仕様通りの挙動だが日本語圏では latin-1 として実体は SJIS を入れていることが多いため問題が生じる</li>
<li><a href="http://homepage1.nifty.com/nomenclator/unicode/normalization.htm">Unicode正規化</a> の話</li>
<li>Unicode 絵文字の色情報はどこからきているのかわからないという話</li>
<li>OpenType とかのフォントには色情報は入らないはずなので別途どこかに持っている?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Land of Lisp 読書会 第3回(兵庫県)に参加してきた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-02-reading-land-of-lisp-3.html"/>
    <updated>2013-11-02T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/reading-land-of-lisp-3</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/main/tag/amagasakirb">amagasakirb</a>
の
<a href="http://kokucheese.com/event/index/105390/">11月2日 Ｌａｎｄ　ｏｆ　Ｌｉｓｐ 読書会　第3回(兵庫県)</a>
に参加してきました。
今回は第III部でした。</p>

<p>次回は会場の予約が取れなかったということで、12月は無くて、
1月第2週以降の予定で第一候補は 2014年1月11日ということでした。</p>

<!--more-->


<p>今回は他のイベントとも日程が重なっていたらしく、
それが原因かどうかはわかりませんが、
Lisper の人がいなかったので、
Lisp についての疑問は割と解決出来ない感じで進みました。
そういうこともあってか、結構雑談とか Ruby の話が多かったです。</p>

<p>以下はメモです。</p>

<ul>
<li>p.188 の挿絵の意味がよくわからない?</li>
<li><code>loop</code> の <code>for</code> が複数あるときに同時に動く (Ruby の <code>Array#zip</code> のように) のが気持ち悪い

<ul>
<li>別々に動くのは <code>loop</code> のネストで代用できるからこういう仕様なのでは。</li>
</ul>
</li>
<li>網膜に焼き付ける話から Google Glass の話</li>
<li><code>(setf アクセサ 値)</code> というのが気持ち悪いという話

<ul>
<li>p.197 の <code>(setf (gethash ...) t)</code> とか</li>
<li>左辺値と右辺値の見た目が同じ言語は多い</li>
<li>シェルスクリプトは x=値 と $x で違う</li>
</ul>
</li>
<li>話には出しませんでしたが <code>*plants*</code> の値は <code>t</code> の代わりに <code>plant-energy</code> にするのもありかもと思いました。</li>
<li>変数名とかの名前の付け方がよくわからない。

<ul>
<li>p.202 <code>xnu</code> とか。</li>
</ul>
</li>
<li>ジャングルは add-plants で必ず植物が発生するので
植物が発生する確率が高い領域というだけで
最初から植物がたくさんあるわけではない。</li>
<li>loop はミニ言語

<ul>
<li>Perl の正規表現</li>
<li>Python のリスト内包表記</li>
<li>scala のリスト内包表記</li>
</ul>
</li>
<li>独自言語の話

<ul>
<li><code>printf</code> の書式文字列</li>
<li>C++ のマニピュレータは難しすぎるという話</li>
<li>Ruby の <code>#{}</code> は独自言語というほどのものではない</li>
<li>pack / unpack のテンプレート (これも Perl 由来なので、 Ruby 独自ではない)</li>
</ul>
</li>
<li>p.216 チルド文字

<ul>
<li>tilde なので変というわけではないがチルダの方がよく見かける</li>
<li>チルドの方が元の英語の発音に近い?</li>
</ul>
</li>
<li><code>@</code> は <code>printf</code> の <code>%-10d</code> のような <code>-</code> とフラグの有無での左右が逆</li>
<li>Ruby で

<ul>
<li><code>%d</code> とか <code>%f</code> 以外はあまり使わない?</li>
<li>ljust とか rjust とかあるから <code>%s</code> と数字の組み合わせはあまり使わない?</li>
<li><code>"%7.2f"</code> は他の方法では難しそう</li>
</ul>
</li>
<li><code>'</code> の必要性の話

<ul>
<li><code>'a</code> とかを指定出来るようにするため?</li>
<li><code>'</code> で埋めたい場合は <code>''</code> とか</li>
</ul>
</li>
<li><code>format</code> の方が <code>loop</code> にあった周期表のような表が欲しい</li>
<li><code>printf</code> の書式指定文字列に別の文字で埋める指定はできるか?

<ul>
<li>ljust や rjust ならできる (例: <code>"hoge".rjust(10, "!")</code>)</li>
<li><code>printf</code> は不明 (できなさそう?)</li>
<li><code>%{}d</code> とか <code>%()</code> とかの話</li>
</ul>
</li>
<li><code>~$</code> は日本円だとあまり使わなさそう

<ul>
<li>アメリカはクオーターとかダイムとか (日本人には) わかりにくい</li>
</ul>
</li>
<li><code>(fresh-line)</code> が便利なときの例は?

<ul>
<li>Ruby は <code>puts</code> が便利だから <code>fresh-line</code> のような機能の必要性が低い?</li>
</ul>
</li>
<li>p.222 <code>~t</code> 相当は Ruby にはなさそう

<ul>
<li>pack テンプレートなら <code>@</code> で似たことはできそう</li>
</ul>
</li>
<li>pack テンプレートの代わりに C の構造体をパースするものがあればわかりやすい?</li>
<li>「33文字分出力したら改行してくれ」の 33 とか数えたくない</li>
<li>p.228 のゲームは実際に実行しても <code>-</code> の繰り返しの上下の枠線の行はない</li>
<li>名前がよくない?

<ul>
<li>prin1 とか</li>
</ul>
</li>
<li>他の言語でも printf, strstr, stdio</li>
<li>cout の読み方とか</li>
<li>13.5章は表紙ページがない</li>
<li>p.233 挿絵はストリームが邪悪な感じというのを表している?</li>
<li>p.239 「残念ながら、ソケットの標準化は ANSI Common Lisp の仕様化に間に合わなかったので、ソケットを扱う標準の方法というのはない。」

<ul>
<li><a href="http://ja.wikipedia.org/wiki/Common_Lisp">Common Lisp &ndash; Wikipedia</a> によると「1984年、1994年にANSIにより標準化」</li>
</ul>
</li>
<li>p.248 REPL にエラープロンプトを表示するのは REPL から実行した時だけ</li>
<li>repl に戻る話から Ruby の話

<ul>
<li><code>better_errors</code></li>
<li><code>binding_of_caller</code></li>
<li><code>ppp</code></li>
</ul>
</li>
<li>Web 関連の雑談

<ul>
<li>Active Scaffold が IE10 で変?</li>
<li>CoffeeScript</li>
<li>ClojureScript</li>
<li>ブラウザで Ruby</li>
<li>ActiveScriptRuby</li>
<li>NougakuDo</li>
<li>Google の bot は JavaScript や CSS も解釈する</li>
</ul>
</li>
<li>p.250 q値</li>
<li>car cadr caddr cdddr nth nthcdr</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Land of Lisp 読書会 第２回(兵庫県)に参加してきた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-21-reading-land-of-lisp-2.html"/>
    <updated>2013-09-21T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/reading-land-of-lisp-2</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/main/tag/amagasakirb">amagasakirb</a>
の
<a href="http://kokucheese.com/event/index/105390/">9月21日 Land of Lisp 読書会 第２回(兵庫県)</a>
に参加してきました。
今回は6.5章から9章まででした。</p>

<!--more-->


<p>以下は単なるメモです。</p>

<ul>
<li>p.97 訳注 の 保守的な言語 とは何か?</li>
<li>太い数字は脚注ではなく行番号というのがわかりにくい。
どこかに説明はあった?</li>
<li>p.115 ダイナミック変数とは?

<ul>
<li>別の本によると <code>defなんとか</code> で定義されるのがダイナミック変数らしい。</li>
<li><code>defun</code> もダイナミックスコープっぽい。
変数の <code>let</code> のように <code>labels</code> で関数も置き換えられる。</li>
</ul>
</li>
<li>なぜか Ruby の <code>$_</code> の話</li>
<li>話がそれていって開発環境の話から <code>VisualAge</code> とかの話もあった。</li>
<li>p.109 に not で終わっているLisp関数は非推奨と書いてあるのに、
p.130 以降のプログラムでは <code>remove-if-not</code> を使いまくっている。</li>
<li>p.130 の <code>islands</code> はどういうデータが入っているのか?</li>
<li>p.134 <code>コンス</code> とは? <code>コンスセル</code> のこと。</li>
<li>カヌレ</li>
<li>9章を読み終わっていない人は宿題 (次回までに読んでくる)</li>
</ul>

]]></content>
  </entry>
  
</feed>
