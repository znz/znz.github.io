<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: land-of-lisp | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/land-of-lisp/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-12-02T23:50:49+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Land of Lisp 読書会 第3回(兵庫県)に参加してきた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-02-reading-land-of-lisp-3.html"/>
    <updated>2013-11-02T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/reading-land-of-lisp-3</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/main/tag/amagasakirb">amagasakirb</a>
の
<a href="http://kokucheese.com/event/index/105390/">11月2日 Ｌａｎｄ　ｏｆ　Ｌｉｓｐ 読書会　第3回(兵庫県)</a>
に参加してきました。
今回は第III部でした。</p>

<p>次回は会場の予約が取れなかったということで、12月は無くて、
1月第2週以降の予定で第一候補は 2014年1月11日ということでした。</p>

<!--more-->


<p>今回は他のイベントとも日程が重なっていたらしく、
それが原因かどうかはわかりませんが、
Lisper の人がいなかったので、
Lisp についての疑問は割と解決出来ない感じで進みました。
そういうこともあってか、結構雑談とか Ruby の話が多かったです。</p>

<p>以下はメモです。</p>

<ul>
<li>p.188 の挿絵の意味がよくわからない?</li>
<li><code>loop</code> の <code>for</code> が複数あるときに同時に動く (Ruby の <code>Array#zip</code> のように) のが気持ち悪い

<ul>
<li>別々に動くのは <code>loop</code> のネストで代用できるからこういう仕様なのでは。</li>
</ul>
</li>
<li>網膜に焼き付ける話から Google Glass の話</li>
<li><code>(setf アクセサ 値)</code> というのが気持ち悪いという話

<ul>
<li>p.197 の <code>(setf (gethash ...) t)</code> とか</li>
<li>左辺値と右辺値の見た目が同じ言語は多い</li>
<li>シェルスクリプトは x=値 と $x で違う</li>
</ul>
</li>
<li>話には出しませんでしたが <code>*plants*</code> の値は <code>t</code> の代わりに <code>plant-energy</code> にするのもありかもと思いました。</li>
<li>変数名とかの名前の付け方がよくわからない。

<ul>
<li>p.202 <code>xnu</code> とか。</li>
</ul>
</li>
<li>ジャングルは add-plants で必ず植物が発生するので
植物が発生する確率が高い領域というだけで
最初から植物がたくさんあるわけではない。</li>
<li>loop はミニ言語

<ul>
<li>Perl の正規表現</li>
<li>Python のリスト内包表記</li>
<li>scala のリスト内包表記</li>
</ul>
</li>
<li>独自言語の話

<ul>
<li><code>printf</code> の書式文字列</li>
<li>C++ のマニピュレータは難しすぎるという話</li>
<li>Ruby の <code>#{}</code> は独自言語というほどのものではない</li>
<li>pack / unpack のテンプレート (これも Perl 由来なので、 Ruby 独自ではない)</li>
</ul>
</li>
<li>p.216 チルド文字

<ul>
<li>tilde なので変というわけではないがチルダの方がよく見かける</li>
<li>チルドの方が元の英語の発音に近い?</li>
</ul>
</li>
<li><code>@</code> は <code>printf</code> の <code>%-10d</code> のような <code>-</code> とフラグの有無での左右が逆</li>
<li>Ruby で

<ul>
<li><code>%d</code> とか <code>%f</code> 以外はあまり使わない?</li>
<li>ljust とか rjust とかあるから <code>%s</code> と数字の組み合わせはあまり使わない?</li>
<li><code>"%7.2f"</code> は他の方法では難しそう</li>
</ul>
</li>
<li><code>'</code> の必要性の話

<ul>
<li><code>'a</code> とかを指定出来るようにするため?</li>
<li><code>'</code> で埋めたい場合は <code>''</code> とか</li>
</ul>
</li>
<li><code>format</code> の方が <code>loop</code> にあった周期表のような表が欲しい</li>
<li><code>printf</code> の書式指定文字列に別の文字で埋める指定はできるか?

<ul>
<li>ljust や rjust ならできる (例: <code>"hoge".rjust(10, "!")</code>)</li>
<li><code>printf</code> は不明 (できなさそう?)</li>
<li><code>%{}d</code> とか <code>%()</code> とかの話</li>
</ul>
</li>
<li><code>~$</code> は日本円だとあまり使わなさそう

<ul>
<li>アメリカはクオーターとかダイムとか (日本人には) わかりにくい</li>
</ul>
</li>
<li><code>(fresh-line)</code> が便利なときの例は?

<ul>
<li>Ruby は <code>puts</code> が便利だから <code>fresh-line</code> のような機能の必要性が低い?</li>
</ul>
</li>
<li>p.222 <code>~t</code> 相当は Ruby にはなさそう

<ul>
<li>pack テンプレートなら <code>@</code> で似たことはできそう</li>
</ul>
</li>
<li>pack テンプレートの代わりに C の構造体をパースするものがあればわかりやすい?</li>
<li>「33文字分出力したら改行してくれ」の 33 とか数えたくない</li>
<li>p.228 のゲームは実際に実行しても <code>-</code> の繰り返しの上下の枠線の行はない</li>
<li>名前がよくない?

<ul>
<li>prin1 とか</li>
</ul>
</li>
<li>他の言語でも printf, strstr, stdio</li>
<li>cout の読み方とか</li>
<li>13.5章は表紙ページがない</li>
<li>p.233 挿絵はストリームが邪悪な感じというのを表している?</li>
<li>p.239 「残念ながら、ソケットの標準化は ANSI Common Lisp の仕様化に間に合わなかったので、ソケットを扱う標準の方法というのはない。」

<ul>
<li><a href="http://ja.wikipedia.org/wiki/Common_Lisp">Common Lisp &ndash; Wikipedia</a> によると「1984年、1994年にANSIにより標準化」</li>
</ul>
</li>
<li>p.248 REPL にエラープロンプトを表示するのは REPL から実行した時だけ</li>
<li>repl に戻る話から Ruby の話

<ul>
<li><code>better_errors</code></li>
<li><code>binding_of_caller</code></li>
<li><code>ppp</code></li>
</ul>
</li>
<li>Web 関連の雑談

<ul>
<li>Active Scaffold が IE10 で変?</li>
<li>CoffeeScript</li>
<li>ClojureScript</li>
<li>ブラウザで Ruby</li>
<li>ActiveScriptRuby</li>
<li>NougakuDo</li>
<li>Google の bot は JavaScript や CSS も解釈する</li>
</ul>
</li>
<li>p.250 q値</li>
<li>car cadr caddr cdddr nth nthcdr</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Land of Lisp 読書会 第２回(兵庫県)に参加してきた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-21-reading-land-of-lisp-2.html"/>
    <updated>2013-09-21T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/reading-land-of-lisp-2</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/main/tag/amagasakirb">amagasakirb</a>
の
<a href="http://kokucheese.com/event/index/105390/">9月21日 Land of Lisp 読書会 第２回(兵庫県)</a>
に参加してきました。
今回は6.5章から9章まででした。</p>

<!--more-->


<p>以下は単なるメモです。</p>

<ul>
<li>p.97 訳注 の 保守的な言語 とは何か?</li>
<li>太い数字は脚注ではなく行番号というのがわかりにくい。
どこかに説明はあった?</li>
<li>p.115 ダイナミック変数とは?

<ul>
<li>別の本によると <code>defなんとか</code> で定義されるのがダイナミック変数らしい。</li>
<li><code>defun</code> もダイナミックスコープっぽい。
変数の <code>let</code> のように <code>labels</code> で関数も置き換えられる。</li>
</ul>
</li>
<li>なぜか Ruby の <code>$_</code> の話</li>
<li>話がそれていって開発環境の話から <code>VisualAge</code> とかの話もあった。</li>
<li>p.109 に not で終わっているLisp関数は非推奨と書いてあるのに、
p.130 以降のプログラムでは <code>remove-if-not</code> を使いまくっている。</li>
<li>p.130 の <code>islands</code> はどういうデータが入っているのか?</li>
<li>p.134 <code>コンス</code> とは? <code>コンスセル</code> のこと。</li>
<li>カヌレ</li>
<li>9章を読み終わっていない人は宿題 (次回までに読んでくる)</li>
</ul>

]]></content>
  </entry>
  
</feed>
