<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: letsencrypt | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/letsencrypt/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-08-14T23:22:00+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[letsencryptの証明書の更新に失敗していた(IPv6が原因だった)]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-14-failed-to-update-letsencrypt.html"/>
    <updated>2017-06-14T19:36:08+09:00</updated>
    <id>http://blog.n-z.jp/blog/failed-to-update-letsencrypt</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s Encrypt の証明書の自動更新が失敗しているサーバーがあって、原因を調べたら AAAA レコードに設定している IPv6 アドレスが間違っていたのが原因でした。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>Debian GNU/Linux 8.8 (jessie)</li>
<li>certbot 0.10.2-1~bpo8+1</li>
<li>さくらインターネットの VPS で IPv6 を使用 (過去に tun6rd を使っていた)</li>
</ul>


<h2>現象</h2>

<p>2016-03-29 に現在のサーバーに移動した時に A レコードを書き換えただけではなく、追加で tun6rd の頃の IPv6 アドレスを AAAA レコードに設定してしまいました。
別の IPv6 アドレスを設定しているサーバーからの接続に時間がかかるという現象が発生していたものの、原因がわからず、ずっとそのままの状態でした。</p>

<p>StartCom の証明書が事実上使えなくなってしまったので、 2016-12-04 に Let&rsquo;s Encrypt の証明書に変更しました。
初回の証明書の発行のときには問題なく発行できていました。
2017-02-03,2017-04-04 の自動更新も問題なく動いていました。</p>

<p>6月の自動更新で突然失敗するようになり、数日様子を見ていましたが、失敗し続けていたので、詳しく調査することにしました。</p>

<h2>調査</h2>

<p>色々悩んだ結果、 <code>/var/log/letsencrypt/letsencrypt.log</code> を眺めていたところ <code>addressUsed</code> に IPv6 のアドレスが出ているのに気づいて、もしかして、と思ってさらに調べることにしました。</p>

<pre><code>"validationRecord": [
  {
    "url": "http://XXX.example.org/.well-known/acme-challenge/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
    "hostname": "XXX.example.org",
    "port": "80",
    "addressesResolved": [
      "XX.XXX.XXX.XX",
      "2001:e41:XXXX:XXXX::1"
    ],
    "addressUsed": "2001:e41:XXXX:XXXX::1",
    "addressesTried": []
  }
]
</code></pre>

<p>該当のサーバーから <code>ping6 www.kame.net</code> などは問題なく通り、該当サーバーへの <code>ping6</code> も問題なく通ることなどを確認していたところ、IPv6 アドレスが違うことに気づきました。</p>

<h2>修正</h2>

<p>AAAA レコードを <code>2403:3a00:XXX:XXXX:XX:XXX:XXX:XX</code> に修正して、急いでいるわけでもないので certbot の自動実行を待ってみたところ、ちゃんと更新されました。</p>

<h2>関連情報</h2>

<p><a href="https://letsencrypt.jp/usage/dvsni-challenge-error.html">DVSNI challenge エラーの対処法</a>に <code>urn:acme:error:connection</code> の原因の例として A レコードのことは書いてあったのに AAAA レコードのことが書かれていなくて、可能性に気づくのが遅れたので、 AAAA レコードのことも書いてあると良いのではないかと思いました。</p>

<h2>まとめ</h2>

<p>Let&rsquo;s Encrypt のサーバーの実装が変わったのか、IPv6 アドレスから IPv4 へのフォールバックをしなくなっていて、IPv6 アドレスの間違いに気づくことができ、接続が遅かった現象も解決しました。</p>

<p>主に IPv4 を使っているとなかなか気づかないので、 AAAA レコードを設定するときは、ちゃんと確認しておかないと、後でわかりにくいトラブルの原因になると実感しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cronでcertbot renewの--force-renewalを使用してはいけない]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-26-certbot-renew.html"/>
    <updated>2017-04-26T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/certbot-renew</id>
    <content type="html"><![CDATA[<p>タイトルで言いたいことはすべてですが、 <code>cron</code>で定期実行する <code>certbot renew</code> で <code>--force-renewal</code> オプションは使わない方が良いという話です。</p>

<!--more-->


<h2><code>--force-renewal</code> とは?</h2>

<p><code>certbot</code> の <code>renew</code> サブコマンドは、標準で期限切れが近い (30 日未満) の証明書だけを自動で更新してくれる便利なサブコマンドです。
期限切れが近い証明書がなければ letsencrypt のサーバーへのアクセスがなく、余計な負荷をかけないので、1日2回実行が推奨されています。</p>

<p><code>--force-renewal</code> をつけると有効期限に関係なく更新が実行されます。</p>

<h2>悪い設定例</h2>

<p>例えば <a href="http://cloud-news.sakura.ad.jp/2017/04/24/mastodon-startupscript-update/" title="スタートアップスクリプト「Mastodon」の更新のお知らせ・旧スクリプトを使用して作成されたインスタンス向けの作業のお願い | さくらのクラウドニュース">スタートアップスクリプト「Mastodon」の更新のお知らせ・旧スクリプトを使用して作成されたインスタンス向けの作業のお願い | さくらのクラウドニュース</a> に書いてある</p>

<pre><code>echo "0 5 1 * * root /usr/local/certbot/certbot-auto renew --webroot --webroot-path /home/mastodon/live/public --force-renew &amp;&amp; /bin/systemctl reload nginx postfix" &gt; /etc/cron.d/certbot-auto
</code></pre>

<p>という設定だと毎月 1 日の 5:00 に更新するという設定になっています。</p>

<h2>letsencrypt へのサーバーの負荷の問題</h2>

<h3>回数の問題</h3>

<p>letsencrypt の証明書の有効期限は 90 日なので、 <code>--force-renewal</code> がなければ 2 ヶ月ごとに letsencrypt のサーバーへのアクセスが発生するのに対して、上記の例だと毎月アクセスが発生して、 letsencrypt のサーバーへの負荷は 2 倍になります。</p>

<h3>固定時刻の問題</h3>

<p>また 5:00 固定なので、同じ設定をしているサーバーが増えれば同時にアクセスが発生するのもよくない設定です。</p>

<h2>更新失敗時の問題</h2>

<p>マシンが起動していなくて <code>cron</code> が動かなかったとか、何らかの理由で証明書の更新に失敗した場合、毎月 1 回しか実行しない場合は 2,3 回しか更新のタイミングがないので、すべて失敗して証明書の期限切れになる可能性が高いです。</p>

<p>それに対して毎日 2 回実行している場合、失敗しても少なくとも 29 日の間再実行され続けるので、少なくとも 58 回はチャンスがあります。
(更新タイミング次第で 59 回になりそうです。計算が間違ってなければ。)</p>

<h2>Debian パッケージの certbot の例</h2>

<p>Debian の certbot パッケージでは</p>

<pre><code>0 */12 * * * root test -x /usr/bin/certbot -a \! -d /run/systemd/system &amp;&amp; perl -e 'sleep int(rand(3600))' &amp;&amp; certbot -q renew
</code></pre>

<p>という設定になっていて、 (systemd 環境でなければ) perl によるランダムスリープを入れて時間がばらけるようになっています。</p>

<p>systemd 環境では以下のように <code>ExecStartPre</code> でランダムスリープするようになっています。</p>

<pre><code>% cat /lib/systemd/system/certbot.timer
[Unit]
Description=Run certbot twice daily

[Timer]
OnCalendar=*-*-* 00,12:00:00
Persistent=true

[Install]
WantedBy=timers.target
%  cat /lib/systemd/system/certbot.service
[Unit]
Description=Certbot
Documentation=file:///usr/share/doc/python-certbot-doc/html/index.html
Documentation=https://letsencrypt.readthedocs.io/en/latest/
[Service]
Type=oneshot
ExecStartPre=/usr/bin/perl -e 'sleep int(rand(3600))'
ExecStart=/usr/bin/certbot -q renew
PrivateTmp=true
</code></pre>

<h2>まとめ</h2>

<p><code>--force-renewal</code> 付きで少ない回数の <code>certbot renew</code> を実行するのは欠点しかありません。</p>

<p>公式に推奨されているように <code>certbot renew</code> を <code>--force-renewal</code> なしで複数回実行する方が良いでしょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[certbot の renew hook について (その2)]]></title>
    <link href="http://blog.n-z.jp/blog/2017-01-03-certbot-renew-hook.html"/>
    <updated>2017-01-03T13:06:39+09:00</updated>
    <id>http://blog.n-z.jp/blog/certbot-renew-hook</id>
    <content type="html"><![CDATA[<p><a href="/blog/2016-11-20-certbot-renew-hook.html">certbot で設定の再読み込みには post-hook よりも renew-hook を使った方が良さそうという話</a> の続きです。</p>

<p>前回の記事の時点では同時に複数証明書が更新される時の挙動が確認できていませんでしたが、
確認できたので、その説明です。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li><h2>対象バージョン</h2></li>
<li><p>Ubuntu 14.04.5 LTS (trusty)</p></li>
<li>letsencrypt 0.9.3</li>
</ul>


<h2>RENEWED_DOMAINS の挙動</h2>

<p>pre-hook, post-hook, renew-hook でそれぞれ env を実行して環境変数を記録してみたところ、同時に更新される時は pre-hook, post-hook は 1 回ずつ、 renew-hook はドメインごとに呼ばれることがわかりました。</p>

<p>ドメインに応じてメールサーバーの reload などの処理をする場合は post-hook ではなく renew-hook を使う必要がありそうです。</p>

<p>ドメインなどは置き換えていますが、以下のような出力でした。
(<code>TMPDIR</code> などが <code>/tmp/user/0</code> になっているのは libpam-tmpdir を設定しているからだと思います。)</p>

<p>pre-hook の env:</p>

<pre><code>TEMPDIR=/tmp/user/0
HOME=/root
OLDPWD=/root
TMPDIR=/tmp/user/0
LOGNAME=root
TEMP=/tmp/user/0
COLUMNS=80
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
CERTBOT_AUTO=/home/vpsuser/letsencrypt/letsencrypt-auto
LANG=ja_JP.UTF-8
TMP=/tmp/user/0
SHELL=/bin/sh
PWD=/
LINES=24
</code></pre>

<p>post-hook の env:</p>

<pre><code>TEMPDIR=/tmp/user/0
HOME=/root
OLDPWD=/root
RENEWED_LINEAGE=/etc/letsencrypt/live/other.example.net
TMPDIR=/tmp/user/0
LOGNAME=root
TEMP=/tmp/user/0
COLUMNS=80
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
CERTBOT_AUTO=/home/vpsuser/letsencrypt/letsencrypt-auto
LANG=ja_JP.UTF-8
TMP=/tmp/user/0
SHELL=/bin/sh
PWD=/
RENEWED_DOMAINS=other.example.net
LINES=24
</code></pre>

<p>renew-hook の env:</p>

<pre><code>TEMPDIR=/tmp/user/0
HOME=/root
OLDPWD=/root
RENEWED_LINEAGE=/etc/letsencrypt/live/www.example.com
TMPDIR=/tmp/user/0
LOGNAME=root
TEMP=/tmp/user/0
COLUMNS=80
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
CERTBOT_AUTO=/home/vpsuser/letsencrypt/letsencrypt-auto
LANG=ja_JP.UTF-8
TMP=/tmp/user/0
SHELL=/bin/sh
PWD=/
RENEWED_DOMAINS=www.example.com
LINES=24
</code></pre>

<p>renew-hook 2 回目:</p>

<pre><code>TEMPDIR=/tmp/user/0
HOME=/root
OLDPWD=/root
RENEWED_LINEAGE=/etc/letsencrypt/live/other.example.net
TMPDIR=/tmp/user/0
LOGNAME=root
TEMP=/tmp/user/0
COLUMNS=80
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
CERTBOT_AUTO=/home/vpsuser/letsencrypt/letsencrypt-auto
LANG=ja_JP.UTF-8
TMP=/tmp/user/0
SHELL=/bin/sh
PWD=/
RENEWED_DOMAINS=other.example.net
LINES=24
</code></pre>

<h2>hook の例</h2>

<p>hook を cli.ini で設定します。</p>

<pre><code>% cat /etc/letsencrypt/cli.ini
rsa-key-size = 4096
pre-hook = /etc/letsencrypt/pre-hook
post-hook = /etc/letsencrypt/post-hook
renew-hook = /etc/letsencrypt/renew-hook
</code></pre>

<p>hook の実行ファイルを作成します。
忘れずに実行属性をつけておく必要があります。</p>

<p>pre-hook と post-hook は呼ばれたことと環境変数の記録だけですが、
renew-hook は呼ばれたことと環境変数の記録をしつつ、
apache に証明書の反映と、
メールサーバーのドメインの時のみ、
メール関係のデーモンにも反映をしています。
postfix だけ reload 時に標準出力にメッセージを出していたので、
捨てています。</p>

<pre><code>% cat /etc/letsencrypt/pre-hook
#!/bin/sh
{
  date
  env
} &gt;&gt; /tmp/pre-hook.env
% cat /etc/letsencrypt/post-hook
#!/bin/sh
{
  date
  env
} &gt;&gt; /tmp/post-hook.env
% cat /etc/letsencrypt/renew-hook
#!/bin/sh
{
  date
  env
} &gt;&gt; /tmp/renew-hook.env
apachectl graceful
for domain in $RENEWED_DOMAINS; do
  case "$domain" in
    mx*)
      service postfix reload &gt;/dev/null
      service dovecot reload
      ;;
  esac
done
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mini Debian Conference Japan 2016に参加して発表してきた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-12-10-mini-debian-conference-japan-2016.html"/>
    <updated>2016-12-10T10:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/mini-debian-conference-japan-2016</id>
    <content type="html"><![CDATA[<p><a href="http://miniconf.debian.or.jp/" title="Mini Debian Conference Japan 2016">Mini Debian Conference Japan 2016</a>
に参加して、発表してきました。</p>

<!--more-->


<h2>会場</h2>

<p>前日に東京に移動していたので、余裕がありましたが、
東京駅から近いので、当日移動でも頑張れば間に合いそうな場所でした。</p>

<p>ネットワークはゲスト用の無線があって、接続すると Web 画面が出てきてそこでユーザーとパスワードを入れて認証するという方式でした。</p>

<h2>セッション</h2>

<p>2トラックなので、どちらを聞きに行くのか悩む必要がありました。
さらに午後からは LibreOffice Kaigi 2016.12 も併催なので、さらに悩みました。</p>

<h2>オープニング</h2>

<ul>
<li>DebConf を日本でやりたいので、カンファレンス開催のノウハウをためたい</li>
<li>諸注意で Windows の画面が出てきてブーイング</li>
<li>結局映らなかったので口頭で</li>
<li>自動販売機は使用禁止とか</li>
<li>休憩中の予定説明とか</li>
<li>さっき出てきた DebConf の<a href="https://twitter.com/yasulab/status/807399231107584001">写真</a>のような集合写真撮影があるよとか</li>
<li>機材の関係で最初のセッションは部屋を入れ替え</li>
</ul>


<h2>Open Build Service in Debian</h2>

<ul>
<li>Open Build Service のアーキテクチャの説明</li>
<li>フロントエンドは Rails</li>
<li><a href="https://goo.gl/OSBNqv">https://goo.gl/OSBNqv</a></li>
<li><a href="https://goo.gl/2rNPMx">https://goo.gl/2rNPMx</a></li>
<li>デモはディスクフルで終了</li>
</ul>


<h2>昼食及びPGP/GPGキーサインパーティ</h2>

<p>パスポートを机の上に準備していたのに持ってくるのを忘れてしまっていて、
ID が運転免許証しかなかったので、日本人とだけにしておきました。</p>

<h2>OSS license 101</h2>

<ul>
<li>ライセンスは一部の権利を許諾するもの</li>
<li>著作権の他に特許、商標、契約も関係する</li>
<li>商標の例: &ldquo;Firefox&rdquo; と Iceweasel</li>
<li>契約の例: Red Hat エンタープライズ契約書</li>
<li>「5.2 検査。」という項目がある</li>
<li>ライセンスを選ぶ</li>
<li>目的に合わせて</li>
<li>万能のライセンスはない</li>
<li>ライセンスを独自に作るのはよくない</li>
<li>OSS ライセンスは well-tested library</li>
<li>独自ライセンスは使うときに吟味が必要になるし、互換性も問題になる</li>
<li>コードを書きたい人は既存のライセンスを使ってコードを書いていた方が生産性が高い</li>
<li>Proprietary license vs OSS license</li>
<li>Default deny vs Default allow</li>
<li>Whitelist vs Blacklist</li>
<li>The Open Source Definition (Annotated) <a href="https://opensource.org/osd-annotated/">https://opensource.org/osd-annotated/</a></li>
<li>DFSG-free (OSS), OSI-Certified and fake-OSS</li>
<li>Well-known OSS license</li>
<li>どのライセンスが良いか?</li>
<li>目的と利用方法によって変わる</li>
<li>Copyleft vs Permissive <a href="https://www.gnu.org/licenses/copyleft.ja.html">https://www.gnu.org/licenses/copyleft.ja.html</a></li>
<li>patent-free or not</li>
<li>Domain-specific</li>
<li>OFL,CC,GFDL, etc.</li>
<li>残りの時間はライセンスがらみの雑談</li>
<li>Zstd <a href="https://github.com/facebook/zstd">https://github.com/facebook/zstd</a></li>
<li>BSD-3-clause license However, its &ldquo;PATENTS&rdquo; file says</li>
<li>Zfs (GPL vs CDDL) by Canonical, Ltd.</li>
<li>GPL: Linux &ldquo;T-800&rdquo; issue</li>
<li>第三者はソースコードを請求できない</li>
<li>「Linux で稼働しているターミネーターを掴まえたとしても、そのバイナリの所有権を得たわけではないので、ソースコードは請求できない。」 <a href="https://twitter.com/elim/status/807442658830336001">https://twitter.com/elim/status/807442658830336001</a></li>
</ul>


<h2>Go言語で書かれたソフトウェアをDebianパッケージにする方法</h2>

<ul>
<li><a href="https://twitter.com/tSU_RooT">https://twitter.com/tSU_RooT</a></li>
<li>GPG ID: 63A6 000E</li>
<li>peco の Debian パッケージを入れた人</li>
<li>dh-make-golang</li>
<li>佐々木さんは自分用パッケージを作ったが、メンテナンスするプログラミング言語を増やしたくなかったので公式にはあげなかったらしい</li>
<li>公式に入れるとメリットが多い</li>
<li>公式に入ったっときのデメリットはパッケージメンテナがアップデートに追随してくれないことがある</li>
<li>パッケージに限らない問題</li>
<li>下準備</li>
<li>sid の環境を用意</li>
<li>リポジトリの確認</li>
<li>ソースコードからビルドできるか</li>
<li>ライセンスが付属しているか</li>
<li>go get するだけでビルドできるか</li>
<li>依存ライブラリがすでにパッケージになっているか</li>
<li>依存ライブラリも同じチェック</li>
<li>ライセンスがない場合: issue でお願いする</li>
<li>複雑なビルド手順が必要な場合: debian/rules で頑張る必要がある、今回は対象外</li>
<li>依存ライブラリが多い場合</li>
<li>ライセンス確認</li>
<li>例えば、サンプルに Gopher くんの画像がついていたら debian/copyright に明記する必要あり</li>
<li>pkg-go.alioth.debian.org</li>
<li>パッケージの命名規則がある</li>
<li>fork したリポジトリも別パッケージで問題ない</li>
<li>Go 1.6 で正式導入された vendor ディレクトリの扱いはまだ完全には決まってないっぽい</li>
<li>peco (v0.4.2) での実例</li>
<li>依存パッケージの話</li>
<li><code>apt showsrc golang-go-flags-dev 2&gt;/dev/null | grep Homepage</code> で upstream を確認</li>
<li>古いパッケージで依存なしで消えていたものを復活させた</li>
<li>lintian の警告を消す</li>
<li>debian/copyright を書く</li>
<li>debian/changelog を直す (ITP の番号を埋める、UNRELEASED を unstable に)</li>
<li>debian/control の README から自動で生成された説明文を直す</li>
<li>ライブラリパッケージすべてに行う</li>
<li>バイナリパッケージは man ページも用意する</li>
<li>今回話せなかったこと</li>
<li>参考資料</li>
<li>質疑応答</li>
<li>pristine-tar と git-buildpackage の話</li>
</ul>


<h2>Certbotで無料TLSサーバー</h2>

<p>Certbotで無料TLSサーバーというタイトルで発表しました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/debian-certbot/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/debian-certbot/" title="Certbotで無料TLSサーバー">Certbotで無料TLSサーバー</a>
</div>


<p><a href="https://github.com/sorah/acmesmith">https://github.com/sorah/acmesmith</a> というクライアントもあるらしい。</p>

<p><a href="https://github.com/dokku/dokku-letsencrypt">https://github.com/dokku/dokku-letsencrypt</a> で使っている <code>simp_le</code> は 開発が止まっている ( <a href="https://github.com/kuba/simp_le/issues/114">https://github.com/kuba/simp_le/issues/114</a> )。</p>

<h2>休憩及び集合写真撮影</h2>

<p>集合写真を撮影して、おやつ休憩がありました。</p>

<h2>FOSS バーチャルシンガー 徴音梅林 と LINNE プラットホーム</h2>

<ul>
<li>英語なので頑張って聞いていました。</li>
<li><a href="http://projectmeilin.github.io/ja/">http://projectmeilin.github.io/ja/</a></li>
</ul>


<h2>最近のGnuPG</h2>

<ul>
<li>二ヶ国語でプレゼン</li>
<li>メモリ不足でプレゼンツールがうまく動かないので佐々木さんのマシンに切り替え</li>
<li>Jessie は gnupg パッケージは 1.4 (新しいバージョンは gnupg2 パッケージ)</li>
<li>Stretch は gnupg パッケージは 2.1 (古いバージョンは gnupg1 パッケージ)</li>
<li>GnuPG 2.1?</li>
<li>公開鍵のフォーマットが KBX に変わった。(昔の形式もサポート)</li>
<li>プライベート鍵は gpg-agent が管理するようになった。</li>
<li>gpg, gpg-agent, pinentry, scdaemon, dirmngr, (gpgsm, ssh)</li>
<li>おすすめの使い方</li>
<li>gpg-agent を ssh-agent として使う</li>
<li>Token を使う</li>
<li>Curve25519 を使う (Ed25519/X25519 is more secure, key is small, fast)</li>
<li>キーサインパーティー</li>
<li>WKD: Web key directory</li>
<li>ToFU: Trust On First Use</li>
<li>g13 + dm-crypt</li>
<li>質疑応答</li>
<li>RSA 鍵からの移行</li>
<li>サブキーの追加よりも新規に作るのがおすすめ</li>
<li>gnuk の話</li>
<li>curve25519 サポートしている</li>
<li>楕円曲線暗号は輸出入の規制にひっかかることがある</li>
</ul>


<h2>休憩</h2>

<p>2つの部屋をくっつけて広くなった。</p>

<h2>DebConf 2018 台湾 参加表明準備とステータスの更新</h2>

<ul>
<li>英語なので twitter の <code>#debianjp</code> を参考にして頑張って聞いていました。</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>アンケート: <a href="https://goo.gl/BsPrgA">https://goo.gl/BsPrgA</a></li>
</ul>


<h2>懇親会</h2>

<ul>
<li>LT 大会をやっていました。</li>
<li>全体的にマイクの通りが悪いのか、英語に限らず話が聞き取りにくかったです。</li>
<li>Unicode の <a href="https://ja.wikipedia.org/wiki/%E6%BC%A2%E5%AD%97%E8%A8%98%E8%BF%B0%E8%A8%80%E8%AA%9E#.E6.BC.A2.E5.AD.97.E6.A7.8B.E6.88.90.E8.A8.98.E8.BF.B0.E6.96.87.E5.AD.97.E5.88.97_.28IDS.29" title="漢字構成記述文字列 (Ideographic Description Sequence; IDS)">漢字構成記述文字列 (Ideographic Description Sequence; IDS)</a> ですごい漢字を出しているのとか自作 OS の話とかが印象に残りました。</li>
<li>2回あった自動販売機の話もなかなか面白かったです。 <a href="https://twitter.com/OrientalHistory/status/807530627293593600">https://twitter.com/OrientalHistory/status/807530627293593600</a> <a href="https://twitter.com/OrientalHistory/status/807535513779322880">https://twitter.com/OrientalHistory/status/807535513779322880</a></li>
<li>セッション中は結局 LibreOffice Kaigi 2016.12 の方はいけなかったが、 LibreOffice 側にいた人とも話ができてよかった。</li>
<li>昔の RubyKaigi でセッションがのびたのに別の部屋の次のセッションは始まってしまって、両方見たかった人が最初の方を見逃すということがあって、その後、別の部屋とも同期をとるようになったということがあったのを思い出したのですが、別イベントなので、そこまで同期を取る必要はないにしても、せめてセッションの開始終了予定時刻が同じくらいの時間になっていれば、相互に行き来が発生しやすかったのではないかと思いました。</li>
<li>この話は LibreOffice 側の人にしたのですが、もともとイベントの企画は別々に始まっていて、たまたま会場と日付が一緒だったから合同にしたという流れだったようで、そこまで考えていなかったということのようでした。</li>
</ul>


<h2>まとめ</h2>

<p>k-of.jp で発表者募集を見て応募するまで参加する予定は全くなかったので、
前回会ったのがいつだったか忘れるぐらい久しぶりに会った人もいて、
全体としては楽しかったので、
参加して良かったと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[certbot の renew hook について]]></title>
    <link href="http://blog.n-z.jp/blog/2016-11-20-certbot-renew-hook.html"/>
    <updated>2016-11-20T14:52:31+09:00</updated>
    <id>http://blog.n-z.jp/blog/certbot-renew-hook</id>
    <content type="html"><![CDATA[<p>certbot で設定の再読み込みには post-hook よりも renew-hook を使った方が良さそうでした。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Debian GNU/Linux 8.6 (jessie)</li>
<li>certbot 0.9.3-1~bpo8+1</li>
</ul>


<h2>hook の指定方法について</h2>

<p><code>certbot renew --pre-hook "service nginx stop" --post-hook "service nginx start"</code> のように <code>certbot</code> コマンドの引数で直接指定するか、 <code>/etc/letsencrypt/cli.ini</code> または <code>$XDG_CONFIG_HOME/letsencrypt/cli.ini</code> (<code>$XDG_CONFIG_HOME</code> が設定されていなければ <code>~/.config/letsencrypt/cli.ini</code>) に <code>renew-hook = service nginx reload</code> のように <code>--</code> を省いたオプション名で ini ファイルに指定する方法があるようです。(<code>ini</code> ファイルは <code>--config cli.ini</code> または <code>-c cli.ini</code> のようにコマンドラインで指定も可能)</p>

<h2>pre-hook, post-hook について</h2>

<p><code>pre-hook</code> と <code>post-hook</code> は standalone プラグインを使っている時に、 <code>certbot</code> の Web サーバーが 80 番ポートを使えるようにするために、通常の Web サーバーを止める用途に適しているようです。</p>

<p>そのため、<code>--dry-run</code> の時でも呼ばれるようです。</p>

<p>使用例:
<code>certbot renew --pre-hook "service nginx stop" --post-hook "service nginx start"</code></p>

<h2>renew-hook について</h2>

<p><code>renew-hook</code> は証明書の更新が成功するごとに呼ばれるので、証明書の再読み込みに適しているようです。</p>

<p>環境変数 <code>RENEWED_LINEAGE</code> に <code>/etc/letsencrypt/live/www.example.com</code> のような証明書の場所へのパスが、
環境変数 <code>RENEWED_DOMAINS</code> に <code>www.example.com example.com</code> のようにスペース区切りの更新されたドメインのリストが渡ってくるようです。</p>

<p>証明書の更新ごとに呼ばれるようなので、たまたま同じタイミングで <code>www.example.com</code> と <code>other.example.net</code> の更新が起こったとして、
証明書の作成の時に <code>-d</code> を同時に指定して同じ証明書の SAN (Subject Alternative Name) に入っているなら、
<code>RENEWED_DOMAINS</code> に並んでいて、
別々に証明書を作成していれば <code>renew-hook</code> が別々に呼ばれました。</p>

<p>(2017-01-03 追記: <code>post-hook</code> は 1 回しか呼ばれませんでした。詳細は<a href="/blog/2017-01-03-certbot-renew-hook.html">certbot の renew hook について (その2)</a>を参照)</p>

<h2>renew-hook のすすめ</h2>

<p>以上の違いから、
<code>webroot</code> プラグインを使っている時の証明書の自動再読み込みには
<code>post-hook</code> ではなく <code>renew-hook</code> を使うのがおすすめです。</p>

<p>Web 上で <code>post-hook</code> を使っている例の方が多いのは、
<code>renew-hook</code> の方が後から実装されたからではないかと思います。</p>
]]></content>
  </entry>
  
</feed>
