<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-12-09T23:55:31+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[postfixとmilter-managerの設定をした]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-23-postfix-and-milter-manager.html"/>
    <updated>2013-11-23T21:25:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/postfix-and-milter-manager</id>
    <content type="html"><![CDATA[<p>Debian 7.2 (amd64) のサーバーにメールサーバーの設定をしたところ、
<a href="http://milter-manager.sourceforge.net/">milter-manager</a>
関連と gmail への IPv6 経由でのメール送信関連でちょっとひっかかりましたが、
すぐに解決できました。</p>

<!--more-->


<h2>milter-manager の話</h2>

<p>まず <code>milter-manager</code> は
<a href="http://milter-manager.sourceforge.net/reference/ja/install-to-debian.html">Debianへインストール &ndash; milter manager</a>
の手順通りに設定してみたのですが、確認のところで、</p>

<p><code>
 $ sudo -u postfix milter-test-server -s unix:/var/spool/postfix/milter-manager/milter-manager.sock
 status: temporary-failure
 elapsed-time: 0.007781 seconds
</code></p>

<p>のように <code>temporary-failure</code> になりました。
そこで依存しているデーモンを調べてみたところ、
<code>clamd</code> が起動していなかったので、</p>

<pre><code>sudo service clamav-daemon start
</code></pre>

<p>で起動した後、</p>

<pre><code>sudo service clamav-milter restart
</code></pre>

<p>で clamav-milter も再起動したら</p>

<pre><code>status: accept
</code></pre>

<p>になりました。</p>

<p>後で気付いたので、最初のインストール時のメッセージを
ちゃんと確認できていないのですが、
<code>/etc/init.d/clamav-daemon</code> の <code>start</code>
の処理に cvd ファイルなどの存在をチェックして起動を止める処理があるので、
<code>freshclam</code> の処理を待ってから起動しないとダメだったようです。</p>

<h2>gmail と IPv6 の話</h2>

<p><a href="http://ya.maya.st/d/201308c.html#s20130822_1">gmail の逆引き制限</a>
の人と同じように IPv6 で逆引き必須にするのは否定的なのですが、
それはおいといて、現実問題として送信できないのは困るので、
<code>smtp_address_preference = ipv4</code> の設定を追加しました。</p>

<p>その設定をする前にテストメールを送ったら、
以下のようなエラーメールが返ってきて、
エラーメッセージの中の URL が
<a href="http://www.postfix-jp.info/ML/arc-2.5/msg00237.html">以前ひっかかったとき</a>
とは変わっているということに気付きました。</p>

<p>```
&lt;自分のアドレス@gmail.com> (expanded from &lt;自分@あるサーバー>): host</p>

<pre><code>gmail-smtp-in.l.google.com[2607:f8b0:4002:c01::1a] said: 550-5.7.1
[2401:xxxx:xxx:xxxx:xxx:xxx:xxx:xxx      16] Our system has detected
550-5.7.1 that this message does not meet IPv6 sending guidelines regarding
PTR 550-5.7.1 records and authentication. Please review 550-5.7.1
https://support.google.com/mail/?p=ipv6_authentication_error for more 550
5.7.1 information. e2si14078426yhm.125 - gsmtp (in reply to end of DATA
command)
</code></pre>

<p>```</p>

<h2>余談</h2>

<p>以前はメールサーバーの spam 対策の設定は秘伝のたれ状態で
だんだんメンテナンスが難しくなってしまっていましたが、
spam 対策は milter-manager だったり、
firewall は <a href="packages.debian.org/ufw">ufw</a> だったり、
いろいろと共通で使えるものが増えてきて楽になってきたように思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBoxでdokkuを試した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-15-dokku.html"/>
    <updated>2013-11-15T15:35:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dokku</id>
    <content type="html"><![CDATA[<p>VirtualBox の中に Ubuntu 13.04 を入れて
<a href="https://github.com/progrium/dokku">dokku</a>
を試してみました。</p>

<p><a href="http://blog.coiney.com/2013/08/10/create-my-own-heroku/">dokku + VirtualBoxで自分のHerokuを作る</a>
を参考にしたのですが、
情報が古いのか、
README
に書いてあるのとコマンドが違うところ
(<code>gitreceive</code> が <code>sshcommand</code> になっているなど)
があるので、
README
の手順を基準にするのが良さそうです。</p>

<!--more-->


<h2>対象バージョン</h2>

<p>dokku の README に Ubuntu 13.10 と docker の組み合わせは
まだ問題があり、
13.04 が推奨と書いてあったので、
13.04 を使いました。</p>

<ul>
<li>ホストOS : OS X 10.9</li>
<li>VirtualBox 4.3.2</li>
<li>ゲストOS : Ubuntu 13.04 (amd64)</li>
<li>lxc-docker : 0.6.6</li>
<li>dokku : 今の master ブランチ (59ef6510bc)</li>
</ul>


<h2>Ubuntu 13.04 (amd64) のインストール</h2>

<p>OS のインストールは自分がこうしたというだけの話なので、
興味が無ければ dokku のインストールまで飛ばしてください。</p>

<p>いつものように
<a href="http://ftp.jaist.ac.jp/pub/Linux/ubuntu-releases/">Ubuntu Releases の jaist ミラー</a>
から
<code>ubuntu-13.04-server-amd64.iso</code>
をダウンロードしてインストールしました。</p>

<p>最初のユーザーは <code>adminuser</code> で、
<code>ssh</code> は後で入れるので、
パッケージのチェックは入れずにインストールしました。
ディスクは多めに 20GB に設定した以外はほぼデフォルトでインストールしました。</p>

<h3>etckeeper の設定</h3>

<ul>
<li><code>sudo aptitude install etckeeper git</code> で <code>git</code> と一緒にインストールして <code>bzr</code> をインストールしないようにします。
<code>bzr</code> がないので自動での <code>etckeeper init</code> は失敗するので、手動で実行します。</li>
<li><code>EDITOR=vi sudoedit /etc/etckeeper/etckeeper.conf</code> で <code>VCS="git"</code> と <code>GIT_COMMIT_OPTIONS="-v"</code> に変更します。</li>
<li><code>sudo etckeeper init</code> で初期化します。</li>
<li><code>sudo etckeeper commit "Initial commit"</code> で今の状態をコミットしておきます。</li>
<li><code>(cd /etc/ &amp;&amp; sudo git gc)</code> で <code>git gc</code> しておきます。</li>
</ul>


<h3>ufw の設定</h3>

<ul>
<li><code>/etc/default/ufw</code> の <code>DEFAULT_FORWARD_POLICY</code> を <code>DROP</code> から <code>ACCEPT</code> に変更しておきます。
<code>DROP</code> のままだと後で <code>docker</code> の中から DNS の解決ができないのが原因で <code>! [remote rejected] master -&gt; master (pre-receive hook declined)</code> になります。</li>
<li><code>sudo ufw enable</code> で有効にします。</li>
<li><code>sudo ufw allow 22/tcp</code> で <code>ssh</code> を許可します。</li>
<li><code>sudo ufw allow 80/tcp</code> で <code>http</code> を許可します。</li>
<li><code>sudo etckeeper commit "enable ufw"</code> などで変更を保存します。</li>
</ul>


<h3>ssh の設定</h3>

<ul>
<li><code>sudo aptitude install ssh</code> でインストールします。</li>
<li><code>/etc/hosts.deny</code> に <code>ALL: ALL</code> を追加してデフォルト拒否にします。</li>
<li><code>/etc/hosts.allow</code> に <code>sshd: 127.0.0.1 [::1]</code>
を追加してローカルホストからの接続を許可します。</li>
<li><code>/etc/hosts.allow</code> に <code>sshd: 10.0.0.0/8</code> も追加して
VirtualBox のポートフォワーディング経由の接続を許可します。</li>
<li><code>/etc/ssh/sshd_config</code> (<code>ssh_config</code> ではない) に
<code>AllowUsers adminuser</code> と <code>AllowUsers dokku</code> を追加して、
特定のユーザーにだけ <code>ssh</code> で接続できるようにします。</li>
</ul>


<p>ホストOS側では Vagrant も使っていたので、
ssh 用の鍵としては
<a href="https://github.com/mitchellh/vagrant/tree/master/keys">Vagrant の Insecure Keypair</a>
を使いました。</p>

<p>そして
ホストOS側の
<code>~/.ssh/config</code>
の設定としては、
グローバルの設定も含めると以下のようにしました。</p>

<p><code>
ExitOnForwardFailure yes
Ciphers aes256-ctr,aes192-ctr,aes128-ctr
HashKnownHosts no
NoHostAuthenticationForLocalhost yes
ServerAliveInterval 30
Host raring64
  Ciphers arcfour256,arcfour128
  HostName 127.0.0.1
  User adminuser
  Port 21304
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile ~/.vagrant.d/insecure_private_key
  IdentitiesOnly yes
</code></p>

<p><code>Ciphers</code> はデフォルトはセキュアなものを使い、
VM 用には速いものを使うようにしています。</p>

<h2>VirtualBox のポートフォワーディング設定</h2>

<p>設定のネットワークのポートフォワーディングのところで、</p>

<ul>
<li>名前:SSH, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:21304, ゲストIP:空欄, ゲストポート:22</li>
<li>名前:Web, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:1384, ゲストIP:空欄, ゲストポート:80</li>
</ul>


<p>のような感じで設定しました。</p>

<p>13.10 にしたら</p>

<ul>
<li>名前:SSH, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:21310, ゲストIP:空欄, ゲストポート:22</li>
<li>名前:Web, プロトコル:TCP, ホストIP:127.0.0.1, ホストポート:1380, ゲストIP:空欄, ゲストポート:80</li>
</ul>


<p>とすれば良いかなと思っています。</p>

<h2>dokku のインストール</h2>

<p><a href="https://github.com/progrium/dokku/blob/1d3ae29ba6bed8e1c98991c15db45724508fae30/README.md">README</a>
に書いてあるように
<code>wget -qO- https://raw.github.com/progrium/dokku/master/bootstrap.sh | sudo bash</code>
などでインストールできます。</p>

<p>実際には、
内容を確認したかったので、
<code>wget</code> でダウンロードした後、
<code>sudo bash &lt; bootstrap.sh</code>
で実行しました。</p>

<p>時間は5分程度かかると書いてありますが、
実際には
<code>docker</code>
用のイメージのダウンロードに時間がかかるので、
ネットワークの速度の影響が大きいようです。</p>

<h2>dokku の設定</h2>

<h3>VHOST の設定</h3>

<p>参考にしたサイトと同じように <code>xip.io</code> を使いました。
ポートフォワーディング経由にしているので、
<code>127.0.0.1</code>
にしています。</p>

<p><code>
echo deploy.127.0.0.1.xip.io | sudo tee /home/dokku/VHOST
</code></p>

<h3>ssh 公開鍵の追加</h3>

<p><code>ssh</code>
の接続は Vagrant と共通の鍵を使うことにしたので、
<code>/home/adminuser/.ssh/authorized_keys</code>
には <code>vagrant.pub</code> と同じ内容が入っています。</p>

<p>この鍵をそのまま <code>dokku</code> の方に登録しました。</p>

<p>ここもゲストOS側での作業になります。
README の手順では <code>ssh</code> 経由で <code>sudo</code> を実行しています。</p>

<p><code>
cat ~/.ssh/authorized_keys | sudo sshcommand acl-add dokku vagrant
</code></p>

<p>この手順で追加した公開鍵は</p>

<p><code>
sudo sshcommand acl-remove dokku vagrant
</code></p>

<p>で削除できます。</p>

<p>他の公開鍵を追加する時は <code>vagrant</code> の部分を変更しておかないと
<code>acl-remove</code> でまとめて削除されてしまいます。</p>

<h2>アプリケーションの deploy</h2>

<p>問題なく設定できていれば以下で deploy できます。</p>

<p>```</p>

<pre><code>git clone https://github.com/heroku/node-js-sample
cd node-js-sample
git remote add raring64 dokku@raring64:node-js-app
git push raring64 master
</code></pre>

<p>```</p>

<p>エラーになったときはログをみたり、
<code>dmesg</code>
を見たりして原因を調べてください。</p>

<p>正常に deploy できていれば
<code>http://node-js-app.deploy.127.0.0.1.xip.io:1384</code>
で <code>Hello World!</code> と表示されます。</p>

<h2>リモートからの dokku コマンド</h2>

<p>README には <code>$ dokku run node-js-app ls -alh</code> と書いてあり、
ホストOS側には <code>dokku</code> コマンドはないので、
どうすればいいのか悩んだのですが、</p>

<p><code>
 ssh dokku@raring64 run node-js-app ls -alh
</code></p>

<p>のように <code>git push</code> に使う <code>ssh</code> 経由で
<code>dokku</code> コマンドが実行されているのを使えました。</p>

<p>入力待ちになってしまうようで、
<code>control+D</code> で <code>EOF</code> を入力するなどしないと
ホストOS側のプロンプトに戻ってこないので、
想定された使い方ではなさそうな感じです。</p>

<p>他にも</p>

<p><code>
 ssh dokku@raring64 delete node-js-app
</code></p>

<p>でアプリケーションの削除もできました。
heroku と違って確認なしにいきなり削除されてしまうので注意が必要です。</p>

<p>どんなコマンドが実行できるのかは <code>dokku help</code> 相当の</p>

<p><code>
 ssh dokku@raring64 help
</code></p>

<p>で一覧が出てきます。</p>

<p>普段使いそうなのは <code>config</code> 関連と <code>logs</code> だと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[/dev/snd/hwC0D0でPermission deniedになる問題を調べた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-04-dev-snd-hwc0d0-permission-denied.html"/>
    <updated>2013-11-04T14:22:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dev-snd-hwc0d0-permission-denied</id>
    <content type="html"><![CDATA[<p><code>/dev/snd/hwC0D0</code> を <code>O_RDWR</code> で <code>open(2)</code> するところで
<code>Permission denied</code> になるという話
(
<a href="https://twitter.com/takaswie/status/397014733494026240">ツイート</a>、
<a href="https://forums.ubuntulinux.jp/viewtopic.php?pid=100488#p100488">Ubuntu日本語フォーラム</a>
)
が気になったので、調べてみました。</p>

<!--more-->


<h2>結論</h2>

<p>最終的にどうすれば良いか知りたい人向けの情報としては、
<code>setcap cap_sys_rawio=ep filename</code>
でケーパビリティ (capability) を設定する、ということになります。</p>

<p>以下は、その結論にたどり着くまでに調べたことのメモです。</p>

<h2>パーミッションと ACL</h2>

<p><a href="http://blog.n-z.jp/blog/2013-10-27-kansai-debian-meeting.html">第 77 回 関西 Debian 勉強会に参加した</a>
で書いたように、
audio グループに属しているか、コンソールから直接ログインしていれば
パーミッションの問題はないはずです。</p>

<h2>余談: デバイスの sticky bit</h2>

<p><code>crw-rw---T</code> になっていて、
もしかして末尾の sticky bit が影響しているのかと思って調べてみたところ、
<a href="http://lists.debian.org/debian-user/2012/02/msg01273.html">Re: Sticky bit on device files?</a>
によると udev の管理用のフラグとして使われているようでした。
今回の件とは関係なさそうだったので、これ以上深追いはしていません。</p>

<h2>AppArmor</h2>

<p><code>/etc/apparmor.d/abstractions/audio</code> に
<code>/dev/snd/*      rw,</code> とあるので、
念のため
<code>sudo service apparmor stop</code>
で <code>AppArmor</code> を止めて試してみましたが、
変化が無かったので、
<code>sudo service apparmor start</code>
で戻しました。</p>

<h2>カーネルのソースコード探索</h2>

<p><code>strace</code> などで確認しても、
ユーザーランドでは <code>EACCES</code> が返ってくるとしかわからないので、
こうなったらカーネルのソースコードから <code>EACCES</code> を返しているところを
探すしかないということで、
<code>apt-get source linux-image-$(uname -r)</code>
でソースコードをダウンロードして探してみました。</p>

<p><code>grep -r EACCES sound</code> で探してみると
<code>sound/pci/hda/hda_hwdep.c</code> で以下のように
<code>CAP_SYS_RAWIO</code> をみていることがわかりました。</p>

<p>```c sound/pci/hda/hda_hwdep.c
 static int hda_hwdep_open(struct snd_hwdep <em>hw, struct file </em>file)
 {
 #ifndef CONFIG_SND_DEBUG_VERBOSE</p>

<pre><code>if (!capable(CAP_SYS_RAWIO))
    return -EACCES;
</code></pre>

<p> #endif</p>

<pre><code>return 0;
</code></pre>

<p> }
```</p>

<h2>Linux のケーパビリティ (capability)</h2>

<p><a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man7/capabilities.7.html">Man page of CAPABILITIES</a>
が関係しているということがわかったところで、
設定方法も調べてみると、
<code>setcap</code> で設定できるとわかったので、
以下のような簡単なテストプログラムを用意して、
<code>sudo setcap cap_sys_rawio=ep ./a.out</code>
でケーパビリティを設定すると
<code>open(2)</code>
に成功するのを確認できました。
<code>cap_sys_rawio=ep</code> は危険そうなので、
テストプログラムとはいえ、
任意のパスを受け取れるようにするのは止めた方が良さそうに思いました。</p>

<p>```c open-hwC0D0.c
 #include &lt;sys/types.h>
 #include &lt;sys/stat.h>
 #include &lt;fcntl.h>
 #include &lt;stdio.h></p>

<p> int main() {</p>

<pre><code>open("/dev/snd/hwC0D0", O_RDWR);
perror("open");
return 0;
</code></pre>

<p> }
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LC_COLLATEの問題でuniqで丸数字が同一視されてしまう]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-31-lc-collate-uniq.html"/>
    <updated>2013-10-31T23:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lc-collate-uniq</id>
    <content type="html"><![CDATA[<p><code>uniq -c</code> で重複がないのを確認しようとしたら、
丸数字のところだけ違う行が同一視されてしまって、
2以上になることがあって困ったので、
原因を調べてみました。</p>

<!--more-->


<h2>現象</h2>

<p>以下のように丸数字などが同一視されています。</p>

<p><code>
$ cat n.txt
①
②
$ uniq n.txt
①
$ sort n.txt
①
②
$ tac n.txt | sort
②
①
$
</code></p>

<p>```
$ cat n.txt
①
②
$ LANG=ja_JP.utf8 uniq -c n.txt</p>

<pre><code>  2 ①
</code></pre>

<p>$ LANG=C uniq -c n.txt</p>

<pre><code>  1 ①
  1 ②
</code></pre>

<p>$ uniq &mdash;version
uniq (GNU coreutils) 8.20
Copyright &copy; 2012 Free Software Foundation, Inc.
ライセンス GPLv3+: GNU GPL version 3 or later <a href="http://gnu.org/licenses/gpl.html">http://gnu.org/licenses/gpl.html</a>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.</p>

<p>作者 Richard M. Stallman および David MacKenzie。
$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 13.04
Release:        13.04
Codename:       raring
$
```</p>

<h2>調査</h2>

<p><code>apt-get source locales</code>
でソースをとってきて調べてみると
<code>locales/ja_JP</code> の <code>LC_COLLATE</code> から <code>END LC_COLLATE</code>
の間に書いていないコードポイントは同一視されているように見えました。</p>

<p>これは glibc の問題だと思って、既に報告されているかどうか調べてみると
<a href="https://sourceware.org/bugzilla/show_bug.cgi?id=13063">Bug 13063 – &lsquo;sort -u&rsquo; will erase some Chinese characters</a>
に同じような話がありました。</p>

<h2>ML で聞いてみた</h2>

<p><a href="http://listserv.linux.or.jp/pipermail/linux-users/2013-October/000527.html">linux-users: 108951</a>
で質問してみたところ、
<a href="http://listserv.linux.or.jp/pipermail/linux-users/2013-October/000528.html">linux-users: 108952</a>
で返信があり、
<code>LC_COLLATE</code>
をちゃんと定義して解決するか、
単純にバイト順でソートしたいだけなら
<code>LC_COLLATE=C</code> で良いという話でした。</p>

<h2>結論</h2>

<p>結局今回の目的はソートではなく重複検査だったので、
<code>LC_COLLATE=C</code> で解決ということになりました。</p>

<p>誰か興味のある人は真面目に
<code>LC_COLLATE</code>
の定義に挑戦してみると良いのではないでしょうか。</p>

<p>それとは別に定義されていない文字を同一視せずにバイト順でも何でもいいので、
適当に別の文字として扱ってくれるようになればいいのに、
とは思いました。
誰かそういう方向での対応も挑戦してみると
他の言語も含めて幸せになれるのではないかと思いました。</p>
]]></content>
  </entry>
  
</feed>
