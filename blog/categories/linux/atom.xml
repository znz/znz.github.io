<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-10-07T20:23:39+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LILO ＆ 東海道らぐのイベントに参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-17-lilo-event.html"/>
    <updated>2014-08-17T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-event</id>
    <content type="html"><![CDATA[<p><a href="http://lilo.doorkeeper.jp/events/13874" title="0 LILO ＆ 東海道らぐ・オフラインミーティング（2014/08/17） - LILO | Doorkeeper">0 LILO ＆ 東海道らぐ・オフラインミーティング（2014/08/17） - LILO | Doorkeeper</a>
に参加しました。</p>

<p>前回と同じくアンカンファレンス形式でした。</p>

<!--more-->


<h2>メモ</h2>

<p>今回のメモです。</p>

<ul>
<li>まずは自己紹介から</li>
<li><a href="http://histudy.doorkeeper.jp/events/13581" title="オープンテック・ショーケース・ヒメジ - 姫路IT系勉強会 | Doorkeeper">オープンテック・ショーケース・ヒメジ - 姫路IT系勉強会 | Doorkeeper</a></li>
<li>今回のイベントは <a href="http://lilo.linux.or.jp/">http://lilo.linux.or.jp/</a> には載っていなかったが Doorkeeper 経由で知って初参加の人がいた</li>
<li><a href="http://www.doorkeeper.jp/">Doorkeeper</a> や <a href="http://connpass.com/">connpass</a> が便利</li>
<li>最初は <a href="https://getpebble.com/">pebble</a> というスマートウォッチの話

<ul>
<li><a href="https://pushover.net/">Pushover</a> で通知が便利</li>
<li>漢字などの日本語が出ない</li>
<li>Evernote アプリは日本語の問題でほとんど使えなかった</li>
<li>2要素認証アプリも使える</li>
<li>プログラムが作れる</li>
</ul>
</li>
<li>Control+Alt+Backspace が最近のディストリビューションではデフォルト無効</li>
<li><a href="http://fieldpapers.org/">http://fieldpapers.org/</a> というサイトで Open Street Map を PDF にして紙に印刷できる</li>
<li>FizzBuzz の話

<ul>
<li>Python で <code>printf</code> を並べた C 言語のソースを生成してコンパイルして限界に挑戦していたという話でした</li>
</ul>
</li>
<li>etckeeper を openSUSE の公式リポジトリに入れる話</li>
<li>synergy の話</li>
<li>ライセンスなどの話が2個

<ul>
<li>不正競争防止法の第2条にやってはいけないことが列挙してある</li>
<li>プロテクト解除手段の配布禁止</li>
<li><a href="http://www.jiii.or.jp/h26_jitsumusya/index.html">特許実務者講習</a></li>
<li><a href="http://www.blackducksoftware.jp/">Black Duck</a></li>
</ul>
</li>
<li>スレートPC の話</li>
<li>Open Street Map などを OHP フィルムシートに印刷して作ったしおりの話</li>
<li>山下さんの話

<ul>
<li><a href="http://www.yamasita.jp/">山下康成の”ハックしよう”</a>が「京都 山下」で検索すると3番目に出てくる</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrantなどのローカルへのssh接続のみarcfour256で高速化する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-11-openssh-arcfour256.html"/>
    <updated>2014-08-11T21:53:54+09:00</updated>
    <id>http://blog.n-z.jp/blog/openssh-arcfour256</id>
    <content type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/rx7/20101025/p1" title="大容量ファイルのSCP転送を高速にする方法 - 元RX-7乗りの適当な日々">大容量ファイルのSCP転送を高速にする方法 - 元RX-7乗りの適当な日々</a>
をみて、安全な可能性が高い経路だけ <code>arcfour256</code> のような高速な <code>Ciphers</code> を使いたいと思って、そうなるように設定しました。</p>

<p><a href="/blog/2013-11-15-dokku.html" title="VirtualBoxでdokkuを試した">VirtualBoxでdokkuを試した</a>
での設定は意図通りには動いていませんでした。</p>

<!--more-->


<h2>確認バージョン</h2>

<ul>
<li>Mac OS X 10.9.4</li>
<li>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011</li>
</ul>


<h2>OpenSSH の <code>~/.ssh/config</code> の設定例</h2>

<p>最初に例を出しておきます。
詳しいことは説明は後でしますが、
<code>Host *</code> の設定は例として書いているだけで、
書かないことを推奨します。</p>

<p><code>text ~/.ssh/config
HashKnownHosts no
Host 127.0.0.1
    Ciphers arcfour256,arcfour128
Host *
    Ciphers aes256-ctr,aes192-ctr,aes128-ctr
</code></p>

<h3>設定の固まり (セクション)</h3>

<p><code>~/.ssh/config</code> の設定は <code>Host</code> で始まる行ごとの固まり (セクション) に分かれていて、
上の例の場合は <code>HashKnownHosts</code> が全体の設定、
次が <code>127.0.0.1</code> のみの設定、
最後が <code>*</code> つまりワイルドカードですべてのホストに対する設定になります。</p>

<h3>設定の優先順位</h3>

<p>最初に見つかった設定が使われます。
これが以前は勘違いしていた点で、
ホストごとの設定を優先したいのなら、
<code>Host</code> の上のファイルの冒頭には書かずに、
ファイルの最後に <code>Host *</code> で設定する必要があります。</p>

<p>さらに詳しい優先順位は <code>man ssh_config</code> で参照できますが、</p>

<ol>
<li>コマンドラインオプション</li>
<li>ユーザー設定 (<code>~/.ssh/config</code>)</li>
<li>システムの設定 (<code>/etc/ssh/ssh_config</code>)</li>
</ol>


<p>という順番で、その中で最初に見つかったものを使うようになっています。</p>

<p>つまり、ホストごとの設定はファイルの先頭に近い方に、
一般的な設定は最後に書く必要があります。</p>

<h2>Ciphers の一般設定</h2>

<p>デフォルトは <code>man</code> で確認すると
<code>aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour</code>
になっていて、
AES の CTR のビット数が多いものを優先するために上記の設定にしています。</p>

<p>設定するなら OS などの更新ごとに毎回ちゃんと <code>man</code> でデフォルトを確認すべきです。
よくわからないのなら、
<code>Host *</code> での設定はしない方が良いでしょう。</p>

<h2>127.0.0.1 向けの Ciphers 設定</h2>

<p>参考にしたサイトのコメントに「
<a href="http://d.hatena.ne.jp/rx7/20101025/p1#c1291741909" title="ただ、arcfourには別の問題が有るので、使わない方がいいです。 arcfour128/256はその問題の対処版なので、これらのみを使うようにした方がいいでしょう。">ただ、arcfourには別の問題が有るので、使わない方がいいです。 arcfour128/256はその問題の対処版なので、これらのみを使うようにした方がいいでしょう。</a>
」とあり、速度もほとんど変わらないので、
「arcfour128/256」だけ使う設定にしています。</p>

<h2>vagrant 用設定</h2>

<p><code>vagrant ssh --help</code> で追加のオプションが渡せるとわかったので、
<code>vagrant ssh -- -v</code> で接続時の状況を調べました。</p>

<p>コマンドラインオプションが優先されるということで、
<code>vagrant ssh -- -v -o Ciphers=arcfour256</code>
のように接続すると <code>arcfour256</code> になることが確認できました。</p>

<p>以前は <code>Host vagrant</code> で設定して <code>vagrant ssh</code> の代わりに <code>ssh vagrant</code> を使っていたのですが、
複数 <code>vagrant up</code> したときに最初に起動した VM のポート (2222) にしか接続できないという問題がありました。</p>

<p>そこで、他の VM のときにも使える設定を考えたところ、
<code>Host 127.0.0.1</code> でうまくいくことがわかりました。</p>

<h2>まとめ</h2>

<p>元々のデフォルトは時代に合わせて最適なものに更新されているので、
不用意に固定してしまうと
<a href="http://d.hatena.ne.jp/jovi0608/20140808/1407483168" title="OpenSSLの脆弱性(CVE-2014-3511)でTLSプロトコルの基礎を学ぶ - ぼちぼち日記">OpenSSLの脆弱性(CVE-2014-3511)でTLSプロトコルの基礎を学ぶ - ぼちぼち日記</a>
のように強いものに固定していたつもりが弱いものに固定されてしまうことになる可能性があるので注意が必要です。</p>

<p><code>127.0.0.1</code> 以外にも LAN 内のホストなど、経路の信頼性が比較的高くて高速に転送したい場合は <code>Host</code> 設定で <code>Ciphers arcfour256</code> を追加すると良いのではないでしょうか。</p>

<h2>参考 URL</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/rx7/20101025/p1" title="大容量ファイルのSCP転送を高速にする方法 - 元RX-7乗りの適当な日々">大容量ファイルのSCP転送を高速にする方法 - 元RX-7乗りの適当な日々</a></li>
<li><a href="http://tech.nitoyon.com/ja/blog/2013/01/11/github-clone-http/" title="GitHub で clone するときは SSH じゃなく HTTP を使ったほうが高速 - てっく煮ブログ">GitHub で clone するときは SSH じゃなく HTTP を使ったほうが高速 - てっく煮ブログ</a></li>
<li><a href="http://endoyuta.com/2014/03/12/github%E3%81%AEssh%E6%8E%A5%E7%B6%9A%E3%81%8C%E9%80%9F%E3%81%8F%E3%81%AA%E3%82%8B%E3%82%89%E3%81%97%E3%81%84/" title="githubのssh接続が速くなるらしい | Logicky Blog">githubのssh接続が速くなるらしい | Logicky Blog</a></li>
<li><a href="http://blog.eiel.info/blog/2013/11/09/no-mathcing-cipher-found-on-github/" title="GitHub で SSH 接続できなくなった。SSH をつかった場合に高速化する設定が原因だった。 - そんなこと覚えてない">GitHub で SSH 接続できなくなった。SSH をつかった場合に高速化する設定が原因だった。 - そんなこと覚えてない</a></li>
<li><a href="http://d.hatena.ne.jp/jovi0608/20140808/1407483168" title="OpenSSLの脆弱性(CVE-2014-3511)でTLSプロトコルの基礎を学ぶ - ぼちぼち日記">OpenSSLの脆弱性(CVE-2014-3511)でTLSプロトコルの基礎を学ぶ - ぼちぼち日記</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[シェルで glob 結果を事前に確認する方法]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-21-confirm-glob.html"/>
    <updated>2014-06-21T13:16:56+09:00</updated>
    <id>http://blog.n-z.jp/blog/confirm-glob</id>
    <content type="html"><![CDATA[<p><code>rm *~</code> のつもりで <code>rm * ~</code> (半角スペースが混ざっている) のように実行してしまうような間違いをすると危険です。</p>

<p>その対策として <code>tcsh</code> には <code>rmstar</code> という設定があったり
<code>zsh</code> には <code>RM_STAR_SILENT</code> や <code>RM_STAR_WAIT</code> という設定があるのですが、
ちゃんと展開結果を確認してからコマンドを実行する方が安全です。</p>

<p>また <code>rm</code> 以外でも展開結果を事前に確認できると便利なことが多いです。</p>

<!--more-->


<h2>展開結果の確認方法</h2>

<p><code>bash</code> や <code>zsh</code> の一般的なキー割り当てだと <code>C-x g</code> (Control を押しながら x を押して Control を離して g) で展開結果を確認できます。</p>

<p>Tab キーだとコマンドライン中に展開されてしまいますが、
<code>C-x g</code> だと確認だけ出来ます。</p>

<h3>bash の場合</h3>

<p>たとえば <code>bash</code> なら以下のように展開結果が出て、
プロンプトの行が出てきます。</p>

<pre><code class="console bash">    $ echo /etc/host*&lt;C-x&gt;g
    host.conf    hostname     hosts        hosts.allow  hosts.deny
    $ echo /etc/host*
</code></pre>

<h3>zsh の場合</h3>

<p><code>zsh</code> ならプロンプトの行の下に展開結果が出てきます。</p>

<pre><code class="console zsh">    % echo /etc/host*
    /etc/host.conf    /etc/hostname     /etc/hosts        /etc/hosts.allow  /etc/hosts.deny
</code></pre>

<h2>Tab キーの動作</h2>

<p>比較のため Tab キーでの動作例も載せておきます。</p>

<h3>bash の場合</h3>

<p>実際には同じ行でしたが、最初の展開結果に置き換わりました。</p>

<pre><code class="console bash">    $ echo /etc/host*&lt;tab&gt;
    $ echo /etc/host.conf
</code></pre>

<h3>zsh の場合</h3>

<p>こちらも実際には同じ行ですが、すべての展開結果に置き換わりました。</p>

<pre><code class="console zsh">    % echo /etc/host*&lt;tab&gt;
    % echo /etc/host.conf /etc/hostname /etc/hosts /etc/hosts.allow /etc/hosts.deny
</code></pre>

<p>glob で指定しにくい一部のファイルだけ除外するなど、展開された方が便利な時は
Tab キーで展開してからコマンドラインを編集して実行することもあります。</p>

<h2>まとめ</h2>

<p>一般的な bash 環境ならどこでも使えて、
複雑な glob の展開結果の確認にも便利なので、
<code>C-x g</code> は非常にオススメです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant の Multi VM 間で IPsec を試した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-04-vagrant-multivm-ipsec-demo.html"/>
    <updated>2014-06-04T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/vagrant-multivm-ipsec-demo</id>
    <content type="html"><![CDATA[<p>正常に IPsec の暗号化通信ができているときの racoon のログなどを確認したかったので、
Vagrant と ansible で
IPsec で通信できる Multi VM 環境を作ってみました。</p>

<p>playbook は
<a href="https://github.com/znz/ansible-playbook-ipsec-demo">https://github.com/znz/ansible-playbook-ipsec-demo</a>
で公開しています。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>ホスト OS : Mac OS X 10.9.3</li>
<li>VirtualBox 4.3.12</li>
<li>Vagrant 1.6.3</li>
<li>ansible 1.6.2</li>
<li>ゲスト OS : Ubuntu 14.04 &times; 2</li>
</ul>


<p>Ubuntu は <a href="https://cloud-images.ubuntu.com/vagrant/trusty/current/">https://cloud-images.ubuntu.com/vagrant/trusty/current/</a> のイメージを使ったので、
daily build の状態によっては動作が変わっているかもしれません。</p>

<h2>ホストオンリーネットワーク</h2>

<p>使った後は</p>

<ul>
<li>vboxnet1 (192.168.50.1/24)</li>
<li>vboxnet2 (192.168.11.1/24)</li>
<li>vboxnet3 (192.168.12.1/24)</li>
</ul>


<p>が勝手に増えているので、不要なら設定で消しておくと良いと思います。</p>

<p>ネットワークとしては以下のように 192.168.50.0/24 の部分で IPsec 接続をして、
192.168.11.11 と 192.168.12.12 をつなぐ、という感じにしています。
デフォルトの eth0 は外部への接続用としてそのままにしています。</p>

<pre><code>192.168.11.11 (vm1:eth2)
       |
192.168.50.11 (vm1:eth1)
       |
192.168.50.12 (vm2:eth1)
       |
192.168.12.12 (vm2:eth2)
</code></pre>

<h2>準備</h2>

<p>Usage に書いてあるように準備をしておきます。
先日作った <code>ja_jp</code> role は git submodule にしているので、</p>

<pre><code>% git submodule init
% git submodule update
</code></pre>

<p>で取得する必要があります。</p>

<h2>試し方</h2>

<p><code>vagrant up</code>
すると
<code>/etc/ipsec-tools.conf</code>
と
<code>/etc/racoon/racoon.conf</code>
に設定が入っている状態になっているので、
始点アドレスを指定して
<code>ipsec-tools.conf</code>
に設定した経路を通るようにパケットを送ると
IPsec VPN がつながります。</p>

<p><code>ping</code> コマンドのように直接始点アドレスを指定するオプションがない場合は
<code>ping -I eth2 192.168.12.12</code> のように network interface で指定すれば
良いようです。</p>

<h2>動作確認</h2>

<p>以下のコマンドの出力が接続前後で変わることが確認できます。</p>

<ul>
<li><code>racoonctl -l show-sa isakmp</code></li>
<li><code>racoonctl -l show-sa ipsec</code></li>
<li><code>setkey -D</code></li>
</ul>


<p>racoon のログが <code>/var/log/syslog</code> に大量に出ているのを確認できます。
(<code>racoon.conf</code> で <code>log debug</code> にしているため)</p>

<h2>tshark でパケットの確認</h2>

<p><code>tshark</code> パッケージをインストールした後、
<code>sudo dpkg-reconfigure wireshark-common</code>
で一般ユーザーでも実行を許可するようにして、
実行を許可するユーザーを <code>wireshark</code> に追加します。</p>

<p>グループの追加を反映するためにログインし直すと、
<code>tshark -i eth1 -V 'port 500'</code>
などでパケットの確認ができるようになります。</p>

<p>暗号化されていて詳細はわかりませんが、
UDP の 500 番ポートで Informational のパケットが流れていることが確認できました。</p>

<p>GUI の wireshark の方では
<a href="http://ask.wireshark.org/questions/12019/how-can-i-decrypt-ikev1-andor-esp-packets">http://ask.wireshark.org/questions/12019/how-can-i-decrypt-ikev1-andor-esp-packets</a>
の方法で暗号化の解除もできるようです。</p>

<p>syslog の方で racoon のログをみると、
DPD のパケットらしいということが確認できました。
syslog の方で <code>#012</code> となっている部分がありますが、
これは rsyslog で改行が変換されたたもので空白として無視すれば良くて、
例えば</p>

<pre><code>Jun  4 17:54:43 vm1 racoon: DEBUG: new cookie:#012831d33d46e20f8e6
Jun  4 17:54:43 vm1 racoon: DEBUG: final encryption key computed:
Jun  4 17:54:43 vm1 racoon: DEBUG: #012932d361f fc62ddc2 6164d513 d40d211f b7364166 232cf490
</code></pre>

<p>というログなら cookie は <code>831d33d46e20f8e6</code> になります。</p>

<p>鍵は <code>932d361ffc62ddc26164d513d40d211fb7364166232cf490</code> になると思ったのですが、
これを
Edit -> Preferences -> Protocols -> ISAKMP -> IKEv1 Decryption Table:
に設定すれば良いはずなのですが、試したところ decrypt されなかったので、
あっているのかどうかはわかりませんでした。
cookie の方は他のログなどで確認できたので、あっているはずです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO ＆ 東海道らぐのイベントに参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-03-lilo-event.html"/>
    <updated>2014-05-03T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-event</id>
    <content type="html"><![CDATA[<p><a href="http://lilo.doorkeeper.jp/events/10790">LILO ＆ 東海道らぐ・オフラインミーティング（2014/05/03）</a> に参加しました。</p>

<p>アンカンファレンス形式で発表したい人が順番に前に出て話をするという形式でした。</p>

<!--more-->


<h2>内容</h2>

<p>大部分は資料を用意しての発表という形式ではなくて、
発表のタイトルもちゃんとあるわけではなかったので、
大雑把にこういう話でしたというメモだけです。</p>

<ul>
<li>自己紹介1</li>
<li>しまださんの東海道らぐの紹介</li>
<li>自分の <code>libpam-google-authenticator</code> の話</li>
<li>自己紹介2 (後から来た人の自己紹介)</li>
<li>えのきさんの LibreOffice の QA などの相談 (ディスカッション)</li>
<li>さとうさんの Raspberry Pi の話</li>
<li>矢吹さんの LXC などの話</li>
<li>自己紹介3 (さらに後から来た人の自己紹介)

<ul>
<li>pandoc がオススメ</li>
</ul>
</li>
<li>としひささんの Raspberry Pi で NTP Stratum 1 Server の話

<ul>
<li><a href="http://tosihisa.postach.io/raspberry-pi-de-ntp-stratum-1-server-wozuo-ru">Raspberry Pi で NTP Stratum-1 Server を作る． | tosihisa&rsquo;s public notebook</a></li>
<li><a href="http://www.pool.ntp.org/scores/60.56.214.78">http://www.pool.ntp.org/scores/60.56.214.78</a></li>
<li><code>ntpdate -quv ntp.netfort.gr.jp</code> で確認できました。</li>
</ul>
</li>
<li>守屋さんの Linux の昔話とかの話</li>
<li>こんどうさんの Flightgear の話</li>
<li>大浦さんの 文字書き起こしツール <a href="http://sourceforge.jp/projects/smart-gs/">SMART-GS</a> の話</li>
<li>さかもとさんのカーネルモジュールの話

<ul>
<li><a href="http://netcat.bandcamp.com/">http://netcat.bandcamp.com/</a></li>
<li><a href="https://github.com/usrbinnc/netcat-cpi-kernel-module">https://github.com/usrbinnc/netcat-cpi-kernel-module</a></li>
</ul>
</li>
</ul>


<h2>感想</h2>

<p>いろいろな内容の話が聞けて面白かったです。</p>

<p>自分が話をするのは、 LILO のサーバー移行の話という案もあったのですが、
それはちゃんとまとめる時間をとってからの方が良さそうと思って、
事前に一度試していたことのあった <code>libpam-google-authenticator</code> を前の晩に試し直しながらデモの順番を考えて、
その話をしました。</p>
]]></content>
  </entry>
  
</feed>
