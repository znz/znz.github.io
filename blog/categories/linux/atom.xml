<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-07-18T19:42:08+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[シェルで glob 結果を事前に確認する方法]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-21-confirm-glob.html"/>
    <updated>2014-06-21T13:16:56+09:00</updated>
    <id>http://blog.n-z.jp/blog/confirm-glob</id>
    <content type="html"><![CDATA[<p><code>rm *~</code> のつもりで <code>rm * ~</code> (半角スペースが混ざっている) のように実行してしまうような間違いをすると危険です。</p>

<p>その対策として <code>tcsh</code> には <code>rmstar</code> という設定があったり
<code>zsh</code> には <code>RM_STAR_SILENT</code> や <code>RM_STAR_WAIT</code> という設定があるのですが、
ちゃんと展開結果を確認してからコマンドを実行する方が安全です。</p>

<p>また <code>rm</code> 以外でも展開結果を事前に確認できると便利なことが多いです。</p>

<!--more-->


<h2>展開結果の確認方法</h2>

<p><code>bash</code> や <code>zsh</code> の一般的なキー割り当てだと <code>C-x g</code> (Control を押しながら x を押して Control を離して g) で展開結果を確認できます。</p>

<p>Tab キーだとコマンドライン中に展開されてしまいますが、
<code>C-x g</code> だと確認だけ出来ます。</p>

<h3>bash の場合</h3>

<p>たとえば <code>bash</code> なら以下のように展開結果が出て、
プロンプトの行が出てきます。</p>

<p>```console bash</p>

<pre><code>$ echo /etc/host*&lt;C-x&gt;g
host.conf    hostname     hosts        hosts.allow  hosts.deny
$ echo /etc/host*
</code></pre>

<p>```</p>

<h3>zsh の場合</h3>

<p><code>zsh</code> ならプロンプトの行の下に展開結果が出てきます。</p>

<p>```console zsh</p>

<pre><code>% echo /etc/host*
/etc/host.conf    /etc/hostname     /etc/hosts        /etc/hosts.allow  /etc/hosts.deny
</code></pre>

<p>```</p>

<h2>Tab キーの動作</h2>

<p>比較のため Tab キーでの動作例も載せておきます。</p>

<h3>bash の場合</h3>

<p>実際には同じ行でしたが、最初の展開結果に置き換わりました。</p>

<p>```console bash</p>

<pre><code>$ echo /etc/host*&lt;tab&gt;
$ echo /etc/host.conf
</code></pre>

<p>```</p>

<h3>zsh の場合</h3>

<p>こちらも実際には同じ行ですが、すべての展開結果に置き換わりました。</p>

<p>```console zsh</p>

<pre><code>% echo /etc/host*&lt;tab&gt;
% echo /etc/host.conf /etc/hostname /etc/hosts /etc/hosts.allow /etc/hosts.deny
</code></pre>

<p>```</p>

<p>glob で指定しにくい一部のファイルだけ除外するなど、展開された方が便利な時は
Tab キーで展開してからコマンドラインを編集して実行することもあります。</p>

<h2>まとめ</h2>

<p>一般的な bash 環境ならどこでも使えて、
複雑な glob の展開結果の確認にも便利なので、
<code>C-x g</code> は非常にオススメです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant の Multi VM 間で IPsec を試した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-04-vagrant-multivm-ipsec-demo.html"/>
    <updated>2014-06-04T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/vagrant-multivm-ipsec-demo</id>
    <content type="html"><![CDATA[<p>正常に IPsec の暗号化通信ができているときの racoon のログなどを確認したかったので、
Vagrant と ansible で
IPsec で通信できる Multi VM 環境を作ってみました。</p>

<p>playbook は
<a href="https://github.com/znz/ansible-playbook-ipsec-demo">https://github.com/znz/ansible-playbook-ipsec-demo</a>
で公開しています。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>ホスト OS : Mac OS X 10.9.3</li>
<li>VirtualBox 4.3.12</li>
<li>Vagrant 1.6.3</li>
<li>ansible 1.6.2</li>
<li>ゲスト OS : Ubuntu 14.04 &times; 2</li>
</ul>


<p>Ubuntu は <a href="https://cloud-images.ubuntu.com/vagrant/trusty/current/">https://cloud-images.ubuntu.com/vagrant/trusty/current/</a> のイメージを使ったので、
daily build の状態によっては動作が変わっているかもしれません。</p>

<h2>ホストオンリーネットワーク</h2>

<p>使った後は</p>

<ul>
<li>vboxnet1 (192.168.50.1/24)</li>
<li>vboxnet2 (192.168.11.1/24)</li>
<li>vboxnet3 (192.168.12.1/24)</li>
</ul>


<p>が勝手に増えているので、不要なら設定で消しておくと良いと思います。</p>

<p>ネットワークとしては以下のように 192.168.50.0/24 の部分で IPsec 接続をして、
192.168.11.11 と 192.168.12.12 をつなぐ、という感じにしています。
デフォルトの eth0 は外部への接続用としてそのままにしています。</p>

<p>```
192.168.11.11 (vm1:eth2)</p>

<pre><code>   |
</code></pre>

<p>192.168.50.11 (vm1:eth1)</p>

<pre><code>   |
</code></pre>

<p>192.168.50.12 (vm2:eth1)</p>

<pre><code>   |
</code></pre>

<p>192.168.12.12 (vm2:eth2)
```</p>

<h2>準備</h2>

<p>Usage に書いてあるように準備をしておきます。
先日作った <code>ja_jp</code> role は git submodule にしているので、</p>

<p><code>
% git submodule init
% git submodule update
</code></p>

<p>で取得する必要があります。</p>

<h2>試し方</h2>

<p><code>vagrant up</code>
すると
<code>/etc/ipsec-tools.conf</code>
と
<code>/etc/racoon/racoon.conf</code>
に設定が入っている状態になっているので、
始点アドレスを指定して
<code>ipsec-tools.conf</code>
に設定した経路を通るようにパケットを送ると
IPsec VPN がつながります。</p>

<p><code>ping</code> コマンドのように直接始点アドレスを指定するオプションがない場合は
<code>ping -I eth2 192.168.12.12</code> のように network interface で指定すれば
良いようです。</p>

<h2>動作確認</h2>

<p>以下のコマンドの出力が接続前後で変わることが確認できます。</p>

<ul>
<li><code>racoonctl -l show-sa isakmp</code></li>
<li><code>racoonctl -l show-sa ipsec</code></li>
<li><code>setkey -D</code></li>
</ul>


<p>racoon のログが <code>/var/log/syslog</code> に大量に出ているのを確認できます。
(<code>racoon.conf</code> で <code>log debug</code> にしているため)</p>

<h2>tshark でパケットの確認</h2>

<p><code>tshark</code> パッケージをインストールした後、
<code>sudo dpkg-reconfigure wireshark-common</code>
で一般ユーザーでも実行を許可するようにして、
実行を許可するユーザーを <code>wireshark</code> に追加します。</p>

<p>グループの追加を反映するためにログインし直すと、
<code>tshark -i eth1 -V 'port 500'</code>
などでパケットの確認ができるようになります。</p>

<p>暗号化されていて詳細はわかりませんが、
UDP の 500 番ポートで Informational のパケットが流れていることが確認できました。</p>

<p>GUI の wireshark の方では
<a href="http://ask.wireshark.org/questions/12019/how-can-i-decrypt-ikev1-andor-esp-packets">http://ask.wireshark.org/questions/12019/how-can-i-decrypt-ikev1-andor-esp-packets</a>
の方法で暗号化の解除もできるようです。</p>

<p>syslog の方で racoon のログをみると、
DPD のパケットらしいということが確認できました。
syslog の方で <code>#012</code> となっている部分がありますが、
これは rsyslog で改行が変換されたたもので空白として無視すれば良くて、
例えば</p>

<p><code>
Jun  4 17:54:43 vm1 racoon: DEBUG: new cookie:#012831d33d46e20f8e6
Jun  4 17:54:43 vm1 racoon: DEBUG: final encryption key computed:
Jun  4 17:54:43 vm1 racoon: DEBUG: #012932d361f fc62ddc2 6164d513 d40d211f b7364166 232cf490
</code></p>

<p>というログなら cookie は <code>831d33d46e20f8e6</code> になります。</p>

<p>鍵は <code>932d361ffc62ddc26164d513d40d211fb7364166232cf490</code> になると思ったのですが、
これを
Edit &ndash;> Preferences &ndash;> Protocols &ndash;> ISAKMP &ndash;> IKEv1 Decryption Table:
に設定すれば良いはずなのですが、試したところ decrypt されなかったので、
あっているのかどうかはわかりませんでした。
cookie の方は他のログなどで確認できたので、あっているはずです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO ＆ 東海道らぐのイベントに参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-03-lilo-event.html"/>
    <updated>2014-05-03T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-event</id>
    <content type="html"><![CDATA[<p><a href="http://lilo.doorkeeper.jp/events/10790">LILO ＆ 東海道らぐ・オフラインミーティング（2014/05/03）</a> に参加しました。</p>

<p>アンカンファレンス形式で発表したい人が順番に前に出て話をするという形式でした。</p>

<!--more-->


<h2>内容</h2>

<p>大部分は資料を用意しての発表という形式ではなくて、
発表のタイトルもちゃんとあるわけではなかったので、
大雑把にこういう話でしたというメモだけです。</p>

<ul>
<li>自己紹介1</li>
<li>しまださんの東海道らぐの紹介</li>
<li>自分の <code>libpam-google-authenticator</code> の話</li>
<li>自己紹介2 (後から来た人の自己紹介)</li>
<li>えのきさんの LibreOffice の QA などの相談 (ディスカッション)</li>
<li>さとうさんの Raspberry Pi の話</li>
<li>矢吹さんの LXC などの話</li>
<li>自己紹介3 (さらに後から来た人の自己紹介)

<ul>
<li>pandoc がオススメ</li>
</ul>
</li>
<li>としひささんの Raspberry Pi で NTP Stratum 1 Server の話

<ul>
<li><a href="http://tosihisa.postach.io/raspberry-pi-de-ntp-stratum-1-server-wozuo-ru">Raspberry Pi で NTP Stratum-1 Server を作る． | tosihisa&rsquo;s public notebook</a></li>
<li><a href="http://www.pool.ntp.org/scores/60.56.214.78">http://www.pool.ntp.org/scores/60.56.214.78</a></li>
<li><code>ntpdate -quv ntp.netfort.gr.jp</code> で確認できました。</li>
</ul>
</li>
<li>守屋さんの Linux の昔話とかの話</li>
<li>こんどうさんの Flightgear の話</li>
<li>大浦さんの 文字書き起こしツール <a href="http://sourceforge.jp/projects/smart-gs/">SMART-GS</a> の話</li>
<li>さかもとさんのカーネルモジュールの話

<ul>
<li><a href="http://netcat.bandcamp.com/">http://netcat.bandcamp.com/</a></li>
<li><a href="https://github.com/usrbinnc/netcat-cpi-kernel-module">https://github.com/usrbinnc/netcat-cpi-kernel-module</a></li>
</ul>
</li>
</ul>


<h2>感想</h2>

<p>いろいろな内容の話が聞けて面白かったです。</p>

<p>自分が話をするのは、 LILO のサーバー移行の話という案もあったのですが、
それはちゃんとまとめる時間をとってからの方が良さそうと思って、
事前に一度試していたことのあった <code>libpam-google-authenticator</code> を前の晩に試し直しながらデモの順番を考えて、
その話をしました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[installコマンドでコマンド数を減らす]]></title>
    <link href="http://blog.n-z.jp/blog/2014-02-14-install.html"/>
    <updated>2014-02-14T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/install</id>
    <content type="html"><![CDATA[<p>mkdir とか touch とか chown とか chmod とか個別に実行しなくても
install コマンドだけでまとめて出来るという話です。</p>

<!--more-->


<h2>問題例</h2>

<p>Dockerfile の RUN などが典型的な例ですが、他でも例えば
<code>mkdir -p /home/foo/.ssh; chown foo /home/foo/.ssh; chmod 0700 /home/foo/.ssh</code>
のようなことをすることがあると思います。</p>

<p>特に Dockerfile の場合は RUN ごとにイメージがたまっていくこともあって、
<code>;</code> や <code>&amp;&amp;</code> でつなげて単独の RUN にまとめて書くことも多いと思います。</p>

<h2>install でディレクトリを作る</h2>

<p>たとえば</p>

<p><code>
 mkdir -p /home/foo/.ssh
 chown foo /home/foo/.ssh
 chgrp users /home/foo/.ssh
 chmod 0700 /home/foo/.ssh
</code></p>

<p>なら
<code>install -o foo -g users -m 0700 -d /home/foo/.ssh</code>
にまとめられます。</p>

<p><code>install -o foo -g users -m 0700 -d /home/foo/.ssh /home/foo/tmp</code>
のように複数ディレクトリを同時に作成することも出来ます。</p>

<p>2014-02-16 追記:
<a href="http://qiita.com/znz/items/fee7c42587e995566a69#comment-a08bc7770a5fcdf902a0">Qiita の方のコメント</a>
で
<code>sudo -u user mkdir -p -m 700 /home/user/.ssh</code>
というやり方もあるという話がありました。</p>

<h2>install でファイルをコピーする</h2>

<p>たとえば</p>

<p><code>
 cp /path/from/*.txt /path/to/
 chown foo /path/to/*.txt
 chgrp users /path/to/*.txt
 chmod 0644 /path/to/*.txt
</code></p>

<p>なら
<code>install -o foo -g users -m 0644 /path/from/*.txt /path/to/</code>
にまとめられます。</p>

<p><code>install -o foo -g users -m 0644 -t /path/to /path/from/*.txt</code>
のようにディレクトリを先に書くことも出来ます。</p>

<p>1ファイルだけなら
<code>install -o foo -g users -m 0644  /path/from/foo.txt /path/to/bar.txt</code>
のようにコピー先のファイル名を指定することも出来ます。</p>

<h2>まとめ</h2>

<p>たくさん <code>chown</code> や <code>chmod</code> を実行していることがあれば、
<code>install</code> コマンドでまとめられないか検討してみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[postfixとmilter-managerの設定をした]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-23-postfix-and-milter-manager.html"/>
    <updated>2013-11-23T21:25:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/postfix-and-milter-manager</id>
    <content type="html"><![CDATA[<p>Debian 7.2 (amd64) のサーバーにメールサーバーの設定をしたところ、
<a href="http://milter-manager.sourceforge.net/">milter-manager</a>
関連と gmail への IPv6 経由でのメール送信関連でちょっとひっかかりましたが、
すぐに解決できました。</p>

<!--more-->


<h2>milter-manager の話</h2>

<p>まず <code>milter-manager</code> は
<a href="http://milter-manager.sourceforge.net/reference/ja/install-to-debian.html">Debianへインストール &ndash; milter manager</a>
の手順通りに設定してみたのですが、確認のところで、</p>

<p><code>
 $ sudo -u postfix milter-test-server -s unix:/var/spool/postfix/milter-manager/milter-manager.sock
 status: temporary-failure
 elapsed-time: 0.007781 seconds
</code></p>

<p>のように <code>temporary-failure</code> になりました。
そこで依存しているデーモンを調べてみたところ、
<code>clamd</code> が起動していなかったので、</p>

<pre><code>sudo service clamav-daemon start
</code></pre>

<p>で起動した後、</p>

<pre><code>sudo service clamav-milter restart
</code></pre>

<p>で clamav-milter も再起動したら</p>

<pre><code>status: accept
</code></pre>

<p>になりました。</p>

<p>後で気付いたので、最初のインストール時のメッセージを
ちゃんと確認できていないのですが、
<code>/etc/init.d/clamav-daemon</code> の <code>start</code>
の処理に cvd ファイルなどの存在をチェックして起動を止める処理があるので、
<code>freshclam</code> の処理を待ってから起動しないとダメだったようです。</p>

<h2>gmail と IPv6 の話</h2>

<p><a href="http://ya.maya.st/d/201308c.html#s20130822_1">gmail の逆引き制限</a>
の人と同じように IPv6 で逆引き必須にするのは否定的なのですが、
それはおいといて、現実問題として送信できないのは困るので、
<code>smtp_address_preference = ipv4</code> の設定を追加しました。</p>

<p>その設定をする前にテストメールを送ったら、
以下のようなエラーメールが返ってきて、
エラーメッセージの中の URL が
<a href="http://www.postfix-jp.info/ML/arc-2.5/msg00237.html">以前ひっかかったとき</a>
とは変わっているということに気付きました。</p>

<p>```
&lt;自分のアドレス@gmail.com> (expanded from &lt;自分@あるサーバー>): host</p>

<pre><code>gmail-smtp-in.l.google.com[2607:f8b0:4002:c01::1a] said: 550-5.7.1
[2401:xxxx:xxx:xxxx:xxx:xxx:xxx:xxx      16] Our system has detected
550-5.7.1 that this message does not meet IPv6 sending guidelines regarding
PTR 550-5.7.1 records and authentication. Please review 550-5.7.1
https://support.google.com/mail/?p=ipv6_authentication_error for more 550
5.7.1 information. e2si14078426yhm.125 - gsmtp (in reply to end of DATA
command)
</code></pre>

<p>```</p>

<h2>余談</h2>

<p>以前はメールサーバーの spam 対策の設定は秘伝のたれ状態で
だんだんメンテナンスが難しくなってしまっていましたが、
spam 対策は milter-manager だったり、
firewall は <a href="packages.debian.org/ufw">ufw</a> だったり、
いろいろと共通で使えるものが増えてきて楽になってきたように思います。</p>
]]></content>
  </entry>
  
</feed>
