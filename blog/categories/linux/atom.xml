<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2015-05-09T23:47:16+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LILO ＆ 東海道らぐ・オフラインミーティング（2015/05/03）に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2015-05-03-lilo-tokaidolug.html"/>
    <updated>2015-05-03T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-tokaidolug</id>
    <content type="html"><![CDATA[<p><a href="https://lilo.doorkeeper.jp/events/23873" title="LILO ＆ 東海道らぐ・オフラインミーティング（2015/05/03） - LILO | Doorkeeper">LILO ＆ 東海道らぐ・オフラインミーティング（2015/05/03） - LILO | Doorkeeper</a>
に参加しました。</p>

<p>前回と同じくアンカンファレンス形式でした。</p>

<!--more-->


<h2>メモ</h2>

<p>今回のメモです。</p>

<ul>
<li><a href="http://lilo.linux.or.jp/" title="Welcome to LILO">Welcome to LILO</a> では日付が間違っている</li>
<li>ハッシュタグ: <code>#lilo_jp</code> <code>#東海道らぐ</code></li>
<li>自己紹介から</li>
<li>k-of 11/6,7</li>
<li>おーぷん万葉</li>
<li><a href="https://github.com/hashimom/Izumo">https://github.com/hashimom/Izumo</a> Canna のフォーク</li>
<li>GuruPlug Server</li>
<li>4月に ibus-mozc サポート終了</li>
<li>IzumoWebSock プロトコル (JSON + WebSocket)</li>
<li>Canna は K&amp;R なソースコード</li>
<li><a href="https://github.com/hashimom/Izumo/blob/bc04c5efad8fc462fa6730823566126edef36c69/server/comm.h">https://github.com/hashimom/Izumo/blob/bc04c5efad8fc462fa6730823566126edef36c69/server/comm.h</a> などの謎の <code>pro(())</code></li>
<li>M17N</li>
<li>ASUS U38N</li>
<li>Linux Mint</li>
<li>M17N には ibus 推奨</li>
<li>ibus-m17n パッケージ</li>
<li>UTF-8 の環境なら同様にできるはず</li>
<li>Plamo はまだ euc-jp らしい</li>
<li>アラトゥエ・コミュニティの、先生きのこり問題</li>
<li>around twenty</li>
<li>iPhone でプレゼン</li>
<li><a href="http://railsgirls.jp/" title="Rails Girls - Japanese">Rails Girls - Japanese</a></li>
<li>Diversity</li>
<li><a href="http://rubykaigi.org/2014/presentation/S-HarukaIwao" title="RubyKaigi 2014 | RailsGirls: Not Only For Girls">RubyKaigi 2014 | RailsGirls: Not Only For Girls</a></li>
<li>「時代が変わり、常識も変わる」</li>
<li>「楽しいか、楽しくないか」が重要</li>
<li>LILO のインストール大会の話</li>
<li>今時のチープなノートPC HP Stream 11 で Xubuntu を動かす</li>
<li>WIMBoot だとリカバリパーティションっぽいものは消してはいけない</li>
<li>謎PCとのつきあい方</li>
<li>opencocon</li>
<li>HP Thin-Client 2533t</li>
<li>VIA C7 1GHz</li>
<li>Windows XP Embedded</li>
<li>Android Nexus7 で Linux を色々と遊んでみよう</li>
<li>Mikutter</li>
<li>Debian Noroot</li>
<li>LibreOffice</li>
<li>root 化</li>
<li>Debian Kit と Complete Linux</li>
<li>CyanobenMod</li>
<li>Firefox OS</li>
<li>Ubuntu Touch</li>
<li>OSC京都、香港OSC、台湾OSDC</li>
<li>Raspberry PI とつないでみました <a href="http://www.kuzuore.com/misc/documents/lilo_tokaido/20150503/raspi_buzzer.pdf">http://www.kuzuore.com/misc/documents/lilo_tokaido/20150503/raspi_buzzer.pdf</a> <a href="http://www.kuzuore.com/misc/documents/lilo_tokaido/20150503/raspi_buzzer.odp">http://www.kuzuore.com/misc/documents/lilo_tokaido/20150503/raspi_buzzer.odp</a></li>
<li>サウンドジェネレーター6 DNGR-G48 <a href="http://prod.kyohritsu.com/DNGR-G48.html">http://prod.kyohritsu.com/DNGR-G48.html</a></li>
<li><a href="https://github.com/sato-makoto/Raspi_LED/tree/master/wonder_snd">https://github.com/sato-makoto/Raspi_LED/tree/master/wonder_snd</a></li>
<li>LibreOffice の UX と QA のあれこれ</li>
<li>次は 4.5 ではなく 5.0</li>
<li>デザインコンテスト中</li>
<li><a href="https://wiki.documentfoundation.org/BugHunting_Session_5.0.0.0">https://wiki.documentfoundation.org/BugHunting_Session_5.0.0.0</a> 5/22-5/24</li>
<li>何をやるかはおまかせ</li>
<li>LibreOffice Online</li>
<li>Qt + LibreOffice + ibus で問題が起きるらしいという話</li>
<li><a href="http://www.ospn.jp/osc2015-kyoto/" title="オープンソースカンファレンス2015 Kansai@Kyoto - オープンソースの文化祭！">オープンソースカンファレンス2015 Kansai@Kyoto - オープンソースの文化祭！</a> 8/7-8/8</li>
<li>GuruPlug Server のデモ</li>
<li><a href="http://www.jspnet.co.jp/guruplug/tips.html#tips002" title="JTAGを利用しない接続方法">JTAGを利用しない接続方法</a></li>
<li><a href="http://www.jspnet.co.jp/guruplug/tips.html#tips013" title="LEDを操作してみよう">LEDを操作してみよう</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[さくらのVPSにdokkuをdebで入れてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2015-04-20-sakura-vps-dokku.html"/>
    <updated>2015-04-20T21:54:51+09:00</updated>
    <id>http://blog.n-z.jp/blog/sakura-vps-dokku</id>
    <content type="html"><![CDATA[<p>さくらの VPS を新しく借りて初期設定をして、
dokku 0.3.17 を Debian パッケージで入れてみたので、そのメモです。</p>

<!--more-->


<h2>Ubuntu 14.04 インストール</h2>

<p><a href="https://help.sakura.ad.jp/app/answers/detail/a_id/2403" title="カスタムOSインストールガイド - Ubuntu 12.04/14.04">カスタムOSインストールガイド - Ubuntu 12.04/14.04</a>
を参考にしてインストールしました。</p>

<h2>etckeeper インストール</h2>

<p>etckeeper だけをインストールすると bzr が一緒に入って使われてしまうので、
git と一緒にインストールすることで bzr が入らないようにします。</p>

<pre><code>sudo aptitude install git etckeeper
</code></pre>

<p>次に etckeeper.conf を編集して <code>VCS="bzr"</code> の代わりに <code>VCS="git"</code> を有効にします。
ついでにコミットするときに差分をみたいので <code>GIT_COMMIT_OPTIONS="-v"</code> を設定しました。</p>

<pre><code>EDITOR=vi sudoedit /etc/etckeeper/etckeeper.conf
</code></pre>

<p>パッケージをインストールしたときに自動で初期コミットされていないので、
手動で初期コミットをしておきます。</p>

<pre><code>sudo etckeeper init
sudo etckeeper commit "Initial commit"
</code></pre>

<p>git なので <code>git gc</code> もしておきます。
<code>etckeeper vcs コマンド</code> で <code>/etc</code> ディレクトリで <code>git コマンド</code> を実行するのと同じ意味になります。</p>

<pre><code>sudo etckeeper vcs gc
</code></pre>

<h2>ufw を有効にする</h2>

<p>firewall 設定のために ufw を有効にします。</p>

<pre><code>sudo ufw enable
sudo etckeeper commit "Enable ufw"
</code></pre>

<h2>ssh を許可</h2>

<p>初期設定のために 22 番ポートを許可します。</p>

<pre><code>sudo ufw allow 22/tcp
</code></pre>

<p>リモートから ssh で入って <code>~/.ssh/authorized_keys</code> の設置などをします。</p>

<p>次にポート番号の変更や
<code>PasswordAuthentication no</code> への設定変更、
<code>PermitRootLogin</code> が <code>yes</code> 以外になっていることの確認、
<code>ChallengeResponseAuthentication no</code> の確認、
<code>AllowUsers</code> の追加をしました。</p>

<pre><code>sudo ufw delete allow 22/tcp
EDITOR=vi sudoedit /etc/ssh/sshd_config
sudo service ssh restart
sudo etckeeper commit "Setup sshd"
</code></pre>

<h2><code>~/.ssh/config</code> 設定</h2>

<p>クライアント側の <code>~/.ssh/config</code> に以下のような設定をして、
ポート番号などの指定を省略できるようにします。</p>

<p>ついでに後で使う dokku 用の設定も追加しました。</p>

<pre><code>Host サーバーのホスト名
    Hostname サーバーのIPアドレス
    User 初期ユーザー名
    Port 変更したポート番号
    IdentityFile ~/.ssh/id_rsa
    IdentitiesOnly yes
Host dokku-vps
    Hostname サーバーのIPアドレス
    User dokku
    Port 変更したポート番号
    IdentityFile ~/.ssh/id_rsa
    IdentitiesOnly yes
    RequestTTY yes
</code></pre>

<h2>nano を purge</h2>

<p>vi に慣れていて、
nano は使いにくいと感じているので、
purge しました。</p>

<pre><code>sudo aptitude purge nano
</code></pre>

<h2>IPv6 設定</h2>

<p>interfaces ファイルに以下の inet6 の設定を追加します。</p>

<pre><code>iface eth0 inet6 static
    address コントロールパネルで確認できるIPv6アドレス
    netmask 64
    gateway fe80::1
    accept_ra 0
    autoconf 0
    privext 0
    dns-nameservers コントロールパネルで確認できるDNS
</code></pre>

<p>編集して設定を反映して疎通確認をしました。</p>

<pre><code>sudoedit /etc/network/interfaces
sudo ifdown eth0 &amp;&amp; sudo ifup eth0
ping6 -c 3 www.kame.net
</code></pre>

<p><code>ifup</code> のときに <code>Waiting for DAD... Done</code> と出ましたが、
IPv6 の Duplicate Address Detection が動いているだけのようなので
問題はなさそうでした。</p>

<h2>dokku の Debian パッケージインストール</h2>

<p>dokku 0.3.18 からは Debian パッケージでのインストールがデフォルトになると
<a href="http://progrium.viewdocs.io/dokku/getting-started/install/debian" title="Debian Package Installation Notes">Debian Package Installation Notes</a>
に書いてあったので、この手順を参考にしてインストールしました。</p>

<pre><code>wget https://get.docker.io/gpg
sudo apt-key add gpg
rm gpg
wget https://packagecloud.io/gpg.key
sudo apt-key add gpg.key
rm gpg.key
echo "deb http://get.docker.io/ubuntu docker main" | sudo tee /etc/apt/sources.list.d/docker.list
echo "deb https://packagecloud.io/dokku/dokku/ubuntu/ trusty main" | sudo tee /etc/apt/sources.list.d/dokku.list
sudo apt-get update
sudo apt-get install dokku
</code></pre>

<p>なぜか
<code>Importing buildstep into docker (around 5 minutes)</code>
で 5 分どころではなく 1 時間ぐらいかかったので、
他のことをしながらのんびり待つ必要がありました。</p>

<h2>初期設定用ポート開放</h2>

<p>いきなり開放してしまうと Dokku Setup を勝手に実行されてしまう可能性があるので、
まず <code>SSH_CLIENT</code> 環境変数でサーバーに接続している自分のグローバル IP アドレスを確認して、
その IP アドレスのみから HTTP を許可しました。</p>

<pre><code>env | grep SSH
sudo ufw allow proto tcp from 接続元IPアドレス to any port 80
</code></pre>

<p>そして <code>http://サーバーのホスト名/</code> を開いて Dokku Setup を表示しました。</p>

<p>空欄になっていた <code>Public Key</code> には自分の <code>~/.ssh/id_rsa.pub</code> を貼付けました。
<code>Hostname</code> には IPv6 アドレスが表示されていたので、
<code>xip.io</code> (IP アドレスのサブドメインで IP アドレスを返してくれるサービス) を使って
<code>サーバーのIPv4アドレス.xip.io</code> (例えば <code>192.0.2.1.xip.io</code> のような感じ) を設定しました。
<code>Use virtualhost naming for apps</code> にチェックを入れて
<code>Finish Setup</code> を押しました。
ブラウザーは <code>http://progrium.viewdocs.io/dokku/application-deployment</code> にリダイレクトされました。</p>

<p>サーバー側では
<code>/home/dokku</code> 以下に設定が保存される他に、
<code>/etc/init/dokku-installer.conf</code> と <code>/etc/nginx/conf.d/dokku-installer.conf</code> が削除されるので、
<code>etckeeper commit</code> しました。</p>

<pre><code>sudo etckeeper commit "Finish Dokku Setup"
</code></pre>

<h2>HTTP ポート開放</h2>

<p>初期設定が終了したので、初期設定用のルールを削除して、
一般に開放するように変更しました。</p>

<pre><code>sudo ufw delete allow proto tcp from 接続元IPアドレス to any port 80
sudo ufw allow 80/tcp
</code></pre>

<h2>dokku の ssh を許可</h2>

<p><code>sshd_config</code> に <code>AllowUsers dokku</code> を追加しました。</p>

<pre><code>sudoedit /etc/ssh/sshd_config
sudo service ssh restart
sudo etckeeper commit "Allow ssh to dokku"
</code></pre>

<h2>ssh の接続確認</h2>

<pre><code>ssh dokku-vps
</code></pre>

<p>で dokku のヘルプが表示されるのを確認しておきます。</p>

<h2>サンプルアプリのデプロイ</h2>

<p>最小限のサンプルとして node-js-sample をデプロイします。</p>

<pre><code>git clone https://github.com/heroku/node-js-sample
cd node-js-sample
git remote add dokku-vps dokku-vps:node-js-app
git push dokku-vps master
</code></pre>

<p><code>http://node-js-app.サーバーのIPアドレス.xip.io/</code> を開いて
<code>Hello World!</code> と表示されたら成功です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dokku 0.3.17 に Ruby on Rails アプリをデプロイしてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2015-04-18-dokku.html"/>
    <updated>2015-04-18T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dokku</id>
    <content type="html"><![CDATA[<p>dokku がいつの間にか deis がスポンサーになって開発が活発になって 0.3 系がリリースされていたので、
0.3.17 に Ruby on Rails アプリをデプロイしてみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>dokku 0.3.17</li>
<li>docker 1.5.0, 1.6.0</li>
</ul>


<h2>前準備</h2>

<p>何度か繰り返す予定ならあらかじめ、
次の初回起動の手順の <code>vagrant up</code> の前に、
Makefile の <code>PREBUILT_STACK_URL</code> を
Vagrantfile の <code>PREBUILT_STACK_URL</code> で
チェックしている場所にダウンロードしておくと
ダウンロード時間を短縮できます。</p>

<pre><code>curl -L -o stack.tgz https://github.com/progrium/buildstep/releases/download/2014-12-16/2014-12-16_42bd9f4aab.tar.gz
</code></pre>

<h2>初回起動</h2>

<p>Vagrant 環境で試しました。</p>

<pre><code>git clone https://github.com/progrium/dokku
cd dokku
vagrant up
</code></pre>

<p>vagrant の中では <code>/vagrant</code> の他に <code>/root/dokku</code> に <code>dokku</code> ディレクトリがマウントされています。</p>

<h2>初期設定</h2>

<p>Vagrant でポートフォワーディングされている <code>http://localhost:8080/</code> か
ホストオンリーアダプタで接続されている <code>http://10.0.0.2/</code> を開きます。
Dokku Setup が表示されるので、そこで初期設定をします。</p>

<p><code>Public Key</code> に自分の <code>~/.ssh/id_rsa.pub</code> が入っているのを確認します。
必要なら他の公開鍵に変更します。</p>

<p>Hostname Configuration の方は Hostname に自分がインターネットに接続しているグローバル IP アドレスが表示されているので、
<code>dokku.me</code> に変更して、
<code>Use virtualhost naming for apps</code> にチェックを入れます。
<code>dokku.me</code> は dokku の作者が運用していると思われる、すべてのサブドメインで 127.0.0.1 を返してくれるサービスです。</p>

<p><code>Finish Setup</code> を押すと初期設定は終了して
<code>http://progrium.viewdocs.io/dokku/application-deployment</code>
に飛ばされます。</p>

<p>ちなみに、初期設定用のサーバーの実体は
<code>contrib/dokku-installer.rb</code>
にあるようです。</p>

<h2>ssh の設定</h2>

<p><code>ssh dokku</code> や <code>ssh dokku.me</code> で接続できるように
<code>~/.ssh/config</code> に以下のような設定を追加しました。
<code>User</code>, <code>Hostname</code>, <code>Port</code>, <code>RequestTTY</code> 以外の設定はお好みで良いと思います。</p>

<pre><code>Host dokku dokku.me
    User dokku
    HostName 10.0.0.2
    Port 22
    UserKnownHostsFile /dev/null
    StrictHostKeyChecking no
    PasswordAuthentication no
    IdentityFile ~/.ssh/id_rsa
    IdentitiesOnly yes
    LogLevel FATAL
    RequestTTY yes
    Ciphers arcfour128,arcfour256
</code></pre>

<h2>サンプルアプリをデプロイ</h2>

<p><a href="http://progrium.viewdocs.io/dokku/application-deployment">http://progrium.viewdocs.io/dokku/application-deployment</a> に書いてある node.js のサンプルアプリをデプロイします。</p>

<pre><code>git clone https://github.com/heroku/node-js-sample
cd node-js-sample
git remote add dokku dokku@dokku.me:node-js-app
git push dokku master
</code></pre>

<p><code>http://node-js-app.dokku.me:8080/</code> を開いて「Hello World!」が見えれば成功です。</p>

<h2>PostgreSQL プラグインをインストール</h2>

<p>今回は
<a href="http://progrium.viewdocs.io/dokku/plugins" title="Plugins">Plugins</a>
で「Compatible with 0.3.16」と書いてある
<a href="https://github.com/Flink/dokku-psql-single-container" title="PostgreSQL (single container)">PostgreSQL (single container)</a>
を使いました。</p>

<p><code>vagrant ssh</code> で入って以下を実行しました。</p>

<pre><code>sudo git clone https://github.com/Flink/dokku-psql-single-container /var/lib/dokku/plugins/psql-sc
sudo dokku plugins-install
</code></pre>

<p><code>postgres:9.3</code> のイメージをダウンロードするので、しばらく時間がかかりました。</p>

<h2>Rails のサンプルをデプロイ</h2>

<p>試行錯誤の結果、シンプルな手順は以下のようになりました。</p>

<pre><code>ssh dokku apps:create ruby-rails-app
ssh dokku psql:create ruby-rails-app
git clone https://github.com/heroku/ruby-rails-sample
cd ruby-rails-sample
git remote add dokku dokku@dokku.me:ruby-rails-app
git push dokku master
</code></pre>

<p><code>http://ruby-rails-app.dokku.me:8080/</code> を開いて <code>Hello World</code> と現在時刻が表示されれば成功です。</p>

<p>今回利用したプラグインでは <code>psql:create</code> だけで、別途 <code>link</code> という手順は不要でした。</p>

<h2>データベースの migration の実行</h2>

<p>このサンプルアプリではデータベースに接続するだけで使っていないので、
必須ではないのですが <code>rake db:migrate</code> も実行しました。</p>

<pre><code>ssh dokku run ruby-rails-app rake db:migrate
</code></pre>

<h2>タイムゾーン設定</h2>

<p>現在時刻が UTC で表示されていたので、
JST に変更しました。</p>

<pre><code>ssh dokku config:set ruby-rails-app TZ=Asia/Tokyo
</code></pre>

<p>設定変更後に自動で再起動されるので、
<code>http://ruby-rails-app.dokku.me:8080/</code> を開いて、
現在時刻が日本時間で表示されれば成功です。</p>

<h2>CHECKS 作成</h2>

<p>デフォルトだと
<a href="http://progrium.viewdocs.io/dokku/application-deployment#user-content-zero-downtime-deploy" title="Zero downtime deploy">Zero downtime deploy</a>
の簡易チェックで 35 秒待つようになっているので、
<code>CHECKS</code> ファイルを作成して待ち時間を短くして、
正常なときだけデプロイできるようにしてみました。</p>

<pre><code>vi CHECKS
git add CHECKS
git commit
git push dokku master
</code></pre>

<p>CHECKS ファイルの内容は以下の通りです。</p>

<pre><code>/   RubyRailsSample
</code></pre>

<p>左側がチェックする URL で右側がその URL を表示したときに含まれる文字列です。
ここではタイトルの文字列を指定してみました。</p>

<h2>アプリケーションの削除</h2>

<p><code>apps:destroy</code> で削除できます。
確認のため、もう一度アプリ名を入力する必要があります。</p>

<pre><code>% ssh dokku apps:destroy node-js-app
 !    WARNING: Potentially Destructive Action
 !    This command will destroy node-js-app (including all add-ons).
 !    To proceed, type "node-js-app"

&gt; node-js-app
Destroying node-js-app (including all add-ons)
No database configured for node-js-app
Connection to 10.0.0.2 closed.
</code></pre>

<p><code>ruby-rails-app</code> の削除も試してみたところ、
データベースも一緒に削除されるので、
別途 <code>psql:delete</code> を実行する必要はありませんでした。</p>

<h2>デプロイ時に ruby のダウンロードでタイムアウトする場合</h2>

<p><a href="http://www.slideshare.net/snumano/20150101-dokku-alt" title="20150101勉強会 dokku alt">20150101勉強会 dokku alt</a>
の16ページの手順5を参考にしてタイムアウトをのばすと良いようです。</p>

<pre><code>ssh dokku config:set ruby-rails-app CURL_TIMEOUT=120
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[owncloud-client が conflict した話]]></title>
    <link href="http://blog.n-z.jp/blog/2015-01-29-owncloud-client.html"/>
    <updated>2015-01-29T09:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/owncloud-client</id>
    <content type="html"><![CDATA[<p>Debian 7 に <a href="https://owncloud.org/install/#desktop">ownCloud 公式の Desktop Client</a> を入れていたら、
なぜか <code>owncloud-client</code> の 1.7.1 から 1.7.1 への更新が発生して <code>libqtkeychain0</code> と conflict していたので、
<code>libqtkeychain0</code> をダウングレードして解決しました。</p>

<!--more-->


<h2>現象</h2>

<p>このように競合が検出されました。</p>

<pre><code>$ sudo aptitude full-upgrade -DV
以下のパッケージが更新されます:
  owncloud-client{b} [1.7.1 -&gt; 1.7.1] (競: libqtkeychain0)
更新: 1 個、新規インストール: 0 個、削除: 0 個、保留: 0 個。
700 k バイトのアーカイブを取得する必要があります。展開後に 0  バイトのディスク領域が新たに消費されます。
以下のパッケージには満たされていない依存関係があります:
 owncloud-client : 競合: libqtkeychain0 (= 0.20140128) [0.20140128 が既にインストール済みです]
以下のアクションでこれらの依存関係の問題は解決されます:

     以下のパッケージを削除する:
1)     libowncloudsync0
2)     libqtkeychain0
3)     owncloud-client
4)     owncloud-client-l10n



この解決方法を受け入れますか? [Y/n/q/?]q
</code></pre>

<h2>状況</h2>

<p><code>apt-cache show</code> でみてみると <code>Conflicts: libqtkeychain0 (= 0.20140128)</code> と明示されていました。</p>

<pre><code>$ apt-cache show owncloud-client
Package: owncloud-client
Version: 1.7.1
Architecture: amd64
Maintainer: Markus Rex &lt;msrex@owncloud.com&gt;
Installed-Size: 1521
Depends: libc6 (&gt;= 2.4), libgcc1 (&gt;= 1:4.1.1), libneon27, libowncloudsync0 (= 1.7.1), libqt4-dbus (&gt;= 4:4.5.3), libqt4-network (&gt;= 4:4.5.3), libqt4-sql (&gt;= 4:4.5.3), libqt4-xml (&gt;= 4:4.5.3), libqt4-xmlpatterns (&gt;= 4:4.5.3), libqtcore4 (&gt;= 4:4.8.0), libqtgui4 (&gt;= 4:4.7.0~beta1), libqtkeychain0, libqtwebkit4 (&gt;= 2.2.0), libsqlite3-0 (&gt;= 3.5.9), libstdc++6 (&gt;= 4.4.0), owncloud-client-l10n, libqt4-sql-sqlite
Conflicts: libqtkeychain0 (= 0.20140128)
Filename: ./amd64/owncloud-client_1.7.1_amd64.deb
Size: 699596
MD5sum: 23e2bfa2467b45fd9b70f3b946203b4b
SHA1: 422242ad170ad1aa8d75587fe18a0469cc23ad72
SHA256: 319e7253309835d028ec527ee9b3abea014c2db8b7edc5d3d57270ede9dbb5af
Section: devel
Priority: optional
Multi-Arch: same
Description: The ownCloud client is based on Mirall - github.com/owncloud/mirall
 .
 ownCloud client enables you to connect to your private
 ownCloud Server. With it you can create folders in your home
 directory, and keep the contents of those folders synced with your
 ownCloud server. Simply copy a file into the directory and the
 ownCloud client does the rest.
 .
 ownCloud gives your employees anytime, anywhere access to the files
 they need to get the job done, whether through this desktop application,
 our mobile apps, the web interface, or other WebDAV clients. With it,
 your employees can easily view and share documents and information
 critical to the business, in a secure, flexible and controlled
 architecture. You can easily extend ownCloud with plug-ins from the
 community, or that you build yourself to meet the requirements of
 your infrastructure and business.
 .
 ownCloud - Your Cloud, Your Data, Your Way!  www.owncloud.com
 .
 Authors
 =======
 Duncan Mac-Vicar P. &lt;duncan@kde.org&gt;
 Klaas Freitag &lt;freitag@owncloud.com&gt;
 Daniel Molkentin &lt;danimo@owncloud.com&gt;

Package: owncloud-client
Status: install ok installed
Priority: optional
Section: devel
Installed-Size: 1521
Maintainer: Markus Rex &lt;msrex@owncloud.com&gt;
Architecture: amd64
Multi-Arch: same
Version: 1.7.1
Depends: libc6 (&gt;= 2.4), libgcc1 (&gt;= 1:4.1.1), libneon27, libowncloudsync0 (= 1.7.1), libqt4-dbus (&gt;= 4:4.5.3), libqt4-network (&gt;= 4:4.5.3), libqt4-sql (&gt;= 4:4.5.3), libqt4-xml (&gt;= 4:4.5.3), libqt4-xmlpatterns (&gt;= 4:4.5.3), libqtcore4 (&gt;= 4:4.8.0), libqtgui4 (&gt;= 4:4.7.0~beta1), libqtkeychain0, libqtwebkit4 (&gt;= 2.2.0), libsqlite3-0 (&gt;= 3.5.9), libstdc++6 (&gt;= 4.4.0), owncloud-client-l10n, libqt4-sql-sqlite
Description: The ownCloud client is based on Mirall - github.com/owncloud/mirall
 .
 ownCloud client enables you to connect to your private
 ownCloud Server. With it you can create folders in your home
 directory, and keep the contents of those folders synced with your
 ownCloud server. Simply copy a file into the directory and the
 ownCloud client does the rest.
 .
 ownCloud gives your employees anytime, anywhere access to the files
 they need to get the job done, whether through this desktop application,
 our mobile apps, the web interface, or other WebDAV clients. With it,
 your employees can easily view and share documents and information
 critical to the business, in a secure, flexible and controlled
 architecture. You can easily extend ownCloud with plug-ins from the
 community, or that you build yourself to meet the requirements of
 your infrastructure and business.
 .
 ownCloud - Your Cloud, Your Data, Your Way!  www.owncloud.com
 .
 Authors
 =======
 Duncan Mac-Vicar P. &lt;duncan@kde.org&gt;
 Klaas Freitag &lt;freitag@owncloud.com&gt;
 Daniel Molkentin &lt;danimo@owncloud.com&gt;

Package: owncloud-client
Version: 1.5.0+dfsg-4~bpo70+1
Installed-Size: 1076
Maintainer: ownCloud for Debian maintainers &lt;pkg-owncloud-maintainers@lists.alioth.debian.org&gt;
Architecture: amd64
Depends: libowncloudsync0 (= 1.5.0+dfsg-4~bpo70+1), libqt4-sql-sqlite, owncloud-client-l10n, libc6 (&gt;= 2.2.5), libgcc1 (&gt;= 1:4.1.1), libneon27-gnutls, libocsync0 (&gt;= 0.60.3), libqt4-dbus (&gt;= 4:4.5.3), libqt4-network (&gt;= 4:4.6.1), libqt4-sql (&gt;= 4:4.5.3), libqt4-xml (&gt;= 4:4.5.3), libqt4-xmlpatterns (&gt;= 4:4.5.3), libqtcore4 (&gt;= 4:4.8.0), libqtgui4 (&gt;= 4:4.7.0~beta1), libqtkeychain0 (&gt;= 0.1.0), libqtwebkit4 (&gt;= 2.1.0~2011week13), libstdc++6 (&gt;= 4.1.1)
Description-en: folder synchronization with an ownCloud server - GUI
 The ownCloudSync system lets you always have your latest files wherever
 you are. Just specify one or more folders on the local machine to and a server
 to synchronize to. You can configure more computers to synchronize to the same
 server and any change to the files on one computer will silently and reliably
 flow across to every other.
 .
 owncloud-client provides the graphical client specialising in
 synchronizing with cloud storage provided by ownCloud.
Homepage: http://owncloud.org/sync-clients/
Description-md5: a754a2b9b06d1c7c880afd05aa24e101
Section: net
Priority: optional
Filename: pool/main/o/owncloud-client/owncloud-client_1.5.0+dfsg-4~bpo70+1_amd64.deb
Size: 417650
MD5sum: 42a3f6355f9d5f5af0fb42141bee9ecf
SHA1: 52102eacc1d81438cb88e639c09269484279dde1
SHA256: d38e11879d6439dad97ff9f59449077193dbc89331bae8d2866b335ce8b41856
</code></pre>

<p>さらに <code>apt-cache policy</code> でどこからきたパッケージなのかみてみるとどちらも ownCloud 公式のパッケージだったように見えました。
bpo (backports) のパッケージならバージョンが下がることはないはずなので、そう判断しました。</p>

<pre><code>$ apt-cache policy owncloud-client
owncloud-client:
  インストールされているバージョン: 1.7.1
  候補:               1.7.1
  バージョンテーブル:
     1.7.1 0
        500 http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/Debian_7.0/  Packages
 *** 1.7.1 0
        100 /var/lib/dpkg/status
     1.5.0+dfsg-4~bpo70+1 0
        100 http://ftp.jp.debian.org/debian/ wheezy-backports/main amd64 Packages
$ apt-cache policy libqtkeychain0
libqtkeychain0:
  インストールされているバージョン: 0.20140128
  候補:               0.20140128
  バージョンテーブル:
 *** 0.20140128 0
        100 /var/lib/dpkg/status
     0.4 0
        500 http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/Debian_7.0/  Packages
     0.1.0-2~bpo70+1 0
        100 http://ftp.jp.debian.org/debian/ wheezy-backports/main amd64 Packages
</code></pre>

<h2>対処</h2>

<p><code>libqtkeychain0</code> を ownCloud 公式の 0.4.0 にダウングレードすることで解決しました。</p>

<pre><code>$ sudo aptitude full-upgrade -DV
以下のパッケージが更新されます:
  owncloud-client{b} [1.7.1 -&gt; 1.7.1] (競: libqtkeychain0)
更新: 1 個、新規インストール: 0 個、削除: 0 個、保留: 0 個。
700 k バイトのアーカイブを取得する必要があります。展開後に 0  バイトのディスク領域が新たに消費されます。
以下のパッケージには満たされていない依存関係があります:
 owncloud-client : 競合: libqtkeychain0 (= 0.20140128) [0.20140128 が既にインストール済みです]
以下のアクションでこれらの依存関係の問題は解決されます:

     以下のパッケージを削除する:
1)     libowncloudsync0
2)     libqtkeychain0
3)     owncloud-client
4)     owncloud-client-l10n



この解決方法を受け入れますか? [Y/n/q/?]n
以下のアクションでこれらの依存関係の問題は解決されます:

     以下のパッケージを削除する:
1)     owncloud-client
2)     owncloud-client-l10n



この解決方法を受け入れますか? [Y/n/q/?]n
以下のアクションでこれらの依存関係の問題は解決されます:

     以下のパッケージを現在のバージョンに一時固定する:
1)     owncloud-client [1.7.1 (now)]



この解決方法を受け入れますか? [Y/n/q/?]n
以下のアクションでこれらの依存関係の問題は解決されます:

     以下のパッケージをダウングレードする:
1)     libqtkeychain0 [0.20140128 (now) -&gt; 0.4 (&lt;NULL&gt;)]



この解決方法を受け入れますか? [Y/n/q/?]y
以下のパッケージがダウングレードされます:
  libqtkeychain0 [0.20140128 -&gt; 0.4]
以下のパッケージが更新されます:
  owncloud-client [1.7.1 -&gt; 1.7.1]
更新: 1 個、新規インストール: 0 個、ダウングレード: 1 個、削除: 0 個、保留: 0 個。
753 k バイトのアーカイブを取得する必要があります。展開後に 0  バイトのディスク領域が新たに消費されます。
先に進みますか? [Y/n/?]
取得: 1 http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/Debian_7.0/  libqtkeychain0 0.4 [53.4 kB]
取得: 2 http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/Debian_7.0/  owncloud-client 1.7.1 [700 kB]
Fetched 753 kB in 4秒 (156 kB/s)
changelog を読んでいます... 完了
dpkg: 警告: libqtkeychain0 を 0.20140128 から 0.4 にダウングレードしています
(データベースを読み込んでいます ... 現在 124701 個のファイルとディレクトリがインストールされています。)
libqtkeychain0 0.20140128 を (.../libqtkeychain0_0.4_amd64.deb で) 置換するための準備をしています ...
libqtkeychain0 を展開し、置換しています...
owncloud-client:amd64 1.7.1 を (.../owncloud-client_1.7.1_amd64.deb で) 置換するための準備をしています ...
owncloud-client:amd64 を展開し、置換しています...
man-db のトリガを処理しています ...
libqtkeychain0 (0.4) を設定しています ...
owncloud-client:amd64 (1.7.1) を設定しています ...

現在の状態: 更新が 0 個 [-1]。
</code></pre>

<h2>対処後の状況</h2>

<p><code>owncloud-client</code> パッケージも <code>libqtkeychain0</code> パッケージもどちらも ownCloud 公式のバージョンになって解決しました。</p>

<pre><code>$ apt-cache policy owncloud-client
owncloud-client:
  インストールされているバージョン: 1.7.1
  候補:               1.7.1
  バージョンテーブル:
 *** 1.7.1 0
        500 http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/Debian_7.0/  Packages
        100 /var/lib/dpkg/status
     1.5.0+dfsg-4~bpo70+1 0
        100 http://ftp.jp.debian.org/debian/ wheezy-backports/main amd64 Packages
$ apt-cache policy libqtkeychain0
libqtkeychain0:
  インストールされているバージョン: 0.4
  候補:               0.4
  バージョンテーブル:
 *** 0.4 0
        500 http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/Debian_7.0/  Packages
        100 /var/lib/dpkg/status
     0.1.0-2~bpo70+1 0
        100 http://ftp.jp.debian.org/debian/ wheezy-backports/main amd64 Packages
</code></pre>

<h2>考察</h2>

<p>Debian 公式パッケージならこういうときは
<a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Version">Version</a> に
epoch をつけて解決しますが、
ownCloud 公式は Debian からみると非公式パッケージになるので、
将来の Debian のアップグレードの邪魔にならないように epoch を使わなかったため、
こういう問題が起きたのでないかと推測しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO ＆ 東海道らぐのイベントに参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2015-01-10-lilo-tokaidolug.html"/>
    <updated>2015-01-10T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-tokaidolug</id>
    <content type="html"><![CDATA[<p><a href="http://lilo.doorkeeper.jp/events/18987" title="LILO ＆ 東海道らぐ・オフラインミーティング（2015/01/10） - LILO | Doorkeeper">LILO ＆ 東海道らぐ・オフラインミーティング（2015/01/10） - LILO | Doorkeeper</a>
に参加しました。</p>

<p>前回と同じくアンカンファレンス形式でした。</p>

<!--more-->


<h2>メモ</h2>

<p>今回のメモです。</p>

<ul>
<li>LILO と東海道らぐの紹介</li>
<li>自己紹介から</li>
<li>広島の Open Street Map の話</li>
<li>F4map</li>
<li>Raspberry Pi で Scratch</li>
<li>ARM Chromebook で Linux

<ul>
<li>Chrouton</li>
<li>ChrUbuntu</li>
<li>続きは OSC 東京で。</li>
</ul>
</li>
<li>opencocon</li>
<li>UEFI

<ul>
<li>ESP パーティション (FAT32、大抵は512MB)</li>
<li>32bit UEFI アプリを 64bit UEFI で使うことはできない</li>
</ul>
</li>
<li>Linux 人口を増やしたい

<ul>
<li><a href="http://knowledge.sakura.ad.jp/" title="さくらのナレッジ">さくらのナレッジ</a></li>
<li><a href="http://knowledge.sakura.ad.jp/beginner/2691/" title="「サーバーってなに？」～初心者でもよくわかる！VPSによるWebサーバー構築講座(1) - さくらのナレッジ">「サーバーってなに？」～初心者でもよくわかる！VPSによるWebサーバー構築講座(1) - さくらのナレッジ</a></li>
<li><a href="http://vps.sakura.ad.jp/" title="さくらの VPS">さくらの VPS</a> が最近リニューアル</li>
</ul>
</li>
<li>LibreOffice の話

<ul>
<li>CloudOn</li>
<li><a href="http://ask.libreoffice.org/ja/questions/">http://ask.libreoffice.org/ja/questions/</a></li>
</ul>
</li>
<li>日本語アナウンスをリリースする時に気をつけていること

<ul>
<li>Linux Mint Japan</li>
</ul>
</li>
<li>etckeeper を openSUSE の公式リポジトリに入れたいぞ! Ver.2

<ul>
<li><a href="https://joeyh.name/code/etckeeper/">https://joeyh.name/code/etckeeper/</a> → <a href="http://etckeeper.branchable.com/">http://etckeeper.branchable.com/</a></li>
<li><a href="https://ikiwiki.info/">https://ikiwiki.info/</a></li>
<li><a href="https://build.opensuse.org/" title="openSUSE Build Service">openSUSE Build Service</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
