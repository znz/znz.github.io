<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2018-01-14T23:42:57+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[webhook でサイトの git pull をする設定をした]]></title>
    <link href="http://blog.n-z.jp/blog/2018-01-03-webhook-git-pull.html"/>
    <updated>2018-01-03T18:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/webhook-git-pull</id>
    <content type="html"><![CDATA[<p>GitLab.com に git push した時に webhook で通知を受け取って git pull という設定をしました。</p>

<p>方針としては Web サーバーの実行ユーザー権限の cgi で通知用のファイルを更新して、 systemd の <code>*.path</code> で監視して、別途ディレクトリの所有者権限でアップデートのシェルスクリプトを実行して、アップデートのログは journald に任せるという感じにしました。</p>

<!--more-->


<h2>GitLab.com の設定</h2>

<p>Webhook が使えるシステムなら GitHub などでも同様に設定可能だと思います。</p>

<ul>
<li>Settings - Integrations で Webhooks 設定</li>
<li>URL: <code>https://lilo.linux.or.jp/trigger/update.cgi</code> のような感じ</li>
<li>Secret Token あり</li>
<li>Trigger : Push events のみ</li>
<li>Enable SSL verification はチェックありのまま</li>
</ul>


<h2>trigger cgi</h2>

<p>URL がわかっていても Secret Token がちゃんと設定されていないリクエストはエラーを返すようにしました。</p>

<p>内容はチェックせずに通知用のファイルにリクエスト内容をそのまま書き込んでデバッグ用に使えるようにしました。</p>

<p><code>/home/www</code> は CGI の権限で書き込めるディレクトリです。</p>

<pre><code class="sh">#!/bin/sh
set -e
if [ x"$HTTP_X_GITLAB_TOKEN" = x"XXXXXXXXXXXXXXXXXXXX" ]; then
  cat &gt; /home/www/trigger_update_web
  echo "Content-Type: text/plain; charset=utf-8"
  echo
  echo OK
else
  echo "Status: 403"
  echo "Content-Type: text/plain; charset=utf-8"
  echo
  echo NG
fi
</code></pre>

<h2>systemd の設定追加</h2>

<p>後述のファイルを以下のように追加して設定しました。</p>

<pre><code>  sudo cp lilo_web_update.path /etc/systemd/system
  sudo cp lilo_web_update.service /etc/systemd/system
  sudo systemctl daemon-reload
  sudo systemctl start lilo_web_update.path
</code></pre>

<h2><code>lilo_web_update.path</code></h2>

<p><code>trigger_update_web</code> ファイルを <code>PathModified</code> で監視して変化があれば <code>lilo_web_update.service</code> を実行するようにしました。</p>

<pre><code>[Unit]
Description=Trigger update web

[Path]
PathModified=/home/www/trigger_update_web

[Install]
WantedBy=muti-user.target
</code></pre>

<h2><code>lilo_web_update.service</code></h2>

<p>Web コンテンツに書き込めるユーザーでシェルスクリプトを実行します。</p>

<pre><code>[Unit]
Description=Update web

[Service]
Type=oneshot
ExecStart=/path/to/lilo_web_update.sh
User=someuser
Group=someuser
</code></pre>

<h2><code>lilo_web_update.sh</code></h2>

<p>flock コマンドで同時実行を抑制 (同時実行は後の方が失敗終了) した上で、何か変更されていたらそれを捨てて、 <code>git pull</code> でリモートのコンテンツで上書きするようにしています。</p>

<p>とりあえず自分が知っているコマンドの中でクリーンにできるものとして <code>git checkout .</code> と <code>git clean -dfx</code> を使っているだけなので、もっと良い方法があるかもしれません。</p>

<pre><code class="bash">#!/bin/bash
set -euxo pipefail
exec {lock_fd}&lt;"$0"
flock --nonblock "${lock_fd}"
cd "$(dirname "$0")/.."
git checkout .
git clean -dfx
git pull
</code></pre>

<h2>apache2 設定</h2>

<p>trigger ディレクトリに cgi-bin の設定を参考にして ExecCGI と AddHandler の設定をしました。</p>

<pre><code>&lt;Directory /path/to/trigger/&gt;
        AllowOverride None
        Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
        Require all granted
        AddHandler cgi-script .cgi
&lt;/Directory&gt;
</code></pre>

<p><code>/etc/apache2/conf-enabled/security.conf</code> の <code>.svn*</code> へのアクセスを禁止する設定を参考にして、 <code>.git*</code> へのアクセスを禁止しました。</p>

<pre><code>&lt;DirectoryMatch "/\.git"&gt;
   Require all denied
&lt;/DirectoryMatch&gt;
</code></pre>

<h2>動作確認</h2>

<ul>
<li><code>sudo -u someuser /path/to/lilo_web_update.sh</code> で git pull の動作確認</li>
<li><code>touch /home/www/trigger_update_web</code> と <code>sudo systemctl status lilo_web_update.service</code> で PathModified 経由での実行確認</li>
<li><code>curl -H 'X-Gitlab-Token: XXXXXXXXXXXXXXXXXXXX' https://lilo.linux.or.jp/trigger/update.cgi</code> で webhook 経由での動作確認</li>
</ul>


<h2>まとめ</h2>

<p>git push で webhook 経由でコンテンツを更新して、 journald でログを確認できるシステムを構築しました。
Unix 的にそれぞれは大した設定はしていないのですが、組み合わせるとそれなりの設定量になりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO 20周年記念ミートアップに参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-12-17-lilo-event.html"/>
    <updated>2017-12-17T23:06:45+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-event</id>
    <content type="html"><![CDATA[<p><a href="https://lilo.connpass.com/event/73932/">LILO 20周年記念ミートアップ</a>に参加しました。
いくつか事前に発表されていたものもありましたが、他はいつも通りアンカンファレンス形式でした。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場</h2>

<p>いつもより遅い14時からでした。</p>

<h2>オープニング</h2>

<ul>
<li>自己紹介案: 名前, いつから Linux を使っているのか?, 初めて使った Linux ディストリビューション, 最近の Linux の使い方</li>
<li>会場費とか会計の話とか (結局プールされているお金があるので、今回は参加費は無料だった)</li>
<li>ハッシュタグは <code>#lilo_jp</code></li>
</ul>


<h2>自己紹介など</h2>

<ul>
<li>名前, いつから Linux を使っているのか?, 初めて使った Linux ディストリビューション, 最近の Linux の使い方</li>
<li>好きなディストリビューション: Debian: 7, Gentoo: 1, Vine: 1, Rasbian: 2, Plamo: 2, Ubuntu: 1, CentOS: 1</li>
<li>UNIX: Minix: 1, OS9: 1</li>
<li>好きな言語: AWK: 4, Python: 2, JavaScript: 1, bash: 3, 日本語: 1, C: 3, BASIC09: 1, Perl: 2, Ruby: 1, PHP: 1</li>
<li>libc5 のバージョンアップではまったという話が数人</li>
<li>初めて使ったのは Slackware という人が多かった感じがする</li>
</ul>


<h2>Linuxコミュニティ20年の振返りと学んだ事(もうちょと付け足し版)</h2>

<ul>
<li>GPD Pocket で HDMI がうまく出なかったので Windows で発表</li>
<li>id にこだわりがあるので、取れなかったサービスはあまり利用しない</li>
<li>1997-06-22 から (ML に投稿があって名前が決定した日)</li>
<li>運営者は特にいなくて、その時々でやっている人が違う</li>
<li>linux.or.jp ドメイン管理者の JLA との窓口やさくらインターネットとの窓口はやっている</li>
<li>LinuxMaMa というパッチを集めたサイトがあった</li>
<li>IP マスカレードは最初はここにあって、本体に取り込まれた</li>
<li>Linux JF, Linux JM</li>
<li>linux-users ML の方が LinuxMaMa より後から知った</li>
<li>UNIX が十万円以上する頃に Linux は CD-ROM 代だけで売っていた</li>
<li>営業さんはすごいと感じた話</li>
<li><p>コミュニティはいろんな人がいる</p></li>
<li><p>k-of.jp/2017 の時からの付け足しはお世話になったサイトとお店</p></li>
<li>最近は野良パッチというのはあまり見かけない</li>
<li><p>今は github があるが、昔は SCM が無料というのはなかった</p></li>
<li><p>Google 翻訳などで翻訳のモチベーションが減っているかも</p></li>
<li>英語ができる人しか生き残っていない?</li>
<li>仕様書がない?</li>
<li>ウォーターフォールではない, リーンに近い</li>
<li>開発プロセスも勉強になる</li>
<li><p>コアはきれいだが周辺のデバイスドライバのソースはまちまち</p></li>
<li><p>Windows が嫌いというより (シャットダウン時に時間がかかる) Windows Update が嫌い</p></li>
</ul>


<h2>LILO(7)</h2>

<ul>
<li>LILO の説明を man page にした</li>
<li>LILO(8) だとブートローダーとかぶってしまう</li>
<li>LILO のサイトの複数のページから日付が付いているものを集めた</li>
<li>LibreOffice Calc にまとめて、重複などは TSV を AWK で処理</li>
<li>イベント開催回数は 100 回以上 (141回ぐらい?)</li>
</ul>


<h2>lilo.linux.or.jp の話</h2>

<ul>
<li>いつもの更新情報</li>
<li>GitHub のプライベートリポジトリを使わせてもらっていたのを GitLab.com に変更した</li>
<li>Web コンテンツが非公開なのは内容のライセンスというよりもコミットログが適当なので公開したくないということの方が大きいようでした</li>
<li>発表資料などの置き場所として resources を作った</li>
<li>デフォルトのライセンスも決めた</li>
</ul>


<p>スライドはいつも通り、
- <a href="https://slide.rabbit-shocker.org/authors/znz/lilo-20171217/">Rabbit Slide Show</a>
- <a href="https://slideshare.net/znzjp/lilolinuxorjp-201712">SlideShare</a>
- <a href="https://speakerdeck.com/u/znz/p/lilo-dot-linux-dot-or-dot-jp-falsehua-2017nian-12yue">Speaker Deck</a>
- <a href="https://rubygems.org/gems/rabbit-slide-znz-lilo-20171217">RubyGems.org</a>
- <a href="https://github.com/znz/lilo-20171217">GitHub.com</a>
で公開しています。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/lilo-20171217/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/lilo-20171217/" title="lilo.linux.or.jp の話 (2017年12月)">lilo.linux.or.jp の話 (2017年12月)</a>
</div>


<h2>ライセンス変更の話</h2>

<ul>
<li>Ruby のリファレンスマニュアルは RWiki の頃に仮の適当なライセンス + 変更手順を決めていたので、今は CC にできた</li>
<li>Ruby は 1.9.3 で GPL とのデュアルライセンスから 2条項 BSDL に切り替えた</li>
<li>tdiary は GPL2 から GPL2+ に変わった

<ul>
<li>highlight の著作権者に入っているが、特に個別連絡はなかったので詳細はよくわからない</li>
<li>日本の著作権法では異議申し立てがなければ問題はないはずという意見があった</li>
</ul>
</li>
</ul>


<p>スライドはいつも通り、
- <a href="https://slide.rabbit-shocker.org/authors/znz/change-license/">Rabbit Slide Show</a>
- <a href="https://www.slideshare.net/znzjp/ss-84299220">SlideShare</a>
- <a href="https://speakerdeck.com/znz/raisensubian-geng-falsehua">Speaker Deck</a>
- <a href="https://rubygems.org/gems/rabbit-slide-znz-change-license">RubyGems.org</a>
- <a href="https://github.com/znz/change-license">GitHub.com</a>
で公開しています。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/change-license/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/change-license/" title="ライセンス変更の話">ライセンス変更の話</a>
</div>


<h2>LibreOffice や各地の IT コミュニティ運営について</h2>

<ul>
<li>LILO や KOF などのイベント関連とか</li>
<li>OpenOffice.org や LibreOffice などのソフトウェア関係とか</li>
<li>ノウハウの文書は少ない, <a href="https://www.oreilly.co.jp/books/9784873114958/">アート・オブ・コミュニティ</a> とか</li>
<li>コミュニティの目的によっていろいろ違う</li>
<li>LILO は ML で反論があると意思決定が難しい</li>
<li>connpass に移行して楽になった</li>
<li>やり方は様々</li>
<li>ミッション大事、最初のメンバーで文化が決まる</li>
<li>人のトラブルとか悩ましい</li>
<li>CoC の話</li>
<li>DroidKaigi は毎年スタッフが半分入れ替わるらしい</li>
<li>若い人がいない問題: 諦める or 取りに行く</li>
<li>既存のところに入るより新しく立ち上げた方が活躍しやすい問題</li>
<li>最初の慣なれるための場として活用してもらう?</li>
<li>OSC 広島だとトップを学生にしてみたことがある</li>
<li>LibreOffice コミュニティの話は省略</li>
</ul>


<h2>実数ってナンだ?</h2>

<ul>
<li>人工知能や機械学習をきっかけにして数学を勉強し直した</li>
<li>自然数はここでは1以上 (0 を含む場合もある)</li>
<li>ペアノの公理</li>
<li>自然数→整数→有理数</li>
<li>有理数, 無理数は有比数, 無比数の方がわかりやすかったのに</li>
<li>デデキントの有理数の切断</li>
<li>有理数→無理数</li>
<li>無限の和で近似する話</li>
<li>無限の話</li>
</ul>


<h2>Processing でなんとなく</h2>

<ul>
<li>Processing : アート向けのプログラミング環境</li>
<li>setup と draw</li>
<li>デモ</li>
<li>ランダムに贈りあうシミュレーション</li>
<li><a href="https://gigazine.net/news/20170711-random-people-give-money-to-random-other-people/">https://gigazine.net/news/20170711-random-people-give-money-to-random-other-people/</a></li>
</ul>


<h2>qemu-debootstrap で別アーキテクチャ環境が手軽に使えて便利</h2>

<ul>
<li>arm64 (aarch64) のノート PC Pinebook を買った</li>
<li>chroot と qemu-user-static で別アーキテクチャが使える</li>
<li>Korea Community Day 2018 の紹介 (OSC のようなものらしい)</li>
</ul>


<h2>おっさんの集中力について</h2>

<ul>
<li>適度に運動する</li>
<li>寝ることが重要</li>
<li>食事のデザインも大事</li>
<li>マインドフルネスも大事</li>
<li>スピリチュアル系はやめた方が良い</li>
<li>注意力は限りがある</li>
<li>Task warrior, Time warrior</li>
<li>anki</li>
</ul>


<h2>今後の予定</h2>

<ul>
<li><a href="https://www.ospn.jp/osc2018-osaka/">OSC 2018 Osaka</a> の翌日の 2018-01-28(日) にまた関西Debian勉強会と合同で勉強会をやるらしい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitlab-ci-multi-runner パッケージから gitlab-runner パッケージへの更新]]></title>
    <link href="http://blog.n-z.jp/blog/2017-11-06-gitlab-runner.html"/>
    <updated>2017-11-06T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/gitlab-runner</id>
    <content type="html"><![CDATA[<p>GitLab Runner が 10.0.0 だとパッケージ名が gitlab-runner に変わってしまって、そのままだと 9.5.1 から更新されなくなってしまったので、対応しました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 16.04.3 LTS</li>
<li>gitlab-ci-multi-runner (9.5.1) から gitlab-runner (10.1.0)</li>
</ul>


<h2>GitLab Runner とは?</h2>

<p><a href="https://docs.gitlab.com/runner/">GitLab Runner</a> とは GitLab CI のジョブを実行する部分のことです。</p>

<p>詳細は<a href="/blog/2017-07-09-gitlab-runner.html">インストール時の記事</a>を参照してください。</p>

<h2>インストール方法</h2>

<p><a href="https://docs.gitlab.com/runner/install/linux-repository.html">Install GitLab Runner using the official GitLab repositories - GitLab Documentation</a> が gitlab-runner に改名後のインストール方法になっているので、参考にして移行しました。</p>

<h2>移行方法</h2>

<p>簡単にまとめると apt の設定を変えて <code>gitlab-runner</code> パッケージを入れ直すだけでした。</p>

<p>GitLab (GitLab CI) への登録や <code>/etc/gitlab-runner/config.toml</code> はそのままで大丈夫でした。</p>

<h2>apt-line の更新</h2>

<p><code>/etc/apt/sources.list.d/</code> 以下に入っている</p>

<pre><code>deb https://packages.gitlab.com/runner/gitlab-ci-multi-runner/ubuntu xenial main
</code></pre>

<p>の apt-line を削除して、</p>

<pre><code>deb https://packages.gitlab.com/runner/gitlab-runner/ubuntu xenial main
</code></pre>

<p>を追加しました。</p>

<h2>pinning 設定変更</h2>

<p><code>/etc/apt/preferences.d/pin-gitlab-runner.pref</code> で <code>gitlab-ci-multi-runner</code> パッケージを <code>packages.gitlab.com</code> のものを優先するように設定していたのを、 <code>gitlab-runner</code> パッケージに変更しました。</p>

<h2>パッケージのインストール</h2>

<p><code>gitlab-runner</code> パッケージをインストールすると自動的に <code>gitlab-ci-multi-runner</code> パッケージと置き換わりました。</p>

<p><code>gitlab-ci-multi-runner</code> パッケージを purge しても <code>/etc/gitlab-runner/config.toml</code> が消えたりすることもないので、特に注意するような点はなさそうでした。</p>

<h2>ansible での例</h2>

<p><a href="https://github.com/znz/ansible-role-gitlab-runner/commit/616a9da561360fbae940940aec49483a5ee1ce9b">Use gitlab-runner instead of gitlab-ci-multi-runner</a> のように変更しました。</p>

<p>移行措置として、 gitlab-ci-multi-runner の apt-line を消す処理も入れています。</p>

<h2>まとめ</h2>

<p><code>gitlab-ci-multi-runner</code> パッケージから <code>gitlab-runner</code> パッケージへの移行は GitLab (GitLab CI) への登録し直しが必要だと面倒そうと思って、 10.0.x の間は躊躇してそのままにしてしまっていましたが、 vagrant 環境で確認したところ、パッケージの更新だけで大丈夫ということがわかったので、問題なく上げることができました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LILO&東海道らぐオフラインミーティング 2017/08/27 に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-08-27-lilo-tokaidolug.html"/>
    <updated>2017-08-27T13:33:33+09:00</updated>
    <id>http://blog.n-z.jp/blog/lilo-tokaidolug</id>
    <content type="html"><![CDATA[<p><a href="https://lilo.connpass.com/event/64381/">LILO&amp;東海道らぐオフラインミーティング 2017/08/27</a> に参加しました。</p>

<p>今回もアンカンファレンス形式でした。</p>

<!--more-->


<h2>メモ</h2>

<ul>
<li>会場はいつもの 4 階でした。</li>
<li>ハッシュタグ: <code>#lilo_jp</code> <code>#東海道らぐ</code></li>
<li>登録参加者数 12名</li>
<li>自己紹介から</li>
<li>最初の発表は発表者の希望により非公開</li>
<li>途中からきた人は発表の合間に随時自己紹介</li>
</ul>


<h2>自分の発表</h2>

<ul>
<li>自分の lilo.linux.or.jp の話</li>
<li>発表資料に入れていなかった部分については以下の通り</li>
<li>OGP を入れたきっかけは <a href="https://togetter.com/li/1107707">LILO&amp;東海道らぐオフラインミーティング 2017/05/06の記録 - Togetterまとめ</a> で connpass だけ概要と画像が出ていたため</li>
<li><a href="https://developers.facebook.com/tools/debug/">Open Graph Debugger - Developers Facebook</a> (Facebook アカウントがないと使えない?) は OGP がなくても自動検出した内容で埋められるため、本当に反映されるかどうかの確認には使えなかった覚えがあります</li>
<li><a href="https://ja.osdn.net/projects/clamav-jp/lists/archive/users/2017-August/000280.html">[clamav-jp 281] ウィルスDB更新の異常について（解決済）</a></li>
<li><a href="http://qiita.com/ttdoda/items/f16422d709e264cbb8a1">Postfix 2.12 の compatibility_level</a></li>
<li>dokuwiki は <a href="https://bugs.debian.org/854592">#854592 dokuwiki: Unable to login, missing usr/share/php/Crypt/AES.php</a> で消えていた</li>
</ul>


<h2>休憩</h2>

<h2>GPD-Pocket に Ubuntu 17.04 をインストールした話</h2>

<ul>
<li>東海道らぐ四日市 11/25</li>
<li>GPD-Pocket でも Ubuntu 17.04 が動いた</li>
<li>Kernel 4.13RC + Intel Graphics Driver OSS + 蓋開閉</li>
<li>色々な条件で試してNGだったが、偶然蓋を開けたら画面がうつった</li>
<li>ATOM はバニラカーネルの時点でバグがあるらしい</li>
</ul>


<h2>Fireduck OS</h2>

<ul>
<li>東海道LUG有志によるLinuxディストリビューションプロジェクト</li>
<li>○○焼き → Fire duck (あひる焼き)</li>
<li>タブレット向け</li>
<li><a href="https://github.com/TokaidoLUG/fireduckos">https://github.com/TokaidoLUG/fireduckos</a></li>
<li>アーキテクチャ説明</li>
<li>悩み事</li>
<li>journald が起動したプロセスの出力をファイルに書き込むので重い</li>
<li>OSM のアプリ?</li>
<li>UEFI32 向けに 64 bit 環境で 32 bit 向けのビルドが必要なので multilib を使った</li>
<li><a href="https://github.com/TokaidoLUG/meta-intel-mobile">https://github.com/TokaidoLUG/meta-intel-mobile</a></li>
<li><a href="https://github.com/TokaidoLUG">Tokaido Linux User Group</a></li>
<li>欲しいアプリの話</li>
<li>資料は <a href="https://www.slideshare.net/wata2ki">https://www.slideshare.net/wata2ki</a> に公開予定</li>
</ul>


<h2>休憩</h2>

<ul>
<li>懇親会参加者の確認</li>
</ul>


<h2>つなぎの発表</h2>

<ul>
<li>オープンソースカンファレンス広島の紹介</li>
<li>Allwinner タブレットの実演</li>
<li>firefox を動かして、ネットワークが繋がっていないので about:mozilla とか about:robots とか</li>
</ul>


<h2>State of the Map 2017 に行ってきたよ</h2>

<ul>
<li>Open Street Map の国際会議</li>
<li>日本で国際会議をやるのは珍しい</li>
<li>会津若松市は LibreOffice を使っているので、ついでに話を聞きに行った</li>
<li>写真を見ながら色々な話</li>
<li>Maps With Me というアプリが便利らしい</li>
</ul>


<h2>最後の話</h2>

<p>プロジェクターに映らなかったので、集まって話をきいていました。</p>

<h2>クロージング</h2>

<ul>
<li>今後の予定など</li>
<li>会場費は学生以外が 100 円でした。</li>
</ul>


<h2>発表した内容</h2>

<p>スライドはいつも通り <a href="http://slide.rabbit-shocker.org/authors/znz/lilo-20170827/">Rabbit Slide Show</a> (<a href="https://rubygems.org/gems/rabbit-slide-znz-lilo-20170827">RubyGems</a>), <a href="https://slideshare.net/znzjp/lilolinuxorjp-20178">SlideShare</a>, <a href="https://speakerdeck.com/u/znz/p/lilo-dot-linux-dot-or-dot-jp-falsehua-2017nian-8yue">Speaker Deck</a> にあげています。(ソースは <a href="https://github.com/znz/lilo-20170827">github</a> にあげています。)</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/lilo-20170827/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/lilo-20170827/" title="lilo.linux.or.jp の話 (2017年8月)">lilo.linux.or.jp の話 (2017年8月)</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.gitlab-ci.ymlでDokkuとHerokuにdeployする]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-13-gitlab-ci-heroku.html"/>
    <updated>2017-07-13T21:50:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/gitlab-ci-heroku</id>
    <content type="html"><![CDATA[<p>GitLab と Dokku (と一部 Heroku) を使って CI/CD (Continuous Integration / Continuous Deployment) 環境を作ってみた話の続きです。
CI 部分のメインとなる <code>.gitlab-ci.yml</code> の設定の別パターンの話です。
review 環境は Dokku を使って、 staging と production に Heroku を使います。</p>

<p><a href="/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>Ubuntu 16.04.2 LTS</li>
<li>Omnibus GitLab 9.1.4-ce.0 (インストール時) から 9.3.5-ce.0 (記事執筆時)</li>
<li>gitlab-ci-multi-runner 9.2.0 (インストール時) から 9.3.0 (記事執筆時)</li>
<li>Dokku 0.9.4 (インストール時) から 0.10.2 (記事執筆時)</li>
</ul>


<h2>構成</h2>

<p>今回は、
git push すると CI が走り、 master 以外のブランチなら review 環境にデプロイされて、
master ブランチなら staging 環境にデプロイして、
tag が push されたら production 環境にデプロイされる、
という状態にします。</p>

<p>そして、 staging と production の deploy 先は Dokku ではなく Heroku を使います。</p>

<h2>.gitlab-ci.yml</h2>

<p>この後は <code>.gitlab-ci.yml</code> に設定する内容の説明になります。</p>

<h2>image 設定</h2>

<p>ここは前回と同じです。</p>

<p>ここでは <a href="https://hub.docker.com/r/_/ruby/">library/ruby - Docker Hub</a> の 2.3.3 を使いました。
<code>.ruby-version</code> や <code>Gemfile</code> と同じバージョンを指定します。</p>

<pre><code>image: ruby:2.3.3
</code></pre>

<p>2.3 だと 2.3.4 になるので、 2.3.3 まで指定しています。
2.3.4 はセキュリティアップデートではなかったので、まだ 2.3.3 のままですが、様子をみてあげる予定です。</p>

<h2>cache 設定</h2>

<p>ここも前回と同じです。</p>

<p><a href="https://docs.gitlab.com/ce/ci/yaml/README.html#cache-key">cache:key</a> から per-branch caching を選んで以下のように設定しました。</p>

<pre><code>cache:
  key: "$CI_COMMIT_REF_NAME"
  untracked: true
</code></pre>

<h2>環境変数設定</h2>

<p>ここも前回と同じです。</p>

<p><a href="https://hub.docker.com/r/_/postgres/">library/postgres - Docker Hub</a> で使う <code>POSTGRES_PASSWORD</code> などと、それに接続するための Rails 用の <code>DATABASE_URL</code>、
デプロイ用の省略表記のための <code>DOKKU</code> などを設定しています。</p>

<p><code>APP_NAME</code> と <code>DB_NAME</code> は <code>CI_ENVIRONMENT_SLUG</code> を使ってブランチごとに自動生成される名前を使っています。</p>

<pre><code>variables:
  # for test
  POSTGRES_DB: dbname
  POSTGRES_USER: dbuser
  POSTGRES_PASSWORD: dbpass
  DATABASE_URL: "postgres://dbuser:dbpass@postgres:5432/dbname"
  # for deploy
  DOKKU: ssh dokku@$DOKKU_HOST
  APP_NAME: $CI_ENVIRONMENT_SLUG
  DB_NAME: $CI_ENVIRONMENT_SLUG-database
</code></pre>

<h2>stages 設定</h2>

<p>ここも設定内容は前回と同じですが、 staging と production が別 Pipeline になって、それぞれで test が実行されるのが違います。</p>

<p>最初に説明したように、 test の後に review、 staging、 production となるように stages を設定します。</p>

<pre><code>stages:
  - test
  - review
  - staging
  - production
</code></pre>

<h2>before_script</h2>

<p>ここも前回と同じです。</p>

<p>テスト用の before_script を設定しています。(デプロイの方は個別に上書きしています。)</p>

<p>apt や bundler ではキャッシュ用のディレクトリである <code>/cache</code> を使うように指定しています。</p>

<p>開発環境と共通になっている都合上、 sqlite3 を入れています。
JavaScript ランタイムも必要なので、 nodejs も入れています。</p>

<pre><code>before_script:
  - 'apt-get update -qq &amp;&amp; apt-get -o dir::cache::archives="/cache/apt" install -y -qq sqlite3 libsqlite3-dev nodejs'
  - ruby -v
  - gem install bundler --no-ri --no-rdoc
  - bundle install --jobs $(nproc) --path=/cache/bundler
  - ln -nfs .test.env .env
</code></pre>

<h2>デプロイ用の before_script</h2>

<p>ここも前回と同じです。</p>

<p><a href="https://docs.gitlab.com/ce/ci/yaml/README.html#hidden-keys">Hidden keys</a>に書いてあるようにキーが <code>.</code> で始まるものは無視されるので、
YAML のアンカーを使って参照用に使えます。</p>

<p>ruby image には openssh-client は入っていたのですが、他の image に変えても動くように参考にした <a href="https://docs.gitlab.com/ce/ci/ssh_keys/README.html">Using SSH keys</a> に書いてあった通り、 openssh-client のインストール手順も入れています。</p>

<p><code>~/.ssh/config</code> で Hostname や Port や User などを指定したかったことがあったので、設定できるようにしました。</p>

<pre><code>.before_ssh: &amp;before_ssh
  # https://docs.gitlab.com/ce/ci/ssh_keys/README.html
  - 'which ssh-agent || ( apt-get update -y &amp;&amp; apt-get -o dir::cache::archives="/cache/apt" install -y openssh-client )'
  - eval $(ssh-agent -s)
  - ssh-add &lt;(echo "$SSH_PRIVATE_KEY")
  - mkdir -p ~/.ssh
  # Set `ssh-keyscan $DOKKU_HOST` to SSH_SERVER_HOSTKEYS
  - '[[ -f /.dockerenv ]] &amp;&amp; echo "$SSH_SERVER_HOSTKEYS" &gt; ~/.ssh/known_hosts'
  - '[[ -f /.dockerenv ]] &amp;&amp; echo "$SSH_CONFIG" &gt; ~/.ssh/config'
</code></pre>

<h2>GitLab の Web での環境変数設定</h2>

<p>ここも前回とほぼ同じですが、 production と staging の deploy 用の API 鍵を設定しているところが違います。</p>

<p>ここで <code>.gitlab-ci.yml</code> の話は中断して、 Secret variables の設定の話です。</p>

<p>GitLab で該当プロジェクトを開いて、 Settings の Pipelines から Secret variables で <code>SSH_PRIVATE_KEY</code> などを設定します。</p>

<p>ここでは、以下のように設定しました。</p>

<ul>
<li><code>DOKKU_HOST</code> : Dokku に ssh するときのホスト名 (<code>dokku.example.com</code> など)</li>
<li><code>DOKKU_DOMAIN</code> : Dokku の VHOST に設定したドメイン (<code>10.1.2.3.xip.io</code> など)</li>
<li><code>SSH_PRIVATE_KEY</code> : 秘密鍵 (<code>~/.ssh/id_gitlab</code> など) の内容</li>
<li><code>SSH_SERVER_HOSTKEYS</code> : <code>ssh-keyscan $DOKKU_HOST</code> の出力</li>
<li><code>SSH_CONFIG</code> : <code>~/.ssh/config</code> に設定したい内容</li>
<li><code>HEROKU_PRODUCTION_API_KEY</code> : <a href="https://dashboard.heroku.com/account">Manage Account</a> から production 用の Heroku アカウントの API key</li>
<li><code>HEROKU_STAGING_API_KEY</code> : <a href="https://dashboard.heroku.com/account">Manage Account</a> から staging 用の Heroku アカウントの API key</li>
</ul>


<p><code>SSH_PRIVATE_KEY</code> は Protected を Yes にすると review 環境への deploy に失敗するので、 No のままにする必要がありそうです。</p>

<p><code>HEROKU_PRODUCTION_API_KEY</code> や <code>HEROKU_STAGING_API_KEY</code> は Protected branch などの運用次第で Protected を Yes にできそうです。</p>

<h2>review 環境への deploy 用 script</h2>

<p>ここも前回とほぼ同じです。</p>

<p>まず Dokku でアプリとデータベースを作成して接続します。
2度目以降は同じアプリを更新するので、作成などのエラーは無視します。</p>

<p>環境変数は <code>TZ</code> と <code>RAILS_SERVE_STATIC_FILES</code> あたりがほぼ必須だと思いますが、他は staging 環境や review 環境用に独自に設定できるようにしています。
<code>RACK_DEV_MARK_ENV</code> は rack-dev-mark gem の設定です。</p>

<p><code>Procfile</code> で web だけではなく clockwork gem を使ったプロセスも動かしている関係で <code>letter_opener</code> 用のディレクトリをマウントしていますが、
<code>/usr/bin/find '/var/lib/dokku/data/storage/letter_opener' -mtime '+2' -delete</code> のような感じで古いファイルは自動削除する予定です。
(自動削除はまだしていません。)</p>

<p>デプロイ本体部分の <code>git push</code> は、単純に <code>master</code> だとうまくいかないことがあったので、 <code>HEAD:refs/heads/master</code> という指定にしています。
Heroku にデプロイするときも git でデプロイするなら同様になります。</p>

<p><code>db:seed</code> の実行は <code>ssh</code> に <code>-tt</code> をつけて強制的に tty を確保する必要がありました。</p>

<pre><code>.deploy_script: &amp;deploy_script
  - $DOKKU apps:create $APP_NAME || echo $?
  # require `sudo dokku plugin:install https://github.com/dokku/dokku-postgres`
  - $DOKKU postgres:create $DB_NAME || echo $?
  - $DOKKU postgres:link $DB_NAME $APP_NAME || echo $?
  - $DOKKU config:set --no-restart $APP_NAME
    TZ=Asia/Tokyo
    RAILS_SERVE_STATIC_FILES=1
    NO_FORCE_SSL=1
    RACK_DEV_MARK_ENV=review
  - git push dokku@$DOKKU_HOST:$APP_NAME HEAD:refs/heads/master
  - $DOKKU -tt run $APP_NAME bundle exec rake db:seed
</code></pre>

<p>前回と違って <code>RAILS_ENV</code> の変更をしていなかったり、 <code>letter_opener_web</code> や <code>seed_fu</code> は使っていないという違いがあります。</p>

<h2>test stage のジョブ</h2>

<p>ここも前回と同じです。</p>

<p>postgres を使って rake でテストを走らせます。</p>

<p>データベースの設定は <code>DATABASE_URL</code> で指定しているので、 <code>config/database.yml</code> は特に何もしていません。</p>

<pre><code>rake:
  stage: test
  services:
    - postgres:latest
  script:
    - bundle exec rake db:setup RAILS_ENV=test
    - bundle exec rake
</code></pre>

<p>rubocop なども使うなら同様に設定します。</p>

<h2>production 環境への deploy</h2>

<p>順番が前後しますが、最初に production 環境への deploy 設定です。</p>

<p>production 環境はちゃんと名前が決まっているので <code>APP_NAME</code> を上書きします。</p>

<p>Heroku への deploy には <a href="https://docs.gitlab.com/ce/ci/examples/test-and-deploy-ruby-application-to-heroku.html">Test and Deploy a ruby application</a> に書いてある dpl gem を使っています。
git push による deploy の方が好みなら git push を使っても良いと思います。</p>

<p>environment を設定することで GitLab の Web のプロジェクトの Pipelines の Environments からリンクが貼られます。</p>

<p>only で tags を指定することで tag が push されたら開始するようにしています。</p>

<p>only で master のみに制限しています。</p>

<pre><code>production:
  stage: production
  variables:
    APP_NAME: hello-app
  script:
  - gem install dpl
  - dpl --provider=heroku --app=$APP_NAME --api-key=$HEROKU_PRODUCTION_API_KEY
  environment:
    name: production
    url: https://$APP_NAME.herokuapp.com/
  only:
  - tags
</code></pre>

<h2>staging 環境への deploy</h2>

<p>production 環境と同様に staging 環境への deploy 設定をしています。</p>

<p><code>APP_NAME</code> や API key や URL などが違う以外は基本的に production と同じです。</p>

<pre><code>staging:
  stage: staging
  variables:
    APP_NAME: hello-staging-app
  script:
  - gem install dpl
  - dpl --provider=heroku --app=$APP_NAME --api-key=$HEROKU_STAGING_API_KEY
  environment:
    name: staging
    url: https://$APP_NAME.herokuapp.com/
  only:
  - master
</code></pre>

<h2>review 環境への deploy</h2>

<p>review 環境への deploy は前回と同じです。</p>

<p>deploy 本体の script は事前に定義した <code>deploy_script</code> を使います。
結局ここでしか使っていないので、直接ここに書いても良かったかもしれません。</p>

<p>environment は name に <code>review/</code> をつけることで複数の review 環境が同時に存在している時に折りたたまれるようになります。</p>

<p>review 環境は動的に作ったり消したりするので、 https ではなく http になっています。</p>

<p><code>on_stop</code> を指定することで環境の削除ジョブを指定できます。</p>

<p>only と except で master 以外のブランチの時に review 環境が作成されるようにしています。</p>

<pre><code>review:
  stage: review
  before_script: *before_ssh
  script: *deploy_script
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_ENVIRONMENT_SLUG.$DOKKU_DOMAIN
    on_stop: stop_review
  only:
    - branches
  except:
    - master
</code></pre>

<h2>review 環境の削除</h2>

<p>ここも前回と同じです。</p>

<p><code>action: stop</code> で環境を削除するジョブとして設定しています。</p>

<p><code>when: manual</code> で手動実行するように設定していますが、基本的にはマージリクエストがマージされた時に Remove source branch にチェックを入れて、自動で停止しています。</p>

<p><code>GIT_STRATEGY: none</code> で git 関連の操作はせずに速やかに停止処理のみするようにしています。</p>

<p>postgres は使用中だと停止できないので、先にアプリケーションを削除してからデータベースを削除しています。
自動実行なので <code>--force</code> で確認なしに削除するようにしています。</p>

<pre><code>stop_review:
  stage: review
  variables:
    GIT_STRATEGY: none
  before_script: *before_ssh
  script:
    - $DOKKU apps:destroy $CI_ENVIRONMENT_SLUG --force || echo $?
    - $DOKKU postgres:destroy $CI_ENVIRONMENT_SLUG-database --force || echo $?
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  only:
    - branches
  except:
    - master
</code></pre>

<h2>まとめ</h2>

<p>GitLab CI と Dokku と Heroku を組み合わせて CI/CD 環境を作る例を紹介しました。</p>

<p>今回紹介した様に、 Heroku に似ていてもある程度違いのある Dokku で自由に review 環境を作成して、 production に近い方が良い staging 環境は Heroku を使うというのが、自前の環境のリソースには余裕がある場合には良いのではないでしょうか。</p>

<p>GitLab + Dokku 関連の記事は<a href="/blog/categories/gitlab/">gitlab カテゴリー</a>で一覧が見えます。</p>
]]></content>
  </entry>
  
</feed>
