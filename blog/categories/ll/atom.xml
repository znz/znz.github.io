<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ll | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ll/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-01-29T19:06:44+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LLoTに参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-08-27-llot.html"/>
    <updated>2016-08-27T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/llot</id>
    <content type="html"><![CDATA[<p>初回から毎年参加している LL イベントの <a href="http://ll.jus.or.jp/2016/" title="LLoT – Lightweight Language of Things">LLoT – Lightweight Language of Things</a> に今年も参加しました。</p>

<p>今回は昼と夜の2部開催ということで、初の2部開催だった<a href="http://ll.jus.or.jp/2005/" title="LLDN">LLDN</a>のTシャツを着て行きました。</p>

<!--more-->


<p>以下はそのメモです。</p>

<h2>開会</h2>

<p>時間が厳しいということで手短に説明をして始まりました。</p>

<h2>Language Update</h2>

<p>これも時間が短いのか、どんどん進んでいきました。</p>

<h3>Java Update</h3>

<ul>
<li><a href="http://www.slideshare.net/torutk/llot2016-java-update">http://www.slideshare.net/torutk/llot2016-java-update</a></li>
<li>Java の紹介</li>
<li>Java の歴史</li>
<li>10 年に一度大きな変更 : 2004 ジェネリクス、2014 ラムダ式</li>
<li>Java の近況</li>
<li>Java Update - Java SE 8</li>
<li>ラムダ式</li>
<li>インタフェースへの実装</li>
<li>static メソッドの実装、default メソッドの実装</li>
<li>メリット: 既存のインタフェースにメソッドを追加しても壊れない</li>
<li>JavaFX 8</li>
<li>Java SE 9 と LL との関係は時間の関係で省略</li>
</ul>


<h3>Language Update PHP 編</h3>

<ul>
<li><a href="http://www.slideshare.net/hnw/laungage-update-php">http://www.slideshare.net/hnw/laungage-update-php</a></li>
<li>近頃の PHP 界隈</li>
<li>トピック 1: PHP 7 速いよ!</li>
<li>10年ぶりのメジャーバージョンアップ</li>
<li>他の言語ならマイナーバージョンアップ相当</li>
<li>内部実装の大変更・高速化</li>
<li>広報互換性は原則維持</li>
<li>何を高速化したのか?</li>
<li>特徴的だった取り組み</li>
<li>WordPress をベンチマーク対象として高速化を進めた</li>
<li>高速化チームに一定の裁量を渡した</li>
<li>PHP 7 の性能</li>
<li>高速化って必要だったの?</li>
<li>Facebook 製の別実装 (HHVM) が倍以上高速だった</li>
<li>データ構造を見直す良い機会だった</li>
<li>トピック 2: PHP 7.1 リリースへ</li>
<li>2016 年 12 月頃 PHP 7.1.0 リリース予定</li>
<li>目立った変更点</li>
<li>トピック 3: エコシステム定着</li>
<li>ここ数年で Composer の利用が定着</li>
<li>参加者を増やしつつ破綻しない仕組み</li>
<li>「ユーザー名/パッケージ名」で登録</li>
<li>対応する GitHub/BitBucket の URL を登録する</li>
<li>トピック 4: 開発支援環境の普及</li>
<li>IDE、特に PhpStorm 利用者が増えている印象</li>
<li>トピック 5: 他の言語の「普通」を採用</li>
<li>トピック 6: 地方コミュニティ活性化</li>
<li>PHPカンファレンスが日本各地で開催 (2016年は4箇所)</li>
</ul>


<h3>Perl Language Update</h3>

<ul>
<li>Perl 6 クリスマスバージョン</li>
<li>Rakudo Perl 6</li>
<li>Rakudo の実行環境</li>
<li>長年 Perl 6 の土台となってきた Parrot はついに完全引退</li>
<li>Rakudo Star</li>
<li>四半期に一度くらいのペースでリリースが続いている</li>
<li>Perl 5 の近況</li>
<li>地味に更新が続いている</li>
<li>Perl 5.14 で実験的に導入された auto deref が削除</li>
<li>5.20 で実験的に導入された postderef 機能が正式化</li>
<li><code>@{$arrayref}</code> -> <code>$arrayref-&gt;@*</code></li>
<li><code>%{$hashref}</code> -> <code>$hashref-&gt;%*</code></li>
<li>YAPC::Hokkaido 2016</li>
<li><a href="http://yapcjapan.org/2016hokkaido/">http://yapcjapan.org/2016hokkaido/</a></li>
</ul>


<h3>Python の今、ぶっちゃけ</h3>

<ul>
<li><a href="http://www.slideshare.net/hirokiky/llot-python-65410202">http://www.slideshare.net/hirokiky/llot-python-65410202</a></li>
<li>Type Hinting : 型ヒント</li>
<li>Python 標準で型を明記できる</li>
<li>Python 自体は制約を与えない</li>
<li>IDE などが利用する</li>
</ul>


<pre><code>def add(a: int, b: int) -&gt; int:
    return a + b
</code></pre>

<ul>
<li>typing モジュール</li>
<li>Python 3.5 で追加された</li>
<li>Python 3.2~3.4 では php install typing すれば良い</li>
<li>他 Python 3.5</li>
<li>async (async def, async for…), await 構文</li>
<li>行列計算演算子 <code>@</code></li>
<li>Python 3 を使っているか - 使っている</li>
<li>Python 2,3 議論は終わった</li>
<li>Python 3 に対応していないライブラリーはない</li>
<li>さっさと移行しろフェーズ</li>
<li>環境まわり</li>
<li>pip が標準でインストールされる</li>
<li>pyvenv も標準でインストールされる</li>
<li>どうやっているか</li>
<li>公式 Mac バイナリーしか使わない : python.org</li>
<li>パッチバージョン何でも良い</li>
<li>周辺の話</li>
<li>データ系が多い話</li>
<li>Django</li>
</ul>


<h3>Language Update JS</h3>

<ul>
<li><a href="http://www.slideshare.net/teppeis/javascript-language-update-2016-llot">http://www.slideshare.net/teppeis/javascript-language-update-2016-llot</a></li>
<li>周辺の話が多すぎるので、言語仕様の話だけ</li>
<li>ECMAScript</li>
<li>ES2015</li>
<li>5年ぶりの大きな変更</li>
<li>WEB+DB PRESS 87 参照</li>
<li>ES6 compat-table score</li>
<li>ES2016</li>
<li>2016/6/14 公開</li>
<li>新機能は2つだけ</li>
<li>Array.prototype.includes</li>
<li>Exponentiation Operator</li>
<li>新しい仕様策定プロセス</li>
<li>仕様提案を 5 段階の Stage で管理</li>
<li>最終 Stage に到達した仕様をまとめて、毎年6月にES20XXとしてリリース</li>
<li>最終 Stage に進むには2つの実装が必要</li>
<li>GitHub でオープンに議論</li>
<li>もはや言語バージョンは無意味</li>
<li>&ldquo;ES20XX&rdquo; みたいなバージョンは意味が薄い</li>
<li>個別機能の Stage や実装状況が重要</li>
<li>compat-table を見ておこう</li>
<li>ES2017</li>
<li>Async Functions</li>
<li>ES6 Modules</li>
<li>大激論中</li>
<li>ES6 ではシンタックスのみを仕様化</li>
<li>実装はまだまだこれから</li>
</ul>


<h3>最近の Ruby</h3>

<ul>
<li><a href="http://qiita.com/takahashim/items/a0afa8765682f2cce659">http://qiita.com/takahashim/items/a0afa8765682f2cce659</a></li>
<li>Ruby 最新情報</li>
<li>RubyKaigi 2016</li>
<li>安定版 : Ruby 2.3.1</li>
<li>現在開発中の Ruby 2.4.0</li>
<li>基本的に地味</li>
<li>派手な奴は 3.0 に期待</li>
<li>Ruby 2.4 の変更点</li>
<li>Fixnum と Bignum が Integer に統合</li>
<li>内部実装の違いという見せ方に変わる</li>
<li>普通に利用している分にはあまり問題にならない</li>
<li>C拡張ライブラリが死ぬ</li>
<li>現状では即死するようになっている</li>
<li>2.4.0 リリース時には?</li>
<li>String#{downcase,upcase,capitalize} の Unicode 対応</li>
<li>今までは ASCII の範囲内では正しく動作</li>
<li>広く Unicode に対応できるように</li>
<li>後置 rescue の構文</li>
<li>a = Date.parse &ldquo;foo&rdquo; rescue nil</li>
<li>a = Date.parse(&ldquo;foo&rdquo;) rescue nil</li>
<li>Enumerable#sum, Array#sum</li>
<li>今までは各種ライブラリ側で実装</li>
<li>2.4 で標準</li>
<li>浮動小数点演算で誤差がたまらない実装を採用</li>
<li>Array#inject(:+) だと誤差がたまるので注意</li>
<li>Regexp#match? の導入</li>
<li>CGI.unescape 高速化</li>
<li>スレッド内での例外処理の向上</li>
<li>細かい高速化</li>
<li>今後の予定</li>
<li>2016/9 Preview 2</li>
<li>2016/11 Preview 3</li>
<li>2016/12 RC</li>
<li>2016/12/25 リリース</li>
<li>他実装の話</li>
<li>JRuby</li>
<li>JRuby 9000 (9.1.2.0)</li>
<li>Rubinius</li>
<li>Rubinius 3.56</li>
<li>Rubinius X</li>
<li>mruby</li>
<li>mruby 1.2.0 (2015/11/18)</li>
<li>mrbgems</li>
<li>mruby CLI</li>
<li>H2O に組み込まれた</li>
<li>Opal</li>
<li>AltJS</li>
<li>Opal v0.10.1</li>
<li>Playground / TryRuby v4</li>
</ul>


<p>後置 rescue の件は変更が入った時に、<code>p(1 if true)</code> みたいなのが通らない (引数は文ではなく <code>p((1 if true))</code> のように式にしないといけない) のと同じように (使いにくい) 仕様だと思っていたので、ちょっと驚いた覚えがあります。</p>

<p>夜の部の時に聞いたのですが、 Ruby/Tk が gem として外だしされ、開発場所が <a href="https://github.com/ruby/tk">https://github.com/ruby/tk</a> になり、 ruby 本体のレポジトリから削除されたという話が抜けていたそうです。</p>

<p>openssl も <a href="https://github.com/ruby/openssl">https://github.com/ruby/openssl</a> で開発が進んでいますが、 ruby 本体のレポジトリでの扱いはどうなるんでしょうか。
rake や Ruby/Tk みたいに削除されて gems/bundled_gems に入るのか、 rubygems や rdoc のように gem になるけど ruby 本体のレポジトリにも適宜取り込んでいくのか。
多分後者だと思っているのですが。</p>

<p>2016-08-30 追記: やはり openssl は本体のレポジトリにも取り込んでいく gem (default gem) になったようです。
それから、 Ruby 2.4.0 では tk の他に xmlrpc も bundled gem になるようです。</p>

<h2>キーボードにこだわろう</h2>

<ul>
<li>どのくらいキーボードにお金をかけているか会場にアンケート</li>
<li>0円 (ノートPC のそのままなど) から数万円までどの価格帯でもそれなり。</li>
<li>5万円以上はさすがにいなかった。</li>
<li>登壇者紹介</li>
</ul>


<blockquote><p>アメリカ西部のカウボーイたちは、馬が死ぬと馬はそこに残していくが、どんなに砂漠を歩こうとも、鞍は自分で担いで往く。馬は消耗品であり、鞍は自分の体に馴染んだインタフェースだからだ。
いまやパソコンは消耗品であり、キーボードは大切な、生涯使えるインタフェースであることを忘れてはいけない。
［東京大学 名誉教授 和田英一］</p></blockquote>

<ul>
<li>PFU 無刻印の話など</li>
<li>RealForce の歴史</li>
<li>1981 キーボード試作機完成</li>
<li>2000 リアルフォース発売</li>
<li>2012 リアルフォース10周年</li>
<li>(なぜか12年なのに10周年)</li>
<li><p>金融向けなどの専用キーボードのノウハウをリアルフォースに活用</p></li>
<li><p>とあるギークのキーボード遍歴</p></li>
<li>作業環境</li>
<li>キーボード: ErgoDox, ErgoDox EZ, ノート PC 付属 (US 配列)</li>
<li>2000年まではあまり高価でないフルサイズキーボード</li>
<li>2000年〜2004年頃 会社マシンのキーボード</li>
<li>2004年頃 Happy Hacking Keyboard Professional</li>
<li>静電容量無接点方式</li>
<li>タイピングが軽いというのを重視していて、コンパクトでキーが少ないことには興味がなかった</li>
<li>2006年頃 ストレートネック</li>
<li>2011年頃 Realforce 87UB</li>
<li>ファンクションキーが欲しい</li>
<li>KDE ではグローバルショートカットを多用</li>
<li>カーソルキーも欲しい</li>
<li>静電容量無接点方式でファンクションキーのついている、テンキーのないキーボードとして Realforce 87UB</li>
<li>2015年〜 ErgoDox + ErgoDox EZ</li>
<li>セパレートによるリラックスした姿勢</li>
<li>HHK Pro や Realforce は良いキーボードだが、長時間タイプすると肩や腕が疲れる</li>
<li>手首の角度</li>
<li>水平ではなくろくろの角度が自然</li>
<li>親指の活用</li>
<li>ErgoDox では左右 6 (8?) つずつ</li>
<li>究極のカスタマイズ性</li>
<li>すべてのキーをカスタマイズ可能</li>
<li>ErgoDox Configurator</li>
<li>全ての指に負担を分散</li>
<li>レイヤー機能</li>
<li>キー数が足りない分はレイヤーで補う</li>
<li><p>カスタマイズは永遠に続く</p></li>
<li><p><a href="http://www.topre.co.jp/products/elec/keyboards/features.html">http://www.topre.co.jp/products/elec/keyboards/features.html</a> の 入力部の構造 の説明</p></li>
<li>部品の写真で説明</li>
<li>入力部の構造 の下の 荷重特性 の話</li>
<li>キーボード配列が斜めにずれているのはタイプライターのハンマーが重ならないようにしていたのが由来</li>
<li>ErgoDox のセパレートの話</li>
<li>某大学教授は HHKB 2台で&#8221;エルゴノミック&#8221;</li>
<li>Kinesis の縦に並んでいるのは最初は違和感があったが慣れたら他のキーボードとの使い分けも問題なくなった</li>
<li>親指でシフトキーの話</li>
<li>Kinesis は凹んでいるが逆に山になっているキーボードを使ったことがある人はいるかというアンケートをしてみたら、いなさそうだった。</li>
<li><p>ErgoDox でレイヤー切り替えを親指で、数字キーのところがレイヤーが切り替わるとファンクションキーになるようにしている話</p></li>
<li><p>ハードウェアよりの話に戻す</p></li>
<li>ロールオーバーの話</li>
<li>USB の規格で制限がある</li>
<li>ロールオーバーというのはキーの同時押しのときの話</li>
<li>キートップの材質の話</li>
<li>輪島塗で 50 万円の世界一高いキーボード</li>
<li><p>フットペダルの話は時間がないので省略</p></li>
<li><p>会場から質問タイム</p></li>
<li>耐久性の話があったが、使い込めば手になじむというのはどうなのかという話</li>
<li>貴重な意見をありがとうございます</li>
<li>人間の方が訓練されているのではないかという説</li>
<li>左手のみとか右手のみとかの話</li>
<li>ErgoDox の USB チップのメーカーがなんとか (よくわからなかった)</li>
<li>Dvorak 配列は片手用がある</li>
<li>無刻印の日本語キーボードが欲しいという話</li>
<li>HHKB はキートップも別買いできるという返答</li>
<li>ErgoDox を使うとき、肘は固定しているのかという話</li>
<li>パームは固定しているが、肘は固定してない</li>
<li>アームレストにはバナナがちょうどいいらしいです。 <a href="https://twitter.com/MiUKi_None/status/733594800608305152">https://twitter.com/MiUKi_None/status/733594800608305152</a></li>
</ul>


<h2>昼休み</h2>

<div style="float:right">
<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4274219151&amp;linkId=6592721f04587dcd0524636667beb5a4"></iframe>
</div>


<ul>
<li>この時間に 3F に T シャツ引換に行きました。</li>
<li>「<a href="http://amzn.to/2bUWNxg">プログラミングElixir</a>」を買いました。消費税分割引で 2,800 円でした。</li>
<li>さくらのクラウドのクーポン (2万円分) をもらいました。今まで何度も使う前に失効させてしまっているので、今度こそちゃんと使いたいと思いました。</li>
<li>フォーチューンクッキーをもらったら、これもさくらインターネットのものでした。</li>
</ul>


<h2>Dynamic Typing 再考</h2>

<ul>
<li>登壇者紹介</li>
<li>各言語の詳しい人</li>
<li>再考 は 最高 とかけている</li>
<li>動的型付けとは何か</li>
<li><a href="http://amzn.to/2bObH9O">TAPL こと型システム入門</a></li>
</ul>


<blockquote><p>「動的型付けされる」といった言い回しは 誤っているといって差し支えなく、おそらく「動的検査される」と言い換えるべきであるが、標準的に使われる用語法である。
型システム入門 2 ページより引用</p></blockquote>

<ul>
<li>静的型付け vs 動的型付け</li>
<li>Lightweight Language</li>
<li>もともとは Dynamic Language だった</li>
<li>1980年代: 動的 (Smalltalk)</li>
<li>1990年代: 静的 (C++, Java)</li>
<li>2000年代: 動的 (LL, Objective-C)</li>
<li>2010年代: 静的 (Scala, Go, Swift, Kotlin)</li>
<li>2020年代: ????</li>
<li>どちらが良いのか?</li>
<li>結局好みの問題になる</li>
<li>現代の動的型付け言語: JavaScript, Ruby, Smalltalk</li>
<li>Dynamic Typing 再考 JavaScript 編</li>
<li>AltJS 乱世の生き残りは『型』</li>
<li>TypeScript (MS), Flowtype (Facebook), Closure Compiler (Google)</li>
<li>背景</li>
<li>他の便利機能は ES6 で満足された</li>
<li>JavaScript での大規模開発が一般的に</li>
<li>ブラウザでは JS 以外の選択肢がない</li>
<li>型の付け方</li>
<li>TypeScript: 後置型修飾</li>
<li>Closure Compiler: JSDoc</li>
<li>Flowtype: 後置型修飾 or 独自コメント</li>
<li>どれも JavaScript に変換が必要</li>
<li>Status of Static Typing in ECMAScript <a href="https://ecmascript-daily.github.io/pages/status-of-static-typing-in-ecmascript/">https://ecmascript-daily.github.io/pages/status-of-static-typing-in-ecmascript/</a></li>
<li>どれも午前中の説明で出てきた Stage 0 で終了している</li>
<li>TypeScript は言語、 Closure Compiler と Flowtype はチェックツール</li>
<li>ECMAScript 4 での失敗があるので後方互換性に問題のある変更は入りにくそう</li>
<li>もともと型定義がないので、ライブラリで困る</li>
<li>TypeScript はコミュニティベースで頑張っている</li>
<li>Flowtype などは互換性がないので TypeScript の資産は流用できない</li>
<li>TypeScript の型定義はライブラリによって品質がバラバラ、ライブラリのバージョンアップに弱い</li>
<li>Flowtype はライブラリごと再開発している</li>
<li>jQuery ぐらいメジャーだとどれでも対応しているが power assert ぐらいだと微妙</li>
<li>標準ライブラリや DOM は割と明確に型が決まっている</li>
<li>完全に動的なものだと型付けがあまり役に立たない</li>
<li>ES6 で class が入ったので型付けに優しくなっている</li>
<li>まつもとさん: JavaScript のようにみんなでやっていると意思の統一が難しそう</li>
<li>梅澤さん: JavaScript 関連については今は様子見中</li>
<li>TypeScript は一定のレベルにきた感じ</li>
<li>まつもとさん</li>
<li>80年代は Smalltalk や Lisp のような動的なものしかなかった</li>
<li>C++ や Java やリスコフの置換原則などがでてきた</li>
<li>DRY 原則</li>
<li>duck typing</li>
<li>型を書かなくてもプログラムは動く</li>
<li>動いているプログラムに型を書くのは冗長で DRY 原則に反する</li>
<li>IO クラスと書いてしまうと IO のサブクラスではない IO のふりをするオブジェクトを渡せなくなる</li>
<li>未来に対する可能性を閉じない</li>
<li>静的型と動的型の振り子は20年周期ぐらいと感じている</li>
<li>Ruby 3 は構想中</li>
<li>静的な型チェックは入れたい</li>
<li>ポリシーは絶対に型を書きたくない</li>
<li>具体的な型を書くというのは脳の負荷が高いので Lightweight (Language) ではない</li>
<li>コンパイラが矛盾を指摘してくれるようにしたい</li>
<li>ライブラリはテストを書くはずなので、その実行時の情報を蓄積すれば IDE の補助やコンパイル時の型チェックに使えるのではないか</li>
<li>1.8 から 1.9 の非互換があったがみんな移行してくれた、 3 倍ぐらい高速化していたからではないか (ベンチマークによっては 50 倍ぐらい)</li>
<li>実装はまだ</li>
<li>Erlang のダイアライザーではコメントで書くものを実行時の情報でやろうとしている</li>
<li>普通に書かせると nominal typing になるが structual typing にしたい</li>
<li>String と書くと String のメソッドすべてを実装しないと通らないとかいうのは避けたい</li>
<li>梅澤さん: Smalltalk の話に似ている部分があった (型は書きたくないという感じ)</li>
<li>Smalltalk 80 よりも Smalltalk 76 の方が Ruby に似ている</li>
<li>梅澤さん</li>
<li>Smalltalk とは</li>
<li>ミニマリズムの言語</li>
<li>すべてはオブジェクト</li>
<li>オブジェクトがメッセージ送信する</li>
<li>の2つのみで成り立つ</li>
<li>プログラミング言語の壁</li>
<li>使う人、作る人、言語を作る人</li>
<li>Smalltalk には上の区別がない</li>
<li>自由の世界の重要性</li>
<li>デモ: <a href="http://www.slideshare.net/umejava/multilines">http://www.slideshare.net/umejava/multilines</a></li>
<li><a href="http://www.slideshare.net/umejava/supersupersubsub">http://www.slideshare.net/umejava/supersupersubsub</a> は時間がないので省略</li>
<li>静的型の導入</li>
<li>Typed Smalltalk (1988)</li>
<li>StrongTalk (1993)</li>
<li>SmallInterfaces (2000)</li>
<li>Gradualtalk (2014)</li>
<li>産業界では実のところあまり困っていない</li>
<li>オブジェクトが答えてくれる</li>
<li>ALLSTOCKER.com by SORABITO</li>
<li>バックエンドは Smalltalk でフロントエンドは JavaScript を普通に書いている</li>
<li>関係ないけど SqueakJS というのもあるという紹介</li>
<li>会場から質問 (1個だけ)</li>
<li>型はプログラマの意図を伝えるもの、動的型ではユニットテストが相当するのではないか、DRY 原則との関連はどうか</li>
<li>まつもとさん: テストも本当は書きたくないが、必要悪として書いている</li>
</ul>


<h2>休憩</h2>

<ul>
<li>T シャツの引き換えやキーボードの展示などの 3F はこの時間まで</li>
</ul>


<h2>Kotlin vs Swift</h2>

<ul>
<li><p>新言語はモバイル開発をどう変えるか</p></li>
<li><p>言語仕様や特長, 開発者へのメリット</p></li>
<li>Kotlin</li>
<li>そもそも Kotlin とは? Better Java</li>
<li>Kotlin の特徴: 簡単, Interop, Android, 安全</li>
<li>簡単: クラスとプロパティ</li>
<li>簡単: データクラス</li>
<li>簡単: 拡張関数</li>
<li>安全: Null安全</li>
<li>モバイル開発者にとってのメリット: Interop, Android, 効率</li>
<li>Swift</li>
<li><a href="https://github.com/kishikawakatsumi/KeychainAccess">https://github.com/kishikawakatsumi/KeychainAccess</a></li>
<li>Swift とは?</li>
<li>2014年のWWDCで発表された</li>
<li>C, Objective-C と極めて高い互換性がある</li>
<li>2015年からオープンソース</li>
<li>Swift の言語仕様や特長</li>
<li>Statically typed</li>
<li>Strongly typed</li>
<li>動的な性質はほとんどない</li>
<li>動的な性質が使いたい場合は Objective-C ランタイムを使う</li>
<li>No Garbage Collections</li>
<li>Playground (超すごい REPL)</li>
<li>型安全</li>
<li>Statically typed</li>
<li>Strongly typed</li>
<li>Casting (<code>as?</code>)</li>
<li>Optional Type</li>
<li>モダンな言語仕様</li>
<li>Type Inference (型推論)</li>
<li>Optional Type</li>
<li>Generics</li>
<li>Pattern Matching</li>
<li>First-class functions</li>
<li>Operator Overloading</li>
<li>Protocol Extensions</li>
<li>Open Source</li>
<li>IBM Swift Sandbox</li>
<li>Serverside Swift</li>
<li>Swift Evolution</li>
<li>基本データ型</li>
<li>No GC!</li>
<li>Automatic Reference Counting (ARC)</li>
<li>循環参照が解放できない</li>
<li>オブジェクトの解放が予測可能</li>
<li><p>Playground (超すごい REPL) はあとで</p></li>
<li><p>会場アンケート</p></li>
<li>Kotlin 使っている方: いない?</li>
<li>Swift 使っている方: 少ない?</li>
<li>Objective-C 使っている方: 少ない?</li>
<li><p>モバイル開発している方: そもそも少ない?</p></li>
<li><p>注意点や落とし穴</p></li>
<li>Kotlin</li>
<li>Java用ツールやフレームワークまわり</li>
<li>Kotlin コードのコンパイル後の姿を想像するスキルが求められる</li>
<li>例えば JUnit</li>
<li>static field に <code>@DataPoints</code> をつけたい</li>
<li>companion object と <code>@JvmField</code> を使う</li>
<li>Swift</li>
<li>ソースコード・バイナリ互換性</li>
<li>Swift のバージョンアップに対応するのが大変</li>
<li>50M ぐらいのランタイムをみんな抱えている</li>
<li>コンパイラの安定性</li>
<li>Segmentation Fault: 11</li>
<li><a href="https://github.com/practicalswift/swift-compiler-crashes">https://github.com/practicalswift/swift-compiler-crashes</a></li>
<li>コンパイラが検出しない変更</li>
<li>エラーメッセージがわかりにくい</li>
<li><p>リファクタリング機能がまだない</p></li>
<li><p>今後のバージョンアップ</p></li>
<li>Kotlin</li>
<li>バージョン1.1で追加予定の機能</li>
<li>コルーチン、型エイリアス、Bound Callable Reference, etc.</li>
<li>Swift 3</li>
<li>API デザインガイドライン</li>
<li>Objective-C API との親和性 (より Swift らしく)</li>
<li>構文における一貫性の向上</li>
<li>ツールチェーンの安定化</li>
<li>パフォーマンス</li>
<li>メッセージの改善</li>
<li>Swift 3.x (Spring 2017), Swift 4 (Fall 2017)</li>
<li>Source/ABI 安定化</li>
<li>品質とパフォーマンスの向上</li>
<li>Generics の高機能化</li>
<li>Memory ownership model</li>
<li>並列プログラミングモデル</li>
<li>Reflection</li>
<li><p>C++</p></li>
<li><p>フリートーク</p></li>
<li>Swift で Objective-C を嫌がっていた Web フロントエンド開発者が iOS アプリも開発してくれるようになった。</li>
<li>Kotlin でコード量が減った。コレクション操作とかサードパーティライブラリなどが不要になった。 Null の扱いに安心感がある。</li>
<li>会場から</li>
<li>Kotlin の IDE は? Java だと Android Studio</li>
<li>Android Studio に Kotlin のプラグインがある。</li>
<li>IntelliJ IDEA</li>
<li>Swift と C/Objective-C との親和性。ダブルポインタ(?)で困った。</li>
<li>回答聞き取れず</li>
<li>Kotlin と Swift との関係性。 iOS と Android の両対応したいときとか。</li>
<li>GUI のフレームワークの思想やコンセプトが違いすぎるので、両方やるのが無難</li>
<li>どちらもサーバー側もできる。たとえば Kotlin は Servlet とかもできる。</li>
<li>Swift のサーバー側はまだ厳しい。 Objective-C のランタイムのない環境はまだまだ。</li>
<li>両対応するために JavaScript という選択肢もあるが、どちらにしろ茨の道</li>
<li>Playground の話</li>
<li>iOS 10 から iPad でも動く</li>
<li>iPad の Playground のデモ</li>
<li>補完とかもしっかり動く</li>
<li>Drag and Drop で編集とか</li>
</ul>


<h2>抽選</h2>

<ul>
<li>恒例のボール投げ</li>
<li>今年はもらえなかった</li>
</ul>


<h2>エンディング</h2>

<ul>
<li>恒例の会場の写真などが入っていて当日作成されたビデオ上映</li>
<li>アンケートのお願い <a href="http://ll.jus.or.jp/2016/enquete">http://ll.jus.or.jp/2016/enquete</a></li>
</ul>


<h1>LLoT Night</h1>

<p>会場が地下ということもあり、電波が入らなかったのと、食事中ということもありメモがとれませんでした。</p>

<h2>フロントエンドだめ自慢</h2>

<ul>
<li>React.js と Riot.js の話でした。</li>
<li><a href="https://speakerdeck.com/cognitom/llot-night-riot-dot-js">https://speakerdeck.com/cognitom/llot-night-riot-dot-js</a></li>
<li>Riot.js は Qiita の記事で見たことがあると言う程度だったので、会場に Riot.js を知っている人という問いかけがあったときに一応手をあげました。</li>
<li>Riot.js はコアコミッターが砂漠に消えたという話が印象深かったです。</li>
<li>Riot.js はコンパイラが正規表現ということで、若干の不安を感じます。</li>
<li>Riot.js の innerHTML を使っているというのは、どういう点がダメなのかわかりませんでした。</li>
<li>React の方はどういう話だったのか思い出せませんでした。(資料公開待ち)</li>
</ul>


<h2>帰ってきたデモ自慢</h2>

<h3>5分で出来るIoT</h3>

<p>デモがうまく動かず、結局あらかじめ用意していた動画を流して終了でした。</p>

<h3>プロジェクト°D ﾂﾜﾓﾉどもが夢の跡</h3>

<p>みどころに「昨年のプロジェクト℃の続編」とありましたが、冒頭ではどいういう話か思い出せませんでしたが、内容を聞けばそういう話もあったなあと思い出しました。</p>

<p>結局デモはなかった?</p>

<h3>Googleカレンダーで図書館の貸出予約状況を管理するLiblendrsv(Ruby)</h3>

<ul>
<li>本借りすぎじゃないかと法林さんからのツッコミがありましたが、その通りだと思いました。</li>
<li>デモ自体はブラウザーが勝手に動いて面白そうな感じだったが、ウインドウがプロジェクター側にちゃんと出ていなくて、移動させてくる必要があったりして、ちょっと残念な感じでした。</li>
<li><a href="https://github.com/hotuta/Liblendrsv">https://github.com/hotuta/Liblendrsv</a></li>
<li>一貫して Calendar を Calender と間違っているのが気になりました。</li>
<li>pit というパスワードを別途管理するライブラリは存在は知っていたけど、使ったことはないなあと思いました。</li>
</ul>


<h2>エンディング</h2>

<ul>
<li>19:45頃</li>
<li>昼の部と違って音楽のみ</li>
<li>再度アンケートのお願い <a href="http://ll.jus.or.jp/2016/enquete">http://ll.jus.or.jp/2016/enquete</a></li>
<li>会場が 20:00 までなのできりのいいところで帰るようにという話</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[llrrに参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2015-09-05-llrr.html"/>
    <updated>2015-09-05T10:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/llrr</id>
    <content type="html"><![CDATA[<p><a href="http://ll.jus.or.jp/2015/">LL Ring Recursive</a>
に参加しました。</p>

<!--more-->


<p>以下はそのメモです。</p>

<h2>Language Update</h2>

<ul>
<li>入場曲が笑点のテーマ</li>
<li>Python は他のイベントが重なっていて参加なし</li>
<li>最近の動向</li>
<li>ES6 から名前が 2015 になった</li>
<li>PHP7 がもうすぐ出る</li>
<li>Perl5 最近は定期リリース、 Perl6 は今年のクリスマスに確定</li>
<li>Ruby 2.x は最近は速度向上がメイン</li>
<li>夢の Ruby 2.0 (悪夢?)</li>
<li>Python よりは 2.0 への移行がうまくいった</li>
<li>JavaScript: arrow function, class</li>
<li>babel というトランスパイラを使いましょうという話</li>
<li>PHP7 は性能改善</li>
<li>Perl6 意味不明なオペレーターがたくさん (内積とか)</li>
<li>ドットはメソッド呼び出しで文字列連結がチルダ</li>
<li>Ruby はできるだけ移行措置を設けて非互換を入れていく</li>
<li>文字列リテラルのデフォルトを immutable にする magic comment の追加予定</li>
<li>古い JavaScript の書き方は JSLint や TypeScript などでチェック</li>
<li>PHP は <code>register_global</code> のようなものはなくなっていくが</li>
<li>POSIX 正規表現エンジンは削られて PCRE と Oniguruma の 2 つになる</li>
<li>Perl5 と Perl6 は非互換</li>
<li>Perl5 でも意味がない機能は削っていく</li>
<li>my の中に my をつけられるとか</li>
<li>Ruby は古いのをばっさり削ったのは 2.0 リリースの頃なのであまり覚えていない</li>
<li>他言語との比較</li>
<li>Ruby は Rails のためのランタイム</li>
<li>Perl6 は Perl6 のインタプリタ自体が Perl6 のサブセットで実装されている <a href="https://github.com/perl6/nqp/">https://github.com/perl6/nqp/</a></li>
<li>JVM でも動く</li>
<li>PHP は新機能を入れるのにも投票</li>
<li>JavaScript はいろんなところで動いている</li>
<li>Acrobat Reader とか地デジとか</li>
<li>Perl6 は 100 倍遅い</li>
<li>JavaScript は数値が浮動小数点数と仕様で決まっている</li>
<li>64 bit 整数が扱えない</li>
<li>文字列操作が mutable か immutable かは言語が作られた時代によるのではないかという話</li>
<li>sourcemap を使うと良い</li>
<li>ビット演算をすると 32 bit の符号なし整数になるので <code>x | 0</code> で型を指定するテクニックが asm.js などで使われている</li>
<li>Perl6 のラリーが考えた最強の正規表現</li>
<li>Ruby の <code>next_float</code></li>
<li>質問コーナー</li>
<li>JavaScript は <code>C++</code> のように記号の組み合わせの lambda のようなものではなく予約語 (<code>class</code>) を先に決めておいてあとで機能拡張している</li>
<li>ブラウザの JavaScript と node の JavaScript の違いとか node が出てきて module が整備されるようになったとか</li>
<li>マルチコアとか Erlang の話</li>
<li>文末が <code>.</code> は古い言語で <code>;</code> の方が新しい言語</li>
<li><code>.</code> の言語は <code>.</code> 抜けのデバッグではまる</li>
<li>Ruby では JRuby を使うかマルチプロセスで頑張る</li>
<li>golang で拡張を書いて使うという案も</li>
<li>今後の予定</li>
<li>JavaScript: babel が流行ってほしい</li>
<li>PHP はあまり愛を語っていない</li>
<li>PHP7.1 に入るかもしれない JIT コンパイラにご期待ください</li>
<li>Perl6 が出る</li>
<li>Ruby は 2.3 がクリスマスに出る予定で、それに向けて新機能の募集期間</li>
</ul>


<h2>IoT時代のLLスタック</h2>

<ul>
<li>入場曲がターミネーター</li>
<li>「それスマホでよくないですか?」</li>
<li>Round 1 IoT Circumstance</li>
<li>注目の国内/海外プレイヤ</li>
<li>注目の国内/海外トレンド</li>
<li><a href="http://itpro.nikkeibp.co.jp/atcl/news/15/040101147/" title="Amazon.com、日用品をボタン1つで注文できる小型機器「Dash Button」">Amazon.com、日用品をボタン1つで注文できる小型機器「Dash Button」</a></li>
<li>Amazon Echo</li>
<li>パイプ椅子1個壊すと4000円と書いてある控え室</li>
<li><a href="http://jp.techcrunch.com/2015/08/22/20150821smartthings-support-is-coming-to-amazon-echo/" title="Amazon EchoがSmartThingsのホームオートメーションをサポート">Amazon EchoがSmartThingsのホームオートメーションをサポート</a></li>
<li>Round 2 How about LL for device</li>
<li>組み込み言語との違い</li>
<li>なんでわざわざ LL (特に JS) なのか?</li>
<li><a href="http://konashi.ux-xu.com/">konashi</a>, tessel, 8pino</li>
<li>jsdo.it との連携</li>
<li><a href="https://twitter.com/okaji/status/640002760922939392" title="スマホで提供できないユーザーニーズを見つけたらそれはセンサーやらアクチュエータなりを積んだ専用機作ればいいよね">スマホで提供できないユーザーニーズを見つけたらそれはセンサーやらアクチュエータなりを積んだ専用機作ればいいよね</a></li>
<li>Perl でミサイル</li>
<li>mbed</li>
<li>開発環境はクラウドにある</li>
<li>Edison</li>
<li><code>rm -rf</code> ができるほど Linux が動いている</li>
<li>Firefox OS が動いているボード <a href="https://twitter.com/lljapan/status/640005059808395264" title="KDDI Open Web Board">KDDI Open Web Board</a></li>
<li>Firefox OS のスマホ用に作ったものがそのまま動く</li>
<li>Round 3 How about Device For LL</li>
<li>デバイスの制約について</li>
<li>制御の難しさ・楽しさ</li>
<li>Raspberry Pi 2</li>
<li>ハードウェアは特化したものじゃないと売れないが、それぞれに専用アプリがあると大変 (アカウント管理とか)</li>
<li>Final Round Future of IoT</li>
<li>我々は IoT の延長上に</li>
<li>鉄●28号を目指すのか</li>
<li>ドラ●もんを夢見るのか</li>
<li>ロボットに操られてる人間 (ルンバのためにとか)</li>
<li>Extra Round</li>
<li>ブレッドボードの未来</li>
<li>ボードゲームウェイ多すぎ</li>
<li>通信プロトコル多すぎ</li>
<li>BLE/MQTT/920MHz/6LoPAN</li>
<li>WebSocket/WebRTC</li>
<li>Questions From Audience</li>
<li><p>時間が来たので引き分け終了</p></li>
<li><p><a href="http://memoclip.y-okajima.com/">http://memoclip.y-okajima.com/</a> via <a href="https://twitter.com/okaji/status/640035516272906241">https://twitter.com/okaji/status/640035516272906241</a></p></li>
</ul>


<h2>昼休み</h2>

<p>LT に申し込みました。</p>

<h2>パネルディスカッション：エンジニア不足はいつまで続くのか</h2>

<ul>
<li>本当にエンジニア不足?</li>
<li>IPAの「IT人材白書」</li>
<li>IT人材不足の原因</li>
<li>『エンジニアtype』について</li>
<li><a href="http://engineer.typemag.jp/article/career-change" title="過去2年で最もチャンス広がる「未経験・異業種」転職事情～人生のコネクティング・ザ・ドッツを成就させるには ">過去2年で最もチャンス広がる「未経験・異業種」転職事情～人生のコネクティング・ザ・ドッツを成就させるには </a></li>
<li>「未経験」3つのパターン</li>
<li>業種未経験 SIなど異業種から技術者採用</li>
<li>職種未経験 学生インターンほか若手採用</li>
<li>OSS未経験 「働き方自由」を売りにする場合</li>
<li>焼きそばじゃなくてチャーハン</li>
<li>みんなネガティブな話すきすぎ</li>
<li><a href="http://yoshidashingo.hatenablog.com/entry/2015/09/05/113806" title="エンジニア不足はいつまで続くのか（メモ）">エンジニア不足はいつまで続くのか（メモ）</a></li>
<li>企業側がエンジニア文化を理解していないのではないか</li>
</ul>


<h2>LLが支えるデータサイエンスの世界</h2>

<ul>
<li>けんた祭り</li>
<li><a href="http://www.slideshare.net/KentaOono/introduction-to-chainer-ll-ring-recursive">Introduction to Chainer (LL Ring Recursive)</a></li>
<li><a href="https://github.com/pfnet/chainer">https://github.com/pfnet/chainer</a></li>
<li>ディープラーニング</li>
<li>順伝播、逆伝播、パラメータの更新</li>
<li>Chainer</li>
<li>MNIST で手書き文字の認識</li>
<li><a href="http://julialang.org/">プログラミング言語Julia</a></li>
<li><a href="http://julia.tokyo/">JuliaTokyo</a></li>
<li>Jupyter</li>
<li><a href="https://www.juliabox.org/">JuliaBox</a></li>
<li>質疑応答</li>
<li>Chainer の訓練済みのデータの共有について</li>
<li>現状は pickle でダンプしたデータを共有</li>
<li>Chainer の将来</li>
<li>万能なものは無理なので Flexibility 重視</li>
<li>Julia では <code>@</code> から始まるものがマクロ呼び出し</li>
<li>関数名の命名規則 全部小文字</li>
<li><code>!</code> は破壊的な操作を行う関数につける慣習
-<code>quicksort!</code> は破壊的な inplace な sort</li>
<li>Julia の速さ</li>
<li>LLVM フレンドリーなコードをはいている</li>
</ul>


<h2>抽選会</h2>

<p>JavaScript の本が当たりました。</p>

<h2>懇親会 &amp; LT</h2>

<p>3 番目でした。</p>

<p>他の人の LT のメモです。</p>

<ul>
<li>チャーハンではなくあんかけチャーハンでした。</li>
</ul>

]]></content>
  </entry>
  
</feed>
