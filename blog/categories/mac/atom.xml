<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mac | ZnZ Blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-09-20T20:08:30+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Macでirbなどでの文字化けを直した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-20-mojibake-irb-on-mac.html"/>
    <updated>2013-09-20T18:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/mojibake-irb-on-mac</id>
    <content type="html"><![CDATA[<p>基本的には
<a href="http://qiita.com/irohiroki/items/c82657b5cb4bdb2aaac4">rails cで日本語が通らないときの直し方</a>
のやり方そのままで、
one liner としてまとめただけです。</p>

<p>先に結論を書いておくと
<code>install_name_tool -change /usr/lib/libedit.3.dylib $(brew list readline | grep libreadline.dylib) $(ruby -r readline -e 'puts $".grep /readline/')</code>
になりました。</p>

<!--more-->


<h2><code>readline.bundle</code> の探し方</h2>

<p>まず <code>readline.bundle</code> の探し方です。</p>

<p>実際に <code>require 'readline'</code> した時の
<code>$LOADED_FEATURES</code> から
探すのが確実ということで、
<code>ruby -r readline -e 'puts $".grep /readline/'</code>
としました。
試したところ、
<code>Array#grep</code>
で見つかるのが1個だけだったので、
そのまま <code>puts</code> しています。
複数見つかるようならもう少し調整が必要だと思います。</p>

<p><code>
% ruby -r readline -e 'puts $".grep /readline/'
/Users/kazu/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/x86_64-darwin12.4.1/readline.bundle
% otool -L $(ruby -r readline -e 'puts $".grep /readline/')
</code></p>

<h2>readline のインストール</h2>

<p>homebrew を使っているので、
<code>brew install readline</code>
でインストールしました。</p>

<p>インストールされた
<code>libreadline</code>
の場所は
<code>brew list readline | grep libreadline.dylib</code>
で調べました。</p>

<p><code>libedit</code>
が
<code>/usr/lib/libedit.3.dylib</code>
という名前でリンクされているので、
<code>libreadline.6.dylib</code>
という名前を使った方が良いのかもしれませんが、
homebrew でインストールされているパスに
バージョンが含まれていて、
ファイル名にバージョンを含めても意味がないと思って、
バージョンなしにしました。</p>

<p><code>
% brew list readline | grep libreadline.dylib
/usr/local/Cellar/readline/6.2.4/lib/libreadline.dylib
</code></p>

<h2><code>install_name_tool</code></h2>

<p>Qiita の記事にあったように
<code>install_name_tool -change /usr/lib/libedit.3.dylib $(brew list readline | grep libreadline.dylib) $(ruby -r readline -e 'puts $".grep /readline/')</code>
でリンクを変更しました。
念のため、実行前に
<code>ruby -rpp -e 'pp ARGV' --</code>
で実行内容を確認してから実行しました。</p>

<p><code>
% ruby -rpp -e 'pp ARGV' -- install_name_tool -change /usr/lib/libedit.3.dylib $(brew list readline | grep libreadline.dylib) $(ruby -r readline -e 'puts $".grep /readline/')
["install_name_tool",
 "-change",
 "/usr/lib/libedit.3.dylib",
 "/usr/local/Cellar/readline/6.2.4/lib/libreadline.dylib",
 "/Users/kazu/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/x86_64-darwin12.4.1/readline.bundle"]
% install_name_tool -change /usr/lib/libedit.3.dylib $(brew list readline | grep libreadline.dylib) $(ruby -r readline -e 'puts $".grep /readline/')
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu Server 12.04.3 LTS をインストールした]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-15-ubuntu-server-installed.html"/>
    <updated>2013-09-15T20:02:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ubuntu-server-installed</id>
    <content type="html"><![CDATA[<p>自宅サーバーのシステムディスク (sda) が壊れたので、 HDD を入れ替えて、せっかくなのでシステムをきれいな状態にするために <code>ubuntu-12.04.3-server-amd64.iso</code> からインストールし直しました。
その初期設定の話です。</p>

<!--more-->


<h2>インストール準備</h2>

<h3>ISO イメージダウンロード</h3>

<p>まずインストール用の ISO ファイルをダウンロードしました。
<a href="http://www.ubuntu.com/download">Get Ubuntu</a>
からだと海外ミラーでダウンロードが遅かったので、
国内のミラーを探してみたところ、
<code>ftp://ftp.riken.go.jp/Linux/ubuntu-iso/CDs/precise/</code>
だと torrent ファイルや metalink のファイルしか見えなくて、
<code>ftp</code> ではなく <code>http</code> の
<code>http://ftp.riken.go.jp/Linux/ubuntu-iso/CDs/precise/</code>
からだとダウンロード出来ました。</p>

<h3>起動用 USB メモリ準備</h3>

<p>ダウンロードした ISO を <code>dd</code> で USB メモリに書き込んで、そこからインストールしました。
categories につけた Mac を使っている部分はここだけです。</p>

<p>ネットで調べればいろいろ情報がみつかるように
<code>diskutil list</code>
でディスクの番号を確認して、
<code>dd</code> で読み書きします。
<code>rdisk</code> の方が速いらしいので、
実際の書き込みには <code>rdisk</code> を使ったのですが、
パーティションを <code>unmount</code> しておかないと
<code>Resource busy</code> で書き込ませんでした。
eject してしまって <code>diskutil list</code> にも
出てこない状態にしてしまうと読み書き出来ないので、
Finder から取り出したり <code>diskutil unmountDisk</code> だと
ダメでした。</p>

<p>読み込みの例として MBR の部分をバックアップしてダンプしてみました。</p>

<p><code>
% diskutil list
/dev/disk0
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        *251.0 GB   disk0
   1:                        EFI                         209.7 MB   disk0s1
   2:          Apple_CoreStorage                         250.1 GB   disk0s2
   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
/dev/disk1
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:                  Apple_HFS Macintosh HD           *249.8 GB   disk1
/dev/disk2
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        *16.1 GB    disk2
   1:             Windows_FAT_32 NO NAME                 16.1 GB    disk2s1
% sudo dd if=/dev/disk2 of=MF-AU316GBS.mbr bs=512 count=1
% hexdump -C MF-AU316GBS.mbr
00000000  33 c0 8e d0 bc 00 7c fb  50 07 50 1f fc be 1b 7c  |3.....|.P.P....||
00000010  bf 1b 06 50 57 b9 e5 01  f3 a4 cb bd be 07 b1 04  |...PW...........|
00000020  38 6e 00 7c 09 75 13 83  c5 10 e2 f4 cd 18 8b f5  |8n.|.u..........|
00000030  83 c6 10 49 74 19 38 2c  74 f6 a0 b5 07 b4 07 8b  |...It.8,t.......|
00000040  f0 ac 3c 00 74 fc bb 07  00 b4 0e cd 10 eb f2 88  |..&lt;.t...........|
00000050  4e 10 e8 46 00 73 2a fe  46 10 80 7e 04 0b 74 0b  |N..F.s*.F..~..t.|
00000060  80 7e 04 0c 74 05 a0 b6  07 75 d2 80 46 02 06 83  |.~..t....u..F...|
00000070  46 08 06 83 56 0a 00 e8  21 00 73 05 a0 b6 07 eb  |F...V...!.s.....|
00000080  bc 81 3e fe 7d 55 aa 74  0b 80 7e 10 00 74 c8 a0  |..&gt;.}U.t..~..t..|
00000090  b7 07 eb a9 8b fc 1e 57  8b f5 cb bf 05 00 8a 56  |.......W.......V|
000000a0  00 b4 08 cd 13 72 23 8a  c1 24 3f 98 8a de 8a fc  |.....r#..$?.....|
000000b0  43 f7 e3 8b d1 86 d6 b1  06 d2 ee 42 f7 e2 39 56  |C..........B..9V|
000000c0  0a 77 23 72 05 39 46 08  73 1c b8 01 02 bb 00 7c  |.w#r.9F.s......||
000000d0  8b 4e 02 8b 56 00 cd 13  73 51 4f 74 4e 32 e4 8a  |.N..V...sQOtN2..|
000000e0  56 00 cd 13 eb e4 8a 56  00 60 bb aa 55 b4 41 cd  |V......V.`..U.A.|
000000f0  13 72 36 81 fb 55 aa 75  30 f6 c1 01 74 2b 61 60  |.r6..U.u0...t+a`|
00000100  6a 00 6a 00 ff 76 0a ff  76 08 6a 00 68 00 7c 6a  |j.j..v..v.j.h.|j|
00000110  01 6a 10 b4 42 8b f4 cd  13 61 61 73 0e 4f 74 0b  |.j..B....aas.Ot.|
00000120  32 e4 8a 56 00 cd 13 eb  d6 61 f9 c3 49 6e 76 61  |2..V.....a..Inva|
00000130  6c 69 64 20 70 61 72 74  69 74 69 6f 6e 20 74 61  |lid partition ta|
00000140  62 6c 65 00 45 72 72 6f  72 20 6c 6f 61 64 69 6e  |ble.Error loadin|
00000150  67 20 6f 70 65 72 61 74  69 6e 67 20 73 79 73 74  |g operating syst|
00000160  65 6d 00 4d 69 73 73 69  6e 67 20 6f 70 65 72 61  |em.Missing opera|
00000170  74 69 6e 67 20 73 79 73  74 65 6d 00 00 00 00 00  |ting system.....|
00000180  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000001b0  00 00 00 00 00 2c 44 63  18 2e 07 c3 00 00 00 00  |.....,Dc........|
000001c0  31 00 0c fe ff ff 30 00  00 00 50 f6 de 01 00 00  |1.....0...P.....|
000001d0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000001f0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 55 aa  |..............U.|
00000200
%  sudo dd if=Downloads/ubuntu-12.04.3-server-amd64.iso of=/dev/rdisk2 bs=1m
Password:
dd: /dev/rdisk2: Resource busy
%  diskutil unmount disk2s1
Volume NO NAME on disk2s1 unmounted
%  diskutil list
/dev/disk0
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        *251.0 GB   disk0
   1:                        EFI                         209.7 MB   disk0s1
   2:          Apple_CoreStorage                         250.1 GB   disk0s2
   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
/dev/disk1
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:                  Apple_HFS Macintosh HD           *249.8 GB   disk1
/dev/disk2
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        *16.1 GB    disk2
   1:             Windows_FAT_32 NO NAME                 16.1 GB    disk2s1
%  sudo dd if=Downloads/ubuntu-12.04.3-server-amd64.iso of=/dev/rdisk2 bs=1m
665+0 records in
665+0 records out
697303040 bytes transferred in 41.551843 secs (16781519 bytes/sec)
%
</code></p>

<p>この USB メモリを自作マシンにさして起動してインストールすることになります。</p>

<h2>インストール</h2>

<p>インストール作業は暗号化する以外はあまり特殊なことをせずに最小インストールにしました。</p>

<ul>
<li>Del キーで EFI BOIS Menu を開いて、起動メニューを開いて USB メモリからを選んで起動しました。</li>
<li>タスク (tasksel) は何も選択せずにインストールしました。</li>
<li>1TB の HDD (sda) を暗号化 LVM で初期化しました。</li>
</ul>


<h2>初期設定</h2>

<h3>etckeeper</h3>

<ul>
<li><code>sudo aptitude install git</code></li>
<li><code>sudo aptitude install etckeeper</code></li>
<li><code>sudoedit /etc/etckeeper/etckeeper.conf</code> で <code>VCS="git"</code> と <code>GIT_COMMIT_OPTIONS="-v"</code> を設定</li>
<li><code>sudo etckeeper init</code></li>
<li><code>sudo etckeeper commit "Initial commit"</code></li>
</ul>


<h3>ssh</h3>

<p>まず <code>ufw</code> で接続制限をしました。
多段防御の一つ目としてここではポート番号だけの制限にしています。</p>

<ul>
<li><code>sudo ufw enable</code></li>
<li><code>sudo ufw allow 22/tcp</code></li>
<li><code>sudo ufw limit 22/tcp</code>

<ul>
<li><code>サポートされていない IPv6 'limit' ルールを飛ばします</code> と出るので、
IPv6 用に allow と limit の両方を実行しています。</li>
</ul>
</li>
<li><code>sudo ufw allow 3843/tcp</code>

<ul>
<li>22 以外のポートでも待ち受けるなら、それも許可します。</li>
<li>ここでは例として 3843 番ポートにしています。
(実際に使っているポート番号は違います。)</li>
<li>アタックは少なそうなので、<code>limit</code> は付けていません。</li>
</ul>
</li>
</ul>


<p>次に tcp wrapper で接続制限をしました。
ここでは接続元の制限をしています。
接続元として使っていて、逆引きが <code>.jp</code> でないところなどは
別途 <code>sshd: 10.1.2.3</code> のように許可していきます。</p>

<p><code>
$ egrep '^[^#]' /etc/hosts.deny
ALL: ALL
$ egrep '^[^#]' /etc/hosts.allow
sshd: 127.0.0.1 [::1]
sshd: 192.168.0.0/16
sshd: .jp
</code></p>

<p>最後に <code>/etc/sshd/sshd_config</code> の設定例です。
<code>ssh_config</code> とは別物なので注意が必要です。</p>

<ul>
<li><code>Port 3843</code> を追加します。

<ul>
<li>複数ポートで待ち受けるには <code>Port</code> 設定の行を複数書けば良いです。</li>
</ul>
</li>
<li><code>PermitRootLogin no</code> にします。
<code>root</code> ログインが必要なら
<code>PermitRootLogin forced-commands-only</code> か
<code>PermitRootLogin without-password</code> にすればよく、
公開サーバーで <code>PermitRootLogin yes</code> にする必要はないはずです。</li>
<li><code>AllowUsers firstuser</code> で最初のユーザーのログインを許可します。</li>
<li>ログインするユーザーの <code>.ssh/authorized_keys</code> の設定をしてから
<code>PasswordAuthentication no</code> の設定をします。
<code>ChallengeResponseAuthentication no</code> になっていることを
確認しておかないと
<code>UsePAM yes</code> との組み合わせで <code>keyboard-interactive</code> 認証が
発生してパスワードで入れてしまうことがあるので注意が必要です。
昔はこれが原因で公開鍵認証のみに制限出来ていないという話が多かった気がします。</li>
</ul>


<h3>quota 設定</h3>

<p>ユーザー ID ごとのディスク使用量の把握のために、 <code>quota</code> を設定します。</p>

<p><code>/etc/fstab</code> の
<code>errors=remount-ro</code> を
<code>errors=remount-ro,noatime,usrquota,grpquota,user_xattr</code>
に書き換えます。</p>

<p><code>quota</code> パッケージを入れておけば、次回起動時に自動で
<code>quotacheck</code> が動いて <code>repquota</code> が使えるようになります。
ファイルが多いと <code>quotacheck</code> に時間がかかるので、
出来るだけ最小インストールでファイルが少ないうちに
有効にした方が時間の節約になります。</p>

<h3>IP アドレス設定</h3>

<p><code>bridge-utils</code> パッケージを入れて、
<code>sudoedit /etc/network/interfaces</code> で
<code>br0</code> ありの固定 IP アドレスの設定に変更しました。</p>

<p>```</p>

<h1>The primary network interface</h1>

<p>auto eth0
iface eth0 inet manual
auto br0
iface br0 inet static</p>

<pre><code>address 192.168.xx.yy
netmask 255.255.255.0
gateway 192.168.253.1
dns-nameservers 192.168.xx.yy
dns-search home.example.jp
bridge_ports eth0
bridge_stp off
bridge_fd 0
bridge_maxwait 0
</code></pre>

<p>```</p>

<h3>パスフレーズなし起動設定</h3>

<p>リモートから再起動した時などに止まってしまうことを防ぐ設定をします。</p>

<p>これは鍵を暗号化の外に平文で置いておくということで、
セキュリティ的には弱くなってしまうので、
そのトレードオフを許容出来るかどうかを
考えておく必要があります。</p>

<p><code>
$ sudo dd if=/dev/random of=/root/sda5_crypt.key bs=512 count=4
dd: warning: partial read (128 bytes); suggest iflag=fullblock
0+4 レコード入力
0+4 レコード出力
447 バイト (447 B) コピーされました、 0.000294833 秒、 1.5 MB/秒
$ sudo chmod 400 /root/sda5_crypt.key
$ sudo cryptsetup luksAddKey /dev/sda5 /root/sda5_crypt.key
パスフレーズを入力:
$ sudo mv /root/sda5_crypt.key /boot/sda5_crypt.key
$ sudoedit /etc/crypttab
$ sudo update-initramfs -u
update-initramfs: Generating /boot/initrd.img-3.8.0-30-generic
</code></p>

<p>Ubuntu 12.04 では、
<code>crypttab</code> は
<code>sda5_crypt UUID=(/dev/sda5のUUID) none luks</code>
を
<code>sda5_crypt UUID=(/dev/sda5のUUID) /dev/disk/by-uuid/(/bootのUUID):sda5_crypt.key luks,keyscript=/lib/cryptsetup/scripts/passdev</code>
のように書き換えます。
<code>/bootのUUID</code> は <code>/etc/fstab</code> を参照するのがわかりやすいと思います。
<code>by-uuid</code> だけではなく <code>by-label</code> などのパスも使えると思いますが、
一番誤動作が少なそうな <code>by-uuid</code> を使っています。</p>

<p>その後、
<code>update-initramfs</code>
で
<code>/boot/initrd.img-*</code>
に変更を反映させておく必要があります。</p>

<h3>GRUB で止まるのを防ぐ</h3>

<p><code>/etc/default/grub</code> に
<code>GRUB_RECORDFAIL_TIMEOUT=5</code>
のような設定を追加しておくと
起動時の GRUB で止まることがなくなります。</p>

<p>なぜか前回起動失敗扱いになってしまって、
GRUB で止まってしまう環境があったのですが、
この設定を入れてからは止まらなくなりました。</p>

<p><code>/etc/default/grub</code> の変更は
<code>update-grub</code> で
<code>/boot/grub/grub.cfg</code> に
反映させる必要があります。</p>

<p><code>
$ sudoedit /etc/default/grub
$ sudo update-grub
Generating grub.cfg ...
Found linux image: /boot/vmlinuz-3.8.0-30-generic
Found initrd image: /boot/initrd.img-3.8.0-30-generic
Found linux image: /boot/vmlinuz-3.8.0-29-generic
Found initrd image: /boot/initrd.img-3.8.0-29-generic
Found memtest86+ image: /memtest86+.bin
done
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[homebrew の reinstall で使われるオプションの保存場所]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-13-homebrew-used-options.html"/>
    <updated>2013-09-13T21:58:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/homebrew-used-options</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013-09-08-rabbiter-on-mac.html">rabbiter の記事</a>
で、
「一度 <code>--with-curl-ca-bundle</code> 付きでインストールした後だと、以下のようにオプションなしの reinstall でもオプションが付くようです。」
と書きましたが、そのオプションがどこに保存されているのかを調べました。</p>

<!--more-->


<p>実際に調べるのはソースをたどったりして結構大変だったのですが、
最終的に
<code>/usr/local/Cellar/glib-networking/2.36.2/INSTALL_RECEIPT.json</code>
に <code>used_options</code> というキーで保存されているということがわかりました。</p>

<p><code>Cellar</code> はインストールしたファイルの実体が入るところなので、
あらかじめダミーの <code>INSTALL_RECEIPT.json</code> を用意しておいて
オプションなしの <code>brew reinstall</code> の時に使われるオプションを
埋め込んでおくという用途に使うのには向いていないということが
わかりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac で rabbit が動かなくなったので brew reinstall したら直った]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-09-rabbit-on-mac.html"/>
    <updated>2013-09-09T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rabbit-on-mac</id>
    <content type="html"><![CDATA[<p>いつの間にか動かなくなっていた rabbit (2.1.1) が <code>brew reinstall</code> で動くようになったという話です。</p>

<!--more-->


<p>現象としては rabbit のウィンドウが出てくるのに無反応で、スライドの内容も表示されないし、クリックにも反応せず、 <code>Ctrl+C</code> での停止もきかないので <code>kill -KILL</code> で強制終了するしかないという状態でした。</p>

<p>現象から考えて、リンクしているライブラリとの不整合が原因だろうと予想してインストール手順をやり直すことにしました。</p>

<p><a href="http://rabbit-shocker.org/ja/install/homebrew.html">Mac OS XでHomebrewを使ったインストール方法</a> の「brew install と brew link の実行」の手順を以下のようにちょっと変更してやり直したら動くようになりました。</p>

<p><code>
brew reinstall cairo
brew unlink cairo
brew link cairo
brew unlink pixman
brew link --overwrite pixman
brew reinstall pango
brew reinstall gtk+
brew reinstall poppler --with-glib
</code></p>

<p>これでも動かなければ gem も uninstall して install し直す予定でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac で rabbiter が動いた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-08-rabbiter-on-mac.html"/>
    <updated>2013-09-08T21:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rabbiter-on-mac</id>
    <content type="html"><![CDATA[<p>homebrew を使った Mac OS X 10.8.4 環境で rabbiter (2.0.1) が動くようになりました。</p>

<!--more-->


<p>rabbiter の issues に報告していた
<a href="https://github.com/rabbit-shocker/rabbiter/issues/1">show_uri の問題</a>
と
<a href="https://github.com/rabbit-shocker/rabbiter/issues/2">glib-networking のルート証明書の問題</a>
が解決したので、 <code>glib-networking</code> を <code>brew reinstall glib-networking --with-curl-ca-bundle</code> でインストールすれば使えるようになりました。
ちなみに、初回のインストールでも <code>brew install</code> ではなく <code>brew reinstall</code> で大丈夫のようです。</p>

<p>以下のように <code>configure</code> に <code>--with-ca-certificates</code> が付いていれば使えます。</p>

<p><code>
% brew reinstall glib-networking --with-curl-ca-bundle
==&gt; Reinstalling glib-networking --with-curl-ca-bundle
==&gt; Downloading http://ftp.gnome.org/pub/GNOME/sources/glib-networking/2.36/glib-networkin
Already downloaded: /Library/Caches/Homebrew/glib-networking-2.36.2.tar.xz
==&gt; ./configure --with-ca-certificates=/usr/local/opt/curl-ca-bundle/share/ca-bundle.crt -
==&gt; make install
🍺  /usr/local/Cellar/glib-networking/2.36.2: 68 files, 352K, built in 18 seconds
</code></p>

<p>以下のように <code>configure</code> に <code>--without-ca-certificates</code> と付いているときは rabbiter が使えません。</p>

<p><code>
% brew reinstall glib-networking
==&gt; Reinstalling glib-networking
==&gt; Downloading http://ftp.gnome.org/pub/GNOME/sources/glib-networking/2.36/glib-networkin
Already downloaded: /Library/Caches/Homebrew/glib-networking-2.36.2.tar.xz
==&gt; ./configure --without-ca-certificates --prefix=/usr/local/Cellar/glib-networking/2.36.
==&gt; make install
🍺  /usr/local/Cellar/glib-networking/2.36.2: 68 files, 352K, built in 21 seconds
</code></p>

<p>一度 <code>--with-curl-ca-bundle</code> 付きでインストールした後だと、以下のようにオプションなしの reinstall でもオプションが付くようです。</p>

<p><code>
% brew reinstall glib-networking
==&gt; Reinstalling glib-networking --with-curl-ca-bundle
==&gt; Downloading http://ftp.gnome.org/pub/GNOME/sources/glib-networking/2.36/glib-networkin
Already downloaded: /Library/Caches/Homebrew/glib-networking-2.36.2.tar.xz
==&gt; ./configure --with-ca-certificates=/usr/local/opt/curl-ca-bundle/share/ca-bundle.crt -
==&gt; make install
🍺  /usr/local/Cellar/glib-networking/2.36.2: 68 files, 352K, built in 18 seconds
</code></p>
]]></content>
  </entry>
  
</feed>
