<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mastodon | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/mastodon/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2018-02-25T12:03:37+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DDD.rb #11 (Rails with React) (Mastodon のコードリーディング) に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-10-mastodon.html"/>
    <updated>2017-05-10T23:59:59+09:00</updated>
    <id>http://blog.n-z.jp/blog/mastodon</id>
    <content type="html"><![CDATA[<p><a href="https://dddrb.doorkeeper.jp/events/60099" title="DDD.rb #11 (Rails with React)">DDD.rb #11 (Rails with React)</a> という Mastodon のコードリーディングに参加したので、そのメモです。</p>

<p>インストールがほとんどでコードリーディングはほとんどできなかったので、大まかな読み方の話だけで、あまり突っ込んだ話はありませんでした。</p>

<!--more-->


<h2>メモ</h2>

<ul>
<li>次回は <a href="https://dddrb.doorkeeper.jp/events/60238" title="DDD.rb #12 RDRA for DDD ワークショップ！ - DDD.rb | Doorkeeper">DDD.rb #12 RDRA for DDD ワークショップ！ - DDD.rb | Doorkeeper</a> (RDRA はラドラと読むらしい)</li>
<li><a href="http://motokase.com/mastodon-matome/" title="マストドン評判とは！SNS初心者が安全にMastodonを楽しむ方法">マストドン評判とは！SNS初心者が安全にMastodonを楽しむ方法</a>の最初の方が参考になる</li>
<li>ローカルで起動するには <a href="https://github.com/tootsuite/mastodon/blob/e2491680e696d2c285a798ec4c66b26d2748df66/docs/Running-Mastodon/Development-guide.md">docs/Running-Mastodon/Development-guide.md</a> のリンク先の <a href="https://github.com/tootsuite/documentation/blob/master/Running-Mastodon/Development-guide.md">Development guide</a> を参照</li>
<li>vagrant も手軽</li>
<li>開発環境のメールは <a href="https://github.com/ryanb/letter_opener">https://github.com/ryanb/letter_opener</a> を使っている</li>
<li>master だと jquery-rails が消えている</li>
<li>master だと .foreman と Procfile.dev で streaming のサーバーなども起動する</li>
<li>今の master は cld3 でエラーになりやすい</li>
<li>基本的に v1.3.3 のタグで試そうという話に</li>
<li>react のルーティングは <code>./app/assets/javascripts/components/containers/mastodon.jsx</code> をみる</li>
<li><code>&lt;Route path='getting-started' component={GettingStarted} /&gt;</code> とか</li>
<li>翻訳が難しい話 (連合とか未収載とか)</li>
<li>docker を使うなら docker-compose.yml を直接書き換える代わりに docker-compose.override.yml が使える</li>
</ul>


<h3>getElementById</h3>

<ul>
<li>HTML ソースに <code>&lt;script id='initial-state' type='application/json'&gt;</code> がある</li>
<li><code>getElementById</code> で検索</li>
<li><code>app/assets/javascripts/components/containers/mastodon.jsx</code> に <code>const initialState = JSON.parse(document.getElementById("initial-state").textContent);</code> とある</li>
</ul>


<h3>react のソースの読み方</h3>

<ul>
<li>react のページのざっくりとした見分け方は HTML ソースがやけに少ないときは react (登録ページなど devise 由来のページは react を使っていない)</li>
<li><code>data-react-class</code> がついてるところに差し込まれている</li>
<li>react のルーティングは <code>./app/assets/javascripts/components/containers/mastodon.jsx</code> をみる</li>
<li><code>&lt;Route path='getting-started' component={GettingStarted} /&gt;</code> とか</li>
<li><code>localhost:3000/web/</code> は残して <code>localhost:3000/web/getting-started</code> を開くと出てくる</li>
<li><code>&lt;Route path='blocks' component={Blocks} /&gt;</code> は <code>import Blocks from '../features/blocks';</code> なので <code>app/assets/javascripts/components/features/blocks/index.jsx</code> にある</li>
</ul>


<h3>ストリーミングは?</h3>

<ul>
<li><code>app/assets/javascripts/components/api.jsx</code> にクライアントがある</li>
<li><code>axios</code> (アクシオス) を使っている</li>
<li><p><code>Authorization</code> で <code>Bearer</code> トークンを渡している</p></li>
<li><p>サーバー側は <code>streaming/index.js</code> にある (トップ直下)</p></li>
<li><code>import WebSocket from 'ws'</code></li>
<li>nginx などで受けて rails と振り分けられてここにくるので <code>wss</code> ではなく <code>ws</code> のみ</li>
</ul>


<h3>storybook とは?</h3>

<ul>
<li>直下に storybook ディレクトリがあるのでその話題</li>
<li>動くスタイルガイド?</li>
</ul>


<h3>その他</h3>

<ul>
<li><code>app/controllers/auth</code> に <code>devise</code> 関連</li>
<li><code>User</code> と <code>Account</code> が別にある</li>
<li><code>app/controllers/api</code> に API 関連</li>
</ul>


<h3><code>package.json</code></h3>

<ul>
<li><code>chai</code> はいろいろなものを入れる必要がある</li>
<li>rails を使う人はよく使っているらしい</li>
<li><code>sinon</code> もテストのライブラリでスタブを使いたいからではないか</li>
</ul>


<h3>ActionCable</h3>

<ul>
<li>actioncable という node (npm) のモジュールがある</li>
<li>開発元は <a href="https://github.com/rails/rails/blob/master/actioncable/package.json">https://github.com/rails/rails/blob/master/actioncable/package.json</a> らしい</li>
<li>サーバー側とクライアント側で同じ名前なので紛らわしい</li>
<li>npm の方の actioncable はあまり情報がない</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mastodonのAPIをcurlで試してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-17-mastodon-api-curl.html"/>
    <updated>2017-04-17T01:24:42+09:00</updated>
    <id>http://blog.n-z.jp/blog/mastodon-api-curl</id>
    <content type="html"><![CDATA[<p>curl で <a href="/blog/2017-04-16-contribute-mastodon.html">mastodon の開発環境</a>を使って API を試してみたメモです。</p>

<p><a href="http://qiita.com/znz/items/c924cd4e9d5e50e50058">mastodonのAPIをcurlで試してみた</a>と同じ内容です。</p>

<h2>確認環境</h2>

<p><a href="/blog/2017-04-16-contribute-mastodon.html">mastodon の開発環境</a>の通りですが、簡単に説明しておくと</p>

<ul>
<li><code>git clone https://github.com/tootsuite/mastodon</code></li>
<li><code>cd mastodon</code></li>
<li><code>vagrant up</code></li>
<li><code>vagrant ssh</code></li>
</ul>


<p>した後、初期アカウントのメールアドレスを修正した環境を想定しています。</p>

<h2>Create App</h2>

<p>クライアント名を決めてスコープを決めて作成します。
クライアント名は同じ名前でも作成できるようです。(Twitter は名前がかぶると作成できなかったはず。)
複数のスコープを指定する時はスペース区切りです。
リダイレクト先がなければ <code>urn:ietf:wg:oauth:2.0:oob</code> にしておけば良いようです。
ウェブサイトがあればその URL も設定しておきます。</p>

<pre><code class="bash">vagrant@mastodon:~$ CLIENT_NAME="Test Client"
vagrant@mastodon:~$ curl -X POST -d "client_name=$CLIENT_NAME&amp;redirect_uris=${REDIRECT_URIS:-urn:ietf:wg:oauth:2.0:oob}&amp;scopes=${SCOPES:-read write follow}&amp;website=$WEBSITE" http://localhost:3000/api/v1/apps; echo $?
{"id":16,"redirect_uri":"urn:ietf:wg:oauth:2.0:oob","client_id":"ce06ac1d988d7f26f067dc7ea639e41523ec8135e48cceabb7cd0fd8c1413c65","client_secret":"be04a4f2ca2cd5d9a1cc1314d03a15f811be7f64005483b003447cc3e35e7749"}0
</code></pre>

<p><code>echo</code> をつけているのは終了ステータスの確認と応答に改行がつかないことの対処です。</p>

<p>この応答のうち、<code>client_id</code> と <code>client_secret</code> が必要なので、保存しておきます。</p>

<h2>アカウントと紐付け</h2>

<p>保存しておいた <code>client_id</code> と <code>client_secret</code> と、対象のサーバーに登録しているアカウントのメールアドレスとパスワードが必要です。</p>

<p>スコープは Create App の時に <code>read</code> のみ以外を指定した場合には、ここにも指定しないと <code>read</code> 権限のみになってしまうようです。
Create App の時に指定していなかったスコープは指定できないようです。(<code>{"error":"invalid_scope","error_description":"The requested scope is invalid, unknown, or malformed."}</code> になる。)
<code>/api/v1/apps</code> は <code>scopes</code> (複数形) ですが、<code>/oauth/token</code> では <code>scope</code> (単数形) なので注意が必要そうです。</p>

<pre><code class="bash">vagrant@mastodon:~$ CLIENT_ID=ce06ac1d988d7f26f067dc7ea639e41523ec8135e48cceabb7cd0fd8c1413c65
vagrant@mastodon:~$ CLIENT_SECRET=be04a4f2ca2cd5d9a1cc1314d03a15f811be7f64005483b003447cc3e35e7749
vagrant@mastodon:~$ YOUR_EMAIL=admin@mastodon.dev
vagrant@mastodon:~$ YOUR_PASSWORD=mastodonadmin
vagrant@mastodon:~$ curl -X POST -d "client_id=$CLIENT_ID&amp;client_secret=$CLIENT_SECRET&amp;grant_type=password&amp;username=$YOUR_EMAIL&amp;password=$YOUR_PASSWORD&amp;scope=${SCOPES:-read write follow}" -sS http://localhost:3000/oauth/token; echo $?
{"access_token":"96efc1d5e78e6bd9497915cbdc9a464d584e934414d3db1e1d68b2370f8b698c","token_type":"bearer","scope":"read write follow","created_at":1492358391}0
</code></pre>

<h2>API 呼び出し</h2>

<p>ほとんどの API 呼び出しにはアクセストークンが必要です。
Create App や public タイムラインの取得などのように必要ないものもあります。</p>

<pre><code class="bash">vagrant@mastodon:~$ ACCESS_TOKEN=96efc1d5e78e6bd9497915cbdc9a464d584e934414d3db1e1d68b2370f8b698c
</code></pre>

<h2>アカウント情報の取得</h2>

<p><code>/api/v1/accounts/verify_credentials</code> でアクセストークンに紐づいているアカウントの情報を取得できます。</p>

<pre><code class="bash">vagrant@mastodon:~$ curl --header "Authorization: Bearer $ACCESS_TOKEN" -sS http://localhost:3000/api/v1/accounts/verify_credentials; echo $?
{"id":1,"username":"admin","acct":"admin","display_name":"","locked":false,"created_at":"2017-04-14T04:04:40.299Z","followers_count":0,"following_count":1,"statuses_count":26,"note":"","url":"http://mastodon.dev/@admin","avatar":"http://localhost:3000/avatars/original/missing.png","avatar_static":"http://localhost:3000/avatars/original/missing.png","header":"http://localhost:3000/headers/original/missing.png","header_static":"http://localhost:3000/headers/original/missing.png"}0
</code></pre>

<h2>情報更新</h2>

<p><code>/oauth/token</code> で scope を指定していなかった場合、 <code>{"error":"This action is outside the authorized scopes"}</code> になって更新できませんでした。</p>

<pre><code class="bash">vagrant@mastodon:~$ curl -X PATCH -d "display_name=Admin" --header "Authorization: Bearer $ACCESS_TOKEN" -sS http://localhost:3000/api/v1/accounts/update_credentials; echo $?
{"id":1,"username":"admin","acct":"admin","display_name":"Admin","locked":false,"created_at":"2017-04-14T04:04:40.299Z","followers_count":0,"following_count":1,"statuses_count":27,"note":"","url":"http://mastodon.dev/@admin","avatar":"http://localhost:3000/avatars/original/missing.png","avatar_static":"http://localhost:3000/avatars/original/missing.png","header":"http://localhost:3000/headers/original/missing.png","header_static":"http://localhost:3000/headers/original/missing.png"}0
</code></pre>

<h2>トゥート!</h2>

<pre><code class="bash">vagrant@mastodon:~$ curl -X POST -d "status=test message" --header "Authorization: Bearer $ACCESS_TOKEN" -sS http://localhost:3000/api/v1/statuses; echo $?
{"id":30,"created_at":"2017-04-16T16:00:55.054Z","in_reply_to_id":null,"in_reply_to_account_id":null,"sensitive":null,"spoiler_text":"","visibility":"public","application":{"name":"Test Client","website":""},"account":{"id":1,"username":"admin","acct":"admin","display_name":"","locked":false,"created_at":"2017-04-14T04:04:40.299Z","followers_count":0,"following_count":1,"statuses_count":27,"note":"","url":"http://mastodon.dev/@admin","avatar":"http://localhost:3000/avatars/original/missing.png","avatar_static":"http://localhost:3000/avatars/original/missing.png","header":"http://localhost:3000/headers/original/missing.png","header_static":"http://localhost:3000/headers/original/missing.png"},"media_attachments":[],"mentions":[],"tags":[],"uri":"tag:mastodon.dev,2017-04-16:objectId=30:objectType=Status","content":"&lt;p&gt;test message&lt;/p&gt;","url":"http://mastodon.dev/@admin/30","reblogs_count":0,"favourites_count":0,"reblog":null,"favourited":false,"reblogged":false}0
</code></pre>

<h2>タイムライン取得</h2>

<p><code>curl -v --header "Authorization: Bearer $ACCESS_TOKEN" -sS http://localhost:3000/api/v1/timelines/home</code> などでタイムラインを取得できます。(<code>timelines</code> は複数形)</p>

<p>Link ヘッダーに <code>Link: &lt;http://localhost:3000/api/v1/timelines/home?max_id=7&gt;; rel="next", &lt;http://localhost:3000/api/v1/timelines/home?since_id=30&gt;; rel="prev"</code> のように書いてあって、 <code>next</code> で過去に辿っていけて、 <code>prev</code> で新しいトゥートを取得できるようです。
ただし <code>prev</code> は (ローカルの開発環境ではなく普通の公開サーバーで) 時間をあけて試すと間が抜けていたので、全部取得する用途には向いていないようです。
<code>next</code> の方は確認していませんが、過去に遡るという挙動を考えると、間が抜けることはないのではないかと思っています。</p>

<h2>エラーの例</h2>

<p>パラメーターなどが間違っている時は JSON でエラーが返ってくるのですが、URL を間違えた時は空白のレスポンスが返ってくるので、知らないと悩みそうです。</p>

<pre><code class="bash">vagrant@mastodon:~$ curl -X POST -d "client_name=$CLIENT_NAME&amp;redirect_uris=${REDIRECT_URIS:-urn:ietf:wg:oauth:2.0:oob}&amp;scopes=${SCOPES:-read write follow}&amp;website=$WEBSITE" http://localhost:3000/api/v1/apps; echo $?
{"error":"Validation failed: Name can't be blank"}0
vagrant@mastodon:~$ curl --header "Authorization: Bearer ACCESS_TOKEN_HERE" -sS http://localhost:3000/api/v1/accounts/verify_credentials; echo $?
{"error":"The access token is invalid"}0
vagrant@mastodon:~$ curl --header "Authorization: Bearer $ACCESS_TOKEN" -sS http://localhost:3000/api/v1/timeline/home; echo $?
0
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="https://github.com/tootsuite/documentation/blob/eb32fc9738de44878697754431565260be89c17f/Using-the-API/API.md">参照時点の API のドキュメント</a> (<a href="https://github.com/tootsuite/documentation/blob/master/Using-the-API/API.md">最新</a>)</li>
<li><a href="https://github.com/tootsuite/documentation/blob/eb32fc9738de44878697754431565260be89c17f/Using-the-API/Testing-with-cURL.md">参照時点の Testing the API with cURL</a> (<a href="https://github.com/tootsuite/documentation/blob/master/Using-the-API/Testing-with-cURL.md">最新</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mastodonにpull requestを送った話と開発環境構築の話]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-16-contribute-mastodon.html"/>
    <updated>2017-04-16T22:43:41+09:00</updated>
    <id>http://blog.n-z.jp/blog/contribute-mastodon</id>
    <content type="html"><![CDATA[<p>最近流行っている mastodon に pull request を送ったので、
その環境構築などの話です。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>macOS Sierra 10.12.4</li>
<li>VirtualBox 5.1.18</li>
<li>Vagrant 1.9.3</li>
<li>vagrant-hostsupdater 1.0.2</li>
<li><a href="https://github.com/tootsuite/mastodon">https://github.com/tootsuite/mastodon</a> の master</li>
</ul>


<h2>起動まで</h2>

<p><a href="https://github.com/tootsuite/mastodon#development-with-vagrant">Development with Vagrant</a> からリンクされている
<a href="https://github.com/tootsuite/documentation/blob/master/Running-Mastodon/Vagrant-guide.md">Vagrant guide</a> を参考にして、
環境を構築しました。</p>

<p>初回起動 (<code>vagrant up</code>) 時は <code>vagrant-hostsupdater</code> での <code>sudo</code> に続けて実行されるので気づかなかったのですが、
2 回目に <code>vagrant up</code> した時に <code>/etc/exports</code> の変更のためにも <code>sudo</code> が実行されているのに気づきました。</p>

<pre><code>git clone https://github.com/tootsuite/mastodon
cd mastodon
vagrant plugin install vagrant-hostsupdater
vagrant up
</code></pre>

<h2>初期アカウント設定</h2>

<p>初期アカウントはメールアドレスが <code>admin@mastodon.dev</code> でパスワードが <code>mastodonadmin</code> と書いてあるのですが、入れなかったので、</p>

<pre><code>cd /vagrant
rails c
User.all
</code></pre>

<p>で確認してみると、メールアドレスが <code>admin@localhost:3000</code> になっていました。
そこで、そのまま <code>rails c</code> の中で、</p>

<pre><code>u=User.first
u.email="admin@mastodon.dev"
u.save!
</code></pre>

<p>で修正しました。</p>

<p>こんな感じで何か引っかかった時は rails の知識がないと辛そうです。</p>

<h2>いろいろ動作確認</h2>

<p>80 番ポートから 3000 番ポートへのポートフォワーディングは
Vagrantfile で設定しているので、
ホスト側から <code>http://mastodon.dev</code> は見えるのですが、
<code>vagrant ssh</code> で入ったゲスト側では <code>curl http://mastodon.dev</code> ではなく
<code>curl http://localhost:3000</code> や <code>curl http://mastodon.dev:3000</code> などのように
ポート番号をつける必要がありました。</p>

<h2>ストリーミング API</h2>

<p>Vagrantfile を見ればわかるのですが、
rails server が <code>rails s -d -b 0.0.0.0</code> で動いているところにポートフォワーディングしているだけなので、
streaming API は使えませんでした。</p>

<p>最初、実装されていないのかと勘違いしてしまったのですが、
実装されていると聞いたので、よくみてみると
<code>streaming/index.js</code> で rails 外のところに実装されていました。</p>

<p><code>npm run start</code> で起動すればゲストの中なら 4000 番ポートで使えるようになったので、
ストリーミング API を使いたい場合は一工夫必要そうです。</p>

<h2>メール</h2>

<p>メールは <code>http://mastodon.dev/letter_opener</code> に溜まっていました。
mailcatcher と違って、再起動しても残っていました。</p>

<h2>環境の更新</h2>

<p>最新の状態にするために master の変更に追随する必要がありますが、
<code>vagrant ssh</code> で入った中で <code>cd /vagrant</code> した状態で <code>git pull</code> するとパーミッションの関係でうまくいかないようだったので、
ホスト側で <code>git pull</code> する方が安全なようです。</p>

<p><code>yarn install</code> などでファイルが書き換わっていると、その変更を元に戻しておく必要もあるかもしれません。</p>

<p><code>git pull</code> した後は、Gemfile なども書き換わっていた時は</p>

<pre><code>vagrant ssh
cd /vagrant
bundle install
yarn install
rails db:migrate
rails assets:precompile
pkill -f puma
export $(cat ".env.vagrant" | xargs)
rails s -d -b 0.0.0.0
</code></pre>

<p>のような感じで <code>bundle install</code> と起動している rails server の停止と Vagrantfile の <code>$start</code> の処理をすると良さそうです。</p>

<p>パーミッションの問題で <code>yarn install</code> がうまくいかなかった時は <code>node_modules</code> を削除すると良さそうです。
ゲスト側だとうまくいかなかったら、ホスト側で消すなどの工夫が必要そうです。</p>

<h2>pull requests</h2>

<p><code>vagrant up</code> する前に Vagrantfile を確認していたところ、
<code>PATH</code> にカレントディレクトリを追加していたので、
<a href="https://github.com/tootsuite/mastodon/pull/1779">Remove current directory from PATH</a>
で削除する pull request を送りました。</p>

<p>そして、管理画面をみていたところ、title が並んでいてなんだこれ、と思ったので、
<a href="https://github.com/tootsuite/mastodon/pull/1785">翻訳の更新の pull request</a>
を送りました。</p>

<p><code>I18n.t</code> の最後の単語は翻訳がないときのデフォルトとしても使われるので、
そのことも考慮した単語を選んだ方が良さそうに思いましたが、
yaml ファイルをみていると title にしたい気持ちもわからなくはなかったので、
悩ましいところです。</p>

<h2>翻訳もれ?</h2>

<p>テスト環境なので短いパスワードでもいいかと思って、テストアカウントを登録する時に短いパスワードを入れてみたところ、
<code>translation missing: ja.activerecord.errors.models.user.attributes.password.too_short</code>
と出てきて調べてみると <code>config/locales/doorkeeper.fr.yml</code> にだけ <code>too_short</code> の翻訳があって何かおかしいと思って、
よく調べてみると、
rails-i18n gem に翻訳が入っている、 rails デフォルトのエラーメッセージだとわかったので、
<a href="https://github.com/tootsuite/mastodon/issues/1790">rails-i18n gem の追加リクエスト</a> を出しました。</p>

<h2>i18n-tasks</h2>

<p>前回の翻訳の更新は目視で比較して追加したのですが、
rails-i18n gem について調べているときに
i18n-tasks gem というのが入っていると気づいたので、
次はそれを使ってみました。</p>

<p><code>i18n-tasks health</code> でチェックできるのですが、デフォルトだと全言語が対象で、出過ぎなので、
<code>i18n-tasks health -l ja</code> で日本語だけに絞って表示しました。</p>

<p>そして <code>i18n-tasks add-missing -l ja</code> で <code>config/locales/ja.yml</code> に英語のまま追加され、
<code>git diff</code> で何が追加されたか確認して翻訳していきました。</p>

<p><code>i18n-tasks find '*.reset_password'</code> や <code>i18n-tasks find admin.accounts.reset_password</code> のようにして、どこで使われているのか確認して、
実際に表示させて確認しつつ翻訳しました。</p>

<p>affected_accounts は one と other で<a href="https://railsguides.jp/i18n.html#%E8%A4%87%E6%95%B0%E5%BD%A2%E5%8C%96">複数形化</a>していたのですが、
日本語にすると同じだと思ったので、
一段階浅くして共通の翻訳を使うように変更しました。</p>

<p><code>i1n-tasks add-missing -l ja</code> をした時に引用符がちょっとへんこうされてしまったのですが、
それもそのまま変更点として含めて、
<a href="https://github.com/tootsuite/mastodon/pull/1923">Add missing Japanese translations</a>
として pull request を送りました。</p>

<p><code>i18n-tasks unused -l ja</code> は本当に消して良いかどうかが不安だったので、
手をつけていません。</p>

<h2>まとめ</h2>

<p>vagrant で簡単に mastodon の開発環境を構築できました。
ただしストリーミング API はそのままだと対応していないので注意が必要そうです。</p>
]]></content>
  </entry>
  
</feed>
