<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mysql | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-09-27T16:51:54+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[yaml_dbでMySQLからPostgreSQLに移行した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-01-28-yaml-db.html"/>
    <updated>2014-01-28T21:25:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/yaml-db</id>
    <content type="html"><![CDATA[<p>先週 redmine を MySQL から PostgreSQL に移行するときに、最近の ruby では動かなくなっている taps ではなく yaml_db を使ってみました。</p>

<p>その後、自作 Rails アプリでも yaml_db を使って移行しました。</p>

<!--more-->


<h2>yaml_db 選び</h2>

<p>yaml_db は <code>gem install yaml_db</code> でインストールできるものが新しい rails などに
対応していないため fork が乱立していて、どれを使えばいいのか悩ましいのですが、
どこかで見かけた情報を元に
<code>gem 'yaml_db', github: 'jetthoughts/yaml_db', ref: 'fb4b6bd7e12de3cffa93e0a298a1e5253d7e92ba'</code>
を使いました。(今だと別の指定の方が良さそうです。後述)</p>

<p>redmine の場合は <code>Gemfile.local</code> に書いて (なければ作成)、
<code>bundle</code> でインストールすれば使えます。</p>

<h2>データベース移行</h2>

<p>アプリを止めるなどして、データベースの変更が発生しない状態にして移行作業をします。
YAML の互換性の問題などがあるので、データベースの移行と Ruby や Redmine のバージョンアップは別々にした方が良いです。</p>

<ol>
<li>まず <code>RAILS_ENV=production bundle exec rake db:data:dump</code> で <code>db/data.yml</code> を作成します。</li>
<li>つぎに Ruby や Rails や Redmine のバージョンはそのままで <code>config/database.yml</code> を変更します。</li>
<li>必要に応じて <code>bundle</code> でデータベースアダプターの gem をインストールします。</li>
<li>データベースの作成をしたり <code>db:migrate</code> をしておきます。</li>
<li><code>RAILS_ENV=production bundle exec rake db:data:load</code> で読み込みます。</li>
</ol>


<h2>yaml_db の fork の再調査</h2>

<p><a href="https://rubygems.org/gems/yaml_db">yaml_db gem</a> ( <a href="https://github.com/ludicast/yaml_db">ludicast/yaml_db</a> )
からの fork としては
<a href="https://rubygems.org/gems/gitlab_yaml_db">gitlab_yaml_db</a> ( <a href="https://github.com/gitlabhq/yaml_db">gitlabhq/yaml_db</a> ? )
のインストール数が
多いようですが、これは以前の gitlabhq が依存していたからのようです。 (今は依存していない)</p>

<p>新しい fork として
<a href="https://rubygems.org/gems/yaml_db_with_schema_tables">yaml_db_with_schema_tables</a>
( <a href="https://github.com/zweitag/yaml_db">zweitag/yaml_db</a> )
がありましたが、古い yaml_db からの fork なので、新しい rails への対応が入っていないような気がします。
他の fork との違いとして <code>schema_info</code> と <code>schema_migrations</code> も dump するようにしているようです。</p>

<p><a href="https://github.com/jetthoughts/yaml_db">jetthoughts/yaml_db</a> という fork は
rubygems.org にはリリースしていないようですが、
Rails 4 に対応して、 README の <code>This gem is now Rails 3 only.</code> という記述を削除しているなど、メンテナンスが続いていそうなので、
次はこの fork を使うのが良さそうだと思いました。
(古いブログの記事だと <code>gem 'yaml_db', github: 'jetthoughts/yaml_db', branch: 'rails4'</code> で rails4 ブランチを指定している例もあるようですが、 master にマージ済みなので branch 指定は不要です。)</p>

<h2>別 Rails アプリの移行</h2>

<p>続きとして、本日、自作の Rails アプリを <code>jetthoughts/yaml_db</code> を使って移行してみました。</p>

<h3>postgresql のデータベース作成</h3>

<p>データベースの作成は事前に出来るので、
<code>sudo -u postgres psql</code>
で作成しておきます。</p>

<pre><code>CREATE ROLE dbuser LOGIN ENCRYPTED PASSWORD 'dbpass' NOINHERIT VALID UNTIL 'infinity';
CREATE DATABASE dbname WITH ENCODING='UTF8' OWNER=dbuser;
</code></pre>

<p>データベースの作成方法はいつも
<a href="http://www.redmine.org/projects/redmine/wiki/RedmineInstall">RedmineInstall</a>
を参考にしています。</p>

<h3>pg gem</h3>

<p>pg gem も忘れずにあらかじめ入れておきます。</p>

<h3>メンテナンス中画面設定</h3>

<p>まず apache2 + passenger の方でメンテナンス中画面を出すようにしました。</p>

<pre><code>    &lt;Directory /path/to/app&gt;
        Options FollowSymLinks
        AllowOverride None
        #Order allow,deny
        #allow from all
        Order deny,allow
        deny from all
    &lt;/Directory&gt;
    ErrorDocument 403 "&amp;#x30e1;&amp;#x30f3;&amp;#x30c6;&amp;#x30ca;&amp;#x30f3;&amp;#x30b9;&amp;#x4e2d;&amp;#x3067;&amp;#x3059;&amp;#x3002;&amp;#x20;&amp;#x3057;&amp;#x3070;&amp;#x3089;&amp;#x304f;&amp;#x304a;&amp;#x5f85;&amp;#x3061;&amp;#x304f;&amp;#x3060;&amp;#x3055;&amp;#x3044;&amp;#x3002;"
</code></pre>

<p><code>ErrorDocument</code> の埋め込み文字列は <code>Content-Type: text/html;charset=iso-8859-1</code> になってNいたので、
<code>'メンテナンス中です。 しばらくお待ちください。'.unpack('U*').map{|c| '&amp;#x%x;' % c }.join('')</code>
のようにして、すべてエスケープして日本語を埋め込みました。</p>

<p>本来は 5xx のステータスにすべきですが、一時的なものなので 403 で妥協しました。
後日メンテナンスをするときはちゃんと 5xx にしたいと思っています。</p>

<h3>データベースのバックアップとダンプ</h3>

<p>cron で動かしているデータベースのバックアップと yaml_db でのダンプをしました。</p>

<pre><code>/path/to/app$ sudo /etc/cron.daily/local-dump
/path/to/app$ $ sudo env PATH=$(dirname $(awk '/PassengerDefaultRuby/{print $2}' /etc/apache2/conf.d/passenger.conf)):$PATH RAILS_ENV=production bundle exec rake db:data:dump
</code></pre>

<h3>config/database.yml 書き換え</h3>

<p>database.yml で postgresql の方を使うように書き換えます。</p>

<pre><code>  adapter: postgresql
  encoding: unicode
  database: dbname
  pool: 5
  username: dbuser
  password: dbpass
  host: localhost
  #port: 5432
  min_messages: warning
</code></pre>

<h3>データの読み込み</h3>

<p><code>rake db:migrate</code> でマイグレーションを実行した後、
<code>rake db:data:load</code> でデータを読み込みます。</p>

<pre><code>/path/to/app$ $ sudo env PATH=$(dirname $(awk '/PassengerDefaultRuby/{print $2}' /etc/apache2/conf.d/passenger.conf)):$PATH RAILS_ENV=production bundle exec rake db:migrate
/path/to/app$ $ sudo env PATH=$(dirname $(awk '/PassengerDefaultRuby/{print $2}' /etc/apache2/conf.d/passenger.conf)):$PATH RAILS_ENV=production bundle exec rake db:data:load
</code></pre>

<h3>メンテナンス解除と確認</h3>

<p>apache2 の設定を戻して、動作確認します。</p>

<h2>まとめ</h2>

<p>Rails のデータベースの移行に yaml_db を使ってみました。</p>

<p>yaml_db の方が taps より昔からあって、
しばらくメンテナンスが止まっていて、
taps の方が主流になるかと思っていたら、
逆に taps の方がメンテナンスがあまりされなくなって、
yaml_db の方が fork が乱立して、新しい rails に対応したものもでてきて、
結局今のところデータベースの移行には yaml_db が無難という状況になっているようです。</p>

<p>taps は新しい Ruby に対応できていなかったり、
以前の記事に書いたようにスキーマの移行が不十分なところがあったりして、
使われなくなっていくように感じました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tapsでMySQLからPostgreSQLに移行した後に起きたトラブル事例]]></title>
    <link href="http://blog.n-z.jp/blog/2014-01-12-taps-trouble.html"/>
    <updated>2014-01-12T14:15:41+09:00</updated>
    <id>http://blog.n-z.jp/blog/taps-trouble</id>
    <content type="html"><![CDATA[<p>2013年7月ごろに <a href="http://rubygems.org/gems/taps">taps</a> を使って redmine のデータベースを MySQL から PostgreSQL に移行しました。</p>

<p>その時に移行が不十分で問題が少し起きていたので、その原因を調べて修正しました。</p>

<!--more-->


<h2>taps での移行</h2>

<p>taps の使い方については既に情報がたくさんあるので、簡単に書いておくだけにします。
昨年7月時点の情報なので、今だとさらにバージョン指定を増やさないとダメかもしれません。</p>

<p>まず、 Ruby 1.9.1 以降に対応できていないようなので、 Ruby 1.8.7 を使いました。
rack も新しいバージョンに対応できていないので、以下のような Gemfile でバージョンを指定して<code>bundle install --path vendor/bundle</code> して使いました。</p>

<pre><code class="ruby Gemfile">  source "https://rubygems.org"
  gem "taps"
  gem "sqlite3"
  gem "mysql"
  gem "pg"
  gem "rack", "1.0.1"
</code></pre>

<p>元の <code>config/database.yml</code> の設定が</p>

<pre><code class="yaml config/database.yml">production:
  adapter: mysql2
  database: redmine_db
  host: localhost
  username: redminemyuser
  password: my_password
  encoding: utf8
</code></pre>

<p>という感じなら、 MySQL を動かしている方で
<code>bundle exec taps server mysql://redminemyuser:my_password@localhost/redmine_db tapsuser tapspass</code>
と起動します。</p>

<p>PostgreSQL の方では</p>

<pre><code class="console sudo -u postgres psql">CREATE ROLE redminepguser LOGIN ENCRYPTED PASSWORD 'pg_password' NOINHERIT VALID UNTIL 'infinity';
CREATE DATABASE redmine_db WITH ENCODING='UTF8' OWNER=redminepguser;
</code></pre>

<p>という感じでデータベースを作っておいて、
<code>bundle exec taps pull postgres://redminepguser:pg_password@localhost/redmine_db http://tapsuser:tapspass@localhost:5000</code>
という感じでデータを移行しました。</p>

<p>同じサーバーで移行したので taps の http も localhost にしていますが、別サーバーなら ssh のポートフォワーディングなどを使ってつなげば良いと思います。</p>

<h2>redmine でのトラブル</h2>

<p>管理者権限でログインして、管理からグループを追加 (/groups/new) しようとするとエラーになって、 log/production.log を確認すると
<code>ActiveRecord::StatementInvalid (PG::NotNullViolation: ERROR:  null value in column "mail_notification" violates not-null constraint</code>
または
<code>(ActiveRecord::StatementInvalid (PG::NotNullViolation: ERROR:  列"mail_notification"内のNULL値はNOT NULL制約違反です</code>
というエラーが出ていました。</p>

<h2>トラブルの原因</h2>

<p>いろいろ調べてみると <code>db/schema.rb</code> でいうと <code>mail_notification</code> に default がないのが問題だとわかりました。
後で追加調査したところ、 default が <code>""</code> (空文字列) のときにうまく移行できていないことがあるようでした。</p>

<h2>原因修正</h2>

<p><code>rails dbconsole</code> で
<code>ALTER TABLE users ALTER mail_notification SET DEFAULT '';</code>
で設定して、
<code>rake db:migrate</code> で <code>db/schema.rb</code> にも反映して
redmine を再起動すると直りました。</p>

<h2>その他の DEFAULT の修正</h2>

<p>別途 PostgreSQL の環境を用意して redmine を新規インストールして <code>rake db:migrate</code> で生成した <code>db/schema.rb</code> と比較して全体としては以下の修正をしました。</p>

<pre><code class="sql rails dbconsole">ALTER TABLE attachments ALTER filename SET DEFAULT '';
ALTER TABLE attachments ALTER disk_filename SET DEFAULT '';
ALTER TABLE attachments ALTER content_type SET DEFAULT '';
ALTER TABLE attachments ALTER digest SET DEFAULT '';
ALTER TABLE auth_sources ALTER type SET DEFAULT '';
ALTER TABLE auth_sources ALTER name SET DEFAULT '';
ALTER TABLE auth_sources ALTER account_password SET DEFAULT '';
ALTER TABLE boards ALTER name SET DEFAULT '';
ALTER TABLE changes ALTER action SET DEFAULT '';
ALTER TABLE comments ALTER commented_type SET DEFAULT '';
ALTER TABLE custom_fields ALTER type SET DEFAULT '';
ALTER TABLE custom_fields ALTER name SET DEFAULT '';
ALTER TABLE custom_fields ALTER field_format SET DEFAULT '';
ALTER TABLE custom_fields ALTER regexp SET DEFAULT '';
ALTER TABLE custom_values ALTER customized_type SET DEFAULT '';
ALTER TABLE documents ALTER title SET DEFAULT '';
ALTER TABLE enumerations ALTER name SET DEFAULT '';
ALTER TABLE wiki_contents ALTER comments SET DEFAULT '';
ALTER TABLE issue_categories ALTER name SET DEFAULT '';
ALTER TABLE issue_relations ALTER relation_type SET DEFAULT '';
ALTER TABLE issue_statuses ALTER name SET DEFAULT '';
ALTER TABLE issues ALTER subject SET DEFAULT '';
ALTER TABLE journal_details ALTER property SET DEFAULT '';
ALTER TABLE journal_details ALTER prop_key SET DEFAULT '';
ALTER TABLE journals ALTER journalized_type SET DEFAULT '';
ALTER TABLE messages ALTER subject SET DEFAULT '';
ALTER TABLE news ALTER title SET DEFAULT '';
ALTER TABLE news ALTER summary SET DEFAULT '';
ALTER TABLE projects ALTER name SET DEFAULT '';
ALTER TABLE projects ALTER homepage SET DEFAULT '';
ALTER TABLE queries ALTER name SET DEFAULT '';
ALTER TABLE repositories ALTER url SET DEFAULT '';
ALTER TABLE repositories ALTER login SET DEFAULT '';
ALTER TABLE repositories ALTER password SET DEFAULT '';
ALTER TABLE repositories ALTER root_url SET DEFAULT '';
ALTER TABLE roles ALTER name SET DEFAULT '';
ALTER TABLE settings ALTER name SET DEFAULT '';
ALTER TABLE tokens ALTER action SET DEFAULT '';
ALTER TABLE tokens ALTER value SET DEFAULT '';
ALTER TABLE trackers ALTER name SET DEFAULT '';
ALTER TABLE users ALTER hashed_password SET DEFAULT '';
ALTER TABLE users ALTER firstname SET DEFAULT '';
ALTER TABLE users ALTER mail SET DEFAULT '';
ALTER TABLE users ALTER language SET DEFAULT '';
ALTER TABLE versions ALTER name SET DEFAULT '';
ALTER TABLE versions ALTER description SET DEFAULT '';
ALTER TABLE watchers ALTER watchable_type SET DEFAULT '';
ALTER TABLE wiki_content_versions ALTER compression SET DEFAULT '';
ALTER TABLE wiki_content_versions ALTER comments SET DEFAULT '';
ALTER TABLE users ALTER mail_notification SET DEFAULT '';
ALTER TABLE users ALTER lastname SET DEFAULT '';
</code></pre>

<pre><code class="sql rails dbconsole">ALTER TABLE users ALTER mail_notification SET DEFAULT '';
</code></pre>

<p>はすでに実行済みで、</p>

<pre><code class="sql rails dbconsole">ALTER TABLE users ALTER lastname SET DEFAULT '';
</code></pre>

<p>は既に default が <code>""</code> になっていたので不要でしたが、
重複して実行しても問題が起きないようなので、上の SQL にも入れています。</p>

<h2>まとめ</h2>

<p>最初のデータベース選択は重要で、アプリケーションが両方対応していても、後から変更するのは大変です。</p>

<p>問題が起きそうなデータ型を使っていなければ <code>taps</code> ですんなり移行できるように見えますが、別途クリーンな環境を用意して生成した <code>db/schema.rb</code> と比較するなどのチェックも必要でした。</p>
]]></content>
  </entry>
  
</feed>
