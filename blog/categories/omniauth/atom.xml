<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: omniauth | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/omniauth/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-03-27T23:06:17+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[devise で通常ログイン出来るユーザーが他の複数サービス連携でログインできるようにした]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-08-devise-omniauth.html"/>
    <updated>2014-07-08T08:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/devise-omniauth</id>
    <content type="html"><![CDATA[<p><code>devise</code> でデータベース認証を実装している Rails アプリに Twitter などでもログインできるように
実装を追加してみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ruby 2.1.2</li>
<li>rails 4.1.4</li>
<li>devise 3.2.4</li>
<li>omniauth 1.2.1</li>
<li>omniauth-facebook 1.6.0</li>
<li>omniauth-github 1.1.2</li>
<li>omniauth-google-oauth2 0.2.4</li>
<li>omniauth-twitter 1.0.1</li>
<li>(dotenv 0.11.1) (key と secret の管理)</li>
<li>(font-awesome-sass 4.1.0) (view での <code>icon</code> メソッド)</li>
</ul>


<h2>前提条件</h2>

<ul>
<li>devise で通常の User モデルにメールアドレスとパスワードによる認証は実装されている。</li>
<li>複数サービスとの連携をするために User モデルには連携サービスの情報は直接持たずに UserAuth モデルに分ける。</li>
<li>連携対象サービスは Facebook, GitHub, Google+, Twitter</li>
<li>連携サービスからの追加情報はメールアドレスなども含めて一切とらずに認証だけに利用する。</li>
<li>どの連携サービス (provider) かと識別するための ID だけ保存する。</li>
<li>key や secret は環境変数で渡す。 (今回は dotenv を使ったが、 config/secrets.yml 経由でも良さそう)</li>
<li>今回はテストは未実装 (連携部分のテストの書き方をまだ調べていないため)</li>
<li>今回の実装範囲では I18n は使わずにメッセージは日本語固定</li>
</ul>


<h2>実装</h2>

<p>今回は以下のように実装を追加すると連携サービスでログインできるようになりました。</p>

<h3>Gemfile</h3>

<p>OmniAuth と使用するサービスを追加します。</p>

<pre><code class="ruby Gemfile">    gem 'omniauth'
    gem 'omniauth-facebook'
    gem 'omniauth-github'
    gem 'omniauth-google-oauth2'
    gem 'omniauth-twitter'
</code></pre>

<h3>initializer 追加</h3>

<p>key と secret があれば provider 登録するようにしました。</p>

<p>view で使うために、
登録されている provider の情報の取り方がわからなかったのと
追加で名前や Font Awesome のアイコン名も入れたかったので、
<code>AUTH_PROVIDERS</code> という配列にハッシュを入れるようにしています。</p>

<pre><code class="ruby config/initializers/omniauth.rb">    AUTH_PROVIDERS = []

    Rails.application.config.middleware.use OmniAuth::Builder do
      key, secret = ENV['FACEBOOK_KEY'], ENV['FACEBOOK_SECRET']
      if key &amp;&amp; secret
        provider :facebook, key, secret
        AUTH_PROVIDERS &lt;&lt; {
          provider: :facebook,
          name: 'Facebook',
        }
      end

      key, secret = ENV['GITHUB_CONSUMER_KEY'], ENV['GITHUB_CONSUMER_SECRET']
      if key &amp;&amp; secret
        provider :github, key, secret
        AUTH_PROVIDERS &lt;&lt; {
          provider: :github,
          name: 'GitHub',
        }
      end

      key, secret = ENV['GOOGLE_CLIENT_ID'], ENV['GOOGLE_CLIENT_SECRET']
      if key &amp;&amp; secret
        provider :google_oauth2, key, secret
        AUTH_PROVIDERS &lt;&lt; {
          provider: :google_oauth2,
          name: 'Google',
          icon: :google
        }
      end

      key, secret = ENV['TWITTER_CONSUMER_KEY'], ENV['TWITTER_CONSUMER_SECRET']
      if key &amp;&amp; secret
        provider :twitter, key, secret
        AUTH_PROVIDERS &lt;&lt; {
          provider: :twitter,
          name: 'Twitter',
        }
      end

      AUTH_PROVIDERS.each do |provider|
        provider[:icon] ||= provider[:provider]
      end
    end
</code></pre>

<h3>UserAuth モデル作成</h3>

<p><code>rails g model UserAuth user:references uid:string provider:string</code> で作成します。</p>

<p>モデルクラスは生成されたまま使いましたが、
validation を追加した方が良さそうです。</p>

<pre><code class="ruby app/models/user_auth.rb">    class UserAuth &lt; ActiveRecord::Base
      belongs_to :user
    end
</code></pre>

<p>データベースの方は <code>null: false</code> や index を追加しました。</p>

<p>```ruby db/migrate/*_create_user_auths.rb
    class CreateUserAuths &lt; ActiveRecord::Migration
      def change
        create_table :user_auths do |t|
          t.references :user, index: true, null: false
          t.string :uid, null: false
          t.string :provider, null: false</p>

<pre><code>      t.timestamps
    end

    add_index :user_auths, [:uid, :provider], unique: true
  end
end
</code></pre>

<pre><code>
### `rake db:migrate`

`rake db:migrate` で反映しておきます。

### User クラス側

`has_many` を追加しておきます。
</code></pre>

<pre><code>  has_many :user_auths, dependent: :destroy
</code></pre>

<pre><code>
### ルーティング追加

まず、どう使われるのか把握するためにルーティングを追加します。

`auth_help` は後でプライバシーポリシーなどを書いています。
</code></pre>

<pre><code>  get '/auth/help' =&gt; 'auth#help', as: :auth_help
  get '/auth/:provider/callback' =&gt; 'auth#create'
  delete '/auth/destroy/:provider' =&gt; 'auth#destroy', as: :destroy_connection
</code></pre>

<pre><code>
ここには出てきていませんが、
OmniAuth で `/auth/:provider` がルーティングされるようです。

### AuthController 実装

参考サイトの実装例を参考にして AuthController を実装しました。

help は静的な情報を表示するだけなので、実装は空です。
</code></pre>

<pre><code># -*- coding: utf-8 -*-
class AuthController &lt; ApplicationController
  skip_before_filter :authenticate_user!

  def create
    auth = request.env['omniauth.auth']
    uid = auth['uid']
    provider = auth['provider']
    auth = UserAuth.where(uid: uid, provider: provider).first
    if auth
      flash[:notice] = "#{provider}でログインしました。"
      sign_in_and_redirect auth.user, event: :authentication
    else
      authenticate_user!
      UserAuth.create!(uid: uid, provider: provider, user_id: current_user.id)
      redirect_to root_url, notice: "#{provider}と連携しました。"
    end
  end

  def destroy
    provider = params.require(:provider)
    authenticate_user!
    auth = UserAuth.where(provider: provider, user_id: current_user.id).first
    auth.destroy if auth
    redirect_to root_url, notice: "#{provider}と連携解除しました。"
  end

  def help
  end
end
</code></pre>

<pre><code>
まだ連携を登録していない状態で

- ログアウト状態
- 連携サービスで認証・連携許可
- 戻ってきて通常ログイン
- `auth/failure` に飛ばされる

ということがおきているのですが、
`auth/failure`
を実装していないので、デフォルトの 404 エラー画面になってしまいます。

### view helpers 実装

以前から使っていた `link_to_sign_in_or_out` の実装も同じファイルに持ってきて、
`link_to_provider` という汎用的なメソッドを実装しました。
使い方は後述します。

`AUTH_PROVIDERS` のハッシュはここで使っています。
</code></pre>

<pre><code># -*- coding: utf-8 -*-
module LinkToAuthHelper
  def link_to_sign_in_or_out(html_options={})
    if user_signed_in?
      body = icon(:'sign-out') + t(:"devise.shared.links.sign_out", default: "Sign out")
      html_options = { method: :delete }.merge(html_options)
      link_to body, :destroy_user_session, html_options
    else
      body = icon(:'sign-in') + t(:"devise.shared.links.sign_in", default: "Sign in")
      link_to body, :new_user_session, html_options
    end
  end

  def link_to_provider(provider, html_options={})
    if current_user
      if UserAuth.where(user_id: current_user.id, provider: provider[:provider]).exists?
        html_options = { method: :delete }.merge(html_options)
        link_to icon(provider[:icon])+"#{provider[:name]}との連携を解除", destroy_connection_path(provider: provider[:provider]), html_options
      else
        link_to icon(provider[:icon])+"#{provider[:name]}と連携", "/auth/#{provider[:provider]}", html_options
      end
    else
      link_to icon(provider[:icon])+"#{provider[:name]}でログイン", "/auth/#{provider[:provider]}", html_options
    end
  end
end
</code></pre>

<pre><code>

### view に追加

ナビゲーションに以下のように追加しました。
認証連携がないときは従来のログイン・ログアウトだけ表示しています。

`AUTH_PROVIDERS` に登録されているときだけ連携のリンクを表示するようにしています。
</code></pre>

<pre><code>    li.dropdown
      a.dropdown-toggle data-toggle="dropdown"
        = icon(:user) + 'ログイン管理'
        b.caret
      ul.dropdown-menu
        li= link_to_sign_in_or_out
        - unless AUTH_PROVIDERS.empty?
          li= link_to icon(:info)+"認証連携のヘルプ", auth_help_path
        - AUTH_PROVIDERS.each do |provider|
          li= link_to_provider(provider)
</code></pre>

<pre><code>
### twitter 連携

Twitter は複数アカウントを使うことも通常の使用範囲として想定されていて、
アプリ専用のアカウントもとりやすいので、
Twitter 連携から試してみました。

https://apps.twitter.com/ から `Create New App` で作成します。

- Name: Twitter 全体で一意になるアプリケーションの ID 的にも使われるもの。ツイートの時にツイートしたアプリ名としても埋め込まれるが、今回は認証のみなので、他とぶつからないような名前という以上はこだわらなかった。
- Description: 認証のときに出てくる説明。
- Website: たとえば `http://app.127.0.0.1.xip.io:3000/` など
- Callback URL: たとえば `http://app.127.0.0.1.xip.io:3000/auth/twitter/callback` のように `/auth/twitter/callback` にする。実サイトなら `https` にすべき。

作成後には `Allow this application to be used to Sign in with Twitter` のチェックを入れておきます。
チェックがないと Twitter 連携でのログインがうまくいかないようです。

アイコンや Organization なども必要に応じて変更します。

API keys タブで key と secret を取得します。

- API key : 環境変数 `TWITTER_CONSUMER_KEY` に設定
- API secret : 環境変数 `TWITTER_CONSUMER_SECRET` に設定

dotenv を使っているので `.env` に以下のような感じで設定しました。
ランダムな文字列のように見えます。
</code></pre>

<pre><code>TWITTER_CONSUMER_KEY="xxxxXXxxXxXxXXXxXxXXXXxxx"
TWITTER_CONSUMER_SECRET="xxXXxXXxxxxxxXXXXXxXxXXxxXXXxXXxxxxXXxxXxxXXxxXxxx"
</code></pre>

<pre><code>
### 動作確認

- 通常のログインをした状態で「Twitter と連携」で Twitter の許可画面に飛びます。
- 許可すると「Twitter 側に許可情報」と「UserAuth に連携情報」が保存されます。
- 「Twitter との連携を解除」で「UserAuth が削除」されます。
- 「ログアウト」して「Twitter でログイン」すると「ログイン画面」に戻ります。
- ログインすると `auth/failure` が 404 エラーになります。ここは後で実装する予定です。
- 再度ログイン後の画面を直接開きます。
- 再度「Twitter と連携」で「UserAuth に連携情報」が保存されます。「Twitter 側の許可情報」は古いままです。
- 「ログアウト」して「Twitter でログイン」でログインできます。
- https://twitter.com/settings/applications で許可を取り消します。
- 「ログアウト」して「Twitter でログイン」で Twitter の許可画面に飛びます。
- 許可すると「Twitter 側に許可情報」が保存されて、「UserAuth」は残っているので、そのままログインできます。

### GitHub 連携

GitHub 連携は作成後にすぐに使えるので、アプリケーション作成に使っても良いアカウントがあれば一番簡単です。

https://github.com/settings/applications から `Register new application` で作成します。

- Application name: 適切な名前を設定
- Homepage URL: たとえば `http://app.127.0.0.1.xip.io:3000/` など
- Application description: ユーザーが許可するときにわかりやすい説明
- Authorization callback URL: たとえば `http://app.127.0.0.1.xip.io:3000/auth/github/callback` のように `/auth/github/callback` にする。実サイトなら `https` にすべき。

右上に見えている Client ID と Client Secret を使います。

- Client ID : 環境変数 `GITHUB_CONSUMER_KEY` に設定
- Client Secret : 環境変数 `GITHUB_CONSUMER_SECRET` に設定

dotenv を使っているので `.env` に以下のような感じで設定しました。
十六進数の数字のように見えます。
</code></pre>

<pre><code>GITHUB_CONSUMER_KEY="xxxxxxxxxxxxxxxxxxxx"
GITHUB_CONSUMER_SECRET="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
</code></pre>

<pre><code>
## Facebook 連携

https://developers.facebook.com/ から上の `Apps` の中にある `Craete a New App` で作成します。
最初は作成前に開発者関連の規約などに同意する必要があるようです。

- Display Name: 適切な名前を設定します。
- Namespace: optional なので空欄のままで良いようです。
- カテゴリ: 適当に選択します。

セキュリティチェックがあるので、入力すると作成できます。

右上に見えている App ID と App Secret (Show を押すとパスワード認証の後に内容表示) を使います。

- App ID : 環境変数 `FACEBOOK_KEY` に設定
- App Secret : 環境変数 `FACEBOOK_SECRET` に設定

dotenv を使っているので `.env` に以下のような感じで設定しました。
十進数と十六進数の数字のように見えます。
</code></pre>

<pre><code>FACEBOOK_KEY="xxxxxxxxxxxxxxx"
FACEBOOK_SECRET="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
</code></pre>

<pre><code>
`Settings` の `Add Platform` で `Website` を選んで追加します。

- Site URL: たとえば `http://app.127.0.0.1.xip.io:3000/` など
- Mobile Site URL: 空欄のまま

callback URL は設定が不要だったので、
Site URL の下ならどこでも良さそうです。

### `google_oauth2` 連携

https://github.com/zquestz/omniauth-google-oauth2 に書いてあるように
https://code.google.com/apis/console/ を開きます。

飛ばされる先で `API &amp; AUTH` の中の `Credentials` で `Create new Client ID` で作成します。

- Application type : Web application
- Authorized JavaScript origins : たとえば `http://app.127.0.0.1.xip.io:3000` など
- Authorized redirect URI : たとえば `http://app.127.0.0.1.xip.io:3000/auth/google_oauth2/callback` のように `/auth/google_oauth2/callback` にする。実サイトなら `https` にすべき。

右に見えている Client ID と Client secret を使います。

- Client ID : 環境変数 `GOOGLE_CLIENT_ID` に設定
- Client secret : 環境変数 `GOOGLE_CLIENT_SECRET` に設定

dotenv を使っているので `.env` に以下のような感じで設定しました。
ドメインっぽい文字列とランダムな文字列のように見えます。
</code></pre>

<pre><code>GOOGLE_CLIENT_ID="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com"
GOOGLE_CLIENT_SECRET="XXxxxXxXxxxXXxXXxXxXXxxX"
</code></pre>

<p>```</p>

<p>さらに <code>Consent screen</code> での設定が必要です。
しかも全アプリ共通のようなので、名前を分けたい場合はグーグルアカウントごと違うものにしないといけないように見えました。</p>

<ul>
<li>Email address : グーグルアカウントのアドレス選択</li>
<li>Product name : 適切な名前を設定</li>
<li>Homepage URL 以下 : 必要に応じて設定</li>
</ul>


<p>さらにエラーメッセージ (<code>"Access Not Configured. Please use Google Developers Console to activate the API for your project."</code>) で検索してわかったのですが、
<a href="http://qiita.com/aikyo02/items/459d03af304e1188f110" title="Google OAuth 2.0 loginが2014年9月に使えなくなる(Googleアカウントからのユーザ登録機能がある場合は注意)">Google OAuth 2.0 loginが2014年9月に使えなくなる(Googleアカウントからのユーザ登録機能がある場合は注意)</a>
に書いてあるように、
APIs で <code>Google+ API</code> も有効にする必要がありました。</p>

<h2>参考サイト</h2>

<ul>
<li><a href="http://xoyip.hatenablog.com/entry/2013/12/20/212109" title="Railsでログインとは別に複数のサービスとの連携を行う方法 - PILOG">Railsでログインとは別に複数のサービスとの連携を行う方法 - PILOG</a>
と<a href="https://github.com/xoyip/multi-oauth">その実装</a>は非常に参考になりました。</li>
<li><a href="http://qiita.com/aikyo02/items/459d03af304e1188f110" title="Google OAuth 2.0 loginが2014年9月に使えなくなる(Googleアカウントからのユーザ登録機能がある場合は注意)">Google OAuth 2.0 loginが2014年9月に使えなくなる(Googleアカウントからのユーザ登録機能がある場合は注意)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[doorkeeper gem の API のクライアント]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-08-doorkeeper-api-client.html"/>
    <updated>2013-10-08T21:06:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/doorkeeper-api-client</id>
    <content type="html"><![CDATA[<p><a href="http://rubygems.org/gems/doorkeeper">doorkeeper gem</a>
で API を作る方は
<a href="https://github.com/applicake/doorkeeper-provider-app">doorkeeper-provider-app</a>
というサンプルの
<code>app/controllers/api/</code>
以下などをみればすぐにわかったのですが、
API を呼び出す方は
<a href="https://github.com/applicake/doorkeeper/wiki/Create-a-OmniAuth-strategy-for-your-provider">OmniAuth の中でユーザーの情報を取り出す</a>
だけならすぐに出来たのですが、
コントローラーの中など呼び出す方法は
<a href="https://github.com/applicake/doorkeeper-devise-client">doorkeeper-devise-client</a>
を見てもよくわからなかったので、まとめてみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>provider 側

<ul>
<li>rails 3.2.14</li>
<li>doorkeeper 0.7.3</li>
</ul>
</li>
<li>client 側

<ul>
<li>rails 4.0.0</li>
<li>devise 3.1.1</li>
<li>omniauth 1.1.4</li>
<li>omniauth-oauth2 1.1.1</li>
<li>oauth2 0.8.1</li>
</ul>
</li>
</ul>


<h2>準備</h2>

<p>まず
<a href="https://github.com/applicake/doorkeeper/wiki/Create-a-OmniAuth-strategy-for-your-provider">Create a OmniAuth strategy for your provider</a>
を参考にして、
OmniAuth の中で
<code>access_token.get('/api/v1/me.json').parsed</code>
は出来るところまでは準備しておきます。</p>

<p>目的としては、
この
<code>access_token</code>
が認証より後で呼ばれる他のコントローラーの中で取得できれば良いということになります。</p>

<p>余談ですが、
doorkeeper の wiki は
<a href="https://github.com/applicake/doorkeeper/wiki/Supported-Ruby-&amp;-Rails-versions">Supported Ruby &amp; Rails versions</a>
のように情報が古いまま放置されているページもあるようなので、
<a href="https://github.com/applicake/doorkeeper">README</a>
などのソースコード側のドキュメントも参照した方が良さそうです。</p>

<h2>必要なもの</h2>

<p><code>access_token</code>
は
<code>OAuth2::AccessToken</code>
クラスのオブジェクトです。</p>

<p>生成するには</p>

<ul>
<li><code>OAuth2::Client</code> のオブジェクト</li>
<li>認証で取得した <code>token</code></li>
</ul>


<p>が必要になります。</p>

<p><code>OAuth2::Client</code>
の生成には</p>

<ul>
<li><code>client_id</code></li>
<li><code>client_secret</code></li>
<li>URL</li>
</ul>


<p>が必要になります。</p>

<h2>token の保存</h2>

<p>まず
<code>OAuth2</code>
の認証で取得した
<code>token</code>
を保存しておく必要があります。</p>

<p><code>Users::OmniauthCallbacksController#doorkeeper</code>
で
<code>session[:doorkeeper_token] = request.env["omniauth.auth"]["credentials"]["token"]</code>
のようにしてセッションなどの後で使える場所に保存しておきます。</p>

<p>後で調べてわかったのですが、
<a href="https://github.com/applicake/doorkeeper-devise-client/blob/master/app/controllers/users/omniauth_callbacks_controller.rb">doorkeeper-devise-client の Users::OmniauthCallbacksController</a>
では
<code>request.env["omniauth.auth"].credentials.token</code>
を
<code>user.doorkeeper_access_token</code>
でデータベースに保存していました。</p>

<h2>OAuth2::Client の作成</h2>

<p><a href="https://github.com/applicake/doorkeeper-devise-client/blob/master/app/controllers/application_controller.rb">doorkeeper-devise-client の ApplicationController</a>
では必要な情報は定数経由で受け取るようになっていました。</p>

<p>今回は
<code>devise</code>
と
<code>omniauth-oauth2</code>
を使っているので、
その情報を使って生成するようにしました。
要点だけまとめると以下のコードになります。</p>

<pre><code class="ruby">    config = Devise.omniauth_configs[:doorkeeper]
    strategy = config.strategy_class.new(*config.args)
    client = strategy.client
</code></pre>

<h2>OAuth2::AccessToken の生成</h2>

<p>ここまで準備ができれば後は
<code>OAuth2::AccessToken.new</code>
するだけです。</p>

<p>まとめると以下のコードになります。</p>

<pre><code class="ruby">  def access_token
    return @access_token if defined?(@access_token)
    config = Devise.omniauth_configs[:doorkeeper]
    strategy = config.strategy_class.new(*config.args)
    token = session[:doorkeeper_token]
    @access_token = OAuth2::AccessToken.new(strategy.client, token)
  end
</code></pre>

<h2>API 呼び出し</h2>

<p><code>access_token</code>
が出来たら後は呼び出しに使うだけです。</p>

<p>単純な情報取得は
<code>get</code>
して
JSON
なら
<code>parsed</code>
を呼び出すだけです。</p>

<pre><code class="ruby">  access_token.get("/api/v1/me.json").parsed
  access_token.get("/api/v1/posts.json").parsed
</code></pre>

<p>今回は連携して書き込みたいというのが目的だったため、
<code>post</code>
も使いました。</p>

<p>モデルの例としては
<code>rails g scaffold post title body:text</code>
で API の提供側では以下の実装とします。</p>

<pre><code class="ruby app/controllers/api/v1/posts_controller.rb">module Api::V1
  class PostsController &lt; ApiController
    doorkeeper_for :index
    doorkeeper_for :create
    respond_to     :json

    def index
      respond_with Post.all
    end

    def create
      post = Post.new(params[:post])
      post.user = current_resource_owner
      post.save!
      respond_with post
    end
</code></pre>

<p>呼び出し側は以下のようになります。</p>

<pre><code class="ruby">access_token.post("/api/v1/posts", params: { post: { title: title, body: body } })
</code></pre>

<p><code>params</code>
による指定は
<a href="https://github.com/intridea/oauth2/blob/master/lib/oauth2/access_token.rb">OAuth2::AccessToken</a>
のソースをみて推測しました。</p>

<h2>scope 付き API 提供</h2>

<p>書き込みも許可すると
<code>scope</code>
を分けたくなります。</p>

<p>doorkeeper 側では
<a href="https://github.com/applicake/doorkeeper/wiki/Using-Scopes">Using Scopes</a>
を参考にして</p>

<ul>
<li>initializers に scopes 追加</li>
<li>翻訳追加</li>
<li>API に scopes 追加</li>
</ul>


<p>をしておきます。</p>

<pre><code class="ruby config/initializers/doorkeeper.rb">  default_scopes  :public
  optional_scopes :admin, :write
</code></pre>

<p>2013-12-20 追記:
doorkeeper gem を 0.7.3 から 0.7.4 に上げたところ、
シンボルだとうまく動かなくなってしまったので、
文字列に変更しました。</p>

<p>(doorkeeer gem 0.7.3 以前)
<code>ruby app/controllers/api/v1/posts_controller.rb
    doorkeeper_for :index,  :show,   scopes: [:public]
    doorkeeper_for :create, :update, scopes: [:admin, :write]
</code></p>

<p>(doorkeeer gem 0.7.4 以降)
<code>ruby app/controllers/api/v1/posts_controller.rb
    doorkeeper_for :index,  :show,   scopes: %w"public"
    doorkeeper_for :create, :update, scopes: %w"admin write"
</code></p>

<p>参考のため、この API の rspec も載せておきます。
複数の <code>scopes</code> を設定する時に <code>,</code> 区切りだとうまくいかないところがあったので、
スペース区切りにしています。</p>

<pre><code class="ruby spec/controllers/api/v1/posts_controller_spec.rb">require 'spec_helper'

describe Api::V1::PostsController do
  describe "GET 'index'" do
    let!(:application) { Doorkeeper::Application.create!(name: "MyApp", redirect_uri: "http://app.com") }
    let!(:user) { FactoryGirl.create(:normal_user) }
    let!(:token) { Doorkeeper::AccessToken.create! application_id: application.id, resource_owner_id: user.id, scopes: "public" }
    subject { response }

    context "valid token" do
      before do
        get 'index', format: :json, access_token: token.token
      end
      it { should be_success }
      its(:status) { should eq(200) }
      its(:body) { should == Post.all.to_a.to_json }
    end

    context "invalid token" do
      before do
        get 'index', format: :json, access_token: token.token.succ
      end
      it { should_not be_success }
      its(:status) { should eq(401) }
    end
  end

  describe "GET 'index' without scopes" do
    let!(:application) { Doorkeeper::Application.create!(name: "MyApp", redirect_uri: "http://app.com") }
    let!(:user) { FactoryGirl.create(:normal_user) }
    let!(:token) { Doorkeeper::AccessToken.create! application_id: application.id, resource_owner_id: user.id, scopes: "write" }
    subject { response }

    context "valid token" do
      before do
        get 'index', format: :json, access_token: token.token
      end
      it { should_not be_success }
      its(:status) { should eq(401) }
      its(:body) { should == " " }
    end
  end

  describe "POST 'create'" do
    let!(:application) { Doorkeeper::Application.create!(name: "MyApp", redirect_uri: "http://app.com") }
    let!(:user) { FactoryGirl.create(:normal_user) }
    let!(:token) { Doorkeeper::AccessToken.create! application_id: application.id, resource_owner_id: user.id, scopes: "public write" }
    subject { response }

    context "valid token" do
      before do
        post 'create', format: :json, access_token: token.token, post: { title: "title", body: "some content" }
      end
      it { should be_success }
      its(:status) { should eq(201) } # 201 Created
      its(:body) { should == Post.last.to_json }
    end

    context "invalid token" do
      before do
        post 'create', format: :json, access_token: token.token.succ
      end
      it { should_not be_success }
      its(:status) { should eq(401) }
    end
  end
end
</code></pre>

<h2>scope 付き呼び出し</h2>

<p><code>devise</code>
の設定で
<code>omniauth</code>
の設定に
<code>scope</code>
を追加するだけです。</p>

<pre><code class="ruby config/initializers/devise.rb">  config.omniauth :doorkeeper, ENV['DOORKEEPER_APP_ID'], ENV['DOORKEEPER_APP_SECRET'], { scope: 'public write' }
</code></pre>

<p>rspec のところでもちょっと書きましたが、
区切りが <code>,</code> だとうまくいかないことがあったので、
スペース区切りにしています。</p>

<p>原因は
<a href="https://github.com/applicake/doorkeeper/blob/master/lib/doorkeeper/oauth/scopes.rb">lib/doorkeeper/oauth/scopes.rb</a>
で
<code>string.split</code>
のように無引数の
<code>String#split</code>
を使っているからではないかと推測していますが、確認はしていません。</p>

<h2>まとめ</h2>

<p><code>client_id</code> と <code>client_secret</code> と provider の URL はあらかじめ用意しておいて、
client 側の rails アプリに設定しておきます。</p>

<p><code>token</code>
は OAuth2 で取得したものを
<code>session</code>
やデータベースなどに保存しておいて使います。</p>

<p>必要なら
<code>scopes</code>
も設定できます。</p>
]]></content>
  </entry>
  
</feed>
