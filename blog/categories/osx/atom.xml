<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: osx | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/osx/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2018-02-25T12:03:37+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XQuartzでX転送がうまくいかなかったので調べた]]></title>
    <link href="http://blog.n-z.jp/blog/2018-02-01-xquartz-xauth.html"/>
    <updated>2018-02-01T23:13:13+09:00</updated>
    <id>http://blog.n-z.jp/blog/xquartz-xauth</id>
    <content type="html"><![CDATA[<p>XQuartz で openssh の X 転送がうまくいかなかったので、調べてみました。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>macOS High Sierra 10.13.3, macOS Sierra 10.12.6</li>
<li>XQuartz 2.7.11</li>
</ul>


<h2>インストール方法</h2>

<p>XQuartz は <code>brew cask install xquartz</code> で入れました。
手動でダウンロードしてインストールした時もあまり違いはなさそうです。</p>

<h2>初回の問題</h2>

<p>初回インストール時はインストーラーの最後で再起動を促されますが、再起動した後でもダメでした。</p>

<p>そもそも、再起動していないと ssh 経由でない状態でも X が起動しないので、今回は無関係でした。</p>

<h2>X 転送の許可の問題</h2>

<p>接続先の <code>/etc/ssh/sshd_config</code> は <code>X11Forwarding yes</code> になっていて、ちゃんと許可されていました。</p>

<h2>xauth の問題</h2>

<p>色々悩んだ末、 <code>ssh -Xv</code> のように <code>-v</code> をつけてデバッグログを表示させて、よくみてみると、</p>

<pre><code>debug1: No xauth program.
Warning: untrusted X11 forwarding setup failed: xauth key data not generated
</code></pre>

<p>と出ていて xauth の問題だとわかりました。</p>

<p>なぜか <code>/opt/X11/bin</code> にパスが通っていなかったのが原因らしく、 <code>~/.ssh/config</code> に</p>

<pre><code>XAuthLocation /opt/X11/bin/xauth
</code></pre>

<p>と設定して X サーバー側 (XQuartz 側) の問題は解決しました。</p>

<p>これとは別に X クライアント側 (ssh で接続した先) でも xauth がない環境があったので、 <code>sudo apt install xauth</code> でインストールして解決しました。</p>

<h2>PATH の問題</h2>

<p>動作確認によく使っている <code>xeyes</code> などもローカル環境で起動しなかったので、普通は <code>/opt/X11/bin</code> にパスを通しておいた方が良さそうです。
普段使っている iTerm2 + zsh ではなく Terminal.app + bash だと問題なくパスが通っていたので、パスが通らないのは、自分の設定の問題の可能性もたかそうでした。</p>

<p><code>/etc/paths.d/40-XQuartz</code> に <code>/opt/X11/bin</code> と書かれていて、普通はこれでパスが通るようです。</p>

<h2>まとめ</h2>

<p>X 転送ができなかった環境で原因と対策を調べてみました。</p>

<p>結局、ログが重要ということで、原因追求にはサーバー側のログを見たり <code>ssh</code> の <code>-v</code> の数を増やしてログをしっかりみたりするしかないようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew-CaskでLibreOfficeの日本語版をインストール]]></title>
    <link href="http://blog.n-z.jp/blog/2018-01-23-homebrew-libreoffice.html"/>
    <updated>2018-01-23T21:55:18+09:00</updated>
    <id>http://blog.n-z.jp/blog/homebrew-libreoffice</id>
    <content type="html"><![CDATA[<p>Homebrew-Cask で LibreOffice が日本語訳インターフェースも含めて簡単にインストールできるようになっていました。</p>

<!--more-->


<h2>バージョン</h2>

<ul>
<li>macOS Sierra 10.12.6</li>
<li>Homebrew 1.5.1</li>
<li>Homebrew-Cask 1.5.1</li>
</ul>


<h2>インストール方法</h2>

<p>macOS を日本語環境で使っていれば <code>brew cask install libreoffice-language-pack</code> で依存関係にある <code>libreoffice</code> と一緒に入ります。</p>

<p><a href="https://github.com/caskroom/homebrew-cask/blob/master/doc/cask_language_reference/stanzas/language.md">https://github.com/caskroom/homebrew-cask/blob/master/doc/cask_language_reference/stanzas/language.md</a> に書いてあるように <code>brew cask install libreoffice-language-pack --language=ja</code> で明示的に日本語を指定することもできます。</p>

<h2>ダウンロードが遅い場合</h2>

<p>日本のミラーのひとつの <a href="http://www.ftp.ne.jp/">http://www.ftp.ne.jp/</a> が「 <strong>(2017/12/21)</strong> <em>ftp-srv2 is down currently</em>, because the network equipment for ftp-srv2 has been broken from 2017/12/19. In addition, ftp is too heavy load. Please use the other sites for archive downloads. We are trying to replace the network equipment.」と書いてあるように非常に重いので、ダウンロードが非常に遅い場合があるかもしれません。
その場合は、公式サイトから手動でミラーを選択してダウンロードした <code>LibreOffice_5.4.4_MacOS_x86-64.dmg</code> を <code>~/Library/Caches/Homebrew/Cask/libreoffice--5.4.4.dmg</code> におきます。
Cache に置く時のファイル名は、ダウンロードを中断したら <code>~/Library/Caches/Homebrew/Cask/libreoffice--5.4.4.dmg.incomplete</code> があるはずなので <code>.incomplete</code> を削ったファイル名にします。
その上で <code>brew cask install</code> を再度実行すると、ダウンロード済みのファイルが使われます。</p>

<h2>バージョンアップ方法</h2>

<p><a href="/blog/2017-04-27-homebrew-upgrade-cleanup.html">homebrewの更新はbrew upgrade &ndash;cleanupだけでよくなっている</a>に書いたように <code>brew upgrade --cleanup</code> などで Homebrew の更新をした上で、 <code>brew cask reinstall libreoffice</code> で LibreOffice 自体を更新して (英語に一時的に戻って)、 <code>brew cask reinstall libreoffice-language-pack</code> で再度日本語にします。
<code>brew cask reinstall libreoffice libreoffice-language-pack</code> でまとめて更新もできます。</p>

<h2>まとめ</h2>

<p>以前は LibreOffice 本体は cask でインストールできても、日本語で使おうとすると別途インストールする必要がありましたが、いつの間にか homebrew-cask が多言語対応していて、 Firefox や Thunderbird は自動で日本語が、LibreOffice の場合は LibreOffice 自体の配布がわかれているので、 <code>libreoffice-language-pack</code> を別途入れる必要がありますが、コマンド1,2個で簡単にインストールできるようになっていました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[homebrewの更新はbrew upgrade --cleanupだけでよくなっている]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-27-homebrew-upgrade-cleanup.html"/>
    <updated>2017-04-27T20:00:48+09:00</updated>
    <id>http://blog.n-z.jp/blog/homebrew-upgrade-cleanup</id>
    <content type="html"><![CDATA[<p>Homebrew のパッケージの更新に昔は <code>brew update</code>; <code>brew upgrade</code>; <code>brew cleanup</code> と 3 コマンドを使っていましたが、今は <code>brew upgrade --cleanup</code> だけでよくなっています。</p>

<!--more-->


<h2>確認バージョン</h2>

<ul>
<li>Homebrew 1.1.13</li>
</ul>


<h2><code>brew update</code></h2>

<p>Debian 系で使われている <code>apt</code> の <code>sudo apt-get update</code> に相当するパッケージ情報を更新するサブコマンドです。
基本的には <code>git</code> で更新しているだけなので、こけたら <code>git</code> コマンドを直接使ってなおす必要がありそうです。</p>

<p>今は他のサブコマンドを実行した時に情報が古ければ自動で更新されるので不要になっています。</p>

<h2><code>brew upgrade</code></h2>

<p>パッケージを更新するサブコマンドです。</p>

<p>古いバージョンも残るので、 <code>gem update</code> に近いような気がします。</p>

<h2><code>brew cleanup</code></h2>

<p>古いバージョンを消したり、ダウンロードしたファイルのキャッシュを消したりします。</p>

<p><code>brew upgrade --cleanup</code> のように <code>upgrade</code> サブコマンドに <code>--cleanup</code> オプションをつけると <code>upgrade</code> 中に削除してくれるようです。
(例えば 2 個更新があった時に、更新、削除、更新、削除になる。)</p>

<p>後から <code>brew cleanup</code> するのと違って <code>upgrade</code> 中に削除してくれるので、何が削除されたのかの確認はしにくくなったり、問題が起きた時に戻しにくくなったりという欠点はありますが、一時的に空き容量が減るのが緩やかになったり、消し忘れがなくなるなどの利点があると思います。</p>

<h2>まとめ</h2>

<p><code>brew update</code>; <code>brew upgrade</code>; <code>brew cleanup</code> と 3 コマンドを連続で使っている人は、 <code>brew upgrade --cleanup</code> だけに置き換えると便利です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lsで丸数字で始まるファイル名の順番が変だった]]></title>
    <link href="http://blog.n-z.jp/blog/2016-08-30-lc-collate-again.html"/>
    <updated>2016-08-30T22:58:34+09:00</updated>
    <id>http://blog.n-z.jp/blog/lc-collate-again</id>
    <content type="html"><![CDATA[<p>OS X で丸数字から始まるファイル名のファイルが入ったフォルダーを Finder で開くと丸数字の数字順に並んでいたのに、 <code>ls</code> で表示すると別の順番になっていたので原因を調べてみました。</p>

<!--more-->


<h2>動作確認環境</h2>

<ul>
<li>OS X Yosemite (10.10.5)</li>
<li>ls, uniq バージョン不明</li>
<li>sort (GNU coreutils) 5.93</li>
</ul>


<h2>動作確認</h2>

<p>Unicode 的に連続している 丸1 から 丸20 までのファイル名のファイルと、それに適当な ASCII の数字をつけたファイル名のファイルを作成して <code>ls</code> で表示してみました。</p>

<pre><code>%  touch $(ruby -e 'puts ("\u{2460}".."\u{2473}").to_a')
%  touch $(ruby -e 'puts ("\u{2460}".."\u{2473}").to_a.shuffle.map.with_index{|e,i|"#{e}#{i}"}')
%  ls
①      ⑤      ⑨      ⑬      ⑰      ⑧0     ⑲12    ⑮16    ⑥2     ⑬6
②      ⑥      ⑩      ⑭      ⑱      ⑤1     ⑱13    ⑳17    ④3     ⑫7
③      ⑦      ⑪      ⑮      ⑲      ⑨10    ②14    ⑪18    ⑭4     ⑦8
④      ⑧      ⑫      ⑯      ⑳      ⑯11    ⑩15    ③19    ⑰5     ①9
</code></pre>

<p>丸数字のみだと数字順に並んでいるのに、後ろに ASCII の数字をつけた部分は ASCII の数字順に並んでいます。
(numeric sort じゃないので 1,10,2 という順番になっているのがちょっとわかりにくいかもしれませんが。)</p>

<h2>Jessie での動作確認</h2>

<p>比較のために Debian GNU/Linux 8.5 (jessie) でも同様のファイルを作成して <code>ls</code> してみると丸数字のみのところもバラバラの順番でした。
何度か実行しても同じ結果なので、ランダムというわけではなくなんらかの基準がありそうですが、どういう順番なのかはわかりませんでした。</p>

<pre><code>% ls
⑧  ⑯  ⑥  ⑬  ⑫  ⑦  ①  ③  ⑮  ⑰  ④0  ⑨10  ⑳12  ⑫14  ⑭16  ①18  ⑩2  ⑥4  ⑯6  ⑱8
⑱  ⑩  ⑨  ⑪  ⑲  ⑤  ②  ④  ⑭  ⑳  ⑪1  ⑦11  ⑲13  ⑬15  ⑮17  ⑧19  ⑤3  ②5  ⑰7  ③9
</code></pre>

<h2>LC_COLLATE</h2>

<p><a href="http://blog.n-z.jp/blog/2013-10-31-lc-collate-uniq.html" title="LC_COLLATEの問題でuniqで丸数字が同一視されてしまう">LC_COLLATEの問題でuniqで丸数字が同一視されてしまう</a>のと同じ話かと思って、 <code>sort</code> や <code>uniq</code> も試してみたところ、同じ話のように見えました。
OS X では locale data が GNU/Linux とは違うようで <code>uniq</code> で同一視されるということは起きませんでした。</p>

<pre><code>% rbenv exec irb -r irb/completion --simple-prompt
&gt;&gt; IO.popen("uniq", "r+"){|io| io.puts ("\u{2460}".."\u{2473}").to_a; io.close_write; puts io.read }
①
②
③
④
⑤
⑥
⑦
⑧
⑨
⑩
⑪
⑫
⑬
⑭
⑮
⑯
⑰
⑱
⑲
⑳
=&gt; nil
&gt;&gt; IO.popen("sort", "r+"){|io| io.puts ("\u{2460}".."\u{2473}").to_a.shuffle; io.close_write; puts io.read }
①
②
③
④
⑤
⑥
⑦
⑧
⑨
⑩
⑪
⑫
⑬
⑭
⑮
⑯
⑰
⑱
⑲
⑳
=&gt; nil
&gt;&gt; IO.popen("sort", "r+"){|io| io.puts ("\u{2460}".."\u{2473}").to_a.shuffle.map.with_index{|e,i|"#{e}#{i}"}; io.close_write; puts io.read }
⑬0
⑥1
⑰10
⑱11
⑤12
⑮13
⑦14
④15
③16
⑪17
⑩18
①19
⑧2
⑲3
⑫4
⑳5
⑭6
②7
⑯8
⑨9
=&gt; nil
&gt;&gt; IO.popen({"LC_COLLATE"=&gt;"C"}, "sort", "r+"){|io| io.puts ("\u{2460}".."\u{2473}").to_a.shuffle.map.with_index{|e,i|"#{e}#{i}"}; io.close_write; puts io.read }
①6
②5
③0
④16
⑤19
⑥18
⑦7
⑧2
⑨8
⑩3
⑪12
⑫15
⑬4
⑭9
⑮14
⑯10
⑰1
⑱17
⑲13
⑳11
=&gt; nil
</code></pre>

<h2>一番自然に感じる並び順</h2>

<p>ruby の sort での結果は <code>LC_COLLATE=C</code> と同じように文字コード順になり、意味自然な並び順に感じました。
<code>LC_COLLATE=C ls</code> も同じ並び順でした。</p>

<pre><code>&gt;&gt; puts Dir['*'].sort
①
①9
②
②14
③
③19
④
④3
⑤
⑤1
⑥
⑥2
⑦
⑦8
⑧
⑧0
⑨
⑨10
⑩
⑩15
⑪
⑪18
⑫
⑫7
⑬
⑬6
⑭
⑭4
⑮
⑮16
⑯
⑯11
⑰
⑰5
⑱
⑱13
⑲
⑲12
⑳
⑳17
=&gt; nil
</code></pre>

<pre><code>% LC_COLLATE=C ls
①      ③      ⑤      ⑦      ⑨      ⑪      ⑬      ⑮      ⑰      ⑲
①9     ③19    ⑤1     ⑦8     ⑨10    ⑪18    ⑬6     ⑮16    ⑰5     ⑲12
②      ④      ⑥      ⑧      ⑩      ⑫      ⑭      ⑯      ⑱      ⑳
②14    ④3     ⑥2     ⑧0     ⑩15    ⑫7     ⑭4     ⑯11    ⑱13    ⑳17
</code></pre>

<h2>Finder での並び順</h2>

<p>Finder での並び順は <code>LC_COLLATE=C</code> での結果と同じかと思いきや、丸1 の後に 丸10 がきて、丸19, 丸2, 丸20, 丸3 のように並んでいたので、独特な感じでした。</p>

<pre><code>①
①9
⑩
⑩15
⑪
⑪18
⑫
⑫7
⑬
⑬6
⑭
⑭4
⑮
⑮16
⑯
⑯11
⑰
⑰5
⑱
⑱13
⑲
⑲12
②
②14
⑳
⑳17
③
③19
④
④3
⑤
⑤1
⑥
⑥2
⑦
⑦8
⑧
⑧0
⑨
⑨10
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 17 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-11-19-rubymotion-mokumoku-osaka.html"/>
    <updated>2014-11-19T19:36:19+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 15 回に参加していて
前回の 16 回は中止になっていた
RubyMotion もくもく会 in Osaka の
<a href="http://rubymotionjp.connpass.com/event/9597/" title="第 17 回 RubyMotion もくもく会 in Osaka - connpass">第 17 回 RubyMotion もくもく会 in Osaka - connpass</a>
に参加してきました。
今回も基本的にみんなもくもくしていました。</p>

<p>次回の
<a href="http://rubymotionjp.connpass.com/event/10195/" title="第 18 回 RubyMotion もくもく会 in Osaka - connpass">第 18 回 RubyMotion もくもく会 in Osaka - connpass</a>
は 2014/12/17(水) になりました。</p>

<!--more-->


<p>今回はメールを書いたり github の issues を見たりコメントしたりしていました。</p>

<p>最後の方は <a href="http://support.apple.com/ja-jp/HT5868">iPod touch の「このコンピュータを信頼しますか」警告</a>が出続けて
iTunes が認識してくれない問題を思い出したので、調べていたのですが、結局解決しませんでした。
Dropbox は認識して写真を取り込んでくれるので、ケーブルなどのハードウェアは問題がないはずなので、
ソフトウェア側の問題らしいというところまでは絞り込めています。</p>

<h2>メモ</h2>

<p>以下メモです。</p>

<ul>
<li>Firebase</li>
<li>WKWebView</li>
<li><a href="https://www.mapbox.com/">Mapbox</a></li>
<li><a href="http://qiita.com/aki/items/c0073bf1e83858fe2e92">Xcode6のiPhone Simulatorの場所</a></li>
<li><a href="https://github.com/magicalpanda/MagicalRecord">https://github.com/magicalpanda/MagicalRecord</a></li>
<li><a href="http://qiita.com/susieyy/items/749c4ac5d82d765c12c6">SwiftのRSS Readerを100行で作ったよ</a></li>
<li><a href="https://github.com/lingoer/SwiftyJSON">https://github.com/lingoer/SwiftyJSON</a></li>
<li>WatchKit</li>
</ul>

]]></content>
  </entry>
  
</feed>
