<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rabbit | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/rabbit/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2018-02-01T23:45:50+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rabbitでのスライド作成から公開まで]]></title>
    <link href="http://blog.n-z.jp/blog/2018-01-28-rabbit-slide.html"/>
    <updated>2018-01-28T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rabbit-slide</id>
    <content type="html"><![CDATA[<p><a href="https://rabbit-shocker.org/ja/">Rabbit</a> でのスライドの作り方などの話があまり見当たらない気がするので、スライド作成から公開までの流れをまとめてみました。</p>

<!--more-->


<h2>確認バージョン</h2>

<ul>
<li>Ubuntu 16.04 LTS (xenial)</li>
<li>ruby 2.4.3</li>
<li>rabbit 2.2.1</li>
</ul>


<h2>雛形作成</h2>

<p><code>rabbit-slide new</code> にいくつかのオプションを指定して、雛形を作成します。</p>

<p>id と base name と markup language は複数の場所に影響するので、最初からしっかり決めておくか、変更する場合は <code>rabbit-slide new</code> からやり直してスライドの内容をコピーした方が簡単かもしれません。</p>

<p>他のオプションは config.yaml, スライドの1ページ目, README.md に影響するだけなので、後からでも簡単に変更できます。</p>

<p>GitHub が RD に対応してくれないので、 README を markdown にするために markup language を指定します。
スライドの記述もそれに合わせて markdown で書くことになります。</p>

<p>いくつかのオプションは <code>~/.rabbit/author.yaml</code> に保存されて次からは指定しなくてもデフォルトが変わります。
特に markup language も変わることは注意が必要かもしれません。</p>

<p>tags は <code>,</code> 区切りで複数指定できます。</p>

<p>allotted time はスライドの下の亀が左から右に行くまでの時間になります。
(うさぎはスライドの枚数)
テーマによっては表示されなかったり、別のものが表示されたりします。</p>

<p>他のオプションは見た目通りの意味です。</p>

<pre><code>vagrant@vagrant:/vagrant$ rabbit-slide new --id about-boot2docker-format-me --base-name boot2docker-format-me --markup-language markdown --title "boot2docker の format-me の話" --tags linux --allotted-time 10m --presentation-date 2018/01/28 --name "Kazuhiro NISHIYAMA" --email "zn@mbf.nifty.com" --rubygems-user znz --slideshare-user znzjp --speaker-deck-user znz
[INFO]
Creating directory: about-boot2docker-format-me
[INFO]
Creating file:      about-boot2docker-format-me/.gitignore
[INFO]
Creating file:      about-boot2docker-format-me/.rabbit
[INFO]
Creating file:      about-boot2docker-format-me/config.yaml
[INFO]
Creating file:      about-boot2docker-format-me/README.md
[INFO]
Creating file:      about-boot2docker-format-me/Rakefile
[INFO]
Creating file:      about-boot2docker-format-me/boot2docker-format-me.md
[INFO]
Creating directory: /home/vagrant/.rabbit
[INFO]
Creating file:      /home/vagrant/.rabbit/author.yaml
</code></pre>

<h2>表紙やテーマの設定</h2>

<p>見出しレベル1 (HTML でいう h1, markdown だと <code>#</code> で始まる行) ごとにページが分かれるので、作成されたディレクトリに入って <code>base-name.md</code> ファイルを編集していきます。</p>

<p>1ページ目は表紙とメタデータで、テーマを変更する場合は markdown なら</p>

<pre><code>theme
:   lightning-simple
</code></pre>

<p>のように書きます。</p>

<p>オプションで指定したものの他には</p>

<pre><code>content-source
:   第1回なんとか勉強会
</code></pre>

<p>のように <code>content-source</code> をつけることが多いです。</p>

<h2>表示確認</h2>

<p><code>rake</code> で表示を確認できます。
<code>rabbit slide.md</code> のように <code>rabbit</code> コマンドにスライドファイルを指定しても同じように表示できます。</p>

<p>最大化でスクリーンサイズがあわないときに <code>rabbit -S 1920,1080 slide.md</code> のようにオプションを指定して実行するという使い方をしたこともあります。</p>

<h2>スライド記述</h2>

<p>プレゼンにふさわしい書き方で内容を書いていきます。</p>

<p>個人的には箇条書きを使うことが多いです。</p>

<p>rabbit のスライドは <code>rabbit-slide-</code> で始まる名前で gem としても公開できるので、<a href="https://rubygems.org/search?utf8=%E2%9C%93&amp;query=rabbit-slide">gem を rabbit-slide で検索</a>して、参考にすると良いと思います。
(ダウンロード数がある程度あって、こういう gem を誰がダウンロードしてるんだろう? と思うのですが、全 gem 調査とかでダウンロードされてる回数が割とあるのではないかと推測しています。)</p>

<h2>表示しながらスライド記述</h2>

<p>スライドのファイルを書き換えると何もしなくても自動で反映されます。
残念ながら亀は戻ってしまうので、発表練習をしながら途中で気づいた点を直すのは、後回しにするかタイマーを諦める必要がありそうです。</p>

<h2>ページごとの追加データ</h2>

<p>見出しレベル2 はページにプロパティなどをつけるのに使います。
書き方は表紙ページのメタデータと同様です。</p>

<p>見出しの行の内容は後述の「note」以外なら「プロパティ」でも「property」でもなんでも良いようです。
試した感じだと markdown では以下のような感じで設定できるようです。
何が設定できるのかはテーマ次第だと思います。</p>

<pre><code>## プロパティ

background-color
:   gray
</code></pre>

<h2>情報ウィンドウと note</h2>

<p>情報ウィンドウはスライド実行中に <code>I</code> で出てきます。
プロジェクターにスライドを出して、手元に情報ウィンドウを出すという使い方が想定されているようです。
残り時間のタイマーも付いています。</p>

<p>たとえば以下のようにメモを書いておくと情報ウィンドウにメモが表示されて、情報ウィンドウの表示のされ方も変わるようです。</p>

<pre><code>## note

メモです。
</code></pre>

<p>note を使ってみた例としては、昔のスライドなので markup language が RD ですが <a href="https://github.com/znz/rubykaigi2014-ruby-removed-features/blob/master/ruby-removed-features.rab">https://github.com/znz/rubykaigi2014-ruby-removed-features/blob/master/ruby-removed-features.rab</a> があります。</p>

<h2>本番</h2>

<p><code>rake</code> か <code>rabbit</code> コマンドで表示してプレゼンを実施します。</p>

<p>スライドの内容によっては右クリックメニューから <code>Cache all slides</code> でキャッシュしておくとページの切り替えがはやくなって良いかもしれません。</p>

<p>クリック、<code>→</code>、<code>f</code> などで次のページ、<code>←</code>、<code>b</code> などで前のページです。</p>

<p>表紙の間はまだタイマーは止まっていて、1ページ目に切り替えた瞬間からカウントダウンが始まります。</p>

<h2>スライドの公開</h2>

<p><code>rake pdf</code> で PDF ファイルを生成できます。
<code>pdf/id-base-name.pdf</code> という形式のファイル名で作成されます。</p>

<pre><code>$ rake pdf
mkdir -p pdf
$ ls pdf
about-boot2docker-format-me-boot2docker-format-me.pdf
</code></pre>

<p><code>rake publish:slideshare</code> はエラーでうまくいかず、 <code>rake publish:speaker_deck</code> は speaker deck 側で API が未実装なので、生成された PDF を <a href="https://www.slideshare.net/">https://www.slideshare.net/</a> や <a href="https://speakerdeck.com/">https://speakerdeck.com/</a> でアップロードします。
情報を埋めて puslish します。</p>

<p>公開されたスライドの URL の <code>/</code> で区切られた末尾の部分をそれぞれ <code>config.yaml</code> の <code>slideshare_id:</code> と <code>speaker_deck_id:</code> に設定します。</p>

<p>たとえば <a href="https://www.slideshare.net/znzjp/boot2docker-formatme">https://www.slideshare.net/znzjp/boot2docker-formatme</a> と <a href="https://speakerdeck.com/znz/boot2docker-false-format-me-falsehua">https://speakerdeck.com/znz/boot2docker-false-format-me-falsehua</a> なら</p>

<pre><code>slideshare_id: boot2docker-formatme
speaker_deck_id: boot2docker-false-format-me-falsehua
</code></pre>

<p>になります。</p>

<p>両方に公開してもいいですし、片方だけでも、または後述の <a href="https://slide.rabbit-shocker.org/">Rabbit Slide Show</a> だけでも良いと思います。</p>

<h2>gem での公開</h2>

<p><a href="https://rubygems.org/">https://rubygems.org/</a> に gem としてスライド (のソース) を公開します。
gem を公開して、しばらく待つと <a href="https://slide.rabbit-shocker.org/">Rabbit Slide Show</a> に同期されてスライドが公開されます。
以下の例だと <a href="https://slide.rabbit-shocker.org/authors/znz/about-boot2docker-format-me/">https://slide.rabbit-shocker.org/authors/znz/about-boot2docker-format-me/</a> に公開されます。
SlideShare と Speaker Deck へのリンクもここにあります。</p>

<p>gem の公開は <code>rake publish:rubygems</code> でできます。
認証情報は <code>~/.gem/credentials</code> に保存されるので、2回目以降はパスワードの入力は不要です。</p>

<pre><code>$ rake publish:rubygems
mkdir -p pkg
WARNING:  licenses is empty, but is recommended.  Use a license identifier from
http://spdx.org/licenses or 'Nonstandard' for a nonstandard license.
WARNING:  open-ended dependency on rabbit (&gt;= 2.0.2) is not recommended
  if rabbit is semantically versioned, use:
    add_runtime_dependency 'rabbit', '~&gt; 2.0', '&gt;= 2.0.2'
WARNING:  See http://guides.rubygems.org/specification-reference/ for help
  Successfully built RubyGem
  Name: rabbit-slide-znz-about-boot2docker-format-me
  Version: 2018.01.28
  File: rabbit-slide-znz-about-boot2docker-format-me-2018.01.28.gem
mv rabbit-slide-znz-about-boot2docker-format-me-2018.01.28.gem pkg/rabbit-slide-znz-about-boot2docker-format-me-2018.01.28.gem
Enter password on RubyGems.org [znz]: 
/home/vagrant/.anyenv/envs/rbenv/versions/2.4.3/bin/ruby -S gem push pkg/rabbit-slide-znz-about-boot2docker-format-me-2018.01.28.gem --key znz
Pushing gem to https://rubygems.org...
Successfully registered gem: rabbit-slide-znz-about-boot2docker-format-me (2018.01.28)
</code></pre>

<h2>github.com にソースを公開</h2>

<p>github.com に repository を作成して push します。</p>

<pre><code>%  hub create
Updating origin
created repository: znz/about-boot2docker-format-me
%  git push -u origin master
Counting objects: 17, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (17/17), 3.82 KiB | 1.27 MiB/s, done.
Total 17 (delta 6), reused 0 (delta 0)
remote: Resolving deltas: 100% (6/6), done.
To github.com:znz/about-boot2docker-format-me.git
 * [new branch]      master -&gt; master
Branch master set up to track remote branch master from origin.
</code></pre>

<p>修正予定がなければ必要ないかもしれませんが、タグも <code>rake tag</code> で作成しておくと発表時点のものが記録できて良いと思います。</p>

<pre><code>$ rake tag
git tag -a 2018.01.28 -m Publish 2018.01.28
git push --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 177 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:znz/about-boot2docker-format-me.git
 * [new tag]         2018.01.28 -&gt; 2018.01.28
</code></pre>

<h2>まとめ</h2>

<p>rabbit を使ってのスライドの作成から公開までの流れを紹介しました。</p>

<p>公式サイトの<a href="https://rabbit-shocker.org/ja/how-to-make/">スライドの作り方</a>は概要しか書いていないので、色々なスライドの書き方は <a href="https://slide.rabbit-shocker.org/">https://slide.rabbit-shocker.org/</a> で気になったものがあれば、そのソースを取得して参考にしてみると良いと思います。
細かい機能については <a href="https://rabbit-shocker.org/ja/news.html">news</a> ページが参考になるかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac で rabbit が動かなくなったので brew reinstall したら直った]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-09-rabbit-on-mac.html"/>
    <updated>2013-09-09T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rabbit-on-mac</id>
    <content type="html"><![CDATA[<p>いつの間にか動かなくなっていた rabbit (2.1.1) が <code>brew reinstall</code> で動くようになったという話です。</p>

<!--more-->


<p>現象としては rabbit のウィンドウが出てくるのに無反応で、スライドの内容も表示されないし、クリックにも反応せず、 <code>Ctrl+C</code> での停止もきかないので <code>kill -KILL</code> で強制終了するしかないという状態でした。</p>

<p>現象から考えて、リンクしているライブラリとの不整合が原因だろうと予想してインストール手順をやり直すことにしました。</p>

<p><a href="http://rabbit-shocker.org/ja/install/homebrew.html">Mac OS XでHomebrewを使ったインストール方法</a> の「brew install と brew link の実行」の手順を以下のようにちょっと変更してやり直したら動くようになりました。</p>

<pre><code>brew reinstall cairo
brew unlink cairo
brew link cairo
brew unlink pixman
brew link --overwrite pixman
brew reinstall pango
brew reinstall gtk+
brew reinstall poppler --with-glib
</code></pre>

<p>これでも動かなければ gem も uninstall して install し直す予定でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac で rabbiter が動いた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-08-rabbiter-on-mac.html"/>
    <updated>2013-09-08T21:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rabbiter-on-mac</id>
    <content type="html"><![CDATA[<p>homebrew を使った Mac OS X 10.8.4 環境で rabbiter (2.0.1) が動くようになりました。</p>

<!--more-->


<p>rabbiter の issues に報告していた
<a href="https://github.com/rabbit-shocker/rabbiter/issues/1">show_uri の問題</a>
と
<a href="https://github.com/rabbit-shocker/rabbiter/issues/2">glib-networking のルート証明書の問題</a>
が解決したので、 <code>glib-networking</code> を <code>brew reinstall glib-networking --with-curl-ca-bundle</code> でインストールすれば使えるようになりました。
ちなみに、初回のインストールでも <code>brew install</code> ではなく <code>brew reinstall</code> で大丈夫のようです。</p>

<p>以下のように <code>configure</code> に <code>--with-ca-certificates</code> が付いていれば使えます。</p>

<pre><code>% brew reinstall glib-networking --with-curl-ca-bundle
==&gt; Reinstalling glib-networking --with-curl-ca-bundle
==&gt; Downloading http://ftp.gnome.org/pub/GNOME/sources/glib-networking/2.36/glib-networkin
Already downloaded: /Library/Caches/Homebrew/glib-networking-2.36.2.tar.xz
==&gt; ./configure --with-ca-certificates=/usr/local/opt/curl-ca-bundle/share/ca-bundle.crt -
==&gt; make install
🍺  /usr/local/Cellar/glib-networking/2.36.2: 68 files, 352K, built in 18 seconds
</code></pre>

<p>以下のように <code>configure</code> に <code>--without-ca-certificates</code> と付いているときは rabbiter が使えません。</p>

<pre><code>% brew reinstall glib-networking
==&gt; Reinstalling glib-networking
==&gt; Downloading http://ftp.gnome.org/pub/GNOME/sources/glib-networking/2.36/glib-networkin
Already downloaded: /Library/Caches/Homebrew/glib-networking-2.36.2.tar.xz
==&gt; ./configure --without-ca-certificates --prefix=/usr/local/Cellar/glib-networking/2.36.
==&gt; make install
🍺  /usr/local/Cellar/glib-networking/2.36.2: 68 files, 352K, built in 21 seconds
</code></pre>

<p>一度 <code>--with-curl-ca-bundle</code> 付きでインストールした後だと、以下のようにオプションなしの reinstall でもオプションが付くようです。</p>

<pre><code>% brew reinstall glib-networking
==&gt; Reinstalling glib-networking --with-curl-ca-bundle
==&gt; Downloading http://ftp.gnome.org/pub/GNOME/sources/glib-networking/2.36/glib-networkin
Already downloaded: /Library/Caches/Homebrew/glib-networking-2.36.2.tar.xz
==&gt; ./configure --with-ca-certificates=/usr/local/opt/curl-ca-bundle/share/ca-bundle.crt -
==&gt; make install
🍺  /usr/local/Cellar/glib-networking/2.36.2: 68 files, 352K, built in 18 seconds
</code></pre>
]]></content>
  </entry>
  
</feed>
