<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | ZnZ Blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-10-01T15:15:25+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jQuery Mobile 1.3.2 の日本語化]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-01-jquery-mobile-l10n.html"/>
    <updated>2013-10-01T15:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/jquery-mobile-l10n</id>
    <content type="html"><![CDATA[<p>jQuery Mobile の l10n についてちゃんと調べたのでまとめておきます。
今回は日本語化だけですが、
翻訳対象は網羅できていると思います。</p>

<p>ちゃんと他の言語にも対応させるためには
<code>mobileinit</code>
の中で設定する文字列を別途 i18n 用の仕組みを用意して
翻訳し分けることになると思います。</p>

<!--more-->


<h2>mobileinit</h2>

<p>まず最初に注意すべき点として
<a href="http://api.jquerymobile.com/global-config/">Configuring Defaults | jQuery Mobile API Documentation</a>
にも書いてありますが、
 <code>mobileinit</code>
のイベントハンドラは
<code>jquery.mobile.js</code>
の読み込み前に設定しておく必要があります。
(<code>$</code> や <code>on</code> を使うので <code>jquery.js</code> よりは後にします。)</p>

<p>これを知らないと設定が反映されなくて悩むことになります。</p>

<p>rails 3.1 以降との組み合わせなら、例えば
<code>app/assets/javascripts/mobile.js</code>
に以下のように書いておいて、
<code>app/assets/javascripts/mobile/jqm_ja.js</code>
などにローカライズ用の
<code>mobileinit</code>
を書くということになります。</p>

<p><code>
//= require jquery
//= require jquery_ujs
//= require_tree ./mobile
//= require jquery.mobile
</code></p>

<p>例えば以下のような感じになります。</p>

<p>```coffeescript app/assets/javascripts/mobile/jqm_ja.js.coffee
$(document).on &ldquo;mobileinit&rdquo;, &ndash;>
  #$.mobile.loadingMessageTextVisible = true
  #$.mobile.loadingMessage = &ldquo;読み込み中&hellip;&rdquo;
  $.mobile.loader.prototype.options.text = &ldquo;読み込み中です&hellip;&rdquo;
  $.mobile.loader.prototype.options.textVisible = false
  $.mobile.pageLoadErrorMessage = &ldquo;読み込みに失敗しました。&rdquo;
  $.mobile.page.prototype.options.backBtnText = &ldquo;戻る&rdquo;
  $.mobile.listview.prototype.options.filterPlaceholder = &ldquo;検索&hellip;&rdquo;
  $.mobile.table.prototype.options.columnBtnText = &ldquo;列の増減&hellip;&rdquo;
  $.mobile.dialog.prototype.options.closeBtnText =</p>

<pre><code>$.mobile.selectmenu.prototype.options.closeText = "閉じる"
</code></pre>

<p>  $.mobile.collapsible.prototype.options.expandCueText = &ldquo;クリックで開く&rdquo;
  $.mobile.collapsible.prototype.options.collapseCueText = &ldquo;クリックで閉じる&rdquo;
```</p>

<h2>Error Loading Page</h2>

<p>読み込みエラーの時のメッセージは
<code>$.mobile.pageLoadErrorMessage</code>
で設定できます。</p>

<p>いろいろな理由で表示されることが多いので、
真っ先に変更したくなるメッセージだと思います。</p>

<p>見た目は
<code>$.mobile.pageLoadErrorMessageTheme</code>
で変更できます。</p>

<h2>loading</h2>

<p>1.3.2 でしか確認していませんが、
jQuery Mobile 1.2 からは
<a href="http://api.jquerymobile.com/loader/">Loader Widget</a>
に変わっていて、
<code>$.mobile.loader.prototype.options.text</code>
で設定するようになっています。
ドキュメントによると、
メッセージの変更やテーマの変更以外にも
独自の HTML を表示するなど
いろいろとカスタマイズ出来るようです。</p>

<p><code>$.mobile.loader.prototype.options.textVisible</code>
で有効にした時だけ表示されるようなので、
不要なら無視しても良いかもしれません。</p>

<p>deprecated になっていますが、互換性のため、
<code>$.mobile.loadingMessage</code>
や
<code>$.mobile.loadingMessageTextVisible</code>
もまだ使えるようです。
(
<code>$.mobile.loader.prototype.options.text</code>
や
<code>$.mobile.loader.prototype.options.textVisible</code>
より優先されるようです。)</p>

<h2>pageloadfailed</h2>

<p>ローカライズとはちょっと離れて、
読み込みエラーのときに別処理をする方法を書いておきます。</p>

<p>devise の timeoutable を使っていると
普通の画面遷移をしようとしたときに
401 Unauthorized になることがあります。
そのときに読み込みエラーメッセージだけ出されても困るので、
<a href="http://api.jquerymobile.com/pageloadfailed/">pageloadfailed</a>
で認証画面に飛ぶためのリダイレクト処理を入れてみました。</p>

<p><code>event.preventDefault()</code>
を呼んでいないので、
<code>data.deferred</code>
の
<code>resolve()</code>
か
<code>reject()</code>
も呼ばず、
リダイレクト前のページの処理はデフォルトのままにしています。</p>

<p>```coffeescript app/assets/javascripts/mobile/pageloadfailed.js.coffee
$(document).on &ldquo;pageloadfailed&rdquo;, (event, data) &ndash;>
  if data.xhr.status == 401</p>

<pre><code>window.location.href = data.absUrl
</code></pre>

<p>```</p>

<h2>Back</h2>

<p><code>data-role="page"</code>
の要素に
<code>data-add-back-btn="true"</code>
を追加したときに
<a href="http://api.jquerymobile.com/header/">Header Widget</a>
に出てくる戻るボタンのテキストです。</p>

<p><code>$.mobile.page.prototype.options.backBtnText</code>
で設定できます。</p>

<h2>Filter items&hellip;</h2>

<p>ここからはページ全体ではなく
Widget ごとの翻訳の話になります。</p>

<p>まず
<a href="http://api.jquerymobile.com/listview/">Listview Widget</a>
で
<code>data-filter="true"</code>
の時に出てくる検索入力欄の placeholder のテキストです。</p>

<p>まとめてデフォルトを変更するには
今までのものと同様に
<code>mobileinit</code>
で
<code>$.mobile.listview.prototype.options.filterPlaceholder</code>
に設定します。</p>

<p>個別に変更するには
listview
に
<code>data-filter-placeholder</code>
属性を設定します。</p>

<p>この後のものも同様に全体のデフォルト設定を
<code>mobileinit</code>
で設定したり、
属性で個別に設定したりできます。</p>

<h2>Columns&hellip;</h2>

<p><a href="http://api.jquerymobile.com/table-columntoggle/">Column-Toggle Table Widget</a>
の列を増減させるポップアップを表示させるボタンのテキストです。</p>

<p><code>mobileinit</code>
で
<code>$.mobile.table.prototype.options.columnBtnText</code>
を設定するか、
<code>data-column-btn-text</code>
属性で設定します。</p>

<h2>Close</h2>

<p><a href="http://api.jquerymobile.com/dialog/">Dialog Widget</a>
の閉じるボタンのテキストは
<code>mobileinit</code>
で
<code>$.mobile.dialog.prototype.options.closeBtnText</code>
を設定するか、
<code>data-close-btn-text</code>
属性で設定します。</p>

<p>ダイアログの閉じるボタンはデフォルトではアイコンのみでテキストは表示されないのですが、
スクリーンリーダーで読み上げられるので、
アクセシビリティ的には重要と jQuery Mobile のドキュメントには書いてありました。</p>

<p>ドキュメントには書いてありませんが、
jQuery Mobile 1.3.2 のソースをみると
<a href="http://api.jquerymobile.com/selectmenu/">Selectmenu Widget</a>
の
Multiple selects
の閉じるボタンのテキストとして
<code>$.mobile.selectmenu.prototype.options.closeText</code>
も設定しておくと良さそうです。</p>

<h2>clear text</h2>

<p>検索入力はデフォルトで、
その他のテキスト入力では
<code>data-clear-btn=true</code>
の時に、
何かテキストを入力すると右に出てくるクリアボタンのオプションとして、
<code>data-clear-btn-text</code> があります。</p>

<p>これもデフォルトでは表示されず、スクリーンリーダーなどのアクセシビリティ用です。</p>

<p><code>$.mobile.textinput.prototype.options.clearBtnText</code>
でまとめて設定すれば良いと思います。</p>

<p><code>$.mobile.textinput.prototype.options.clearSearchButtonText</code>
という設定も残っていますが、
<code>deprecating for 1.3...</code>
とコメントに書いてあるので、
1.3 以降なら
<code>clearBtnText</code>
だけ設定しておけば良いと思います。</p>

<h2>click to expand contents, click to collapse contents</h2>

<p>最後に
<a href="http://api.jquerymobile.com/collapsible/">Collapsible Widget</a>
の翻訳です。</p>

<p>これもデフォルトでは表示されず、スクリーンリーダーなどのアクセシビリティ用です。</p>

<p>デフォルトが
<code>" click to expand contents"</code>
の方が
<code>$.mobile.collapsible.prototype.options.expandCueText</code>
や
<code>data-expand-cue-text</code>
で変更できて、
デフォルトが
<code>" click to collapse contents"</code>
の方が
<code>$.mobile.collapsible.prototype.options.collapseCueText</code>
や
<code>data-collapse-cue-text</code>
で変更できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[aasm gem の初期状態設定]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-30-aasm.html"/>
    <updated>2013-09-30T15:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/aasm</id>
    <content type="html"><![CDATA[<p><code>aasm</code> gem の使い方が悪くて、初期状態の値としてデータベースに nil が保存されてしまっていたという話です。</p>

<!--more-->


<p>確認したバージョンは ruby 2.0.0 + rails 3.2.14 + aasm 3.0.22 です。</p>

<p>例として以下のような感じの使い方をしてしまっていて、
<code>status</code> メソッドで <code>nil</code> を返さないようにしていたら
データベースには <code>nil</code> が保存されるようになってしまって、
<code>aasm</code> 以外 (<code>ransack</code> とか) からデータベースにアクセスした時に
問題になりました。</p>

<p>```ruby
  def status</p>

<pre><code># このメソッドがダメ
read_attribute(:status) || :starting
</code></pre>

<p>  end</p>

<p>  include AASM
  aasm column: &ldquo;status&rdquo; do</p>

<pre><code>state :starting, initial: true
state :running
state :stopped
state :finished

event :run do
  transitions from: [:starting, :stopped], to: :running
end

event :stop do
  transitions from: [:starting, :running], to: :stopped
end

event :finish do
  transitions from: [:running], to: :finished
end
</code></pre>

<p>  end
```</p>

<p><code>aasm</code> としては
<a href="https://github.com/aasm/aasm/blob/master/lib/aasm/persistence/active_record_persistence.rb">AASM::Persistence::ActiveRecordPersistence</a>
で
<code>before_validation :aasm_ensure_initial_state, :on =&gt; :create</code>
相当のフックを追加していて、
<code>model.valid?</code>
を実行すれば
<code>model.status</code>
が設定されるようになっていました。</p>

<p>たぶん使い始めた時に
<code>rails console</code>
で
<code>model = Model.new</code>
した直後の
<code>model.status</code>
が
<code>nil</code>
だったので、
どうにかしようと思って
getter メソッドを定義してしまったのだと思います。</p>

<p>このせいで以下のような
<code>ransack</code>
を使った検索フォームで初期状態のチェックを入れても
うまく検索出来ないという問題が起きていました。</p>

<p>```haml
= search_form_for @q, html: { class: &ldquo;form-search&rdquo; } do |f|
  %table</p>

<pre><code>-# ...
%tr
  %td= f.label :status_in
  %td
    - Model.aasm.states.each do |status|
      %label
        = check_box_tag "q[status_in][]", status.to_s, params.try(:[], :q).try(:[], :status_in).try(:include?, status.to_s), id: "q_status_in_#{status.to_s}"
        = status.localized_name
-# ...
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macでirbなどでの文字化けを直した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-20-mojibake-irb-on-mac.html"/>
    <updated>2013-09-20T18:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/mojibake-irb-on-mac</id>
    <content type="html"><![CDATA[<p>基本的には
<a href="http://qiita.com/irohiroki/items/c82657b5cb4bdb2aaac4">rails cで日本語が通らないときの直し方</a>
のやり方そのままで、
one liner としてまとめただけです。</p>

<p>先に結論を書いておくと
<code>install_name_tool -change /usr/lib/libedit.3.dylib $(brew list readline | grep libreadline.dylib) $(ruby -r readline -e 'puts $".grep /readline/')</code>
になりました。</p>

<!--more-->


<h2><code>readline.bundle</code> の探し方</h2>

<p>まず <code>readline.bundle</code> の探し方です。</p>

<p>実際に <code>require 'readline'</code> した時の
<code>$LOADED_FEATURES</code> から
探すのが確実ということで、
<code>ruby -r readline -e 'puts $".grep /readline/'</code>
としました。
試したところ、
<code>Array#grep</code>
で見つかるのが1個だけだったので、
そのまま <code>puts</code> しています。
複数見つかるようならもう少し調整が必要だと思います。</p>

<p><code>
% ruby -r readline -e 'puts $".grep /readline/'
/Users/kazu/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/x86_64-darwin12.4.1/readline.bundle
% otool -L $(ruby -r readline -e 'puts $".grep /readline/')
</code></p>

<h2>readline のインストール</h2>

<p>homebrew を使っているので、
<code>brew install readline</code>
でインストールしました。</p>

<p>インストールされた
<code>libreadline</code>
の場所は
<code>brew list readline | grep libreadline.dylib</code>
で調べました。</p>

<p><code>libedit</code>
が
<code>/usr/lib/libedit.3.dylib</code>
という名前でリンクされているので、
<code>libreadline.6.dylib</code>
という名前を使った方が良いのかもしれませんが、
homebrew でインストールされているパスに
バージョンが含まれていて、
ファイル名にバージョンを含めても意味がないと思って、
バージョンなしにしました。</p>

<p><code>
% brew list readline | grep libreadline.dylib
/usr/local/Cellar/readline/6.2.4/lib/libreadline.dylib
</code></p>

<h2><code>install_name_tool</code></h2>

<p>Qiita の記事にあったように
<code>install_name_tool -change /usr/lib/libedit.3.dylib $(brew list readline | grep libreadline.dylib) $(ruby -r readline -e 'puts $".grep /readline/')</code>
でリンクを変更しました。
念のため、実行前に
<code>ruby -rpp -e 'pp ARGV' --</code>
で実行内容を確認してから実行しました。</p>

<p><code>
% ruby -rpp -e 'pp ARGV' -- install_name_tool -change /usr/lib/libedit.3.dylib $(brew list readline | grep libreadline.dylib) $(ruby -r readline -e 'puts $".grep /readline/')
["install_name_tool",
 "-change",
 "/usr/lib/libedit.3.dylib",
 "/usr/local/Cellar/readline/6.2.4/lib/libreadline.dylib",
 "/Users/kazu/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/x86_64-darwin12.4.1/readline.bundle"]
% install_name_tool -change /usr/lib/libedit.3.dylib $(brew list readline | grep libreadline.dylib) $(ruby -r readline -e 'puts $".grep /readline/')
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery UI Autocomplete を自動で開く]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-18-auto-open-autocomplete.html"/>
    <updated>2013-09-18T15:43:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/auto-open-autocomplete</id>
    <content type="html"><![CDATA[<p>Google カレンダーの時刻入力のように combobox 的な入力欄で、
デフォルトは選択肢から選んで、
選択肢にないときは直接入力も出来るようにしたいと思いました。</p>

<p>いくつかの方法を試した結果、
jQuery UI の Autocomplete に少しコードを足したら
希望通りの挙動に出来ました。</p>

<!--more-->


<h2>HTML5 の datalist と autocomplete</h2>

<p>最初は HTML5 の datalist 要素を試しました。
<code>simple_form</code> gem を使っているので、
以下のように書きました。</p>

<p><code>haml
= f.input :drink, input_html: { autocomplete: "on", list: "drink_list" }
%datalist#drink_list
  %options(value="不要")
  %options(value="水")
  %options(value="お茶")
  %options(value="コーヒー")
</code></p>

<p>この方法の問題点としては、
IE は IE10 (以降?) しか対応していなかったり、
Mobile Safari も対応してなさそうだったりして
対応環境が微妙だったのと、
入力欄にフォーカスだけで自動で開くという挙動が出来なくて、
矢印の上下で開く必要があったので、
諦めました。</p>

<h2>Bootstrap Typeahead</h2>

<p>挙動としては
HTML5 の datalist の方法や
jQuery UI Autocomplete と似ていたのですが、
Bootstrap 3 では外されているという話があったり、
別途新しい typeahead.js が開発されているという話があったりして、
先にある程度 jQuery UI Autocomplete を試していたこともあり、
別途新しいライブラリを入れるなどの深追いはせずに
jQuery UI Autocomplete を使うことにしました。</p>

<h2>jQuery UI Autocomplete</h2>

<p><code>jquery-ui-rails</code> gem を使っていて、
必要なものだけ CSS や JS を require していたので、
まず <code>app/assets/stylesheets/application.css</code> に</p>

<p><code>text application.css
 *= require jquery.ui.autocomplete
</code></p>

<p>を追加しました。</p>

<p>次に <code>app/assets/javascripts/autocomplete.js.coffee</code> として
以下のような内容で作成しました。</p>

<p>```coffeescript autocomplete.js.coffee</p>

<h1>= require jquery.ui.autocomplete</h1>

<p>jQuery &ndash;>
  drink_list = [</p>

<pre><code>"不要"
"水"
"お茶"
"コーヒー"
</code></pre>

<p>  ]
  $(&ldquo;#somemodel_drink&rdquo;).autocomplete</p>

<pre><code>source: drink_list
autoFocus: true
delay: 0
minLength: 0
</code></pre>

<p>  .on &ldquo;focus&rdquo;, &ndash;></p>

<pre><code>$("#somemodel_drink").autocomplete("search", "")
</code></pre>

<p>```</p>

<h2>余談</h2>

<p>今回の話とは直接は関係ないのですが、
ファイルを細かく分割すると管理しやすくなるのは良いのですが、
他のライブラリの中のファイル名と重ならないようにしないと
<code>bootstrap.js.coffee</code> の中で <code>#= require bootstrap</code> しても
自分自身を <code>require</code> してしまって空っぽになって悩むことに
なるので注意が必要でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devise 3.0.3 と devise 3.1.0 で自動生成されるファイルの違い]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-18-devise30-devise31.html"/>
    <updated>2013-09-18T15:09:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/devise30-devise31</id>
    <content type="html"><![CDATA[<p><a href="https://gist.github.com/znz/6603471">devise 3.0.3 と devise 3.1.0 で自動生成されるファイルの差分</a>
をとって、バージョンアップした時に対応が必要な場所を調べました。</p>

<!--more-->


<h2>対応が必要な場所</h2>

<p>最初に結論をまとめておきます。</p>

<ul>
<li><code>config/initializers/devise.rb</code> に <code>config.secret_key</code> を追加。

<ul>
<li>これは <code>rails</code> コマンドを実行しようとした時などにエラーとどういう内容を追加すれば良いのかが出るのですぐに気付きます。</li>
</ul>
</li>
<li><code>rails generate devise:views</code> をしていたのなら

<ul>
<li><code>app/views/devise/mailer</code> の <code>token</code> 周り</li>
<li><code>app/views/devise/shared/_links.erb</code> の <code>devise_mapping.recoverable?</code> の行
の修正が必要です。</li>
</ul>
</li>
<li><code>app/models/user.rb</code> の <code>:token_authenticatable</code> の削除の検討

<ul>
<li>削除しなくても動いているので、すぐに削除する必要はなさそうですが、
<code>rails generate devise User</code> で生成される例からなくなっているので
削除を検討した方が良さそうです。</li>
</ul>
</li>
<li>データベースのテーブルの変更に追従するなら
<code>migration</code> を作って対応すれば良さそうです。</li>
</ul>


<h2>対象バージョン</h2>

<p>rails 3.2.14 との組み合わせで devise 3.0.3 と devise 3.1.0 で比較しました。
細かいバージョンは
<a href="https://gist.github.com/znz/6603471#file-bundle-list-in-devise30-txt">devise 3.0.3 の時の bundle list</a>
と
<a href="https://gist.github.com/znz/6603471#file-bundle-list-in-devise31-txt">devise 3.1.0 の時の bundle list</a>
を参照してください。</p>

<h2><code>rails generate devise:install</code> の差分</h2>

<p><code>rails generate devise:install</code> の差分のうち、
<a href="https://gist.github.com/znz/6603471#file-initializer-diff">config/initializers/devise.rb の差分</a>
は <code>"</code> から <code>'</code> への変更などもあって本質的ではない部分も多かったので、
<a href="https://gist.github.com/znz/6603471#file-initializer-tr-diff">tr で処理した差分</a>
を作ってみたところ、本質的には
<code>config.secret_key =</code>
の行の追加だけでした。</p>

<p><a href="https://gist.github.com/znz/6603471#file-locale-diff">config/locales/devise.en.yml の差分</a>
もあるので、
<code>locales</code>
のファイルも更新しておくと良さそうです。</p>

<h2><code>rails generate devise User</code> の差分</h2>

<p><code>rails generate devise User</code> の差分として、
<a href="https://gist.github.com/znz/6603471#file-devise_create_users-diff">migration の差分</a>
は
<code>sign_in_count</code> と <code>failed_attempts</code> への <code>NOT NULL</code> 制約の追加と
Token authenticatable 用の <code>authentication_token</code> の削除なので、
対応する変更をする <code>migration</code> を作って対応するか、
気にせず古いまま使えば良さそうです。</p>

<p><code>app/models/user.rb</code> からもコメントの中のモジュール例にあった
<code>token_authenticatable</code> が削除されています。</p>

<p><code>config/routes.rb</code> に追加される <code>devise_for :users</code> は同じでした。</p>

<h2><code>rails generate devise:views</code> の差分</h2>

<p><a href="https://gist.github.com/znz/6603471#file-views-diff">app/views の差分</a>
は
<code>@resource.なんとか_token</code>
だったものが
<code>@token</code>
に変わっているのと、
<code>app/views/devise/shared/_links.erb</code>
の
<code>if devise_mapping.recoverable? &amp;&amp; controller_name != 'passwords'</code>
が
<code>if devise_mapping.recoverable? &amp;&amp; controller_name != 'passwords' &amp;&amp; controller_name != 'registrations'</code>
に変わっているのが
主な変更でした。</p>
]]></content>
  </entry>
  
</feed>
