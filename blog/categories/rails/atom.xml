<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-01-28T21:29:03+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[yaml_dbでMySQLからPostgreSQLに移行した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-01-28-yaml-db.html"/>
    <updated>2014-01-28T21:25:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/yaml-db</id>
    <content type="html"><![CDATA[<p>先週 redmine を MySQL から PostgreSQL に移行するときに、最近の ruby では動かなくなっている taps ではなく yaml_db を使ってみました。</p>

<p>その後、自作 Rails アプリでも yaml_db を使って移行しました。</p>

<!--more-->


<h2>yaml_db 選び</h2>

<p>yaml_db は <code>gem install yaml_db</code> でインストールできるものが新しい rails などに
対応していないため fork が乱立していて、どれを使えばいいのか悩ましいのですが、
どこかで見かけた情報を元に
<code>gem 'yaml_db', github: 'jetthoughts/yaml_db', ref: 'fb4b6bd7e12de3cffa93e0a298a1e5253d7e92ba'</code>
を使いました。(今だと別の指定の方が良さそうです。後述)</p>

<p>redmine の場合は <code>Gemfile.local</code> に書いて (なければ作成)、
<code>bundle</code> でインストールすれば使えます。</p>

<h2>データベース移行</h2>

<p>アプリを止めるなどして、データベースの変更が発生しない状態にして移行作業をします。
YAML の互換性の問題などがあるので、データベースの移行と Ruby や Redmine のバージョンアップは別々にした方が良いです。</p>

<ol>
<li>まず <code>RAILS_ENV=production bundle exec rake db:data:dump</code> で <code>db/data.yml</code> を作成します。</li>
<li>つぎに Ruby や Rails や Redmine のバージョンはそのままで <code>config/database.yml</code> を変更します。</li>
<li>必要に応じて <code>bundle</code> でデータベースアダプターの gem をインストールします。</li>
<li>データベースの作成をしたり <code>db:migrate</code> をしておきます。</li>
<li><code>RAILS_ENV=production bundle exec rake db:data:load</code> で読み込みます。</li>
</ol>


<h2>yaml_db の fork の再調査</h2>

<p><a href="https://rubygems.org/gems/yaml_db">yaml_db gem</a> ( <a href="https://github.com/ludicast/yaml_db">ludicast/yaml_db</a> )
からの fork としては
<a href="https://rubygems.org/gems/gitlab_yaml_db">gitlab_yaml_db</a> ( <a href="https://github.com/gitlabhq/yaml_db">gitlabhq/yaml_db</a> ? )
のインストール数が
多いようですが、これは以前の gitlabhq が依存していたからのようです。 (今は依存していない)</p>

<p>新しい fork として
<a href="https://rubygems.org/gems/yaml_db_with_schema_tables">yaml_db_with_schema_tables</a>
( <a href="https://github.com/zweitag/yaml_db">zweitag/yaml_db</a> )
がありましたが、古い yaml_db からの fork なので、新しい rails への対応が入っていないような気がします。
他の fork との違いとして <code>schema_info</code> と <code>schema_migrations</code> も dump するようにしているようです。</p>

<p><a href="https://github.com/jetthoughts/yaml_db">jetthoughts/yaml_db</a> という fork は
rubygems.org にはリリースしていないようですが、
Rails 4 に対応して、 README の <code>This gem is now Rails 3 only.</code> という記述を削除しているなど、メンテナンスが続いていそうなので、
次はこの fork を使うのが良さそうだと思いました。
(古いブログの記事だと <code>gem 'yaml_db', github: 'jetthoughts/yaml_db', branch: 'rails4'</code> で rails4 ブランチを指定している例もあるようですが、 master にマージ済みなので branch 指定は不要です。)</p>

<h2>別 Rails アプリの移行</h2>

<p>続きとして、本日、自作の Rails アプリを <code>jetthoughts/yaml_db</code> を使って移行してみました。</p>

<h3>postgresql のデータベース作成</h3>

<p>データベースの作成は事前に出来るので、
<code>sudo -u postgres psql</code>
で作成しておきます。</p>

<p><code>
CREATE ROLE dbuser LOGIN ENCRYPTED PASSWORD 'dbpass' NOINHERIT VALID UNTIL 'infinity';
CREATE DATABASE dbname WITH ENCODING='UTF8' OWNER=dbuser;
</code></p>

<p>データベースの作成方法はいつも
<a href="http://www.redmine.org/projects/redmine/wiki/RedmineInstall">RedmineInstall</a>
を参考にしています。</p>

<h3>pg gem</h3>

<p>pg gem も忘れずにあらかじめ入れておきます。</p>

<h3>メンテナンス中画面設定</h3>

<p>まず apache2 + passenger の方でメンテナンス中画面を出すようにしました。</p>

<p>```</p>

<pre><code>&lt;Directory /path/to/app&gt;
    Options FollowSymLinks
    AllowOverride None
    #Order allow,deny
    #allow from all
    Order deny,allow
    deny from all
&lt;/Directory&gt;
ErrorDocument 403 "&amp;#x30e1;&amp;#x30f3;&amp;#x30c6;&amp;#x30ca;&amp;#x30f3;&amp;#x30b9;&amp;#x4e2d;&amp;#x3067;&amp;#x3059;&amp;#x3002;&amp;#x20;&amp;#x3057;&amp;#x3070;&amp;#x3089;&amp;#x304f;&amp;#x304a;&amp;#x5f85;&amp;#x3061;&amp;#x304f;&amp;#x3060;&amp;#x3055;&amp;#x3044;&amp;#x3002;"
</code></pre>

<p>```</p>

<p><code>ErrorDocument</code> の埋め込み文字列は <code>Content-Type: text/html;charset=iso-8859-1</code> になってNいたので、
<code>'メンテナンス中です。 しばらくお待ちください。'.unpack('U*').map{|c| '&amp;#x%x;' % c }.join('')</code>
のようにして、すべてエスケープして日本語を埋め込みました。</p>

<p>本来は 5xx のステータスにすべきですが、一時的なものなので 403 で妥協しました。
後日メンテナンスをするときはちゃんと 5xx にしたいと思っています。</p>

<h3>データベースのバックアップとダンプ</h3>

<p>cron で動かしているデータベースのバックアップと yaml_db でのダンプをしました。</p>

<p><code>
/path/to/app$ sudo /etc/cron.daily/local-dump
/path/to/app$ $ sudo env PATH=$(dirname $(awk '/PassengerDefaultRuby/{print $2}' /etc/apache2/conf.d/passenger.conf)):$PATH RAILS_ENV=production bundle exec rake db:data:dump
</code></p>

<h3>config/database.yml 書き換え</h3>

<p>database.yml で postgresql の方を使うように書き換えます。</p>

<p><code>
  adapter: postgresql
  encoding: unicode
  database: dbname
  pool: 5
  username: dbuser
  password: dbpass
  host: localhost
  #port: 5432
  min_messages: warning
</code></p>

<h3>データの読み込み</h3>

<p><code>rake db:migrate</code> でマイグレーションを実行した後、
<code>rake db:data:load</code> でデータを読み込みます。</p>

<p><code>
/path/to/app$ $ sudo env PATH=$(dirname $(awk '/PassengerDefaultRuby/{print $2}' /etc/apache2/conf.d/passenger.conf)):$PATH RAILS_ENV=production bundle exec rake db:migrate
/path/to/app$ $ sudo env PATH=$(dirname $(awk '/PassengerDefaultRuby/{print $2}' /etc/apache2/conf.d/passenger.conf)):$PATH RAILS_ENV=production bundle exec rake db:data:load
</code></p>

<h3>メンテナンス解除と確認</h3>

<p>apache2 の設定を戻して、動作確認します。</p>

<h2>まとめ</h2>

<p>Rails のデータベースの移行に yaml_db を使ってみました。</p>

<p>yaml_db の方が taps より昔からあって、
しばらくメンテナンスが止まっていて、
taps の方が主流になるかと思っていたら、
逆に taps の方がメンテナンスがあまりされなくなって、
yaml_db の方が fork が乱立して、新しい rails に対応したものもでてきて、
結局今のところデータベースの移行には yaml_db が無難という状況になっているようです。</p>

<p>taps は新しい Ruby に対応できていなかったり、
以前の記事に書いたようにスキーマの移行が不十分なところがあったりして、
使われなくなっていくように感じました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tapsでMySQLからPostgreSQLに移行した後に起きたトラブル事例]]></title>
    <link href="http://blog.n-z.jp/blog/2014-01-12-taps-trouble.html"/>
    <updated>2014-01-12T14:15:41+09:00</updated>
    <id>http://blog.n-z.jp/blog/taps-trouble</id>
    <content type="html"><![CDATA[<p>2013年7月ごろに <a href="http://rubygems.org/gems/taps">taps</a> を使って redmine のデータベースを MySQL から PostgreSQL に移行しました。</p>

<p>その時に移行が不十分で問題が少し起きていたので、その原因を調べて修正しました。</p>

<!--more-->


<h2>taps での移行</h2>

<p>taps の使い方については既に情報がたくさんあるので、簡単に書いておくだけにします。
昨年7月時点の情報なので、今だとさらにバージョン指定を増やさないとダメかもしれません。</p>

<p>まず、 Ruby 1.9.1 以降に対応できていないようなので、 Ruby 1.8.7 を使いました。
rack も新しいバージョンに対応できていないので、以下のような Gemfile でバージョンを指定して<code>bundle install --path vendor/bundle</code> して使いました。</p>

<p><code>ruby Gemfile
  source "https://rubygems.org"
  gem "taps"
  gem "sqlite3"
  gem "mysql"
  gem "pg"
  gem "rack", "1.0.1"
</code></p>

<p>元の <code>config/database.yml</code> の設定が</p>

<p><code>yaml config/database.yml
production:
  adapter: mysql2
  database: redmine_db
  host: localhost
  username: redminemyuser
  password: my_password
  encoding: utf8
</code></p>

<p>という感じなら、 MySQL を動かしている方で
<code>bundle exec taps server mysql://redminemyuser:my_password@localhost/redmine_db tapsuser tapspass</code>
と起動します。</p>

<p>PostgreSQL の方では</p>

<p><code>console sudo -u postgres psql
CREATE ROLE redminepguser LOGIN ENCRYPTED PASSWORD 'pg_password' NOINHERIT VALID UNTIL 'infinity';
CREATE DATABASE redmine_db WITH ENCODING='UTF8' OWNER=redminepguser;
</code></p>

<p>という感じでデータベースを作っておいて、
<code>bundle exec taps pull postgres://redminepguser:pg_password@localhost/redmine_db http://tapsuser:tapspass@localhost:5000</code>
という感じでデータを移行しました。</p>

<p>同じサーバーで移行したので taps の http も localhost にしていますが、別サーバーなら ssh のポートフォワーディングなどを使ってつなげば良いと思います。</p>

<h2>redmine でのトラブル</h2>

<p>管理者権限でログインして、管理からグループを追加 (/groups/new) しようとするとエラーになって、 log/production.log を確認すると
<code>ActiveRecord::StatementInvalid (PG::NotNullViolation: ERROR:  null value in column "mail_notification" violates not-null constraint</code>
または
<code>(ActiveRecord::StatementInvalid (PG::NotNullViolation: ERROR:  列"mail_notification"内のNULL値はNOT NULL制約違反です</code>
というエラーが出ていました。</p>

<h2>トラブルの原因</h2>

<p>いろいろ調べてみると <code>db/schema.rb</code> でいうと <code>mail_notification</code> に default がないのが問題だとわかりました。
後で追加調査したところ、 default が <code>""</code> (空文字列) のときにうまく移行できていないことがあるようでした。</p>

<h2>原因修正</h2>

<p><code>rails dbconsole</code> で
<code>ALTER TABLE users ALTER mail_notification SET DEFAULT '';</code>
で設定して、
<code>rake db:migrate</code> で <code>db/schema.rb</code> にも反映して
redmine を再起動すると直りました。</p>

<h2>その他の DEFAULT の修正</h2>

<p>別途 PostgreSQL の環境を用意して redmine を新規インストールして <code>rake db:migrate</code> で生成した <code>db/schema.rb</code> と比較して全体としては以下の修正をしました。</p>

<p><code>sql rails dbconsole
ALTER TABLE attachments ALTER filename SET DEFAULT '';
ALTER TABLE attachments ALTER disk_filename SET DEFAULT '';
ALTER TABLE attachments ALTER content_type SET DEFAULT '';
ALTER TABLE attachments ALTER digest SET DEFAULT '';
ALTER TABLE auth_sources ALTER type SET DEFAULT '';
ALTER TABLE auth_sources ALTER name SET DEFAULT '';
ALTER TABLE auth_sources ALTER account_password SET DEFAULT '';
ALTER TABLE boards ALTER name SET DEFAULT '';
ALTER TABLE changes ALTER action SET DEFAULT '';
ALTER TABLE comments ALTER commented_type SET DEFAULT '';
ALTER TABLE custom_fields ALTER type SET DEFAULT '';
ALTER TABLE custom_fields ALTER name SET DEFAULT '';
ALTER TABLE custom_fields ALTER field_format SET DEFAULT '';
ALTER TABLE custom_fields ALTER regexp SET DEFAULT '';
ALTER TABLE custom_values ALTER customized_type SET DEFAULT '';
ALTER TABLE documents ALTER title SET DEFAULT '';
ALTER TABLE enumerations ALTER name SET DEFAULT '';
ALTER TABLE wiki_contents ALTER comments SET DEFAULT '';
ALTER TABLE issue_categories ALTER name SET DEFAULT '';
ALTER TABLE issue_relations ALTER relation_type SET DEFAULT '';
ALTER TABLE issue_statuses ALTER name SET DEFAULT '';
ALTER TABLE issues ALTER subject SET DEFAULT '';
ALTER TABLE journal_details ALTER property SET DEFAULT '';
ALTER TABLE journal_details ALTER prop_key SET DEFAULT '';
ALTER TABLE journals ALTER journalized_type SET DEFAULT '';
ALTER TABLE messages ALTER subject SET DEFAULT '';
ALTER TABLE news ALTER title SET DEFAULT '';
ALTER TABLE news ALTER summary SET DEFAULT '';
ALTER TABLE projects ALTER name SET DEFAULT '';
ALTER TABLE projects ALTER homepage SET DEFAULT '';
ALTER TABLE queries ALTER name SET DEFAULT '';
ALTER TABLE repositories ALTER url SET DEFAULT '';
ALTER TABLE repositories ALTER login SET DEFAULT '';
ALTER TABLE repositories ALTER password SET DEFAULT '';
ALTER TABLE repositories ALTER root_url SET DEFAULT '';
ALTER TABLE roles ALTER name SET DEFAULT '';
ALTER TABLE settings ALTER name SET DEFAULT '';
ALTER TABLE tokens ALTER action SET DEFAULT '';
ALTER TABLE tokens ALTER value SET DEFAULT '';
ALTER TABLE trackers ALTER name SET DEFAULT '';
ALTER TABLE users ALTER hashed_password SET DEFAULT '';
ALTER TABLE users ALTER firstname SET DEFAULT '';
ALTER TABLE users ALTER mail SET DEFAULT '';
ALTER TABLE users ALTER language SET DEFAULT '';
ALTER TABLE versions ALTER name SET DEFAULT '';
ALTER TABLE versions ALTER description SET DEFAULT '';
ALTER TABLE watchers ALTER watchable_type SET DEFAULT '';
ALTER TABLE wiki_content_versions ALTER compression SET DEFAULT '';
ALTER TABLE wiki_content_versions ALTER comments SET DEFAULT '';
ALTER TABLE users ALTER mail_notification SET DEFAULT '';
ALTER TABLE users ALTER lastname SET DEFAULT '';
</code></p>

<p><code>sql rails dbconsole
ALTER TABLE users ALTER mail_notification SET DEFAULT '';
</code></p>

<p>はすでに実行済みで、</p>

<p><code>sql rails dbconsole
ALTER TABLE users ALTER lastname SET DEFAULT '';
</code></p>

<p>は既に default が <code>""</code> になっていたので不要でしたが、
重複して実行しても問題が起きないようなので、上の SQL にも入れています。</p>

<h2>まとめ</h2>

<p>最初のデータベース選択は重要で、アプリケーションが両方対応していても、後から変更するのは大変です。</p>

<p>問題が起きそうなデータ型を使っていなければ <code>taps</code> ですんなり移行できるように見えますが、別途クリーンな環境を用意して生成した <code>db/schema.rb</code> と比較するなどのチェックも必要でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rail 3.2でcache_digestsを使ってみた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-08-cache-digests.html"/>
    <updated>2013-12-08T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/cache-digests</id>
    <content type="html"><![CDATA[<p>まだ Rails 3.2.16 のままのアプリで <code>cache_digests</code> gem を使って
fragment cache を導入してみました。</p>

<p>Rails 4.0 では標準になっているはずなので、
使い方は同じだと思います。</p>

<p>この投稿は
<a href="http://qiita.com/advent-calendar/2013/ruby-on-rails">Ruby on Rails Advent Calendar 2013</a>
の8日目の記事です。</p>

<!--more-->


<h2>インストール</h2>

<p>まず <code>Gemfile</code> に以下の gem の指定を追加してインストールしました。</p>

<p><code>ruby Gemfile
gem 'cache_digests'
gem 'dalli', group: :production
</code></p>

<h2>環境設定</h2>

<p>キャッシュの影響の確認などのデバッグ用に <code>development</code> 環境でも
キャッシュを有効にしました。
ちゃんとキャッシュで来ているかどうかの確認や削除がしやすいように
保存先はデフォルトの <code>:file_store</code> のままにしています。</p>

<p><code>ruby config/environments/development.rb
  config.action_controller.perform_caching = true
</code></p>

<p><code>production</code> 環境では <code>dalli</code> を使って <code>memcached</code> に保存するようにしました。
<code>dalli</code> の設定はこの記事の本題ではないので、
<code>memcached</code> の設定などは他のサイトを参考にしてください。</p>

<p><code>ruby config/environments/production.rb
  config.cache_store = :dalli_store
</code></p>

<p><code>staging</code> 環境もあったので <code>config/environments/staging.rb</code> にも同様の設定をしました。</p>

<h2>fragment cache</h2>

<p>すでに
<code>app/views/comments/_comment.html.haml</code> や
<code>app/views/posts/_post.html.haml</code> のような view を使って
<code>render @comments</code> や <code>render @posts</code> のように使っていたので、</p>

<p><code>text app/views/comments/_comment.html.haml
- cache comment do
  -# 今までの内容
</code></p>

<p>のように <code>cache comment do ... end</code> で今までの内容をくくるだけでした。
<code>cache</code> メソッド自体の返り値は <code>=</code> で埋め込んだりせずにそのまま呼ぶだけで大丈夫でした。</p>

<h2>動作確認</h2>

<p><code>log/developement.log</code> などを <code>fragment</code> で検索してみると</p>

<p><code>text log/developement.log
Write fragment views/comments/29-20130905083500/96f0ec0ce36af8132826f3bfbe0079db 0.5ms
Read fragment views/comments/30-20130905083518/96f0ec0ce36af8132826f3bfbe0079db 0.4ms
</code></p>

<p>などと記録されていて、キャッシュが使われていることが確認できました。</p>

<p><code>development</code> 環境では実際のキャッシュファイルは <code>tmp/cache/</code> 以下にありました。</p>

<h2>キャッシュの無効化 (invalidate)</h2>

<p>キャッシュが古くなってもう有効ではないという状態にすることを invalidate というと思いますが、
内容が更新された時に古いキャッシュが使われると問題があるので、
その対処をする必要があります。</p>

<p><code>cache</code> メソッドの引数に <code>ActiveRecord</code> のオブジェクトを渡した時の
キャッシュのキーは先ほどの例だと
<code>views/comments/:id-:updated_at/:md5</code>
という感じで <code>comment</code> オブジェクトの <code>id</code> と <code>updated_at</code> と
<code>app/views/comments/_comment.html.haml</code> の MD5 が使われていて、
view のファイルが変更したり、
<code>comment</code> ファイルの <code>updated_at</code> を更新したりした時に
自動で無効になるようです。</p>

<p>つまり、この view の中で別の partial render を使っていると
反映されないということなので、
内側の方でも <code>cache</code> を使うなどの対処が必要そうです。
実際に <code>_post.html.haml</code> の中で <code>render post.comments</code> のようなことをしました。</p>

<p>さらに以下のように <code>belongs_to</code> に <code>touch: true</code> を付けて、
コメントが付いた時に <code>post</code> の <code>updated_at</code> も更新されるようにしました。</p>

<p><code>ruby app/models/comment.rb
  belongs_to :commentable, polymorphic: true, touch: true
</code></p>

<h2>キャッシュの完全削除</h2>

<p><code>rails console</code> で <code>Rails.cache.clear</code> を実行すれば削除できました。
他の sass などのキャッシュも <code>tmp/cache/</code> の中にあるので
一緒に削除されてしまうようです。</p>

<h2>まとめ</h2>

<p>とりあえず使い始めるための最低限の知識をまとめてみました。</p>

<p>後は
<a href="http://ja.asciicasts.com/episodes/387-cache-digests">ASCIIcasts &ndash; “Episode 387 &ndash; Cache Digests”</a>
で説明されている
<code>rake cache_digests:nested_dependencies</code>
などを知っておけば良さそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4.0.2のi18nで出るようになったdeprecated警告の対策方法]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-04-rails-i18n-deprecated-warning.html"/>
    <updated>2013-12-04T10:59:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rails-i18n-deprecated-warning</id>
    <content type="html"><![CDATA[<p>Ruby on Rails のセキュリティアップデートがあって、
4.0.2 にあげたら i18n gem も 0.6.5 から 0.6.9 にあがって
<code>locale</code> の設定変更をしているところで
<code>[deprecated] I18n.enforce_available_locales will default to true in the future. If you really want to skip validation of your locale you can set I18n.enforce_available_locales = false to avoid this message.</code>
という警告が出るようになりました。</p>

<!--more-->


<h2>警告の出るタイミング</h2>

<p><a href="http://stackoverflow.com/questions/20361428/rails-4-0-2-i18n-validation-deprecation-warning">deprecated &ndash; Rails 4.0.2 I18n validation deprecation warning &ndash; Stack Overflow</a>
経由で
<a href="https://github.com/svenfuchs/i18n/commit/3b6e56e06fd70f6e4507996b017238505e66608c9">Add I18n.locale_available? and enforce available locales</a>
のコミットから入った変更ということで、
コミットログをみてみると、</p>

<ul>
<li><code>I18n.config.default_locale=</code></li>
<li><code>I18n.config.locale=</code></li>
<li><code>I18n.translate</code></li>
<li><code>I18n.localize</code></li>
<li><code>I18n.transliterate</code></li>
</ul>


<p>を呼んだときに影響するようです。
つまり <code>rails new</code> で作っただけだと <code>config/application.rb</code> の
<code>config.i18n.default_locale = :de</code> がコメントアウトされていて、
警告は出ません。</p>

<h2>日本語のみで使う場合</h2>

<p>日本語のみで使うのなら、
将来のデフォルトの
<code>I18n.enforce_available_locales = true</code>
にしてしまってから、
普通に日本語をデフォルトにする
<code>config.i18n.default_locale = :ja</code>
を呼べば良いと思います。</p>

<p>```ruby config/application.rb</p>

<pre><code>I18n.enforce_available_locales = true
config.i18n.default_locale = :ja
</code></pre>

<p>```</p>

<p>ただし、先にちゃんと日本語の locale ファイルを作っておかないと
<code>I18n::InvalidLocale</code>
という例外が発生して、
<code>rake</code> などで
<code>:ja is not a valid locale</code>
と言われてしまいます。</p>

<h2>今まで通りの挙動にする場合</h2>

<p><code>I18n.enforce_available_locales = false</code>
にすれば今まで通りの挙動になり、
存在しない <code>locale</code> を設定しても例外は発生しません。</p>

<h2>今のデフォルト</h2>

<p>今は
<code>I18n.enforce_available_locales = nil</code>
がデフォルトになっていて、
<code>nil</code> だと警告がでる、
ということのようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby で ISBN をチェックしたりハイフンを入れたり]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-12-isbn.html"/>
    <updated>2013-10-12T14:38:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/isbn</id>
    <content type="html"><![CDATA[<p>本には
<a href="http://ja.wikipedia.org/wiki/ISBN">ISBN</a>
というものが付いていて、
末尾のチェックディジットは仕様を参照すれば
簡単に計算出来そうです。</p>

<p>10 桁のものと新しい 13 桁のものがあったり、
出版者の部分の桁数が違ったりして
ちゃんとハイフンを入れるのは面倒そうです。</p>

<p>チェックディジットの方も自分で実装すると
バグっていたときに面倒なので、
良さそうな gem がないか探してみました。</p>

<p>最終的にはいくつかの理由から
<a href="http://rubygems.org/gems/lisbn">lisbn</a>
という gem を使いました。</p>

<!--more-->


<h2>gem の選択</h2>

<p>まず
<a href="http://rubygems.org/search?utf8=%E2%9C%93&amp;query=isbn">rubygems.org の右上で isbn と検索</a>
するところから始めました。</p>

<p>インストール数の多い順に見ていくと、</p>

<ul>
<li><a href="http://rubygems.org/gems/isbn10">isbn10</a>

<ul>
<li>インストール数は一番多い</li>
<li>10桁のみ</li>
<li>古い</li>
</ul>
</li>
<li><a href="https://github.com/ragalie/isbn-tools">isbn-tools</a>

<ul>
<li>古い</li>
<li>Not Maintained</li>
<li>lisbn が後継</li>
</ul>
</li>
<li><a href="https://github.com/entangledstate/isbn">isbn</a>

<ul>
<li>画像対応とかいろいろ高機能っぽいけど今回は不要</li>
<li><code>with_dashes</code> というメソッドは桁数決めうちで不適切</li>
</ul>
</li>
<li><a href="https://github.com/zapnap/isbn_validation">isbn_validation</a>

<ul>
<li>ActiveRecord の validates</li>
<li>ISBN ではない <a href="http://www.amazon.co.jp/gp/help/customer/display.html?nodeId=747416">ASIN</a> も扱いたかったので今回は不適当</li>
</ul>
</li>
<li><a href="https://github.com/ragalie/lisbn">lisbn</a>

<ul>
<li>比較的新しい</li>
<li>10桁と13桁の両対応</li>
<li>ハイフンを入れるために必要な分解処理がある (後は <code>join('-')</code> すれば良いだけ)</li>
<li>data/RangeMessage.xml というファイルを持っていて適切にわけてくれる</li>
</ul>
</li>
</ul>


<p>という感じでした。</p>

<h2>lisbn の使用例</h2>

<p>データベースに保存するのに統一されていると
<code>validates :isbn, uniqueness: true</code>
が使えるので、
以下のように ISBN13 に統一する処理を入れました。</p>

<p>それ以外の場合は ASIN と見なしてそのまま返しています。</p>

<p>```ruby
  def isbn_unify(isbn)</p>

<pre><code># Convert JISX0208 alphabet to ASCII.
isbn = NKF.nkf('-Ww -Z0', isbn).delete("^A-Za-z0-9")

# Convert to isbn13
lisbn = Lisbn.new(isbn)
if lisbn.valid?
  lisbn.isbn13
else
  isbn
end
</code></pre>

<p>  end
```</p>

<p>出力する側では
<code>parts</code>
は常に ISBN13 のものだけのようなので、
ISBN10
に出来るときは
頭の &lsquo;978&rsquo; を外して
チェックディジットを付け直すようにしました。</p>

<p>```haml
&ndash; lisbn = Lisbn.new(isbn_or_asin)
&ndash; if lisbn.valid?
  &ndash; parts = lisbn.parts
  &ndash; if parts[0] == &lsquo;978&rsquo;</p>

<pre><code>%p.isbn10 ISBN10: #{parts[1..-2].join('-')}-#{lisbn.isbn10[-1]}
</code></pre>

<p>  %p.isbn13 ISBN13: #{lisbn.parts.join(&lsquo;&ndash;&rsquo;)}
&ndash; else
  %p.asin ASIN: #{isbn_or_asin}
```</p>
]]></content>
  </entry>
  
</feed>
