<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-10-07T20:23:39+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[font-awesome-sass を 4.1.0 から 4.2.0 にあげたらアイコンが表示されなくなったので対処した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-09-03-font-awesome-sass-4-2-0.html"/>
    <updated>2014-09-03T20:52:56+09:00</updated>
    <id>http://blog.n-z.jp/blog/font-awesome-sass-4-2-0</id>
    <content type="html"><![CDATA[<p>Rails 4.1.5 で使っている <code>font-awesome-sass</code> gem を 4.1.0 から 4.2.0 にあげたところ、
アイコンが表示されなくなったので、原因を調べてみました。</p>

<h2>解決方法</h2>

<p><a href="https://github.com/FortAwesome/font-awesome-sass">https://github.com/FortAwesome/font-awesome-sass</a> には 3.x からのアップグレード方法しか
書いていないのですが、
4.1.0 などの 4.x 系から 4.2.0 にあげるときは</p>

<pre><code>*= require font-awesome
</code></pre>

<p>の代わりに</p>

<pre><code>@import "font-awesome-sprockets";
@import "font-awesome";
</code></pre>

<p>のように <code>@import</code> を使う必要があり、
既に <code>@import</code> を使っている場合でも
<code>@import "font-awesome-sprockets";</code>
の行の追加が必要でした。</p>

<h2>詳細</h2>

<p>4.1.0 と 4.2.0 の差分の
<a href="https://github.com/FortAwesome/font-awesome-sass/commit/a527acdf693cf0bced797e75f387a8f8e2a9c844" title="Refactoring for use in multiple Ruby envs and upgrading to FontAwesome 4.2.0">Refactoring for use in multiple Ruby envs and upgrading to FontAwesome 4.2.0</a>
を眺めてみると、
FontAwesome を 4.2.0 にあげる以外に
<code>vendor/assets/</code> から <code>assets/</code> に移動していたり、
それに関係する変更をしていたりするようです。</p>

<p>それから詳しいことはわかりませんが、
<code>icon-font-path($path)</code> と <code>icon-image-path($path)</code> で
それぞれ
sprockets では <code>font-path($path)</code> と <code>image-path($path)</code> で、
compass では <code>font-url($path, true)</code> と <code>image-url($path, true)</code> を
使うようになった影響で <code>@import "font-awesome-sprockets"</code> が必要になったようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4.1 で jQuery Raty を使ってみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-09-jquery-raty.html"/>
    <updated>2014-08-09T19:37:53+09:00</updated>
    <id>http://blog.n-z.jp/blog/jquery-raty</id>
    <content type="html"><![CDATA[<p>Rails で星を使った評価付けを使いたかったので、
jQuery プラグインを探してみたところ、
<a href="http://wbotelhos.com/raty" title="jQuery Raty">jQuery Raty</a>
というのが良さそうだったので使ってみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>jQuery Raty v2.7.0</li>
<li>Ruby on Rails 4.1.4</li>
<li>Ruby 2.1.2</li>
</ul>


<h2>うまくいかなかった方法</h2>

<p><a href="http://rubygems.org/" title="RubyGems.org">RubyGems.org</a>
の方には古いバージョンしかなさそうだったので、
<a href="https://rails-assets.org/" title="Rails Assets">Rails Assets</a>
で最新バージョンを使おうと思い、
<code>Gemfile</code> に以下の設定をしたのですが、
<code>raty</code> のディレクトリ配置が特殊なのか、
うまくいきませんでした。</p>

<pre><code class="ruby Gemfile">source 'https://rails-assets.org'
gem 'rails-assets-raty'
</code></pre>

<h3>development 環境では動いた方法</h3>

<p>以下のように書くことで development 環境では動いたのですが、
capistrano で deploy した先では画像が表示されていませんでした。</p>

<pre><code class="css app/assets/stylesheets/raty.css.scss">//= require raty/lib/jquery.raty
</code></pre>

<pre><code class="text app/assets/javascripts/raty.js.coffee.erb">#= require raty/lib/jquery.raty
 $ -&gt;
   $('.raty').raty
     cancel   : true
    cancelOff: '&lt;%= image_path('raty/lib/images/cancel-off.png') %&gt;'
    cancelOn : '&lt;%= image_path('raty/lib/images/cancel-on.png') %&gt;'
    starHalf : '&lt;%= image_path('raty/lib/images/star-half.png') %&gt;'
    starOff  : '&lt;%= image_path('raty/lib/images/star-off.png') %&gt;'
    starOn   : '&lt;%= image_path('raty/lib/images/star-on.png') %&gt;'
    click: (score, event) -&gt;
      raty = $(event.target).parent()
      $(raty.data('field')).val(score)
    score: -&gt;
      $($(this).data('field')).val()
</code></pre>

<h2>うまくいった方法</h2>

<p><code>vendor/assets/stylesheets/jquery.raty.css</code> と
<code>vendor/assets/javascripts/jquery.raty.js</code> に
ダウンロードしたファイルをおいて、
<code>assets</code> も以下のように書き換えました。
画像も <code>vendor/assets/images/raty</code> においてもうまくいかなかったので、
<code>vendor/assets/images/raty</code> におきました。</p>

<p>Web フォントは今回は使っていないので、
考慮していません。
<code>starType</code> を <code>i</code> に変更しない限り使われないはずなので、
Web フォントを配置しなくても問題ないと思います。</p>

<pre><code class="css app/assets/stylesheets/raty.css.scss">//= require jquery.raty
</code></pre>

<pre><code class="text app/assets/javascripts/raty.js.coffee.erb">#= require jquery.raty
 $ -&gt;
   $('.raty').raty
     cancel   : true
    cancelOff: '&lt;%= image_path('raty/cancel-off.png') %&gt;'
    cancelOn : '&lt;%= image_path('raty/cancel-on.png') %&gt;'
    starHalf : '&lt;%= image_path('raty/star-half.png') %&gt;'
    starOff  : '&lt;%= image_path('raty/star-off.png') %&gt;'
    starOn   : '&lt;%= image_path('raty/star-on.png') %&gt;'
    click: (score, event) -&gt;
      raty = $(event.target).parent()
      $(raty.data('field')).val(score)
    score: -&gt;
      $($(this).data('field')).val()
</code></pre>

<h2>フォームでの使用例</h2>

<p>bootstrap 3.2.0 の <code>form-horizontal</code> を使っているので、
slim で以下のように使っています。</p>

<pre><code class="text _form.html.slim">    .form-group
      = f.label :readability, class: "control-label col-md-2"
      .col-md-10
        .raty.form-control data-field='#book_report_readability'
        = f.hidden_field :readability, class: "form-control"
</code></pre>

<h2>show での使用例</h2>

<p>以下のように <code>raty</code> の星を使って表示しています。</p>

<pre><code class="ruby app/helpers/raty_helper.rb">module RatyHelper
  def raty_stars(n, max=5)
    (
      image_tag('raty/star-on.png', alt: '') * n +
      image_tag('raty/star-off.png', alt: '') * (max-n)
      ).html_safe
  end
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[doorkeeper providerサンプルアプリに対応するOAuthクライアントをdeviseで作成した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-15-doorkeeper-devise-client.html"/>
    <updated>2014-07-15T18:50:40+09:00</updated>
    <id>http://blog.n-z.jp/blog/doorkeeper-devise-client</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/znz/doorkeeper-provider-app">doorkeeper-provider-app</a>
を使って SSO (Single Sign On) のように使うクライアントアプリを作成しました。
<a href="https://github.com/znz/doorkeeper-devise-client-app">doorkeeper-devise-client-app</a>
で公開しています。</p>

<p>SSO は OAuth 2.0 の本来の使い方ではないので、不便な部分もありますが、
クライアント側の例として参考になると思います。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>ruby 2.1.2</li>
<li>rails 4.1.4</li>
<li>bootstrap 3.2.0</li>
<li>devise 3.2.4</li>
<li>omniauth 1.2.2</li>
<li>omniauth-oauth2 1.2.0</li>
<li>bootstrap-sass 3.2.0.0</li>
<li>dotenv-rails 0.11.1</li>
</ul>


<h2>簡単な役割解説</h2>

<p>provider は doorkeeper gem を入れている rails アプリ側で認証や認可を受け持ちます。
(OAuth の仕様的には認証と認可が別々のサーバーのこともあります。)</p>

<p>ここでいう OAuth クライアントは devise + omniauth + omniauth-oauth2 を使った rails アプリのことです。
ブラウザーなどのユーザー側にあるクライアントではなく、ユーザーから見れば、これもサーバーです。</p>

<p>詳しいことは OAuth 2.0 の仕様を調べてください。</p>

<h2>大まかな流れ</h2>

<ol>
<li><code>lib/omniauth/strategies/doorkeeper.rb</code> 作成</li>
<li><code>config/initializers/devise.rb</code> で <code>config.omniauth :doorkeeper, ...</code></li>
<li><code>app/controllers/users/omniauth_callbacks_controller.rb</code> 作成
(<code>uid</code> でユーザーを自動作成したり、 <code>access_token</code> (<code>credentials.token</code>) を保存したり)</li>
<li><code>config/routes.rb</code> に設定</li>
<li><code>user</code> に <code>provider</code> を追加</li>
<li><code>app/models/user.rb</code> で <code>devise :omniauthable</code> や <code>uid</code> を使った処理を実装</li>
<li><code>OAuth2::AccessToken</code> を生成</li>
<li>それを使って API アクセス</li>
</ol>


<p><code>access_token</code> を session に保存するかデータベースに保存するかは
アプリケーションのポリシー次第になります。
このアプリでは session に保存しています。</p>

<p>別途 callback uri として <code>http://localhost:3000/users/auth/doorkeeper/callback</code> のような URL を指定して
doorkeeper 側の <code>oauth/applications</code> に登録しておく必要があります。</p>

<h2><code>lib/omniauth/strategies/doorkeeper.rb</code> 作成</h2>

<p>例として
<a href="https://github.com/doorkeeper-gem/doorkeeper-devise-client" title="Dookreeper Devise+Omniauth Client">Dookreeper Devise+Omniauth Client</a>
と比較して <code>info</code> に <code>name</code> を増やしています。</p>

<p>コントローラーを <code>users</code> の下の <code>Users::OmniauthCallbacksController</code> にしたので、
戻り先の <code>authorize_path</code> は <code>'/oauth/authorize'</code> ではなく <code>'/users/oauth/authorize'</code> になっています。</p>

<p>info のハッシュはサーバーから受け取れていて、後の処理でもっと欲しい情報があれば自由に増やせます。</p>

<pre><code class="ruby lib/omniauth/strategies/doorkeeper.rb">module OmniAuth
  module Strategies
    class Doorkeeper &lt; OmniAuth::Strategies::OAuth2
      option :name, :doorkeeper

      option :client_options, {
        site: 'http://localhost:4000',
        authorize_path: '/users/oauth/authorize'
      }

      uid do
        raw_info['id']
      end

      info do
        {
          email: raw_info['email'],
          name: raw_info['name'],
        }
      end

      def raw_info
        @raw_info ||= access_token.get('/api/v1/me.json').parsed || {}
      end
    end
  end
end
</code></pre>

<h2><code>config/initializers/devise.rb</code> で設定</h2>

<p><a href="https://github.com/doorkeeper-gem/doorkeeper-devise-client">サンプルアプリ</a>
では</p>

<pre><code class="ruby config/initializers/devise.rb">  config.omniauth :doorkeeper,  DOORKEEPER_APP_ID, DOORKEEPER_APP_SECRET, :client_options =&gt;  {:site =&gt; DOORKEEPER_APP_URL}
</code></pre>

<p>となっていました。</p>

<p><code>scope</code> も追加すると以下のようになります。
<code>dotenv</code> を使って <code>ENV</code> から取るようにしました。</p>

<pre><code class="ruby config/initializers/devise.rb">  config.omniauth :doorkeeper, ENV['DOORKEEPER_APP_ID'], ENV['DOORKEEPER_APP_SECRET'], client_options: {site: ENV['DOORKEEPER_APP_URL'] }, scope: 'public write'
</code></pre>

<p><code>scope</code> は <code>'public,write'</code> だと <code>The requested scope is invalid, unknown, or malformed.</code> というエラーになってしまったので、
<code>,</code> 区切りではなくスペース区切りにしています。</p>

<h2><code>app/controllers/users/omniauth_callbacks_controller.rb</code> 作成</h2>

<p>callback で認証結果を受け取る部分を作成します。
ここで認証結果を受け取って、ユーザーを必要に応じてひも付けたり、
後で API アクセスに使うアクセストークンを保存したりします。</p>

<p>認証に失敗した時はログイン画面 (あれば) か <code>root_path</code> に戻すようにしています。</p>

<pre><code class="ruby app/controllers/users/omniauth_callbacks_controller.rb">class Users::OmniauthCallbacksController &lt; Devise::OmniauthCallbacksController
  # https://github.com/plataformatec/devise/issues/2432
  protect_from_forgery except: :doorkeeper
  skip_filter :auto_authenticate_omniauth_user!, only: :doorkeeper

  def doorkeeper
    # You need to implement the method below in your model (e.g. app/models/user.rb)
    oauth_data = request.env['omniauth.auth']
    @user = User.find_or_create_for_doorkeeper_oauth(oauth_data)
    session[:doorkeeper_token] = oauth_data['credentials']['token']

    if @user.persisted?
      sign_in_and_redirect @user, :event =&gt; :authentication #this will throw if @user is not activated
      if is_navigational_format?
        set_flash_message(:notice, :success, kind: ENV['DOORKEEPER_APP_NAME'] || 'Doorkeeper')
        # hide flash message after auto sign in
        #flash.delete(:notice)
      end
    else
      session['devise.doorkeeper_data'] = request.env['omniauth.auth']
      if respond_to?(:new_user_registration_url)
        redirect_to new_user_registration_url
      else
        redirect_to root_url
      end
    end
  end

  def after_omniauth_failure_path_for(scope)
    if respond_to?(:new_session_path)
      new_session_path(scope)
    else
      root_path
    end
  end
end
</code></pre>

<p>自動ログイン後のメッセージが不要なら <code>set_flash_message</code> の部分を <code>flash.delete(:notice)</code> に置き換えます。
「Doorkeeper でログインしました」だとどのサイトか区別がつかないので、
<code>ENV['DOORKEEPER_APP_NAME']</code> で表示用の名前を設定できるようにしています。</p>

<h2><code>config/routes.rb</code> に設定</h2>

<p><code>config/routes.rb</code> で <code>omniauth_callbacks</code> として独自のものを使うように設定します。</p>

<p>今回は認証必須なので不要ですが、
例として <code>sign_in</code> と <code>sign_out</code> の URL も入れました。
実際に試してみるとすぐに自動ログインで再ログインしてしまいます。</p>

<p><code>sign_out</code> が <code>get</code> か <code>delete</code> か違うことがあるので、
<code>sign_out_via</code> を使ってどちらでも対応できるようにしました。</p>

<pre><code class="ruby config/routes.rb">  devise_for :users, controllers: { omniauth_callbacks: 'users/omniauth_callbacks' }
  devise_scope :user do
    get 'sign_in',  to: 'devise/sessions#new',     as: :new_user_session
    __send__ Devise.sign_out_via, 'sign_out', to: 'devise/sessions#destroy', as: :destroy_user_session
  end
</code></pre>

<h2>timeoutable 設定</h2>

<p>SSO 的に使うのは
OAuth 2.0 の本来の目的ではないので、
ログアウトは難しい問題です。
たとえば
doorkeeper
と連携するアプリが複数あるときにまとめてログアウト出来ないなどの問題があります。</p>

<p>そのため、このアプリでは一定時間で再ログインが必要になるように <code>timeoutable</code> を使って、
こまめに認証し直すようにしてログアウト問題を緩和しています。</p>

<p>その副作用として入力に時間のかかるフォームがあると入力途中でタイムアウトしてしまって
投稿に失敗するなどの問題も起きるので、その点を考慮しておく必要があります。</p>

<pre><code class="ruby config/initializers/devise.rb">  # Default is 30 minutes.
  config.timeout_in = 1.minutes if Rails.env.development?
  config.expire_auth_token_on_timeout = true
</code></pre>

<h2>app/models/user.rb に実装</h2>

<p><code>find_or_create_for_doorkeeper_oauth</code> の実装は <code>concerns</code> に分けてみました。
<code>omniauthable</code> に <code>omniauth_providers</code> も設定して余計な route が生成されないようにしています。
<code>timeoutable</code> も入れています。</p>

<pre><code class="ruby app/models/user.rb">  devise :omniauthable, omniauth_providers: [:doorkeeper]
  devise :timeoutable
  include DoorkeeperOauthFinder
</code></pre>

<p>ログインしたときに <code>name</code> や <code>email</code> が変わっていたら反映するようにしています。</p>

<p><code>id</code> を統一したいのなら、 <code>create</code> のときに <code>id</code> まで指定すると
doorkeeper gem による OAuth provider 側とユーザーの ID を統一できます。</p>

<p>SSO 的に使うのならパスワードは不要なので、
ここではコメントアウトしています。</p>

<pre><code class="ruby app/models/concerns/doorkeeper_oauth_finder.rb">module DoorkeeperOauthFinder
  extend ActiveSupport::Concern

  module ClassMethods
    def find_or_create_for_doorkeeper_oauth(oauth_data)
      uid = oauth_data.uid.to_s
      id = uid.to_i
      user = self.where(provider: oauth_data.provider, uid: uid).first
      if user
        user.name = oauth_data.info.name
        user.email = oauth_data.info.email
        user.save! if user.changed?
      else
        user = self.create!({
          id: id, # use same id
          name: oauth_data.info.name,
          provider: oauth_data.provider,
          uid: uid,
          email: oauth_data.info.email,
          #password: Devise.friendly_token[0,20]
        })
      end
      user
    end
  end
end
</code></pre>

<p>データベースの migration の方でも削除して unique index の制約なども不要なものは外しておきます。</p>

<p><code>ruby db/migrate/*_devise_create_users.rb
      ## Database authenticatable
      t.string :email,              null: false, default: ""
      # t.string :encrypted_password, null: false, default: ""
</code></p>

<p>代わりに <code>provider</code> と <code>uid</code> と <code>name</code> を追加しました。
このアプリは Doorkeeper 専用なので、直接 <code>users</code> に追加していますが、
複数プロバイダに対応するには <code>provider</code> と <code>uid</code> の組を別テーブルにします。</p>

<p><code>ruby db/migrate/*_add_omniauth_columns_to_users.rb
class AddOmniauthColumnsToUsers &lt; ActiveRecord::Migration
  def change
    add_column :users, :provider, :string
    add_column :users, :uid, :string
    add_column :users, :name, :string
    add_index :users, [:provider, :uid], unique: true
  end
end
</code></p>

<h2><code>OAuth2::AccessToken</code> を生成</h2>

<p><code>OAuth2::Client</code> と保存しておいた <code>access_token</code> を引数にして <code>OAuth2::AccessToken</code> を生成します。
ここでは <code>concerns</code> に分けて必要なコントローラーでだけ <code>include DoorkeeperApiV1</code> するようにしました。
全体で使いたいのなら <code>ApplicationController</code> に <code>include</code> すれば良いと思います。</p>

<pre><code class="ruby app/controllers/concerns/doorkeeper_api_v1.rb">module DoorkeeperApiV1
  private

  def access_token
    return @access_token if defined?(@access_token)
    config = Devise.omniauth_configs[:doorkeeper]
    strategy = config.strategy_class.new(*config.args)
    token = session[:doorkeeper_token]
    @access_token = OAuth2::AccessToken.new(strategy.client, token)
  end

  def get_me
    access_token.get("/api/v1/me.json").parsed
  end

  def get_microposts
    access_token.get("/api/v1/microposts.json").parsed
  end

  MICROPOST_CONTENT_MAX_LENGTH = 140

  def post_micropost(micropost)
    micropost[:content] = micropost[:content].truncate(MICROPOST_CONTENT_MAX_LENGTH)
    access_token.post("/api/v1/microposts", params: { micropost: micropost }).parsed
  end
end
</code></pre>

<p>使い方は <code>get_me</code> などを呼び出すだけなので省略します。</p>

<h2>ログインを強制する</h2>

<p>常に Doorkeeper の方でログインさせておきたいアプリの場合は、
User クラスを使っている場合の devise での戻り先の <code>session[:user_return_to]</code> に URL を保存しておいて、
<code>user_omniauth_authorize_path(:doorkeeper)</code> に強制的にリダイレクトしています。
<code>main_app.</code> をつけているのは route で mount している engine の中で問題が起きたことがあったためです。</p>

<pre><code class="ruby app/controllers/application_controller.rb">  include AuthDoorkeeper
  before_action :auto_authenticate_omniauth_user!
</code></pre>

<pre><code class="ruby app/controllers/concerns/auth_doorkeeper.rb">module AuthDoorkeeper
  private

  def auto_authenticate_omniauth_user!
    return if current_user
    session[:user_return_to] = request.original_url
    redirect_to main_app.user_omniauth_authorize_path(:doorkeeper)
  end
end
</code></pre>

<h2>テストについて</h2>

<p>API 呼び出しの部分の対処が出来ていなくて、まだテストが通る状態には出来ていません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian 7 (wheezy) の RubyLive をカスタマイズ中]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-12-debian-ruby-live.html"/>
    <updated>2014-07-12T10:08:26+09:00</updated>
    <id>http://blog.n-z.jp/blog/debian-ruby-live</id>
    <content type="html"><![CDATA[<p>今年の
<a href="https://k-of.jp/2014/" title="KOF 2014：関西オープンフォーラム2014">KOF 2014：関西オープンフォーラム2014</a>
に向けて
<a href="https://github.com/znz/rubylive" title="RubyLive">RubyLive</a>
を作成しています。
fork 元の <a href="https://github.com/no6v/rubylive">no6v 版</a> との違いをまとめていきます。</p>

<!--more-->


<h2>カスタマイズの基本</h2>

<p>README から今回に関係する部分を引用しておくと以下のようになっています。</p>

<ul>
<li>config/hooks/

<ul>
<li>インストールの最後の方で実行するフックスクリプトを置くディレクトリ。</li>
<li>拡張子を .chroot にして実行権限を付けておく。</li>
</ul>
</li>
<li>config/includes.chroot/

<ul>
<li>このディレクトリを root に見立てて LiveCD 環境にコピーしたいファイルを置くディレクトリ。</li>
</ul>
</li>
<li>config/package-lists/

<ul>
<li>特別にインストールしたいパッケージのリストを置くディレクトリ。</li>
<li>拡張子を .list.chroot にしてパッケージ名を列挙する。</li>
</ul>
</li>
</ul>


<h2>壁紙などの変更</h2>

<p><code>resources.yml</code> で設定されたファイルは <code>url</code> から自動ダウンロードして <code>path</code> に置くようになっています。</p>

<p><code>size</code> と <code>sha256sum</code> をチェックするだけで違っていても削除はしないようなので、
ダウンロードに失敗した時は<code>path</code> のファイルは手動で削除する必要がありました。</p>

<p><code>path</code> を変更した時も古いファイルが残ってしまうので、削除する必要がありました。</p>

<h2>dconf の設定</h2>

<p><code>config/includes.chroot/etc/skel/.config/dconf/user</code>
に設定変更後のバイナリが置かれていて、
これはひどいと思ったので、
<code>config/includes.chroot/etc/skel/.gnomerc</code>
で <code>gsettings set</code> を使って設定するようにしました。</p>

<h3>壁紙の変更</h3>

<p>起動後の <code>dconf-editor</code> で選択肢を確認しつつ、
<code>gsettings set org.gnome.desktop.background picture-options centered</code>
にしたり、
<code>gsettings set org.gnome.desktop.background picture-uri 'file:///usr/share/images/desktop-base/RubyKaigi2014-commonLogo.svg</code>
にしたりしました。</p>

<p>2014-07-13 追記:
生成後のイメージに CC-BY 3.0 の説明がないのは良くないと思って、
<code>config/includes.chroot/etc/skel/README.txt</code>
に説明を追加することにしました。</p>

<h3>デスクトップのアイコン</h3>

<p>以前は <code>gnome-panel</code> (上のバーのところ) に起動用のアイコンを追加していたようですが、
<code>gsettings set</code> で設定しようとすると
<code>org.gnome.gnome-panel.layout object-id-list</code> の他に
<code>org.gnome.gnome-panel.layout.objects.object-0</code> や
<code>org.gnome.gnome-panel.layout.objects.object-0.instance-config</code> などの
複数設定が必要で管理の手間もかかりそうだったので、
<code>gsettings set org.gnome.desktop.background show-desktop-icons true</code>
でデスクトップのアイコンが見えるように変更しました。</p>

<h3>スクリーンセーバーの停止</h3>

<p><code>gsettings set org.gnome.desktop.screensaver idle-activation-enabled false</code>
で止めました。</p>

<h2>chm の変更</h2>

<p><a href="http://ruby.morphball.net/refm-remix.html" title="Rubyリファレンスマニュアル chm版リミックス">Rubyリファレンスマニュアル chm版リミックス</a>
の標準テーマのRuby 2.1.0向け chm に差し替えました。
zip ファイルなので、先ほどの <code>.gnomerc</code> でデスクトップに展開するようにしました。</p>

<p>xCHM v. 1.20 で背景画像や色とかがつかないようなので、サイズが小さい標準を選びました。</p>

<h2>パッケージ変更</h2>

<p><code>jfbterm</code> の代わりに <code>fbterm</code> にしたり、
<code>ruby-build</code> でビルドに必要なパッケージを追加したり、
<code>config/includes.chroot/etc/iceweasel/profile/prefs.js</code> の代わりに <code>iceweasel-l10n-ja</code> を追加したり、
<code>bash-completion</code> などを追加したりしました。</p>

<h2>ruby-build で ruby 2.1.2 のインストール</h2>

<p><a href="http://qiita.com/takahashim/items/406421d515ef1d4f1189" title="[ReVIEW Tips] DockerでRe:VIEW - Qiita">[ReVIEW Tips] DockerでRe:VIEW - Qiita</a>
を参考にして rbenv は使わずに ruby-build だけ使って <code>/usr/local</code> に ruby 2.1.2 をインストールしました。</p>

<h2>localepurge</h2>

<p>locale の設定は live-config で起動時にやっていて hook の中で
<code>DEBIAN_FRONTEND=noninteractive dpkg-reconfigure localepurge</code>
としても起動後と違って ja locale の設定がなかったので、
起動後や設定した後に <code>debconf-show localepurge</code> で確認した値を使って、
<code>localepurge/nopurge</code> が <code>NEEDSCONFIGFIRST</code> のままなら
<code>echo localepurge localepurge/nopurge string "ja, ja_JP.UTF-8" | debconf-set-selections</code>
で設定することにしました。</p>

<p>これで約 200MB ぐらい小さくなりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4.1 で Doorkeeper を使った OAuth2 Provider のサンプルを実装した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-11-doorkeeper-provider-example-app.html"/>
    <updated>2014-07-11T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/doorkeeper-provider-example-app</id>
    <content type="html"><![CDATA[<p>ソースは github の
<a href="https://github.com/znz/doorkeeper-provider-app" title="znz/doorkeeper-provider-app">znz/doorkeeper-provider-app</a>
で公開しています。</p>

<p>基本的にはソースをみて参考にしてもらうと良いと思いますが、
説明が必要な部分を続きに書いてみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ruby 2.1.2</li>
<li>rails 4.1.4</li>
<li>bootstrap-sass 3.2.0.0</li>
<li>devise 3.2.4</li>
<li>devise-i18n-views 0.2.8</li>
<li>doorkeeper 1.3.1</li>
<li>cancancan 1.8.4</li>
<li>rolify 3.4.0</li>
<li>rspec-rails 3.0.1</li>
</ul>


<h2>試し方</h2>

<p>README に書いたようにローカルで動かすか heroku に deploy して
<a href="https://github.com/doorkeeper-gem/doorkeeper/wiki/Example-Applications" title="Example Applications">Example Applications</a>
にある Client examples の Sinatra and OAuth2 gem の
<a href="https://github.com/doorkeeper-gem/doorkeeper-sinatra-client" title="Doorkeeper Sinatra Client">Doorkeeper Sinatra Client</a>
を使って試しました。</p>

<h2>初期設定</h2>

<p>devise, doorkeeper, cancancan, rolify, rspec の個別の初期設定は普通に <code>rails generate</code> を使いました。</p>

<h2>ユーザー情報追加</h2>

<p>とれる情報を増やすために <code>User</code> に <code>name</code> を追加しました。
<code>devise-i18n-views</code> を使っている関係で view のカスタマイズはしていないので、
<code>rake db:seed</code> で設定したユーザーだけ <code>name</code> が設定されています。</p>

<p>必要に応じて view もカスタマイズしてください。</p>

<p>また <code>devise-i18n</code> の ja.yml を devise.ja.yml として入れています。
これは flash のメッセージやメールのメッセージなど、
<code>app/views</code> 以外の翻訳になるようです。</p>

<p><code>devise-i18n-views</code> は <code>app/views</code> を翻訳可能な view にするプロジェクトです。
なぜ <code>devise</code> とは別プロジェクトでやっているのかはよくわかりません。</p>

<h2><code>I18n.available_locales</code></h2>

<p><code>devise-i18n-views</code> を入れてしまうと <code>I18n.available_locales</code> が増えてしまうので、
困るのなら、カスタマイズ用の view を generate して、必要な言語だけ取り込んで
<code>Gemfile</code> から外してしまうのが良いと思います。</p>

<p>今回はそのまま残して右上の <code>Locale</code> で選択できるようにしています。
選択肢の翻訳は Wikipedia の左や www.debian.org の下などを参考にしたのですが <code>es-AR</code> はわからなかったので、
<code>es</code> と同じになってしまっています。</p>

<h2><code>/oauth/applications</code> のアクセス制限</h2>

<p><code>cancancan</code> と <code>rolify</code> を使って admin role があるユーザーだけに制限しています。
secret も見えてしまうので、 read 権限までしっかり制限する必要があるようです。</p>

<p><code>load_and_authorize_resource</code> でのロードと親クラス (<code>Doorkeeper::ApplicationsController</code>) の中でのロードでモデルの読み込みが二重になってしまうのですが、変更を少なくするためにそこは許容しました。</p>

<h2><code>GET /api/v1/me.json</code></h2>

<p>Doorkeeper gem の Wiki の例にあるようにユーザー情報をとれるようにしています。
制限していないと以下のような情報がとれました。</p>

<pre><code class="json">{ "id": 1,
  "email": "admin@example.com",
  "created_at": "2014-07-11T06:32:22.077Z",
  "updated_at": "2014-07-11T09:33:42.143Z",
  "name": "admin" }
</code></pre>

<p>制限したり関連するモデルの情報を増やしたりするなら
<a href="http://sugamasao.hatenablog.com/entry/20100914/1284415669" title="Rails のモデル関係と to_json(to_xml) - すがブロ">Rails のモデル関係と to_json(to_xml) - すがブロ</a>
に書いてあるように <code>respond_with</code> に <code>:only</code> をつけたり <code>:include</code> をつけたりすると出来るようです。</p>

<p>入ったり入らなかったりする条件がよくわからなかったのですが、
<code>devise</code> 関連では <code>authentication_token</code> が入っていることがあったので、
User モデルにいろんな情報を入れているなら、
きちんと制限した方が良さそうに思いました。</p>

<h2>microposts</h2>

<p><a href="http://railstutorial.jp/" title="Ruby on Rails チュートリアル：実例を使って Rails を学ぼう">Ruby on Rails チュートリアル：実例を使って Rails を学ぼう</a>
のように <code>Micropost</code> モデルを作成して、 API からも投稿できるようにしました。</p>

<p>投稿は scope で制限していて、デフォルトの <code>public</code> のみでは書き込めずに <code>write</code> も必要にしています。</p>

<p>API としては</p>

<ul>
<li><code>GET /api/v1/microposts</code> で投稿一覧</li>
<li><code>POST /api/v1/microposts</code> で新規投稿</li>
</ul>


<p>を用意しています。</p>

<h3><code>Can't verify CSRF token authenticity</code></h3>

<p>(2014-07-15 追記)</p>

<p>新規投稿の <code>POST</code> は <code>CSRF</code> チェックにひっかかってしまうので、
<code>skip_before_action :verify_authenticity_token</code>
を入れました。</p>

<p>以前から doorkeeper gem を使っているアプリでは
<code>Can't verify CSRF token authenticity</code>
というメッセージが出るだけで投稿自体は出来ていたのですが、
サンプルアプリでは投稿できなかったので、
<code>skip_before_action</code> を入れました。
(Rails 4 なので <code>skip_before_filter</code> ではなく <code>skip_before_action</code>)</p>

<h2>その後の変更点 (2014-07-15 追記)</h2>

<p>その後 <code>kaminari</code> 対応などを入れました。</p>
]]></content>
  </entry>
  
</feed>
