<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-03-11T22:59:17+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hamlからslimへの移行でひっかかったこと]]></title>
    <link href="http://blog.n-z.jp/blog/2014-03-11-haml-to-slim.html"/>
    <updated>2014-03-11T22:39:11+09:00</updated>
    <id>http://blog.n-z.jp/blog/haml-to-slim</id>
    <content type="html"><![CDATA[<p>haml より slim の方が速いらしいという話を良く見かけるので、
haml から少しずつ slim に移行しようとして、
haml2slim で変換してみたらひっかかりまくりました。</p>

<!--more-->


<h2>インデントがない</h2>

<p>haml は生成される HTML がインデントされていてみやすいのですが、
slim は不要なスペースは入れずにコンパクトな HTML が生成されるようで、
単純に比較できなくて困りましたが、
<a href="https://github.com/slim-template/slim#default-options">https://github.com/slim-template/slim#default-options</a>
で設定できるようだったので、以下のように設定しました。</p>

<p><code>ruby config/initializers/slim.rb
if Rails.env.development?
  Slim::Engine.set_default_options pretty: true
end
</code></p>

<h2>1.9 hash style</h2>

<p><a href="https://github.com/slim-template/haml2slim/pull/23">https://github.com/slim-template/haml2slim/pull/23</a>
に pull request がでているように
haml で属性を <code>{foo: bar}</code> のように書く形式には対応していないようです。</p>

<h2>string interpolation がおかしい</h2>

<p><a href="https://github.com/slim-template/haml2slim/issues/7">https://github.com/slim-template/haml2slim/issues/7</a>
などで報告されているように <code>#{ ... }</code> という書き方の変換で問題があるようです。
<code>%tag(foo="#{bar}")</code> が <code>tag(foo="# bar ")</code> になっていて気づきました。</p>

<h2>HTML コメントの中でタグにならない</h2>

<p>```haml</p>

<pre><code>/[if lt IE 9]
  %script{src: url_for(html5shiv)}
</code></pre>

<p>```</p>

<p>のように書いていたのが</p>

<p>```text</p>

<pre><code>/![if lt IE 9]
  script src: url_for(html5shiv)
</code></pre>

<p>```</p>

<p>のように変換されてさっぱりダメだったので、</p>

<p>```text</p>

<pre><code>/[if lt IE 9]
  script(src="#{url_for(html5shiv)}")
</code></pre>

<p>```</p>

<p>または</p>

<p>```text</p>

<pre><code>/[if lt IE 9]
  script(src=url_for(html5shiv))
</code></pre>

<p>```</p>

<p>のように書き換えました。
HTML コメント <code>/!</code> の中だとタグが使えない (そのまま文字列としてコメントの中に入る) ようなので、
IE コンディショナルコメント <code>/[...]</code> を使う必要があるようです。</p>

<h2>エラーメッセージがわかりにくい</h2>

<p>書き換え途中で、属性値をくくる <code>""</code> を忘れると
エラーメッセージが
<code>syntax error, unexpected ';'</code>
としかでないので原因がわかりにくくて困りました。</p>

<p>他のところでも ruby のエラーメッセージそのままなので、
閉じ忘れ系は原因の行と離れたところでエラーになって、
行番号もあまり当てにならなくて不便です。</p>

<h2>真偽値属性の属性値が省略できない</h2>

<p>haml だと <code>%div(data-pjax-container)</code> で <code>&lt;div data-pjax-container&gt;</code> に変換できるのに、
slim だと <code>div(data-pjax-container)</code> が <code>&lt;div data-pjax-container=""&gt;</code> になってしまって、
<code>=""</code> が余計です。</p>

<p><a href="https://github.com/slim-template/slim/issues/480">Render boolean attributes without value in html5</a>
によると
<code>:format</code> を <code>:html</code> にすれば良いということで</p>

<p><code>ruby config/initializers/slim.rb
Slim::Engine.set_default_options format: :html
</code></p>

<p>と設定してみても slim 2.0.2 だと変化がありませんでした。</p>

<p>まだリリースされていないバージョンを使う必要があるようで、
<code>Gemfile</code> で <code>gem 'slim', github: 'slim-template/slim'</code> と指定して
試そうとしたのですが、
rails 3.2.17 との組み合わせは tilt の要求バージョンの解決が
出来なくて使えませんでした。</p>

<p>実験のため slim 専用の Gemfile を用意して以下のように試したところ、
slim と temple の両方をまだリリースされていないバージョンにすると
使えることが確認できました。</p>

<p>```console
% mkdir /tmp/slim-test
% cd /tmp/slim-test
% bundle init
% echo &lsquo;gem &ldquo;slim&rdquo;, github: &ldquo;slim-template/slim&rdquo;&rsquo; >> Gemfile
% echo &lsquo;gem &ldquo;temple&rdquo;, github: &ldquo;judofyr/temple&rdquo;&rsquo; >> Gemfile
% bundle
% echo &lsquo;div(ng-app)&rsquo; | bundle exec slimrb</p>

<div ng-app=""></div>


<p>% echo &lsquo;div(ng-app)&rsquo; | bundle exec slimrb -o format=:html</p>

<div ng-app></div>


<p>```</p>

<p>今のところ、 <code>rack-pjax</code> の使用は止めていて、
 <code>=""</code> がつく挙動で直接困ることはなさそうなので、
この問題は保留することにしました。</p>

<h2>javascript や css の埋め込み</h2>

<p>```haml</p>

<pre><code>:javascript
  window.current_user_id = #{current_user.id.to_i}
</code></pre>

<p>```</p>

<p>のように書いていたら、</p>

<p>```text</p>

<pre><code>javascript:
  | window.current_user_id = #{current_user.id.to_i}
</code></pre>

<p>```</p>

<p>と変換されて <code>|</code> がそのまま <code>script</code> の中身に付いてしまったので、
削除しました。</p>

<p>```text</p>

<pre><code>javascript:
  window.current_user_id = #{current_user.id.to_i}
</code></pre>

<p>```</p>

<p><code>:css</code> から <code>css:</code> の変換でも同様でした。
CSS の場合は行頭が記号だと <code>|</code> がついていないこともありました。</p>

<h2>空白の有無の問題</h2>

<p>```haml</p>

<pre><code>        = link_to home_path, class: 'brand' do
          = image_tag("brand.png", alt: "", size: "35x35")
          = base_title
</code></pre>

<p>```</p>

<p>がそのまま slim になっていて、基本的には問題なかったのですが、
haml と違って slim だとタグとタイトルの間に空白が入らなくなってしまって、
見た目が変わってしまっていたので、
<code>'</code> だけの行を追加して空白が入るようにしました。</p>

<p>```text</p>

<pre><code>        = link_to home_path, class: 'brand' do
          = image_tag("brand.png", alt: "", size: "35x35")
          '
          = base_title
</code></pre>

<p>```</p>

<h2>end が抜けるバグで SyntaxError</h2>

<p><code>syntax error, unexpected keyword_ensure, expecting keyword_end</code>
になるので原因を調べてみたところ、
インデントの中の最初がコメントだと、
そのブロックの <code>end</code> が抜けてしまうようです。</p>

<p>```console
% echo $&lsquo;&ndash; if true\n  / comment&rsquo; | bundle exec slimrb -e
&lt;% if true</p>

<p> %>
% echo $&lsquo;&ndash; if true\n  |&rsquo; | bundle exec slimrb -e
&lt;% if true</p>

<p>end %>
% echo $&lsquo;&ndash; articles.each do |a|\n  / comment&rsquo; | bundle exec slimrb -e
&lt;% articles.each do |a|</p>

<p> %>
% echo $&lsquo;&ndash; articles.each do |a|\n  | text&rsquo; | bundle exec slimrb -e
&lt;% articles.each do |a|
 %>text&lt;%
%>&lt;% end %>
% echo $&lsquo;&ndash; articles.each do |a|\n  / comment\n/ more comment&rsquo; | bundle exec slimrb -e
&lt;% articles.each do |a|</p>

<p> %>
% echo $&lsquo;&ndash; articles.each do |a|\n  / comment\n| text\n/ more comment&rsquo; | bundle exec slimrb -e
&lt;% articles.each do |a|</p>

<p> %>text&lt;%
%>&lt;%
%>
% echo $&lsquo;&ndash; articles.each do |a|\n  / comment\n| text\n&rsquo; | bundle exec slimrb -e
&lt;% articles.each do |a|</p>

<p> %>text&lt;%
%>
```</p>

<p>この件は <a href="https://github.com/slim-template/slim/issues/485">https://github.com/slim-template/slim/issues/485</a> で報告してみました。</p>

<h2>ファイル名の指定が面倒</h2>

<p>これは slim や haml2slim の問題ではないのですが、
zsh で久しぶりに compctl を使って</p>

<pre><code>compctl -g '*.haml' + -g '*(-/)' haml2slim
</code></pre>

<p>と設定しましたが、ちゃんと compsys を使った方が良いと思い直して、</p>

<pre><code>compdef '_files -g "*.haml"' haml2slim
</code></pre>

<p>と設定しました。</p>

<h2>感想</h2>

<p>シンプルとか入力が楽とかいう主観的なものは個人的には同意できなくて利点とは思えないので、
速いという客観的な理由で slim への移行をしているのですが、
haml2slim の出来が悪かったり、
空白の扱いの違いで同じようなソースからでも最終的な見た目が違うものが出来たりして、
移行は思ったより大変な印象を受けました。</p>

<p>はまりどころさえわかっていれば、そこを注意して haml2slim での変換結果を修正していけば良いので、途中からはどんどん変換していけるようになりました。
(まだ一部しか終わっていませんが。)</p>

<p>それなりの数の変換をしてみた結果、最初から slim で書くようにすれば haml と大きな違いはなさそうにも感じました。</p>

<p><code>end</code> 抜けなどの問題が起きたことから、
haml と比べていろんな書き方で使われていなさそうということで、
まだ安定してなさそうと感じました。</p>

<p>また属性値なしの <code>&lt;div ng-app&gt;</code> のような出力に対応しているリリースがまだないなど、
融通が利かない点があって問題が起きそうな可能性がありそうだと感じました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.1.1のHash#rejectの不具合対策]]></title>
    <link href="http://blog.n-z.jp/blog/2014-03-11-hash-reject.html"/>
    <updated>2014-03-11T14:22:28+09:00</updated>
    <id>http://blog.n-z.jp/blog/hash-reject</id>
    <content type="html"><![CDATA[<p><a href="https://www.ruby-lang.org/ja/news/2014/03/10/regression-of-hash-reject-in-ruby-2-1-1/">Ruby 2.1.1 に含まれる Hash#reject の不具合について</a>
という話があって、
自分で書くコードでは普通は Hash を継承することはない (is-a にせずに has-a にすることが多い) ので影響はないのですが、
Rails の中の ActiveSupport が影響を受けるということで対処を入れました。</p>

<p>他にもバックポート漏れのコミットをあてた独自ビルドを使うとか、
Ruby 2.1.0 を使う、という対処もあるようです。</p>

<!--more-->


<p><a href="https://github.com/rails/rails/issues/14188">Rails の Issue #14188</a>
で話があるようにセキュリティ修正ではないため、
Rails 3.2 系にこの修正は入らないので、
モンキーパッチを入れることにしました。</p>

<p>bugs.ruby-lang.org では
<a href="https://github.com/ruby/bugs.ruby-lang.org/blob/ro-2-5/lib/redmine/core_ext.rb">https://github.com/ruby/bugs.ruby-lang.org/blob/ro-2-5/lib/redmine/core_ext.rb</a>
のように対処していたのを参考にして、
以下のようなコードを
<code>config/initializers/hash_reject.rb</code>
に置いて対処することにしました。</p>

<p>```ruby config/initializers/hash_reject.rb</p>

<h1>monkey patch for regression of Hash#reject in Ruby 2.1.1</h1>

<h1>see <a href="https://www.ruby-lang.org/ja/news/2014/03/10/regression-of-hash-reject-in-ruby-2-1-1/">https://www.ruby-lang.org/ja/news/2014/03/10/regression-of-hash-reject-in-ruby-2-1-1/</a></h1>

<h1>or <a href="https://www.ruby-lang.org/en/news/2014/03/10/regression-of-hash-reject-in-ruby-2-1-1/">https://www.ruby-lang.org/en/news/2014/03/10/regression-of-hash-reject-in-ruby-2-1-1/</a></h1>

<p>require &lsquo;active_support/hash_with_indifferent_access&rsquo;
require &lsquo;active_support/ordered_hash&rsquo;</p>

<p>module ActiveSupport
  class HashWithIndifferentAccess</p>

<pre><code>def select(*args, &amp;block)
  dup.tap { |hash| hash.select!(*args, &amp;block) }
end

def reject(*args, &amp;block)
  dup.tap { |hash| hash.reject!(*args, &amp;block) }
end
</code></pre>

<p>  end</p>

<p>  class OrderedHash</p>

<pre><code>def select(*args, &amp;block)
  dup.tap { |hash| hash.select!(*args, &amp;block) }
end

def reject(*args, &amp;block)
  dup.tap { |hash| hash.reject!(*args, &amp;block) }
end
</code></pre>

<p>  end
end
```</p>

<p>ここのコードが実行される前に読み込まれていれば問題ないのですが、
ここでクラス定義してしまうと元々の定義が autoload されなくなるので、
念のため require しています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ページの切り替わりごとに背景の自動変更]]></title>
    <link href="http://blog.n-z.jp/blog/2014-03-03-auto-change-background.html"/>
    <updated>2014-03-03T23:25:01+09:00</updated>
    <id>http://blog.n-z.jp/blog/auto-change-background</id>
    <content type="html"><![CDATA[<p>ある Rails アプリでページの切り替わりごとに背景を自動で変更するようにしていたのですが、
デザイン変更で使わなくなったので、どういうことをやっていたのか、メモとして残しておくことにします。</p>

<!--more-->


<h2>HTML</h2>

<p>まず CSS 用のクラスとして自動変更する目印の <code>background</code> と初期状態の <code>background-0</code> を <code>body</code> に設定しました。</p>

<p><code>haml app/views/layouts/application.html.haml
  %body.background.background-0
</code></p>

<h2>スクリプト</h2>

<p><code>sessionStorage</code> を使ってタブごとに状態を保存するようにしました。
今回は画像として <code>app/assets/images/background-0.jpg</code> と <code>app/assets/images/background-1.jpg</code> の 2 枚だけだったので、
<code>background_num = 2</code> にしています。</p>

<p>以下のコードを書いた時には知らなかったので対処が入っていないのですが、
Safari のプライベートブラウズでは <code>sessionStorage</code> があるのに使えないという厄介なことになっているので、必要ならそのあたりのエラー処理も入れた方が良いです。</p>

<p>```coffeescript app/assets/javascripts/background.js.coffee
jQuery &ndash;>
  if typeof sessionStorage != &lsquo;undefined&rsquo;</p>

<pre><code>background_num = 2
change_background = -&gt;
  body = $("body")
  if !body.hasClass("background")
    return
  background = sessionStorage.getItem("background")
  if background
    background = parseInt(background)
    $("body").removeClass("background-" + background)
    background = (background + 1) % background_num
    $("body").addClass("background-" + background)
  else
    background = 0
  sessionStorage.setItem("background", background)
$(document).on 'ajax:success.background', change_background
change_background()
</code></pre>

<p>```</p>

<h2>スタイルシート</h2>

<p>rails 4.0.3, sass-rails 4.0.1, sprockets 2.11.0, sprockets-rails 2.0.1
で確認したところ、
<code>depend_on_asset</code> ではなく <code>depend_on</code> を使って拡張子付きのファイル名で
ファイルの先頭に <code>depend_on</code> を並べれば画像ファイルを変更したときに
<code>rake assets:precompile</code> で <code>css</code> も再生成されるように見えました。</p>

<p>つまり <code>//= depend_on "background-1.jpg"</code> を <code>.background-1</code> の直前に持っていくと反映されませんでした。</p>

<p><code>depend_on_asset</code> だと全く反映されませんでした。</p>

<p>ファイルの指定は <code>//= depend_on "../images/background-0.jpg"</code> や <code>//= depend_on "../images/background-1.jpg"</code> のように相対パスでも、ファイル名のみでも大丈夫でした。</p>

<p><code>image-url</code> で参照しているのだから、そこで自動的に依存関係に入ってほしいところですが、そういう仕組みにはなっていないようです。
ちゃんと読んでいないのですが、
<a href="https://github.com/sstephenson/sprockets/issues/488">Dependent assets might not be recompiled</a>
のあたりにすでに話が出ているので、仕様なのかもしれません。</p>

<p><code>css app/assets/stylesheets/background.css.scss
//= depend_on "background-0.jpg"
//= depend_on "background-1.jpg"
.background-0 {
  background-image: image-url("background-0.jpg");
}
.background-1 {
  background-image: image-url("background-1.jpg");
}
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[autopagerizeのような動作をkaminariとransackを使った環境で実装した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-02-25-autopagerize-kaminari-ransack.html"/>
    <updated>2014-02-25T18:58:39+09:00</updated>
    <id>http://blog.n-z.jp/blog/autopagerize-kaminari-ransack</id>
    <content type="html"><![CDATA[<p>autopagerize のような動作をするときに id 重複問題があるので、
<a href="http://qa.atmarkit.co.jp/q/3513">QA@IT で質問</a>
してみたところ、
今のページに表示されている最後の id で対処するしかなさそうだとわかったので、
そういう方針で実装してみました。</p>

<!--more-->


<h2>スクリプト部分</h2>

<p>コア部分は以前に実装したものをそのまま使いました。
i18n 対応などが出来ていませんが、冒頭に書いてある id や class が関連要素になります。</p>

<p>```coffeescript app/assets/javascripts/autonext.js.coffee
jQuery &ndash;>
  timerId = null
  loadingId = &lsquo;#autopager_loading&rsquo;
  nextId = &lsquo;#next_for_pager&rsquo;
  pageElement = &lsquo;.page_element&rsquo;
  lastContent = &lsquo;.page_content:last&rsquo;</p>

<p>  loadNext = &ndash;></p>

<pre><code>nextLink = $(nextId)[0]
if nextLink
  $(loadingId).show()
  $(nextId).remove()
  request = $.get nextLink.href, (data) -&gt;
    $(loadingId).before($(data).find(pageElement)).hide()
    # 必要なら turbolinks の `page:change` のような DOM 変更通知をする
  request.error (xhr, status, error) -&gt;
    if error == "Unauthorized"
      alert("認証の期限切れです。再読み込みしてください。")
    else
      alert("何かエラーです。少し待ってから、再読み込みしてください。")
    $(loadingId).html("&lt;a href='javascript:location.reload()' class='btn btn-block btn-primary'&gt;再読み込み&lt;/a&gt;")
</code></pre>

<p>  autoNext = &ndash;></p>

<pre><code>content = $(lastContent)
if content[0] &amp;&amp; content.offset().top &lt; $(document).scrollTop() + $(window).height()
  if $(loadingId).css('display') is 'none'
    loadNext()
timerId = null
$(window).on 'scroll.autoNext', autoNextDefer
</code></pre>

<p>  autoNextDefer = &ndash;></p>

<pre><code>$(window).off 'scroll.autoNext'
timerId = setTimeout autoNext, 1000
</code></pre>

<p>  $(window).on &lsquo;scroll.autoNext&rsquo;, autoNextDefer
```</p>

<h2>views</h2>

<p>view は次のような感じにしました。
<code>page_entries_info</code> を <code>.page_element</code> の中にするか、外にするかは悩ましいところです。</p>

<p>```haml app/views/posts/index.html.haml</p>

<pre><code>.page_element
  %small.page-entries-info= page_entries_info @posts
  = render @posts
  = link_to_auto_next_page_with_ransack @q, @posts, t('views.pagination.next'), class: "btn btn-large btn-block btn-success", id: "next_for_pager", params: params
#autopager_loading(style="display:none")
  = fa_icon "spinner spin"
  = t("loading", default: "Loading...")
</code></pre>

<p>```</p>

<p><code>kaminari</code> の <code>link_to_next_page</code> を使っている時に問題になったのですが、
<code>params</code> をちゃんと渡さないと <code>paginate @posts</code> で生成されるリンクと違って
パラメーター不足になってしまうようです。
そのため自作の <code>link_to_auto_next_page_with_ransack</code> でも渡すようにしています。</p>

<h2>helper</h2>

<p>ここがリンク生成の肝になります。
ソートのキーのうち、今表示されている最後のものを使って、
<code>updated_at desc</code> でソートされているなら、
<code>updated_at_lt</code> で指定する、ということをしています。
仕組みの都合上、同じ値が複数入ると表示されずに抜け落ちてしまうので、
<code>id</code> やタイムスタンプなどのようなカラムに限定する必要がありそうです。</p>

<p>時刻は標準の <code>to_s</code> だと開発環境の一気に入力したデータで問題が起きたので、
<code>strftime</code> を使って <code>%N</code> (ナノ秒) まで入れるようにしました。</p>

<p>```ruby app/helpers/link_to_helper.rb
  def link_to_auto_next_page_with_ransack(search, scope, name, options = {}, &amp;block)</p>

<pre><code>return if scope.last_page?
params = options.delete(:params) || {}
sorts = search.sorts
if sorts.empty?
  raise "You must set sorts to ransack (e.g. `@q.sorts = 'updated_at desc' if @q.sorts.empty?`)"
end
order = sorts.first
column = order.name
dir = order.dir == "desc" ? "lt" : "gt"
value = scope.last[column]
if value.respond_to?(:strftime) &amp;&amp; value.respond_to?(:hour)
  # expect Time, DateTime, ActiveSupport::TimeWithZone
  # and not Date
  value = value.strftime("%Y-%m-%d %H:%M:%S.%N %Z")
end
q = params[:q] || {}
q = q.merge("#{column}_#{dir}" =&gt; value)
params = params.merge(search.context.search_key =&gt; q)
link_to name, params, options.reverse_merge(:rel =&gt; 'next'), &amp;block
</code></pre>

<p>  end
```</p>

<h2>controller</h2>

<p>コントローラーは <code>kaminari</code> や <code>ransack</code> を普通に使っているだけです。
<code>@posts = Post</code> の行は <code>cancan</code> の <code>load_and_authorize_resource</code> を使っている場合には不要なので、
別の行にしています。</p>

<p>```ruby app/controllers/posts_controller.rb
  def index</p>

<pre><code>@posts = Post
@q = @posts.search(params[:q])
@q.sorts = 'updated_at desc' if @q.sorts.empty?
@posts = @q.result(distinct: true)
@posts = @posts.page(params[:page]).per(5)
</code></pre>

<p>  end
```</p>

<h2>スタイルシート</h2>

<p>読み込み中の部分のスタイルは以下のようにして、画面の最下部の横幅いっぱいに出るようにしています。
エラーの時はこの中身が再読み込みボタンに変わります。
開発環境だと <code>rails server</code> を停止した状態で自動読み込みさせれば、すぐに確認できます。</p>

<p>```css app/assets/stylesheets/application.css.scss</p>

<h1>autopager_loading {</h1>

<p>  background-color: #000;
  bottom: 0px;
  color: #fff;
  font-size: 12px;
  height: 25px;
  left: 0px;
  opacity: 0.8;
  position: fixed;
  text-align: center;
  width: 100%;
  z-index: 1000;
}
```</p>

<h2>まとめ</h2>

<p>autopagerize のような自動読み込みを <code>kaminari</code> と <code>ransack</code> を使った rails アプリに組み込んだ実装例を紹介しました。
部品だけで全体を示せていないので、もしかしたら書き忘れている部分もあるかもしれませんが、重要な部分は載せていると思いますので、参考にしてみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bootstrap-sass-railsからbootstrap-sassに移行した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-02-06-bootstrap-sass.html"/>
    <updated>2014-02-06T14:29:27+09:00</updated>
    <id>http://blog.n-z.jp/blog/bootstrap-sass</id>
    <content type="html"><![CDATA[<p>今日の <code>bundle update</code> は bootstrap の sass の gem を bootstrap 公式のものに移行したのが大きな変更点でした。</p>

<!--more-->


<h2>bootstrap-sass-rails から bootstrap-sass 3.1.0.2</h2>

<p><a href="http://blog.getbootstrap.com/2014/01/30/bootstrap-3-1-0-released/">bootstrap 3.1.0 がリリース</a>されて少し時間が経ったので、
bootstrap-sass-rails を確認してみたところ、
<a href="https://github.com/yabawock/bootstrap-sass-rails#deprecation-notice">DEPRECATION NOTICE</a>
に公式サポートされた sass の gem があるので、
そちらに移行を推奨と書かれていたので、移行しました。</p>

<p>bootstrap-sass gem への移行は UPGRADING に書かれているように <code>@import "twitter/bootstrap";</code> を <code>@import "bootstrap";</code> に書き換えるだけでした。</p>

<h2>bootstrap-sass のカスタマイズ</h2>

<p><a href="https://github.com/twbs/bootstrap-sass#usage">Usage</a>
によると、一番単純な使い方としては <code>@import "bootstrap";</code> だけですが、
<a href="http://getbootstrap.com/customize/#less-variables">Less variables</a>
を参考にして以下のようにカスタマイズして使うのが良いようです。</p>

<p>Less では変数の接頭辞は <code>@</code> ですが、 sass では <code>$</code> になることさえわかっていれば、最低限のカスタマイズは出来ると思います。</p>

<p>```
$navbar-default-bg: #312312;
$light-orange: #ff8c00;
$navbar-default-color: $light-orange;</p>

<p>@import &ldquo;bootstrap&rdquo;;
```</p>

<p>bootstrap-sass-rails からの移行だったので、
bootstrap-custom.css.scss の内容は以下のようにしました。</p>

<p>```
$body-bg:               #fff;
$text-color:            lighten(#000, 20%);</p>

<p>@import &ldquo;bootstrap&rdquo;;
```</p>

<p>もっと高度なカスタマイズをするなら、
<code>cp $(bundle show bootstrap-sass)/vendor/assets/stylesheets/bootstrap.scss app/assets/stylesheets/bootstrap-custom.scss</code>
でコピーしたファイルを
<code>@import 'bootstrap';</code>
の代わりに
<code>@import 'bootstrap-custom';</code>
で使うことを想定しているようです。</p>
]]></content>
  </entry>
  
</feed>
