<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-12-20T16:40:43+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rail 3.2でcache_digestsを使ってみた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-08-cache-digests.html"/>
    <updated>2013-12-08T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/cache-digests</id>
    <content type="html"><![CDATA[<p>まだ Rails 3.2.16 のままのアプリで <code>cache_digests</code> gem を使って
fragment cache を導入してみました。</p>

<p>Rails 4.0 では標準になっているはずなので、
使い方は同じだと思います。</p>

<p>この投稿は
<a href="http://qiita.com/advent-calendar/2013/ruby-on-rails">Ruby on Rails Advent Calendar 2013</a>
の8日目の記事です。</p>

<!--more-->


<h2>インストール</h2>

<p>まず <code>Gemfile</code> に以下の gem の指定を追加してインストールしました。</p>

<p><code>ruby Gemfile
gem 'cache_digests'
gem 'dalli', group: :production
</code></p>

<h2>環境設定</h2>

<p>キャッシュの影響の確認などのデバッグ用に <code>development</code> 環境でも
キャッシュを有効にしました。
ちゃんとキャッシュで来ているかどうかの確認や削除がしやすいように
保存先はデフォルトの <code>:file_store</code> のままにしています。</p>

<p><code>ruby config/environments/development.rb
  config.action_controller.perform_caching = true
</code></p>

<p><code>production</code> 環境では <code>dalli</code> を使って <code>memcached</code> に保存するようにしました。
<code>dalli</code> の設定はこの記事の本題ではないので、
<code>memcached</code> の設定などは他のサイトを参考にしてください。</p>

<p><code>ruby config/environments/production.rb
  config.cache_store = :dalli_store
</code></p>

<p><code>staging</code> 環境もあったので <code>config/environments/staging.rb</code> にも同様の設定をしました。</p>

<h2>fragment cache</h2>

<p>すでに
<code>app/views/comments/_comment.html.haml</code> や
<code>app/views/posts/_post.html.haml</code> のような view を使って
<code>render @comments</code> や <code>render @posts</code> のように使っていたので、</p>

<p><code>text app/views/comments/_comment.html.haml
- cache comment do
  -# 今までの内容
</code></p>

<p>のように <code>cache comment do ... end</code> で今までの内容をくくるだけでした。
<code>cache</code> メソッド自体の返り値は <code>=</code> で埋め込んだりせずにそのまま呼ぶだけで大丈夫でした。</p>

<h2>動作確認</h2>

<p><code>log/developement.log</code> などを <code>fragment</code> で検索してみると</p>

<p><code>text log/developement.log
Write fragment views/comments/29-20130905083500/96f0ec0ce36af8132826f3bfbe0079db 0.5ms
Read fragment views/comments/30-20130905083518/96f0ec0ce36af8132826f3bfbe0079db 0.4ms
</code></p>

<p>などと記録されていて、キャッシュが使われていることが確認できました。</p>

<p><code>development</code> 環境では実際のキャッシュファイルは <code>tmp/cache/</code> 以下にありました。</p>

<h2>キャッシュの無効化 (invalidate)</h2>

<p>キャッシュが古くなってもう有効ではないという状態にすることを invalidate というと思いますが、
内容が更新された時に古いキャッシュが使われると問題があるので、
その対処をする必要があります。</p>

<p><code>cache</code> メソッドの引数に <code>ActiveRecord</code> のオブジェクトを渡した時の
キャッシュのキーは先ほどの例だと
<code>views/comments/:id-:updated_at/:md5</code>
という感じで <code>comment</code> オブジェクトの <code>id</code> と <code>updated_at</code> と
<code>app/views/comments/_comment.html.haml</code> の MD5 が使われていて、
view のファイルが変更したり、
<code>comment</code> ファイルの <code>updated_at</code> を更新したりした時に
自動で無効になるようです。</p>

<p>つまり、この view の中で別の partial render を使っていると
反映されないということなので、
内側の方でも <code>cache</code> を使うなどの対処が必要そうです。
実際に <code>_post.html.haml</code> の中で <code>render post.comments</code> のようなことをしました。</p>

<p>さらに以下のように <code>belongs_to</code> に <code>touch: true</code> を付けて、
コメントが付いた時に <code>post</code> の <code>updated_at</code> も更新されるようにしました。</p>

<p><code>ruby app/models/comment.rb
  belongs_to :commentable, polymorphic: true, touch: true
</code></p>

<h2>キャッシュの完全削除</h2>

<p><code>rails console</code> で <code>Rails.cache.clear</code> を実行すれば削除できました。
他の sass などのキャッシュも <code>tmp/cache/</code> の中にあるので
一緒に削除されてしまうようです。</p>

<h2>まとめ</h2>

<p>とりあえず使い始めるための最低限の知識をまとめてみました。</p>

<p>後は
<a href="http://ja.asciicasts.com/episodes/387-cache-digests">ASCIIcasts &ndash; “Episode 387 &ndash; Cache Digests”</a>
で説明されている
<code>rake cache_digests:nested_dependencies</code>
などを知っておけば良さそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4.0.2のi18nで出るようになったdeprecated警告の対策方法]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-04-rails-i18n-deprecated-warning.html"/>
    <updated>2013-12-04T10:59:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rails-i18n-deprecated-warning</id>
    <content type="html"><![CDATA[<p>Ruby on Rails のセキュリティアップデートがあって、
4.0.2 にあげたら i18n gem も 0.6.5 から 0.6.9 にあがって
<code>locale</code> の設定変更をしているところで
<code>[deprecated] I18n.enforce_available_locales will default to true in the future. If you really want to skip validation of your locale you can set I18n.enforce_available_locales = false to avoid this message.</code>
という警告が出るようになりました。</p>

<!--more-->


<h2>警告の出るタイミング</h2>

<p><a href="http://stackoverflow.com/questions/20361428/rails-4-0-2-i18n-validation-deprecation-warning">deprecated &ndash; Rails 4.0.2 I18n validation deprecation warning &ndash; Stack Overflow</a>
経由で
<a href="https://github.com/svenfuchs/i18n/commit/3b6e56e06fd70f6e4507996b017238505e66608c9">Add I18n.locale_available? and enforce available locales</a>
のコミットから入った変更ということで、
コミットログをみてみると、</p>

<ul>
<li><code>I18n.config.default_locale=</code></li>
<li><code>I18n.config.locale=</code></li>
<li><code>I18n.translate</code></li>
<li><code>I18n.localize</code></li>
<li><code>I18n.transliterate</code></li>
</ul>


<p>を呼んだときに影響するようです。
つまり <code>rails new</code> で作っただけだと <code>config/application.rb</code> の
<code>config.i18n.default_locale = :de</code> がコメントアウトされていて、
警告は出ません。</p>

<h2>日本語のみで使う場合</h2>

<p>日本語のみで使うのなら、
将来のデフォルトの
<code>I18n.enforce_available_locales = true</code>
にしてしまってから、
普通に日本語をデフォルトにする
<code>config.i18n.default_locale = :ja</code>
を呼べば良いと思います。</p>

<p>```ruby config/application.rb</p>

<pre><code>I18n.enforce_available_locales = true
config.i18n.default_locale = :ja
</code></pre>

<p>```</p>

<p>ただし、先にちゃんと日本語の locale ファイルを作っておかないと
<code>I18n::InvalidLocale</code>
という例外が発生して、
<code>rake</code> などで
<code>:ja is not a valid locale</code>
と言われてしまいます。</p>

<h2>今まで通りの挙動にする場合</h2>

<p><code>I18n.enforce_available_locales = false</code>
にすれば今まで通りの挙動になり、
存在しない <code>locale</code> を設定しても例外は発生しません。</p>

<h2>今のデフォルト</h2>

<p>今は
<code>I18n.enforce_available_locales = nil</code>
がデフォルトになっていて、
<code>nil</code> だと警告がでる、
ということのようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby で ISBN をチェックしたりハイフンを入れたり]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-12-isbn.html"/>
    <updated>2013-10-12T14:38:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/isbn</id>
    <content type="html"><![CDATA[<p>本には
<a href="http://ja.wikipedia.org/wiki/ISBN">ISBN</a>
というものが付いていて、
末尾のチェックディジットは仕様を参照すれば
簡単に計算出来そうです。</p>

<p>10 桁のものと新しい 13 桁のものがあったり、
出版者の部分の桁数が違ったりして
ちゃんとハイフンを入れるのは面倒そうです。</p>

<p>チェックディジットの方も自分で実装すると
バグっていたときに面倒なので、
良さそうな gem がないか探してみました。</p>

<p>最終的にはいくつかの理由から
<a href="http://rubygems.org/gems/lisbn">lisbn</a>
という gem を使いました。</p>

<!--more-->


<h2>gem の選択</h2>

<p>まず
<a href="http://rubygems.org/search?utf8=%E2%9C%93&amp;query=isbn">rubygems.org の右上で isbn と検索</a>
するところから始めました。</p>

<p>インストール数の多い順に見ていくと、</p>

<ul>
<li><a href="http://rubygems.org/gems/isbn10">isbn10</a>

<ul>
<li>インストール数は一番多い</li>
<li>10桁のみ</li>
<li>古い</li>
</ul>
</li>
<li><a href="https://github.com/ragalie/isbn-tools">isbn-tools</a>

<ul>
<li>古い</li>
<li>Not Maintained</li>
<li>lisbn が後継</li>
</ul>
</li>
<li><a href="https://github.com/entangledstate/isbn">isbn</a>

<ul>
<li>画像対応とかいろいろ高機能っぽいけど今回は不要</li>
<li><code>with_dashes</code> というメソッドは桁数決めうちで不適切</li>
</ul>
</li>
<li><a href="https://github.com/zapnap/isbn_validation">isbn_validation</a>

<ul>
<li>ActiveRecord の validates</li>
<li>ISBN ではない <a href="http://www.amazon.co.jp/gp/help/customer/display.html?nodeId=747416">ASIN</a> も扱いたかったので今回は不適当</li>
</ul>
</li>
<li><a href="https://github.com/ragalie/lisbn">lisbn</a>

<ul>
<li>比較的新しい</li>
<li>10桁と13桁の両対応</li>
<li>ハイフンを入れるために必要な分解処理がある (後は <code>join('-')</code> すれば良いだけ)</li>
<li>data/RangeMessage.xml というファイルを持っていて適切にわけてくれる</li>
</ul>
</li>
</ul>


<p>という感じでした。</p>

<h2>lisbn の使用例</h2>

<p>データベースに保存するのに統一されていると
<code>validates :isbn, uniqueness: true</code>
が使えるので、
以下のように ISBN13 に統一する処理を入れました。</p>

<p>それ以外の場合は ASIN と見なしてそのまま返しています。</p>

<p>```ruby
  def isbn_unify(isbn)</p>

<pre><code># Convert JISX0208 alphabet to ASCII.
isbn = NKF.nkf('-Ww -Z0', isbn).delete("^A-Za-z0-9")

# Convert to isbn13
lisbn = Lisbn.new(isbn)
if lisbn.valid?
  lisbn.isbn13
else
  isbn
end
</code></pre>

<p>  end
```</p>

<p>出力する側では
<code>parts</code>
は常に ISBN13 のものだけのようなので、
ISBN10
に出来るときは
頭の &lsquo;978&rsquo; を外して
チェックディジットを付け直すようにしました。</p>

<p>```haml
&ndash; lisbn = Lisbn.new(isbn_or_asin)
&ndash; if lisbn.valid?
  &ndash; parts = lisbn.parts
  &ndash; if parts[0] == &lsquo;978&rsquo;</p>

<pre><code>%p.isbn10 ISBN10: #{parts[1..-2].join('-')}-#{lisbn.isbn10[-1]}
</code></pre>

<p>  %p.isbn13 ISBN13: #{lisbn.parts.join(&lsquo;&ndash;&rsquo;)}
&ndash; else
  %p.asin ASIN: #{isbn_or_asin}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spring rails console で PAGER=lv だと /dev/tty: Device not configured]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-10-spring-and-lv.html"/>
    <updated>2013-10-10T21:28:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/spring-and-lv</id>
    <content type="html"><![CDATA[<p><code>spring rails console</code>
で
<code>pry</code>
を使っていて
pager
を起動するような出力をしたときに
<code>/dev/tty: Device not configured</code>
になることがあったので原因を調べてみました。
結論としてはタイトルに書いてありますが、
<code>spring</code>
と
<code>lv</code>
の組み合わせが原因でした。</p>

<!--more-->


<h2>確認バージョン</h2>

<p>関係する gem のバージョンは以下の通りです。</p>

<ul>
<li>rails 3.2.14, 4.0.0</li>
<li>spring 0.0.10, 0.0.11</li>
</ul>


<p>関係するプログラムのバージョンは以下の通りです。</p>

<ul>
<li>ruby 2.0.0-p247</li>
<li>lv 4.51</li>
</ul>


<p>確認した環境は Mac OS X です。</p>

<h2>原因の切り分け</h2>

<p>まず
<code>rails console</code>
だと問題は発生しないので、
<code>spring</code>
が原因のひとつなのは確実だったので、
当面の回避策として、
<code>spring rails console</code>
の代わりに
<code>rails console</code>
を使っていました。</p>

<p>次にふと他の pager を使ってみるとどうだろうと思って、
<code>spring rails console</code>
の中で
<code>ENV['PAGER']="less"</code>
として <code>lv</code> から <code>less</code> に変えて試してみたところ、
問題なく使えました。
これがきっかけで <code>lv</code> も原因のひとつだということに気づきました。</p>

<h2>原因調査</h2>

<p>ここまでわかれば原因は調べやすくなったので、
まずエラーメッセージを出しているところを探しました。
これはすぐに見つかって、
<code>lv</code> の <code>src/stream.c</code> の <code>perror( "/dev/tty" )</code> でした。</p>

<p>```c lv451/src/stream.c
  close( 0 );
  if( IsAtty( 1 ) &amp;&amp; 0 != open( &ldquo;/dev/tty&rdquo;, O_RDONLY ) )</p>

<pre><code>perror( "/dev/tty" ), exit( -1 );
</code></pre>

<p>```</p>

<p>STDIN を開き直している処理があって、
ここで <code>"/dev/tty"</code> を開けないのが原因でした。</p>

<p>元々の STDIN は
<code>spring</code>
の中で
<code>UNIXSocket#send_io</code>
と
<code>UNIXSocket#recv_io</code>
で受け渡していました。
この STDIN をそのまま使ってくれれば問題は起きないのに、
わざわざ <code>close( 0 )</code> で閉じてしまって、
開き直そうとしているのが問題だとわかりました。</p>

<p><code>spring rails console</code>
の中で直接
<code>open("/dev/tty","r")</code>
を試しても同様に
<code>Errno::ENXIO: Device not configured - /dev/tty</code>
になってしまうので、
<code>lv</code> の方を変えない限りどうしようもなさそうです。</p>

<p>というわけで、
これはもう <code>lv</code> の処理が <code>spring</code> と相性が悪いということで、
<code>spring</code> の中では <code>lv</code> を避けるしかなさそうです。</p>

<h2>結論</h2>

<p><code>~/.spring.rb</code>
で
<code>ENV["PAGER"]</code>
を書き換えることにしました。</p>

<p><code>ruby ~/.spring.rb
ENV["PAGER"] = "less" if ENV["PAGER"] == "lv"
</code></p>

<h2>余談</h2>

<p>原因を調べているときに
<code>spring</code>
の標準入出力の処理周りをみていたのですが、
<code>UNIXSocket#send_io</code>
と
<code>UNIXSocket#recv_io</code>
で受け渡していました。</p>

<p><code>recv_io</code> で mode を指定していないので、
<code>spring rails console</code> では
<code>STDIN.write</code> が使えたり <code>STDOUT.gets</code> が使えたりしてしまうようです。</p>

<p>これは <code>recv_io(IO, "r")</code> などに直せば良さそうに見えますが、
特に実害もなさそうなので、このままでもあまり問題はなさそうです。</p>

<p>パッチとしては以下のように直せば良さそうです。</p>

<p>```diff
diff &mdash;git a/lib/spring/application.rb b/lib/spring/application.rb
index b7df9bb..4e34f6c 100644
&mdash;&ndash; a/lib/spring/application.rb
+++ b/lib/spring/application.rb
@@ -93,7 +93,7 @@ module Spring</p>

<pre><code>   log "got client"
   manager.puts
</code></pre>

<ul>
<li>   streams = 3.times.map { client.recv_io }</li>
<li><p>   streams = %w[w w r].map { |mode| client.recv_io(IO, mode) }
   [STDOUT, STDERR].zip(streams).each { |a, b| a.reopen(b) }</p>

<p>   preload unless preloaded?
```</p></li>
</ul>


<p>テストも以下のように書いてみたのですが、
Mac OS X の環境だとそもそも既存のテストも通らないものがあったり、
Linux だと上の変更をしなくてもテストが通ってしまったりしたので
pull request を出すのは諦めました。
これらのパッチの著作権は主張しないので、
代わりに pull request を出してもらうのは歓迎します。</p>

<p>```diff
diff &mdash;git a/test/acceptance/app_test.rb b/test/acceptance/app_test.rb
index a21b556..ee04e5a 100644
&mdash;&ndash; a/test/acceptance/app_test.rb
+++ b/test/acceptance/app_test.rb
@@ -440,4 +440,16 @@ class AppTest &lt; ActiveSupport::TestCase</p>

<pre><code>   assert_success "bundle check"
 end
</code></pre>

<p>   end
+
+  test &ldquo;STDIN mode&rdquo; do
+    assert_success &ldquo;#{spring} rails runner &lsquo;STDIN.write(%(test)) rescue $!.display&rsquo;&rdquo;, stdout: &ldquo;not opened for writing&rdquo;
+  end
+
+  test &ldquo;STDOUT mode&rdquo; do
+    assert_success &ldquo;#{spring} rails runner &lsquo;STDOUT.gets rescue $!.display&rsquo;&rdquo;, stdout: &ldquo;not opened for reading&rdquo;
+  end
+
+  test &ldquo;STDERR mode&rdquo; do
+    assert_success &ldquo;#{spring} rails runner &lsquo;STDERR.gets rescue $!.display&rsquo;&rdquo;, stdout: &ldquo;not opened for reading&rdquo;
+  end
 end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails 4 対応の認可の gem]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-08-rails4-authorization.html"/>
    <updated>2013-10-08T23:04:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rails4-authorization</id>
    <content type="html"><![CDATA[<p>rails 4 に対応している認可のライブラリとして
<code>cancan</code>
からの移行先候補を選ぶために
<code>the_role</code>
と
<code>pundit</code>
という gem を試してみました。</p>

<!--more-->


<h2>cancan からの移行</h2>

<p>認証は rails 4 でも
<code>devise</code>
を使い続ければ良さそうな感じなのですが、
認可の方は
<code>cancan</code>
の rails 4 対応がいまいちで
<a href="http://ready4rails4.net/gems/cancan">Ready for Rails 4?</a>
でも <em>not ready</em> のままで
<a href="https://github.com/ryanb/cancan/issues">issues</a>
も溜まっていることもあり、
rails 4 では他の gem への移行を検討していました。</p>

<h2>移行先候補</h2>

<p>移行先候補として、まず最初に試したのは
<a href="https://github.com/the-teacher/the_role">the_role</a>
という gem でした。
後述しますが、これは最初から組み込むなら良さそうなのですが、
今回はちょっと目的にあわなかったので諦めました。</p>

<p>次に試したのは
<a href="https://github.com/elabs/pundit">pundit</a>
という gem で、
これは
<a href="http://www.elabs.se/blog/52-simple-authorization-in-ruby-on-rails-apps">Simple authorization in Ruby on Rails apps — Elabs</a>
という blog の説明で実装のほぼすべてが理解できるぐらいシンプルな gem でした。
rails 自体の変化にも強そうだと思って、
今回はこれを採用しました。</p>

<p>その後、
検索用キーワードとして使えそうな名前が増えたことで
<a href="http://www.plugingeek.com/categories/user-authorization-ruby">User Authorization (Ruby) on pluginGeek</a>
という一覧を見つけました。</p>

<p>後で知ったので今回は試していないのですが、
<a href="https://github.com/nathanl/authority">Authority</a>
は高機能そうなので、高機能なものがほしい場合や
<code>cancan</code>
で複雑なことをしていた場合の移行先としては良さそうです。</p>

<h2><code>the_role</code></h2>

<p>最初に試した
<a href="https://github.com/the-teacher/the_role">the_role</a> 2.1.1
は
「TheRole &ndash; Authorization Gem for Ruby on Rails with administrative interface」
と書いてある通り、設定画面も付いているのが特徴です。</p>

<p>認可の設定画面は
<code>localhost:3000/admin/roles</code>
で出てくるのですが、
layout に</p>

<p><code>haml
= yield :role_sidebar
= yield :role_main
</code></p>

<p>を入れていないと真っ白なページで何も内容が出てこないので注意が必要です。
<code>assets</code>
もちゃんと設定していないと
<code>Enable</code>, <code>Disable</code> のところが動かないなど、
使い始めにはまりどころがいくつかありました。</p>

<p>他にも</p>

<ul>
<li>管理画面が <code>admin/roles</code> 決めうち (gem の中の <code>config/routes.rb</code>)</li>
<li><code>User</code> というモデル名も決めうち (<code>Admin::User</code> などは使えない)</li>
<li>1 ユーザーは 1 ロールのみ (例えば、あるユーザーにカレンダーの管理者とお知らせの管理者のロールをつけるということは出来ないので複合権限のロールを別途作る必要がある)</li>
</ul>


<p>という点など柔軟性はなさそうな感じでした。
このうち、管理画面のパスが決めうちという点が
<code>rails_admin</code>
との組み合わせで問題になったので、
今回は採用を見送りました。
<code>rails_admin</code>
の方を <code>admin</code> 以外のパスに変更して良いのなら
一緒に使えると思います。</p>

<p>使うのに必要な設定は
<code>rake rails:template LOCATION=/path/to/file.rb</code>
のように使うことを想定して作っているアプリケーションテンプレートの
<a href="https://github.com/znz/rails-app-template/blob/master/the_role.rb">https://github.com/znz/rails-app-template/blob/master/the_role.rb</a>
も参考になると思います。</p>

<h2>pundit</h2>

<p>こちらも初期設定などの一部は
<a href="https://github.com/znz/rails-app-template/blob/master/pundit.rb">https://github.com/znz/rails-app-template/blob/master/pundit.rb</a>
で出来るようにアプリケーションテンプレートを作成中です。</p>

<p>認可の仕組みとしては簡単に言うと
<code>Post</code> の <code>update</code> の認可なら
<code>PostPolicy.new(current_user, @post).update?</code>
で判断出来るような <code>Policy</code> クラスを用意しましょう、というだけです。</p>

<p><code>index</code> などのようなアクション用として
<code>@posts = PostPolicy::Scope.new(current_user, Post.scoped).resolve</code>
のような <code>Scope</code> も用意する、ということになっています。</p>

<p>そういうものを用意した上で便利に使えるようにいくつかのヘルパーメソッドなどを
用意したものが <code>pundit</code> gem になっています。</p>

<p>つまり仕組み自体は <code>pundit</code> gem なしでも使えるので、
細かく制御したい部分では <code>pundit</code> gem に関係なく
<code>Policy</code> や <code>Scope</code> を直接扱うこともできます。</p>

<h2>pundit と rails_admin</h2>

<p>というわけで直接扱ったり、
モデルとは関連ない <code>Policy</code> を用意したりして、
<code>rails_admin</code>
との連携を作成している途中のものを
<a href="https://github.com/znz/rails-app-template/blob/master/pundit-with-rails_admin.rb">https://github.com/znz/rails-app-template/blob/master/pundit-with-rails_admin.rb</a>
に公開しています。</p>

<h2>pundit と scaffold</h2>

<p><code>cancan</code>
の
<code>load_and_authorize_resource</code>
のようなものは
<code>pundit</code>
自体には用意されていないので、
scaffold
で生成したコントローラーに埋め込む処理を
<a href="https://github.com/znz/rails-app-template/blob/master/pundit-with-scaffold.rb">https://github.com/znz/rails-app-template/blob/master/pundit-with-scaffold.rb</a>
で公開しています。</p>

<h2>まとめ</h2>

<p>今回は初期設定をアプリケーションテンプレートにまとめつつ、
認可用の gem を試しました。</p>

<p>アプリケーションテンプレートはどれもひな形としての利用を想定しているので、
この後さらに変更していくことになると思います。</p>

<p>アプリケーションテンプレート自体も使っていった上で必要に応じて変更していく予定なので、
リンク先はこの記事を書いた時点の内容とは合わなくなっている可能性もあります。</p>

<p>認可用のライブラリとしては権限管理画面付きのものを簡単に組み込みたければ
<code>the_role</code>、
シンプルな部品を組み合わせるのが良ければ <code>pundit</code>、
高機能なものが欲しければ <code>authority</code> を試すのが
良さそうだと思いました。</p>
]]></content>
  </entry>
  
</feed>
