<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2015-01-03T17:28:55+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[doorkeeper gem を 1.4 系から 2.0 系にアップデートした]]></title>
    <link href="http://blog.n-z.jp/blog/2014-12-18-doorkeeper-gem-1-to-2.html"/>
    <updated>2014-12-18T16:18:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/doorkeeper-gem-1-to-2</id>
    <content type="html"><![CDATA[<p>doorkeeper gem がメジャーバージョンアップして非互換があったので、
対応したときのメモです。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>rails 4.1.8</li>
<li>doorkeeper 1.4.0 から 2.0.1</li>
</ul>


<h2>変更点確認</h2>

<p><a href="https://github.com/doorkeeper-gem/doorkeeper/blob/master/CHANGELOG.md">CHANGELOG.md</a>
にまとまっていたので、参考にしました。</p>

<p>セキュリティアップデートも含まれるようなので、
2.0 系にあげられないときは 1.4.1 にあげておくのが良さそうです。</p>

<h2><code>doorkeeper_for</code> の書き換え</h2>

<p><code>doorkeeper_for :all</code> は <code>before_action :doorkeeper_authorize!</code> に書き換えました。</p>

<pre><code class="diff">-    doorkeeper_for :all
-    respond_to     :json
+    before_action :doorkeeper_authorize!
+    respond_to    :json
</code></pre>

<pre><code class="diff">-    doorkeeper_for :index,  :show,   scopes: %w"public"
-    doorkeeper_for :create, :update, scopes: %w"admin write"
+    before_action -&gt; { doorkeeper_authorize! :public }, only: [:index, :show]
+    before_action only: [:create, :update] do
+      doorkeeper_authorize! :admin, :write
+    end
</code></pre>

<h2><code>config/initializers/doorkeeper.rb</code> の更新</h2>

<p><code>rails g doorkeeper:install</code> で生成し直して変更していた部分を再適用しました。</p>

<ul>
<li><code>resource_owner_authenticator</code> で <code>devise</code> との連携</li>
<li>scope 関連</li>
<li>認可の画面のスキップ</li>
<li>動的な query parameter の許可</li>
</ul>


<pre><code class="ruby">  resource_owner_authenticator do
    current_user || warden.authenticate!(scope: :user)
  end

  default_scopes  :public
  optional_scopes :admin, :write

  skip_authorization do |resource_owner, client|
    true
  end

  wildcard_redirect_uri true
</code></pre>

<h2><code>config/locales/doorkeeper.en.yml</code> の更新</h2>

<p><code>rails g doorkeeper:install</code> で <code>config/initializers/doorkeeper.rb</code> と一緒に更新されていました。</p>

<p>認可の画面をスキップしている関係で、翻訳はせずに en を ja に置き換えただけで
そのまま使っていたので、同様に置き換えてそのまま使いました。</p>

<h2><code>redirect urimust be an HTTPS/SSL URI.</code> 対策</h2>

<p>テストの中で
<code>let!(:application) { Doorkeeper::Application.create!(name: 'MyApp', redirect_uri: 'http://api.test') }</code>
のようにしていると
<code>redirect urimust be an HTTPS/SSL URI.</code>
で失敗していたので、
<code>https</code> の URL に変更するか、
<code>config/initializers/doorkeeper.rb</code> で
<code>force_ssl_in_redirect_uri false</code>
にする必要がありました。</p>

<h2>Missing column: <code>applications.scopes</code></h2>

<p>テストを実行したときに</p>

<pre><code>[doorkeeper] Missing column: `applications.scopes`. If you are using ActiveRecord run `rails generate doorkeeper:application_scopes &amp;&amp; rake db:migrate` to add it.
</code></pre>

<p>というメッセージが出るので、メッセージ通り
<code>rails generate doorkeeper:application_scopes &amp;&amp; rake db:migrate</code>
で追加しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[capistrano 3.3.3 が依存している capistrano-stats について]]></title>
    <link href="http://blog.n-z.jp/blog/2014-12-01-capistrano-stats.html"/>
    <updated>2014-12-01T21:33:21+09:00</updated>
    <id>http://blog.n-z.jp/blog/capistrano-stats</id>
    <content type="html"><![CDATA[<p>capistrano が 3.3.3 にあがって
<a href="https://github.com/capistrano/stats">capistrano-stats</a>
という gem に依存するようになりました。
これは <code>metrics.capistranorb.com:1200</code> にバージョン情報などを送信して
capistrano のサポートの改善に役立てようとするもののようです。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>capistrano 3.3.3</li>
<li>capistrano-stats 1.0.3</li>
</ul>


<h2>Capfile locked</h2>

<p>capistrano-stats とは関係ないですが、
<code>Capfile locked at 3.2.1, but 3.3.3 is loaded</code>
と出るときは <code>config/deploy.rb</code> の最初の方にある
<code>lock '3.2.1'</code>
という行を
<code>lock '3.3.3'</code>
に書き換えれば OK です。</p>

<h2>capistrano-stats 1.0.3 の挙動</h2>

<p>初回実行時に
<code>Do you want to enable statistics? (y/N):</code>
ときかれて、
そのまま Enter か <code>n</code> を入力すると ruby や capistrano のバージョンは送信されなくなるのですが、
(少なくとも私の) 期待に反して
<code>metrics.capistranorb.com:1200</code>
への送信自体は発生するようになっています。</p>

<h2>何が問題か</h2>

<p>全く送信してほしくない場合にも通信が発生したり、
firewall で塞がれている場合にエラーになったり
という問題があります。</p>

<h2>一時的に無効にするには?</h2>

<p><code>CAPISTRANO_METRICS=localhost:1200 bundle exec cap default</code>
のように環境変数 <code>CAPISTRANO_METRICS</code> で送っても無視されるところに送信すれば良さそうです。</p>

<h2>完全に無効にするには?</h2>

<p>pull request 1 の
<a href="https://github.com/capistrano/stats/pull/1" title="Honor the users privacy decision and do not send UDP packets if he does not want to send metrics">Honor the users privacy decision and do not send UDP packets if he does not want to send metrics</a>
にあるように</p>

<pre><code class="ruby">Rake::Task['metrics:collect'].clear_actions
</code></pre>

<p>を <code>config/deploy.rb</code> に追加すると送信されなくなりました。</p>

<h2>今後</h2>

<p><a href="https://github.com/capistrano/stats/pull/2" title="Allow users to opt-out of sending the UDP ping and improve error handling when the sendto syscall fails">Allow users to opt-out of sending the UDP ping and improve error handling when the sendto syscall fails</a>
という pull request が続きで出ているので、
将来のバージョンでは全く送信しない選択肢が用意されるかもしれません。</p>

<h2>2014-12-13 追記</h2>

<p>その後、
capistrano 3.3.4 と capistrano-stats 1.1.0 にあがって、
デフォルトの N を 2 回は全く送信しないようになりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4.1.7 にあげたら一部の画像が表示されなくなった]]></title>
    <link href="http://blog.n-z.jp/blog/2014-11-05-sprockets.html"/>
    <updated>2014-11-05T21:11:09+09:00</updated>
    <id>http://blog.n-z.jp/blog/sprockets</id>
    <content type="html"><![CDATA[<p>Rails 4.1.7 にあげたら一部の画像が表示されなくなるという現象が起きて、しばらく悩んでいたのですが解決しました。</p>

<!--more-->


<h2>原因</h2>

<ul>
<li>Rails か sprockets のバージョンアップでファイル名につけられる digest が変わった。</li>
<li><code>image_tag</code> で画像を参照している HTML が <code>cache</code> の中にあった。</li>
</ul>


<h2>現象</h2>

<p><code>rails console</code> で <code>Rails.application.assets.find_asset(asset_name).digest</code> を試しても新しい digest がちゃんと返ってくるのに、
ブラウザー上では古い digest の URL が参照されていてファイルが見つからないという現象になっていました。</p>

<p>アセットはキャッシュ期間の長いファイルとして設定しているので、複数ブラウザーで確認すると最初は現象が起きたり起きなかったりしていて、サーバー側の問題だと気づくのが遅れました。</p>

<h2>対処</h2>

<p><code>dalli</code> gem 経由で <code>memcached</code> をキャッシュ使っていたので <code>sudo service memcached restart</code> してキャッシュを破棄しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redmine の運用停止前のバックアップ]]></title>
    <link href="http://blog.n-z.jp/blog/2014-10-09-redmine-backup.html"/>
    <updated>2014-10-09T21:55:27+09:00</updated>
    <id>http://blog.n-z.jp/blog/redmine-backup</id>
    <content type="html"><![CDATA[<p>ある redmine の運用を止める前にリポジトリとの連携部分は止まってしまうのは仕方がないとして、
wiki やチケットなどは後からでも参照できるようにローカルにバックアップを残しておくことにしました。
その手順のメモです。</p>

<!--more-->


<h2>データベースのバックアップ</h2>

<p><a href="http://blog.n-z.jp/blog/2014-01-28-yaml-db.html" title="yaml_dbでMySQLからPostgreSQLに移行した">yaml_dbでMySQLからPostgreSQLに移行した</a>話で使った <code>yaml_db</code> を使いました。</p>

<p>まず、
<code>Gemfile.local</code> をなければ作成して、以下の内容を追加します。</p>

<pre><code class="ruby Gemfile.local">gem 'yaml_db', github: 'jetthoughts/yaml_db'
</code></pre>

<p>そして <code>RAILS_ENV=production bundle exec rake db:data:dump</code> で <code>db/data.yml</code> を作成します。</p>

<h2>ローカル環境の作成</h2>

<p>ローカルにも redmine 環境を作成します。</p>

<ol>
<li>redmine-2.5.2.tar.gz をダウンロードして展開</li>
<li><code>config/database.yml.example</code> を元に <code>config/database.yml</code> を作成 (今回はバックアップ環境なので sqlite3 を使用)</li>
<li>Gemfile.local 作成</li>
<li><code>plugins/</code> に使っていたプラグインをインストール (サーバーから rsync でコピーなど)</li>
<li>プラグインの設定も必要に応じてコピー (<code>config/wiki_external_filter.yml</code> など)</li>
<li><code>bundle install</code> で gem のインストール</li>
<li><code>RAILS_ENV=production bundle exec rake db:migrate</code> と <code>RAILS_ENV=production bundle exec rake redmine:plugins:migrate</code> でデータベース作成</li>
<li><code>db/data.yml</code> をコピーしてきて <code>RAILS_ENV=production bundle exec rake db:data:load</code> で読み込み (<code>db:migrate</code> していないとテーブル不足で読み込めない)</li>
<li><code>files/</code> の添付ファイルをコピー (サーバーから rsync でコピーなど)</li>
<li><code>config/configuration.yml</code> や <code>favicon.ico</code> などカスタマイズしているものがあれば必要に応じて設定やコピー</li>
<li><code>bundle exec rake generate_secret_token</code> で secret token を生成</li>
<li><code>bundle exec rails server -e production</code> で起動</li>
</ol>


<p>ログインして今まで通り見えることを確認して終了です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[font-awesome-sass を 4.1.0 から 4.2.0 にあげたらアイコンが表示されなくなったので対処した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-09-03-font-awesome-sass-4-2-0.html"/>
    <updated>2014-09-03T20:52:56+09:00</updated>
    <id>http://blog.n-z.jp/blog/font-awesome-sass-4-2-0</id>
    <content type="html"><![CDATA[<p>Rails 4.1.5 で使っている <code>font-awesome-sass</code> gem を 4.1.0 から 4.2.0 にあげたところ、
アイコンが表示されなくなったので、原因を調べてみました。</p>

<h2>解決方法</h2>

<p><a href="https://github.com/FortAwesome/font-awesome-sass">https://github.com/FortAwesome/font-awesome-sass</a> には 3.x からのアップグレード方法しか
書いていないのですが、
4.1.0 などの 4.x 系から 4.2.0 にあげるときは</p>

<pre><code>*= require font-awesome
</code></pre>

<p>の代わりに</p>

<pre><code>@import "font-awesome-sprockets";
@import "font-awesome";
</code></pre>

<p>のように <code>@import</code> を使う必要があり、
既に <code>@import</code> を使っている場合でも
<code>@import "font-awesome-sprockets";</code>
の行の追加が必要でした。</p>

<h2>詳細</h2>

<p>4.1.0 と 4.2.0 の差分の
<a href="https://github.com/FortAwesome/font-awesome-sass/commit/a527acdf693cf0bced797e75f387a8f8e2a9c844" title="Refactoring for use in multiple Ruby envs and upgrading to FontAwesome 4.2.0">Refactoring for use in multiple Ruby envs and upgrading to FontAwesome 4.2.0</a>
を眺めてみると、
FontAwesome を 4.2.0 にあげる以外に
<code>vendor/assets/</code> から <code>assets/</code> に移動していたり、
それに関係する変更をしていたりするようです。</p>

<p>それから詳しいことはわかりませんが、
<code>icon-font-path($path)</code> と <code>icon-image-path($path)</code> で
それぞれ
sprockets では <code>font-path($path)</code> と <code>image-path($path)</code> で、
compass では <code>font-url($path, true)</code> と <code>image-url($path, true)</code> を
使うようになった影響で <code>@import "font-awesome-sprockets"</code> が必要になったようです。</p>
]]></content>
  </entry>
  
</feed>
