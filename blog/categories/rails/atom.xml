<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-10-25T14:21:40+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby で ISBN をチェックしたりハイフンを入れたり]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-12-isbn.html"/>
    <updated>2013-10-12T14:38:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/isbn</id>
    <content type="html"><![CDATA[<p>本には
<a href="http://ja.wikipedia.org/wiki/ISBN">ISBN</a>
というものが付いていて、
末尾のチェックディジットは仕様を参照すれば
簡単に計算出来そうです。</p>

<p>10 桁のものと新しい 13 桁のものがあったり、
出版者の部分の桁数が違ったりして
ちゃんとハイフンを入れるのは面倒そうです。</p>

<p>チェックディジットの方も自分で実装すると
バグっていたときに面倒なので、
良さそうな gem がないか探してみました。</p>

<p>最終的にはいくつかの理由から
<a href="http://rubygems.org/gems/lisbn">lisbn</a>
という gem を使いました。</p>

<!--more-->


<h2>gem の選択</h2>

<p>まず
<a href="http://rubygems.org/search?utf8=%E2%9C%93&amp;query=isbn">rubygems.org の右上で isbn と検索</a>
するところから始めました。</p>

<p>インストール数の多い順に見ていくと、</p>

<ul>
<li><a href="http://rubygems.org/gems/isbn10">isbn10</a>

<ul>
<li>インストール数は一番多い</li>
<li>10桁のみ</li>
<li>古い</li>
</ul>
</li>
<li><a href="https://github.com/ragalie/isbn-tools">isbn-tools</a>

<ul>
<li>古い</li>
<li>Not Maintained</li>
<li>lisbn が後継</li>
</ul>
</li>
<li><a href="https://github.com/entangledstate/isbn">isbn</a>

<ul>
<li>画像対応とかいろいろ高機能っぽいけど今回は不要</li>
<li><code>with_dashes</code> というメソッドは桁数決めうちで不適切</li>
</ul>
</li>
<li><a href="https://github.com/zapnap/isbn_validation">isbn_validation</a>

<ul>
<li>ActiveRecord の validates</li>
<li>ISBN ではない <a href="http://www.amazon.co.jp/gp/help/customer/display.html?nodeId=747416">ASIN</a> も扱いたかったので今回は不適当</li>
</ul>
</li>
<li><a href="https://github.com/ragalie/lisbn">lisbn</a>

<ul>
<li>比較的新しい</li>
<li>10桁と13桁の両対応</li>
<li>ハイフンを入れるために必要な分解処理がある (後は <code>join('-')</code> すれば良いだけ)</li>
<li>data/RangeMessage.xml というファイルを持っていて適切にわけてくれる</li>
</ul>
</li>
</ul>


<p>という感じでした。</p>

<h2>lisbn の使用例</h2>

<p>データベースに保存するのに統一されていると
<code>validates :isbn, uniqueness: true</code>
が使えるので、
以下のように ISBN13 に統一する処理を入れました。</p>

<p>それ以外の場合は ASIN と見なしてそのまま返しています。</p>

<p>```ruby
  def isbn_unify(isbn)</p>

<pre><code># Convert JISX0208 alphabet to ASCII.
isbn = NKF.nkf('-Ww -Z0', isbn).delete("^A-Za-z0-9")

# Convert to isbn13
lisbn = Lisbn.new(isbn)
if lisbn.valid?
  lisbn.isbn13
else
  isbn
end
</code></pre>

<p>  end
```</p>

<p>出力する側では
<code>parts</code>
は常に ISBN13 のものだけのようなので、
ISBN10
に出来るときは
頭の &lsquo;978&rsquo; を外して
チェックディジットを付け直すようにしました。</p>

<p>```haml
&ndash; lisbn = Lisbn.new(isbn_or_asin)
&ndash; if lisbn.valid?
  &ndash; parts = lisbn.parts
  &ndash; if parts[0] == &lsquo;978&rsquo;</p>

<pre><code>%p.isbn10 ISBN10: #{parts[1..-2].join('-')}-#{lisbn.isbn10[-1]}
</code></pre>

<p>  %p.isbn13 ISBN13: #{lisbn.parts.join(&lsquo;&ndash;&rsquo;)}
&ndash; else
  %p.asin ASIN: #{isbn_or_asin}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spring rails console で PAGER=lv だと /dev/tty: Device not configured]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-10-spring-and-lv.html"/>
    <updated>2013-10-10T21:28:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/spring-and-lv</id>
    <content type="html"><![CDATA[<p><code>spring rails console</code>
で
<code>pry</code>
を使っていて
pager
を起動するような出力をしたときに
<code>/dev/tty: Device not configured</code>
になることがあったので原因を調べてみました。
結論としてはタイトルに書いてありますが、
<code>spring</code>
と
<code>lv</code>
の組み合わせが原因でした。</p>

<!--more-->


<h2>確認バージョン</h2>

<p>関係する gem のバージョンは以下の通りです。</p>

<ul>
<li>rails 3.2.14, 4.0.0</li>
<li>spring 0.0.10, 0.0.11</li>
</ul>


<p>関係するプログラムのバージョンは以下の通りです。</p>

<ul>
<li>ruby 2.0.0-p247</li>
<li>lv 4.51</li>
</ul>


<p>確認した環境は Mac OS X です。</p>

<h2>原因の切り分け</h2>

<p>まず
<code>rails console</code>
だと問題は発生しないので、
<code>spring</code>
が原因のひとつなのは確実だったので、
当面の回避策として、
<code>spring rails console</code>
の代わりに
<code>rails console</code>
を使っていました。</p>

<p>次にふと他の pager を使ってみるとどうだろうと思って、
<code>spring rails console</code>
の中で
<code>ENV['PAGER']="less"</code>
として <code>lv</code> から <code>less</code> に変えて試してみたところ、
問題なく使えました。
これがきっかけで <code>lv</code> も原因のひとつだということに気づきました。</p>

<h2>原因調査</h2>

<p>ここまでわかれば原因は調べやすくなったので、
まずエラーメッセージを出しているところを探しました。
これはすぐに見つかって、
<code>lv</code> の <code>src/stream.c</code> の <code>perror( "/dev/tty" )</code> でした。</p>

<p>```c lv451/src/stream.c
  close( 0 );
  if( IsAtty( 1 ) &amp;&amp; 0 != open( &ldquo;/dev/tty&rdquo;, O_RDONLY ) )</p>

<pre><code>perror( "/dev/tty" ), exit( -1 );
</code></pre>

<p>```</p>

<p>STDIN を開き直している処理があって、
ここで <code>"/dev/tty"</code> を開けないのが原因でした。</p>

<p>元々の STDIN は
<code>spring</code>
の中で
<code>UNIXSocket#send_io</code>
と
<code>UNIXSocket#recv_io</code>
で受け渡していました。
この STDIN をそのまま使ってくれれば問題は起きないのに、
わざわざ <code>close( 0 )</code> で閉じてしまって、
開き直そうとしているのが問題だとわかりました。</p>

<p><code>spring rails console</code>
の中で直接
<code>open("/dev/tty","r")</code>
を試しても同様に
<code>Errno::ENXIO: Device not configured - /dev/tty</code>
になってしまうので、
<code>lv</code> の方を変えない限りどうしようもなさそうです。</p>

<p>というわけで、
これはもう <code>lv</code> の処理が <code>spring</code> と相性が悪いということで、
<code>spring</code> の中では <code>lv</code> を避けるしかなさそうです。</p>

<h2>結論</h2>

<p><code>~/.spring.rb</code>
で
<code>ENV["PAGER"]</code>
を書き換えることにしました。</p>

<p><code>ruby ~/.spring.rb
ENV["PAGER"] = "less" if ENV["PAGER"] == "lv"
</code></p>

<h2>余談</h2>

<p>原因を調べているときに
<code>spring</code>
の標準入出力の処理周りをみていたのですが、
<code>UNIXSocket#send_io</code>
と
<code>UNIXSocket#recv_io</code>
で受け渡していました。</p>

<p><code>recv_io</code> で mode を指定していないので、
<code>spring rails console</code> では
<code>STDIN.write</code> が使えたり <code>STDOUT.gets</code> が使えたりしてしまうようです。</p>

<p>これは <code>recv_io(IO, "r")</code> などに直せば良さそうに見えますが、
特に実害もなさそうなので、このままでもあまり問題はなさそうです。</p>

<p>パッチとしては以下のように直せば良さそうです。</p>

<p>```diff
diff &mdash;git a/lib/spring/application.rb b/lib/spring/application.rb
index b7df9bb..4e34f6c 100644
&mdash;&ndash; a/lib/spring/application.rb
+++ b/lib/spring/application.rb
@@ -93,7 +93,7 @@ module Spring</p>

<pre><code>   log "got client"
   manager.puts
</code></pre>

<ul>
<li>   streams = 3.times.map { client.recv_io }</li>
<li><p>   streams = %w[w w r].map { |mode| client.recv_io(IO, mode) }
   [STDOUT, STDERR].zip(streams).each { |a, b| a.reopen(b) }</p>

<p>   preload unless preloaded?
```</p></li>
</ul>


<p>テストも以下のように書いてみたのですが、
Mac OS X の環境だとそもそも既存のテストも通らないものがあったり、
Linux だと上の変更をしなくてもテストが通ってしまったりしたので
pull request を出すのは諦めました。
これらのパッチの著作権は主張しないので、
代わりに pull request を出してもらうのは歓迎します。</p>

<p>```diff
diff &mdash;git a/test/acceptance/app_test.rb b/test/acceptance/app_test.rb
index a21b556..ee04e5a 100644
&mdash;&ndash; a/test/acceptance/app_test.rb
+++ b/test/acceptance/app_test.rb
@@ -440,4 +440,16 @@ class AppTest &lt; ActiveSupport::TestCase</p>

<pre><code>   assert_success "bundle check"
 end
</code></pre>

<p>   end
+
+  test &ldquo;STDIN mode&rdquo; do
+    assert_success &ldquo;#{spring} rails runner &lsquo;STDIN.write(%(test)) rescue $!.display&rsquo;&rdquo;, stdout: &ldquo;not opened for writing&rdquo;
+  end
+
+  test &ldquo;STDOUT mode&rdquo; do
+    assert_success &ldquo;#{spring} rails runner &lsquo;STDOUT.gets rescue $!.display&rsquo;&rdquo;, stdout: &ldquo;not opened for reading&rdquo;
+  end
+
+  test &ldquo;STDERR mode&rdquo; do
+    assert_success &ldquo;#{spring} rails runner &lsquo;STDERR.gets rescue $!.display&rsquo;&rdquo;, stdout: &ldquo;not opened for reading&rdquo;
+  end
 end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails 4 対応の認可の gem]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-08-rails4-authorization.html"/>
    <updated>2013-10-08T23:04:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rails4-authorization</id>
    <content type="html"><![CDATA[<p>rails 4 に対応している認可のライブラリとして
<code>cancan</code>
からの移行先候補を選ぶために
<code>the_role</code>
と
<code>pundit</code>
という gem を試してみました。</p>

<!--more-->


<h2>cancan からの移行</h2>

<p>認証は rails 4 でも
<code>devise</code>
を使い続ければ良さそうな感じなのですが、
認可の方は
<code>cancan</code>
の rails 4 対応がいまいちで
<a href="http://ready4rails4.net/gems/cancan">Ready for Rails 4?</a>
でも <em>not ready</em> のままで
<a href="https://github.com/ryanb/cancan/issues">issues</a>
も溜まっていることもあり、
rails 4 では他の gem への移行を検討していました。</p>

<h2>移行先候補</h2>

<p>移行先候補として、まず最初に試したのは
<a href="https://github.com/the-teacher/the_role">the_role</a>
という gem でした。
後述しますが、これは最初から組み込むなら良さそうなのですが、
今回はちょっと目的にあわなかったので諦めました。</p>

<p>次に試したのは
<a href="https://github.com/elabs/pundit">pundit</a>
という gem で、
これは
<a href="http://www.elabs.se/blog/52-simple-authorization-in-ruby-on-rails-apps">Simple authorization in Ruby on Rails apps — Elabs</a>
という blog の説明で実装のほぼすべてが理解できるぐらいシンプルな gem でした。
rails 自体の変化にも強そうだと思って、
今回はこれを採用しました。</p>

<p>その後、
検索用キーワードとして使えそうな名前が増えたことで
<a href="http://www.plugingeek.com/categories/user-authorization-ruby">User Authorization (Ruby) on pluginGeek</a>
という一覧を見つけました。</p>

<p>後で知ったので今回は試していないのですが、
<a href="https://github.com/nathanl/authority">Authority</a>
は高機能そうなので、高機能なものがほしい場合や
<code>cancan</code>
で複雑なことをしていた場合の移行先としては良さそうです。</p>

<h2><code>the_role</code></h2>

<p>最初に試した
<a href="https://github.com/the-teacher/the_role">the_role</a> 2.1.1
は
「TheRole &ndash; Authorization Gem for Ruby on Rails with administrative interface」
と書いてある通り、設定画面も付いているのが特徴です。</p>

<p>認可の設定画面は
<code>localhost:3000/admin/roles</code>
で出てくるのですが、
layout に</p>

<p><code>haml
= yield :role_sidebar
= yield :role_main
</code></p>

<p>を入れていないと真っ白なページで何も内容が出てこないので注意が必要です。
<code>assets</code>
もちゃんと設定していないと
<code>Enable</code>, <code>Disable</code> のところが動かないなど、
使い始めにはまりどころがいくつかありました。</p>

<p>他にも</p>

<ul>
<li>管理画面が <code>admin/roles</code> 決めうち (gem の中の <code>config/routes.rb</code>)</li>
<li><code>User</code> というモデル名も決めうち (<code>Admin::User</code> などは使えない)</li>
<li>1 ユーザーは 1 ロールのみ (例えば、あるユーザーにカレンダーの管理者とお知らせの管理者のロールをつけるということは出来ないので複合権限のロールを別途作る必要がある)</li>
</ul>


<p>という点など柔軟性はなさそうな感じでした。
このうち、管理画面のパスが決めうちという点が
<code>rails_admin</code>
との組み合わせで問題になったので、
今回は採用を見送りました。
<code>rails_admin</code>
の方を <code>admin</code> 以外のパスに変更して良いのなら
一緒に使えると思います。</p>

<p>使うのに必要な設定は
<code>rake rails:template LOCATION=/path/to/file.rb</code>
のように使うことを想定して作っているアプリケーションテンプレートの
<a href="https://github.com/znz/rails-app-template/blob/master/the_role.rb">https://github.com/znz/rails-app-template/blob/master/the_role.rb</a>
も参考になると思います。</p>

<h2>pundit</h2>

<p>こちらも初期設定などの一部は
<a href="https://github.com/znz/rails-app-template/blob/master/pundit.rb">https://github.com/znz/rails-app-template/blob/master/pundit.rb</a>
で出来るようにアプリケーションテンプレートを作成中です。</p>

<p>認可の仕組みとしては簡単に言うと
<code>Post</code> の <code>update</code> の認可なら
<code>PostPolicy.new(current_user, @post).update?</code>
で判断出来るような <code>Policy</code> クラスを用意しましょう、というだけです。</p>

<p><code>index</code> などのようなアクション用として
<code>@posts = PostPolicy::Scope.new(current_user, Post.scoped).resolve</code>
のような <code>Scope</code> も用意する、ということになっています。</p>

<p>そういうものを用意した上で便利に使えるようにいくつかのヘルパーメソッドなどを
用意したものが <code>pundit</code> gem になっています。</p>

<p>つまり仕組み自体は <code>pundit</code> gem なしでも使えるので、
細かく制御したい部分では <code>pundit</code> gem に関係なく
<code>Policy</code> や <code>Scope</code> を直接扱うこともできます。</p>

<h2>pundit と rails_admin</h2>

<p>というわけで直接扱ったり、
モデルとは関連ない <code>Policy</code> を用意したりして、
<code>rails_admin</code>
との連携を作成している途中のものを
<a href="https://github.com/znz/rails-app-template/blob/master/pundit-with-rails_admin.rb">https://github.com/znz/rails-app-template/blob/master/pundit-with-rails_admin.rb</a>
に公開しています。</p>

<h2>pundit と scaffold</h2>

<p><code>cancan</code>
の
<code>load_and_authorize_resource</code>
のようなものは
<code>pundit</code>
自体には用意されていないので、
scaffold
で生成したコントローラーに埋め込む処理を
<a href="https://github.com/znz/rails-app-template/blob/master/pundit-with-scaffold.rb">https://github.com/znz/rails-app-template/blob/master/pundit-with-scaffold.rb</a>
で公開しています。</p>

<h2>まとめ</h2>

<p>今回は初期設定をアプリケーションテンプレートにまとめつつ、
認可用の gem を試しました。</p>

<p>アプリケーションテンプレートはどれもひな形としての利用を想定しているので、
この後さらに変更していくことになると思います。</p>

<p>アプリケーションテンプレート自体も使っていった上で必要に応じて変更していく予定なので、
リンク先はこの記事を書いた時点の内容とは合わなくなっている可能性もあります。</p>

<p>認可用のライブラリとしては権限管理画面付きのものを簡単に組み込みたければ
<code>the_role</code>、
シンプルな部品を組み合わせるのが良ければ <code>pundit</code>、
高機能なものが欲しければ <code>authority</code> を試すのが
良さそうだと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[doorkeeper gem の API のクライアント]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-08-doorkeeper-api-client.html"/>
    <updated>2013-10-08T21:06:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/doorkeeper-api-client</id>
    <content type="html"><![CDATA[<p><a href="http://rubygems.org/gems/doorkeeper">doorkeeper gem</a>
で API を作る方は
<a href="https://github.com/applicake/doorkeeper-provider-app">doorkeeper-provider-app</a>
というサンプルの
<code>app/controllers/api/</code>
以下などをみればすぐにわかったのですが、
API を呼び出す方は
<a href="https://github.com/applicake/doorkeeper/wiki/Create-a-OmniAuth-strategy-for-your-provider">OmniAuth の中でユーザーの情報を取り出す</a>
だけならすぐに出来たのですが、
コントローラーの中など呼び出す方法は
<a href="https://github.com/applicake/doorkeeper-devise-client">doorkeeper-devise-client</a>
を見てもよくわからなかったので、まとめてみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>provider 側

<ul>
<li>rails 3.2.14</li>
<li>doorkeeper 0.7.3</li>
</ul>
</li>
<li>client 側

<ul>
<li>rails 4.0.0</li>
<li>devise 3.1.1</li>
<li>omniauth 1.1.4</li>
<li>omniauth-oauth2 1.1.1</li>
<li>oauth2 0.8.1</li>
</ul>
</li>
</ul>


<h2>準備</h2>

<p>まず
<a href="https://github.com/applicake/doorkeeper/wiki/Create-a-OmniAuth-strategy-for-your-provider">Create a OmniAuth strategy for your provider</a>
を参考にして、
OmniAuth の中で
<code>access_token.get('/api/v1/me.json').parsed</code>
は出来るところまでは準備しておきます。</p>

<p>目的としては、
この
<code>access_token</code>
が認証より後で呼ばれる他のコントローラーの中で取得できれば良いということになります。</p>

<p>余談ですが、
doorkeeper の wiki は
<a href="https://github.com/applicake/doorkeeper/wiki/Supported-Ruby-&amp;-Rails-versions">Supported Ruby &amp; Rails versions</a>
のように情報が古いまま放置されているページもあるようなので、
<a href="https://github.com/applicake/doorkeeper">README</a>
などのソースコード側のドキュメントも参照した方が良さそうです。</p>

<h2>必要なもの</h2>

<p><code>access_token</code>
は
<code>OAuth2::AccessToken</code>
クラスのオブジェクトです。</p>

<p>生成するには</p>

<ul>
<li><code>OAuth2::Client</code> のオブジェクト</li>
<li>認証で取得した <code>token</code></li>
</ul>


<p>が必要になります。</p>

<p><code>OAuth2::Client</code>
の生成には</p>

<ul>
<li><code>client_id</code></li>
<li><code>client_secret</code></li>
<li>URL</li>
</ul>


<p>が必要になります。</p>

<h2>token の保存</h2>

<p>まず
<code>OAuth2</code>
の認証で取得した
<code>token</code>
を保存しておく必要があります。</p>

<p><code>Users::OmniauthCallbacksController#doorkeeper</code>
で
<code>session[:doorkeeper_token] = request.env["omniauth.auth"]["credentials"]["token"]</code>
のようにしてセッションなどの後で使える場所に保存しておきます。</p>

<p>後で調べてわかったのですが、
<a href="https://github.com/applicake/doorkeeper-devise-client/blob/master/app/controllers/users/omniauth_callbacks_controller.rb">doorkeeper-devise-client の Users::OmniauthCallbacksController</a>
では
<code>request.env["omniauth.auth"].credentials.token</code>
を
<code>user.doorkeeper_access_token</code>
でデータベースに保存していました。</p>

<h2>OAuth2::Client の作成</h2>

<p><a href="https://github.com/applicake/doorkeeper-devise-client/blob/master/app/controllers/application_controller.rb">doorkeeper-devise-client の ApplicationController</a>
では必要な情報は定数経由で受け取るようになっていました。</p>

<p>今回は
<code>devise</code>
と
<code>omniauth-oauth2</code>
を使っているので、
その情報を使って生成するようにしました。
要点だけまとめると以下のコードになります。</p>

<p>```ruby</p>

<pre><code>config = Devise.omniauth_configs[:doorkeeper]
strategy = config.strategy_class.new(*config.args)
client = strategy.client
</code></pre>

<p>```</p>

<h2>OAuth2::AccessToken の生成</h2>

<p>ここまで準備ができれば後は
<code>OAuth2::AccessToken.new</code>
するだけです。</p>

<p>まとめると以下のコードになります。</p>

<p>```ruby
  def access_token</p>

<pre><code>return @access_token if defined?(@access_token)
config = Devise.omniauth_configs[:doorkeeper]
strategy = config.strategy_class.new(*config.args)
token = session[:doorkeeper_token]
@access_token = OAuth2::AccessToken.new(strategy.client, token)
</code></pre>

<p>  end
```</p>

<h2>API 呼び出し</h2>

<p><code>access_token</code>
が出来たら後は呼び出しに使うだけです。</p>

<p>単純な情報取得は
<code>get</code>
して
JSON
なら
<code>parsed</code>
を呼び出すだけです。</p>

<p><code>ruby
  access_token.get("/api/v1/me.json").parsed
  access_token.get("/api/v1/posts.json").parsed
</code></p>

<p>今回は連携して書き込みたいというのが目的だったため、
<code>post</code>
も使いました。</p>

<p>モデルの例としては
<code>rails g scaffold post title body:text</code>
で API の提供側では以下の実装とします。</p>

<p>```ruby app/controllers/api/v1/posts_controller.rb
module Api::V1
  class PostsController &lt; ApiController</p>

<pre><code>doorkeeper_for :index
doorkeeper_for :create
respond_to     :json

def index
  respond_with Post.all
end

def create
  post = Post.new(params[:post])
  post.user = current_resource_owner
  post.save!
  respond_with post
end
</code></pre>

<p>```</p>

<p>呼び出し側は以下のようになります。</p>

<p><code>ruby
access_token.post("/api/v1/posts", params: { post: { title: title, body: body } })
</code></p>

<p><code>params</code>
による指定は
<a href="https://github.com/intridea/oauth2/blob/master/lib/oauth2/access_token.rb">OAuth2::AccessToken</a>
のソースをみて推測しました。</p>

<h2>scope 付き API 提供</h2>

<p>書き込みも許可すると
<code>scope</code>
を分けたくなります。</p>

<p>doorkeeper 側では
<a href="https://github.com/applicake/doorkeeper/wiki/Using-Scopes">Using Scopes</a>
を参考にして</p>

<ul>
<li>initializers に scopes 追加</li>
<li>翻訳追加</li>
<li>API に scopes 追加</li>
</ul>


<p>をしておきます。</p>

<p><code>ruby config/initializers/doorkeeper.rb
  default_scopes  :public
  optional_scopes :admin, :write
</code></p>

<p>```ruby app/controllers/api/v1/posts_controller.rb</p>

<pre><code>doorkeeper_for :index,  :show,   scopes: [:public]
doorkeeper_for :create, :update, scopes: [:admin, :write]
</code></pre>

<p>```</p>

<p>参考のため、この API の rspec も載せておきます。
複数の <code>scopes</code> を設定する時に <code>,</code> 区切りだとうまくいかないところがあったので、
スペース区切りにしています。</p>

<p>```ruby spec/controllers/api/v1/posts_controller_spec.rb
require &lsquo;spec_helper&rsquo;</p>

<p>describe Api::V1::PostsController do
  describe &ldquo;GET &lsquo;index&rsquo;&rdquo; do</p>

<pre><code>let!(:application) { Doorkeeper::Application.create!(name: "MyApp", redirect_uri: "http://app.com") }
let!(:user) { FactoryGirl.create(:normal_user) }
let!(:token) { Doorkeeper::AccessToken.create! application_id: application.id, resource_owner_id: user.id, scopes: "public" }
subject { response }

context "valid token" do
  before do
    get 'index', format: :json, access_token: token.token
  end
  it { should be_success }
  its(:status) { should eq(200) }
  its(:body) { should == Post.all.to_a.to_json }
end

context "invalid token" do
  before do
    get 'index', format: :json, access_token: token.token.succ
  end
  it { should_not be_success }
  its(:status) { should eq(401) }
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;GET &lsquo;index&rsquo; without scopes&rdquo; do</p>

<pre><code>let!(:application) { Doorkeeper::Application.create!(name: "MyApp", redirect_uri: "http://app.com") }
let!(:user) { FactoryGirl.create(:normal_user) }
let!(:token) { Doorkeeper::AccessToken.create! application_id: application.id, resource_owner_id: user.id, scopes: "write" }
subject { response }

context "valid token" do
  before do
    get 'index', format: :json, access_token: token.token
  end
  it { should_not be_success }
  its(:status) { should eq(401) }
  its(:body) { should == " " }
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;POST &lsquo;create&rsquo;&rdquo; do</p>

<pre><code>let!(:application) { Doorkeeper::Application.create!(name: "MyApp", redirect_uri: "http://app.com") }
let!(:user) { FactoryGirl.create(:normal_user) }
let!(:token) { Doorkeeper::AccessToken.create! application_id: application.id, resource_owner_id: user.id, scopes: "public write" }
subject { response }

context "valid token" do
  before do
    post 'create', format: :json, access_token: token.token, post: { title: "title", body: "some content" }
  end
  it { should be_success }
  its(:status) { should eq(201) } # 201 Created
  its(:body) { should == Post.last.to_json }
end

context "invalid token" do
  before do
    post 'create', format: :json, access_token: token.token.succ
  end
  it { should_not be_success }
  its(:status) { should eq(401) }
end
</code></pre>

<p>  end
end
```</p>

<h2>scope 付き呼び出し</h2>

<p><code>devise</code>
の設定で
<code>omniauth</code>
の設定に
<code>scope</code>
を追加するだけです。</p>

<p><code>ruby config/initializers/devise.rb
  config.omniauth :doorkeeper, ENV['DOORKEEPER_APP_ID'], ENV['DOORKEEPER_APP_SECRET'], { scope: 'public write' }
</code></p>

<p>rspec のところでもちょっと書きましたが、
区切りが <code>,</code> だとうまくいかないことがあったので、
スペース区切りにしています。</p>

<p>原因は
<a href="https://github.com/applicake/doorkeeper/blob/master/lib/doorkeeper/oauth/scopes.rb">lib/doorkeeper/oauth/scopes.rb</a>
で
<code>string.split</code>
のように無引数の
<code>String#split</code>
を使っているからではないかと推測していますが、確認はしていません。</p>

<h2>まとめ</h2>

<p><code>client_id</code> と <code>client_secret</code> と provider の URL はあらかじめ用意しておいて、
client 側の rails アプリに設定しておきます。</p>

<p><code>token</code>
は OAuth2 で取得したものを
<code>session</code>
やデータベースなどに保存しておいて使います。</p>

<p>必要なら
<code>scopes</code>
も設定できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails で assets を gem に入れる時の配置]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-03-rails-assets-in-gem.html"/>
    <updated>2013-10-03T10:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rails-assets-in-gem</id>
    <content type="html"><![CDATA[<p>昨日の記事で
<a href="https://rubygems.org/gems/jquery_mobile_rails">jquery_mobile_rails</a> 1.3.2
で画像ファイルが
<code>rake assets:precompile</code>
で処理されないという話を書きましたが、
<a href="http://rubygems.org/gems/jquery-ui-rails">jquery-ui-rails</a>
gem
などは Gemfile に足すだけで特に require などをしなくても
画像が処理されていたので違いを調べてみました。</p>

<!--more-->


<p>結論を先に書くと、
<code>jquery-ui-rails</code>
は
<code>app/assets/images/</code>
に画像ファイルを置いていたから処理されていて、
<code>jquery_mobile_rails</code>
は
<code>vendor/assets/images/</code>
に画像ファイルを置いていたから、
というのが原因でした。</p>

<p>自作の gem で
<code>app/assets/images/</code>
と
<code>vendor/assets/images/</code>
に画像を置いて rails 4.0.0 の
<code>rake assets:precompile</code>
で違いがあることを確認しています。</p>

<p><code>jquery_mobile_rails</code> の issues を確認すると
<a href="https://github.com/tscolari/jquery-mobile-rails/issues/16">In production, path to images is wrong</a>
という同じ問題に困っている話があったので、
コメントを付けておきました。</p>

<p>ちなみに
いくつか存在する jQuery Mobile の assets の中から
<code>jquery_mobile_rails</code>
を選んだ理由は新しいバージョンへの対応が一番早そうにみえたからです。</p>
]]></content>
  </entry>
  
</feed>
