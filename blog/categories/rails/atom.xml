<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | ZnZ Blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-10-03T10:57:13+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rails で assets を gem に入れる時の配置]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-03-rails-assets-in-gem.html"/>
    <updated>2013-10-03T10:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rails-assets-in-gem</id>
    <content type="html"><![CDATA[<p>昨日の記事で
<a href="https://rubygems.org/gems/jquery_mobile_rails">jquery_mobile_rails</a> 1.3.2
で画像ファイルが
<code>rake assets:precompile</code>
で処理されないという話を書きましたが、
<a href="http://rubygems.org/gems/jquery-ui-rails">jquery-ui-rails</a>
gem
などは Gemfile に足すだけで特に require などをしなくても
画像が処理されていたので違いを調べてみました。</p>

<!--more-->


<p>結論を先に書くと、
<code>jquery-ui-rails</code>
は
<code>app/assets/images/</code>
に画像ファイルを置いていたから処理されていて、
<code>jquery_mobile_rails</code>
は
<code>vendor/assets/images/</code>
に画像ファイルを置いていたから、
というのが原因でした。</p>

<p>自作の gem で
<code>app/assets/images/</code>
と
<code>vendor/assets/images/</code>
に画像を置いて rails 4.0.0 の
<code>rake assets:precompile</code>
で違いがあることを確認しています。</p>

<p><code>jquery_mobile_rails</code> の issues を確認すると
<a href="https://github.com/tscolari/jquery-mobile-rails/issues/16">In production, path to images is wrong</a>
という同じ問題に困っている話があったので、
コメントを付けておきました。</p>

<p>ちなみに
いくつか存在する jQuery Mobile の assets の中から
<code>jquery_mobile_rails</code>
を選んだ理由は新しいバージョンへの対応が一番早そうにみえたからです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jquery_mobile_rails と production 環境と画像ファイル]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-02-jquery-mobile-rails.html"/>
    <updated>2013-10-02T15:58:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/jquery-mobile-rails</id>
    <content type="html"><![CDATA[<p>rails 4.0.0
と
<a href="https://rubygems.org/gems/jquery_mobile_rails">jquery_mobile_rails</a> 1.3.2
で production 環境だと画像が表示されないという現象が起きていました。</p>

<p>2013-10-03 追記:
<code>jquery_mobile_rails</code> gem のファイル配置の問題もあるのかもしれません。
詳細は次の記事を参照してください。</p>

<!--more-->


<p><code>RAILS_ENV=production rake assets:precompile</code>
で調べてみると <code>public/assets/</code> 以下には
<code>jquery_mobile_rails</code> の画像は入っていませんでした。</p>

<p>いろいろ調べた結果、
<code>config.assets.precompile</code>
に
<code>*.gif</code>
と
<code>*.png</code>
を足せば良いとわかったので、
<code>jquery_mobile_rails</code>
用に
<code>application.css</code>
や
<code>application.js</code>
とは別に作成した
<code>mobile.css</code>
や
<code>mobile.js</code>
と合わせて、以下のように追加して解決しました。
<code>jquery_mobile_rails</code> 1.3.2
には
<code>*.jpg</code>
は入っていないのですが、
念のため追加しておきました。</p>

<p><code>ruby config/environments/production.rb
   config.assets.precompile += %w( mobile.js mobile.css *.gif *.png *.jpg )
</code></p>

<p>この状態で再度
<code>RAILS_ENV=production rake assets:precompile</code>
で調べてみると <code>public/assets/</code>
は以下のようになっていました。</p>

<p><code>console
% ls public/assets/jquery-mobile
ajax-loader-5c6592c3263e7de88985668db733b08f.gif
icons-18-black-dbc49700bc8bd5a9d3e0120cb111ea62.png
icons-18-white-f8f5999f3ea0d9ebea6a4ec193442c1f.png
icons-36-black-76b4944fda10128b365344f06377dad5.png
icons-36-white-178cc38be265514b341e111ed7d38712.png
</code></p>

<p>rails 4 になって、ハッシュなしの
<code>ajax-loader.gif</code>
のようなファイルは作成されなくなっているので、
ちゃんと view の中では
<code>image_path</code>
を使ったり、
スタイルシートの中では
<code>image-url</code>
を使ったりしていないと
production
環境だけ問題がおきることがあるようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Mobile 1.3.2 の日本語化]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-01-jquery-mobile-l10n.html"/>
    <updated>2013-10-01T15:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/jquery-mobile-l10n</id>
    <content type="html"><![CDATA[<p>jQuery Mobile の l10n についてちゃんと調べたのでまとめておきます。
今回は日本語化だけですが、
翻訳対象は網羅できていると思います。</p>

<p>ちゃんと他の言語にも対応させるためには
<code>mobileinit</code>
の中で設定する文字列を別途 i18n 用の仕組みを用意して
翻訳し分けることになると思います。</p>

<!--more-->


<h2>mobileinit</h2>

<p>まず最初に注意すべき点として
<a href="http://api.jquerymobile.com/global-config/">Configuring Defaults | jQuery Mobile API Documentation</a>
にも書いてありますが、
 <code>mobileinit</code>
のイベントハンドラは
<code>jquery.mobile.js</code>
の読み込み前に設定しておく必要があります。
(<code>$</code> や <code>on</code> を使うので <code>jquery.js</code> よりは後にします。)</p>

<p>これを知らないと設定が反映されなくて悩むことになります。</p>

<p>rails 3.1 以降との組み合わせなら、例えば
<code>app/assets/javascripts/mobile.js</code>
に以下のように書いておいて、
<code>app/assets/javascripts/mobile/jqm_ja.js</code>
などにローカライズ用の
<code>mobileinit</code>
を書くということになります。</p>

<p><code>
//= require jquery
//= require jquery_ujs
//= require_tree ./mobile
//= require jquery.mobile
</code></p>

<p>例えば以下のような感じになります。</p>

<p>```coffeescript app/assets/javascripts/mobile/jqm_ja.js.coffee
$(document).on &ldquo;mobileinit&rdquo;, &ndash;>
  #$.mobile.loadingMessageTextVisible = true
  #$.mobile.loadingMessage = &ldquo;読み込み中&hellip;&rdquo;
  $.mobile.loader.prototype.options.text = &ldquo;読み込み中です&hellip;&rdquo;
  $.mobile.loader.prototype.options.textVisible = false
  $.mobile.pageLoadErrorMessage = &ldquo;読み込みに失敗しました。&rdquo;
  $.mobile.page.prototype.options.backBtnText = &ldquo;戻る&rdquo;
  $.mobile.listview.prototype.options.filterPlaceholder = &ldquo;検索&hellip;&rdquo;
  $.mobile.table.prototype.options.columnBtnText = &ldquo;列の増減&hellip;&rdquo;
  $.mobile.dialog.prototype.options.closeBtnText =</p>

<pre><code>$.mobile.selectmenu.prototype.options.closeText = "閉じる"
</code></pre>

<p>  $.mobile.collapsible.prototype.options.expandCueText = &ldquo;クリックで開く&rdquo;
  $.mobile.collapsible.prototype.options.collapseCueText = &ldquo;クリックで閉じる&rdquo;
```</p>

<h2>Error Loading Page</h2>

<p>読み込みエラーの時のメッセージは
<code>$.mobile.pageLoadErrorMessage</code>
で設定できます。</p>

<p>いろいろな理由で表示されることが多いので、
真っ先に変更したくなるメッセージだと思います。</p>

<p>見た目は
<code>$.mobile.pageLoadErrorMessageTheme</code>
で変更できます。</p>

<h2>loading</h2>

<p>1.3.2 でしか確認していませんが、
jQuery Mobile 1.2 からは
<a href="http://api.jquerymobile.com/loader/">Loader Widget</a>
に変わっていて、
<code>$.mobile.loader.prototype.options.text</code>
で設定するようになっています。
ドキュメントによると、
メッセージの変更やテーマの変更以外にも
独自の HTML を表示するなど
いろいろとカスタマイズ出来るようです。</p>

<p><code>$.mobile.loader.prototype.options.textVisible</code>
で有効にした時だけ表示されるようなので、
不要なら無視しても良いかもしれません。</p>

<p>deprecated になっていますが、互換性のため、
<code>$.mobile.loadingMessage</code>
や
<code>$.mobile.loadingMessageTextVisible</code>
もまだ使えるようです。
(
<code>$.mobile.loader.prototype.options.text</code>
や
<code>$.mobile.loader.prototype.options.textVisible</code>
より優先されるようです。)</p>

<h2>pageloadfailed</h2>

<p>ローカライズとはちょっと離れて、
読み込みエラーのときに別処理をする方法を書いておきます。</p>

<p>devise の timeoutable を使っていると
普通の画面遷移をしようとしたときに
401 Unauthorized になることがあります。
そのときに読み込みエラーメッセージだけ出されても困るので、
<a href="http://api.jquerymobile.com/pageloadfailed/">pageloadfailed</a>
で認証画面に飛ぶためのリダイレクト処理を入れてみました。</p>

<p><code>event.preventDefault()</code>
を呼んでいないので、
<code>data.deferred</code>
の
<code>resolve()</code>
か
<code>reject()</code>
も呼ばず、
リダイレクト前のページの処理はデフォルトのままにしています。</p>

<p>```coffeescript app/assets/javascripts/mobile/pageloadfailed.js.coffee
$(document).on &ldquo;pageloadfailed&rdquo;, (event, data) &ndash;>
  if data.xhr.status == 401</p>

<pre><code>window.location.href = data.absUrl
</code></pre>

<p>```</p>

<h2>Back</h2>

<p><code>data-role="page"</code>
の要素に
<code>data-add-back-btn="true"</code>
を追加したときに
<a href="http://api.jquerymobile.com/header/">Header Widget</a>
に出てくる戻るボタンのテキストです。</p>

<p><code>$.mobile.page.prototype.options.backBtnText</code>
で設定できます。</p>

<h2>Filter items&hellip;</h2>

<p>ここからはページ全体ではなく
Widget ごとの翻訳の話になります。</p>

<p>まず
<a href="http://api.jquerymobile.com/listview/">Listview Widget</a>
で
<code>data-filter="true"</code>
の時に出てくる検索入力欄の placeholder のテキストです。</p>

<p>まとめてデフォルトを変更するには
今までのものと同様に
<code>mobileinit</code>
で
<code>$.mobile.listview.prototype.options.filterPlaceholder</code>
に設定します。</p>

<p>個別に変更するには
listview
に
<code>data-filter-placeholder</code>
属性を設定します。</p>

<p>この後のものも同様に全体のデフォルト設定を
<code>mobileinit</code>
で設定したり、
属性で個別に設定したりできます。</p>

<h2>Columns&hellip;</h2>

<p><a href="http://api.jquerymobile.com/table-columntoggle/">Column-Toggle Table Widget</a>
の列を増減させるポップアップを表示させるボタンのテキストです。</p>

<p><code>mobileinit</code>
で
<code>$.mobile.table.prototype.options.columnBtnText</code>
を設定するか、
<code>data-column-btn-text</code>
属性で設定します。</p>

<h2>Close</h2>

<p><a href="http://api.jquerymobile.com/dialog/">Dialog Widget</a>
の閉じるボタンのテキストは
<code>mobileinit</code>
で
<code>$.mobile.dialog.prototype.options.closeBtnText</code>
を設定するか、
<code>data-close-btn-text</code>
属性で設定します。</p>

<p>ダイアログの閉じるボタンはデフォルトではアイコンのみでテキストは表示されないのですが、
スクリーンリーダーで読み上げられるので、
アクセシビリティ的には重要と jQuery Mobile のドキュメントには書いてありました。</p>

<p>ドキュメントには書いてありませんが、
jQuery Mobile 1.3.2 のソースをみると
<a href="http://api.jquerymobile.com/selectmenu/">Selectmenu Widget</a>
の
Multiple selects
の閉じるボタンのテキストとして
<code>$.mobile.selectmenu.prototype.options.closeText</code>
も設定しておくと良さそうです。</p>

<h2>clear text</h2>

<p>検索入力はデフォルトで、
その他のテキスト入力では
<code>data-clear-btn=true</code>
の時に、
何かテキストを入力すると右に出てくるクリアボタンのオプションとして、
<code>data-clear-btn-text</code> があります。</p>

<p>これもデフォルトでは表示されず、スクリーンリーダーなどのアクセシビリティ用です。</p>

<p><code>$.mobile.textinput.prototype.options.clearBtnText</code>
でまとめて設定すれば良いと思います。</p>

<p><code>$.mobile.textinput.prototype.options.clearSearchButtonText</code>
という設定も残っていますが、
<code>deprecating for 1.3...</code>
とコメントに書いてあるので、
1.3 以降なら
<code>clearBtnText</code>
だけ設定しておけば良いと思います。</p>

<h2>click to expand contents, click to collapse contents</h2>

<p>最後に
<a href="http://api.jquerymobile.com/collapsible/">Collapsible Widget</a>
の翻訳です。</p>

<p>これもデフォルトでは表示されず、スクリーンリーダーなどのアクセシビリティ用です。</p>

<p>デフォルトが
<code>" click to expand contents"</code>
の方が
<code>$.mobile.collapsible.prototype.options.expandCueText</code>
や
<code>data-expand-cue-text</code>
で変更できて、
デフォルトが
<code>" click to collapse contents"</code>
の方が
<code>$.mobile.collapsible.prototype.options.collapseCueText</code>
や
<code>data-collapse-cue-text</code>
で変更できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[aasm gem の初期状態設定]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-30-aasm.html"/>
    <updated>2013-09-30T15:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/aasm</id>
    <content type="html"><![CDATA[<p><code>aasm</code> gem の使い方が悪くて、初期状態の値としてデータベースに nil が保存されてしまっていたという話です。</p>

<!--more-->


<p>確認したバージョンは ruby 2.0.0 + rails 3.2.14 + aasm 3.0.22 です。</p>

<p>例として以下のような感じの使い方をしてしまっていて、
<code>status</code> メソッドで <code>nil</code> を返さないようにしていたら
データベースには <code>nil</code> が保存されるようになってしまって、
<code>aasm</code> 以外 (<code>ransack</code> とか) からデータベースにアクセスした時に
問題になりました。</p>

<p>```ruby
  def status</p>

<pre><code># このメソッドがダメ
read_attribute(:status) || :starting
</code></pre>

<p>  end</p>

<p>  include AASM
  aasm column: &ldquo;status&rdquo; do</p>

<pre><code>state :starting, initial: true
state :running
state :stopped
state :finished

event :run do
  transitions from: [:starting, :stopped], to: :running
end

event :stop do
  transitions from: [:starting, :running], to: :stopped
end

event :finish do
  transitions from: [:running], to: :finished
end
</code></pre>

<p>  end
```</p>

<p><code>aasm</code> としては
<a href="https://github.com/aasm/aasm/blob/master/lib/aasm/persistence/active_record_persistence.rb">AASM::Persistence::ActiveRecordPersistence</a>
で
<code>before_validation :aasm_ensure_initial_state, :on =&gt; :create</code>
相当のフックを追加していて、
<code>model.valid?</code>
を実行すれば
<code>model.status</code>
が設定されるようになっていました。</p>

<p>たぶん使い始めた時に
<code>rails console</code>
で
<code>model = Model.new</code>
した直後の
<code>model.status</code>
が
<code>nil</code>
だったので、
どうにかしようと思って
getter メソッドを定義してしまったのだと思います。</p>

<p>このせいで以下のような
<code>ransack</code>
を使った検索フォームで初期状態のチェックを入れても
うまく検索出来ないという問題が起きていました。</p>

<p>```haml
= search_form_for @q, html: { class: &ldquo;form-search&rdquo; } do |f|
  %table</p>

<pre><code>-# ...
%tr
  %td= f.label :status_in
  %td
    - Model.aasm.states.each do |status|
      %label
        = check_box_tag "q[status_in][]", status.to_s, params.try(:[], :q).try(:[], :status_in).try(:include?, status.to_s), id: "q_status_in_#{status.to_s}"
        = status.localized_name
-# ...
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macでirbなどでの文字化けを直した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-20-mojibake-irb-on-mac.html"/>
    <updated>2013-09-20T18:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/mojibake-irb-on-mac</id>
    <content type="html"><![CDATA[<p>基本的には
<a href="http://qiita.com/irohiroki/items/c82657b5cb4bdb2aaac4">rails cで日本語が通らないときの直し方</a>
のやり方そのままで、
one liner としてまとめただけです。</p>

<p>先に結論を書いておくと
<code>install_name_tool -change /usr/lib/libedit.3.dylib $(brew list readline | grep libreadline.dylib) $(ruby -r readline -e 'puts $".grep /readline/')</code>
になりました。</p>

<!--more-->


<h2><code>readline.bundle</code> の探し方</h2>

<p>まず <code>readline.bundle</code> の探し方です。</p>

<p>実際に <code>require 'readline'</code> した時の
<code>$LOADED_FEATURES</code> から
探すのが確実ということで、
<code>ruby -r readline -e 'puts $".grep /readline/'</code>
としました。
試したところ、
<code>Array#grep</code>
で見つかるのが1個だけだったので、
そのまま <code>puts</code> しています。
複数見つかるようならもう少し調整が必要だと思います。</p>

<p><code>
% ruby -r readline -e 'puts $".grep /readline/'
/Users/kazu/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/x86_64-darwin12.4.1/readline.bundle
% otool -L $(ruby -r readline -e 'puts $".grep /readline/')
</code></p>

<h2>readline のインストール</h2>

<p>homebrew を使っているので、
<code>brew install readline</code>
でインストールしました。</p>

<p>インストールされた
<code>libreadline</code>
の場所は
<code>brew list readline | grep libreadline.dylib</code>
で調べました。</p>

<p><code>libedit</code>
が
<code>/usr/lib/libedit.3.dylib</code>
という名前でリンクされているので、
<code>libreadline.6.dylib</code>
という名前を使った方が良いのかもしれませんが、
homebrew でインストールされているパスに
バージョンが含まれていて、
ファイル名にバージョンを含めても意味がないと思って、
バージョンなしにしました。</p>

<p><code>
% brew list readline | grep libreadline.dylib
/usr/local/Cellar/readline/6.2.4/lib/libreadline.dylib
</code></p>

<h2><code>install_name_tool</code></h2>

<p>Qiita の記事にあったように
<code>install_name_tool -change /usr/lib/libedit.3.dylib $(brew list readline | grep libreadline.dylib) $(ruby -r readline -e 'puts $".grep /readline/')</code>
でリンクを変更しました。
念のため、実行前に
<code>ruby -rpp -e 'pp ARGV' --</code>
で実行内容を確認してから実行しました。</p>

<p><code>
% ruby -rpp -e 'pp ARGV' -- install_name_tool -change /usr/lib/libedit.3.dylib $(brew list readline | grep libreadline.dylib) $(ruby -r readline -e 'puts $".grep /readline/')
["install_name_tool",
 "-change",
 "/usr/lib/libedit.3.dylib",
 "/usr/local/Cellar/readline/6.2.4/lib/libreadline.dylib",
 "/Users/kazu/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/x86_64-darwin12.4.1/readline.bundle"]
% install_name_tool -change /usr/lib/libedit.3.dylib $(brew list readline | grep libreadline.dylib) $(ruby -r readline -e 'puts $".grep /readline/')
</code></p>
]]></content>
  </entry>
  
</feed>
