<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ransack | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ransack/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2016-04-17T21:18:19+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[autopagerizeのような動作をkaminariとransackを使った環境で実装した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-02-25-autopagerize-kaminari-ransack.html"/>
    <updated>2014-02-25T18:58:39+09:00</updated>
    <id>http://blog.n-z.jp/blog/autopagerize-kaminari-ransack</id>
    <content type="html"><![CDATA[<p>autopagerize のような動作をするときに id 重複問題があるので、
<a href="http://qa.atmarkit.co.jp/q/3513">QA@IT で質問</a>
してみたところ、
今のページに表示されている最後の id で対処するしかなさそうだとわかったので、
そういう方針で実装してみました。</p>

<!--more-->


<h2>スクリプト部分</h2>

<p>コア部分は以前に実装したものをそのまま使いました。
i18n 対応などが出来ていませんが、冒頭に書いてある id や class が関連要素になります。</p>

<pre><code class="coffeescript app/assets/javascripts/autonext.js.coffee">jQuery -&gt;
  timerId = null
  loadingId = '#autopager_loading'
  nextId = '#next_for_pager'
  pageElement = '.page_element'
  lastContent = '.page_content:last'

  loadNext = -&gt;
    nextLink = $(nextId)[0]
    if nextLink
      $(loadingId).show()
      $(nextId).remove()
      request = $.get nextLink.href, (data) -&gt;
        $(loadingId).before($(data).find(pageElement)).hide()
        # 必要なら turbolinks の `page:change` のような DOM 変更通知をする
      request.error (xhr, status, error) -&gt;
        if error == "Unauthorized"
          alert("認証の期限切れです。再読み込みしてください。")
        else
          alert("何かエラーです。少し待ってから、再読み込みしてください。")
        $(loadingId).html("&lt;a href='javascript:location.reload()' class='btn btn-block btn-primary'&gt;再読み込み&lt;/a&gt;")
  autoNext = -&gt;
    content = $(lastContent)
    if content[0] &amp;&amp; content.offset().top &lt; $(document).scrollTop() + $(window).height()
      if $(loadingId).css('display') is 'none'
        loadNext()
    timerId = null
    $(window).on 'scroll.autoNext', autoNextDefer

  autoNextDefer = -&gt;
    $(window).off 'scroll.autoNext'
    timerId = setTimeout autoNext, 1000

  $(window).on 'scroll.autoNext', autoNextDefer
</code></pre>

<h2>views</h2>

<p>view は次のような感じにしました。
<code>page_entries_info</code> を <code>.page_element</code> の中にするか、外にするかは悩ましいところです。</p>

<pre><code class="haml app/views/posts/index.html.haml">    .page_element
      %small.page-entries-info= page_entries_info @posts
      = render @posts
      = link_to_auto_next_page_with_ransack @q, @posts, t('views.pagination.next'), class: "btn btn-large btn-block btn-success", id: "next_for_pager", params: params
    #autopager_loading(style="display:none")
      = fa_icon "spinner spin"
      = t("loading", default: "Loading...")
</code></pre>

<p><code>kaminari</code> の <code>link_to_next_page</code> を使っている時に問題になったのですが、
<code>params</code> をちゃんと渡さないと <code>paginate @posts</code> で生成されるリンクと違って
パラメーター不足になってしまうようです。
そのため自作の <code>link_to_auto_next_page_with_ransack</code> でも渡すようにしています。</p>

<h2>helper</h2>

<p>ここがリンク生成の肝になります。
ソートのキーのうち、今表示されている最後のものを使って、
<code>updated_at desc</code> でソートされているなら、
<code>updated_at_lt</code> で指定する、ということをしています。
仕組みの都合上、同じ値が複数入ると表示されずに抜け落ちてしまうので、
<code>id</code> やタイムスタンプなどのようなカラムに限定する必要がありそうです。</p>

<p>時刻は標準の <code>to_s</code> だと開発環境の一気に入力したデータで問題が起きたので、
<code>strftime</code> を使って <code>%N</code> (ナノ秒) まで入れるようにしました。</p>

<pre><code class="ruby app/helpers/link_to_helper.rb">  def link_to_auto_next_page_with_ransack(search, scope, name, options = {}, &amp;block)
    return if scope.last_page?
    params = options.delete(:params) || {}
    sorts = search.sorts
    if sorts.empty?
      raise "You must set sorts to ransack (e.g. `@q.sorts = 'updated_at desc' if @q.sorts.empty?`)"
    end
    order = sorts.first
    column = order.name
    dir = order.dir == "desc" ? "lt" : "gt"
    value = scope.last[column]
    if value.respond_to?(:strftime) &amp;&amp; value.respond_to?(:hour)
      # expect Time, DateTime, ActiveSupport::TimeWithZone
      # and not Date
      value = value.strftime("%Y-%m-%d %H:%M:%S.%N %Z")
    end
    q = params[:q] || {}
    q = q.merge("#{column}_#{dir}" =&gt; value)
    params = params.merge(search.context.search_key =&gt; q)
    link_to name, params, options.reverse_merge(:rel =&gt; 'next'), &amp;block
  end
</code></pre>

<h2>controller</h2>

<p>コントローラーは <code>kaminari</code> や <code>ransack</code> を普通に使っているだけです。
<code>@posts = Post</code> の行は <code>cancan</code> の <code>load_and_authorize_resource</code> を使っている場合には不要なので、
別の行にしています。</p>

<pre><code class="ruby app/controllers/posts_controller.rb">  def index
    @posts = Post
    @q = @posts.search(params[:q])
    @q.sorts = 'updated_at desc' if @q.sorts.empty?
    @posts = @q.result(distinct: true)
    @posts = @posts.page(params[:page]).per(5)
  end
</code></pre>

<h2>スタイルシート</h2>

<p>読み込み中の部分のスタイルは以下のようにして、画面の最下部の横幅いっぱいに出るようにしています。
エラーの時はこの中身が再読み込みボタンに変わります。
開発環境だと <code>rails server</code> を停止した状態で自動読み込みさせれば、すぐに確認できます。</p>

<pre><code class="css app/assets/stylesheets/application.css.scss">#autopager_loading {
  background-color: #000;
  bottom: 0px;
  color: #fff;
  font-size: 12px;
  height: 25px;
  left: 0px;
  opacity: 0.8;
  position: fixed;
  text-align: center;
  width: 100%;
  z-index: 1000;
}
</code></pre>

<h2>まとめ</h2>

<p>autopagerize のような自動読み込みを <code>kaminari</code> と <code>ransack</code> を使った rails アプリに組み込んだ実装例を紹介しました。
部品だけで全体を示せていないので、もしかしたら書き忘れている部分もあるかもしれませんが、重要な部分は載せていると思いますので、参考にしてみてください。</p>
]]></content>
  </entry>
  
</feed>
