<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rbenv | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/rbenv/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-11-02T23:08:33+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rbenvのプラグインを簡単に追加出来るようにするrbenv-plugを作った]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-29-rbenv-plug.html"/>
    <updated>2013-10-29T23:55:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rbenv-plug</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sstephenson/rbenv">rbenv</a> のプラグインをインストールするのに
<code>git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build</code>
のように <code>ruby-build</code> を二回指定しないといけなかったり、
git の URL をコピペしないといけなかったりして面倒なので、
簡単にインストールできるようにするプラグイン
<a href="https://github.com/znz/rbenv-plug">rbenv-plug</a>
を作りました。</p>

<p><a href="https://github.com/sstephenson/ruby-build">ruby-build</a>
のように <code>share</code> の下に一覧を持つようにしたので、
インストールできるプラグインは簡単に増やせます。</p>

<!--more-->


<h2>使い方</h2>

<p><a href="https://github.com/znz/rbenv-plug">README</a> に書いた通りです。</p>

<p><a href="https://github.com/sstephenson/rbenv/wiki/Plugins">plugins</a>
に載っているプラグインなら以下のように簡単にインストールできます。</p>

<pre><code>rbenv plug &lt;plugin-name&gt;
</code></pre>

<p>例えば
<a href="https://github.com/sstephenson/ruby-build">ruby-build</a>
をインストールするなら以下のようになります。</p>

<pre><code>rbenv plug ruby-build
</code></pre>

<p>例えば
<a href="https://github.com/rkh/rbenv-update">rbenv-update</a>
をインストールするなら、</p>

<pre><code>rbenv plug rbenv-update
</code></pre>

<p>のようにするか、
<code>rbenv-</code>
を省略して以下のようにします。</p>

<pre><code>rbenv plug update
</code></pre>

<p>git の URL を指定して任意のプラグインをインストールすることもできます。</p>

<pre><code>rbenv plug https://github.com/sstephenson/ruby-build.git
</code></pre>

<p>アンインストールも簡単にできます。
例えば
<code>rbenv-update</code>
をアンインストールするなら、</p>

<pre><code>rbenv unplug rbenv-update
</code></pre>

<p>のようにするか、
<code>rbenv-</code>
を省略して以下のようにします。</p>

<pre><code>rbenv unplug update
</code></pre>

<h2>インストール方法</h2>

<p>以下のようにプラグインの一般的なインストール方法そのままで、
<code>$RBENV_ROOT/plugins</code> に <code>git clone</code> するだけです。</p>

<pre><code>mkdir -p ~/.rbenv/plugins
git clone https://github.com/znz/rbenv-plug.git ~/.rbenv/plugins/rbenv-plug
</code></pre>

<h2>仕組み</h2>

<p>URL が指定された時は上の一般的なインストール方法と同様のことを実行するだけです。</p>

<p>プラグイン名を指定された時は
<code>share/rbenv-plug</code>
の中のスクリプトを実行します。</p>

<p>名前が <code>rbenv-</code> で始まるプラグインがほとんどなので、
<code>rbenv plug</code> や <code>rbenv unplug</code> の引数では
<code>rbenv-</code> を省略できるようにしました。</p>

<p><code>share/rbenv-plug</code> のスクリプトで
<a href="https://github.com/tpope/rbenv-aliases">rbenv-aliases</a>
なら <code>rbenv alias --auto</code> を追加で実行したり、
<a href="https://github.com/rkh/rbenv-use">rbenv-use</a>
なら依存している <code>rbenv-whatis</code> もインストールしたりしています。</p>

<h2>余談</h2>

<p><code>share/rbenv-plug</code> のファイルを追加している時に
<a href="https://github.com/taqtiqa/rbenv-plugin">rbenv-plugin</a>
というのがあって、
今の <code>rbenv-plug</code> (と <code>rbenv-unplug</code>) という名前に変えました。
最初は <code>rbenv-plugin-install</code> (と <code>rbenv-plugin-uninstall</code>)
という名前で作りかけていたので、
<code>rbenv-plugin</code> のサブコマンドと思いっきり名前がかぶっていました。
<code>rbenv-plugins-install</code> という複数形の名前も使われてしまっていたので、
思い切って短い名前に変更しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[独自ビルドした ruby を rbenv で使う]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-14-use-custom-ruby-with-rbenv.html"/>
    <updated>2013-09-14T23:22:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/use-custom-ruby-with-rbenv</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sstephenson/rbenv">rbenv</a>
を使っているなら、
<a href="https://github.com/sstephenson/ruby-build">ruby-build</a>
でインストールしたもの以外にも
自分でビルドした ruby も rbenv で切り替えたくなることがありますが、
これは簡単に出来ます。</p>

<!--more-->


<p>元々 <code>rbenv</code> に <code>ruby-build</code> が必須というわけではないので、
<code>configure</code> の <code>--prefix</code> に
<code>~/.rbenv/versions/some-name</code>
を指定してインストールすれば良いだけです。</p>

<p>名前にはシェルで特別な意味を持つ文字を避ければ
何でも良さそうですが、
<code>rbenv install</code> で上書きされてしまう危険があるのと
単純に紛らわしいので、
<code>ruby-build</code> でインストール出来る名前は避けた方が無難だと思います。</p>

<p>例えば以下のように <code>configure</code> してインストールすれば <code>rbenv shell trunk</code> などで <code>ruby-build</code> でインストールしたものと同様に使えます。</p>

<ul>
<li><code>./configure --prefix=$HOME/.rbenv/versions/trunk --enable-shared --enable-debug-env CPPFLAGS=-DRUBY_DEBUG_ENV</code></li>
<li><code>./configure --prefix=$HOME/.rbenv/versions/git --enable-shared --enable-debug-env CPPFLAGS='-DRUBY_DEBUG_ENV -DARRAY_DEBUG'</code></li>
<li><code>./configure --prefix=$HOME/.rbenv/versions/git-debug --enable-shared --enable-debug-env CPPFLAGS='-DRUBY_DEBUG_ENV -DARRAY_DEBUG -DBIGDECIMAL_DEBUG'</code></li>
</ul>


<p><code>$HOME</code> を使っている理由は
<code>--prefix=~/path/to/somewhere</code>
だと <code>configure</code> の実行前には展開されず、
<code>autoconf</code> の <code>configure</code> ではなかったと思いますが、
<code>./~/path/to/somewhere</code>
にインストールされてしまうという問題が起きたことがあったので、
それ以来
<code>$HOME</code>
を使って目の前でフルパスに展開されるようにしています。</p>

<p><code>-DRUBY_DEBUG_ENV</code> などを渡すのに <code>CPPFLAGS</code> を使うのは
<a href="https://github.com/akr/chkbuild">chkbuild</a>
のやり方を
<a href="http://rubyci.org/">Ruby CI</a>
のログをみて参考にしました。</p>

<p>安定したビルドを使いたいのなら、
Ruby CI
で使われているのと同じような引数を使うのが良いと思います。</p>

<p>普段私が使っているのは
<code>CPPFLAGS='-DRUBY_DEBUG_ENV -DARRAY_DEBUG</code>
です。</p>

<p><code>-DBIGDECIMAL_DEBUG</code>
まで付けると、デバッグ出力が多すぎたり、
<code>make test-all</code>
が途中で止まってしまったりして
問題が起きそうなので、
おすすめしません。</p>
]]></content>
  </entry>
  
</feed>
