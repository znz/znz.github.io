<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-11-26T23:58:18+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[旧暦を計算するgemを使った]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-26-qreki.html"/>
    <updated>2013-11-26T23:46:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/qreki</id>
    <content type="html"><![CDATA[<p><a href="https://forkwell.com/pub/github.com/ozamasa/qreki">https://forkwell.com/pub/github.com/ozamasa/qreki</a>
で知った
<a href="https://github.com/ozamasa/qreki">旧暦を計算するgem</a>
を使って旧暦表示を試してみました。</p>

<!--more-->


<p><a href="https://github.com/ozamasa/qreki">qreki</a>
の <code>README.md</code> には書いていませんが、
普通は
<code>require "qreki"</code>
も必要です。</p>

<p>例えば以下のように使えます。</p>

<p><code>ruby
require 'qreki'
q = Qreki.calc_from_date(Date.today)
puts "旧暦#{q.year}年#{q.uruu ? '閏' : nil}#{q.month}月#{q.day}日(#{q.rokuyou})#{q.sekki}"
</code></p>

<p>出力例としては <code>旧暦2013年10月24日(先負)</code> のようになります。
<code>Date.today</code> の代わりに <code>Time.now</code> のように <code>Time</code> オブジェクトも使えました。</p>

<p>実際には IRC の bot に使いました。
旧暦計算は自分で実装するのは面倒なので、
ライブラリがあるのは非常にありがたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[anyenvやrbenvのpluginsの更新などをしやすくするプラグインを作った]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-21-anyenv-rbenv-plugins.html"/>
    <updated>2013-11-21T18:25:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/anyenv-rbenv-plugins</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sstephenson/rbenv">rbenv</a>
には
<a href="https://github.com/rkh/rbenv-update">rbenv-update</a>
というプラグインがあって、アップデートだけは簡単にできるのに、
他の <code>git</code> の操作をまとめて実行するのが面倒なので、
まとめて実行できる
<a href="https://github.com/znz/rbenv-git">rbenv-git</a>
というプラグインを作りました。</p>

<p>それから
<a href="https://github.com/riywo/anyenv">anyenv</a>
の方でもすべての <code>**env</code> も含めてアップデートできると便利だと思い、
<a href="https://github.com/znz/anyenv-update">anyenv-update</a>
と
<a href="https://github.com/znz/anyenv-git">anyenv-git</a>
を作成しました。</p>

<!--more-->


<h2>インストール</h2>

<p>それぞれ <code>plugins</code> のディレクトリの中に <code>git clone</code> でとってくるだけです。</p>

<ul>
<li><code>git clone https://github.com/znz/rbenv-git.git $(rbenv root)/plugins/rbenv-git</code></li>
<li><code>git clone https://github.com/znz/anyenv-update.git $(anyenv root)/plugins/anyenv-update</code></li>
<li><code>git clone https://github.com/znz/anyenv-git.git $(anyenv root)/plugins/anyenv-git</code></li>
</ul>


<p><code>README</code> の方には <code>mkdir -p $(anyenv root)/plugins</code> も書いていますが、
git version 1.8.4.3 だと不要で、自動で親ディレクトリも作ってくれるようです。
git のどのバージョンからなのかわからないので、
<code>README</code> には <code>mkdir -p</code> を残しています。</p>

<h2>使い方</h2>

<h3>rbenv git</h3>

<p><code>rbenv</code> と <code>rbenv</code> のプラグインの <code>git</code> 操作をまとめて実行できます。</p>

<p><code>rbenv git pull</code> で <code>rbenv update</code> の代用が出来ます。
<code>rbenv update</code> だと <code>rbenv</code> 自体を homebrew で入れている時にも
<code>RBENV_ROOT</code> で <code>git</code> コマンドを実行してしまいますが、
<code>rbenv git</code> なら大丈夫です。</p>

<p><code>rbenv git gc</code> で cleanup も出来ます。</p>

<p><code>rbenv git remote -v</code> でどこからとってきたのか確認したり、
<code>rbenv git status</code> でローカルで何か変更しているかどうか確認したりも出来ます。</p>

<h3>anyenv update</h3>

<p><code>anyenv update</code> で</p>

<ul>
<li><code>anyenv</code></li>
<li><code>anyenv</code> のプラグイン</li>
<li><code>**env</code></li>
<li><code>**env</code> のプラグイン</li>
</ul>


<p>がアップデートできます。</p>

<p>git 管理ではないものは skip します。</p>

<h3>anyenv git</h3>

<p><code>rbenv git</code> と同様の操作が
<code>anyenv update</code> と同様の対象に
まとめて実行できます。</p>

<ul>
<li><code>anyenv git pull</code></li>
<li><code>anyenv git gc</code></li>
<li><code>anyenv git remote -v</code></li>
<li><code>anyenv git status</code></li>
</ul>


<p>など、
<code>git</code> の各種操作ができます。</p>

<h2>裏話</h2>

<p>最初は <code>rbenv update</code> のコードを fork しようとしていたのですが、
ライセンスが明記されていなかったので止めて、
他の MIT License と明示されているプラグインを主に参考にして作りました。
他にも <code>set -eo pipefail</code> というのは
<a href="https://github.com/progrium/dokku">dokku</a>
を参考にしました。</p>

<p>ライセンスが不明だと参考にするのにも困るので、
github のレポジトリを作成する時の LICENSE ファイルそのままだけでも良いので、
どういうライセンスにしたいのか明記されているとありがたいと思いました。</p>

<h2>追記</h2>

<p><code>rbenv update</code> だと <code>git pull</code> ではなく、毎回</p>

<p>```</p>

<pre><code>git checkout master
git fetch origin
git pull origin master
</code></pre>

<p>```</p>

<p>を実行していて遅いというのも <code>rbenv git</code> などを作った理由のひとつというのを
書き忘れていたので、追記しておきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 5 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-20-rubymotion-mokumoku-osaka.html"/>
    <updated>2013-11-20T21:54:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 4 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://connpass.com/event/3871/">第 5 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。</p>

<p>今回も東京と同時開催でしたが、
接続などはせずに終わってしまいました。</p>

<p>次回の
<a href="http://connpass.com/event/4211/">第 6 回 RubyMotion もくもく会 in Osaka</a>
は 12/26(木) になりました。</p>

<!--more-->


<h2>話に出たもの</h2>

<p>話に出てきたサイトなどのメモです。</p>

<ul>
<li><a href="http://shin1x1.github.io/VagrantX/">http://shin1x1.github.io/VagrantX/</a>
のサイトのデザインを
<a href="https://wrapbootstrap.com/">https://wrapbootstrap.com/</a>
から選ぼうとしたが、結局 github のテンプレートのまま使うことにしたという話</li>
<li>昔は nib というバイナリだったけど今は xib という XML ファイルになっているという話</li>
<li><a href="http://www.rainymood.com/">Rainy Mood</a>
と
<a href="http://tadaya.net/blog/2012/12/01">多田屋のBGM</a>
の組み合わせが良いという話</li>
<li>アドベントカレンダーの話

<ul>
<li><a href="http://www.adventar.org/">Adventar</a></li>
<li><a href="http://qiita.com/advent-calendar/2013/rubymotion">RubyMotion Advent Calendar 2013</a></li>
</ul>
</li>
<li><a href="http://www.img2icnsapp.com/">Img2icns</a> の無料の方で OSX アプリのアイコンへの変換が出来そうという話</li>
<li>クラウドソーシングでアイコンを募集するのはどうかという話

<ul>
<li><a href="http://www.designclue.co/">designclue（デザインクルー） &ndash; デザインクラウドソーシング</a></li>
</ul>
</li>
</ul>


<h2>やっていたこと</h2>

<h3>www.ruby-lang.org</h3>

<p><a href="https://www.ruby-lang.org/ja/news/2013/09/28/design-contest/">www.ruby-lang.org のサイトデザイン募集</a>
の投票を webmaster でやっていて、締め切りが今日だったということで、
投票しようかと思っていたら、
締め切りが 9:00 20 Nov(JST) だったのに気付いて諦めました。
まだ集計前だったようなので、間に合いそうでしたが、
無理はしないということにしました。</p>

<p>ちなみに
<a href="https://github.com/ruby/www.ruby-lang.org/issues?labels=contest">応募は7件</a>
でした。</p>

<h3>notification</h3>

<p>最初は
<a href="https://github.com/Watson1978/notification">https://github.com/Watson1978/notification</a>
という OSX のサンプルをいじってみていました。</p>

<p><code>open ./build/MacOSX-10.8-Development/notification.app</code>
で開くと右上の通知はそもそも出てきているのかどうかわからない状態で終了してしまって、
通知センターを開くとちゃんと送れていることが確認できたり、
引数は <code>-psn_なんとか</code> という
Emacs.app のカレントディレクトリ問題を調べていた時に見かけたものが渡ってきていたりしたのがわかりました。</p>

<h3>Calc</h3>

<p><a href="https://github.com/HipByte/RubyMotionSamples">RubyMotionSamples</a>
の osx に Calc というのが追加されていたので、
それを試していました。</p>

<h2>デフォルトブラウザ設定</h2>

<p>デフォルトブラウザはどこで設定しているんだろうと思って、
<code>defaults read</code>
の出力を調べたりしていたら、
<code>LSSetDefaultHandlerForURLScheme</code>
と
<code>LSSetDefaultRoleHandlerForContentType</code>
で設定できるとわかったので、
RubyMotion の中から呼び出そうとしたのですが、
<code>NoMethodError</code>
になるだけで、
結局呼び出し方がわかりませんでした。</p>

<p>試したこととしては <code>Calc</code> のボタンと同じように
ボタンが押された時に呼ばれるメソッドの中で、</p>

<p>```ruby</p>

<pre><code>bundle_id = NSBundle.mainBundle.bundleIdentifier
LSSetDefaultHandlerForURLScheme("http", bundle_id) #~&gt; NoMethodError
</code></pre>

<p>```</p>

<p>のように呼び出そうとしたところ、
<code>LSSetDefaultHandlerForURLScheme</code>
で
<code>NoMethodError</code>
になりました。</p>

<p>それから <code>Rakefile</code> の
<code>Motion::Project::App.setup do |app|</code>
のブロックで
<code>app.frameworks &lt;&lt; 'ApplicationServices'</code>
のように
<code>ApplicationServices</code>
フレームワークを追加というのも試してみたのですが、
変化はありませんでした。</p>

<p>そんな感じで手詰まっていたら時間が来て終了ということになりました。</p>

<p>確認したバージョンは以下の通りです。</p>

<ul>
<li>Mac OS X 10.8.5</li>
<li>Xcode 5.0.2</li>
<li>RubyMotion 2.14</li>
</ul>


<h3>解決</h3>

<p><code>CoreServices</code> が必要と教えてもらったので、
<code>app.frameworks &lt;&lt; 'CoreServices'</code>
も足してみたのですが、
<code>NoMethodError</code>
のままで動かず、
結局
RubyMotion を 2.15 に上げると直っていました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rbenvのプラグインを簡単に追加出来るようにするrbenv-plugを作った]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-29-rbenv-plug.html"/>
    <updated>2013-10-29T23:55:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rbenv-plug</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sstephenson/rbenv">rbenv</a> のプラグインをインストールするのに
<code>git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build</code>
のように <code>ruby-build</code> を二回指定しないといけなかったり、
git の URL をコピペしないといけなかったりして面倒なので、
簡単にインストールできるようにするプラグイン
<a href="https://github.com/znz/rbenv-plug">rbenv-plug</a>
を作りました。</p>

<p><a href="https://github.com/sstephenson/ruby-build">ruby-build</a>
のように <code>share</code> の下に一覧を持つようにしたので、
インストールできるプラグインは簡単に増やせます。</p>

<!--more-->


<h2>使い方</h2>

<p><a href="https://github.com/znz/rbenv-plug">README</a> に書いた通りです。</p>

<p><a href="https://github.com/sstephenson/rbenv/wiki/Plugins">plugins</a>
に載っているプラグインなら以下のように簡単にインストールできます。</p>

<pre><code>rbenv plug &lt;plugin-name&gt;
</code></pre>

<p>例えば
<a href="https://github.com/sstephenson/ruby-build">ruby-build</a>
をインストールするなら以下のようになります。</p>

<pre><code>rbenv plug ruby-build
</code></pre>

<p>例えば
<a href="https://github.com/rkh/rbenv-update">rbenv-update</a>
をインストールするなら、</p>

<pre><code>rbenv plug rbenv-update
</code></pre>

<p>のようにするか、
<code>rbenv-</code>
を省略して以下のようにします。</p>

<pre><code>rbenv plug update
</code></pre>

<p>git の URL を指定して任意のプラグインをインストールすることもできます。</p>

<pre><code>rbenv plug https://github.com/sstephenson/ruby-build.git
</code></pre>

<p>アンインストールも簡単にできます。
例えば
<code>rbenv-update</code>
をアンインストールするなら、</p>

<pre><code>rbenv unplug rbenv-update
</code></pre>

<p>のようにするか、
<code>rbenv-</code>
を省略して以下のようにします。</p>

<pre><code>rbenv unplug update
</code></pre>

<h2>インストール方法</h2>

<p>以下のようにプラグインの一般的なインストール方法そのままで、
<code>$RBENV_ROOT/plugins</code> に <code>git clone</code> するだけです。</p>

<pre><code>mkdir -p ~/.rbenv/plugins
git clone https://github.com/znz/rbenv-plug.git ~/.rbenv/plugins/rbenv-plug
</code></pre>

<h2>仕組み</h2>

<p>URL が指定された時は上の一般的なインストール方法と同様のことを実行するだけです。</p>

<p>プラグイン名を指定された時は
<code>share/rbenv-plug</code>
の中のスクリプトを実行します。</p>

<p>名前が <code>rbenv-</code> で始まるプラグインがほとんどなので、
<code>rbenv plug</code> や <code>rbenv unplug</code> の引数では
<code>rbenv-</code> を省略できるようにしました。</p>

<p><code>share/rbenv-plug</code> のスクリプトで
<a href="https://github.com/tpope/rbenv-aliases">rbenv-aliases</a>
なら <code>rbenv alias --auto</code> を追加で実行したり、
<a href="https://github.com/rkh/rbenv-use">rbenv-use</a>
なら依存している <code>rbenv-whatis</code> もインストールしたりしています。</p>

<h2>余談</h2>

<p><code>share/rbenv-plug</code> のファイルを追加している時に
<a href="https://github.com/taqtiqa/rbenv-plugin">rbenv-plugin</a>
というのがあって、
今の <code>rbenv-plug</code> (と <code>rbenv-unplug</code>) という名前に変えました。
最初は <code>rbenv-plugin-install</code> (と <code>rbenv-plugin-uninstall</code>)
という名前で作りかけていたので、
<code>rbenv-plugin</code> のサブコマンドと思いっきり名前がかぶっていました。
<code>rbenv-plugins-install</code> という複数形の名前も使われてしまっていたので、
思い切って短い名前に変更しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 4 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-23-rubymotion-mokumoku-osaka.html"/>
    <updated>2013-10-23T19:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 3 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://connpass.com/event/3557/">第 4 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。</p>

<p>今回も前回と同じく東京と同時開催でした。
前回はハングアウトで接続していたのですが、
今回は接続せずに終わってしまいました。</p>

<!--more-->


<h2>話に出たもの</h2>

<p>話に出てきたアプリやサイトのメモです。</p>

<ul>
<li><a href="http://www.airsquirrels.com/reflectorc/">Reflector &ndash; AirPlay mirror your iPhone or iPad to any Mac or PC</a>

<ul>
<li>Mac OS X が Apple TV の代わりに iOS の画面を受け取れるようになる (有償 $12.99)。</li>
<li>最後の成果発表の時に、複数の画面を同時に受け取れるという発見がありました。</li>
<li>それを使えば複数の画面をまとめて同時に Apple TV に出せました。</li>
<li>同じ会社が作っている
<a href="http://www.airsquirrels.com/airparrot/">AirParrot &ndash; AirPlay your Mac or PC&rsquo;s screen to Apple TV</a>
を使えば Windows PC からでも Apple TV に画面を飛ばせるという話もありました。</li>
</ul>
</li>
<li><a href="https://popapp.in/">POP &ndash; Prototyping on Paper | iPhone App Prototyping Made Easy</a>
ペーパープロトタイピングで UI の設計 (無償)</li>
<li><a href="https://www.flinto.com/">Flinto – iPhone and iPad Prototyping</a>
こちらもペーパープロトタイピングでブラウザ上でも見えます (有償)。
画像のアップロードが面倒なので POP の方を使っているという話でした。</li>
<li><a href="http://asciiwwdc.com/">ASCIIwwdc</a>
WWDC をテキストにおこしたサイト</li>
<li><a href="http://estimote.com/">Estimote Beacons — real world context for your apps</a>
iBeacon 関連のハードウェア</li>
<li><a href="http://www.rainymood.com/">Rainy Mood</a>
落ち着く BGM</li>
<li><a href="http://connpass.com/event/3871/">第 5 回 RubyMotion もくもく会 in Osaka &ndash; connpass</a>
次回は 2013/11/20(水) 19:30 〜 21:30
(ハッシュタグが設定されていない?)</li>
<li><a href="http://connpass.com/event/3870/">第15回 RubyMotion もくもく会 in Tokyo &ndash; connpass</a>
東京の次回
(ハッシュタグが設定されているから参加しますツイートにハッシュタグがついている?)</li>
<li><a href="http://www.bohemiancoding.com/sketch/">Sketch | The designer’s toolbox</a>
iOS アプリでアイコンとか作るのに使っているという話</li>
<li><a href="http://peatix.com/">Peatix | 簡単イベント管理、チケット販売サイト（ピーティックス） | Peatix</a>
手数料が安いという話</li>
</ul>


<h2>やっていたこと</h2>

<p>前回の続きで
<a href="https://github.com/HipByte/RubyMotionSamples">https://github.com/HipByte/RubyMotionSamples</a>
のサンプルを試していたのですが、
<a href="https://github.com/HipByte/RubyMotionSamples/tree/master/osx/Tweets">https://github.com/HipByte/RubyMotionSamples/tree/master/osx/Tweets</a>
が Twitter API 1.1 への変更の影響で動かなくなっていました。</p>

<p>具体的には</p>

<p>```ruby</p>

<pre><code>    begin
      json = JSONParser.parse_from_url(url)
    rescue RuntimeError =&gt; e
      presentError e.message
    end
</code></pre>

<p>```</p>

<p>という部分で</p>

<p><code>``
Terminating app due to uncaught exception 'TypeError', reason: 'data_parser.rb:6:in</code>parse:&lsquo;: exception class/object expected (TypeError)</p>

<pre><code>from json_parser.rb:3:in `parse_from_url:'
from app_delegate.rb:71:in `block in search:'
</code></pre>

<p>```</p>

<p>というエラーになっていました。</p>

<p>ブラウザで
<code>http://search.twitter.com/search.json?q=xcode%20crash</code>
にアクセスしてみると
<code>{"errors": [{"message": "The Twitter REST API v1 is no longer active. Please migrate to API v1.1. https://dev.twitter.com/docs/api/1.1/overview.", "code": 68}]}</code>
というエラーが
<code>HTTP/1.1 410 Gone</code>
で返ってきていました。</p>

<p>API 1.1 に対応するには OAuth 対応が必須ということで、
簡単には対処できなさそうでしたが、
<a href="https://github.com/HipByte/RubyMotionSamples/issues/31">https://github.com/HipByte/RubyMotionSamples/issues/31</a>
に報告がすでにあったのでコメントをつけておきました。</p>

<p>それとは別に、エラー処理も <code>RuntimeError</code> しか <code>rescue</code> していないので、
<code>TypeError</code> は <code>rescue</code> できていなかったり、
<code>rescue</code> できても</p>

<p><code>
Terminating app due to uncaught exception 'NoMethodError', reason: 'app_delegate.rb:73:in `block in search:': undefined method `presentError' for #&lt;AppDelegate:0x7fe1eb107910 ...&gt; (NoMethodError)
</code></p>

<p>でエラー処理がちゃんと動いていなかったりしました。</p>

<p>これは <code>NSApplication.sharedApplication.presentError error_ptr</code> にすれば良いのかも、
と思って試してみたけどうまくいかない、というところで時間が来て終了になりました。</p>
]]></content>
  </entry>
  
</feed>
