<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2015-12-13T22:05:18+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2015 の 3 日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2015-12-13-rubykaigi-2015.html"/>
    <updated>2015-12-13T10:22:18+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi-2015</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2015" title="RubyKaigi 2015">RubyKaigi 2015</a> の 3 日目に参加したので、そのメモです。</p>

<!--more-->


<h2>Ruby Committers vs the World</h2>

<ul>
<li>matz が本日は来ていないので、司会が個人的に matz に質問していた話</li>
<li>Soft Typing の進捗どうですか</li>
<li>近年 <code>RUBY_VERSION</code> の bump しかコミットがないですがどうですか</li>
<li>The commits of the Year (注目のコミット)</li>
<li>check incompatible libruby (r50412)[<a href="http://svn.ruby-lang.org/cgi-bin/viewvc.cgi?view=revision&amp;revision=50412">http://svn.ruby-lang.org/cgi-bin/viewvc.cgi?view=revision&amp;revision=50412</a>]</li>
<li>rvm がインストール済みの gem を引き連れて ruby のバージョンをあげる機能 (migrate) があるが、それが問題を引き起こすので shared library の gem を入れ直さないといけない</li>
<li>rdoc/rubygems backports (hsbt)</li>
<li>コミットログにダメ出し</li>
<li><code>explicit_bzero(3)</code> (kosaki)</li>
<li>何かあった時に情報を盗みにくくするためのゼロクリアが最適化で消されることがある</li>
<li>最適化で消されないゼロクリア</li>
<li>code size diet (normal)</li>
<li>自分で普通という人は普通じゃない</li>
<li>optimization of <code>newobj_of()</code> (Kazuho Oku さん) <a href="http://svn.ruby-lang.org/cgi-bin/viewvc.cgi?view=revision&amp;revision=52072">r52072</a></li>
<li>frozen string literal の件で炎上した影響</li>
<li><a href="http://blog.kazuhooku.com/2015/10/ruby.html" title="雑なツイートをしてしまったばかりにrubyを高速化するはめになった俺たちは！ ">雑なツイートをしてしまったばかりにrubyを高速化するはめになった俺たちは！ </a></li>
<li><a href="https://twitter.com/kazuho/status/675858887803727872">https://twitter.com/kazuho/status/675858887803727872</a></li>
<li>The new committers</li>
<li>odaira さん</li>
<li>AIX, z/Linux など IBM 関連</li>
<li>sho-h さん</li>
<li>rdoc とるりまの質を高めたい</li>
<li>gogotanaka さん</li>
<li>cmath.rb のメンテナ</li>
<li>yuki24 さん</li>
<li><code>did_you_mean</code> gem</li>
<li>sonots さん</li>
<li>logger のメンテナを nahi さんから引き継いだ</li>
<li>yui-knk さん</li>
<li>Rails のテストで壊れた時に trunk での変更が原因だったら、足りないテストを足したり直したり</li>
<li>AMA (Ask Me Anything)</li>
<li><a href="https://twitter.com/Re_Shia/status/675837047525871616">rubyにコントリビュートしたいと思う人に勉強しておくといいよ、と思うものを一つだけあげるとしたら何でしょうか！</a></li>
<li>hsbt さんの発表資料を見る</li>
<li>akr さんの本を参考にする <iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4774178020" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></li>
<li><a href="https://twitter.com/frsyuki/status/675845609492889600">Python使えって言われるんですがどうしたらいいですか？</a></li>
<li><a href="https://twitter.com/yancya/status/675845804599324675">今後、数値計算分野で Python を食える日が来るでしょうか</a></li>
<li>Python を使って欲しいものを Ruby に持ってくる活動を続けていく</li>
<li><a href="https://twitter.com/tagomoris/status/675848535019917314">Matz以外のコミッタが並行・並列性の提供にどう考えているか聞きたいです!</a></li>
<li><a href="http://togetter.com/li/912075" title="怒り駆動開発に炎上駆動開発！コミッターが語るRubyの1年と未来。Ruby Committers vs the World #rubykaigi #rubykaigiA - Togetterまとめ">怒り駆動開発に炎上駆動開発！コミッターが語るRubyの1年と未来。Ruby Committers vs the World #rubykaigi #rubykaigiA - Togetterまとめ</a></li>
</ul>


<h2>Writing web application in Ruby</h2>

<ul>
<li>Ubiregi</li>
<li>React.js</li>
<li>gohra <a href="https://github.com/youchan/gohra">https://github.com/youchan/gohra</a></li>
<li>Hyalite <a href="https://github.com/youchan/hyalite">https://github.com/youchan/hyalite</a></li>
<li>Opal</li>
<li>Symbol がなくて String と同じ扱い</li>
<li><code>Kernel#proc</code> の引数なしが使えないので、引数リストに <code>&amp;block</code> をつけて受け取る必要がある</li>
<li>それ以外は Ruby として問題なくかけた</li>
<li>React.js と Virtual DOM</li>
<li>opal-browser</li>
<li>JSX
-<code>Hyalite::Component::ShortHand</code></li>
<li>Example: TodoMVC</li>
<li>このスライド自体も Hyalite のサンプル (twitter ではここまで rabbit だと思っていた人が多数)</li>
<li>TodoMVC の例の説明</li>
<li>Ruby-ish implementation</li>
<li>isomorphic</li>
<li>スライド: <a href="http://rubykaigi.youchan.org/">http://rubykaigi.youchan.org/</a></li>
<li><a href="http://togetter.com/li/912112" title="RubyでWebアプリ!? ReactjsぽいことができるHyaliteを使えばMatzが追いかけてくるスライドもすぐ作れるよ #rubykaigi #rubykaigiB - Togetterまとめ">RubyでWebアプリ!? ReactjsぽいことができるHyaliteを使えばMatzが追いかけてくるスライドもすぐ作れるよ #rubykaigi #rubykaigiB - Togetterまとめ</a></li>
</ul>


<h2>Lunch on your own</h2>

<p>今日も築地の方に行っていました。</p>

<h2>Refinements - the Worst Feature You Ever Loved</h2>

<ul>
<li>monkey patch の例</li>
<li>refinements の例</li>
<li>module の中で</li>
<li>top level で</li>
<li>eval の中で</li>
<li>security risks</li>
<li>performance issues</li>
<li>confusing corner case</li>
<li>dynamically scoped refinements の利点と欠点</li>
<li>refinements today</li>
<li>現状は lexical scope</li>
<li>the three use cases again</li>
<li>refinements today の欠点と利点</li>
<li>a deep problem</li>
<li><a href="http://togetter.com/li/912136" title="Ruby2.0で導入されたRefinementsという機能のメリットとリスクについて #rubykaigi #rubykaigiB - Togetterまとめ">Ruby2.0で導入されたRefinementsという機能のメリットとリスクについて #rubykaigi #rubykaigiB - Togetterまとめ</a></li>
</ul>


<h2>Discussion on Thread between version 1.8.6 and 2.2.3</h2>

<ul>
<li><a href="https://asakusarb.doorkeeper.jp/events/36106" title="Asakusa.rb meetup after RubyKaigi 2015">Asakusa.rb meetup after RubyKaigi 2015</a></li>
<li><a href="https://jishin.net/">https://jishin.net/</a></li>
<li>100スレッド*100プロセス</li>
<li><code>Thread#status</code></li>
<li>Cases of threads got stuck</li>
<li>Case 1</li>
<li>2.2.3 の方が CPU usage は増えていた</li>
<li>実行回数は変わっていなかった</li>
<li>Case 2</li>
<li>例外のメモリ使用量は 2.2.3 で減っていた</li>
<li>timeout で例外処理があると Case 1 よりメモリ使用量が多い</li>
<li>conclusion: (thread is) too complicated to understand</li>
<li>質疑応答</li>
<li>マルチスレッドは IO 多重化などを想定していて、処理が回っているものを多重化しているものはあまり想定していなかったという話など</li>
<li><a href="http://togetter.com/li/912153" title="スレッドをいっぱい立ててみた時のお話。10000スレッドでRubyはどうなるか？ #rubykaigi #rubykaigiB - Togetterまとめ">スレッドをいっぱい立ててみた時のお話。10000スレッドでRubyはどうなるか？ #rubykaigi #rubykaigiB - Togetterまとめ</a></li>
</ul>


<h2>Plugin-based software design with Ruby and RubyGems</h2>

<ul>
<li>plugin の例として Firefox Add-on など</li>
<li>How did I design plugin architecture?</li>
<li>Plugin Architecture Design Patterns</li>
<li>traditional</li>
<li>Dependency Injection</li>
<li>Dependency Injection + Plugin loader</li>
<li>Plugin Architecture of Fluentd</li>
<li>Plugin Architecture of Embulk</li>
<li>embulk の demo</li>
<li>embulk-filter-kuromoji</li>
<li>jar ファイルの頭にシェルスクリプトと bat ファイルを埋め込む話</li>
<li>Pitfalls &amp; Challenges</li>
<li><a href="http://togetter.com/li/912157" title="プラグインベースのソフトウェアとは？開発とテストを容易にするデザインパターン #rubykaigi #rubykaigiA - Togetterまとめ">プラグインベースのソフトウェアとは？開発とテストを容易にするデザインパターン #rubykaigi #rubykaigiA - Togetterまとめ</a></li>
</ul>


<h2>Afternoon Break</h2>

<p>スピーカーやコミッターのサインを集めているボードに書いてきました。
Keynote が A ホールのみなので、この後はずっと A ホールにいることにしました。</p>

<h2>Request and Response</h2>

<ul>
<li>HTTP2</li>
<li>利点</li>
<li>バイナリ</li>
<li>多重化</li>
<li>ヘッダーを圧縮</li>
<li>SSL 使用</li>
<li>サーバープッシュ</li>
<li>Google Chrome だと chrome://net-internals/#spdy で確認できる</li>
<li>Firefox は x-firefox-spdy ヘッダが付いている</li>
<li>Rack</li>
<li>Adapter pattern で依存の爆発を解決した</li>
<li>Rack Middleware</li>
<li>Rails アプリでの例</li>
<li>Web Server parses the Request</li>
<li><code>Rails::Application</code> を継承した YourApp</li>
<li><code>Rack::SendFile</code>, <code>ActionDispatch::Static</code>, &hellip;, <code>Router</code></li>
<li>Rack 山</li>
<li>長すぎるし複雑</li>
<li>Rack API の問題</li>
<li>ストリーム</li>
<li>HTTP2 のサーバーの例</li>
<li>質疑応答</li>
<li><a href="https://github.com/tenderlove/ds9">https://github.com/tenderlove/ds9</a> はなぜ ds9 という名前なのか</li>
<li>スタートレック</li>
<li>nghttp2 の ng は next generation</li>
<li>(スタートレックをよく知らないのでよくわからず)</li>
<li>どのくらい発表練習した?</li>
<li>翻訳 2 週間、練習 5 時間</li>
<li>サーバープッシュの設定はどこに?</li>
<li>view helper で自動</li>
<li>ソースコードを読んだら IPv6 に対応していないように見えたが IPv6 対応の方針は? <a href="https://twitter.com/takano32/status/675942535211171841">https://twitter.com/takano32/status/675942535211171841</a></li>
<li>わからない</li>
<li>パッチを送ってください</li>
<li>Rack 3 はたぶん API が変わる</li>
</ul>


<h2>Actor, Thread and me</h2>

<ul>
<li>アーロンの後はやりにくい <a href="https://twitter.com/m_seki/status/675938103735902209">https://twitter.com/m_seki/status/675938103735902209</a></li>
<li>dRuby 本 10 周年</li>
<li>agenda の Really? が重要</li>
<li>アクターモデル</li>
<li>Ether (エーテル) : メッセージを伝搬する何か</li>
<li>Send と Receive だけで考える</li>
<li><code>oso_matz_RPC</code></li>
<li><code>choro_matz</code></li>
<li>後でやる作戦は誰も止まっていないのにシステムが止まってしまうことがある</li>
<li><code>jushi_matz</code></li>
<li>おすすめ</li>
<li>システム全体はアクターモデルで考える</li>
<li>アクターはマルチスレッドで動く</li>
<li>Fiber を使ってみるために bartender というのを作った <a href="https://github.com/seki/bartender">https://github.com/seki/bartender</a></li>
<li>全員が Queue を持っているというのを書いてみた</li>
<li>使い道がなかった</li>
<li>中央集権型 <code>Rinda::TupleSpace</code> を使う</li>
<li><code>todo_matz</code></li>
<li>アクターはより良いスレッドではない感が共有できたはず</li>
<li>スポンサーが大事</li>
<li>質疑応答</li>
<li>スレッドの今後について</li>
<li>現状で満足している</li>
<li>1.8 の方が良かった</li>
<li>上司に 3 倍速くしろといわれてるんですが</li>
<li>IO 待ちばっかりなら今のスレッドで良いのではないか</li>
<li>unicorn (プロセス) から puma (マルチスレッド) に変更したが、リソース的にも速度的にも改善しなかった</li>
<li>Fiber の使った例のところでもっと良い書き方があるという話</li>
</ul>


<h2>スポンサーセッション (Speee)</h2>

<ul>
<li>意外と知っている人が多い</li>
<li>いろんなことをやっているので紹介するのは難しい</li>
<li>IT 企業対抗 Splatoon 大会</li>
<li>Speee ラウンジ</li>
</ul>


<h2>Ruby: 2020 - how do we get to Ruby3x3 (Keynote)</h2>

<ul>
<li>CRuby には JIT が必要</li>
<li>Part 1: Performance</li>
<li>Parallelism</li>
<li>Part 2. Survey of the past</li>
<li>2a. SELF <a href="https://ja.wikipedia.org/wiki/Self">https://ja.wikipedia.org/wiki/Self</a></li>
<li>2b. Strongtalk <a href="https://en.wikipedia.org/wiki/Strongtalk">https://en.wikipedia.org/wiki/Strongtalk</a></li>
<li>2c. V8</li>
<li>JIT Compiler Types</li>
<li>Tracing JITs</li>
<li>Method JITs</li>
<li>Partial Evaluation</li>
<li>Part 4: Comparison</li>
<li>Part 5: A Proposal</li>
<li><code>[1,2].min</code> を最適化する話</li>
<li>MIPASWAP = Matz is Pragmatic And So We Are Pragmatic ((スライドでは And が抜けていたらしい)[<a href="https://twitter.com/s_osa_/status/675967202814779392">https://twitter.com/s_osa_/status/675967202814779392</a>])</li>
<li>質疑応答</li>
</ul>


<h2>Closing</h2>

<ul>
<li>819 Rubyists! <a href="https://twitter.com/nhance/status/675971298816823296">https://twitter.com/nhance/status/675971298816823296</a></li>
<li>すし詰め <a href="https://twitter.com/yoshiaki_0614/status/675974594025648128">https://twitter.com/yoshiaki_0614/status/675974594025648128</a></li>
<li>RubyKaigi 2016</li>
<li>Sep. 8th .. 10th</li>
<li>京都国際会館</li>
<li>価格は未定だが今年よりは安くしたい</li>
</ul>


<h2>全体の感想</h2>

<ul>
<li>英語がさっぱりだった。</li>
<li>1 日目の寿司チケットを使い損ねた。</li>
<li>本を買うかどうか迷っていたら、買いたかった本はすでに売り切れていて、買わずに済んだ。(荷物が重くならずに済んだ。)</li>
<li>2 日目の会場 Wi-Fi の調子が悪かった。</li>
<li>3 日目も調子が悪いタイミングがあったが、何度かつなぎ直していたら治った。</li>
<li><a href="http://blog.rubykaigi.org/">http://blog.rubykaigi.org/</a> が更新されていなかった。</li>
<li>天気が微妙だった。</li>
<li>久しぶりの人にいろいろ会えた。</li>
<li>みられなかった発表は <a href="http://togetter.com/id/tg__dev">http://togetter.com/id/tg__dev</a> の togetter を参考にスライドを読むと良さそう。</li>
<li>宿が歩いて移動できる範囲で良かった。(会場まで徒歩 20 分ぐらいの場所だった。)</li>
<li>ちょっと遅れ気味の日もあったけど、セッションの開始には遅刻せずに毎日朝から参加できた。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2015 の 2 日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2015-12-12-rubykaigi-2015.html"/>
    <updated>2015-12-12T09:46:59+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi-2015</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2015" title="RubyKaigi 2015">RubyKaigi 2015</a> の 2 日目に参加したので、そのメモです。</p>

<!--more-->


<h2>スポンサーセッション (Cookpad)</h2>

<h2>Keynote</h2>

<ul>
<li><a href="http://rubykaigi.org/2015/presentations/kosaki" title="Keynote - RubyKaigi 2015">Keynote - RubyKaigi 2015</a></li>
<li>小崎さんの Keynote</li>
<li>Linuxport maintainer</li>
<li><a href="https://bugs.ruby-lang.org/issues/3543" title="Bug #3543">Bug #3543</a> など</li>
<li>Patch for open source is like a Tetris</li>
<li>The Debugging Big 3</li>
<li>Ftrace</li>
<li>Perf tools</li>
<li>SystemTap</li>
<li><a href="https://twitter.com/t_wada/status/675484076191666176">https://twitter.com/t_wada/status/675484076191666176</a></li>
<li>発表資料を作っているとバグが見つかる話</li>
<li>probe 一覧はソースの <a href="https://github.com/ruby/ruby/blob/trunk/probes.d">probes.d</a> に書いてある</li>
<li><a href="http://togetter.com/li/911612" title="テトリス・デバッガ・奇妙なバグ！ LinuxカーネルとRubyコミュニティを行き交う小崎資広による #rubykaigi 2015 2日目Keynote - Togetterまとめ">テトリス・デバッガ・奇妙なバグ！ LinuxカーネルとRubyコミュニティを行き交う小崎資広による #rubykaigi 2015 2日目Keynote - Togetterまとめ</a></li>
</ul>


<h2>The history of testing framework in Ruby</h2>

<ul>
<li>テスティングフレームワークの歴史</li>
<li><code>/\Atest.+unit\z/i</code> が標準添付されたのは Ruby 1.8 から</li>
<li><code>/\Atest.+unit\z/i</code> とは <code>Test::Unit</code> 互換 API が重要</li>
<li>テストのグループ化</li>
<li>テストの共有</li>
<li>failure 時の表示の違い</li>
<li>assert の書き方の違い</li>
<li>質疑応答</li>
<li><code>yield</code> 付きの <code>setup</code> について</li>
<li><a href="http://slide.rabbit-shocker.org/authors/kou/rubykaigi-2015/">http://slide.rabbit-shocker.org/authors/kou/rubykaigi-2015/</a></li>
</ul>


<h2>Running Ruby on Solaris</h2>

<ul>
<li>自己紹介</li>
<li>BioRuby</li>
<li>Solaris とは</li>
<li>古いバイナリがそのまま動くというデモ</li>
<li>SPARC</li>
<li>Big-endian</li>
<li>Solaris</li>
<li>ビルドに必要なツールの話</li>
<li>PATH が重要 (make がたくさんとか)</li>
<li>コンパイラもいろいろ</li>
<li>いろんな標準に準拠している</li>
<li>64 ビット OS になってもコンパイラのデフォルトは 32 ビットのまま</li>
<li>ライブラリの話</li>
<li><code>make V=1</code> でコンパイルオプションなども表示</li>
<li>バグ報告の話</li>
<li>ファイル名衝突の例: <a href="https://bugs.ruby-lang.org/issues/7287" title="Bug #7287">Bug #7287</a></li>
<li>word alignment のバグの例: <a href="https://bugs.ruby-lang.org/issues/5469" title="Bug #5469">Bug #5469</a></li>
<li><a href="https://bugs.ruby-lang.org/issues/10646" title="Bug #10646">Bug #10646</a></li>
<li><a href="https://bugs.ruby-lang.org/issues/11277" title="Bug #11277">Bug #11277</a></li>
<li>などなど</li>
<li><a href="http://www.slideshare.net/ngotogenome/running-ruby-on-solaris-rubykaigi-2015-12dec2015-56073698">http://www.slideshare.net/ngotogenome/running-ruby-on-solaris-rubykaigi-2015-12dec2015-56073698</a></li>
<li><a href="http://togetter.com/li/911651" title="「Solaris上で動くRuby 1.2…」SolarisでRubyを動かすヒント #rubykaigi 2015 #rubykaigiB - Togetterまとめ">「Solaris上で動くRuby 1.2…」SolarisでRubyを動かすヒント #rubykaigi 2015 #rubykaigiB - Togetterまとめ</a></li>
</ul>


<h2>Lunch on your own</h2>

<p>また築地の方に行って、今度は間に合うように戻ってこれました。</p>

<h2>Data Analytics Service Company and Its Ruby Usage</h2>

<ul>
<li>英語で自己紹介</li>
<li><a href="https://www.treasuredata.com/">https://www.treasuredata.com/</a></li>
<li>fluentd</li>
<li>embulk</li>
<li>ステッカーが人気</li>
<li>Ruby や Java を使っているらしい</li>
<li>OSS 重視</li>
<li><a href="https://github.com/treasure-data/perfectsched">https://github.com/treasure-data/perfectsched</a></li>
<li>At-least-once semantics</li>
<li><a href="https://github.com/treasure-data/perfectqueue">https://github.com/treasure-data/perfectqueue</a></li>
<li>Done is better than perfect.</li>
<li><code>&lt;&lt;~</code> があるので Ruby 2.3 が使いたい話</li>
<li>質疑応答</li>
<li>PerfectQueue でスループットが問題になった時にどうするのかという質問</li>
</ul>


<h2>Ruby for one day game programming camp for beginners</h2>

<ul>
<li>自己紹介</li>
<li>KMC の紹介</li>
<li>programming camp の紹介</li>
<li>未経験から 8,9 割が動くものを作れる</li>
<li>続けてゲームを作ろうとする人はだいたい Unity か C#</li>
<li>重力は難しい</li>
<li>シューティングゲームが簡単</li>
</ul>


<h2>Ruby meets Go</h2>

<ul>
<li>cgo</li>
<li>ruby から C の関数を呼び出すには ffi gem を使う方法と標準添付の fiddle を使う方法がある</li>
<li><a href="https://speakerdeck.com/naruse/writing-extension-libraries-in-go">https://speakerdeck.com/naruse/writing-extension-libraries-in-go</a></li>
<li>マクロや wrapper 関数の話</li>
<li>文字列のコピーが発生するのを避ける話</li>
<li><a href="http://qiita.com/mattn/items/176459728ff4f854b165">http://qiita.com/mattn/items/176459728ff4f854b165</a></li>
<li>Ruby での参照を Go にも反映させて GC されないようにする話</li>
<li>Go のコードを含む gem を生成する方法</li>
<li>拡張ライブラリの例 : <a href="https://github.com/mmasaki/memberlist">https://github.com/mmasaki/memberlist</a></li>
<li>質疑応答</li>
<li>extconf.rb のハックを mkmf に入れる気はないのかという話</li>
<li>bundler の雛形生成での対応を考えている</li>
<li><a href="http://www.slideshare.net/td-nttcom/ruby-meets-go">http://www.slideshare.net/td-nttcom/ruby-meets-go</a></li>
</ul>


<h2>Rhebok, High Performance Rack Handler</h2>

<ul>
<li>Mercari</li>
<li>unicorn より速い Rhebok</li>
<li>Perl の Gazelle の Ruby 版</li>
<li>Gazelle や Rhebok はツノが 2 本の動物</li>
<li>unicorn が 1 本だから</li>
<li>WebSocket や Streaming には向かない</li>
<li>reverse proxy なしで直接公開にも向かない</li>
<li>専用コマンドはないので <code>rackup -s Rhebok ...</code> で起動</li>
<li>Hot Deploy</li>
<li><code>start_server</code> コマンドを wrapper として使う</li>
<li>Benchmark</li>
<li>ISUCON 4 の問題でもベンチマークしても unicorn より速い</li>
<li>rack の説明</li>
<li>Rack Handler の簡易実装</li>
<li>その問題点と解決方法</li>
<li><a href="https://github.com/kazeburo/prefork_engine">https://github.com/kazeburo/prefork_engine</a></li>
<li>IO timeout</li>
<li>unicorn はタイムアウトで SIGKILL している (乱暴)</li>
<li>Parse HTTP request</li>
<li><code>PicoHTTPParser</code> を使った</li>
<li>TCP optimization</li>
<li><code>TCP_NODELAY</code> disable it</li>
<li>Nagle&rsquo;s algorithm</li>
<li><code>writev(2)</code></li>
<li><a href="http://www.slideshare.net/kazeburo/rhebok-high-performance-rack-handker-rubykaigi-2015">http://www.slideshare.net/kazeburo/rhebok-high-performance-rack-handker-rubykaigi-2015</a></li>
</ul>


<h2>Pragmatic Testing of Ruby Core</h2>

<ul>
<li>自己紹介</li>
<li>GMO Pepabo の紹介</li>
<li><a href="https://github.com/yaocloud">https://github.com/yaocloud</a></li>
<li>ruby 2.3.0-preview がビルドできない問題の原因が判明したという業務連絡</li>
<li>オープンソースへの貢献の話</li>
<li>Documentation is hard</li>
<li>Testing and Running are easy</li>
<li>テスト実行の tips</li>
<li>.travis.yml を見る</li>
<li>ruby の場合は .travis.yml が複雑なので簡易な手順を紹介</li>
<li>test 関係のターゲットが common.mk にいろいろ</li>
<li><code>sample/test.rb</code></li>
<li><code>make btest-ruby</code></li>
<li><code>bootstraptest/</code> を実行</li>
<li><code>make test-all</code></li>
<li><code>test/</code> を実行</li>
<li><code>make test-all TESTS=logger</code></li>
<li><code>make test-all TESTS=-j4</code></li>
<li><code>test/-ext-/</code> は <code>ext/-test-/</code> を使って C API をテストしている</li>
<li><code>make check</code> はだいたい全部を実行するもの</li>
<li><code>test-testframework</code> は fork した minitest + test/unit をテストしている</li>
<li>rubygems と rdoc は upstream がある</li>
<li>rubygems と rdoc はまだ Ruby 1.8 をサポートしている</li>
<li><code>test/lib/envutil.rb</code></li>
<li>rubyspec</li>
<li><a href="http://rubini.us/2014/12/31/matz-s-ruby-developers-don-t-use-rubyspec/">http://rubini.us/2014/12/31/matz-s-ruby-developers-don-t-use-rubyspec/</a></li>
<li>rubyspec は仕様ではない</li>
<li><code>make update-rubyspec</code></li>
<li><code>make test-rubyspec</code></li>
<li><a href="https://github.com/ruby/rubyspec">https://github.com/ruby/rubyspec</a> で生きている</li>
<li>rubyci and chkbuild</li>
<li><a href="http://rubyci.org/">http://rubyci.org/</a></li>
<li><a href="https://github.com/akr/chkbuild">https://github.com/akr/chkbuild</a></li>
<li><code>make run</code></li>
<li><code>make bisect</code></li>
<li>coverage</li>
</ul>


<h2>スポンサーセッション (pixiv)</h2>

<h2>Lightning Talks</h2>

<ul>
<li>Dora Brain</li>
</ul>


<h3>Update Early, Update Often</h3>

<ul>
<li>deppbot</li>
<li><code>bundle lock --update</code></li>
</ul>


<h2>Automating View Internationalization in Ruby on Rails</h2>

<ul>
<li><code>h</code> が自動化されたように <code>t</code> や <code>l</code> も自動化した話</li>
<li><code>.new</code> のような例がうまくいかない</li>
<li>gem はまだ公開されていない</li>
</ul>


<h2>A new testing framework Rgot</h2>

<ul>
<li>Ruby + Golang Testing</li>
<li>Diversity</li>
<li><a href="https://github.com/ksss/rgot">https://github.com/ksss/rgot</a></li>
</ul>


<h2>Building an Unbreakable MRI-based Embedded Computer Appliance</h2>

<ul>
<li>3Bees</li>
<li>Make filesystem read-only</li>
<li>JeOS</li>
</ul>


<h2>Do you trust that certificate?</h2>

<ul>
<li>Web アプリが外部サイトにアクセスする時の話</li>
<li>ルート CA の更新の話</li>
</ul>


<h2>How I debugged debugger</h2>

<ul>
<li>byebug のパフォーマンスバグを修正した話</li>
<li><a href="http://techlife.cookpad.com/entry/2015/12/09/163746" title="gdbを使ったrubyのデバッグ">gdbを使ったrubyのデバッグ</a></li>
</ul>


<h2>Padrino Travel Guide</h2>

<ul>
<li>Padrino の 2 つの見方</li>
<li>full-stack Web Application Framework</li>
<li>Sinatra Plugin</li>
<li>使用例</li>
<li>dwango.jp</li>
<li>animelo mix</li>
<li>ssnote.net</li>
</ul>


<h2>What I learned by implementing a Ruby VM in Erlang</h2>

<ul>
<li>concurrent</li>
<li><a href="https://github.com/johnlinvc/erruby">https://github.com/johnlinvc/erruby</a></li>
</ul>


<h2>Rubygemsで作るお手軽データ分析基盤 〜あるいは 私はどうやって他人の褌で相撲を取ったか〜</h2>

<ul>
<li><a href="https://github.com/esminc/adhoq">https://github.com/esminc/adhoq</a></li>
<li>pull request を送る時に気をつけるべきこと</li>
<li><a href="https://github.com/aamine/activerecord4-redshift-adapter">https://github.com/aamine/activerecord4-redshift-adapter</a></li>
<li><a href="https://github.com/aamine/bricolage">https://github.com/aamine/bricolage</a></li>
</ul>


<h2>Rationalを最適化してみた</h2>

<ul>
<li>How to optimize Rational</li>
<li>Let&rsquo;s read CRuby source code more!</li>
<li><a href="https://github.com/tadd/ruby/commits/ragrant2015development">https://github.com/tadd/ruby/commits/ragrant2015development</a></li>
</ul>


<h2>The Mythical Creatures of Summer of Code</h2>

<ul>
<li>Rails Girls Summer of Code など</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2015 の 1 日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2015-12-11-rubykaigi-2015.html"/>
    <updated>2015-12-11T14:06:46+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi-2015</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2015" title="RubyKaigi 2015">RubyKaigi 2015</a> の 1 日目に参加したので、そのメモです。</p>

<!--more-->


<h2>Opening &amp; Ruby 2.3 Preview Release</h2>

<p>オープニングの諸注意などと Ruby 2.3.0-preview2 のリリースアナウンスがありました。</p>

<h2>スポンサーセッション (Money Forward)</h2>

<h2>Ruby3 challenges (Keynote)</h2>

<ul>
<li>First timer が半分近い</li>
<li>プログラマの三大美徳</li>
<li>anger や niceness の話</li>
<li>MINASWAN (Matz is nice And so we are nice)</li>
<li>Ruby 2.3.0</li>
<li>Event Driven Programming</li>
<li><code>did_you_mean</code> gem</li>
<li><code>Enumerable#grep_v</code></li>
<li><code>Hash#fetch_values</code></li>
<li>Strict version of <code>Hash#values_at</code></li>
<li><code>Numeric#positive?</code>, <code>negative?</code></li>
<li>Hash comparisons (<code>&lt;=</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&gt;</code>)</li>
<li>全順序じゃないので <code>&lt;=&gt;</code> はない</li>
<li><code>Hash#to_proc</code></li>
<li><code>Array</code>,<code>Hash</code>,<code>Struct#dig</code></li>
<li>Idented here document <code>&lt;&lt;~</code></li>
<li>インデントが一番浅いところに合わせて削ってくれる</li>
<li>frozen string literal pragma</li>
<li>Safe navigation operator <code>&amp;.</code></li>
<li>Lonely operator</li>
<li>Faster</li>
<li>5-10% faster each year</li>
<li>mruby 1.2</li>
<li><a href="https://github.com/matz/streem">Streem</a></li>
<li>OCaaS = OSS community as a Shark</li>
<li>Make something people want → Make something people need</li>
<li>Secret of Ruby&rsquo;s success</li>
<li>Change is pain</li>
<li>Took 5 or more years to be adapted</li>
<li>Migration bait</li>
<li>concurrency</li>
<li>ピタゴラスイッチプログラミング</li>
<li>Performance</li>
<li>Ruby3x3</li>
<li>Ruby 3 は Ruby 2.0 の 3 倍速くするという目標</li>
<li>heroku</li>
<li>appfolio</li>
<li>Money Forward</li>
<li>IBM J9</li>
<li>Ruby is no longer my language</li>
<li>It&rsquo;s a community effort</li>
</ul>


<h2>Compiling Ruby scripts</h2>

<ul>
<li>昼食に時間がかかったので最後の方しか聞けませんでした。</li>
<li>保存場所は決めていない</li>
<li>ISeq をバイナリ String で返すので好きな場所に保存</li>
<li>ロード時にフックが定義されていれば呼ばれる</li>
<li>サンプルとして 3 種類の保存方法を用意している</li>
<li>experimental として Ruby 2.3 に入っている</li>
</ul>


<h2>Saving people from typos</h2>

<ul>
<li><code>did_you_mean</code> gem の話</li>
<li>Ruby commiter になった</li>
<li><code>kaminari</code> gem のメンテナもしている</li>
<li>Pivotal の紹介</li>
<li><code>git</code> や Google には did you mean がある</li>
<li>ruby には <code>did_you_mean</code> gem</li>
<li>どうやって動いているか</li>
<li>A spell checker</li>
<li>Monkey patches</li>
<li>Spell Checker</li>
<li>Dictionary</li>
<li>制御機構</li>
<li>最適化手法</li>
<li>Mistype Correction</li>
<li>Misspell Correction</li>
<li>Levenshtein Distance</li>
<li>Jaro-Winkler Distance</li>
<li>Jaro Distance + Prefix Bonus</li>
<li><a href="http://git.io/vRdYW">http://git.io/vRdYW</a></li>
<li>実装の説明</li>
<li>質疑応答</li>
<li>necessary と nessecary のような例は Levenshtein Distance だけだと予測ができない</li>
</ul>


<h2>mruby on the minimal embedded resource</h2>

<ul>
<li>デモ</li>
<li>ハードウェアの説明</li>
<li>なぜ mruby を使うのかという話</li>
<li>いろいろなハードウェアの話</li>
</ul>


<h2>Afternoon Break</h2>

<p>スシが今日だけだとアナウンスがあったので、行ってみたらちょうど終わったところでもらえませんでした。</p>

<h2>High Performance Template Engine: Guide to optimize your Ruby code</h2>

<ul>
<li>faml と hamlit がいかにして haml より速くしたのかという話でした。</li>
<li><a href="http://k0kubun.hatenablog.com/entry/2015/12/12/000037" title="#RubyKaigi 2015 でテンプレートエンジンの高速化について話しました - k0kubun's blog">#RubyKaigi 2015 でテンプレートエンジンの高速化について話しました - k0kubun&rsquo;s blog</a></li>
</ul>


<h2>TRICK 2015: The second Transcendental Ruby Imbroglio Contest for RubyKaigi</h2>

<ul>
<li>1 回目は 2013</li>
<li>今回は 2 回目</li>
<li><a href="https://github.com/tric/trick2015">https://github.com/tric/trick2015</a></li>
<li><p>srand は storage</p></li>
<li><p>追加メモ</p></li>
<li><a href="http://d.hatena.ne.jp/ku-ma-me/20151211">http://d.hatena.ne.jp/ku-ma-me/20151211</a></li>
<li><a href="http://monae.github.io/trick2015.html">http://monae.github.io/trick2015.html</a></li>
<li><a href="http://www.garbagecollect.jp/~usa/d/201512b.html#id20151211_P1">http://www.garbagecollect.jp/~usa/d/201512b.html#id20151211_P1</a></li>
<li><a href="http://www.callcc.net/diary/20151212.html">http://www.callcc.net/diary/20151212.html</a></li>
<li><a href="http://www.kmonos.net/wlog/140.html#_2126151211">http://www.kmonos.net/wlog/140.html#_2126151211</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[8月9日 アンダースタンディングコンピュテーション読書会 第4回(兵庫県)に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2015-08-09-amagasakirb.html"/>
    <updated>2015-08-09T13:02:58+09:00</updated>
    <id>http://blog.n-z.jp/blog/amagasakirb</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/event/index/322444/" title="8月9日 アンダースタンディングコンピュテーション読書会 第4回(兵庫県)">8月9日 アンダースタンディングコンピュテーション読書会 第4回(兵庫県)</a>
に参加しました。
今回は8章から9章でした。</p>

<!--more-->


<h2>メモ</h2>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=487311697X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>以下、今回のメモです。</p>

<ul>
<li><a href="https://github.com/tomstuart/computationbook">https://github.com/tomstuart/computationbook</a></li>
<li><a href="https://github.com/ko1/uc_ja">https://github.com/ko1/uc_ja</a></li>
<li>p.259 <code>to_s(2).scan(/.+?(?=.{8}*\z)/)</code> の書き換えの話</li>
<li><code>reserve</code> して <code>each_slice(8)</code> はどうかという話</li>
<li><code>Kernel#Integer</code> を使うかどうかという話</li>
<li>正規表現の先読みの話 <code>gsub(/(?=(.{3})+\z)/, ',')</code> など</li>
<li><code>does_it_say_no.rb</code> の話</li>
<li>p.264 監訳注の <code>"no"</code> と言って停止というのは環境 (スタックの深さ) に依存して <code>"yes"</code> になることもある <a href="https://github.com/ko1/uc_ja/issues/7">https://github.com/ko1/uc_ja/issues/7</a></li>
<li>Quine から <code>HQ9+</code> の話 <a href="https://ja.wikipedia.org/wiki/HQ9%2B">https://ja.wikipedia.org/wiki/HQ9%2B</a></li>
<li>p.276 <code>Prime.each(n - 1)</code> の話</li>
<li>p.296 <code>Array#product</code> の話 <a href="http://docs.ruby-lang.org/ja/2.2.0/method/Array/i/product.html">http://docs.ruby-lang.org/ja/2.2.0/method/Array/i/product.html</a></li>
<li>p.299 <code>T``Type::BOOLEAN</code> の <code>T</code> が余分? <a href="https://github.com/ko1/uc_ja/issues/8">https://github.com/ko1/uc_ja/issues/8</a></li>
<li>8章は時間がかかったが9章はすんなり読めた話</li>
<li>多重代入と <code>to_ary</code> と <code>to_a</code> などの話</li>
<li>SlideShare と SpeakerDeck の違いの話</li>
<li><code>-Float::INFINITY</code> の話</li>
</ul>


<h2>次回の本の候補</h2>

<ul>
<li><a href="http://www.amazon.co.jp/gp/product/4274050653/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4274050653&amp;linkCode=as2&amp;tag=znz-22">Rubyのしくみ -Ruby Under a Microscope-</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4274050653" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.co.jp/gp/product/4798139823/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4798139823&amp;linkCode=as2&amp;tag=znz-22">Effective Ruby</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4798139823" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.co.jp/gp/product/4797376279/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4797376279&amp;linkCode=as2&amp;tag=znz-22">10年戦えるデータ分析入門 SQLを武器にデータ活用時代を生き抜く (Informatics &amp;IDEA)</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4797376279" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.co.jp/gp/product/4873117321/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873117321&amp;linkCode=as2&amp;tag=znz-22">ユーザーストーリーマッピング</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4873117321" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.co.jp/gp/product/4627817711/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4627817711&amp;linkCode=as2&amp;tag=znz-22">データ解析の実務プロセス入門</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4627817711" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="https://progit-ja.github.io/" title="Pro Git 日本語版電子書籍公開サイト">Pro Git 日本語版電子書籍公開サイト</a></li>
<li><a href="http://railsguides.jp/index.html" title="Ruby on Rails ガイド (4.2 対応)">Ruby on Rails ガイド (4.2 対応)</a></li>
<li><a href="http://www.amazon.co.jp/gp/product/4873116988/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873116988&amp;linkCode=as2&amp;tag=znz-22">実践 機械学習システム</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4873116988" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.co.jp/gp/product/4797376724/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4797376724&amp;linkCode=as2&amp;tag=znz-22">ソフトウェアシステムアーキテクチャ構築の原理 第2版 ITアーキテクトの決断を支えるアーキテクチャ思考法</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4797376724" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.co.jp/gp/product/4798139211/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4798139211&amp;linkCode=as2&amp;tag=znz-22">システムテスト自動化 標準ガイド (CodeZine BOOKS)</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4798139211" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.co.jp/gp/product/4274069117/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4274069117&amp;linkCode=as2&amp;tag=znz-22">型システム入門 −プログラミング言語と型の理論−</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4274069117" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>


<h2>次回予定</h2>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4274069117" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>次回の本は<a href="http://www.amazon.co.jp/gp/product/4274069117/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4274069117&amp;linkCode=as2&amp;tag=znz-22">型システム入門 −プログラミング言語と型の理論−</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4274069117" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />に決定しました。
次回は10月の予定で詳細は未定です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第68回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2015-08-08-rubykansai68.html"/>
    <updated>2015-08-08T13:07:42+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai68</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/25693" title="第68回 Ruby関西 勉強会">第68回 Ruby関西 勉強会</a>
(<a href="https://github.com/rubykansai/workshops/wiki/Kansaiworkshop068" title="KansaiWorkshop068">KansaiWorkshop068</a>)
に参加しました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>前説</h2>

<p>主にちゃんとリアクションをしましょうという話でした。</p>

<h2>Middleware Configuration as Code</h2>

<ul>
<li><a href="https://speakerdeck.com/matsumoto_r/middleware-configuration-as-code">https://speakerdeck.com/matsumoto_r/middleware-configuration-as-code</a></li>
<li>本番環境での使い方について詳細は @hsbt さんの <a href="http://www.slideshare.net/hsbt/middleware-as-code-with-mruby">Details of mruby usage in production</a> を参照ということで省略</li>
<li><code>mod_mruby</code> や <code>ngx_mruby</code> でユーザーに見せるクラス構成などを似せて学習コストを下げている</li>
<li><code>ngx_mruby</code> チュートリアル用 docker イメージ <a href="https://github.com/matsumoto-r/docker-ngx_mruby">https://github.com/matsumoto-r/docker-ngx_mruby</a></li>
<li>事例紹介</li>
<li><a href="http://harasou.github.io/2015/07/15/%E9%96%A2%E8%A5%BFRuby%E4%BC%9A%E8%AD%B006-%E3%81%AB%E7%99%BB%E5%A3%87%E3%81%95%E3%81%9B%E3%81%A6%E3%82%82%E3%82%89%E3%81%A3%E3%81%9F/" title="関西Ruby会議06 に登壇させてもらった">関西Ruby会議06 に登壇させてもらった</a></li>
<li>質疑応答</li>
<li>AOT コンパイラについては不明</li>
<li>mruby はスレッドごとに VM が動かせる</li>
<li>C 拡張直接と比べてメモリ消費は増えるのか</li>
</ul>


<h2>Rails と ERD（アソシエーション）</h2>

<ul>
<li><a href="https://speakerdeck.com/ogom/erd-on-rails">https://speakerdeck.com/ogom/erd-on-rails</a></li>
<li><a href="https://github.com/ogom/draw_erd">https://github.com/ogom/draw_erd</a> <a href="https://rubygems.org/gems/draw_erd">https://rubygems.org/gems/draw_erd</a></li>
<li>ライブコーディングをしならがらの説明</li>
<li>(空気を読まずに 15 時のおやつの時間を教えてくれる pepper くん)</li>
<li>質疑応答</li>
<li>コミュニティーではなくグループなのは doorkeeper がそうなっていたから</li>
<li>余った時間を使ってホワイトボードで解説</li>
</ul>


<h2>Ruby 初級者向けレッスン（クラス）</h2>

<ul>
<li><a href="https://github.com/higaki/learn_ruby_kansai_68">https://github.com/higaki/learn_ruby_kansai_68</a></li>
<li>Struct を使うかどうか</li>
<li><a href="http://docs.ruby-lang.org/ja/2.2.0/method/Struct/s/=5b=5d.html">http://docs.ruby-lang.org/ja/2.2.0/method/Struct/s/=5b=5d.html</a> には「Structをカスタマイズする場合はこの方法が推奨されます。無名クラスのサブクラスを作成する方法でカスタマイズする場合は無名クラスが使用されなくなってしまうことがあるためです。」と書いてあってブロックを指定する方法が推奨されている(が、<a href="http://www.amazon.co.jp/gp/product/487311697X/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=487311697X&amp;linkCode=as2&amp;tag=znz-22">アンダースタンディング コンピュテーション ―単純な機械から不可能なプログラムまで</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=487311697X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />では継承して使っている)</li>
</ul>


<h2>スポンサーセッション</h2>

<ul>
<li>ファーストサーバさんの Zenlogic の紹介</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>関西の Ruby 関連のイベント紹介</li>
<li>次回は 10 月</li>
</ul>

]]></content>
  </entry>
  
</feed>
