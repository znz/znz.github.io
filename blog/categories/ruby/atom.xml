<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2016-04-08T14:36:21+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[さくらの VPS の Debian wheezy を jessie にあげた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-03-22-wheezy-to-jessie.html"/>
    <updated>2016-03-22T12:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/wheezy-to-jessie</id>
    <content type="html"><![CDATA[<p>Debian 6 &ldquo;Squeeze&rdquo; の <a href="https://wiki.debian.org/LTS/Using">LTS</a> が終わって Debian 7 &ldquo;Wheezy&rdquo; もそろそろ Debian 8 &ldquo;Jessie&rdquo; にあげた方が良さそうな気がしてきたので、
<a href="http://vps.sakura.ad.jp/">さくらの VPS</a> で使っている Debian 環境を Debian 7.9 から Debian 8.3 にあげてみました。</p>

<!--more-->


<h2>事前準備</h2>

<p><a href="https://www.debian.org/releases/jessie/amd64/release-notes/ch-upgrading.ja.html" title="第4章 Debian 7 (wheezy) からのアップグレード">第4章 Debian 7 (wheezy) からのアップグレード</a> などを読んで事前に注意点を確認しておきました。</p>

<h3>古いパッケージの削除</h3>

<p>Squeeze から残っているパッケージを確認するため</p>

<pre><code>aptitude search '~i!~Odebian'
</code></pre>

<p>で現在インストールできないパッケージを調べました。</p>

<p><code>pg_upgradecluster</code> コマンドで移行したのに残したままだった postgresql-8.4 と postgresql-client-8.4 を purge しました。</p>

<h3>scponly</h3>

<p>scponly を設定しているユーザーがいたのですが、 wheezy で既にパッケージがなくなっていたことに気づいたので、
「scponly wheezy」で検索して出てきた
<a href="http://chxor.chxo.com/post/74647790171/how-to-restrict-linux-users-to-only-sftp-without">http://chxor.chxo.com/post/74647790171/how-to-restrict-linux-users-to-only-sftp-without</a>
を参考にして設定を移行しました。</p>

<p>まず <code>/home/hoge/</code> 以下の bin dev etc usr を削除しました。</p>

<p>次に <code>sftponly</code> グループを追加して、そのグループに該当ユーザーを追加しました。</p>

<pre><code>% sudo usermod -a -G sftponly hoge
usermod: グループ 'sftponly' は存在しません
zsh: exit 6     sudo usermod -a -G sftponly hoge
% sudo addgroup sftponly
グループ `sftponly' (グループ ID 1001) を追加しています...
完了。
% sudo usermod -a -G sftponly hoge
</code></pre>

<p><code>/etc/ssh/sshd_config</code> の設定を変更しました。
関連するところだけ抜き出すと以下のような変更をしました。</p>

<pre><code>-Subsystem sftp /usr/lib/openssh/sftp-server
+#Subsystem sftp /usr/lib/openssh/sftp-server
+Subsystem sftp internal-sftp

+# sftponly users, chrooted
+Match group sftponly
+ChrootDirectory /home/%u
+AllowTcpForwarding no
+X11Forwarding no
+ForceCommand internal-sftp
</code></pre>

<p><code>sudo service sshd restart</code> で設定を反映して、 sftp コマンドで接続して put や rm ができるのを確認しました。</p>

<h3>その他古いパッケージの削除</h3>

<p><code>sudo aptitude purge '~i!~Odebian'</code> で古いパッケージを削除しました。</p>

<pre><code>%  sudo aptitude purge '~i!~Odebian'
以下のパッケージが削除されます:
  doc-linux-text{p} libbind9-60{p} libboost-iostreams1.42.0{p} libdb4.6{p} libdb4.7{p}
  libdb4.8{p} libdns69{p} libevent-1.4-2{p} libisc62{p} libisccc60{p} libisccfg62{p}
  libkadm5clnt-mit7{p} libkadm5srv-mit7{p} libkdb5-4{p} liblwres60{p} liblzma2{p}
  libssl0.9.8{p} libtokyocabinet8{p}
更新: 0 個、新規インストール: 0 個、削除: 18 個、保留: 0 個。
0  バイトのアーカイブを取得する必要があります。展開後に 20.4 M バイトのディスク領域が解放されます。
先に進みますか? [Y/n/?]
</code></pre>

<p><code>/etc/init.d</code> に余計なファイルが残っていると問題がおきるかもしれないので <code>sudo aptitude purge '~c'</code> で設定だけ残っているパッケージも purge しておきました。</p>

<pre><code>%  sudo aptitude purge '~c'
[sudo] password for adminuser:
以下のパッケージが削除されます:
  defoma{p} libept1{p} libexiv2-9{p} libgmp3c2{p} libgs8{p} libgsf-1-114{p} libgtk2.0-0{p}
  libgtk2.0-common{p} libmagickcore3{p} libmagickwand3{p} libmysqlclient16{p} libnl1{p}
  libopenipmi0{p} libpango1.0-common{p} libprotobuf6{p} libserf-0-0{p} libxcb-render-util0{p}
  libxcomposite1{p} libxcursor1{p} libxdamage1{p} libxfixes3{p} libxi6{p} libxinerama1{p}
  libxrandr2{p} mysql-server-5.1{p} odbcinst{p} odbcinst1debian2{p} php5-suhosin{p}
  update-inetd{p} x-ttcidfont-conf{p}
更新: 0 個、新規インストール: 0 個、削除: 30 個、保留: 0 個。
0  バイトのアーカイブを取得する必要があります。展開後に 0  バイトのディスク領域が新たに消費されます
。
先に進みますか? [Y/n/?]
</code></pre>

<h3>sudo find /etc -name &lsquo;<em>.dpkg-</em>&rsquo;</h3>

<p>移行時の設定マージ作業が途中で残っていたファイルがあったので、 <code>sudo find /etc -name '*.dpkg-*'</code> で探して必要に応じて設定をマージして <code>*.dpkg-old</code> や <code>*.dpkg-dist</code> は削除しておきました。</p>

<h3>プロセス一覧の確認</h3>

<p>pstree などでプロセス一覧をみて、アップグレード時に問題が起きそうなコマンドに目星をつけておきました。
一番の大物は apache 2.2 系から apache 2.4 系だと思いました。
slapd は 2.4.31-2+deb7u1 から 2.4.40+dfsg-1+deb8u2 でバージョン番号の変更も少なく互換性も高そうなので、問題はおきなさそうだと思いました。(実際大丈夫でした。)</p>

<h2>apt-line の変更</h2>

<p>コメントアウトされていない部分の wheezy を jessie に置き換えました。</p>

<pre><code>--- a/apt/sources.list
+++ b/apt/sources.list
@@ -4,18 +4,18 @@

 #deb cdrom:[Debian GNU/Linux 6.0.1a _Squeeze_ - Official amd64 NETINST Binary-1 20110320-15:00]/ wheezy main

-deb http://ftp.jp.debian.org/debian wheezy main non-free contrib
-deb-src http://ftp.jp.debian.org/debian wheezy main non-free contrib
+deb http://ftp.jp.debian.org/debian jessie main non-free contrib
+deb-src http://ftp.jp.debian.org/debian jessie main non-free contrib

-deb http://security.debian.org/ wheezy/updates main contrib non-free
-deb-src http://security.debian.org/ wheezy/updates main contrib non-free
+deb http://security.debian.org/ jessie/updates main contrib non-free
+deb-src http://security.debian.org/ jessie/updates main contrib non-free

 # wheezy-updates, previously known as 'volatile'
-deb http://ftp.jp.debian.org/debian wheezy-updates main contrib non-free
-deb-src http://ftp.jp.debian.org/debian wheezy-updates main contrib non-free
+deb http://ftp.jp.debian.org/debian jessie-updates main contrib non-free
+deb-src http://ftp.jp.debian.org/debian jessie-updates main contrib non-free

-deb http://ftp.jp.debian.org/debian wheezy-backports main contrib non-free
-deb-src http://ftp.jp.debian.org/debian wheezy-backports main contrib non-free
+deb http://ftp.jp.debian.org/debian jessie-backports main contrib non-free
+deb-src http://ftp.jp.debian.org/debian jessie-backports main contrib non-free

 #deb http://ftp.jp.debian.org/debian wheezy-lts main non-free contrib
 #deb-src http://ftp.jp.debian.org/debian wheezy-lts main non-free contrib
</code></pre>

<h2>upgrade, dist-upgrade</h2>

<p><a href="https://www.debian.org/releases/jessie/amd64/release-notes/ch-upgrading.ja.html#upgradingpackages" title="4.4. パッケージのアップグレード">4.4. パッケージのアップグレード</a> に以前は <code>aptitude</code> が推奨されていたこともあったが、今は <code>apt-get</code> がおすすめというようなことが書いてあったので、 <code>apt-get</code> で upgrade しました。</p>

<p>postgresql はまた /usr/share/doc/postgresql-common/README.Debian.gz をみて <code>pg_upgradecluster</code> が必要だと思いました。</p>

<p><code>Configuring libc6:amd64</code> のときに apache2 の restart に失敗しましたが、認証周りなどの設定の書き方が変わった影響だろうと思って、後で直せばいいということで気にせず進みました。</p>

<p>その他は特に問題なく dist-upgrade 自体は終わりました。</p>

<h2>apache2 の設定調整</h2>

<p><code>/etc/apache2/sites-available/*</code>, <code>/etc/apache2/sites-enabled/*</code> の <code>.conf</code> 化などは upgrade 前に作業しておけば停止時間が短くて済ませられたのに、と後から気付きました。</p>

<h3>認証・認可設定の変更</h3>

<p><code>/</code> はアクセス不可で <code>DocumentRoot</code> を個別にアクセス許可していたので、</p>

<pre><code>Order allow,deny
Allow from all
</code></pre>

<p>を</p>

<pre><code>Require all granted
</code></pre>

<p>に変更して回りました。</p>

<h3>mod_python</h3>

<p>apache の error.log を見ると</p>

<pre><code>The mod_python module can not be used on conjunction with mod_wsgi 4.0+. Remove the mod_python module from the Apache configuration.
</code></pre>

<p>というエラーが出ていたので、 <code>libapache2-mod-python</code> を purge したら apache2 が起動しました。
しかし後で <code>trac</code> で使っていたのに気付いたので、入れ直して代わりに <code>libapache2-mod-wsgi</code> の方を purge しました。</p>

<h3>.conf 化</h3>

<p>設定ファイルに <code>.conf</code> が必須化されていたので、 <code>site-available</code> のファイルを <code>hoge.example.com</code> から <code>hoge.example.com.conf</code> のようにに改名して <code>a2ensite</code> しなおしました。</p>

<p><code>conf.d</code> も available と enabled に仕組みが変わっていたので、
<code>/etc/apache2/conf.d/passenger.conf</code> も <code>conf-available</code> に移動して <code>a2enconf</code> しました。</p>

<h3>passenger-install-apache2-module</h3>

<p><code>sudo apache2ctl configtest</code> で起動しない原因を調べてみると、エラーメッセージを記録し忘れたのですが、<code>passenger</code> がリンクエラーで起動しないということになっていたので、 <code>passenger-install-apache2-module</code> を実行し直しました。</p>

<p>初回は開発用パッケージが足りないということで出てきたメッセージに従い <code>sudo apt-get install apache2-threaded-dev</code> でインストールして再実行して解決しました。 <code>apache2-dev</code> パッケージが入りました。</p>

<p>wheezy のときは <code>apache2-prefork-dev</code> パッケージを入れていたのですが、自動移行はされなかったようです。</p>

<h3>SSL 関連</h3>

<p><code>SSLCertificateChainFile</code> を指定していたところがあったので、 <code>SSLCertificateFile</code> に結合した証明書を指定するように移行しました。</p>

<h3>NameVirtualHost</h3>

<p><code>NameVirtualHost</code> を指定していたところを削除しました。</p>

<h2>trac</h2>

<p>trac のプロジェクトごとのページを開くと</p>

<pre><code>Error

TracError: The Trac Environment needs to be upgraded.

Run "trac-admin /srv/trac/fprog.org/testproject upgrade"
</code></pre>

<p>というメッセージが出ていたので、その通りに実行しました。</p>

<pre><code>% sudo trac-admin /srv/trac/fprog.org/testproject upgrade
Warning: Detected setuptools version 5.5.1. The environment variable 'PKG_RESOURCES_CACHE_ZIP_MANIFE
STS' must be set to avoid significant performance degradation.
アップグレードが終了しました。

次のコマンドを実行すると Trac のドキュメントをアップグレードできます:

  trac-admin /srv/trac/fprog.org/testproject wiki upgrade
</code></pre>

<p>wiki upgrade も促されたので、実行しました。</p>

<p>すると <a href="http://www.fprog.org/projects/testproject">http://www.fprog.org/projects/testproject</a> が</p>

<pre><code>設定エラー
None という名前の IRequestFilter インターフェイスの実装を見つけられません。コンポーネントが有効になっているかチェックするか、trac.ini の [trac] request_filters オプションを更新してください。
</code></pre>

<p>に変わったので、 <code>/srv/trac/fprog.org/testproject/conf/trac.ini</code> の</p>

<pre><code>request_filters = None
</code></pre>

<p>を</p>

<pre><code>request_filters =
</code></pre>

<p>に変更しました。
キーワードが一般的すぎて検索しきれなかったので、バグ報告などはしていません。</p>

<p><a href="http://www.fprog.org/projects">http://www.fprog.org/projects</a> の Available Projects を見て、他のプロジェクトも同様に upgrade と <code>request_filters</code> の修正をしました。</p>

<h2>nadoka さん</h2>

<p>iconv を使っていたところを kconv を使うように<a href="https://github.com/nadoka/nadoka/commit/328e01a5a2ae731ddc09f435dc4089eead3ba4ed">変更</a>しました。</p>

<h2>w3ml</h2>

<p>apache のエラーログに</p>

<pre><code>AH01215: ./w3ml:8:in `load'
AH01215: : /home/w3ml/etc/w3ml.conf:10: invalid multibyte char (UTF-8) (SyntaxError)
AH01215: /home/w3ml/etc/w3ml.conf:10: invalid multibyte char (UTF-8)
AH01215: \tfrom ./w3ml:8:in `&lt;main&gt;'
End of script output before headers: w3ml.cgi
</code></pre>

<p>と出ていたので、 <code>/home/w3ml/etc/w3ml.conf</code> の先頭に</p>

<pre><code># -*- coding: euc-jp -*-
</code></pre>

<p>を追加しました。
これで表示は問題なく見えるようになりましたが、メールの取り込みなどがちゃんと動くかどうかはまだ様子見です。</p>

<h2>tdiary</h2>

<p>ホスティングしている tdiary を確認してみると</p>

<pre><code>no such file to load -- redcarpet.so (LoadError)
/usr/lib/ruby/vendor_ruby/redcarpet.rb:1:in `require'
</code></pre>

<p>とうエラーが出ていて、 <code>dpkg -L ruby-redcarpet</code> を確認してみると <code>redcarpet.so</code> は 2.1 用しかなかったので、
wheezy にあげたときに <code>public_html/diary/index.rb</code> を <code>#!/usr/bin/ruby1.8</code> に変更していたのを
<code>#!/usr/bin/ruby</code> に変更しました。</p>

<p>すると次は <code>500 Internal Server Error</code> とだけ出るようになったので、 apache のエラーログを確認してみると</p>

<pre><code>AH01215: /usr/lib/ruby/2.1.0/cgi/util.rb:37:in `gsub': invalid byte sequence in UTF-8 (ArgumentError)
AH01215: \tfrom /usr/lib/ruby/2.1.0/cgi/util.rb:37:in `escapeHTML'
AH01215: \tfrom /usr/share/tdiary/index.rb:50:in `rescue in &lt;top (required)&gt;'
AH01215: \tfrom /usr/share/tdiary/index.rb:16:in `&lt;top (required)&gt;'
AH01215: \tfrom /usr/lib/ruby/2.1.0/rubygems/core_ext/kernel_require.rb:55:in `require'
AH01215: \tfrom /usr/lib/ruby/2.1.0/rubygems/core_ext/kernel_require.rb:55:in `require'
AH01215: \tfrom index.rb:2:in `&lt;main&gt;'
</code></pre>

<p>というエラーが出ていました。
そこで <code>/usr/share/tdiary/index.rb</code> を <code>coding: utf-8</code> から <code>coding: ascii-8bit</code> に変更したところ、
<code>public_html/diary/filter/antirefspam.rb:240: invalid multibyte char (UTF-8)</code> というエラーが確認できたので、
コメントが euc-jp で書かれていたのが確認できたので <code>antirefspam.rb</code> に <code>coding: euc-jp</code> を追加しました。
<code>public_html/diary/filter/default.rb</code> でも同様のエラーが出たので <code>coding: ascii-8bit</code> を追加したところ、
正常に表示できるようになりました。</p>

<p>最初の <code>500 Internal Server Error</code> については <a href="https://github.com/tdiary/tdiary-core/issues/555">tdiary-core に報告</a>したところ、<a href="https://github.com/tdiary/tdiary-core/commit/59557302e2dfd0cfa86b04b5d05e74dfe917900e">直った</a> ようです。</p>

<p>修正コミットでは update.rb も同様の修正がされていたので、 <code>/usr/share/tdiary/update.rb</code> も同様に <code>coding: ascii-8bit</code> にしておきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第71回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-03-05-rubykansai71.html"/>
    <updated>2016-03-05T12:58:44+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai71</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/37341" title="第71回 Ruby関西 勉強会">第71回 Ruby関西 勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>オープニング</h2>

<ul>
<li>開場が 10 分前にしかできなくて準備の時間の都合で受付は休憩の時に</li>
<li>会場説明</li>
<li>yasulab さんの資料作成の都合で順番を入れ替えて開始</li>
</ul>


<h2>中級者向け: 楽速開発 on Rails by @ogomr (前半)</h2>

<ul>
<li><a href="https://speakerdeck.com/ogom/enjoy-agile-development">https://speakerdeck.com/ogom/enjoy-agile-development</a></li>
<li>前回のつじたさんのどんな gem を使っていますかという質問に対するアンサーセッションのような幹事でどんな gem を使って開発しているかという紹介</li>
<li>デミングサイクル</li>
<li>データベースのスキーマでデミングサイクル</li>
<li>rspec や spring や guard などの 8 個の gem</li>
<li>ridgepole gem というのは知らなかった</li>
<li>rails-erd gem も使っているらしい</li>
<li>guard shell で <code>db/migrate/*.rb</code> が変わったら処理をしている</li>
<li>seed 関係の gem 3 個 (<code>seedbank</code>, <code>seed_dump</code>, <code>seed-fu</code>)</li>
<li>seed 関係の guard shell 設定</li>
<li><code>seed_dump</code> gem は SQL ではなく rb ファイルに dump してくれる</li>
<li>rails console で試せるし seed ファイルにも再利用できる</li>
<li>guard を使っている人をきいてみたら会場には少なかった</li>
<li>rails で開発したことがある人は多かった</li>
<li><code>factory_girl</code> は 1/3 程度</li>
<li>デモの前に休憩</li>
</ul>


<h2>休憩</h2>

<ul>
<li>休憩の間に受付</li>
</ul>


<h2>中級者向け: 楽速開発 on Rails by @ogomr (後半)</h2>

<ul>
<li>質問</li>
<li>guard とは grunt のようなものなのかという質問</li>
<li>同じようなもの。時系列的には guard の方が古い</li>
<li>guard の実行時間は 1,2 秒ぐらい</li>
<li>デモ</li>
<li>普段はサブディスプレイを使っている</li>
<li><code>rails new</code> するところからライブコーディングによるデモ</li>
<li><code>rails-erd</code> を使っている人は少しいた</li>
<li><code>.erdconfig</code> ファイルで設定できる</li>
<li>Guardfile の書き換え</li>
<li>spring を使っているので bin/rspec を使うように書き換え</li>
<li>その他 rspec 関係の追加とか</li>
<li>factories も監視して rspec を動かしている</li>
<li>generators で不要なものを false に設定</li>
<li>scaffold で生成</li>
<li>pdf の変化で open コマンドを呼んでいるのでサブディスプレイに最新の状態が自動表示される</li>
<li>seed の guard shell 設定</li>
<li>seedbank を使って seed の設定</li>
<li>データベースのカラム追加のデモ</li>
</ul>


<h2>休憩</h2>

<ul>
<li>14:30-14:40</li>
<li>休憩時間中に yasulab さんから質問</li>
<li>rails で開発したことのない人もいる</li>
<li>ruby を使ったことない人はいないみたいだった</li>
<li>k-of.jp などのイベントなどの時にも配っている豆本をアナウンスしたら人気だった</li>
</ul>


<h2>初心者向け: Railsチュートリアルの変遷からみる今ドキのRails勉強法 by @yasulab</h2>

<ul>
<li>第2版から第3版の変更点を解説</li>
<li>Rails 活用事例と学習曲線</li>
<li>第2版 vs. 第3版</li>
<li>第3版では画像アップロードが増えている</li>
<li>第2版でよく見かけた例</li>
<li>セットアップ (第1章) で挫折</li>
<li>テストがうまく動かなくて挫折</li>
<li>近くにいないと問題解決しづらい</li>
<li>第2版から第3版での改善点</li>
<li>Cloud9 を使ってブラウザで開発 (OS非依存)</li>
<li>ログイン機構がモダンになっている</li>
<li>RSpec から minitest になって学習コストが低くなっている</li>
<li>ActionMailer を使ったメール送信を解説</li>
<li>マイクロポストに画像投稿機能が追加</li>
<li>他、独自バリデーションやメタプロの導入など</li>
<li>今どきの Rails 学習法</li>
<li><ol>
<li>学習の優先度付け</li>
</ol>
</li>
<li>第２版によくあった批判</li>
<li>テスト技術が学びたいわけじゃない</li>
<li>環境構築を学びたいわけじゃない</li>
<li><ol>
<li>まずは体験、あとで探求</li>
</ol>
</li>
<li><ol>
<li>クラウド IDE を最大限活用する</li>
</ol>
</li>
<li>第2版と第3版の違い</li>
<li>第1章における離脱率の激減</li>
<li>解説セミナーの平均点数上昇</li>
<li>ちょっと未来の話</li>
<li>「まずは」の裾野を広げて「あとで」の探求先の拡大</li>
<li>Learn Enough シリーズ (前提知識を 0 に)</li>
<li>everyday Rails</li>
<li>Rails ガイド</li>
</ul>


<h2>休憩</h2>

<ul>
<li>15:21-15:30</li>
<li>k-of.jp や書籍の紹介</li>
</ul>


<h2>Ruby 初級者向けレッスン 57回 ─── テスト駆動開発 by @higaki</h2>

<ul>
<li><a href="http://slide.rabbit-shocker.org/authors/kou/rubykaigi-2015/" title="The history of testing framework in Ruby">The history of testing framework in Ruby</a></li>
<li><a href="http://magazine.rubyist.net/?0021-Rspec">http://magazine.rubyist.net/?0021-Rspec</a></li>
<li><a href="http://magazine.rubyist.net/?0042-FromCucumberToTurnip">http://magazine.rubyist.net/?0042-FromCucumberToTurnip</a></li>
<li>レッスンでは test-unit gem を使用</li>
<li><a href="http://goyoki.hatenablog.com/entry/20120301/1330608789" title="xUnit Test PatternsのTest Doubleパターン(Mock、Stub、Fake、Dummy等の定義)">xUnit Test PatternsのTest Doubleパターン(Mock、Stub、Fake、Dummy等の定義)</a></li>
<li>kagemusha gem</li>
<li>mocha gem</li>
<li>rr gem</li>
<li>レッスンには出てこなかったが、参考として、他に時刻専用の gem として timecop gem とか delorean gem とかもある</li>
<li><a href="https://github.com/higaki/learn_ruby_kansai_71">https://github.com/higaki/learn_ruby_kansai_71</a></li>
<li>参考: <a href="http://goyoki.hatenablog.com/entry/20110202/1296663870" title="XP祭り関西にてユニットテストの保守に関する発表">XP祭り関西にてユニットテストの保守に関する発表</a></li>
</ul>


<h2>クロージング</h2>

<ul>
<li><a href="https://ja-jp.facebook.com/RubyKansai">https://ja-jp.facebook.com/RubyKansai</a></li>
<li><a href="https://ruby-maizuru.doorkeeper.jp/" title="Ruby舞鶴">Ruby舞鶴</a></li>
<li><a href="https://dddrb.doorkeeper.jp/" title="DDD.rb">DDD.rb</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第70回 Ruby関西 勉強会で発表しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-01-09-rubykansai70.html"/>
    <updated>2016-01-09T14:01:12+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai70</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/36351" title="第70回 Ruby関西 勉強会">第70回 Ruby関西 勉強会</a>
で発表してきました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>Ruby 2.3.0 の新機能について</h2>

<p>この内容で発表しました。</p>

<iframe src="http://slide.rabbit-shocker.org/authors/znz/rubykansai70-ruby230/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="http://slide.rabbit-shocker.org/authors/znz/rubykansai70-ruby230/" title="Ruby 2.3.0 の新機能について">Ruby 2.3.0 の新機能について</a>
</div>


<h2>10 分休憩</h2>

<h2>gems on Rails</h2>

<ul>
<li>What is a gem?</li>
<li>gem を探す</li>
<li><a href="https://rubygems.org/">https://rubygems.org/</a></li>
<li><a href="https://www.ruby-toolbox.com/">https://www.ruby-toolbox.com/</a></li>
<li>gem を選ぶ</li>
<li>ダウンロード数とか</li>
<li>コードの相性</li>
<li>作者やロゴも基準にしている</li>
<li>gem を使う</li>
<li>Github の README, Wiki を読む、から始まる</li>
<li>個人的に良く使う gems on Rails</li>
<li>認証・権限周辺 : devise, cancancan, pundit</li>
<li>入出力ドキュメント : prawn, pdfkit, rubyzip, axlsx, docx_templater</li>
<li>(docx_templater は知らなかった)</li>
<li>その他 : kaminari, carrierwave, rails-assets, whenever, simplecov</li>
<li>みなさんのお気に入りの gems</li>
<li>有名な rails 製アプリ (GitLab とか) の Gemfile を参考にする</li>
<li><a href="https://github.com/gitlabhq/gitlabhq/blob/master/Gemfile">https://github.com/gitlabhq/gitlabhq/blob/master/Gemfile</a></li>
<li><a href="http://awesome-ruby.com/">http://awesome-ruby.com/</a></li>
<li><a href="http://www.thinreports.org/">http://www.thinreports.org/</a></li>
</ul>


<h2>10 分休憩</h2>

<h2>Rails Engine のすすめ</h2>

<ul>
<li>Engine の例 : turbolinks, devise</li>
<li>サービス指向: Rails</li>
<li>コンポーネント指向 : Rails Engine, React and Redux</li>
<li>オブジェクト指向 : Ruby</li>
<li>デモ</li>
<li><code>mount なんとか::Engine =&gt; "/api"</code> みたいにして使う</li>
<li>Engine のメリット・デメリット</li>
<li>たとえば <code>/api</code> を <code>/v1/api</code> にするのも <code>mount</code> のところを変えるだけ</li>
<li>Rails 5.0 ではデフォルトでは <code>jbuilder</code> は使わなくなって <code>render json: @products</code> で <code>to_json</code> を呼び出すだけになっている。</li>
<li>React Redux のクライアントは Electron でネイティブにも対応できる</li>
<li>サンプルアプリは <a href="https://github.com/dddrb/bouquet">https://github.com/dddrb/bouquet</a></li>
</ul>


<h2>5 分ぐらい休憩</h2>

<h2>Ruby 初級者向けレッスン (ブロック)</h2>

<ul>
<li><a href="https://github.com/higaki/learn_ruby_kansai_70">https://github.com/higaki/learn_ruby_kansai_70</a></li>
</ul>


<h2>クロージング</h2>

<ul>
<li><a href="https://rubyassociation.doorkeeper.jp/events/35687" title="[大阪] Rubyビジネスセミナー loTのエコシステムとワークライフバランス">大阪 Rubyビジネスセミナー loTのエコシステムとワークライフバランス</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gem install rabbit に失敗したのを解決した]]></title>
    <link href="http://blog.n-z.jp/blog/2015-12-28-gem-install-rabbit.html"/>
    <updated>2015-12-28T18:48:40+09:00</updated>
    <id>http://blog.n-z.jp/blog/gem-install-rabbit</id>
    <content type="html"><![CDATA[<p>Mac OS X 上で <code>gem install rabbit</code> でひっかかったので、その解決方法のメモです。</p>

<!--more-->


<h2>gobject-introspection</h2>

<p><a href="http://www.cozmixng.org/~w3ml/index.rb/rabbit-shocker/msg/1283">http://www.cozmixng.org/~w3ml/index.rb/rabbit-shocker/msg/1283</a>
( <a href="https://gist.github.com/znz/59ae1b8785a640916ce9">https://gist.github.com/znz/59ae1b8785a640916ce9</a> )
のようなエラーで gobject-introspection-3.0.7 のインストールで失敗したので、
ML で教えてもらったように
<code>PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig gem install rabbit</code>
でインストールすると進むようになりました。</p>

<h2>poppler</h2>

<p>次に poppler gem (3.0.7) のエラーでひっかかったのですが ( <a href="http://www.cozmixng.org/~w3ml/index.rb/rabbit-shocker/msg/1285">http://www.cozmixng.org/~w3ml/index.rb/rabbit-shocker/msg/1285</a> )、
<a href="https://bugs.launchpad.net/poppler-python/+bug/1528489">https://bugs.launchpad.net/poppler-python/+bug/1528489</a> で同じエラーが python binding で報告されていて、原因は poppler-0.39.0 での変更ということだったので、
poppler-0.38.0 に戻すことにした。</p>

<p>まず homebrew のディレクトリに移動して <code>Formula/poppler.rb</code> のログをみて poppler 0.38.0 に戻せる commit hash を調べて checkout して、インストールし直して、 poppler は 0.38.0 で止めておきました。</p>

<pre><code>    cd /usr/local
    git log Library/Formula/poppler.rb
    git checkout 6f7b9d57b25451e811e8901c560d17abd7a464f9
    brew reinstall poppler
    git checkout master
    brew pin poppler
</code></pre>

<p>問題が解決したら <code>brew unpin poppler</code> でまた最新に戻せます。</p>

<p>ruby-gnome2 の方でも <a href="https://github.com/ruby-gnome2/ruby-gnome2/commit/3dda85661515d71101f1028dc7d68d4e53de45b1">https://github.com/ruby-gnome2/ruby-gnome2/commit/3dda85661515d71101f1028dc7d68d4e53de45b1</a> でなおっているので、
poppler gem の新しいバージョンがリリースされたら解決しそうです。</p>

<h2>成功</h2>

<p>poppler をダウングレードして <code>PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig gem install rabbit</code> で rabbit のインストールは成功しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2015 の 3 日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2015-12-13-rubykaigi-2015.html"/>
    <updated>2015-12-13T10:22:18+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi-2015</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2015" title="RubyKaigi 2015">RubyKaigi 2015</a> の 3 日目に参加したので、そのメモです。</p>

<!--more-->


<h2>Ruby Committers vs the World</h2>

<ul>
<li>matz が本日は来ていないので、司会が個人的に matz に質問していた話</li>
<li>Soft Typing の進捗どうですか</li>
<li>近年 <code>RUBY_VERSION</code> の bump しかコミットがないですがどうですか</li>
<li>The commits of the Year (注目のコミット)</li>
<li>check incompatible libruby (r50412)[<a href="http://svn.ruby-lang.org/cgi-bin/viewvc.cgi?view=revision&amp;revision=50412">http://svn.ruby-lang.org/cgi-bin/viewvc.cgi?view=revision&amp;revision=50412</a>]</li>
<li>rvm がインストール済みの gem を引き連れて ruby のバージョンをあげる機能 (migrate) があるが、それが問題を引き起こすので shared library の gem を入れ直さないといけない</li>
<li>rdoc/rubygems backports (hsbt)</li>
<li>コミットログにダメ出し</li>
<li><code>explicit_bzero(3)</code> (kosaki)</li>
<li>何かあった時に情報を盗みにくくするためのゼロクリアが最適化で消されることがある</li>
<li>最適化で消されないゼロクリア</li>
<li>code size diet (normal)</li>
<li>自分で普通という人は普通じゃない</li>
<li>optimization of <code>newobj_of()</code> (Kazuho Oku さん) <a href="http://svn.ruby-lang.org/cgi-bin/viewvc.cgi?view=revision&amp;revision=52072">r52072</a></li>
<li>frozen string literal の件で炎上した影響</li>
<li><a href="http://blog.kazuhooku.com/2015/10/ruby.html" title="雑なツイートをしてしまったばかりにrubyを高速化するはめになった俺たちは！ ">雑なツイートをしてしまったばかりにrubyを高速化するはめになった俺たちは！ </a></li>
<li><a href="https://twitter.com/kazuho/status/675858887803727872">https://twitter.com/kazuho/status/675858887803727872</a></li>
<li>The new committers</li>
<li>odaira さん</li>
<li>AIX, z/Linux など IBM 関連</li>
<li>sho-h さん</li>
<li>rdoc とるりまの質を高めたい</li>
<li>gogotanaka さん</li>
<li>cmath.rb のメンテナ</li>
<li>yuki24 さん</li>
<li><code>did_you_mean</code> gem</li>
<li>sonots さん</li>
<li>logger のメンテナを nahi さんから引き継いだ</li>
<li>yui-knk さん</li>
<li>Rails のテストで壊れた時に trunk での変更が原因だったら、足りないテストを足したり直したり</li>
<li>AMA (Ask Me Anything)</li>
<li><a href="https://twitter.com/Re_Shia/status/675837047525871616">rubyにコントリビュートしたいと思う人に勉強しておくといいよ、と思うものを一つだけあげるとしたら何でしょうか！</a></li>
<li>hsbt さんの発表資料を見る</li>
<li>akr さんの本を参考にする <iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4774178020" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></li>
<li><a href="https://twitter.com/frsyuki/status/675845609492889600">Python使えって言われるんですがどうしたらいいですか？</a></li>
<li><a href="https://twitter.com/yancya/status/675845804599324675">今後、数値計算分野で Python を食える日が来るでしょうか</a></li>
<li>Python を使って欲しいものを Ruby に持ってくる活動を続けていく</li>
<li><a href="https://twitter.com/tagomoris/status/675848535019917314">Matz以外のコミッタが並行・並列性の提供にどう考えているか聞きたいです!</a></li>
<li><a href="http://togetter.com/li/912075" title="怒り駆動開発に炎上駆動開発！コミッターが語るRubyの1年と未来。Ruby Committers vs the World #rubykaigi #rubykaigiA - Togetterまとめ">怒り駆動開発に炎上駆動開発！コミッターが語るRubyの1年と未来。Ruby Committers vs the World #rubykaigi #rubykaigiA - Togetterまとめ</a></li>
</ul>


<h2>Writing web application in Ruby</h2>

<ul>
<li>Ubiregi</li>
<li>React.js</li>
<li>gohra <a href="https://github.com/youchan/gohra">https://github.com/youchan/gohra</a></li>
<li>Hyalite <a href="https://github.com/youchan/hyalite">https://github.com/youchan/hyalite</a></li>
<li>Opal</li>
<li>Symbol がなくて String と同じ扱い</li>
<li><code>Kernel#proc</code> の引数なしが使えないので、引数リストに <code>&amp;block</code> をつけて受け取る必要がある</li>
<li>それ以外は Ruby として問題なくかけた</li>
<li>React.js と Virtual DOM</li>
<li>opal-browser</li>
<li>JSX
-<code>Hyalite::Component::ShortHand</code></li>
<li>Example: TodoMVC</li>
<li>このスライド自体も Hyalite のサンプル (twitter ではここまで rabbit だと思っていた人が多数)</li>
<li>TodoMVC の例の説明</li>
<li>Ruby-ish implementation</li>
<li>isomorphic</li>
<li>スライド: <a href="http://rubykaigi.youchan.org/">http://rubykaigi.youchan.org/</a></li>
<li><a href="http://togetter.com/li/912112" title="RubyでWebアプリ!? ReactjsぽいことができるHyaliteを使えばMatzが追いかけてくるスライドもすぐ作れるよ #rubykaigi #rubykaigiB - Togetterまとめ">RubyでWebアプリ!? ReactjsぽいことができるHyaliteを使えばMatzが追いかけてくるスライドもすぐ作れるよ #rubykaigi #rubykaigiB - Togetterまとめ</a></li>
</ul>


<h2>Lunch on your own</h2>

<p>今日も築地の方に行っていました。</p>

<h2>Refinements - the Worst Feature You Ever Loved</h2>

<ul>
<li>monkey patch の例</li>
<li>refinements の例</li>
<li>module の中で</li>
<li>top level で</li>
<li>eval の中で</li>
<li>security risks</li>
<li>performance issues</li>
<li>confusing corner case</li>
<li>dynamically scoped refinements の利点と欠点</li>
<li>refinements today</li>
<li>現状は lexical scope</li>
<li>the three use cases again</li>
<li>refinements today の欠点と利点</li>
<li>a deep problem</li>
<li><a href="http://togetter.com/li/912136" title="Ruby2.0で導入されたRefinementsという機能のメリットとリスクについて #rubykaigi #rubykaigiB - Togetterまとめ">Ruby2.0で導入されたRefinementsという機能のメリットとリスクについて #rubykaigi #rubykaigiB - Togetterまとめ</a></li>
</ul>


<h2>Discussion on Thread between version 1.8.6 and 2.2.3</h2>

<ul>
<li><a href="https://asakusarb.doorkeeper.jp/events/36106" title="Asakusa.rb meetup after RubyKaigi 2015">Asakusa.rb meetup after RubyKaigi 2015</a></li>
<li><a href="https://jishin.net/">https://jishin.net/</a></li>
<li>100スレッド*100プロセス</li>
<li><code>Thread#status</code></li>
<li>Cases of threads got stuck</li>
<li>Case 1</li>
<li>2.2.3 の方が CPU usage は増えていた</li>
<li>実行回数は変わっていなかった</li>
<li>Case 2</li>
<li>例外のメモリ使用量は 2.2.3 で減っていた</li>
<li>timeout で例外処理があると Case 1 よりメモリ使用量が多い</li>
<li>conclusion: (thread is) too complicated to understand</li>
<li>質疑応答</li>
<li>マルチスレッドは IO 多重化などを想定していて、処理が回っているものを多重化しているものはあまり想定していなかったという話など</li>
<li><a href="http://togetter.com/li/912153" title="スレッドをいっぱい立ててみた時のお話。10000スレッドでRubyはどうなるか？ #rubykaigi #rubykaigiB - Togetterまとめ">スレッドをいっぱい立ててみた時のお話。10000スレッドでRubyはどうなるか？ #rubykaigi #rubykaigiB - Togetterまとめ</a></li>
</ul>


<h2>Plugin-based software design with Ruby and RubyGems</h2>

<ul>
<li>plugin の例として Firefox Add-on など</li>
<li>How did I design plugin architecture?</li>
<li>Plugin Architecture Design Patterns</li>
<li>traditional</li>
<li>Dependency Injection</li>
<li>Dependency Injection + Plugin loader</li>
<li>Plugin Architecture of Fluentd</li>
<li>Plugin Architecture of Embulk</li>
<li>embulk の demo</li>
<li>embulk-filter-kuromoji</li>
<li>jar ファイルの頭にシェルスクリプトと bat ファイルを埋め込む話</li>
<li>Pitfalls &amp; Challenges</li>
<li><a href="http://togetter.com/li/912157" title="プラグインベースのソフトウェアとは？開発とテストを容易にするデザインパターン #rubykaigi #rubykaigiA - Togetterまとめ">プラグインベースのソフトウェアとは？開発とテストを容易にするデザインパターン #rubykaigi #rubykaigiA - Togetterまとめ</a></li>
</ul>


<h2>Afternoon Break</h2>

<p>スピーカーやコミッターのサインを集めているボードに書いてきました。
Keynote が A ホールのみなので、この後はずっと A ホールにいることにしました。</p>

<h2>Request and Response</h2>

<ul>
<li>HTTP2</li>
<li>利点</li>
<li>バイナリ</li>
<li>多重化</li>
<li>ヘッダーを圧縮</li>
<li>SSL 使用</li>
<li>サーバープッシュ</li>
<li>Google Chrome だと chrome://net-internals/#spdy で確認できる</li>
<li>Firefox は x-firefox-spdy ヘッダが付いている</li>
<li>Rack</li>
<li>Adapter pattern で依存の爆発を解決した</li>
<li>Rack Middleware</li>
<li>Rails アプリでの例</li>
<li>Web Server parses the Request</li>
<li><code>Rails::Application</code> を継承した YourApp</li>
<li><code>Rack::SendFile</code>, <code>ActionDispatch::Static</code>, &hellip;, <code>Router</code></li>
<li>Rack 山</li>
<li>長すぎるし複雑</li>
<li>Rack API の問題</li>
<li>ストリーム</li>
<li>HTTP2 のサーバーの例</li>
<li>質疑応答</li>
<li><a href="https://github.com/tenderlove/ds9">https://github.com/tenderlove/ds9</a> はなぜ ds9 という名前なのか</li>
<li>スタートレック</li>
<li>nghttp2 の ng は next generation</li>
<li>(スタートレックをよく知らないのでよくわからず)</li>
<li>どのくらい発表練習した?</li>
<li>翻訳 2 週間、練習 5 時間</li>
<li>サーバープッシュの設定はどこに?</li>
<li>view helper で自動</li>
<li>ソースコードを読んだら IPv6 に対応していないように見えたが IPv6 対応の方針は? <a href="https://twitter.com/takano32/status/675942535211171841">https://twitter.com/takano32/status/675942535211171841</a></li>
<li>わからない</li>
<li>パッチを送ってください</li>
<li>Rack 3 はたぶん API が変わる</li>
</ul>


<h2>Actor, Thread and me</h2>

<ul>
<li>アーロンの後はやりにくい <a href="https://twitter.com/m_seki/status/675938103735902209">https://twitter.com/m_seki/status/675938103735902209</a></li>
<li>dRuby 本 10 周年</li>
<li>agenda の Really? が重要</li>
<li>アクターモデル</li>
<li>Ether (エーテル) : メッセージを伝搬する何か</li>
<li>Send と Receive だけで考える</li>
<li><code>oso_matz_RPC</code></li>
<li><code>choro_matz</code></li>
<li>後でやる作戦は誰も止まっていないのにシステムが止まってしまうことがある</li>
<li><code>jushi_matz</code></li>
<li>おすすめ</li>
<li>システム全体はアクターモデルで考える</li>
<li>アクターはマルチスレッドで動く</li>
<li>Fiber を使ってみるために bartender というのを作った <a href="https://github.com/seki/bartender">https://github.com/seki/bartender</a></li>
<li>全員が Queue を持っているというのを書いてみた</li>
<li>使い道がなかった</li>
<li>中央集権型 <code>Rinda::TupleSpace</code> を使う</li>
<li><code>todo_matz</code></li>
<li>アクターはより良いスレッドではない感が共有できたはず</li>
<li>スポンサーが大事</li>
<li>質疑応答</li>
<li>スレッドの今後について</li>
<li>現状で満足している</li>
<li>1.8 の方が良かった</li>
<li>上司に 3 倍速くしろといわれてるんですが</li>
<li>IO 待ちばっかりなら今のスレッドで良いのではないか</li>
<li>unicorn (プロセス) から puma (マルチスレッド) に変更したが、リソース的にも速度的にも改善しなかった</li>
<li>Fiber の使った例のところでもっと良い書き方があるという話</li>
</ul>


<h2>スポンサーセッション (Speee)</h2>

<ul>
<li>意外と知っている人が多い</li>
<li>いろんなことをやっているので紹介するのは難しい</li>
<li>IT 企業対抗 Splatoon 大会</li>
<li>Speee ラウンジ</li>
</ul>


<h2>Ruby: 2020 - how do we get to Ruby3x3 (Keynote)</h2>

<ul>
<li>CRuby には JIT が必要</li>
<li>Part 1: Performance</li>
<li>Parallelism</li>
<li>Part 2. Survey of the past</li>
<li>2a. SELF <a href="https://ja.wikipedia.org/wiki/Self">https://ja.wikipedia.org/wiki/Self</a></li>
<li>2b. Strongtalk <a href="https://en.wikipedia.org/wiki/Strongtalk">https://en.wikipedia.org/wiki/Strongtalk</a></li>
<li>2c. V8</li>
<li>JIT Compiler Types</li>
<li>Tracing JITs</li>
<li>Method JITs</li>
<li>Partial Evaluation</li>
<li>Part 4: Comparison</li>
<li>Part 5: A Proposal</li>
<li><code>[1,2].min</code> を最適化する話</li>
<li>MIPASWAP = Matz is Pragmatic And So We Are Pragmatic ((スライドでは And が抜けていたらしい)[<a href="https://twitter.com/s_osa_/status/675967202814779392">https://twitter.com/s_osa_/status/675967202814779392</a>])</li>
<li>質疑応答</li>
</ul>


<h2>Closing</h2>

<ul>
<li>819 Rubyists! <a href="https://twitter.com/nhance/status/675971298816823296">https://twitter.com/nhance/status/675971298816823296</a></li>
<li>すし詰め <a href="https://twitter.com/yoshiaki_0614/status/675974594025648128">https://twitter.com/yoshiaki_0614/status/675974594025648128</a></li>
<li>RubyKaigi 2016</li>
<li>Sep. 8th .. 10th</li>
<li>京都国際会館</li>
<li>価格は未定だが今年よりは安くしたい</li>
</ul>


<h2>全体の感想</h2>

<ul>
<li>英語がさっぱりだった。</li>
<li>1 日目の寿司チケットを使い損ねた。</li>
<li>本を買うかどうか迷っていたら、買いたかった本はすでに売り切れていて、買わずに済んだ。(荷物が重くならずに済んだ。)</li>
<li>2 日目の会場 Wi-Fi の調子が悪かった。</li>
<li>3 日目も調子が悪いタイミングがあったが、何度かつなぎ直していたら治った。</li>
<li><a href="http://blog.rubykaigi.org/">http://blog.rubykaigi.org/</a> が更新されていなかった。</li>
<li>天気が微妙だった。</li>
<li>久しぶりの人にいろいろ会えた。</li>
<li>みられなかった発表は <a href="http://togetter.com/id/tg__dev">http://togetter.com/id/tg__dev</a> の togetter を参考にスライドを読むと良さそう。</li>
<li>宿が歩いて移動できる範囲で良かった。(会場まで徒歩 20 分ぐらいの場所だった。)</li>
<li>ちょっと遅れ気味の日もあったけど、セッションの開始には遅刻せずに毎日朝から参加できた。</li>
</ul>

]]></content>
  </entry>
  
</feed>
