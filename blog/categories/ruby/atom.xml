<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | ZnZ Blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-10-08T22:38:00+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[doorkeeper gem の API のクライアント]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-08-doorkeeper-api-client.html"/>
    <updated>2013-10-08T21:06:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/doorkeeper-api-client</id>
    <content type="html"><![CDATA[<p><a href="http://rubygems.org/gems/doorkeeper">doorkeeper gem</a>
で API を作る方は
<a href="https://github.com/applicake/doorkeeper-provider-app">doorkeeper-provider-app</a>
というサンプルの
<code>app/controllers/api/</code>
以下などをみればすぐにわかったのですが、
API を呼び出す方は
<a href="https://github.com/applicake/doorkeeper/wiki/Create-a-OmniAuth-strategy-for-your-provider">OmniAuth の中でユーザーの情報を取り出す</a>
だけならすぐに出来たのですが、
コントローラーの中など呼び出す方法は
<a href="https://github.com/applicake/doorkeeper-devise-client">doorkeeper-devise-client</a>
を見てもよくわからなかったので、まとめてみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>provider 側

<ul>
<li>rails 3.2.14</li>
<li>doorkeeper 0.7.3</li>
</ul>
</li>
<li>client 側

<ul>
<li>rails 4.0.0</li>
<li>devise 3.1.1</li>
<li>omniauth 1.1.4</li>
<li>omniauth-oauth2 1.1.1</li>
<li>oauth2 0.8.1</li>
</ul>
</li>
</ul>


<h2>準備</h2>

<p>まず
<a href="https://github.com/applicake/doorkeeper/wiki/Create-a-OmniAuth-strategy-for-your-provider">Create a OmniAuth strategy for your provider</a>
を参考にして、
OmniAuth の中で
<code>access_token.get('/api/v1/me.json').parsed</code>
は出来るところまでは準備しておきます。</p>

<p>目的としては、
この
<code>access_token</code>
が認証より後で呼ばれる他のコントローラーの中で取得できれば良いということになります。</p>

<p>余談ですが、
doorkeeper の wiki は
<a href="https://github.com/applicake/doorkeeper/wiki/Supported-Ruby-&amp;-Rails-versions">Supported Ruby &amp; Rails versions</a>
のように情報が古いまま放置されているページもあるようなので、
<a href="https://github.com/applicake/doorkeeper">README</a>
などのソースコード側のドキュメントも参照した方が良さそうです。</p>

<h2>必要なもの</h2>

<p><code>access_token</code>
は
<code>OAuth2::AccessToken</code>
クラスのオブジェクトです。</p>

<p>生成するには</p>

<ul>
<li><code>OAuth2::Client</code> のオブジェクト</li>
<li>認証で取得した <code>token</code></li>
</ul>


<p>が必要になります。</p>

<p><code>OAuth2::Client</code>
の生成には</p>

<ul>
<li><code>client_id</code></li>
<li><code>client_secret</code></li>
<li>URL</li>
</ul>


<p>が必要になります。</p>

<h2>token の保存</h2>

<p>まず
<code>OAuth2</code>
の認証で取得した
<code>token</code>
を保存しておく必要があります。</p>

<p><code>Users::OmniauthCallbacksController#doorkeeper</code>
で
<code>session[:doorkeeper_token] = request.env["omniauth.auth"]["credentials"]["token"]</code>
のようにしてセッションなどの後で使える場所に保存しておきます。</p>

<p>後で調べてわかったのですが、
<a href="https://github.com/applicake/doorkeeper-devise-client/blob/master/app/controllers/users/omniauth_callbacks_controller.rb">doorkeeper-devise-client の Users::OmniauthCallbacksController</a>
では
<code>request.env["omniauth.auth"].credentials.token</code>
を
<code>user.doorkeeper_access_token</code>
でデータベースに保存していました。</p>

<h2>OAuth2::Client の作成</h2>

<p><a href="https://github.com/applicake/doorkeeper-devise-client/blob/master/app/controllers/application_controller.rb">doorkeeper-devise-client の ApplicationController</a>
では必要な情報は定数経由で受け取るようになっていました。</p>

<p>今回は
<code>devise</code>
と
<code>omniauth-oauth2</code>
を使っているので、
その情報を使って生成するようにしました。
要点だけまとめると以下のコードになります。</p>

<p>```ruby</p>

<pre><code>config = Devise.omniauth_configs[:doorkeeper]
strategy = config.strategy_class.new(*config.args)
client = strategy.client
</code></pre>

<p>```</p>

<h2>OAuth2::AccessToken の生成</h2>

<p>ここまで準備ができれば後は
<code>OAuth2::AccessToken.new</code>
するだけです。</p>

<p>まとめると以下のコードになります。</p>

<p>```ruby
  def access_token</p>

<pre><code>return @access_token if defined?(@access_token)
config = Devise.omniauth_configs[:doorkeeper]
strategy = config.strategy_class.new(*config.args)
token = session[:doorkeeper_token]
@access_token = OAuth2::AccessToken.new(strategy.client, token)
</code></pre>

<p>  end
```</p>

<h2>API 呼び出し</h2>

<p><code>access_token</code>
が出来たら後は呼び出しに使うだけです。</p>

<p>単純な情報取得は
<code>get</code>
して
JSON
なら
<code>parsed</code>
を呼び出すだけです。</p>

<p><code>ruby
  access_token.get("/api/v1/me.json").parsed
  access_token.get("/api/v1/posts.json").parsed
</code></p>

<p>今回は連携して書き込みたいというのが目的だったため、
<code>post</code>
も使いました。</p>

<p>モデルの例としては
<code>rails g scaffold post title body:text</code>
で API の提供側では以下の実装とします。</p>

<p>```ruby app/controllers/api/v1/posts_controller.rb
module Api::V1
  class PostsController &lt; ApiController</p>

<pre><code>doorkeeper_for :index
doorkeeper_for :create
respond_to     :json

def index
  respond_with Post.all
end

def create
  post = Post.new(params[:post])
  post.user = current_resource_owner
  post.save!
  respond_with post
end
</code></pre>

<p>```</p>

<p>呼び出し側は以下のようになります。</p>

<p><code>ruby
access_token.post("/api/v1/posts", params: { post: { title: title, body: body } })
</code></p>

<p><code>params</code>
による指定は
<a href="https://github.com/intridea/oauth2/blob/master/lib/oauth2/access_token.rb">OAuth2::AccessToken</a>
のソースをみて推測しました。</p>

<h2>scope 付き API 提供</h2>

<p>書き込みも許可すると
<code>scope</code>
を分けたくなります。</p>

<p>doorkeeper 側では
<a href="https://github.com/applicake/doorkeeper/wiki/Using-Scopes">Using Scopes</a>
を参考にして</p>

<ul>
<li>initializers に scopes 追加</li>
<li>翻訳追加</li>
<li>API に scopes 追加</li>
</ul>


<p>をしておきます。</p>

<p><code>ruby config/initializers/doorkeeper.rb
  default_scopes  :public
  optional_scopes :admin, :write
</code></p>

<p>```ruby app/controllers/api/v1/posts_controller.rb</p>

<pre><code>doorkeeper_for :index,  :show,   scopes: [:public]
doorkeeper_for :create, :update, scopes: [:admin, :write]
</code></pre>

<p>```</p>

<p>参考のため、この API の rspec も載せておきます。
複数の <code>scopes</code> を設定する時に <code>,</code> 区切りだとうまくいかないところがあったので、
スペース区切りにしています。</p>

<p>```ruby spec/controllers/api/v1/posts_controller_spec.rb
require &lsquo;spec_helper&rsquo;</p>

<p>describe Api::V1::PostsController do
  describe &ldquo;GET &lsquo;index&rsquo;&rdquo; do</p>

<pre><code>let!(:application) { Doorkeeper::Application.create!(name: "MyApp", redirect_uri: "http://app.com") }
let!(:user) { FactoryGirl.create(:normal_user) }
let!(:token) { Doorkeeper::AccessToken.create! application_id: application.id, resource_owner_id: user.id, scopes: "public" }
subject { response }

context "valid token" do
  before do
    get 'index', format: :json, access_token: token.token
  end
  it { should be_success }
  its(:status) { should eq(200) }
  its(:body) { should == Post.all.to_a.to_json }
end

context "invalid token" do
  before do
    get 'index', format: :json, access_token: token.token.succ
  end
  it { should_not be_success }
  its(:status) { should eq(401) }
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;GET &lsquo;index&rsquo; without scopes&rdquo; do</p>

<pre><code>let!(:application) { Doorkeeper::Application.create!(name: "MyApp", redirect_uri: "http://app.com") }
let!(:user) { FactoryGirl.create(:normal_user) }
let!(:token) { Doorkeeper::AccessToken.create! application_id: application.id, resource_owner_id: user.id, scopes: "write" }
subject { response }

context "valid token" do
  before do
    get 'index', format: :json, access_token: token.token
  end
  it { should_not be_success }
  its(:status) { should eq(401) }
  its(:body) { should == " " }
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;POST &lsquo;create&rsquo;&rdquo; do</p>

<pre><code>let!(:application) { Doorkeeper::Application.create!(name: "MyApp", redirect_uri: "http://app.com") }
let!(:user) { FactoryGirl.create(:normal_user) }
let!(:token) { Doorkeeper::AccessToken.create! application_id: application.id, resource_owner_id: user.id, scopes: "public write" }
subject { response }

context "valid token" do
  before do
    post 'create', format: :json, access_token: token.token, post: { title: "title", body: "some content" }
  end
  it { should be_success }
  its(:status) { should eq(201) } # 201 Created
  its(:body) { should == Post.last.to_json }
end

context "invalid token" do
  before do
    post 'create', format: :json, access_token: token.token.succ
  end
  it { should_not be_success }
  its(:status) { should eq(401) }
end
</code></pre>

<p>  end
end
```</p>

<h2>scope 付き呼び出し</h2>

<p><code>devise</code>
の設定で
<code>omniauth</code>
の設定に
<code>scope</code>
を追加するだけです。</p>

<p><code>ruby config/initializers/devise.rb
  config.omniauth :doorkeeper, ENV['DOORKEEPER_APP_ID'], ENV['DOORKEEPER_APP_SECRET'], { scope: 'public write' }
</code></p>

<p>rspec のところでもちょっと書きましたが、
区切りが <code>,</code> だとうまくいかないことがあったので、
スペース区切りにしています。</p>

<p>原因は
<a href="https://github.com/applicake/doorkeeper/blob/master/lib/doorkeeper/oauth/scopes.rb">lib/doorkeeper/oauth/scopes.rb</a>
で
<code>string.split</code>
のように無引数の
<code>String#split</code>
を使っているからではないかと推測していますが、確認はしていません。</p>

<h2>まとめ</h2>

<p><code>client_id</code> と <code>client_secret</code> と provider の URL はあらかじめ用意しておいて、
client 側の rails アプリに設定しておきます。</p>

<p><code>token</code>
は OAuth2 で取得したものを
<code>session</code>
やデータベースなどに保存しておいて使います。</p>

<p>必要なら
<code>scopes</code>
も設定できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails で assets を gem に入れる時の配置]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-03-rails-assets-in-gem.html"/>
    <updated>2013-10-03T10:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rails-assets-in-gem</id>
    <content type="html"><![CDATA[<p>昨日の記事で
<a href="https://rubygems.org/gems/jquery_mobile_rails">jquery_mobile_rails</a> 1.3.2
で画像ファイルが
<code>rake assets:precompile</code>
で処理されないという話を書きましたが、
<a href="http://rubygems.org/gems/jquery-ui-rails">jquery-ui-rails</a>
gem
などは Gemfile に足すだけで特に require などをしなくても
画像が処理されていたので違いを調べてみました。</p>

<!--more-->


<p>結論を先に書くと、
<code>jquery-ui-rails</code>
は
<code>app/assets/images/</code>
に画像ファイルを置いていたから処理されていて、
<code>jquery_mobile_rails</code>
は
<code>vendor/assets/images/</code>
に画像ファイルを置いていたから、
というのが原因でした。</p>

<p>自作の gem で
<code>app/assets/images/</code>
と
<code>vendor/assets/images/</code>
に画像を置いて rails 4.0.0 の
<code>rake assets:precompile</code>
で違いがあることを確認しています。</p>

<p><code>jquery_mobile_rails</code> の issues を確認すると
<a href="https://github.com/tscolari/jquery-mobile-rails/issues/16">In production, path to images is wrong</a>
という同じ問題に困っている話があったので、
コメントを付けておきました。</p>

<p>ちなみに
いくつか存在する jQuery Mobile の assets の中から
<code>jquery_mobile_rails</code>
を選んだ理由は新しいバージョンへの対応が一番早そうにみえたからです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[www.ruby-lang.org への pull request の出し方]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-30-how-to-pull-request.html"/>
    <updated>2013-09-30T22:43:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/how-to-pull-request</id>
    <content type="html"><![CDATA[<p><a href="https://www.ruby-lang.org/en/news/2013/09/23/ruby-2-1-0-preview1-is-released/">Ruby 2.1.0-preview1 is released</a>
というアナウンスが一週間経ってもまだ日本語訳が出来ていなかったので、
ちょっとの暇を見つけて pull request を出してみたので、
その手順をまとめておきます。</p>

<!--more-->


<p>まず github のアカウントは持っているというのは前提として話を進めます。</p>

<p>初回は
<a href="https://github.com/ruby/www.ruby-lang.org">https://github.com/ruby/www.ruby-lang.org</a>
の右上から自分のアカウントに Fork します。</p>

<p>すでに Fork していて二回目以降は upstream の変更を merge する必要があります。
<a href="https://help.github.com/articles/syncing-a-fork">Syncing a fork</a>
を参考にして merge します。</p>

<p>実行したコマンドだけまとめておきます。
詳細は github のヘルプを参照してください。</p>

<p><code>console
% git clone git@github.com:znz/www.ruby-lang.org.git
% cd www.ruby-lang.org
% git remote add upstream https://github.com/ruby/www.ruby-lang.org.git
% git remote -v
% git fetch upstream
% git branch -va
% git checkout master
% git merge upstream/master
% git push
</code></p>

<p>英語版を元にして日本語版を作成します。</p>

<p><code>console
% cp {en,ja}/news/_posts/2013-09-23-ruby-2-1-0-preview1-is-released.md
% git add ja/news/_posts/2013-09-23-ruby-2-1-0-preview1-is-released.md
% vi ja/news/_posts/2013-09-23-ruby-2-1-0-preview1-is-released.md
</code></p>

<p>プレビュー用に <code>bundle install</code> します。</p>

<p><code>console
% bundle install
% rake -T
% rake preview
</code></p>

<p><code>rake preview</code>
でサーバーが起動しているので、
ブラウザで
<code>http://localhost:4000/</code>
を開いて表示を確認します。</p>

<p>github に push して、
ブラウザから pull request を出します。</p>

<p>ブランチを切り忘れていたので、
ここで作りました。</p>

<p><code>console
% git checkout -b ruby210preview1
% git commit -av
% git push --set-upstream origin ruby210preview1
</code></p>

<p>最後に
<code>git checkout master</code>
で master ブランチに戻るなり、
消してしまって、
また作業する時に clone し直すなりします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[aasm gem の初期状態設定]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-30-aasm.html"/>
    <updated>2013-09-30T15:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/aasm</id>
    <content type="html"><![CDATA[<p><code>aasm</code> gem の使い方が悪くて、初期状態の値としてデータベースに nil が保存されてしまっていたという話です。</p>

<!--more-->


<p>確認したバージョンは ruby 2.0.0 + rails 3.2.14 + aasm 3.0.22 です。</p>

<p>例として以下のような感じの使い方をしてしまっていて、
<code>status</code> メソッドで <code>nil</code> を返さないようにしていたら
データベースには <code>nil</code> が保存されるようになってしまって、
<code>aasm</code> 以外 (<code>ransack</code> とか) からデータベースにアクセスした時に
問題になりました。</p>

<p>```ruby
  def status</p>

<pre><code># このメソッドがダメ
read_attribute(:status) || :starting
</code></pre>

<p>  end</p>

<p>  include AASM
  aasm column: &ldquo;status&rdquo; do</p>

<pre><code>state :starting, initial: true
state :running
state :stopped
state :finished

event :run do
  transitions from: [:starting, :stopped], to: :running
end

event :stop do
  transitions from: [:starting, :running], to: :stopped
end

event :finish do
  transitions from: [:running], to: :finished
end
</code></pre>

<p>  end
```</p>

<p><code>aasm</code> としては
<a href="https://github.com/aasm/aasm/blob/master/lib/aasm/persistence/active_record_persistence.rb">AASM::Persistence::ActiveRecordPersistence</a>
で
<code>before_validation :aasm_ensure_initial_state, :on =&gt; :create</code>
相当のフックを追加していて、
<code>model.valid?</code>
を実行すれば
<code>model.status</code>
が設定されるようになっていました。</p>

<p>たぶん使い始めた時に
<code>rails console</code>
で
<code>model = Model.new</code>
した直後の
<code>model.status</code>
が
<code>nil</code>
だったので、
どうにかしようと思って
getter メソッドを定義してしまったのだと思います。</p>

<p>このせいで以下のような
<code>ransack</code>
を使った検索フォームで初期状態のチェックを入れても
うまく検索出来ないという問題が起きていました。</p>

<p>```haml
= search_form_for @q, html: { class: &ldquo;form-search&rdquo; } do |f|
  %table</p>

<pre><code>-# ...
%tr
  %td= f.label :status_in
  %td
    - Model.aasm.states.each do |status|
      %label
        = check_box_tag "q[status_in][]", status.to_s, params.try(:[], :q).try(:[], :status_in).try(:include?, status.to_s), id: "q_status_in_#{status.to_s}"
        = status.localized_name
-# ...
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 3 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-25-rubymotion-mokumoku-osaka.html"/>
    <updated>2013-09-25T20:43:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回と第 2 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://connpass.com/event/3450/">第 3 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。</p>

<!--more-->


<p>OS X アプリの勉強をしようと思って、
とりあえず
<code>motion create --template=osx Hello</code>
で生成されたファイルを読んでいたら、
<code>app/menu.rb</code>
の
<code>Italic</code>
の
<code>keyEquivalent:</code>
が
<code>Bold</code>
と同じ
<code>'b'</code>
になっていたのを見つけて、
他もテキストエディットと見比べていたら
違う部分を見つけたので、
<code>motion support</code>
で報告してみました。</p>

<p>```diff
diff &mdash;git a/app/menu.rb b/app/menu.rb
index 58b48f8..0da85e1 100644
&mdash;&ndash; a/app/menu.rb
+++ b/app/menu.rb
@@ -47,7 +47,7 @@ class AppDelegate</p>

<pre><code> fontMenu = createMenu('Font') do
   addItemWithTitle('Show Fonts', action: 'orderFrontFontPanel:', keyEquivalent: 't')
   addItemWithTitle('Bold', action: 'addFontTrait:', keyEquivalent: 'b')
</code></pre>

<ul>
<li>   addItemWithTitle(&lsquo;Italic&rsquo;, action: &lsquo;addFontTrait:&rsquo;, keyEquivalent: &lsquo;b&rsquo;)</li>
<li>   addItemWithTitle(&lsquo;Italic&rsquo;, action: &lsquo;addFontTrait:&rsquo;, keyEquivalent: &lsquo;i&rsquo;)
   addItemWithTitle(&lsquo;Underline&rsquo;, action: &lsquo;underline:&rsquo;, keyEquivalent: &lsquo;u&rsquo;)
   addItem(NSMenuItem.separatorItem)
   addItemWithTitle(&lsquo;Bigger&rsquo;, action: &lsquo;modifyFont:&rsquo;, keyEquivalent: &lsquo;+&rsquo;)
@@ -60,9 +60,11 @@ class AppDelegate
   addItemWithTitle(&lsquo;Justify&rsquo;, action: &lsquo;alignJustified:&rsquo;, keyEquivalent: &lsquo;&rsquo;)
   addItemWithTitle(&lsquo;Align Right&rsquo;, action: &lsquo;alignRight:&rsquo;, keyEquivalent: &lsquo;}&rsquo;)
   addItem(NSMenuItem.separatorItem)</li>
<li>   addItemWithTitle(&lsquo;Show Ruler&rsquo;, action: &lsquo;toggleRuler:&rsquo;, keyEquivalent: &lsquo;&rsquo;)</li>
<li>   addItemWithTitle(&lsquo;Copy Ruler&rsquo;, action: &lsquo;copyRuler:&rsquo;, keyEquivalent: &lsquo;c&rsquo;)</li>
<li>   addItemWithTitle(&lsquo;Paste Ruler&rsquo;, action: &lsquo;pasteRuler:&rsquo;, keyEquivalent: &lsquo;v&rsquo;)</li>
<li>   addItemWithTitle(&lsquo;Show Ruler&rsquo;, action: &lsquo;toggleRuler:&rsquo;, keyEquivalent: &lsquo;r&rsquo;)</li>
<li>   item = addItemWithTitle(&lsquo;Copy Ruler&rsquo;, action: &lsquo;copyRuler:&rsquo;, keyEquivalent: &lsquo;c&rsquo;)</li>
<li>   item.keyEquivalentModifierMask = NSCommandKeyMask|NSControlKeyMask</li>
<li>   item = addItemWithTitle(&lsquo;Paste Ruler&rsquo;, action: &lsquo;pasteRuler:&rsquo;, keyEquivalent: &lsquo;v&rsquo;)</li>
<li><p>   item.keyEquivalentModifierMask = NSCommandKeyMask|NSControlKeyMask
 end</p>

<p> addMenu(&lsquo;Format&rsquo;) do
```</p></li>
</ul>


<p>他にはサンプルとして
<a href="https://github.com/satococoa/rubymotion-osx-browser">https://github.com/satococoa/rubymotion-osx-browser</a>
とか
<a href="https://github.com/HipByte/RubyMotionSamples">https://github.com/HipByte/RubyMotionSamples</a>
とかをちょっと動かして見たりしていました。</p>

<p>他の人の話としては、
<code>UICreateCGImageFromIOSurface</code>
というシンボルで問題が起きて、
最初は
<a href="https://github.com/ZBar/ZBar">ZBar</a>
というライブラリが疑われていたけど違ったとかいう話とか、
<a href="http://support.revealapp.com/discussions/suggestions/8-reference-to-uicreatecgimagefromiosurface-should-be-removed-for-release-scheme">Reveal.framework が原因で Release ビルドで外せば良い</a>
という話とか、
東京と Google ハングアウトでつないでみてたとか、
<a href="http://mobiletou.ch/2013/09/002-create-application">(&frac12;) &ndash; 第二回 RubyMotion でアプリケーションを作ろう (1) &ndash; 実践！RubyMotion &ndash; Mobile Touch &ndash; モバイル/タブレット開発者およびデザイナー向け情報ポータル</a>
で開発中のアプリをみせてもらったりとかがありました。</p>

<p>東京とのハングアウトが終わった後は
<a href="https://gihyo.jp/dp/ebook/2013/978-4-7741-6024-5">Vagrant入門ガイド</a>
の話とか、
<a href="http://jfk2013.jaws-ug.jp/">JAWS FESTA Kansai 2013</a>
の話とかもしていました。</p>

<p>最後に次回も東京と日程を合わせるということで
<a href="http://connpass.com/event/3557/">第 4 回 RubyMotion もくもく会 in Osaka</a>
は 10/23 (水) 19:30 からということになりました。</p>
]]></content>
  </entry>
  
</feed>
