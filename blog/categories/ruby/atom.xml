<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-12-03T22:17:58+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby 2.1.0の新機能のException#cause]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-03-ruby-exception-cause.html"/>
    <updated>2013-12-03T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ruby-exception-cause</id>
    <content type="html"><![CDATA[<p><a href="https://www.ruby-lang.org/ja/news/2013/11/22/ruby-2-1-0-preview2-is-released/">Ruby 2.1.0-preview2 リリース</a>
では
<a href="http://d.hatena.ne.jp/nagachika/20131110/ruby_trunk_changes_43615_43636">2013-11-10 の大きめの変更</a>
が気になっていて、
ここでは
<code>Exception#cause</code>
というメソッドを紹介します。</p>

<p><code>"literal"f</code> のように書く freeze された文字列リテラル機能が
2.1.0-preview1 には入っていたのですが、それが削除されて
<code>"literal".freeze</code> がコンパイル時に特別扱いされるようになった、
というのも気になっています。</p>

<p>この投稿は
<a href="http://qiita.com/advent-calendar/2013/ruby">Ruby Advent Calendar 2013</a>
の3日目の記事です。</p>

<!--more-->


<h2>Exception#cause の例</h2>

<p>Ruby 2.0.0 までは <code>rescue</code> や <code>ensure</code> の中で別の例外が発生すると、
別途保存しておかない限り、
以前に発生した例外がわからなくなってしまっていましたが、
Ruby 2.1.0(-preview2) からは別の例外を <code>raise</code> した時に
以前の例外が自動で保存されて
<code>Exception#cause</code> でたどれるようになりました。
<code>cause</code> は <code>raise</code> のタイミングで設定されるので、
例外オブジェクト自体は <code>rescue</code> や <code>ensure</code>
の外で生成していても良いようです。</p>

<p>```ruby</p>

<h1>!/usr/bin/env ruby</h1>

<p>def foo
  raise &ldquo;foo&rdquo;
end</p>

<p>def bar
  e = Exception.new(&ldquo;bar&rdquo;)
  foo
rescue
  raise e
end</p>

<p>def baz
  bar
ensure
  raise &ldquo;baz&rdquo;
end</p>

<p>begin
  baz
rescue
  p $!                   #=> #&lt;RuntimeError: baz>
  p $!.cause             #=> #&lt;Exception: bar>
  p $!.cause.cause       #=> #&lt;RuntimeError: foo>
  p $!.cause.cause.cause #=> nil
end
```</p>

<h2>終了時のバックトレース</h2>

<p>ちなみに、例外が保存されていても
<code>rescue</code> せずにプログラムが終了した時のバックトレースは
今まで通り最後の例外だけ表示されるようです。</p>

<p>```console
% cat t.rb</p>

<h1>!/usr/bin/env ruby</h1>

<p>def foo
  raise &ldquo;foo&rdquo;
end</p>

<p>def bar
  foo
rescue
  raise &ldquo;bar&rdquo;
end</p>

<p>bar
% ruby t.rb
t.rb:9:in `rescue in bar': bar (RuntimeError)</p>

<pre><code>from t.rb:7:in `bar'
from t.rb:12:in `&lt;main&gt;'
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nadokaさんの0.8.6をリリースした関連の話]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-29-nadoka-086-released.html"/>
    <updated>2013-11-29T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/nadoka-086-released</id>
    <content type="html"><![CDATA[<p><a href="http://mla.n-z.jp/?ruby-list:49704">nadoka さんの 0.8.6 をリリース</a>
したので、
その関連の話を書いてみようと思います。</p>

<!--more-->


<h2>なぜ続けているか</h2>

<p>短い答えとしては、自分が使っているからというのが一番大きな理由です。</p>

<p>bot というか plugin もいくつか作って、
サーバーの管理などにも便利に使っていて、
わざわざ他の IRC proxy 的なソフトに乗り換えて
プラグインを書き直すよりは、
一応動いているものをメンテナンスし続けた方が楽というのが
理由になっています。</p>

<h2>subversion repository について</h2>

<p>最初は
<a href="http://www.atdot.net/nadoka/nadoka.ja.html">atdot.net の nadoka さん</a>
のところに書いてある
<code>http://www.atdot.net/svn/nadoka/trunk</code>
にあったものが、
ささださんのサーバー管理の都合なのか、
rubyforge に移行して今に至ります。</p>

<p>途中から
(<a href="https://github.com/nadoka/nadoka/wiki/HowToRelease">HowToRelease</a>
の記録によると 0.7.7 から)
は github メインに移行しています。</p>

<p>その後、しばらく放置していたかどうだったのか忘れましたが、
最近のリリースでは github での変更をリリースのタイミングで
rubyforge の svn にも git-svn を使ってマージしていました。</p>

<p>このマージも今回で最後になります。</p>

<p>その作業をするときに
<code>http://rubyforge.org/</code>
をみてみると
<code>RubyForge Could Not Connect to Database:</code>
というエラーになっていて、
<a href="https://twitter.com/hsbt/status/406423900432506881">hsbt さん</a>
に
<a href="https://twitter.com/evanphx/status/399552820380053505">RubyForgeは5月15日で終了予定</a>
という話を教えてもらいました。</p>

<p>古いサーバーで svn co して、
そのまま使っている場合でも使い続けられるように続けていましたが、
rubyforge 自体が終わるということで、
そういうサーバーでは、
そのまま最後の svn up をして使い続けるか、
git に移行する必要がありそうです。</p>

<h2>git repository について</h2>

<p>github が主流になっていたこともあり、
pull request とかしやすくなることを期待して
移行しました。</p>

<p>pull request が来た件数も 0 ではないので、
そのあたりは活発ではないプロジェクトとしては
うまくいっているのではないでしょうか。</p>

<p>github への移行方法として、
最初は
<a href="http://darcs.net/RelatedSoftware/Tailor">tailor</a>
を検討したのですが、
既にあまり使われていなくて、
ちょっと試した感じでもうまくいかなかったので、
git-svn で移行しました。</p>

<p>今となっては変換専用ソフトはほぼ使えるものはなく、
変換先のソフト (今回は git) のプラグイン的なものを使って
変換元のソフト (今回は svn) の repository から取り出す、
という方法しかないようです。</p>

<h2>CloudCore VPS</h2>

<p><a href="http://www.cloudcore.jp/vps/develop/">開発者支援制度 &ndash; CloudCore VPS</a>
でサーバーを借りてみて、
テスト用の IRC サーバーを動かしています。</p>

<p>接続用の設定は
<a href="https://github.com/nadoka/nadokarc-example">nadokarc-example</a>
にあるので、適当に試したい時に使えると思います。</p>

<p>途中の経路の問題 (モバイルでモバイルルーターの接続が切れたとか?)
で、サーバーから応答がなくなったときに
nadoka さんの再接続がうまくいかないのを調査するのに使いたいと
思っているのですが、
切れた状況を再現する部分の作り込みがまだ出来ていないです。</p>

<p>ircd の設定は
<a href="https://github.com/nadoka/ansible-ircd">ansible-ircd</a>
のように ansible でやってみました。
SSL の証明書の問題などがあるので、
すべての情報を公開できるわけじゃないというのが難しいところです。</p>

<h2>まとめ的なもの</h2>

<p>長い間続いているといろいろあるものです。</p>

<p>小規模なプロジェクトなので、
いつも場当たり的な対応でなんとかなっていますが、
そういうのも良いんじゃないでしょうか。</p>

<p>とりあえず自分が使っている限りはリリースも続くと思いますし、
新しいバージョンの ruby への対応も続けていけると思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[旧暦を計算するgemを使った]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-26-qreki.html"/>
    <updated>2013-11-26T23:46:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/qreki</id>
    <content type="html"><![CDATA[<p><a href="https://forkwell.com/pub/github.com/ozamasa/qreki">https://forkwell.com/pub/github.com/ozamasa/qreki</a>
で知った
<a href="https://github.com/ozamasa/qreki">旧暦を計算するgem</a>
を使って旧暦表示を試してみました。</p>

<!--more-->


<p><a href="https://github.com/ozamasa/qreki">qreki</a>
の <code>README.md</code> には書いていませんが、
普通は
<code>require "qreki"</code>
も必要です。</p>

<p>例えば以下のように使えます。</p>

<p><code>ruby
require 'qreki'
q = Qreki.calc_from_date(Date.today)
puts "旧暦#{q.year}年#{q.uruu ? '閏' : nil}#{q.month}月#{q.day}日(#{q.rokuyou})#{q.sekki}"
</code></p>

<p>出力例としては <code>旧暦2013年10月24日(先負)</code> のようになります。
<code>Date.today</code> の代わりに <code>Time.now</code> のように <code>Time</code> オブジェクトも使えました。</p>

<p>実際には IRC の bot に使いました。
旧暦計算は自分で実装するのは面倒なので、
ライブラリがあるのは非常にありがたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[anyenvやrbenvのpluginsの更新などをしやすくするプラグインを作った]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-21-anyenv-rbenv-plugins.html"/>
    <updated>2013-11-21T18:25:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/anyenv-rbenv-plugins</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sstephenson/rbenv">rbenv</a>
には
<a href="https://github.com/rkh/rbenv-update">rbenv-update</a>
というプラグインがあって、アップデートだけは簡単にできるのに、
他の <code>git</code> の操作をまとめて実行するのが面倒なので、
まとめて実行できる
<a href="https://github.com/znz/rbenv-git">rbenv-git</a>
というプラグインを作りました。</p>

<p>それから
<a href="https://github.com/riywo/anyenv">anyenv</a>
の方でもすべての <code>**env</code> も含めてアップデートできると便利だと思い、
<a href="https://github.com/znz/anyenv-update">anyenv-update</a>
と
<a href="https://github.com/znz/anyenv-git">anyenv-git</a>
を作成しました。</p>

<!--more-->


<h2>インストール</h2>

<p>それぞれ <code>plugins</code> のディレクトリの中に <code>git clone</code> でとってくるだけです。</p>

<ul>
<li><code>git clone https://github.com/znz/rbenv-git.git $(rbenv root)/plugins/rbenv-git</code></li>
<li><code>git clone https://github.com/znz/anyenv-update.git $(anyenv root)/plugins/anyenv-update</code></li>
<li><code>git clone https://github.com/znz/anyenv-git.git $(anyenv root)/plugins/anyenv-git</code></li>
</ul>


<p><code>README</code> の方には <code>mkdir -p $(anyenv root)/plugins</code> も書いていますが、
git version 1.8.4.3 だと不要で、自動で親ディレクトリも作ってくれるようです。
git のどのバージョンからなのかわからないので、
<code>README</code> には <code>mkdir -p</code> を残しています。</p>

<h2>使い方</h2>

<h3>rbenv git</h3>

<p><code>rbenv</code> と <code>rbenv</code> のプラグインの <code>git</code> 操作をまとめて実行できます。</p>

<p><code>rbenv git pull</code> で <code>rbenv update</code> の代用が出来ます。
<code>rbenv update</code> だと <code>rbenv</code> 自体を homebrew で入れている時にも
<code>RBENV_ROOT</code> で <code>git</code> コマンドを実行してしまいますが、
<code>rbenv git</code> なら大丈夫です。</p>

<p><code>rbenv git gc</code> で cleanup も出来ます。</p>

<p><code>rbenv git remote -v</code> でどこからとってきたのか確認したり、
<code>rbenv git status</code> でローカルで何か変更しているかどうか確認したりも出来ます。</p>

<h3>anyenv update</h3>

<p><code>anyenv update</code> で</p>

<ul>
<li><code>anyenv</code></li>
<li><code>anyenv</code> のプラグイン</li>
<li><code>**env</code></li>
<li><code>**env</code> のプラグイン</li>
</ul>


<p>がアップデートできます。</p>

<p>git 管理ではないものは skip します。</p>

<h3>anyenv git</h3>

<p><code>rbenv git</code> と同様の操作が
<code>anyenv update</code> と同様の対象に
まとめて実行できます。</p>

<ul>
<li><code>anyenv git pull</code></li>
<li><code>anyenv git gc</code></li>
<li><code>anyenv git remote -v</code></li>
<li><code>anyenv git status</code></li>
</ul>


<p>など、
<code>git</code> の各種操作ができます。</p>

<h2>裏話</h2>

<p>最初は <code>rbenv update</code> のコードを fork しようとしていたのですが、
ライセンスが明記されていなかったので止めて、
他の MIT License と明示されているプラグインを主に参考にして作りました。
他にも <code>set -eo pipefail</code> というのは
<a href="https://github.com/progrium/dokku">dokku</a>
を参考にしました。</p>

<p>ライセンスが不明だと参考にするのにも困るので、
github のレポジトリを作成する時の LICENSE ファイルそのままだけでも良いので、
どういうライセンスにしたいのか明記されているとありがたいと思いました。</p>

<h2>追記</h2>

<p><code>rbenv update</code> だと <code>git pull</code> ではなく、毎回</p>

<p>```</p>

<pre><code>git checkout master
git fetch origin
git pull origin master
</code></pre>

<p>```</p>

<p>を実行していて遅いというのも <code>rbenv git</code> などを作った理由のひとつというのを
書き忘れていたので、追記しておきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 5 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-20-rubymotion-mokumoku-osaka.html"/>
    <updated>2013-11-20T21:54:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 4 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://connpass.com/event/3871/">第 5 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。</p>

<p>今回も東京と同時開催でしたが、
接続などはせずに終わってしまいました。</p>

<p>次回の
<a href="http://connpass.com/event/4211/">第 6 回 RubyMotion もくもく会 in Osaka</a>
は 12/26(木) になりました。</p>

<!--more-->


<h2>話に出たもの</h2>

<p>話に出てきたサイトなどのメモです。</p>

<ul>
<li><a href="http://shin1x1.github.io/VagrantX/">http://shin1x1.github.io/VagrantX/</a>
のサイトのデザインを
<a href="https://wrapbootstrap.com/">https://wrapbootstrap.com/</a>
から選ぼうとしたが、結局 github のテンプレートのまま使うことにしたという話</li>
<li>昔は nib というバイナリだったけど今は xib という XML ファイルになっているという話</li>
<li><a href="http://www.rainymood.com/">Rainy Mood</a>
と
<a href="http://tadaya.net/blog/2012/12/01">多田屋のBGM</a>
の組み合わせが良いという話</li>
<li>アドベントカレンダーの話

<ul>
<li><a href="http://www.adventar.org/">Adventar</a></li>
<li><a href="http://qiita.com/advent-calendar/2013/rubymotion">RubyMotion Advent Calendar 2013</a></li>
</ul>
</li>
<li><a href="http://www.img2icnsapp.com/">Img2icns</a> の無料の方で OSX アプリのアイコンへの変換が出来そうという話</li>
<li>クラウドソーシングでアイコンを募集するのはどうかという話

<ul>
<li><a href="http://www.designclue.co/">designclue（デザインクルー） &ndash; デザインクラウドソーシング</a></li>
</ul>
</li>
</ul>


<h2>やっていたこと</h2>

<h3>www.ruby-lang.org</h3>

<p><a href="https://www.ruby-lang.org/ja/news/2013/09/28/design-contest/">www.ruby-lang.org のサイトデザイン募集</a>
の投票を webmaster でやっていて、締め切りが今日だったということで、
投票しようかと思っていたら、
締め切りが 9:00 20 Nov(JST) だったのに気付いて諦めました。
まだ集計前だったようなので、間に合いそうでしたが、
無理はしないということにしました。</p>

<p>ちなみに
<a href="https://github.com/ruby/www.ruby-lang.org/issues?labels=contest">応募は7件</a>
でした。</p>

<h3>notification</h3>

<p>最初は
<a href="https://github.com/Watson1978/notification">https://github.com/Watson1978/notification</a>
という OSX のサンプルをいじってみていました。</p>

<p><code>open ./build/MacOSX-10.8-Development/notification.app</code>
で開くと右上の通知はそもそも出てきているのかどうかわからない状態で終了してしまって、
通知センターを開くとちゃんと送れていることが確認できたり、
引数は <code>-psn_なんとか</code> という
Emacs.app のカレントディレクトリ問題を調べていた時に見かけたものが渡ってきていたりしたのがわかりました。</p>

<h3>Calc</h3>

<p><a href="https://github.com/HipByte/RubyMotionSamples">RubyMotionSamples</a>
の osx に Calc というのが追加されていたので、
それを試していました。</p>

<h2>デフォルトブラウザ設定</h2>

<p>デフォルトブラウザはどこで設定しているんだろうと思って、
<code>defaults read</code>
の出力を調べたりしていたら、
<code>LSSetDefaultHandlerForURLScheme</code>
と
<code>LSSetDefaultRoleHandlerForContentType</code>
で設定できるとわかったので、
RubyMotion の中から呼び出そうとしたのですが、
<code>NoMethodError</code>
になるだけで、
結局呼び出し方がわかりませんでした。</p>

<p>試したこととしては <code>Calc</code> のボタンと同じように
ボタンが押された時に呼ばれるメソッドの中で、</p>

<p>```ruby</p>

<pre><code>bundle_id = NSBundle.mainBundle.bundleIdentifier
LSSetDefaultHandlerForURLScheme("http", bundle_id) #~&gt; NoMethodError
</code></pre>

<p>```</p>

<p>のように呼び出そうとしたところ、
<code>LSSetDefaultHandlerForURLScheme</code>
で
<code>NoMethodError</code>
になりました。</p>

<p>それから <code>Rakefile</code> の
<code>Motion::Project::App.setup do |app|</code>
のブロックで
<code>app.frameworks &lt;&lt; 'ApplicationServices'</code>
のように
<code>ApplicationServices</code>
フレームワークを追加というのも試してみたのですが、
変化はありませんでした。</p>

<p>そんな感じで手詰まっていたら時間が来て終了ということになりました。</p>

<p>確認したバージョンは以下の通りです。</p>

<ul>
<li>Mac OS X 10.8.5</li>
<li>Xcode 5.0.2</li>
<li>RubyMotion 2.14</li>
</ul>


<h3>解決</h3>

<p><code>CoreServices</code> が必要と教えてもらったので、
<code>app.frameworks &lt;&lt; 'CoreServices'</code>
も足してみたのですが、
<code>NoMethodError</code>
のままで動かず、
結局
RubyMotion を 2.15 に上げると直っていました。</p>
]]></content>
  </entry>
  
</feed>
