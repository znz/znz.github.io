<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-09-18T22:28:45+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2017 の1日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-18-rubykaigi2017.html"/>
    <updated>2017-09-18T10:34:48+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi2017</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2017">RubyKaigi 2017</a> の1日目に参加したので、そのメモです。</p>

<!--more-->


<p>最初の方は個人的なメモなので、興味がなければ飛ばして、オープニング以降からどうぞ。</p>

<h2>移動と前夜祭</h2>

<p>土曜日に姫路に寄ってから、岡山県の実家に泊まっていて、日曜に台風の影響で11時ごろから岡山の在来線が止まるということで、その前に移動していたので、広島には問題なく到着していました。広島では10時ごろから在来線が止まっていたようでした。
午後は新幹線も広島より西で停電があった影響で遅れたり、博多と広島の間は止まったりしていたようです。</p>

<p>飛行機はだいたい止まっていたようで、東京からの人はさっさと新幹線に切り替えた人は問題なくたどり着けて、遅く新幹線に乗った人は遅れていて、前夜祭に間に合わなかったりしたようです。</p>

<p>前夜祭は、ホテルから移動している時に傘が壊れる (1本骨が曲がる) ということはありましたが、問題なくたどり着いて参加できました。
終わった後はほとんど雨は降っていませんでした。
Twitter のハッシュタグ <code>#rubykaigi</code> をみていると、会場準備をしていたスタッフの人で終わった後にきて、残っていたものを食べたりお土産をもらったりしていた人もいるようでした。</p>

<h2>朝の移動</h2>

<p>近くのホテルに泊まっていたので、開場前に会場につけるかと思っていたら、ちょっと準備に手間取ってしまって、結局9:40頃に到着しました。</p>

<h2>オープニング</h2>

<p>オープニングというか最初のキーセッションの前のつなぎとして、松田さんが会場アンケートしたりしていました。
初参加の人が意外と多かったようです。</p>

<h2>Ruby Forward</h2>

<ul>
<li>Money Forward によるスポンサーセッション</li>
<li>BtoC の新サービスを明日リリース予定</li>
<li>Ruby逆引きハンドブックの改訂版を出版(予定)</li>
<li>福岡の開発拠点を新設</li>
</ul>


<h2>Making Ruby? ゆるふわRuby生活</h2>

<ul>
<li>Heroku の matz team</li>
<li>日々の話</li>
<li>Repository は svn.ruby-lang.org がメインで github.com にはミラーがある</li>
<li>pull request は裏口</li>
<li>Why not Git?</li>
<li>ruby は Git より昔からあるから</li>
<li>作業する人がいない</li>
<li>個人的に hash がリビジョン番号の方が良い</li>
<li>コミッターにとっての利点不足</li>
<li>issue は redmine</li>
<li>開発者会議</li>
<li>tarball からのビルドの仕方: configure + make</li>
<li>Out-of-place build</li>
<li>configure に色々オプションがあったりいろんな環境をサポートしていたり</li>
<li>一度にビルドできる Makefile <a href="https://github.com/nobu/build-files/blob/master/Ruby.mk">https://github.com/nobu/build-files/blob/master/Ruby.mk</a></li>
<li>repo からのビルド</li>
<li>subversion or git / autoconf / bison / gperf / ruby</li>
<li>BASERUBY, MINIRUBY</li>
<li>トラブルによりすとうさんのサポート</li>
<li>MINIRUBY の機能や制限</li>
<li>2.4 までは miniruby と拡張ライブラリのビルドは parallel だったが、extconf.rb の実行が逐次実行だった</li>
<li>親にしか依存していないので 2.5 では exts.mk ファイルを分割生成して parallel に実行できるようになって速くなった</li>
<li>拡張ライブラリ作成時の問題点</li>
<li>C ヘッダーの場所とかが問題</li>
<li>Solution: <code>trace_var</code></li>
<li><code>$extmk</code>, <code>$ruby</code></li>
<li>? (突然の質疑応答タイム) → 特になし</li>
<li>Bug Report</li>
<li><a href="http://mla.n-z.jp/?ruby-list=50578">ruby-list:50578</a></li>
<li><code>p = 2; p (-1.3).abs</code> の話</li>
<li>スペースの有無によって意味ががらっと変わることがある</li>
<li>良くいって罠</li>
<li>少なくとも 1.1 からの仕様 (それより古いものはコンパイルが通らないので調べていない)</li>
<li>悪魔城 parse.y</li>
<li>難しくない?</li>
<li>ruby -w で警告が出るのでそのソースコード解説</li>
<li><code>EXPR_LABEL</code> はキーワード引数の名前が置けるところ</li>
<li><code>lvar_defined</code></li>
<li>matz issue</li>
<li>? 再び</li>
<li>literal symbol by intern</li>
<li><code>:"#{foo}"</code> が intern を再定義していると Symbol 以外になることがある</li>
<li>昨晩前夜祭の前に<a href="https://github.com/ruby/ruby/blob/d1e63172c6ecf2606ff9a947d917117eb6923436/parse.y#L7894-L7900">直した</a></li>
<li><a href="https://bugs.ruby-lang.org/issues/13812">Refinements で定義した to_s を String interpolation が呼んでくれない</a></li>
<li>.x86_64-darwin などをビルドディレクトリに使っている</li>
<li><code>.gitignore</code> に <code>.*-*</code> が入っている</li>
<li><code>make -C .x86_64-darwin exam commit</code></li>
<li>違い: 変換が明示的に見えるようにするのと見えないようにする</li>
<li>2.5 には目玉機能がない?</li>
<li>NEWS をみると色々</li>
<li>Reject された feature</li>
<li>議論中</li>
<li><code>Kernel#method</code> に対応する演算子?</li>
<li><p>Rightward assignment: <code>-&gt;</code> とか <code>=&gt;</code> とか使っているので良いものがない</p></li>
<li><p>質疑応答</p></li>
<li>extmk の分割の話で親子関係しか依存がないのを確認した? → digest が openssl に依存していた (チェックするためのメソッドを共有していた) のを切り分けた。 Windows で何かあったのを親子関係にした。実行時の依存ではなくビルド時の依存関係なのでもともと多くはなかった。</li>
<li>Rightward assignment の記号の提案 (:= が書籍では ← と書かれる言語があるので =: は?) → トークンの追加は衝突がなければ難しくない、<code>a=:b</code> がシンボルと衝突する。 <code>a ~&gt; b</code>, <code>a |&gt; b</code> ?</li>
<li><code>String#intern</code> を再定義する? → する人もいるらしいので、先手を打って直した</li>
<li>yield_self が目玉機能になる? → 機能としては長い間要望されていたものが、名前問題でなかなか入らなかった。とりあえず説明的な名前で入れて、良い名前があれば alias 追加すればいいという感じで入った。</li>
</ul>


<h2>Fiber in the 10th year</h2>

<ul>
<li>ささださんすごいとツイートしてほしい話</li>
<li>所属が変わっても基本的に ruby のコアの開発をしている</li>
<li>Fiber の紹介</li>
<li><p>Proc との違いは restart できる</p></li>
<li><p>Fiber の利用例</p></li>
<li>内部イテレーターを外部イテレータ〜にする例</li>
<li>Enumerator が内部で Fiber を使っている</li>
<li>Agent simulation : ゲームのキャラクター表現など</li>
<li><p>Non-blocking IO scheduler</p></li>
<li><p>Thread との違い</p></li>
<li>timer で自動で切り替わるかどうか</li>
<li>I/O ブロックで勝手に切り替わるかどうか</li>
<li>同期処理が必要かどうか</li>
<li>次のコンテキストを指定する必要があるかどうか</li>
<li><p>パフォーマンス</p></li>
<li><p>以上が Fiber の歴史</p></li>
<li><p>背景: Ruby 1.9 における Callcc と Fiber</p></li>
<li>2007/05 作り始め</li>
<li>Fiber の名前は Windows API から</li>
<li>今では他の言語でも Fiber という名前が使われているものがある</li>
<li><p>最初は <code>Fiber#pass</code> しかなかった</p></li>
<li><p>Coroutine or Semi-coroutine</p></li>
<li>Coroutine は難しいがパワフル</li>
<li>Semi-coroutine (Fiber) and Coroutine (Fiber::Core)</li>
<li>大クラス主義 (big class principle) を理由に Fiber::Core を削除してマージ</li>
<li><p>Semi-coroutine: resume, Coroutine: transfer</p></li>
<li><p>Fiber の実装</p></li>
<li>2007年: Copy machine stack</li>
<li>2010年: Use Native support</li>
<li>2017年: More light weight switching</li>
<li>速度: 5% 改善, メモリ: 30% 削減</li>
<li>VM stack や Machine stack があるので構造体のメモリ削減の影響は小さい?</li>
<li><p>Guild に繋げるための整理になった</p></li>
<li><p>Auto Fiber proposal</p></li>
<li>Automatic schedule on I/O blocking</li>
<li>次のターゲットを指定する必要がなくなる</li>
<li>同期が必要になる</li>
<li>利点: 既存のプログラムを変更する必要がない、Fiber 同様に軽い、Thread より安全</li>
<li><p>欠点: Thread と同様にバグりやすい</p></li>
<li><p>質疑応答</p></li>
<li>想定より多かった使い方は? → IO のスケジュールに使ってくれるのが想定より多かった。Enumerator が隠蔽するので直接使う人は少ないと思っていた。</li>
<li>アーキテクチャ依存やパフォーマンスで苦労したと思ったが、一番苦労した点は? → アーキテクチャ依存部分の最初は 1.8 を参考にしたので、ほとんど苦労しなかった。NetBSD の setcontext が動かなかったとかの話。</li>
</ul>


<h2>Handling mails on a text editor</h2>

<ul>
<li>通訳の方が Emacs を知らなかったので直前まで打ち合わせをしていた</li>
<li>自己紹介</li>
<li>Ruby で書いたテキストエディタ</li>
<li><a href="https://github.com/shugo/textbringer">Textbringer</a></li>
<li>Emacs 風</li>
<li>ターミナル上のみ</li>
<li>Pure Ruby</li>
<li>かっこいい名前</li>
<li>Law, Chaos, and Cosmic Balance</li>
<li>エディターだと <a href="https://twitter.com/ujm/status/909642340863688704">https://twitter.com/ujm/status/909642340863688704</a></li>
<li>コードの修正もたとえば rubocop を盲信するのではなくバランスが大事</li>
<li>キーバインディングは Emacs 風で help は少ないのでリンクからソースをみる</li>
<li>実装詳細</li>
<li>Linked Line ではなく Buffer Gap を採用</li>
<li>Internal encoding: UTF-8</li>
<li>indexing が問題になったので、基本的に ASCII-8BIT で持っておいて必要に応じて <code>force_encoding('UTF-8')</code></li>
<li>配列を使うのは文字列に変換するのが <code>force_encoding</code> だけより重そうだったので採用せず</li>
<li>部分再描画は curses 任せ</li>
<li>curses を使っているなら pure Ruby じゃないというツッコミがあった</li>
<li>動的な部分で ruby の特徴を活かせる</li>
<li><code>eval_expression</code></li>
<li><code>eval_buffer</code></li>
<li><code>eval_region</code></li>
<li>Suppress warnings : <code>$VERBOSE = nil</code></li>
<li><code>def</code> を使っていない理由</li>
<li>Plugin</li>
<li>Mournmail</li>
<li>MUAs for Emacs の話</li>
<li>Demo</li>
<li>メールの同期にバックグラウンド処理が必要になる</li>
<li>UI スレッドを用意した</li>
<li>UI スレッド以外では Textbringer のメソッドをよんではいけない</li>
<li>必要に応じて <code>next_tick</code> を使う</li>
<li>メールを扱うライブラリ: mail.gem, Net::IAMP</li>
<li>refine でローカルなモンキーパッチ</li>
<li>質疑応答</li>
<li>Auto Fiber? → 通訳さんとの打ち合わせで聞けていなかった。切り替わりのタイミングが想定できなくなるのは向いていないかも。</li>
<li>Emacs なのにS式がない? → Ruby で実装していて Emacs ではない</li>
<li>Emacs だと M-x だと <code>-</code> つながり? → Textbringer はタブを押すと <code>-</code> を <code>_</code> に変換する</li>
<li>名前空間の衝突は大丈夫? → 適切に prefix をつければいい</li>
</ul>


<h2>Gemification for Ruby 2.5/3.0</h2>

<ul>
<li>self.introduce</li>
<li>歴史: RAA, RubyForge, gems.github.com, gemcutter.org, rubygems.org, bundler</li>
<li>組み込みライブラリ: require しなくても使えるもの</li>
<li>標準添付ライブラリ: 別途インストールしなくても require できるもの</li>
<li>Standard Libraries, Default Gems, Bundled Gems</li>
<li>Pure Ruby, C extensions</li>
<li>Standard Libraries: upstream が svn.ruby-lang.org</li>
<li>Default Gems: Upstream が GitHub の Ruby team</li>
<li>Bundled Gems: メンテナが別</li>
<li>Default gem</li>
<li><code>*.gemspec</code> があると特別扱いされる</li>
<li>具体例: ruby/openssl</li>
<li>メインの upstream は <a href="https://github.com/ruby/openssl">https://github.com/ruby/openssl</a></li>
<li>利点: gem update openssl で新しい openssl gem を使える</li>
<li>セキュリティアップデートも、例えば最近の例なら json gem だけあげて ruby 本体をあげなくてもできる</li>
<li>psych : libyaml に依存、upstream に JRuby integration がある</li>
<li>rdoc: rdoc/rdoc から ruby/rdoc に移動</li>
<li>ripper 対応してくれた人が現れた</li>
<li>Bundled gems</li>
<li><code>gems/bundled_gems</code> にある gem を普通にインストールする</li>
<li>アンインストールも普通にできる</li>
<li>test framework の問題</li>
<li>test-unit, minitest が upstream と非互換になった</li>
<li>標準添付から外して本体のテスト専用に</li>
<li>test library がなくなるのは問題ということで bundled gem という方法が生み出された</li>
<li>rake は標準添付ライブラリでなくて良いのでは、ということで bundled gem になった例</li>
<li>bundled gem の問題</li>
<li>コンパイルがちゃんとできるかサポートできないので、拡張ライブラリを含むものはサポートしていない</li>
<li>bundled gem のテストが必要</li>
<li><a href="https://bugs.ruby-lang.org/issues/5481">Gemifying Ruby standard library</a></li>
<li>bundled gem や default gem の仕組みができたことで段階的に外していくことができるようになった</li>
<li>Gemification は利用者に利点は多いがメンテナは大変</li>
<li>たとえば rubygems はまだ Ruby 1.8 対応しているので大変</li>
<li>rubygems</li>
<li>rubygems/rubygems.org は rails で書かれているサイトそのもの</li>
<li>rubygems/rubygems はコマンドラインツール</li>
<li>メンテナなどは完全に別</li>
<li>Reserved words on rubygems.org</li>
<li>fileutils, fiddle, gdbm</li>
<li>Future</li>
<li>Ruby 2.5 では bundler が default gem に</li>
<li>RubyGems に Bundler 統合予定</li>
<li>全部 default gem, bundled gem にしたい</li>
<li>rubygems-2.7.0 がテストで bundler を使うようになる</li>
<li>bundler-2.0 のリリース後に rubygems-3.0 は本体でも bundler を使うように開発していく予定</li>
<li><a href="https://bugs.ruby-lang.org/issues/13847">Gem activated problem for default gems</a></li>
<li><a href="https://bugs.ruby-lang.org/issues/10320">require into module</a></li>
<li>shared library 問題, LOADED_FEATURES 問題</li>
</ul>


<h2>How to optimize Ruby internal</h2>

<ul>
<li>私用により途中から聞いていました。</li>
<li>細かい改善の話でした。</li>
<li>質疑応答</li>
<li>Hash の最適化で st_table を再利用するという案はなかったのか? → とりあえず想定していなかった? よく聞き取れず</li>
<li>聞き取れず → Ruby のメソッド一つ一つを計測してどうなったのかだけ</li>
<li>ベンチマークツール? → Apple 提供の可視化ツール</li>
<li>CI に回すのがどれくらいできそうか? → 1時間半ぐらいかかるが大丈夫か? グラフ表示したい。→ RubyBench が何か持っているかも。</li>
<li>どのくらい網羅しているかとか、みんなで追加すればいいのではないかとか → 発表が終わったのでオープンにしていきたい</li>
<li>ユーザーがカスタマイズする余地が消えたもの、壊す可能性が消えたものの見極めは? → 基本はテストが通るもの</li>
</ul>


<h2>Development of Data Science Ecosystem for Ruby</h2>

<ul>
<li>BigData is important in your business</li>
<li>RubyKaigi 2016 in Kyoto で Ruby が Data Science に使えない話とどうすれば良いかという話をした</li>
<li>今は使えるようになっている</li>
<li>将来も使える状態を維持していきたい</li>
<li>self.introduce</li>
<li>私はカエルです</li>
<li>現状</li>
<li>Ruby で書かれているものに追加したい場合</li>
<li>Ruby だけでやるか Python や R を JSON 経由で併用する方法があった</li>
<li>第3の選択肢として PyCall を作った</li>
<li>PyCall の話</li>
<li>使用例</li>
<li>数列の合計</li>
<li>bugs.ruby-lang.org の7月ごろのスナップショットをもらってデモ: ソースは <a href="https://github.com/mrkn/bugs-viewer-rk2017">https://github.com/mrkn/bugs-viewer-rk2017</a></li>
<li><code>Pandas.read_from_sql</code> は第二引数に ActiveRecord の connection を渡せるように拡張してある</li>
<li>Object recognition (物体検出) by Keras</li>
<li><a href="https://github.com/mrkn/ssd_keras">https://github.com/mrkn/ssd_keras</a></li>
<li>Python is a best friend of Ruby from now on</li>
<li><a href="https://github.com/mrkn/pycall.rb">https://github.com/mrkn/pycall.rb</a></li>
<li>Python での選択肢は Python のみか Rpy2 で R と連携の2個</li>
<li>今は PyCall を使えば良いが将来的には Ruby で</li>
<li><a href="https://red-data-tools.github.io/">https://red-data-tools.github.io/</a></li>
<li>Apache Arrow <a href="https://arrow.apache.org/">https://arrow.apache.org/</a></li>
<li>一つの言語で完結することは少ないので、データ交換が必要</li>
<li>シリアライズで結構 CPU 時間を使っている</li>
<li>シリアライズも組み合わせそれぞれから、共通化しようとしている</li>
<li><a href="https://github.com/red-data-tools/red-arrow">https://github.com/red-data-tools/red-arrow</a></li>
<li>Apache Arrow のコアメンバーにすとうさんが昨日入った</li>
<li><a href="https://gitter.im/red-data-tools/ja">https://gitter.im/red-data-tools/ja</a> <a href="https://gitter.im/red-data-tools/en">https://gitter.im/red-data-tools/en</a></li>
<li>明日の 13:50-15:50 in Room Ran で RubyData Workshop in RubyKaigi 2017</li>
<li>jupyter との連携は? → いい感じに使えている</li>
<li>Python のオブジェクトのメモリ管理と PyCall のオーバーヘッド → Ruby のオブジェクトが死んだ段階でデクリメントしている、オーバーヘッドは呼び出す処理による、 sin 関数などだとオーバーヘッドが大きいが numpy の行列計算などの重たい処理の場合はオーバーヘッドはあまり考えなくて良い</li>
<li>オブジェクトを変換しているか? → numpy のオブジェクトなどは変換していない、プリミティブは変換している</li>
</ul>


<h2>cookpad のスポンサーセッション</h2>

<ul>
<li>microservice 化でモデル数は減っている</li>
<li>なぜ Ruby <em>Committer</em> Sponsor ?</li>
<li>もっと良い言語が出てきたらどうするの? → Ruby を強くすれば良い</li>
<li>Ruby 3 に本気で向き合っている</li>
<li>cookpad &lt;&lt; mame</li>
</ul>


<h2>Ruby Committers vs the World</h2>

<p>コミッターなので壇上にいました。</p>

<ul>
<li>新コミッター紹介</li>
<li>rhe さん : openssl</li>
<li>k0kubun さん : ERB</li>
<li>watson さん : ちまちま速くするパッチを投げていたらコミッターになれた</li>
<li>質問のサンプルとして、型注釈の話</li>
<li>絶対書きたくない : 6人ぐらい</li>
<li>書かなくても良いが書くと良くなる : 多め</li>
<li>コメントぐらいなら良い (いざとなれば無視できる) : 多め</li>
<li>OpenMP みたいな感じ?</li>
<li>rdoc みたいなのがうれしい</li>
<li>古い処理系で無視されるといえば、すでにマジックコメントがある</li>
<li>現状だと動くものが型で制限されると嫌</li>
<li>matz: nominal type は絶対採用しない、String と書いても structal にしたい、できれば未来のためにプログラムの中に書くのは採用したくない、最低でもコメントに留めていたい</li>
<li>型を書かせたくないと思っているコミッター? → 4人ぐらい</li>
<li>Q(ujm): 右代入の本気度? →</li>
<li>akr: yield_self は右代入の代用の部分があるのではないか、左から右に流れるように書きたいことがあるのではないか</li>
<li>matz: 完全にフリーハンドであれば入れたい、長い歴史の中で記号を使い尽くしているので良い候補がない、既存のプログラムを壊れるような変更をしてまで入れるようなものではない</li>
<li>shyouhei: 他の言語では?</li>
<li>メモ取れず</li>
<li>durest: メソッドチェーンの話があったので、記号がなければメソッドでやってみるのはありではないか</li>
<li>会場を含めたアンケート</li>
<li>概念としてありは割といる</li>
<li>ないだろうはほとんどいない</li>
<li>Q(ujm): 変数とか定数とかどのあたりまでサポートするかという質問だった →</li>
<li>matz: 今代入の左辺になれるものは右代入でもサポートしたい</li>
<li>多重代入は難しい?</li>
<li>Q: YARV の命令仕様を確定して公開すると他の言語処理系が作れる? → 変化していくために固定する予定はないという感じ</li>
<li>他の案としては LLVM とか</li>
<li>Q: 右代入は <code>setter=</code> も対象? → matz: 当然</li>
<li>一番大変なのは parser</li>
<li>右代入で多重代入</li>
<li>後置 if との組み合わせ? → akr: 今の代入は式なのでできる、右代入は文にするというのはありかもしれない</li>
<li>機能制限するバージョンがあるか? → matz: ない、補助輪みたいなものは別のツールでサポートすれば良いのではないか</li>
<li>takao: 実際に使わせている子供達は補助輪を外したがっていたり、Ruby 認定資格を取りたがっていたりする場合もある</li>
<li>CI の実機が足りない問題は解決した? 今日の別の発表で Rails アプリケーションのベンチマークが取れるものが出てきている。Ruby 3x3 のユーザーからのフィードバックは何が必要? →</li>
<li>mame: 速くするパッチが必要 (watoson さんがやっているような)</li>
<li>以前 Mac の CI が足りないとか、ベンチマークが足りないとかいっていたが解決した? → matz: その件についてはだいぶ解決した</li>
<li>hsbt: CI 用のマシンは Ruby Association (RA) 経由である程度手配できるようになったが、 Windows の環境が足りない</li>
<li>Windows Server とか Visual Studio のライセンスを良い感じにする必要がある</li>
<li>matz: benchmark CI?</li>
<li>naruse: watson さんのが欲しい</li>
<li>ko1: RA や日本 Ruby の会経由で CI 用のマシンはなんとかなっている</li>
<li>さらにその上でベンチマークをなんとかしたい</li>
<li>RubyBench というのが何かやっている</li>
<li>watson: 今は個人のマシンで動かしている、自宅にはおきたくない、安定した結果が欲しいので実機が望ましい、足りないベンチマークを増やしたい</li>
<li>ko1: rails とか optcarrot とかだけではなく、これを速くして欲しいというのを提案して欲しい</li>
<li>matz: RA か日本 Ruby の会に寄付してくれると嬉しいが控除などはないのが申し訳ない</li>
<li>shyouhei: パッチを投稿していただくのはありがたいが、敷居が高いなら、雇って書かせるという手がある</li>
<li>Ruby 会議の運営を手伝ってもらえると、手が空いて間接的に、というのもある</li>
<li>hsbt: RubyKaigi 後に回復したら、パフォーマンスベンチを進めたい</li>
<li>matz: 転職活動している人?</li>
<li>ko1: 手があげられないのでは。</li>
<li>ko1: optcarrot と Rails 以外に使っている人?</li>
<li>shugo: テキストエディタが速くなると嬉しい、String が速くなるとうれしい</li>
<li>会場: fluentd</li>
<li>会場: puppet</li>
<li>amatsuda: ハッシュが速くなったので、fluentd が速くなったという話を聞いた</li>
<li>Q(ujm): Ruby, C, Streem, Emacs Lisp 以外に好きな言語?</li>
<li>matz: Swift, Clojure</li>
<li>mame: OCaml, Haskell?</li>
<li>takano: Smalltalk</li>
<li>akr: coq</li>
<li>nobu: FORTH</li>
<li>mrkn: julia</li>
<li>ko1: Ruby は好きだけど不満があるから直したい人が壇上には多いのでは</li>
<li>Q: インスピレーションの源になっているのは何?</li>
<li>matz: Lisp からたくさん、今後もたぶん、最近 2.0 の method prepend は CLOS のメソッドコンビネーション</li>
<li>takano: Lisp のマクロが羨ましい</li>
<li>mrkn: julia 推し</li>
<li><code>transform_keys</code> は Active Support (AS) と挙動は同じ? → nobu: 同じはず、<code>Hash#slice</code> も同様</li>
<li>amatsuda: 使い勝手は変わらないが、C実装になるのでちょっと速くなる</li>
<li>AS のようなものをどんどん入れる?</li>
<li>matz: 全部入れる気はないが、use case などでちゃんと説得してもらえば入る可能性はある、AS に入っているからという理由で入ることはない</li>
<li>amatsuda: AS は Web では便利だが、汎用的に入れるものかどうかは疑問</li>
<li>ko1: 年単位で議論して入ったものもある (入らなかったものもある)</li>
<li>amatsuda: 違う仕様で入ったものもある、 <code>Array#sum</code> とか</li>
<li>mrkn: Cで書くと float の誤差が改善されるということで、そういう実装が入った</li>
</ul>


<h2>懇親会</h2>

<p>食べ物の列は待っていれば短くなるかなと思って、話をしながら待っていたらそんなことはなかったので、並んでみたらギリギリ少し残っていたのが食べられて、その後で野菜が残っているのをみつけたのでそれを食べたりしていたので、全然食べられないということはなかったので、二次会には行きませんでした。</p>

<p>明日の懇親会と違って、オフィシャルパーティーはみんな集まっているので、複数人で話したいこと(<a href="https://bugs.ruby-lang.org/issues/13904">getter for original information of Enumerator</a>の件)は、この日のうちに話しておくべきだと思ったのですが、集められなかったので無理でした。後から確認したら、頑張って英語で書いたおかげで代わりにメンテナーを説得しようとしてくれる人がいて、結果的には大丈夫そうです。いいたかったのも、直接は関係がないので mrkn さんとかに説得を頑張って欲しいと言いたかっただけぐらいなので、明日以降に個別に言っておいても良いかもしれないと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby の文字リテラルについて]]></title>
    <link href="http://blog.n-z.jp/blog/2017-09-10-ruby-char-literal.html"/>
    <updated>2017-09-10T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ruby-char-literal</id>
    <content type="html"><![CDATA[<p>Ruby には <code>?a</code> で 1 文字のみの文字列を返す文字リテラルというものがあります。</p>

<p>Ruby を 1.9 以降から使い始めた人には <code>'a'</code> などの文字列リテラルとの使い分けや <code>String#chr</code> の存在意義などがわからないと思ったので、知っている範囲で歴史的経緯を説明してみたいと思います。</p>

<!--more-->


<h2>Ruby 1.8 以前と Ruby 1.9 以降の違い</h2>

<p>マルチエンコーディング対応が入る前の文字リテラルは1バイト文字用のリテラルで、多バイト文字は使えませんでした。
コントロールやメタは昔から使えました。</p>

<p>以降の実行例も含めて、実行例は 2.0 以降も同じなので、省略しています。
1.8.6 以前は未確認ですが、1.8.7 とほぼ同じはずです。</p>

<pre><code>% rbenv each ruby -ve 'p ?a'
ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
97
ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
"a"
% rbenv each ruby -ve 'p ?あ'
ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
-e:1: Invalid char `\201' in expression
-e:1: Invalid char `\202' in expression
ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
"あ"
% rbenv each ruby -ve 'p ?\C-a'
ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
1
ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
"\u0001"
% rbenv each ruby -ve 'p ?\M-a'
ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
225
ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
"\xE1"
</code></pre>

<h2>文字とは?</h2>

<p>文字を表すのに専用のクラスを導入するという案もあったようですが、Ruby は大クラス主義だという点や、必要とされる機能が文字列とほとんど変わらない、文字というのを文字列とは別に定義するのは難しいなどの理由から、最終的には1文字だけの String で文字を表すことになったと記憶しています。
詳細はメーリングリストや redmine の issue の議論などを探してみてください。</p>

<h2>getc と文字リテラル</h2>

<p>文字リテラルの用途として CUI アプリなどで <code>getc</code> で入力した文字との比較という使われ方があったようで、 <code>getc</code> などを使っているプログラムが、文字リテラルと比較する書き方をしていれば壊れないようになっています。</p>

<pre><code>% rbenv each ruby -ve 'p ARGF.getc' /dev/zero
ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
0
ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
"\u0000"
% rbenv each ruby -ve 'p ARGF.getc == ?\C-@' /dev/zero
ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
true
ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
true
</code></pre>

<h2><code>String#chr</code></h2>

<p><a href="https://docs.ruby-lang.org/ja/latest/method/String/i/chr.html">String#chr</a> は単独で見ると <code>str[0]</code> などで代用できるので不要そうなメソッドですが、
文字リテラルや <code>getc</code> の返り値を文字列にするのに <code>chr</code> が使われていたので、
<code>String#chr</code> も互換性のために存在します。</p>

<pre><code>% rbenv each ruby -ve 'p ?a.chr'
ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
"a"
ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
"a"
% rbenv each ruby -ve 'p ARGF.read(1) == ?\C-@.chr' /dev/zero
ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
true
ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
true
</code></pre>

<h2>ord</h2>

<p>逆に <code>ord</code> は <code>str[0]</code> の返り値が文字列に変わってしまったので、常に数値が欲しい時にも使っていました。</p>

<pre><code>% rbenv each ruby -ve 'p ?\C-@.ord'
ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
0
ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
0
% rbenv each ruby -ve 'p "a"[0]'
ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
97
ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
"a"
% rbenv each ruby -ve 'p "a"[0].ord'
ruby 1.8.7 (2013-12-22 patchlevel 375) [x86_64-linux]
97
ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]
97
</code></pre>

<h2>結論</h2>

<p>新規に書くプログラムで積極的に文字リテラル ( <code>?a</code> ) を使う必要性はほとんどないので、普通は文字列リテラルだけ使っておけば良いと思います。</p>

<p><code>getc</code> などとの組み合わせのときに文字リテラルを使えば意味を明確にできますが、今更 1.8 以前との互換性を気にすることもないと思うので、古いプログラムで使われていたときに読めればいいだけで、書くときに使う必要はないと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第78回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-29-rubykansai78.html"/>
    <updated>2017-07-29T13:04:59+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai78</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/62491">第78回 Ruby関西 勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<p>グランフロントでわかりにくい場所でしたが、きたことがあったので、すんなり来れました。
会場無線 LAN も前回の設定のまま使えました。</p>

<h2>rails にコントリビュートしてきました</h2>

<ul>
<li>integration test は get などを使う</li>
<li>system test は visit などを使う</li>
<li>system test のクラスは integration test のクラスを継承しているので get が使えて何も起こらなくてはまった</li>
<li>メソッドを消す pull request を送った</li>
<li>迷ったらとりあえず送ってみてリジェクトされても気にしない</li>
<li>英語もだいたいなんとかなる</li>
</ul>


<h2>GitLab + Dokku で作る CI/CD 環境</h2>

<p>発表資料はいつも通り<a href="">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/rubykansai78-gitlab-dokku/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/gitlab-dokku-cicd">slideshare</a>, <a href="https://speakerdeck.com/znz/cd-huan-jing">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-rubykansai78-gitlab-dokku">RubyGems</a> にあげています。</p>

<p><a href="/blog/categories/gitlab/">gitlab カテゴリー</a>の一覧へのリンクを発表直前に追加したので、GitHub のソース以外には7月30日になってから反映しました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykansai78-gitlab-dokku/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykansai78-gitlab-dokku/" title="GitLab + Dokku で作る CI/CD 環境">GitLab + Dokku で作る CI/CD 環境</a>
</div>


<h2>AM/PMって知ってます？</h2>

<ul>
<li>acquisition (獲得) metaphor</li>
<li>participation (参加) metaphor</li>
</ul>


<h2>rubocopとの付き合い方　〜守・破・離〜</h2>

<ul>
<li>コードレビュー</li>
<li>新人教育, 品質向上, 相互学習</li>
<li><a href="http://d.hatena.ne.jp/naoya/20140313/1394664578">些末なコードレビュー - naoyaのはてなダイアリー</a> の &ldquo;やらなければいけないのは、「その設計は拡張に対して開いていないから開くべき」とか「これではエッジケースが想定されていないからこういう不具合につながるのでは」とか「そのテストでは後日見返したときに第三者が要求仕様を解釈しづらい」とかそういう指摘である。&rdquo;</li>
<li>&ldquo;lint ツールか何かで機械的にチェックすればよい&rdquo;</li>
<li><a href="https://github.com/bbatsov/ruby-style-guide">https://github.com/bbatsov/ruby-style-guide</a></li>
<li>Cop: StyleCop, LayoutCop, LintCop, MetricsCop, PerformanceCop, SecurityCop, RailsCop, BundlerCop</li>
<li>auto-correct</li>
<li>Todo リスト: <code>rubocop --auto-gen-config</code></li>
<li>守・破・離</li>
<li>houndci, sideci など</li>
<li>エディタ連携, guard-rubocop</li>
<li>syntastic だと非同期処理してくれなくて保存の度に固まるので deoplete (+neovim) を使っている</li>
<li>rails developer meetup, 次回: 8/24(木)19:30から, connpass での募集は8/1から, ハッシュタグ <code>#railsdm</code></li>
</ul>


<h2>Ruby と C# をつなぐ</h2>

<ul>
<li><a href="https://github.com/masoo/ruby-csharp_script">https://github.com/masoo/ruby-csharp_script</a></li>
<li>Ruby から C# を使う話だった</li>
<li>色々大変そうだった</li>
</ul>


<h2>RubyはPythonにしてやられてはいない</h2>

<ul>
<li>Ruby ビジネスフォーラムに参加した</li>
<li>午後のパネルディスカッションの内容の紹介</li>
<li>午前の基調講演の内容の紹介</li>
<li>その他イベント紹介</li>
</ul>


<h2>Ruby 初級者向けレッスン 61回 - 文字列</h2>

<p>安定したいつものような内容でした。</p>

<h2>クロージング</h2>

<ul>
<li>イベント告知など</li>
<li>明日同じ場所で<a href="https://techplay.jp/event/626491">ELFとDWARF勉強会</a></li>
<li><a href="https://dddrb.doorkeeper.jp/events/63433">DDD.rb #14 Redux で気軽に始める テスト駆動開発 - DDD.rb | Doorkeeper</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby と Perl 5.26 の &lt;&lt;~ の挙動の違い]]></title>
    <link href="http://blog.n-z.jp/blog/2017-06-25-indented-here-document.html"/>
    <updated>2017-06-25T22:22:22+09:00</updated>
    <id>http://blog.n-z.jp/blog/indented-here-document</id>
    <content type="html"><![CDATA[<p>Ruby には 2.3.0 から入っていた indented here document が<a href="https://mag.osdn.jp/17/06/02/161500">「Perl 5.26」リリース、「@INC」の仕様が変更される | OSDN Magazine</a> によると、Perl 5.26 にも入ったようなのですが、挙動が若干違うようなので、調べてみました。
(最初に調べたのは OSDN Magazine の記事をみた直後だったのですが、調べた結果を残し忘れていたので、今日調べなおしたものになります。)</p>

<!--more-->


<h2>動作確認環境</h2>

<p>Perl の最新を試すために archlinux を使ってみました。</p>

<ul>
<li>OS は vagrant で <a href="https://atlas.hashicorp.com/terrywang/boxes/archlinux">terrywang/archlinux</a> の box を使って <code>sudo pacman -Syu</code> した環境</li>
<li>ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux]</li>
<li>This is perl 5, version 26, subversion 0 (v5.26.0) built for x86_64-linux-thread-multi</li>
</ul>


<h2>Ruby での基本動作</h2>

<p>Ruby では基本的に indented here document の中で一番インデントが浅いところを基準に削られます。</p>

<p>Perl では <code>&lt;&lt;</code> の代わりに <code>&lt;&lt;~</code> を使っただけでは削られません。</p>

<pre><code>vagrant@archlinux:~$ cat /tmp/a
print &lt;&lt;~END;
    4
 1
  2
END
vagrant@archlinux:~$ ruby /tmp/a
   4
1
 2
vagrant@archlinux:~$ perl /tmp/a
    4
 1
  2
</code></pre>

<h2>Perl での基本動作</h2>

<p>Ruby では <code>&lt;&lt;-</code> と同様に閉じる識別子のインデントは意味を持ちませんが、
Perl では閉じる識別子のインデント分が削られます。</p>

<pre><code>vagrant@archlinux:~$ cat /tmp/b
print &lt;&lt;~END;
   3
    4
  2
 END
vagrant@archlinux:~$ ruby /tmp/b
 3
  4
2
vagrant@archlinux:~$ perl /tmp/b
  3
   4
 2
</code></pre>

<h2>Perl でのエラー例</h2>

<p>Perl では閉じる識別子のインデントより浅い部分があるとエラーになります。</p>

<pre><code>vagrant@archlinux:~$ cat /tmp/c
print &lt;&lt;~END;
 1
    4
  2
  END
vagrant@archlinux:~$ ruby /tmp/c
1
   4
 2
vagrant@archlinux:~$ perl /tmp/c
Indentation on line 1 of here-doc doesn't match delimiter at /tmp/c line 1.
</code></pre>

<h2>Ruby で一番浅い行頭に空白を入れたい場合</h2>

<p>Ruby では一番浅い行頭に空白を入れたい場合はエスケープする必要があります。</p>

<p>Perl では最初の2例のように閉じる識別子のインデントの方を浅くするだけです。</p>

<pre><code>vagrant@archlinux:~$ cat /tmp/d
print &lt;&lt;~END;
 \ x
    4
  2
 END
vagrant@archlinux:~$ ruby /tmp/d
 x
   4
 2
vagrant@archlinux:~$ perl /tmp/d
 x
   4
 2
</code></pre>

<h2>感想</h2>

<ul>
<li>Ruby の仕様の方が内容を開始の行と終了の行よりインデントしたい時には都合が良さそうと感じました。</li>
<li>Perl の仕様の方がパーサーは単純になって速そうという印象を受けました。 (実際に速いかどうかは調べていません。)</li>
<li>Perl の仕様の方が行頭にある程度の空白を残したい場合は都合が良さそうと感じました。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[関西Ruby会議2017に参加しました #kanrk2017]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-27-kansairubykaigi2017.html"/>
    <updated>2017-05-27T21:09:15+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansairubykaigi2017</id>
    <content type="html"><![CDATA[<p><a href="http://regional.rubykaigi.org/kansai2017/" title="関西Ruby会議2017">関西Ruby会議2017</a>に参加しました。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>オープニング</h2>

<ul>
<li>スポンサーの紹介</li>
<li>会場のトイレの場所などの説明</li>
</ul>


<p>オープニングでは何も言っていませんでしたが、ハッシュタグは <code>#kanrk2017</code> のようでした。(doorkeeper のイベントページからツイートしようとするとつく)</p>

<h2>スポンサーセッション</h2>

<p>最初はアジャイルウェアさんのスポンサーセッションでした。</p>

<h2>基調講演: 株式会社クリアコード</h2>

<ul>
<li>「株式会社クリアコード」というタイトルの発表</li>
<li>テーマ: コミュニティーとビジネス</li>
<li>twitter 連携が下に出ていた。たぶん <a href="https://rabbit-shocker.org/ja/rabbiter/" title="Rabbiter">Rabbiter</a> (Rabbitter ではない) です。</li>
<li>大事にしていること: フリーソフトウェアの推進と稼ぐことの両立</li>
<li>学んだこと1: 問題は upstream で直す</li>
<li>フリーソフトウェアが大事にしていることの1つは「直せること」！</li>
<li><a href="http://www.clear-code.com/blog/2011/12/6.html" title="デバッグ力: よく知らないプログラムの直し方 - ククログ(2011-12-06)">デバッグ力: よく知らないプログラムの直し方 - ククログ(2011-12-06)</a></li>
<li>学んだこと2: 開発を続けられるコードを書く</li>
<li>継続的に開発とビジネス</li>
<li>長期間一緒にやれる仕事を優先</li>
<li>フリーソフトウェア開発の世界</li>
<li>ユースケースを確認する</li>
<li>学んだこと3: 相手が想像しなくてもわかるように説明する</li>
<li>学んだこと4: 楽しく開発する</li>
<li>学んだこと5: 非難するよりも手を動かす</li>
<li>学んだこと6: 回避策よりも根本解決</li>
<li>受託開発の優先度</li>
<li>a: フリーソフトウェアを直接的に推進できる仕事</li>
<li>b: フリーソフトウェアを間接的に推進できる仕事</li>
<li>c: いずれ推進につながりそうな仕事</li>
<li>FLOSSサポート: 導入支援と障害調査</li>
<li>事例：Firefox/Thunderbirdの企業導入</li>
<li>公開することで宣伝にもなるので次の仕事に繋がることがある</li>
<li>OSS開発支援</li>
<li>どうして仕事になるか</li>
<li>OSSのエコシステムに参加</li>
<li>自分たちのソフトウェアとOSSを同じように扱う</li>
<li>問題があれば直す</li>
<li>気になるところがあれば共有</li>
<li>仕事の作り方: お客さんに見つけてもらう</li>
<li>お客さん探しを頑張らない</li>
<li>諦めることは大事</li>
<li>決断</li>
<li>決断する基準があると楽しめる (自分の中で基準がはっきりしていないうちは大変だった)</li>
<li>クリアコードの基準: フリーソフトウェアの推進と稼ぐことの両立</li>
<li>お客さん探しと稼ぐこと</li>
<li>推進と稼ぐことの両取り</li>
<li>推進→見つけてもらった例: milter manager</li>
<li>最近の推進兼営業活動: Apache Arrow</li>
<li><a href="https://classmethod.connpass.com/event/56478/" title="【5/28大阪】データ分析用次世代データフォーマットApache Arrow勉強会 - connpass">【5/28大阪】データ分析用次世代データフォーマットApache Arrow勉強会 - connpass</a></li>
<li>採用</li>
<li>マッチする人は少なそう</li>
<li>業務内容ではなくポリシーでマッチ</li>
<li>フリーソフトウェアの推進 → 見つけてもらう</li>
<li>RubyKaigiにスポンサー: Rubyを応援したいので始めた, 採用は期待していなかった</li>
<li><a href="https://slide.rabbit-shocker.org/authors/kou/kansai-rubykaigi-2017/" title="株式会社クリアコード - Kouhei Sutou - Rabbit Slide Show">株式会社クリアコード - Kouhei Sutou - Rabbit Slide Show</a></li>
<li>質疑応答</li>
<li>かくたにさんを指名</li>
<li>とてもいい会社説明会でした</li>
<li>joker1007 さん: upstream に取り込まれなかった場合は?</li>
<li>一言で言うとケースバイケース</li>
<li>ユースケースに合わせた形で再検討</li>
<li>?: フリーソフトウェアと OSS という言葉の使い分け</li>
<li>本質が大事だと思うときはフリーソフトウェア</li>
<li>お客さん視点のときは OSS</li>
<li>クリアコード視点だとフリーソフトウェア</li>
<li>外からは OSS</li>
<li>あとで個別に説明します</li>
<li>むりょういさん: 使っているソフトウェアについて(?) (ちゃんと聞き取れなかった)</li>
<li>Firefox / Thunderbird: すでにノウハウがあった(?) (ちゃんと聞き取れなかった)</li>
<li>Apache Arrow: いけると思って推進している</li>
<li><a href="https://slide.rabbit-shocker.org/authors/kou/kansai-rubykaigi-2017">https://slide.rabbit-shocker.org/authors/kou/kansai-rubykaigi-2017</a></li>
</ul>


<h2>休憩</h2>

<p>スポンサーブースとどら焼きの案内があった。</p>

<h2>Rubyでデータサイエンスを行うための取り組み</h2>

<ul>
<li>ko1 さんと mrkn さんが始めた活動</li>
<li>データサイエンスは技術的にどうおもしろいか</li>
<li>データサイエンスとは</li>
<li>データソース (Excel, RDB, &hellip;) - 前処理 (文字列整形, 欠損値処理, &hellip;) - 分析 (機械学習, 統計) - 可視化 (散布図, 棒, 箱ひげ, &hellip;) - 多次元データの理解, モデルに基づいた予測</li>
<li>データサイエンスは、9割を前処理に費す</li>
<li>具体例</li>
<li>近年の状況</li>
<li>データが増えている</li>
<li>データ分析環境が進歩している</li>
<li>データサイエンスの民主化が進んでいる</li>
<li>Ruby のデータサイエンスの現状</li>
<li>ウェブブラウザからのRubyの実行</li>
<li>データサイエンスに関わるRubyのgem群</li>
<li>docker で試す</li>
<li><a href="https://hub.docker.com/r/sciruby/">https://hub.docker.com/r/sciruby/</a> <a href="https://hub.docker.com/r/rubynumo/">https://hub.docker.com/r/rubynumo/</a> のあたり?</li>
<li>PyCall について</li>
<li>Arrow を介した Ruby 外言語との連携</li>
<li>Python と R が二大言語</li>
<li>Python でできるけど R だと簡単にできないとか R だとできるけど Python だと簡単にできないとかいうときにも Arrow で簡単に連携できるようになったらしい</li>
<li>コミュニティの重要性</li>
<li>(red-)arrow の出現に伴う変化?</li>
<li>複数言語の連携が容易になる</li>
<li>他言語にはない優位性を持つ gem や独自機能を持つ gem が求められる?</li>
<li><a href="http://sciruby-slack.herokuapp.com/">http://sciruby-slack.herokuapp.com/</a></li>
<li><a href="https://gitter.im/red-data-tools/">https://gitter.im/red-data-tools/</a></li>
<li>質疑応答</li>
<li>発表者: データサイエンスに興味がある人が少ない?</li>
<li>joker1007 さん: Ruby でやれると嬉しいが、目の前の問題を解決するには他の手段を使ってしまう。 Ruby は分散処理のコンポーネントが少ない? Ruby は好きなので長期的には Ruby でできると嬉しい。</li>
<li>arrow があっても独自性がないと厳しい?</li>
<li>すぐには難しい</li>
<li>可視化あたり?</li>
<li><a href="https://github.com/sciruby-jp/ruby-datascience-examples/blob/master/Ruby%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9%E3%82%92%E8%A1%8C%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF.pdf">https://github.com/sciruby-jp/ruby-datascience-examples/blob/master/Ruby%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9%E3%82%92%E8%A1%8C%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF.pdf</a></li>
</ul>


<h2>昼休憩</h2>

<p>11:56 から 12:50 まで。</p>

<h2>エンタープライズRubyOnRails エンプラでぶち当たった2つの壁と突破法</h2>

<ul>
<li>自己紹介</li>
<li>会社紹介</li>
<li>エンタープライズに Ruby on Rails は不向きと言われている</li>
<li>1: 高すぎる柔軟性</li>
<li>2: Rails による規約の縛り</li>
<li>本日お伝えしたいこと: 具体的な壁と突破方法</li>
<li>プロジェクト概要: 写真は <a href="https://twitter.com/ujm/status/868315623561977856">https://twitter.com/ujm/status/868315623561977856</a></li>
<li>ソース管理: GitLab (ギットラボとよんでいた)</li>
<li>経験者が少ない (10人に1人)</li>
<li>2つの壁にあたった</li>
<li>コードのメンテナンス性低下</li>
<li>経験者が不足するとどうなるか</li>
<li>一貫性のないコードが量産される</li>
<li>レビュアーが困る</li>
<li>コンフリクトの多発</li>
<li>merge request でモデルのコンフリクトが多発</li>
<li>レビュアーの負担が激増</li>
<li>壁は想像以上に高かった</li>
<li>突破法を考えてみた</li>
<li>コードメンテナンス性の壁 → 強力な IDE レベルの仕組み → 開発統制</li>
<li>コンフリクトの壁 → 人が編集するファイルの極少化 → 自動生成</li>
<li>RuboCop SubimeText3 独自チェッカー Drone</li>
<li>rb ファイルと erb ファイルをチェック</li>
<li>RuboCop でチェック</li>
<li>erb は注釈宣言を警告して erb のコメントアウトを使うように</li>
<li>CI がパスしなかったら merge request をマージできない</li>
<li>Excel の設計書から自動生成</li>
<li>権限やルーティングを自動生成</li>
<li>routing ファイルを分割</li>
<li>一部は手動変更可能 (gem 関連とか)</li>
<li>ER 図からも自動生成</li>
<li>マイグレーション、RSpec、Model を生成</li>
<li>モデルファイルをモジュールに分割して自動生成</li>
<li>画面設計から view も自動生成</li>
<li>ロジックが必要ない部分は基本的に自動生成にした</li>
<li>結果</li>
<li>レビュアーの負担が減少</li>
<li>64.9% (約31000行) が自動生成</li>
<li>コンフリクト発生率 25% → 5%</li>
<li>質疑応答</li>
<li>?: コンフリクト解決の責任はレビュアー?</li>
<li>そうです。</li>
<li>?: ? (メモ取れず)</li>
<li>決めるにあたって色々葛藤があったが詳細は懇親会で</li>
<li><a href="https://www.slideshare.net/kakko1003/ruby-on-rails-2">https://www.slideshare.net/kakko1003/ruby-on-rails-2</a></li>
</ul>


<h2>Rubygem開発の流儀</h2>

<ul>
<li>プロジェクター接続トラブル</li>
<li>awesome なのでサイズ調整ができない</li>
<li>表示がおかしい (上の一部が下に出ている)</li>
<li>自己紹介</li>
<li>会社紹介</li>
<li>本題の Rubygem 開発について</li>
<li>Rubygem についておさらい</li>
<li>bundler 便利</li>
<li>パーフェクト Ruby 第二版</li>
<li>著者献本を持ってきたのでブログに書いてくれる人にプレゼントしたい</li>
<li>作り始めが簡単でも gem を作ってリリースするには別のハードルがある</li>
<li>gem をざっくり分類</li>
<li>開発支援系: ほとんどの gem</li>
<li>クライアント系</li>
<li>フレームワーク/ミドルウェア系</li>
<li>プラグイン系</li>
<li>既存 gem 改造系</li>
<li>業務特化系</li>
<li>便利ツール系</li>
<li>パフォーマンス向上系</li>
<li>既存gem の改造やプラグイン系が作りやすいし、ゴールがわかりやすい</li>
<li>色々な gem を参考にネタを探す</li>
<li>とにかく日々のイライラや不満を言語化し、色々な gem のパターンと突き合わせる。</li>
<li>gem を作り始める前にやること</li>
<li>gem 開発のコストとは</li>
<li>activerecord-cause の場合</li>
<li>gem を作るときに考えておくこと</li>
<li>行儀の良さとは</li>
<li>gem の外の世界を壊さないなど</li>
<li>rspec-storage の場合</li>
<li>よくない例</li>
<li>非公開な API 使いまくり</li>
<li>汎用化の暗部</li>
<li>たとえば <code>devise</code> や <code>rails_admin</code> のコードが簡単に読めますか?</li>
<li>作った後の OSS 活動</li>
<li>昨日追加要求について</li>
<li>基本的に「Welcome your PR」で良いと思っている。</li>
<li>Welcome PR なんだけど&hellip;</li>
<li>機能追加系の対応にはポリシーが必要</li>
<li>実装せずに済ます強い心の例</li>
<li>まとめ</li>
<li>kozo2 さん: embulk の gem には jar が同梱されていると言う話があったがファイルサイズの上限はあるのか?</li>
<li>あった気がするが引っかかったことがないのでわからない。</li>
<li>kozo2 さん: データを大量に入れたい。</li>
<li>日本の祝日の gem のようにデータのみの gem の例はある。</li>
<li>パーフェクト Ruby 第二版のプレゼントのじゃんけん大会</li>
<li><a href="https://twitter.com/9gmotonari/status/868332186025443328">https://twitter.com/9gmotonari/status/868332186025443328</a></li>
<li><a href="https://speakerdeck.com/joker1007/rubygemkai-fa-falseliu-yi" title="Rubygem開発の流儀 // Speaker Deck">Rubygem開発の流儀 // Speaker Deck</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li><a href="https://rubykaigi.doorkeeper.jp/events/61062" title="RubyKaigi 2017">RubyKaigi 2017</a> の受付が始まっている</li>
</ul>


<h2>コミュニティ文化の取り込みとその機会で得た知見</h2>

<ul>
<li>会社のスポンサー表示</li>
<li>Contents</li>
<li>Community?</li>
<li>社内のコミュニティ感</li>
<li>個人的成果の紹介</li>
<li>webpacker を使っている人: 1桁ぐらいしかいない</li>
<li>自己紹介</li>
<li><a href="https://github.com/muryoimpl/buoys">https://github.com/muryoimpl/buoys</a></li>
<li>Community とは?</li>
<li>この場もコミュニティ</li>
<li>一緒に仕事をする人たちもコミュニティと言える</li>
<li>コミュニティとの接点</li>
<li>(同じタイトルで違うスライドがしばらく続いていたのでメモを取り損ねたので、諦めて聞いていた)</li>
<li><a href="https://github.com/muryoimpl/slippr">https://github.com/muryoimpl/slippr</a></li>
<li><a href="https://github.com/muryoimpl/talker-signupper">https://github.com/muryoimpl/talker-signupper</a></li>
<li>時間がおしているので質疑応答はなし</li>
<li><a href="https://speakerdeck.com/muryoimpl/kansai-ruby-kaigi-2017">https://speakerdeck.com/muryoimpl/kansai-ruby-kaigi-2017</a></li>
</ul>


<h2>Rubyistと技術記事 ～なぜ書くの？どう書くの？何が起きるの？～</h2>

<ul>
<li>自己紹介</li>
<li>Rubyist と技術記事</li>
<li>技術記事を書く = 知見のオープンソース化</li>
<li>一般論から個人の話へ</li>
<li>これまでの活動内容</li>
<li>知っている人挙手 → 写真とらせて</li>
<li>なぜ書くの?</li>
<li>困る、ググる、助かった！のギブアンドテイク</li>
<li>助かった、ありがとうの声が1つでもあると嬉しい</li>
<li>何を書くの?</li>
<li>困る、ググる、助かった！の流れをイメージする</li>
<li>いつ、どう書くの?</li>
<li>朝型なので、起床してから仕事を始めるまでの時間で書く</li>
<li>公開前に何度も読み直して校正する</li>
<li>公開後でも校正する</li>
<li>わかりやすい記事を書くためには</li>
<li>読者ファースト: 困っている人を想定して書く</li>
<li>その技術のおいしさを引き出せる、実践的な例を出す</li>
<li>文章とコードをバランスよく配分する</li>
<li>タイトルは超重要！</li>
<li>Qiita とブログの使い分け</li>
<li>Qiita は技術が主役</li>
<li>ブログは自分が主役</li>
<li>Twitter と YouTube の使い分け</li>
<li>参考: 初期のブログ</li>
<li>何が起きるの?</li>
<li>お金の話</li>
<li>技術記事とお金の話</li>
<li>お金より、信頼やレピュテーション</li>
<li>技術記事Q&amp;A</li>
<li>Q3: 執筆時間を短くするコツは?</li>
<li>A: 時間を気にしたことがない。それよりもわかりやすさ重視</li>
<li>描き続ければ基本的な速さは身につく</li>
<li>Q4: 反響がなくてよくヘコみます。これを克服するには?</li>
<li>A: 狙ってもどうせ当たらない。1件でも反響があれば成功と考える</li>
<li>Q5: 描きたいけどかけない。時間もない。どうすれば?</li>
<li>A: タスク管理をしっかり。</li>
<li>まとめ</li>
<li>まとめ (ふたたび一般論)</li>
<li>最後に追加アナウンス: 「プロを目指す人のためのRuby入門」という本が2017年11月発売予定</li>
<li><a href="https://speakerdeck.com/jnchito/number-kanrk2017" title="Rubyistと技術記事 // #kanrk2017 // Speaker Deck">Rubyistと技術記事 // #kanrk2017 // Speaker Deck</a></li>
</ul>


<h2>子どものためのプログラミング道場「CoderDojo」を支えるRails CMSの活用事例</h2>

<ul>
<li>上の5階でやっていた様子を取材してきた</li>
<li>子供同士も含めたコミュニティ</li>
<li>全国各地でやっている (85 以上、今年中に 100 を超えそう)</li>
<li>世界中でやっている (1200 以上)</li>
<li>本日の話</li>
<li>CoderDojo とは (済)</li>
<li>なぜ Rails + CMS?</li>
<li>Scrivito の活用事例</li>
<li>なぜ Rails?</li>
<li>初期は GitHub Pages で生成</li>
<li>デザイン改善 + Parse 利用</li>
<li>Parse 終了のお知らせ</li>
<li>要望や状況を整理するよい機会だった</li>
<li>コミットしているのが2人 (実際は1人) だけだった</li>
<li>状況の変化に対応しやすい Rails</li>
<li>ドキュメントも多い</li>
<li>Rails Tutorial, Rails ガイド</li>
<li>翻訳をやっているのは弊社</li>
<li>ただ Rails の学習コストは高い (と思う)</li>
<li>CMS?</li>
<li>様々なコントリビュータ</li>
<li>「エンジニア」じゃなくても貢献できる</li>
<li>Scrivito: Cloud-Based Rails CMS</li>
<li>Rails に Scrivito gem を足す</li>
<li>ブラウザーで編集できる機能を追加できる</li>
<li>コントリビューターが以前2人が今は15人</li>
<li>Scrivito の活用事例</li>
<li>CoderDojo Japan 公式本</li>
<li>大枠を Rails 側の view で作って、各章の担当者が該当する部分の文言を直接編集</li>
<li><a href="https://coderdojo.jp/kata">https://coderdojo.jp/kata</a> の「2017年1月には全国で70ヶ所以上」を「2017年5月には全国で84ヶ所以上」に更新するデモ</li>
<li><a href="https://github.com/coderdojo-japan/coderdojo.jp">https://github.com/coderdojo-japan/coderdojo.jp</a></li>
<li><a href="https://speakerdeck.com/yasulab/coderdojo-wozhi-eru-rails-cms-falsehuo-yong-shi-li">https://speakerdeck.com/yasulab/coderdojo-wozhi-eru-rails-cms-falsehuo-yong-shi-li</a></li>
</ul>


<h2>スポンサーセッション</h2>

<p>Ruby開発さんのスポンサーセッションでした。</p>

<h2>基調講演: 18年でRubyから学んだこと</h2>

<ul>
<li>自己紹介</li>
<li>風呂グラマー</li>
<li>IT芸人</li>
<li>Ruby歴 18年ぐらい</li>
<li>一番好きなメソッド: <code>method_missing</code></li>
<li>次は <code>define_method</code>, その次は <code>eval</code></li>
<li>局所的に綺麗にかけるものが好き</li>
<li>dRuby</li>
<li>ずーっとユーザ</li>
<li>gem も 1 個だけ <code>pr_geohash</code></li>
<li>mruby</li>
<li>1999年: i-mode など</li>
<li>Ruby本が立て続けに出た時期があった</li>
<li>オブジェクト指向</li>
<li>Ruby に教わったこと</li>
<li>2000年代前半: PHPでPukiWiki作ってた など</li>
<li>伽藍(がらん)とバザールだけでも良いので読むのをおすすめ</li>
<li>元の作者から引き継いでコミュニティを作って、年末には別のコミッターに渡した</li>
<li>Windows でも頑張ってた</li>
<li>wxWindows とか QT 使って GUI アプリ作り</li>
<li>exerb 使ってパッケージング</li>
<li>ActiveScript Ruby</li>
<li>Ruby on Rails</li>
<li>2004/07 - DHH が公開</li>
<li>2005年頭ぐらいに発見</li>
<li>すごい! Ruby で Web アプリがキレイに作れる</li>
<li>2005年から Ruby 漬け: Rails を試して, ブログ書いて, 雑誌に記事を書く</li>
<li>OSC Hokkaido 2005</li>
<li>たぶん初めて Matz を見たのはこのとき</li>
<li>英語で質疑応答していた</li>
<li>10分で作る Rails アプリ for Windows</li>
<li>編集ソフトがなかったので無編集</li>
<li>本当に10分でできるというのを示す意味もあった</li>
<li>typo とかで何度もとりなおした</li>
<li>pingking.jp</li>
<li>@nifty の about me</li>
<li>RailsConf 2006</li>
<li>初めての海外</li>
<li>英語力ゼロ</li>
<li>リアル Ruby 友達もほぼゼロ</li>
<li>初の海外カンファレンス</li>
<li>スライドのキーワードでなんとなくわかる</li>
<li>内容はRails勉強会@東京の方がすごいのでは?</li>
<li>Ruby歴なら絶対自分の方が長い</li>
<li>なら渡米しよう</li>
<li>色々あって2008年渡米</li>
<li>結局英語は喋れるようにはならなかった</li>
<li>Seattle.rb</li>
<li>英語わからないけどなんとなく参加して覚えた</li>
<li>英語はブロークンな20代の若者の英語が身についた</li>
<li>Appcelerator へ転職</li>
<li>知り合いのいないコミュニティーで活動したい</li>
<li>Node.js と Titanium Mobile</li>
<li>Titanium Mobile にパッチ送ったりチャットで話ししたりしているうちに中の人に</li>
<li>GitHub のスターが多かったからだとあとで聞いた</li>
<li>影響を受けた人: matz さん, hyuki さん (スライドではアイコンだけ)</li>
<li>どちらもキリスト教の人</li>
<li>テクノロジーに愛を謳う</li>
<li>ロジカルじゃない</li>
<li>MINSWAN = Matz Is Nice So We Are Nice</li>
<li>心理的安全性</li>
<li>Matz はストーリーを語るのが上手い</li>
<li>DHHも</li>
<li>こういうのがうまい人は抽象化がうまい</li>
<li>初めてのRuby本体への貢献</li>
<li>mruby</li>
<li>RubyConf 2010 で聞いた</li>
<li>そっから進捗を全然聞かない</li>
<li>2012年のリリース前時点の private repo のアクセス権をもらった</li>
<li>やること多数</li>
<li>GitHub 以後の開発コミュニティ</li>
<li>MobiRuby</li>
<li>MobiRuby のもくろみ</li>
<li>Matz にはなれない</li>
<li>あきやすいので無理だった</li>
<li>手離れよく作ることを考えるようになった</li>
<li>Ruby から得たもの</li>
<li>一番大きいのは「軸」</li>
<li><a href="https://speakerdeck.com/masuidrive/18nian-derubykaraxue-ndakoto-guan-xi-rubyhui-yi-2017">https://speakerdeck.com/masuidrive/18nian-derubykaraxue-ndakoto-guan-xi-rubyhui-yi-2017</a></li>
</ul>


<h2>クロージング</h2>

<p>時間がなかったので、Ruby 関西の宣伝などはなく、前に集まって写真撮影のみでした。</p>

<h2>懇親会</h2>

<p>事前に予告されていた通り LT がありました。
本編でスポンサーセッションがなかったスポンサーの LT もありました。</p>

<p>前にどこかで聞いたことあるような内容もありましたが、いろいろな話があって楽しめました。</p>

<p>特に何も準備していなかったのと MacBook Pro の電池が残り少なかったこともあり、特に LT はしませんでした。</p>

<h2>全体的な感想</h2>

<p>RubyKaigi 2015 の T シャツを着て行ったのですが、上にもう一枚着ていたので、知らない人にはただの寿司の T シャツにしか見えないような気がしていました。
一部の人には背中の Committer と書かれている部分を見せたりできたので、着て行った意味はあったと思いました。</p>

<p>会場は9時にならないと鍵が借りられなかったり、撤収完了の時間が決まっていたり (ロビーに残っているのは OK だったらしい)、プロジェクターでトラブルがあったり (ミラーリングかどうかが影響したらしい?)、電源が不十分だったり (これは各自できるだけタップを持ってきてくださいとアナウンスがあればよかったのかも)、などの問題点はありましたが、迷わずたどり着けたり (途中でひがきさんにあったので入り口を自分で探さなくてよかったのも幸いした)、マイクなどの設備も整っていたり、撤収時に椅子やテーブルは特に気にしなくてよかったりしたのはよかったと思いました。</p>

<p>全体の進行は時間がおしてしまって、それを取り戻すために減らす休憩時間の余裕もなくて、最後まで時間が足りないままでした。</p>

<p>発表の内容はどれも面白く、twitter でもハッシュタグがトレンド入りしていたらしいというぐらい盛り上がっていたようです。</p>

<p>@nifty の about me は使っていたので懐かしいと思いました。
@nifty で Rails を使っていると前面に打ち出していたのは、他に @nifty TimeLine があったのも思い出しました。</p>
]]></content>
  </entry>
  
</feed>
