<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-05-03T10:55:23+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rubyのsample/cbreak.rbをSolarisで試した]]></title>
    <link href="http://blog.n-z.jp/blog/2017-05-02-ruby-sample.html"/>
    <updated>2017-05-02T21:23:14+09:00</updated>
    <id>http://blog.n-z.jp/blog/ruby-sample</id>
    <content type="html"><![CDATA[<p>ruby の <a href="https://github.com/ruby/ruby/blob/3692fd69ca10fb921db5cc74a6da5eaa66808f38/sample/cbreak.rb">sample/cbreak.rb</a> は Linux で試しても動かなくて、ファイルの頭に <code># ioctl example works on Sun</code> と書いてあったので、
Solaris で試してみました。</p>

<!--more-->


<h2>vagrant box 探し</h2>

<p>「vagrant solaris」で検索して
<a href="https://vagrantcloud.com/boxes/search?q=solaris&amp;utf8=%E2%9C%93">https://vagrantcloud.com/boxes/search?q=solaris&amp;utf8=%E2%9C%93</a>
の中から
<a href="https://vagrantcloud.com/plaurin/boxes/solaris-11_3">plaurin/solaris-11_3</a>
が比較的新しくて良さそうかなと思って使うことにしました。</p>

<h2>VM 作成</h2>

<p>適当なディレクトリを作成して <code>vagrant init</code> をしました。</p>

<pre><code>mkdir solaris-11_3
cd solaris-11_3
vagrant init plaurin/solaris-11_3
</code></pre>

<p>説明ページに書いてあったので <code>vi Vagrantfile</code> で</p>

<pre><code>config.ssh.password = "1vagrant"
</code></pre>

<p>を追加しました。</p>

<pre><code>vagrant up
</code></pre>

<p>してダウンロードなどを待ちます。</p>

<p>後は</p>

<pre><code>vagrant ssh
</code></pre>

<p>で入って VM の中で作業しました。</p>

<h2>git インストール</h2>

<p>とりあえず git をインストールすることにしました。</p>

<p><a href="https://git-scm.com/download/linux">https://git-scm.com/download/linux</a> に書いてあったように</p>

<pre><code>sudo pkg install developer/versioning/git
</code></pre>

<p>でインストールできました。</p>

<h2>autoconf インストール</h2>

<p>必要になるのがわかっているので autoconf もインストールしました。
パッケージ名は適当に指定してみたらインストールできました。</p>

<pre><code>sudo pkg install autoconf
</code></pre>

<h2>git clone</h2>

<p>履歴はなくても良いので、 <code>--depth 1</code> で最新だけとってきました。</p>

<pre><code>git clone --depth 1 https://github.com/ruby/ruby
</code></pre>

<h2>とりあえず configure</h2>

<p>とりあえず configure まで実行するとエラーになりました。</p>

<pre><code>vagrant@solaris:~$ cd ruby
vagrant@solaris:~/ruby$ autoconf
vagrant@solaris:~/ruby$ mkdir build
vagrant@solaris:~/ruby$ cd build
vagrant@solaris:~/ruby/build$ ../configure --prefix=$HOME/opt/ruby
checking for ruby... false
configure: error: cannot run /bin/sh ../tool/config.sub
</code></pre>

<h2>baseruby をインストール</h2>

<p>リリースされたアーカイブではないので、baseruby となる ruby が必要ということで ruby をインストールしてやり直しました。</p>

<pre><code>vagrant@solaris:~/ruby/build$ sudo pkg install ruby
(略)
vagrant@solaris:~/ruby/build$ ../configure --prefix=$HOME/opt/ruby
checking for ruby... /usr/bin/ruby
downloading config.guess ... done
downloading config.sub ... done
checking build system type... i386-pc-solaris2.11
checking host system type... i386-pc-solaris2.11
checking target system type... i386-pc-solaris2.11
checking for gcc... no
checking for cc... no
checking for cl.exe... no
configure: error: in `/export/home/vagrant/ruby/build':
configure: error: no acceptable C compiler found in $PATH
See `config.log' for more details
</code></pre>

<h2>gcc をインストール</h2>

<p>C compiler がなくて、何を入れればいいのかよくわからなかったので、とりあえず gcc を指定してみたら入りました。</p>

<pre><code>vagrant@solaris:~/ruby/build$ sudo pkg install gcc
(略)
vagrant@solaris:~/ruby/build$ ../configure --prefix=$HOME/opt/ruby
(略)
---
Configuration summary for ruby version 2.5.0

head: illegal option -- c
usage: head [-n #] [-#] [filename...]
/export/home/vagrant/opt/ruby
head: illegal option -- c
usage: head [-n #] [-#] [filename...]
${prefix}
head: illegal option -- c
(略)
head: illegal option -- c
usage: head [-n #] [-#] [filename...]
yes
head: illegal option -- c
usage: head [-n #] [-#] [filename...]
man

---
</code></pre>

<p>configure 自体は問題がなかったようですが、サマリーの表示部分でエラーになりました。</p>

<h2>head -c を書き換え</h2>

<p>head -c は <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/head.html">POSIX</a> になくて、代わりの手段を探してみたところ、<a href="http://qiita.com/richmikan@github/items/bd4b21cf1fe503ab2e5c#head%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89">どの環境でも使えるシェルスクリプトを書くためのメモ ver4.51 - Qiita の headコマンド</a> にあったので <code>head -c26</code> を <code>dd bs=1 count=26 2&gt;/dev/null</code> に書き換えました。</p>

<pre><code>vagrant@solaris:~/ruby/build$ cd ..
vagrant@solaris:~/ruby$ vi configure.in
vagrant@solaris:~/ruby$ autoconf
vagrant@solaris:~/ruby$ cd build
vagrant@solaris:~/ruby/build$ ../configure --prefix=$HOME/opt/ruby
(略)
vagrant@solaris:~/ruby/build$ make
(略)
generating parse.c
sh: line 1: bison: not found
*** Error code 127
The following command caused the error:
bison -d  -o y.tab.c parse.tmp.y
make: Fatal error: Command failed for target `parse.c'
</code></pre>

<h2>bison インストール</h2>

<p>リリースされたアーカイブだと不要なので configure ではチェックされない bison が必要だったのでインストールしました。</p>

<pre><code>vagrant@solaris:~/ruby/build$ sudo pkg install bison
(略)
vagrant@solaris:~/ruby/build$ make
(略)
 compiling ../process.c
 ../process.c: In function ‘retry_fork_async_signal_safe’:
 ../process.c:3573:9: error: ‘fork’ is deprecated (declared at /usr/include/unistd.h:301) [-Werror=deprecated-declarations]
          pid = fork();
          ^
 ../process.c: In function ‘retry_fork_ruby’:
 ../process.c:3638:9: error: ‘fork’ is deprecated (declared at /usr/include/unistd.h:301) [-Werror=deprecated-declarations]
          pid = fork();
          ^
 ../process.c: At top level:
 cc1: warning: unrecognized command line option "-Wno-self-assign" [enabled by default]
 cc1: warning: unrecognized command line option "-Wno-constant-logical-operand" [enabled by default]
 cc1: warning: unrecognized command line option "-Wno-parentheses-equality" [enabled by default]
 cc1: warning: unrecognized command line option "-Wno-tautological-compare" [enabled by default]
 cc1: some warnings being treated as errors
 *** Error code 1
 The following command caused the error:
 gcc -O3 -fno-fast-math -ggdb3 -Wall -Wextra -Wno-unused-parameter -Wno-parentheses -Wno-long-long -Wno-missing-field-initializers -Wno-tautological-compare -Wno-parentheses-equality -Wno-constant-logical-operand -Wno-self-assign -Wunused-variable -Werror=implicit-int -Werror=pointer-arith -Werror=write-strings -Werror=declaration-after-statement -Werror=implicit-function-declaration -Werror=deprecated-declarations -Wno-packed-bitfield-compat -Wsuggest-attribute=noreturn -Wsuggest-attribute=format -std=gnu99  -D_FORTIFY_SOURCE=2 -fstack-protector -fno-strict-overflow -fvisibility=hidden -fexcess-precision=standard -DRUBY_EXPORT -fPIE   -I. -I.ext/include/i386-solaris2.11 -I../include -I.. -I../enc/unicode/9.0.0 -o process.o -c ../process.c
 make: Fatal error: Command failed for target `process.o'
</code></pre>

<p><code>fork</code> が deprecated だということでエラーになりました。</p>

<h2><code>-Werror=deprecated-declarations</code> 削除</h2>

<p>とりあえず今回試したい件とは関係ないので <code>warnflags</code> から <code>-Werror=deprecated-declarations</code> を削除しました。</p>

<pre><code>vagrant@solaris:~/ruby/build$ sed -e 's/-Werror=deprecated-declarations//' Makefile &gt; a
vagrant@solaris:~/ruby/build$ mv a Makefile
vagrant@solaris:~/ruby/build$ make
(略)
vagrant@solaris:~/ruby/build$ make install
(略)
</code></pre>

<h2>sample/cbreak.rb の動作確認</h2>

<p>動かしてみたら <code>STDIN.ioctl(TIOCGETP, tty)</code> で <code>Errno::EINVAL</code> になりました。</p>

<pre><code>vagrant@solaris:~/ruby/build$ export PATH=$HOME/opt/ruby/bin:$PATH
vagrant@solaris:~/ruby/build$ ruby -v
ruby 2.5.0dev (2017-05-02 trunk 58541) [i386-solaris2.11]
vagrant@solaris:~/ruby/build$ ruby ../sample/cbreak.rb
        from ../sample/cbreak.rb:30:in `&lt;main&gt;'
        from ../sample/cbreak.rb:9:in `cbreak'
        from ../sample/cbreak.rb:18:in `set_cbreak'
../sample/cbreak.rb:18:in `ioctl': Invalid argument @ rb_ioctl - &lt;STDIN&gt; (Errno::EINVAL)
</code></pre>

<h2>TIOCGETP の確認</h2>

<pre><code>vagrant@solaris:~/ruby/build$ find /usr/include -name '*.h' | xargs grep TIOCGETP
/usr/include/sgtty.h:#define    TIOCGETP        (('t'&lt;&lt;8)|8)
/usr/include/sys/mtio.h:#define MTIOCGETPOS             (MTIOC|17)      /* Get drive position */
/usr/include/sys/termios.h:#define      TIOCGETP        (tIOC|8)
/usr/include/sys/ttold.h: * Structure for TIOCGETP and TIOCSETP ioctls.
/usr/include/sys/ttold.h:#define        TIOCGETP        (tIOC|8)
vagrant@solaris:~/ruby/build$ vi a.c
vagrant@solaris:~/ruby/build$ gcc a.c
vagrant@solaris:~/ruby/build$ ./a.out
7408
vagrant@solaris:~/ruby/build$ cat a.c
#include &lt;sgtty.h&gt;
#include &lt;stdio.h&gt;

int main() {
        printf("%x\n", TIOCGETP);
        return 0;
}
</code></pre>

<p>include するのが <code>sys/termios.h</code> でも <code>sys/ttold.h</code> でも 7408 でした。</p>

<p><code>sample/cbreak.rb</code> では <code>TIOCGETP = 0x40067408</code> なので、何か違うようです。</p>

<h2>macOS で確認</h2>

<p>そういえば macOS だとどうだろうと思って試してみたら、動いてしまいました。</p>

<p>ただし <code>readline().print</code> のところで <code>sample/cbreak.rb:33:in `&lt;main&gt;': private method `print' called for "hoge\n":String (NoMethodError)</code> でこけたので、直す必要がありました。</p>

<h2>まとめ</h2>

<p>ruby の sample はリリースに含まれていても、そのバージョンで動作確認されているとは限らないようです。</p>

<p><code>readline().print</code> は <code>Kernel#readline</code> が <code>String</code> を返して、その <code>Kernel#print</code> を呼んでいるようなので、どのくらい古い ruby だと動くのか、それとも最初から動かなかったのか、よくわかりませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第77回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-03-04-rubykansai77.html"/>
    <updated>2017-03-04T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai77</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/58025" title="第77回 Ruby関西 勉強会">第77回 Ruby関西 勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<ul>
<li>地図が最初はグランフロントをさしていた。(昨晩直しました。) (doorkeeper のシステムで住所を変えただけど、地図の方は変わらないらしい。)</li>
<li>会場はヒルトンプラザウエストで、ヒルトンプラザイーストとどちらなのかわかりにくい。</li>
<li>工事中が多くて場所がわかっていてもたどり着きにくかったらしい。</li>
</ul>


<h2>最適化のやり方</h2>

<ul>
<li><a href="http://oke-ya.com/devil.html">あくまのおしごと</a>の宣伝</li>
<li>KEN_ALL.CSV を読み込んで東西南北を含む行をカウントするプログラムを例に</li>
<li>最初に全部読んでメモリ上にのせて <code>each_line</code> (メモリ効率を気にするなら元の <code>open</code> 中に <code>f.gets</code> の方が良さそう)</li>
<li>配列を find せずに Hash を使う</li>
<li>配列に対象行をためていって length をとるのではなく数値でカウント</li>
<li>同じメソッド呼び出しをローカル変数に代入して減らす</li>
<li><code>sort</code> から <code>sort_by</code></li>
<li>早すぎる最適化はするべきではない</li>
<li>気をつけるポイント</li>
<li>IO はなるべく短く</li>
<li>データ構造(もたせ方)を工夫する</li>
<li>ループの中でオブジェクトをなるべく作らない</li>
<li>文字列、配列、ハッシュは数値やシンボルとくらべてメモリ消費量が多い点を心得ておく</li>
<li>質疑応答</li>
<li>データが大きい時や大きさがわからないときは一気に読まない方が良さそう</li>
<li>SQL にあるような何行かごとに処理というのは専用のメソッドはなさそう</li>
<li><code>/北|南|東|西/</code> は <code>/[北南東西]/</code> の方が良いのではないかというツッコミ</li>
<li>西東京みたいなのは西と東でカウントされるのかという話 - 片方しかカウントされない実装になっていた。</li>
<li>カウント対象は限定されているので、ループの中で <code>||=</code> で初期化するのではなく <code>{"北" =&gt; 0}'</code> のように初期値をもつのもあり。 <code>Hash.new { 0 }</code> のような方法もあり。</li>
<li>最後にもう一度、<a href="http://oke-ya.com/devil.html">あくまのおしごと</a>の宣伝</li>
<li><a href="https://www.slideshare.net/yalab/ruby-72795596">Rubyコードの最適化</a></li>
</ul>


<h2>Rails 5.1.0.beta1はどのようにモダンなJavaScript開発を実現しているのか？</h2>

<ul>
<li>webpacker gem を使ったデモ</li>
<li><code>bundle exec rails webpacker:install:react</code></li>
<li>config/webpack/shared.js でビルドする対象を指定</li>
<li>bin/webpack-dev-server は localhost:8080 で待ち受ける express のサーバー</li>
<li>bin/webpack は public 以下に出力</li>
<li><code>javascript_pack_tag</code> の実装確認</li>
<li><code>dev_server_host</code> が設定されていればそこから、なければ digest もしくは直接</li>
<li>質疑応答</li>
<li>フロントエンドを知らない人は sprockets で良いのではないか</li>
<li>sprockets と webpacker の違い</li>
<li>deploy するときは? webpacker-dev-server ではなく、 webpack で public 以下に生成する</li>
<li>情報源は? rails guide などにはまだ。 master でもまだ変化が続いている。</li>
<li>スタイルシートはコンパイルしてくれないのか? 現状デフォルトで生成される config では対象ではない。 webpack の知識があって設定すれば可能。</li>
<li><a href="https://speakerdeck.com/chimame/rails-5-dot-1-0-dot-beta1hadofalseyounimodannajavascriptkai-fa-woshi-xian-siteirufalseka">Rails 5.1.0.beta1はどのようにモダンなJavaScript開発を実現しているのか？ // Speaker Deck</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li>14:20 まで</li>
</ul>


<h2>Welcome to tebukuro</h2>

<ul>
<li>tebukuro とは</li>
<li>イベント、チケット管理サービス</li>
<li>Shinosaka.rb のプロダクト</li>
<li>なぜ tebukuro</li>
<li>既存サービスへの不満</li>
<li>使っているもの</li>
<li>rails</li>
<li>postgresql</li>
<li>node.js など</li>
<li>CI: Wercker から Jenkins に移行中</li>
<li>開発環境は docker compose</li>
<li>本番環境も docker</li>
<li>Dcoker を使う理由</li>
<li>コンテナ指向でシンプルに保てる</li>
<li>どの環境でも動作する</li>
<li>スケーラブル: コンテナ単位で可能</li>
<li>GCP</li>
<li>なぜOSSなのか</li>
<li>開発方法も他のOSSと同じ</li>
<li>OSS開発の敷居をさげるための素振りもできる</li>
<li>英語の勉強もできちゃう</li>
<li>もう一つのねらい</li>
<li>betaやalphaのライブラリを積極的に採用</li>
<li>バグを踏んでライブラリへのPRチャンスを作る</li>
<li>PRとはいかずともissue報告はできる</li>
<li>目指すコミュニティ</li>
<li><a href="https://github.com/shinosakarb/tebukuro">https://github.com/shinosakarb/tebukuro</a></li>
</ul>


<h2>Create React App ではじめる Rails の SPA</h2>

<ul>
<li>ライブコーディング</li>
<li>実装を見ると <code>.html</code> が <code>index.html</code> より優先されるっぽい</li>
<li>RFC とかは単語が一般的すぎて見つけられなかったというコネタ</li>
<li>(後で <a href="https://www.rfc-editor.org/retrieve/bulk/">https://www.rfc-editor.org/retrieve/bulk/</a> からダウンロードして txt ファイルを index.html で検索してみたけど、書いてなさそうだった。調べていた時に思い出したけど IIS は index ではなかった (確認したら default だった) ので RFC に書かれている可能性は低そう)</li>
<li>yarn は yarnpkg コマンドの方が主流になるかもしれないらしい</li>
<li>react-router-dom</li>
<li>公式サイトは v4 系のドキュメントになっている</li>
<li>webpack も公式サイトは 2 系のドキュメントになっていて 1 系はではないらしい</li>
<li>react-router-dom が beta7 になっていて、公式サイトのデモが beta6 では動かなかった。</li>
<li>時間がなかったので、 OAuth との組み合わせは完成版でデモ</li>
</ul>


<h2>Rubyのオススメの機能７選</h2>

<ul>
<li><a href="http://qiita.com/cuzic/items/a265f140fdff289d5c07">Ruby のオススメの機能７選</a></li>
<li><code>Enumerator.new</code></li>
<li><code>Object#tap</code></li>
<li><code>Float::INFINITY</code></li>
<li><code>Enumerable#each_slice</code></li>
<li><code>Array#shelljoin</code></li>
<li>(単純に実行するだけなら複数引数の <code>system</code> などを使った方が良さそうと思っていたけど、多段 ssh とかの時には確かに良さそう。)</li>
<li><code>SecureRandom.hex</code></li>
<li>Flip Flop 演算子</li>
<li>質疑応答</li>
<li>配列に <code>with_index(1)</code> は使えないので、<code>each.with_index(1)</code> にする必要がある</li>
<li><code>each_with_index</code> だと初期値を指定できないので、この場合は使えない</li>
</ul>


<h2>Ruby初級者向けレッスン &mdash; ブロック</h2>

<p>初心者の人は少なかった。
告知タイミングなどの問題で、スタッフの人が多かった。</p>

<p>追加して <code>self</code> が欲しい時は <code>Array#&lt;&lt;</code> とか <code>Hash#update</code> とか。</p>

<h2>クロージング</h2>

<ul>
<li><a href="https://rails-follow-up-osaka.doorkeeper.jp/events/58097">Rails Follow-up Osaka #7</a></li>
<li><a href="https://rubykansai.doorkeeper.jp/events/57723">関西Ruby会議2017 CFP</a>募集中</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第76回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-01-14-rubykansai76.html"/>
    <updated>2017-01-14T17:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai76</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/55398" title="第76回 Ruby関西 勉強会">第76回 Ruby関西 勉強会</a>
に参加して発表してきました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<p>ちょっと場所がわかりにくいところでした。
グランフロントに着いたあと、ちゃんと「タワーB」を目指して、一度9階で乗り換えて18階に上がりました。</p>

<h2>オープニング</h2>

<ul>
<li>会場案内</li>
<li>懇親会は適当に集まる感じ</li>
<li>ネットワークあり</li>
<li>ustream 中継あり (ライブのみで録画はなし)</li>
<li>公式タグは rubykansai76</li>
<li>公式ハッシュタグは <code>#rubykansai</code></li>
<li>受付はあとで</li>
</ul>


<h2>ゲーム会社でのRuby / Rails活用事例</h2>

<ul>
<li>スポンサーセッション的なセッション</li>
<li>Aiming さんは開発も運用もしている</li>
<li>MessagePack で C++ や C# とやりとり</li>
<li>共通基盤開発</li>
<li>インフラ</li>
<li>運用</li>
<li>Ruby は開発速度が利点</li>
<li>実行速度が求められるサーバーは C++ のままのものもあるらしい</li>
</ul>


<h2>Rails 使いがデータ集計でハマりがちな罠</h2>

<ul>
<li>ActiveRecord は集計には向いていない</li>
<li>集計に O/R mapping は不要</li>
<li>サブクエリが入りみだれると ActiveRecord や ARel はつらい</li>
<li>scope の組合せで DRY にする作戦もうまくいくことがまれでだいたいはカオスになる</li>
<li>適材適所</li>
<li>アンチパターン2: 1項目1クエリ作戦</li>
<li>アンチパターン3: 集計データが text</li>
<li>正体は YAML, JSON のデータ</li>
<li>頑張って移行</li>
<li>SQL は覚えるしかない</li>
<li>alter table せずに drop して create table しなおして集計し直し</li>
<li>クエリの分割: 中間集計テーブル</li>
<li>Q: 集計中に空のテーブルが見えてしまうのでは?</li>
<li>PostGRESQL, Redshift だと DDL にもトランザクションがきくので大丈夫</li>
<li>順序が重要</li>
<li>bricolage: SQL 実行に特化したワークフローエンジン</li>
<li>Redshift 用</li>
<li>dry run できるというのが重要</li>
<li>AWS Redshift の特徴</li>
<li>PostgreSQL 系の SQL の便利機能</li>
<li>ウィンドウ関数</li>
<li>例: <code>rank()</code>, <code>row_number()</code></li>
<li>WITH 句</li>
<li>サブクエリの代わり</li>
<li>ネストが減る</li>
</ul>


<h2>Ruby ボード GR-CITRUS の紹介 #2</h2>

<ul>
<li>ロボホンが写真をとっていたがとれていない?</li>
<li>Ruby の話はほとんど出てこない</li>
<li>GR-CITRUS</li>
<li>チップに Ruby Inside と刻印されている</li>
<li>mruby/c という16ビットマイコンなどに向けたさらに省メモリなものがある</li>
<li>今日は mruby の話</li>
<li>本題は実装について</li>
<li>バインドしている mrbgem</li>
<li>mruby-math: Math.sin</li>
<li>mruby-numeric-ext: 10.chr, 0.zero?</li>
<li>独自実装のクラス</li>
<li>mruby 組込み方法</li>
<li>クロスコンパイル</li>
<li>mrbgem の独自追加</li>
<li>wrbb-v2lib-firm の build_config.rb を使う</li>
<li>クロスコンパイル方法は Qiita に記事がある</li>
<li>mrb 実行の仕組み</li>
<li>コード読み</li>
</ul>


<h2><code>frozen_string_literal</code> の話</h2>

<p>スライドはいつも通り
<a href="http://slide.rabbit-shocker.org/authors/znz/frozen_string_literal/">Rabbit Slide Show</a>
(<a href="https://rubygems.org/gems/rabbit-slide-znz-frozen_string_literal">RubyGems</a>),
<a href="http://www.slideshare.net/znzjp/frozenstringliteral">SlideShare</a>,
<a href="https://speakerdeck.com/znz/frozen-string-literal-falsehua">Speaker Deck</a>
にあげています。
(ソースは
<a href="https://github.com/znz/rubykansai76-frozen_string_literal">github</a>
にあげています。)</p>

<h2>Ruby モンキーパッチの世界</h2>

<ul>
<li>モンキーパッチとは</li>
<li>CarrierWaveDirect で <code>path/to/file</code>, <code>path/to/to/file</code>, <code>path/to/to/to/file</code> のようになるバグがあったのをモンキーパッチで対応した</li>
<li>ActiveSupport が <code>NilClass</code> に <code>blank?</code> メソッドを足している</li>
<li>Refinement</li>
<li>トップレベルの <code>using</code> は <code>using</code> より下にあれば <code>class</code> などの中も対象</li>
<li>クラススコープの <code>using</code> は <code>using</code> より下で <code>class</code> に対応する <code>end</code> までが対象</li>
<li><a href="https://docs.ruby-lang.org/en/trunk/syntax/refinements_rdoc.html">https://docs.ruby-lang.org/en/trunk/syntax/refinements_rdoc.html</a></li>
<li>Rails での例: <a href="https://github.com/rails/rails/blob/07307a7b9d14b752fc5aef474f3c29585676c9fa/activesupport/lib/active_support/core_ext/enumerable.rb#L117-L135">https://github.com/rails/rails/blob/07307a7b9d14b752fc5aef474f3c29585676c9fa/activesupport/lib/active_support/core_ext/enumerable.rb#L117-L135</a></li>
</ul>


<h2>Rails の有限オートマトン</h2>

<ul>
<li><a href="https://github.com/amatsuda/stateful_enum" title="stateful_enum">stateful_enum</a></li>
<li>graphviz や plantuml を使って図を出力できる</li>
<li>gulp で plantuml の図の自動更新</li>
<li><code>draw_uml</code> を使って rails 経由で図を表示</li>
<li>browser sync でブラウザーも自動リロード</li>
<li><code>draw_erd</code>, <code>draw_smd</code> というのもある</li>
<li>guard は rspec を流すのに使っていて、重くなるので gulp は開発の初期だけに使うもの用に分けている</li>
</ul>


<h2>告知 (Rails Girls Osaka, OSS Gate Osaka, 関西Ruby会議)</h2>

<ul>
<li>引き続き ogomr さん</li>
<li><a href="https://speakerdeck.com/ogom/ibentofalseshao-jie-tomu-ji">イベントの紹介と募集</a></li>
<li><a href="https://coderdojo-hommachi.doorkeeper.jp/events/56121">CoderDojo 本町 #4</a></li>
<li><a href="https://railsgirls-osaka.doorkeeper.jp/events/55949">RailsGirls Osaka #4 コーチ希望者募集</a></li>
<li><a href="https://railsgirls-osaka.doorkeeper.jp/events/55947">RailsGirls Osaka #4</a></li>
<li><a href="https://oss-gate.doorkeeper.jp/events/56141">OSS Gate Osaka #1</a></li>
<li><a href="https://rubykansai.github.io/kansai2017/">関西Ruby会議2017</a></li>
</ul>


<h2>Ruby初級者向けレッスン 60回 ─ クラス</h2>

<ul>
<li><a href="https://github.com/higaki/learn_ruby_kansai_76">https://github.com/higaki/learn_ruby_kansai_76</a></li>
<li>解答例</li>
<li><code>to_s</code> で <code>@name</code> なのは <code>name</code> の方が良いのではないかという話</li>
<li><code>age</code> の実装の話</li>
<li><code>Mashal.load Marshal.dump</code> の話</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>懇親会の募集</li>
<li>Rails Follow-up Osaka の紹介</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[frozen_string_literalをtrueにしていっている]]></title>
    <link href="http://blog.n-z.jp/blog/2017-01-08-frozen-string-literal.html"/>
    <updated>2017-01-08T17:35:03+09:00</updated>
    <id>http://blog.n-z.jp/blog/frozen-string-literal</id>
    <content type="html"><![CDATA[<p><a href="https://www.ruby-lang.org/ja/documentation/repository-guide/">Ruby の trunk</a> で最近は <code>frozen_string_literal</code> を <code>true</code> に変更するというコミットをしていっています。
(<a href="https://svn.ruby-lang.org/cgi-bin/viewvc.cgi?revision=53141&amp;view=revision" title="Revision 53141">Revision 53141</a> で <code>frozen_string_literal: false</code> として magic comment 自体は追加されています。)</p>

<p>その時にちょっと確認に手間取った変更があったので、そのメモです。</p>

<!--more-->


<h2>lib/fileutils.rb</h2>

<p>確認に手間取ったのは <a href="https://svn.ruby-lang.org/cgi-bin/viewvc.cgi?revision=57275&amp;view=revision" title="Revision 57275">Revision 57275</a> の <code>lib/fileutils.rb</code> の変更です。</p>

<h2>freeze の削除</h2>

<p>まず最初は <code>.freeze</code> を削除した変更です。</p>

<p><code>frozen_string_literal: true</code> にすれば <code>"文字列リテラル".freeze</code> の <code>.freeze</code> は不要になるはずと思ったのですが、実行してみてちゃんと <code>frozen?</code> が <code>true</code> になるのかと <code>--dump=insns</code> で disasm の結果をみて確認しました。</p>

<p>該当部分の変更は以下の通りです。</p>

<pre><code class="diff">@@ -1432,9 +1432,9 @@ def join(dir, base)
     end

     if File::ALT_SEPARATOR
-      DIRECTORY_TERM = "(?=[/#{Regexp.quote(File::ALT_SEPARATOR)}]|\\z)".freeze
+      DIRECTORY_TERM = "(?=[/#{Regexp.quote(File::ALT_SEPARATOR)}]|\\z)"
     else
-      DIRECTORY_TERM = "(?=/|\\z)".freeze
+      DIRECTORY_TERM = "(?=/|\\z)"
     end
     SYSCASE = File::FNM_SYSCASE.nonzero? ? "-i" : ""
</code></pre>

<p>文字列補間がある場合は <code>freeze</code> の呼び出しが減っていました。</p>

<pre><code class="console">% cat /tmp/a.rb
# frozen_string_literal: true
ALT_SEPARATOR = '\\'
p "(?=[/#{Regexp.quote(ALT_SEPARATOR)}]|\\z)".freeze.frozen?
% cat /tmp/b.rb
# frozen_string_literal: true
ALT_SEPARATOR = '\\'
p "(?=[/#{Regexp.quote(ALT_SEPARATOR)}]|\\z)".frozen?
% ruby /tmp/a.rb
true
% ruby /tmp/b.rb
true
% diff -u &lt;(ruby --dump=insns /tmp/a.rb) &lt;(ruby --dump=insns /tmp/b.rb)
--- /proc/self/fd/11    2017-01-08 17:43:38.532932848 +0900
+++ /proc/self/fd/13    2017-01-08 17:43:38.532932848 +0900
@@ -1,4 +1,4 @@
-== disasm: #&lt;ISeq:&lt;main&gt;@/tmp/a.rb&gt;=====================================
+== disasm: #&lt;ISeq:&lt;main&gt;@/tmp/b.rb&gt;=====================================
 0000 trace            1                                               (   2)
 0002 putobject        "\\"
 0004 putspecialobject 3
@@ -17,7 +17,6 @@
 0031 putobject        "]|\\z)"
 0033 concatstrings    3
 0035 freezestring     nil
-0037 opt_send_without_block &lt;callinfo!mid:freeze, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;
-0040 opt_send_without_block &lt;callinfo!mid:frozen?, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;
-0043 opt_send_without_block &lt;callinfo!mid:p, argc:1, FCALL|ARGS_SIMPLE&gt;, &lt;callcache&gt;
-0046 leave
+0037 opt_send_without_block &lt;callinfo!mid:frozen?, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;
+0040 opt_send_without_block &lt;callinfo!mid:p, argc:1, FCALL|ARGS_SIMPLE&gt;, &lt;callcache&gt;
+0043 leave
</code></pre>

<p>文字列補間がない場合は <code>opt_str_freeze</code> (<code>freeze</code> が再定義されていたら呼ぶ) から <code>putobject</code> (単純にスタックにプッシュするだけ) に変わっていました。</p>

<pre><code class="console">% cat /tmp/1.rb
# frozen_string_literal: false
p ''.freeze.frozen?
% cat /tmp/2.rb
# frozen_string_literal: true
p ''.freeze.frozen?
% cat /tmp/3.rb
# frozen_string_literal: true
p ''.frozen?
% ruby /tmp/1.rb
true
% ruby /tmp/2.rb
true
% ruby /tmp/3.rb
true
% diff -u &lt;(ruby --dump=insns /tmp/1.rb) &lt;(ruby --dump=insns /tmp/2.rb)
--- /proc/self/fd/11    2017-01-08 17:52:25.569282848 +0900
+++ /proc/self/fd/13    2017-01-08 17:52:25.569282848 +0900
@@ -1,4 +1,4 @@
-== disasm: #&lt;ISeq:&lt;main&gt;@/tmp/1.rb&gt;=====================================
+== disasm: #&lt;ISeq:&lt;main&gt;@/tmp/2.rb&gt;=====================================
 0000 trace            1                                               (   2)
 0002 putself
 0003 opt_str_freeze   ""
% diff -u &lt;(ruby --dump=insns /tmp/1.rb) &lt;(ruby --dump=insns /tmp/3.rb)
--- /proc/self/fd/11    2017-01-08 17:52:27.952090848 +0900
+++ /proc/self/fd/13    2017-01-08 17:52:27.952090848 +0900
@@ -1,7 +1,7 @@
-== disasm: #&lt;ISeq:&lt;main&gt;@/tmp/1.rb&gt;=====================================
+== disasm: #&lt;ISeq:&lt;main&gt;@/tmp/3.rb&gt;=====================================
 0000 trace            1                                               (   2)
 0002 putself
-0003 opt_str_freeze   ""
+0003 putobject        ""
 0005 opt_send_without_block &lt;callinfo!mid:frozen?, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;
 0008 opt_send_without_block &lt;callinfo!mid:p, argc:1, FCALL|ARGS_SIMPLE&gt;, &lt;callcache&gt;
 0011 leave
</code></pre>

<h2>String.new への変更</h2>

<p>同じコミットの <code>compare_stream</code> の変更は一通り目視確認していた時には <code>&lt;&lt;</code> による破壊的変更ではないので見落としていて、 <code>make install</code> を実行したら引っかかったので気づいたのですが、 <code>File#read</code> にバッファとして文字列を渡していることによる破壊的変更でした。</p>

<p>該当部分の変更は以下の通りです。</p>

<pre><code class="diff">@@ -735,8 +735,8 @@ def compare_file(a, b)
   #
   def compare_stream(a, b)
     bsize = fu_stream_blksize(a, b)
-    sa = ""
-    sb = ""
+    sa = String.new(capacity: bsize)
+    sb = String.new(capacity: bsize)
     begin
       a.read(bsize, sa)
       b.read(bsize, sb)
</code></pre>

<p>変更候補として</p>

<ul>
<li><code>"".dup</code> にする (文字列のエンコーディングがソースエンコーディング (この場合は UTF-8) になる)</li>
<li><code>String.new</code> にする (文字列のエンコーディングが ASCII-8BIT になる)</li>
</ul>


<p>がありましたが、エンコーディングはどちらでも良かったのと、
ここではバッファサイズとして <code>bsize</code> バイトが望ましいという情報が別途存在していたので、
ruby 2.4.0 からの新機能の <code>String.new(capacity: size)</code> を使うことにしました。</p>

<p>エンコーディングの違いは以下のように確認できます。</p>

<pre><code class="console">% cat /tmp/a.rb
# frozen_string_literal: true
p "".dup.frozen?
p "".dup.encoding
p String.new.frozen?
p String.new.encoding
% ruby /tmp/a.rb
false
#&lt;Encoding:UTF-8&gt;
false
#&lt;Encoding:ASCII-8BIT&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第75回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-11-05-rubykansai75.html"/>
    <updated>2016-11-05T13:26:28+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai75</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/52902" title="第75回 Ruby関西 勉強会">第75回 Ruby関西 勉強会</a>
に参加して発表してきました。</p>

<p>今回は (ustream) 中継はありませんでした。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>オープニング</h2>

<ul>
<li>会場の電源とかの話とか</li>
<li>最初の発表者の紹介とか</li>
</ul>


<h2>機械学習概論</h2>

<ul>
<li>サンプルコードもないので Ruby とは全く関係のない話</li>
<li>機械学習入門書の入門 (挫折しないために)</li>
<li>「Machine Learning: A Probabilistic Perspective」は1000ページ超え</li>
<li>機械学習手法の大分類: 教師あり学習, 教師なし学習, 半教師あり学習, 強化学習</li>
<li>入門書で取り上げられる割合: 教師あり学習:9割, 教師なし学習:1割, 半教師あり学習:0割, 強化学習:0割</li>
<li>入門書で取り上げられる割合: 教師あり学習:9割のうち: パラメトリック:9割, ノンパレメトリック:1割</li>
<li>なので、この発表では教師あり学習・パラメトリックの話</li>
<li>パラメトリック推定</li>
<li><code>y=f(x)</code> となる <code>f</code> を見つけること</li>
<li>パラメータ <code>θ</code> を持つ何らかの特定の関数群(集合) <code>f(x, θ)</code> の中で <code>y=f(x, θ)</code> と最も近似できるような <code>θ</code> を探す</li>
<li>ベイズの定理</li>
<li>最尤推定</li>
<li>種々の推定</li>
<li>MAP 推定</li>
<li>点推定しない</li>
<li>共役事前分布</li>
<li>おすすめのマイルストーン</li>
<li>tinyurl.com/ruby-boshu</li>
<li>13:50 までの予定が 14:13 までになっていた。</li>
<li>質疑応答</li>
<li>14:16 までだった。</li>
</ul>


<h2>懇親会募集</h2>

<ul>
<li>8名?</li>
</ul>


<h2>Ruby 2.4.0 の主な非互換</h2>

<p>発表しました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykansai75-ruby24/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykansai75-ruby24/" title="Ruby 2.4.0 の主な非互換">Ruby 2.4.0 の主な非互換</a>
</div>


<ul>
<li>質問は特になかった。</li>
<li>14:38 までだった。</li>
</ul>


<h2>休憩</h2>

<ul>
<li>14:45頃まで</li>
<li>発表者ということで k-of.jp で配る予定のステッカーをもらった。</li>
</ul>


<h2>さよならsprockets</h2>

<ul>
<li>いかに Qiita は sprockets を捨てるに至ったか</li>
<li>前半:技術選定の話, 後半:さよならsprockets</li>
<li>技術マネジメントの話</li>
<li>(個人的な) 普遍的な要求: 学習コスパがいい, 撤退しやすい, 速い</li>
<li>作るものの特性によって変わる要求</li>
<li>SoR (System of Record), SoE (System of Engagement)</li>
<li>さよなら sprockets</li>
<li>sprockets のおさらい</li>
<li>sprockets の問題点</li>
<li>sprockets は SoE を支援する gem</li>
<li>利点: Rails との統合が進んでいる, ハッシュダイジェスト埋め込みは便利</li>
<li>良いところは残しつつ、もっと高速にトライ・アンド・エラーできるようにしたい</li>
<li>browserify-rails</li>
<li>sprockets + ES6 modules ができる</li>
<li>脱 sprockets のための経由地</li>
<li>JS が小さいうちはここで快適に暮らしてもいい</li>
<li>気合いで ES6 modules 化</li>
<li>browserify v.s. webpack</li>
<li>webpack はなんでもできすぎて撤退しづらくなりそう → browserify を採用した</li>
<li>(世の中的には webpack が主流になりつつある)</li>
<li>ビルドタスクを書く</li>
<li>全部 npm-scripts に書く (Grant gulp は使わない)</li>
<li>ワンライナーに納まらない場合は Node.js スクリプトを書く</li>
<li>Tips: npm-scripts 用シェル芸</li>
<li><code>((a &amp;&amp; (b &amp; c &amp; wait)) &amp; d &amp; wait) &amp;&amp; e</code></li>
<li>マニフェストファイル: 開発環境では admin.js で本番環境では admin-xxxxx.min.js</li>
<li>開発環境: watchify</li>
<li>非同期ビルドの問題</li>
<li>CSSのビルドが微妙にかかるので反映されていないことがある</li>
<li>コンパイル中は sleep する Rack ミドルウェアを追加して解決</li>
<li>移行の結果何が変わった?</li>
<li>デプロイ速度が4分速くなった</li>
<li>開発時の待ち時間がかなり速くなった</li>
<li>開発にすべての npm パッケージを使えるようになった</li>
<li>15:25 までだった。</li>
<li>質疑応答は特になし</li>
</ul>


<h2>社内勉強会で読んだ本とか</h2>

<ul>
<li>15:27 から</li>
<li>Rails5 リリースノート</li>
<li>The Twelve-Factor App</li>
<li>The Rails Doctrine</li>
<li>Domain Driven Design Quickly</li>
<li>メタプログラミング Ruby 第2版</li>
<li>15:37 まで</li>
<li><a href="http://www.slideshare.net/ShinsukeKuroki/ss-68228347" title="社内勉強会で読んだ本とか">社内勉強会で読んだ本とか</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li>15:50頃まで</li>
</ul>


<h2>mruby 初級者向けレッスン</h2>

<ul>
<li><a href="http://qiita.com/ogomr/items/04f2734bfef0a5ef082c" title="Ruby Miniature Book">Ruby Miniature Book</a></li>
<li><a href="http://qiita.com/ogomr/items/ca0c6cb5450bf6f86652" title="mruby on GR-CITRUS">mruby on GR-CITRUS</a></li>
<li><a href="https://github.com/ogom/crione">https://github.com/ogom/crione</a></li>
<li>16:57 まで</li>
<li>質疑応答</li>
<li>16:59 まで</li>
</ul>


<h2>告知タイム / クロージング</h2>

<ul>
<li>k-of.jp の手伝い募集</li>
<li>KansaiRubyKaigi 2017 開催決定</li>
<li>2017-05-27 に大阪産業創造館で</li>
<li>これもスタッフの募集予定</li>
<li>発表者やスポンサーも時期が来れば募集予定</li>
<li><a href="http://qiita.com/advent-calendar/2016/shinosakarb" title="Shinosaka.rb Advent Calendar 2016">Shinosaka.rb Advent Calendar 2016</a></li>
<li><a href="http://rubykansai.github.io/kansai-ruby-community/" title="関西 Ruby コミュニティー 紹介">関西 Ruby コミュニティー 紹介</a></li>
<li><a href="http://www.coderdojo.jp/">http://www.coderdojo.jp/</a></li>
<li>17:17 終了</li>
</ul>

]]></content>
  </entry>
  
</feed>
