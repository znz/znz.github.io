<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | ZnZ Blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-09-30T23:25:36+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[www.ruby-lang.org への pull request の出し方]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-30-how-to-pull-request.html"/>
    <updated>2013-09-30T22:43:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/how-to-pull-request</id>
    <content type="html"><![CDATA[<p><a href="https://www.ruby-lang.org/en/news/2013/09/23/ruby-2-1-0-preview1-is-released/">Ruby 2.1.0-preview1 is released</a>
というアナウンスが一週間経ってもまだ日本語訳が出来ていなかったので、
ちょっとの暇を見つけて pull request を出してみたので、
その手順をまとめておきます。</p>

<!--more-->


<p>まず github のアカウントは持っているというのは前提として話を進めます。</p>

<p>初回は
<a href="https://github.com/ruby/www.ruby-lang.org">https://github.com/ruby/www.ruby-lang.org</a>
の右上から自分のアカウントに Fork します。</p>

<p>すでに Fork していて二回目以降は upstream の変更を merge する必要があります。
<a href="https://help.github.com/articles/syncing-a-fork">Syncing a fork</a>
を参考にして merge します。</p>

<p>実行したコマンドだけまとめておきます。
詳細は github のヘルプを参照してください。</p>

<p><code>console
% git clone git@github.com:znz/www.ruby-lang.org.git
% cd www.ruby-lang.org
% git remote add upstream https://github.com/ruby/www.ruby-lang.org.git
% git remote -v
% git fetch upstream
% git branch -va
% git checkout master
% git merge upstream/master
% git push
</code></p>

<p>英語版を元にして日本語版を作成します。</p>

<p><code>console
% cp {en,ja}/news/_posts/2013-09-23-ruby-2-1-0-preview1-is-released.md
% git add ja/news/_posts/2013-09-23-ruby-2-1-0-preview1-is-released.md
% vi ja/news/_posts/2013-09-23-ruby-2-1-0-preview1-is-released.md
</code></p>

<p>プレビュー用に <code>bundle install</code> します。</p>

<p><code>console
% bundle install
% rake -T
% rake preview
</code></p>

<p><code>rake preview</code>
でサーバーが起動しているので、
ブラウザで
<code>http://localhost:4000/</code>
を開いて表示を確認します。</p>

<p>github に push して、
ブラウザから pull request を出します。</p>

<p>ブランチを切り忘れていたので、
ここで作りました。</p>

<p><code>console
% git checkout -b ruby210preview1
% git commit -av
% git push --set-upstream origin ruby210preview1
</code></p>

<p>最後に
<code>git checkout master</code>
で master ブランチに戻るなり、
消してしまって、
また作業する時に clone し直すなりします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[aasm gem の初期状態設定]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-30-aasm.html"/>
    <updated>2013-09-30T15:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/aasm</id>
    <content type="html"><![CDATA[<p><code>aasm</code> gem の使い方が悪くて、初期状態の値としてデータベースに nil が保存されてしまっていたという話です。</p>

<!--more-->


<p>確認したバージョンは ruby 2.0.0 + rails 3.2.14 + aasm 3.0.22 です。</p>

<p>例として以下のような感じの使い方をしてしまっていて、
<code>status</code> メソッドで <code>nil</code> を返さないようにしていたら
データベースには <code>nil</code> が保存されるようになってしまって、
<code>aasm</code> 以外 (<code>ransack</code> とか) からデータベースにアクセスした時に
問題になりました。</p>

<p>```ruby
  def status</p>

<pre><code># このメソッドがダメ
read_attribute(:status) || :starting
</code></pre>

<p>  end</p>

<p>  include AASM
  aasm column: &ldquo;status&rdquo; do</p>

<pre><code>state :starting, initial: true
state :running
state :stopped
state :finished

event :run do
  transitions from: [:starting, :stopped], to: :running
end

event :stop do
  transitions from: [:starting, :running], to: :stopped
end

event :finish do
  transitions from: [:running], to: :finished
end
</code></pre>

<p>  end
```</p>

<p><code>aasm</code> としては
<a href="https://github.com/aasm/aasm/blob/master/lib/aasm/persistence/active_record_persistence.rb">AASM::Persistence::ActiveRecordPersistence</a>
で
<code>before_validation :aasm_ensure_initial_state, :on =&gt; :create</code>
相当のフックを追加していて、
<code>model.valid?</code>
を実行すれば
<code>model.status</code>
が設定されるようになっていました。</p>

<p>たぶん使い始めた時に
<code>rails console</code>
で
<code>model = Model.new</code>
した直後の
<code>model.status</code>
が
<code>nil</code>
だったので、
どうにかしようと思って
getter メソッドを定義してしまったのだと思います。</p>

<p>このせいで以下のような
<code>ransack</code>
を使った検索フォームで初期状態のチェックを入れても
うまく検索出来ないという問題が起きていました。</p>

<p>```haml
= search_form_for @q, html: { class: &ldquo;form-search&rdquo; } do |f|
  %table</p>

<pre><code>-# ...
%tr
  %td= f.label :status_in
  %td
    - Model.aasm.states.each do |status|
      %label
        = check_box_tag "q[status_in][]", status.to_s, params.try(:[], :q).try(:[], :status_in).try(:include?, status.to_s), id: "q_status_in_#{status.to_s}"
        = status.localized_name
-# ...
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 3 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-25-rubymotion-mokumoku-osaka.html"/>
    <updated>2013-09-25T20:43:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回と第 2 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://connpass.com/event/3450/">第 3 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。</p>

<!--more-->


<p>OS X アプリの勉強をしようと思って、
とりあえず
<code>motion create --template=osx Hello</code>
で生成されたファイルを読んでいたら、
<code>app/menu.rb</code>
の
<code>Italic</code>
の
<code>keyEquivalent:</code>
が
<code>Bold</code>
と同じ
<code>'b'</code>
になっていたのを見つけて、
他もテキストエディットと見比べていたら
違う部分を見つけたので、
<code>motion support</code>
で報告してみました。</p>

<p>```diff
diff &mdash;git a/app/menu.rb b/app/menu.rb
index 58b48f8..0da85e1 100644
&mdash;&ndash; a/app/menu.rb
+++ b/app/menu.rb
@@ -47,7 +47,7 @@ class AppDelegate</p>

<pre><code> fontMenu = createMenu('Font') do
   addItemWithTitle('Show Fonts', action: 'orderFrontFontPanel:', keyEquivalent: 't')
   addItemWithTitle('Bold', action: 'addFontTrait:', keyEquivalent: 'b')
</code></pre>

<ul>
<li>   addItemWithTitle(&lsquo;Italic&rsquo;, action: &lsquo;addFontTrait:&rsquo;, keyEquivalent: &lsquo;b&rsquo;)</li>
<li>   addItemWithTitle(&lsquo;Italic&rsquo;, action: &lsquo;addFontTrait:&rsquo;, keyEquivalent: &lsquo;i&rsquo;)
   addItemWithTitle(&lsquo;Underline&rsquo;, action: &lsquo;underline:&rsquo;, keyEquivalent: &lsquo;u&rsquo;)
   addItem(NSMenuItem.separatorItem)
   addItemWithTitle(&lsquo;Bigger&rsquo;, action: &lsquo;modifyFont:&rsquo;, keyEquivalent: &lsquo;+&rsquo;)
@@ -60,9 +60,11 @@ class AppDelegate
   addItemWithTitle(&lsquo;Justify&rsquo;, action: &lsquo;alignJustified:&rsquo;, keyEquivalent: &lsquo;&rsquo;)
   addItemWithTitle(&lsquo;Align Right&rsquo;, action: &lsquo;alignRight:&rsquo;, keyEquivalent: &lsquo;}&rsquo;)
   addItem(NSMenuItem.separatorItem)</li>
<li>   addItemWithTitle(&lsquo;Show Ruler&rsquo;, action: &lsquo;toggleRuler:&rsquo;, keyEquivalent: &lsquo;&rsquo;)</li>
<li>   addItemWithTitle(&lsquo;Copy Ruler&rsquo;, action: &lsquo;copyRuler:&rsquo;, keyEquivalent: &lsquo;c&rsquo;)</li>
<li>   addItemWithTitle(&lsquo;Paste Ruler&rsquo;, action: &lsquo;pasteRuler:&rsquo;, keyEquivalent: &lsquo;v&rsquo;)</li>
<li>   addItemWithTitle(&lsquo;Show Ruler&rsquo;, action: &lsquo;toggleRuler:&rsquo;, keyEquivalent: &lsquo;r&rsquo;)</li>
<li>   item = addItemWithTitle(&lsquo;Copy Ruler&rsquo;, action: &lsquo;copyRuler:&rsquo;, keyEquivalent: &lsquo;c&rsquo;)</li>
<li>   item.keyEquivalentModifierMask = NSCommandKeyMask|NSControlKeyMask</li>
<li>   item = addItemWithTitle(&lsquo;Paste Ruler&rsquo;, action: &lsquo;pasteRuler:&rsquo;, keyEquivalent: &lsquo;v&rsquo;)</li>
<li><p>   item.keyEquivalentModifierMask = NSCommandKeyMask|NSControlKeyMask
 end</p>

<p> addMenu(&lsquo;Format&rsquo;) do
```</p></li>
</ul>


<p>他にはサンプルとして
<a href="https://github.com/satococoa/rubymotion-osx-browser">https://github.com/satococoa/rubymotion-osx-browser</a>
とか
<a href="https://github.com/HipByte/RubyMotionSamples">https://github.com/HipByte/RubyMotionSamples</a>
とかをちょっと動かして見たりしていました。</p>

<p>他の人の話としては、
<code>UICreateCGImageFromIOSurface</code>
というシンボルで問題が起きて、
最初は
<a href="https://github.com/ZBar/ZBar">ZBar</a>
というライブラリが疑われていたけど違ったとかいう話とか、
<a href="http://support.revealapp.com/discussions/suggestions/8-reference-to-uicreatecgimagefromiosurface-should-be-removed-for-release-scheme">Reveal.framework が原因で Release ビルドで外せば良い</a>
という話とか、
東京と Google ハングアウトでつないでみてたとか、
<a href="http://mobiletou.ch/2013/09/002-create-application">(&frac12;) &ndash; 第二回 RubyMotion でアプリケーションを作ろう (1) &ndash; 実践！RubyMotion &ndash; Mobile Touch &ndash; モバイル/タブレット開発者およびデザイナー向け情報ポータル</a>
で開発中のアプリをみせてもらったりとかがありました。</p>

<p>東京とのハングアウトが終わった後は
<a href="https://gihyo.jp/dp/ebook/2013/978-4-7741-6024-5">Vagrant入門ガイド</a>
の話とか、
<a href="http://jfk2013.jaws-ug.jp/">JAWS FESTA Kansai 2013</a>
の話とかもしていました。</p>

<p>最後に次回も東京と日程を合わせるということで
<a href="http://connpass.com/event/3557/">第 4 回 RubyMotion もくもく会 in Osaka</a>
は 10/23 (水) 19:30 からということになりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Association Certified Ruby Programmer Gold を受けた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-21-certified-ruby.html"/>
    <updated>2013-09-21T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/certified-ruby</id>
    <content type="html"><![CDATA[<p>少し前に
Ruby技術者認定試験制度
の
Ruby Association Certified Ruby Programmer Gold
を受けてきました。</p>

<!--more-->


<p>コンピュータ試験 (CBT) で
結果はその場でわかるようになっていて、
ちゃんと合格出来ました。
Silver
は最初の CBT になっていなかった頃に受けて合格しているので、
これで
Ruby Association Certified Ruby Programmer Gold認定要件
をみたしたことになります。</p>

<p>スレッドを開始するメソッドが複数選択で選ぶようになってる問題とか、
クラス変数とか <code>private</code> とかと継承の関係とか、
普段そんな機能は使わないようなものについての仕様が再確認出来たのは
良かったです。</p>

<p>標準添付ライブラリの問題は、
あまり使わないライブラリについての問題があると困りそうだったのですが、
問題数も少なくて、
知っている範囲だったので大丈夫でした。</p>

<p>選択肢の <code>Marshal</code> の引数の説明に「ファイル」としか書いてなくて、
ファイルパスなのか、ファイルオブジェクト (IO オブジェクト) なのか
わからないとか、問題が悪くて Ruby の知識だけだと解けなくて、
この問題での言葉遣いもわからないと無理そうなのがあったのは
困りました。</p>

<p><a href="https://www.ruby-lang.org/ja/news/2013/06/30/we-retire-1-8-7/">ruby 1.8.7 は終わった</a>
ので、
対象バージョン
が
Ruby 1.8.7
の試験が終わってしまう前に受けてみておこうと言うことで受けてきましたが、
今後対象バージョンがどう変わっていくのか気になるところです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devise 3.0.3 と devise 3.1.0 で自動生成されるファイルの違い]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-18-devise30-devise31.html"/>
    <updated>2013-09-18T15:09:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/devise30-devise31</id>
    <content type="html"><![CDATA[<p><a href="https://gist.github.com/znz/6603471">devise 3.0.3 と devise 3.1.0 で自動生成されるファイルの差分</a>
をとって、バージョンアップした時に対応が必要な場所を調べました。</p>

<!--more-->


<h2>対応が必要な場所</h2>

<p>最初に結論をまとめておきます。</p>

<ul>
<li><code>config/initializers/devise.rb</code> に <code>config.secret_key</code> を追加。

<ul>
<li>これは <code>rails</code> コマンドを実行しようとした時などにエラーとどういう内容を追加すれば良いのかが出るのですぐに気付きます。</li>
</ul>
</li>
<li><code>rails generate devise:views</code> をしていたのなら

<ul>
<li><code>app/views/devise/mailer</code> の <code>token</code> 周り</li>
<li><code>app/views/devise/shared/_links.erb</code> の <code>devise_mapping.recoverable?</code> の行
の修正が必要です。</li>
</ul>
</li>
<li><code>app/models/user.rb</code> の <code>:token_authenticatable</code> の削除の検討

<ul>
<li>削除しなくても動いているので、すぐに削除する必要はなさそうですが、
<code>rails generate devise User</code> で生成される例からなくなっているので
削除を検討した方が良さそうです。</li>
</ul>
</li>
<li>データベースのテーブルの変更に追従するなら
<code>migration</code> を作って対応すれば良さそうです。</li>
</ul>


<h2>対象バージョン</h2>

<p>rails 3.2.14 との組み合わせで devise 3.0.3 と devise 3.1.0 で比較しました。
細かいバージョンは
<a href="https://gist.github.com/znz/6603471#file-bundle-list-in-devise30-txt">devise 3.0.3 の時の bundle list</a>
と
<a href="https://gist.github.com/znz/6603471#file-bundle-list-in-devise31-txt">devise 3.1.0 の時の bundle list</a>
を参照してください。</p>

<h2><code>rails generate devise:install</code> の差分</h2>

<p><code>rails generate devise:install</code> の差分のうち、
<a href="https://gist.github.com/znz/6603471#file-initializer-diff">config/initializers/devise.rb の差分</a>
は <code>"</code> から <code>'</code> への変更などもあって本質的ではない部分も多かったので、
<a href="https://gist.github.com/znz/6603471#file-initializer-tr-diff">tr で処理した差分</a>
を作ってみたところ、本質的には
<code>config.secret_key =</code>
の行の追加だけでした。</p>

<p><a href="https://gist.github.com/znz/6603471#file-locale-diff">config/locales/devise.en.yml の差分</a>
もあるので、
<code>locales</code>
のファイルも更新しておくと良さそうです。</p>

<h2><code>rails generate devise User</code> の差分</h2>

<p><code>rails generate devise User</code> の差分として、
<a href="https://gist.github.com/znz/6603471#file-devise_create_users-diff">migration の差分</a>
は
<code>sign_in_count</code> と <code>failed_attempts</code> への <code>NOT NULL</code> 制約の追加と
Token authenticatable 用の <code>authentication_token</code> の削除なので、
対応する変更をする <code>migration</code> を作って対応するか、
気にせず古いまま使えば良さそうです。</p>

<p><code>app/models/user.rb</code> からもコメントの中のモジュール例にあった
<code>token_authenticatable</code> が削除されています。</p>

<p><code>config/routes.rb</code> に追加される <code>devise_for :users</code> は同じでした。</p>

<h2><code>rails generate devise:views</code> の差分</h2>

<p><a href="https://gist.github.com/znz/6603471#file-views-diff">app/views の差分</a>
は
<code>@resource.なんとか_token</code>
だったものが
<code>@token</code>
に変わっているのと、
<code>app/views/devise/shared/_links.erb</code>
の
<code>if devise_mapping.recoverable? &amp;&amp; controller_name != 'passwords'</code>
が
<code>if devise_mapping.recoverable? &amp;&amp; controller_name != 'passwords' &amp;&amp; controller_name != 'registrations'</code>
に変わっているのが
主な変更でした。</p>
]]></content>
  </entry>
  
</feed>
