<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2016-12-10T21:40:30+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第75回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-11-05-rubykansai75.html"/>
    <updated>2016-11-05T13:26:28+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai75</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/52902" title="第75回 Ruby関西 勉強会">第75回 Ruby関西 勉強会</a>
に参加して発表してきました。</p>

<p>今回は (ustream) 中継はありませんでした。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>オープニング</h2>

<ul>
<li>会場の電源とかの話とか</li>
<li>最初の発表者の紹介とか</li>
</ul>


<h2>機械学習概論</h2>

<ul>
<li>サンプルコードもないので Ruby とは全く関係のない話</li>
<li>機械学習入門書の入門 (挫折しないために)</li>
<li>「Machine Learning: A Probabilistic Perspective」は1000ページ超え</li>
<li>機械学習手法の大分類: 教師あり学習, 教師なし学習, 半教師あり学習, 強化学習</li>
<li>入門書で取り上げられる割合: 教師あり学習:9割, 教師なし学習:1割, 半教師あり学習:0割, 強化学習:0割</li>
<li>入門書で取り上げられる割合: 教師あり学習:9割のうち: パラメトリック:9割, ノンパレメトリック:1割</li>
<li>なので、この発表では教師あり学習・パラメトリックの話</li>
<li>パラメトリック推定</li>
<li><code>y=f(x)</code> となる <code>f</code> を見つけること</li>
<li>パラメータ <code>θ</code> を持つ何らかの特定の関数群(集合) <code>f(x, θ)</code> の中で <code>y=f(x, θ)</code> と最も近似できるような <code>θ</code> を探す</li>
<li>ベイズの定理</li>
<li>最尤推定</li>
<li>種々の推定</li>
<li>MAP 推定</li>
<li>点推定しない</li>
<li>共役事前分布</li>
<li>おすすめのマイルストーン</li>
<li>tinyurl.com/ruby-boshu</li>
<li>13:50 までの予定が 14:13 までになっていた。</li>
<li>質疑応答</li>
<li>14:16 までだった。</li>
</ul>


<h2>懇親会募集</h2>

<ul>
<li>8名?</li>
</ul>


<h2>Ruby 2.4.0 の主な非互換</h2>

<p>発表しました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykansai75-ruby24/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykansai75-ruby24/" title="Ruby 2.4.0 の主な非互換">Ruby 2.4.0 の主な非互換</a>
</div>


<ul>
<li>質問は特になかった。</li>
<li>14:38 までだった。</li>
</ul>


<h2>休憩</h2>

<ul>
<li>14:45頃まで</li>
<li>発表者ということで k-of.jp で配る予定のステッカーをもらった。</li>
</ul>


<h2>さよならsprockets</h2>

<ul>
<li>いかに Qiita は sprockets を捨てるに至ったか</li>
<li>前半:技術選定の話, 後半:さよならsprockets</li>
<li>技術マネジメントの話</li>
<li>(個人的な) 普遍的な要求: 学習コスパがいい, 撤退しやすい, 速い</li>
<li>作るものの特性によって変わる要求</li>
<li>SoR (System of Record), SoE (System of Engagement)</li>
<li>さよなら sprockets</li>
<li>sprockets のおさらい</li>
<li>sprockets の問題点</li>
<li>sprockets は SoE を支援する gem</li>
<li>利点: Rails との統合が進んでいる, ハッシュダイジェスト埋め込みは便利</li>
<li>良いところは残しつつ、もっと高速にトライ・アンド・エラーできるようにしたい</li>
<li>browserify-rails</li>
<li>sprockets + ES6 modules ができる</li>
<li>脱 sprockets のための経由地</li>
<li>JS が小さいうちはここで快適に暮らしてもいい</li>
<li>気合いで ES6 modules 化</li>
<li>browserify v.s. webpack</li>
<li>webpack はなんでもできすぎて撤退しづらくなりそう → browserify を採用した</li>
<li>(世の中的には webpack が主流になりつつある)</li>
<li>ビルドタスクを書く</li>
<li>全部 npm-scripts に書く (Grant gulp は使わない)</li>
<li>ワンライナーに納まらない場合は Node.js スクリプトを書く</li>
<li>Tips: npm-scripts 用シェル芸</li>
<li><code>((a &amp;&amp; (b &amp; c &amp; wait)) &amp; d &amp; wait) &amp;&amp; e</code></li>
<li>マニフェストファイル: 開発環境では admin.js で本番環境では admin-xxxxx.min.js</li>
<li>開発環境: watchify</li>
<li>非同期ビルドの問題</li>
<li>CSSのビルドが微妙にかかるので反映されていないことがある</li>
<li>コンパイル中は sleep する Rack ミドルウェアを追加して解決</li>
<li>移行の結果何が変わった?</li>
<li>デプロイ速度が4分速くなった</li>
<li>開発時の待ち時間がかなり速くなった</li>
<li>開発にすべての npm パッケージを使えるようになった</li>
<li>15:25 までだった。</li>
<li>質疑応答は特になし</li>
</ul>


<h2>社内勉強会で読んだ本とか</h2>

<ul>
<li>15:27 から</li>
<li>Rails5 リリースノート</li>
<li>The Twelve-Factor App</li>
<li>The Rails Doctrine</li>
<li>Domain Driven Design Quickly</li>
<li>メタプログラミング Ruby 第2版</li>
<li>15:37 まで</li>
<li><a href="http://www.slideshare.net/ShinsukeKuroki/ss-68228347" title="社内勉強会で読んだ本とか">社内勉強会で読んだ本とか</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li>15:50頃まで</li>
</ul>


<h2>mruby 初級者向けレッスン</h2>

<ul>
<li><a href="http://qiita.com/ogomr/items/04f2734bfef0a5ef082c" title="Ruby Miniature Book">Ruby Miniature Book</a></li>
<li><a href="http://qiita.com/ogomr/items/ca0c6cb5450bf6f86652" title="mruby on GR-CITRUS">mruby on GR-CITRUS</a></li>
<li><a href="https://github.com/ogom/crione">https://github.com/ogom/crione</a></li>
<li>16:57 まで</li>
<li>質疑応答</li>
<li>16:59 まで</li>
</ul>


<h2>告知タイム / クロージング</h2>

<ul>
<li>k-of.jp の手伝い募集</li>
<li>KansaiRubyKaigi 2017 開催決定</li>
<li>2017-05-27 に大阪産業創造館で</li>
<li>これもスタッフの募集予定</li>
<li>発表者やスポンサーも時期が来れば募集予定</li>
<li><a href="http://qiita.com/advent-calendar/2016/shinosakarb" title="Shinosaka.rb Advent Calendar 2016">Shinosaka.rb Advent Calendar 2016</a></li>
<li><a href="http://rubykansai.github.io/kansai-ruby-community/" title="関西 Ruby コミュニティー 紹介">関西 Ruby コミュニティー 紹介</a></li>
<li><a href="http://www.coderdojo.jp/">http://www.coderdojo.jp/</a></li>
<li>17:17 終了</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React On Rails の react-webpack-rails-tutorial を Dokku で試してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2016-10-02-react-webpack-rails-tutorial-on-dokku.html"/>
    <updated>2016-10-02T22:24:55+09:00</updated>
    <id>http://blog.n-z.jp/blog/react-webpack-rails-tutorial-on-dokku</id>
    <content type="html"><![CDATA[<p>react.js を rails と組み合わせて使うにはどうすればいいんだろうと思って調べてみると、<code>react-rails</code> gem の他に <code>react_on_rails</code> gem というもっとまとめていろんなことの面倒を見てくれるものがあったので、そのサンプルアプリである
<a href="https://github.com/shakacode/react-webpack-rails-tutorial" title="react-webpack-rails-tutorial">react-webpack-rails-tutorial</a>
を <a href="https://github.com/dokku/dokku/" title="Dokku">Dokku</a> にデプロイできるか試してみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>OS X El Capitan 10.11.6</li>
<li>VirtualBox 5.1.6</li>
<li>Vagrant 1.8.6</li>
<li>Dokku master (0.7.2 からちょっと変更が進んだもの)</li>
<li>react-webpack-rails-tutorial master</li>
<li>ruby 2.3.1</li>
<li>rails 5.0.0</li>
<li>node 6.7.0</li>
</ul>


<h2>環境構築</h2>

<p>まず <a href="https://github.com/dokku/dokku">https://github.com/dokku/dokku</a> を git clone したディレクトリで作業します。</p>

<p>vagrant の provision から何度も試すようなら、 apt で日本のミラーを使うように shell provisioning を追加しておきます。</p>

<pre><code class="diff">diff --git a/Vagrantfile b/Vagrantfile
index 4f3fc6c..bccceb9 100644
--- a/Vagrantfile
+++ b/Vagrantfile
@@ -47,6 +47,7 @@ Vagrant::configure("2") do |config|
       vb.customize ["modifyvm", :id, "--natdnsproxy1", "off"]
     end

+    vm.vm.provision :shell, :inline =&gt; "sed -i -e 's,//us\\.archive\\.ubuntu\\.com,//jp.archive.ubuntu.com,' /etc/apt/sources.list"
     vm.vm.provision :shell, :inline =&gt; "export DEBIAN_FRONTEND=noninteractive &amp;&amp; apt-get update &gt; /dev/null &amp;&amp; apt-get -qq -y install git &gt; /dev/null &amp;&amp; cd /root/dokku &amp;&amp; #{make_cmd}"
     vm.vm.provision :shell, :inline =&gt; "cd /root/dokku &amp;&amp; make dokku-installer"
     vm.vm.provision :shell do |s|
</code></pre>

<p><code>vagrant up</code> します。
gliderlabs/herokuish の docker イメージのダウンロードなどもあるので時間がかかります。</p>

<h2>Web UI での設定</h2>

<p><a href="http://dokku.me/">http://dokku.me/</a> を開いて初期設定します。
<code>Hostname</code> を <code>dokku.me</code> に変更して <code>Use virtualhost naming for apps</code> にチェックを入れて <code>Finish Setup</code> を押します。</p>

<p>意図した動作かどうかはわかりませんが、この作業をしなくても <code>app-name.dokku.me</code> は使えました。
(<code>not-found-app.dokku.me</code> で初期設定画面は出てくるまま)</p>

<h2>初期設定</h2>

<p><code>/vagrant/tmp/init.sh</code> に以下のファイルをおいて実行します。
<code>tmp</code> は <code>.gitignore</code> に入っていてローカルな作業ファイルをおくのに都合が良いです。</p>

<p>内容としては以下のようなことをしています。</p>

<ul>
<li><code>docker</code> コマンドを <code>sudo</code> なしで呼べるように <code>docker</code> グループに <code>vagrant</code> ユーザーを追加</li>
<li><code>/home/dokku</code> を調べたりするときなどに都合が良いように <code>dokku</code> グループに <code>vagrant</code> ユーザーを追加</li>
<li>ruby などのダウンロードでタイムアウトしないように <code>CURL_TIMEOUT</code> を増やす</li>
<li><code>dokku run</code> などで一時的に作成されるコンテナーをデフォルトで削除するように <code>DOKKU_RM_CONTAINER</code> を設定</li>
<li><code>~/.ssh/known_hosts</code> がハッシュ化されているとどの行がどのホストかわからなくなるので <code>HashKnownHosts no</code> で無効化</li>
<li>あとで git push のときに使う <code>10.0.0.2</code> のホスト鍵を <code>~/.ssh/known_hosts</code> に追加</li>
<li>ssh の鍵ペアを作成して <code>dokku ssh-keys:add</code> で登録</li>
<li>ruby のビルドに必要なパッケージなどをインストール</li>
<li>anyenv, rbenv, ndenv をインストール</li>
<li><code>~/.gemrc</code> を作成してデフォルトでドキュメントのインストールを無効化</li>
<li>ndenv で最新の node をインストール</li>
</ul>


<p>デプロイするだけなら anyenv などは不要ですが、あとで開発環境としても動かしたかったので入れています。</p>

<pre><code class="sh">#!/bin/bash
set -euo pipefail
set -x
cd /home/vagrant
sudo usermod -aG docker vagrant
sudo usermod -aG dokku vagrant
dokku config:set --global CURL_TIMEOUT=120
dokku config:set --global DOKKU_RM_CONTAINER=1
if [[ ! -e "$HOME/.ssh/config" ]]; then
  echo "HashKnownHosts no" &gt;"$HOME/.ssh/config"
fi
if [[ ! -e "$HOME/.ssh/known_hosts" ]]; then
  ssh-keyscan -t ecdsa-sha2-nistp256 10.0.0.2 | grep -v '#' &gt; "$HOME/.ssh/known_hosts"
fi
if [[ ! -e "$HOME/.ssh/id_rsa" ]]; then
  ssh-keygen -N '' -f "$HOME/.ssh/id_rsa"
  sudo dokku ssh-keys:add vagrant "$HOME/.ssh/id_rsa.pub"
fi

if [[ -z "$(dpkg -l | grep libsqlite3-dev)" ]]; then
  sudo sed -i~ -e 's/us\.archive/jp.archive/' /etc/apt/sources.list
  sudo apt-get update
  sudo apt-get -y install autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm3 libgdbm-dev
  sudo apt-get -y install libpq-dev
  sudo apt-get -y install libsqlite3-dev
  sudo apt-get -y install jq
fi
if [[ ! -d ~/.anyenv ]]; then
  git clone https://github.com/riywo/anyenv.git ~/.anyenv
  echo 'export PATH="$HOME/.anyenv/bin:$PATH"' &gt;&gt; ~/.bashrc
  echo 'eval "$(anyenv init -)"' &gt;&gt; ~/.bashrc
fi
if [[ -z "$(command -v anyenv)" ]]; then
  export PATH="$HOME/.anyenv/bin:$PATH"
  set +x
  eval "$(anyenv init - --no-rehash)"
  set -x
fi
if [[ ! -d ~/.anyenv/envs/rbenv ]]; then
  anyenv install rbenv
fi
if [[ ! -f ~/.gemrc ]]; then
  cat &lt;&lt;EOF &gt;~/.gemrc
install: --no-rdoc --no-ri --format-executable
update: --no-rdoc --no-ri --format-executable
EOF
fi
if [[ ! -d "$HOME/.anyenv/envs/ndenv" ]]; then
  anyenv install ndenv
fi
node_version=$(ndenv install -l | grep '^ *v' | tail -n1 | xargs)
if ! ndenv versions | grep -q "$node_version"; then
  ndenv install "$node_version"
  ndenv global "$node_version"
fi
</code></pre>

<h2>react-webpack-rails-tutorial のデプロイ</h2>

<p>一度 <code>exit</code> で抜けて <code>vagrant ssh</code> で入りなおしてグループの変更や anyenv などのインストールを反映します。</p>

<p><code>/vagrant/tmp/react-webpack-rails-tutorial.sh</code> に以下のファイルをおいて実行します。</p>

<p>内容としては以下のようなことをしています。</p>

<ul>
<li><a href="https://github.com/shakacode/react-webpack-rails-tutorial">https://github.com/shakacode/react-webpack-rails-tutorial</a> の取得</li>
<li>react-webpack-rails-tutorial アプリの作成 (リンク作業に必要)</li>
<li>dokku-postgres が入っていなければ入れる</li>
<li>react-webpack-rails-tutorial-db を作ってリンク</li>
<li>dokku という remote を追加</li>
<li><a href="https://github.com/heroku/heroku-buildpack-multi">https://github.com/heroku/heroku-buildpack-multi</a> を使うため <code>.buildpacks</code> を作成</li>
<li><code>rake db:migrate</code> の自動実行のため <code>app.json</code> を作成</li>
<li>デプロイ</li>
</ul>


<pre><code class="sh">#!/bin/bash
set -euo pipefail
set -x
cd
if [[ ! -d react-webpack-rails-tutorial ]]; then
  git clone https://github.com/shakacode/react-webpack-rails-tutorial
fi
if [[ ! -d /home/dokku/react-webpack-rails-tutorial ]]; then
  dokku apps:create react-webpack-rails-tutorial
fi
if [[ ! -d /var/lib/dokku/plugins/available/postgres ]]; then
  sudo dokku plugin:install https://github.com/dokku/dokku-postgres.git || :
  sudo docker pull gliderlabs/herokuish
fi
if [[ ! -f /home/dokku/react-webpack-rails-tutorial/DOCKER_OPTIONS_RUN ]]; then
  dokku postgres:create react-webpack-rails-tutorial-db || :
  dokku postgres:link react-webpack-rails-tutorial-db react-webpack-rails-tutorial
fi
cd react-webpack-rails-tutorial
if ! git remote | grep -q dokku; then
  git remote add dokku dokku@10.0.0.2:react-webpack-rails-tutorial
fi
cat &gt;.buildpacks &lt;&lt;EOF
https://github.com/heroku/heroku-buildpack-nodejs
https://github.com/heroku/heroku-buildpack-ruby
EOF
git add .buildpacks
git commit -m 'Add .buildpacks' || :
cat &lt;&lt;EOF &gt;app.json
{
  "scripts": {
    "dokku": {
      "predeploy": "bundle exec rake db:migrate"
    }
  }
}
EOF
git add app.json
git commit -m "Set script.dokku.predeploy to app.json" || :
git push dokku master
</code></pre>

<h2>動作確認</h2>

<p>ブラウザーで <a href="http://react-webpack-rails-tutorial.dokku.me/">http://react-webpack-rails-tutorial.dokku.me/</a> を開いて動作確認します。</p>

<h2>.buildpacks の順番</h2>

<p><code>.buildpacks</code> で nodejs, ruby という順番で指定しましたが、逆の順番にすると以下のエラーで失敗しました。
<code>react_on_rails</code> で使っているので、 nodejs の方を先に入れる必要があるようです。</p>

<pre><code class="text">-----&gt; Preparing app for Rails asset pipeline
       Running: rake assets:precompile
       cd client &amp;&amp; npm run build:production
       sh: 1: npm: not found
       rake aborted!
       Command failed with status (127): [cd client &amp;&amp; npm run build:production...]
       /tmp/build/vendor/bundle/ruby/2.3.0/gems/react_on_rails-6.1.0/lib/tasks/assets.rake:33:in `block (3 levels) in &lt;top (required)&gt;'
       /tmp/build/vendor/bundle/ruby/2.3.0/gems/rake-11.2.2/exe/rake:27:in `&lt;top (required)&gt;'
       Tasks: TOP =&gt; assets:precompile =&gt; react_on_rails:assets:compile_environment =&gt; react_on_rails:assets:webpack
       (See full trace by running task with --trace)
       !
       !     Precompiling assets failed.
       !
</code></pre>

<h2>開発環境設定</h2>

<p><a href="https://github.com/shakacode/react-webpack-rails-tutorial#basic-demo-setup">https://github.com/shakacode/react-webpack-rails-tutorial#basic-demo-setup</a> を参考にして設定します。</p>

<p><code>/vagrant/tmp/react-webpack-rails-tutorial-dev.sh</code> に以下のファイルをおいて実行します。</p>

<p>内容としては以下のようなことをしています。</p>

<ul>
<li><code>.ruby-version</code> で指定されている ruby のインストール
<a href="https://github.com/thoughtbot/capybara-webkit/wiki/Installing-Qt-and-compiling-capybara-webkit#ubuntu-trusty-1404">https://github.com/thoughtbot/capybara-webkit/wiki/Installing-Qt-and-compiling-capybara-webkit#ubuntu-trusty-1404</a> のインストール (OS X 上で直接試したときにはこの依存をインストールする部分が大変でした)</li>
<li>余計な差分が出ないように <code>Gemfile.lock</code> に記録されているバージョンの bundler をインストール</li>
<li><code>bundle install</code> で依存している gem をインストール</li>
<li><code>npm install</code> で依存している node modules をインストール</li>
<li>sqlite3 のデータベース作成</li>
</ul>


<pre><code class="sh">#!/bin/bash
set -euo pipefail
set -x
cd "$HOME/react-webpack-rails-tutorial"
ruby_version="$(&lt;.ruby-version)"
if ! rbenv versions | grep -q "$ruby_version"; then
  rbenv install "$ruby_version"
fi
sudo apt-get -y install libqt4-dev libqtwebkit-dev
bundler_version=$(grep -A1 'BUNDLED WITH' Gemfile.lock | tail -n1 | tr -d ' ')
if ! gem list | grep -q bundler; then
  gem install bundler -v "$bundler_version"
fi
bundle install
npm install
rake db:setup
</code></pre>

<h2>開発環境追加設定</h2>

<p><code>foreman start -f Procfile.hot</code> で起動して
<a href="http://dokku.me:5000/">http://dokku.me:5000/</a> で表示を確認すると「FATAL: Listen error: unable to monitor directories for changes. Visit <a href="https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers">https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers</a> for info on how to fix this.」というエラーになるので、サイトに書いてある通り、
<code>echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</code>
を実行しました。</p>

<p>実行前の <code>cat /proc/sys/fs/inotify/max_user_watches</code> は 8192 でした。</p>

<p>起動途中だと <code>ActionView::Template::Error (No such file or directory @ rb_file_s_mtime - app/assets/webpack/server-bundle.js):</code> というエラーになるので少し待てば良いようです。</p>

<p>しかし、次にアクセスしてみるとなぜか hot-assets が落ちてしまってうまく動きませんでした。
そして <code>ps x</code> でプロセスを確認するとちゃんと終了せずに残ってしまっているプロセスがあるので <code>pkill -f puma</code>, <code>pkill node</code> で終了させる必要がありました。</p>

<p>表示できても assets として <code>http://localhost:3500/</code> を参照しているため、ポートフォワーディングの設定追加が必要そうでした。</p>

<h2>Procfile.static</h2>

<p><code>foreman start -f Procfile.static</code> で起動して <code>http://dokku.me:5000/</code> を開いたところ、開けることもありましたが、落ちることも多くて安定しませんでした。</p>

<h2>まとめ</h2>

<p>Vagrant の VM は開発環境としてはなぜか安定しませんでしたが、 Dokku をデプロイ先としては安定して使えたので、
<code>react_on_rails</code> は開発対象の選択肢として入れても良さそうな感じがしました。</p>

<p>開発環境として OS X 上で直接動かしたときは問題なく動いたので、<code>localhost</code> ではなく <code>10.0.2.2</code> を使ってしまったのが不具合の原因だったのかもしれませんが、もう少し調べてみないとなんとも言えません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bundled gem と default gem の違いの具体例]]></title>
    <link href="http://blog.n-z.jp/blog/2016-09-13-bundled-gem-and-default-gem-more.html"/>
    <updated>2016-09-13T23:33:33+09:00</updated>
    <id>http://blog.n-z.jp/blog/bundled-gem-and-default-gem-more</id>
    <content type="html"><![CDATA[<p><a href="/blog/2016-09-10-bundled-gem-and-default-gem.html">bundled gem と default gem の違い</a>で概要は説明しましたが、具体的にどうなっているのか試してみました。</p>

<!--more-->


<h2>動作確認環境</h2>

<ul>
<li>Mac OS X Yosemite (10.10.5)</li>
<li>homebrew</li>
<li>rbenv 1.0.0</li>
<li>ruby-build v20160913</li>
<li>ruby 2.4.0-preview2, 2.3.1</li>
<li>bundler 1.13.0, 1.12.5</li>
<li>activesupport 5.0.0.1</li>
<li>rdoc 4.2.1, 5.0.0.beta2</li>
</ul>


<h2>クリーンな 2.4.0-preview2 を準備</h2>

<p>homebrew で入れた rbenv + ruby-build を使って 2.4.0-preview2 をインストールしました。
bundler も必要なのでインストールして、普通の gem の例として activesupport も入れておきました。</p>

<pre><code>% rbenv install 2.4.0-preview2
Downloading ruby-2.4.0-preview2.tar.bz2...
-&gt; https://cache.ruby-lang.org/pub/ruby/2.4/ruby-2.4.0-preview2.tar.bz2
Installing ruby-2.4.0-preview2...
Installed ruby-2.4.0-preview2 to /Users/kazu/.rbenv/versions/2.4.0-preview2
% rbenv shell 2.4.0-preview2
% gem list

*** LOCAL GEMS ***

bigdecimal (default: 1.2.8)
did_you_mean (1.0.2)
io-console (default: 0.4.6)
json (default: 2.0.2)
minitest (5.9.0)
net-telnet (0.1.1)
openssl (default: 2.0.0.beta.2)
power_assert (0.3.1)
psych (default: 2.1.1)
rake (11.2.2)
rdoc (default: 5.0.0.beta2)
test-unit (3.2.1)
xmlrpc (0.1.1)
% gem install bundler
Fetching: bundler-1.13.0.gem (100%)
Successfully installed bundler-1.13.0
1 gem installed
% gem install activesupport
Fetching: i18n-0.7.0.gem (100%)
Successfully installed i18n-0.7.0
Fetching: thread_safe-0.3.5.gem (100%)
Successfully installed thread_safe-0.3.5
Fetching: tzinfo-1.2.2.gem (100%)
Successfully installed tzinfo-1.2.2
Fetching: concurrent-ruby-1.0.2.gem (100%)
Successfully installed concurrent-ruby-1.0.2
Fetching: activesupport-5.0.0.1.gem (100%)
Successfully installed activesupport-5.0.0.1
5 gems installed
</code></pre>

<h2>bundler なしの環境での require</h2>

<p>普通の状態ではどれも問題なく require できます。</p>

<pre><code>% rbenv exec irb -r irb/completion --simple-prompt
&gt;&gt; require 'json' # default gem
=&gt; true
&gt;&gt; require 'xmlrpc' # bundled gem
=&gt; true
&gt;&gt; require 'uri' # stdlib
=&gt; true
&gt;&gt; require 'active_support/all' # normal gem
=&gt; true
</code></pre>

<h2>bundler 環境でのテスト</h2>

<p>bundler 環境下では bundled gem は普通の gem と同じように読み込めないことがわかります。</p>

<pre><code>% mkdir /tmp/test
% cd /tmp/test
% bundle init
Writing new Gemfile to /private/tmp/test/Gemfile
% bundle exec irb -r irb/completion --simple-prompt
&gt;&gt; require 'json' # default gem
=&gt; true
&gt;&gt; begin; require 'xmlrpc'; rescue LoadError; $!; end # bundled gem
=&gt; #&lt;LoadError: cannot load such file -- xmlrpc&gt;
&gt;&gt; require 'uri' # stdlib
=&gt; false
&gt;&gt; begin; require 'active_support/all'; rescue LoadError; $!; end # normal gem
=&gt; #&lt;LoadError: cannot load such file -- active_support/all&gt;
&gt;&gt;
</code></pre>

<h2>uninstall</h2>

<p>default gem は uninstall ができなくて、bundled gem は uninstall できることがわかります。</p>

<pre><code>% gem uninstall json
ERROR:  While executing gem ... (Gem::InstallError)
    gem "json" cannot be uninstalled because it is a default gem
% gem uninstall xmlrpc
Successfully uninstalled xmlrpc-0.1.1
</code></pre>

<h2>Gemfile でバージョン指定</h2>

<p><code>Gemfile</code> でバージョン指定していれば default gem の代わりに指定したバージョンの gem が使われることがわかります。</p>

<pre><code>% echo "gem 'json', '2.0.0'" &gt;&gt; Gemfile
% bundle install
Fetching gem metadata from https://rubygems.org/.
Fetching version metadata from https://rubygems.org/
Resolving dependencies...
Installing json 2.0.0 with native extensions
Using bundler 1.13.0
Bundle complete! 1 Gemfile dependency, 2 gems now installed.
Use `bundle show [gemname]` to see where a bundled gem is installed.
% bundle exec irb -r irb/completion --simple-prompt
&gt;&gt; require 'json'
=&gt; true
&gt;&gt; JSON::VERSION
=&gt; "2.0.0"
</code></pre>

<h2>おかしなことが起こる例</h2>

<p>ruby 2.4 だと古い json 1.x が入らない関係で rdoc 4.x が入らなかったので、
ここだけ使用中の ruby 2.3.1 で検証しました。</p>

<h3>準備</h3>

<p>rubygems が古いため、 <code>default:</code> は付いていませんが、 4.2.1 が default gem です。</p>

<pre><code>% rbenv shell 2.3.1
% echo "gem 'rdoc', '= 5.0.0.beta2'" &gt;&gt; Gemfile
% bundle install
Warning: the running version of Bundler is older than the version that created the lockfile. We suggest you upgrade to the latest version of Bundler by running `gem install bundler`.
Fetching gem metadata from https://rubygems.org/
Fetching version metadata from https://rubygems.org/
Resolving dependencies...
Installing json 2.0.0 with native extensions
Installing rdoc 5.0.0.beta2
Using bundler 1.12.5
Bundle complete! 2 Gemfile dependencies, 3 gems now installed.
Use `bundle show [gemname]` to see where a bundled gem is installed.
% gem list rdoc

*** LOCAL GEMS ***

rdoc (5.0.0.beta2, 4.2.1)
</code></pre>

<h3>rdoc 5 で減ったファイルを探す</h3>

<p>探してみたところ、 <code>rdoc/markdown/literals_1_9.rb</code> が <code>rdoc/markdown/literals.rb</code> に改名されていてなくなっていたのを見つけたので、
これを使っておかしな挙動を確かめてみました。</p>

<h3>bundler 環境下で確認</h3>

<p>bundler 環境下では <code>Gemfile</code> で指定した 5.0.0.beta2 が読み込まれるのがわかります。</p>

<p>ここまでは良いのですが、 5.0.0.beta2 ではなくなっているファイルを <code>require 'rdoc/markdown/literals_1_9'</code> で読み込もうとすると、
default gem の 4.2.1 のファイルが (組み合わせがおかしいので警告が出つつ) 読み込めてしまいます。</p>

<p><code>$LOAD_PATH</code> を確認してみると、そういう挙動になる理由はわかるのですが、増減するファイルによっては何か気づきにくい問題が起きるかもしれません。</p>

<pre><code>% bundle exec irb -r irb/completion --simple-prompt
&gt;&gt; require 'rdoc'
=&gt; true
&gt;&gt; RDoc::VERSION
=&gt; "5.0.0.beta2"
&gt;&gt; require 'rdoc/markdown/literals_1_9'
/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/2.3.0/rdoc/markdown/literals_1_9.rb:413: warning: already initialized constant RDoc::Markdown::Literals::Rules
/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rdoc-5.0.0.beta2/lib/rdoc/markdown/literals.rb:409: warning: previous definition of Rules was here
=&gt; true
&gt;&gt; puts $LOAD_PATH
/usr/local/Cellar/rbenv/1.0.0/rbenv.d/exec/gem-rehash
/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.12.5/lib
/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rdoc-5.0.0.beta2/lib
/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/json-2.0.0/lib
/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/extensions/x86_64-darwin-14/2.3.0-static/json-2.0.0
/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/site_ruby/2.3.0
/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/site_ruby/2.3.0/x86_64-darwin14
/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/site_ruby
/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/vendor_ruby/2.3.0
/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/vendor_ruby/2.3.0/x86_64-darwin14
/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/vendor_ruby
/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/2.3.0
/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/2.3.0/x86_64-darwin14
=&gt; nil
</code></pre>

<h3>gem which で確認</h3>

<p><code>gem which</code> でどのファイルが <code>require</code> で読み込まれるのか確認できるので、参考になるかもしれません。</p>

<pre><code>% gem which rdoc/markdown/entities
/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/2.3.0/rdoc/markdown/entities.rb
% bundle exec gem which rdoc/markdown/entities
/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rdoc-5.0.0.beta2/lib/rdoc/markdown/entities.rb
% bundle exec gem which rdoc/markdown/literals_1_9
/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/2.3.0/rdoc/markdown/literals_1_9.rb
% bundle exec gem which rdoc/markdown/literals
/Users/kazu/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rdoc-5.0.0.beta2/lib/rdoc/markdown/literals.rb
</code></pre>

<h2>普通は問題にならないであろう問題点</h2>

<p>基本的には Ruby コミッターしか影響しないはずなので、単なるおまけです。</p>

<p>どこに報告すればいいのかわからなかったので、とりあえず gist にメモを書いた (<a href="https://gist.github.com/znz/62946cbb55de4fe58a5101d7875a2ba1">rubygems with multi default gem problem</a>) のですが、Ruby コミッターのように開発版を上書きインストールし続けている環境を持っていると、
default gem として複数バージョンの gemspec を持ってしまうことがあり、実際には後から <code>make install</code> した方しか入っていないので、ダミーの gemspec だけ残っているバージョンを指定した時におかしなことになるという話です。</p>

<p>クリーンインストールしなおすなり、 <code>$(gem env gemdir)/specifications/default</code> の古い gemspec を消すなりすれば良いだけなので、そんなに困る問題でもないです。</p>

<h2>まとめ</h2>

<p>bundled gem と default gem の違いを実際の動作を元に比べてみました。
また、 bundler と組み合わせて問題が起きる可能性がある例をみてみました。
通常の使い方では問題が起きることはないと思いますが、トリビア的に知っておくとおもしろいかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bundled gem と default gem の違い]]></title>
    <link href="http://blog.n-z.jp/blog/2016-09-10-bundled-gem-and-default-gem.html"/>
    <updated>2016-09-10T18:55:55+09:00</updated>
    <id>http://blog.n-z.jp/blog/bundled-gem-and-default-gem</id>
    <content type="html"><![CDATA[<p>RubyKaigi 2016 の後の移動中に hsbt さんに bundled gem と default gem との違いについて聞いてみた話をまとめてみました。</p>

<!--more-->


<h2>違い</h2>

<ul>
<li>bundled gem は単なる gem で gem uninstall もできる普通の gem</li>
<li>default gem は

<ul>
<li>uninstall できない</li>
<li>bundler の <code>clean_env</code> 環境でも見える</li>
<li>bundler で別のバージョンを指定してインストールしていれば、通常の bundler の load path の挙動に従って、そちらが使われる</li>
<li>たとえば ruby 2.3.1 だと <code>lib/ruby/gems/2.3.0/gems/rdoc-4.2.1</code> に <code>bin/rdoc</code> と <code>bin/ri</code> しかなくて他は <code>lib/ruby/2.3.0/rdoc*</code> などの標準添付のところに入っている</li>
</ul>
</li>
</ul>


<p>というような違いだと聞きました。</p>

<p>調べてみたところ、他には</p>

<ul>
<li><code>$(gem env gemdir)/specifications/default</code> に <code>*.gemspec</code> ファイルが入っている</li>
<li>新しい rubygems だと <code>gem list</code> で <code>json (default: 2.0.2)</code> のように <code>default:</code> がつく</li>
</ul>


<p>という違いがあるようでした。</p>

<h2>続く</h2>

<p><a href="/blog/2016-09-13-bundled-gem-and-default-gem-more.html">bundled gem と default gem の違いの具体例</a>に続きを書きました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2016 の 3 日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-09-10-rubykaigi-2016.html"/>
    <updated>2016-09-10T09:20:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi-2016</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2016" title="RubyKaigi 2016">RubyKaigi 2016</a> の 3 日目に参加したので、そのメモです。</p>

<!--more-->


<h2>Ruby Committers vs the World 前</h2>

<ul>
<li>コミッターは 9:10 までにコミッター T シャツをきてくるようにという話だったので、ちゃんと間に合うように着きました。</li>
<li>壇上に上がらないと名指しされて逆に目立つ自体発生</li>
</ul>


<h2>Money Forward</h2>

<ul>
<li>urabe さんを雇用している</li>
<li>RubyKaigi 2015/2016 のスポンサー</li>
<li>壇上だと近すぎてスライドが見にくい状態</li>
<li>普通の Rails アプリを普通に作っている</li>
</ul>


<h2>Ruby Committers vs the World</h2>

<ul>
<li>会場から質問受付するので考えておいてください</li>
<li>謝辞</li>
<li>新規コミッター</li>
<li><a href="https://rhe.jp/">rhe さん</a> (不在, openssl)</li>
<li>tadd さん (<a href="https://bugs.ruby-lang.org/issues/12484">Feature #12484 Optimizing Rational</a>)</li>
<li>2.4 に入れたい</li>
<li>MVP (P = Patch)</li>
<li><a href="https://github.com/ruby/ruby/commit/9afc312b4fef21da91fde083f85533ffd5a9d95f">r54737 Support MSVC14 and 15</a></li>
<li>Windows は C ランタイムが開発環境についている</li>
<li>隠されてしまった構造体の中身を見ている</li>
<li><a href="https://github.com/ruby/ruby/commit/d8c3672b012ec6eb55e097162c6c638e8d932471">r55656 undef ISeq.translate</a></li>
<li>昨年 12 月に追加された translate が定義されていれば呼ぶという機能が、意図せずトップレベルに定義されてしまっていても呼んでしまっていた。</li>
<li>リリース後、半年気づかれなかった。</li>
<li>asakusa.rb の <a href="https://twitter.com/takkanm/status/752864847319007236">irb を起動する、action_view を require する、ActionView::Helpers を include する、exit って打つ、楽しい</a> で発見</li>
<li>質問受付</li>
<li>同時通訳が入っているので、同時に二人以上喋らないように注意</li>
<li>Ruby の標準ライブラリを gem に切り出す話の進捗は?</li>
<li>hsbt さん: tk, xmlrpc が gem にして standard library から外れた</li>
<li>ruby コミッター以外でもメンテナンスできるようになった</li>
<li>tarball がちょっと小さくなった</li>
<li>ビルド時間もちょっと減った</li>
<li>2.5 に向けて 2,3 個外したい</li>
<li>質問 (urabe さん): よく使われている gem の話があったが bundler は標準添付になるのか?</li>
<li>drbrain さん: 聞き取れず</li>
<li>質問 (ささださん): Ruby 3 の話はあるが、Ruby 2 で変えたいことはあるか?</li>
<li>matz: 小さい性能改善とかはどんどん入れたい</li>
<li>Integer Unification のようなものは影響範囲をみながら</li>
<li>ささださん : Ruby 3 でなら大きな変更は OK ?</li>
<li>matz: 多くのコードを書き換えないといけないような変更は入れたくない</li>
<li>naruse さん : Windows の external encoding を utf-8 にしたい</li>
<li>西島さん : frozen string literal のデフォルト化?</li>
<li>matz: 2.3 でプラグマを入れたが frozen string literal がデフォルトになると Python 3 の二の舞になりそう</li>
<li>matz: Python 3 を見習いたいところはあるので Python 3 を dis っているつもりはない</li>
<li>akr さん: 会場アンケート</li>
<li>プラグマをちゃんと書いている人 : ぱらぱらといる程度</li>
<li>みんな書いて面倒と思われたらデフォルトになるのでは</li>
<li>今の感じだとまだ無理そう</li>
<li>質問: 聞き取れず</li>
<li>naruse さん : github に移るのは難しい (理由は聞き取れず)</li>
<li>svn から git に移行する時にツールを直さないといけないが、そのリストアップがされていない</li>
<li>matz: 中央の repository が github になったとしても github issues を使う予定はない</li>
<li>すでに redmine を使っているので</li>
<li>github の社員の aaron さん : 聞き取れす</li>
<li>naruse さん : 聞き取れず</li>
<li>Yugui さん : ML 連携を書いた責任を感じているので何かしたい</li>
<li>urabe さん : 全容把握が必要</li>
<li>matz : git に移行するとしても年単位でかかりそう</li>
<li>すでに github で pull request も受け付けているし、 git svn を使っている人も多いので、中央レポジトリを移行する嬉しさがあまりない</li>
<li>会場: Ruby3 で変えていきたいとか入れたいとかあるか? こういう人がコミッターになったら嬉しいとかある?</li>
<li>ko1 さん: 並行性に対するサポートを入れたいし accept して欲しい</li>
<li>実装がめちゃくちゃ大変なので手伝ってくれる人が欲しい</li>
<li>matz: やりたいことの 3 つの柱の 1 つなので何かしらのものは入れたい</li>
<li>takano32 さん (IA64メンテナ): bundler</li>
<li>matz: Python 3 で見習わないのは大きな非互換を入れたところだけ</li>
<li>takano32 さん: rbenv?</li>
<li>nobu さん: rbenv は ruby の外側なので ruby に入っても嬉しくないのではないか</li>
<li>a_matsuda さん: その通りだと思う</li>
<li>urabe さん: Python のように C にうまく translate するものがあれば良いのではないか</li>
<li>mrkn さん: 速度向けではなく、拡張ライブラリを楽に書きたい人向けではないか</li>
<li>標準に入るかどうかはわからない</li>
<li><code>rb_define_method</code> や typed data を毎回書くのが面倒</li>
<li>nobu さん: そういうパターンで書くところはテンプレートで支援しても良いかも</li>
<li>ko1 さん: 以前に似たものを提案したことがある</li>
<li>C 言語以外に中間言語を新しく勉強するのが大変という反対意見があった</li>
<li>実際のものを評価して判断したい</li>
<li>kou さん: 拡張ライブラリをよくかく</li>
<li>普通の関数だけで書かれるのがわかりやすくて良いので変なマクロが増える方向だと反対</li>
<li>Yugui さん: 会場アンケート</li>
<li>拡張ライブラリを書いたことがある人 : それなりにいる</li>
<li>辛い人 : そんなにいない</li>
<li>会場: 拡張ライブラリを書いているが、慣れれば普通の C (CRuby 用) と Java (JRuby 用) なので便利</li>
<li>extension.rdoc がわかるようになるころには、ソースを直接読むほうがはやい</li>
<li>Yugui さん: doxygen コメントを入れる機能があるので活用してください</li>
<li>どんなコミッターが欲しいかという話に戻った</li>
<li>ko1 さん: 平均年齢が上がっていっているので、若い人が欲しい</li>
<li>気軽に聞いてください</li>
<li>hsbt さん: GSoC など、サポートをうまく活用してください</li>
<li>mrkn さん: 会場アンケート: Ruby のコミッターになっていじりたいところがある人: 数人いる</li>
<li>会場 (joker1007 さん): キーワード引数の扱いの話</li>
<li><code>**</code> だけではなく名前をつけたものも一緒になった <code>Hash</code> が欲しい</li>
<li>(twitter によると <a href="http://qiita.com/joker1007/items/708af8eb5c217bf23e09" title="[小ネタ] Rubyのキーワード引数で受け取った値をHashとしてまとめて取得するgem">[小ネタ] Rubyのキーワード引数で受け取った値をHashとしてまとめて取得するgem</a> のことではないかという話)</li>
<li>a_matsuda さん: feature request を再プッシュ</li>
<li>naruse さん: 見つからなければ重複とマークされるだけなので再作成でも良い</li>
<li>会場: 英語なのでよくわからず</li>
<li>drbrain さん: 英語なのでよくわからず</li>
<li>aaron さん: 英語なのでよくわからず</li>
<li>時間がないので後で</li>
<li>会場: 英語なのでよくわからず</li>
<li>matz: 英語なのでよくわからず (CoC の話?)</li>
<li>naruse さん: 最後に: 壇上で Ruby 2.4.0-preview2 がリリースされたことをアナウンス</li>
</ul>


<h2>Web Clients for Ruby and What they should be in the future</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/tkawa.html" title="Web Clients for Ruby and What they should be in the future - RubyKaigi 2016">Web Clients for Ruby and What they should be in the future - RubyKaigi 2016</a></li>
<li>最初のセッションが伸びたので残りの午前のセッションは 5 分遅れ (昼休みで調整するのは昨日と同じらしい)</li>
<li>自己紹介など</li>
<li><a href="http://amzn.to/2cMkz1U">RESTful Web APIs</a> → <a href="http://amzn.to/2bYPjYC">Restful Web Clients</a></li>
<li>ユーザーが操作する Web API</li>
<li>こんなクライアントは嫌だ: 密結合</li>
<li>こんなクライアントが好き: 疎結合</li>
<li>例: FizzBuzzaaS : FizzBuzz as a Service</li>
<li>パラメーターをつけた URL 直指定は密結合</li>
<li>link next で疎結合</li>
<li>Ruby の HTTP クライアント: net/http, open-uri</li>
<li>gem はたくさん: 大江戸HTTPクライアント絵巻 <a href="http://regional.rubykaigi.org/oedo01/">http://regional.rubykaigi.org/oedo01/</a></li>
<li>Web API は使うのが簡単なので普及した</li>
<li>Web API ごとの gem もたくさんある</li>
<li>RPC でいいんじゃないか?</li>
<li>なぜ個別の gem がたくさんできるのか?</li>
<li>API呼び出し (1回) と機能の呼び出しにはギャップがある</li>
<li>HTTP クライアントは状態を持たないが、アプリは状態を持つ</li>
<li>私が欲しいクライアントは状態管理ができるクライアント</li>
<li>ここでは状態管理ができるクライアントを Web クライアントと呼ぶ</li>
<li>クライアントとサーバーのレイヤーの話</li>
<li>Rack, Rack Middleware : 玉ねぎ</li>
<li>Faraday: Rack Middleware のように Faraday Middleware がある</li>
<li>gem を丸ごと作るのではなく Faraday Middleware として作る</li>
<li><a href="https://github.com/tkawa/faraday-hypermedia">https://github.com/tkawa/faraday-hypermedia</a></li>
<li>faraday-navigation</li>
<li>Link Header: RFC 5988</li>
<li>Link-Template Header: Internet Draft (expired)</li>
<li>faraday-link-extractor</li>
<li><code>navigation:</code> を拡張</li>
<li>デモ動画: 文字が小さくてよく見えないので雰囲気で見ていた</li>
</ul>


<p>Faraday は名前は見たことがあって、よく使われているのかなという印象はあり、具体的にどういうものかは知らなかったのですが、便利そうでした。</p>

<h2>High Tech Seat in mruby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/yuri_at_earth.html" title="High Tech Seat in mruby - RubyKaigi 2016">High Tech Seat in mruby - RubyKaigi 2016</a></li>
<li>Sessalet (せされっと) : SESSAME (コミュニティ名) + Washlet</li>
<li>SESSAME: 組込みソフトウェア管理者・技術者育成研究会</li>
<li>組込みソフトウェア技術者・管理者向けセミナー ～ソフトウェアに変換可能な仕様書がきちんと書けるようになろう～</li>
<li>なぜ Sessalet? : 状態が入れ子になっている、直交状態をもつ</li>
<li>翻訳の揺れ: State Machine Diagram, entry, trigger</li>
<li>遷移が正しくない図、開始状態がない図はよくない</li>
<li>Sessalet Analysis Model</li>
<li>RTOS : EV3RT</li>
<li>TOPPERS Project</li>
<li>mruby をどう使っているかという話</li>
</ul>


<p>他の作業をしながら聞いていたのであまりメモをとれませんでした。</p>

<h2>Lunch Break</h2>

<h2>Recent Advances in HTTP and Controlling them using ruby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/kazuho.html" title="Recent Advances in HTTP and Controlling them using ruby - RubyKaigi 2016">Recent Advances in HTTP and Controlling them using ruby - RubyKaigi 2016</a></li>
<li>いっぱいだったので通路に座っていました。</li>
<li>自己紹介</li>
<li>h2o は fastly でも使われている</li>
<li>(プレゼンにはなかったけど fastly は www.ruby-lang.org でも使われている)</li>
<li>Current State of HTTP</li>
<li>なぜ HTTP/2 を使うのか?</li>
<li>ボトルネックがバンド幅からレイテンシーに変わってきた</li>
<li>3割ぐらいのサーバーが HTTP/2 (RFC 7540) に対応している</li>
<li>https への移行も進んでいる</li>
<li>HPACK (ヘッダー圧縮): いい感じ</li>
<li>多重化と優先順位付け</li>
<li>Push: ネガティブなコメントもあり</li>
<li>理想的な HTTP トランザクションの流れ</li>
<li>現実はできていない</li>
<li>TCP head-of-line blocking : 優先度の低いデータが滞留しているため、優先度の高いデータが送れない問題</li>
<li>直ちに送れるデータ量 CWND のサイズが Web サーバーがわからないので、バッファいっぱいまで書いてしまう</li>
<li>最適化できる</li>
<li>最適化した結果のベンチマーク</li>
<li>HTTP/2 の優先順位付け</li>
<li>クライアントが指定した順位を参考にしてサーバーが送信</li>
<li>Firefox の場合、CSS や JS  を優先して、残りは HTML と画像 (HTML をちょっと優先)</li>
<li>Safari, Blink はすべて同じなので、数の多い画像がたくさん帯域を使ってしまう</li>
<li>頭の悪いクライアントにはサーバー側で対処する必要がある</li>
<li>解決策、ベンチマーク</li>
<li>Hidden resource</li>
<li>CSS の <code>@import</code> の前に画像があると CSS のリクエストの前に画像を取りに行ってしまう</li>
<li>コンテンツ側で対処する必要あり</li>
<li>Push</li>
<li>How to Push: <code>Link: &lt;/style.css&gt;; rel=preload</code> ヘッダが w3c で仕様策定中</li>
<li>リクエスト処理中にプッシュする方法</li>
<li>H2O の場合 <code>100 Continue</code> という中間レスポンスで <code>Link</code> ヘッダーを送って最終的に <code>200 OK</code> などを返すという方法がある</li>
<li>H2O の設定に <code>mruby</code> で記述</li>
<li>RUM = Real User Monitoring</li>
<li>Push vs. cache</li>
<li>キャッシュ済みのリソースは無駄なので送信したくない</li>
<li>Cookie を使う: すでに動く</li>
<li>cache-digest を使う: ServiceWorker Script がブラウザーに必要</li>
<li>push の悪影響を避ける話</li>
<li>CSS, JS は push すると良さそうだが、画像は push しない方が良さそう</li>
<li>まとめ</li>
<li>質疑応答</li>
<li>質問1: <code>100 Continue</code> の実績はあるのか?</li>
<li><code>unicorn</code> とかで実際に試したという話はまだなさそう</li>
<li>質問2: ロードバランサーで動かない問題</li>
<li>TCP HoL blocking は原理的に回避不可能</li>
<li>QUIC が普及すれば、原理的に (L4?) ロードバランサーが使えないので、解決するか</li>
</ul>


<p>基本的にはサーバーやブラウザーの実装が頑張ってくれて、アプリケーション作成者としては hidden resource あたりに気をつけるだけで良い感じにしてくれるようになるのかもしれない。</p>

<h2>Optimizing Ruby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/shyouhei.html" title="Optimizing Ruby - RubyKaigi 2016">Optimizing Ruby - RubyKaigi 2016</a></li>
<li>自己紹介</li>
<li>Ruby is slow と言われている</li>
<li>GC? GVL? dynamic? ではない</li>
<li>脱最適化されていないから</li>
<li>コンパイル時に <code>1 + 2</code> が <code>3</code> にできない</li>
<li><code>Integer#+</code> が再定義される可能性があるから</li>
<li>普通は再定義されない</li>
<li>常に遅いのと、再定義されていないときは速いけど再定義されると遅くなるのはどっちがいいか</li>
<li>脱最適化は <code>SELF</code> という Smalltalk の variant がオリジナルで、開発者の関係で今は JVM に入っている</li>
<li>JIT コンパイルはしない</li>
<li>VM 命令を変換するだけ</li>
<li>命令の長さは変えない (必要なら nop で埋める)</li>
<li><code>iseq_encoded</code> を <code>iseq_deoptimize</code> に <code>memcpy</code> しておく</li>
<li><code>created_at</code> も追加</li>
<li>脱最適化は <code>iseq_deoptimize</code> を <code>iseq_encoded</code> に <code>memcpy</code> して戻す</li>
<li>C 言語のみなのでポータブル</li>
<li>プログラムカウンターをいじらない</li>
<li>VM timestamp で再定義の検出</li>
<li>ほとんどオーバーヘッドがない</li>
<li>ここまでのまとめ</li>
<li>これで最適化ができるようになった</li>
<li>定数の畳み込み</li>
<li>Folding 1 + 2</li>
<li>send の最適化</li>
<li>呼び出した後、すぐに値が捨てられるものを削除</li>
<li>「pure」なメソッドというのを考える</li>
<li>pure ではないメソッドの例</li>
<li>pure なメソッドの例 (ちょっと複雑な例として、left-pad、ライプニッツの公式)</li>
<li>決まらないという第三の状態がある (<code>method_missing</code> が発生するようなものとか)</li>
<li>最初は未定にしておき、実行中に決めていくようにした</li>
<li><code>callcache</code> に保存</li>
<li>呼び出され方も影響する</li>
<li>メソッドの返り値が使われていたら最適化しない</li>
<li>引数の中に最適化できないメソッド呼び出しがあったら、そっちは残すように調整が必要</li>
<li>変数の最適化</li>
<li>厳密に判定するのは難しいので、あらかさまに不要な代入されて使われていない (write-only) 変数を最適化する</li>
<li><code>binding</code> とかブロック (<code>binding</code> が勝手につく) があると最適化できない</li>
<li>ここまでのまとめ</li>
<li>基本的な最適化しかしていない</li>
<li>例外などに影響しないようにしている</li>
<li>まだまだ他の最適化をする余地がある</li>
<li>ベンチマーク</li>
<li>速くなったものはすごく速くなったが遅くなったものはさほどでもない</li>
<li>まとめ</li>
<li>FAQs</li>
<li><a href="https://github.com/ruby/ruby/pull/1419">https://github.com/ruby/ruby/pull/1419</a></li>
<li>質疑応答</li>
<li>質問1: メモ取れず</li>
<li>質問2: メソッドが pure かどうか知るメソッドはあるか?</li>
<li>デバッグに必要だったのである</li>
<li>実行ごとに変わる可能性がある</li>
<li>質問3: メモリー使用量は?</li>
<li>評価していないが、減っているはずはないので多少増えているはず</li>
<li>質問4: メモ取れず</li>
<li>Rails アプリなどの大きなものでの評価はまだ</li>
<li>質問5: fork の CoW への影響は?</li>
<li>fork のことは頭になかったが影響があるかも</li>
<li>他の JIT でも同じなので、あたたまってから fork するとか</li>
<li>質問6: シーケンスが長くなる最適化は?</li>
<li>VM のスタックの調整が必要なのでなんとかという話</li>
<li>質問7: <code>+</code> が pure なのはどうやって判定している?</li>
<li>特別扱いしている</li>
<li>質問8: Thread ? (英語で長いのでよくわからず)</li>
<li>質問9: ローカル変数で write-only な変数はそもそもいらないので警告を出してほしい</li>
<li><code>eval</code> などで使われる可能性があるので、完全になくすのはできない</li>
<li>警告だけなら良いかも</li>
<li>ko1 さん: 警告だけならすでに <code>-w</code> オプションで出る (<code>warning: assigned but unused variable</code>)</li>
</ul>


<h2>Afternoon Break</h2>

<h2>Hijacking syscalls with (m)ruby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/franckverrot.html" title="Hijacking syscalls with (m)ruby - RubyKaigi 2016">Hijacking syscalls with (m)ruby - RubyKaigi 2016</a></li>
<li>どっちも英語なのでどちらにしようか悩みましたが、こっちにしました。</li>
<li>Afternoon Break でのんびりしていたらすでに始まっていたので、最初の方は少し見逃しました。</li>
<li>system call の説明</li>
<li>Chaos Monkey</li>
<li>Securing Ruby apps</li>
<li>Library preloading</li>
<li>(m)ruby</li>
<li>mruby を External DSL として使う</li>
<li><code>super</code> でオリジナルの system call を呼ぶ</li>
<li>あんまり聞いていなかった。</li>
<li>質疑応答は質問なしで終了</li>
</ul>


<h2>cookpad</h2>

<ul>
<li>基調講演前にスポンサーセッション</li>
</ul>


<h2>Dive into CRuby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/nalsh.html" title="Dive into CRuby - RubyKaigi 2016">Dive into CRuby - RubyKaigi 2016</a></li>
<li>自己紹介</li>
<li>貢献したいモチベーション</li>
<li>なぜ新機能を追加したいか?</li>
<li>実際どういうコードで使いたいかという例 (use case) が必要</li>
<li>顧客が本当に必要だったもの</li>
<li><a href="https://bugs.ruby-lang.org/issues/6752">Feature #6752 Replacing ill-formed subsequence</a></li>
<li>Case: Web Forms: 400 Bad Request でいいのでは。</li>
<li>Case: Files: 無理矢理読むのは間違っている。適切なエンコーディングを指定すべき。</li>
<li>Case: Web Crawler: 実際の Web ページが壊れているので無理矢理読むことしかできない。</li>
<li>例: twitter</li>
<li>RT の初期の切り詰めがバグっていて、尻切れとんぼなバイト列ができたのではないか</li>
<li>iconv を使っている人がいた</li>
<li><code>String#encode</code> (encode エンジンベース) と <code>String#scrub</code> (正規表現ベース) の両方を作った</li>
<li><code>scrub</code> という名前は zfs の修復コマンドが由来</li>
<li>CRuby のファイル一覧紹介</li>
<li>NOTE: cygwin はメンテナがいないので募集中</li>
<li><code>string.c</code> に <code>str_scrub</code> を追加</li>
<li><code>str_scrub</code> の説明</li>
<li><code>rb_str_scrub</code>, <code>rb_enc_str_scrub</code> とたどっていく</li>
<li><a href="https://bugs.ruby-lang.org/issues/7361">Feature #7361 Pathname#touch</a> reject された悪い例</li>
<li>「アクセス日時と変更日時を変更する」という機能と「空のファイルを作成する」という機能がある</li>
<li>(<code>FileUtils.touch</code> はあるのに、と思った覚えが)</li>
<li><a href="http://amzn.to/2c1vKnu">API デザインケーススタディ</a></li>
<li>LLVM の clang (llvm-gcc を含む) はほぼ gcc と同じだが違う部分があるので対応が必要だった</li>
<li>Ruby は保守的な GC なので、最適化で消されると困ることがある</li>
<li>continuation で問題が起きた (<a href="https://github.com/ruby/ruby/commit/ca227314390b75a59f718618281ab5f7dfa184c4">r34278</a>)</li>
<li>原因を調べるのが大変だった</li>
<li>Visual C++ 2015</li>
<li>Windows だとファイルとソケットの扱いが違う</li>
<li>Unix のように統一的に扱うのは C ランタイム側の機能だった</li>
<li>その中身の <code>_pioinfo</code> を直接さわっていたが、公開されなくなった</li>
<li>ヘッダーファイルに公開されなくても DLL の中にはある</li>
<li><code>_isatty</code> の機械語の <code>_pioinfo</code> を触ってるっぽい部分のアドレスをとって <code>_pioinfo</code> を探し出す</li>
<li>入れるかどうか1年ぐらい悩んだが、 VC++ 2016 でも解決しそうになかったので入れた</li>
<li>DLL の名前がデバッグ版だと違う</li>
<li>こんなダメダメなコードなのに修正のパッチを送ってくれる人がいた! OSS すごい!</li>
<li>パフォーマンス改善の話</li>
<li>NewRelic で bugs.ruby-lang.org のプロファイルが取れる</li>
<li>ボトルネックがないと最適化が難しい</li>
<li>とりあえず 0.5% の <code>String#blank?</code> を速くする</li>
<li><code>Regexp#match?</code>: <code>MatchData</code> オブジェクトを作らずにマッチするかどうかだけ判定するメソッド</li>
<li>Note: Perl も似た最適化がある</li>
<li>SSE 4.2 STTNI: 16 バイトごとに処理する</li>
<li>最後の末尾の部分で読み込めない部分を踏むと SEGV するので、末尾処理が大変</li>
<li>RubyVM を改善する話</li>
<li>Ruby の layer にボトルネックがないので C の layer で探す</li>
<li>perf-top で optcarrot や fluentd を計測</li>
<li><code>vm_exec_core</code>, <code>vm_search_method</code> が top 2</li>
<li>分岐予測</li>
<li>CPU が新しいもので比べるだけで改善</li>
<li>NOP 命令が翻訳された機械語を見ると若干無駄なことをしている</li>
<li><code>opt_plus</code></li>
<li>Fixnum + Fixnum の最適化は説明に時間がかかるので詳細は省略</li>
<li>JIT はホットスポットがないと効果がない</li>
<li>Register machine <a href="https://bugs.ruby-lang.org/issues/12589">Feature #12589</a></li>
<li>Debugging / Profiling / (メモできず)</li>
<li><a href="https://github.com/frsyuki/sigdump">frsyuki/sigdump</a> でデーモンでもシグナルでスタックダンプとか取れる</li>
<li>strace with CRuby</li>
<li>futex が並んでいるのは timer thread が切り替えようとしているだけで正常な処理なので情報がない</li>
<li>procfs での情報の取り方の説明: EIP からたどる</li>
<li>簡単にできるように <a href="https://gist.github.com/nurse/0619b6af90df140508c2">pid2line.rb</a> を作った</li>
<li>最近の Ubuntu では sudo が必要</li>
<li>SEGV: Segmentation fault</li>
<li>バグ報告するときは最初から最後まで貼り付けてください</li>
<li>C level backtrace では DWARF などのデバッグ情報を使って非公開の関数でも名前をとっている</li>
<li>core file: 情報が詰まっている</li>
<li>前提条件として Linux では Ruby の Thread が pthread の thread、さらに OS の lwp と1対1対応している話</li>
<li><code>ruby_current_vm</code> から辿れる話</li>
<li><code>.gdbinit</code> という便利スクリプトの紹介</li>
<li><code>rb_ps_thread</code></li>
<li>まとめ</li>
<li>ユースケース (現実の例) を収集しよう</li>
<li>現実のアプリケーションのボトルネックを知ろう</li>
<li>時間オーバーしているけど少しだけ質疑応答</li>
<li>質問1: パッチを送ったときに反応がない場合は?</li>
<li>matz をつつけば良い、urabe さんやなるせさんでも良い</li>
<li>開発者会議の Wiki にのせてもらえれば議論にのる</li>
<li>質問2 (ko1 さん): twitter をみているとレベルが高いので無理と思っている人がいる</li>
<li>趣味の話なのでこういう話ができないとコミッターになれないというわけではない</li>
<li>興味の分野はみんな違うので、他の人が興味がなさそうな分野が良い</li>
<li>openssl の rhe さんが良い例</li>
<li>隙間はたくさんあるのでいろいろ出すと良い</li>
<li>質問3(urabe さん): <code>.gdbinit</code> を便利に使っているが、<code>.gdbinit</code> のデバッグはどうやっている?</li>
<li>手で直している</li>
<li>akr さん: Python で書き換えるのはどうか?</li>
<li>Mac のような LLVM 環境で使えないという問題もある</li>
<li>sorah さん(?)と: GUI があって便利という話</li>
</ul>


<p>面白かったけど、みんなついていけてたんだろうかという話も。</p>

<h2>Closing</h2>

<ul>
<li>Closing の前に落し物の案内</li>
<li>(今年も参加者数のスライドとかはあったので Togetter まとめの方をみると載ってるかも)</li>
<li>来年の情報はなし</li>
</ul>


<h2>Togetter まとめ</h2>

<p>昨日のメモと同じく、<a href="http://togetter.com/li/1022255" title="資料も反響もすべてチェック！ 京都で3倍広くなった #RubyKaigi 2016 まとめまとめ - Togetterまとめ">資料も反響もすべてチェック！ 京都で3倍広くなった #RubyKaigi 2016 まとめまとめ - Togetterまとめ</a> があるので、個別のまとめへのリンクは省略しました。</p>

<h2>The RubyKaigi 2016 After Party &amp; Lightning Talks!</h2>

<p><a href="https://rubykaigi.doorkeeper.jp/events/51800" title="The RubyKaigi 2016 After Party &amp; Lightning Talks!">The RubyKaigi 2016 After Party &amp; Lightning Talks!</a> は多分スタッフの片付けの時間の都合からだと思いますが、20:15 からという遅い開始時間なので、しばらく空き時間がありました。</p>

<p>時間が足りないぐらいずっと LT をしていたので、特に懇親会的な時間はなくて、話をする人は LT を聞かずに話をしていたような感じでした。</p>

<p>トイレに行ったり飲み物のおかわりをもらいに行ったりしている間、少し聞けないものがあったぐらいで、ほぼ全て聞いていたので、話はできませんでした。</p>

<p>話の内容自体も面白いものが多くて良かったのですが、Unicode に SNOWMAN WITHOUT SNOW という文字があるとかそういう本筋と関係ないところも印象に残りました。</p>
]]></content>
  </entry>
  
</feed>
