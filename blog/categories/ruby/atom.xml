<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | ZnZ Blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2013-09-22T16:52:08+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Association Certified Ruby Programmer Gold を受けた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-21-certified-ruby.html"/>
    <updated>2013-09-21T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/certified-ruby</id>
    <content type="html"><![CDATA[<p>少し前に
Ruby技術者認定試験制度
の
Ruby Association Certified Ruby Programmer Gold
を受けてきました。</p>

<!--more-->


<p>コンピュータ試験 (CBT) で
結果はその場でわかるようになっていて、
ちゃんと合格出来ました。
Silver
は最初の CBT になっていなかった頃に受けて合格しているので、
これで
Ruby Association Certified Ruby Programmer Gold認定要件
をみたしたことになります。</p>

<p>スレッドを開始するメソッドが複数選択で選ぶようになってる問題とか、
クラス変数とか <code>private</code> とかと継承の関係とか、
普段そんな機能は使わないようなものについての仕様が再確認出来たのは
良かったです。</p>

<p>標準添付ライブラリの問題は、
あまり使わないライブラリについての問題があると困りそうだったのですが、
問題数も少なくて、
知っている範囲だったので大丈夫でした。</p>

<p>選択肢の <code>Marshal</code> の引数の説明に「ファイル」としか書いてなくて、
ファイルパスなのか、ファイルオブジェクト (IO オブジェクト) なのか
わからないとか、問題が悪くて Ruby の知識だけだと解けなくて、
この問題での言葉遣いもわからないと無理そうなのがあったのは
困りました。</p>

<p><a href="https://www.ruby-lang.org/ja/news/2013/06/30/we-retire-1-8-7/">ruby 1.8.7 は終わった</a>
ので、
対象バージョン
が
Ruby 1.8.7
の試験が終わってしまう前に受けてみておこうと言うことで受けてきましたが、
今後対象バージョンがどう変わっていくのか気になるところです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devise 3.0.3 と devise 3.1.0 で自動生成されるファイルの違い]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-18-devise30-devise31.html"/>
    <updated>2013-09-18T15:09:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/devise30-devise31</id>
    <content type="html"><![CDATA[<p><a href="https://gist.github.com/znz/6603471">devise 3.0.3 と devise 3.1.0 で自動生成されるファイルの差分</a>
をとって、バージョンアップした時に対応が必要な場所を調べました。</p>

<!--more-->


<h2>対応が必要な場所</h2>

<p>最初に結論をまとめておきます。</p>

<ul>
<li><code>config/initializers/devise.rb</code> に <code>config.secret_key</code> を追加。

<ul>
<li>これは <code>rails</code> コマンドを実行しようとした時などにエラーとどういう内容を追加すれば良いのかが出るのですぐに気付きます。</li>
</ul>
</li>
<li><code>rails generate devise:views</code> をしていたのなら

<ul>
<li><code>app/views/devise/mailer</code> の <code>token</code> 周り</li>
<li><code>app/views/devise/shared/_links.erb</code> の <code>devise_mapping.recoverable?</code> の行
の修正が必要です。</li>
</ul>
</li>
<li><code>app/models/user.rb</code> の <code>:token_authenticatable</code> の削除の検討

<ul>
<li>削除しなくても動いているので、すぐに削除する必要はなさそうですが、
<code>rails generate devise User</code> で生成される例からなくなっているので
削除を検討した方が良さそうです。</li>
</ul>
</li>
<li>データベースのテーブルの変更に追従するなら
<code>migration</code> を作って対応すれば良さそうです。</li>
</ul>


<h2>対象バージョン</h2>

<p>rails 3.2.14 との組み合わせで devise 3.0.3 と devise 3.1.0 で比較しました。
細かいバージョンは
<a href="https://gist.github.com/znz/6603471#file-bundle-list-in-devise30-txt">devise 3.0.3 の時の bundle list</a>
と
<a href="https://gist.github.com/znz/6603471#file-bundle-list-in-devise31-txt">devise 3.1.0 の時の bundle list</a>
を参照してください。</p>

<h2><code>rails generate devise:install</code> の差分</h2>

<p><code>rails generate devise:install</code> の差分のうち、
<a href="https://gist.github.com/znz/6603471#file-initializer-diff">config/initializers/devise.rb の差分</a>
は <code>"</code> から <code>'</code> への変更などもあって本質的ではない部分も多かったので、
<a href="https://gist.github.com/znz/6603471#file-initializer-tr-diff">tr で処理した差分</a>
を作ってみたところ、本質的には
<code>config.secret_key =</code>
の行の追加だけでした。</p>

<p><a href="https://gist.github.com/znz/6603471#file-locale-diff">config/locales/devise.en.yml の差分</a>
もあるので、
<code>locales</code>
のファイルも更新しておくと良さそうです。</p>

<h2><code>rails generate devise User</code> の差分</h2>

<p><code>rails generate devise User</code> の差分として、
<a href="https://gist.github.com/znz/6603471#file-devise_create_users-diff">migration の差分</a>
は
<code>sign_in_count</code> と <code>failed_attempts</code> への <code>NOT NULL</code> 制約の追加と
Token authenticatable 用の <code>authentication_token</code> の削除なので、
対応する変更をする <code>migration</code> を作って対応するか、
気にせず古いまま使えば良さそうです。</p>

<p><code>app/models/user.rb</code> からもコメントの中のモジュール例にあった
<code>token_authenticatable</code> が削除されています。</p>

<p><code>config/routes.rb</code> に追加される <code>devise_for :users</code> は同じでした。</p>

<h2><code>rails generate devise:views</code> の差分</h2>

<p><a href="https://gist.github.com/znz/6603471#file-views-diff">app/views の差分</a>
は
<code>@resource.なんとか_token</code>
だったものが
<code>@token</code>
に変わっているのと、
<code>app/views/devise/shared/_links.erb</code>
の
<code>if devise_mapping.recoverable? &amp;&amp; controller_name != 'passwords'</code>
が
<code>if devise_mapping.recoverable? &amp;&amp; controller_name != 'passwords' &amp;&amp; controller_name != 'registrations'</code>
に変わっているのが
主な変更でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[独自ビルドした ruby を rbenv で使う]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-14-use-custom-ruby-with-rbenv.html"/>
    <updated>2013-09-14T23:22:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/use-custom-ruby-with-rbenv</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sstephenson/rbenv">rbenv</a>
を使っているなら、
<a href="https://github.com/sstephenson/ruby-build">ruby-build</a>
でインストールしたもの以外にも
自分でビルドした ruby も rbenv で切り替えたくなることがありますが、
これは簡単に出来ます。</p>

<!--more-->


<p>元々 <code>rbenv</code> に <code>ruby-build</code> が必須というわけではないので、
<code>configure</code> の <code>--prefix</code> に
<code>~/.rbenv/versions/some-name</code>
を指定してインストールすれば良いだけです。</p>

<p>名前にはシェルで特別な意味を持つ文字を避ければ
何でも良さそうですが、
<code>rbenv install</code> で上書きされてしまう危険があるのと
単純に紛らわしいので、
<code>ruby-build</code> でインストール出来る名前は避けた方が無難だと思います。</p>

<p>例えば以下のように <code>configure</code> してインストールすれば <code>rbenv shell trunk</code> などで <code>ruby-build</code> でインストールしたものと同様に使えます。</p>

<ul>
<li><code>./configure --prefix=$HOME/.rbenv/versions/trunk --enable-shared --enable-debug-env CPPFLAGS=-DRUBY_DEBUG_ENV</code></li>
<li><code>./configure --prefix=$HOME/.rbenv/versions/git --enable-shared --enable-debug-env CPPFLAGS='-DRUBY_DEBUG_ENV -DARRAY_DEBUG'</code></li>
<li><code>./configure --prefix=$HOME/.rbenv/versions/git-debug --enable-shared --enable-debug-env CPPFLAGS='-DRUBY_DEBUG_ENV -DARRAY_DEBUG -DBIGDECIMAL_DEBUG'</code></li>
</ul>


<p><code>$HOME</code> を使っている理由は
<code>--prefix=~/path/to/somewhere</code>
だと <code>configure</code> の実行前には展開されず、
<code>autoconf</code> の <code>configure</code> ではなかったと思いますが、
<code>./~/path/to/somewhere</code>
にインストールされてしまうという問題が起きたことがあったので、
それ以来
<code>$HOME</code>
を使って目の前でフルパスに展開されるようにしています。</p>

<p><code>-DRUBY_DEBUG_ENV</code> などを渡すのに <code>CPPFLAGS</code> を使うのは
<a href="https://github.com/akr/chkbuild">chkbuild</a>
のやり方を
<a href="http://rubyci.org/">Ruby CI</a>
のログをみて参考にしました。</p>

<p>安定したビルドを使いたいのなら、
Ruby CI
で使われているのと同じような引数を使うのが良いと思います。</p>

<p>普段私が使っているのは
<code>CPPFLAGS='-DRUBY_DEBUG_ENV -DARRAY_DEBUG</code>
です。</p>

<p><code>-DBIGDECIMAL_DEBUG</code>
まで付けると、デバッグ出力が多すぎたり、
<code>make test-all</code>
が途中で止まってしまったりして
問題が起きそうなので、
おすすめしません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[td2planet を rubyforge から github に移行してリリース]]></title>
    <link href="http://blog.n-z.jp/blog/2013-09-12-td2planet.html"/>
    <updated>2013-09-12T22:43:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/td2planet</id>
    <content type="html"><![CDATA[<p>tDiary の日付ごとのまとまりを意識したフィードアグリゲータの td2planet を rubyforge から github に移行して、 ruby 2.0.0 対応を確認して、 0.3.0 としてリリースしました。</p>

<!--more-->


<h2>rubyforge から github への移行</h2>

<p>rubyforge は
<a href="http://rubyforge.org/scm/?group_id=3122">RubyForge: TD2Planet: SCM Repository</a>
に書いてあるように http か svn か svn+ssh でアクセス出来ますが、
今回は svn から取得したものを github に移行しました。</p>

<p>小さいレポジトリだったこともあり、手順としては以下のように単純に移行出来ました。</p>

<ol>
<li><code>git svn clone -s svn://rubyforge.org/var/svn/td2planet</code></li>
<li>github 上でレポジトリ作成</li>
<li><code>git remote add origin git@github.com:znz/td2planet.git</code></li>
<li><code>git push -u origin master</code></li>
</ol>


<h2>ruby 2.0.0 対応確認</h2>

<p>単純に README に書いてある <code>ruby -I lib bin/td2planet.rb config.yaml</code> で問題なく動きました。</p>

<p><a href="https://gist.github.com/unak/3038095">The History of Ruby</a>
によると作り始めた 2007 年はまだ 1.9.0 の開発中だったので、
その頃でも magic comment をちゃんと書いたり、
内部エンコーディングは UTF-8 に統一したりなどを
気をつけていれば、
ruby 自体の互換性は高いと言うことがわかります。</p>

<p>他には以下のような変更をしました。</p>

<ul>
<li><code>setup.rb</code> と関連する LGPL 削除など</li>
<li>README と README.ja に拡張子の <code>.rdoc</code> を追加</li>
<li>gemspec 更新

<ul>
<li>homepage を rubyforge から github に変更</li>
<li>README のファイル名変更対応</li>
<li>license 追加</li>
</ul>
</li>
<li>バージョン変更</li>
<li><code>-Ku</code> から ruby が 1.9 未満のときだけ <code>$KCODE</code> を設定に変更</li>
</ul>


<p><code>setup.rb</code> は ruby 1.9 以降に対応しているのかわからなかったのと、
ライセンスを MIT に統一するために削除しました。</p>

<h2>リリース</h2>

<p>別のリリース作業をした時に <code>~/.gem/credentials</code> は作成済みだったので、
リリースは以下の手順だけで出来ました。
<code>~/.gem/credentials</code> がまだないときは <code>gem push</code> の時に <code>rubygems.org</code> のアカウントか <code>rubyforge.org</code> のアカウントが必要になります。</p>

<ul>
<li><code>gem build *.gemspec</code></li>
<li><code>gem push *.gem</code></li>
</ul>


<p><code>
% gem build *.gemspec
  Successfully built RubyGem
  Name: td2planet
  Version: 0.3.0
  File: td2planet-0.3.0.gem
% gem push td2planet-0.3.0.gem
Pushing gem to https://rubygems.org...
Successfully registered gem: td2planet (0.3.0)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[関西Ruby会議05で migrate to magazine.rubyist.net という発表をしました]]></title>
    <link href="http://blog.n-z.jp/blog/2013-08-31-kansairubykaigi05.html"/>
    <updated>2013-08-31T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/kansairubykaigi05</id>
    <content type="html"><![CDATA[<p><a href="http://regional.rubykaigi.org/kansai05">関西Ruby会議05</a> というイベントで
「migrate to magazine.rubyist.net」というタイトルで、
<a href="http://jp.rubyist.net/magazine/">http://jp.rubyist.net/magazine/</a> から <a href="http://magazine.rubyist.net/">http://magazine.rubyist.net/</a> への移行で何をしたのか、そして何がまだ出来ていないのか、ということについて話しました。</p>

<!--more-->


<p>スライドは <a href="http://slide.rabbit-shocker.org/authors/znz/migrate-rubima-2013/">http://slide.rabbit-shocker.org/authors/znz/migrate-rubima-2013/</a> や slideshare で公開しています。
スライドのソースも <a href="https://github.com/znz/migrate-rubima-2013">https://github.com/znz/migrate-rubima-2013</a> で公開しています。</p>

<p>朝は JR の遅延の影響で開始が遅れていました。
自分の発表も20分の枠の予定だったのに、後で確認してみると25分ぐらいになってしまっていたようでした。</p>

<p>自分の発表の後は座っていたのが前の方だったり、ゆっくり聞けたりしたので、非常に楽しめました。
「じこはおこるさ」の上映があったり、スイーツタイムというおやつの時間があったのが独特な感じでした。</p>

<p>内容では、発表するのは「売名行為」で懇親会とかでのぼっちの可能性を減らすためとか「睡眠重要。寸暇を惜しんで寝る。」とかが特に印象深かったです。</p>

<h2>slideshare</h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/25754630" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/znzjp/migrate-rubima-2013" title="migrate to magazine.rubyist.net" target="_blank">migrate to magazine.rubyist.net</a> </strong> from <strong><a href="http://www.slideshare.net/znzjp" target="_blank">Kazuhiro Nishiyama</a></strong> </div></p>

<h2>Rabbit SlideShow</h2>

<iframe src="http://slide.rabbit-shocker.org/authors/znz/migrate-rubima-2013/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="http://slide.rabbit-shocker.org/authors/znz/migrate-rubima-2013/" title="migrate to magazine.rubyist.net">migrate to magazine.rubyist.net</a>
</div>

]]></content>
  </entry>
  
</feed>
