<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2016-09-09T00:30:18+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2016 の 1 日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-09-08-rubykaigi-2016.html"/>
    <updated>2016-09-08T09:49:29+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi-2016</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2016" title="RubyKaigi 2016">RubyKaigi 2016</a> の 1 日目に参加したので、そのメモです。</p>

<!--more-->


<h2>会場</h2>

<p>「<a href="https://twitter.com/a_matsuda/status/772749215000764417">スピーカーのキャンセルが出たため、初日の朝のキーノートの開始時間が50分遅くなります。</a>」という話があったため、時間に余裕を持って到着できました。</p>

<p>家を出た時は雨は降っていなかったのですが、京都では大雨でした。
(参考: <a href="https://twitter.com/kakutani/status/773680281689530368">https://twitter.com/kakutani/status/773680281689530368</a> )
駅から会場までは天井のある通路で繋がっているので、傘なしでも濡れずにたどり着けました。</p>

<p>会場は広くて、メインホールのテーブル席は全席電源つきという非常に便利な感じでした。
メインホールの座席は座ると前にずれて、立ち上がると後ろに下がる椅子でした。</p>

<h2>Opening</h2>

<ul>
<li>スタッフのうち、つじたさん、 aaron さん、デカ外人さんの紹介</li>
<li>電源が各席にある</li>
<li>メインホールはテーブル席の後ろに椅子だけの席もあるけど、そこも後ろに電源があるらしい</li>
<li>スポンサーブースにコーヒーとお菓子</li>
<li>懇親会のチケットが残り数十枚でラストチャンス</li>
</ul>


<h2>Ruby3 Typing</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/yukihiro_matz.html" title="Ruby3 Typing - RubyKaigi 2016">Ruby3 Typing - RubyKaigi 2016</a></li>
<li>日本語のキーノート</li>
<li>Ruby3</li>
<li>Performance, Concurrency, Typing</li>
<li>それぞれ Shyouhei, Ko1, Matz が話をする</li>
<li>2010s に出てきた言語は静的型言語が多い</li>
<li>静的型がないので Ruby は死んだなどと言われてしまうこともある</li>
<li>TypeScript, Flow, Go, Swift</li>
<li>Microsoft, Facebook, Google, Apple など大企業の言語</li>
<li>テクノロジー (動的型と静的型のような) は振り子のように行ったり来たりしている</li>
<li>Smalltalk → Java → Ruby・JavaScript → Swift・Go → ?</li>
<li>揺り戻しが起きた時に置いて行かれないように (静的型を目指すのではなく) 未来の動的型言語について考える</li>
<li>型とは何か?</li>
<li>学術的には型システム入門 (TAPL) とかあるけど</li>
<li>Duck typing</li>
<li>動けばいい</li>
<li><code>log(dst IO, mesg String)</code> のように静的型指定してしまうと例えば <code>StringIO</code> を渡せない</li>
<li>(スライドのトラブルが発生して、 rabbit 作者によるサポートを受けつつ rabbit を再起動してしまったので、亀がリセットされてしまった。)</li>
<li>Duck typing は内部構造を気にしなくて良い</li>
<li>Lower mental cost in development</li>
<li>Duck typing は未来に対して開かれている</li>
<li>Duck typing は柔軟性が高い</li>
<li>&ldquo;Duck&rdquo; (Ruby の型) は nominal type ではない</li>
<li>&ldquo;Duck&rdquo; は class ではない</li>
<li>&ldquo;Duck&rdquo; は何か</li>
<li>&ldquo;Duck&rdquo; は <em>expected</em> behavior (期待される振る舞い)</li>
<li>期待は私たちの頭の中にある</li>
<li>class による型はあくまでも近似 (approximation) であり足かせになる</li>
<li>Go の interface はかなり良い</li>
<li>Structual Subtyping vs Nominal Subtyping</li>
<li>Duck typing is awesome!</li>
<li>DRY (Don&rsquo;t Repeat Yourself) 原則</li>
<li>冗長性を削ろう</li>
<li>プログラムを書く時にかかなくていいものは削りたい</li>
<li>型指定がなくても ruby のプログラムは動いているので必要ない</li>
<li>むしろ積極的に外すべき</li>
<li>しかし、動的型言語には欠点 (drawback) がある</li>
<li>実行してみないとエラーがわからない</li>
<li>エラーメッセージが親切ではない</li>
<li>Coverage</li>
<li>テストし忘れた部分はいつまでも気づかれない</li>
<li>Less Documentation</li>
<li>書く人は嬉しいが、読む人は困る</li>
<li>コメント (rdoc とか) に結局 (型を) かいている</li>
<li>型は絶対に書きたくない</li>
<li>柔軟性が減るから</li>
<li>ユーザーのためにドキュメントは欲しい</li>
<li>コメントに書く</li>
<li>型アノテーションを書ける言語もある</li>
<li>型チェックを含まない型アノテーションはダメなアイデアだと思う</li>
<li>Mixed/Gradual Typing (一部だけ型指定ができる) is a bad idea</li>
<li>少なくとも Ruby にとっては。</li>
<li>ドキュメントは欲しい</li>
<li>型のある部分とない部分を混ぜたくない</li>
<li>課題があるということは改善の余地がある</li>
<li>未来の Ruby はこれをなんとかしたい</li>
<li>我々はエンジニアなので技術でなんとかしたい</li>
<li>静的型に型推論を足す</li>
<li>型推論は素晴らしい</li>
<li>静的型の柔軟性のなさは型推論とは無関係</li>
<li>静的型の柔軟性がないという問題が解決しないので別のものが必要</li>
<li>Static Typing with Duck-Typing として Go の Structual Subtyping は良い線をいっているが、 interface を書きたくない</li>
<li>そこで型推論をさせてみよう</li>
<li><code>dst should have rite()</code> を <code>dst should have write()</code> に修正 (また亀が戻った)</li>
<li>interface を振る舞いから自動生成 : Soft Typing</li>
<li>型推論された型には名前が付いていない</li>
<li>名前をつけるのは結構なコスト</li>
<li>ぼんやりとしたアイデアがぼんやりとしたアイデアのまま実現できるので、具体化する脳の労力が減る</li>
<li>100% のチェックはできないかもしれない</li>
<li>80% 程度のコンパイル時チェックでも 0% よりは良い</li>
<li>dynamic typing に fallback できる</li>
<li>ad-hoc な型情報も使えるのではないか</li>
<li>gsub, slice, map を期待した a があったとき、そんなクラスはないのでエラーにできる</li>
<li>実行時の情報も使えるのではないか</li>
<li>タイプエラーが起きるようなテストは書かないと思うので、テスト実行時の型情報をとっておいて Type Database としてとっておいて gem として一緒に配布して実行時に使えるのではないか</li>
<li>Type Database がコード補完などにも使えるのではないか</li>
<li>まだ構想段階で動いていない</li>
<li>コンセプト段階</li>
<li>Ruby3 プロジェクトの一部</li>
<li>重要なメッセージ : We Care about YOU</li>
<li>テストがあれば大丈夫という話もあるが</li>
<li>言語の方でもプログラミング体験を改善したい</li>
<li>Ruby3 はいつか? わからない</li>
<li>オープンソースソフトウェア (少なくとも Ruby) にはロードマップや締め切りはない</li>
<li>目標を作る必要が有る</li>
<li>ケネディ大統領が月に行くという少し難しい未来を宣言して、のちに実現された</li>
<li>Soft typing, Ruby3x3, Concurrency</li>
<li>心の中の目標としては次の東京オリンピックの頃には Ruby3 が出てると良いな</li>
<li>みなさんからのアイデアや貢献は大歓迎</li>
<li>前に進み続けたいから (To Keep Moving Forward)</li>
<li>前に進み続けるためにできることはなんでもしたい</li>
<li>Happy Hacking!</li>
<li>質疑応答前に 3 分ほど CM (スポンサーセッション)</li>
</ul>


<h2>Speee さん</h2>

<ul>
<li>会場アンケート 知っている人 : 6割ぐらい</li>
<li><a href="http://speee.jp/">http://speee.jp/</a></li>
<li>現在はほぼ Ruby になった</li>
<li>OSS への貢献へも増えた</li>
<li>OSS Gate workshop がよかった</li>
<li>いろいろなイベントもやっているので興味がある方は <a href="http://speee.connpass.com/">http://speee.connpass.com/</a> の「めんばーになる」</li>
</ul>


<h2>Ruby3 Typing (質疑応答)</h2>

<ul>
<li>まさかの質問なし?</li>
<li>joker1007 さん?: 型情報を全く書かずに型推論だけでできる見込みはあるのか?</li>
<li>伝統的な方法では無理</li>
<li>ad-hoc なものや実行時の型情報でそこそこ実用的なものになる可能性はある</li>
<li>まだ実際に動いているコードはないので、実際には無理でしたということで Ruby3 に入らない可能性はある</li>
<li>誰?: IDE の仕様を参考にできるか?とかいう感じの質問</li>
<li>現在は完全なものはないので参考にしづらい</li>
<li>IDE があるので言語仕様はどうでもいいんだということはしたくない</li>
<li>IDE ありきの言語に Ruby がなることはない</li>
<li>誰?: (質問はよく聞き取れず)</li>
<li>リリースマネージャーもしていない</li>
<li>言語デザイナーをしている</li>
<li>田中哲さん: 今回の話での Soft Typing という言葉の使い方は既存のアカデミックでの用語とは違うので、新しい言葉を考える必要が有るのではないか</li>
<li>Diamondback Ruby というものが昔あった (後で聞いた話によると Diamondback Ruby は速度を目的としたもので、OCaml で実装されたものだったらしい)</li>
<li>Soft Typing という用語はふさわしくないかも</li>
<li>新しい言葉を考えておきます</li>
<li><a href="http://togetter.com/li/1021897" title="&quot;型は絶対書きたくない&quot; &quot;Ruby3は東京オリンピックまでに&quot; Rubyの父Matzによる、「楽しいプログラミング体験を届けるために」 #rubykaigi 2016 Keynote - Togetterまとめ">&quot;型は絶対書きたくない&quot; &quot;Ruby3は東京オリンピックまでに&quot; Rubyの父Matzによる、「楽しいプログラミング体験を届けるために」 #rubykaigi 2016 Keynote - Togetterまとめ</a></li>
</ul>


<h2>アナウンスと Intermission</h2>

<ul>
<li>昼は弁当があるという話</li>
<li>ベジタリアン用の弁当もあるという話</li>
<li>英語で翻訳レシーバーの返却についてアナウンス?</li>
<li>dRuby の slide sponsors が流れていた</li>
</ul>


<h2>dRuby in the last century.</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/m_seki.html" title="dRuby in the last century. - RubyKaigi 2016">dRuby in the last century. - RubyKaigi 2016</a></li>
<li>自己紹介</li>
<li>前座が Matz</li>
<li>dRuby の生い立ち, dRuby の紹介, これから</li>
<li>1999 [ruby-list:15406] 1st dRuby <a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/15406">http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/15406</a></li>
<li>2005 最初の本</li>
<li>2012 (-2014 絶版) 英語の本</li>
<li>2000 Perl/Ruby Conference (Kyoto) この会場</li>
<li>同じ会場で同じ話を</li>
<li>dRuby はオーパーツ (OOPARTS) <a href="https://twitter.com/yugui/status/439412852013551616">https://twitter.com/yugui/status/439412852013551616</a></li>
<li>Before dRuby (BD)</li>
<li>BD8: プロセスをわける必然性のある組み込みシステムからの情報を集めるデーモンと情報を可視化するアプリケーション</li>
<li>BD5: CGI (マイクロサービス的) 時代</li>
<li>BD1: Ruby &amp; shttpsrv に出会う</li>
<li>HTTP を小さなアプリに埋め込んでつないで楽しんでいた</li>
<li>Ruby と Web の世界の翻訳作業が必要な点などが、なんか気に入らない</li>
<li>Ruby ぽく話したい</li>
<li>Ruby のように振舞う分散オブジェクト</li>
<li>RPC ではなく RMI</li>
<li>Ruby のメソッド呼び出しを socket で拡張</li>
<li>簡単通信ライブラリではなく、もっと情緒的な (Ruby 的な) ものをめざした</li>
<li>dRuby ってなに?</li>
<li>分散オブジェクトシステム, プロセス腰にメソッドが呼べる, プロセス間でオブジェクトが送れる</li>
<li>デモ</li>
</ul>


<p>端末1 (oso-matz) で irb を起動:</p>

<pre><code>require 'drb'
DRb.start_service('druby://localhost:54321', {})
DRb.uri
DRb.front
</code></pre>

<p>端末2 (jushi-matz) で irb を起動:</p>

<pre><code>require 'drb'
kvs = DRbObject.new_with_uri('druby://localhost:54321')
kvs['greeting'] = 'Hellow, World.'
</code></pre>

<p>端末1に戻って <code>DRb.front</code> を確認すると <code>{"greeting"=&gt;"Hellow, World."}</code> になっている。</p>

<p>Demo2: 端末2で:</p>

<pre><code>kvs['outlet'] = $stdout
</code></pre>

<p>(<code>DRb.start_service('druby://localhost:54322')</code> のようにこちら側でも <code>DRb.start_service</code> しておかないと <code>DRb::DRbConnError: DRb::DRbServerNotFound</code> になってうまくいかなかった)</p>

<p>端末1で:</p>

<pre><code>DRb.front['outlet'].class
DRb.front['outlet'].puts('Hello, Again.')
</code></pre>

<ul>
<li>なにがおきた?</li>
<li><code>$stdout</code> は <code>Marshal.dump</code> 不可能なので自動的に proxy に取り替えた</li>
<li>永遠に proxy だと値が手に入らないので境界として <code>Marshal.dump</code> を使った</li>
<li>OOP っぽさ</li>
<li>オブジェクトが相互に呼びあえること</li>
<li>block (イテレータ) も同じ仕組みで動く</li>
</ul>


<p>Demo3: Queue:</p>

<p>端末1で:
(<code>Queue</code> は最近の Ruby では本名は <code>Thread::Queue</code> に変わっていた)</p>

<pre><code>queue = Queue.new
DRb.front['queue'] = queue
queue.pop
queue.pop
</code></pre>

<p>端末2で:</p>

<pre><code>queue = kvs['queue']
queue.push(1.0)
queue.push(2.0)
</code></pre>

<ul>
<li>意図したわけではないが Thread 同期メカニズムがそのまま使えた</li>
<li>dRuby が向いている用途がある</li>
<li>Prototyping Twitter</li>
<li>初期は dRuby/Rinda だったらしい : いまは使っていない</li>
<li>自分のサービスも dRuby ではじめて最後には使わなくなることがある : 利用されて効率あげる必要がでてくるから</li>
<li>紹介のまとめ</li>
<li>これから</li>
<li>初期の実装に戻したいところがいくつか</li>
<li>セキュリティっぽいの消したい</li>
<li>ACL, insecure_method &hellip;</li>
<li>dRuby は RMI でメソッド呼び出しの拡張</li>
<li>メソッド呼び出しなので穴だらけで良い</li>
<li>危ないものは危なく見えるべき</li>
<li>UnitTest : API のメソッド単位に書くものなのに、テストケースをストーリーレベルで書くべきだと勘違いしていた</li>
<li>啓蒙する</li>
<li>まずおもしろがってもらう</li>
<li>並行処理の勘所に気づいてもらう</li>
<li>すとうさん</li>
<li>啓蒙活動に興味を持ったというのは、何か心境の変化があったのか?</li>
<li>昨年のライブラリを作れば解決するという話にいらっとした</li>
<li>miyohide さん</li>
<li>啓蒙活動には、るびまに寄稿をするのが良いという話</li>
<li><a href="http://togetter.com/li/1021932" title="突然のライブハンズオン！ 20世紀生まれの分散Ruby実装 dRuby #RubyKaigi #RubyKaigiA - Togetterまとめ">突然のライブハンズオン！ 20世紀生まれの分散Ruby実装 dRuby #RubyKaigi #RubyKaigiA - Togetterまとめ</a></li>
<li><a href="https://speakerdeck.com/m_seki/druby2016" title="dRuby2016">dRuby2016</a></li>
</ul>


<h2>Lunch Break</h2>

<ul>
<li>11:55頃から</li>
<li>弁当の写真を撮り忘れてしまった</li>
<li>食べ終わった後は会場の散策</li>
<li>懇親会のチェックインもしておいた</li>
</ul>


<h2>Who reordered my code?!</h2>

<ul>
<li>次の発表で部屋を移動するのが面倒だったのでメインホールにいた</li>
<li>英語だったのとあまりちゃんと聞けていなかったのでメモなし</li>
<li><a href="http://rubykaigi.org/2016/presentations/pitr_ch.html" title="Who reordered my code?! - RubyKaigi 2016">Who reordered my code?! - RubyKaigi 2016</a></li>
<li>質疑応答: 質問なし</li>
<li><a href="http://togetter.com/li/1021946" title="concurrent-rubyのコアコミッターが語る JRuby + Truffle 並列実行による高速化の試み #RubyKaigi #RubyKaigiA - Togetterまとめ">concurrent-rubyのコアコミッターが語る JRuby + Truffle 並列実行による高速化の試み #RubyKaigi #RubyKaigiA - Togetterまとめ</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li>プロジェクターのテストとして<a href="http://amzn.to/2bUWNxg">プログラミングElixir</a>の宣伝を表示</li>
</ul>


<h2>A proposal of new concurrency model for Ruby 3</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/ko1.html" title="A proposal of new concurrency model for Ruby 3 - RubyKaigi 2016">A proposal of new concurrency model for Ruby 3 - RubyKaigi 2016</a></li>
<li>英語で発表</li>
<li><a href="http://www.atdot.net/~ko1/activities/2016_rubykaigi.pdf">Presentation slide</a></li>
<li><a href="http://www.atdot.net/~ko1/diary/201609.html#d6">日本語 Script</a></li>
<li>Concurrent の発表が多い</li>
<li>Concurrent RubyKaigi</li>
<li>なぜみんな Concurrency 好きか?</li>
<li>なぜマルチスレッドプログラムが難しいのかと Guild という新しいアイデアの発表</li>
<li>Ruby は安全・簡単な方を選んでいる</li>
<li>data race と race condition の話</li>
<li><code>Array#concat</code> とマルチスレッドの挙動</li>
<li>マルチスレッドは難しいという話</li>
<li>ロックが不十分だとバグるし、多すぎるとパフォーマンスに悪影響</li>
<li>他の言語での知見</li>
<li>&ldquo;Guild&rdquo;</li>
<li>1個の Guild の中で同時に動く Thread は1個だけ</li>
<li>オブジェクトの共有方法などの話</li>
<li>Immutable なオブジェクトは共有可能</li>
<li>数値, Symbol, nil/true/false が徐々に frozen になっていた</li>
<li>doc/NEWS-2.0.0:  Fixnums, Bignums and Floats are frozen.</li>
<li>doc/NEWS-2.1.0:  * All symbols are now frozen.</li>
<li>doc/NEWS-2.2.0:  * nil/true/false objects are frozen. [Feature #8923]</li>
<li>&ldquo;こんなこともあろうかと&rdquo;</li>
<li>Guild の説明続き</li>
<li>パフォーマンスの話とか</li>
<li>質疑応答</li>
<li>質問1: 聞き取れず</li>
<li>質問2: Thread との違い?</li>
<li>質問3: sekiさん: <code>Array#concat</code> の問題は解決するのか? (ちゃんと聞き取れなかったので、違うかも)</li>
<li>解決しない</li>
<li>そもそもできないんだから他の方法を考えるんじゃないか</li>
<li>間違った使い方ができないような方法を考えましたという話</li>
<li>質問4: move operation がなんとか (聞き取れず)</li>
<li>move 操作はパフォーマンスのため</li>
<li>他にこういうことをやっている人がいるのでは?</li>
<li>知らない</li>
<li>質問5: たぶんグローバルデータの話</li>
<li>Ruby global data のスライドで説明</li>
<li><a href="http://togetter.com/li/1021975" title="Rubyコアコミッター笹田耕一さん解説 Ruby3のための新しい並列実行モデル Guild #RubyKaigi #RubyKaigiA - Togetterまとめ">Rubyコアコミッター笹田耕一さん解説 Ruby3のための新しい並列実行モデル Guild #RubyKaigi #RubyKaigiA - Togetterまとめ</a></li>
</ul>


<p>ささださんのプレゼンは事前に日本語 Script も公開されていたし、スライドも事前にチェックできたのでよかった。</p>

<p>セッション後の質問を受けていたのを横で聞いていたら、できるだけ 1 Guild 1 Thread で Thread の代わりに Guild を使うようになってほしいという感じらしかった。</p>

<p>スライドでは frozen になったものに Numeric と書いてあったが実際には Rational は frozen ではないのでちょっと違う。</p>

<h2>おやつ休憩</h2>

<ul>
<li>アナウンス</li>
<li>スポンサーブースにおやつがデプロイされている</li>
<li>弁当が少し残っているのでまだお腹が空いているという人はどうぞ</li>
<li>懇親会受付</li>
</ul>


<h2>Isomorphic web programming in Ruby</h2>

<ul>
<li>英語はつらいので日本語のセッションということで Room D にきました</li>
<li>Room D には電源も無線もありませんでした</li>
<li><a href="http://rubykaigi.org/2016/presentations/youchan.html" title="Isomorphic web programming in Ruby - RubyKaigi 2016">Isomorphic web programming in Ruby - RubyKaigi 2016</a></li>
<li>昨年の RubyKaigi 2015 では <a href="https://github.com/youchan/hyalite">https://github.com/youchan/hyalite</a> (React のようなものを Ruby で書ける) の話をした</li>
<li>Menilite というのを作っている</li>
<li>モデルをサーバーとクライアントで共有する</li>
<li>(内容とは関係ないけど、亀がうさぎに比べてかなり進んでいるのは、プレゼン開始時に亀の位置がすでに進んでいたからのように見えた)</li>
<li>デモ</li>
<li>silica というラッパーコマンド</li>
<li>まだ new しかサブコマンドがない</li>
<li>Sinatra と Opal を使ったコードが自動生成</li>
<li>ネットワークがつらいようなので Gemfile の github を参照しているところを path に書き換えてローカルのを参照するようにして bundle install</li>
<li>ライブコーディングは時間がなさそうだったので、あらかじめ git の branch を用意しておいた</li>
<li>しかしライブコーディングをしている</li>
<li>sinatra-activerecord を使っている</li>
<li>migration を毎回書くのは面倒なので silica でサポートしたい</li>
<li><code>git stash -u</code> でライブコーディングした変更を捨ててあらかじめ用意していたものを checkout</li>
<li>ユーザー追加、サインアップ</li>
<li>パスワードは BCrypt で暗号化</li>
<li><code>RUBY_ENGINE</code> による分岐でサーバーサイドだけの処理にする</li>
<li>signup 部分をライブコーディング</li>
<li>youchan, topsecret で signup しようとする</li>
<li><code>BCrypt</code> を typo していて error になったので <code>git stash -u</code> で捨てて、あらかじめ用意していた変更を checkout</li>
<li>時間がなくなってきたので、この後の変更もどんどん checkout しながら紹介</li>
<li>ログインしていなかったらログイン画面に飛ばす処理</li>
<li>ログイン処理</li>
<li>ユーザーごとにアクセス権を設定</li>
<li>セッションをクリアしていないので、ログインに失敗した時に前のユーザーのままだった</li>
<li>デモ終了</li>
<li>なぜ独自のモデルか</li>
<li>GUID : データベースで自動生成されるシーケンス番号の ID はクライアントから使いにくい</li>
<li>access control : すべてのデータがクライアントから見えてしまうとまずい</li>
<li><a href="http://togetter.com/li/1021990" title="このライブコーディングがすごい！ RubyでIsomorphic Webプログラミングを実現する Menilite 紹介 #RubyKaigi #RubyKaigiB - Togetterまとめ">このライブコーディングがすごい！ RubyでIsomorphic Webプログラミングを実現する Menilite 紹介 #RubyKaigi #RubyKaigiB - Togetterまとめ</a></li>
</ul>


<p>ライブコーディングがあったので、 vim を使ってるとか SKK (AquaSKK?) を使ってるとかそういうところも気になりました。</p>

<h2>Intermission</h2>

<ul>
<li>メインホールに移動した</li>
</ul>


<h2>Unifying Fixnum and Bignum into Integer</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/tanaka_akr.html" title="Unifying Fixnum and Bignum into Integer - RubyKaigi 2016">Unifying Fixnum and Bignum into Integer - RubyKaigi 2016</a></li>
<li><a href="https://bugs.ruby-lang.org/issues/12005" title="Unify Fixnum and Bignum into Integer">Unify Fixnum and Bignum into Integer</a> で提案された</li>
<li><code>Fixnum</code> や <code>Bignum</code> という定数は <code>Integer</code> を指すようになる</li>
<li><code>Fixnum</code> や <code>Bignum</code> という定数を参照しているコードでも <code>NameError</code> は起きない</li>
<li>C コードで <code>rb_cFixnum</code> や <code>rb_cBignum</code> を参照しているコードはコンパイルエラーになる</li>
<li>両対応するには <code>RUBY_INTEGER_UNIFICATION</code> マクロで分岐する</li>
<li>前提として <code>Fixnum</code> と <code>Bignum</code> とは何か</li>
<li><code>Integer</code> という抽象クラスとそれを継承した <code>Fixnum</code>　と <code>Bignum</code> というクラスがあった</li>
<li><code>1.class</code> と <code>(2**100).class</code></li>
<li>Ruby 2.4 では <code>Integer</code> だけになる</li>
<li><code>Fixnum</code> の範囲は ILP32, LLP64 (Windows など), LP64, JRuby で違った</li>
<li>portable ではないので基本的には使ってはいけない</li>
<li>Ruby には仕様がある: <a href="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=59579">ISO/IEC 30170:2012</a>, <a href="http://www.jisc.go.jp/app/pager?%23jps.JPSH0090D:JPSO0020:/JPS/JPSO0090.jsp=&amp;RKKNP_vJISJISNO=X3017">JIS X 3017:2011</a></li>
<li>Integer の範囲は unbounded</li>
<li><code>Fixnum</code> と <code>Bignum</code> の定義はしても良い</li>
<li>Ruby 2.3 も Ruby 2.4 も仕様に準拠</li>
<li>仕様の記述者は <code>Fixnum</code> と <code>Bignum</code> は実装の詳細と考えて仕様に入れなかったのではないか</li>
<li>利点</li>
<li><code>Fixnum</code> と <code>Bignum</code> を間違って使うことがなくなる</li>
<li>Ruby を勉強するのが簡単になる</li>
<li>ドキュメントもシンプルになる</li>
<li>シンプルに簡単にもっと数学的になる</li>
<li>欠点: 非互換性</li>
<li><code>Fixnum</code> の間違った使い方の例: <code>lib/rubygems/specification.rb</code>: <code>specification_version.is_a?(Fixnum)</code></li>
<li>Ruby 2.4 では間違った使い方ができなくなる</li>
<li><code>obj.is_a?(Fixnum)</code> は <code>obj.is_a?(Integer)</code> の意味になる</li>
<li>REPL で <code>1.class</code> を実行すると <code>Fixnum</code> になっていたのが <code>Integer</code> になる</li>
<li>Ruby を学ぶのが簡単になる</li>
<li>1 が integer というのは誰でも知っている</li>
<li>1 が <code>Fixnum</code> というのはほとんどの人は知らない (Lisp プログラマーを除く)</li>
<li>教える側にとっても楽になる</li>
<li>教科書がシンプルになる</li>
<li>ドキュメントもシンプルになる</li>
<li><code>Fixnum#foo</code> と <code>Bignum#foo</code> のドキュメントが重複していた</li>
<li><code>ri foo</code> も重複して出ていた</li>
<li>シンプルに簡単にもっと数学的になる</li>
<li>Ruby レベルの非互換</li>
<li><code>Fixnum</code> と <code>Bignum</code> が <code>Integer</code> を参照するようになる</li>
<li><code>NameError</code> は起きない</li>
<li><code>Fixnum == Bignum</code> が <code>true</code> になる</li>
<li><code>1.is_a?(Bignum)</code> が <code>true</code> になる</li>
<li><code>(2**100).is_a?(Fixnum)</code> が <code>true</code> になる</li>
<li><code>Fixnum</code> と <code>Bignum</code> は少なくとも Ruby 2.3 が EOL になるまで削除しない方が良いと思っている</li>
<li><code>Fixnum</code> の範囲が隠れる</li>
<li><code>test/ruby/test_integer_comb.rb</code>: <code>max = 1; max *= 2 while (max-1).class == Fixnum; FIXNUM_MAX = max/2-1</code> が Ruby 2.4 では無限ループに</li>
<li>推奨される解決策: <code>Fixnum</code> の範囲に依存しない</li>
<li>CRuby のみの推奨しない解決策: <code>require 'rbconfig/sizeof'; FIXNUM_MIN = -(1 &lt;&lt; (8 * RbConfig::SIZEOF['long'] - 2)); FIXNUM_MAX = (1 &lt;&lt; (8 * RbConfig::SIZEOF['long'] -2)) - 1</code> (<code>rbconfig/sizeof</code> は Ruby 2.1 から)</li>
<li>JRuby は知らない</li>
<li>使わない方が良いがどうしても必要ならこういう方法もあるという話</li>
<li>メタプログラミングや DSL が壊れる</li>
<li>メタプログラミング</li>
<li><code>mathn.rb</code> が <code>Fixnum</code> と <code>Bignum</code> に定義</li>
<li><code>Integer</code> だけに変更</li>
<li>activesupport <code>NumericWithFormat</code> を prepend</li>
<li><code>Integer</code> だけに変更</li>
<li>DSL</li>
<li>Sequel</li>
<li><code>add_column :column, Bignum</code></li>
<li><code>:Bignum</code> というシンボルを使うようになった</li>
<li>C レベル</li>
<li>利点: なし</li>
<li>欠点: 非互換</li>
<li>Ruby 2.3 での <code>Integer</code> の実装詳細</li>
<li>Ruby 2.4 での <code>Integer</code> の実装詳細</li>
<li>クラス階層が変わっただけ</li>
<li>拡張ライブラリの更新 : <code>rb_class_of(obj) == rb_cFixnum</code> → <code>FIXNUM_P(obj)</code> などの簡単な置き換え</li>
<li>影響のあった拡張ライブラリ : オブジェクトをダンプ/ロードするようなものがほとんどだった</li>
<li>ext/json, msgpack, syck, yajl, oj, ox, ruby-gnome2, etc.</li>
<li>Version Dependencies</li>
<li>Minor version up (1.3.2 to 1.3.3) が better</li>
<li>Major version version up (1.3.2 to 2.0.0) は pessimistic (悲観的な) version dependency <code>(~&gt; 1.3)</code> で問題が起きる</li>
<li>詳細: <a href="https://www.hsbt.org/diary/20160829.html">https://www.hsbt.org/diary/20160829.html</a></li>
<li>利点のほとんどは初心者向け</li>
<li>経験を積んだ Ruby プログラマーには大きな問題ではない</li>
<li>バージョンの非互換の問題</li>
<li>コミッターは具体的にどう支持していたのかという話</li>
<li><a href="http://togetter.com/li/1022003" title="Rubyコミッターが語る Ruby2.4にてFixnumとBignumをIntergerに統合する話 #RubyKaigi #RubyKaigiA - Togetterまとめ">Rubyコミッターが語る Ruby2.4にてFixnumとBignumをIntergerに統合する話 #RubyKaigi #RubyKaigiA - Togetterまとめ</a></li>
<li>発表資料: <a href="http://www.a-k-r.org/d/2016-09.html#a2016_09_08_1">http://www.a-k-r.org/d/2016-09.html#a2016_09_08_1</a></li>
</ul>


<h3>gem の Ruby 本体のバージョン依存関連</h3>

<p>Togetterまとめ によると <a href="http://sue445.hatenablog.com/entry/2016/09/02/121047" title="gemspecにRUBY_VERSIONによるif文書くのは意味がないので今すぐやめるべき">gemspecにRUBY_VERSIONによるif文書くのは意味がないので今すぐやめるべき</a> という話もあるみたいです。</p>

<p>watch している gem だと <a href="https://github.com/sj26/mailcatcher" title="MailCatcher">MailCatcher</a> が間接的に依存している <code>mime-types</code> が 3 になったときに Ruby 2.0 以上が必須になって問題が起きていたということがありました。</p>

<h2>Intermission</h2>

<ul>
<li>そのままメインホールにいた</li>
</ul>


<h2>Ups and Downs of Ruby Internationalization</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/duerst.html" title="Ups and Downs of Ruby Internationalization - RubyKaigi 2016">Ups and Downs of Ruby Internationalization - RubyKaigi 2016</a></li>
<li>会場アンケート</li>
<li>A-Z 以外の文字を使っている人</li>
<li>US-ASCII 以外を使っている人</li>
<li>UTF-8 以外を使っている人</li>
<li>Ruby のバージョンと Unicode のバージョン</li>
<li>2014: 2.2 7.0.0</li>
<li>2015: 2.3 8.0.0</li>
<li>2016: 2.4 9.0.0</li>
<li><code>upcase</code>, <code>downcase</code>, <code>capitalize</code>, <code>swapcase</code></li>
<li>Ruby 2.3 では US-ASCII 以外の範囲は変換しなかった</li>
<li>Ruby 2.4 では他の文字も変換する</li>
<li>使用例</li>
<li>互換性がない変更が入っているので preview で早めにチェックしてほしいという話</li>
<li>US-ASCII の範囲に限定したい時は <code>upcase :ascii</code> など</li>
<li>変換用データは Unicode から</li>
<li>文字数は保存されない</li>
<li>不可逆</li>
<li>コンテキスト依存</li>
<li>特殊な場合: <code>upcase :turkic</code> の話</li>
<li>特殊な場合: <code>upcase :lithuanian</code> の話</li>
<li>特殊な場合: Case folding (大小畳込み) <code>downcase :fold</code></li>
<li>特殊な場合: Titlecase <code>capitalize</code></li>
<li>実装詳細の話</li>
<li>簡単だがとても大きな <code>tr</code> のようなもの</li>
<li><code>string.c:sym_upcase</code>: <code>String#upcase</code> 相当を呼んでいる</li>
<li><code>string.c:rb_string_upcase</code>: <code>dup.upcase!</code> 相当</li>
<li><code>string.c:rb_string_upcase_bang</code>: 実際の変換をしているのはここ</li>
<li><code>OnigCaseFoldType</code> で変換の種類が決まっている</li>
<li><code>string.c:rb_str_casemap</code></li>
<li>UTF-8 以外の encoding に対応する primitive の話</li>
<li><code>Shift_JIS</code> などの対応は不要?</li>
<li>Oniguruma/Onigmo は folding のデータを持っているので再利用(?)</li>
<li><code>enc/unicode/data/9.0.0/casefold.h</code> の話</li>
<li><code>swapcase</code> は誰も使っていない?</li>
<li>会場に聞いてみると誰も使っていない感じだった。</li>
<li>大文字小文字の合成文字で問題がある</li>
<li>Test-Driven Development</li>
<li>Data-Driven Testing</li>
<li>Character Properties</li>
<li><code>Regexp</code> でほとんど可能</li>
<li>ある文字の script を得るのは不可能</li>
<li>Unicode Normalization</li>
<li>Ruby 2.2 から <code>'string'.unicode_normalize :nfkc</code> がある</li>
<li><a href="http://www.sw.it.aoyama.ac.jp/2016/pub/RubyKaigi/">http://www.sw.it.aoyama.ac.jp/2016/pub/RubyKaigi/</a> と最後に出ていたようだけどまだ公開されていない?</li>
<li><a href="http://togetter.com/li/1022019" title="&quot;Who has used swapcase?&quot; Rubyにおける国際化機能のかなしみ #RubyKaigi #RubyKaigiA - Togetterまとめ">&quot;Who has used swapcase?&quot; Rubyにおける国際化機能のかなしみ #RubyKaigi #RubyKaigiA - Togetterまとめ</a></li>
</ul>


<p>具体例に出てくる文字が入力できないし、英語も聞き取れないしで、あんまりメモが取れなかったです。</p>

<h2>見ていなかったセッションなどの Togetter まとめ</h2>

<ul>
<li><a href="http://togetter.com/li/1021880" title="&quot;この悪天候… 最高のカンファレンス日和！&quot; &quot;会場広い！&quot; &quot;Wi-Fiはやくきてくれーっ！&quot; #RubyKaigi 2016 オープニングまで - Togetterまとめ">&quot;この悪天候… 最高のカンファレンス日和！&quot; &quot;会場広い！&quot; &quot;Wi-Fiはやくきてくれーっ！&quot; #RubyKaigi 2016 オープニングまで - Togetterまとめ</a></li>
<li><a href="http://togetter.com/li/1021901" title="Ruby on Erlang！！！ errubyの紹介 #RubyKaigi #RubyKaigiB - Togetterまとめ">Ruby on Erlang！！！ errubyの紹介 #RubyKaigi #RubyKaigiB - Togetterまとめ</a></li>
<li><a href="http://togetter.com/li/1021953" title="DSLで記述できるmRuby製コンテナ haconiwa ！ その開発動機とは #RubyKaigi #RubyKaigiB - Togetterまとめ">DSLで記述できるmRuby製コンテナ haconiwa ！ その開発動機とは #RubyKaigi #RubyKaigiB - Togetterまとめ</a></li>
<li><a href="http://togetter.com/li/1021974" title="【Unityちゃん】らくらくシェーダコーディング！ mrubyで実装するGLSLジェネレータ #RubyKaigi #RubyKaigiB - Togetterまとめ">【Unityちゃん】らくらくシェーダコーディング！ mrubyで実装するGLSLジェネレータ #RubyKaigi #RubyKaigiB - Togetterまとめ</a></li>
<li><a href="http://togetter.com/li/1021993" title="JRubyにおけるString実装高速化 Rope 紹介 #RubyKaigi #RubyKaigiA - Togetterまとめ">JRubyにおけるString実装高速化 Rope 紹介 #RubyKaigi #RubyKaigiA - Togetterまとめ</a></li>
<li><a href="http://togetter.com/li/1022009" title="Windows環境にて如何にしてマルチプロセスサーバを実現するか fluentd・ServerEngine実装の紹介 #RubyKaigi #RubyKaigiB - Togetterまとめ">Windows環境にて如何にしてマルチプロセスサーバを実現するか fluentd・ServerEngine実装の紹介 #RubyKaigi #RubyKaigiB - Togetterまとめ</a></li>
<li><a href="http://togetter.com/li/1022022" title="【超満員】クックパッド導入事例 Dockerでスケールするジョブキューシステム【登壇者混乱】 #RubyKaigi #RubyKaigiB - Togetterまとめ">【超満員】クックパッド導入事例 Dockerでスケールするジョブキューシステム【登壇者混乱】 #RubyKaigi #RubyKaigiB - Togetterまとめ</a></li>
</ul>


<h2>懇親会</h2>

<p>同じ国立京都国際会館の中のさくらフロアで RubyKaigi 2016 Official Party がありました。</p>

<p>ほとんど<a href="https://github.com/rurema">るりま</a>関連の話をしていただけで終わってしまった感じでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[require './file'とrequire_relative 'file'の違い]]></title>
    <link href="http://blog.n-z.jp/blog/2016-07-26-require-relative.html"/>
    <updated>2016-07-26T21:16:07+09:00</updated>
    <id>http://blog.n-z.jp/blog/require-relative</id>
    <content type="html"><![CDATA[<p>最近 Debian の Perl が <code>CVE-2016-1238</code> (<a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=588017" title="#588017">#588017</a>) で更新されました。
似たような変更は Ruby だと <a href="https://www.ruby-lang.org/ja/news/2010/08/18/ruby-1-9-2-is-released/">1.9.2 から <code>.</code> が <code>$:</code> (<code>$LOAD_PATH</code>) から削除された</a>ということがありました。
そして、明記はされていませんが <code>require_relative</code> が推奨されるようになったようです。</p>

<!--more-->


<h2><code>require './file'</code> と <code>require_relative 'file'</code> の違い</h2>

<p><code>/var/tmp</code> と <code>/tmp</code> に確認用のファイルを以下のように準備して実行してみました。</p>

<pre><code>$ head main.rb require.rb require_relative.rb /tmp/require.rb /tmp/require_relative.rb
==&gt; main.rb &lt;==
require './require'
require_relative 'require_relative'

==&gt; require.rb &lt;==
p __FILE__

==&gt; require_relative.rb &lt;==
p __FILE__

==&gt; /tmp/require.rb &lt;==
p __FILE__

==&gt; /tmp/require_relative.rb &lt;==
p __FILE__
$ ruby main.rb
"/var/tmp/require.rb"
"/var/tmp/require_relative.rb"
$ cd /tmp
$ ruby /var/tmp/main.rb
"/tmp/require.rb"
"/var/tmp/require_relative.rb"
</code></pre>

<p>結果を見ればわかるように <code>require './file'</code> はカレントディレクトリがどこなのかの影響を受けます。</p>

<p>このような書き方を使っていると <code>$LOAD_PATH</code> から <code>.</code> が取り除かれていても (Windows の) DLL hijacking vulnerability のような脆弱性の原因になるため、
<code>require_relative</code> を使う方が望ましいということになります。</p>

<h2>require_relative の歴史</h2>

<p>いつから使えるようになったのか調べたので、ついでにメモしておきます。</p>

<ul>
<li>ruby 1.9.0-1 で <code>lib/require_relative.rb</code> が追加され、 <code>require 'require_relative'</code> すれば <code>require_relative</code> が使えるようになる。</li>
<li>ruby 1.9.0-2 で <code>lib/require_relative.rb</code> から <code>prelude.rb</code> (ruby 本体に組み込まれて実行開始時に自動実行されるファイル) に移動して <code>require 'require_relative'</code> なしで <code>require_relative</code> が使えるようになる。</li>
<li>ruby 1.9.2 で <code>doc/NEWS</code> に <code>Kernel#require_relative</code> が載る。 <code>require_relative</code> が <code>prelude.rb</code> から C 実装に置き換えられる。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第72回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-05-07-rubykansai72.html"/>
    <updated>2016-05-07T13:42:09+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai72</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/43253" title="第72回 Ruby関西 勉強会">第72回 Ruby関西 勉強会</a>
に参加しました。
アプローズタワーというビルに入るのは初めてだったので、どこから上に上がるのか、ちょっとわかりにくかったです。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>オープニング</h2>

<ul>
<li>会場説明</li>
<li>懇親会は事前に企画していなかったので 15 時ぐらいまでに受付で募集してその状況次第で決定</li>
<li>スポンサーセッション (西谷さん)</li>
</ul>


<h2>低レイヤから考えるrubyプログラミング</h2>

<ul>
<li>よしだあつしさん</li>
<li>自己紹介は時間がないので省略して後で</li>
<li>メモリ上のクラスやオブジェクト</li>
<li>RClass 構造体や RObject 構造体などの説明</li>
<li>ruby のメモリ利用の例</li>
<li>メソッド呼び出し</li>
<li>下のレイヤーを勉強すると理解が深まる</li>
<li>時間があったので自己紹介</li>
<li><a href="https://twitter.com/yalab">https://twitter.com/yalab</a></li>
<li><a href="http://shop.oke-ya.com/">http://shop.oke-ya.com/</a></li>
<li><a href="https://www.makuake.com/project/oke-ya/">https://www.makuake.com/project/oke-ya/</a></li>
<li><a href="https://github.com/yalab">https://github.com/yalab</a></li>
<li><a href="http://www.slideshare.net/yalab/ruby-61765227">低レイヤから見たrubyプログラミング</a></li>
</ul>


<h2>Wakayama.rb発のmrubyボード「GR-CITRUS」の使い方</h2>

<ul>
<li>Wakayama.rb のたろサさん</li>
<li>今は Mac や Windows 8, 10 で動かないので Windows 7 でしか動かない状態 (シリアルのドライバーの問題)</li>
<li>Wakayama.rb の活動報告</li>
<li>GR-CITRUS</li>
<li>ピンク色の基盤</li>
<li>GR = がじぇっとるねさす</li>
<li>CITRUS (シトラス) = 和歌山っぽい名前</li>
<li>秋月電子通商販売予定 (8 月)</li>
<li>GR-CITRUS の使い方</li>
<li><a href="https://github.com/wakayamarb/wrbb-v2lib-firm">https://github.com/wakayamarb/wrbb-v2lib-firm</a></li>
<li>firmware/citrus_sketch.bin を書き込む</li>
<li>開発環境 Rubic</li>
<li>chrome アプリなので簡単インストール</li>
<li>GR-CITRUS のライブラリ紹介</li>
<li>動作デモ</li>
<li><a href="http://www.slideshare.net/MinaoYamamoto/grcitrusruby">GR-CITRUS搭載のRubyファームウェアの説明</a></li>
<li>WA-MIKAN (みかんボード)</li>
<li>WiFi 通信ボード</li>
<li>Linux では動くかどうか試してないのでわからない</li>
</ul>


<h2>休憩</h2>

<ul>
<li><a href="http://railsgirls.com/osaka">Rails Girls Osaka #3</a> 2016年6月18日-19日</li>
<li><a href="http://rubykaigi.org/2016">RubyKaigi 2016</a> 2016年9月8日(木)-10日(土)</li>
</ul>


<h2>今すぐRailsアプリを多言語化してみよう</h2>

<ul>
<li><a href="https://twitter.com/youcune">https://twitter.com/youcune</a></li>
<li><a href="https://youcune.com/">https://youcune.com/</a></li>
<li><a href="http://yurie.sexy">http://yurie.sexy</a></li>
<li><a href="http://ur3.jp/yurie-blog">http://ur3.jp/yurie-blog</a></li>
<li><a href="https://speakerdeck.com/youcune/i18n-your-rails-application">いますぐRailsアプリを英語化してみよう / i18n your Rails application</a></li>
</ul>


<h2>Ruby on Rails もくもく会をほぼ毎週開催してきてわかった事</h2>

<ul>
<li>八木さん</li>
<li>もくもく会開催の経緯</li>
<li>感じたこと</li>
<li>起こったこと</li>
<li>みんなピザが好き</li>
<li>今後やっていきたいこと</li>
<li>なぜ?</li>
<li><a href="https://sou-meetup.doorkeeper.jp/">https://sou-meetup.doorkeeper.jp/</a></li>
</ul>


<h2>Github Pages で独自ドメインのサイトを作る</h2>

<ul>
<li>HDMI で接続できなかったので画面を OHP でうつして表示</li>
<li><a href="https://twitter.com/107steps">https://twitter.com/107steps</a></li>
<li><a href="https://ruby-maizuru.doorkeeper.jp/">Ruby舞鶴</a></li>
<li>Jekyll</li>
<li><a href="https://pages.github.com/">GitHub Pages</a></li>
<li>Google Analytics</li>
<li><a href="https://github.com/masoo/masoo.jp/blob/master/_config.yml#L8"><code>_config.yml</code></a> に変数を作り true の時だけ<a href="https://github.com/masoo/masoo.jp/blob/master/_includes/google_analytics.html">有効にした</a></li>
<li>Cloudflare の導入</li>
<li><a href="https://gtmetrix.com/">https://gtmetrix.com/</a> で B 判定が A 判定に</li>
<li>https 導入</li>
<li>Cloudflare で <a href="https://support.cloudflare.com/hc/en-us/articles/200170416-What-do-the-SSL-options-mean-">flexible SSL</a></li>
<li>Accelerated Mobile Page の対応 (失敗)</li>
<li><a href="https://github.com/juusaw/amp-jekyll">https://github.com/juusaw/amp-jekyll</a></li>
<li><a href="https://jekyllrb.com/docs/plugins/">https://jekyllrb.com/docs/plugins/</a></li>
<li><a href="http://gosyujin.github.io/2013/05/21/jekyll-plugin-githubpages/">GitHub PagesでJekyllプラグインを使えるようにするには…</a></li>
<li><a href="http://107steps.la.coocan.jp/">http://107steps.la.coocan.jp/</a></li>
<li>質疑応答</li>
<li>jekyll の <code>--config</code> オプションで <code>_config.yml</code> の設定を上書き設定できるのを使うのが良いのでは。</li>
<li>jekyll, middleman, Hugo などがある中で jekyll を選んだ理由は?</li>
<li>最初に見かけたのが jekyll だったから</li>
<li>発表資料: <a href="http://www.slideshare.net/107steps/github-pages-61765408">Github pagesで独自ドメインのサイトを作る</a></li>
</ul>


<h2>関西Rubyコミュニティー紹介</h2>

<ul>
<li><a href="https://twitter.com/ogomr">ogomr さん</a></li>
<li><a href="http://rubykansai.github.io/kansai-ruby-community/" title="関西 Ruby コミュニティー 紹介">関西 Ruby コミュニティー 紹介</a></li>
<li><a href="https://github.com/ruby-no-kai/official/wiki/RegionalRubyistMeetUp" title="地域Rubyの会">地域Rubyの会</a></li>
</ul>


<h2>Ruby 初級者向けレッスン - 文字列</h2>

<ul>
<li><a href="https://github.com/higaki/learn_ruby_kansai_72">https://github.com/higaki/learn_ruby_kansai_72</a></li>
</ul>


<h2>クロージング</h2>

<ul>
<li><a href="http://railsgirls.com/osaka">Rails Girls Osaka #3</a> 2016年6月18日-19日</li>
<li><a href="http://rubykaigi.org/2016">RubyKaigi 2016</a> 2016年9月8日(木)-10日(土)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devise で電子メールアドレスのドメイン部分を省略してもログインできるようにする]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-13-devise-default-domain.html"/>
    <updated>2016-04-13T21:29:43+09:00</updated>
    <id>http://blog.n-z.jp/blog/devise-default-domain</id>
    <content type="html"><![CDATA[<p>社内向けアプリケーションのように、特定のドメインのユーザーがほとんどの場合、メールアドレスの全体を入力させるのは、余計な手間をしいていることが多いです。</p>

<p>そこで省略可能にするように変更しました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ruby 2.2.4</li>
<li>rails 4.2.6</li>
<li>devise 3.5.6</li>
<li>warden 1.2.6</li>
</ul>


<h2>config/initializers/devise.rb での設定</h2>

<p>直接は関係ないですが、 <code>config/initializers/devise.rb</code> では以下のような感じの設定でユーザー登録できるメールアドレスのドメインを制限しています。</p>

<p>特殊用途に別ドメインのユーザーを登録する必要があったので、そこは <code>|</code> (or) で繋げて許可しています。</p>

<pre><code class="ruby config/initializers/devise.rb">  config.email_regexp = /\A[\w+\-.]+@example\.co\.jp\z\|\Aspecial@example\.com\z/i
</code></pre>

<h2>User クラスへの追加</h2>

<p><a href="https://github.com/plataformatec/devise/wiki/How-To:-Allow-users-to-sign-in-using-their-username-or-email-address">How To: Allow users to sign in using their username or email address</a> を参考にして <code>User.find_first_by_auth_conditions(warden_conditions)</code> を定義すれば良いということがわかったので、以下のように定義しました。</p>

<pre><code class="ruby app/models/user.rb">  def self.find_for_database_authentication(warden_conditions)
    if /@/ =~ warden_conditions[:email]
      super
    else
      super(warden_conditions.merge(email: "#{warden_conditions[:email]}@example.co.jp"))
    end
  end
</code></pre>

<p>メールアドレス全体が入力された時 (<code>@</code> を含む時) はデフォルトの挙動をそのまま使い、省略された時はデフォルトのドメイン (例では <code>example.co.jp</code>) を補ってデフォルトの挙動を呼び出すようにしました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[aasm 4.10.0 の警告に monkey patch で対処した]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-12-aasm-warn.html"/>
    <updated>2016-04-12T22:08:11+09:00</updated>
    <id>http://blog.n-z.jp/blog/aasm-warn</id>
    <content type="html"><![CDATA[<p>aasm を 4.10.0 にあげると <code>Job: overriding method 'sleeping?'!</code> のような警告が出るようになってしまい、<a href="https://github.com/aasm/aasm/issues/347">Warning when specifing states at ActiveRecord enum</a> で報告されているものの、まだ何も対応されていないので、とりあえず monkey patch で対処することにしました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ruby 2.2.4</li>
<li>rails 4.2.6</li>
<li>aasm 4.10.0</li>
</ul>


<h2>対処方針</h2>

<p>モデルごとに対応するのは面倒なことになるので、 Rails 5 で導入される予定の <code>ApplicationRecord</code> に対応して、そこに対処を入れることにしました。</p>

<h2>ApplicationRecord 対応</h2>

<p>まず <code>sed -i~ -e 's/ActiveRecord::Base/ApplicationRecord/' app/models/*.rb</code> などで継承元を <code>ActiveRecord::Base</code> から <code>ApplicationRecord</code> に書き換えます。
(実際には <code>application_record.rb</code> の作成後にやってしまって <code>RuntimeError: Circular dependency detected while autoloading constant ApplicationRecord</code> になってしまったので、 <code>application_record.rb</code> だけ元に戻しました。)</p>

<p>次に以下の内容で <code>app/models/application_record.rb</code> を作成します。</p>

<pre><code class="ruby app/models/application_record.rb">class ApplicationRecord &lt; ActiveRecord::Base
  self.abstract_class = true
end
</code></pre>

<p>テスト実行などで影響がないことを確認します。</p>

<h2>monkey patch</h2>

<p>aasm の README に書いてあるように</p>

<pre><code class="ruby app/models/job.rb">class Job &lt; ApplicationRecord
  include AASM

  enum state: {
    sleeping: 5,
    running: 99
  }

  aasm :column =&gt; :state, :enum =&gt; true do
    state :sleeping, :initial =&gt; true
    state :running
  end
end
</code></pre>

<p>のようなハッシュを使った <code>enum</code> 呼び出ししかしていなかった (<code>enum status: [ :active, :archived ]</code> のような配列を使った呼び出しはしていなかった) ので、以下のように <code>each_value</code> と <code>each_key</code> の組み合わせ決め打ちで <code>undef_method</code> を呼び出すことにしました。</p>

<pre><code class="ruby app/models/application_record.rb">class ApplicationRecord &lt; ActiveRecord::Base
  self.abstract_class = true

  if AASM::VERSION == '4.10.0'
    def self.enum(definitions)
      super
      definitions.each_value do |statuses|
        statuses.each_key do |key|
          undef_method "#{key}?"
        end
      end
    end
  end
end
</code></pre>

<p><code>ActiveRecord::Enum</code> では <code>enum</code> を呼び出したクラスに直接 <code>sleeping?</code> などのメソッドを定義するのではなく、無名モジュールに定義されているので、 <code>remove_method</code> ではなく <code>undef_method</code> を使う必要がありました。
(<code>aasm</code> は <code>aasm</code> を呼び出したクラスに直接定義していました。)</p>

<h2>今後の予定</h2>

<p>将来のバージョンでどう挙動が変わるのかわからないので、バージョン番号決め打ちで monkey patch をあてていて、バージョンアップで問題が再発するようならバージョン番号を更新、解決するようなら monkey patch を削除しようと思っています。</p>
]]></content>
  </entry>
  
</feed>
