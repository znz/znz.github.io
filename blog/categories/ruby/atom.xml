<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-06-14T12:11:20+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[fluentd に drb で接続してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-13-fluentd-drb.html"/>
    <updated>2014-06-13T22:41:08+09:00</updated>
    <id>http://blog.n-z.jp/blog/fluentd-drb</id>
    <content type="html"><![CDATA[<p>druby の口が公開されていたら、そのユーザーの権限で何でも実行できるはず、
ということで、ちょっと試してみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li><code>ruby</code> 2.1.2</li>
<li><code>fluentd</code> 0.10.49</li>
</ul>


<h2>環境の準備</h2>

<p>vagrant 上で rbenv と ruby-build を使ってインストールした ruby 2.1.2 で</p>

<ul>
<li><code>gem install fluentd</code></li>
<li><code>fluentd --setup /vagrant/fluent</code></li>
<li><code>fluentd -c /vagrant/fluent/fluent.conf &amp;</code></li>
</ul>


<p>と起動して準備しておきました。</p>

<h2>実行例</h2>

<p><code>irb</code> を起動しているユーザーと同じユーザーで <code>fluentd</code> も起動しているので、
特に面白いことはできそうになかったのですが、
<code>/proc/$$/cmdline</code> を確認すると <code>irb</code> 側ではなく、
ちゃんと <code>fluentd</code> 側で任意のコマンドが実行できていることがわかります。</p>

<pre><code>vagrant@fluentd-vm:~$ rbenv exec irb -r irb/completion --simple-prompt
&gt;&gt; require 'drb'
=&gt; true
&gt;&gt; d = DRbObject.new_with_uri('druby://127.0.0.1:24230'); nil
=&gt; nil
&gt;&gt; d.method_missing(:send, :eval, "`id`")
=&gt; "uid=1000(vagrant) gid=1000(vagrant) groups=1000(vagrant)\n"
&gt;&gt; d.method_missing(:send, :eval, '`cat /proc/$PPID/cmdline`')
=&gt; "/opt/rbenv/versions/2.1.2/bin/ruby\x00/opt/rbenv/versions/2.1.2/bin/fluentd\x00-c\x00/vagrant/fluent/fluent.conf\x00"
</code></pre>

<h2>雑感</h2>

<p><code>root</code> 権限で起動しているなら <code>debug_agent</code> は有効にしない方が良さそうだし、
ローカルユーザーが <code>fluentd</code> の実行ユーザーの権限を使えるとまずい場合も有効にしない方が良さそうだと思いました。</p>

<p>また、知っている人には当たり前のことですが、
<code>drb</code> は外部に安全に公開できるものではないので、
使う場合も <code>localhost</code> だけ待ち受けるように制限すべきです。</p>

<p>td-agent は初期設定でそうなっているのですが、
<code>fluentd --setup</code> はそうなっていないので、
適切に設定を変更するなり firewall で塞ぐなりしておく必要がありそうです。</p>

<h2>td-agent 1.1.19-1 での初期設定</h2>

<p><code>127.0.0.1</code> だけで待ち受けるようになっていました。</p>

<pre><code>## live debugging agent
&lt;source&gt;
  type debug_agent
  bind 127.0.0.1
  port 24230
&lt;/source&gt;
</code></pre>

<h2><code>fluentd --setup</code> で生成される設定</h2>

<p>外からも受けつけるようになっていました。</p>

<pre><code># Listen DRb for debug
&lt;source&gt;
  type debug_agent
  port 24230
&lt;/source&gt;
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://docs.ruby-lang.org/ja/2.1.0/library/drb.html">るりま の DRb</a> のセキュリティ</li>
<li><a href="http://docs.ruby-lang.org/en/2.1.0/DRb.html#module-DRb-label-Security">RDoc の DRb の Security の説明</a> (英語)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ci_reporter から rspec_junit_formatter に移行した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-13-ci-reporter-to-rspec-junit-formatter.html"/>
    <updated>2014-06-13T22:33:12+09:00</updated>
    <id>http://blog.n-z.jp/blog/ci-reporter-to-rspec-junit-formatter</id>
    <content type="html"><![CDATA[<p>rspec 2 から rpsec 3 への移行で <code>ci_reporter</code> がうまく動かなくなって困っていたら、
<code>rspec_junit_formatter</code> というのを<a href="https://twitter.com/joker1007/status/477372843601055744">教えてもらった</a>ので、
移行してみました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li><code>ruby</code> 2.1.2</li>
<li><code>rails</code> 3.2.18</li>
<li><code>rspec-rails</code> 3.0.1</li>
<li><code>rspec_junit_formatter</code> 0.2.0</li>
</ul>


<h2>Gemfile の変更</h2>

<p><code>group :test</code> の <code>gem 'ci_reporter', require: false</code> を <code>gem 'rspec_junit_formatter'</code> に変更しました。</p>

<h2>jenkins で実行しているシェルスクリプトの変更</h2>

<p><code>bundle exec rake -f $(bundle show ci_reporter)/stub.rake ci:setup:rspec default SPEC_OPTS=--no-drb COVERAGE=on</code>
のように実行していたのを</p>

<p><code>
rm -rf spec/reports
cat &gt;.rspec &lt;&lt;EOF
--format RspecJunitFormatter
--out spec/reports/rspec.xml
EOF
bundle exec rake COVERAGE=on
</code></p>

<p>に変更しました。
<code>spec/reports</code> は自動で作成してくれるようで、事前に作成しておく必要はないようです。
<code>ci_reporter</code> はタスクの最初の方で <code>spec/reports</code> を削除していたので、同様に削除するようにしました。</p>

<p><code>COVERAGE=on</code> は <code>simplecov</code>, <code>simplecov-rcov</code> を有効にするかどうかのフラグとして使っているので今回の移行とは無関係です。</p>

<p><a href="https://github.com/sj26/rspec_junit_formatter">RSpec JUnit Formatter の README</a> に書いてある
<code>rspec --format RspecJunitFormatter --out rspec.xml</code>
という実行方法だとテスト用データベースの初期化関連で問題がおきたので、
<code>rspec</code> コマンド直接ではなく <code>rake</code> コマンドのデフォルトタスクで実行するために、
<code>.rspec</code> ファイルを書き換えるようにしました。
<code>SPEC_OPTS</code> で指定する方法でも良かったかもしれません。</p>

<h2>Jenkins の設定</h2>

<p><code>ci_reporter</code> の設定のときに
<code>ビルド後の処理</code> で <code>JUnitテスト結果の集計</code> を追加していて、
<code>テスト結果XML</code> は <code>spec/reports/**/*.xml</code> という設定にしていて、
<code>RspecJunitFormatter</code> の出力先の方をそちらにあわせたので、
Jenkins 側の設定は変更していません。</p>

<h2>テスト結果</h2>

<p>Jenkins のテスト結果の表示では <code>spec.controllers</code> や <code>spec.models</code> などがパッケージになっていました。</p>

<p><code>spec/support/*.rb</code> で <code>shared_examples</code> を定義していたら、
<code>spec.support</code> がパッケージになってしまっているのが気になりましたが、
<code>ci_reporter</code> のときはほぼすべてが <code>(root)</code> というパッケージになっていたのに比べると
便利になったように思います。</p>

<h2><code>RSpec::Core::DeprecationError</code></h2>

<p><code>RSpec.configure do |config|</code> で <code>config.raise_errors_for_deprecations!</code> を実行していると</p>

<pre><code>.../gems/rspec-core-3.0.1/lib/rspec/core/formatters/deprecation_formatter.rb:186:in `puts': Treating `metadata[:execution_result]` as a hash is deprecated. Use the attributes methods to access the data instead. Called from .../rspec_junit_formatter-0.2.0/lib/rspec_junit_formatter/rspec3.rb:43:in `result_of'. (RSpec::Core::DeprecationError)`
</code></pre>

<p>というエラーになったので、
<code>config.raise_errors_for_deprecations!</code>
を外しました。</p>

<p><a href="https://github.com/sj26/rspec_junit_formatter/commit/96f0115f7dabbea623f04b60dc23519683f39cfa">github の master では直っている</a>ので、次のバージョンがリリースされたら解決しそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 11 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-28-rubymotion-mokumoku-osaka.html"/>
    <updated>2014-05-28T19:38:39+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku-osaka</id>
    <content type="html"><![CDATA[<p>第 1 回から第 10 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://connpass.com/event/6116/">第 11 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。</p>

<p>次回の
<a href="http://connpass.com/event/6666/">第 12 回 RubyMotion もくもく会 in Osaka</a>
は 06/20(金) になりました。</p>

<!--more-->


<h2>メモ</h2>

<ul>
<li><code>gem 'ib'</code> と Auto Layout</li>
<li><a href="http://kojisatoapp.blogspot.jp/2014/03/admobnendiadadmob.html">アプリで飯を食う: AdMobメディエーションで広告(Nend,iAd,AdMob)を切り替える方法</a></li>
<li><code>usingSpringWithDamping</code></li>
<li><a href="http://vagrantmanager.com/">Vagrant Manager</a></li>
<li><a href="http://stackoverflow.com/questions/13216092/how-to-sort-a-hash-by-value-in-descending-order-and-output-a-hash-in-ruby">Hash のソート</a></li>
<li><a href="http://urltrapper.n-z.jp/">URLTrapper</a> v0.1</li>
<li><a href="https://itunes.apple.com/jp/app/kokowo-songru/id473519853?mt=8">ここを送る</a></li>
<li><a href="http://shin1x1.github.io/vagrantx/">VagrantX</a> v0.2.0</li>
<li><a href="http://macface.github.io/">MacFace</a></li>
</ul>


<h2>URLTrapper 公開</h2>

<p>今日は URLTrapper の公開作業をしていました。</p>

<p>最終的には
<a href="http://urltrapper.n-z.jp/">URLTrapper</a>
の<a href="https://github.com/znz/urltrapper">ソースコードを公開</a>して、
<a href="https://github.com/znz/urltrapper/releases/tag/v0.1">v0.1 をリリース</a>しました。</p>

<h2>Config 設定</h2>

<p>まず
<a href="http://rubymotion.jp/RubyMotionDocumentation/guides/project-management/index.html">RubyMotion Project Management Guide</a>
の 2. Configuration をみて identifier などを設定していきました。</p>

<h2>リリースファイル作成</h2>

<p><code>rake build</code> で <code>build/MacOSX-10.9-Release/*.app</code> が出来るので、
それを Finder で zip にして、
バージョン付きのファイル名にしました。</p>

<h2>リリース</h2>

<p>github の Release からリリースを作成して、
先ほどの zip ファイルをアップロードしてリリースしました。</p>

<p>途中、リリースノートにスクリーンショットをアップロードしました。
このスクリーンショットは後で GitHub Pages を作る時にも使いました。</p>

<h2>GitHub Pages 作成</h2>

<p>github の Settings から GitHub Pages にある Automatic page generator を使って作成しました。</p>

<p>自動作成されたものから、ダウンロードのリンクのところは VagrantX を参考にして、
ソースコードのダウンロードからバイナリの zip のダウンロードに書き換えました。</p>

<h2>ドメイン問題</h2>

<p><code>znz.github.io</code> は、この blog 用に使っていて、
<code>znz.github.io/urltrapper</code> を開くと
<code>blog.n-z.jp/urltrapper</code> に飛ばされてしまって
困ってしまったので、
<a href="https://github.com/znz/urltrapper/blob/gh-pages/CNAME">https://github.com/znz/urltrapper/blob/gh-pages/CNAME</a>
として個別のサブドメインを使うように設定したのですが、
すぐには反映されなくて、しばらく悩んでいました。</p>

<p>最後の成果発表のタイミングでは反映されていて見えるようになっていました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R と Ruby によるデータ解析入門　読書会　第2回に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-17-amagasakirb.html"/>
    <updated>2014-05-17T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/amagasakirb</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/event/index/168617/">5月17日 R と Ruby によるデータ解析入門　読書会　第2回(兵庫県)</a>
に参加しました。
今回は4章からでした。
次回は6月28日です。</p>

<div style="float:right">
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873116155" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>




<!--more-->


<h2>メモ</h2>

<p>以下今回のメモです。</p>

<ul>
<li>PDF をタブレットで読むのに <code>k2pdfopt</code> で変換すると読みやすい</li>
<li>サンプルコード: <a href="https://github.com/setoyama60jp/everyday">https://github.com/setoyama60jp/everyday</a></li>
<li>p.90 l.3 <code>@durarion</code> って <code>@duration</code> の typo?</li>
<li><code>duration</code> は今何分占有しているか</li>
<li><code>use_duration</code> は <code>Person</code> が何分占有するか</li>
<li><code>need_to_go?</code> は必ず3回というわけではなく540分の3の確率</li>
<li>p.91 <code>カンマ句切り</code> &ndash;> <code>カンマ区切り</code> ?</li>
<li>Producer Consumer パターンで Enumerator を使うという話</li>
<li><code>read.table</code> の <code>header</code> とか <code>sep</code> とか</li>
<li><code>ggplot2</code> では <code>+</code> がオーバーロードされているという話</li>
<li>Safari Books Online の話</li>
<li>動画もあるという話</li>
<li>英語だと字幕がないと厳しい話</li>
<li>自動字幕の話</li>
<li>図4-3 の下に書いてある横軸が1から始まっているのは間違いで実際は0からなので、最初の方以外は ASCII コードに一致</li>
<li>ヤバイ経済学 はオススメという話 <iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=znz-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4492313788" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></li>
<li>実装例5-3 <code>Market</code> クラスはクラスにする必要性がない書き方になっている</li>
<li><code>pdf</code> と <code>dev.off</code> は p.52 に説明がある</li>
<li>5章のモデルがいまいちという話</li>
<li>実装例5-10 の最後のターンの処理ってループの外で良いのでは。</li>
<li>全体的に Ruby コードもいまいちという話</li>
<li><code>R</code> の <code>viewport</code> の話</li>
<li>実装詳細と実装説明の前にどういう出力を目指しているのか概要が欲しいという話</li>
<li>削るとか溶かすとかいう話</li>
<li>エンロン事件のメールが公開されていてダウンロードできるのに驚いた話</li>
<li>6章は R で頑張っている</li>
<li>Gmail の IMAP の <code>[Gmail]/送信済みメール</code> は言語設定で変わる話</li>
<li>ビッグデータ的な公開されているデータはどういうのがあるのかという話</li>
<li>p.157 <code>クォーテーションを含むメールアドレスがデータ内に存在する</code> からメールアドレスは面倒という話</li>
<li><a href="http://d.hatena.ne.jp/triadsou/20100528/1275042816">ggplot2 の自分用メモ集を作ろう &ndash; Triad sou.</a></li>
<li>ビッグデータの話として有名な購入するデオドラントと石けんが変わって妊娠がわかったという話</li>
<li>PDF から Web アルバムの話</li>
</ul>


<h2></h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 10 回 RubyMotion もくもく会 in Osaka に参加した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-04-23-rubymotion-mokumoku.html"/>
    <updated>2014-04-23T19:16:51+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubymotion-mokumoku</id>
    <content type="html"><![CDATA[<p>第 1 回から第 9 回にも参加した RubyMotion もくもく会 in Osaka の
<a href="http://connpass.com/event/5674/">第 10 回 RubyMotion もくもく会 in Osaka</a>
に参加してきました。</p>

<p>次回の
<a href="http://connpass.com/event/6116/">第 11 回 RubyMotion もくもく会 in Osaka &ndash; connpass</a>
は 05/28(水) になりました。</p>

<!--more-->


<h2>メモ</h2>

<ul>
<li><a href="https://itunes.apple.com/jp/app/bokosuka!mogurando/id845835380?mt=8">ボコスカ！モグランド</a></li>
<li><a href="http://www.amazon.co.jp/gp/product/4873116678/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873116678&amp;linkCode=as2&amp;tag=znz-22">AngularJSアプリケーション開発ガイド</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=znz-22&amp;l=as2&amp;o=9&amp;a=4873116678" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> が発売されているという話</li>
<li><a href="http://www.pixate.com/">Pixate</a></li>
<li>MacFace</li>
<li><a href="https://github.com/HipByte/RubyMotionSamples/issues/31">osx/Tweets app crashes on launch</a></li>
<li><a href="http://www.impress-plus.co.jp/">http://www.impress-plus.co.jp/</a></li>
</ul>


<h2>調査続き</h2>

<p>引き続き初回起動時の URL の受け取り方を調べていました。</p>

<ul>
<li><a href="http://questbeat.hatenablog.jp/entry/2014/04/19/123207">「ログイン時に起動」を実装する</a> はあんまり関係なかった。</li>
<li>GitHub で <code>LSSetDefaultHandlerForURLScheme</code> を検索

<ul>
<li><a href="https://github.com/s-faychatelard/Helm/blob/2c85b303781fa430432c17ed9848a0b252c82eae/sources/others/mac/mac.mm">https://github.com/s-faychatelard/Helm/blob/2c85b303781fa430432c17ed9848a0b252c82eae/sources/others/mac/mac.mm</a> : Qt で実装していて URL を受け取っている部分がわからず (Qt のイベントに変換されたものを受け取っている?)</li>
<li><a href="https://github.com/bigbearlabs/MotionKit/blob/51f46c14b52819b709c57d6e1c954d84c852e48b/lib/motion-kit/misc/osx/osx_browsers.rb">https://github.com/bigbearlabs/MotionKit/blob/51f46c14b52819b709c57d6e1c954d84c852e48b/lib/motion-kit/misc/osx/osx_browsers.rb</a> : ブラウザーの一覧の取得など</li>
<li><a href="https://github.com/bigbearlabs/MotionKit/blob/51f46c14b52819b709c57d6e1c954d84c852e48b/lib/motion-kit/app/osx/app.rb">https://github.com/bigbearlabs/MotionKit/blob/51f46c14b52819b709c57d6e1c954d84c852e48b/lib/motion-kit/app/osx/app.rb</a> : <code>application:openFile:</code> や <code>application:openFiles:</code> で受け取っているように見えるが試してみても呼ばれない。</li>
<li><a href="https://github.com/gnyrd/WebEx/blob/0ea21241591e496d1d702c45768400fa14d75662/URLHandler.m">https://github.com/gnyrd/WebEx/blob/0ea21241591e496d1d702c45768400fa14d75662/URLHandler.m</a> : <code>kAEGetURL</code> の登録に <code>handleGetURLEvent:withReplyEvent:</code> (2引数) ではなく <code>getURL:</code> (1引数) を使っている。</li>
</ul>
</li>
</ul>


<p>前回までの試行錯誤の途中で <code>setEventHandler</code> の呼び出しを <code>applicationDidFinishLaunching:</code> から <code>initialize</code> に移動していたのと <code>getURL:</code> への変更の組み合わせで、やっと初回起動時にも URL が受け取れるようになって、
さらに <code>rake clean</code> したり一度デフォルトブラウザーを他のブラウザーに設定し直したりしていたら、
<code>handleGetURLEvent:withReplyEvent:</code> に戻しても初回起動時に受け取れるようになっていました。</p>

<p>原因がはっきりしないのが嫌な感じですが、何か設定が中途半端に残っているとうまく動かなかったようです。</p>

<h2>RubyMine</h2>

<p>前回のもくもく会でインストールして、他では使っていなかったので、
ほぼ使っていないまま登録せず試用期限が切れてしまって、
30分ごとに終了するようになってしまいました。</p>
]]></content>
  </entry>
  
</feed>
