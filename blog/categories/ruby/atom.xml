<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2016-09-09T23:16:02+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2016 の 2 日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-09-09-rubykaigi-2016.html"/>
    <updated>2016-09-09T09:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi-2016</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2016" title="RubyKaigi 2016">RubyKaigi 2016</a> の 2 日目に参加したので、そのメモです。</p>

<!--more-->


<h2>予習</h2>

<p>途中で知ったのですが、<a href="http://qiita.com/ya_ma23/items/e45404ca066b069efe05">RubyKaigi2016の予習（Day 2）</a>というのがあるようです。</p>

<h2>Door Open</h2>

<ul>
<li>早めに着いたのでメインホールでのんびりしていた。</li>
<li>開始前の待ち時間に少しの間「Surgical Refactors」というのが出ていたのは発表者のプロジェクターのテストっぽい感じだった。</li>
</ul>


<h2>Fearlessly Refactoring Legacy Ruby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/searls.html" title="Fearlessly Refactoring Legacy Ruby - RubyKaigi 2016">Fearlessly Refactoring Legacy Ruby - RubyKaigi 2016</a></li>
<li>自己紹介</li>
<li>発音が難しいので日本語でジュースさん</li>
<li>スクリーンサイズ: 16x9, 4x3, Ruby3x3 なので 3x3</li>
<li>early success と later success</li>
<li>レガシーコードのリファクタリングの話</li>
<li>refactor と legacy code という言葉の定義の確認</li>
<li>Business Priority と Cost/Risk の2軸で New Features, Bug Fixes, Testing, Refactoring を分類</li>
<li>Refactoring is hard to sell</li>
<li>Refactors are scary</li>
<li><ol>
<li>Refactoring Patterns</li>
</ol>
</li>
<li>リファクタリング Ruby Edition</li>
<li><ol>
<li>Characterization Testing</li>
</ol>
</li>
<li><ol>
<li>A/B Testing / Experiments</li>
</ol>
</li>
<li>Development, Testing, Staging, Production 全てをいい感じにするツールがないので作った</li>
<li>Talk-Driven Development</li>
<li><a href="https://github.com/testdouble/suture">https://github.com/testdouble/suture</a></li>
<li>9 Features : Plan, Cut, Record, Validate, Refactor, Verify, Compare, Fallback, Delete</li>
<li>Bug Fix の例</li>
<li>pure function は簡単だが状態を持つものは難しい</li>
<li>データベース (sqlite3) に記録するの話</li>
<li>Guilded Rose Kata</li>
<li>データベースに保存した値と verify</li>
<li>Coverage</li>
<li>Refactoring</li>
<li>同じ挙動をする新しいメソッドを定義</li>
<li>verify</li>
<li>間違った record を削除</li>
<li>Custom Comparators</li>
<li>Random seed の話</li>
<li>configuration</li>
<li>Development と Testing は良い感じにできた。</li>
<li>Staging や Production を良い感じにするには?</li>
<li>Compare: <code>call_both</code></li>
<li>Fallback : Make change safe for users</li>
<li><code>fallback_on_error</code>: 新しい方でエラーが起きたら古い方を使う</li>
<li>Delete : Record のところで記録したデータと Suture 関連の追加したコードを削除</li>
<li>ひこにゃん</li>
<li>質疑応答の前に CM</li>
</ul>


<h2>スポンサーセッション PIXTA</h2>

<ul>
<li><a href="https://pixta.jp/">https://pixta.jp/</a></li>
</ul>


<h2>Fearlessly Refactoring Legacy Ruby の質疑応答</h2>

<ul>
<li>質問1 : 聞き取れず</li>
<li>使っている、使ってみてくださいみたいな回答</li>
<li>質問2,3 : 聞き取れず</li>
<li>CI でも動いているとかなんとか</li>
<li>質問は日本語でも OK</li>
<li>質問4 : 新機能を追加するときには使えるか?</li>
<li>挙動が変わっていないのを確認するのに使えるとかいろいろ言っていたが聞き取れず</li>
<li>質問5 : develop yourself?</li>
<li>聞き取れず</li>
<li>質問6 (Martin 先生) : 聞き取れず</li>
<li>聞き取れず</li>
<li>質問7 : 聞き取れず</li>
<li>聞き取れず</li>
<li>日本語で質問8 : リファクタリングで発生したテストコードは残すべきか?</li>
<li>聞き取れず</li>
<li>質問9 : 聞き取れず</li>
<li>グローバル変数とか副作用とかの話</li>
</ul>


<p>全体的にセッションの英語は聞き取りやすかったのですが、メモを取りながらだと難しかったです。
質疑応答になるとスライドによる補助情報もないのでさらに厳しかったです。</p>

<h2>Intermission</h2>

<ul>
<li>落し物案内</li>
</ul>


<h2>How to create bindings 2016</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/ktou.html" title="How to create bindings 2016 - RubyKaigi 2016">How to create bindings 2016 - RubyKaigi 2016</a></li>
<li><a href="https://slide.rabbit-shocker.org/authors/kou/rubykaigi-2016/">https://slide.rabbit-shocker.org/authors/kou/rubykaigi-2016/</a></li>
<li>Rabbit 2.2.0</li>
<li>Ruby をもっといろんな場面で使えるようにするため、バインディング開発者になりませんか</li>
<li>会場アンケート</li>
<li>バインディング作ったことがある 20人ぐらい</li>
<li>今もメンテナンスしている 10人ぐらい</li>
<li>バインディングを知らない 60人ぐらい</li>
<li>作ろうと思ったことがない 多い</li>
<li>最初に自動生成のデモ</li>
<li>gi: GObject-Introspection</li>
<li><code>WebKit::WebView</code> で <a href="http://rubykaigi.org/2016">http://rubykaigi.org/2016</a> を表示してスクリーンショット (<code>get_snapshot</code>) をとって別 window に表示していた。</li>
<li>拡張ライブラリの話</li>
<li>libffi の話</li>
<li>自動生成がオススメ</li>
<li>SWIG と GI の比較</li>
<li>SWIG はビルド時に自動生成</li>
<li>GI は実行時に自動生成</li>
<li>SWIG の .i は各言語でメンテナンスが必要</li>
<li>GI は共通のアノテーションをメンテナンス</li>
<li>OSS Gate などの紹介</li>
<li>質疑応答</li>
<li>質問1: オブジェクトを渡す話</li>
<li>スクリーンショットの例だと rcairo とかが良い感じに変換してくれる</li>
<li>GI のアノテーションで指定している(?)</li>
<li>質問2: Mac で動くか</li>
<li>Mac でも動く</li>
<li>質問3 (大林さん): GUI は登場人物が増えてトラブルシューティングが大変ではないか?</li>
<li>私ぐらいになれば大丈夫</li>
<li>質問4 (大林さん): SWIG は昔使ったことがあるが .i は共通ではないのか?</li>
<li>単純なケースだと共通でいけるが、結局現実的なものを作るときは各言語になる</li>
<li>質問5 (後藤さん?): 標準添付の fiddle と dl2 を使っていないのはなぜか?</li>
<li>使いにくいから</li>
<li>機能が足りない</li>
<li>質問6: GI は動的にバインディングが作られるということは大きいライブラリは読み込みに時間が掛かる?</li>
<li>実演</li>
<li>(運営から割り込み: B が遅延しているので 10 分余裕ができた)</li>
<li>パフォーマンスについて</li>
<li>質問7 (自分): <code>hello_message</code> が返す文字列のメモリ管理は?</li>
<li><code>const char*</code> を返している、つまりメモリ管理は <code>Hello</code> 側の債務</li>
<li>質問8 (ささださん): (メモを書いていたので聞いてなかった)</li>
<li>ドキュメントを書けば動くようになっている</li>
</ul>


<h2>How DSL works on Ruby</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/hsbt.html" title="How DSL works on Ruby - RubyKaigi 2016">How DSL works on Ruby - RubyKaigi 2016</a></li>
<li>大人気で椅子に座れなかったので通路に座って聞いていました。</li>
<li>自己紹介</li>
<li>Rake : Make in Ruby</li>
<li><code>-j</code> オプションはあるが大多数のタスクは実行時間が変わらないだろう</li>
<li><code>FileList</code> でファイルグロブや <code>exclude</code> を扱える</li>
<li><code>Rake::TestTask</code> でテスト実行用のタスクが簡単に作れる</li>
<li><code>rdoc</code> 用のタスクが昔は <code>rake</code> の方に入っていたが今は <code>rdoc</code> の方に入っている</li>
<li><code>Minitest</code>, <code>Test::Unit</code> 用の <code>Rake::TestTask</code> だけ歴史的経緯で <code>rake</code> に残っている</li>
<li><code>Rake</code> は 0.9 から 10.0 に一気に上がった</li>
<li>SemVer</li>
<li>rake は現在は <a href="https://github.com/ruby/rake">https://github.com/ruby/rake</a> が upstream</li>
<li>rails が依存している gem がよく使われている gem だがその中でも少し使われている数が多い</li>
<li>DSL の話</li>
<li>いろいろな DSL の Pattern 紹介</li>
<li>DSL の前提知識終わり、今までの知識で DSL が作れるはず</li>
<li>具体的な DSL の実装を見ていく</li>
<li><code>Rake.application.run</code></li>
<li><code>rakefile</code>, <code>Rakefile</code>, <code>Rakefile.rb</code>, <code>rakefile.rb</code> に対応している</li>
<li>bundler が 2 で <code>Gemfile</code> の代わりに <code>gemfile</code> がデフォルトになるという話があるらしい?</li>
<li><code>rake -P</code></li>
<li><code>lib/rake/dsl_definition.rb</code> の <code>Rake::DSL</code> は短いのでみてみると良い</li>
<li><code>Rake::Task</code> と <code>Rake::TaskManager</code></li>
<li><code>Capistrano::Application</code> は <code>Rake::Application</code> を継承しているので capistrano 3 以降は rake の拡張</li>
<li><code>Thor</code> を継承したクラスで DSL が使える</li>
<li><code>Bundler::CLI</code> が <code>Thor</code> を継承したクラス</li>
<li>CM: minne</li>
<li>Apple Pay 対応予定</li>
<li>関わってないけどラップ?</li>
<li>Long live the Rake</li>
<li>JRuby の互換性問題</li>
<li><code>Dir.chdir</code> すると <code>sh</code> の挙動が変わるとか</li>
<li>Rake 11</li>
<li>deprecated メッセージを出さずに <code>TaskManager#last_comment</code> を消したら問題が起きたので戻した話</li>
<li><code>hoe</code> gem から bundler のタスクを使うように書き換えた</li>
<li><code>verbose</code>, <code>deps</code> は時間がないので省略</li>
<li>Rake 12</li>
<li>コア数をとる処理に <code>sysctl</code> を使っているのをやめて <code>Etc.nprocessors</code> (Ruby 2.2 以降依存) を使うようにしたい</li>
<li>コード減らしたい</li>
<li><code>class Object</code> 汚染を減らしたい</li>
<li>質疑応答</li>
<li>質問: DSL を触っているとどのクラスなのかどのインスタンスなのか悩むとか, 何か tips はないかいう話</li>
<li>僕も知りたい</li>
<li>Ruby DSL book (と言っていたように聞こえたが <a href="http://clean-ruby.com/dsl" title="Ruby DSL Handbook">Ruby DSL Handbook</a> かも) をオススメ</li>
<li>既存の DSL を実装した gem を読む</li>
</ul>


<h2>Lunch Break</h2>

<ul>
<li>今日は <a href="http://agile.esm.co.jp">http://agile.esm.co.jp</a> がスポンサーの弁当でした。</li>
<li><a href="http://amzn.to/2bUWNxg">プログラミングElixir</a>は一応持ってきていましたが、サイン会は列が長かったので諦めました。</li>
</ul>


<h2>Learn Programming Essence from Ruby patches</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/takkanm.html" title="Learn Programming Essence from Ruby patches - RubyKaigi 2016">Learn Programming Essence from Ruby patches - RubyKaigi 2016</a></li>
<li><a href="http://bit.ly/esm-ruby-kaigi-bento">http://bit.ly/esm-ruby-kaigi-bento</a></li>
<li>プログラミングの知識とは何か?</li>
<li>大学で学んだような知識と日々の仕事で必要な知識は異なる</li>
<li>どうやって学ぶか</li>
<li>本を読むなど</li>
<li>Ruby のパッチを読んでみる</li>
<li>なぜパッチなのか?</li>
<li>短い、redmine の issue などに説明がある、description などをみて自分が理解できるパッチを選べる</li>
<li>本で書かれているような知識と結びつく</li>
<li>Asakusa.rb Meetup での経験から</li>
<li>パフォーマンス改善などのパッチは難しい</li>
<li>オススメの情報源</li>
<li><a href="http://amzn.to/2cbxeaz">Ruby Under a Microscope</a>, <a href="http://amzn.to/2cbwAK6">Rubyのしくみ</a></li>
<li>Ruby 本体の doc/extension.rdoc</li>
<li>(冒頭のファイル名が間違っているという指摘があったので、<a href="https://github.com/ruby/ruby/commit/b5f3a113f55a81ce19c36b50d1ef234ac518d510">すぐに修正された</a>。)</li>
<li>yotii23&rsquo;s slide : <a href="https://speakerdeck.com/yotii23/walking-around-the-ruby-forest-more-deeply">Walking around the ruby forest more deeply</a></li>
<li><a href="https://bugs.ruby-lang.org/issues/12142">Hash tables with open addressing</a> を読む</li>
<li><code>st_table</code> の説明</li>
<li>新しい実装の説明</li>
<li>質疑応答</li>
<li>質問1: 他のことをしていたので聞き取れず</li>
<li>質問2 (joker1007 さん): 勉強になりそうなパッチを探す方法は?</li>
<li>直感で</li>
<li>面白そうだと思える変更かなど</li>
<li>質問3: 他に見ているプロジェクトは?</li>
<li>rails, github で watch しているものなど</li>
</ul>


<h2>Ruby Reference Manual 2016 Autumn</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/okkez.html" title="Ruby Reference Manual 2016 Autumn - RubyKaigi 2016">Ruby Reference Manual 2016 Autumn - RubyKaigi 2016</a></li>
<li>自己紹介</li>
<li>るりま != るびま</li>
<li>るりま = Ruby Reference Manual</li>
<li>るびま = Rubyist Magazine</li>
<li>どちらも「日本 Ruby の会」のサポートを受けている</li>
<li>2006-08-27: プロジェクト開始 (青木さん)</li>
<li>2009-01-31: Ruby 1.9.1 リリース</li>
<li>2010-08-18: Ruby 1.9.2 リリース</li>
<li>2011-09-01: 最低限のマニュアルが揃ったのでメンテナンスフェーズ開始</li>
<li>2011-10-31: Ruby 1.9.3 リリース</li>
<li>2013-02-24: Ruby 2.0.0 リリース</li>
<li>2013-05-30: 前回の発表</li>
<li>2013-06-02: 青木さんのドメインの svn サーバーから GitHub に移動</li>
<li>2013-12-25: Ruby 2.1.0 リリース</li>
<li>2014-12-25: Ruby 2.2.0 リリース</li>
<li>2015-12-25: Ruby 2.3.0 リリース</li>
<li>最新の状態にほぼ追従</li>
<li>できてない部分はできていないままだが、更新できている部分は更新についていけているはず</li>
<li>RubyKaigi 2013 から</li>
<li>docs.ruby-lang.org でホスティング</li>
<li>IIJ 提供、管理者は @hsbt さん</li>
<li>Ruby の更新への追従は手作業</li>
<li>NEWS に載らないような変更には弱い</li>
<li>例えば rbconfig/sizeof の追加</li>
<li>RDoc との関係</li>
<li>RDoc とは、Ruby 本体のコメントに埋め込まれているドキュメント</li>
<li>相互に同期したいができていない</li>
<li>RDoc へのリンクはできている</li>
<li>最近の変更</li>
<li>Web 検索で古いドキュメントがでてくる対策として <code>link rel="canonical"</code> をつけるようになった</li>
<li>NEWS ファイルを翻訳したものが入った</li>
<li><code>open_search_description.xml</code> がおかしくなっていたのでを修正した</li>
<li>Contributors</li>
<li>rurema/bitclust GitHub のアイコンがひっぱれたのは 18 名、コミットは 20 名</li>
<li>rurema/doctree はもっと多い (具体的な数はメモし損ねた)</li>
<li>のべ 100 名以上が協力してくれている</li>
<li>Ruby 2.4.0</li>
<li>Unify Fixnum and Bignum to Integer</li>
<li>bundled gem が増えた</li>
<li>rake, rubygems などのすでにドキュメントが書かれていて日本語のまとまった情報が少ないものは残したい</li>
<li>tk が外れるとドキュメントなしが大幅に減る</li>
<li>開発ツール (bitclust) の話</li>
<li>CHM 生成が壊れている</li>
<li>Windows 自体が CHM を捨てる流れなので捨てたい</li>
<li>修正の pull request がきているのでその人に任せたい</li>
<li>単一ファイルはあった方が良いので EPUB や PDF の生成を考えている</li>
<li>自動化について</li>
<li>更新の自動通知</li>
<li>パッケージのリリースの自動化</li>
<li>CI の仕組みの改善</li>
<li>ドキュメントの生成が成功することぐらいしか確認していないので、 heroku にアップロードして見た目の確認ができるとかできるといいかも</li>
<li>RDoc との関連</li>
<li>相互同期したい</li>
<li>i18n モジュールというのが追加されたようなので何か使えるかも</li>
<li>Contribute!</li>
<li>使ってください! <a href="https://docs.ruby-lang.org/ja/">https://docs.ruby-lang.org/ja/</a></li>
<li>使っていて気づいたことがあったら issue を立ててください</li>
<li>twitter やブログで愚痴られても気づけない</li>
<li>気づいたもので直せそうであれば pull request にしてもらえると merge を押すだけで良いので助かります</li>
<li>typo の修正などからお気軽にどうぞ</li>
<li>修正のベースがあるだけでも嬉しいです</li>
<li>記法がわからなければ issue で報告してくれるだけでも良いです</li>
<li>BitClust の開発について</li>
<li>EPUB, PDF 生成については EPUB を直接生成しようとしていたのを捨てて、<a href="https://github.com/kmuto/review">Re:VIEW</a> を経由すると良いのではないかという話を昨晩の懇親会で得たのでそうする予定</li>
<li>SEO (Search Engine Optimization)</li>
<li>一緒に Ruby のドキュメントを良くしていきましょう</li>
<li>質疑応答</li>
<li>質問1 (Rails Guide のやすかわさん): Dash の docset もあると喜ばれる</li>
<li>サードパーティで作ってくれている人はいる</li>
<li>Rails Guide では EPUB, PDF, docset をバンドルしたものを<a href="http://tatsu-zine.com/books/railsguides">達人出版会</a> などで売っている (Web は無料でも売れている) (後で確認してみましたが、売っているものに docset が入っているかどうかは確認できず)</li>
<li>質問2: 以前質問された時に日本語しかドキュメントしかないものがあった。</li>
<li>まず英語にそろえたいが、具体的には何も動いていない。</li>
<li>質問3: pull request などで修正してもらって反映されるのはどのくらいたってから?</li>
<li><a href="https://docs.ruby-lang.org/ja/">https://docs.ruby-lang.org/ja/</a> に反映されるのは一日一回</li>
<li>告知: OSS 開発支援サービス, エンジニア募集中</li>
<li>2016-09-11(日) 13:00-17:00 <a href="https://rubykansai.doorkeeper.jp/events/49364">第74回 Ruby関西 勉強会</a></li>
</ul>


<h2>Afternoon Break</h2>

<ul>
<li>終わった後、しばらく okkez さんのところに話にくる人の話を一緒に聞いていた。</li>
<li><a href="https://twitter.com/labocho">Dash 版の作者</a>も現れて、 Re:VIEW が docset も生成できるという勘違いを受けていたという話があった。</li>
<li>(念のため後で <a href="https://github.com/kmuto/review">Re:VIEW</a> を確認してみたけど docset はなかった)</li>
</ul>


<h2>Pwrake: Distributed Workflow Engine based on Rake</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/masa16tanaka.html" title="Pwrake: Distributed Workflow Engine based on Rake - RubyKaigi 2016">Pwrake: Distributed Workflow Engine based on Rake - RubyKaigi 2016</a></li>
<li>立ち話が長引いて自己紹介の部分は聞けなかった</li>
<li><a href="https://github.com/ruby-numo/narray">https://github.com/ruby-numo/narray</a></li>
<li><a href="https://github.com/masa16/pwrake">https://github.com/masa16/pwrake</a></li>
<li>Background: 科学ワークフロー</li>
<li>ワークフロー定義言語</li>
<li>DAX (Pegasus ワークフローシステム)</li>
<li>Swift (Apple の言語とは別物)</li>
<li>GXP Make</li>
<li>他のことをしていたので聞いていなかった</li>
<li>Rake はワークフロー記述言語として強力</li>
<li>結局るりま関連の作業をしていてほとんど聞いていなかった。</li>
</ul>


<h2>るりま関連作業</h2>

<ul>
<li><a href="https://twitter.com/sho_hashimoto/status/774119302756651008">世の中のNEWS翻訳家のみなさまが今英語で残ってるとこやってくれないかなー。</a> というツイートをみて NEWS 関連をみたりしていた。</li>
</ul>


<h2>Modern Black Mages Fighting in the Real World</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/tagomoris.html" title="Modern Black Mages Fighting in the Real World - RubyKaigi 2016">Modern Black Mages Fighting in the Real World - RubyKaigi 2016</a></li>
<li>混んでいてまた通路に座っていた。</li>
<li><a href="https://rubygems.org/gems/msgpack-inspect">https://rubygems.org/gems/msgpack-inspect</a> という gem をリリースしたばっかり</li>
<li>Fluentd とは?</li>
<li>Fluentd v0.14</li>
<li>ロゴが変わった</li>
<li>線で構成されていて白飛びして目立たないことがあるので変わった</li>
<li>クラス階層を整理した</li>
<li><code>extend</code> は <code>singleton_class.include</code> と同じ</li>
<li>Fluentd v0.12 の <code>emit</code> とか <code>format_stream</code> とかの呼び出し関係の説明</li>
<li>Fluentd v0.12 の出力の <code>pop</code> とか <code>write</code> とかの説明</li>
<li>サードパーティのプラグインのメソッドを直接コアが呼び出していたので、ちょっと処理を挟みたいということがやりにくい</li>
<li>呼び出し方が複雑でコールスタックが複雑</li>
<li>Fluentd v0.14 <code>Fluent::Plugin::Output</code> で整理した</li>
<li>呼び出しが行ったり来たりしなくなった</li>
<li>プラグインが実装するメソッドを分離した</li>
<li>メソッドが余計なことをしないようになった</li>
<li>コールスタックがシンプルで一本線になった</li>
<li>既存の v0.12 のプラグインは?</li>
<li>可能な限り何の変更もなく動く必要がある</li>
<li>互換レイヤーが二階建てになっている理由</li>
<li>トップレベルでの名前衝突をできるだけ避けたい</li>
<li>Compat Layer: プラグインが定義しているメソッドに応じて処理を変える</li>
<li><code>format</code> を呼ぶだけが一番簡単な例</li>
<li><code>format_stream</code> が定義されているとそっちを呼ばないといけない</li>
<li><code>super</code> 対応も必要</li>
<li>初期のサンプルコードが良くない実装だった。サンプルコードには気をつけましょう</li>
<li><code>emit</code> が定義されているとさらにそれを呼ばないといけない</li>
<li>さらにこっちも <code>super</code> 対応も必要</li>
<li><code>emit</code> は値を返さないで <code>@buffer.emit</code> を呼ぶので、その対応が必要</li>
<li><code>chunk.extend</code> をするためにプラグインを <code>extend</code> する</li>
<li>似たような互換レイヤーがそれぞれの Output プラグインの親にある</li>
<li>プラグインのライフサイクル</li>
<li>v0.12 プラグインでは <code>super</code> は呼ばなくても良かったので、呼んでいないプラグインもある</li>
<li><code>super</code> を呼ばせる黒魔術として <code>Module#prepend</code></li>
<li><code>CallSuperMixin</code></li>
<li>まず <code>super</code> を呼ぶ、<code>super</code> が呼ばれていなかったら親を辿って最初に定義されているクラスのメソッドに <code>self</code> を <code>bind</code> しなおして呼び出す</li>
<li>その先は <code>super</code> がちゃんと呼ばれるのでめでたし</li>
<li>テストの問題</li>
<li>テストの中で <code>singleton_class</code> にメソッド定義していると <code>prepend</code> が負けて上書きできない</li>
<li>何よりも強い何かが必要</li>
<li><code>singleton_class</code> に <code>prepend</code> して解決</li>
<li>fluentd のプラグインが古いとこういう黒魔術が使われるので、バージョンアップ推奨</li>
<li>ユーザーに不利益を被らせないために我々は何でもやるべきだ</li>
<li>質疑応答</li>
<li>質問1: あの複雑な呼び出し関係はどうやってできたのか?</li>
<li>図はかいた</li>
<li>ブギーボードにかいた</li>
<li>質問2: 後方互換性の話</li>
<li>以前に互換性を壊してあげようという構想があったが、その後、プラグインが増えて全書き換えは無理ということになった</li>
<li>言語のコミュニティを超えてユーザーが増えた</li>
<li>特に運用監視の人たちには互換性が重要だった</li>
<li>質問3 (Yugui さん?): 逆方向の互換性は?</li>
<li>機能が増えたので不可能です</li>
<li>v0.12 向けのリリースをしてから v0.14 向けリリースをしてください</li>
<li>質問4: パフォーマンスの問題</li>
<li>読み込み時や 1 分に 1 回呼ばれるような部分でしかメタプログラミングはしていないので、継承の階層が増えるだけでパフォーマンスには影響はないはず</li>
<li>質問5: メモを取っていたので聞き取れず</li>
</ul>


<p><code>super</code> が呼ばれていなかったら、の話でやっていた黒魔術の <code>bind</code> しなおして呼び出すというのは、たぶん以下のような感じです。</p>

<pre><code>class C1
  def foo
    p :C1
  end
end

class C2 &lt; C1
  def foo
    # super が呼ばれていない
  end
end

C1.instance_method(:foo).bind(C2.new).call
</code></pre>

<p>Rails 関連で <code>class</code> が上書きされているオブジェクトで本当のクラスを知りたかった時に <code>rails console</code> で <code>Kernel.instance_method(:class).bind(obj).call</code> のようなことをしたことがあったぐらいだったので、実運用のコードでこういうことが行われることがあるというのに驚きました。</p>

<h2>SciRuby Machine Learning Current Status and Future</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/mrkn.html" title="SciRuby Machine Learning Current Status and Future - RubyKaigi 2016">SciRuby Machine Learning Current Status and Future - RubyKaigi 2016</a></li>
<li><a href="https://speakerdeck.com/mrkn/sciruby-machine-learning-current-status-and-future">https://speakerdeck.com/mrkn/sciruby-machine-learning-current-status-and-future</a></li>
<li>enumerable-statistics gem</li>
<li>機械学習とその前後のワークフロー</li>
<li>Ruby はほぼ何もできない</li>
<li>Python はできるので、みんな Python を使う</li>
<li>その状況を変えたい</li>
<li>一番重要なこと: SciRuby の開発を手伝ってください、<a href="http://sciruby-slack.herokuapp.com/">http://sciruby-slack.herokuapp.com/</a></li>
<li>なぜ機械学習を使うのか?</li>
<li>機械学習でできること</li>
<li>機械学習で扱う問題</li>
<li>教師あり学習: 分類、回帰</li>
<li>教師なし学習: グループ分け、分布推定、次元削減</li>
<li>Reinforcement learning</li>
<li>3 種類全部 Ruby でできるようになると嬉しいが、今回の話は教師あり学習について</li>
<li>liblinear-ruby gem (C++ で書かれたライブラリのラッパー)</li>
<li>rb-libsvm gem (libsvm のラッパー)</li>
<li>decisiontree gem (decision tree = 決定木)</li>
<li>名前の紹介だけ: ai4r gem, classifier-reborn gem, data_mining gem, etc.</li>
<li>既存の gem はデータの渡し方も API も異なる</li>
<li>実世界のデータ</li>
<li>Scikit-learn</li>
<li>共通の形式で訓練データを用意できる</li>
<li>interface も互換性がある</li>
<li>Scikit-learn は機械学習の理想的なフレームワークだと思う</li>
<li>機械学習の SciRuby の未来</li>
<li>scikit-learn そのものを使う : julia 言語では PyCall.jl, ScikitLearn.jl</li>
<li>同様に pycall gem, scikit-learn gem を作れば良い</li>
<li>scikit-learn のようなものを実装する : とても大変</li>
<li>数値配列 : <code>NMatrix</code>, <code>Numo::NArray</code>, <code>NumBuffer</code></li>
<li><code>NMatrix</code>: 遅い、インストールが難しい</li>
<li><code>Numo::NArray</code>: 疎行列に対応していない、新しすぎるので対応しているライブラリが少ない</li>
<li><code>NumBuffer</code>: 発表者が開発者、手伝い募集</li>
<li><code>NMatrix</code> と <code>Numo::NArray</code> の互換性問題</li>
<li>SciRuby JP</li>
<li>成果物: Tutorials, Installation, Survey, Visualization, Other Languages</li>
<li>SciRuby は英語推奨だが日本語OK</li>
<li>機械学習に限らず contribution 募集</li>
<li><a href="http://sciruby-slack.herokuapp.com/">http://sciruby-slack.herokuapp.com/</a></li>
<li>質疑応答</li>
<li>質問1: 良い点を宣伝した方が良いのではないか</li>
<li>scikit-learn がベストだと思っている</li>
<li>質問2: テストの話</li>
<li>scikit-learn でどうやっているかは知らない</li>
<li>質問3: pycall or SciRuby, 着地点は?</li>
<li>まずは pycall で 2,3 年でみんな Python から julia に乗り換えているだろうと予想しているので、そうなったら Ruby から julia を呼び出すようにするのが良いのではないか</li>
<li>質問4 (マーティンさん): Ruby の強み (メタプログラミングとか) を活かせないか?</li>
<li>考えたことがなかった</li>
<li>質問5: 今 Ruby が向いていない、ライブラリが足りないからというのがあったが、言語自体は?</li>
<li>Ruby 言語自体が向いていないということはない</li>
<li>julia は数値ベクトルなどを言語がサポートしているので、数値計算をやりやすい、LLVM に丸投げでパフォーマンスも良い</li>
</ul>


<p>よく知らない分野なので、聞いていても良くわからない話もあり、あまりメモも取れなかった。</p>

<h2>Drinkup at RubyKaigi 2016 by Misoca Inc.</h2>

<p>Drinkup は Agileware の方も申し込みは間に合っていたのですが、後からの Misoca の方が会場が近くて良さそうだと思って、Misoca の方に申し込んで、キャンセル待ちの出ていた Agileware の方はキャンセルして、Misoca の方に参加しました。</p>

<p>Misoca の Drinkup では <a href="https://twitter.com/toyoshi/status/774227373944254465">https://twitter.com/toyoshi/status/774227373944254465</a> の写真のように doorkeeper のアカウントから取得したアイコンのステッカーを用意してくれていました。
便利そうなのでシールとしては貼らずに今後もイベントに参加した時の名札に入れるのが良さそうかも、と思いました。</p>

<p>今回はいろんな人といろんな話ができました。</p>

<p><a href="https://github.com/ruby/ruby/commit/dbff56f562c9f5459deeb06263a3cc5826159062">Unbundle tk</a> が気になっていたので hsbt さんにきいたところ、もともとリリースマネージャーの naruse さんとしては Ruby/Tk は外すだけで bundled gem にする予定はなかったのに、nobu さんが <code>gems/bundled_gems</code> に追加してしまっていたのを、改めて削除したという流れだったそうです。</p>

<p><a href="https://bugs.ruby-lang.org/issues/12681">Gem化issue</a> のタイトルの方が印象が強かったので勘違いしていたのですが、もともとは <a href="https://bugs.ruby-lang.org/issues/8539">Unbundle ext/tk</a> というタイトルの issue だったので、そういう意図だったようです。</p>

<p>記録として残しておきたいと思った話としては、以上のようなことがありました。</p>

<p>他には</p>

<ul>
<li>SlideShare は LinkedIn になって SlideShare だけのアカウントの作成ができなくなっているらしい</li>
<li>SpeakerDeck は過去に問い合わせた時に API 対応の予定はないという話だったらしい</li>
<li>通訳の関係で事前に資料を渡す必要があったので slide.rabbit-shocker.org にあげて PDF をダウンロードしてもらったらしい</li>
</ul>


<p>とかいう話もしていました。</p>

<p>最後は謎のジャンプ一本締めでした。</p>

<h2>Togetter まとめ</h2>

<p><a href="http://togetter.com/li/1022255" title="資料も反響もすべてチェック！ 京都で3倍広くなった #RubyKaigi 2016 まとめまとめ - Togetterまとめ">資料も反響もすべてチェック！ 京都で3倍広くなった #RubyKaigi 2016 まとめまとめ - Togetterまとめ</a> というのができていたので個別のまとめへのリンクは省略しました。</p>

<h2>まとめ</h2>

<p>今日は AC アダプターを忘れていて貸してもらったり (ありがとうございました)、日本語のセッションにいたのに他の作業をしていてあまり聞けていなかったりしたこともありましたが、
bindings や黒魔術の話のようにある程度は知っているけど実際にはほぼ使ったことない話や、
ある程度関わっている るりま (Ruby Reference Manual) の話がしっかり聞けたのが良かったです。</p>

<p>また、作業中は話をちゃんと聞けなかったという問題はあったものの、いくつか pull request を出したり issue を書いたりできたのも良かったです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2016 の 1 日目に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-09-08-rubykaigi-2016.html"/>
    <updated>2016-09-08T09:49:29+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykaigi-2016</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2016" title="RubyKaigi 2016">RubyKaigi 2016</a> の 1 日目に参加したので、そのメモです。</p>

<!--more-->


<h2>会場</h2>

<p>「<a href="https://twitter.com/a_matsuda/status/772749215000764417">スピーカーのキャンセルが出たため、初日の朝のキーノートの開始時間が50分遅くなります。</a>」という話があったため、時間に余裕を持って到着できました。</p>

<p>家を出た時は雨は降っていなかったのですが、京都では大雨でした。
(参考: <a href="https://twitter.com/kakutani/status/773680281689530368">https://twitter.com/kakutani/status/773680281689530368</a> )
駅から会場までは天井のある通路で繋がっているので、傘なしでも濡れずにたどり着けました。</p>

<p>会場は広くて、メインホールのテーブル席は全席電源つきという非常に便利な感じでした。
メインホールの座席は座ると前にずれて、立ち上がると後ろに下がる椅子でした。</p>

<h2>Opening</h2>

<ul>
<li>スタッフのうち、つじたさん、 aaron さん、デカ外人さんの紹介</li>
<li>電源が各席にある</li>
<li>メインホールはテーブル席の後ろに椅子だけの席もあるけど、そこも後ろに電源があるらしい</li>
<li>スポンサーブースにコーヒーとお菓子</li>
<li>懇親会のチケットが残り数十枚でラストチャンス</li>
</ul>


<h2>Ruby3 Typing</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/yukihiro_matz.html" title="Ruby3 Typing - RubyKaigi 2016">Ruby3 Typing - RubyKaigi 2016</a></li>
<li>日本語のキーノート</li>
<li>Ruby3</li>
<li>Performance, Concurrency, Typing</li>
<li>それぞれ Shyouhei, Ko1, Matz が話をする</li>
<li>2010s に出てきた言語は静的型言語が多い</li>
<li>静的型がないので Ruby は死んだなどと言われてしまうこともある</li>
<li>TypeScript, Flow, Go, Swift</li>
<li>Microsoft, Facebook, Google, Apple など大企業の言語</li>
<li>テクノロジー (動的型と静的型のような) は振り子のように行ったり来たりしている</li>
<li>Smalltalk → Java → Ruby・JavaScript → Swift・Go → ?</li>
<li>揺り戻しが起きた時に置いて行かれないように (静的型を目指すのではなく) 未来の動的型言語について考える</li>
<li>型とは何か?</li>
<li>学術的には型システム入門 (TAPL) とかあるけど</li>
<li>Duck typing</li>
<li>動けばいい</li>
<li><code>log(dst IO, mesg String)</code> のように静的型指定してしまうと例えば <code>StringIO</code> を渡せない</li>
<li>(スライドのトラブルが発生して、 rabbit 作者によるサポートを受けつつ rabbit を再起動してしまったので、亀がリセットされてしまった。)</li>
<li>Duck typing は内部構造を気にしなくて良い</li>
<li>Lower mental cost in development</li>
<li>Duck typing は未来に対して開かれている</li>
<li>Duck typing は柔軟性が高い</li>
<li>&ldquo;Duck&rdquo; (Ruby の型) は nominal type ではない</li>
<li>&ldquo;Duck&rdquo; は class ではない</li>
<li>&ldquo;Duck&rdquo; は何か</li>
<li>&ldquo;Duck&rdquo; は <em>expected</em> behavior (期待される振る舞い)</li>
<li>期待は私たちの頭の中にある</li>
<li>class による型はあくまでも近似 (approximation) であり足かせになる</li>
<li>Go の interface はかなり良い</li>
<li>Structual Subtyping vs Nominal Subtyping</li>
<li>Duck typing is awesome!</li>
<li>DRY (Don&rsquo;t Repeat Yourself) 原則</li>
<li>冗長性を削ろう</li>
<li>プログラムを書く時にかかなくていいものは削りたい</li>
<li>型指定がなくても ruby のプログラムは動いているので必要ない</li>
<li>むしろ積極的に外すべき</li>
<li>しかし、動的型言語には欠点 (drawback) がある</li>
<li>実行してみないとエラーがわからない</li>
<li>エラーメッセージが親切ではない</li>
<li>Coverage</li>
<li>テストし忘れた部分はいつまでも気づかれない</li>
<li>Less Documentation</li>
<li>書く人は嬉しいが、読む人は困る</li>
<li>コメント (rdoc とか) に結局 (型を) かいている</li>
<li>型は絶対に書きたくない</li>
<li>柔軟性が減るから</li>
<li>ユーザーのためにドキュメントは欲しい</li>
<li>コメントに書く</li>
<li>型アノテーションを書ける言語もある</li>
<li>型チェックを含まない型アノテーションはダメなアイデアだと思う</li>
<li>Mixed/Gradual Typing (一部だけ型指定ができる) is a bad idea</li>
<li>少なくとも Ruby にとっては。</li>
<li>ドキュメントは欲しい</li>
<li>型のある部分とない部分を混ぜたくない</li>
<li>課題があるということは改善の余地がある</li>
<li>未来の Ruby はこれをなんとかしたい</li>
<li>我々はエンジニアなので技術でなんとかしたい</li>
<li>静的型に型推論を足す</li>
<li>型推論は素晴らしい</li>
<li>静的型の柔軟性のなさは型推論とは無関係</li>
<li>静的型の柔軟性がないという問題が解決しないので別のものが必要</li>
<li>Static Typing with Duck-Typing として Go の Structual Subtyping は良い線をいっているが、 interface を書きたくない</li>
<li>そこで型推論をさせてみよう</li>
<li><code>dst should have rite()</code> を <code>dst should have write()</code> に修正 (また亀が戻った)</li>
<li>interface を振る舞いから自動生成 : Soft Typing</li>
<li>型推論された型には名前が付いていない</li>
<li>名前をつけるのは結構なコスト</li>
<li>ぼんやりとしたアイデアがぼんやりとしたアイデアのまま実現できるので、具体化する脳の労力が減る</li>
<li>100% のチェックはできないかもしれない</li>
<li>80% 程度のコンパイル時チェックでも 0% よりは良い</li>
<li>dynamic typing に fallback できる</li>
<li>ad-hoc な型情報も使えるのではないか</li>
<li>gsub, slice, map を期待した a があったとき、そんなクラスはないのでエラーにできる</li>
<li>実行時の情報も使えるのではないか</li>
<li>タイプエラーが起きるようなテストは書かないと思うので、テスト実行時の型情報をとっておいて Type Database としてとっておいて gem として一緒に配布して実行時に使えるのではないか</li>
<li>Type Database がコード補完などにも使えるのではないか</li>
<li>まだ構想段階で動いていない</li>
<li>コンセプト段階</li>
<li>Ruby3 プロジェクトの一部</li>
<li>重要なメッセージ : We Care about YOU</li>
<li>テストがあれば大丈夫という話もあるが</li>
<li>言語の方でもプログラミング体験を改善したい</li>
<li>Ruby3 はいつか? わからない</li>
<li>オープンソースソフトウェア (少なくとも Ruby) にはロードマップや締め切りはない</li>
<li>目標を作る必要が有る</li>
<li>ケネディ大統領が月に行くという少し難しい未来を宣言して、のちに実現された</li>
<li>Soft typing, Ruby3x3, Concurrency</li>
<li>心の中の目標としては次の東京オリンピックの頃には Ruby3 が出てると良いな</li>
<li>みなさんからのアイデアや貢献は大歓迎</li>
<li>前に進み続けたいから (To Keep Moving Forward)</li>
<li>前に進み続けるためにできることはなんでもしたい</li>
<li>Happy Hacking!</li>
<li>質疑応答前に 3 分ほど CM (スポンサーセッション)</li>
</ul>


<h2>Speee さん</h2>

<ul>
<li>会場アンケート 知っている人 : 6割ぐらい</li>
<li><a href="http://speee.jp/">http://speee.jp/</a></li>
<li>現在はほぼ Ruby になった</li>
<li>OSS への貢献へも増えた</li>
<li>OSS Gate workshop がよかった</li>
<li>いろいろなイベントもやっているので興味がある方は <a href="http://speee.connpass.com/">http://speee.connpass.com/</a> の「めんばーになる」</li>
</ul>


<h2>Ruby3 Typing (質疑応答)</h2>

<ul>
<li>まさかの質問なし?</li>
<li>joker1007 さん?: 型情報を全く書かずに型推論だけでできる見込みはあるのか?</li>
<li>伝統的な方法では無理</li>
<li>ad-hoc なものや実行時の型情報でそこそこ実用的なものになる可能性はある</li>
<li>まだ実際に動いているコードはないので、実際には無理でしたということで Ruby3 に入らない可能性はある</li>
<li>誰?: IDE の仕様を参考にできるか?とかいう感じの質問</li>
<li>現在は完全なものはないので参考にしづらい</li>
<li>IDE があるので言語仕様はどうでもいいんだということはしたくない</li>
<li>IDE ありきの言語に Ruby がなることはない</li>
<li>誰?: (質問はよく聞き取れず)</li>
<li>リリースマネージャーもしていない</li>
<li>言語デザイナーをしている</li>
<li>田中哲さん: 今回の話での Soft Typing という言葉の使い方は既存のアカデミックでの用語とは違うので、新しい言葉を考える必要が有るのではないか</li>
<li>Diamondback Ruby というものが昔あった (後で聞いた話によると Diamondback Ruby は速度を目的としたもので、OCaml で実装されたものだったらしい)</li>
<li>Soft Typing という用語はふさわしくないかも</li>
<li>新しい言葉を考えておきます</li>
<li><a href="http://togetter.com/li/1021897" title="&quot;型は絶対書きたくない&quot; &quot;Ruby3は東京オリンピックまでに&quot; Rubyの父Matzによる、「楽しいプログラミング体験を届けるために」 #rubykaigi 2016 Keynote - Togetterまとめ">&quot;型は絶対書きたくない&quot; &quot;Ruby3は東京オリンピックまでに&quot; Rubyの父Matzによる、「楽しいプログラミング体験を届けるために」 #rubykaigi 2016 Keynote - Togetterまとめ</a></li>
</ul>


<h2>アナウンスと Intermission</h2>

<ul>
<li>昼は弁当があるという話</li>
<li>ベジタリアン用の弁当もあるという話</li>
<li>英語で翻訳レシーバーの返却についてアナウンス?</li>
<li>dRuby の slide sponsors が流れていた</li>
</ul>


<h2>dRuby in the last century.</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/m_seki.html" title="dRuby in the last century. - RubyKaigi 2016">dRuby in the last century. - RubyKaigi 2016</a></li>
<li>自己紹介</li>
<li>前座が Matz</li>
<li>dRuby の生い立ち, dRuby の紹介, これから</li>
<li>1999 [ruby-list:15406] 1st dRuby <a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/15406">http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/15406</a></li>
<li>2005 最初の本</li>
<li>2012 (-2014 絶版) 英語の本</li>
<li>2000 Perl/Ruby Conference (Kyoto) この会場</li>
<li>同じ会場で同じ話を</li>
<li>dRuby はオーパーツ (OOPARTS) <a href="https://twitter.com/yugui/status/439412852013551616">https://twitter.com/yugui/status/439412852013551616</a></li>
<li>Before dRuby (BD)</li>
<li>BD8: プロセスをわける必然性のある組み込みシステムからの情報を集めるデーモンと情報を可視化するアプリケーション</li>
<li>BD5: CGI (マイクロサービス的) 時代</li>
<li>BD1: Ruby &amp; shttpsrv に出会う</li>
<li>HTTP を小さなアプリに埋め込んでつないで楽しんでいた</li>
<li>Ruby と Web の世界の翻訳作業が必要な点などが、なんか気に入らない</li>
<li>Ruby ぽく話したい</li>
<li>Ruby のように振舞う分散オブジェクト</li>
<li>RPC ではなく RMI</li>
<li>Ruby のメソッド呼び出しを socket で拡張</li>
<li>簡単通信ライブラリではなく、もっと情緒的な (Ruby 的な) ものをめざした</li>
<li>dRuby ってなに?</li>
<li>分散オブジェクトシステム, プロセス腰にメソッドが呼べる, プロセス間でオブジェクトが送れる</li>
<li>デモ</li>
</ul>


<p>端末1 (oso-matz) で irb を起動:</p>

<pre><code>require 'drb'
DRb.start_service('druby://localhost:54321', {})
DRb.uri
DRb.front
</code></pre>

<p>端末2 (jushi-matz) で irb を起動:</p>

<pre><code>require 'drb'
kvs = DRbObject.new_with_uri('druby://localhost:54321')
kvs['greeting'] = 'Hellow, World.'
</code></pre>

<p>端末1に戻って <code>DRb.front</code> を確認すると <code>{"greeting"=&gt;"Hellow, World."}</code> になっている。</p>

<p>Demo2: 端末2で:</p>

<pre><code>kvs['outlet'] = $stdout
</code></pre>

<p>(<code>DRb.start_service('druby://localhost:54322')</code> のようにこちら側でも <code>DRb.start_service</code> しておかないと <code>DRb::DRbConnError: DRb::DRbServerNotFound</code> になってうまくいかなかった)</p>

<p>端末1で:</p>

<pre><code>DRb.front['outlet'].class
DRb.front['outlet'].puts('Hello, Again.')
</code></pre>

<ul>
<li>なにがおきた?</li>
<li><code>$stdout</code> は <code>Marshal.dump</code> 不可能なので自動的に proxy に取り替えた</li>
<li>永遠に proxy だと値が手に入らないので境界として <code>Marshal.dump</code> を使った</li>
<li>OOP っぽさ</li>
<li>オブジェクトが相互に呼びあえること</li>
<li>block (イテレータ) も同じ仕組みで動く</li>
</ul>


<p>Demo3: Queue:</p>

<p>端末1で:
(<code>Queue</code> は最近の Ruby では本名は <code>Thread::Queue</code> に変わっていた)</p>

<pre><code>queue = Queue.new
DRb.front['queue'] = queue
queue.pop
queue.pop
</code></pre>

<p>端末2で:</p>

<pre><code>queue = kvs['queue']
queue.push(1.0)
queue.push(2.0)
</code></pre>

<ul>
<li>意図したわけではないが Thread 同期メカニズムがそのまま使えた</li>
<li>dRuby が向いている用途がある</li>
<li>Prototyping Twitter</li>
<li>初期は dRuby/Rinda だったらしい : いまは使っていない</li>
<li>自分のサービスも dRuby ではじめて最後には使わなくなることがある : 利用されて効率あげる必要がでてくるから</li>
<li>紹介のまとめ</li>
<li>これから</li>
<li>初期の実装に戻したいところがいくつか</li>
<li>セキュリティっぽいの消したい</li>
<li>ACL, insecure_method &hellip;</li>
<li>dRuby は RMI でメソッド呼び出しの拡張</li>
<li>メソッド呼び出しなので穴だらけで良い</li>
<li>危ないものは危なく見えるべき</li>
<li>UnitTest : API のメソッド単位に書くものなのに、テストケースをストーリーレベルで書くべきだと勘違いしていた</li>
<li>啓蒙する</li>
<li>まずおもしろがってもらう</li>
<li>並行処理の勘所に気づいてもらう</li>
<li>すとうさん</li>
<li>啓蒙活動に興味を持ったというのは、何か心境の変化があったのか?</li>
<li>昨年のライブラリを作れば解決するという話にいらっとした</li>
<li>miyohide さん</li>
<li>啓蒙活動には、るびまに寄稿をするのが良いという話</li>
<li><a href="http://togetter.com/li/1021932" title="突然のライブハンズオン！ 20世紀生まれの分散Ruby実装 dRuby #RubyKaigi #RubyKaigiA - Togetterまとめ">突然のライブハンズオン！ 20世紀生まれの分散Ruby実装 dRuby #RubyKaigi #RubyKaigiA - Togetterまとめ</a></li>
<li><a href="https://speakerdeck.com/m_seki/druby2016" title="dRuby2016">dRuby2016</a></li>
</ul>


<h2>Lunch Break</h2>

<ul>
<li>11:55頃から</li>
<li>弁当の写真を撮り忘れてしまった</li>
<li>食べ終わった後は会場の散策</li>
<li>懇親会のチェックインもしておいた</li>
</ul>


<h2>Who reordered my code?!</h2>

<ul>
<li>次の発表で部屋を移動するのが面倒だったのでメインホールにいた</li>
<li>英語だったのとあまりちゃんと聞けていなかったのでメモなし</li>
<li><a href="http://rubykaigi.org/2016/presentations/pitr_ch.html" title="Who reordered my code?! - RubyKaigi 2016">Who reordered my code?! - RubyKaigi 2016</a></li>
<li>質疑応答: 質問なし</li>
<li><a href="http://togetter.com/li/1021946" title="concurrent-rubyのコアコミッターが語る JRuby + Truffle 並列実行による高速化の試み #RubyKaigi #RubyKaigiA - Togetterまとめ">concurrent-rubyのコアコミッターが語る JRuby + Truffle 並列実行による高速化の試み #RubyKaigi #RubyKaigiA - Togetterまとめ</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li>プロジェクターのテストとして<a href="http://amzn.to/2bUWNxg">プログラミングElixir</a>の宣伝を表示</li>
</ul>


<h2>A proposal of new concurrency model for Ruby 3</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/ko1.html" title="A proposal of new concurrency model for Ruby 3 - RubyKaigi 2016">A proposal of new concurrency model for Ruby 3 - RubyKaigi 2016</a></li>
<li>英語で発表</li>
<li><a href="http://www.atdot.net/~ko1/activities/2016_rubykaigi.pdf">Presentation slide</a></li>
<li><a href="http://www.atdot.net/~ko1/diary/201609.html#d6">日本語 Script</a></li>
<li>Concurrent の発表が多い</li>
<li>Concurrent RubyKaigi</li>
<li>なぜみんな Concurrency 好きか?</li>
<li>なぜマルチスレッドプログラムが難しいのかと Guild という新しいアイデアの発表</li>
<li>Ruby は安全・簡単な方を選んでいる</li>
<li>data race と race condition の話</li>
<li><code>Array#concat</code> とマルチスレッドの挙動</li>
<li>マルチスレッドは難しいという話</li>
<li>ロックが不十分だとバグるし、多すぎるとパフォーマンスに悪影響</li>
<li>他の言語での知見</li>
<li>&ldquo;Guild&rdquo;</li>
<li>1個の Guild の中で同時に動く Thread は1個だけ</li>
<li>オブジェクトの共有方法などの話</li>
<li>Immutable なオブジェクトは共有可能</li>
<li>数値, Symbol, nil/true/false が徐々に frozen になっていた</li>
<li>doc/NEWS-2.0.0:  Fixnums, Bignums and Floats are frozen.</li>
<li>doc/NEWS-2.1.0:  * All symbols are now frozen.</li>
<li>doc/NEWS-2.2.0:  * nil/true/false objects are frozen. [Feature #8923]</li>
<li>&ldquo;こんなこともあろうかと&rdquo;</li>
<li>Guild の説明続き</li>
<li>パフォーマンスの話とか</li>
<li>質疑応答</li>
<li>質問1: 聞き取れず</li>
<li>質問2: Thread との違い?</li>
<li>質問3: sekiさん: <code>Array#concat</code> の問題は解決するのか? (ちゃんと聞き取れなかったので、違うかも)</li>
<li>解決しない</li>
<li>そもそもできないんだから他の方法を考えるんじゃないか</li>
<li>間違った使い方ができないような方法を考えましたという話</li>
<li>質問4: move operation がなんとか (聞き取れず)</li>
<li>move 操作はパフォーマンスのため</li>
<li>他にこういうことをやっている人がいるのでは?</li>
<li>知らない</li>
<li>質問5: たぶんグローバルデータの話</li>
<li>Ruby global data のスライドで説明</li>
<li><a href="http://togetter.com/li/1021975" title="Rubyコアコミッター笹田耕一さん解説 Ruby3のための新しい並列実行モデル Guild #RubyKaigi #RubyKaigiA - Togetterまとめ">Rubyコアコミッター笹田耕一さん解説 Ruby3のための新しい並列実行モデル Guild #RubyKaigi #RubyKaigiA - Togetterまとめ</a></li>
</ul>


<p>ささださんのプレゼンは事前に日本語 Script も公開されていたし、スライドも事前にチェックできたのでよかった。</p>

<p>セッション後の質問を受けていたのを横で聞いていたら、できるだけ 1 Guild 1 Thread で Thread の代わりに Guild を使うようになってほしいという感じらしかった。</p>

<p>スライドでは frozen になったものに Numeric と書いてあったが実際には Rational は frozen ではないのでちょっと違う。</p>

<h2>おやつ休憩</h2>

<ul>
<li>アナウンス</li>
<li>スポンサーブースにおやつがデプロイされている</li>
<li>弁当が少し残っているのでまだお腹が空いているという人はどうぞ</li>
<li>懇親会受付</li>
</ul>


<h2>Isomorphic web programming in Ruby</h2>

<ul>
<li>英語はつらいので日本語のセッションということで Room D にきました</li>
<li>Room D には電源も無線もありませんでした</li>
<li><a href="http://rubykaigi.org/2016/presentations/youchan.html" title="Isomorphic web programming in Ruby - RubyKaigi 2016">Isomorphic web programming in Ruby - RubyKaigi 2016</a></li>
<li>昨年の RubyKaigi 2015 では <a href="https://github.com/youchan/hyalite">https://github.com/youchan/hyalite</a> (React のようなものを Ruby で書ける) の話をした</li>
<li>Menilite というのを作っている</li>
<li>モデルをサーバーとクライアントで共有する</li>
<li>(内容とは関係ないけど、亀がうさぎに比べてかなり進んでいるのは、プレゼン開始時に亀の位置がすでに進んでいたからのように見えた)</li>
<li>デモ</li>
<li>silica というラッパーコマンド</li>
<li>まだ new しかサブコマンドがない</li>
<li>Sinatra と Opal を使ったコードが自動生成</li>
<li>ネットワークがつらいようなので Gemfile の github を参照しているところを path に書き換えてローカルのを参照するようにして bundle install</li>
<li>ライブコーディングは時間がなさそうだったので、あらかじめ git の branch を用意しておいた</li>
<li>しかしライブコーディングをしている</li>
<li>sinatra-activerecord を使っている</li>
<li>migration を毎回書くのは面倒なので silica でサポートしたい</li>
<li><code>git stash -u</code> でライブコーディングした変更を捨ててあらかじめ用意していたものを checkout</li>
<li>ユーザー追加、サインアップ</li>
<li>パスワードは BCrypt で暗号化</li>
<li><code>RUBY_ENGINE</code> による分岐でサーバーサイドだけの処理にする</li>
<li>signup 部分をライブコーディング</li>
<li>youchan, topsecret で signup しようとする</li>
<li><code>BCrypt</code> を typo していて error になったので <code>git stash -u</code> で捨てて、あらかじめ用意していた変更を checkout</li>
<li>時間がなくなってきたので、この後の変更もどんどん checkout しながら紹介</li>
<li>ログインしていなかったらログイン画面に飛ばす処理</li>
<li>ログイン処理</li>
<li>ユーザーごとにアクセス権を設定</li>
<li>セッションをクリアしていないので、ログインに失敗した時に前のユーザーのままだった</li>
<li>デモ終了</li>
<li>なぜ独自のモデルか</li>
<li>GUID : データベースで自動生成されるシーケンス番号の ID はクライアントから使いにくい</li>
<li>access control : すべてのデータがクライアントから見えてしまうとまずい</li>
<li><a href="http://togetter.com/li/1021990" title="このライブコーディングがすごい！ RubyでIsomorphic Webプログラミングを実現する Menilite 紹介 #RubyKaigi #RubyKaigiB - Togetterまとめ">このライブコーディングがすごい！ RubyでIsomorphic Webプログラミングを実現する Menilite 紹介 #RubyKaigi #RubyKaigiB - Togetterまとめ</a></li>
</ul>


<p>ライブコーディングがあったので、 vim を使ってるとか SKK (AquaSKK?) を使ってるとかそういうところも気になりました。</p>

<h2>Intermission</h2>

<ul>
<li>メインホールに移動した</li>
</ul>


<h2>Unifying Fixnum and Bignum into Integer</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/tanaka_akr.html" title="Unifying Fixnum and Bignum into Integer - RubyKaigi 2016">Unifying Fixnum and Bignum into Integer - RubyKaigi 2016</a></li>
<li><a href="https://bugs.ruby-lang.org/issues/12005" title="Unify Fixnum and Bignum into Integer">Unify Fixnum and Bignum into Integer</a> で提案された</li>
<li><code>Fixnum</code> や <code>Bignum</code> という定数は <code>Integer</code> を指すようになる</li>
<li><code>Fixnum</code> や <code>Bignum</code> という定数を参照しているコードでも <code>NameError</code> は起きない</li>
<li>C コードで <code>rb_cFixnum</code> や <code>rb_cBignum</code> を参照しているコードはコンパイルエラーになる</li>
<li>両対応するには <code>RUBY_INTEGER_UNIFICATION</code> マクロで分岐する</li>
<li>前提として <code>Fixnum</code> と <code>Bignum</code> とは何か</li>
<li><code>Integer</code> という抽象クラスとそれを継承した <code>Fixnum</code>　と <code>Bignum</code> というクラスがあった</li>
<li><code>1.class</code> と <code>(2**100).class</code></li>
<li>Ruby 2.4 では <code>Integer</code> だけになる</li>
<li><code>Fixnum</code> の範囲は ILP32, LLP64 (Windows など), LP64, JRuby で違った</li>
<li>portable ではないので基本的には使ってはいけない</li>
<li>Ruby には仕様がある: <a href="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=59579">ISO/IEC 30170:2012</a>, <a href="http://www.jisc.go.jp/app/pager?%23jps.JPSH0090D:JPSO0020:/JPS/JPSO0090.jsp=&amp;RKKNP_vJISJISNO=X3017">JIS X 3017:2011</a></li>
<li>Integer の範囲は unbounded</li>
<li><code>Fixnum</code> と <code>Bignum</code> の定義はしても良い</li>
<li>Ruby 2.3 も Ruby 2.4 も仕様に準拠</li>
<li>仕様の記述者は <code>Fixnum</code> と <code>Bignum</code> は実装の詳細と考えて仕様に入れなかったのではないか</li>
<li>利点</li>
<li><code>Fixnum</code> と <code>Bignum</code> を間違って使うことがなくなる</li>
<li>Ruby を勉強するのが簡単になる</li>
<li>ドキュメントもシンプルになる</li>
<li>シンプルに簡単にもっと数学的になる</li>
<li>欠点: 非互換性</li>
<li><code>Fixnum</code> の間違った使い方の例: <code>lib/rubygems/specification.rb</code>: <code>specification_version.is_a?(Fixnum)</code></li>
<li>Ruby 2.4 では間違った使い方ができなくなる</li>
<li><code>obj.is_a?(Fixnum)</code> は <code>obj.is_a?(Integer)</code> の意味になる</li>
<li>REPL で <code>1.class</code> を実行すると <code>Fixnum</code> になっていたのが <code>Integer</code> になる</li>
<li>Ruby を学ぶのが簡単になる</li>
<li>1 が integer というのは誰でも知っている</li>
<li>1 が <code>Fixnum</code> というのはほとんどの人は知らない (Lisp プログラマーを除く)</li>
<li>教える側にとっても楽になる</li>
<li>教科書がシンプルになる</li>
<li>ドキュメントもシンプルになる</li>
<li><code>Fixnum#foo</code> と <code>Bignum#foo</code> のドキュメントが重複していた</li>
<li><code>ri foo</code> も重複して出ていた</li>
<li>シンプルに簡単にもっと数学的になる</li>
<li>Ruby レベルの非互換</li>
<li><code>Fixnum</code> と <code>Bignum</code> が <code>Integer</code> を参照するようになる</li>
<li><code>NameError</code> は起きない</li>
<li><code>Fixnum == Bignum</code> が <code>true</code> になる</li>
<li><code>1.is_a?(Bignum)</code> が <code>true</code> になる</li>
<li><code>(2**100).is_a?(Fixnum)</code> が <code>true</code> になる</li>
<li><code>Fixnum</code> と <code>Bignum</code> は少なくとも Ruby 2.3 が EOL になるまで削除しない方が良いと思っている</li>
<li><code>Fixnum</code> の範囲が隠れる</li>
<li><code>test/ruby/test_integer_comb.rb</code>: <code>max = 1; max *= 2 while (max-1).class == Fixnum; FIXNUM_MAX = max/2-1</code> が Ruby 2.4 では無限ループに</li>
<li>推奨される解決策: <code>Fixnum</code> の範囲に依存しない</li>
<li>CRuby のみの推奨しない解決策: <code>require 'rbconfig/sizeof'; FIXNUM_MIN = -(1 &lt;&lt; (8 * RbConfig::SIZEOF['long'] - 2)); FIXNUM_MAX = (1 &lt;&lt; (8 * RbConfig::SIZEOF['long'] -2)) - 1</code> (<code>rbconfig/sizeof</code> は Ruby 2.1 から)</li>
<li>JRuby は知らない</li>
<li>使わない方が良いがどうしても必要ならこういう方法もあるという話</li>
<li>メタプログラミングや DSL が壊れる</li>
<li>メタプログラミング</li>
<li><code>mathn.rb</code> が <code>Fixnum</code> と <code>Bignum</code> に定義</li>
<li><code>Integer</code> だけに変更</li>
<li>activesupport <code>NumericWithFormat</code> を prepend</li>
<li><code>Integer</code> だけに変更</li>
<li>DSL</li>
<li>Sequel</li>
<li><code>add_column :column, Bignum</code></li>
<li><code>:Bignum</code> というシンボルを使うようになった</li>
<li>C レベル</li>
<li>利点: なし</li>
<li>欠点: 非互換</li>
<li>Ruby 2.3 での <code>Integer</code> の実装詳細</li>
<li>Ruby 2.4 での <code>Integer</code> の実装詳細</li>
<li>クラス階層が変わっただけ</li>
<li>拡張ライブラリの更新 : <code>rb_class_of(obj) == rb_cFixnum</code> → <code>FIXNUM_P(obj)</code> などの簡単な置き換え</li>
<li>影響のあった拡張ライブラリ : オブジェクトをダンプ/ロードするようなものがほとんどだった</li>
<li>ext/json, msgpack, syck, yajl, oj, ox, ruby-gnome2, etc.</li>
<li>Version Dependencies</li>
<li>Minor version up (1.3.2 to 1.3.3) が better</li>
<li>Major version version up (1.3.2 to 2.0.0) は pessimistic (悲観的な) version dependency <code>(~&gt; 1.3)</code> で問題が起きる</li>
<li>詳細: <a href="https://www.hsbt.org/diary/20160829.html">https://www.hsbt.org/diary/20160829.html</a></li>
<li>利点のほとんどは初心者向け</li>
<li>経験を積んだ Ruby プログラマーには大きな問題ではない</li>
<li>バージョンの非互換の問題</li>
<li>コミッターは具体的にどう支持していたのかという話</li>
<li><a href="http://togetter.com/li/1022003" title="Rubyコミッターが語る Ruby2.4にてFixnumとBignumをIntergerに統合する話 #RubyKaigi #RubyKaigiA - Togetterまとめ">Rubyコミッターが語る Ruby2.4にてFixnumとBignumをIntergerに統合する話 #RubyKaigi #RubyKaigiA - Togetterまとめ</a></li>
<li>発表資料: <a href="http://www.a-k-r.org/d/2016-09.html#a2016_09_08_1">http://www.a-k-r.org/d/2016-09.html#a2016_09_08_1</a></li>
</ul>


<h3>gem の Ruby 本体のバージョン依存関連</h3>

<p>Togetterまとめ によると <a href="http://sue445.hatenablog.com/entry/2016/09/02/121047" title="gemspecにRUBY_VERSIONによるif文書くのは意味がないので今すぐやめるべき">gemspecにRUBY_VERSIONによるif文書くのは意味がないので今すぐやめるべき</a> という話もあるみたいです。</p>

<p>watch している gem だと <a href="https://github.com/sj26/mailcatcher" title="MailCatcher">MailCatcher</a> が間接的に依存している <code>mime-types</code> が 3 になったときに Ruby 2.0 以上が必須になって問題が起きていたということがありました。</p>

<h2>Intermission</h2>

<ul>
<li>そのままメインホールにいた</li>
</ul>


<h2>Ups and Downs of Ruby Internationalization</h2>

<ul>
<li><a href="http://rubykaigi.org/2016/presentations/duerst.html" title="Ups and Downs of Ruby Internationalization - RubyKaigi 2016">Ups and Downs of Ruby Internationalization - RubyKaigi 2016</a></li>
<li>会場アンケート</li>
<li>A-Z 以外の文字を使っている人</li>
<li>US-ASCII 以外を使っている人</li>
<li>UTF-8 以外を使っている人</li>
<li>Ruby のバージョンと Unicode のバージョン</li>
<li>2014: 2.2 7.0.0</li>
<li>2015: 2.3 8.0.0</li>
<li>2016: 2.4 9.0.0</li>
<li><code>upcase</code>, <code>downcase</code>, <code>capitalize</code>, <code>swapcase</code></li>
<li>Ruby 2.3 では US-ASCII 以外の範囲は変換しなかった</li>
<li>Ruby 2.4 では他の文字も変換する</li>
<li>使用例</li>
<li>互換性がない変更が入っているので preview で早めにチェックしてほしいという話</li>
<li>US-ASCII の範囲に限定したい時は <code>upcase :ascii</code> など</li>
<li>変換用データは Unicode から</li>
<li>文字数は保存されない</li>
<li>不可逆</li>
<li>コンテキスト依存</li>
<li>特殊な場合: <code>upcase :turkic</code> の話</li>
<li>特殊な場合: <code>upcase :lithuanian</code> の話</li>
<li>特殊な場合: Case folding (大小畳込み) <code>downcase :fold</code></li>
<li>特殊な場合: Titlecase <code>capitalize</code></li>
<li>実装詳細の話</li>
<li>簡単だがとても大きな <code>tr</code> のようなもの</li>
<li><code>string.c:sym_upcase</code>: <code>String#upcase</code> 相当を呼んでいる</li>
<li><code>string.c:rb_string_upcase</code>: <code>dup.upcase!</code> 相当</li>
<li><code>string.c:rb_string_upcase_bang</code>: 実際の変換をしているのはここ</li>
<li><code>OnigCaseFoldType</code> で変換の種類が決まっている</li>
<li><code>string.c:rb_str_casemap</code></li>
<li>UTF-8 以外の encoding に対応する primitive の話</li>
<li><code>Shift_JIS</code> などの対応は不要?</li>
<li>Oniguruma/Onigmo は folding のデータを持っているので再利用(?)</li>
<li><code>enc/unicode/data/9.0.0/casefold.h</code> の話</li>
<li><code>swapcase</code> は誰も使っていない?</li>
<li>会場に聞いてみると誰も使っていない感じだった。</li>
<li>大文字小文字の合成文字で問題がある</li>
<li>Test-Driven Development</li>
<li>Data-Driven Testing</li>
<li>Character Properties</li>
<li><code>Regexp</code> でほとんど可能</li>
<li>ある文字の script を得るのは不可能</li>
<li>Unicode Normalization</li>
<li>Ruby 2.2 から <code>'string'.unicode_normalize :nfkc</code> がある</li>
<li><a href="http://www.sw.it.aoyama.ac.jp/2016/pub/RubyKaigi/">http://www.sw.it.aoyama.ac.jp/2016/pub/RubyKaigi/</a> と最後に出ていたようだけどまだ公開されていない?</li>
<li><a href="http://togetter.com/li/1022019" title="&quot;Who has used swapcase?&quot; Rubyにおける国際化機能のかなしみ #RubyKaigi #RubyKaigiA - Togetterまとめ">&quot;Who has used swapcase?&quot; Rubyにおける国際化機能のかなしみ #RubyKaigi #RubyKaigiA - Togetterまとめ</a></li>
</ul>


<p>具体例に出てくる文字が入力できないし、英語も聞き取れないしで、あんまりメモが取れなかったです。</p>

<h2>見ていなかったセッションなどの Togetter まとめ</h2>

<ul>
<li><a href="http://togetter.com/li/1021880" title="&quot;この悪天候… 最高のカンファレンス日和！&quot; &quot;会場広い！&quot; &quot;Wi-Fiはやくきてくれーっ！&quot; #RubyKaigi 2016 オープニングまで - Togetterまとめ">&quot;この悪天候… 最高のカンファレンス日和！&quot; &quot;会場広い！&quot; &quot;Wi-Fiはやくきてくれーっ！&quot; #RubyKaigi 2016 オープニングまで - Togetterまとめ</a></li>
<li><a href="http://togetter.com/li/1021901" title="Ruby on Erlang！！！ errubyの紹介 #RubyKaigi #RubyKaigiB - Togetterまとめ">Ruby on Erlang！！！ errubyの紹介 #RubyKaigi #RubyKaigiB - Togetterまとめ</a></li>
<li><a href="http://togetter.com/li/1021953" title="DSLで記述できるmRuby製コンテナ haconiwa ！ その開発動機とは #RubyKaigi #RubyKaigiB - Togetterまとめ">DSLで記述できるmRuby製コンテナ haconiwa ！ その開発動機とは #RubyKaigi #RubyKaigiB - Togetterまとめ</a></li>
<li><a href="http://togetter.com/li/1021974" title="【Unityちゃん】らくらくシェーダコーディング！ mrubyで実装するGLSLジェネレータ #RubyKaigi #RubyKaigiB - Togetterまとめ">【Unityちゃん】らくらくシェーダコーディング！ mrubyで実装するGLSLジェネレータ #RubyKaigi #RubyKaigiB - Togetterまとめ</a></li>
<li><a href="http://togetter.com/li/1021993" title="JRubyにおけるString実装高速化 Rope 紹介 #RubyKaigi #RubyKaigiA - Togetterまとめ">JRubyにおけるString実装高速化 Rope 紹介 #RubyKaigi #RubyKaigiA - Togetterまとめ</a></li>
<li><a href="http://togetter.com/li/1022009" title="Windows環境にて如何にしてマルチプロセスサーバを実現するか fluentd・ServerEngine実装の紹介 #RubyKaigi #RubyKaigiB - Togetterまとめ">Windows環境にて如何にしてマルチプロセスサーバを実現するか fluentd・ServerEngine実装の紹介 #RubyKaigi #RubyKaigiB - Togetterまとめ</a></li>
<li><a href="http://togetter.com/li/1022022" title="【超満員】クックパッド導入事例 Dockerでスケールするジョブキューシステム【登壇者混乱】 #RubyKaigi #RubyKaigiB - Togetterまとめ">【超満員】クックパッド導入事例 Dockerでスケールするジョブキューシステム【登壇者混乱】 #RubyKaigi #RubyKaigiB - Togetterまとめ</a></li>
</ul>


<h2>懇親会</h2>

<p>同じ国立京都国際会館の中のさくらフロアで RubyKaigi 2016 Official Party がありました。</p>

<p>ほとんど<a href="https://github.com/rurema">るりま</a>関連の話をしていただけで終わってしまった感じでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[require './file'とrequire_relative 'file'の違い]]></title>
    <link href="http://blog.n-z.jp/blog/2016-07-26-require-relative.html"/>
    <updated>2016-07-26T21:16:07+09:00</updated>
    <id>http://blog.n-z.jp/blog/require-relative</id>
    <content type="html"><![CDATA[<p>最近 Debian の Perl が <code>CVE-2016-1238</code> (<a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=588017" title="#588017">#588017</a>) で更新されました。
似たような変更は Ruby だと <a href="https://www.ruby-lang.org/ja/news/2010/08/18/ruby-1-9-2-is-released/">1.9.2 から <code>.</code> が <code>$:</code> (<code>$LOAD_PATH</code>) から削除された</a>ということがありました。
そして、明記はされていませんが <code>require_relative</code> が推奨されるようになったようです。</p>

<!--more-->


<h2><code>require './file'</code> と <code>require_relative 'file'</code> の違い</h2>

<p><code>/var/tmp</code> と <code>/tmp</code> に確認用のファイルを以下のように準備して実行してみました。</p>

<pre><code>$ head main.rb require.rb require_relative.rb /tmp/require.rb /tmp/require_relative.rb
==&gt; main.rb &lt;==
require './require'
require_relative 'require_relative'

==&gt; require.rb &lt;==
p __FILE__

==&gt; require_relative.rb &lt;==
p __FILE__

==&gt; /tmp/require.rb &lt;==
p __FILE__

==&gt; /tmp/require_relative.rb &lt;==
p __FILE__
$ ruby main.rb
"/var/tmp/require.rb"
"/var/tmp/require_relative.rb"
$ cd /tmp
$ ruby /var/tmp/main.rb
"/tmp/require.rb"
"/var/tmp/require_relative.rb"
</code></pre>

<p>結果を見ればわかるように <code>require './file'</code> はカレントディレクトリがどこなのかの影響を受けます。</p>

<p>このような書き方を使っていると <code>$LOAD_PATH</code> から <code>.</code> が取り除かれていても (Windows の) DLL hijacking vulnerability のような脆弱性の原因になるため、
<code>require_relative</code> を使う方が望ましいということになります。</p>

<h2>require_relative の歴史</h2>

<p>いつから使えるようになったのか調べたので、ついでにメモしておきます。</p>

<ul>
<li>ruby 1.9.0-1 で <code>lib/require_relative.rb</code> が追加され、 <code>require 'require_relative'</code> すれば <code>require_relative</code> が使えるようになる。</li>
<li>ruby 1.9.0-2 で <code>lib/require_relative.rb</code> から <code>prelude.rb</code> (ruby 本体に組み込まれて実行開始時に自動実行されるファイル) に移動して <code>require 'require_relative'</code> なしで <code>require_relative</code> が使えるようになる。</li>
<li>ruby 1.9.2 で <code>doc/NEWS</code> に <code>Kernel#require_relative</code> が載る。 <code>require_relative</code> が <code>prelude.rb</code> から C 実装に置き換えられる。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第72回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2016-05-07-rubykansai72.html"/>
    <updated>2016-05-07T13:42:09+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai72</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/43253" title="第72回 Ruby関西 勉強会">第72回 Ruby関西 勉強会</a>
に参加しました。
アプローズタワーというビルに入るのは初めてだったので、どこから上に上がるのか、ちょっとわかりにくかったです。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>オープニング</h2>

<ul>
<li>会場説明</li>
<li>懇親会は事前に企画していなかったので 15 時ぐらいまでに受付で募集してその状況次第で決定</li>
<li>スポンサーセッション (西谷さん)</li>
</ul>


<h2>低レイヤから考えるrubyプログラミング</h2>

<ul>
<li>よしだあつしさん</li>
<li>自己紹介は時間がないので省略して後で</li>
<li>メモリ上のクラスやオブジェクト</li>
<li>RClass 構造体や RObject 構造体などの説明</li>
<li>ruby のメモリ利用の例</li>
<li>メソッド呼び出し</li>
<li>下のレイヤーを勉強すると理解が深まる</li>
<li>時間があったので自己紹介</li>
<li><a href="https://twitter.com/yalab">https://twitter.com/yalab</a></li>
<li><a href="http://shop.oke-ya.com/">http://shop.oke-ya.com/</a></li>
<li><a href="https://www.makuake.com/project/oke-ya/">https://www.makuake.com/project/oke-ya/</a></li>
<li><a href="https://github.com/yalab">https://github.com/yalab</a></li>
<li><a href="http://www.slideshare.net/yalab/ruby-61765227">低レイヤから見たrubyプログラミング</a></li>
</ul>


<h2>Wakayama.rb発のmrubyボード「GR-CITRUS」の使い方</h2>

<ul>
<li>Wakayama.rb のたろサさん</li>
<li>今は Mac や Windows 8, 10 で動かないので Windows 7 でしか動かない状態 (シリアルのドライバーの問題)</li>
<li>Wakayama.rb の活動報告</li>
<li>GR-CITRUS</li>
<li>ピンク色の基盤</li>
<li>GR = がじぇっとるねさす</li>
<li>CITRUS (シトラス) = 和歌山っぽい名前</li>
<li>秋月電子通商販売予定 (8 月)</li>
<li>GR-CITRUS の使い方</li>
<li><a href="https://github.com/wakayamarb/wrbb-v2lib-firm">https://github.com/wakayamarb/wrbb-v2lib-firm</a></li>
<li>firmware/citrus_sketch.bin を書き込む</li>
<li>開発環境 Rubic</li>
<li>chrome アプリなので簡単インストール</li>
<li>GR-CITRUS のライブラリ紹介</li>
<li>動作デモ</li>
<li><a href="http://www.slideshare.net/MinaoYamamoto/grcitrusruby">GR-CITRUS搭載のRubyファームウェアの説明</a></li>
<li>WA-MIKAN (みかんボード)</li>
<li>WiFi 通信ボード</li>
<li>Linux では動くかどうか試してないのでわからない</li>
</ul>


<h2>休憩</h2>

<ul>
<li><a href="http://railsgirls.com/osaka">Rails Girls Osaka #3</a> 2016年6月18日-19日</li>
<li><a href="http://rubykaigi.org/2016">RubyKaigi 2016</a> 2016年9月8日(木)-10日(土)</li>
</ul>


<h2>今すぐRailsアプリを多言語化してみよう</h2>

<ul>
<li><a href="https://twitter.com/youcune">https://twitter.com/youcune</a></li>
<li><a href="https://youcune.com/">https://youcune.com/</a></li>
<li><a href="http://yurie.sexy">http://yurie.sexy</a></li>
<li><a href="http://ur3.jp/yurie-blog">http://ur3.jp/yurie-blog</a></li>
<li><a href="https://speakerdeck.com/youcune/i18n-your-rails-application">いますぐRailsアプリを英語化してみよう / i18n your Rails application</a></li>
</ul>


<h2>Ruby on Rails もくもく会をほぼ毎週開催してきてわかった事</h2>

<ul>
<li>八木さん</li>
<li>もくもく会開催の経緯</li>
<li>感じたこと</li>
<li>起こったこと</li>
<li>みんなピザが好き</li>
<li>今後やっていきたいこと</li>
<li>なぜ?</li>
<li><a href="https://sou-meetup.doorkeeper.jp/">https://sou-meetup.doorkeeper.jp/</a></li>
</ul>


<h2>Github Pages で独自ドメインのサイトを作る</h2>

<ul>
<li>HDMI で接続できなかったので画面を OHP でうつして表示</li>
<li><a href="https://twitter.com/107steps">https://twitter.com/107steps</a></li>
<li><a href="https://ruby-maizuru.doorkeeper.jp/">Ruby舞鶴</a></li>
<li>Jekyll</li>
<li><a href="https://pages.github.com/">GitHub Pages</a></li>
<li>Google Analytics</li>
<li><a href="https://github.com/masoo/masoo.jp/blob/master/_config.yml#L8"><code>_config.yml</code></a> に変数を作り true の時だけ<a href="https://github.com/masoo/masoo.jp/blob/master/_includes/google_analytics.html">有効にした</a></li>
<li>Cloudflare の導入</li>
<li><a href="https://gtmetrix.com/">https://gtmetrix.com/</a> で B 判定が A 判定に</li>
<li>https 導入</li>
<li>Cloudflare で <a href="https://support.cloudflare.com/hc/en-us/articles/200170416-What-do-the-SSL-options-mean-">flexible SSL</a></li>
<li>Accelerated Mobile Page の対応 (失敗)</li>
<li><a href="https://github.com/juusaw/amp-jekyll">https://github.com/juusaw/amp-jekyll</a></li>
<li><a href="https://jekyllrb.com/docs/plugins/">https://jekyllrb.com/docs/plugins/</a></li>
<li><a href="http://gosyujin.github.io/2013/05/21/jekyll-plugin-githubpages/">GitHub PagesでJekyllプラグインを使えるようにするには…</a></li>
<li><a href="http://107steps.la.coocan.jp/">http://107steps.la.coocan.jp/</a></li>
<li>質疑応答</li>
<li>jekyll の <code>--config</code> オプションで <code>_config.yml</code> の設定を上書き設定できるのを使うのが良いのでは。</li>
<li>jekyll, middleman, Hugo などがある中で jekyll を選んだ理由は?</li>
<li>最初に見かけたのが jekyll だったから</li>
<li>発表資料: <a href="http://www.slideshare.net/107steps/github-pages-61765408">Github pagesで独自ドメインのサイトを作る</a></li>
</ul>


<h2>関西Rubyコミュニティー紹介</h2>

<ul>
<li><a href="https://twitter.com/ogomr">ogomr さん</a></li>
<li><a href="http://rubykansai.github.io/kansai-ruby-community/" title="関西 Ruby コミュニティー 紹介">関西 Ruby コミュニティー 紹介</a></li>
<li><a href="https://github.com/ruby-no-kai/official/wiki/RegionalRubyistMeetUp" title="地域Rubyの会">地域Rubyの会</a></li>
</ul>


<h2>Ruby 初級者向けレッスン - 文字列</h2>

<ul>
<li><a href="https://github.com/higaki/learn_ruby_kansai_72">https://github.com/higaki/learn_ruby_kansai_72</a></li>
</ul>


<h2>クロージング</h2>

<ul>
<li><a href="http://railsgirls.com/osaka">Rails Girls Osaka #3</a> 2016年6月18日-19日</li>
<li><a href="http://rubykaigi.org/2016">RubyKaigi 2016</a> 2016年9月8日(木)-10日(土)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devise で電子メールアドレスのドメイン部分を省略してもログインできるようにする]]></title>
    <link href="http://blog.n-z.jp/blog/2016-04-13-devise-default-domain.html"/>
    <updated>2016-04-13T21:29:43+09:00</updated>
    <id>http://blog.n-z.jp/blog/devise-default-domain</id>
    <content type="html"><![CDATA[<p>社内向けアプリケーションのように、特定のドメインのユーザーがほとんどの場合、メールアドレスの全体を入力させるのは、余計な手間をしいていることが多いです。</p>

<p>そこで省略可能にするように変更しました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>ruby 2.2.4</li>
<li>rails 4.2.6</li>
<li>devise 3.5.6</li>
<li>warden 1.2.6</li>
</ul>


<h2>config/initializers/devise.rb での設定</h2>

<p>直接は関係ないですが、 <code>config/initializers/devise.rb</code> では以下のような感じの設定でユーザー登録できるメールアドレスのドメインを制限しています。</p>

<p>特殊用途に別ドメインのユーザーを登録する必要があったので、そこは <code>|</code> (or) で繋げて許可しています。</p>

<pre><code class="ruby config/initializers/devise.rb">  config.email_regexp = /\A[\w+\-.]+@example\.co\.jp\z\|\Aspecial@example\.com\z/i
</code></pre>

<h2>User クラスへの追加</h2>

<p><a href="https://github.com/plataformatec/devise/wiki/How-To:-Allow-users-to-sign-in-using-their-username-or-email-address">How To: Allow users to sign in using their username or email address</a> を参考にして <code>User.find_first_by_auth_conditions(warden_conditions)</code> を定義すれば良いということがわかったので、以下のように定義しました。</p>

<pre><code class="ruby app/models/user.rb">  def self.find_for_database_authentication(warden_conditions)
    if /@/ =~ warden_conditions[:email]
      super
    else
      super(warden_conditions.merge(email: "#{warden_conditions[:email]}@example.co.jp"))
    end
  end
</code></pre>

<p>メールアドレス全体が入力された時 (<code>@</code> を含む時) はデフォルトの挙動をそのまま使い、省略された時はデフォルトのドメイン (例では <code>example.co.jp</code>) を補ってデフォルトの挙動を呼び出すようにしました。</p>
]]></content>
  </entry>
  
</feed>
