<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rubykansai | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/rubykansai/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2018-01-22T21:36:34+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第80回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2018-01-13-rubykansai80.html"/>
    <updated>2018-01-13T22:13:59+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai80</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/69011">第80回 Ruby関西 勉強会</a> に参加しました。</p>

<!--more-->


<p>以下、メモです。</p>

<h2>会場</h2>

<p>railsdm できたことのある Aiming さんが会場でした。</p>

<h2>オープニング</h2>

<p>会場案内など。</p>

<h2>mruby搭載ボードGR-CITRUSの新しい開発環境の紹介 @momoonga</h2>

<ul>
<li>GR-CITRUS : Ruby プログラム</li>
<li>WA-MIKAN : Wi-Fi 通信</li>
<li>SAMBOU-KAN : モーター制御 が増えた</li>
<li>GR-CITRUS 開発環境 : Visual Studio Code 拡張の Rubic というのが増えた</li>
<li>mrbgem の組み合わせのバリエーションが選べる</li>
<li>Rubic のデモ</li>
<li>WA-MIKAN のデモ</li>
<li>SAMBOU-KAN のデモ</li>
<li>「RubyRobo 192.168.4.1」という SSID で接続先 IP アドレスがわかるようになっていた</li>
<li>WiFi 接続して操作はうまくいかなかった</li>
<li>リリース</li>
<li><a href="https://github.com/wakayamarb/wrbb-v2lib-firm/blob/master/rubic-repository.json">https://github.com/wakayamarb/wrbb-v2lib-firm/blob/master/rubic-repository.json</a></li>
<li>Release に data.zip</li>
<li><p>Rubic の方にリポジトリを追加してもらうと、後は Release を自由に増やしていける</p></li>
<li><p>質疑応答</p></li>
<li>Q: どこで買える?</li>
<li>A: 秋月, 独自のネットショップ, 大阪だと共立電子</li>
<li>SAMBOU-KAN は扱ってもらえてないので、個人のみ</li>
</ul>


<h2>self を考える @yalab</h2>

<ul>
<li>発表資料: <a href="https://www.slideshare.net/yalab/self-86099114">https://www.slideshare.net/yalab/self-86099114</a></li>
<li><a href="https://twitter.com/yalab/status/948112876027256832">https://twitter.com/yalab/status/948112876027256832</a> rubyでプログラミングされてる方に質問です。selfというものを</li>
<li>正式には、レシーバーを指定しないではなく、レシーバーを省略した</li>
<li>いろんな場所での self</li>
<li>private メソッドは <code>self.</code> をつけて呼ぶことができない (<code>self.puts "hoge"</code> とか)</li>
<li>irb の中で <code>irb "a"</code> でサブ irb に入って self に色々きいてみる</li>
<li><code>self.class</code> とか</li>
<li><code>self.methods.grep /plu/</code> (String にしなくても grep できる)</li>
<li><code>self.method(:pluralize).source_location</code> (Active Support の場所がでてくる)</li>
<li>質疑応答</li>
<li>Q: self の由来は?</li>
<li>A: たぶん Smalltalk 由来</li>
<li>Q: あえて self をつけたい場合は?</li>
<li>A: <code>self.hoge=</code> を呼びたいときとか</li>
<li><code>self.hoge=</code> は private でも呼べる (<code>self.</code> を省略するとローカル変数への代入になるため)</li>
</ul>


<p>protected でも同じ:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% irb &ndash;simple-prompt -r irb/completion&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;class A; protected def hoge=(hoge);end;end
</span><span class='line'>=&gt; A
</span><span class='line'>irb A.new
</span><span class='line'>self.hoge=:hoge
</span><span class='line'>=&gt; :hoge
</span><span class='line'>^D
</span><span class='line'>=&gt; #&lt;IRB::Irb: @context=#&lt;IRB::Context:0x00007fcec08c4ad8&gt;, @signal_status=:IN_EVAL, @scanner=#&lt;RubyLex:0x00007fcec08cce68&gt;&gt;
</span><span class='line'>A.new.hoge = :hoge
</span><span class='line'>NoMethodError: protected method `hoge=&lsquo; called for #&lt;A:0x00007fcec08a5318&gt;</span></code></pre></td></tr></table></div></figure></p></blockquote></blockquote>

<ul>
<li>Q: <code>class &lt;&lt; self</code> とは?</li>
<li><p>A: <code>class &lt;&lt; obj</code> で obj の特異メソッドが定義できる話</p></li>
<li><p>twitter からの参考情報:</p></li>
<li><a href="https://qiita.com/jnchito/items/451018811842c2631e1e">privateメソッドをレシーバ付きで呼び出せるケース - Qiita</a></li>
<li><a href="https://gist.github.com/sunaot/8682795"><code>class &lt;&lt; self</code> によるクラスメソッドの定義のイディオムの説明とその背景にある特異クラスのかんたんな解説</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li>追加情報:</li>
<li><a href="http://koseki.hatenablog.com/entry/20080125/rubysetter">Rubyのsetterメソッドは特別扱いされる。 - こせきの技術日記</a></li>
<li>Thu Feb 20 04:07:06 2003 からなので <a href="https://gist.github.com/unak/3038095">The History of Ruby</a> と見比べると 2003-08-04 1.8.0 から。</li>
</ul>


<h2>プロを目指す人のための例外処理（再）入門 @jnchito</h2>

<ul>
<li>発表資料: <a href="https://speakerdeck.com/jnchito/number-rubykansai-2018-01-13">https://speakerdeck.com/jnchito/number-rubykansai-2018-01-13</a></li>
<li>西脇から高速バスで2時間</li>
<li>例外と例外処理についておさらい</li>
<li>「ハンマーを持つ人にはすべてが釘に見える」</li>
<li>本当にあった怖い話</li>
<li>例外を握りつぶしていた例</li>
<li>例外処理は使い方を間違えると、害の方が大きくなる</li>
<li>できることと、やっていいことは異なる</li>
<li>原則は rescue しない</li>
<li>例外処理のバッドプラクティス</li>
<li>例外の握りつぶし</li>
<li>Exception を rescue (普通は StandardError で良い)</li>
<li>begin と rescue の範囲が広い</li>
<li>例外クラスを指定しないと NameError や NoMethodError まで捕捉されてしまう</li>
<li>例外処理をテストしない</li>
<li>ネットの記事には要注意 (Exception を rescue しているものとか多いらしい)</li>
<li>例外処理のベストプラクティス</li>
<li>原則として rescue しない</li>
<li>ログに残したり通知したりする</li>
<li>対象を絞り込む (<code>begin; Date.new(year, month, day); rescue ArgumentError; nil; end</code>)</li>
<li>この例なら <code>Date.valid_date?</code> があるので例外処理を使わない書き方ができる</li>
<li>例外処理もテストする</li>
<li>高度なトピック</li>
<li>業務エラーとシステムエラーの区別をすべき</li>
<li>業務エラーには原則として例外を使わない (rails の <code>if @model.save</code> とか)</li>
<li>例外処理をなくしても業務エラーに対処できるか?</li>
<li>使わない実装例: <code>all_success &amp;=</code> (ロールバックも考慮すべき)</li>
<li>システムエラーは原則としてフレームワークなどの共通処理に任せる</li>
<li>例外処理とロールバックの関係</li>
<li>「アトミック操作は何か」を常に意識する</li>
<li>Rails で複数のレコードを同時に更新する場合: <code>transaction do ... end</code> と業務エラー時に <code>raise ActiveRecord::Rollback</code> で明示的にロールバック</li>
<li>攻めの例外</li>
<li>予期せぬ条件分岐で例外を発生させる</li>
<li><code>else</code> で矛盾する可能性のある値を返すのもバグの元</li>
<li>ありえないエラーには強気で (<code>transaction</code> の中で普通はエラーにならない <code>update!</code> を使ってダメならシステムエラー)</li>
<li>Q: <code>&amp;=</code> は <code>&amp;&amp;=</code> の方が良いのでは?</li>
<li>A: 良さそう</li>
<li>Q: 素人は rescue すんな!! は他のフレームワークにもあてはまる?</li>
<li>A: rails 以外 ruby 以外でもフレームワークに共通処理があるはずなので、あてはまるはず</li>
</ul>


<h2>Ruby 2.5.0 の主な変更点 @znz</h2>

<p>発表資料としては特に用意せずに <a href="https://docs.ruby-lang.org/ja/latest/doc/news=2f2_5_0.html">https://docs.ruby-lang.org/ja/latest/doc/news=2f2_5_0.html</a> をみながら気になった点を話しました。</p>

<p>最初に <a href="https://slide.rabbit-shocker.org/">Rabbit Slide Show</a> の過去の発表資料から適当に自己紹介のページだけ開いておいて、自己紹介をした後は、
<a href="https://www.ruby-lang.org/ja/news/2017/12/25/ruby-2-5-0-released/">Ruby 2.5.0 リリース</a> をみながら色々話をして、
時間があるだけ<a href="https://docs.ruby-lang.org/ja/2.5.0/doc/news=2f2_5_0.html">NEWS for Ruby 2.5.0</a>をみながら色々話をしていました。</p>

<h2>GitLab にコントリビュート @ogomr</h2>

<ul>
<li>発表資料: <a href="https://speakerdeck.com/ogom/contributing-to-gitlab-with-oss-gate">https://speakerdeck.com/ogom/contributing-to-gitlab-with-oss-gate</a></li>
<li>Contributing to GitLab with OSS Gate</li>
<li>(ギットラブと呼んでいる)</li>
<li>chef cookbook → docker</li>
<li>mac だと遅い</li>
<li>GDK = GitLab Development Kit</li>
<li>OSS 開発に参加するには?</li>
<li>フィードバック</li>
<li>ユーザーとして OSS を使う</li>
<li>気づいたことを開発元にフィードバック</li>
<li><a href="https://about.gitlab.com/installation/">https://about.gitlab.com/installation/</a></li>
<li>SSL も Let&rsquo;s Encrypt でいける</li>
<li><a href="https://qiita.com/ogomr/items/238d8649b36bcc8c14ba">3Stepで Let’s Encrypt の保護された GitLab を構築する</a></li>
<li>GitLab 開発環境構築も GitLab Development Kit で簡単にできる</li>
<li><p><a href="https://qiita.com/ogomr/items/cc404bf9373408663b11">GitLab Development Kit で OSS開発 に参加する for MAC 2017</a></p></li>
<li><p>CONTRIBUTING を参考にして開発元にわかりやすいように書く</p></li>
<li>適切な場所に報告する: GitLab は gitlab.com の issues</li>
<li>一緒に体験しましょう</li>
<li><p><a href="https://oss-gate.doorkeeper.jp/events/69160">OSS Gate大阪ワークショップ2018-03-10</a></p></li>
<li><p>GitLab ってどんな技術で動いているの?</p></li>
<li><a href="https://docs.gitlab.com/ce/development/architecture.html">GitLab Architecture Overview</a></li>
<li><a href="https://docs.gitlab.com/ce/development/fe_guide/index.html">Frontend Development Guidelines</a></li>
<li>Vue.js を使っている</li>
<li>gdk run</li>
<li>Gitlab Workhorse : Smart reverse proxy, language Go</li>
<li>Gitaly : Git RPC (Remote procedure call) service, language: Ruby, Go</li>
<li>GitLab Shell</li>
<li>GitLab Rails Web (unicorn)</li>
<li>GitLab Rails Background Jobs (sidekiq)</li>
<li>GitLab Frontend Web (webpack)</li>
<li>GitLab Community Edition の依存パッケージ: Gmefile.lock 226, yarn.lock 1098</li>
<li>翻訳のイシューはマージされやすい <a href="https://github.com/mperham/sidekiq/pull/3720">https://github.com/mperham/sidekiq/pull/3720</a></li>
<li>過去の翻訳がいまいちだったと感じたので変更した例</li>
</ul>


<h2>休憩</h2>

<p>ちょっと用事があったので、外出。</p>

<h2>Ruby初級者向けレッスン 64回 - クラス @higaki</h2>

<p>グループワークをしている途中で戻ってきました。</p>

<h2>クロージング</h2>

<p>告知など</p>

<ul>
<li>2/10(土)に大阪(日本橋)で GR-CITRUS などのミニハッカソン</li>
<li><a href="https://dddrb.doorkeeper.jp/">https://dddrb.doorkeeper.jp/</a> でプロを目指す人のためのRuby入門 言語仕様からテスト駆動開発・デバッグ技法まで 読書会の第2回を2月に予定</li>
<li><a href="https://oss-gate.doorkeeper.jp/events/69170">OSS Gate大阪ミートアップ for React</a></li>
<li>7月中頃か8月中頃にRubyビジネス推進協議会のイベントが予定されていて、その翌日にRuby関西でもちょっと大きめの勉強会 (関西 RubyKaigi になるか第n回 Ruby関西 勉強会になるかどうかは未定) をする予定なので、スタッフ募集 (興味がある方は <a href="https://rubykansai.doorkeeper.jp/">Ruby関西のdoorkeeper</a> の問い合わせからどうぞ)</li>
<li>今回の会場の <a href="https://www.doorkeeper.jp/%E4%BC%9A%E5%A0%B4/aiming-osaka">IT勉強会の会場 » Aiming 大阪スタジオ</a> の紹介</li>
</ul>


<h2>懇親会</h2>

<p>懇親会は特に事前の募集とかはなく、会場に残ってもらって一緒に移動という感じでした。
実際にいってみると cuzic さんが予想で予約した人数でぴったりだったようでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第79回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-10-07-rubykansai79.html"/>
    <updated>2017-10-07T14:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai79</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/65609">第79回 Ruby関西 勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<p>今回は amagasakirb でよく来ていた尼崎市立小田公民館でした。</p>

<p>プロジェクターは 800x600 でした。</p>

<h2>How to specify <code>frozen_string_literal: true</code></h2>

<p>発表資料は RubyKaigi 2017 で使ったものと同じで、 <a href="https://github.com/znz/rubykaigi2017-frozen_string_literal">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-how-to-specify-frozenstringliteral-true/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/how-to-specify-frozenstringliteral-true">slideshare</a>, <a href="https://speakerdeck.com/znz/how-to-specify-frozen-string-literal-true">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-rubykaigi2017-frozen_string_literal">RubyGems</a> にあげているものを、 <code>allotted-time</code> を 5m から 10m に変更して使いました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-frozen_string_literal/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykaigi2017-frozen_string_literal/" title="How to specify `frozen_string_literal: true`">How to specify `frozen_string_literal: true`</a>
</div>


<h2>西谷さんの文書管理の話</h2>

<ul>
<li>会場アンケート: 初参加の人が多かった</li>
<li>OSS Gate で rubocop にバグ報告したら直してもらえた <a href="https://github.com/bbatsov/rubocop/issues/4644">https://github.com/bbatsov/rubocop/issues/4644</a></li>
<li><a href="https://ja.wikipedia.org/wiki/%E5%8F%8C%E6%9B%B2%E5%89%B2%E5%BC%95">双曲割引</a></li>
<li>今18万円もらうか、1年後に20万円もらうか</li>
<li>2年後に18万円もらうか、3年後に20万円もらうか</li>
<li>マシュマロテスト</li>
<li>既知感</li>
<li>記憶

<ul>
<li>記述記憶</li>
<li>非記述記憶

<ul>
<li>身体的記憶</li>
<li>経験記憶</li>
<li>場所の記憶</li>
</ul>
</li>
</ul>
</li>
<li>文書管理</li>
<li>文書管理の原則: 決める, 見える, tight binding, 利用する</li>
<li>会場に質問 → markdown や org-mode でメモしている人がいた<!-- e-文書法 関連の仕事をしているという人がいた --></li>
<li>おすすめの本は? → <a href="http://amzn.to/2hT6Qdq">野口 悠紀雄の「超」整理法</a>, あとはだいたい失敗している</li>
<li>日付で整理している人は多い</li>
</ul>


<h2>休憩</h2>

<ul>
<li>14:45 まで休憩</li>
</ul>


<h2>もう放置しない！画面遷移図の作り方</h2>

<ul>
<li>今までの発表中に急遽発表資料を作った</li>
<li>Sky Grid の山本さん</li>
<li>西谷さんのところの卒業生</li>
<li>急いでショッピングサイトを作っていて、急遽画面遷移が必要になった</li>
<li>移動中に UI Flows というのをみつけた</li>
<li>手書き or ホワイトボード ? (or Excel ?)</li>
<li>おうおうにして放置される</li>
<li>guiflow というものをみつけた</li>
<li><a href="https://qiita.com/hirokidaichi/items/ff54a968bdd7bcc50d42">もう保守されない画面遷移図は嫌なので、UI Flow図を簡単にマークダウンぽく書くエディタ作った</a></li>
<li>質疑応答</li>
<li>rails なら routes から自動生成できないか?</li>
<li>画面遷移図を先に作るのなら無理そう</li>
<li>漏れをなくすよりも主要な遷移だけにしたい?</li>
<li>feature テストからならできそう?</li>
</ul>


<h2>RubyKaigi 2017 のキーノート紹介</h2>

<ul>
<li>なかださんの発表</li>
<li>事務処理できる人がいなくなった</li>
<li>概要</li>
<li>Subversion を使っていて、なぜ Git を使わないのかという話</li>
<li>新機能/課題の管理: Redmine で管理している</li>
<li>開発者会議: 月1回</li>
<li>Ruby のビルドの仕方</li>
<li>バグフィックスの事例</li>
<li>Ruby は「簡単な文法」だと「錯覚」させている</li>
<li><a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/50578">[ruby-list:50578] [質問] 変数pが定義されている時のabsの動作について</a></li>
<li><code>String#intern</code> と refinements の話</li>
<li>Ruby 2.5 の新機能の話</li>
<li>右代入についても話題になっている</li>
<li>感想: もっと「Rubyを」いじってね、ということだと思った</li>
<li><a href="https://codeiq.jp/magazine/2017/09/53932/">Rubyのなかを覗いてみよう！「Cookpad Ruby Hack Challenge」に参加してみた</a></li>
<li><p><a href="https://github.com/ko1/rubyhackchallenge">https://github.com/ko1/rubyhackchallenge</a></p></li>
<li><p>GitPitch というのを使ってスライドを作っている</p></li>
<li><a href="https://github.com/urimaro/79th_workshop_1">https://github.com/urimaro/79th_workshop_1</a></li>
<li><a href="https://gitpitch.com/urimaro/79th_workshop_1">https://gitpitch.com/urimaro/79th_workshop_1</a></li>
<li><a href="https://github.com/urimaro/79th_workshop_2">https://github.com/urimaro/79th_workshop_2</a></li>
<li><p><a href="https://gitpitch.com/urimaro/79th_workshop_2">https://gitpitch.com/urimaro/79th_workshop_2</a></p></li>
<li><p>Matz のキーノート</p></li>
<li>概要: module について</li>
<li>RubyKaigi について</li>
<li>RubyConf より大きい</li>
<li>module の話</li>
<li>単一継承</li>
<li>多重継承 (C3アルゴリズム)</li>
<li>Mixin の話</li>
<li>module の使われ方</li>
<li>Mixin 以外の使われ方もするようになった</li>
<li>namespace とか</li>
<li>alias method chain は2回呼び出すと壊れる</li>
<li><code>Module#prepend</code> の登場</li>
<li>CLOS の method combination が実現できる</li>
<li>aspect 指向プログラミングを実現できる</li>
<li>refinements</li>
<li>Structural signature</li>
<li>質疑応答</li>
<li>prepend は外せないという話があったが include も外せない? → たぶん外せない</li>
<li>Rails の concern と helper の使い分け? → まだ helper の方がよく使われていて concern はそんなに使われていない?</li>
</ul>


<h2><a href="https://qiita.com/yuyakato">Kato Yuya</a> さん</h2>

<ul>
<li>概要: zeromq, GitHub, ハードウェア工作</li>
<li>GitHub の private repo の issues で色々管理している</li>
<li>ベッド型体重計: 9月にベッドを買い直したのをきっかけに再度挑戦開始</li>
<li>zeromq というライブラリの紹介</li>
<li>コネクションの方向と中身の通信の方向の自由度が高い (Pub-Sub のどちらからの接続開始でも良いなど)</li>
<li>zeromq は対応言語が多いので言語の勉強にもおすすめ</li>
<li>Pub-Sub とかも簡単にかける</li>
<li>ロードセル専用のアンプモジュールが安価に手に入るようになった</li>
<li>水のペットボトルで校正</li>
<li>校正は大変なので、体重計はよくできているなあと感じた</li>
<li>GitHub 上で 3D データもプレビューできる</li>
<li>UDP のデータを zeromq に流すのに久しぶりに ruby を書いた</li>
<li><p>後の処理はデータ処理の都合により python</p></li>
<li><p>質疑応答</p></li>
<li>製品化はしないんですか? → 製品化する予定はない。情報は全部公開する予定</li>
<li>pycall は使わない? → 無理に ruby にする必要はなさそう</li>
<li>ruby だとターミナルで作業することが多いが python だと jupyter で完結することが多いと感じているがどうか? → テストコードを書くような部品化できる部分は別ファイルにする、適材適所で使っている</li>
</ul>


<h2>Ruby初級者向けレッスン 63回 ─ Array と Hash</h2>

<p>今回は初心者の人も多かったようです。</p>

<h2>RubyKaigi 2017 のノベルティプレゼント</h2>

<p>トートバッグなどの RubyKaigi 2017 の入り口で配布していたノベルティの一部を、今年もRuby関西のスタッフの人があらかじめいくつかもらってきていたのをプレゼントしていました。</p>

<p>トートバッグは、広島なので瀬戸内海と四国が見えてるようなデザインなのかなと思っていたら <a href="https://twitter.com/is8r_/status/909752063323754496">https://twitter.com/is8r_/status/909752063323754496</a> ということだったらしいです。
プレゼントの時にこのヒントを紹介しようかと思っていたら、時間がなかったので、できませんでした。</p>

<h2>感想</h2>

<p>今回は、本当に開催するかどうかを RubyKaigi 2017 の会期中に相談するなど、最終的な開催の決定から開催までの時間が短かったからか、いつもと比べて参加人数は少なめでしたが、初参加の人や初心者の人が多かったので、開催して非常によかったと思いました。</p>

<p>発表内容も事前発表していたもの以外は RubyKaigi 2017 の振り返りをのんびりやって終わるのかなと思っていたら、当日発表者を募集したら3名も発表してくれる人が出てきて、時間が足りないぐらいになっていました。</p>

<p>だいたい2ヶ月ごとに開催されていますが、次回は12月に開催されるかどうかはまだ未定なので、来年になるかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第78回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-07-29-rubykansai78.html"/>
    <updated>2017-07-29T13:04:59+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai78</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/62491">第78回 Ruby関西 勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<p>グランフロントでわかりにくい場所でしたが、きたことがあったので、すんなり来れました。
会場無線 LAN も前回の設定のまま使えました。</p>

<h2>rails にコントリビュートしてきました</h2>

<ul>
<li>integration test は get などを使う</li>
<li>system test は visit などを使う</li>
<li>system test のクラスは integration test のクラスを継承しているので get が使えて何も起こらなくてはまった</li>
<li>メソッドを消す pull request を送った</li>
<li>迷ったらとりあえず送ってみてリジェクトされても気にしない</li>
<li>英語もだいたいなんとかなる</li>
</ul>


<h2>GitLab + Dokku で作る CI/CD 環境</h2>

<p>発表資料はいつも通り<a href="https://github.com/znz/rubykansai78-gitlab-dokku">github</a>, <a href="https://slide.rabbit-shocker.org/authors/znz/rubykansai78-gitlab-dokku/">Rabbit Slide Show</a>, <a href="https://www.slideshare.net/znzjp/gitlab-dokku-cicd">slideshare</a>, <a href="https://speakerdeck.com/znz/cd-huan-jing">Speaker Deck</a>, <a href="https://rubygems.org/gems/rabbit-slide-znz-rubykansai78-gitlab-dokku">RubyGems</a> にあげています。</p>

<p><a href="/blog/categories/gitlab/">gitlab カテゴリー</a>の一覧へのリンクを発表直前に追加したので、GitHub のソース以外には7月30日になってから反映しました。</p>

<iframe src="https://slide.rabbit-shocker.org/authors/znz/rubykansai78-gitlab-dokku/viewer.html"
        width="640" height="524"
        frameborder="0"
        marginwidth="0"
        marginheight="0"
        scrolling="no"
        style="border: 1px solid #ccc; border-width: 1px 1px 0; margin-bottom: 5px"
        allowfullscreen> </iframe>


<div style="margin-bottom: 5px">
  <a href="https://slide.rabbit-shocker.org/authors/znz/rubykansai78-gitlab-dokku/" title="GitLab + Dokku で作る CI/CD 環境">GitLab + Dokku で作る CI/CD 環境</a>
</div>


<h2>AM/PMって知ってます？</h2>

<ul>
<li>acquisition (獲得) metaphor</li>
<li>participation (参加) metaphor</li>
</ul>


<h2>rubocopとの付き合い方　〜守・破・離〜</h2>

<ul>
<li>コードレビュー</li>
<li>新人教育, 品質向上, 相互学習</li>
<li><a href="http://d.hatena.ne.jp/naoya/20140313/1394664578">些末なコードレビュー - naoyaのはてなダイアリー</a> の &ldquo;やらなければいけないのは、「その設計は拡張に対して開いていないから開くべき」とか「これではエッジケースが想定されていないからこういう不具合につながるのでは」とか「そのテストでは後日見返したときに第三者が要求仕様を解釈しづらい」とかそういう指摘である。&rdquo;</li>
<li>&ldquo;lint ツールか何かで機械的にチェックすればよい&rdquo;</li>
<li><a href="https://github.com/bbatsov/ruby-style-guide">https://github.com/bbatsov/ruby-style-guide</a></li>
<li>Cop: StyleCop, LayoutCop, LintCop, MetricsCop, PerformanceCop, SecurityCop, RailsCop, BundlerCop</li>
<li>auto-correct</li>
<li>Todo リスト: <code>rubocop --auto-gen-config</code></li>
<li>守・破・離</li>
<li>houndci, sideci など</li>
<li>エディタ連携, guard-rubocop</li>
<li>syntastic だと非同期処理してくれなくて保存の度に固まるので deoplete (+neovim) を使っている</li>
<li>rails developer meetup, 次回: 8/24(木)19:30から, connpass での募集は8/1から, ハッシュタグ <code>#railsdm</code></li>
</ul>


<h2>Ruby と C# をつなぐ</h2>

<ul>
<li><a href="https://github.com/masoo/ruby-csharp_script">https://github.com/masoo/ruby-csharp_script</a></li>
<li>Ruby から C# を使う話だった</li>
<li>色々大変そうだった</li>
</ul>


<h2>RubyはPythonにしてやられてはいない</h2>

<ul>
<li>Ruby ビジネスフォーラムに参加した</li>
<li>午後のパネルディスカッションの内容の紹介</li>
<li>午前の基調講演の内容の紹介</li>
<li>その他イベント紹介</li>
</ul>


<h2>Ruby 初級者向けレッスン 61回 - 文字列</h2>

<p>安定したいつものような内容でした。</p>

<h2>クロージング</h2>

<ul>
<li>イベント告知など</li>
<li>明日同じ場所で<a href="https://techplay.jp/event/626491">ELFとDWARF勉強会</a></li>
<li><a href="https://dddrb.doorkeeper.jp/events/63433">DDD.rb #14 Redux で気軽に始める テスト駆動開発 - DDD.rb | Doorkeeper</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第77回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-03-04-rubykansai77.html"/>
    <updated>2017-03-04T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai77</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/58025" title="第77回 Ruby関西 勉強会">第77回 Ruby関西 勉強会</a>
に参加しました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<ul>
<li>地図が最初はグランフロントをさしていた。(昨晩直しました。) (doorkeeper のシステムで住所を変えただけど、地図の方は変わらないらしい。)</li>
<li>会場はヒルトンプラザウエストで、ヒルトンプラザイーストとどちらなのかわかりにくい。</li>
<li>工事中が多くて場所がわかっていてもたどり着きにくかったらしい。</li>
</ul>


<h2>最適化のやり方</h2>

<ul>
<li><a href="http://oke-ya.com/devil.html">あくまのおしごと</a>の宣伝</li>
<li>KEN_ALL.CSV を読み込んで東西南北を含む行をカウントするプログラムを例に</li>
<li>最初に全部読んでメモリ上にのせて <code>each_line</code> (メモリ効率を気にするなら元の <code>open</code> 中に <code>f.gets</code> の方が良さそう)</li>
<li>配列を find せずに Hash を使う</li>
<li>配列に対象行をためていって length をとるのではなく数値でカウント</li>
<li>同じメソッド呼び出しをローカル変数に代入して減らす</li>
<li><code>sort</code> から <code>sort_by</code></li>
<li>早すぎる最適化はするべきではない</li>
<li>気をつけるポイント</li>
<li>IO はなるべく短く</li>
<li>データ構造(もたせ方)を工夫する</li>
<li>ループの中でオブジェクトをなるべく作らない</li>
<li>文字列、配列、ハッシュは数値やシンボルとくらべてメモリ消費量が多い点を心得ておく</li>
<li>質疑応答</li>
<li>データが大きい時や大きさがわからないときは一気に読まない方が良さそう</li>
<li>SQL にあるような何行かごとに処理というのは専用のメソッドはなさそう</li>
<li><code>/北|南|東|西/</code> は <code>/[北南東西]/</code> の方が良いのではないかというツッコミ</li>
<li>西東京みたいなのは西と東でカウントされるのかという話 - 片方しかカウントされない実装になっていた。</li>
<li>カウント対象は限定されているので、ループの中で <code>||=</code> で初期化するのではなく <code>{"北" =&gt; 0}'</code> のように初期値をもつのもあり。 <code>Hash.new { 0 }</code> のような方法もあり。</li>
<li>最後にもう一度、<a href="http://oke-ya.com/devil.html">あくまのおしごと</a>の宣伝</li>
<li><a href="https://www.slideshare.net/yalab/ruby-72795596">Rubyコードの最適化</a></li>
</ul>


<h2>Rails 5.1.0.beta1はどのようにモダンなJavaScript開発を実現しているのか？</h2>

<ul>
<li>webpacker gem を使ったデモ</li>
<li><code>bundle exec rails webpacker:install:react</code></li>
<li>config/webpack/shared.js でビルドする対象を指定</li>
<li>bin/webpack-dev-server は localhost:8080 で待ち受ける express のサーバー</li>
<li>bin/webpack は public 以下に出力</li>
<li><code>javascript_pack_tag</code> の実装確認</li>
<li><code>dev_server_host</code> が設定されていればそこから、なければ digest もしくは直接</li>
<li>質疑応答</li>
<li>フロントエンドを知らない人は sprockets で良いのではないか</li>
<li>sprockets と webpacker の違い</li>
<li>deploy するときは? webpacker-dev-server ではなく、 webpack で public 以下に生成する</li>
<li>情報源は? rails guide などにはまだ。 master でもまだ変化が続いている。</li>
<li>スタイルシートはコンパイルしてくれないのか? 現状デフォルトで生成される config では対象ではない。 webpack の知識があって設定すれば可能。</li>
<li><a href="https://speakerdeck.com/chimame/rails-5-dot-1-0-dot-beta1hadofalseyounimodannajavascriptkai-fa-woshi-xian-siteirufalseka">Rails 5.1.0.beta1はどのようにモダンなJavaScript開発を実現しているのか？ // Speaker Deck</a></li>
</ul>


<h2>休憩</h2>

<ul>
<li>14:20 まで</li>
</ul>


<h2>Welcome to tebukuro</h2>

<ul>
<li>tebukuro とは</li>
<li>イベント、チケット管理サービス</li>
<li>Shinosaka.rb のプロダクト</li>
<li>なぜ tebukuro</li>
<li>既存サービスへの不満</li>
<li>使っているもの</li>
<li>rails</li>
<li>postgresql</li>
<li>node.js など</li>
<li>CI: Wercker から Jenkins に移行中</li>
<li>開発環境は docker compose</li>
<li>本番環境も docker</li>
<li>Dcoker を使う理由</li>
<li>コンテナ指向でシンプルに保てる</li>
<li>どの環境でも動作する</li>
<li>スケーラブル: コンテナ単位で可能</li>
<li>GCP</li>
<li>なぜOSSなのか</li>
<li>開発方法も他のOSSと同じ</li>
<li>OSS開発の敷居をさげるための素振りもできる</li>
<li>英語の勉強もできちゃう</li>
<li>もう一つのねらい</li>
<li>betaやalphaのライブラリを積極的に採用</li>
<li>バグを踏んでライブラリへのPRチャンスを作る</li>
<li>PRとはいかずともissue報告はできる</li>
<li>目指すコミュニティ</li>
<li><a href="https://github.com/shinosakarb/tebukuro">https://github.com/shinosakarb/tebukuro</a></li>
</ul>


<h2>Create React App ではじめる Rails の SPA</h2>

<ul>
<li>ライブコーディング</li>
<li>実装を見ると <code>.html</code> が <code>index.html</code> より優先されるっぽい</li>
<li>RFC とかは単語が一般的すぎて見つけられなかったというコネタ</li>
<li>(後で <a href="https://www.rfc-editor.org/retrieve/bulk/">https://www.rfc-editor.org/retrieve/bulk/</a> からダウンロードして txt ファイルを index.html で検索してみたけど、書いてなさそうだった。調べていた時に思い出したけど IIS は index ではなかった (確認したら default だった) ので RFC に書かれている可能性は低そう)</li>
<li>yarn は yarnpkg コマンドの方が主流になるかもしれないらしい</li>
<li>react-router-dom</li>
<li>公式サイトは v4 系のドキュメントになっている</li>
<li>webpack も公式サイトは 2 系のドキュメントになっていて 1 系はではないらしい</li>
<li>react-router-dom が beta7 になっていて、公式サイトのデモが beta6 では動かなかった。</li>
<li>時間がなかったので、 OAuth との組み合わせは完成版でデモ</li>
</ul>


<h2>Rubyのオススメの機能７選</h2>

<ul>
<li><a href="http://qiita.com/cuzic/items/a265f140fdff289d5c07">Ruby のオススメの機能７選</a></li>
<li><code>Enumerator.new</code></li>
<li><code>Object#tap</code></li>
<li><code>Float::INFINITY</code></li>
<li><code>Enumerable#each_slice</code></li>
<li><code>Array#shelljoin</code></li>
<li>(単純に実行するだけなら複数引数の <code>system</code> などを使った方が良さそうと思っていたけど、多段 ssh とかの時には確かに良さそう。)</li>
<li><code>SecureRandom.hex</code></li>
<li>Flip Flop 演算子</li>
<li>質疑応答</li>
<li>配列に <code>with_index(1)</code> は使えないので、<code>each.with_index(1)</code> にする必要がある</li>
<li><code>each_with_index</code> だと初期値を指定できないので、この場合は使えない</li>
</ul>


<h2>Ruby初級者向けレッスン &mdash; ブロック</h2>

<p>初心者の人は少なかった。
告知タイミングなどの問題で、スタッフの人が多かった。</p>

<p>追加して <code>self</code> が欲しい時は <code>Array#&lt;&lt;</code> とか <code>Hash#update</code> とか。</p>

<h2>クロージング</h2>

<ul>
<li><a href="https://rails-follow-up-osaka.doorkeeper.jp/events/58097">Rails Follow-up Osaka #7</a></li>
<li><a href="https://rubykansai.doorkeeper.jp/events/57723">関西Ruby会議2017 CFP</a>募集中</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第76回 Ruby関西 勉強会に参加しました]]></title>
    <link href="http://blog.n-z.jp/blog/2017-01-14-rubykansai76.html"/>
    <updated>2017-01-14T17:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubykansai76</id>
    <content type="html"><![CDATA[<p><a href="https://rubykansai.doorkeeper.jp/events/55398" title="第76回 Ruby関西 勉強会">第76回 Ruby関西 勉強会</a>
に参加して発表してきました。</p>

<!--more-->


<p>以下、そのメモです。</p>

<h2>会場</h2>

<p>ちょっと場所がわかりにくいところでした。
グランフロントに着いたあと、ちゃんと「タワーB」を目指して、一度9階で乗り換えて18階に上がりました。</p>

<h2>オープニング</h2>

<ul>
<li>会場案内</li>
<li>懇親会は適当に集まる感じ</li>
<li>ネットワークあり</li>
<li>ustream 中継あり (ライブのみで録画はなし)</li>
<li>公式タグは rubykansai76</li>
<li>公式ハッシュタグは <code>#rubykansai</code></li>
<li>受付はあとで</li>
</ul>


<h2>ゲーム会社でのRuby / Rails活用事例</h2>

<ul>
<li>スポンサーセッション的なセッション</li>
<li>Aiming さんは開発も運用もしている</li>
<li>MessagePack で C++ や C# とやりとり</li>
<li>共通基盤開発</li>
<li>インフラ</li>
<li>運用</li>
<li>Ruby は開発速度が利点</li>
<li>実行速度が求められるサーバーは C++ のままのものもあるらしい</li>
</ul>


<h2>Rails 使いがデータ集計でハマりがちな罠</h2>

<ul>
<li>ActiveRecord は集計には向いていない</li>
<li>集計に O/R mapping は不要</li>
<li>サブクエリが入りみだれると ActiveRecord や ARel はつらい</li>
<li>scope の組合せで DRY にする作戦もうまくいくことがまれでだいたいはカオスになる</li>
<li>適材適所</li>
<li>アンチパターン2: 1項目1クエリ作戦</li>
<li>アンチパターン3: 集計データが text</li>
<li>正体は YAML, JSON のデータ</li>
<li>頑張って移行</li>
<li>SQL は覚えるしかない</li>
<li>alter table せずに drop して create table しなおして集計し直し</li>
<li>クエリの分割: 中間集計テーブル</li>
<li>Q: 集計中に空のテーブルが見えてしまうのでは?</li>
<li>PostGRESQL, Redshift だと DDL にもトランザクションがきくので大丈夫</li>
<li>順序が重要</li>
<li>bricolage: SQL 実行に特化したワークフローエンジン</li>
<li>Redshift 用</li>
<li>dry run できるというのが重要</li>
<li>AWS Redshift の特徴</li>
<li>PostgreSQL 系の SQL の便利機能</li>
<li>ウィンドウ関数</li>
<li>例: <code>rank()</code>, <code>row_number()</code></li>
<li>WITH 句</li>
<li>サブクエリの代わり</li>
<li>ネストが減る</li>
</ul>


<h2>Ruby ボード GR-CITRUS の紹介 #2</h2>

<ul>
<li>ロボホンが写真をとっていたがとれていない?</li>
<li>Ruby の話はほとんど出てこない</li>
<li>GR-CITRUS</li>
<li>チップに Ruby Inside と刻印されている</li>
<li>mruby/c という16ビットマイコンなどに向けたさらに省メモリなものがある</li>
<li>今日は mruby の話</li>
<li>本題は実装について</li>
<li>バインドしている mrbgem</li>
<li>mruby-math: Math.sin</li>
<li>mruby-numeric-ext: 10.chr, 0.zero?</li>
<li>独自実装のクラス</li>
<li>mruby 組込み方法</li>
<li>クロスコンパイル</li>
<li>mrbgem の独自追加</li>
<li>wrbb-v2lib-firm の build_config.rb を使う</li>
<li>クロスコンパイル方法は Qiita に記事がある</li>
<li>mrb 実行の仕組み</li>
<li>コード読み</li>
</ul>


<h2><code>frozen_string_literal</code> の話</h2>

<p>スライドはいつも通り
<a href="http://slide.rabbit-shocker.org/authors/znz/frozen_string_literal/">Rabbit Slide Show</a>
(<a href="https://rubygems.org/gems/rabbit-slide-znz-frozen_string_literal">RubyGems</a>),
<a href="http://www.slideshare.net/znzjp/frozenstringliteral">SlideShare</a>,
<a href="https://speakerdeck.com/znz/frozen-string-literal-falsehua">Speaker Deck</a>
にあげています。
(ソースは
<a href="https://github.com/znz/rubykansai76-frozen_string_literal">github</a>
にあげています。)</p>

<h2>Ruby モンキーパッチの世界</h2>

<ul>
<li>モンキーパッチとは</li>
<li>CarrierWaveDirect で <code>path/to/file</code>, <code>path/to/to/file</code>, <code>path/to/to/to/file</code> のようになるバグがあったのをモンキーパッチで対応した</li>
<li>ActiveSupport が <code>NilClass</code> に <code>blank?</code> メソッドを足している</li>
<li>Refinement</li>
<li>トップレベルの <code>using</code> は <code>using</code> より下にあれば <code>class</code> などの中も対象</li>
<li>クラススコープの <code>using</code> は <code>using</code> より下で <code>class</code> に対応する <code>end</code> までが対象</li>
<li><a href="https://docs.ruby-lang.org/en/trunk/syntax/refinements_rdoc.html">https://docs.ruby-lang.org/en/trunk/syntax/refinements_rdoc.html</a></li>
<li>Rails での例: <a href="https://github.com/rails/rails/blob/07307a7b9d14b752fc5aef474f3c29585676c9fa/activesupport/lib/active_support/core_ext/enumerable.rb#L117-L135">https://github.com/rails/rails/blob/07307a7b9d14b752fc5aef474f3c29585676c9fa/activesupport/lib/active_support/core_ext/enumerable.rb#L117-L135</a></li>
</ul>


<h2>Rails の有限オートマトン</h2>

<ul>
<li><a href="https://github.com/amatsuda/stateful_enum" title="stateful_enum">stateful_enum</a></li>
<li>graphviz や plantuml を使って図を出力できる</li>
<li>gulp で plantuml の図の自動更新</li>
<li><code>draw_uml</code> を使って rails 経由で図を表示</li>
<li>browser sync でブラウザーも自動リロード</li>
<li><code>draw_erd</code>, <code>draw_smd</code> というのもある</li>
<li>guard は rspec を流すのに使っていて、重くなるので gulp は開発の初期だけに使うもの用に分けている</li>
</ul>


<h2>告知 (Rails Girls Osaka, OSS Gate Osaka, 関西Ruby会議)</h2>

<ul>
<li>引き続き ogomr さん</li>
<li><a href="https://speakerdeck.com/ogom/ibentofalseshao-jie-tomu-ji">イベントの紹介と募集</a></li>
<li><a href="https://coderdojo-hommachi.doorkeeper.jp/events/56121">CoderDojo 本町 #4</a></li>
<li><a href="https://railsgirls-osaka.doorkeeper.jp/events/55949">RailsGirls Osaka #4 コーチ希望者募集</a></li>
<li><a href="https://railsgirls-osaka.doorkeeper.jp/events/55947">RailsGirls Osaka #4</a></li>
<li><a href="https://oss-gate.doorkeeper.jp/events/56141">OSS Gate Osaka #1</a></li>
<li><a href="https://rubykansai.github.io/kansai2017/">関西Ruby会議2017</a></li>
</ul>


<h2>Ruby初級者向けレッスン 60回 ─ クラス</h2>

<ul>
<li><a href="https://github.com/higaki/learn_ruby_kansai_76">https://github.com/higaki/learn_ruby_kansai_76</a></li>
<li>解答例</li>
<li><code>to_s</code> で <code>@name</code> なのは <code>name</code> の方が良いのではないかという話</li>
<li><code>age</code> の実装の話</li>
<li><code>Mashal.load Marshal.dump</code> の話</li>
</ul>


<h2>クロージング</h2>

<ul>
<li>懇親会の募集</li>
<li>Rails Follow-up Osaka の紹介</li>
</ul>

]]></content>
  </entry>
  
</feed>
