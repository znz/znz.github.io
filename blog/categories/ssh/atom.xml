<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ssh | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ssh/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-04-27T20:07:29+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[sshでed25519鍵を使うようにした]]></title>
    <link href="http://blog.n-z.jp/blog/2016-12-04-ssh-ed25519.html"/>
    <updated>2016-12-04T14:25:40+09:00</updated>
    <id>http://blog.n-z.jp/blog/ssh-ed25519</id>
    <content type="html"><![CDATA[<p>ssh で使っている鍵が RSA 2048 ビットでちょっと古くなってきているということもあり、
OpenSSH 6.5 で追加された ed25519 鍵に更新することにしました。</p>

<!--more-->


<h2>鍵の種類</h2>

<p><a href="http://jnst.hateblo.jp/entry/2014/12/15/200542" title="GitHubでEd25519鍵をつかう">GitHubでEd25519鍵をつかう</a>
の説明が詳しいですが、他のサイトでも調べた情報によると</p>

<ul>
<li>RSA の 2048 ビットが今の <code>ssh-keygen</code> でのデフォルトなので主流</li>
<li>RSA や ECDSA は <code>ssh-keygen</code> に <code>-b</code> でビット数が指定できる</li>
<li>ECDSA の 521 ビットは 512 の間違いではない</li>
<li>ed25519はビット数が指定出来ない</li>
<li>OpenSSH のssh-keygenは1024bitのDSA鍵しか作れない (<a href="http://d.hatena.ne.jp/hnw/20140705" title="GitHubユーザーのSSH鍵6万個を調べてみた">GitHubユーザーのSSH鍵6万個を調べてみた</a>)</li>
<li>DSA 鍵は弱いので使うべきではない</li>
<li>ed25519はECDSAより署名生成/検証のパフォーマンスが良い</li>
</ul>


<p>などの情報がありました。</p>

<p>ビット数で悩まなくて良いのと、パフォーマンスが良いという情報があったので、
ed25519 を使うことにしました。</p>

<h2>主な環境</h2>

<p>OpenSSH のバージョンは <code>ssh -V</code> で調べました。</p>

<ul>
<li>OS X El Captitan 10.11.6 の OpenSSH_6.9p1, LibreSSL 2.1.8</li>
<li>Ubuntu 14.04.5 LTS (trusty) の OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.8, OpenSSL 1.0.1f 6 Jan 2014</li>
<li>Debian GNU/Linux 8.6 (jessie) の OpenSSH_6.7p1 Debian-5+deb8u3, OpenSSL 1.0.1t  3 May 2016</li>
</ul>


<h2>バージョン情報</h2>

<p>Debian は <a href="https://packages.debian.org/openssh-server">https://packages.debian.org/openssh-server</a> によると wheezy (oldstable) は 1:6.0p1-4+deb7u6 で対応してなさそう (wheezy-backports が 1:6.6p1-4~bpo70+1 なので backports を使えば対応できそう) で、
jessie (stable) は 1:6.7p1-5+deb8u3 なので、今の安定版以降なら問題なく ed25519 が使えそうです。</p>

<p>Ubuntu は <a href="http://packages.ubuntu.com/openssh-server">http://packages.ubuntu.com/openssh-server</a> によると precise (12.04LTS) が 1:5.9p1-5ubuntu1.10 で対応してなさそうでしたが、
trusty (14.04LTS) が 1:6.6p1-2ubuntu2.8 で、
現在主流のバージョンでは問題なく使えそうでした。</p>

<h2>鍵生成</h2>

<p>vagrant 環境で鍵を生成して比較してみたところ、
ed25519 は公開鍵が RSA と比べてかなり短いことがわかりました。
ついでに比較してみたところ、 ECDSA よりも短いということがわかりました。</p>

<pre><code>%  ssh-keygen -t ed25519
Generating public/private ed25519 key pair.
Enter file in which to save the key (/home/vagrant/.ssh/id_ed25519):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/vagrant/.ssh/id_ed25519.
Your public key has been saved in /home/vagrant/.ssh/id_ed25519.pub.
The key fingerprint is:
SHA256:tlGs9kP67mLZzd9lh1/UJY2R/vZc1Q1GA9gyADsRGlw vagrant@yakkety64
The key's randomart image is:
+--[ED25519 256]--+
|   ...Eo.. o.o+. |
|    .o o .+ . += |
|    . o   oo oo.=|
|       . o    ..*|
|        S .    .+|
|       o *     o+|
|        oooo  .oB|
|        +...o  +*|
|       . ++  .. o|
+----[SHA256]-----+
%  cat ~/.ssh/id_ed25519.pub
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGvN6KKrqsvbFOfLclK/fYIDye6Lms7NhOn0yYNkjMza vagrant@yakkety64
%  ssh-keygen -t ecdsa
Generating public/private ecdsa key pair.
Enter file in which to save the key (/home/vagrant/.ssh/id_ecdsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/vagrant/.ssh/id_ecdsa.
Your public key has been saved in /home/vagrant/.ssh/id_ecdsa.pub.
The key fingerprint is:
SHA256:DebC1pOk6EEL5MVGP0PIziMdAmzgmqAYJl/C14DuSOM vagrant@yakkety64
The key's randomart image is:
+---[ECDSA 256]---+
|=..=+..          |
|.*o.*=           |
|=+=*+.= +        |
|B*o*=+ O +       |
|Boo.+.= S .      |
|.E.. o . .       |
|    .            |
|                 |
|                 |
+----[SHA256]-----+
%  cat ~/.ssh/id_ecdsa.pub
ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCQeG28rZh/SX9MBfKsnltv+hpr41CAT4CZZ9YsmsjVRdb3iKsYq4K4SNwfiVGNaIjKAcuDnaJbk50zOoa8V/Tc= vagrant@yakkety64
%  ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/vagrant/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/vagrant/.ssh/id_rsa.
Your public key has been saved in /home/vagrant/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:sR7WZK2npMgv8lRZrhofejURfuEs04VJv0quu3xtLiw vagrant@yakkety64
The key's randomart image is:
+---[RSA 2048]----+
|           ..o   |
|          ..+..  |
|        ..+=.o.  |
|         X=.=  . |
|        S ==o .  |
|     . = =o= .   |
|      = =..oo.   |
|    ...*.oE.+ o  |
|     o+oo == +.  |
+----[SHA256]-----+
%  cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCnSyvz7oShBRgD8q91eG4WtdJ83cPJfQAtSKEiE8ELHhqRulL6liPz/jqqpMjQpp/3e3QS8OoxGnuXGgHdkly4cd2UdnWxqbz4oN6ig64rYK/ZshQp5FyKb5L3Ksr+3mkhzxPHQVbSZWa8YoaCEzbteVbdFTXUMO/HFPFTL9s2HHyJoDlzUT0XdyovN6WQ2SEbx6pLudsvhZiaiqrPEHLl4ltq33tGcIMFjeu8XvW3d8jTmuAw0KrL7U3bD20n0xsKj9XBigew9K0PjJQ6QKyNUpXXB94jWv+hpkatHlw0NJm/XUQiHDtWaMCTRB8KDSrFarRbYL5ErfHuCePmYerR vagrant@yakkety64
</code></pre>

<h2>サービスに登録</h2>

<p>二要素認証の時はちょっと楽しい面もありましたが、
ssh の鍵の変更は面倒なだけでした。</p>

<p>GitHub, BitBucket, Heroku など、試したところはすべて ed25519 の公開鍵に対応していました。</p>

<h2>IdentityFile 更新</h2>

<p><code>~/.ssh/config</code> で余計な鍵を試さないように</p>

<pre><code>    IdentitiesOnly yes
    IdentityFile ~/.ssh/id_rsa
</code></pre>

<p>のような設定を入れている場合は</p>

<pre><code>    IdentitiesOnly yes
    IdentityFile ~/.ssh/id_ed25519
</code></pre>

<p>に変更する必要がありました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrantなどのローカルへのssh接続のみarcfour256で高速化する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-11-openssh-arcfour256.html"/>
    <updated>2014-08-11T21:53:54+09:00</updated>
    <id>http://blog.n-z.jp/blog/openssh-arcfour256</id>
    <content type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/rx7/20101025/p1" title="大容量ファイルのSCP転送を高速にする方法 - 元RX-7乗りの適当な日々">大容量ファイルのSCP転送を高速にする方法 - 元RX-7乗りの適当な日々</a>
をみて、安全な可能性が高い経路だけ <code>arcfour256</code> のような高速な <code>Ciphers</code> を使いたいと思って、そうなるように設定しました。</p>

<p><a href="/blog/2013-11-15-dokku.html" title="VirtualBoxでdokkuを試した">VirtualBoxでdokkuを試した</a>
での設定は意図通りには動いていませんでした。</p>

<!--more-->


<h2>確認バージョン</h2>

<ul>
<li>Mac OS X 10.9.4</li>
<li>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011</li>
</ul>


<h2>OpenSSH の <code>~/.ssh/config</code> の設定例</h2>

<p>最初に例を出しておきます。
詳しいことは説明は後でしますが、
<code>Host *</code> の設定は例として書いているだけで、
書かないことを推奨します。</p>

<p><code>text ~/.ssh/config
HashKnownHosts no
Host 127.0.0.1
    Ciphers arcfour256,arcfour128
Host *
    Ciphers aes256-ctr,aes192-ctr,aes128-ctr
</code></p>

<h3>設定の固まり (セクション)</h3>

<p><code>~/.ssh/config</code> の設定は <code>Host</code> で始まる行ごとの固まり (セクション) に分かれていて、
上の例の場合は <code>HashKnownHosts</code> が全体の設定、
次が <code>127.0.0.1</code> のみの設定、
最後が <code>*</code> つまりワイルドカードですべてのホストに対する設定になります。</p>

<h3>設定の優先順位</h3>

<p>最初に見つかった設定が使われます。
これが以前は勘違いしていた点で、
ホストごとの設定を優先したいのなら、
<code>Host</code> の上のファイルの冒頭には書かずに、
ファイルの最後に <code>Host *</code> で設定する必要があります。</p>

<p>さらに詳しい優先順位は <code>man ssh_config</code> で参照できますが、</p>

<ol>
<li>コマンドラインオプション</li>
<li>ユーザー設定 (<code>~/.ssh/config</code>)</li>
<li>システムの設定 (<code>/etc/ssh/ssh_config</code>)</li>
</ol>


<p>という順番で、その中で最初に見つかったものを使うようになっています。</p>

<p>つまり、ホストごとの設定はファイルの先頭に近い方に、
一般的な設定は最後に書く必要があります。</p>

<h2>Ciphers の一般設定</h2>

<p>デフォルトは <code>man</code> で確認すると
<code>aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour</code>
になっていて、
AES の CTR のビット数が多いものを優先するために上記の設定にしています。</p>

<p>設定するなら OS などの更新ごとに毎回ちゃんと <code>man</code> でデフォルトを確認すべきです。
よくわからないのなら、
<code>Host *</code> での設定はしない方が良いでしょう。</p>

<h2>127.0.0.1 向けの Ciphers 設定</h2>

<p>参考にしたサイトのコメントに「
<a href="http://d.hatena.ne.jp/rx7/20101025/p1#c1291741909" title="ただ、arcfourには別の問題が有るので、使わない方がいいです。 arcfour128/256はその問題の対処版なので、これらのみを使うようにした方がいいでしょう。">ただ、arcfourには別の問題が有るので、使わない方がいいです。 arcfour128/256はその問題の対処版なので、これらのみを使うようにした方がいいでしょう。</a>
」とあり、速度もほとんど変わらないので、
「arcfour128/256」だけ使う設定にしています。</p>

<h2>vagrant 用設定</h2>

<p><code>vagrant ssh --help</code> で追加のオプションが渡せるとわかったので、
<code>vagrant ssh -- -v</code> で接続時の状況を調べました。</p>

<p>コマンドラインオプションが優先されるということで、
<code>vagrant ssh -- -v -o Ciphers=arcfour256</code>
のように接続すると <code>arcfour256</code> になることが確認できました。</p>

<p>以前は <code>Host vagrant</code> で設定して <code>vagrant ssh</code> の代わりに <code>ssh vagrant</code> を使っていたのですが、
複数 <code>vagrant up</code> したときに最初に起動した VM のポート (2222) にしか接続できないという問題がありました。</p>

<p>そこで、他の VM のときにも使える設定を考えたところ、
<code>Host 127.0.0.1</code> でうまくいくことがわかりました。</p>

<h2>まとめ</h2>

<p>元々のデフォルトは時代に合わせて最適なものに更新されているので、
不用意に固定してしまうと
<a href="http://d.hatena.ne.jp/jovi0608/20140808/1407483168" title="OpenSSLの脆弱性(CVE-2014-3511)でTLSプロトコルの基礎を学ぶ - ぼちぼち日記">OpenSSLの脆弱性(CVE-2014-3511)でTLSプロトコルの基礎を学ぶ - ぼちぼち日記</a>
のように強いものに固定していたつもりが弱いものに固定されてしまうことになる可能性があるので注意が必要です。</p>

<p><code>127.0.0.1</code> 以外にも LAN 内のホストなど、経路の信頼性が比較的高くて高速に転送したい場合は <code>Host</code> 設定で <code>Ciphers arcfour256</code> を追加すると良いのではないでしょうか。</p>

<h2>参考 URL</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/rx7/20101025/p1" title="大容量ファイルのSCP転送を高速にする方法 - 元RX-7乗りの適当な日々">大容量ファイルのSCP転送を高速にする方法 - 元RX-7乗りの適当な日々</a></li>
<li><a href="http://tech.nitoyon.com/ja/blog/2013/01/11/github-clone-http/" title="GitHub で clone するときは SSH じゃなく HTTP を使ったほうが高速 - てっく煮ブログ">GitHub で clone するときは SSH じゃなく HTTP を使ったほうが高速 - てっく煮ブログ</a></li>
<li><a href="http://endoyuta.com/2014/03/12/github%E3%81%AEssh%E6%8E%A5%E7%B6%9A%E3%81%8C%E9%80%9F%E3%81%8F%E3%81%AA%E3%82%8B%E3%82%89%E3%81%97%E3%81%84/" title="githubのssh接続が速くなるらしい | Logicky Blog">githubのssh接続が速くなるらしい | Logicky Blog</a></li>
<li><a href="http://blog.eiel.info/blog/2013/11/09/no-mathcing-cipher-found-on-github/" title="GitHub で SSH 接続できなくなった。SSH をつかった場合に高速化する設定が原因だった。 - そんなこと覚えてない">GitHub で SSH 接続できなくなった。SSH をつかった場合に高速化する設定が原因だった。 - そんなこと覚えてない</a></li>
<li><a href="http://d.hatena.ne.jp/jovi0608/20140808/1407483168" title="OpenSSLの脆弱性(CVE-2014-3511)でTLSプロトコルの基礎を学ぶ - ぼちぼち日記">OpenSSLの脆弱性(CVE-2014-3511)でTLSプロトコルの基礎を学ぶ - ぼちぼち日記</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
