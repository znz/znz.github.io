<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tty | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/tty/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-03-27T23:06:17+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[weechat-cursesでの罫線の文字幅問題を回避する]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-25-weechat-curses.html"/>
    <updated>2013-12-25T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/weechat-curses</id>
    <content type="html"><![CDATA[<p>サーバー上の端末の中で使える IRC クライアントとして
<code>weechat-curses</code> をちょっと試しているのですが、
<code>│</code> (U+2502 BOX DRAWINGS LIGHT VERTICAL)
で罫線文字の文字幅問題が発生してずれるという現象に困っていたので、
問題を回避する設定をしてみました。</p>

<!--more-->


<h2>設定</h2>

<p><code>│</code> (U+2502) の代わりに <code>|</code> (U+007C VERTICAL LINE)
を使うだけなら、</p>

<pre><code>/set weechat.look.separator_vertical "|"
</code></pre>

<p>でいけます。</p>

<h2>問題の文字が使われている場所</h2>

<p>weechat の画面で問題が起きている行は</p>

<pre><code>時刻 nickなどのprefix 左の縦線(|) メッセージ 右の縦線(│) nick一覧
</code></pre>

<p>のようになっていて、最初は両方の縦線が問題になっているのかと
勘違いしていたのですが、実際には右側の方だけでした。</p>

<p>左側の縦線の部分の設定は <code>weechat.look.prefix_suffix</code> で、
右側は <code>weechat.look.separator_vertical</code> です。</p>

<p>左側の方はデフォルトで <code>"|"</code> になっていて、問題はありませんでした。</p>

<p>右側の方はデフォルトでは <code>""</code> (空文字列) になっていて、
その場合は ncurses で縦線を描画するという意味になって、
問題が起きていました。</p>

<p>たとえば <code>":"</code> などに設定を変えてみるとどっちがどっちなのか
よくわかると思います。</p>

<h2>まとめ</h2>

<p>weechat を試していて、ずっと困っていた問題が解決できたので、
これからもうちょっと使ってみようと思えるようになりました。</p>

<p>Web で検索しても全く情報がみつからなかったのですが、
誰も困っていなかったのでしょうか。
英語圏だと困らなさそうですが、日本語圏でも使っている人はいそうなのに
情報がないのは他のコマンドも含めて対処していて困っていないからなのか、
気にせずずれるまま使っているからなのかが気になりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS XでのIME制御についての考察]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-14-macosx-ime.html"/>
    <updated>2013-11-14T02:24:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/macosx-ime</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013-11-12-cocoa-emacs-ime.html">Cocoa Emacs のインラインパッチ関連の設定</a>
の時や
<a href="/blog/2013-11-13-tty-ime.html">iTerm2 で IME 制御シーケンスがきかないのを調べた</a>
時にも気になったのですが、
Mac の IME に open/close という概念はあるのかという話です。</p>

<!--more-->


<h2>IME の開閉状態?</h2>

<p>iBus 1.5 関連の記事の
<a href="http://www.kaoriya.net/blog/2013/10/18/">iBusがクソになった理由 — KaoriYa</a>
で知ったのですが、
Mac OS X は IME のオン・オフのような状態の切り替えではなく、
「ことえりのひらがな」とか
「ことえりのカタカナ」とか
「ことえりの英字」とか
のようなIMEの種類を切り替えて入力するようになっています。</p>

<p>この考え方と開閉状態しか考慮していない二値的な制御シーケンスは相性が悪いのではないかと思いました。</p>

<h2>Cocoa Emacs のインラインパッチでは?</h2>

<p>Cocoa Emacs のインラインパッチをよく見ると
<code>mac-toggle-input-source</code>
という関数があって、
<code>(mac-toggle-input-source nil)</code>
で IME オフ相当に、
<code>(mac-toggle-input-source t)</code>
で IME オン相当にできるようなので、
対応は不可能ではないのかもしれません。</p>

<h2>端末の制御シーケンスでは?</h2>

<p><a href="http://ttssh2.sourceforge.jp/manual/ja/about/ctrlseq.html">TeraTerm Pro の対応制御シーケンス</a>
には以下の3種類の IME 関連の制御シーケンスがあります。</p>

<pre><code>  CSI &lt; r    TTIMERSIME の開閉状態を復元する。
  CSI &lt; s    TTIMESVIME の開閉状態を保存する。
  CSI &lt; Ps t TTIMESTIME の開閉状態を設定する。省略時の Ps の値は 0。
               Ps = 0      IME を閉じる。
                  = 1      IME を開く。
</code></pre>

<p>この中の <code>TTIMESTIME</code> の <code>Ps</code> を拡張して、
2 以上も受け付けるようにして、
(別の状態が不可能なら 1 と同じ挙動で)
可能ならカタカナ入力などの別の IME の状態を設定できるようにするという案を思いつきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iTerm2でのIME制御がきかない]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-13-tty-ime.html"/>
    <updated>2013-11-13T00:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/tty-ime</id>
    <content type="html"><![CDATA[<p>iTerm2 Build 1.0.0.20131109 で確認しました。</p>

<p><a href="http://ttssh2.sourceforge.jp/manual/ja/about/ctrlseq.html">TeraTerm Pro の対応制御シーケンス</a>
や
<a href="http://nanno.dip.jp/softlib/man/rlogin/ctrlcode.html">RLogin の対応している制御コード一覧</a>
には IME の状態制御があります。</p>

<p>iTerm2 はオプションでその制御シーケンスを受け付けるようには出来るのですが、
現状は無視するだけのようです。</p>

<!--more-->


<h2>制御シーケンス</h2>

<p>TeraTerm Pro 由来で RLogin も対応したものらしいです。
具体的なシーケンスとしては
<a href="http://ttssh2.sourceforge.jp/manual/ja/about/ctrlseq.html">TeraTerm Pro の対応制御シーケンス</a>
から引用すると、
次の3種類になります。</p>

<pre><code>  CSI &lt; r    TTIMERSIME の開閉状態を復元する。
  CSI &lt; s    TTIMESVIME の開閉状態を保存する。
  CSI &lt; Ps t TTIMESTIME の開閉状態を設定する。省略時の Ps の値は 0。
               Ps = 0      IME を閉じる。
                  = 1      IME を開く。
</code></pre>

<h2>iTerm2 の対応</h2>

<p><a href="https://github.com/gnachman/iTerm2">https://github.com/gnachman/iTerm2</a>
の
<a href="https://github.com/gnachman/iTerm2/blob/f47b1f815c54bb7d61adb3917a9a742c0e5cb703/VT100Terminal.m#L575">VT100Terminal.m</a>
を見るとわかるのですが、
制御シーケンスの存在は認識しているようです。
その処理で呼ばれているところを追いかけてみると、
現状はただ無視しているだけでした。</p>

<p>このあたりのコードは設定で
<code>Profiles</code> の <code>Terminal</code> タブの中にある
<code>Use modern parser (experimental)</code>
にチェックを入れないと使われないようで、
チェックなしの状態で
<code>ruby -e 'puts "\e[&lt;1t"</code>
とか実行しても
<code>&lt;1t</code>
と出るだけで何も起きませんでした。
チェックを入れると <code>puts</code> で自動的に入る改行だけになりましたが、
IME の状態に変化はありませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spring rails console で PAGER=lv だと /dev/tty: Device not configured]]></title>
    <link href="http://blog.n-z.jp/blog/2013-10-10-spring-and-lv.html"/>
    <updated>2013-10-10T21:28:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/spring-and-lv</id>
    <content type="html"><![CDATA[<p><code>spring rails console</code>
で
<code>pry</code>
を使っていて
pager
を起動するような出力をしたときに
<code>/dev/tty: Device not configured</code>
になることがあったので原因を調べてみました。
結論としてはタイトルに書いてありますが、
<code>spring</code>
と
<code>lv</code>
の組み合わせが原因でした。</p>

<!--more-->


<h2>確認バージョン</h2>

<p>関係する gem のバージョンは以下の通りです。</p>

<ul>
<li>rails 3.2.14, 4.0.0</li>
<li>spring 0.0.10, 0.0.11</li>
</ul>


<p>関係するプログラムのバージョンは以下の通りです。</p>

<ul>
<li>ruby 2.0.0-p247</li>
<li>lv 4.51</li>
</ul>


<p>確認した環境は Mac OS X です。</p>

<h2>原因の切り分け</h2>

<p>まず
<code>rails console</code>
だと問題は発生しないので、
<code>spring</code>
が原因のひとつなのは確実だったので、
当面の回避策として、
<code>spring rails console</code>
の代わりに
<code>rails console</code>
を使っていました。</p>

<p>次にふと他の pager を使ってみるとどうだろうと思って、
<code>spring rails console</code>
の中で
<code>ENV['PAGER']="less"</code>
として <code>lv</code> から <code>less</code> に変えて試してみたところ、
問題なく使えました。
これがきっかけで <code>lv</code> も原因のひとつだということに気づきました。</p>

<h2>原因調査</h2>

<p>ここまでわかれば原因は調べやすくなったので、
まずエラーメッセージを出しているところを探しました。
これはすぐに見つかって、
<code>lv</code> の <code>src/stream.c</code> の <code>perror( "/dev/tty" )</code> でした。</p>

<pre><code class="c lv451/src/stream.c">  close( 0 );
  if( IsAtty( 1 ) &amp;&amp; 0 != open( "/dev/tty", O_RDONLY ) )
    perror( "/dev/tty" ), exit( -1 );
</code></pre>

<p>STDIN を開き直している処理があって、
ここで <code>"/dev/tty"</code> を開けないのが原因でした。</p>

<p>元々の STDIN は
<code>spring</code>
の中で
<code>UNIXSocket#send_io</code>
と
<code>UNIXSocket#recv_io</code>
で受け渡していました。
この STDIN をそのまま使ってくれれば問題は起きないのに、
わざわざ <code>close( 0 )</code> で閉じてしまって、
開き直そうとしているのが問題だとわかりました。</p>

<p><code>spring rails console</code>
の中で直接
<code>open("/dev/tty","r")</code>
を試しても同様に
<code>Errno::ENXIO: Device not configured - /dev/tty</code>
になってしまうので、
<code>lv</code> の方を変えない限りどうしようもなさそうです。</p>

<p>というわけで、
これはもう <code>lv</code> の処理が <code>spring</code> と相性が悪いということで、
<code>spring</code> の中では <code>lv</code> を避けるしかなさそうです。</p>

<h2>結論</h2>

<p><code>~/.spring.rb</code>
で
<code>ENV["PAGER"]</code>
を書き換えることにしました。</p>

<p><code>ruby ~/.spring.rb
ENV["PAGER"] = "less" if ENV["PAGER"] == "lv"
</code></p>

<h2>余談</h2>

<p>原因を調べているときに
<code>spring</code>
の標準入出力の処理周りをみていたのですが、
<code>UNIXSocket#send_io</code>
と
<code>UNIXSocket#recv_io</code>
で受け渡していました。</p>

<p><code>recv_io</code> で mode を指定していないので、
<code>spring rails console</code> では
<code>STDIN.write</code> が使えたり <code>STDOUT.gets</code> が使えたりしてしまうようです。</p>

<p>これは <code>recv_io(IO, "r")</code> などに直せば良さそうに見えますが、
特に実害もなさそうなので、このままでもあまり問題はなさそうです。</p>

<p>パッチとしては以下のように直せば良さそうです。</p>

<pre><code class="diff">diff --git a/lib/spring/application.rb b/lib/spring/application.rb
index b7df9bb..4e34f6c 100644
--- a/lib/spring/application.rb
+++ b/lib/spring/application.rb
@@ -93,7 +93,7 @@ module Spring
       log "got client"
       manager.puts

-      streams = 3.times.map { client.recv_io }
+      streams = %w[w w r].map { |mode| client.recv_io(IO, mode) }
       [STDOUT, STDERR].zip(streams).each { |a, b| a.reopen(b) }

       preload unless preloaded?
</code></pre>

<p>テストも以下のように書いてみたのですが、
Mac OS X の環境だとそもそも既存のテストも通らないものがあったり、
Linux だと上の変更をしなくてもテストが通ってしまったりしたので
pull request を出すのは諦めました。
これらのパッチの著作権は主張しないので、
代わりに pull request を出してもらうのは歓迎します。</p>

<pre><code class="diff">diff --git a/test/acceptance/app_test.rb b/test/acceptance/app_test.rb
index a21b556..ee04e5a 100644
--- a/test/acceptance/app_test.rb
+++ b/test/acceptance/app_test.rb
@@ -440,4 +440,16 @@ class AppTest &lt; ActiveSupport::TestCase
       assert_success "bundle check"
     end
   end
+
+  test "STDIN mode" do
+    assert_success "#{spring} rails runner 'STDIN.write(%(test)) rescue $!.display'", stdout: "not opened for writing"
+  end
+
+  test "STDOUT mode" do
+    assert_success "#{spring} rails runner 'STDOUT.gets rescue $!.display'", stdout: "not opened for reading"
+  end
+
+  test "STDERR mode" do
+    assert_success "#{spring} rails runner 'STDERR.gets rescue $!.display'", stdout: "not opened for reading"
+  end
 end
</code></pre>
]]></content>
  </entry>
  
</feed>
