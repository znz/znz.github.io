<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ubuntu | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2016-03-27T22:12:54+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[letsencrypt をメールサーバーにも導入して自動化するまで]]></title>
    <link href="http://blog.n-z.jp/blog/2016-03-06-letsencrypt.html"/>
    <updated>2016-03-06T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/letsencrypt</id>
    <content type="html"><![CDATA[<p>Ubuntu 12.04.5 LTS で letsencrypt 0.4.2 を使って apache2 と postfix と dovecot の証明書の自動更新を設定してみました。</p>

<!--more-->


<h2>対象環境</h2>

<ul>
<li>Ubuntu 12.04.5 LTS (amd64)</li>
<li>letsencrypt 0.4.2</li>
<li>apache2-mpm-prefork 2.2.22-1ubuntu1.10</li>
<li>postfix 2.9.6-1~12.04.3</li>
<li>dovecot-imapd 1:2.0.19-0ubuntu2.2</li>
<li>python 2.7.3-0ubuntu2.2</li>
<li>git 1:1.7.9.5-1ubuntu0.2</li>
</ul>


<h2>事前知識</h2>

<p><a href="https://letsencrypt.jp/">https://letsencrypt.jp/</a> や <a href="http://qiita.com/tags/letsencrypt">Qiita の記事</a> などを見て事前に予備知識を得た上で、
<a href="https://letsencrypt.org/getting-started/" title="Getting Started">Getting Started</a> などで最新情報を確認しました。</p>

<p><a href="http://qiita.com/hidekuro/items/482520f220a305dc147b" title="Let's Encrypt 証明書の自動発行とELB自動登録を行ったログ">Let&rsquo;s Encrypt 証明書の自動発行とELB自動登録を行ったログ</a>に書いてある</p>

<ul>
<li>letsencrypt-auto は virtualenv 上で動き、実行ユーザーの ~/.local に Python 環境を作ります。</li>
<li>Let&rsquo;s Encrypt は、 5 renew / 7 days の制限があります。</li>
</ul>


<p>の 2 点は事前に知っておくと良いと思います。</p>

<h2>初期設定 (インストール)</h2>

<p>まず
<a href="https://letsencrypt.org/getting-started/" title="Getting Started">Getting Started</a>
に従って初期設定をしました。</p>

<ul>
<li>一般ユーザーのホームディレクトリで <code>git clone https://github.com/letsencrypt/letsencrypt</code> で最新版をとってきます。</li>
<li><code>cd letsencrypt</code> で clone したディレクトリに入ります。</li>
<li><code>letsencrypt-auto</code> スクリプトの中をある程度確認しておきます。

<ul>
<li>ここで precise (Ubuntu 12.04 LTS) や wheezy (Debian 7) だと backports の apt-line が設定されていない場合は自動で追加されるというのを知りました。 (apache プラグインが libaugeas0 の 1.0 以上に依存しているため)</li>
</ul>
</li>
<li><code>./letsencrypt-auto --help</code> で依存関係の自動インストールが走ります。

<ul>
<li>sudo のパスワードがきかれるので入力します。</li>
<li>apt で libaugeas0 などが勝手に入ります。</li>
<li>その後、<code>Installing Python packages...</code> でしばらく時間がかかります。 (ここで <code>~/.local/share/letsencrypt</code> 以下にファイルがインストールされるので、何か不具合があった時には <code>~/.local</code> 以下を消して試すと良いらしいです。)</li>
</ul>
</li>
</ul>


<p>この時点では <code>/etc</code> 以下に変化はありませんでした。 (backports の apt-line は既に追加済みだったため)</p>

<h2>ヘルプ表示</h2>

<p><code>./letsencrypt-auto --help</code> や <code>./letsencrypt-auto --help all</code> でヘルプが確認できます。
ヘルプの表示だけでも <code>sudo</code> を経由するようです。</p>

<h2>テスト実行</h2>

<p>1 週間に 5 回までの制限にひっかからないように、最初は staging サーバーで試そうと思ったため、 <code>--test-cert</code> を付けて
<code>./letsencrypt-auto certonly --test-cert --webroot -w /srv/www/hoge.n-z.jp/htdocs -d hoge.n-z.jp</code>
のように実行しました。</p>

<p>初回実行のため、メールアドレスと ToS の Agree が必要でした。</p>

<pre><code> ┌──────────────────────────────────────────────────────────────────────┐
 │ Enter email address (used for urgent notices and lost key recovery)  │
 │ ┌──────────────────────────────────────────────────────────────────┐ │
 │ │                                                                  │ │
 │ └──────────────────────────────────────────────────────────────────┘ │
 ├──────────────────────────────────────────────────────────────────────┤
 │                     &lt; 了解 &gt;           &lt; 取消 &gt;                      │
 └──────────────────────────────────────────────────────────────────────┘
</code></pre>

<p>でメールアドレスを入力しました。</p>

<pre><code> ┌──────────────────────────────────────────────────────────────────────┐
 │ Please read the Terms of Service at                                  │
 │ https://letsencrypt.org/documents/LE-SA-v1.0.1-July-27-2015.pdf. You │
 │ must agree in order to register with the ACME server at              │
 │ https://acme-v01.api.letsencrypt.org/directory                       │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 │                                                                      │
 ├──────────────────────────────────────────────────────────────────────┤
 │                     &lt;Agree &gt;           &lt;Cancel&gt;                      │
 └──────────────────────────────────────────────────────────────────────┘
</code></pre>

<p>で表示された URL の PDF の内容を確認して Agree しました。</p>

<p>成功すると最後に以下のような注意事項が表示されました。
メールアドレスや ToS への同意は <code>/etc/letsencrypt/accounts</code> 以下にアカウントの秘密鍵などと一緒に保存されるようです。</p>

<pre><code>IMPORTANT NOTES:
 - If you lose your account credentials, you can recover through
   e-mails sent to mail@example.jp.
 - Congratulations! Your certificate and chain have been saved at
   /etc/letsencrypt/live/hoge.n-z.jp/fullchain.pem. Your cert will
   expire on 2016-06-04. To obtain a new version of the certificate in
   the future, simply run Let's Encrypt again.
 - Your account credentials have been saved in your Let's Encrypt
   configuration directory at /etc/letsencrypt. You should make a
   secure backup of this folder now. This configuration directory will
   also contain certificates and private keys obtained by Let's
   Encrypt so making regular backups of this folder is ideal.
 - If you like Let's Encrypt, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le
</code></pre>

<h2>Apache 2.2 への設定反映</h2>

<p>Apache 2.4.8 未満のため、 <code>fullchain.pem</code> ではなく <code>chain.pem</code> と <code>cert.pem</code> で設定します。</p>

<pre><code>SSLCertificateKeyFile /etc/letsencrypt/live/hoge.n-z.jp/privkey.pem
SSLCertificateChainFile /etc/letsencrypt/live/hoge.n-z.jp/chain.pem
SSLCertificateFile /etc/letsencrypt/live/hoge.n-z.jp/cert.pem
</code></pre>

<p><code>sudo apache2ctl graceful</code> で反映し、 <code>https://hoge.n-z.jp</code> を開いて信頼していないルート証明書の問題による証明書エラーが出るのを確認しました。</p>

<h2>本番実行</h2>

<p><code>--test-cert</code> を外して、
<code>./letsencrypt-auto certonly --webroot -w /srv/www/hoge.n-z.jp/htdocs -d hoge.n-z.jp</code>
のように実行しました。</p>

<p>staging サーバー (<code>acme-staging.api.letsencrypt.org</code>) ではなく、本番サーバー (<code>acme-v01.api.letsencrypt.org</code>) への接続になるため、メールアドレスの入力と ToS への同意が再度必要になりました。</p>

<p>再作成扱いのためか、こんな確認ダイアログが出たので、 2 を選択して OK を押しました。</p>

<pre><code>┌──────────────────────────────────────────────────────────────────────┐
│ You have an existing certificate that contains exactly the same      │
│ domains you requested and isn't close to expiry.                     │
│ (ref: /etc/letsencrypt/renewal/hoge.n-z.jp.conf)                     │
│                                                                      │
│ What would you like to do?                                           │
│ ┌──────────────────────────────────────────────────────────────────┐ │
│ │        1  Keep the existing certificate for now                  │ │
│ │        2  Renew &amp; replace the cert (limit ~5 per 7 days)         │ │
│ │                                                                  │ │
│ │                                                                  │ │
│ │                                                                  │ │
│ │                                                                  │ │
│ │                                                                  │ │
│ │                                                                  │ │
│ │                                                                  │ │
│ └──────────────────────────────────────────────────────────────────┘ │
├──────────────────────────────────────────────────────────────────────┤
│                     &lt;  OK  &gt;           &lt;Cancel&gt;                      │
└──────────────────────────────────────────────────────────────────────┘
</code></pre>

<p><code>sudo apache2ctl graceful</code> で反映し、 <code>https://hoge.n-z.jp</code> を開いて証明書エラーが出ないのを確認しました。</p>

<h2>renew</h2>

<p>letsencrypt 0.4 で <code>letsencrypt renew</code> というサブコマンドが増えていて、有効期限が 30 日未満の証明書の更新が簡単にできるようになっています。</p>

<p>これも最初は <code>--dry-run</code> を付けて staging サーバーで試してみました。
cron で実行する時のことを考えて、最初から root 権限付きになるように <code>sudo</code> 付きで実行してみました。
すると以下のようになって <code>/etc/letsencrypt/csr</code> と <code>/etc/letsencrypt/keys</code> 以下にはファイルが作成されてしまいました。
<code>/etc</code> を汚したくない場合は <code>--dry-run</code> はあまり実行しない方が良さそうだと思いました。</p>

<pre><code>% sudo /home/hoge/letsencrypt-auto renew --dry-run
Checking for new version...
Requesting root privileges to run letsencrypt...
   /home/hoge/.local/share/letsencrypt/bin/letsencrypt renew --dry-run
Processing /etc/letsencrypt/renewal/hoge.n-z.jp.conf
** DRY RUN: simulating 'letsencrypt renew' close to cert expiry
**          (The test certificates below have not been saved.)

Congratulations, all renewals succeeded. The following certs have been renewed:
  /etc/letsencrypt/live/hoge.n-z.jp/fullchain.pem (success)
** DRY RUN: simulating 'letsencrypt renew' close to cert expiry
**          (The test certificates above have not been saved.)
</code></pre>

<p>普通に実行したら skipped になって何も変化はありませんでした。</p>

<pre><code>% sudo /home/hoge/letsencrypt/letsencrypt-auto renew
Checking for new version...
Requesting root privileges to run letsencrypt...
   /home/hoge/.local/share/letsencrypt/bin/letsencrypt renew
Processing /etc/letsencrypt/renewal/hoge.n-z.jp.conf

The following certs are not due for renewal yet:
  /etc/letsencrypt/live/hoge.n-z.jp/fullchain.pem (skipped)
No renewals were attempted.
</code></pre>

<h2>メールサーバー用証明書作成</h2>

<p>まず、ドメイン認証で必要になるため、 <code>mx6.n-z.jp</code> にも apache2 の VirtualHost 設定を追加しました。
<code>https</code> は必要ないため、 <code>http</code> だけの設定をしました。</p>

<p>今回は 2 度目なので、いきなり <code>--test-cert</code> なしで実行しました。</p>

<pre><code>% /home/hoge/letsencrypt/letsencrypt-auto certonly --webroot -w /srv/www/mx6.n-z.jp/htdocs -d mx6.n-z.jp
Checking for new version...
Requesting root privileges to run letsencrypt...
   sudo /home/hoge/.local/share/letsencrypt/bin/letsencrypt certonly --webroot -w /srv/www/mx6.n-z.jp/htdocs -d mx6.n-z.jp

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at
   /etc/letsencrypt/live/mx6.n-z.jp/fullchain.pem. Your cert will
   expire on 2016-06-04. To obtain a new version of the certificate in
   the future, simply run Let's Encrypt again.
 - If you like Let's Encrypt, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le
</code></pre>

<h2>postfix の設定変更</h2>

<p><code>/etc/postfix/main.cf</code> で以下の設定をしました。</p>

<pre><code>smtpd_tls_cert_file = /etc/letsencrypt/live/mx6.n-z.jp/fullchain.pem
smtpd_tls_key_file = /etc/letsencrypt/live/mx6.n-z.jp/privkey.pem
smtpd_tls_mandatory_protocols = !SSLv2,!SSLv3
</code></pre>

<p>そして <code>sudo service postfix reload</code> で反映しました。</p>

<p>postfix の reload は <code>apache2ctl graceful</code> などと違ってメッセージが出てくるのが後の自動化の時に邪魔だったので標準出力に捨てるようにしました (後述)。</p>

<pre><code>% sudo service postfix reload
 * Reloading Postfix configuration...
   ...done.
</code></pre>

<h2>dovecot の設定変更</h2>

<p><code>/etc/dovecot/local.conf</code> で以下の設定をしました。</p>

<pre><code>ssl_cert = &lt;/etc/letsencrypt/live/mx6.n-z.jp/fullchain.pem
ssl_key = &lt;/etc/letsencrypt/live/mx6.n-z.jp/privkey.pem
</code></pre>

<p><code>sudo service dovecot reload</code> で反映しました。</p>

<h2>自動更新</h2>

<p><a href="https://letsencrypt.org/getting-started/#writing-your-own-renewal-script" title="Writing your own renewal script">Writing your own renewal script</a> を参考にして、以下のように <code>/etc/cron.daily/letsencrypt</code> を作成して毎日 <code>letsencrypt-auto renew</code> が実行されるようにしました。
postfix と dovecot の reload を追加しています。
前述したように、 postfix の reload は標準出力を捨てて、余計なメールが飛ばないようにしています。</p>

<pre><code>% sudoedit /etc/cron.daily/letsencrypt
% cat /etc/cron.daily/letsencrypt
#!/bin/sh
if ! /home/hoge/letsencrypt/letsencrypt-auto renew &gt; /var/log/letsencrypt/renew.log 2&gt;&amp;1 ; then
    echo Automated renewal failed:
    cat /var/log/letsencrypt/renew.log
    exit 1
fi
apachectl graceful
service postfix reload &gt;/dev/null
service dovecot reload
% sudo chmod +x /etc/cron.daily/letsencrypt
</code></pre>

<p>作成したファイルの動作確認をしておきます。</p>

<pre><code>% sudo /etc/cron.daily/letsencrypt
% sudo cat /var/log/letsencrypt/renew.log
Checking for new version...
Requesting root privileges to run letsencrypt...
   /home/hoge/.local/share/letsencrypt/bin/letsencrypt renew
Processing /etc/letsencrypt/renewal/mx6.n-z.jp.conf
Processing /etc/letsencrypt/renewal/hoge.n-z.jp.conf

The following certs are not due for renewal yet:
  /etc/letsencrypt/live/mx6.n-z.jp/fullchain.pem (skipped)
  /etc/letsencrypt/live/hoge.n-z.jp/fullchain.pem (skipped)
No renewals were attempted.
%
</code></pre>

<h2>まとめ</h2>

<p>letsencrypt の導入から証明書の自動更新の設定までしました。</p>

<p>簡単に導入できて自動化もでき、しかも無料なので、まだベータ版であるという点が問題にならないところでは、積極的に使っていけば良さそうだと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dokku 0.4.1 の新規インストールを試してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2015-10-08-dokku-041.html"/>
    <updated>2015-10-08T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dokku-041</id>
    <content type="html"><![CDATA[<p>仮想環境で dokku 0.4.1 の新規インストールを試しました。</p>

<!--more-->


<h2>検証環境</h2>

<ul>
<li>Ubuntu 14.04.3 LTS (trusty) amd64</li>
<li><code>docker</code> 1.8.2</li>
<li><code>dokku</code> 0.4.1</li>
<li><a href="https://github.com/Flink/dokku-psql-single-container" title="dokku-psql-single-container">dokku-psql-single-container</a> プラグイン 0.4.0</li>
</ul>


<h2>dokku のインストール</h2>

<p><a href="https://github.com/progrium/dokku#installing" title="Installing">Installing</a> の手順通りにインストールしました。</p>

<pre><code>wget https://raw.githubusercontent.com/progrium/dokku/v0.4.1/bootstrap.sh
sudo DOKKU_TAG=v0.4.1 bash bootstrap.sh
</code></pre>

<p><code>herokuish</code> の <code>postinst</code> で時間がかかります。</p>

<h2>Web UI で初期設定</h2>

<p>debconf での設定は出てこなかったので Web ブラウザで <code>http://localhost</code> を開いて初期設定します。</p>

<p><code>Public Key</code> には <code>~/.ssh/id_rsa.pub</code> の内容をコピペしました。
まだ鍵がなければ <code>ssh-keygen</code> で作成します。</p>

<p><code>Hostname</code> はインターネットに接続しているグローバル IP アドレスが入っていたので、 <code>dokku.me</code> に変更して、 <code>Use virtualhost naming for apps</code> にチェックを入れました。</p>

<p>最後に <code>Finish Setup</code> を押して初期設定完了です。</p>

<p>この設定で <code>http://アプリ名.dokku.me</code> のような URL で各アプリにアクセスできるようになります。(<code>dokku.me</code> は <code>dokku</code> のドキュメントに書いてあるドメインで、すべてのサブドメインでも <code>127.0.0.1</code> を返してくれるドメインのようです。)</p>

<p>初期設定終了後はアプリをデプロイするまで <code>http://localhost</code> には繋がらなくなります。</p>

<h2>node のサンプルアプリのデプロイ</h2>

<p><a href="http://progrium.viewdocs.io/dokku/application-deployment/" title="Deploy an App">Deploy an App</a> に書いてあるように node のサンプルアプリをデプロイしてみます。</p>

<p>ssh server が入っていなければ <code>sudo apt-get install openssh-server</code> でインストールしておきます。</p>

<pre><code>git clone https://github.com/heroku/node-js-sample
cd node-js-sample
git remote add dokku dokku@dokku.me:node-js-app
git push dokku master
</code></pre>

<p>push が成功したら <code>http://node-js-app.dokku.me</code> をブラウザで開きます。
「<code>Hello World!</code>」と表示されれば成功です。</p>

<p><code>dokku</code> の内部の実体としては <code>/home/dokku/node-js-app</code> に入っています。</p>

<p>デプロイ前の状態に戻すには</p>

<pre><code>dokku apps:destroy node-js-app
</code></pre>

<p>で削除します。</p>

<h2>dokku コマンドについて</h2>

<p>実行例はサーバー上でのものを示していますが、 <code>sudo dokku</code> で実行しているもの以外はサーバー上で <code>dokku サブコマンド</code> で実行しても、リモートから <code>ssh dokku@dokku.me サブコマンド</code> で実行しても、基本的には同じ意味になります。</p>

<h2>グローバル設定の変更</h2>

<p>初期設定だと <code>curl</code> のタイムアウトが短すぎて、後の <code>ruby</code> のダウンロードのところでエラーになってしまうため、 <code>dokku config:set --global CURL_TIMEOUT=120</code> でタイムアウト時間を延ばします。</p>

<pre><code>$ dokku config --global
====&gt; --global config vars
CURL_CONNECT_TIMEOUT: 5
CURL_TIMEOUT:         30
$ dokku config:set --global CURL_TIMEOUT=120
-----&gt; Setting config vars
       CURL_TIMEOUT: 120
$ dokku config --global
====&gt; --global config vars
CURL_CONNECT_TIMEOUT: 5
CURL_TIMEOUT:         120
</code></pre>

<h2>dokku-psql-single-container プラグインのインストール</h2>

<pre><code>sudo dokku plugin:install https://github.com/Flink/dokku-psql-single-container
</code></pre>

<p>でプラグインをインストールします。
postgres の docker イメージをダウンロードするため、ある程度時間がかかります。</p>

<p>アンインストールは</p>

<pre><code>sudo dokku plugin:uninstall psql-single-container
</code></pre>

<p>です。(<code>dokku-</code> はつかない。)</p>

<h3>sshcommand の変更</h3>

<p><code>sshcommand create</code> で <code>dokku-psql-single-container</code> プラグインが使っている <code>/home/dokku/.psql-sc/data</code> の <a href="https://github.com/Flink/dokku-psql-single-container/issues/5">owner が変わってしまう問題がある</a>ため、</p>

<pre><code>sudoedit /usr/local/bin/sshcommand
</code></pre>

<p>で</p>

<pre><code>    chown -R $USER $USERHOME
</code></pre>

<p>を</p>

<pre><code>    chown $USER $USERHOME
    chown -R $USER $USERHOME/.ssh*
</code></pre>

<p>に変更しました。</p>

<p><a href="https://github.com/dokku/dokku-postgres">公式の postgres plugin</a> だとこの変更は必要ありません。</p>

<h2>Rails のサンプルアプリのデプロイの準備</h2>

<p>プラグインを使うため、 <code>git push</code> 前に準備しておきます。
(今回試したアプリの場合は <code>git push</code> 後に <code>psql:create</code> しても大丈夫でした。)</p>

<pre><code>dokku apps:create ruby-rails-app
dokku psql:create ruby-rails-app
</code></pre>

<p>まず <code>apps:create</code> で <code>/home/dokku/ruby-rails-app</code> を作成してから、そのアプリと連携するデータベースを <code>psql:create</code> で作成します。</p>

<h2>Rails のサンプルアプリのデプロイ</h2>

<p>Rails のサンプルアプリをデプロイします。</p>

<pre><code>git clone https://github.com/heroku/ruby-rails-sample
cd ruby-rails-sample
git remote add dokku dokku@dokku.me:ruby-rails-app
git push dokku master
dokku run ruby-rails-app rake db:migrate
</code></pre>

<p>push が成功したら <code>http://ruby-rails-app.dokku.me</code> を開きます。
<code>Hello World</code> と現在時刻が表示されていたら成功です。</p>

<p>後から <code>psql:create</code> した場合は 500 エラーになるので、 <code>dokku ps:restart ruby-rails-app</code> で再起動すると環境変数の追加が反映されてなおります。</p>

<h2>デプロイ前に戻す方法</h2>

<p><code>dokku apps:destroy ruby-rails-app</code> で戻せるはずですが、データベースに接続中でデータベースの削除に失敗することがあります。</p>

<p>失敗した場合は <code>dokku psql:admin_console</code> で接続して <code>\l</code> で削除できていないのを確認して、 <code>DROP DATABASE db_ruby_rails_app;</code> で削除できました。</p>

<h2>タイムゾーン変更</h2>

<p>タイムゾーンが UTC になっているので日本時間に変更しました。</p>

<pre><code>dokku config:set ruby-rails-app TZ=Asia/Tokyo
</code></pre>

<h2>初期設定した以外の Virtualhost を使う方法</h2>

<p><code>node-js-sample</code> を再利用して、別ドメインでも見えるようにしてみました。</p>

<pre><code>cd node-js-sample
git remote add xip dokku@dokku.me:node-js-app.127.0.0.1.xip.io
git push xip master
</code></pre>

<p><code>http://node-js-app.127.0.0.1.xip.io</code> でも「<code>Hello World!</code>」が見えれば成功ですが、デフォルトホストとして見えているだけかもしれないので、 <code>index.js</code> の <code>'Hello World!'</code> 部分を変更して区別できるようにすると良いかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dokku 0.3 系から 0.4 系へのアップグレード]]></title>
    <link href="http://blog.n-z.jp/blog/2015-10-08-dokku-03-to-04.html"/>
    <updated>2015-10-08T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/dokku-03-to-04</id>
    <content type="html"><![CDATA[<p>dokku 0.3.26 から dokku 0.4.1 へのアップグレードをしました。</p>

<!--more-->


<h2>検証環境</h2>

<ul>
<li>Ubuntu 14.04.3 LTS (trusty) amd64</li>
<li><code>docker</code> 1.6.2 から 1.8.2</li>
<li><code>dokku</code> 0.3.26 から 0.4.1</li>
<li><a href="https://github.com/Flink/dokku-psql-single-container" title="dokku-psql-single-container">dokku-psql-single-container</a> プラグイン 0.4.0</li>
</ul>


<h2>docker の apt レポジトリの変更</h2>

<p><a href="https://blog.docker.com/2015/07/new-apt-and-yum-repos/" title="New Apt and Yum Repos">New Apt and Yum Repos</a> に書いてあるように <code>docker</code> 1.8 からは新しいレポジトリにしか存在しなくなったので、 <code>/etc/apt/sources.list.d/docker.list</code> を書き換える必要がありました。</p>

<p>以下の手順で変更しました。</p>

<pre><code>sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
sudoedit /etc/apt/sources.list.d/docker.list
sudo apt-get update
</code></pre>

<p><code>docker.list</code> は以下の内容に変更しました。</p>

<pre><code>deb https://apt.dockerproject.org/repo ubuntu-trusty main
</code></pre>

<p>パッケージ名も <code>lxc-docker</code> で始まるものから <code>docker-engine</code> に変わっています。</p>

<p><code>dokku</code> 0.3.26 ではプラグインの互換性への配慮から <code>lxc-docker-1.6.2</code> にバージョンが固定されていましたが、制限が解除されています。</p>

<p>具体的には <code>herokuish</code> 0.0.1 が <code>lxc-docker-1.6.2</code> に <code>Pre-Depends</code> していたのが、 <code>herokuish</code> 0.3.3 に上がって <code>docker-engine</code> への <code>Pre-Depends</code> に変わっています。</p>

<h2>アップグレード</h2>

<h3>sshcommand の変更</h3>

<p><code>sshcommand create</code> で <code>dokku-psql-single-container</code> プラグインが使っている <code>/home/dokku/.psql-sc/data</code> の <a href="https://github.com/Flink/dokku-psql-single-container/issues/5">owner が変わってしまう問題がある</a>ため、</p>

<pre><code>sudoedit /usr/local/bin/sshcommand
</code></pre>

<p>で</p>

<pre><code>    chown -R $USER $USERHOME
</code></pre>

<p>を</p>

<pre><code>    chown $USER $USERHOME
    chown -R $USER $USERHOME/.ssh*
</code></pre>

<p>に変更しています。</p>

<p><code>sshcommand</code> パッケージが 0.0.1 から 0.1.0 に上がって変更が戻ってしまうので、 <code>sshcommand</code> だけ先にアップグレードして、再度変更しました。</p>

<h3>パッケージのアップグレード</h3>

<pre><code>sudo apt-get dist-upgrade
</code></pre>

<p>でアップグレードしました。</p>

<p><code>dokku</code> や <code>herokuish</code> のアップグレードの他に、 <code>lxc-docker-1.6.2</code> が削除されて <code>docker-engine</code> と <code>plugn</code> が新しくインストールされます。</p>

<p>初回インストールと同様に <code>herokuish</code> の postinst で時間がかかります。</p>

<h3>不要なパッケージの削除</h3>

<p><code>lxc-docker-1.6.2</code> の完全削除と (<code>plugn</code> パッケージに置き換えられた) <code>pluginhook</code> パッケージの削除をしました。</p>

<pre><code>sudo apt-get purge lxc-docker*
sudo apt-get autoremove
</code></pre>

<h3>プラグインの再インストール</h3>

<p><code>psql-sc</code> は移行措置で <code>/var/lib/dokku/plugins/available/psql-sc</code> に移動されているのですが、有効になっていない (<code>/var/lib/dokku/plugins/enabled</code> からのシンボリックリンクがない) ので、パスが違うこともあり、再度インストールして、古い方は消すことにしました。</p>

<pre><code>sudo dokku plugin:install https://github.com/Flink/dokku-psql-single-container
sudo dokku plugin:uninstall psql-sc
</code></pre>

<p>プラグインのインストールやアンインストールは root 権限が必要なため、サーバー上で <code>sudo dokku</code> で実行する必要がありました。</p>

<p>PostgreSQL のプラグインとしては <a href="https://github.com/dokku/dokku-postgres" title="dokku postgres (beta)">dokku postgres (beta)</a> もありますが、まだ beta なのとデータ移行の問題があるため、当面は同じプラグインを使い続けることにしました。</p>

<h2>再起動して反映</h2>

<pre><code>sudo reboot
</code></pre>

<p>で再起動して、問題なく動くことを確認しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[さくらのVPSにdokkuをdebで入れてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2015-04-20-sakura-vps-dokku.html"/>
    <updated>2015-04-20T21:54:51+09:00</updated>
    <id>http://blog.n-z.jp/blog/sakura-vps-dokku</id>
    <content type="html"><![CDATA[<p>さくらの VPS を新しく借りて初期設定をして、
dokku 0.3.17 を Debian パッケージで入れてみたので、そのメモです。</p>

<!--more-->


<h2>Ubuntu 14.04 インストール</h2>

<p><a href="https://help.sakura.ad.jp/app/answers/detail/a_id/2403" title="カスタムOSインストールガイド - Ubuntu 12.04/14.04">カスタムOSインストールガイド - Ubuntu 12.04/14.04</a>
を参考にしてインストールしました。</p>

<h2>etckeeper インストール</h2>

<p>etckeeper だけをインストールすると bzr が一緒に入って使われてしまうので、
git と一緒にインストールすることで bzr が入らないようにします。</p>

<pre><code>sudo aptitude install git etckeeper
</code></pre>

<p>次に etckeeper.conf を編集して <code>VCS="bzr"</code> の代わりに <code>VCS="git"</code> を有効にします。
ついでにコミットするときに差分をみたいので <code>GIT_COMMIT_OPTIONS="-v"</code> を設定しました。</p>

<pre><code>EDITOR=vi sudoedit /etc/etckeeper/etckeeper.conf
</code></pre>

<p>パッケージをインストールしたときに自動で初期コミットされていないので、
手動で初期コミットをしておきます。</p>

<pre><code>sudo etckeeper init
sudo etckeeper commit "Initial commit"
</code></pre>

<p>git なので <code>git gc</code> もしておきます。
<code>etckeeper vcs コマンド</code> で <code>/etc</code> ディレクトリで <code>git コマンド</code> を実行するのと同じ意味になります。</p>

<pre><code>sudo etckeeper vcs gc
</code></pre>

<h2>ufw を有効にする</h2>

<p>firewall 設定のために ufw を有効にします。</p>

<pre><code>sudo ufw enable
sudo etckeeper commit "Enable ufw"
</code></pre>

<h2>ssh を許可</h2>

<p>初期設定のために 22 番ポートを許可します。</p>

<pre><code>sudo ufw allow 22/tcp
</code></pre>

<p>リモートから ssh で入って <code>~/.ssh/authorized_keys</code> の設置などをします。</p>

<p>次にポート番号の変更や
<code>PasswordAuthentication no</code> への設定変更、
<code>PermitRootLogin</code> が <code>yes</code> 以外になっていることの確認、
<code>ChallengeResponseAuthentication no</code> の確認、
<code>AllowUsers</code> の追加をしました。</p>

<pre><code>sudo ufw delete allow 22/tcp
EDITOR=vi sudoedit /etc/ssh/sshd_config
sudo service ssh restart
sudo etckeeper commit "Setup sshd"
</code></pre>

<h2><code>~/.ssh/config</code> 設定</h2>

<p>クライアント側の <code>~/.ssh/config</code> に以下のような設定をして、
ポート番号などの指定を省略できるようにします。</p>

<p>ついでに後で使う dokku 用の設定も追加しました。</p>

<pre><code>Host サーバーのホスト名
    Hostname サーバーのIPアドレス
    User 初期ユーザー名
    Port 変更したポート番号
    IdentityFile ~/.ssh/id_rsa
    IdentitiesOnly yes
Host dokku-vps
    Hostname サーバーのIPアドレス
    User dokku
    Port 変更したポート番号
    IdentityFile ~/.ssh/id_rsa
    IdentitiesOnly yes
    RequestTTY yes
</code></pre>

<h2>nano を purge</h2>

<p>vi に慣れていて、
nano は使いにくいと感じているので、
purge しました。</p>

<pre><code>sudo aptitude purge nano
</code></pre>

<h2>IPv6 設定</h2>

<p>interfaces ファイルに以下の inet6 の設定を追加します。</p>

<pre><code>iface eth0 inet6 static
    address コントロールパネルで確認できるIPv6アドレス
    netmask 64
    gateway fe80::1
    accept_ra 0
    autoconf 0
    privext 0
    dns-nameservers コントロールパネルで確認できるDNS
</code></pre>

<p>編集して設定を反映して疎通確認をしました。</p>

<pre><code>sudoedit /etc/network/interfaces
sudo ifdown eth0 &amp;&amp; sudo ifup eth0
ping6 -c 3 www.kame.net
</code></pre>

<p><code>ifup</code> のときに <code>Waiting for DAD... Done</code> と出ましたが、
IPv6 の Duplicate Address Detection が動いているだけのようなので
問題はなさそうでした。</p>

<h2>dokku の Debian パッケージインストール</h2>

<p>dokku 0.3.18 からは Debian パッケージでのインストールがデフォルトになると
<a href="http://progrium.viewdocs.io/dokku/getting-started/install/debian" title="Debian Package Installation Notes">Debian Package Installation Notes</a>
に書いてあったので、この手順を参考にしてインストールしました。</p>

<pre><code>wget https://get.docker.io/gpg
sudo apt-key add gpg
rm gpg
wget https://packagecloud.io/gpg.key
sudo apt-key add gpg.key
rm gpg.key
echo "deb http://get.docker.io/ubuntu docker main" | sudo tee /etc/apt/sources.list.d/docker.list
echo "deb https://packagecloud.io/dokku/dokku/ubuntu/ trusty main" | sudo tee /etc/apt/sources.list.d/dokku.list
sudo apt-get update
sudo apt-get install dokku
</code></pre>

<p>なぜか
<code>Importing buildstep into docker (around 5 minutes)</code>
で 5 分どころではなく 1 時間ぐらいかかったので、
他のことをしながらのんびり待つ必要がありました。</p>

<h2>初期設定用ポート開放</h2>

<p>いきなり開放してしまうと Dokku Setup を勝手に実行されてしまう可能性があるので、
まず <code>SSH_CLIENT</code> 環境変数でサーバーに接続している自分のグローバル IP アドレスを確認して、
その IP アドレスのみから HTTP を許可しました。</p>

<pre><code>env | grep SSH
sudo ufw allow proto tcp from 接続元IPアドレス to any port 80
</code></pre>

<p>そして <code>http://サーバーのホスト名/</code> を開いて Dokku Setup を表示しました。</p>

<p>空欄になっていた <code>Public Key</code> には自分の <code>~/.ssh/id_rsa.pub</code> を貼付けました。
<code>Hostname</code> には IPv6 アドレスが表示されていたので、
<code>xip.io</code> (IP アドレスのサブドメインで IP アドレスを返してくれるサービス) を使って
<code>サーバーのIPv4アドレス.xip.io</code> (例えば <code>192.0.2.1.xip.io</code> のような感じ) を設定しました。
<code>Use virtualhost naming for apps</code> にチェックを入れて
<code>Finish Setup</code> を押しました。
ブラウザーは <code>http://progrium.viewdocs.io/dokku/application-deployment</code> にリダイレクトされました。</p>

<p>サーバー側では
<code>/home/dokku</code> 以下に設定が保存される他に、
<code>/etc/init/dokku-installer.conf</code> と <code>/etc/nginx/conf.d/dokku-installer.conf</code> が削除されるので、
<code>etckeeper commit</code> しました。</p>

<pre><code>sudo etckeeper commit "Finish Dokku Setup"
</code></pre>

<h2>HTTP ポート開放</h2>

<p>初期設定が終了したので、初期設定用のルールを削除して、
一般に開放するように変更しました。</p>

<pre><code>sudo ufw delete allow proto tcp from 接続元IPアドレス to any port 80
sudo ufw allow 80/tcp
</code></pre>

<h2>dokku の ssh を許可</h2>

<p><code>sshd_config</code> に <code>AllowUsers dokku</code> を追加しました。</p>

<pre><code>sudoedit /etc/ssh/sshd_config
sudo service ssh restart
sudo etckeeper commit "Allow ssh to dokku"
</code></pre>

<h2>ssh の接続確認</h2>

<pre><code>ssh dokku-vps
</code></pre>

<p>で dokku のヘルプが表示されるのを確認しておきます。</p>

<h2>サンプルアプリのデプロイ</h2>

<p>最小限のサンプルとして node-js-sample をデプロイします。</p>

<pre><code>git clone https://github.com/heroku/node-js-sample
cd node-js-sample
git remote add dokku-vps dokku-vps:node-js-app
git push dokku-vps master
</code></pre>

<p><code>http://node-js-app.サーバーのIPアドレス.xip.io/</code> を開いて
<code>Hello World!</code> と表示されたら成功です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 14.04 LTS に Zabbix 2.4 を PostgreSQL を使う設定で入れた]]></title>
    <link href="http://blog.n-z.jp/blog/2015-03-13-zabbix-24-pgsql.html"/>
    <updated>2015-03-13T21:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/zabbix-24-pgsql</id>
    <content type="html"><![CDATA[<p><a href="https://www.zabbix.com/documentation/2.4/manual/installation/install_from_packages" title="3 Installation from packages [Zabbix Documentation 2.4]">3 Installation from packages [Zabbix Documentation 2.4]</a>
だと MySQL の例しかなく、
PostgreSQL で入れるとちょっとひっかかったところがあったので、
そのメモです。</p>

<p>Debian や Ubuntu の公式パッケージの zabbix との違いも気づいた範囲で書いておきました。</p>

<!--more-->


<h2>zabbix-release のインストール</h2>

<p><code>zabbix-release</code> をインストールして apt-line を設定して
<code>apt-get update</code> するところまでは公式マニュアルと同じです。</p>

<pre><code>wget http://repo.zabbix.com/zabbix/2.4/ubuntu/pool/main/z/zabbix-release/zabbix-release_2.4-1+trusty_all.deb
sudo dpkg -i zabbix-release_2.4-1+trusty_all.deb
sudo apt-get update
</code></pre>

<h2>zabbix-server のインストール</h2>

<p><code>zabbix-server-mysql</code> の代わりに <code>zabbix-server-pgsql</code> をインストールします。
途中で入力するパスワードは後で必要になるのでメモするか覚えておきます。
(Debian や Ubuntu の公式パッケージの zabbix と違って <code>dbconfig-common</code> を使うようになっています。)</p>

<pre><code>sudo apt-get install zabbix-server-pgsql
</code></pre>

<p>ただし、先に postgresql を入れておかないとデータベースの作成のところでエラーになるようです。</p>

<h2>zabbix-frontend-php のインストール</h2>

<p><code>/usr/share/doc/zabbix-frontend-php/README.Debian</code> に書いてあるのですが、
<code>php5-pgsql</code> を入れておくと初期設定の時のデータベースの選択肢に PostgreSQL が出てきます。</p>

<pre><code>sudo apt-get install zabbix-frontend-php php5-pgsql
</code></pre>

<h2>PHP のタイムゾーンの設定</h2>

<pre><code>sudoedit /etc/zabbix/apache.conf
</code></pre>

<p>で</p>

<pre><code># php_value date.timezone Europe/Riga
</code></pre>

<p>を</p>

<pre><code>php_value date.timezone Asia/Tokyo
</code></pre>

<p>に変更して</p>

<pre><code>sudo service apache2 reload
</code></pre>

<p>で反映します。
(Debian や Ubuntu の公式パッケージの zabbix と違って <code>apache2</code> のみ対応です。
<code>php5-fpm</code>+<code>nginx</code> には対応していないので <code>nginx</code> で使うなら完全に独自設定が必要です。)</p>

<h2>初期設定</h2>

<p><code>http://localhost/zabbix/</code> を開いて初期設定を開始します。
<code>Next</code> ボタンで進んでいってデータベースの設定のところは</p>

<ul>
<li>Database Type : PostgreSQL</li>
<li>Database host : localhost のまま</li>
<li>Database port : 0 のまま</li>
<li>Database name : zabbix のまま</li>
<li>User : root から zabbix に変更</li>
<li>Password : <code>zabbix-server-pgsql</code> をインストールしたときに設定したパスワード</li>
</ul>


<p>と設定します。</p>

<p>そして <code>Next</code> で進んでいって <code>Finish</code> まで行くと初期設定終了です。
(Debian や Ubuntu の公式パッケージの zabbix と違って
<code>/etc/zabbix/web/</code> が <code>www-data</code> から書き込み可能になっていて
ダウンロードして自分で設置しなくても設定完了するようになっています。)</p>

<h2>ログイン</h2>

<ul>
<li>Username : Admin</li>
<li>Password : zabbix</li>
</ul>


<p>でログインします。</p>

<p>右上の Profile から Language を Japanese (ja_JP) に変更して Update すると
日本語で使えるようになります。
パスワードもここで変更できます。</p>

<p>ログイン前の画面は guest ユーザーの言語が反映されているので、
「管理」-「ユーザー」からメンバーの「guest」を開いて言語を変更して更新します。</p>

<h2>zabbix-agent のインストール</h2>

<pre><code>sudo apt-get install zabbix-agent
</code></pre>

<p>でインストールできます。</p>

<h2>Zabbix server の監視</h2>

<p><code>zabbix-agent</code> をインストールした後、
「設定」-「ホスト」でステータスを「無効」から「有効」に切り替えます。</p>

<p>しばらくするとエージェントの状態の「Z」が緑色になって監視できていることがわかります。</p>

<h2>グラフの日本語の文字化け対策</h2>

<p>グラフなどの図の中の日本語が文字化けするときは
適当な日本語フォントを入れて
<code>zabbix-frontend-php</code> の設定をし直せば直ります。</p>

<pre><code>sudo apt-get install fonts-vlgothic
sudo dpkg-reconfigure zabbix-frontend-php
</code></pre>
]]></content>
  </entry>
  
</feed>
