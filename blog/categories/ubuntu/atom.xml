<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ubuntu | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-06-25T22:13:34+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vagrant の Multi VM 間で IPsec を試した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-04-vagrant-multivm-ipsec-demo.html"/>
    <updated>2014-06-04T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/vagrant-multivm-ipsec-demo</id>
    <content type="html"><![CDATA[<p>正常に IPsec の暗号化通信ができているときの racoon のログなどを確認したかったので、
Vagrant と ansible で
IPsec で通信できる Multi VM 環境を作ってみました。</p>

<p>playbook は
<a href="https://github.com/znz/ansible-playbook-ipsec-demo">https://github.com/znz/ansible-playbook-ipsec-demo</a>
で公開しています。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>ホスト OS : Mac OS X 10.9.3</li>
<li>VirtualBox 4.3.12</li>
<li>Vagrant 1.6.3</li>
<li>ansible 1.6.2</li>
<li>ゲスト OS : Ubuntu 14.04 &times; 2</li>
</ul>


<p>Ubuntu は <a href="https://cloud-images.ubuntu.com/vagrant/trusty/current/">https://cloud-images.ubuntu.com/vagrant/trusty/current/</a> のイメージを使ったので、
daily build の状態によっては動作が変わっているかもしれません。</p>

<h2>ホストオンリーネットワーク</h2>

<p>使った後は</p>

<ul>
<li>vboxnet1 (192.168.50.1/24)</li>
<li>vboxnet2 (192.168.11.1/24)</li>
<li>vboxnet3 (192.168.12.1/24)</li>
</ul>


<p>が勝手に増えているので、不要なら設定で消しておくと良いと思います。</p>

<p>ネットワークとしては以下のように 192.168.50.0/24 の部分で IPsec 接続をして、
192.168.11.11 と 192.168.12.12 をつなぐ、という感じにしています。
デフォルトの eth0 は外部への接続用としてそのままにしています。</p>

<p>```
192.168.11.11 (vm1:eth2)</p>

<pre><code>   |
</code></pre>

<p>192.168.50.11 (vm1:eth1)</p>

<pre><code>   |
</code></pre>

<p>192.168.50.12 (vm2:eth1)</p>

<pre><code>   |
</code></pre>

<p>192.168.12.12 (vm2:eth2)
```</p>

<h2>準備</h2>

<p>Usage に書いてあるように準備をしておきます。
先日作った <code>ja_jp</code> role は git submodule にしているので、</p>

<p><code>
% git submodule init
% git submodule update
</code></p>

<p>で取得する必要があります。</p>

<h2>試し方</h2>

<p><code>vagrant up</code>
すると
<code>/etc/ipsec-tools.conf</code>
と
<code>/etc/racoon/racoon.conf</code>
に設定が入っている状態になっているので、
始点アドレスを指定して
<code>ipsec-tools.conf</code>
に設定した経路を通るようにパケットを送ると
IPsec VPN がつながります。</p>

<p><code>ping</code> コマンドのように直接始点アドレスを指定するオプションがない場合は
<code>ping -I eth2 192.168.12.12</code> のように network interface で指定すれば
良いようです。</p>

<h2>動作確認</h2>

<p>以下のコマンドの出力が接続前後で変わることが確認できます。</p>

<ul>
<li><code>racoonctl -l show-sa isakmp</code></li>
<li><code>racoonctl -l show-sa ipsec</code></li>
<li><code>setkey -D</code></li>
</ul>


<p>racoon のログが <code>/var/log/syslog</code> に大量に出ているのを確認できます。
(<code>racoon.conf</code> で <code>log debug</code> にしているため)</p>

<h2>tshark でパケットの確認</h2>

<p><code>tshark</code> パッケージをインストールした後、
<code>sudo dpkg-reconfigure wireshark-common</code>
で一般ユーザーでも実行を許可するようにして、
実行を許可するユーザーを <code>wireshark</code> に追加します。</p>

<p>グループの追加を反映するためにログインし直すと、
<code>tshark -i eth1 -V 'port 500'</code>
などでパケットの確認ができるようになります。</p>

<p>暗号化されていて詳細はわかりませんが、
UDP の 500 番ポートで Informational のパケットが流れていることが確認できました。</p>

<p>GUI の wireshark の方では
<a href="http://ask.wireshark.org/questions/12019/how-can-i-decrypt-ikev1-andor-esp-packets">http://ask.wireshark.org/questions/12019/how-can-i-decrypt-ikev1-andor-esp-packets</a>
の方法で暗号化の解除もできるようです。</p>

<p>syslog の方で racoon のログをみると、
DPD のパケットらしいということが確認できました。
syslog の方で <code>#012</code> となっている部分がありますが、
これは rsyslog で改行が変換されたたもので空白として無視すれば良くて、
例えば</p>

<p><code>
Jun  4 17:54:43 vm1 racoon: DEBUG: new cookie:#012831d33d46e20f8e6
Jun  4 17:54:43 vm1 racoon: DEBUG: final encryption key computed:
Jun  4 17:54:43 vm1 racoon: DEBUG: #012932d361f fc62ddc2 6164d513 d40d211f b7364166 232cf490
</code></p>

<p>というログなら cookie は <code>831d33d46e20f8e6</code> になります。</p>

<p>鍵は <code>932d361ffc62ddc26164d513d40d211fb7364166232cf490</code> になると思ったのですが、
これを
Edit &ndash;> Preferences &ndash;> Protocols &ndash;> ISAKMP &ndash;> IKEv1 Decryption Table:
に設定すれば良いはずなのですが、試したところ decrypt されなかったので、
あっているのかどうかはわかりませんでした。
cookie の方は他のログなどで確認できたので、あっているはずです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible で sources.list を変更したときに update する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-20-ansible-apt-update.html"/>
    <updated>2014-05-20T22:58:09+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-apt-update</id>
    <content type="html"><![CDATA[<p>ansible で sources.list を変更したときには
<code>apt-get update</code> して欲しいのですが、
毎回 update するのは無駄なので、
<code>cache_valid_time</code> も使いたいと思ったので対処しました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>クライアント側 ansible 1.6.1</li>
<li>サーバー側 Ubuntu 12.04</li>
</ul>


<h2>やり方</h2>

<p><code>register</code> で <code>template</code> モジュールの実行結果を受けて、
<code>changed</code> の場合は必ず update して、
<code>skipped</code> の場合は <code>cache_valid_time</code> で情報が古い場合だけ update するようにしました。</p>

<p></p>

<h2>```yaml tasks/apt.yaml</h2>

<ul>
<li>template: src=sources.list.{{ ansible_distribution }}.j2 dest=/etc/apt/sources.list owner=root group=root mode=0644
register: apt_sources_list</li>
<li>apt: update_cache=yes
when: apt_sources_list|changed</li>
<li>apt: update_cache=yes cache_valid_time=3600
when: apt_sources_list|skipped
```
</li>
</ul>


<h2>テンプレートの内容</h2>

<p>gathering facts で設定された <code>ansible_distribution_release</code> と
<code>vars</code> で別途設定した <code>apt_ubuntu_uri</code> と <code>apt_ubuntu_components</code> を
組み合わせて apt-line を作るようにしました。</p>

<p>Ubuntu をインストールした直後の sources.list では
components が別の行になっているものもあったのですが、
1 行にまとめました。</p>

<p>
```text templates/sources.list.Ubuntu.j2
deb {{ apt_ubuntu_uri }} {{ ansible_distribution_release }} {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb-src {{ apt_ubuntu_uri }} {{ ansible_distribution_release }} {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-updates {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb-src {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-updates {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}</p>

<h1>deb {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-backports {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}</h1>

<h1>deb-src {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-backports {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}</h1>

<p>deb <a href="http://security.ubuntu.com/ubuntu">http://security.ubuntu.com/ubuntu</a> {{ ansible_distribution_release }}-security {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb-src <a href="http://security.ubuntu.com/ubuntu">http://security.ubuntu.com/ubuntu</a> {{ ansible_distribution_release }}-security {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
```
</p>

<p><code>backports</code> は使っていなかったのでコメントアウトしていますが、
<code>deb-src</code> も使わないのならコメントアウトしておいても良さそうです。</p>

<h2><code>vars</code> の内容</h2>

<p>例として jaist ミラーを使うようにしました。</p>

<h2>```yaml vars/main.yml</h2>

<p>apt_ubuntu_uri: &ldquo;<a href="http://ftp.jaist.ac.jp/pub/Linux/ubuntu/">http://ftp.jaist.ac.jp/pub/Linux/ubuntu/</a>&rdquo;
apt_ubuntu_components:
&ndash; main
&ndash; restricted
&ndash; universe
&ndash; multiverse
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible で ppa を追加する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-20-ansible-add-ppa.html"/>
    <updated>2014-05-20T22:47:22+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-add-ppa</id>
    <content type="html"><![CDATA[<p>サーバーとしてインストールした Ubuntu だと
<code>add-apt-repository</code> コマンドが入っている
<code>python-software-properties</code> パッケージが入っていなくて
<code>ppa</code> の追加に困ることがありますが、
ansible を使えばサーバー自体に余計なパッケージを入れなくても
<code>ppa</code> の apt 設定を追加できました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>クライアント側 ansible 1.6.1</li>
<li>サーバー側 Ubuntu 12.04</li>
</ul>


<h2>ansible コマンド直接</h2>

<p><code>apt_repository</code> モジュールの引数の <code>repo</code> に <code>ppa</code> を指定するだけです。</p>

<p><code>console
ansible all -s -K -i ./inventory_hosts -m apt_repository -a "repo='ppa:chris-lea/node.js'"
</code></p>

<h2>playbook.yml に書く</h2>

<p><code>- apt_repository: repo='ppa:chris-lea/node.js'</code>
のように書くだけです。
普通にインストールすればサーバーでも入っていると思うのですが、
<code>python-apt</code> に依存しているので、
<code>- apt: pkg=python-apt</code>
も書いておくと良いかもしれません。</p>

<p><a href="https://github.com/znz/ansible-playbook-passenger/blob/master/provisioning/roles/passenger/tasks/nodejs-ppa.yml">nodejs-ppa.yml</a>
が実際の使用例です。</p>

<h2>```yaml nodejs-ppa.yml</h2>

<ul>
<li>apt: pkg=python-apt</li>
<li>apt_repository: repo=&lsquo;ppa:chris-lea/node.js&rsquo;
when: ansible_distribution_release == &ldquo;precise&rdquo;
```</li>
</ul>


<p>Debian の場合や ubuntu 14.04 の場合は除外しても良いかと思って、
ubuntu 12.04 の時だけ実行するために
<code>when: ansible_distribution_release == "precise"</code>
で実行する環境を制限しています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 14.04 で dokku を使う]]></title>
    <link href="http://blog.n-z.jp/blog/2014-04-18-ubuntu-1404-dokku.html"/>
    <updated>2014-04-18T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ubuntu-1404-dokku</id>
    <content type="html"><![CDATA[<p>Ubuntu 14.04 がリリースされたので、
<a href="https://github.com/progrium/dokku">dokku</a>
を Ubuntu 14.04 で試してみました。</p>

<!--more-->


<h2>dokku の Vagrantfile を確認する</h2>

<p>まず dokku を clone して中の Vagrantfile をみて、
環境変数で設定できる項目があるのを確認しておきます。</p>

<p><code>console
% git clone https://github.com/progrium/dokku
% cd dokku
% vi Vagrantfile
</code></p>

<h2>Vagantfile を変更する</h2>

<p>デフォルトの apt-line のままだとダウンロードが遅いので、
<a href="http://mirrors.ubuntu.com/mirrors.txt">http://mirrors.ubuntu.com/mirrors.txt</a>
からミラーサーバーを選んで (今回は jaist を選択)、
shell provision のところで書き換えておきます。
(関係ないところにマッチして問題が起きる可能性はほぼないので、置換元の URL の <code>.</code> はエスケープしていません。)</p>

<p>```diff
diff &mdash;git a/Vagrantfile b/Vagrantfile
index a310f6b..7c1a133 100644
&mdash;&ndash; a/Vagrantfile
+++ b/Vagrantfile
@@ -29,5 +29,10 @@ Vagrant::configure(&ldquo;2&rdquo;) do |config|</p>

<pre><code> vb.customize ["modifyvm", :id, "--memory", BOX_MEMORY]
</code></pre>

<p>   end</p>

<ul>
<li>config.vm.provision :shell, :inline => &ldquo;apt-get -y install git &amp;&amp; cd /root/dokku &amp;&amp; #{make_cmd}&rdquo;</li>
<li>config.vm.provision :shell, :inline => &lt;&lt;-SHELL</li>
<li> sed -i~ -e &rsquo;s;<a href="http://archive.ubuntu.com/ubuntu;http://ftp.jaist.ac.jp/pub/Linux/ubuntu;">http://archive.ubuntu.com/ubuntu;http://ftp.jaist.ac.jp/pub/Linux/ubuntu;</a>&lsquo; /etc/apt/sources.list &amp;&amp;</li>
<li> apt-get update &amp;&amp;</li>
<li> apt-get -y install git &amp;&amp;</li>
<li> cd /root/dokku &amp;&amp; #{make_cmd}</li>
<li>SHELL
end
```</li>
</ul>


<h2>初回起動</h2>

<p><code>BOX_NAME</code>, <code>BOX_URI</code> に trusty を指定して、
<code>BOX_MEMORY</code> も 512 から 2048 に増やした値を指定して起動します。</p>

<p><code>node-js-sample</code> だと 512 メガでも問題ないのですが、
Rails アプリを動かそうとするとメモリ不足で <code>bundle install</code> の途中で失敗して
deploy できなかったので増やしています。</p>

<p><code>console
% BOX_NAME=trusty-amd64-20140418 BOX_URI=https://cloud-images.ubuntu.com/vagrant/trusty/20140418/trusty-server-cloudimg-amd64-vagrant-disk1.box BOX_MEMORY=2048 vagrant up
</code></p>

<p>box のダウンロードとインストール、
VM の作成などには時間がかかるので、
他のことをしながらゆっくり待ちます。</p>

<h2>二度目以降の起動</h2>

<p>VM の作成ができている状態なら、
box の設定は参照されないので省略できます。
<code>vagrant destroy</code> した後に <code>vagrant up</code> し直したときは参照されるので、
毎回設定していてもかまいません。</p>

<p><code>BOX_MEMORY</code> は毎回設定されるので、指定を忘れると 512 に戻ってしまいます。</p>

<p><code>console
% BOX_MEMORY=2048 vagrant up
</code></p>

<h2>dokku の初期設定</h2>

<p>ssh の鍵を追加します。</p>

<p>```console
% vagrant ssh
vagrant@dokku:~$ egrep &lsquo;^ssh&rsquo; ~/.ssh/authorized_keys | sudo sshcommand acl-add dokku vagrant
dd:3b:b8:2e:85:04:06:e9:ab:ff:a8:0a:c0:04:6e:d6
vagrant@dokku:~$ cat ~/.ssh/authorized_keys</p>

<h1>CLOUD_IMG: This file was created/modified by the Cloud Image build process</h1>

<p>ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key
vagrant@dokku:~$ cat /home/dokku/.ssh/authorized_keys
command=&ldquo;FINGERPRINT=dd:3b:b8:2e:85:04:06:e9:ab:ff:a8:0a:c0:04:6e:d6 NAME=vagrant <code>cat /home/dokku/.sshcommand</code> $SSH_ORIGINAL_COMMAND&rdquo;,no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key
```</p>

<h2>dokku の鍵追加失敗例</h2>

<p><code>cat ~/.ssh/authorized_keys | sudo sshcommand acl-add dokku vagrant</code>
で追加してしまうと以下のように変になってしまいます。</p>

<p><code>text
vagrant@dokku:~$ cat /home/dokku/.ssh/authorized_keys
command="FINGERPRINT=is NAME=vagrant `cat /home/dokku/.sshcommand` $SSH_ORIGINAL_COMMAND",no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding # CLOUD_IMG: This file was created/modified by the Cloud Image build process
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key
</code></p>

<p>```bash</p>

<pre><code>KEY=$(cat)
FINGERPRINT=$(ssh-keygen -lf /dev/stdin &lt;&lt;&lt; $(echo $KEY) | awk '{print $2}')
KEY_PREFIX="command=\"FINGERPRINT=$FINGERPRINT NAME=$NAME \`cat $USERHOME/.sshcommand\` \$SSH_ORIGINAL_COMMAND\",no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding"
echo "$KEY_PREFIX $KEY" &gt;&gt; "$USERHOME/.ssh/authorized_keys"
echo $FINGERPRINT
</code></pre>

<p>```</p>

<p>の部分を以下のように <code>while read</code> ループに変えた方が良いのかもしれません。</p>

<p>```bash</p>

<pre><code>while read KEY; do
  FINGERPRINT=$(ssh-keygen -lf /dev/stdin &lt;&lt;&lt; $(echo $KEY) | awk '{print $2}')
  KEY_PREFIX="command=\"FINGERPRINT=$FINGERPRINT NAME=$NAME \`cat $USERHOME/.sshcommand\` \$SSH_ORIGINAL_COMMAND\",no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding"
  echo "$KEY_PREFIX $KEY" &gt;&gt; "$USERHOME/.ssh/authorized_keys"
  echo $FINGERPRINT
done
</code></pre>

<p>```</p>

<h2>node-js-sample の deploy</h2>

<p><code>node-js-sample</code> を <code>deploy</code> して動作確認します。
以下の例では <code>ssh dokku</code> で VM に接続できるように <code>~/.ssh/config</code> に設定済みです。</p>

<p>```console
% git clone <a href="https://github.com/heroku/node-js-sample">https://github.com/heroku/node-js-sample</a>
Cloning into &lsquo;node-js-sample&rsquo;&hellip;
remote: Reusing existing pack: 319, done.
remote: Total 319 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (319/319), 201.92 KiB | 210.00 KiB/s, done.
Resolving deltas: 100% (17/17), done.
Checking connectivity&hellip; done.
% cd node-js-sample
% git remote add dokku dokku:node-js-app
%  git push &mdash;set-upstream dokku master
Counting objects: 319, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (274/274), done.
Writing objects: 100% (319/319), 201.92 KiB | 0 bytes/s, done.
Total 319 (delta 17), reused 319 (delta 17)
&mdash;&mdash;&ndash;> Cleaning up &hellip;
remote: Cloning into &lsquo;/tmp/tmp.ChNvZEb5S9&rsquo;&hellip;
&mdash;&mdash;&ndash;> Building node-js-app &hellip;
remote: warning: You appear to have cloned an empty repository.
remote: done.
remote: HEAD is now at 2e52ce7&hellip; Update documentation links</p>

<pre><code>   Node.js app detected
</code></pre>

<p>&mdash;&mdash;&ndash;> Requested node range:  0.10.x
&mdash;&mdash;&ndash;> Resolved node version: 0.10.26
&mdash;&mdash;&ndash;> Downloading and installing node
(省略)
&mdash;&mdash;&ndash;> Discovering process types</p>

<pre><code>   Procfile declares types -&gt; web
</code></pre>

<p>&mdash;&mdash;&ndash;> Releasing node-js-app &hellip;
&mdash;&mdash;&ndash;> Deploying node-js-app &hellip;
=====> Application deployed:</p>

<pre><code>   http://node-js-app.dokku.me
</code></pre>

<p>To dokku:node-js-app
 * [new branch]      master &ndash;> master
Branch master set up to track remote branch master from dokku.
```</p>

<p>Vagrantfile で guest の 80 番ポートを host の 8080 番ポートで見えるように設定されているので
<code>http://node-js-app.dokku.me:8080/</code>
で開くと <code>Hello World!</code> と表示されます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant で Ubuntu 14.04 を試す]]></title>
    <link href="http://blog.n-z.jp/blog/2014-04-18-ubuntu-1404-vagrant.html"/>
    <updated>2014-04-18T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ubuntu-1404-vagrant</id>
    <content type="html"><![CDATA[<p>Vagrant で Ubuntu 14.04 LTS (trusty) を試しました。</p>

<!--more-->


<h2>Vagrantfile 作成</h2>

<p>まず <code>Vagrantfile</code> を作成します。
box ファイルの URL は
<a href="https://cloud-images.ubuntu.com/vagrant/trusty/">https://cloud-images.ubuntu.com/vagrant/trusty/</a>
から探します。
current にするといつのイメージかわかりにくいので、
日付の URL と box 名を指定しています。</p>

<p><a href="https://cloud-images.ubuntu.com/vagrant/">https://cloud-images.ubuntu.com/vagrant/</a>
には
<code>Ubuntu Server 14.04 LTS (Trusty Tahr) daily builds</code>
と書いてあるのに 20140417 と 20140418 の前が 20140221 と 20140222 になっていて
daily ではなさそうに見えるのですが、
リリース前は更新を止めていただけなのかもしれません。</p>

<p><code>console
% mkdir trusty
% cd trusty
% vagrant init
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
% vi Vagrantfile
(config.vm.box と config.vm.box_url を設定)
% egrep '^ *[^ #]' Vagrantfile
VAGRANTFILE_API_VERSION = "2"
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "trusty-amd64-20140418"
  config.vm.box_url = "https://cloud-images.ubuntu.com/vagrant/trusty/20140418/trusty-server-cloudimg-amd64-vagrant-disk1.box"
end
</code></p>

<p>この段階ではファイルとディレクトリを削除すれば元に戻せます。</p>

<h2>box の追加と起動</h2>

<p>初回の <code>vagrant up</code> は box のダウンロードとインストールもするので
時間がかかります。</p>

<p>```console
% vagrant up
Bringing machine &lsquo;default&rsquo; up with &lsquo;virtualbox&rsquo; provider&hellip;
==> default: Box &lsquo;trusty-amd64-20140418&rsquo; could not be found. Attempting to find and install&hellip;</p>

<pre><code>default: Box Provider: virtualbox
default: Box Version: &gt;= 0
</code></pre>

<p>==> default: Adding box &lsquo;trusty-amd64-20140418&rsquo; (v0) for provider: virtualbox</p>

<pre><code>default: Downloading: https://cloud-images.ubuntu.com/vagrant/trusty/20140418/trusty-server-cloudimg-amd64-vagrant-disk1.box
</code></pre>

<p>==> default: Box download is resuming from prior download progress
==> default: Successfully added box &lsquo;trusty-amd64-20140418&rsquo; (v0) for &lsquo;virtualbox&rsquo;!
==> default: Importing base box &lsquo;trusty-amd64-20140418&rsquo;&hellip;
==> default: Matching MAC address for NAT networking&hellip;
==> default: Setting the name of the VM: trusty_default_1397790655665_45006
==> default: Clearing any previously set forwarded ports&hellip;
==> default: Fixed port collision for 22 => 2222. Now on port 2200.
==> default: Clearing any previously set network interfaces&hellip;
==> default: Preparing network interfaces based on configuration&hellip;</p>

<pre><code>default: Adapter 1: nat
</code></pre>

<p>==> default: Forwarding ports&hellip;</p>

<pre><code>default: 22 =&gt; 2200 (adapter 1)
</code></pre>

<p>==> default: Booting VM&hellip;
==> default: Waiting for machine to boot. This may take a few minutes&hellip;</p>

<pre><code>default: SSH address: 127.0.0.1:2200
default: SSH username: vagrant
default: SSH auth method: private key
default: Warning: Connection timeout. Retrying...
default: Warning: Remote connection disconnect. Retrying...
</code></pre>

<p>==> default: Machine booted and ready!
GuestAdditions 4.3.10 running &mdash;&ndash; OK.
==> default: Checking for guest additions in VM&hellip;
==> default: Mounting shared folders&hellip;</p>

<pre><code>default: /vagrant =&gt; /path/to/trusty
</code></pre>

<p>```</p>

<p>この段階では vagrant box が追加されて VM が作成されているので、
元に戻すには <code>vagrant destroy</code> で VM を削除して、
<code>vagrant box remove box名</code> で box を削除します。</p>

<p>普通は <code>vagrant destroy</code> で VM を破棄するだけで
box は使い回すと思います。</p>

<p>box を先に削除してしまうと VM の削除でエラーになるようなので、
その場合は GUI からエラーになっているディスクイメージを無視するようにするなど
がんばって削除します。</p>
]]></content>
  </entry>
  
</feed>
