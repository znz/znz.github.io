<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ubuntu | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-05-28T23:36:16+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ansible で sources.list を変更したときに update する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-20-ansible-apt-update.html"/>
    <updated>2014-05-20T22:58:09+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-apt-update</id>
    <content type="html"><![CDATA[<p>ansible で sources.list を変更したときには
<code>apt-get update</code> して欲しいのですが、
毎回 update するのは無駄なので、
<code>cache_valid_time</code> も使いたいと思ったので対処しました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>クライアント側 ansible 1.6.1</li>
<li>サーバー側 Ubuntu 12.04</li>
</ul>


<h2>やり方</h2>

<p><code>register</code> で <code>template</code> モジュールの実行結果を受けて、
<code>changed</code> の場合は必ず update して、
<code>skipped</code> の場合は <code>cache_valid_time</code> で情報が古い場合だけ update するようにしました。</p>

<p></p>

<h2>```yaml tasks/apt.yaml</h2>

<ul>
<li>template: src=sources.list.{{ ansible_distribution }}.j2 dest=/etc/apt/sources.list owner=root group=root mode=0644
register: apt_sources_list</li>
<li>apt: update_cache=yes
when: apt_sources_list|changed</li>
<li>apt: update_cache=yes cache_valid_time=3600
when: apt_sources_list|skipped
```
</li>
</ul>


<h2>テンプレートの内容</h2>

<p>gathering facts で設定された <code>ansible_distribution_release</code> と
<code>vars</code> で別途設定した <code>apt_ubuntu_uri</code> と <code>apt_ubuntu_components</code> を
組み合わせて apt-line を作るようにしました。</p>

<p>Ubuntu をインストールした直後の sources.list では
components が別の行になっているものもあったのですが、
1 行にまとめました。</p>

<p>
```text templates/sources.list.Ubuntu.j2
deb {{ apt_ubuntu_uri }} {{ ansible_distribution_release }} {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb-src {{ apt_ubuntu_uri }} {{ ansible_distribution_release }} {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-updates {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb-src {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-updates {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}</p>

<h1>deb {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-backports {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}</h1>

<h1>deb-src {{ apt_ubuntu_uri }} {{ ansible_distribution_release }}-backports {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}</h1>

<p>deb <a href="http://security.ubuntu.com/ubuntu">http://security.ubuntu.com/ubuntu</a> {{ ansible_distribution_release }}-security {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
deb-src <a href="http://security.ubuntu.com/ubuntu">http://security.ubuntu.com/ubuntu</a> {{ ansible_distribution_release }}-security {{ apt_ubuntu_components | join(&ldquo; &rdquo;) }}
```
</p>

<p><code>backports</code> は使っていなかったのでコメントアウトしていますが、
<code>deb-src</code> も使わないのならコメントアウトしておいても良さそうです。</p>

<h2><code>vars</code> の内容</h2>

<p>例として jaist ミラーを使うようにしました。</p>

<h2>```yaml vars/main.yml</h2>

<p>apt_ubuntu_uri: &ldquo;<a href="http://ftp.jaist.ac.jp/pub/Linux/ubuntu/">http://ftp.jaist.ac.jp/pub/Linux/ubuntu/</a>&rdquo;
apt_ubuntu_components:
&ndash; main
&ndash; restricted
&ndash; universe
&ndash; multiverse
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible で ppa を追加する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-05-20-ansible-add-ppa.html"/>
    <updated>2014-05-20T22:47:22+09:00</updated>
    <id>http://blog.n-z.jp/blog/ansible-add-ppa</id>
    <content type="html"><![CDATA[<p>サーバーとしてインストールした Ubuntu だと
<code>add-apt-repository</code> コマンドが入っている
<code>python-software-properties</code> パッケージが入っていなくて
<code>ppa</code> の追加に困ることがありますが、
ansible を使えばサーバー自体に余計なパッケージを入れなくても
<code>ppa</code> の apt 設定を追加できました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>クライアント側 ansible 1.6.1</li>
<li>サーバー側 Ubuntu 12.04</li>
</ul>


<h2>ansible コマンド直接</h2>

<p><code>apt_repository</code> モジュールの引数の <code>repo</code> に <code>ppa</code> を指定するだけです。</p>

<p><code>console
ansible all -s -K -i ./inventory_hosts -m apt_repository -a "repo='ppa:chris-lea/node.js'"
</code></p>

<h2>playbook.yml に書く</h2>

<p><code>- apt_repository: repo='ppa:chris-lea/node.js'</code>
のように書くだけです。
普通にインストールすればサーバーでも入っていると思うのですが、
<code>python-apt</code> に依存しているので、
<code>- apt: pkg=python-apt</code>
も書いておくと良いかもしれません。</p>

<p><a href="https://github.com/znz/ansible-playbook-passenger/blob/master/provisioning/roles/passenger/tasks/nodejs-ppa.yml">nodejs-ppa.yml</a>
が実際の使用例です。</p>

<h2>```yaml nodejs-ppa.yml</h2>

<ul>
<li>apt: pkg=python-apt</li>
<li>apt_repository: repo=&lsquo;ppa:chris-lea/node.js&rsquo;
when: ansible_distribution_release == &ldquo;precise&rdquo;
```</li>
</ul>


<p>Debian の場合や ubuntu 14.04 の場合は除外しても良いかと思って、
ubuntu 12.04 の時だけ実行するために
<code>when: ansible_distribution_release == "precise"</code>
で実行する環境を制限しています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 14.04 で dokku を使う]]></title>
    <link href="http://blog.n-z.jp/blog/2014-04-18-ubuntu-1404-dokku.html"/>
    <updated>2014-04-18T23:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ubuntu-1404-dokku</id>
    <content type="html"><![CDATA[<p>Ubuntu 14.04 がリリースされたので、
<a href="https://github.com/progrium/dokku">dokku</a>
を Ubuntu 14.04 で試してみました。</p>

<!--more-->


<h2>dokku の Vagrantfile を確認する</h2>

<p>まず dokku を clone して中の Vagrantfile をみて、
環境変数で設定できる項目があるのを確認しておきます。</p>

<p><code>console
% git clone https://github.com/progrium/dokku
% cd dokku
% vi Vagrantfile
</code></p>

<h2>Vagantfile を変更する</h2>

<p>デフォルトの apt-line のままだとダウンロードが遅いので、
<a href="http://mirrors.ubuntu.com/mirrors.txt">http://mirrors.ubuntu.com/mirrors.txt</a>
からミラーサーバーを選んで (今回は jaist を選択)、
shell provision のところで書き換えておきます。
(関係ないところにマッチして問題が起きる可能性はほぼないので、置換元の URL の <code>.</code> はエスケープしていません。)</p>

<p>```diff
diff &mdash;git a/Vagrantfile b/Vagrantfile
index a310f6b..7c1a133 100644
&mdash;&ndash; a/Vagrantfile
+++ b/Vagrantfile
@@ -29,5 +29,10 @@ Vagrant::configure(&ldquo;2&rdquo;) do |config|</p>

<pre><code> vb.customize ["modifyvm", :id, "--memory", BOX_MEMORY]
</code></pre>

<p>   end</p>

<ul>
<li>config.vm.provision :shell, :inline => &ldquo;apt-get -y install git &amp;&amp; cd /root/dokku &amp;&amp; #{make_cmd}&rdquo;</li>
<li>config.vm.provision :shell, :inline => &lt;&lt;-SHELL</li>
<li> sed -i~ -e &rsquo;s;<a href="http://archive.ubuntu.com/ubuntu;http://ftp.jaist.ac.jp/pub/Linux/ubuntu;">http://archive.ubuntu.com/ubuntu;http://ftp.jaist.ac.jp/pub/Linux/ubuntu;</a>&lsquo; /etc/apt/sources.list &amp;&amp;</li>
<li> apt-get update &amp;&amp;</li>
<li> apt-get -y install git &amp;&amp;</li>
<li> cd /root/dokku &amp;&amp; #{make_cmd}</li>
<li>SHELL
end
```</li>
</ul>


<h2>初回起動</h2>

<p><code>BOX_NAME</code>, <code>BOX_URI</code> に trusty を指定して、
<code>BOX_MEMORY</code> も 512 から 2048 に増やした値を指定して起動します。</p>

<p><code>node-js-sample</code> だと 512 メガでも問題ないのですが、
Rails アプリを動かそうとするとメモリ不足で <code>bundle install</code> の途中で失敗して
deploy できなかったので増やしています。</p>

<p><code>console
% BOX_NAME=trusty-amd64-20140418 BOX_URI=https://cloud-images.ubuntu.com/vagrant/trusty/20140418/trusty-server-cloudimg-amd64-vagrant-disk1.box BOX_MEMORY=2048 vagrant up
</code></p>

<p>box のダウンロードとインストール、
VM の作成などには時間がかかるので、
他のことをしながらゆっくり待ちます。</p>

<h2>二度目以降の起動</h2>

<p>VM の作成ができている状態なら、
box の設定は参照されないので省略できます。
<code>vagrant destroy</code> した後に <code>vagrant up</code> し直したときは参照されるので、
毎回設定していてもかまいません。</p>

<p><code>BOX_MEMORY</code> は毎回設定されるので、指定を忘れると 512 に戻ってしまいます。</p>

<p><code>console
% BOX_MEMORY=2048 vagrant up
</code></p>

<h2>dokku の初期設定</h2>

<p>ssh の鍵を追加します。</p>

<p>```console
% vagrant ssh
vagrant@dokku:~$ egrep &lsquo;^ssh&rsquo; ~/.ssh/authorized_keys | sudo sshcommand acl-add dokku vagrant
dd:3b:b8:2e:85:04:06:e9:ab:ff:a8:0a:c0:04:6e:d6
vagrant@dokku:~$ cat ~/.ssh/authorized_keys</p>

<h1>CLOUD_IMG: This file was created/modified by the Cloud Image build process</h1>

<p>ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key
vagrant@dokku:~$ cat /home/dokku/.ssh/authorized_keys
command=&ldquo;FINGERPRINT=dd:3b:b8:2e:85:04:06:e9:ab:ff:a8:0a:c0:04:6e:d6 NAME=vagrant <code>cat /home/dokku/.sshcommand</code> $SSH_ORIGINAL_COMMAND&rdquo;,no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key
```</p>

<h2>dokku の鍵追加失敗例</h2>

<p><code>cat ~/.ssh/authorized_keys | sudo sshcommand acl-add dokku vagrant</code>
で追加してしまうと以下のように変になってしまいます。</p>

<p><code>text
vagrant@dokku:~$ cat /home/dokku/.ssh/authorized_keys
command="FINGERPRINT=is NAME=vagrant `cat /home/dokku/.sshcommand` $SSH_ORIGINAL_COMMAND",no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding # CLOUD_IMG: This file was created/modified by the Cloud Image build process
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key
</code></p>

<p>```bash</p>

<pre><code>KEY=$(cat)
FINGERPRINT=$(ssh-keygen -lf /dev/stdin &lt;&lt;&lt; $(echo $KEY) | awk '{print $2}')
KEY_PREFIX="command=\"FINGERPRINT=$FINGERPRINT NAME=$NAME \`cat $USERHOME/.sshcommand\` \$SSH_ORIGINAL_COMMAND\",no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding"
echo "$KEY_PREFIX $KEY" &gt;&gt; "$USERHOME/.ssh/authorized_keys"
echo $FINGERPRINT
</code></pre>

<p>```</p>

<p>の部分を以下のように <code>while read</code> ループに変えた方が良いのかもしれません。</p>

<p>```bash</p>

<pre><code>while read KEY; do
  FINGERPRINT=$(ssh-keygen -lf /dev/stdin &lt;&lt;&lt; $(echo $KEY) | awk '{print $2}')
  KEY_PREFIX="command=\"FINGERPRINT=$FINGERPRINT NAME=$NAME \`cat $USERHOME/.sshcommand\` \$SSH_ORIGINAL_COMMAND\",no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding"
  echo "$KEY_PREFIX $KEY" &gt;&gt; "$USERHOME/.ssh/authorized_keys"
  echo $FINGERPRINT
done
</code></pre>

<p>```</p>

<h2>node-js-sample の deploy</h2>

<p><code>node-js-sample</code> を <code>deploy</code> して動作確認します。
以下の例では <code>ssh dokku</code> で VM に接続できるように <code>~/.ssh/config</code> に設定済みです。</p>

<p>```console
% git clone <a href="https://github.com/heroku/node-js-sample">https://github.com/heroku/node-js-sample</a>
Cloning into &lsquo;node-js-sample&rsquo;&hellip;
remote: Reusing existing pack: 319, done.
remote: Total 319 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (319/319), 201.92 KiB | 210.00 KiB/s, done.
Resolving deltas: 100% (17/17), done.
Checking connectivity&hellip; done.
% cd node-js-sample
% git remote add dokku dokku:node-js-app
%  git push &mdash;set-upstream dokku master
Counting objects: 319, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (274/274), done.
Writing objects: 100% (319/319), 201.92 KiB | 0 bytes/s, done.
Total 319 (delta 17), reused 319 (delta 17)
&mdash;&mdash;&ndash;> Cleaning up &hellip;
remote: Cloning into &lsquo;/tmp/tmp.ChNvZEb5S9&rsquo;&hellip;
&mdash;&mdash;&ndash;> Building node-js-app &hellip;
remote: warning: You appear to have cloned an empty repository.
remote: done.
remote: HEAD is now at 2e52ce7&hellip; Update documentation links</p>

<pre><code>   Node.js app detected
</code></pre>

<p>&mdash;&mdash;&ndash;> Requested node range:  0.10.x
&mdash;&mdash;&ndash;> Resolved node version: 0.10.26
&mdash;&mdash;&ndash;> Downloading and installing node
(省略)
&mdash;&mdash;&ndash;> Discovering process types</p>

<pre><code>   Procfile declares types -&gt; web
</code></pre>

<p>&mdash;&mdash;&ndash;> Releasing node-js-app &hellip;
&mdash;&mdash;&ndash;> Deploying node-js-app &hellip;
=====> Application deployed:</p>

<pre><code>   http://node-js-app.dokku.me
</code></pre>

<p>To dokku:node-js-app
 * [new branch]      master &ndash;> master
Branch master set up to track remote branch master from dokku.
```</p>

<p>Vagrantfile で guest の 80 番ポートを host の 8080 番ポートで見えるように設定されているので
<code>http://node-js-app.dokku.me:8080/</code>
で開くと <code>Hello World!</code> と表示されます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant で Ubuntu 14.04 を試す]]></title>
    <link href="http://blog.n-z.jp/blog/2014-04-18-ubuntu-1404-vagrant.html"/>
    <updated>2014-04-18T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ubuntu-1404-vagrant</id>
    <content type="html"><![CDATA[<p>Vagrant で Ubuntu 14.04 LTS (trusty) を試しました。</p>

<!--more-->


<h2>Vagrantfile 作成</h2>

<p>まず <code>Vagrantfile</code> を作成します。
box ファイルの URL は
<a href="https://cloud-images.ubuntu.com/vagrant/trusty/">https://cloud-images.ubuntu.com/vagrant/trusty/</a>
から探します。
current にするといつのイメージかわかりにくいので、
日付の URL と box 名を指定しています。</p>

<p><a href="https://cloud-images.ubuntu.com/vagrant/">https://cloud-images.ubuntu.com/vagrant/</a>
には
<code>Ubuntu Server 14.04 LTS (Trusty Tahr) daily builds</code>
と書いてあるのに 20140417 と 20140418 の前が 20140221 と 20140222 になっていて
daily ではなさそうに見えるのですが、
リリース前は更新を止めていただけなのかもしれません。</p>

<p><code>console
% mkdir trusty
% cd trusty
% vagrant init
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
% vi Vagrantfile
(config.vm.box と config.vm.box_url を設定)
% egrep '^ *[^ #]' Vagrantfile
VAGRANTFILE_API_VERSION = "2"
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "trusty-amd64-20140418"
  config.vm.box_url = "https://cloud-images.ubuntu.com/vagrant/trusty/20140418/trusty-server-cloudimg-amd64-vagrant-disk1.box"
end
</code></p>

<p>この段階ではファイルとディレクトリを削除すれば元に戻せます。</p>

<h2>box の追加と起動</h2>

<p>初回の <code>vagrant up</code> は box のダウンロードとインストールもするので
時間がかかります。</p>

<p>```console
% vagrant up
Bringing machine &lsquo;default&rsquo; up with &lsquo;virtualbox&rsquo; provider&hellip;
==> default: Box &lsquo;trusty-amd64-20140418&rsquo; could not be found. Attempting to find and install&hellip;</p>

<pre><code>default: Box Provider: virtualbox
default: Box Version: &gt;= 0
</code></pre>

<p>==> default: Adding box &lsquo;trusty-amd64-20140418&rsquo; (v0) for provider: virtualbox</p>

<pre><code>default: Downloading: https://cloud-images.ubuntu.com/vagrant/trusty/20140418/trusty-server-cloudimg-amd64-vagrant-disk1.box
</code></pre>

<p>==> default: Box download is resuming from prior download progress
==> default: Successfully added box &lsquo;trusty-amd64-20140418&rsquo; (v0) for &lsquo;virtualbox&rsquo;!
==> default: Importing base box &lsquo;trusty-amd64-20140418&rsquo;&hellip;
==> default: Matching MAC address for NAT networking&hellip;
==> default: Setting the name of the VM: trusty_default_1397790655665_45006
==> default: Clearing any previously set forwarded ports&hellip;
==> default: Fixed port collision for 22 => 2222. Now on port 2200.
==> default: Clearing any previously set network interfaces&hellip;
==> default: Preparing network interfaces based on configuration&hellip;</p>

<pre><code>default: Adapter 1: nat
</code></pre>

<p>==> default: Forwarding ports&hellip;</p>

<pre><code>default: 22 =&gt; 2200 (adapter 1)
</code></pre>

<p>==> default: Booting VM&hellip;
==> default: Waiting for machine to boot. This may take a few minutes&hellip;</p>

<pre><code>default: SSH address: 127.0.0.1:2200
default: SSH username: vagrant
default: SSH auth method: private key
default: Warning: Connection timeout. Retrying...
default: Warning: Remote connection disconnect. Retrying...
</code></pre>

<p>==> default: Machine booted and ready!
GuestAdditions 4.3.10 running &mdash;&ndash; OK.
==> default: Checking for guest additions in VM&hellip;
==> default: Mounting shared folders&hellip;</p>

<pre><code>default: /vagrant =&gt; /path/to/trusty
</code></pre>

<p>```</p>

<p>この段階では vagrant box が追加されて VM が作成されているので、
元に戻すには <code>vagrant destroy</code> で VM を削除して、
<code>vagrant box remove box名</code> で box を削除します。</p>

<p>普通は <code>vagrant destroy</code> で VM を破棄するだけで
box は使い回すと思います。</p>

<p>box を先に削除してしまうと VM の削除でエラーになるようなので、
その場合は GUI からエラーになっているディスクイメージを無視するようにするなど
がんばって削除します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenSSL/GnuTLS での CSR の作り方]]></title>
    <link href="http://blog.n-z.jp/blog/2014-04-16-new-csr.html"/>
    <updated>2014-04-16T10:09:24+09:00</updated>
    <id>http://blog.n-z.jp/blog/new-csr</id>
    <content type="html"><![CDATA[<p>サーバー証明書を発行してもらう時などに毎回調べつつ CSR を作成しているので、
GnuTLS と OpenSSL を使った方法をまとめてみました。</p>

<!--more-->


<h2>パッケージインストール</h2>

<p>OpenSSL の方は入っていることが多いと思いますが、入っていなければ <code>openssl</code> パッケージをいれておきます。</p>

<p>GnuTLS の方は Debian や Ubuntu の場合は <code>gnutls-bin</code> パッケージに <code>gnutls-cli</code> コマンドなどが入っています。
RHEL などでは <code>gnutls-utils</code> というパッケージに入っているらしいです。</p>

<h2>certtool コマンド</h2>

<p><code>certtool</code> コマンドは Mac OS X にもありますが、 GnuTLS のものとは別物です。
ここで説明しているのは GnuTLS の <code>certtool</code> コマンドです。</p>

<h2>秘密鍵作成</h2>

<p>秘密鍵の生成はランダムな情報を元に生成するので、ビット数やエントロピーの量に応じて時間がかかります。
デスクトップマシンなどではマウスを動かすなどの方法でエントロピーを増やすことが出来るかもしれません。</p>

<p>作成されるファイルのパーミッションなどを考えると暗号化しないなら GnuTLS の
<code>certtool --generate-privkey --bits 4096 --outfile example.key</code>
の方法がオススメです。</p>

<h3>GnuTLS</h3>

<p>GnuTLS の <code>certtool</code> コマンドでは <code>--generate-privkey</code> で秘密鍵を作成できます。
<code>--bits</code> で鍵のビット数を指定しないと squeeze だと 2048 ビット、 precise や wheezy だと 2432 ビットになりました。
ファイルのパーミッションも <code>-rw-------</code> (600) で作成されるので、そのまま使えます。</p>

<p><code>console gnutls
$ certtool --generate-privkey --outfile example-tls.key
Generating a 2432 bit RSA private key...
</code></p>

<p><code>console gnutls
$ certtool --generate-privkey --bits 4096 --outfile example-tls.key
Generating a 4096 bit RSA private key...
</code></p>

<h3>OpenSSL</h3>

<p>OpenSSL では <code>genrsa</code> サブコマンドで生成します。
OpenSSL 1.0.0 では <code>genpkey</code> サブコマンドになっているようですが、
<code>genrsa</code> もまだ使えるので、以下は <code>genrsa</code> だけ書いています。</p>

<p>ビット数を指定しないと squeeze だと 1024 ビット、 precise や wheezy だと 512 ビットになりました。
また、そのままだとパーミッションが <code>-rw-rw-r--</code> (664) で生成されるので、あらかじめパーミッションを設定したファイルを用意しておいて上書きさせるか、すぐに <code>chmod</code> で変更しておいた方が良さそうです。</p>

<p><code>console openssl
$ touch example-ssl.key
$ chmod 600 example-ssl.key
$ openssl genrsa -out example-ssl.key
Generating RSA private key, 512 bit long modulus
....++++++++++++
.........................++++++++++++
e is 65537 (0x10001)
</code></p>

<p><code>console openssl
$ touch example-ssl.key
$ chmod 600 example-ssl.key
$ openssl genrsa -out example-ssl.key 4096
Generating RSA private key, 4096 bit long modulus
......................................................++
...........++
e is 65537 (0x10001)
</code></p>

<p>ネット上見つかる情報では <code>-des3</code> などで生成したファイルを一度暗号化して、
サーバーの起動時に不要になるようにすぐに外すような例もあるようですが、
そんなことをするぐらいなら最初から暗号化せずに生成すれば良いと思います。</p>

<p>暗号化した状態のファイルを別途バックアップするなどの目的があるのなら、
意味があると思いますが、
暗号化した状態のファイルを残さないのなら単なる無駄だと思います。</p>

<h2>秘密鍵の内容確認</h2>

<p>秘密鍵の内容を確認することはあまりないと思いますが、
<code>openssl rsa -in example.key -text -noout</code>
の方法がオススメです。</p>

<h3>OpenSSL</h3>

<p>OpenSSL で秘密鍵の内容を確認するには <code>rsa</code> サブコマンドを使います。
<code>-text</code> で内容全体の表示で <code>-noout</code> は <code>-----BEGIN RSA PRIVATE KEY-----</code> から <code>-----END RSA PRIVATE KEY-----</code> を表示しないという意味です。
秘密鍵本体の前にテキストの説明がついたものも元の秘密鍵と同様に扱えるようなので、
デフォルトでは元の内容も出力するようになっているのだと思います。</p>

<p>```console openssl
$ openssl rsa -in example-ssl.key -text -noout
Private-Key: (4096 bit)
modulus:</p>

<pre><code>00:cb:35:ec:f6:00:5a:75:d7:55:14:f8:55:91:1a:
(略)
</code></pre>

<p>publicExponent: 65537 (0x10001)
privateExponent:</p>

<pre><code>4d:86:de:47:a0:2c:e2:e6:6b:2c:5b:ed:f1:35:10:
(略)
</code></pre>

<p>prime1:</p>

<pre><code>00:ef:49:b3:f8:4c:1e:a9:13:a9:fb:86:7e:80:7a:
(略)
</code></pre>

<p>prime2:</p>

<pre><code>00:d9:67:2f:e1:4c:13:78:fa:dd:2b:7a:3e:f5:68:
(略)
</code></pre>

<p>exponent1:</p>

<pre><code>00:ba:18:ee:ff:a7:6b:9d:01:2f:0c:f0:0f:88:29:
(略)
</code></pre>

<p>exponent2:</p>

<pre><code>52:93:94:27:32:5b:4f:1f:92:74:9a:39:61:c3:ae:
(略)
</code></pre>

<p>coefficient:</p>

<pre><code>44:e9:a2:de:87:e7:2d:f0:57:58:d6:fc:85:20:df:
(略)
</code></pre>

<p>```</p>

<h3>GnuTLS</h3>

<p>GnuTLS の <code>certtool</code> で秘密鍵の内容を確認するには <code>-k</code> (<code>--key-info</code>) を使います。
<code>openssl</code> の <code>-noout</code> 相当のオプションは見つけられませんでした。</p>

<p>```console gnutls
$ certtool -k &mdash;infile example-tls.key
Public Key Info:</p>

<pre><code>    Public Key Algorithm: RSA
    Key Security Level: High
</code></pre>

<p>modulus:</p>

<pre><code>    00:da:45:da:ca:13:ac:59:43:55:87:68:04:16:1a:
    (略)
</code></pre>

<p>public exponent:</p>

<pre><code>    01:00:01:
</code></pre>

<p>private exponent:</p>

<pre><code>    3c:5b:18:96:cc:3d:da:28:fe:5b:84:ed:ac:56:e2:
    (略)
</code></pre>

<p>prime1:</p>

<pre><code>    00:dc:f3:92:13:d5:c7:cf:bc:9f:76:b3:f6:a2:60:
    (略)
</code></pre>

<p>prime2:</p>

<pre><code>    00:fc:e5:83:0e:2e:d4:a1:be:37:bf:05:6e:c3:d3:
    (略)
</code></pre>

<p>coefficient:</p>

<pre><code>    63:74:e3:95:9e:d6:6c:7d:d9:2d:ad:45:f8:0b:1a:
    (略)
</code></pre>

<p>exp1:</p>

<pre><code>    00:a1:1d:a7:9e:79:1c:2b:da:42:79:bf:7f:10:26:
    (略)
</code></pre>

<p>exp2:</p>

<pre><code>    00:b3:be:9c:ab:53:f5:a5:10:01:a7:2f:41:4e:c5:
    (略)
    c4:31:
</code></pre>

<p>Public Key ID: 45:44:BC:C4:BB:95:24:97:5D:C2:95:BF:27:95:02:2C:50:09:9E:35</p>

<p>&mdash;&mdash;-BEGIN RSA PRIVATE KEY&mdash;&mdash;&ndash;
(略)
&mdash;&mdash;-END RSA PRIVATE KEY&mdash;&mdash;&ndash;</p>

<p>```</p>

<h2>CSR 作成と内容確認</h2>

<p>OpenSSL は <code>openssl req</code> で作成も内容の確認も出来ます。
GnuTLS の <code>certtool</code> は <code>-q</code> (<code>--generate-request</code>) で作成して
<code>--crq-info</code> で内容を確認できます。</p>

<p>以下の例ではそれぞれで作成して、両方で内容を確認しています。</p>

<h3>OpenSSL</h3>

<p>OpenSSL では <code>C</code> と <code>ST</code> と <code>O</code> にデフォルト値が入っていて、
対話的に作成しつつ空欄にしたい時は
別途 <code>openssl.cnf</code> を用意する必要がありそうです。</p>

<p>```console openssl
$ openssl req -new -key example-ssl.key -out example-ssl.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,</p>

<h2>If you enter &lsquo;.&rsquo;, the field will be left blank.</h2>

<p>Country Name (2 letter code) [AU]:JP
State or Province Name (full name) [Some-State]:Osaka
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:ssl.example.jp
Email Address []:</p>

<p>Please enter the following &lsquo;extra&rsquo; attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
$ openssl req -in example-ssl.csr -text -noout
Certificate Request:</p>

<pre><code>Data:
    Version: 0 (0x0)
    Subject: C=JP, ST=Osaka, O=Internet Widgits Pty Ltd, CN=ssl.example.jp
    Subject Public Key Info:
        Public Key Algorithm: rsaEncryption
            Public-Key: (4096 bit)
            Modulus:
                00:cb:35:ec:f6:00:5a:75:d7:55:14:f8:55:91:1a:
                (略)
            Exponent: 65537 (0x10001)
    Attributes:
        a0:00
Signature Algorithm: sha1WithRSAEncryption
     4f:1a:a7:57:9f:88:f3:17:23:aa:51:12:11:ff:c0:24:31:4c:
     (略)
</code></pre>

<p>$ certtool &mdash;crq-info &mdash;infile example-ssl.csr
PKCS #10 Certificate Request Information:</p>

<pre><code>    Version: 1
    Subject: C=JP,ST=Osaka,O=Internet Widgits Pty Ltd,CN=ssl.example.jp
    Subject Public Key Algorithm: RSA
            Modulus (bits 4096):
                    cb:35:ec:f6:00:5a:75:d7:55:14:f8:55:91:1a:9b:83
                    (略)
            Exponent:
                    01:00:01
</code></pre>

<p>Other Information:</p>

<pre><code>    Public Key Id:
            c14459bdb79e6b71e6303e4ffd9c7ab43dc9b9df
</code></pre>

<p>&mdash;&mdash;-BEGIN NEW CERTIFICATE REQUEST&mdash;&mdash;&ndash;
(略)
&mdash;&mdash;-END NEW CERTIFICATE REQUEST&mdash;&mdash;&ndash;
```</p>

<h3>GnuTLS</h3>

<p>GnuTLS ではテンプレートファイルを作成しておいて <code>--template</code> で指定する方法が多いようですが、
対話的にも作成できました。
<code>Subject</code> を <code>CN</code> だけにするのは OpenSSL より簡単に出来たのですが、
<code>Requested Extensions</code> が設定されるようなので、
不要な場合には困りそうです。</p>

<p>```console gnutls
$ certtool -q &mdash;load-privkey example-tls.key &mdash;outfile example-tls.csr
Generating a PKCS #10 certificate request&hellip;
Country name (2 chars):
Organization name:
Organizational unit name:
Locality name:
State or province name:
Common name: tls.example.jp
UID:
Enter a dnsName of the subject of the certificate:
Enter the IP address of the subject of the certificate:
Enter the e-mail of the subject of the certificate:
Enter a challenge password:
Does the certificate belong to an authority? (y/N):
Will the certificate be used for signing (DHE and RSA-EXPORT ciphersuites)? (y/N):
Will the certificate be used for encryption (RSA ciphersuites)? (y/N):
Is this a TLS web client certificate? (y/N):
Is this also a TLS web server certificate? (y/N):
$ openssl req -in example-tls.csr -text -noout
Certificate Request:</p>

<pre><code>Data:
    Version: 0 (0x0)
    Subject: CN=tls.example.jp
    Subject Public Key Info:
        Public Key Algorithm: rsaEncryption
            Public-Key: (4096 bit)
            Modulus:
                00:da:45:da:ca:13:ac:59:43:55:87:68:04:16:1a:
                (略)
            Exponent: 65537 (0x10001)
    Attributes:
    Requested Extensions:
        X509v3 Basic Constraints: critical
            CA:FALSE
        X509v3 Key Usage: critical
            Digital Signature
Signature Algorithm: sha1WithRSAEncryption
     cb:71:d2:c9:a2:97:14:74:f0:63:69:6b:36:31:ff:ce:f2:a0:
     (略)
</code></pre>

<p>$ certtool &mdash;crq-info &mdash;infile example-tls.csr
PKCS #10 Certificate Request Information:</p>

<pre><code>    Version: 1
    Subject: CN=tls.example.jp
    Subject Public Key Algorithm: RSA
            Modulus (bits 4096):
                    da:45:da:ca:13:ac:59:43:55:87:68:04:16:1a:09:41
                    (略)
            Exponent:
                    01:00:01
    Attributes:
            Extensions:
                    Basic Constraints (critical):
                            Certificate Authority (CA): FALSE
                    Key Usage (critical):
                            Digital signature.
</code></pre>

<p>Other Information:</p>

<pre><code>    Public Key Id:
            4544bcc4bb9524975dc295bf2795022c50099e35
</code></pre>

<p>&mdash;&mdash;-BEGIN NEW CERTIFICATE REQUEST&mdash;&mdash;&ndash;
(略)
&mdash;&mdash;-END NEW CERTIFICATE REQUEST&mdash;&mdash;&ndash;
```</p>

<h2>まとめて作成</h2>

<p>CSR の生成の時に秘密鍵を指定しないと、
CSR と一緒に秘密鍵を生成できるようです。</p>

<h3>OpenSSL</h3>

<p><code>openssl req -new</code> で <code>-key</code> の代わりに <code>-newkey</code> などを指定すると CSR と一緒に秘密鍵も生成できます。
この場合もそのままだとパーミッションが <code>-rw-rw-r--</code> (664) になるようなので、注意が必要です。
<code>-nodes</code> を付けないと暗号化するためのパスフレーズを要求されます。</p>

<p>```console openssl
$ openssl req -new -newkey rsa:4096 -nodes -keyout server.key -out server.csr
Generating a 4096 bit RSA private key
&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;++
&hellip;&hellip;++</p>

<h2>writing new private key to &lsquo;server.key&rsquo;</h2>

<p>You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,</p>

<h2>If you enter &lsquo;.&rsquo;, the field will be left blank.</h2>

<p>Country Name (2 letter code) [AU]:JP
State or Province Name (full name) [Some-State]:Osaka
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:ssl.example.jp
Email Address []:</p>

<p>Please enter the following &lsquo;extra&rsquo; attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
```</p>

<h3>GnuTLS</h3>

<p><code>certtool -q</code> で <code>--load-privkey</code> を指定しないと秘密鍵も一緒に生成するようです。
出力は <code>--outfile</code> で指定したファイルにまとめて入ってしまって、
使い勝手は良くないので、個別に生成した方が良さそうです。</p>

<p>```console gnutls
$ certtool -q &mdash;outfile out.txt
Generating a PKCS #10 certificate request&hellip;
Generating a 2432 bit RSA private key&hellip;
Country name (2 chars):
Organization name:
Organizational unit name:
Locality name:
State or province name:
Common name: tls.example.jp
UID:
Enter a dnsName of the subject of the certificate:
Enter the IP address of the subject of the certificate:
Enter the e-mail of the subject of the certificate:
Enter a challenge password:
Does the certificate belong to an authority? (y/N):
Will the certificate be used for signing (DHE and RSA-EXPORT ciphersuites)? (y/N):
Will the certificate be used for encryption (RSA ciphersuites)? (y/N):
Is this a TLS web client certificate? (y/N):
Is this also a TLS web server certificate? (y/N):
$ cat out.txt
&mdash;&mdash;-BEGIN RSA PRIVATE KEY&mdash;&mdash;&ndash;
(略)
&mdash;&mdash;-END RSA PRIVATE KEY&mdash;&mdash;&ndash;
PKCS #10 Certificate Request Information:</p>

<pre><code>    Version: 1
    Subject: CN=tls.example.jp
    Subject Public Key Algorithm: RSA
            Modulus (bits 2432):
                    f4:ff:66:e8:c6:19:ab:7b:39:e3:72:ff:ee:13:fa:cf
                    (略)
            Exponent:
                    01:00:01
    Attributes:
            Extensions:
                    Basic Constraints (critical):
                            Certificate Authority (CA): FALSE
                    Key Usage (critical):
                            Digital signature.
</code></pre>

<p>Other Information:</p>

<pre><code>    Public Key Id:
            61c9cef12d691e3373f71ad3a82d1ac4c4b71793
</code></pre>

<p>&mdash;&mdash;-BEGIN NEW CERTIFICATE REQUEST&mdash;&mdash;&ndash;
(略)
&mdash;&mdash;-END NEW CERTIFICATE REQUEST&mdash;&mdash;&ndash;
```</p>
]]></content>
  </entry>
  
</feed>
