<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: upstart | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/upstart/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2015-04-25T21:38:33+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[upstartに不足している機能]]></title>
    <link href="http://blog.n-z.jp/blog/2014-02-23-upstart-has-missing-features.html"/>
    <updated>2014-02-23T11:15:27+09:00</updated>
    <id>http://blog.n-z.jp/blog/upstart-has-missing-features</id>
    <content type="html"><![CDATA[<p>Ubuntu の標準の init の upstart で機能不足を感じた話です。</p>

<!--more-->


<h2>workaround-upstart-snafu</h2>

<p>2012年6月の頃の Ubuntu で起きた話です。
昔の話でバージョンなどもちゃんとメモしていなかったのですが、
当時サポート対象だったバージョンのどれかです。</p>

<p>現象としては自作の <code>/etc/init/hoge.conf</code> を作成するために
<code>expect</code> stanza を試行錯誤していたら、
設定が間違っていたらしく、
プロセスの終了をちゃんと認識できなくて、
もう存在しないプロセス ID を終了したジョブのプロセス ID として認識したまま
<code>start</code> も <code>stop</code> もきかなくなってしまった、
ということがありました。</p>

<p>ここまでは自分が書いた設定が間違いということで、
別に良いのですが、
その状態を解消する方法が upstart 自体には存在していなくて、
<a href="http://irclogs.ubuntu.com/2011/01/31/%23upstart.html">http://irclogs.ubuntu.com/2011/01/31/%23upstart.html</a>
で紹介されていた
<a href="https://github.com/ion1/workaround-upstart-snafu">workaround-upstart-snafu</a>
を使うしかありませんでした。</p>

<p>このスクリプトは指定したプロセス ID になるまで fork してすぐに終了するのを繰り返して
upstart に該当するプロセス ID のプロセス終了を認識させる、という仕組みのようです。</p>

<p>このような無理矢理な方法ではなく upstart 自体にプロセスがまだ存在しているかどうかチェックし直す機能が存在するべきだと思いました。</p>

<h2>Should-Start</h2>

<p><code>/etc/init.d/</code> に置かれる
<a href="https://wiki.debian.org/LSBInitScripts">LSB の Init スクリプト</a>
には、起動時の順番 (依存関係) を指定するためのヘッダーを書くようになっています。</p>

<p>この指定の中には <code>Should-Start</code> というインストールされていれば先に起動する必要があり、
インストールされていなければ影響しない、ということが出来ます。</p>

<p>たとえば、
デーモンが依存しているデータベースが同じマシンに入っていれば
先に起動している必要があるけれど、
別のマシンのデータベースを使っているかもしれないので、
インストールされていなくても良い、
という用途が想定されているようです。</p>

<p>具体的な例としては
Ubuntu 13.10 の
<code>zabbix-server-pgsql</code> 2.0.6+dfsg-1ubuntu2
の
<code>/etc/init.d/zabbix-server</code>
では</p>

<pre><code>### BEGIN INIT INFO
# Provides:          zabbix-server
# Required-Start:    $remote_fs $network
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Should-Start:      postgresql
# Should-Stop:       postgresql
# Short-Description: Start zabbix-server daemon
# Description: Start zabbix-server daemon (PostgreSQL)
### END INIT INFO
</code></pre>

<p>となっていて、
<code>postgresql</code> より後に起動するようになっているのに、</p>

<p><code>/etc/init/zabbix-server.conf</code>
では</p>

<pre><code>start on (filesystem and net-device-up IFACE=lo)
stop on runlevel [!2345]
</code></pre>

<p>となっていて、起動順序の関係が不足しています。</p>

<p>その結果、
<code>zabbix-server</code> の方が <code>postgresql</code> より早く起動してしまって、
データベースに接続できなくて起動に失敗する、
ということが起きることがありました。
(以前の Ubuntu で起きていた現象で Ubuntu 13.10 だと別の現象になっているかもしれないので、
再度検証が必要そうです。)</p>

<p>対策として
<code>/etc/cron.d/local</code>
に</p>

<pre><code># zabbix-server may fail to start before postgresql
@reboot root /usr/sbin/service zabbix-server start
</code></pre>

<p>という設定を置いていて、
<code>cron</code> の <code>@reboot</code> が実行されるタイミングで起動し直すようにしています。</p>

<h2>まとめ</h2>

<p>起動時の処理ということで、
実運用環境では検証しづらく、
問題が起きてもマシンの再起動時に注意していれば良いだけなので、
優先度が低くて、
検証環境を用意してまで調査するという手間をかけるまでは出来ていないのですが、
upstart はいろいろと sysvinit (insserv) に比べて劣化している部分があるようなので、
困ります。</p>

<p>主流が systemd に変わりつつあるという話もあるようなので、
どうなっていくのかわかりませんが、
init は OS の根幹に関わる部分なので、
もっと安定して信頼性のあるものになってほしいと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[upstart-socket-bridgeとrubyを組み合わせる]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-14-upstart-socket-bridge-with-ruby.html"/>
    <updated>2013-12-14T00:45:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/upstart-socket-bridge-with-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://gihyo.jp/admin/clip/01/ubuntu-topics/201312/06">Ubuntu Weekly Topics 2013年12月6日号</a>
の「その他のニュース」で紹介されていた
「upstart-socket-bridgeをxinetdライクなソケット待ち受け管理機構として扱う
<a href="http://cheesehead-techblog.blogspot.jp/2013/12/upstart-socket-bridge.html">アプリケーションの作り方</a>
。」
が python3 で書かれていて、
同じことが ruby で実装できるのか気になったので、
IRC でちょっと助言を受けつつ移植してみました。</p>

<!--more-->


<h2>試した環境</h2>

<ul>
<li>amd64 の Ubuntu 13.10 (saucy)</li>
<li><code>/usr/bin/ruby</code> は <code>ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-linux]</code></li>
</ul>


<h2>ruby で試す</h2>

<p>必須なのはソケット周りだけですが、
デバッグ用のメッセージをファイルに残すようにして
動作確認していたので、
その部分も残しています。</p>

<pre><code class="ruby /tmp/test-service.rb"> #!/usr/bin/ruby
 require 'socket'
 open("/tmp/test.log", "w") do |f|
   ENV.each do |key, value|
     f.puts "#{key}=#{value}"
   end
   begin
     serv_socket = Socket.for_fd(ENV["UPSTART_FDS"].to_i)
     client_socket, client_addrinfo = serv_socket.accept
     message = client_socket.recv(1024)
     f.puts message
     client_socket.send("I got your message: #{message}", 0)
     client_socket.close
   rescue Exception =&gt; e
     f.puts e.inspect
     f.puts e.backtrace
   end
   f.puts "finished"
 end
</code></pre>

<p>バグとしては
<code>for_fd</code> の引数の <code>to_i</code> を忘れていたり、
<code>send</code> の引数が足りなかったりしました。</p>

<pre><code class="text /etc/init/socket-test.conf"> description "upstart-socket-bridge test"
 start on socket PROTO=inet PORT=34567 ADDR=127.0.0.1  # 34567 番ポートで待ち受け
 setuid exampleuser                                    # root ではなく exampleuser で動作
 exec /usr/bin/ruby /tmp/test-service.rb               # サービス起動
</code></pre>

<p><code>nc</code> コマンドで接続して動作確認します。</p>

<pre><code class="console"> $ nc localhost 34567
 Hello Ruby
 I got your message: Hello Ruby
</code></pre>

<p>最後にテストで作成したファイルを削除しておきます。</p>

<pre><code class="console"> $ sudo rm /etc/init/socket-test.conf  # ブリッジとの接続解除
 $ rm /tmp/test-service.rb             # テストサービス削除
 $ rm /tmp/test.log                    # ログファイル削除
</code></pre>

<h2>まとめ</h2>

<p>python3 の <code>socket.fromfd</code> に相当するのは
ruby だと <code>BasicSocket.for_fd</code> で、
<code>BasicSocket</code> クラスには <code>accept</code> がないので、
<code>BasicSocket</code> クラスを継承している <code>Socket</code> クラスの
<code>Socket#for_fd</code> を使いました。</p>

<p><code>inetd</code> や <code>xinetd</code> だと標準入出力にソケットをつないでくれて、
サービスは簡単にかけるのに、
<code>upstart</code> だと <code>accept</code> して <code>accept</code> から返ってきたソケットを
<code>close</code> するまでがサービス側でやらないといけないようになっていて、
ちょっと面倒に感じました。</p>

<p>たまたま目についたプログラムを移植してみただけで、
深追いはしていないのですが、
どういう利点があるものなのか、
調べてみるのも良いのかもしれません。</p>
]]></content>
  </entry>
  
</feed>
