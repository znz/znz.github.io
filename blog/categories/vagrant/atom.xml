<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vagrant | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/vagrant/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-06-06T14:37:00+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vagrant の Multi VM 間で IPsec を試した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-04-vagrant-multivm-ipsec-demo.html"/>
    <updated>2014-06-04T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/vagrant-multivm-ipsec-demo</id>
    <content type="html"><![CDATA[<p>正常に IPsec の暗号化通信ができているときの racoon のログなどを確認したかったので、
Vagrant と ansible で
IPsec で通信できる Multi VM 環境を作ってみました。</p>

<p>playbook は
<a href="https://github.com/znz/ansible-playbook-ipsec-demo">https://github.com/znz/ansible-playbook-ipsec-demo</a>
で公開しています。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>ホスト OS : Mac OS X 10.9.3</li>
<li>VirtualBox 4.3.12</li>
<li>Vagrant 1.6.3</li>
<li>ansible 1.6.2</li>
<li>ゲスト OS : Ubuntu 14.04 &times; 2</li>
</ul>


<p>Ubuntu は <a href="https://cloud-images.ubuntu.com/vagrant/trusty/current/">https://cloud-images.ubuntu.com/vagrant/trusty/current/</a> のイメージを使ったので、
daily build の状態によっては動作が変わっているかもしれません。</p>

<h2>ホストオンリーネットワーク</h2>

<p>使った後は</p>

<ul>
<li>vboxnet1 (192.168.50.1/24)</li>
<li>vboxnet2 (192.168.11.1/24)</li>
<li>vboxnet3 (192.168.12.1/24)</li>
</ul>


<p>が勝手に増えているので、不要なら設定で消しておくと良いと思います。</p>

<p>ネットワークとしては以下のように 192.168.50.0/24 の部分で IPsec 接続をして、
192.168.11.11 と 192.168.12.12 をつなぐ、という感じにしています。
デフォルトの eth0 は外部への接続用としてそのままにしています。</p>

<p>```
192.168.11.11 (vm1:eth2)</p>

<pre><code>   |
</code></pre>

<p>192.168.50.11 (vm1:eth1)</p>

<pre><code>   |
</code></pre>

<p>192.168.50.12 (vm2:eth1)</p>

<pre><code>   |
</code></pre>

<p>192.168.12.12 (vm2:eth2)
```</p>

<h2>準備</h2>

<p>Usage に書いてあるように準備をしておきます。
先日作った <code>ja_jp</code> role は git submodule にしているので、</p>

<p><code>
% git submodule init
% git submodule update
</code></p>

<p>で取得する必要があります。</p>

<h2>試し方</h2>

<p><code>vagrant up</code>
すると
<code>/etc/ipsec-tools.conf</code>
と
<code>/etc/racoon/racoon.conf</code>
に設定が入っている状態になっているので、
始点アドレスを指定して
<code>ipsec-tools.conf</code>
に設定した経路を通るようにパケットを送ると
IPsec VPN がつながります。</p>

<p><code>ping</code> コマンドのように直接始点アドレスを指定するオプションがない場合は
<code>ping -I eth2 192.168.12.12</code> のように network interface で指定すれば
良いようです。</p>

<h2>動作確認</h2>

<p>以下のコマンドの出力が接続前後で変わることが確認できます。</p>

<ul>
<li><code>racoonctl -l show-sa isakmp</code></li>
<li><code>racoonctl -l show-sa ipsec</code></li>
<li><code>setkey -D</code></li>
</ul>


<p>racoon のログが <code>/var/log/syslog</code> に大量に出ているのを確認できます。
(<code>racoon.conf</code> で <code>log debug</code> にしているため)</p>

<h2>tshark でパケットの確認</h2>

<p><code>tshark</code> パッケージをインストールした後、
<code>sudo dpkg-reconfigure wireshark-common</code>
で一般ユーザーでも実行を許可するようにして、
実行を許可するユーザーを <code>wireshark</code> に追加します。</p>

<p>グループの追加を反映するためにログインし直すと、
<code>tshark -i eth1 -V 'port 500'</code>
などでパケットの確認ができるようになります。</p>

<p>暗号化されていて詳細はわかりませんが、
UDP の 500 番ポートで Informational のパケットが流れていることが確認できました。</p>

<p>GUI の wireshark の方では
<a href="http://ask.wireshark.org/questions/12019/how-can-i-decrypt-ikev1-andor-esp-packets">http://ask.wireshark.org/questions/12019/how-can-i-decrypt-ikev1-andor-esp-packets</a>
の方法で暗号化の解除もできるようです。</p>

<p>syslog の方で racoon のログをみると、
DPD のパケットらしいということが確認できました。
syslog の方で <code>#012</code> となっている部分がありますが、
これは rsyslog で改行が変換されたたもので空白として無視すれば良くて、
例えば</p>

<p><code>
Jun  4 17:54:43 vm1 racoon: DEBUG: new cookie:#012831d33d46e20f8e6
Jun  4 17:54:43 vm1 racoon: DEBUG: final encryption key computed:
Jun  4 17:54:43 vm1 racoon: DEBUG: #012932d361f fc62ddc2 6164d513 d40d211f b7364166 232cf490
</code></p>

<p>というログなら cookie は <code>831d33d46e20f8e6</code> になります。</p>

<p>鍵は <code>932d361ffc62ddc26164d513d40d211fb7364166232cf490</code> になると思ったのですが、
これを
Edit &ndash;> Preferences &ndash;> Protocols &ndash;> ISAKMP &ndash;> IKEv1 Decryption Table:
に設定すれば良いはずなのですが、試したところ decrypt されなかったので、
あっているのかどうかはわかりませんでした。
cookie の方は他のログなどで確認できたので、あっているはずです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant で Ubuntu 14.04 を試す]]></title>
    <link href="http://blog.n-z.jp/blog/2014-04-18-ubuntu-1404-vagrant.html"/>
    <updated>2014-04-18T13:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/ubuntu-1404-vagrant</id>
    <content type="html"><![CDATA[<p>Vagrant で Ubuntu 14.04 LTS (trusty) を試しました。</p>

<!--more-->


<h2>Vagrantfile 作成</h2>

<p>まず <code>Vagrantfile</code> を作成します。
box ファイルの URL は
<a href="https://cloud-images.ubuntu.com/vagrant/trusty/">https://cloud-images.ubuntu.com/vagrant/trusty/</a>
から探します。
current にするといつのイメージかわかりにくいので、
日付の URL と box 名を指定しています。</p>

<p><a href="https://cloud-images.ubuntu.com/vagrant/">https://cloud-images.ubuntu.com/vagrant/</a>
には
<code>Ubuntu Server 14.04 LTS (Trusty Tahr) daily builds</code>
と書いてあるのに 20140417 と 20140418 の前が 20140221 と 20140222 になっていて
daily ではなさそうに見えるのですが、
リリース前は更新を止めていただけなのかもしれません。</p>

<p><code>console
% mkdir trusty
% cd trusty
% vagrant init
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
% vi Vagrantfile
(config.vm.box と config.vm.box_url を設定)
% egrep '^ *[^ #]' Vagrantfile
VAGRANTFILE_API_VERSION = "2"
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "trusty-amd64-20140418"
  config.vm.box_url = "https://cloud-images.ubuntu.com/vagrant/trusty/20140418/trusty-server-cloudimg-amd64-vagrant-disk1.box"
end
</code></p>

<p>この段階ではファイルとディレクトリを削除すれば元に戻せます。</p>

<h2>box の追加と起動</h2>

<p>初回の <code>vagrant up</code> は box のダウンロードとインストールもするので
時間がかかります。</p>

<p>```console
% vagrant up
Bringing machine &lsquo;default&rsquo; up with &lsquo;virtualbox&rsquo; provider&hellip;
==> default: Box &lsquo;trusty-amd64-20140418&rsquo; could not be found. Attempting to find and install&hellip;</p>

<pre><code>default: Box Provider: virtualbox
default: Box Version: &gt;= 0
</code></pre>

<p>==> default: Adding box &lsquo;trusty-amd64-20140418&rsquo; (v0) for provider: virtualbox</p>

<pre><code>default: Downloading: https://cloud-images.ubuntu.com/vagrant/trusty/20140418/trusty-server-cloudimg-amd64-vagrant-disk1.box
</code></pre>

<p>==> default: Box download is resuming from prior download progress
==> default: Successfully added box &lsquo;trusty-amd64-20140418&rsquo; (v0) for &lsquo;virtualbox&rsquo;!
==> default: Importing base box &lsquo;trusty-amd64-20140418&rsquo;&hellip;
==> default: Matching MAC address for NAT networking&hellip;
==> default: Setting the name of the VM: trusty_default_1397790655665_45006
==> default: Clearing any previously set forwarded ports&hellip;
==> default: Fixed port collision for 22 => 2222. Now on port 2200.
==> default: Clearing any previously set network interfaces&hellip;
==> default: Preparing network interfaces based on configuration&hellip;</p>

<pre><code>default: Adapter 1: nat
</code></pre>

<p>==> default: Forwarding ports&hellip;</p>

<pre><code>default: 22 =&gt; 2200 (adapter 1)
</code></pre>

<p>==> default: Booting VM&hellip;
==> default: Waiting for machine to boot. This may take a few minutes&hellip;</p>

<pre><code>default: SSH address: 127.0.0.1:2200
default: SSH username: vagrant
default: SSH auth method: private key
default: Warning: Connection timeout. Retrying...
default: Warning: Remote connection disconnect. Retrying...
</code></pre>

<p>==> default: Machine booted and ready!
GuestAdditions 4.3.10 running &mdash;&ndash; OK.
==> default: Checking for guest additions in VM&hellip;
==> default: Mounting shared folders&hellip;</p>

<pre><code>default: /vagrant =&gt; /path/to/trusty
</code></pre>

<p>```</p>

<p>この段階では vagrant box が追加されて VM が作成されているので、
元に戻すには <code>vagrant destroy</code> で VM を削除して、
<code>vagrant box remove box名</code> で box を削除します。</p>

<p>普通は <code>vagrant destroy</code> で VM を破棄するだけで
box は使い回すと思います。</p>

<p>box を先に削除してしまうと VM の削除でエラーになるようなので、
その場合は GUI からエラーになっているディスクイメージを無視するようにするなど
がんばって削除します。</p>
]]></content>
  </entry>
  
</feed>
