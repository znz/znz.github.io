<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vagrant | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/vagrant/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2018-02-25T12:03:37+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mastodonにpull requestを送った話と開発環境構築の話]]></title>
    <link href="http://blog.n-z.jp/blog/2017-04-16-contribute-mastodon.html"/>
    <updated>2017-04-16T22:43:41+09:00</updated>
    <id>http://blog.n-z.jp/blog/contribute-mastodon</id>
    <content type="html"><![CDATA[<p>最近流行っている mastodon に pull request を送ったので、
その環境構築などの話です。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>macOS Sierra 10.12.4</li>
<li>VirtualBox 5.1.18</li>
<li>Vagrant 1.9.3</li>
<li>vagrant-hostsupdater 1.0.2</li>
<li><a href="https://github.com/tootsuite/mastodon">https://github.com/tootsuite/mastodon</a> の master</li>
</ul>


<h2>起動まで</h2>

<p><a href="https://github.com/tootsuite/mastodon#development-with-vagrant">Development with Vagrant</a> からリンクされている
<a href="https://github.com/tootsuite/documentation/blob/master/Running-Mastodon/Vagrant-guide.md">Vagrant guide</a> を参考にして、
環境を構築しました。</p>

<p>初回起動 (<code>vagrant up</code>) 時は <code>vagrant-hostsupdater</code> での <code>sudo</code> に続けて実行されるので気づかなかったのですが、
2 回目に <code>vagrant up</code> した時に <code>/etc/exports</code> の変更のためにも <code>sudo</code> が実行されているのに気づきました。</p>

<pre><code>git clone https://github.com/tootsuite/mastodon
cd mastodon
vagrant plugin install vagrant-hostsupdater
vagrant up
</code></pre>

<h2>初期アカウント設定</h2>

<p>初期アカウントはメールアドレスが <code>admin@mastodon.dev</code> でパスワードが <code>mastodonadmin</code> と書いてあるのですが、入れなかったので、</p>

<pre><code>cd /vagrant
rails c
User.all
</code></pre>

<p>で確認してみると、メールアドレスが <code>admin@localhost:3000</code> になっていました。
そこで、そのまま <code>rails c</code> の中で、</p>

<pre><code>u=User.first
u.email="admin@mastodon.dev"
u.save!
</code></pre>

<p>で修正しました。</p>

<p>こんな感じで何か引っかかった時は rails の知識がないと辛そうです。</p>

<h2>いろいろ動作確認</h2>

<p>80 番ポートから 3000 番ポートへのポートフォワーディングは
Vagrantfile で設定しているので、
ホスト側から <code>http://mastodon.dev</code> は見えるのですが、
<code>vagrant ssh</code> で入ったゲスト側では <code>curl http://mastodon.dev</code> ではなく
<code>curl http://localhost:3000</code> や <code>curl http://mastodon.dev:3000</code> などのように
ポート番号をつける必要がありました。</p>

<h2>ストリーミング API</h2>

<p>Vagrantfile を見ればわかるのですが、
rails server が <code>rails s -d -b 0.0.0.0</code> で動いているところにポートフォワーディングしているだけなので、
streaming API は使えませんでした。</p>

<p>最初、実装されていないのかと勘違いしてしまったのですが、
実装されていると聞いたので、よくみてみると
<code>streaming/index.js</code> で rails 外のところに実装されていました。</p>

<p><code>npm run start</code> で起動すればゲストの中なら 4000 番ポートで使えるようになったので、
ストリーミング API を使いたい場合は一工夫必要そうです。</p>

<h2>メール</h2>

<p>メールは <code>http://mastodon.dev/letter_opener</code> に溜まっていました。
mailcatcher と違って、再起動しても残っていました。</p>

<h2>環境の更新</h2>

<p>最新の状態にするために master の変更に追随する必要がありますが、
<code>vagrant ssh</code> で入った中で <code>cd /vagrant</code> した状態で <code>git pull</code> するとパーミッションの関係でうまくいかないようだったので、
ホスト側で <code>git pull</code> する方が安全なようです。</p>

<p><code>yarn install</code> などでファイルが書き換わっていると、その変更を元に戻しておく必要もあるかもしれません。</p>

<p><code>git pull</code> した後は、Gemfile なども書き換わっていた時は</p>

<pre><code>vagrant ssh
cd /vagrant
bundle install
yarn install
rails db:migrate
rails assets:precompile
pkill -f puma
export $(cat ".env.vagrant" | xargs)
rails s -d -b 0.0.0.0
</code></pre>

<p>のような感じで <code>bundle install</code> と起動している rails server の停止と Vagrantfile の <code>$start</code> の処理をすると良さそうです。</p>

<p>パーミッションの問題で <code>yarn install</code> がうまくいかなかった時は <code>node_modules</code> を削除すると良さそうです。
ゲスト側だとうまくいかなかったら、ホスト側で消すなどの工夫が必要そうです。</p>

<h2>pull requests</h2>

<p><code>vagrant up</code> する前に Vagrantfile を確認していたところ、
<code>PATH</code> にカレントディレクトリを追加していたので、
<a href="https://github.com/tootsuite/mastodon/pull/1779">Remove current directory from PATH</a>
で削除する pull request を送りました。</p>

<p>そして、管理画面をみていたところ、title が並んでいてなんだこれ、と思ったので、
<a href="https://github.com/tootsuite/mastodon/pull/1785">翻訳の更新の pull request</a>
を送りました。</p>

<p><code>I18n.t</code> の最後の単語は翻訳がないときのデフォルトとしても使われるので、
そのことも考慮した単語を選んだ方が良さそうに思いましたが、
yaml ファイルをみていると title にしたい気持ちもわからなくはなかったので、
悩ましいところです。</p>

<h2>翻訳もれ?</h2>

<p>テスト環境なので短いパスワードでもいいかと思って、テストアカウントを登録する時に短いパスワードを入れてみたところ、
<code>translation missing: ja.activerecord.errors.models.user.attributes.password.too_short</code>
と出てきて調べてみると <code>config/locales/doorkeeper.fr.yml</code> にだけ <code>too_short</code> の翻訳があって何かおかしいと思って、
よく調べてみると、
rails-i18n gem に翻訳が入っている、 rails デフォルトのエラーメッセージだとわかったので、
<a href="https://github.com/tootsuite/mastodon/issues/1790">rails-i18n gem の追加リクエスト</a> を出しました。</p>

<h2>i18n-tasks</h2>

<p>前回の翻訳の更新は目視で比較して追加したのですが、
rails-i18n gem について調べているときに
i18n-tasks gem というのが入っていると気づいたので、
次はそれを使ってみました。</p>

<p><code>i18n-tasks health</code> でチェックできるのですが、デフォルトだと全言語が対象で、出過ぎなので、
<code>i18n-tasks health -l ja</code> で日本語だけに絞って表示しました。</p>

<p>そして <code>i18n-tasks add-missing -l ja</code> で <code>config/locales/ja.yml</code> に英語のまま追加され、
<code>git diff</code> で何が追加されたか確認して翻訳していきました。</p>

<p><code>i18n-tasks find '*.reset_password'</code> や <code>i18n-tasks find admin.accounts.reset_password</code> のようにして、どこで使われているのか確認して、
実際に表示させて確認しつつ翻訳しました。</p>

<p>affected_accounts は one と other で<a href="https://railsguides.jp/i18n.html#%E8%A4%87%E6%95%B0%E5%BD%A2%E5%8C%96">複数形化</a>していたのですが、
日本語にすると同じだと思ったので、
一段階浅くして共通の翻訳を使うように変更しました。</p>

<p><code>i1n-tasks add-missing -l ja</code> をした時に引用符がちょっとへんこうされてしまったのですが、
それもそのまま変更点として含めて、
<a href="https://github.com/tootsuite/mastodon/pull/1923">Add missing Japanese translations</a>
として pull request を送りました。</p>

<p><code>i18n-tasks unused -l ja</code> は本当に消して良いかどうかが不安だったので、
手をつけていません。</p>

<h2>まとめ</h2>

<p>vagrant で簡単に mastodon の開発環境を構築できました。
ただしストリーミング API はそのままだと対応していないので注意が必要そうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyLive ISO イメージを更新した]]></title>
    <link href="http://blog.n-z.jp/blog/2015-10-26-rubylive-builder.html"/>
    <updated>2015-10-26T21:44:33+09:00</updated>
    <id>http://blog.n-z.jp/blog/rubylive-builder</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2014-07-13-build-rubylive-on-vm.html" title="RubyLiveを仮想環境で作成">RubyLiveを仮想環境で作成</a>したものを更新しました。</p>

<!--more-->


<h2>動作確認環境</h2>

<ul>
<li>VirtualBox 5.0.6</li>
<li>Vagrant 1.7.4</li>
</ul>


<h2>ビルド環境の更新</h2>

<p><code>git clone https://github.com/znz/rubylive-builder</code> で取得していた <code>rubylive-builder</code> 環境の <code>Vagrantfile</code> の <code>config.vm.box</code> を <code>"ffuenf/debian-7.6.0-amd64"</code> から <code>"ffuenf/debian-8.2.0-amd64"</code> に<a href="https://github.com/znz/rubylive-builder/commit/289f2079dad86bde424aa810f0e6b28302607ccb">更新しました</a>。</p>

<h2>ビルド内容の更新</h2>

<h3>ruby のバージョンの更新</h3>

<p><code>config/hooks/10-ruby-rails.chroot</code> でインストールしている ruby を 2.1.4 から 2.2.3 に<a href="https://github.com/znz/rubylive/commit/475e077f9bdb066628415ad602fefdde2608c57e">更新しました</a>。</p>

<h3>壁紙の変更</h3>

<p>壁紙を RubyKaigi 2014 のロゴから関西 Ruby 会議 06 のロゴに<a href="https://github.com/znz/rubylive/commit/f7f4136a39fd1ac4da8121204b941b12eac3e65e">変更しました</a>。</p>

<p>変更しても <code>config/includes.chroot/usr/share/images/desktop-base/rubykaigi2014-mark.svg</code> にダウンロードしたファイルは残ったままで、そのまま ISO イメージを作成しなおすと古い画像も ISO イメージの中に入ってしまうので、手動で削除しておく必要があります。
(<code>rake distclean</code> でも消えません。)</p>

<p>試行錯誤した後には特に <code>config/includes.chroot</code> 以下に不要なファイルが残っていないか注意する必要があります。</p>

<h3>jessie への更新 (失敗)</h3>

<p>ビルド環境を jessie にあげても作成される ISO は wheezy のままだったので、以下の変更で jessie にしようとしたのですが、失敗したので結局 wheezy のままにしました。</p>

<p>変更点は以下の通りです。</p>

<pre><code>diff --git a/auto/config b/auto/config
index d44fc2d..3dc3665 100755
--- a/auto/config
+++ b/auto/config
@@ -2,6 +2,7 @@

 lb config noauto \
        --architectures "amd64" \
+       --distribution "jessie" \
        --bootloader "grub2" \
        --templates "templates" \
        --bootappend-live "quiet locales=ja_JP.UTF-8 timezone=Asia/Tokyo utc=no keyboard-layouts=jp
diff --git a/config/package-lists/30-japanese.list.chroot b/config/package-lists/30-japanese.list.ch
index 602270e..304d5f7 100644
--- a/config/package-lists/30-japanese.list.chroot
+++ b/config/package-lists/30-japanese.list.chroot
@@ -3,8 +3,8 @@ fbterm
 lv
 manpages-ja
 nkf
-ttf-mona
-ttf-monapo
+fonts-mona
+fonts-monapo
 fonts-ipafont-gothic
 fonts-ipafont-mincho
 fonts-vlgothic
diff --git a/config/package-lists/50-editors.list.chroot b/config/package-lists/50-editors.list.chro
index 8468dec..cb2197a 100644
--- a/config/package-lists/50-editors.list.chroot
+++ b/config/package-lists/50-editors.list.chroot
@@ -1,4 +1,4 @@
-emacs23
+emacs24
 vim
 vim-gtk
 gedit
</code></pre>

<p>失敗した部分は以下の通りです。</p>

<pre><code>[2015-10-26 13:27:55] lb chroot_live-packages
dpkg: dependency problems prevent removal of systemd:
 libpam-systemd:amd64 depends on systemd (= 215-17+deb8u2).

dpkg: error processing package systemd (--purge):
 dependency problems - not removing
dpkg: dependency problems prevent removal of systemd-sysv:
 init depends on systemd-sysv | sysvinit-core | upstart; however:
  Package systemd-sysv is to be removed.
  Package sysvinit-core is not installed.
  Package upstart is not installed.
 libpam-systemd:amd64 depends on systemd-shim (&gt;= 8-2) | systemd-sysv; however:
  Package systemd-shim is not installed.
  Package systemd-sysv is to be removed.

dpkg: error processing package systemd-sysv (--purge):
 dependency problems - not removing
Errors were encountered while processing:
 systemd
 systemd-sysv
P: Begin unmounting filesystems...
P: Saving caches...
Reading package lists...
Building dependency tree...
Reading state information...
rake aborted!
Command failed with status (1): [sudo lb build...]
</code></pre>

<h2>ISO のビルド</h2>

<p><code>vagrant up</code> して <code>vagrant ssh</code> で入った後、<code>/vagrant/rubylive.sh</code> で作成できます。
2 回目以降は <code>~/rubylive</code> で <code>time rake APT_HTTP_PROXY=http://localhost:3142</code> を直接実行しても良いと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrantなどのローカルへのssh接続のみarcfour256で高速化する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-11-openssh-arcfour256.html"/>
    <updated>2014-08-11T21:53:54+09:00</updated>
    <id>http://blog.n-z.jp/blog/openssh-arcfour256</id>
    <content type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/rx7/20101025/p1" title="大容量ファイルのSCP転送を高速にする方法 - 元RX-7乗りの適当な日々">大容量ファイルのSCP転送を高速にする方法 - 元RX-7乗りの適当な日々</a>
をみて、安全な可能性が高い経路だけ <code>arcfour256</code> のような高速な <code>Ciphers</code> を使いたいと思って、そうなるように設定しました。</p>

<p><a href="/blog/2013-11-15-dokku.html" title="VirtualBoxでdokkuを試した">VirtualBoxでdokkuを試した</a>
での設定は意図通りには動いていませんでした。</p>

<!--more-->


<h2>2017-05-20 追記</h2>

<p><a href="/blog/2017-05-20-openssh-config.html">OpenSSH の ~/.ssh/config の見直しをした</a>話で書いたように、今後は arcfour 系は使えなくなるようなので、デフォルトのままか <code>chacha20-poly1305@openssh.com</code> を外して <code>aes*-ctr</code> 系を使う方が良さそうです。</p>

<h2>確認バージョン</h2>

<ul>
<li>Mac OS X 10.9.4</li>
<li>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011</li>
</ul>


<h2>OpenSSH の <code>~/.ssh/config</code> の設定例</h2>

<p>最初に例を出しておきます。
詳しいことは説明は後でしますが、
<code>Host *</code> の設定は例として書いているだけで、
書かないことを推奨します。</p>

<p><code>text ~/.ssh/config
HashKnownHosts no
Host 127.0.0.1
    Ciphers arcfour256,arcfour128
Host *
    Ciphers aes256-ctr,aes192-ctr,aes128-ctr
</code></p>

<h3>設定の固まり (セクション)</h3>

<p><code>~/.ssh/config</code> の設定は <code>Host</code> で始まる行ごとの固まり (セクション) に分かれていて、
上の例の場合は <code>HashKnownHosts</code> が全体の設定、
次が <code>127.0.0.1</code> のみの設定、
最後が <code>*</code> つまりワイルドカードですべてのホストに対する設定になります。</p>

<h3>設定の優先順位</h3>

<p>最初に見つかった設定が使われます。
これが以前は勘違いしていた点で、
ホストごとの設定を優先したいのなら、
<code>Host</code> の上のファイルの冒頭には書かずに、
ファイルの最後に <code>Host *</code> で設定する必要があります。</p>

<p>さらに詳しい優先順位は <code>man ssh_config</code> で参照できますが、</p>

<ol>
<li>コマンドラインオプション</li>
<li>ユーザー設定 (<code>~/.ssh/config</code>)</li>
<li>システムの設定 (<code>/etc/ssh/ssh_config</code>)</li>
</ol>


<p>という順番で、その中で最初に見つかったものを使うようになっています。</p>

<p>つまり、ホストごとの設定はファイルの先頭に近い方に、
一般的な設定は最後に書く必要があります。</p>

<h2>Ciphers の一般設定</h2>

<p>デフォルトは <code>man</code> で確認すると
<code>aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour</code>
になっていて、
AES の CTR のビット数が多いものを優先するために上記の設定にしています。</p>

<p>設定するなら OS などの更新ごとに毎回ちゃんと <code>man</code> でデフォルトを確認すべきです。
よくわからないのなら、
<code>Host *</code> での設定はしない方が良いでしょう。</p>

<h2>127.0.0.1 向けの Ciphers 設定</h2>

<p>参考にしたサイトのコメントに「
<a href="http://d.hatena.ne.jp/rx7/20101025/p1#c1291741909" title="ただ、arcfourには別の問題が有るので、使わない方がいいです。 arcfour128/256はその問題の対処版なので、これらのみを使うようにした方がいいでしょう。">ただ、arcfourには別の問題が有るので、使わない方がいいです。 arcfour128/256はその問題の対処版なので、これらのみを使うようにした方がいいでしょう。</a>
」とあり、速度もほとんど変わらないので、
「arcfour128/256」だけ使う設定にしています。</p>

<h2>vagrant 用設定</h2>

<p><code>vagrant ssh --help</code> で追加のオプションが渡せるとわかったので、
<code>vagrant ssh -- -v</code> で接続時の状況を調べました。</p>

<p>コマンドラインオプションが優先されるということで、
<code>vagrant ssh -- -v -o Ciphers=arcfour256</code>
のように接続すると <code>arcfour256</code> になることが確認できました。</p>

<p>以前は <code>Host vagrant</code> で設定して <code>vagrant ssh</code> の代わりに <code>ssh vagrant</code> を使っていたのですが、
複数 <code>vagrant up</code> したときに最初に起動した VM のポート (2222) にしか接続できないという問題がありました。</p>

<p>そこで、他の VM のときにも使える設定を考えたところ、
<code>Host 127.0.0.1</code> でうまくいくことがわかりました。</p>

<h2>まとめ</h2>

<p>元々のデフォルトは時代に合わせて最適なものに更新されているので、
不用意に固定してしまうと
<a href="http://d.hatena.ne.jp/jovi0608/20140808/1407483168" title="OpenSSLの脆弱性(CVE-2014-3511)でTLSプロトコルの基礎を学ぶ - ぼちぼち日記">OpenSSLの脆弱性(CVE-2014-3511)でTLSプロトコルの基礎を学ぶ - ぼちぼち日記</a>
のように強いものに固定していたつもりが弱いものに固定されてしまうことになる可能性があるので注意が必要です。</p>

<p><code>127.0.0.1</code> 以外にも LAN 内のホストなど、経路の信頼性が比較的高くて高速に転送したい場合は <code>Host</code> 設定で <code>Ciphers arcfour256</code> を追加すると良いのではないでしょうか。</p>

<h2>参考 URL</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/rx7/20101025/p1" title="大容量ファイルのSCP転送を高速にする方法 - 元RX-7乗りの適当な日々">大容量ファイルのSCP転送を高速にする方法 - 元RX-7乗りの適当な日々</a></li>
<li><a href="http://tech.nitoyon.com/ja/blog/2013/01/11/github-clone-http/" title="GitHub で clone するときは SSH じゃなく HTTP を使ったほうが高速 - てっく煮ブログ">GitHub で clone するときは SSH じゃなく HTTP を使ったほうが高速 - てっく煮ブログ</a></li>
<li><a href="http://endoyuta.com/2014/03/12/github%E3%81%AEssh%E6%8E%A5%E7%B6%9A%E3%81%8C%E9%80%9F%E3%81%8F%E3%81%AA%E3%82%8B%E3%82%89%E3%81%97%E3%81%84/" title="githubのssh接続が速くなるらしい | Logicky Blog">githubのssh接続が速くなるらしい | Logicky Blog</a></li>
<li><a href="http://blog.eiel.info/blog/2013/11/09/no-mathcing-cipher-found-on-github/" title="GitHub で SSH 接続できなくなった。SSH をつかった場合に高速化する設定が原因だった。 - そんなこと覚えてない">GitHub で SSH 接続できなくなった。SSH をつかった場合に高速化する設定が原因だった。 - そんなこと覚えてない</a></li>
<li><a href="http://d.hatena.ne.jp/jovi0608/20140808/1407483168" title="OpenSSLの脆弱性(CVE-2014-3511)でTLSプロトコルの基礎を学ぶ - ぼちぼち日記">OpenSSLの脆弱性(CVE-2014-3511)でTLSプロトコルの基礎を学ぶ - ぼちぼち日記</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant Cloudでboxを公開してみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-21-vagrantcloud-box.html"/>
    <updated>2014-07-21T15:52:35+09:00</updated>
    <id>http://blog.n-z.jp/blog/vagrantcloud-box</id>
    <content type="html"><![CDATA[<p><a href="http://blog.n-z.jp/blog/2014-07-18-wheezy-from-vagrant-cloud.html" title="Vagrant CloudからWheezyを入れてみた">Vagrant CloudからWheezyを入れてみた</a>で公開されているものを使ってみたので、
今回は
<a href="https://vagrantcloud.com/">Vagrant Cloud</a>
で日本語で日本向けの Box の公開も試してみました。</p>

<!--more-->


<h2>手順概要</h2>

<ol>
<li><a href="https://vagrantcloud.com/">https://vagrantcloud.com/</a> にログイン</li>
<li><a href="https://vagrantcloud.com/boxes/new">Create Box</a> で作成</li>
<li>Create new version でバージョンを作成</li>
<li>Create new provider でバージョンに対応する provider を作成</li>
<li>無料アカウントだと Upload は使えないようなので URL を指定</li>
<li>バージョンの編集で Release すると公開</li>
</ol>


<h2>登録される情報</h2>

<p>ユーザーアカウントに複数の Box が対応していて、
Box に複数のバージョンが対応していて、
バージョンに複数の provider (VirtualBox とか VMware とか) が対応している、
という構造になっているようです。</p>

<p>バージョンは Release するまでは公開されないようです。</p>

<p>古いバージョンは Revoke で破棄できるようなので、
box を置く URL を使い回すなら Revoke してから
ファイルを置き換えて新しいバージョンを登録するのが
良さそうに思いました。</p>

<h2>作成した box の packer テンプレート</h2>

<p><a href="https://github.com/znz/packer-templates">packer-templates</a>
で公開しています。</p>

<p>使い方は</p>

<pre><code>git clone https://github.com/znz/packer-templates
cd debian-7.6.0-amd64-ja_jp
packer build debian-7.6.0-amd64-ja_jp.json
</code></pre>

<p>で <code>debian-7.6.0-amd64-ja_jp_virtualbox.box</code> が作成できます。
試した環境では1時間ぐらいかかりました。</p>

<h2>使用方法</h2>

<p><code>vagrant init znzj/debian-7.6.0-amd64-ja_jp</code>
のように <code>vagrant init</code> の引数に <code>ユーザー名/BOX名</code> を指定して
<code>Vagrantfile</code> を作成すると
<code>config.vm.box = "znzj/debian-7.6.0-amd64-ja_jp"</code>
と指定されていて <code>vagrant up</code> で自動ダウンロードされて使えます。</p>

<h2>登録した URL の扱い</h2>

<p>box は URL で登録したので、
<code>https://vagrantcloud.com/znzj/debian-7.6.0-amd64-ja_jp/version/1/provider/virtualbox.box</code>
のように <code>vagrantcloud.com</code> の URL に見えるところからダウンロードしようとした時、
リダイレクトされて登録した URL からのダウンロードになるようです。</p>

<p><code>vagrantcloud</code> 側でキャッシュなどをしてくれるわけではないようなので、
置き場所には注意する必要がありそうです。</p>

<p>今回は需要も多くなさそうで、
日本向けということで
さくらのVPS
に置いてみました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant CloudからWheezyを入れてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-18-wheezy-from-vagrant-cloud.html"/>
    <updated>2014-07-18T21:30:25+09:00</updated>
    <id>http://blog.n-z.jp/blog/wheezy-from-vagrant-cloud</id>
    <content type="html"><![CDATA[<p>Debian 7.6 がリリースされたので、新しい box がないか探してみたところ、
<a href="http://www.vagrantbox.es/" title="A list of base boxes for Vagrant - Vagrantbox.es">A list of base boxes for Vagrant - Vagrantbox.es</a>
から探すのではなく
<a href="https://vagrantcloud.com/">Vagrant Cloud</a>
を使えば良いということがわかりました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>VirtualBox 4.3.12</li>
<li>Vagrant 1.6.3</li>
<li><a href="https://vagrantcloud.com/ffuenf/debian-7.6.0-amd64" title="Debian Wheezy 7.6.0 x86_64">Debian Wheezy 7.6.0 x86_64</a> 0.0.27</li>
</ul>


<h2>書き換え</h2>

<p>古い box は</p>

<pre><code>  config.vm.box = ENV["VM_BOX"] || "opscode_debian-7.4_chef-provisionerless"
  config.vm.box_url = ENV["VM_BOX_URL"] || "http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_debian-7.4_chef-provisionerless.box"
</code></pre>

<p>と指定していたのを
<a href="https://github.com/ffuenf/vagrant-boxes" title="ffuenf/vagrant-boxes">ffuenf/vagrant-boxes</a>
からリンクされている
<a href="https://vagrantcloud.com/ffuenf/debian-7.6.0-amd64" title="ffuenf/debian-7.6.0-amd64">ffuenf/debian-7.6.0-amd64</a>
の説明通り <code>vagrant init ffuenf/debian-7.6.0-amd64</code> で作成された
<code>Vagrantfile</code> を参考にして、</p>

<pre><code>  config.vm.box = "ffuenf/debian-7.6.0-amd64"
</code></pre>

<p>に書き換えました。</p>

<p>以前の box を使っている 古い VM を <code>vagrant destroy</code> ですべて破棄した後、
<code>vagrant box remove opscode_debian-7.4_chef-provisionerless</code>
で box も削除しました。</p>

<h2>余談</h2>

<p><code>vagrant box outdated</code> や <code>vagrant box update</code> の使い方がわからなかったのですが、
<code>box_url</code> でダウンロードしてきた box で使うものではなく Vagrant Cloud から
ダウンロードしてきた box で使うものだったようです。</p>
]]></content>
  </entry>
  
</feed>
