<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: virtualbox | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/virtualbox/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2016-03-05T18:42:04+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vagrant の Multi VM 間で IPsec を試した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-04-vagrant-multivm-ipsec-demo.html"/>
    <updated>2014-06-04T22:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/vagrant-multivm-ipsec-demo</id>
    <content type="html"><![CDATA[<p>正常に IPsec の暗号化通信ができているときの racoon のログなどを確認したかったので、
Vagrant と ansible で
IPsec で通信できる Multi VM 環境を作ってみました。</p>

<p>playbook は
<a href="https://github.com/znz/ansible-playbook-ipsec-demo">https://github.com/znz/ansible-playbook-ipsec-demo</a>
で公開しています。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>ホスト OS : Mac OS X 10.9.3</li>
<li>VirtualBox 4.3.12</li>
<li>Vagrant 1.6.3</li>
<li>ansible 1.6.2</li>
<li>ゲスト OS : Ubuntu 14.04 &times; 2</li>
</ul>


<p>Ubuntu は <a href="https://cloud-images.ubuntu.com/vagrant/trusty/current/">https://cloud-images.ubuntu.com/vagrant/trusty/current/</a> のイメージを使ったので、
daily build の状態によっては動作が変わっているかもしれません。</p>

<h2>ホストオンリーネットワーク</h2>

<p>使った後は</p>

<ul>
<li>vboxnet1 (192.168.50.1/24)</li>
<li>vboxnet2 (192.168.11.1/24)</li>
<li>vboxnet3 (192.168.12.1/24)</li>
</ul>


<p>が勝手に増えているので、不要なら設定で消しておくと良いと思います。</p>

<p>ネットワークとしては以下のように 192.168.50.0/24 の部分で IPsec 接続をして、
192.168.11.11 と 192.168.12.12 をつなぐ、という感じにしています。
デフォルトの eth0 は外部への接続用としてそのままにしています。</p>

<pre><code>192.168.11.11 (vm1:eth2)
       |
192.168.50.11 (vm1:eth1)
       |
192.168.50.12 (vm2:eth1)
       |
192.168.12.12 (vm2:eth2)
</code></pre>

<h2>準備</h2>

<p>Usage に書いてあるように準備をしておきます。
先日作った <code>ja_jp</code> role は git submodule にしているので、</p>

<pre><code>% git submodule init
% git submodule update
</code></pre>

<p>で取得する必要があります。</p>

<h2>試し方</h2>

<p><code>vagrant up</code>
すると
<code>/etc/ipsec-tools.conf</code>
と
<code>/etc/racoon/racoon.conf</code>
に設定が入っている状態になっているので、
始点アドレスを指定して
<code>ipsec-tools.conf</code>
に設定した経路を通るようにパケットを送ると
IPsec VPN がつながります。</p>

<p><code>ping</code> コマンドのように直接始点アドレスを指定するオプションがない場合は
<code>ping -I eth2 192.168.12.12</code> のように network interface で指定すれば
良いようです。</p>

<h2>動作確認</h2>

<p>以下のコマンドの出力が接続前後で変わることが確認できます。</p>

<ul>
<li><code>racoonctl -l show-sa isakmp</code></li>
<li><code>racoonctl -l show-sa ipsec</code></li>
<li><code>setkey -D</code></li>
</ul>


<p>racoon のログが <code>/var/log/syslog</code> に大量に出ているのを確認できます。
(<code>racoon.conf</code> で <code>log debug</code> にしているため)</p>

<h2>tshark でパケットの確認</h2>

<p><code>tshark</code> パッケージをインストールした後、
<code>sudo dpkg-reconfigure wireshark-common</code>
で一般ユーザーでも実行を許可するようにして、
実行を許可するユーザーを <code>wireshark</code> に追加します。</p>

<p>グループの追加を反映するためにログインし直すと、
<code>tshark -i eth1 -V 'port 500'</code>
などでパケットの確認ができるようになります。</p>

<p>暗号化されていて詳細はわかりませんが、
UDP の 500 番ポートで Informational のパケットが流れていることが確認できました。</p>

<p>GUI の wireshark の方では
<a href="http://ask.wireshark.org/questions/12019/how-can-i-decrypt-ikev1-andor-esp-packets">http://ask.wireshark.org/questions/12019/how-can-i-decrypt-ikev1-andor-esp-packets</a>
の方法で暗号化の解除もできるようです。</p>

<p>syslog の方で racoon のログをみると、
DPD のパケットらしいということが確認できました。
syslog の方で <code>#012</code> となっている部分がありますが、
これは rsyslog で改行が変換されたたもので空白として無視すれば良くて、
例えば</p>

<pre><code>Jun  4 17:54:43 vm1 racoon: DEBUG: new cookie:#012831d33d46e20f8e6
Jun  4 17:54:43 vm1 racoon: DEBUG: final encryption key computed:
Jun  4 17:54:43 vm1 racoon: DEBUG: #012932d361f fc62ddc2 6164d513 d40d211f b7364166 232cf490
</code></pre>

<p>というログなら cookie は <code>831d33d46e20f8e6</code> になります。</p>

<p>鍵は <code>932d361ffc62ddc26164d513d40d211fb7364166232cf490</code> になると思ったのですが、
これを
Edit -> Preferences -> Protocols -> ISAKMP -> IKEv1 Decryption Table:
に設定すれば良いはずなのですが、試したところ decrypt されなかったので、
あっているのかどうかはわかりませんでした。
cookie の方は他のログなどで確認できたので、あっているはずです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[virtualboxでdkmsによるモジュールのリビルドが動いていなかったので対処した]]></title>
    <link href="http://blog.n-z.jp/blog/2014-01-04-virtualbox-dkms.html"/>
    <updated>2014-01-04T23:47:41+09:00</updated>
    <id>http://blog.n-z.jp/blog/virtualbox-dkms</id>
    <content type="html"><![CDATA[<p>Ubuntu 12.04.3 LTS の環境で
virtualbox.org から入れた VirtualBox を
virtualbox-4.2 (4.2.20-90983~Ubuntu~precise)
から
virtualbox-4.3 (4.3.6-91406~Ubuntu~precise)
にあげても dkms によるモジュールのリビルドがちゃんと動かないままだったので、
直し方を調べて対処してみました。</p>

<!--more-->


<h2>状況</h2>

<p>カーネルを linux-image-3.8.0-34-generic から
linux-image-3.8.0-35-generic にあげるときに
virtualbox-4.2 (4.2.20-90983~Ubuntu~precise)
から
virtualbox-4.3 (4.3.6-91406~Ubuntu~precise)
にあげました。</p>

<p>以下の作業は linux-image-3.8.0-34-generic で起動中に
再起動後に使われる linux-image-3.8.0-35-generic 用の
VirtualBox のカーネルモジュールをビルドしようとしています。</p>

<h2>エラーの状況</h2>

<p><code>dkms status</code> で調べると以下のエラーメッセージが出る状態でした。</p>

<pre><code class="console">  $ sudo dkms status
  Error! Could not locate dkms.conf file.
  File:  does not exist.
</code></pre>

<h2>対処その1</h2>

<p><code>/var/lib/dkms/vboxhost</code> を退避して
<code>dpkg-reconfigure</code> しなおせば良いという情報があったので
試してみました。</p>

<p>この段階での <code>dkms status</code> は調べ忘れていたのですが、
後の状況からすると
今起動中のカーネルのモジュールだけビルドされたようです。</p>

<pre><code class="console">  $ sudo mv /var/lib/dkms/vboxhost /tmp/
  $ sudo dpkg-reconfigure virtualbox-4.3
  Stopping VirtualBox kernel modules ...done.
  addgroup: グループ `vboxusers' はシステムグループとしてすでに存在しています。終了します。
  Unknown media type in type 'all/all'
  Unknown media type in type 'all/allfiles'
  Unknown media type in type 'uri/mms'
  Unknown media type in type 'uri/mmst'
  Unknown media type in type 'uri/mmsu'
  Unknown media type in type 'uri/pnm'
  Unknown media type in type 'uri/rtspt'
  Unknown media type in type 'uri/rtspu'
  Stopping VirtualBox kernel modules ...done.
  Uninstalling old VirtualBox DKMS kernel modules ...done.
  Removing old VirtualBox pci kernel module ...done.
  Removing old VirtualBox netadp kernel module ...done.
  Removing old VirtualBox netflt kernel module ...done.
  Removing old VirtualBox kernel module ...done.
  Trying to register the VirtualBox kernel modules using DKMS ...done.
  Starting VirtualBox kernel modules ...done.
</code></pre>

<h2>対処その2</h2>

<p>purge した古いカーネルのモジュールが残っていたので、
削除しました。
安全のため <code>/tmp</code> への移動にしていますが、
いきなり <code>rm -rf</code> で削除しても良いと思います。
他の古いバージョンも残っていれば削除してしまっても
大丈夫だと思います。</p>

<p>ねんのため
<code>/etc/init.d/vboxdrv setup</code>
を実行してみましたが、
<code>dpkg-reconfigure</code>
で既に実行済みだったので関係なかったようです。</p>

<p>この段階で <code>dkms status</code> を確認してみると
起動中のカーネルのモジュールだけビルドされていることがわかります。</p>

<pre><code class="console">  $ sudo mv /lib/modules/3.8.0-33-generic/ /tmp/
  $ sudo /etc/init.d/vboxdrv setup
  Stopping VirtualBox kernel modules ...done.
  Uninstalling old VirtualBox DKMS kernel modules ...done.
  Trying to register the VirtualBox kernel modules using DKMS ...done.
  Starting VirtualBox kernel modules ...done.
  $ sudo dkms status
  vboxhost, 4.3.6, 3.8.0-34-generic, x86_64: installed
</code></pre>

<h2>対処その3</h2>

<p>dkms でのモジュールのビルドは
<code>/etc/kernel/postinst.d/dkms</code>
で実行されているので、
カーネルを再インストールすれば確実ということで、
カーネルを <code>aptitude reinstall</code> しました。</p>

<p>その結果、正常にビルドされていることが確認できたので、
再起動して VirtualBox の動作確認をしました。</p>

<pre><code class="console">  $ sudo aptitude reinstall linux-image-3.8.0-35-generic
  以下のパッケージが再インストールされます:
    linux-image-3.8.0-35-generic
  0 個のパッケージを更新、 0 個を新たにインストール、 再インストール: 1 個、 0 個を削除予定 、0 個が更新されていない。
  アーカイブ 48.2 M バイト中 0  バイトを取得する必要があります。 展開後に 0  バイトのディス ク領域が新たに消費されます。
  (データベースを読み込んでいます ... 現在 117478 個のファイルとディレクトリがインストールされています。)
  linux-image-3.8.0-35-generic 3.8.0-35.50~precise1 を (.../linux-image-3.8.0-35-generic_3.8.0-35.50~precise1_amd64.deb で) 置換するための準備をしています ...
  Done.
  linux-image-3.8.0-35-generic を展開し、置換しています...
  Examining /etc/kernel/postrm.d .
  run-parts: executing /etc/kernel/postrm.d/initramfs-tools 3.8.0-35-generic /boot/vmlinuz-3.8.0-35-generic
  run-parts: executing /etc/kernel/postrm.d/zz-update-grub 3.8.0-35-generic /boot/vmlinuz-3.8.0-35-generic
  linux-image-3.8.0-35-generic (3.8.0-35.50~precise1) を設定しています ...
  Running depmod.
  update-initramfs: deferring update (hook will be called later)
  Not updating initrd symbolic links since we are being updated/reinstalled
  (3.8.0-35.50~precise1 was configured last, according to dpkg)
  Not updating image symbolic links since we are being updated/reinstalled
  (3.8.0-35.50~precise1 was configured last, according to dpkg)
  Examining /etc/kernel/postinst.d.
  run-parts: executing /etc/kernel/postinst.d/apt-auto-removal 3.8.0-35-generic /boot/vmlinuz-3.8.0-35-generic
  run-parts: executing /etc/kernel/postinst.d/dkms 3.8.0-35-generic /boot/vmlinuz-3.8.0-35-generic
  run-parts: executing /etc/kernel/postinst.d/initramfs-tools 3.8.0-35-generic /boot/vmlinuz-3.8.0-35-generic
  update-initramfs: Generating /boot/initrd.img-3.8.0-35-generic
  run-parts: executing /etc/kernel/postinst.d/pm-utils 3.8.0-35-generic /boot/vmlinuz-3.8.0-35-generic
  run-parts: executing /etc/kernel/postinst.d/update-notifier 3.8.0-35-generic /boot/vmlinuz-3.8.0-35-generic
  run-parts: executing /etc/kernel/postinst.d/zz-update-grub 3.8.0-35-generic /boot/vmlinuz-3.8.0-35-generic
  Generating grub.cfg ...
  Found linux image: /boot/vmlinuz-3.8.0-35-generic
  Found initrd image: /boot/initrd.img-3.8.0-35-generic
  Found linux image: /boot/vmlinuz-3.8.0-34-generic
  Found initrd image: /boot/initrd.img-3.8.0-34-generic
  Found memtest86+ image: /memtest86+.bin
  done
  $ sudo dkms status
  vboxhost, 4.3.6, 3.8.0-34-generic, x86_64: installed
  vboxhost, 4.3.6, 3.8.0-35-generic, x86_64: installed
  $
</code></pre>

<h2>まとめ</h2>

<p>古いバージョンは再起動で消えてしまって確認できないのですが、
多分古い VirtualBox では
<code>/var/lib/dkms/vboxhost/*/source/dkms.conf</code>
が存在していなくて、
バージョンを上げても古いバージョンの <code>source</code> が残ったままだと
同じエラーが出続けるようなので、
クリーンインストールやそれに近い状態にすると直るということのようです。</p>
]]></content>
  </entry>
  
</feed>
