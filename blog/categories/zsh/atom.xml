<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: zsh | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/zsh/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2017-09-21T00:21:10+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[zshでgrepのようなことをする]]></title>
    <link href="http://blog.n-z.jp/blog/2014-12-11-zsh-grep.html"/>
    <updated>2014-12-11T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/zsh-grep</id>
    <content type="html"><![CDATA[<p>zsh で簡易 grep 的なことができたので、紹介します。</p>

<!--more-->


<h2>実行例</h2>

<p><code>${name:#pattern}</code> と <code>(M)</code> フラグを組み合わせると配列から glob pattern にマッチしたものだけ抜き出せます。</p>

<pre><code class="console">% echo ${(FM)${(f)"$(&lt; /etc/hosts)"}:#*local*}
127.0.0.1       localhost
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
</code></pre>

<p><code>(M)</code> フラグなしだと <code>grep -v</code> のようにマッチしなかったものだけが残ります。</p>

<pre><code class="console">% echo ${(F)${(f)"$(&lt; /etc/passwd)"}:#*:[1-8]*}
root:x:0:0:root:/root:/bin/bash
news:x:9:9:news:/var/spool/news:/bin/sh
</code></pre>

<h2>解説</h2>

<ol>
<li>まず最初に <code>$(&lt; filename)</code> でファイルから内容を読み込んでいます。</li>
<li>次に <code>""</code> で改行などの <code>IFS</code> に含まれる空白による分割を抑制しています。</li>
<li>そして <code>${(f)var}</code> の <code>f</code> フラグは <code>ps:\n:</code> の省略形で、改行で分割して配列にするという意味です。ここまでの処理は zsh での典型的な処理なので覚えておくと便利です。</li>
<li>その次がメインの <code>${name:#pattern}</code> です。指定するパターンは正規表現ではなくファイル glob のパタ
ーンのようです。 <code>(M)</code> フラグと組み合わせることでマッチしなかった要素を削除しています。</li>
<li>最後に <code>${(F)var}</code> の <code>F</code> フラグは <code>pj:\n:</code> の省略形で、改行で結合するという意味です。</li>
</ol>


<p><code>F</code> フラグは <code>M</code> フラグと同時に指定しても問題なかったので、括弧 (<code>${}</code> の方) をネストさせずに同じ所 に書いています。
<code>f</code> フラグは別にしないとうまく動きませんでした。</p>

<p>行全体とのマッチなので、前後に <code>*</code> をつけないと一部に含むという意味になりません。
逆に後ろだけに <code>*</code> をつけて行頭マッチなどが出来るということでもあります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zshでEnterを連打したときにいろいろ実行する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-12-06-zsh-enter.html"/>
    <updated>2014-12-06T18:01:45+09:00</updated>
    <id>http://blog.n-z.jp/blog/zsh-enter</id>
    <content type="html"><![CDATA[<p>これは
<a href="http://qiita.com/advent-calendar/2014/zsh">zsh Advent Calendar 2014</a>
の 6 日目の記事です。</p>

<p>zsh で Enter を連打したときに順番にコマンドを実行するというのをやってみました。</p>

<p>参考にしたのは <a href="http://qiita.com/yuyuchu3333/items/e9af05670c95e2cc5b4d" title="Zsh - Enter で ls と git status を表示すると便利 - Qiita">Zsh - Enter で ls と git status を表示すると便利 - Qiita</a> です。</p>

<!--more-->


<h2>概要と実装</h2>

<p><code>.zshrc</code> に以下のような感じで追加して空 Enter を押すと
最初は <code>ls</code> で次に
<code>svn status</code> または <code>git status -sb</code> を実行するようになります。
連打したときに終わりがわかりやすいように 3 回目は何も実行しないようにしています。</p>

<pre><code class="sh">function my_enter {
    if [[ -n "$BUFFER" ]]; then
        builtin zle .accept-line
        return 0
    fi
    if [ "$WIDGET" != "$LASTWIDGET" ]; then
        MY_ENTER_COUNT=0
    fi
    case $[MY_ENTER_COUNT++] in
        0)
            BUFFER=" ls"
            ;;
        1)
            if [[ -d .svn ]]; then
                BUFFER=" svn status"
            elif git rev-parse --is-inside-work-tree &gt;/dev/null 2&gt;&amp;1; then
                BUFFER=" git status -sb"
            fi
            ;;
        *)
            unset MY_ENTER_COUNT
            ;;
    esac
    builtin zle .accept-line
}
zle -N my_enter
bindkey '^m' my_enter
</code></pre>

<h2>関数解説</h2>

<p>最初の <code>if</code> 文で <code>$BUFFER</code> をチェックして入力があるときは <code>zle .accept-line</code> で普通に実行するようにしています。</p>

<p>次の <code>if</code> 文で <code>$LASTWIDGET</code> と <code>$WIDGET</code> が違うときに <code>MY_ENTER_COUNT</code> というシェル変数を初期化しています。
この変数で何回目の空 Enter かを覚えておくようにしています。</p>

<p>そして <code>MY_ENTER_COUNT</code> で何回目かに応じて実行するコマンドを変えています。
頭にスペースを入れているのは <code>setopt histignorespace</code> と組み合わせることを想定しています。</p>

<p>最後に <code>zle .accept-line</code> で実行しています。</p>

<h2>まとめ</h2>

<p>空 Enter 連打でいろいろなコマンドを順番に実行できるようにしてみました。
参考にして好きなコマンドを実行できるようにすると良いのではないでしょうか。</p>

<p><a href="http://qiita.com/yuyuchu3333/items/e9af05670c95e2cc5b4d">参考元の Qiita の記事</a>
にちょっと書いているように Enter がやり過ぎと思ったら
<code>bindkey '^J' my_enter</code>
のように別のキーに割り当てると良いでしょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ターミナルでの文字幅を調べる]]></title>
    <link href="http://blog.n-z.jp/blog/2014-10-07-char-width-in-terminal.html"/>
    <updated>2014-10-07T20:10:20+09:00</updated>
    <id>http://blog.n-z.jp/blog/char-width-in-terminal</id>
    <content type="html"><![CDATA[<p><a href="http://uwabami.junkhub.org/log/20141007.html#p01" title="マルチバイト文字列の幅を 2 としてカウントする">マルチバイト文字列の幅を 2 としてカウントする</a>
という話を見て、
端末に実際の幅を問い合わせてみればいいのではないかと思って試してみました。</p>

<!--more-->


<h2>実行例</h2>

<p>こんな感じでできました。
zsh と bash で動作確認しています。
端末は
<a href="http://iterm2.com/" title="iTerm2">iTerm2</a>
で動作確認しています。</p>

<pre><code>% echo -ne '日本語\e[6n'; read -d';' a; read -dR a; printf '\e[M\r'; echo $[a-1]
6
% echo -ne 'abc日本語\e[6n'; read -d';' a; read -dR a; printf '\e[M\r'; echo $[a-1]
9
</code></pre>

<h2>スクリプト化</h2>

<p>実行ファイルにするならこんな感じになります。</p>

<pre><code>#!/bin/bash
echo -ne "$*"'\e[6n'; read -d';' a; read -dR a; printf '\e[M\r'; echo $[a-1]
</code></pre>

<h2>解説</h2>

<p>実装としては実際に表示して、カーソル位置を端末に問い合わせて、表示を消去して、桁を取り出して 1 引いています。</p>

<p>エスケープシーケンスなどに関しては、
<a href="http://ttssh2.sourceforge.jp/manual/ja/about/ctrlseq.html" title="対応制御シーケンス">対応制御シーケンス</a>
を参考にしてください。</p>

<ol>
<li>まず文字列を表示しています。</li>
<li><code>CSI Ps n</code> (DSR) を使ってカーソルの位置を報告させています。</li>
<li><code>CSI r ; c R</code> という応答のうち、 <code>;</code> までを捨てて、 <code>c</code> だけ変数 <code>a</code> に取り込んでいます。</li>
<li><code>CSI Ps M</code> (DL) でカーソル行に表示された内容を消去しています。</li>
<li><code>CR</code> で行頭にカーソルを戻しています。</li>
<li>カーソル位置なので 文字数+1 になっているので、1 引いて表示しています。</li>
</ol>


<h2>追記</h2>

<p>実装の説明でわかると思いますが、1行を超える長さは調べられません。がんばるなら適当に区切って文字ごととかで調べてください。</p>

<p>実行開始時にカーソルは行頭にしておく必要があり、実行後にカーソル行は消えます。
スクリプト中に入れるには使いにくいと思います。</p>

<p>半分ネタなので、あんまりがんばっていません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zshでfpathからwhichのように検索する話など]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-12-zsh-which-fpath.html"/>
    <updated>2014-08-12T23:08:30+09:00</updated>
    <id>http://blog.n-z.jp/blog/zsh-which-fpath</id>
    <content type="html"><![CDATA[<p>zsh で <code>PATH</code> から <code>which</code> コマンドや <code>type</code> コマンドで実行ファイルを検索するように <code>fpath</code> から <code>autoload</code> される関数の実体を探したいことがあります。
そういうときは <code>${^fpath}/cdr(N)</code> のように書けば検索できます。</p>

<!--more-->


<h2>解説</h2>

<p>まず
<code>setopt</code> の <code>RC_EXPAND_PARAM</code> が設定されていないときには <code>$fpath/cdr</code> で配列の最後だけに <code>/cdr</code> がつくので、
<code>${^spec}</code> を使ってすべてにつけるようにしています。</p>

<p>最後に <code>(N)</code> で存在するものだけ残すようにしています。</p>

<pre><code class="console 実行例">% echo ${^fpath}/cdr(N)
/usr/share/zsh/5.0.2/functions/cdr
</code></pre>

<h2>PATH で後ろに隠れているコマンドも探す</h2>

<p><code>rbenv</code> を使っていると <code>PATH</code> の後ろに <code>/usr/bin/ruby</code> が隠されるなど、
同じコマンドが <code>PATH</code> に複数存在することがあります。</p>

<p>そういうときに zsh なら <code>${^path}/ruby(N)</code> で隠れているコマンドも含めて展開できます。</p>

<pre><code class="console 実行例">% echo ${^path}/ruby(N)
/Users/kazu/.rbenv/shims/ruby /usr/bin/ruby
</code></pre>

<h2>zsh スクリプトでコマンドの存在を調べる</h2>

<p>シェルスクリプトの中で、
外部コマンドが実行できるかどうか調べるのに</p>

<pre><code>type peco &gt;/dev/null 2&gt;&amp;1
</code></pre>

<p>のように <code>type</code> コマンドで調べることがありますが、
zsh なら</p>

<pre><code>(( ${+commands[peco]} ))
</code></pre>

<p>のように <code>commands</code> という連想配列を調べるという方法が使えます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zshの機能のみで既に存在しないディレクトリをcdrのリストから削除する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-25-compact-chpwd-recent-dirs.html"/>
    <updated>2014-07-25T21:54:57+09:00</updated>
    <id>http://blog.n-z.jp/blog/compact-chpwd-recent-dirs</id>
    <content type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/syohex/20140425/1398394421" title="既に存在しないディレクトリを cdrのリストから削除する - Life is very short">既に存在しないディレクトリを cdrのリストから削除する - Life is very short</a>
をみて perl を使っていて、
ファイル名の変更にも対応していなくてポータブルではないと思ったので、
zsh の機能のみで実装してみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>zsh 5.0.2</li>
</ul>


<h2>実装</h2>

<p>cdr の実装の中の
<code>chpwd_recent_add</code>
<code>chpwd_recent_dirs</code>
<code>chpwd_recent_filehandler</code>
の中を良くみてみると
引数なしで <code>chpwd_recent_filehandler</code> を呼び出すと
<code>$reply</code> に配列でディレクトリ一覧を返してくれて、
引数を渡すとファイルに保存してくれるとわかりました。</p>

<p>そこで、その間で <code>(N)</code> を使って存在しないディレクトリを除外すれば良いということで
以下の実装になりました。
<code>emulate -L zsh</code> などは参考にした部分にあったので、そのまま使っています。</p>

<pre><code class="sh">my-compact-chpwd-recent-dirs () {
    emulate -L zsh
    setopt extendedglob
    local -aU reply
    integer history_size
    autoload -Uz chpwd_recent_filehandler
    chpwd_recent_filehandler
    history_size=$#reply
    reply=(${^reply}(N))
    (( $history_size == $#reply )) || chpwd_recent_filehandler $reply
}
</code></pre>

<p>使い方としては</p>

<ul>
<li>必要に応じて手で <code>my-compact-chpwd-recent-dirs</code> を呼び出す</li>
<li><code>.zshrc</code> から起動時に <code>my-compact-chpwd-recent-dirs</code> を実行</li>
<li><code>add-zsh-hook chpwd my-compact-chpwd-recent-dirs</code> で毎回実行</li>
</ul>


<p>などが考えられます。</p>

<p><a href="http://blog.n-z.jp/blog/2014-07-17-peco-cdr.html" title="pecoとcdrなどを組み合わせてみた">pecoとcdrなどを組み合わせてみた</a>ときに、
<code>peco</code> に渡す前のところで <code>(N-/)</code> でフィルタリングしていたので、
個人的には必要に応じて手で呼び出す使い方にしようと思っています。</p>
]]></content>
  </entry>
  
</feed>
