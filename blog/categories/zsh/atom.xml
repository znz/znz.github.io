<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: zsh | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/zsh/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-07-12T09:38:02+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GOPATHとghqの設定を変更した話とgitconfigのコマンドでの設定の話]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-05-ghq-gitconfig.html"/>
    <updated>2014-07-05T09:55:07+09:00</updated>
    <id>http://blog.n-z.jp/blog/ghq-gitconfig</id>
    <content type="html"><![CDATA[<p><a href="http://blog.kentarok.org/entry/2014/06/03/135300" title="ghqを使ったローカルリポジトリの統一的・効率的な管理について - delirious thoughts">ghqを使ったローカルリポジトリの統一的・効率的な管理について &ndash; delirious thoughts</a>
を参考にして、
go と ghq で同じディレクトリを使っていたのですが、
go で自動で追加ダウンロードされたものと
自分でダウンロードしたものが混ざるとわかりにくいと思ったので、
分けることにしました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>go version go1.3 darwin/amd64</li>
<li>git verseion 2.0.0</li>
<li>Mercurial Distributed SCM (version 3.0.1)</li>
<li>ghq version HEAD (2014-06-27 が最新コミットの状態)</li>
</ul>


<h2>go などのインストール</h2>

<p><a href="http://brew.sh/">Homebrew</a> を使って
<code>brew install go --cross-compile-common</code>
でインストールしました。</p>

<p>git と mercurial もインストールしておきました。</p>

<h2>シェルの設定 (GOPATH など)</h2>

<p>bash と zsh の共通の設定として
<a href="https://github.com/znz/dot-shell/blob/bb84c5aefc83eab5ce1841508abd726ee9db6577/profile.d/50gopath.sh" title="50gopath.sh">50gopath.sh</a>
で以下のように設定しています。</p>

<p>統合している時は go とか git とかの意味をかねて g だけにしていましたが、
今は go 専用にしています。</p>

<p>```sh 50gopath.sh</p>

<pre><code>if [ -z "${GOPATH:-}" ]; then
    export GOPATH=$HOME/g
    PATH=$PATH:$GOPATH/bin
fi
</code></pre>

<p>```</p>

<p>その後に zsh 専用の追加設定で
<a href="https://github.com/znz/dot-shell/blob/bb84c5aefc83eab5ce1841508abd726ee9db6577/profile.d/50gopath.zsh" title="50gopath.zsh">50gopath.zsh</a>
で以下のように設定しています。</p>

<p>GOPATH が PATH のように <code>:</code> 区切りで複数になる可能性を考慮してしまったのですが、
<a href="http://golang.org/doc/code.html#GOPATH" title="The GOPATH environment variable">The GOPATH environment variable</a>
をみるとそういうことはなさそうなので、
<code>${^${(s/:/)GOPATH}}</code> は単純に <code>${GOPATH}</code> でも良さそうです。</p>

<p>そして fpath に <code>_ghq</code> のパスを追加して <code>ghq</code> の引数を補完できるようにしています。</p>

<p>```sh 50gopath.zsh</p>

<pre><code>path=( $path ${^${(s/:/)GOPATH}}/bin(N) )
fpath=( $fpath ${^${(s/:/)GOPATH}}/src/*/*/ghq/zsh(N) )
</code></pre>

<p>```</p>

<h2>ghq のインストール</h2>

<p><code>go get -v github.com/motemen/ghq</code>
でインストールしました。</p>

<h3><code>https://</code> の要不要</h3>

<p><code>ghq get</code> では <code>github.com</code> から書く時は <code>https://</code> が必須なのですが、
こちらは <code>https://</code> は不要というか、
むしろ付けるとエラーになりました。</p>

<h2>.gitconfig の設定</h2>

<p><a href="https://github.com/znz/dot-shell/blob/bb84c5aefc83eab5ce1841508abd726ee9db6577/git-config.sh" title="git-config.sh">git-config.sh</a>
で <code>user.name</code> や <code>user.email</code> 以外の共通のものはまとめて設定しています。</p>

<h3>コマンドでの設定の追加削除</h3>

<p>詳細はドキュメントをみてもらうとして、まとめておくと以下のようになります。</p>

<ul>
<li>単独の設定 : <code>git config --global section.key value</code></li>
<li>複数設定 : <code>git config --global section.key value</code> の後で <code>git config --global --add section.key value</code></li>
<li>複数設定削除 : <code>git config --global --unset-all section.key</code> (ただしセクションが空になっても残る)</li>
<li>セクションごと削除 : <code>git config --global --remove-section セクション</code></li>
</ul>


<h3>ghq の設定</h3>

<p><code>ghq.root</code> を <code>--unset-all</code> だけすると git-config.sh を実行する度に
ghq セクション、つまり <code>[ghq]</code> の行が増えていってしまったので、
<code>--remove-section</code> を使いました。
他に <code>ghq</code> セクションに設定を入れていたら、
それも消えてしまうので注意してください。</p>

<p>```sh</p>

<pre><code># ghq section
git config --global --remove-section "ghq" || :
GHQ_ROOT="ghq.root"
#git config --global --unset-all "$GHQ_ROOT" || :
git config --global "$GHQ_ROOT" "$HOME/s"
git config --global --add "$GHQ_ROOT" "$HOME/g/src"
</code></pre>

<p>```</p>

<p>これで <code>ghq get</code> は <code>$HOME/s</code> に入って
<code>ghq look</code> では両方見えるようになりました。</p>

<h3>github の URL 統一の話</h3>

<p>github の URL は https に統一して、
gitconfig の設定で
push は ssh プロトコル、
pull などは git プロトコル (昔は Git Read-Only と書いてあった URL)
を使うようにしています。</p>

<p>```sh</p>

<pre><code># github upload
GITHUB_URL_PREFIX="url.git@github.com:"
git config --global --remove-section "$GITHUB_URL_PREFIX" || :
git config --global "$GITHUB_URL_PREFIX".pushInsteadOf "git://github.com/"
git config --global --add "$GITHUB_URL_PREFIX".pushInsteadOf "https://github.com/"
# gist upload
git config --global "url.git@gist.github.com:".pushInsteadOf "https://gist.github.com/$(git config github.user)/"
# github download
git config --global url."git://github.com/".insteadOf "https://github.com/"
</code></pre>

<p>```</p>

<p>詳細は
<a href="http://blog.n-z.jp/blog/2013-11-28-git-insteadof.html" title="githubでhttpsのURLを指定してもgitプロトコルやssh経由にする方法">githubでhttpsのURLを指定してもgitプロトコルやssh経由にする方法</a>
を参照してください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[シェルで glob 結果を事前に確認する方法]]></title>
    <link href="http://blog.n-z.jp/blog/2014-06-21-confirm-glob.html"/>
    <updated>2014-06-21T13:16:56+09:00</updated>
    <id>http://blog.n-z.jp/blog/confirm-glob</id>
    <content type="html"><![CDATA[<p><code>rm *~</code> のつもりで <code>rm * ~</code> (半角スペースが混ざっている) のように実行してしまうような間違いをすると危険です。</p>

<p>その対策として <code>tcsh</code> には <code>rmstar</code> という設定があったり
<code>zsh</code> には <code>RM_STAR_SILENT</code> や <code>RM_STAR_WAIT</code> という設定があるのですが、
ちゃんと展開結果を確認してからコマンドを実行する方が安全です。</p>

<p>また <code>rm</code> 以外でも展開結果を事前に確認できると便利なことが多いです。</p>

<!--more-->


<h2>展開結果の確認方法</h2>

<p><code>bash</code> や <code>zsh</code> の一般的なキー割り当てだと <code>C-x g</code> (Control を押しながら x を押して Control を離して g) で展開結果を確認できます。</p>

<p>Tab キーだとコマンドライン中に展開されてしまいますが、
<code>C-x g</code> だと確認だけ出来ます。</p>

<h3>bash の場合</h3>

<p>たとえば <code>bash</code> なら以下のように展開結果が出て、
プロンプトの行が出てきます。</p>

<p>```console bash</p>

<pre><code>$ echo /etc/host*&lt;C-x&gt;g
host.conf    hostname     hosts        hosts.allow  hosts.deny
$ echo /etc/host*
</code></pre>

<p>```</p>

<h3>zsh の場合</h3>

<p><code>zsh</code> ならプロンプトの行の下に展開結果が出てきます。</p>

<p>```console zsh</p>

<pre><code>% echo /etc/host*
/etc/host.conf    /etc/hostname     /etc/hosts        /etc/hosts.allow  /etc/hosts.deny
</code></pre>

<p>```</p>

<h2>Tab キーの動作</h2>

<p>比較のため Tab キーでの動作例も載せておきます。</p>

<h3>bash の場合</h3>

<p>実際には同じ行でしたが、最初の展開結果に置き換わりました。</p>

<p>```console bash</p>

<pre><code>$ echo /etc/host*&lt;tab&gt;
$ echo /etc/host.conf
</code></pre>

<p>```</p>

<h3>zsh の場合</h3>

<p>こちらも実際には同じ行ですが、すべての展開結果に置き換わりました。</p>

<p>```console zsh</p>

<pre><code>% echo /etc/host*&lt;tab&gt;
% echo /etc/host.conf /etc/hostname /etc/hosts /etc/hosts.allow /etc/hosts.deny
</code></pre>

<p>```</p>

<p>glob で指定しにくい一部のファイルだけ除外するなど、展開された方が便利な時は
Tab キーで展開してからコマンドラインを編集して実行することもあります。</p>

<h2>まとめ</h2>

<p>一般的な bash 環境ならどこでも使えて、
複雑な glob の展開結果の確認にも便利なので、
<code>C-x g</code> は非常にオススメです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hamlからslimへの移行でひっかかったこと]]></title>
    <link href="http://blog.n-z.jp/blog/2014-03-11-haml-to-slim.html"/>
    <updated>2014-03-11T22:39:11+09:00</updated>
    <id>http://blog.n-z.jp/blog/haml-to-slim</id>
    <content type="html"><![CDATA[<p>haml より slim の方が速いらしいという話を良く見かけるので、
haml から少しずつ slim に移行しようとして、
haml2slim で変換してみたらひっかかりまくりました。</p>

<!--more-->


<h2>インデントがない</h2>

<p>haml は生成される HTML がインデントされていてみやすいのですが、
slim は不要なスペースは入れずにコンパクトな HTML が生成されるようで、
単純に比較できなくて困りましたが、
<a href="https://github.com/slim-template/slim#default-options">https://github.com/slim-template/slim#default-options</a>
で設定できるようだったので、以下のように設定しました。</p>

<p><code>ruby config/initializers/slim.rb
if Rails.env.development?
  Slim::Engine.set_default_options pretty: true
end
</code></p>

<h2>1.9 hash style</h2>

<p><a href="https://github.com/slim-template/haml2slim/pull/23">https://github.com/slim-template/haml2slim/pull/23</a>
に pull request がでているように
haml で属性を <code>{foo: bar}</code> のように書く形式には対応していないようです。</p>

<h2>string interpolation がおかしい</h2>

<p><a href="https://github.com/slim-template/haml2slim/issues/7">https://github.com/slim-template/haml2slim/issues/7</a>
などで報告されているように <code>#{ ... }</code> という書き方の変換で問題があるようです。
<code>%tag(foo="#{bar}")</code> が <code>tag(foo="# bar ")</code> になっていて気づきました。</p>

<h2>HTML コメントの中でタグにならない</h2>

<p>```haml</p>

<pre><code>/[if lt IE 9]
  %script{src: url_for(html5shiv)}
</code></pre>

<p>```</p>

<p>のように書いていたのが</p>

<p>```text</p>

<pre><code>/![if lt IE 9]
  script src: url_for(html5shiv)
</code></pre>

<p>```</p>

<p>のように変換されてさっぱりダメだったので、</p>

<p>```text</p>

<pre><code>/[if lt IE 9]
  script(src="#{url_for(html5shiv)}")
</code></pre>

<p>```</p>

<p>または</p>

<p>```text</p>

<pre><code>/[if lt IE 9]
  script(src=url_for(html5shiv))
</code></pre>

<p>```</p>

<p>のように書き換えました。
HTML コメント <code>/!</code> の中だとタグが使えない (そのまま文字列としてコメントの中に入る) ようなので、
IE コンディショナルコメント <code>/[...]</code> を使う必要があるようです。</p>

<h2>エラーメッセージがわかりにくい</h2>

<p>書き換え途中で、属性値をくくる <code>""</code> を忘れると
エラーメッセージが
<code>syntax error, unexpected ';'</code>
としかでないので原因がわかりにくくて困りました。</p>

<p>他のところでも ruby のエラーメッセージそのままなので、
閉じ忘れ系は原因の行と離れたところでエラーになって、
行番号もあまり当てにならなくて不便です。</p>

<h2>真偽値属性の属性値が省略できない</h2>

<p>haml だと <code>%div(data-pjax-container)</code> で <code>&lt;div data-pjax-container&gt;</code> に変換できるのに、
slim だと <code>div(data-pjax-container)</code> が <code>&lt;div data-pjax-container=""&gt;</code> になってしまって、
<code>=""</code> が余計です。</p>

<p><a href="https://github.com/slim-template/slim/issues/480">Render boolean attributes without value in html5</a>
によると
<code>:format</code> を <code>:html</code> にすれば良いということで</p>

<p><code>ruby config/initializers/slim.rb
Slim::Engine.set_default_options format: :html
</code></p>

<p>と設定してみても slim 2.0.2 だと変化がありませんでした。</p>

<p>まだリリースされていないバージョンを使う必要があるようで、
<code>Gemfile</code> で <code>gem 'slim', github: 'slim-template/slim'</code> と指定して
試そうとしたのですが、
rails 3.2.17 との組み合わせは tilt の要求バージョンの解決が
出来なくて使えませんでした。</p>

<p>実験のため slim 専用の Gemfile を用意して以下のように試したところ、
slim と temple の両方をまだリリースされていないバージョンにすると
使えることが確認できました。</p>

<p>```console
% mkdir /tmp/slim-test
% cd /tmp/slim-test
% bundle init
% echo &lsquo;gem &ldquo;slim&rdquo;, github: &ldquo;slim-template/slim&rdquo;&rsquo; >> Gemfile
% echo &lsquo;gem &ldquo;temple&rdquo;, github: &ldquo;judofyr/temple&rdquo;&rsquo; >> Gemfile
% bundle
% echo &lsquo;div(ng-app)&rsquo; | bundle exec slimrb</p>

<div ng-app=""></div>


<p>% echo &lsquo;div(ng-app)&rsquo; | bundle exec slimrb -o format=:html</p>

<div ng-app></div>


<p>```</p>

<p>今のところ、 <code>rack-pjax</code> の使用は止めていて、
 <code>=""</code> がつく挙動で直接困ることはなさそうなので、
この問題は保留することにしました。</p>

<h2>javascript や css の埋め込み</h2>

<p>```haml</p>

<pre><code>:javascript
  window.current_user_id = #{current_user.id.to_i}
</code></pre>

<p>```</p>

<p>のように書いていたら、</p>

<p>```text</p>

<pre><code>javascript:
  | window.current_user_id = #{current_user.id.to_i}
</code></pre>

<p>```</p>

<p>と変換されて <code>|</code> がそのまま <code>script</code> の中身に付いてしまったので、
削除しました。</p>

<p>```text</p>

<pre><code>javascript:
  window.current_user_id = #{current_user.id.to_i}
</code></pre>

<p>```</p>

<p><code>:css</code> から <code>css:</code> の変換でも同様でした。
CSS の場合は行頭が記号だと <code>|</code> がついていないこともありました。</p>

<h2>空白の有無の問題</h2>

<p>```haml</p>

<pre><code>        = link_to home_path, class: 'brand' do
          = image_tag("brand.png", alt: "", size: "35x35")
          = base_title
</code></pre>

<p>```</p>

<p>がそのまま slim になっていて、基本的には問題なかったのですが、
haml と違って slim だとタグとタイトルの間に空白が入らなくなってしまって、
見た目が変わってしまっていたので、
<code>'</code> だけの行を追加して空白が入るようにしました。</p>

<p>```text</p>

<pre><code>        = link_to home_path, class: 'brand' do
          = image_tag("brand.png", alt: "", size: "35x35")
          '
          = base_title
</code></pre>

<p>```</p>

<h2>end が抜けるバグで SyntaxError</h2>

<p><code>syntax error, unexpected keyword_ensure, expecting keyword_end</code>
になるので原因を調べてみたところ、
インデントの中の最初がコメントだと、
そのブロックの <code>end</code> が抜けてしまうようです。</p>

<p>```console
% echo $&lsquo;&ndash; if true\n  / comment&rsquo; | bundle exec slimrb -e
&lt;% if true</p>

<p> %>
% echo $&lsquo;&ndash; if true\n  |&rsquo; | bundle exec slimrb -e
&lt;% if true</p>

<p>end %>
% echo $&lsquo;&ndash; articles.each do |a|\n  / comment&rsquo; | bundle exec slimrb -e
&lt;% articles.each do |a|</p>

<p> %>
% echo $&lsquo;&ndash; articles.each do |a|\n  | text&rsquo; | bundle exec slimrb -e
&lt;% articles.each do |a|
 %>text&lt;%
%>&lt;% end %>
% echo $&lsquo;&ndash; articles.each do |a|\n  / comment\n/ more comment&rsquo; | bundle exec slimrb -e
&lt;% articles.each do |a|</p>

<p> %>
% echo $&lsquo;&ndash; articles.each do |a|\n  / comment\n| text\n/ more comment&rsquo; | bundle exec slimrb -e
&lt;% articles.each do |a|</p>

<p> %>text&lt;%
%>&lt;%
%>
% echo $&lsquo;&ndash; articles.each do |a|\n  / comment\n| text\n&rsquo; | bundle exec slimrb -e
&lt;% articles.each do |a|</p>

<p> %>text&lt;%
%>
```</p>

<p>この件は <a href="https://github.com/slim-template/slim/issues/485">https://github.com/slim-template/slim/issues/485</a> で報告してみました。</p>

<h2>ファイル名の指定が面倒</h2>

<p>これは slim や haml2slim の問題ではないのですが、
zsh で久しぶりに compctl を使って</p>

<pre><code>compctl -g '*.haml' + -g '*(-/)' haml2slim
</code></pre>

<p>と設定しましたが、ちゃんと compsys を使った方が良いと思い直して、</p>

<pre><code>compdef '_files -g "*.haml"' haml2slim
</code></pre>

<p>と設定しました。</p>

<h2>感想</h2>

<p>シンプルとか入力が楽とかいう主観的なものは個人的には同意できなくて利点とは思えないので、
速いという客観的な理由で slim への移行をしているのですが、
haml2slim の出来が悪かったり、
空白の扱いの違いで同じようなソースからでも最終的な見た目が違うものが出来たりして、
移行は思ったより大変な印象を受けました。</p>

<p>はまりどころさえわかっていれば、そこを注意して haml2slim での変換結果を修正していけば良いので、途中からはどんどん変換していけるようになりました。
(まだ一部しか終わっていませんが。)</p>

<p>それなりの数の変換をしてみた結果、最初から slim で書くようにすれば haml と大きな違いはなさそうにも感じました。</p>

<p><code>end</code> 抜けなどの問題が起きたことから、
haml と比べていろんな書き方で使われていなさそうということで、
まだ安定してなさそうと感じました。</p>

<p>また属性値なしの <code>&lt;div ng-app&gt;</code> のような出力に対応しているリリースがまだないなど、
融通が利かない点があって問題が起きそうな可能性がありそうだと感じました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopressをアップデートしてisolateを使い始めた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-21-update-octopress.html"/>
    <updated>2013-12-21T22:43:36+09:00</updated>
    <id>http://blog.n-z.jp/blog/update-octopress</id>
    <content type="html"><![CDATA[<p>気が向いたので、また octopress の更新をしてみました。
そして <code>rake isolate</code> を使い始めました。</p>

<p>記事中では <code>git fetch --prune</code> とか、
zsh の <code>(mm-1)</code> を使っているので、
カテゴリに <code>git</code> と <code>zsh</code> も付けています。</p>

<!--more-->


<h2>octopress のアップデート</h2>

<p><code>git fetch</code> します。
最近は <code>--prune</code> を付けてリモートで削除されたブランチは手元でも削除されるようにしていることが多いので、
今回も付けています。</p>

<p><code>console
% git remote -v
octopress   git://github.com/imathis/octopress.git (fetch)
octopress   git@github.com:imathis/octopress.git (push)
origin  git@github.com:znz/znz.github.io (fetch)
origin  git@github.com:znz/znz.github.io (push)
origin  ssh://git@bitbucket.org/znz/blog.n-z.jp.git (push)
% git fetch --prune octopress
remote: Counting objects: 33, done.
remote: Compressing objects: 100% (18/18), done.
remote: Total 24 (delta 16), reused 14 (delta 6)
Unpacking objects: 100% (24/24), done.
From git://github.com/imathis/octopress
 * [new branch]      jekyll-1-3 -&gt; octopress/jekyll-1-3
   64ba603..78defff  master     -&gt; octopress/master
%
</code></p>

<p>差分を確認してからマージしました。</p>

<p><code>console
% git diff source...octopress/master
% git merge octopress/master
Auto-merging Rakefile
Merge made by the 'recursive' strategy.
 .themes/classic/sass/base/_theme.scss                     |  2 +-
 .themes/classic/source/_includes/archive_post.html        |  2 +-
 .themes/classic/source/_includes/custom/category_feed.xml |  4 +-
 .themes/classic/source/_includes/disqus.html              |  2 +-
 .themes/classic/source/_includes/head.html                |  4 +-
 .themes/classic/source/atom.xml                           |  4 +-
 README.markdown                                           |  2 +-
 Rakefile                                                  |  6 +--
 plugins/category_generator.rb                             |  3 +-
 plugins/code_block.rb                                     |  2 +-
 plugins/date.rb                                           | 53 +++++++++----------------
 plugins/gist_tag.rb                                       |  8 +++-
 plugins/include_code.rb                                   |  2 +-
 plugins/jsfiddle.rb                                       |  2 +-
 14 files changed, 41 insertions(+), 55 deletions(-)
</code></p>

<p>themes も更新されているので、
<a href="http://octopress.org/docs/updating/">Updating Octopress</a>
の手順に従ってアップデートしました。</p>

<p><code>console
 % bundle install
 Using rake (0.9.2.2)
 Using RedCloth (4.2.9)
 Using chunky_png (1.2.5)
 Using fast-stemmer (1.0.1)
 Using classifier (1.3.3)
 Using fssm (0.2.9)
 Using sass (3.2.9)
 Using compass (0.12.2)
 Using directory_watcher (1.4.1)
 Using haml (3.1.7)
 Using kramdown (0.13.8)
 Using liquid (2.3.0)
 Using syntax (1.0.0)
 Using maruku (0.6.1)
 Using posix-spawn (0.3.6)
 Using yajl-ruby (1.1.0)
 Using pygments.rb (0.3.4)
 Using jekyll (0.12.0)
 Using rack (1.5.2)
 Using rack-protection (1.5.0)
 Using rb-fsevent (0.9.1)
 Using rdiscount (2.0.7.3)
 Using rubypants (0.2.0)
 Using sass-globbing (1.0.0)
 Using tilt (1.3.7)
 Using sinatra (1.4.2)
 Using stringex (1.4.0)
 Using bundler (1.3.5)
 Your bundle is complete!
 Use `bundle show [gemname]` to see where a bundled gem is installed.
 % bundle exec rake update_source
 mkdir source.old
 cp -r source/. source.old
 ## Copied source into source.old/
 cp -r --remove-destination .themes/classic/source/. source
 cp -r --remove-destination source.old/_includes/custom/. source/_includes/custom/
 cp source.old/favicon.png source
 ## Updated source ##
 % bundle exec rake update_style
 mv sass sass.old
 ## Moved styles into sass.old/
 cp -r .themes/classic/sass/ sass
 cp -r sass/custom/. sass.old/custom
 ## Updated Sass ##
 %
</code></p>

<p><code>git diff</code> で確認するとローカルでの変更が消えてしまっていたので、
<code>git checkout ファイルパス</code> で戻したり、
再適用したりしてからコミットしました。</p>

<h2>rake isolate</h2>

<p><a href="http://rcmdnk.github.io/blog/2013/10/07/blog-octopress/">Octopressでチェック用に高速にgenerate/previewする</a>
で紹介されていた
<code>rake isolate[filename]</code>
を使い始めてみました。</p>

<h3>ファイル名の指定を省略する</h3>

<p>最終更新時刻でソートして最新だけ、という絞り込みをしたかったのですが、
zsh の機能だけでうまく表現できなかったので、
<a href="http://qiita.com/mollifier/items/1c4a4930a89aa75e5ced">zsh で find を使わずに簡単にファイルを絞り込む</a>
を参考にして1分以内に変更されたファイルだけという絞り込みで妥協することにしました。</p>

<p><code>console
 bundle exec rake "isolate[$(echo source/_posts/*.markdown(mm-1))]"
 bundle exec rake preview
 bundle exec rake integrate
</code></p>

<h3>rake integrate 忘れを防ぐ</h3>

<p>isolate した状態で deploy する事故を防ぐために
<a href="https://github.com/imathis/octopress/pull/1444">check stash dir before deploy</a>
という変更を入れてから使うようにしてみました。</p>

<p>Rakefile をみてみると</p>

<p><code>ruby Rakefile
desc "Generate website and deploy"
task :gen_deploy =&gt; [:integrate, :generate, :deploy] do
end
</code></p>

<p>となっているので、
<code>bundle exec rake deploy</code> ではなく
<code>bundle exec rake gen_deploy</code> を使うようにしていれば
大丈夫そうですが、
念のためチェックした方が安全だと思いました。</p>

<p>octopress の fork で作成したこの変更は</p>

<p><code>console
git pull git@github.com:znz/octopress.git check-stash-before-deploy
</code></p>

<p>で手元の source ブランチに取り込みました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zshのPATHの自動重複削除や余計なPATHの削除]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-12-zsh-cleanup-path.html"/>
    <updated>2013-12-12T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/zsh-cleanup-path</id>
    <content type="html"><![CDATA[<p>シェルの中から <code>exec zsh</code> をしたり、
GNU screen や tmux を経由して間接的にシェルの中でシェルを開いたりするときに
何も考えずに <code>PATH</code> を追加していくと
どんどん長くなっていってしまうと思います。</p>

<p><code>bash</code> などでも使えるように汎用的にしようとすると自前で頑張らないといけないのですが、
<code>zsh</code> では <code>zsh</code> 自体の機能で簡単に重複を防げます。</p>

<p>また、パスに望ましくないものが入っていた時に削除する方法も紹介します。</p>

<p>この投稿は
<a href="http://qiita.com/advent-calendar/2013/zsh">zsh Advent Calendar 2013</a>
の12日目の記事です。</p>

<!--more-->


<h2>重複削除</h2>

<p>重複を削除するには</p>

<p><code>
typeset -U path PATH
</code></p>

<p>で <code>path</code> と <code>PATH</code> に unique という属性を付けて、
重複した値の最初だけ残すようにします。</p>

<p>ちゃんと設定できていれば、パラメーター展開の <code>t</code>
で調べた時に <code>unique</code> が付いています。</p>

<p><code>
% echo ${(t)path}
array-unique-special
% echo ${(t)PATH}
scalar-export-unique-special
</code></p>

<h2>望ましくないパスの削除</h2>

<p>ここでは 3 種類のパスを望ましくないものとして
除外するようにしました。</p>

<ol>
<li><code>NULL_GLOB</code> の <code>N</code> を使って存在しないディレクトリを除外</li>
<li><code>-/</code> を使ってシンボリックリンクの場合のリンク先もチェックした上でディレクトリのみ残す</li>
<li><code>^W</code> で world-writable という実行ファイルのパスとしては危険なパーミッションになっているディレクトリを除外</li>
</ol>


<p>Glob Qualifiers なので <code>PATH</code> ではなく <code>path</code> を使ってフィルタリングしています。</p>

<p>```
path=(</p>

<pre><code># allow directories only (-/)
# reject world-writable directories (^W)
$path(N-/^W)
</code></pre>

<p>)
```</p>

<h2>まとめ</h2>

<p>ここでは <code>zsh</code> の機能を活用してコマンド探索パス <code>PATH</code> をきれいにする方法を紹介しました。</p>

<p>これを応用して <code>fpath</code> などにも適用してみると良いかもしれません。</p>
]]></content>
  </entry>
  
</feed>
