<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: zsh | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/zsh/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-11-06T00:04:43+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ターミナルでの文字幅を調べる]]></title>
    <link href="http://blog.n-z.jp/blog/2014-10-07-char-width-in-terminal.html"/>
    <updated>2014-10-07T20:10:20+09:00</updated>
    <id>http://blog.n-z.jp/blog/char-width-in-terminal</id>
    <content type="html"><![CDATA[<p><a href="http://uwabami.junkhub.org/log/20141007.html#p01" title="マルチバイト文字列の幅を 2 としてカウントする">マルチバイト文字列の幅を 2 としてカウントする</a>
という話を見て、
端末に実際の幅を問い合わせてみればいいのではないかと思って試してみました。</p>

<!--more-->


<h2>実行例</h2>

<p>こんな感じでできました。
zsh と bash で動作確認しています。
端末は
<a href="http://iterm2.com/" title="iTerm2">iTerm2</a>
で動作確認しています。</p>

<pre><code>% echo -ne '日本語\e[6n'; read -d';' a; read -dR a; printf '\e[M\r'; echo $[a-1]
6
% echo -ne 'abc日本語\e[6n'; read -d';' a; read -dR a; printf '\e[M\r'; echo $[a-1]
9
</code></pre>

<h2>スクリプト化</h2>

<p>実行ファイルにするならこんな感じになります。</p>

<pre><code>#!/bin/bash
echo -ne "$*"'\e[6n'; read -d';' a; read -dR a; printf '\e[M\r'; echo $[a-1]
</code></pre>

<h2>解説</h2>

<p>実装としては実際に表示して、カーソル位置を端末に問い合わせて、表示を消去して、桁を取り出して 1 引いています。</p>

<p>エスケープシーケンスなどに関しては、
<a href="http://ttssh2.sourceforge.jp/manual/ja/about/ctrlseq.html" title="対応制御シーケンス">対応制御シーケンス</a>
を参考にしてください。</p>

<ol>
<li>まず文字列を表示しています。</li>
<li><code>CSI Ps n</code> (DSR) を使ってカーソルの位置を報告させています。</li>
<li><code>CSI r ; c R</code> という応答のうち、 <code>;</code> までを捨てて、 <code>c</code> だけ変数 <code>a</code> に取り込んでいます。</li>
<li><code>CSI Ps M</code> (DL) でカーソル行に表示された内容を消去しています。</li>
<li><code>CR</code> で行頭にカーソルを戻しています。</li>
<li>カーソル位置なので 文字数+1 になっているので、1 引いて表示しています。</li>
</ol>


<h2>追記</h2>

<p>実装の説明でわかると思いますが、1行を超える長さは調べられません。がんばるなら適当に区切って文字ごととかで調べてください。</p>

<p>実行開始時にカーソルは行頭にしておく必要があり、実行後にカーソル行は消えます。
スクリプト中に入れるには使いにくいと思います。</p>

<p>半分ネタなので、あんまりがんばっていません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zshでfpathからwhichのように検索する話など]]></title>
    <link href="http://blog.n-z.jp/blog/2014-08-12-zsh-which-fpath.html"/>
    <updated>2014-08-12T23:08:30+09:00</updated>
    <id>http://blog.n-z.jp/blog/zsh-which-fpath</id>
    <content type="html"><![CDATA[<p>zsh で <code>PATH</code> から <code>which</code> コマンドや <code>type</code> コマンドで実行ファイルを検索するように <code>fpath</code> から <code>autoload</code> される関数の実体を探したいことがあります。
そういうときは <code>${^fpath}/cdr(N)</code> のように書けば検索できます。</p>

<!--more-->


<h2>解説</h2>

<p>まず
<code>setopt</code> の <code>RC_EXPAND_PARAM</code> が設定されていないときには <code>$fpath/cdr</code> で配列の最後だけに <code>/cdr</code> がつくので、
<code>${^spec}</code> を使ってすべてにつけるようにしています。</p>

<p>最後に <code>(N)</code> で存在するものだけ残すようにしています。</p>

<pre><code class="console 実行例">% echo ${^fpath}/cdr(N)
/usr/share/zsh/5.0.2/functions/cdr
</code></pre>

<h2>PATH で後ろに隠れているコマンドも探す</h2>

<p><code>rbenv</code> を使っていると <code>PATH</code> の後ろに <code>/usr/bin/ruby</code> が隠されるなど、
同じコマンドが <code>PATH</code> に複数存在することがあります。</p>

<p>そういうときに zsh なら <code>${^path}/ruby(N)</code> で隠れているコマンドも含めて展開できます。</p>

<pre><code class="console 実行例">% echo ${^path}/ruby(N)
/Users/kazu/.rbenv/shims/ruby /usr/bin/ruby
</code></pre>

<h2>zsh スクリプトでコマンドの存在を調べる</h2>

<p>シェルスクリプトの中で、
外部コマンドが実行できるかどうか調べるのに</p>

<pre><code>type peco &gt;/dev/null 2&gt;&amp;1
</code></pre>

<p>のように <code>type</code> コマンドで調べることがありますが、
zsh なら</p>

<pre><code>(( ${+commands[peco]} ))
</code></pre>

<p>のように <code>commands</code> という連想配列を調べるという方法が使えます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zshの機能のみで既に存在しないディレクトリをcdrのリストから削除する]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-25-compact-chpwd-recent-dirs.html"/>
    <updated>2014-07-25T21:54:57+09:00</updated>
    <id>http://blog.n-z.jp/blog/compact-chpwd-recent-dirs</id>
    <content type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/syohex/20140425/1398394421" title="既に存在しないディレクトリを cdrのリストから削除する - Life is very short">既に存在しないディレクトリを cdrのリストから削除する - Life is very short</a>
をみて perl を使っていて、
ファイル名の変更にも対応していなくてポータブルではないと思ったので、
zsh の機能のみで実装してみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>zsh 5.0.2</li>
</ul>


<h2>実装</h2>

<p>cdr の実装の中の
<code>chpwd_recent_add</code>
<code>chpwd_recent_dirs</code>
<code>chpwd_recent_filehandler</code>
の中を良くみてみると
引数なしで <code>chpwd_recent_filehandler</code> を呼び出すと
<code>$reply</code> に配列でディレクトリ一覧を返してくれて、
引数を渡すとファイルに保存してくれるとわかりました。</p>

<p>そこで、その間で <code>(N)</code> を使って存在しないディレクトリを除外すれば良いということで
以下の実装になりました。
<code>emulate -L zsh</code> などは参考にした部分にあったので、そのまま使っています。</p>

<pre><code class="sh">my-compact-chpwd-recent-dirs () {
    emulate -L zsh
    setopt extendedglob
    local -aU reply
    integer history_size
    autoload -Uz chpwd_recent_filehandler
    chpwd_recent_filehandler
    history_size=$#reply
    reply=(${^reply}(N))
    (( $history_size == $#reply )) || chpwd_recent_filehandler $reply
}
</code></pre>

<p>使い方としては</p>

<ul>
<li>必要に応じて手で <code>my-compact-chpwd-recent-dirs</code> を呼び出す</li>
<li><code>.zshrc</code> から起動時に <code>my-compact-chpwd-recent-dirs</code> を実行</li>
<li><code>add-zsh-hook chpwd my-compact-chpwd-recent-dirs</code> で毎回実行</li>
</ul>


<p>などが考えられます。</p>

<p><a href="http://blog.n-z.jp/blog/2014-07-17-peco-cdr.html" title="pecoとcdrなどを組み合わせてみた">pecoとcdrなどを組み合わせてみた</a>ときに、
<code>peco</code> に渡す前のところで <code>(N-/)</code> でフィルタリングしていたので、
個人的には必要に応じて手で呼び出す使い方にしようと思っています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pecoとcdrなどを組み合わせてみた]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-17-peco-cdr.html"/>
    <updated>2014-07-17T23:30:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/peco-cdr</id>
    <content type="html"><![CDATA[<p>自作の cd 履歴管理が <code>~/VirtualBox VMs</code> という空白入りのディレクトリ名の扱いに対応していなかったので、
せっかくなので独自で頑張るのは止めて、
cdr の履歴を使うことにしました。</p>

<p>さらに選択部分は peco と組み合わせて <code>ghq</code> や <code>cdpath</code> にも対応してみました。</p>

<!--more-->


<h2>動作確認バージョン</h2>

<ul>
<li>peco 0.2.0</li>
<li>zsh 5.0.2</li>
</ul>


<h2>peco のインストール</h2>

<p>Homebrew でインストールするなら <code>brew install peco/peco/peco</code> か</p>

<pre><code>brew tap peco/peco
brew install peco
</code></pre>

<p>です。</p>

<p>アンインストールは</p>

<pre><code>brew uninstall peco
brew untap peco/peco
</code></pre>

<p>です。</p>

<p><code>go get</code> でインストールするなら <code>GOPATH</code> を設定して
<code>go get github.com/peco/peco/cmd/peco</code>
です。
アンインストールは <code>GOPATH</code> にあるインストールされたファイルを消すしかなさそうです。</p>

<h2>peco の設定</h2>

<p><a href="http://shibayu36.hatenablog.com/entry/2014/06/27/223538" title="pecoを使い始めた - $shibayu36-&gt;blog;">pecoを使い始めた - $shibayu36-&gt;blog;</a>
はいろいろキーバインドを設定していますが、
デフォルトのまま使っています。</p>

<h2>zsh の設定</h2>

<p><a href="https://github.com/znz/dot-shell/blob/4ee27990e8de4b3c089442c0d997ad3fc836b96a/profile.d/50peco.zsh" title="50peco.zsh">50peco.zsh</a>
の <code>peco-go-to-dir</code> のように設定して <code>M-g</code> で使えるようにしました。</p>

<p>以下に該当部分を抜き出しておきます。</p>

<pre><code class="sh 50peco.zsh">if (( ${+commands[peco]} )); then
  peco-go-to-dir () {
    local line
    local selected="$(
      {
        (
          autoload -Uz chpwd_recent_filehandler
          chpwd_recent_filehandler &amp;&amp; for line in $reply; do
            if [[ -d "$line" ]]; then
              echo "$line"
            fi
          done
        )
        ghq list --full-path
        for line in *(-/) ${^cdpath}/*(N-/); do echo "$line"; done | sort -u
      } | peco --query "$LBUFFER"
    )"
    if [ -n "$selected" ]; then
      BUFFER="cd ${(q)selected}"
      zle accept-line
    fi
    zle clear-screen
  }
  zle -N peco-go-to-dir
  bindkey '^[g' peco-go-to-dir
fi
</code></pre>

<p>まず <code>(( ${+commands[peco]} ))</code> で <code>peco</code> コマンドの存在チェックをしています。
zsh スクリプトの中では <code>type peco &gt;/dev/null 2&gt;&amp;1</code> のようなチェック方法の代わりに使えます。</p>

<p>次にカレントディレクトリと <code>$cdpath</code> の処理に使っている <code>line</code> をローカル変数にしています。</p>

<p>次がメイン部分で</p>

<ol>
<li><code>cdr</code> のディレクトリ一覧</li>
<li><code>ghq</code> のディレクトリ一覧</li>
<li>カレントディレクトリと <code>$cdpath</code> の中のディレクトリ一覧</li>
</ol>


<p>を <code>peco</code> に渡して選択しています。
順番や何を選択肢に入れるかなどは好みで調節してください。</p>

<p>最後に参考にした記事と同じように、選択されていたら <code>cd</code> コマンドを実行しています。</p>

<h2>空白ディレクトリ対応</h2>

<p><code>selected=$()</code> を <code>selected="$()"</code> に変更するなど適切にクオートした上で、
さらに最後の <code>cd</code> コマンドに渡す部分では <code>q</code> という Parameter Expansion Flag (<code>${(q)var}</code> の部分) を使って
適切にエスケープしています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GOPATHとghqの設定を変更した話とgitconfigのコマンドでの設定の話]]></title>
    <link href="http://blog.n-z.jp/blog/2014-07-05-ghq-gitconfig.html"/>
    <updated>2014-07-05T09:55:07+09:00</updated>
    <id>http://blog.n-z.jp/blog/ghq-gitconfig</id>
    <content type="html"><![CDATA[<p><a href="http://blog.kentarok.org/entry/2014/06/03/135300" title="ghqを使ったローカルリポジトリの統一的・効率的な管理について - delirious thoughts">ghqを使ったローカルリポジトリの統一的・効率的な管理について - delirious thoughts</a>
を参考にして、
go と ghq で同じディレクトリを使っていたのですが、
go で自動で追加ダウンロードされたものと
自分でダウンロードしたものが混ざるとわかりにくいと思ったので、
分けることにしました。</p>

<!--more-->


<h2>対象バージョン</h2>

<ul>
<li>go version go1.3 darwin/amd64</li>
<li>git verseion 2.0.0</li>
<li>Mercurial Distributed SCM (version 3.0.1)</li>
<li>ghq version HEAD (2014-06-27 が最新コミットの状態)</li>
</ul>


<h2>go などのインストール</h2>

<p><a href="http://brew.sh/">Homebrew</a> を使って
<code>brew install go --cross-compile-common</code>
でインストールしました。</p>

<p>git と mercurial もインストールしておきました。</p>

<h2>シェルの設定 (GOPATH など)</h2>

<p>bash と zsh の共通の設定として
<a href="https://github.com/znz/dot-shell/blob/bb84c5aefc83eab5ce1841508abd726ee9db6577/profile.d/50gopath.sh" title="50gopath.sh">50gopath.sh</a>
で以下のように設定しています。</p>

<p>統合している時は go とか git とかの意味をかねて g だけにしていましたが、
今は go 専用にしています。</p>

<pre><code class="sh 50gopath.sh">    if [ -z "${GOPATH:-}" ]; then
        export GOPATH=$HOME/g
        PATH=$PATH:$GOPATH/bin
    fi
</code></pre>

<p>その後に zsh 専用の追加設定で
<a href="https://github.com/znz/dot-shell/blob/bb84c5aefc83eab5ce1841508abd726ee9db6577/profile.d/50gopath.zsh" title="50gopath.zsh">50gopath.zsh</a>
で以下のように設定しています。</p>

<p>GOPATH が PATH のように <code>:</code> 区切りで複数になる可能性を考慮してしまったのですが、
<a href="http://golang.org/doc/code.html#GOPATH" title="The GOPATH environment variable">The GOPATH environment variable</a>
をみるとそういうことはなさそうなので、
<code>${^${(s/:/)GOPATH}}</code> は単純に <code>${GOPATH}</code> でも良さそうです。</p>

<p>そして fpath に <code>_ghq</code> のパスを追加して <code>ghq</code> の引数を補完できるようにしています。</p>

<pre><code class="sh 50gopath.zsh">    path=( $path ${^${(s/:/)GOPATH}}/bin(N) )
    fpath=( $fpath ${^${(s/:/)GOPATH}}/src/*/*/ghq/zsh(N) )
</code></pre>

<h2>ghq のインストール</h2>

<p><code>go get -v github.com/motemen/ghq</code>
でインストールしました。</p>

<h3><code>https://</code> の要不要</h3>

<p><code>ghq get</code> では <code>github.com</code> から書く時は <code>https://</code> が必須なのですが、
こちらは <code>https://</code> は不要というか、
むしろ付けるとエラーになりました。</p>

<h2>.gitconfig の設定</h2>

<p><a href="https://github.com/znz/dot-shell/blob/bb84c5aefc83eab5ce1841508abd726ee9db6577/git-config.sh" title="git-config.sh">git-config.sh</a>
で <code>user.name</code> や <code>user.email</code> 以外の共通のものはまとめて設定しています。</p>

<h3>コマンドでの設定の追加削除</h3>

<p>詳細はドキュメントをみてもらうとして、まとめておくと以下のようになります。</p>

<ul>
<li>単独の設定 : <code>git config --global section.key value</code></li>
<li>複数設定 : <code>git config --global section.key value</code> の後で <code>git config --global --add section.key value</code></li>
<li>複数設定削除 : <code>git config --global --unset-all section.key</code> (ただしセクションが空になっても残る)</li>
<li>セクションごと削除 : <code>git config --global --remove-section セクション</code></li>
</ul>


<h3>ghq の設定</h3>

<p><code>ghq.root</code> を <code>--unset-all</code> だけすると git-config.sh を実行する度に
ghq セクション、つまり <code>[ghq]</code> の行が増えていってしまったので、
<code>--remove-section</code> を使いました。
他に <code>ghq</code> セクションに設定を入れていたら、
それも消えてしまうので注意してください。</p>

<pre><code class="sh">    # ghq section
    git config --global --remove-section "ghq" || :
    GHQ_ROOT="ghq.root"
    #git config --global --unset-all "$GHQ_ROOT" || :
    git config --global "$GHQ_ROOT" "$HOME/s"
    git config --global --add "$GHQ_ROOT" "$HOME/g/src"
</code></pre>

<p>これで <code>ghq get</code> は <code>$HOME/s</code> に入って
<code>ghq look</code> では両方見えるようになりました。</p>

<h3>github の URL 統一の話</h3>

<p>github の URL は https に統一して、
gitconfig の設定で
push は ssh プロトコル、
pull などは git プロトコル (昔は Git Read-Only と書いてあった URL)
を使うようにしています。</p>

<pre><code class="sh">    # github upload
    GITHUB_URL_PREFIX="url.git@github.com:"
    git config --global --remove-section "$GITHUB_URL_PREFIX" || :
    git config --global "$GITHUB_URL_PREFIX".pushInsteadOf "git://github.com/"
    git config --global --add "$GITHUB_URL_PREFIX".pushInsteadOf "https://github.com/"
    # gist upload
    git config --global "url.git@gist.github.com:".pushInsteadOf "https://gist.github.com/$(git config github.user)/"
    # github download
    git config --global url."git://github.com/".insteadOf "https://github.com/"
</code></pre>

<p>詳細は
<a href="http://blog.n-z.jp/blog/2013-11-28-git-insteadof.html" title="githubでhttpsのURLを指定してもgitプロトコルやssh経由にする方法">githubでhttpsのURLを指定してもgitプロトコルやssh経由にする方法</a>
を参照してください。</p>
]]></content>
  </entry>
  
</feed>
