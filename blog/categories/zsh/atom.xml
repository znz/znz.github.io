<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: zsh | @znz blog]]></title>
  <link href="http://blog.n-z.jp/blog/categories/zsh/atom.xml" rel="self"/>
  <link href="http://blog.n-z.jp/"/>
  <updated>2014-04-05T23:38:49+09:00</updated>
  <id>http://blog.n-z.jp/</id>
  <author>
    <name><![CDATA[Kazuhiro NISHIYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hamlからslimへの移行でひっかかったこと]]></title>
    <link href="http://blog.n-z.jp/blog/2014-03-11-haml-to-slim.html"/>
    <updated>2014-03-11T22:39:11+09:00</updated>
    <id>http://blog.n-z.jp/blog/haml-to-slim</id>
    <content type="html"><![CDATA[<p>haml より slim の方が速いらしいという話を良く見かけるので、
haml から少しずつ slim に移行しようとして、
haml2slim で変換してみたらひっかかりまくりました。</p>

<!--more-->


<h2>インデントがない</h2>

<p>haml は生成される HTML がインデントされていてみやすいのですが、
slim は不要なスペースは入れずにコンパクトな HTML が生成されるようで、
単純に比較できなくて困りましたが、
<a href="https://github.com/slim-template/slim#default-options">https://github.com/slim-template/slim#default-options</a>
で設定できるようだったので、以下のように設定しました。</p>

<p><code>ruby config/initializers/slim.rb
if Rails.env.development?
  Slim::Engine.set_default_options pretty: true
end
</code></p>

<h2>1.9 hash style</h2>

<p><a href="https://github.com/slim-template/haml2slim/pull/23">https://github.com/slim-template/haml2slim/pull/23</a>
に pull request がでているように
haml で属性を <code>{foo: bar}</code> のように書く形式には対応していないようです。</p>

<h2>string interpolation がおかしい</h2>

<p><a href="https://github.com/slim-template/haml2slim/issues/7">https://github.com/slim-template/haml2slim/issues/7</a>
などで報告されているように <code>#{ ... }</code> という書き方の変換で問題があるようです。
<code>%tag(foo="#{bar}")</code> が <code>tag(foo="# bar ")</code> になっていて気づきました。</p>

<h2>HTML コメントの中でタグにならない</h2>

<p>```haml</p>

<pre><code>/[if lt IE 9]
  %script{src: url_for(html5shiv)}
</code></pre>

<p>```</p>

<p>のように書いていたのが</p>

<p>```text</p>

<pre><code>/![if lt IE 9]
  script src: url_for(html5shiv)
</code></pre>

<p>```</p>

<p>のように変換されてさっぱりダメだったので、</p>

<p>```text</p>

<pre><code>/[if lt IE 9]
  script(src="#{url_for(html5shiv)}")
</code></pre>

<p>```</p>

<p>または</p>

<p>```text</p>

<pre><code>/[if lt IE 9]
  script(src=url_for(html5shiv))
</code></pre>

<p>```</p>

<p>のように書き換えました。
HTML コメント <code>/!</code> の中だとタグが使えない (そのまま文字列としてコメントの中に入る) ようなので、
IE コンディショナルコメント <code>/[...]</code> を使う必要があるようです。</p>

<h2>エラーメッセージがわかりにくい</h2>

<p>書き換え途中で、属性値をくくる <code>""</code> を忘れると
エラーメッセージが
<code>syntax error, unexpected ';'</code>
としかでないので原因がわかりにくくて困りました。</p>

<p>他のところでも ruby のエラーメッセージそのままなので、
閉じ忘れ系は原因の行と離れたところでエラーになって、
行番号もあまり当てにならなくて不便です。</p>

<h2>真偽値属性の属性値が省略できない</h2>

<p>haml だと <code>%div(data-pjax-container)</code> で <code>&lt;div data-pjax-container&gt;</code> に変換できるのに、
slim だと <code>div(data-pjax-container)</code> が <code>&lt;div data-pjax-container=""&gt;</code> になってしまって、
<code>=""</code> が余計です。</p>

<p><a href="https://github.com/slim-template/slim/issues/480">Render boolean attributes without value in html5</a>
によると
<code>:format</code> を <code>:html</code> にすれば良いということで</p>

<p><code>ruby config/initializers/slim.rb
Slim::Engine.set_default_options format: :html
</code></p>

<p>と設定してみても slim 2.0.2 だと変化がありませんでした。</p>

<p>まだリリースされていないバージョンを使う必要があるようで、
<code>Gemfile</code> で <code>gem 'slim', github: 'slim-template/slim'</code> と指定して
試そうとしたのですが、
rails 3.2.17 との組み合わせは tilt の要求バージョンの解決が
出来なくて使えませんでした。</p>

<p>実験のため slim 専用の Gemfile を用意して以下のように試したところ、
slim と temple の両方をまだリリースされていないバージョンにすると
使えることが確認できました。</p>

<p>```console
% mkdir /tmp/slim-test
% cd /tmp/slim-test
% bundle init
% echo &lsquo;gem &ldquo;slim&rdquo;, github: &ldquo;slim-template/slim&rdquo;&rsquo; >> Gemfile
% echo &lsquo;gem &ldquo;temple&rdquo;, github: &ldquo;judofyr/temple&rdquo;&rsquo; >> Gemfile
% bundle
% echo &lsquo;div(ng-app)&rsquo; | bundle exec slimrb</p>

<div ng-app=""></div>


<p>% echo &lsquo;div(ng-app)&rsquo; | bundle exec slimrb -o format=:html</p>

<div ng-app></div>


<p>```</p>

<p>今のところ、 <code>rack-pjax</code> の使用は止めていて、
 <code>=""</code> がつく挙動で直接困ることはなさそうなので、
この問題は保留することにしました。</p>

<h2>javascript や css の埋め込み</h2>

<p>```haml</p>

<pre><code>:javascript
  window.current_user_id = #{current_user.id.to_i}
</code></pre>

<p>```</p>

<p>のように書いていたら、</p>

<p>```text</p>

<pre><code>javascript:
  | window.current_user_id = #{current_user.id.to_i}
</code></pre>

<p>```</p>

<p>と変換されて <code>|</code> がそのまま <code>script</code> の中身に付いてしまったので、
削除しました。</p>

<p>```text</p>

<pre><code>javascript:
  window.current_user_id = #{current_user.id.to_i}
</code></pre>

<p>```</p>

<p><code>:css</code> から <code>css:</code> の変換でも同様でした。
CSS の場合は行頭が記号だと <code>|</code> がついていないこともありました。</p>

<h2>空白の有無の問題</h2>

<p>```haml</p>

<pre><code>        = link_to home_path, class: 'brand' do
          = image_tag("brand.png", alt: "", size: "35x35")
          = base_title
</code></pre>

<p>```</p>

<p>がそのまま slim になっていて、基本的には問題なかったのですが、
haml と違って slim だとタグとタイトルの間に空白が入らなくなってしまって、
見た目が変わってしまっていたので、
<code>'</code> だけの行を追加して空白が入るようにしました。</p>

<p>```text</p>

<pre><code>        = link_to home_path, class: 'brand' do
          = image_tag("brand.png", alt: "", size: "35x35")
          '
          = base_title
</code></pre>

<p>```</p>

<h2>end が抜けるバグで SyntaxError</h2>

<p><code>syntax error, unexpected keyword_ensure, expecting keyword_end</code>
になるので原因を調べてみたところ、
インデントの中の最初がコメントだと、
そのブロックの <code>end</code> が抜けてしまうようです。</p>

<p>```console
% echo $&lsquo;&ndash; if true\n  / comment&rsquo; | bundle exec slimrb -e
&lt;% if true</p>

<p> %>
% echo $&lsquo;&ndash; if true\n  |&rsquo; | bundle exec slimrb -e
&lt;% if true</p>

<p>end %>
% echo $&lsquo;&ndash; articles.each do |a|\n  / comment&rsquo; | bundle exec slimrb -e
&lt;% articles.each do |a|</p>

<p> %>
% echo $&lsquo;&ndash; articles.each do |a|\n  | text&rsquo; | bundle exec slimrb -e
&lt;% articles.each do |a|
 %>text&lt;%
%>&lt;% end %>
% echo $&lsquo;&ndash; articles.each do |a|\n  / comment\n/ more comment&rsquo; | bundle exec slimrb -e
&lt;% articles.each do |a|</p>

<p> %>
% echo $&lsquo;&ndash; articles.each do |a|\n  / comment\n| text\n/ more comment&rsquo; | bundle exec slimrb -e
&lt;% articles.each do |a|</p>

<p> %>text&lt;%
%>&lt;%
%>
% echo $&lsquo;&ndash; articles.each do |a|\n  / comment\n| text\n&rsquo; | bundle exec slimrb -e
&lt;% articles.each do |a|</p>

<p> %>text&lt;%
%>
```</p>

<p>この件は <a href="https://github.com/slim-template/slim/issues/485">https://github.com/slim-template/slim/issues/485</a> で報告してみました。</p>

<h2>ファイル名の指定が面倒</h2>

<p>これは slim や haml2slim の問題ではないのですが、
zsh で久しぶりに compctl を使って</p>

<pre><code>compctl -g '*.haml' + -g '*(-/)' haml2slim
</code></pre>

<p>と設定しましたが、ちゃんと compsys を使った方が良いと思い直して、</p>

<pre><code>compdef '_files -g "*.haml"' haml2slim
</code></pre>

<p>と設定しました。</p>

<h2>感想</h2>

<p>シンプルとか入力が楽とかいう主観的なものは個人的には同意できなくて利点とは思えないので、
速いという客観的な理由で slim への移行をしているのですが、
haml2slim の出来が悪かったり、
空白の扱いの違いで同じようなソースからでも最終的な見た目が違うものが出来たりして、
移行は思ったより大変な印象を受けました。</p>

<p>はまりどころさえわかっていれば、そこを注意して haml2slim での変換結果を修正していけば良いので、途中からはどんどん変換していけるようになりました。
(まだ一部しか終わっていませんが。)</p>

<p>それなりの数の変換をしてみた結果、最初から slim で書くようにすれば haml と大きな違いはなさそうにも感じました。</p>

<p><code>end</code> 抜けなどの問題が起きたことから、
haml と比べていろんな書き方で使われていなさそうということで、
まだ安定してなさそうと感じました。</p>

<p>また属性値なしの <code>&lt;div ng-app&gt;</code> のような出力に対応しているリリースがまだないなど、
融通が利かない点があって問題が起きそうな可能性がありそうだと感じました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopressをアップデートしてisolateを使い始めた]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-21-update-octopress.html"/>
    <updated>2013-12-21T22:43:36+09:00</updated>
    <id>http://blog.n-z.jp/blog/update-octopress</id>
    <content type="html"><![CDATA[<p>気が向いたので、また octopress の更新をしてみました。
そして <code>rake isolate</code> を使い始めました。</p>

<p>記事中では <code>git fetch --prune</code> とか、
zsh の <code>(mm-1)</code> を使っているので、
カテゴリに <code>git</code> と <code>zsh</code> も付けています。</p>

<!--more-->


<h2>octopress のアップデート</h2>

<p><code>git fetch</code> します。
最近は <code>--prune</code> を付けてリモートで削除されたブランチは手元でも削除されるようにしていることが多いので、
今回も付けています。</p>

<p><code>console
% git remote -v
octopress   git://github.com/imathis/octopress.git (fetch)
octopress   git@github.com:imathis/octopress.git (push)
origin  git@github.com:znz/znz.github.io (fetch)
origin  git@github.com:znz/znz.github.io (push)
origin  ssh://git@bitbucket.org/znz/blog.n-z.jp.git (push)
% git fetch --prune octopress
remote: Counting objects: 33, done.
remote: Compressing objects: 100% (18/18), done.
remote: Total 24 (delta 16), reused 14 (delta 6)
Unpacking objects: 100% (24/24), done.
From git://github.com/imathis/octopress
 * [new branch]      jekyll-1-3 -&gt; octopress/jekyll-1-3
   64ba603..78defff  master     -&gt; octopress/master
%
</code></p>

<p>差分を確認してからマージしました。</p>

<p><code>console
% git diff source...octopress/master
% git merge octopress/master
Auto-merging Rakefile
Merge made by the 'recursive' strategy.
 .themes/classic/sass/base/_theme.scss                     |  2 +-
 .themes/classic/source/_includes/archive_post.html        |  2 +-
 .themes/classic/source/_includes/custom/category_feed.xml |  4 +-
 .themes/classic/source/_includes/disqus.html              |  2 +-
 .themes/classic/source/_includes/head.html                |  4 +-
 .themes/classic/source/atom.xml                           |  4 +-
 README.markdown                                           |  2 +-
 Rakefile                                                  |  6 +--
 plugins/category_generator.rb                             |  3 +-
 plugins/code_block.rb                                     |  2 +-
 plugins/date.rb                                           | 53 +++++++++----------------
 plugins/gist_tag.rb                                       |  8 +++-
 plugins/include_code.rb                                   |  2 +-
 plugins/jsfiddle.rb                                       |  2 +-
 14 files changed, 41 insertions(+), 55 deletions(-)
</code></p>

<p>themes も更新されているので、
<a href="http://octopress.org/docs/updating/">Updating Octopress</a>
の手順に従ってアップデートしました。</p>

<p><code>console
 % bundle install
 Using rake (0.9.2.2)
 Using RedCloth (4.2.9)
 Using chunky_png (1.2.5)
 Using fast-stemmer (1.0.1)
 Using classifier (1.3.3)
 Using fssm (0.2.9)
 Using sass (3.2.9)
 Using compass (0.12.2)
 Using directory_watcher (1.4.1)
 Using haml (3.1.7)
 Using kramdown (0.13.8)
 Using liquid (2.3.0)
 Using syntax (1.0.0)
 Using maruku (0.6.1)
 Using posix-spawn (0.3.6)
 Using yajl-ruby (1.1.0)
 Using pygments.rb (0.3.4)
 Using jekyll (0.12.0)
 Using rack (1.5.2)
 Using rack-protection (1.5.0)
 Using rb-fsevent (0.9.1)
 Using rdiscount (2.0.7.3)
 Using rubypants (0.2.0)
 Using sass-globbing (1.0.0)
 Using tilt (1.3.7)
 Using sinatra (1.4.2)
 Using stringex (1.4.0)
 Using bundler (1.3.5)
 Your bundle is complete!
 Use `bundle show [gemname]` to see where a bundled gem is installed.
 % bundle exec rake update_source
 mkdir source.old
 cp -r source/. source.old
 ## Copied source into source.old/
 cp -r --remove-destination .themes/classic/source/. source
 cp -r --remove-destination source.old/_includes/custom/. source/_includes/custom/
 cp source.old/favicon.png source
 ## Updated source ##
 % bundle exec rake update_style
 mv sass sass.old
 ## Moved styles into sass.old/
 cp -r .themes/classic/sass/ sass
 cp -r sass/custom/. sass.old/custom
 ## Updated Sass ##
 %
</code></p>

<p><code>git diff</code> で確認するとローカルでの変更が消えてしまっていたので、
<code>git checkout ファイルパス</code> で戻したり、
再適用したりしてからコミットしました。</p>

<h2>rake isolate</h2>

<p><a href="http://rcmdnk.github.io/blog/2013/10/07/blog-octopress/">Octopressでチェック用に高速にgenerate/previewする</a>
で紹介されていた
<code>rake isolate[filename]</code>
を使い始めてみました。</p>

<h3>ファイル名の指定を省略する</h3>

<p>最終更新時刻でソートして最新だけ、という絞り込みをしたかったのですが、
zsh の機能だけでうまく表現できなかったので、
<a href="http://qiita.com/mollifier/items/1c4a4930a89aa75e5ced">zsh で find を使わずに簡単にファイルを絞り込む</a>
を参考にして1分以内に変更されたファイルだけという絞り込みで妥協することにしました。</p>

<p><code>console
 bundle exec rake "isolate[$(echo source/_posts/*.markdown(mm-1))]"
 bundle exec rake preview
 bundle exec rake integrate
</code></p>

<h3>rake integrate 忘れを防ぐ</h3>

<p>isolate した状態で deploy する事故を防ぐために
<a href="https://github.com/imathis/octopress/pull/1444">check stash dir before deploy</a>
という変更を入れてから使うようにしてみました。</p>

<p>Rakefile をみてみると</p>

<p><code>ruby Rakefile
desc "Generate website and deploy"
task :gen_deploy =&gt; [:integrate, :generate, :deploy] do
end
</code></p>

<p>となっているので、
<code>bundle exec rake deploy</code> ではなく
<code>bundle exec rake gen_deploy</code> を使うようにしていれば
大丈夫そうですが、
念のためチェックした方が安全だと思いました。</p>

<p>octopress の fork で作成したこの変更は</p>

<p><code>console
git pull git@github.com:znz/octopress.git check-stash-before-deploy
</code></p>

<p>で手元の source ブランチに取り込みました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zshのPATHの自動重複削除や余計なPATHの削除]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-12-zsh-cleanup-path.html"/>
    <updated>2013-12-12T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/zsh-cleanup-path</id>
    <content type="html"><![CDATA[<p>シェルの中から <code>exec zsh</code> をしたり、
GNU screen や tmux を経由して間接的にシェルの中でシェルを開いたりするときに
何も考えずに <code>PATH</code> を追加していくと
どんどん長くなっていってしまうと思います。</p>

<p><code>bash</code> などでも使えるように汎用的にしようとすると自前で頑張らないといけないのですが、
<code>zsh</code> では <code>zsh</code> 自体の機能で簡単に重複を防げます。</p>

<p>また、パスに望ましくないものが入っていた時に削除する方法も紹介します。</p>

<p>この投稿は
<a href="http://qiita.com/advent-calendar/2013/zsh">zsh Advent Calendar 2013</a>
の12日目の記事です。</p>

<!--more-->


<h2>重複削除</h2>

<p>重複を削除するには</p>

<p><code>
typeset -U path PATH
</code></p>

<p>で <code>path</code> と <code>PATH</code> に unique という属性を付けて、
重複した値の最初だけ残すようにします。</p>

<p>ちゃんと設定できていれば、パラメーター展開の <code>t</code>
で調べた時に <code>unique</code> が付いています。</p>

<p><code>
% echo ${(t)path}
array-unique-special
% echo ${(t)PATH}
scalar-export-unique-special
</code></p>

<h2>望ましくないパスの削除</h2>

<p>ここでは 3 種類のパスを望ましくないものとして
除外するようにしました。</p>

<ol>
<li><code>NULL_GLOB</code> の <code>N</code> を使って存在しないディレクトリを除外</li>
<li><code>-/</code> を使ってシンボリックリンクの場合のリンク先もチェックした上でディレクトリのみ残す</li>
<li><code>^W</code> で world-writable という実行ファイルのパスとしては危険なパーミッションになっているディレクトリを除外</li>
</ol>


<p>Glob Qualifiers なので <code>PATH</code> ではなく <code>path</code> を使ってフィルタリングしています。</p>

<p>```
path=(</p>

<pre><code># allow directories only (-/)
# reject world-writable directories (^W)
$path(N-/^W)
</code></pre>

<p>)
```</p>

<h2>まとめ</h2>

<p>ここでは <code>zsh</code> の機能を活用してコマンド探索パス <code>PATH</code> をきれいにする方法を紹介しました。</p>

<p>これを応用して <code>fpath</code> などにも適用してみると良いかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.zshrcの自動再コンパイル]]></title>
    <link href="http://blog.n-z.jp/blog/2013-12-10-auto-zshrc-recompile.html"/>
    <updated>2013-12-10T00:00:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/auto-zshrc-recompile</id>
    <content type="html"><![CDATA[<p>zsh のスクリプトは <code>zcompile</code> コマンドでコンパイルすることができます。
<code>.zshrc</code> も大きくなって読み込みに時間がかかるようになったらコンパイルすれば良さそうですが、
変更したときに手動でコンパイルし直すのは面倒なので、
自動で再コンパイルする設定を紹介します。</p>

<p>この投稿は
<a href="http://qiita.com/advent-calendar/2013/zsh">zsh Advent Calendar 2013</a>
の10日目の記事です。</p>

<!--more-->


<h2>設定方法</h2>

<p><code>.zshrc</code> の適当な場所に以下の設定を追加します。</p>

<p><code>sh
if [ ~/.zshrc -nt ~/.zshrc.zwc ]; then
   zcompile ~/.zshrc
fi
</code></p>

<p>これで <code>.zshrc.zwc</code> より <code>.zshrc</code> の方が新しい時に
<code>zcompile .zshrc</code> が自動で実行されます。</p>

<p><code>.zshrc.zwc</code> がある時だけ実行されるので、
最初に <code>zcompile ~/.zshrc</code> を手動で実行しておきます。</p>

<h2>読み込み順序</h2>

<p>zsh 自体が <code>file.zwc</code> よりも <code>file</code> の方が新しい時に
<code>file</code> の方を読み込むようになっているので、
<code>.zshrc</code> の方が新しくて <code>zcompile</code> し直していないときに
<code>.zshrc.zwc</code> が読み込まれて
古い設定のままになるということはありません。</p>

<h2>自動作成もする場合</h2>

<p>ファイルを分割していて <code>.zshrc</code> はコンパイルする必要がない環境では
何もしない挙動になってほしいので、
こうしていますが、
最初から自動作成してほしいのなら、
存在チェックも付けて以下のようにすれば良いと思います。</p>

<p><code>sh
if [ ! -f ~/.zshrc.zwc -o ~/.zshrc -nt ~/.zshrc.zwc ]; then
   zcompile ~/.zshrc
fi
</code></p>

<h2>まとめ</h2>

<p>ここでは <code>.zshrc</code> だけを対象にしましたが、
他にも自前の <code>fpath</code> のファイルなどで自動で再コンパイルしたいファイルがあれば
同様のことをするのがよいかもしれません。</p>

<p>あまり変更しないファイルなら更新チェックの無駄の方が大きいかもしれないので、
そのトレードオフは考えておく必要がありそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zshでcdの履歴管理に標準添付のcdrを使う]]></title>
    <link href="http://blog.n-z.jp/blog/2013-11-12-zsh-cdr.html"/>
    <updated>2013-11-12T01:16:00+09:00</updated>
    <id>http://blog.n-z.jp/blog/zsh-cdr</id>
    <content type="html"><![CDATA[<p>zsh は <code>cd -[TAB]</code> で補完できる directory stack が
<code>setopt autopushd</code> と組み合わせていると非常に便利なので、
<a href="https://github.com/znz/dot-shell/blob/c197f9e3232e8dca910be4ea4ae555cc60468692/profile.d/50dirstack.zsh">directory stack を自前で保存する仕組みを作った</a>り、
GNU screen の他の WINDOW のディレクトリに移動するための
<a href="https://github.com/znz/dot-shell/blob/523e3adaf9b776f05185acfb24bc19ef5f22c418/profile.d/70cds.zsh">cdsというコマンド</a>
を作ったりして、
現状でもあまり困っていませんでした。</p>

<p>しかし、 <code>zshcontrib(1)</code> に入っているものも試してみるのが
良さそうと思って試してみました。</p>

<!--more-->


<h2>ドキュメント</h2>

<p>ドキュメントは
<code>man zshcontrib</code> か、
<code>pager $^fpath/cdr(N)</code> で読めます。</p>

<h2>cdr コマンドの使い方</h2>

<p><code>cdr [TAB]</code> で補完して使ったり、
<code>cdr -l</code> で一覧を出したり、
<code>cdr -e</code> で一覧を編集したりできます。</p>

<p><code>cdr -e</code> の編集は <code>zle</code> なので、
<code>bindkey -e</code> なら、
普通のカーソル移動などの他に
ただの <code>Enter</code> だと編集終了になってしまうので、
<code>^[^M</code> (<code>ESC</code> に続けて <code>Enter</code>) で改行を入力して行を増やしたり分割したり
出来ることを知っておけば充分だと思います。</p>

<h2>設定全体</h2>

<p>全体としては以下のように設定してみました。</p>

<p>以降は設定内容を個別に解説していきます。</p>

<p><code>sh
if [[ -n $(echo ${^fpath}/chpwd_recent_dirs(N)) &amp;&amp; -n $(echo ${^fpath}/cdr(N)) ]]; then
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
  add-zsh-hook chpwd chpwd_recent_dirs
  zstyle ':completion:*:*:cdr:*:*' menu selection
  zstyle ':completion:*' recent-dirs-insert both
  zstyle ':chpwd:*' recent-dirs-max 500
  zstyle ':chpwd:*' recent-dirs-default true
  zstyle ':chpwd:*' recent-dirs-file "${XDG_CACHE_HOME:-$HOME/.cache}/shell/chpwd-recent-dirs"
  zstyle ':chpwd:*' recent-dirs-pushd true
fi
</code></p>

<h2>使えるかどうかのガード条件</h2>

<p>昔、
zsh の設定を環境ごとに分岐させようとした時、
<code>is-at-least</code> は古い zsh で使えなかったのと、
バックポートで使える可能性があったり、
自前の <code>fpath</code> にファイルを追加した場合などを考慮して、
機能自体の存在をチェックするようにしています。</p>

<p>ruby で推奨されているやり方として、
<code>RUBY_VERSION</code> をチェックするのではなく、
機能の存在をチェックするべき、
という話があったことも影響しています。</p>

<p><code>sh
  if [[ -n $(echo ${^fpath}/chpwd_recent_dirs(N)) &amp;&amp; -n $(echo ${^fpath}/cdr(N)) ]]; then
</code>
Glob Qualifiers の <code>(N)</code> (<code>NULL_GLOB</code>) を使っている関係で、
一度 <code>echo</code> してから <code>-n</code> でチェックしています。
もっと簡潔に書ける方法があれば教えてください。</p>

<h2>autoload</h2>

<p><code>autoload -U</code>
と書いてある設定例もありますが、
ドキュメントにあったように
<code>autoload -Uz</code>
を使っています。</p>

<p><code>-z</code>
を付けないと
<code>KSH_AUTOLOAD</code>
の設定の影響を受けるそうなので、
基本的には <code>-z</code> を明示的に付けるのがおすすめのようです。</p>

<h2>add-zsh-hook</h2>

<p><code>chpwd_functions</code> への追加は</p>

<p><code>sh
typeset -ga chpwd_functions
chpwd_functions+=chpwd_recent_dirs
</code></p>

<p>としても良かったのですが、
念のため <code>typeset</code> するのが最近の zsh しか使わないのなら無駄に感じたのと、
<code>cdr</code> のドキュメントに書いてあったこともあり、
<code>add-zsh-hook</code>
を使ってみました。</p>

<h2>menu selection</h2>

<p>Web で設定例を見ると
<code>zstyle ':completion:*' menu select</code>
になっていることが多いのですが、
基本的に menu select は使っていなかったので、
<code>zshcontrib(1)</code> や
<code>${^fpath}/cdr(N)</code> に書いてあった通りに
<code>':completion:*'</code>
ではなく
<code>':completion:*:*:cdr:*:*'</code>
で、
値も
<code>select</code>
ではなく
<code>selection</code>
で設定しています。</p>

<p><code>sh
  zstyle ':completion:*:*:cdr:*:*' menu selection
</code></p>

<h2>recent-dirs-insert</h2>

<p>これは
<code>cdr [TAB]</code>
の挙動の設定で、
好みが分かれると思うので、
<code>always</code>, <code>fallback</code>, <code>both</code>
を一通り試してみるのをおすすめします。</p>

<p><code>both</code> だと通常の <code>cd</code> の補完にメニューから選ぶ補完候補に履歴が入っているという感じに見えました。
あまりうまく使えていないので、そのうち他の設定に変えて試してみようと思っています。</p>

<h2>recent-dirs-max</h2>

<p>設定を保存する最大数です。
デフォルト値は 20 です。</p>

<h2>recent-dirs-file</h2>

<p><a href="http://standards.freedesktop.org/basedir-spec/latest/index.html">XDG Base Directory Specification</a>
に合わせて <code>~/.cache</code> を使うようにしています。</p>

<p>他の部分で既に <code>mkdir -p</code> しているので、ここでは省略しています。</p>

<p><code>sh
  #mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}/shell"
  zstyle ':chpwd:*' recent-dirs-file "${XDG_CACHE_HOME:-$HOME/.cache}/shell/chpwd-recent-dirs"
</code></p>

<p>ドキュメントにあるように、
以下のような設定にして TTY ごとのファイルと
グローバルのファイルにわけるのも良いかもしれません。</p>

<p><code>sh
  zstyle recent-dirs-file ':chpwd:*' ~/.chpwd-recent-dirs-${TTY##*/} +
</code></p>

<h2>recent-dirs-pushd</h2>

<p>他の設定が影響していたのか、
何が原因だったのかは追求していないのですが、
<code>recent-dirs-pushd</code> を <code>true</code> にしないと
最初はうまく動かなかったのですが、
履歴がたまったからなのか、
なぜか今はこの設定に関係なくちゃんと動いているようです。</p>

<h2>recent-dirs-prune</h2>

<p>recent の一覧に追加しないディレクトリのパターンなどを設定できるようですが、
必要性を感じていないので、
まだ何も設定していません。</p>
]]></content>
  </entry>
  
</feed>
